----++++src/cache_cf.cc
@@ -4103,7 +4103,7 @@ setLogformat(CustomLog *cl, const char *logdef_name, const bool dieWhenMissing)
     debugs(3, 9, &quot;possible &quot; &lt;&lt; cl-&gt;filename &lt;&lt; &quot; logformat: &quot; &lt;&lt; logdef_name);
 
     if (cl-&gt;type != Log::Format::CLF_UNKNOWN) {
-        debugs(3, DBG_CRITICAL, "Second logformat name in one access_log: " &lt;&lt;
+        debugs(3, DBG_CRITICAL, "FATAL: Second logformat name in one access_log: " &lt;&lt;
                logdef_name &lt;&lt; &quot; &quot; &lt;&lt; cl-&gt;type &lt;&lt; &quot; ? &quot; &lt;&lt; Log::Format::CLF_NONE);
         self_destruct();
         return false;
@@ -4142,7 +4142,7 @@ setLogformat(CustomLog *cl, const char *logdef_name, const bool dieWhenMissing)
     } else if (strcmp(logdef_name, &quot;referrer&quot;) == 0) {
         cl-&gt;type = Log::Format::CLF_REFERER;
     } else if (dieWhenMissing) {
-        debugs(3, DBG_CRITICAL, "Log format '" &lt;&lt; logdef_name &lt;&lt; "' is not defined");
+        debugs(3, DBG_CRITICAL, "FATAL: Log format '" &lt;&lt; logdef_name &lt;&lt; "' is not defined");
         self_destruct();
         return false;
     } else {
@@ -4177,7 +4177,8 @@ dump_access_log(StoreEntry * entry, const char *name, CustomLog * logs)
             break;
 
         case Log::Format::CLF_SQUID:
-            storeAppendPrintf(entry, &quot;%s logformat=squid&quot;, log-&gt;filename);
+            // this is the default, no need to add to the dump
+            //storeAppendPrintf(entry, &quot;%s logformat=squid&quot;, log-&gt;filename);
             break;
 
         case Log::Format::CLF_COMBINED:
----++++src/log/Config.cc
@@ -20,9 +20,28 @@ Log::LogConfig::parseFormats()
     char *name, *def;
 
     if (!(name = ConfigParser::NextToken())) {
+        debugs(3, DBG_CRITICAL, &quot;FATAL: missing logformat details in &quot; &lt;&lt; cfg_filename &lt;&lt; &quot; line &quot; &lt;&lt; config_lineno);
         self_destruct();
     }
 
+    // check for re-definition of built-in formats
+    if (strcmp(name, &quot;squid&quot;) == 0 ||
+        strcmp(name, &quot;common&quot;) == 0 ||
+        strcmp(name, &quot;combined&quot;) == 0 ||
+        strcmp(name, &quot;useragent&quot;) == 0 ||
+        strcmp(name, &quot;referrer&quot;) == 0) {
+        debugs(3, DBG_PARSE_NOTE(DBG_IMPORTANT), &quot;ERROR: logformat &quot; &lt;&lt; name &lt;&lt; &quot; is already defined. Ignoring.&quot;);
+        return;
+    }
+
+    // check for re-definition of custom formats
+    for (auto i = logformats; i ; i = i-&gt;next) {
+        if (strcmp(i-&gt;name, name) == 0) {
+            debugs(3, DBG_PARSE_NOTE(DBG_IMPORTANT), &quot;ERROR: logformat &quot; &lt;&lt; name &lt;&lt; &quot; is already defined. Ignoring.&quot;);
+            return;
+        }
+    }
+
     ::Format::Format *nlf = new ::Format::Format(name);
 
     ConfigParser::EnableMacros();
----++++GitHub