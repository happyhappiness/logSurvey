diff --git a/make.texinfo b/make.texinfo
index e4c962e..8914d81 100644
--- a/make.texinfo
+++ b/make.texinfo
@@ -1,13 +1,21 @@
-\input texinfo	@c -*- Texinfo -*-
+\input texinfo  @c -*- Texinfo -*-
+@comment %**start of header (This is for running Texinfo on a region.)
 @setfilename make.info
-@synindex vr fn
+@settitle Make
+@setchapternewpage odd
+@comment %**end of header (This is for running Texinfo on a region.)
+
+@iftex
+@finalout
+@end iftex
 
-@c $Header$
+@comment Combine the variable and function indices.
+@synindex vr fn
 
 @ifinfo
 This file documents the GNU Make utility.
 
-Copyright (C) 1988 Free Software Foundation, Inc.
+Copyright (C) 1988-1991 Free Software Foundation, Inc.
 
 Permission is granted to make and distribute verbatim copies of
 this manual provided the copyright notice and this permission notice
@@ -22,7 +30,7 @@ notice identical to this one except for the removal of this paragraph
 @end ignore
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that
-the section entitled ``Copying Conditions'' is included exactly as in
+the section entitled ``GNU General Public License'' is included exactly as in
 the original, and provided that the entire resulting derived work is
 distributed under the terms of a permission notice identical to this
 one.
@@ -30,25 +38,37 @@ one.
 Permission is granted to copy and distribute translations of this
 manual into another language, under the above conditions for modified
 versions, except that the text of the translations of the section
-entitled ``Copying Conditions'' must be approved for accuracy by the
+entitled ``GNU General Public License'' must be approved for accuracy by the
 Foundation.
 @end ifinfo
-@c
-@setchapternewpage odd
-@settitle Make
 
 @titlepage
-@sp 6
+@sp 10
 @center @titlefont{GNU Make}
-@sp 1
+@sp 2
 @center A Program for Directing Recompilation
 @sp 2
-@center April 1988
-@sp 5
-@center Richard M. Stallman, Roland McGrath
+@center by Richard M. Stallman and Roland McGrath
+@sp 3
+@center Edition 0.28 Beta,
+@sp 1
+@center last updated 18 September 1991,
+@sp 1
+@center for @code{make}, Version 3.61 Beta.
 @page
 @vskip 0pt plus 1filll
-Copyright @copyright{} 1988 Free Software Foundation, Inc.
+Copyright @copyright{} 1988-1991 Free Software Foundation, Inc.
+@sp 2
+
+This is Edition 0.28 Beta of the @cite{GNU Make Manual}, @*
+last updated 18 September 1991, @*
+for @code{make} Version 3.61 Beta.
+
+@sp 2
+Published by the Free Software Foundation @*
+675 Massachusetts Avenue, @*
+Cambridge, MA 02139 USA @*
+Printed copies are available for $15 each.
 
 Permission is granted to make and distribute verbatim copies of
 this manual provided the copyright notice and this permission notice
@@ -56,7 +76,7 @@ are preserved on all copies.
 
 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided also that
-the section entitled ``Copying Conditions'' is included exactly as in
+the section entitled ``GNU General Public License'' is included exactly as in
 the original, and provided that the entire resulting derived work is
 distributed under the terms of a permission notice identical to this
 one.
@@ -64,163 +84,53 @@ one.
 Permission is granted to copy and distribute translations of this
 manual into another language, under the above conditions for modified
 versions, except that the text of the translation of the section
-entitled ``Copying Conditions'' must be approved for accuracy by the
+entitled ``GNU General Public License'' must be approved for accuracy by the
 Foundation.
 @end titlepage
 @page
 
-@node Copying, Bugs, Top, Top
-@unnumbered Copying Conditions
-@center (Clarified 11 Feb 1988)
-
-The license agreements of most software companies keep you at the mercy of
-those companies.  By contrast, our general public license is intended to
-give everyone the right to share GNU Make.  To make sure that you get the
-rights we want you to have, we need to make restrictions that forbid anyone
-to deny you these rights or to ask you to surrender the rights.  Hence this
-license agreement.
-
-Specifically, we want to make sure that you have the right to give away
-copies of GNU Make, that you receive source code or else can get it if you
-want it, that you can change GNU Make or use pieces of it in new free
-programs, and that you know you can do these things.
-
-To make sure that everyone has such rights, we have to forbid you to
-deprive anyone else of these rights.  For example, if you distribute copies
-of GNU Make, you must give the recipients all the rights that you have.
-You must make sure that they, too, receive or can get the source code.  And
-you must tell them their rights.
-
-Also, for our own protection, we must make certain that everyone finds out
-that there is no warranty for GNU Make.  If GNU Make is modified by someone
-else and passed on, we want its recipients to know that what they have is
-not what we distributed, so that any problems introduced by others will not
-reflect on our reputation.
-
-Therefore we (Richard Stallman and the Free Software Foundation,
-Inc.) make the following terms which say what you must do to be
-allowed to distribute or change GNU Make.
-
-@unnumberedsec Copying Policies
-
-@enumerate
-@item
-You may copy and distribute verbatim copies of GNU Make source code as
-you receive it, in any medium, provided that you conspicuously and
-appropriately publish on each copy a valid copyright notice
-``Copyright @copyright{} 1988 Free Software Foundation, Inc.'' (or
-with whatever year is appropriate), and include following the
-copyright notice a verbatim copy of the above disclaimer of warranty
-and of this License.  You may charge a distribution fee for the
-physical act of transferring a copy.
-
-@item
-You may modify your copy or copies of GNU Make or any portion of it,
-and copy and distribute such modifications under the terms of
-Paragraph 1 above, provided that you also do the following:
-
-@itemize @bullet
-@item
-cause the modified files to carry prominent notices stating
-that you changed the files and the date of any change; and
-
-@item
-cause the whole of any work that you distribute or publish, that
-in whole or in part contains or is a derivative of Bison or any
-part thereof, to be licensed at no charge to all third parties on
-terms identical to those contained in this License Agreement
-(except that you may choose to grant more extensive warranty
-protection to some or all third parties, at your option).
-
-@item
-You may charge a distribution fee for the physical act of
-transferring a copy, and you may at your option offer warranty
-protection in exchange for a fee.
-@end itemize
+@node     Top, Overview, , (dir)
+@comment  node-name,  next,  previous,  up
 
-Mere aggregation of another unrelated program with this program (or its
-derivative) on a volume of a storage or distribution medium does not bring
-the other program under the scope of these terms.
-
-@item
-You may copy and distribute GNU Make (or a portion or derivative of it,
-under Paragraph 2) in object code or executable form under the terms
-of Paragraphs 1 and 2 above provided that you also do one of the
-following:
+@ifinfo
+The GNU @code{make} utility determines automatically which pieces of a
+large program need to be recompiled, and issues the commands to
+recompile them.  This manual describes it and contains the following
+chapters:
+@end ifinfo
 
-@itemize @bullet
-@item
-accompany it with the complete corresponding machine-readable
-source code, which must be distributed under the terms of
-Paragraphs 1 and 2 above; or,
+@menu
+* Overview::    Introducing @code{make}.
+* Copying::     Copying conditions for GNU @code{make}.
+* Bugs::        If you have problems, or think you've found a bug.
+* Simple::      A simple example explained.
+* Makefiles::   The data base contains rules and variable definitions.
+* Rules::       A rule says how and when to remake one file.
+* Commands::    A rule contains shell commands that say how to remake.
+* Variables::   A variable holds a text string for substitution into rules.
+* Conditionals::Makefiles that do one thing or another depending on
+                 variable values.
+* Functions::   Functions can do text-processing within @code{make}.
 
-@item
-accompany it with a written offer, valid for at least three
-years, to give any third party free (except for a nominal
-shipping charge) a complete machine-readable copy of the
-corresponding source code, to be distributed under the terms of
-Paragraphs 1 and 2 above; or,
+* Running::     How to run @code{make}; how you can adjust the way
+                 @code{make} uses the makefile.
 
-@item
-accompany it with the information you received as to where the
-corresponding source code may be obtained.  (This alternative is
-allowed only for noncommercial distribution and only if you
-received the program in object code or executable form alone.)
-@end itemize
+* Implicit::    Implicit rules take over if the makefile doesn't say
+                 how a file is to be remade.
+* Archives::    How to use @code{make} to update archive files.
 
-For an executable file, complete source code means all the source code
-for all modules it contains; but, as a special exception, it need not
-include source code for modules which are standard libraries that
-accompany the operating system on which the executable file runs.
+* Features::    GNU @code{make}'s advanced features and how GNU @code{make}
+                 relates to other versions of @code{make}.
+* Missing::     Features of other @code{make}s not supported
+                 by GNU @code{make}.
 
-@item
-You may not copy, sublicense, distribute or transfer GNU Make except as
-expressly provided under this License Agreement.  Any attempt
-otherwise to copy, sublicense, distribute or transfer GNU Make is void
-and your rights to use the program under this License agreement shall
-be automatically terminated.  However, parties who have received
-computer software programs from you with this License Agreement will
-not have their licenses terminated so long as such parties remain in
-full compliance.
+* Concept Index::Index of cross-references to where concepts are discussed.
+* Name Index::  Index of cross-references for names of @code{make}'s
+                 variables, functions, special targets and directives.
+@end menu
 
-@item
-If you wish to incorporate parts of GNU Make into other free programs
-whose distribution conditions are different, write to the Free Software
-Foundation at 675 Mass Ave, Cambridge, MA 02139.  We have not yet worked
-out a simple rule that can be stated here, but we will often permit this.
-We will be guided by the two goals of preserving the free status of all
-derivatives of our free software and of promoting the sharing and reuse of
-software.
-@end enumerate
 
-Your comments and suggestions about our licensing policies and our
-software are welcome!  Please contact the Free Software Foundation, Inc.,
-675 Mass Ave, Cambridge, MA 02139, or call (617) 876-3296.
-
-@unnumberedsec NO WARRANTY
-
-  BECAUSE GNU MAKE IS LICENSED FREE OF CHARGE, WE PROVIDE ABSOLUTELY NO
-WARRANTY, TO THE EXTENT PERMITTED BY APPLICABLE STATE LAW.  EXCEPT
-WHEN OTHERWISE STATED IN WRITING, THE FREE SOFTWARE FOUNDATION, INC,
-RICHARD M. STALLMAN AND/OR OTHER PARTIES PROVIDE GNU MAKE "AS IS" WITHOUT
-WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
-LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
-PERFORMANCE OF GNU MAKE IS WITH YOU.  SHOULD GNU MAKE PROVE DEFECTIVE, YOU
-ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
-
- IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW WILL RICHARD M.
-STALLMAN, THE FREE SOFTWARE FOUNDATION, INC., AND/OR ANY OTHER PARTY
-WHO MAY MODIFY AND REDISTRIBUTE GNU MAKE AS PERMITTED ABOVE, BE LIABLE TO
-YOU FOR DAMAGES, INCLUDING ANY LOST PROFITS, LOST MONIES, OR OTHER
-SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
-INABILITY TO USE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
-BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY THIRD PARTIES OR A
-FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS) GNU MAKE, EVEN
-IF YOU HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES, OR FOR
-ANY CLAIM BY ANY OTHER PARTY.
-
-@node Top, Copying,, (DIR)
+@node Overview, Copying, Top, Top
 @chapter Overview of @code{make}
 
 The purpose of the @code{make} utility is to determine automatically which
@@ -258,37 +168,12 @@ Command arguments to @code{make} can be used to control which files should
 be recompiled, or how.  @xref{Running}.
 @end iftex
 
-@menu
-* Copying::	Copying conditions for GNU Make.
-* Bugs::	If you have problems, or think you've found a bug.
-* Simple::	A simple example explained.
-* Makefiles::	The data base contains rules and variable definitions.
-* Rules::	A rule says how and when to remake one file.
-* Commands::	A rule contains shell commands that say how to remake.
-* Variables::	A variable holds a text string for substitution into rules.
-* Conditionals::Makefiles that do one thing or another depending on
-		 variable values.
-* Functions::	Functions can do text-processing within @code{make}.
-
-* Running::	How to run @code{make}; how you can adjust the way
-		 @code{make} uses the makefile.
-
-* Implicit::	Implicit rules take over if the makefile doesn't say
-		 how a file is to be remade.
-* Archives::	How to use @code{make} to update archive files.
+@node Copying, Bugs, Overview, Top
 
-* Features::	GNU @code{make}'s advanced features and how GNU @code{make}
-		 relates to other versions of @code{make}.
-* Missing::	Features of other @code{make}s not supported
-		 by GNU @code{make}.
-
-* Concept Index::Index of cross-references to where concepts are discussed.
-* Name Index::	Index of cross-references for names of @code{make}'s
-		 variables, functions, special targets and directives.
-@end menu
+@include gpl.texinfo
 
 @node Bugs, Simple, Copying, Top
-@section Problems and Bugs
+@chapter Problems and Bugs
 
 If you have problems with GNU @code{make} or think you've found a bug,
 please report it to Roland McGrath; he doesn't promise to do anything
@@ -315,11 +200,11 @@ Non-bug suggestions are always welcome as well.
 If you have questions about things that are unclear in the documentation
 or are just obscure features, ask Roland McGrath; he'll be happy to help
 you out (but no promises).  You can send him electronic mail at Internet
-address @samp{roland@@wheaties.ai.mit.edu} or UUCP path
-@samp{mit-eddie!wheaties.ai.mit.edu!roland}.
+address @samp{roland@@prep.ai.mit.edu} or UUCP path
+@samp{mit-eddie!prep.ai.mit.edu!roland}.@refill
 
 @node Simple, Makefiles, Bugs, Top
-@section Simple Example of @code{make}
+@chapter Simple Example of @code{make}
 
 Suppose we have a text editor consisting of eight C source files and three
 header files.  We need a makefile to tell @code{make} how to compile and
@@ -393,7 +278,7 @@ to you to supply commands that will update the target file properly.
 All @code{make} does is execute the commands you have specified when the
 target file needs to be updated.
 
-@subsection How @code{make} Processes This Makefile
+@section How @code{make} Processes This Makefile
 
 After reading the makefile, @code{make} begins its real work by processing
 the first rule, the one for relinking @file{edit}; but before it can fully
@@ -408,7 +293,7 @@ Before recompiling an object file, @code{make} considers updating its
 dependencies, the source file and header files.  This makefile does not
 specify anything to be done for them---the @samp{.c} and @samp{.h} files
 are not the targets of any rules---so nothing needs to be done.  But
-automatically generated C programs, such as made by Yacc (or Bison), would
+automatically generated C programs, such as made by Bison or Yacc, would
 be updated by their own rules at this time.
 
 After recompiling whichever object files need it, @code{make} can now
@@ -417,7 +302,13 @@ decide whether to relink @file{edit}.  This must be done if the file
 it.  If an object file was just recompiled, it is now newer than
 @file{edit}, so @file{edit} will be relinked.
 
-@subsection Variables Make Makefiles Simpler
+Thus, if we change the file @file{insert.c} and run @code{make},
+@code{make} will compile that file to update @file{insert.o}, and then
+link @file{edit}.  If we change the file @file{command.h} and run
+@code{make}, @code{make} will recompile the object files @file{kbd.o},
+@file{commands.o} and @file{files.o} and then link file @file{edit}.
+
+@section Variables Make Makefiles Simpler
 
 In our example, we had to list all the object files twice in the rule for
 @file{edit} (repeated here):
@@ -436,7 +327,7 @@ the risk and simplify the makefile by using a @dfn{variable}.  Variables
 allow a text string to be defined once and substituted in multiple places
 later (@pxref{Variables}).
 
-It's standard practice for every makefile to have a variable named
+It is standard practice for every makefile to have a variable named
 @code{objects}, @code{OBJECTS}, @code{objs}, @code{OBJS}, @code{obj} or
 @code{OBJ} which is a list of all object file names.  We would define
 such a variable @code{objects} with a line like this in the makefile:@refill
@@ -457,7 +348,7 @@ edit : $(objects)
         cc -o edit $(objects)
 @end example
 
-@subsection Letting @code{make} Deduce the Commands
+@section Letting @code{make} Deduce the Commands
 
 It is not necessary to spell out the commands for compiling the individual
 C source files, because @code{make} can figure them out: it has an
@@ -494,7 +385,7 @@ utils.o : defs.h
 @noindent
 This is how we would write the makefile in actual practice.
 
-@subsection Another Style of Makefile
+@section Another Style of Makefile
 
 Since the rules for the object files specify only dependencies, no
 commands, one can alternatively combine them by dependency instead of by
@@ -521,6 +412,28 @@ Whether this is better is a matter of taste: it is more compact, but some
 people dislike it because they find it clearer to put all the information
 about each target in one place.
 
+@section Rules for Cleaning the Directory
+
+Compiling a program isn't the only thing you might want to write rules
+for.  Makefiles commonly tell how to do a few other things besides
+compiling the program: for example, how to delete all the object files
+and executables so that the directory is ``clean''.  Here is how we
+would write a @code{make} rule for cleaning our example editor:
+
+@example
+clean:
+        rm edit $(objects)
+@end example
+
+@noindent
+This rule would be added at the end of the makefile, because we don't
+want it to run by default!  We want the rule for @code{edit}, which
+recompiles the editor, to remain the default goal.
+
+Since @code{clean} is not a dependency of @code{edit}, this rule won't
+run at all if we give the command @samp{make} with no arguments.  In
+order to make the rule run, we have to type @samp{make clean}.
+
 @node Makefiles, Rules, Simple, Top
 @chapter Writing Makefiles
 
@@ -530,9 +443,12 @@ reading a data base called the @dfn{makefile}.
 
 @menu
 * Contents: Makefile Contents.   Overview of what you put in a makefile.
-* Names: Makefile Names.	 Where @code{make} finds the makefile.
-* MAKEFILES Variable::           The environment can specify extra makefiles.
+* Names: Makefile Names.         Where @code{make} finds the makefile.
 * Include::                      How one makefile can use another makefile.
+* MAKEFILES Variable::           The environment can specify extra makefiles.
+* Remaking Makefiles::           How makefiles get remade.
+* Overriding Makefiles::         How to override part of one makefile
+                                 with another makefile.
 @end menu
 
 @node Makefile Contents, Makefile Names, Makefiles, Makefiles
@@ -550,11 +466,11 @@ and may also give commands to use to create or update the targets.
 @xref{Rules}.
 
 @item
-A variable definition is a line that specifies a text string value for
-a @dfn{variable} that can be substituted into the text later.  The
-simple makefile example (@pxref{Simple}) shows a variable definition
-for @code{objects} as a list of all object files.  @xref{Variables},
-for full details.
+A variable definition is a line that specifies a text string value
+for a @dfn{variable} that can be substituted into the text later.
+The simple makefile example (@pxref{Simple}) shows a variable definition
+for @code{objects} as a list of all object files.
+@xref{Variables}, for full details.
 
 @item
 A directive is a command for @code{make} to do something special while
@@ -576,63 +492,48 @@ Defining a variable from a verbatim string containing multiple lines
 @item
 @cindex comments
 @samp{#} in a line of a makefile starts a comment.  It and the rest of
-the line are ignored.  Comments may appear on any of the lines in the
-makefile, except within a @code{define} directive, and perhaps within
-commands (where the shell decides what is a comment).  A line
-containing just a comment (with perhaps spaces before it) is
-effectively blank, and is ignored.
+the line are ignored, except that a trailing backslash not escaped by
+another backslash will continue the comment across multiple lines.
+Comments may appear on any of the lines in the makefile, except within a
+@code{define} directive, and perhaps within commands (where the shell
+decides what is a comment).  A line containing just a comment (with
+perhaps spaces before it) is effectively blank, and is ignored.@refill
 @end itemize
 
-@node Makefile Names, MAKEFILES Variable, Makefile Contents, Makefiles
+@node Makefile Names, Include, Makefile Contents, Makefiles
 @section What Name to Give Your Makefile
+@cindex makefile names
+@cindex names of makefiles
+@cindex default makefile names
 
 By default, when @code{make} looks for the makefile, it tries the names
-@file{./makefile} and @file{./Makefile} in that order.  So normally you call
-your makefile by one of these two names, and @code{make} finds it
-automatically.  We recommend @file{Makefile} because it appears prominently
-near the beginning of a directory listing (right near other important
-files such as @file{README}).@refill
-
-If @code{make} finds neither of these two names, it does not use any
-makefile.  Then you must specify a goal with a command argument, and
-@code{make} will attempt to figure out how to remake it using only its
-built-in implicit rules.  @xref{Implicit}.
-
+@file{GNUmakefile}, @file{makefile} and @file{Makefile}, in that order.
+
+Normally you should call your makefile either @file{makefile} or
+@file{Makefile}.  (We recommend @file{Makefile} because it appears
+prominently near the beginning of a directory listing, right near other
+important files such as @file{README}.)  The first name checked,
+@file{GNUmakefile}, is not recommended for most makefiles.  You should
+use this name if you have a makefile that is specific to GNU
+@code{make}, and will not be understood by other versions of
+@code{make}.
+
+If @code{make} finds none of these names, it does not use any makefile.
+Then you must specify a goal with a command argument, and @code{make}
+will attempt to figure out how to remake it using only its built-in
+implicit rules.  @xref{Implicit}.
+
+@cindex @code{-f}
 If you want to use a nonstandard name for your makefile, you can specify
 the makefile name with the @samp{-f} option.  The arguments @samp{-f
-@var{name}} tell @code{make} to read the file @var{name} as the makefile.
-If you use more than one @samp{-f} option, you can specify several
-makefiles.  All the makefiles are effectively concatenated in the order
-specified.  The default makefile names @file{./makefile} and
-@file{./Makefile} are not used if you specify @samp{-f}.@refill
-
-@node MAKEFILES Variable, Include, Makefile Names, Makefiles
-@section The Variable @code{MAKEFILES}
-
-@vindex MAKEFILES
-If the environment variable @code{MAKEFILES} is defined, @code{make}
-considers its value as a list of names (separated by whitespace) of
-additional makefiles to be read before the others.  This works much like
-the @code{include} directive: various directories are searched for those
-files and the default goal is never taken from them.  @xref{Include}.  In
-addition, it is not an error if the files listed in @code{MAKEFILES} are
-not found.@refill
-
-The main use of @code{MAKEFILES} is in communication between recursive
-invocations of @code{make} (@pxref{Recursion}).  It usually isn't
-desirable to set the environment variable before a top-level invocation
-of @code{make}, because it is usually better not to mess with a makefile
-from outside.  However, if you are running @code{make} without a specific
-makefile, a makefile in @code{MAKEFILES} can do useful things to help the
-built-in implicit rules work better, such as defining search paths.
-
-Some users are tempted to set @code{MAKEFILES} in the environment
-automatically on login, and program makefiles to expect this to be done.
-This is a very bad idea, because such makefiles will fail to work if run by
-anyone else.  It is much better to write explicit @code{include} directives
-in the makefiles.
-
-@node Include,, MAKEFILES Variable, Makefiles
+@var{name}} tell @code{make} to read the file @var{name} as the
+makefile.  If you use more than one @samp{-f} option, you can specify
+several makefiles.  All the makefiles are effectively concatenated in
+the order specified.  The default makefile names @file{GNUmakefile},
+@file{makefile} and @file{Makefile} are not checked automatically if you
+specify @samp{-f}.@refill
+
+@node Include, MAKEFILES Variable, Makefile Names, Makefiles
 @section Including Other Makefiles
 
 @findex include
@@ -649,14 +550,13 @@ tab is not allowed.  (If the line begins with a tab, it will be considered
 a command line.)  Whitespace is required between @code{include} and
 @var{filename}; extra whitespace is ignored there and at the end of the
 directive.  A comment starting with @samp{#} is allowed at the end of the
-line.
+line.  If @var{filename} contains any variable or function references, they
+are expanded.  (@xref{Variables}.)
 
-Reading of the containing makefile is temporarily suspended while the file
-@var{filename} is read as a makefile.  When that is finished, @code{make}
-goes on with reading the makefile in which the directive appears.
-
-The default goal target is never taken from an included makefile
-(@pxref{Goals}).
+When @code{make} processes an @code{include} directive, it suspends
+reading of the containing makefile and reads from @var{filename}
+instead.  When that is finished, @code{make} resumes reading the
+makefile in which the directive appears.
 
 One occasion for using @code{include} directives is when several programs,
 handled by individual makefiles in various directories, need to use a
@@ -676,7 +576,137 @@ searched (@pxref{Options}).  Then the following directories (if they
 exist) are searched, in this order: @file{/usr/gnu/include},
 @file{/usr/local/include}, @file{/usr/include}.
 If an included makefile cannot be found in any of these directories, a
-warning message is generated, but it is not a fatal error.@refill
+warning message is generated, but it is not a fatal error; processing
+of the makefile containing the @code{include} continues.@refill
+
+@node MAKEFILES Variable, Remaking Makefiles, Include, Makefiles
+@section The Variable @code{MAKEFILES}
+
+@vindex MAKEFILES
+If the environment variable @code{MAKEFILES} is defined, @code{make}
+considers its value as a list of names (separated by whitespace) of
+additional makefiles to be read before the others.  This works much like
+the @code{include} directive: various directories are searched for those
+files (@pxref{Include}).  In addition, the default goal is never taken
+from one of these makefiles and it is not an error if the files listed
+in @code{MAKEFILES} are not found.@refill
+
+The main use of @code{MAKEFILES} is in communication between recursive
+invocations of @code{make} (@pxref{Recursion}).  It usually isn't
+desirable to set the environment variable before a top-level invocation
+of @code{make}, because it is usually better not to mess with a makefile
+from outside.  However, if you are running @code{make} without a specific
+makefile, a makefile in @code{MAKEFILES} can do useful things to help the
+built-in implicit rules work better, such as defining search paths.
+
+Some users are tempted to set @code{MAKEFILES} in the environment
+automatically on login, and program makefiles to expect this to be done.
+This is a very bad idea, because such makefiles will fail to work if run by
+anyone else.  It is much better to write explicit @code{include} directives
+in the makefiles.
+
+@node Remaking Makefiles, Overriding Makefiles, MAKEFILES Variable, Makefiles
+@section How Makefiles Are Remade
+
+@cindex updating makefiles
+@cindex remaking makefiles
+@cindex makefiles, remaking of
+Sometimes makefiles can be remade from other files, such as RCS or SCCS
+files.  If a makefile can be remade from other files, you probably want
+@code{make} to get an up-to-date version of the makefile to read in.
+
+To this end, after reading in all makefiles, @code{make} will consider
+each as a goal target and attempt to update it.  If a makefile has a
+rule which says how to update it (found either in that very makefile or
+in another one) or if an implicit rule applies to it (@pxref{Implicit}),
+it will be updated if necessary.  After all makefiles have been checked,
+if any have actually been changed, @code{make} starts with a clean slate
+and reads all the makefiles over again.  (It will also attempt to update
+each of them over again, but normally this will not change them again,
+since they are already up to date.)@refill
+
+If the makefiles specify commands to remake a file but no dependencies,
+the file will always be remade.  In the case of makefiles, a makefile
+that has commands but no dependencies will be remade every time
+@code{make} is run, and then again after @code{make} starts over and
+reads the makefiles in again.  This would cause an infinite loop;
+@code{make} would constantly remake the makefile, and never do anything
+else.  So, to avoid this, @code{make} will @emph{not} attempt to remake
+makefiles which are specified as targets but have no dependencies.@refill
+
+If you do not specify any makefiles to be read with @samp{-f} options,
+@code{make} will try the default makefile names; @pxref{Makefile Names}.
+Unlike makefiles explicitly requested with @samp{-f} options,
+@code{make} is not certain that these makefiles should exist.  However,
+if a default makefile does not exist but can be created by running
+@code{make} rules, you probably want the rules to be run so that the
+makefile can be used.
+
+Therefore, if none of the default makefiles exists, @code{make} will try
+to make each of them in the same order in which they are searched for
+(@pxref{Makefile Names}) until it succeeds in making one, or it runs out
+of names to try.  Note that it is not an error if @code{make} cannot
+find or make any makefile; a makefile is not always necessary.@refill
+
+When you use the @samp{-t} option (touch targets), you would not want to
+use an out-of-date makefile to decide which targets to touch.  So the
+@samp{-t} option has no effect on updating makefiles; they are really
+updated even if @samp{-t} is specified.  Likewise, @samp{-q} and
+@samp{-n} do not prevent updating of makefiles, because an out-of-date
+makefile would result in the wrong output for other targets.  Thus,
+@samp{make -f mfile -n foo} will update @file{mfile}, read it in, and
+then print the commands to update @file{foo} and its dependencies
+without running them.  The commands printed for @file{foo} will be those
+specified in the updated contents of @file{mfile}.
+
+However, on occasion you might actually wish to prevent updating of even
+the makefiles.  You can do this by specifying the makefiles as goals in
+the command line as well as specifying them as makefiles.  When the
+makefile name is specified explicitly as a goal, the options @samp{-t}
+and so on do apply to them.
+
+Thus, @samp{make -f mfile -n mfile foo} would read the makefile
+@file{mfile}, print the commands needed to update it without actually
+running them, and then print the commands needed to update @file{foo}
+without running them.  The commands for @file{foo} will be those
+specified by the existing contents of @file{mfile}.
+
+@node Overriding Makefiles,  , Remaking Makefiles, Makefiles
+@section Overriding Part of One Makefile with Another Makefile
+
+@cindex overriding makefiles
+Sometimes it is useful to have a makefile that is mostly just like
+another makefile.  You can often use the @samp{include} directive to
+include one in the other, and add more targets or variable definitions.
+However, if the two makefiles give different commands for the same
+target, @code{make} will not let you just do this.  But there is another way.
+
+In the containing makefile (the one that wants to include the other),
+you can use the @code{.DEFAULT} special target to say that to remake any
+target that cannot be made from the information in the containing
+makefile, @code{make} should look in another makefile.  @xref{Last
+Resort}, for more information on @code{.DEFAULT}.
+
+For example, if you have a makefile called @file{Makefile} that says how
+to make the target @samp{foo} (and other targets), you can write a
+makefile called @file{GNUmakefile} that contains:
+
+@example
+foo:
+        frobnicate > foo
+
+.DEFAULT:
+        @@$(MAKE) -f Makefile $@@
+@end example
+
+If you say @samp{make foo}, @code{make} will find @file{GNUmakefile},
+read it, and see that to make @file{foo}, it needs to run the command
+@samp{frobnicate > foo}.  If you say @samp{make bar}, @code{make} will
+find no way to make @file{bar} in @file{GNUmakefile}, so it will use the
+commands from @code{.DEFAULT}: @samp{make -f Makefile bar}.  If
+@file{Makefile} provides a rule for updating @file{bar}, @code{make}
+will apply the rule.  And likewise for any other target that
+@file{GNUmakefile} does not say how to make.@refill
 
 @node Rules, Commands, Makefiles, Top
 @chapter Writing Rules
@@ -690,26 +720,33 @@ It lists the other files that are the @dfn{dependencies} of the target, and
 @dfn{commands} to use to create or update the target.
 
 The order of rules is not significant, except for determining the
-@dfn{default goal}: the target for @code{make} to consider, if you do not
-otherwise specify one.  The default goal comes from the first rule (not
-counting included makefiles) whose target does not start with a period.
-Therefore, the first rule is normally one for compiling the entire program
-or all the programs described by the makefile.  @xref{Goals}.
+@dfn{default goal}: the target for @code{make} to consider, if you do
+not otherwise specify one.  The default goal is the target of the first
+rule in the first makefile, except that targets starting with a period
+do not count unless they contain slashes as well; also, a target that
+defines a pattern rule (@pxref{Pattern Rules}) or a suffix rule
+(@pxref{Suffix Rules}) has no effect on the default goal.
+
+Therefore, we usually write the makefile so that the first rule is the
+one for compiling the entire program or all the programs described by
+the makefile.  @xref{Goals}.
 
 @menu
 * Rule Example::        An explained example of a rule.
-* Rule Syntax::	        General syntax of rules, with explanation.
+* Rule Syntax::         General syntax of rules, with explanation.
 
-* Wildcards::	        Using wildcard characters like `*' in file names.
+* Wildcards::           Using wildcard characters like `*' in file names.
 * Directory Search::    Searching other directories for source files.
 
 * Phony Targets::       Using a target that isn't a real file's name.
+* Force Targets::       A target without commands or dependencies can
+                         be used to mark other targets as phony.
 * Special Targets::     Targets with special built-in meanings.
 * Empty Targets::       Real files that are empty--only the date matters.
 * Multiple Targets::    When it is useful to have several targets in a rule.
-* Static Pattern::	Static pattern rules apply to multiple targets
-			 and can vary the dependencies according to the
-			 target name.
+* Static Pattern::      Static pattern rules apply to multiple targets
+                         and can vary the dependencies according to the
+                         target name.
 * Multiple Rules::      Using several rules with the same target.
 * Double-Colon::        Special kind of rule allowing
                           several independent rules for one target.
@@ -719,7 +756,7 @@ or all the programs described by the makefile.  @xref{Goals}.
 
 @ifinfo
 @node Rule Example, Rule Syntax, Rules, Rules
-@isubsection Rule Example
+@isection Rule Example
 
 Here is an example of a rule:
 
@@ -772,9 +809,10 @@ or like this:
 
 The @var{targets} are file names, separated by spaces.  Wild card
 characters may be used (@pxref{Wildcards}) and a name of the form
-@file{@var{a}(@var{m})} represents member @var{m} in archive file @var{a}
-(@pxref{Archive Members}).  Usually there is only one target per rule, but
-occasionally there is a reason to have more (@pxref{Multiple Targets}).
+@file{@var{a}(@var{m})} represents member @var{m} in archive file
+@var{a} (@pxref{Archive Members}).  Usually there is only one target
+per rule, but occasionally there is a reason to have more; @xref{Multiple
+Targets}.@refill
 
 The @var{command} lines start with a tab character.  The first command may
 appear on the line after the dependencies, with a tab character, or may
@@ -783,9 +821,9 @@ same.  @xref{Commands}.
 
 Because dollar signs are used to start variable references, if you really
 want a dollar sign in the rule you must write two of them (@samp{$$}).
-@xref{Variables}.  A long line may be split by inserting a backslash
-followed by a newline, but this is not required, as there is no limit on
-the length of a line.
+@xref{Variables}.  You may split a long line by inserting a backslash
+followed by a newline, but this is not required, as @code{make} places no
+limit on the length of a line in a makefile.
 
 A rule tells @code{make} two things: when the targets are out of date,
 and how to update them when necessary.
@@ -814,6 +852,14 @@ The wildcard characters in @code{make} are @samp{*}, @samp{?} and
 specifies a list of all the files (in the working directory) whose names
 end in @samp{.c}.@refill
 
+@cindex ~
+The character @samp{~} at the beginning of a file name also has special
+significance.  If alone, or followed by a slash, it represents your home
+directory.  For example @file{~/bin} expands to @file{/home/you/bin}.
+If the @samp{~} is followed by a word, the string represents the home
+directory of the user named by that word.  For example @file{~me/bin}
+expands to @file{/home/me/bin}.@refill
+
 Wildcard expansion happens automatically in targets, in dependencies, and
 in commands.  In other contexts, wildcard expansion happens only if you
 request it explicitly with the @code{wildcard} function.
@@ -831,7 +877,7 @@ specific file whose name consists of @samp{foo}, an asterisk, and
        using the function @code{wildcard}.
 @end menu
 
-@node Wildcard Examples, Wildcard Function, Wildcards, Wildcards
+@node Wildcard Examples, Wildcard Pitfall, Wildcards, Wildcards
 @subsection Wildcard Examples
 
 Wildcards can be used in the commands of a rule.  For example, here is a
@@ -893,9 +939,9 @@ expand into @emph{nothing}.  The target @file{foo} will have no
 dependencies and would be remade by linking no object files.  This is not
 what you want!
 
-Actually you can use wildcard expansion for this purpose, but you need more
-sophisticated techniques, including the @code{wildcard} function and string
-substitution.
+Actually it is possible to obtain the desired result with wildcard
+expansion, but you need more sophisticated techniques, including the
+@code{wildcard} function and string substitution.
 @ifinfo
 @xref{Wildcard Function}.
 @end ifinfo
@@ -903,7 +949,7 @@ substitution.
 These are described in the following section.
 @end iftex
 
-@node Wildcard Function,, Wildcard Pitfall, Wildcards
+@node Wildcard Function,  , Wildcard Pitfall, Wildcards
 @subsection The Function @code{wildcard}
 @findex wildcard
 
@@ -916,6 +962,7 @@ places, you need to use the @code{wildcard} function, like this:
 $(wildcard @var{pattern})
 @end example
 
+@noindent
 This string, used anywhere in a makefile, is replaced by a space-separated
 list of names of existing files that match the pattern @var{pattern}.
 
@@ -933,7 +980,9 @@ substituting @samp{.o} for @samp{.c} in the result, like this:
 $(subst .c,.o,$(wildcard *.c))
 @end example
 
-Here we have used another function, @code{subst} (@pxref{Text Functions}).
+@noindent
+(Here we have used another function, @code{subst}.
+@xref{Text Functions}.)@refill
 
 Thus, a makefile to compile all C source files in the directory and then
 link them together could be written as follows:
@@ -947,7 +996,9 @@ foo : $(objects)
 
 @noindent
 (This takes advantage of the implicit rule for compiling C programs, so
-there is no need to write explicit rules for compiling the files.)
+there is no need to write explicit rules for compiling the files.
+@xref{Flavors}, for an explanation of @samp{:=}, which is a variant of
+@samp{=}.)
 
 @node Directory Search, Phony Targets, Wildcards, Rules
 @section Searching Directories for Dependencies
@@ -965,11 +1016,11 @@ you do not need to change the individual rules, just the search paths.
 
 @menu
 * General Search::    The @code{VPATH} variable specifies a search path
-			that applies to every dependency.
+                        that applies to every dependency.
 * Selective Search::  The @code{vpath} directive specifies a search path
-			for a specified class of names.
+                        for a specified class of names.
 * Commands/Search::   How to write shell commands that work together
-			with search paths.
+                        with search paths.
 * Implicit/Search::   How search paths affect implicit rules.
 * Libraries/Search::  Directory search for link libraries.
 @end menu
@@ -977,9 +1028,10 @@ you do not need to change the individual rules, just the search paths.
 @node General Search, Selective Search, Directory Search, Directory Search
 @subsection @code{VPATH}: Search Path for All Dependencies
 
-The value of the variable @code{VPATH} is a list of directories which
-@code{make} should search (in the order specified) for dependency files.
-The directory names are separated by colons.  For example:
+The value of the @code{make} variable @code{VPATH} specifies a list of
+directories which @code{make} should search (in the order specified) for
+dependency files.  The directory names are separated by colons.  For
+example:
 
 @example
 VPATH = src:../headers
@@ -1026,8 +1078,7 @@ There are three forms of the @code{vpath} directive:
 @item vpath @var{pattern} @var{directories}
 Specify the search path @var{directories} for filenames that match
 @code{pattern}.  If another path was previously specified for the same
-pattern, the new path replaces it.  Note that it does @emph{not} add
-to the old path for this pattern.@refill
+pattern, the new path is effectively appended to the old path.@refill
 
 The search path, @var{directories}, is a colon-separated list of
 directories to be searched, just like the search path used in the
@@ -1043,14 +1094,30 @@ Clear all search paths previously specified with @code{vpath} directives.
 A @code{vpath} pattern is a string containing a @samp{%} character.  The
 string must match the filename of a dependency that is being searched for,
 the @samp{%} character matching any sequence of zero or more characters (as
-in pattern rules; @pxref{Pattern Rules}).  (It is valid to omit the
-@samp{%}, but then the pattern must match the dependency exactly, which may
-not be very useful.)
+in pattern rules; @pxref{Pattern Rules}).  (If there is no @samp{%}, the
+pattern must match the dependency, which is not useful very often.)
+
+@samp{%} characters in a @code{vpath} directive's pattern can be quoted
+with preceding backslashes (@samp{\}).  Backslashes that would otherwise
+quote @samp{%} characters can be quoted with more backslashes.
+Backslashes that quote @samp{%} characters or other backslashes are
+removed from the pattern before it is compared to file names.  Backslashes
+that are not in danger of quoting @samp{%} characters go unmolested.@refill
 
 When a dependency fails to exist in the current directory, if the
 @var{pattern} in a @code{vpath} directive matches the name of the
 dependency file, then the @var{directories} in that directive are searched
-just like (and before) the directories in the @code{VPATH} variable.@refill
+just like (and before) the directories in the @code{VPATH} variable.  For
+example,
+
+@example
+vpath %.h ../headers
+@end example
+
+@noindent
+tells @code{make} to look for any dependency whose name ends in @file{.h}
+in the directory @file{../headers} if the file is not found in the current
+directory.
 
 If several @code{vpath} patterns match the dependency file's name, then
 @code{make} processes each matching @code{vpath} directive one by one,
@@ -1058,7 +1125,7 @@ searching all the directories mentioned in each directive.  The @code{vpath}
 directives are processed in the order in which they appear in the makefiles.
 
 @node Commands/Search, Implicit/Search, Selective Search, Directory Search
-@subsection Writing Shell-Commands with Directory Search
+@subsection Writing Shell Commands with Directory Search
 
 When a dependency is found in another directory through directory search,
 this cannot change the commands of the rule; they will execute as written.
@@ -1066,9 +1133,10 @@ Therefore, you must write the commands with care so that they will look for
 the dependency in the directory where @code{make} finds it.
 
 This is done with the @dfn{automatic variables} such as @samp{$^}
-(@pxref{Automatic}).  For instance, the value of @samp{$^} is a list of all
-the dependencies of the rule, including the names of the directories in
-which they were found, and the value of @samp{$@@} is the target.  Thus:
+(@pxref{Automatic}).  For instance, the value of @samp{$^} is a
+list of all the dependencies of the rule, including the names of
+the directories in which they were found, and the value of
+@samp{$@@} is the target.  Thus:@refill
 
 @example
 foo.o : foo.c
@@ -1114,7 +1182,7 @@ The commands of all the built-in implicit rules normally use automatic
 variables as a matter of necessity; consequently they will use the file
 names found by directory search with no extra effort.
 
-@node Libraries/Search,, Implicit/Search, Directory Search
+@node Libraries/Search,  , Implicit/Search, Directory Search
 @subsection Directory Search for Link Libraries
 
 Directory search applies in a special way to libraries used with the
@@ -1147,15 +1215,14 @@ used only for comparing the file time with the target file's time.  It
 does not replace the file's name in later usage (such as in automatic
 variables like @code{$^}); the name remains unchanged, still starting
 with @samp{-l}.  This leads to the correct results because the linker
-will repeat the appropriate search when it processes its arguments.@refill
+will repeat the appropriate search when it processes this argument.@refill
 
-@node Phony Targets, Empty Targets, Directory Search, Rules
+@node Phony Targets, Force Targets, Directory Search, Rules
 @section Phony Targets
 @cindex phony targets
 
-A phony target is one that is not really the name of a file.
-It is only a name for some commands to be executed when explicitly
-requested.
+A phony target is one that is not really the name of a file.  It is just a
+name for some commands to be executed when you make an explicit request.
 
 If you write a rule whose commands will not create the target file, the
 commands will be executed every time the target comes up for remaking.
@@ -1173,24 +1240,24 @@ will be executed every time you say @samp{make clean}.
 
 @findex .PHONY
 The phony target will cease to work if anything ever does create a file
-named @file{clean} in this directory.  Since there are no dependencies, the
-@file{clean} would be considered up to date and its commands would not be
-executed.  To avoid this problem, you can explicitly declare the target to
-be phony, using the special target @code{.PHONY} (@pxref{Special Targets})
-as follows:
+named @file{clean} in this directory.  Since it has no dependencies, the
+file @file{clean} would inevitably be considered up to date, and its
+commands would not be executed.  To avoid this problem, you can explicitly
+declare the target to be phony, using the special target @code{.PHONY}
+(@pxref{Special Targets}) as follows:
 
 @example
 .PHONY : clean
 @end example
 
 @noindent
-Once this is done, @code{make} will run the commands regardless of whether
-there is a file named @file{clean}.
+Once this is done, @samp{make clean} will run the commands regardless of
+whether there is a file named @file{clean}.
 
 A phony target should not be a dependency of a real target file; strange
 things can result from that.  As long as you don't do that, the phony
-target commands will be executed only when the phony target is a goal
-(@pxref{Goals}).
+target commands will be executed only when the phony target is a specified
+goal (@pxref{Goals}).
 
 Phony targets can have dependencies.  When one directory contains multiple
 programs, it is most convenient to describe all of the programs in one
@@ -1232,7 +1299,32 @@ cleandiff :
         rm *.diff
 @end example
 
-@node Empty Targets, Special Targets, Phony Targets, Rules
+@node Force Targets, Empty Targets, Phony Targets, Rules
+@section Rules without Commands or Dependencies
+
+If a rule has no dependencies or commands, and the target of the rule
+is a nonexistent file, then @code{make} imagines this target to have
+been updated whenever its rule is run.  This implies that all targets
+depending on this one will always have their commands run.
+
+An example will illustrate this:
+
+@example
+clean: FORCE
+        rm $(objects)
+FORCE:
+@end example
+
+Here the target @samp{FORCE} satisfies the special conditions, so the
+target @file{clean} that depends on it is forced to run its commands.
+There is nothing special about the name @samp{FORCE}, but that is one name
+commonly used this way.
+
+As you can see, using @samp{FORCE} this way has the same results as using
+@samp{.PHONY: clean}.  The latter is more explicit, but other versions of
+@code{make} do not support it; thus @samp{FORCE} appears in many makefiles.
+
+@node Empty Targets, Special Targets, Force Targets, Rules
 @section Empty Target Files to Record Events
 @cindex empty targets
 
@@ -1242,7 +1334,7 @@ Unlike a phony target, this target file can really exist; but the file's
 contents do not matter, and usually are empty.
 
 The purpose of the empty target file is to record, with its
-last-modification-time, when the rule's commands were last executed.  It
+last-modification time, when the rule's commands were last executed.  It
 does so because one of the commands is a @code{touch} command to update the
 target file.
 
@@ -1279,8 +1371,8 @@ time is.  @xref{Phony Targets}.
 
 @item .SUFFIXES
 The dependencies of the special target @code{.SUFFIXES} are the list
-of suffixes to be used in checking for suffix rules (@pxref{Suffix
-Rules}).
+of suffixes to be used in checking for suffix rules.  @xref{Suffix
+Rules}.
 
 @item .DEFAULT
 The commands specified for @code{.DEFAULT} are used for any target for
@@ -1304,7 +1396,7 @@ errors in execution of commands.  The dependencies and commands for
 @samp{.IGNORE} exists for historical compatibility.  Since
 @code{.IGNORE} affects every command in the makefile, it is not very
 useful; we recommend you use the more selective ways to ignore errors
-in specific commands (@pxref{Errors}).
+in specific commands.  @xref{Errors}.
 
 @item .SILENT
 Simply by being mentioned as a target, @code{.SILENT} says not to
@@ -1312,20 +1404,20 @@ print commands before executing them.  The dependencies and commands
 for @code{.SILENT} are not meaningful.
 
 @samp{.SILENT} exists for historical compatibility.  We recommend you
-use the more selective ways to silence specific commands
-(@pxref{Echoing}).
+use the more selective ways to silence specific commands.
+@xref{Echoing}.
 @end table
 
-An entire class of special targets have names made of the concatenation of
-two implicit rule suffixes (two members of the list of dependencies of
-@code{.SUFFIXES}).  Such special targets are suffix rules, an obsolete way
-of defining implicit rules (but a way still widely used).  In principle,
-any target name could be special in this way if you break it in two and add
+Any defined implicit rule suffix also counts as a special target if it
+appears as a target, and so does the concatenation of two suffixes, such
+as @samp{.c.o}.  These targets are suffix rules, an obsolete way of
+defining implicit rules (but a way still widely used).  In principle, any
+target name could be special in this way if you break it in two and add
 both pieces to the suffix list.  In practice, suffixes normally begin with
 @samp{.}, so these special target names also begin with @samp{.}.
 @xref{Suffix Rules}.
 
-@node Multiple Targets, Multiple Rules, Special Targets, Rules
+@node Multiple Targets, Static Pattern, Special Targets, Rules
 @section Multiple Targets in a Rule
 
 A rule with multiple targets is equivalent to writing many rules, each with
@@ -1354,12 +1446,12 @@ to be absolutely identical, since the automatic variable @samp{$@@}
 can be used to substitute the particular target to be remade into the
 commands (@pxref{Automatic}).  For example:
 
-@group
 @example
+@group
 bigoutput littleoutput : text.g
         generate text.g -$(subst output,,$@@) > $@@
-@end example
 @end group
+@end example
 
 @noindent
 is equivalent to
@@ -1396,7 +1488,7 @@ targets don't have to have identical dependencies.  Their dependencies must
 be @emph{analogous}, but not necessarily @emph{identical}.
 
 @menu
-* Usage: Static Usage.	How to use static pattern rules.
+* Usage: Static Usage.  How to use static pattern rules.
 * Static vs Implicit::  When are they better than implicit rules?
 @end menu
 
@@ -1429,29 +1521,41 @@ pattern must match exactly.  For example, the target @file{foo.o} matches
 the pattern @samp{%.o}, with @samp{foo} as the stem.  The targets
 @file{foo.c} and @file{foo.out} don't match that pattern.@refill
 
-The dependency names for each target are made by substituting the stem for
-the @samp{%} in each dependency pattern.  For example, if one dependency
-pattern is @file{%.c}, then substitution of the stem @samp{foo} gives the
-dependency name @file{foo.c}.  It is fine to write a dependency pattern that
-doesn't contain @samp{%}; then this dependency is the same for all targets.
+The dependency names for each target are made by substituting the stem
+for the @samp{%} in each dependency pattern.  For example, if one
+dependency pattern is @file{%.c}, then substitution of the stem
+@samp{foo} gives the dependency name @file{foo.c}.  It is legitimate
+to write a dependency pattern that doesn't contain @samp{%}; then this
+dependency is the same for all targets.
+
+@samp{%} characters in pattern rules can be quoted with preceding
+backslashes (@samp{\}).  Backslashes that would otherwise quote @samp{%}
+characters can be quoted with more backslashes.  Backslashes that quote
+@samp{%} characters or other backslashes are removed from the pattern
+before it is compared file names or has a stem substituted into it.
+Backslashes that are not in danger of quoting @samp{%} characters go
+unmolested.  For example, the pattern @file{the\%weird\\%pattern\\} has
+@samp{the%weird\} preceding the operative @samp{%} character, and
+@samp{pattern\\} following it.  The final two backslashes are left alone
+because they can't affect any @samp{%} character.@refill
 
 Here is an example, which compiles each of @file{foo.o} and @file{bar.o}
 from the corresponding @file{.c} file:
 
 @example
-objects := foo.o bar.o
+objects = foo.o bar.o
 
 $(objects): %.o: %.c
         $(CC) -c $(CFLAGS) $< -o $@@
 @end example
 
 Each target specified must match the target pattern; a warning is issued
-for each that does not.  If you have a list of files, only some of which
-will match the pattern, you can use the @code{filter} function to remove
-nonmatching filenames (@pxref{Text Functions}):
+for each target that does not.  If you have a list of files, only some of
+which will match the pattern, you can use the @code{filter} function to
+remove nonmatching filenames (@pxref{Text Functions}):
 
 @example
-files := foo.elc bar.o
+files = foo.elc bar.o lose.o
 
 $(filter %.o,$(files)): %.o: %.c
         $(CC) -c $(CFLAGS) $< -o $@@
@@ -1460,12 +1564,13 @@ $(filter %.elc,$(files)): %.elc: %.el
 @end example
 
 @noindent
-Here the result of @samp{$(filter %.o,$(files))} is just @file{bar.o}, and
-the first static pattern rule causes it to be made from @file{bar.c}.  The
-result of @samp{$(filter %.elc,$(files))} is @file{foo.elc}, which is
-made from @file{foo.el}.@refill
+Here the result of @samp{$(filter %.o,$(files))} is @file{bar.o lose.o},
+and the first static pattern rule causes each of these object files to be
+updated by compiling the corresponding C source file.  The result of
+@samp{$(filter %.elc,$(files))} is @file{foo.elc}, so that file is made
+from @file{foo.el}.@refill
 
-@node Static vs Implicit,, Static Usage, Static Pattern
+@node Static vs Implicit,  , Static Usage, Static Pattern
 @subsection Static Pattern Rules versus Implicit Rules
 
 A static pattern rule has much in common with an implicit rule defined as a
@@ -1505,11 +1610,19 @@ to precisely the targets specified.
 @node Multiple Rules, Double-Colon, Static Pattern, Rules
 @section Multiple Rules for One Target
 
-One file can be the target of several rules if at most one rule has commands.
-The other rules can only have dependencies.  All the dependencies mentioned
-in all the rules are merged into one list of dependencies for the target.
-If the target is older than any dependency from any rule, the commands are
-executed.
+One file can be the target of several rules.  All the dependencies
+mentioned in all the rules are merged into one list of dependencies for
+the target.  If the target is older than any dependency from any rule,
+the commands are executed.
+
+There can only be one set of commands to be executed for a file.
+If more than one rule gives commands for the same file, the last
+@code{make} uses the last set given and prints an error message.
+(As a special case, if the file's name begins with a dot, no
+error message is printed.  This odd behavior is only for
+compatibility with other @code{make}s.)  There is no reason to
+write your makefiles this way; that is why @code{make} gives you
+an error message.@refill
 
 An extra rule with just dependencies can be used to give a few extra
 dependencies to many files at once.  For example, one usually has a
@@ -1533,8 +1646,10 @@ a variable that you could set with a command argument to @code{make}
 (@pxref{Overriding}).  For example,
 
 @example
+@group
 extradeps=
 $(objects) : $(extradeps)
+@end group
 @end example
 
 @noindent
@@ -1546,7 +1661,7 @@ If none of the explicit rules for a target has commands, then @code{make}
 searches for an applicable implicit rule to find some commands.
 @xref{Implicit}.
 
-@node Double-Colon,, Multiple Rules, Rules
+@node Double-Colon,  , Multiple Rules, Rules
 @section Double-Colon Rules
 @cindex double-colon rule
 
@@ -1560,10 +1675,19 @@ them is independent of the others.  Each double-colon rule's commands are
 executed if the target is older than any dependencies of that rule.  This
 can result in executing none, any or all of the double-colon rules.
 
+Double-colon rules with the same target are in fact completely separate
+from one another.  Each double-colon rule is processed individually, just
+as rules with different targets are processed.
+
 The double-colon rules for a target are executed in the order they appear
 in the makefile.  However, the cases where double-colon rules really make
 sense are those where the order of executing the commands would not matter.
 
+Double-colon rules are somewhat obscure and not often very useful; they
+provide a mechanism for cases in which the method used to update a target
+differs depending on which dependency files caused the update, and such
+cases are rare.
+
 Each double-colon rule should specify commands; if it does not, an
 implicit rule will be used if one applies.  @xref{Implicit}.
 
@@ -1588,12 +1712,15 @@ a @samp{#} at the start of a word starts a comment.
 * Echoing::       Normally commands are echoed before execution,
                     but you can control this in several ways.
 * Execution::     How commands are executed.
-* Errors::	  What happens after an error in command execution.
-		   How to ignore errors in certain commands.
-* Interrupts::	  If a command is interrupted or killed,
-		   the target may be deleted.
-* Recursion::	  Invoking @code{make} from commands in makefiles.
+* Parallel::      Commands of several rules can be executed in parallel,
+                    to reduce total time.
+* Errors::        What happens after an error in command execution.
+                   How to ignore errors in certain commands.
+* Interrupts::    If a command is interrupted or killed,
+                   the target may be deleted.
+* Recursion::     Invoking @code{make} from commands in makefiles.
 * Sequences::     Defining canned sequences of commands.
+* Empty Commands::Defining commands that do nothing (but are useful).
 @end menu
 
 @node Echoing, Execution, Commands, Commands
@@ -1602,15 +1729,19 @@ a @samp{#} at the start of a word starts a comment.
 @cindex echoing (of commands)
 @cindex silent operation
 @cindex @@ (in commands)
-@cindex -n
 Normally @code{make} prints each command line before it is executed.
 We call this @dfn{echoing} because it gives the appearance that you
 are typing the commands yourself.
 
-When a line starts with @samp{@@}, it is normally not echoed.  The
-@samp{@@} is discarded before the command is passed to the shell.
-Typically you would use this for a command whose only effect is to
-print something, such as an @code{echo} command.
+When a line starts with @samp{@@}, the echoing of that line is suppressed.
+The @samp{@@} is discarded before the command is passed to the shell.
+Typically you would use this for a command whose only effect is to print
+something, such as an @code{echo} command to indicate progress through
+the makefile:
+
+@example
+@@echo About to make distribution files
+@end example
 
 When @code{make} is given the flag @samp{-n}, echoing is all that happens,
 no execution.  @xref{Options}.  In this case and only this case, even the
@@ -1618,21 +1749,21 @@ commands starting with @samp{@@} are printed.  This flag is useful for
 finding out which commands @code{make} thinks are necessary without
 actually doing them.
 
-@cindex -s
+@cindex @code{-s}
 @findex .SILENT
 The @samp{-s} flag to @code{make} prevents all echoing, as if all commands
 started with @samp{@@}.  A rule in the makefile for the special target
 @code{.SILENT} has the same effect (@pxref{Special Targets}).
-@code{.SILENT} is essentially obsolete since @samp{@@} is more general.@refill
+@code{.SILENT} is essentially obsolete since @samp{@@} is more flexible.@refill
 
-@node Execution, Errors, Echoing, Commands
+@node Execution, Parallel, Echoing, Commands
 @section Command Execution
 @cindex execution
 @cindex shell
 
 When it is time to execute commands to update a target, they are executed
-one at a time by making a new subshell for each line.  (In practice,
-@code{make} may take shortcuts that do not affect the results.)
+by making a new subshell for each line.  (In practice, @code{make} may
+take shortcuts that do not affect the results.)
 
 This implies that shell commands such as @code{cd} that set variables local
 to each process will not affect the following command lines.  If you want
@@ -1652,13 +1783,13 @@ Such a sequence of lines is combined into a single line, by deleting the
 backslash-newline sequences, before passing it to the shell.  Thus, the
 following is equivalent to the preceding example:
 
-@group
 @example
+@group
 foo : bar/lose
         cd bar;  \
         gobble lose > ../foo
-@end example
 @end group
+@end example
 
 @vindex SHELL
 The program used as the shell is taken from the variable @code{SHELL}.
@@ -1671,7 +1802,77 @@ of shell program for interactive use.  It would be very bad for personal
 choices like this to affect the functioning of makefiles.
 @xref{Environment}.
 
-@node Errors, Interrupts, Execution, Commands
+@node Parallel, Errors, Execution, Commands
+@section Parallel Execution
+
+@cindex parallel execution
+@cindex execution in parallel
+@cindex job slots
+GNU @code{make} knows how to execute several commands at once.
+Normally, @code{make} will execute only one command at a time, waiting
+for it to finish before executing the next.  However, the @samp{-j}
+option tells @code{make} to execute many commands simultaneously.@refill
+
+If the @samp{-j} option is followed by an integer, this is the number of
+commands to execute at once; this is called the number of @dfn{job slots}.
+If there is nothing looking like an integer after the @samp{-j} option,
+there is no limit on the number of job slots.  The default number of job
+slots is one, which means serial execution (one thing at a time).
+
+One unpleasant consequence of running several commands simultaneously is
+that output from all of the commands comes when the commands send it, so
+messages from different commands may be interspersed.
+
+Another problem is that two processes cannot both take input from the same
+device; so to make sure that only one command tries to take input from the
+terminal at once, @code{make} will invalidate the standard input streams of
+all but one running command.  This means that attempting to read from
+standard input, for most child processes if there are several, will usually
+be a fatal error (a @samp{Broken pipe} signal).
+
+It is unpredictable which command will have a valid standard input stream
+(which will come from the terminal, or wherever you redirect the standard
+input of @code{make}).  The first command run will always get it first, and
+the first command started after that one finishes will get it next, and so
+on.
+
+We will change how this aspect of @code{make} works if we find a better
+alternative.  In the mean time, you should not rely on any command using
+standard input at all if you are using the parallel execution feature; but
+if you are not using this feature, then standard input works normally in
+all commands.
+
+If a command fails (is killed by a signal or exits with a nonzero
+status), and errors are not ignored for that command (@pxref{Errors}),
+the remaining command lines to remake the same target will not be run.
+If a command fails and the @samp{-k} option was not given
+(@pxref{Options}), @code{make} aborts execution.  If make terminates for
+any reason (including a signal) with child processes running, it waits
+for them to finish before actually exiting.@refill
+
+When the system is heavily loaded, you will probably want to run fewer jobs
+than when it is lightly loaded.  You can use the @samp{-l} option to tell
+@code{make} to limit the number of jobs to run at once, based on the load
+average.  The @samp{-l} option is followed by a floating-point number.  For
+example,
+
+@example
+-l 2.5
+@end example
+
+@noindent
+will not let @code{make} start more than one job if the load average is
+above 2.5.  The @samp{-l} option with no following number removes the
+load limit, if one was given with a previous @samp{-l} option.@refill
+
+More precisely, when @code{make} goes to start up a job, and it already has
+at least one job running, it checks the current load average; if it is not
+lower than the limit given with @samp{-l}, @code{make} waits until the load
+average goes below that limit, or until all the other jobs finish.
+
+By default, there is no load limit.
+
+@node Errors, Interrupts, Parallel, Commands
 @section Errors in Commands
 
 @cindex error (in commands)
@@ -1682,29 +1883,33 @@ a new shell, or after the last command line is executed, the rule is finished.
 If there is an error (the exit status is nonzero), @code{make} gives up on
 the current rule, and perhaps on all rules.
 
-Sometimes it does not matter whether a command fails.  For example, you
-may use the @code{mkdir} command to insure that a directory exists.  If
-the directory already exists, @code{mkdir} will report an error, but you
-probably want @code{make} to continue regardless.
+Sometimes the failure of a certain command does not indicate a problem.
+For example, you may use the @code{mkdir} command to insure that a
+directory exists.  If the directory already exists, @code{mkdir} will
+report an error, but you probably want @code{make} to continue regardless.
 
 @cindex - (in commands)
 To ignore errors in a command line, write a @samp{-} at the beginning of
 the line's text (after the initial tab).  The @samp{-} is discarded before
-the command is passed to the shell for execution.
+the command is passed to the shell for execution.  For example,
+
+@example
+clean:
+        -rm -f *.o
+@end example
 
-@cindex -i
+@cindex @code{-i}
 @findex .IGNORE
 When @code{make} is run with the @samp{-i} flag, errors are ignored in
 all commands of all rules.  A rule in the makefile for the special target
 @code{.IGNORE} has the same effect.  These ways of ignoring errors are
-obsolete because @samp{-} is more general.
+obsolete because @samp{-} is more flexible.
 
 When errors are to be ignored, because of either a @samp{-} or the
 @samp{-i} flag, @code{make} treats an error return just like success,
 except that it prints out a message telling you the status code the
 command exited with and saying that the error has been ignored.
 
-@cindex -k
 When an error happens that @code{make} has not been told to ignore,
 it implies that the current target cannot be correctly remade, and neither
 can any other that depends on it either directly or indirectly.  No further
@@ -1739,8 +1944,15 @@ done if the target file's last-modification time has changed since
 @code{make} first checked it.
 
 The purpose of deleting the target is to make sure that it is remade from
-scratch when @code{make} is next run.  Otherwise, a partially written file
-could appear to be valid, since it is more recent than the dependencies.
+scratch when @code{make} is next run.  Why is this?  Suppose you type
+@kbd{Ctrl-c} while a compiler is running, and it has begun to write an
+object file @file{foo.o}.  The @kbd{Ctrl-c} kills the compiler, resulting
+in an incomplete file whose last-modification time is newer than the source
+file @file{foo.c}.  But @code{make} also receives the @kbd{Ctrl-c} signal
+and deletes this incomplete file.  If @code{make} did not do this, the next
+invocation of @code{make} would think that @file{foo.o} did not require
+updating---resulting in a strange error message from the linker when it
+tries to link an object file half of which is missing.
 
 @findex .PRECIOUS
 You can prevent the deletion of a target file in this way by making the
@@ -1748,9 +1960,9 @@ special target @code{.PRECIOUS} depend on it.  Before remaking a target,
 @code{make} checks to see whether it appears on the dependencies of
 @code{.PRECIOUS}, and thereby decides whether the target should be deleted
 if a signal happens.  Some reasons why you might do this are that the
-target is updated in some atomic fashion or exists only to record a
-modification-time (its contents do not matter) or will cause trouble if it
-ever fails to exist.
+target is updated in some atomic fashion, or exists only to record a
+modification-time (its contents do not matter), or must exist at all
+times to prevent other sorts of trouble.
 
 @node Recursion, Sequences, Interrupts, Commands
 @section Recursive Use of @code{make}
@@ -1773,7 +1985,7 @@ or, equivalently, this (@pxref{Options}):
 
 @example
 subsystem:
-        $(MAKE) -c subdir
+        $(MAKE) -C subdir
 @end example
 
 You can write recursive @code{make} commands just by copying this example,
@@ -1835,13 +2047,20 @@ files, or print the commands, is propagated to the subsystem.@refill
 
 Most variable values of the top-level @code{make} are passed to the
 sub-@code{make} through the environment.  These variables are defined in
-the sub-@code{make} as defaults, but do not override what is specified in
-the sub-@code{make}'s makefile.  (Variables are passed down if their names
-consist of letters, numbers and underscores.)
+the sub-@code{make} as defaults, but do not override what is specified
+in the sub-@code{make}'s makefile.
+
+Variables are passed down if their names consist only of letters,
+numbers and underscores.  Some shells cannot cope with environment
+variable names consisting of characters other than letters, numbers,
+and underscores.
 
-The way this works is that @code{make} adds each variable and its value to
-the environment for running each command.  (Variables whose names start
-with non-alphanumeric characters are left out.)  The sub-@code{make}, in
+Variable are @emph{not} passed down if they were created by default by
+@code{make} (@pxref{Implicit Variables}).  The sub-@code{make} will
+define these for itself.@refill
+
+The way this works is that @code{make} adds each variable and its value
+to the environment for running each command.  The sub-@code{make}, in
 turn, uses the environment to initialize its table of variable values.
 @xref{Environment}.
 
@@ -1880,14 +2099,30 @@ As a consequence, every sub-@code{make} gets a value for @code{MAKEFLAGS}
 in its environment.  In response, it takes the flags from that value and
 processes them as if they had been given as arguments.  @xref{Options}.
 
-The options @samp{-c}, @samp{-d}, @samp{-f}, @samp{-I}, @samp{-o}, and
-@samp{-p} are not put into @code{MAKEFLAGS}; these options are not passed
-down.@refill
+The options @samp{-C}, @samp{-f}, @samp{-I}, @samp{-o}, and @samp{-W}
+are not put into @code{MAKEFLAGS}; these options are not passed down.@refill
+
+The @samp{-j} (@pxref{Parallel}) option is a special case.  If you set
+it to some numeric value, @samp{-j 1} is always put into
+@code{MAKEFLAGS} instead of the value you specified.  This is because if
+the @samp{-j} option were passed down to sub-@code{make}s, you would get
+many more jobs running in parallel than you asked for.  If you give
+@samp{-j} with no numeric argument, meaning to run as many jobs as
+possible in parallel, this is passed down, since multiple infinities are
+no more than one.@refill
 
 If you don't want to pass the other flags down, you must change the
 value of @code{MAKEFLAGS}, like this:
 
 @example
+MAKEFLAGS=
+subsystem:
+        cd subdir; $(MAKE)
+@end example
+
+or like this:
+
+@example
 subsystem:
         cd subdir; $(MAKE) MAKEFLAGS=
 @end example
@@ -1906,14 +2141,34 @@ subsystem:
 @noindent
 but now @code{MAKEFLAGS} makes this usage redundant.
 
-@node -w Option,, Options/Recursion, Recursion
+@cindex setting options from the environment
+@cindex options, setting from the environment
+@cindex setting options in makefiles
+@cindex options, setting in makefiles
+The @code{MAKEFLAGS} and @code{MFLAGS} variables can also be useful if you
+want to have certain options, such as @samp{-k} (@pxref{Options}) set each
+time you run @code{make}.  Just put @samp{MAKEFLAGS=k} or @samp{MFLAGS=-k}
+in your environment.  These variables may also be set in makefiles, so a
+makefile can specify additional flags that should also be in effect for
+that makefile.@refill
+
+If you do put @code{MAKEFLAGS} or @code{MFLAGS} in your environment, you
+should be sure not to include any options that will drastically affect
+the actions of @code{make} and undermine the purpose of makefiles and of
+@code{make} itself.  For instance, the @samp{-t}, @samp{-n}, and
+@samp{-q} options, if put in one of these variables, could have
+disastrous consequences and would certainly have at least surprising and
+probably annoying effects.@refill
+
+@node -w Option,  , Options/Recursion, Recursion
 @subsection The @samp{-w} Option
 
-If you are running @code{make} over a large directory tree, the @samp{-w}
-option can make the output a lot easier to understand by showing each
-directory as it is entered and exited.  For example, if @samp{make -w} is
-run in the directory @file{/u/gnu/make}, @code{make} will print a line of
-the form:@refill
+If you use several levels of recursive @code{make} invocations, the
+@samp{-w} option can make the output a lot easier to understand by showing
+each directory as @code{make} starts processing it and as @code{make}
+finishes processing it.  For example, if @samp{make -w} is run in the
+directory @file{/u/gnu/make}, @code{make} will print a line of the
+form:@refill
 
 @example
 make: Entering directory `/u/gnu/make'.
@@ -1929,7 +2184,7 @@ make: Leaving directory `/u/gnu/make'.
 @noindent
 when processing is completed.
 
-@node Sequences,, Recursion, Commands
+@node Sequences, Empty Commands, Recursion, Commands
 @section Defining Canned Command Sequences
 @cindex sequences of commands
 
@@ -1981,6 +2236,34 @@ This is a realistic example, but this particular one is not needed in
 practice because @code{make} has an implicit rule to figure out these
 commands based on the file names involved.  @xref{Implicit}.
 
+@node Empty Commands,  , Sequences, Commands
+@section Defining Empty Commands
+@cindex empty commands
+
+It is sometimes useful to define commands which do nothing.  This is done
+simply by giving a command that consists of nothing but whitespace.  For
+example:
+
+@example
+target:;
+@end example
+
+@noindent
+defines an empty command string for @file{target}.  You could also use a
+line beginning with a tab character to define an empty command string,
+but this would be confusing because such a line looks empty.
+
+You may be wondering why you would want to define a command string that
+does nothing.  The only reason this is useful is to prevent a target
+from getting implicit commands (from implicit rules or the
+@code{.DEFAULT} special target; @pxref{Implicit} and @pxref{Last Resort}).
+
+You may be inclined to define empty command strings for targets that are
+not actual files, but only exist so that their dependencies can be
+remade.  However, this is not the best way to do that, because if the
+target file actually does exist, its dependencies may not be remade.
+@xref{Phony Targets}, for a better way to do this.
+
 @node Variables, Conditionals, Commands, Top
 @chapter How to Use Variables
 @cindex variable
@@ -1998,7 +2281,7 @@ programs to run, directories to look in for source files, directories to
 write output in, or anything else you can imagine.
 
 A variable name may be any sequence characters not containing @samp{:},
-@samp{#}, @samp{=}, leading or trailing whitespace.  However,
+@samp{#}, @samp{=}, or leading or trailing whitespace.  However,
 variable names containing characters other than letters, numbers and
 underscores should be avoided, as they may be given special meanings in the
 future, and they are not passed through the environment to a
@@ -2011,20 +2294,19 @@ control implicit rules or for parameters that the user should override with
 command options (@pxref{Overriding}).
 
 @menu
-* Reference::	How to use the value of a variable.
+* Reference::   How to use the value of a variable.
+* Flavors::     Variables come in two flavors.
+* Advanced::    Advanced features for referencing a variable.
 * Values::      All the ways variables get their values.
-* Flavors::	Variables come in two flavors.
-* Setting::	How to set a variable in the makefile.
+* Setting::     How to set a variable in the makefile.
 * Override Directive:: Setting a variable in the makefile
-		 even if the user has set it with a command argument.
+                 even if the user has set it with a command argument.
 * Defining::    An alternate way to set a variable to a verbatim string.
 * Environment:: Variable values can come from the environment.
 @end menu
 
-@node Reference, Values, Variables, Variables
-@section Reference to Variables
-@cindex reference to variables
-@cindex $ (variable reference)
+@node Reference, Flavors, Variables, Variables
+@section Basics of Variable References
 
 To substitute a variable's value, write a dollar sign followed by the name
 of the variable in parentheses or braces: either @samp{$(foo)} or
@@ -2054,107 +2336,272 @@ prog.o : prog.c
 @end example
 
 @noindent
-could be used to compile a C program @file{prog.c}.  (Since spaces around
+could be used to compile a C program @file{prog.c}.  Since spaces around
 the variable value are ignored in variable assignments, the value of
-@code{foo} is precisely @samp{c}.)
+@code{foo} is precisely @samp{c}.  (Don't actually write your makefiles
+this way!)
 
 A dollar sign followed by a character other than a dollar sign,
-open-parenthesis or open-brace treats that single character as the variable
-name.  Thus, you could reference the variable @code{x} with @samp{$x}.
-However, this practice is strongly discouraged, except with the automatic
-variables (@pxref{Automatic}).
+open-parenthesis or open-brace treats that single character as the
+variable name.  Thus, you could reference the variable @code{x} with
+@samp{$x}.  However, this practice is strongly discouraged, except in
+the case of the automatic variables (@pxref{Automatic}).
 
+@node Flavors, Advanced, Reference, Variables
+@section The Two Flavors of Variables
+@cindex flavors (of variables)
+@cindex recursive variable expansion
 
-@subsection Modified References
-@cindex modified variable reference
-@cindex substitution variable reference
+There are two ways that a variables in GNU @code{make} can have a value;
+we call them two @dfn{flavors} of variables.  The two flavors are
+distinguished in how they are defined and in what they do when expanded.
 
-In addition to simple references, variables can be referenced in a manner
-which modifies the value of the reference but do not modify the value of
-the variable referenced.  Such a reference is a @dfn{substitution reference}.
+The first flavor of variable is a @dfn{recursively expanded} variable.
+Variables of this sort are defined by lines using @samp{=}
+(@pxref{Setting}).  The value you specify is installed verbatim; if it
+contains references to other variables, these references are expanded
+whenever this variable is substituted (in the course of expanding some
+other string).  When this happens, it is called @dfn{recursive
+expansion}.
 
-A @dfn{substitution reference} is really a simplified form of the
-@code{patsubst} expansion function (@pxref{Functions}).  It has the form
-@samp{$(var:a=b)} (or @samp{$@{var:a=b@}}) and is equivalent to
-@samp{$(patsubst %a,%b,$(var))}.  This means that it replaces every
-@samp{a} at the end of a whitespace-separated word with a @samp{b}.
-For example:@refill
+For example,
 
 @example
-foo := a.o b.o c.o
-bar := $(foo:.o=.c)
+foo = $(bar)
+bar = $(ugh)
+ugh = Huh?
+
+all:;echo $(foo)
 @end example
 
 @noindent
-sets @samp{bar} to @samp{a.c b.c c.c}.  @xref{Setting}.
-
-@subsection Recursive References
-@cindex recursive variable reference
-@cindex variable reference, recursive
-
-Recursive variable references are a complicated concept needed only for
-very complex makefile programming.  You need not worry about them in
-general, except to know that making a variable with a dollar sign in its
-name might have strange results.  However, if you are the worrisome type or
-are actually interested in what they do, read on.
+will echo @samp{Huh?}: @samp{$(foo)} expands to @samp{$(bar)} which
+expands to @samp{$(ugh)} which finally expands to @samp{Huh?}.@refill
 
-Variables may be referenced inside a variable reference.  This is called
-a @dfn{recursive variable reference}.  For example,
+This flavor of variable is the only sort supported by other versions of
+@code{make}.  It has its advantages and its disadvantages.  An advantage
+(most would say) is that:
 
 @example
-x = y
-y = z
-a := $($(x))
+CFLAGS = $(include_dirs) -O
+include_dirs = -Ifoo -Ibar
 @end example
 
 @noindent
-defines @samp{a} as @samp{z}: the @samp{$(x)} inside @samp{$($(x))} expands
-to @samp{y}, so @samp{$($(x))} expands to @samp{$(y)} which in turn expands
-to @samp{z}.@refill
-
-Recursive variable references can get yet more recursive.  For example,
+will do what was intended: when @samp{CFLAGS} is expanded in a command,
+it will expand to @samp{-Ifoo -Ibar -O}.  A major disadvantage is that you
+can't append something on the end of a variable, as in
 
 @example
-x = $(y)
-y = z
-z = Hello
-a := $($(x))
+CFLAGS = $(CFLAGS) -O
 @end example
 
 @noindent
-defines @samp{a} as @samp{Hello}: @samp{$($(x))} becomes @samp{$($(y))}
-which becomes @samp{$(z)} which becomes @samp{Hello}.  This sort of
-recursion can go on for as many levels as you like (and can comprehend),
-though it's not clear that very many levels of recursion are useful.@refill
+because it will cause an infinite loop in the variable expansion.
+(Actually @code{make} detects the infinite loop and reports an error.)
 
-Recursive variable references can also contain modified references and
-function invokations (@pxref{Functions}), just like any other reference.
-For example, using the @code{subst} function (@pxref{Text Functions}):
+Another disadvantage is that any functions (@pxref{Functions})
+referenced in the definition will be executed every time the variable is
+expanded.  This makes @code{make} run slower; worse, it causes the
+@code{wildcard} and @code{shell} functions to give unpredictable results
+because you cannot easily control when they are called, or even how many
+times.
+
+To avoid all the problems and inconveniences of recursively expanded
+variables, there is another flavor: @dfn{simply expanded} variables.
+
+Simply expanded variables are defined by lines using @samp{:=}
+(@pxref{Setting}).  The value of a simply expanded variable is scanned
+once and for all, expanding any references to other variables and
+functions, when the variable is defined.  The actual value of the simply
+expanded variable is the result of expanding the text that you write.
+It does not contain any references to other variables; it contains their
+values @emph{as of the time this variable was defined}.  Therefore,
 
 @example
-x = variable1
-variable2 := Hello
-y = $(subst 1,2,$(x))
-z = y
-a := $($($(z)))
+x := foo
+y := $(x) bar
+x := later
 @end example
 
 @noindent
-eventually defines @samp{a} as @samp{Hello}.  It is doubtful that anyone
-would ever want to write a recursive reference as convoluted as this one,
-but it works: @samp{$($($(z)))} expands to @samp{$($(y))} which becomes
-@samp{$($(subst 1,2,$(x)))} which changes @samp{variable1} to
-@samp{variable2} in @samp{$(x)} and finally expands to @samp{$(variable2)},
-a simple variable reference that becomes @samp{Hello}.@refill
-
-Recursive variable references need not be as simple as @samp{$($(a))}.
-They can contain several variable references:
+is equivalent to
 
 @example
-a_dirs := dira dirb
-1_dirs := dir1 dir2
-
-a_files := filea fileb
+y := foo bar
+x := later
+@end example
+
+When a simply expanded variable is referenced, its value is substituted
+verbatim.
+
+Simply expanded variables generally make complicated makefile programming
+more predictable because they work like variables in most programming
+languages.  They allow you to redefine a variable using its own value (or
+its value processed in some way by one of the expansion functions) and to
+use the expansion functions much more efficiently (@pxref{Functions}).
+
+You can also use them to introduce controlled leading or trailing spaces
+into variable values.  Such spaces are discarded from your input before
+substitution of variable references and function calls; this means you can
+include leading or trailing spaces in a variable value by protecting them
+with variable references, like this:
+
+@example
+nullstring :=
+space := $(nullstring) $(nullstring)
+@end example
+
+@noindent
+Here the value of the variable @code{space} is precisely one space.
+
+@node Advanced, Values, Flavors, Variables
+@section Advanced Features for Reference to Variables
+@cindex reference to variables
+
+This section describes some advanced features you can use to reference
+variables in more flexible ways.
+
+@menu
+* Substitution Refs::   Referencing a variable with substitutions on the value.
+* Computed Names::      Computing the name of the variable to refer to.
+@end menu
+
+@node Substitution Refs, Computed Names, Advanced, Advanced
+@subsection Substitution References
+@cindex modified variable reference
+@cindex substitution variable reference
+
+A @dfn{substitution reference} substitutes the value of a variable with
+alterations that you specify.  It has the form
+@samp{$(@var{var}:@var{a}=@var{b})} (or
+@samp{$@{@var{var}:@var{a}=@var{b}@}}) and its meaning is to take the value
+of the variable @var{var}, replace every @var{a} at the end of a word with
+@var{b} in that value, and substitute the resulting string.
+
+When we say ``at the end of a word'', we mean that @var{a} must appear
+either followed by whitespace or at the end of the value in order to be
+replaced; other occurrences of @var{a} in the value are unaltered.  For
+example:@refill
+
+@example
+foo := a.o b.o c.o
+bar := $(foo:.o=.c)
+@end example
+
+@noindent
+sets @samp{bar} to @samp{a.c b.c c.c}.  @xref{Setting}.
+
+A substitution reference is actually an abbreviation for use of the
+@code{patsubst} expansion function (@pxref{Text Functions}).  We provide
+substitution references as well as @code{patsubst} for compatibility with
+other implementations of @code{make}.
+
+Another type of substitution reference lets you use the full power of the
+@code{patsubst} function.  It has the same form
+@samp{$(@var{var}:@var{a}=@var{b})} described above, except that now
+@var{a} must contain a single @samp{%} character.  This case is equivalent
+to @samp{$(patsubst @var{a},@var{b},$(@var{var}))}.
+@xref{Text Functions}, for a description of the @code{patsubst} function.
+For example:@refill
+
+@example
+foo := a.o b.o c.o
+bar := $(foo:%.o=%.c)
+@end example
+
+@noindent
+sets @samp{bar} to @samp{a.c b.c c.c}.
+
+@node Computed Names,  , Substitution Refs, Advanced
+@subsection Computed Variable Names
+@cindex nested variable reference
+@cindex computed variable name
+@cindex variable reference, nested
+
+Computed variable names are a complicated concept needed only for
+sophisticated makefile programming.  For most purposes you need not
+consider about them, except to know that making a variable with a dollar
+sign in its name might have strange results.  However, if you are the
+type that wants to understand everything, or you are actually interested
+in what they do, read on.
+
+Variables may be referenced inside the name of a variable.  This is
+called a @dfn{computed variable name} or a @dfn{nested variable
+reference}.  For example,
+
+@example
+x = y
+y = z
+a := $($(x))
+@end example
+
+@noindent
+defines @code{a} as @samp{z}: the @samp{$(x)} inside @samp{$($(x))} expands
+to @samp{y}, so @samp{$($(x))} expands to @samp{$(y)} which in turn expands
+to @samp{z}.  Here the name of the variable to reference is not stated
+explicitly; it is computed by expansion of @samp{$(x)}.  The reference
+@samp{$(x)} here is nested within the outer variable reference.
+
+The previous example shows two levels of nesting, but any number of levels
+is possible.  For example, here are three levels:
+
+@example
+x = y
+y = z
+z = u
+a := $($($(x)))
+@end example
+
+@noindent
+Here the innermost @samp{$(x)} expands to @samp{y}, so @samp{$($(x))}
+expands to @samp{$(y)} which in turn expands to @samp{z}; now we have
+@samp{$(z)}, which becomes @samp{u}.
+
+References to recursively-expanded variables within a variable name are
+reexpanded in the usual fashion.  For example:
+
+@example
+x = $(y)
+y = z
+z = Hello
+a := $($(x))
+@end example
+
+@noindent
+defines @code{a} as @samp{Hello}: @samp{$($(x))} becomes @samp{$($(y))}
+which becomes @samp{$(z)} which becomes @samp{Hello}.
+
+Nested variable references can also contain modified references and
+function invocations (@pxref{Functions}), just like any other reference.
+For example, using the @code{subst} function (@pxref{Text Functions}):
+
+@example
+x = variable1
+variable2 := Hello
+y = $(subst 1,2,$(x))
+z = y
+a := $($($(z)))
+@end example
+
+@noindent
+eventually defines @code{a} as @samp{Hello}.  It is doubtful that anyone
+would ever want to write a nested reference as convoluted as this one, but
+it works: @samp{$($($(z)))} expands to @samp{$($(y))} which becomes
+@samp{$($(subst 1,2,$(x)))}.  This gets the value @samp{variable1} from
+@code{x} and changes it by substitution to @samp{variable2}, so that the
+entire string becomes @samp{$(variable2)}, a simple variable reference
+whose value is @samp{Hello}.@refill
+
+A computed variable name need not consist entirely of a single variable
+reference.  It can contain several variable references, as well as some
+invariant text.  For example,
+
+@example
+a_dirs := dira dirb
+1_dirs := dir1 dir2
+
+a_files := filea fileb
 1_files := file1 file2
 
 ifeq "$(use_a)" "yes"
@@ -2173,11 +2620,11 @@ dirs := $($(a1)_$(df))
 @end example
 
 @noindent
-will give @samp{dirs} the value of @samp{a_dirs}, @samp{1_dirs},
-@samp{a_files} or @samp{1_files} depending on the settings of @samp{use_a}
-and @samp{use_dirs}.@refill
+will give @code{dirs} the same value as @code{a_dirs}, @code{1_dirs},
+@code{a_files} or @code{1_files} depending on the settings of @code{use_a}
+and @code{use_dirs}.@refill
 
-Recursive variable references can also be part of a modified reference:
+Computed variable names can also be used in substitution references:
 
 @example
 a_objects := a.o b.o c.o
@@ -2187,13 +2634,13 @@ sources := $($(a1)_object:.o=.c)
 @end example
 
 @noindent
-defines @samp{sources} as either @samp{a.c b.c c.c} or @samp{1.c 2.c 3.c},
-depending on the value of @samp{a1}.
+defines @code{sources} as either @samp{a.c b.c c.c} or @samp{1.c 2.c 3.c},
+depending on the value of @code{a1}.
 
-The only restriction on this sort of use of recursive variable references
-is that they cannot specify part of a function invokation.  This is because
-the search for an initial word matching defined function is done before the
-check for a variable name containing a dollar sign.  Thus,
+The only restriction on this sort of use of nested variable references
+is that they cannot specify part of the name of a function to be called.
+This is because the test for a recognized function name is done before
+the expansion of nested references.  For example,
 
 @example
 ifdef do_sort
@@ -2202,24 +2649,23 @@ else
 func := strip
 endif
 
-bar := a   d b g  q  c
+bar := a d b g q c
 
 foo := $($(func) $(bar))
 @end example
 
 @noindent
-attempts to give @samp{foo} the value of the variable @samp{sort a   d b g
-q  c} or @samp{strip a   d b g  q  c}, rather than giving @samp{a   d b g
-q  c} as the argument to either the @code{sort} or the @code{strip}
-function.  This is an implementation restriction which may be removed in
-the future if the need arises, but this is not likely since there are not
-really any two functions you would want to give the same arguments.@refill
-
-Note that @dfn{recursive variable references} are quite different from
+attempts to give @samp{foo} the value of the variable @samp{sort a d b g
+q c} or @samp{strip a d b g q c}, rather than giving @samp{a d b g q c}
+as the argument to either the @code{sort} or the @code{strip} function.
+This restriction could be removed in the future if that change is shown
+to be a good idea.
+
+Note that @dfn{nested variable references} are quite different from
 @dfn{recursively expanded variables} (@pxref{Flavors}), though both are
 used together in complex ways when doing makefile programming.@refill
 
-@node Values, Flavors, Reference, Variables
+@node Values, Setting, Advanced, Variables
 @section How Variables Get Their Values
 
 Variables can get values in several different ways:
@@ -2230,136 +2676,23 @@ You can specify an overriding value when you run @code{make}.
 @xref{Overriding}.
 
 @item
-You can specify a value in the makefile, either with an assignment
-(@pxref{Setting}) or with a verbatim definition (@pxref{Defining}).
+You can specify a value in the makefile, either
+with an assignment (@pxref{Setting}) or with a
+verbatim definition (@pxref{Defining}).@refill
 
 @item
 Values are inherited from the environment.  @xref{Environment}.
 
 @item
 Several @dfn{automatic} variables are given new values for each rule.
-@xref{Automatic}.
+Each of these has a single conventional use.  @xref{Automatic}.
 
 @item
-Several variables have constant initial values.  @xref{Implicit Variables}.
+Several variables have constant initial values.
+@xref{Implicit Variables}.
 @end itemize
 
-@node Flavors, Setting, Values, Variables
-@section The Two Flavors of Variables
-@cindex flavors (of variables)
-@cindex recursive variable expansion
-
-There are two kinds of variables in GNU @code{make}.  They are
-distinguished by two things: how they are defined and how they are expanded.
-
-The first flavor of variable is a @dfn{recursively expanded} variable.
-Variables of this sort are defined by lines using @samp{=}
-@ifinfo
-(@pxref{Setting}).
-@end ifinfo
-@iftex
-(see the next section).
-@end iftex
-The value you specify is installed verbatim; if it contains references to
-other variables, these references are expanded whenever this variable is
-substituted (in the course of expanding some other string).  When this
-happens, it is recursive expansion.
-
-For example,
-
-@example
-foo = $(bar)
-bar = $(ugh)
-ugh = Huh?
-
-all:;echo $(foo)
-@end example
-
-@noindent
-will echo @samp{Huh?}: @samp{$(foo)} expands to @samp{$(bar)} which
-expands to @samp{$(ugh)} which finally expands to @samp{Huh?}.@refill
-
-This flavor of variable is the only sort supported by other versions of
-@code{make}.  It has its advantages and its disadvantages.  An advantage
-(most would say) is that:
-
-@example
-CFLAGS = $(include_dirs) -O
-include_dirs = -Ifoo -Ibar
-@end example
-
-@noindent
-will do what was intended: when @samp{CFLAGS} is expanded in a command,
-it will expand to @samp{-Ifoo -Ibar}.  A major disadvantage is that you
-can't append something on the end of a variable, as in
-
-@example
-CFLAGS = $(CFLAGS) -O
-@end example
-
-@noindent
-because it will cause an infinite loop in the variable expansion.
-(Actually @code{make} detects the infinite loop and reports an error.)
-
-Another disadvantage is that any functions (@pxref{Functions}) referenced
-in the definition will be executed every time the variable is expanded.
-This makes @code{make} run slower; worse, it causes the @code{wildcard}
-function to give unpredictable results.
-
-To avoid all the problems and inconveniences of recursively expanded
-variables, there is another flavor: @dfn{simply expanded} variables.
-Simply expanded variables are defined by lines using @samp{:=}
-@ifinfo
-(@pxref{Setting}).
-@end ifinfo
-@iftex
-(see the next section).
-@end iftex
-The value of a simply expanded variable is scanned once and for all,
-expanding any references to other variables and functions, when the
-variable is defined.  The actual value of the simply expanded variable is
-the result of expanding the value you write.  It does not contain any
-references to other variables; it contains their values @emph{as of the
-time this variable was defined}.  Therefore,
-
-@example
-x := foo
-y := $(x) bar
-x := later
-@end example
-
-@noindent
-is equivalent to
-
-@example
-y := foo bar
-x := later
-@end example
-
-When a simply expanded variable is referenced, its value is substituted
-verbatim.
-
-Simply expanded variables generally make complicated makefile programming
-more predictable because they work like variables in most programming
-languages.  They allow you to redefine a variable using its own value (or
-its value processed in some way by one of the expansion functions) and to
-use the expansion functions much more efficiently (@pxref{Functions}).
-
-You can also use them to introduce controlled leading or trailing spaces
-into variable values.  Such spaces are discarded from your input before
-substitution of variable references and function calls; this means you can
-include leading or trailing spaces in a variable value by protecting them
-with variable references, like this:
-
-@example
-nullstring :=
-space := $(nullstring) $(nullstring)
-@end example
-
-@noindent
-Here the value of the variable @code{space} is precisely one space.
-
-@node Setting, Override Directive, Flavors, Variables
+@node Setting, Override Directive, Values, Variables
 @section Setting Variables
 @cindex setting variables
 @cindex =
@@ -2374,14 +2707,13 @@ objects = main.o foo.o bar.o utils.o
 @end example
 
 @noindent
-defines a variable named @code{objects}.  Spaces around the variable name
-are ignored, and so are spaces after the @samp{=} or at the end of the
-line.
+defines a variable named @code{objects}.  Whitespace around the variable
+name and immediately after the @samp{=} is ignored.
 
 Variables defined with @samp{=} are @dfn{recursively expanded} variables.
 Variables defined with @samp{:=} are @dfn{simply expanded} variables; these
 definitions can contain variable references which will be expanded before
-the definition is made.  @xref{Flavors}. 
+the definition is made.  @xref{Flavors}.
 
 There is no limit on the length of the value of a variable except the
 amount of swapping space on the computer.  When a variable definition is
@@ -2400,12 +2732,13 @@ automatically to a new value for each rule; these are called the
 @node Override Directive, Defining, Setting, Variables
 @section The @code{override} Directive
 @findex override
+@cindex overriding with @code{override}
 
 If a variable has been set with a command argument (@pxref{Overriding}),
 then ordinary assignments in the makefile are ignored.  If you want to set
 the variable in the makefile even though it was set with a command
 argument, you can use an @code{override} directive, which is a line that
-looks like this:
+looks like this:@refill
 
 @example
 override @var{variable} = @var{value}
@@ -2430,6 +2763,23 @@ switches with a command argument just as usual.  You could use this
 override CFLAGS := $(CFLAGS) -g
 @end example
 
+You can also use @code{override} directives with @code{define} directives.
+This is done as you might expect:
+
+@example
+override define foo
+bar
+endef
+@end example
+
+@noindent
+@iftex
+See the next section.
+@end iftex
+@ifinfo
+@xref{Defining}.
+@end ifinfo
+
 @node Defining, Environment, Override Directive, Variables
 @section Defining Variables Verbatim
 @findex define
@@ -2440,7 +2790,7 @@ directive.  This directive has a different syntax which allows newline
 characters to be included in the value, which is convenient for defining
 canned sequences of commands (@pxref{Sequences}).
 
-The @code{define} directive is followed on the same line the name of the
+The @code{define} directive is followed on the same line by the name of the
 variable and nothing more.  The value to give the variable appears on the
 following lines.  The end of the value is marked by a line containing just
 the word @code{endef}.  Aside from this difference in syntax, @code{define}
@@ -2468,7 +2818,21 @@ two-lines = echo foo; echo $(bar)
 @noindent
 since the shell will interpret the semicolon and the newline identically.
 
-@node Environment,, Defining, Variables
+If you want variable definitions made with @code{define} to take precedence
+over command-line variable definitions, the @code{override} directive can
+be used together with @code{define}:
+
+@example
+override define two-lines
+foo
+$(bar)
+endef
+@end example
+
+@noindent
+@xref{Override Directive}.
+
+@node Environment,  , Defining, Variables
 @section Variables from the Environment
 
 @cindex environment
@@ -2480,8 +2844,8 @@ argument, overrides the environment.  (If the @samp{-e} flag is specified,
 then values from the environment override assignments in the makefile.
 @xref{Options}.  But this is not recommended practice.)
 
-By setting the variable @code{CFLAGS} in your environment, you can cause
-all C compilations in most makefiles to use the compiler switches you
+Thus, by setting the variable @code{CFLAGS} in your environment, you can
+cause all C compilations in most makefiles to use the compiler switches you
 prefer.  This is safe for variables with standard or conventional meanings
 because you know that no makefile will use them for other things.  (But
 this is not totally reliable; some makefiles set @code{CFLAGS} explicitly
@@ -2491,7 +2855,7 @@ When @code{make} is invoked recursively, variables defined in the outer
 invocation are automatically passed to inner invocations through the
 environment (@pxref{Recursion}).  This is the main purpose of turning
 environment variables into @code{make} variables, and it requires no
-attention from you.
+attention from you.@refill
 
 Other use of variables from the environment is not recommended.  It is not
 wise for makefiles to depend for their functioning on environment variables
@@ -2530,7 +2894,7 @@ This conditional tells @code{make} to use one set of libraries if the
 @code{CC} variable is @samp{gcc}, and a different set of libraries
 otherwise.  It works by controlling which of two command lines will be used
 as the command for a rule.  The result is that @samp{CC=gcc} as an argument
-to @code{make} not only changes which compiler is used but also which
+to @code{make} changes not only which compiler is used but also which
 libraries are linked.
 
 @example
@@ -2545,14 +2909,14 @@ else
 endif
 @end example
 
-@noindent
 This conditional uses three directives: one @code{ifeq}, one @code{else}
 and one @code{endif}.
 
-The @code{ifeq} directive contains two arguments, separated by a comma and
-surrounded by parentheses.  Variable substitution is performed on both
-arguments and then they are compared.  The lines of the makefile following
-the @code{ifeq} are obeyed if the two arguments match; otherwise they are
+The @code{ifeq} directive begins the conditional, and specifies the
+condition.  It contains two arguments, separated by a comma and surrounded
+by parentheses.  Variable substitution is performed on both arguments and
+then they are compared.  The lines of the makefile following the
+@code{ifeq} are obeyed if the two arguments match; otherwise they are
 ignored.
 
 The @code{else} directive causes the following lines to be obeyed if the
@@ -2563,6 +2927,11 @@ is not used.  It is optional to have an @code{else} in a conditional.
 The @code{endif} directive ends the conditional.  Every conditional must
 end with an @code{endif}.  Unconditional makefile text follows.
 
+Conditionals work at the textual level: the lines of the conditional are
+treated as part of the makefile, or ignored, according to the condition.
+This is why the larger syntactic units of the makefile, such as rules, may
+cross the beginning or the end of the conditional.
+
 When the variable @code{CC} has the value @samp{gcc}, the above example has
 this effect:
 
@@ -2572,7 +2941,7 @@ foo: $(objects)
 @end example
 
 @noindent
-When the variable @code{CC} has any other value, this effect is this:
+When the variable @code{CC} has any other value, the effect is this:
 
 @example
 foo: $(objects)
@@ -2600,6 +2969,8 @@ foo: $(objects)
 @section Syntax of Conditionals
 @findex ifdef
 @findex ifeq
+@findex ifndef
+@findex ifneq
 @findex else
 @findex endif
 
@@ -2631,26 +3002,25 @@ If the condition is true, @var{text-if-true} is used; otherwise,
 @var{text-if-false} is used instead.  The @var{text-if-false} can be any
 number of lines of text.
 
-Conditionals work at the textual level.  The lines of the
-@var{text-if-true} are read as part of the makefile if the condition is
-true; if the condition is false, those lines are ignored completely.  It
-follows that syntactic units of the makefile, such as rules, may safely be
-split across the beginning or the end of the conditional.@refill
-
-You may use an @code{include} directive within a conditional, but you may
-not start a conditional in one file and end it in another.
-
 The syntax of the @var{conditional-directive} is the same whether the
 conditional is simple or complex.  There are four different directives that
 test different conditions.  Here is a table of them:
 
 @table @code
 @item ifeq (@var{arg1}, @var{arg2})
+@itemx ifeq '@var{arg1}' '@var{arg2}'
+@itemx ifeq "@var{arg1}" "@var{arg2}"
+@itemx ifeq "@var{arg1}" '@var{arg2}'
+@itemx ifeq '@var{arg1}' "@var{arg2}"
 Expand all variable references in @var{arg1} and @var{arg2} and
 compare them.  If they are identical, the @var{text-if-true} is
 effective; otherwise, the @var{text-if-false}, if any, is effective.
 
 @item ifneq (@var{arg1}, @var{arg2})
+@itemx ifneq '@var{arg1}' '@var{arg2}'
+@itemx ifneq "@var{arg1}" "@var{arg2}"
+@itemx ifneq "@var{arg1}" '@var{arg2}'
+@itemx ifneq '@var{arg1}' "@var{arg2}"
 Expand all variable references in @var{arg1} and @var{arg2} and
 compare them.  If they are different, the @var{text-if-true} is
 effective; otherwise, the @var{text-if-false}, if any, is effective.
@@ -2680,7 +3050,18 @@ arguments.  Extra spaces are allowed and ignored at the beginning of the
 line, and spaces or tabs at the end.  A comment starting with @samp{#} may
 appear at the end of the line.
 
-@node Testing Flags,, Conditional Syntax, Conditionals
+Conditionals work at the textual level.  The lines of the
+@var{text-if-true} are read as part of the makefile if the condition is
+true; if the condition is false, those lines are ignored completely.  It
+follows that syntactic units of the makefile, such as rules, may safely be
+split across the beginning or the end of the conditional.@refill
+
+To prevent intolerable confusion, it is not permitted to start a
+conditional in one makefile and end it in another.  However, you may
+write an @code{include} directive within a conditional, provided you do
+not attempt to terminate the conditional inside the included file.
+
+@node Testing Flags,  , Conditional Syntax, Conditionals
 @section Conditionals that Test Flags
 
 You can write a conditional that tests @code{make} command flags such as
@@ -2725,13 +3106,15 @@ function's processing is substituted into the makefile at the point of the
 call, just as a variable might be substituted.
 
 @menu
-* Syntax: Function Syntax.  Syntax of function calls in general.
-* Text Functions::          Text manipulation functions.
-* Foreach Function::        The @code{foreach} function.
-* Filename Functions::      Functions for manipulating file names.
+* Syntax of Functions:: How to write a function call.
+* Text Functions::      General-purpose text manipulation functions.
+* Filename Functions::  Functions for manipulating file names.
+* Foreach Function::    Repeat some text with controlled variation.
+* Origin Function::     Find where a variable got its value.
+* Shell Function::      Substitute the output of a shell command.
 @end menu
 
-@node Function Syntax, Text Functions, Functions, Functions
+@node Syntax of Functions, Text Functions, Functions, Functions
 @section Function Call Syntax
 @cindex $ (function call)
 @cindex arguments
@@ -2755,16 +3138,22 @@ are part of @code{make}.  There is no provision for defining new functions.
 The @var{arguments} are the arguments of the function.  They are separated
 from the function name by one or more spaces and/or tabs, and if there is
 more than one argument they are separated by commas.  Such whitespace and
-commas are not part of any argument's value.  Parentheses or braces,
-whichever you use to surround the function call, can appear in an argument
-only in matching pairs; the ones that were not used to surround the
-function call can appear freely.  If the arguments contain other function
-calls or variable references, it is wisest to surround them with the same
-delimiters used for the containing function call.
+commas are not part of any argument's value.  The delimiters which you use
+to surround the function call, whether parentheses or braces, can appear in
+an argument only in matching pairs; the other kind of delimiters may appear
+singly.  If the arguments themselves contain other function calls or
+variable references, it is wisest to use the same kind of delimiters for
+all the references; in other words, write @w{@samp{$(subst a,b,$(x))}}, not
+@w{@samp{$(subst a,b,$@{x@})}}.  This is both because it is clearer, and
+because only one type of delimiters is matched to find the end of the
+reference.  Thus in @w{@samp{$(subst a,b,$@{subst c,d,$@{x@}@})}}
+doesn't work because the second @code{subst} function invocation ends at
+the first @samp{@}}, not the second.
 
 The text written for each argument is processed by substitution of
-variables and function calls in order to produce the argument value, which
-is the text on which the function acts.
+variables and function calls to produce the argument value, which
+is the text on which the function acts.  The substitution is done in the
+order in which the arguments appear.
 
 Commas and unmatched parentheses or braces cannot appear in the text of an
 argument as written; leading spaces cannot appear in the text of the first
@@ -2785,10 +3174,10 @@ bar:= $(subst $(space),$(comma),$(foo))
 Here the @code{subst} function replaces each space with a comma, through
 the value of @code{foo}, and substitutes the result.
 
-@node Text Functions, Foreach Function, Function Syntax, Functions
+@node Text Functions, Filename Functions, Syntax of Functions, Functions
 @section Functions for String Substitution and Analysis
 
-Here are some functions that operate strings:
+Here are some functions that operate on strings:
 
 @table @code
 @item $(subst @var{from},@var{to},@var{text})
@@ -2812,30 +3201,62 @@ matching any number of any characters within a word.  If
 @var{replacement} also contains a @samp{%}, the @samp{%} is replaced
 by the text that matched the @samp{%} in @var{pattern}.@refill
 
+@samp{%} characters in @code{patsubst} function invocations can be
+quoted with preceding backslashes (@samp{\}).  Backslashes that would
+otherwise quote @samp{%} characters can be quoted with more backslashes.
+Backslashes that quote @samp{%} characters or other backslashes are
+removed from the pattern before it is compared file names or has a stem
+substituted into it.  Backslashes that are not in danger of quoting
+@samp{%} characters go unmolested.  For example, the pattern
+@file{the\%weird\\%pattern\\} has @samp{the%weird\} preceding the
+operative @samp{%} character, and @samp{pattern\\} following it.  The
+final two backslashes are left alone because they can't affect any
+@samp{%} character.@refill
+
+
 Whitespace between words is folded into single space characters;
 leading and trailing whitespace is discarded.
 
+For example,
+
+@example
+$(patsubst %.c,%.o,x.c.c bar.c)
+@end example
+
+@noindent
+produces the value @samp{x.c.o bar.o}.
+
 @item $(strip @var{string})
 @findex strip
 Removes leading and trailing whitespace from @var{string} and replaces
 each internal sequence of one or more whitespace characters with a
-single space.
+single space.  Thus, @samp{$(strip a b  c )} results in @samp{a b c}.
 
 @item $(findstring @var{find},@var{in})
 @findex findstring
 Searches @var{in} for an occurrence of @var{find}.  If it occurs, the
 value is @var{find}; otherwise, the value is empty.  You can use this
 function in a conditional to test for the presence of a specific
-substring in a given string.  @xref{Testing Flags}, for a practical
-application of @code{findstring}.
+substring in a given string.  Thus, the two examples,
+
+@example
+$(findstring a,a b c)
+$(findstring a,b c)
+@end example
+
+@noindent
+produce the values @samp{a} and @samp{}, respectively.  @xref{Testing
+Flags}, for a practical application of @code{findstring}.@refill
 
 @item $(filter @var{pattern},@var{text})
 @findex filter
-Removes all whitespace-separated words in @var{text} that do @emph{not}
-match @var{pattern}, returning only matching words.  The pattern is one
-using @samp{%} as used in the @code{patsubst} function.  This can be used
-to separate out different types of strings (such as filenames) in a variable.
-For example:@refill
+Removes all whitespace-separated words in @var{text} that do
+@emph{not} match @var{pattern}, returning only matching words.  The
+pattern is written using @samp{%}, just like the patterns used in
+@code{patsubst} function above.@refill
+
+The @code{filter} function can be used to separate out different types
+of strings (such as filenames) in a variable.  For example:
 
 @example
 sources := foo.c bar.c ugh.h
@@ -2851,32 +3272,28 @@ in the command to the compiler.@refill
 @item $(filter-out @var{pattern},@var{text})
 @findex filter-out
 Removes all whitespace-separated words in @var{text} that @emph{do}
-match @var{pattern}, returning only matching words.  This is the exact
-opposite of the @code{filter} function.@refill
+match @var{pattern}, returning only the words that match.  This is the
+exact opposite of the @code{filter} function.@refill
 
 @item $(sort @var{list})
 @findex sort
 Sorts the words of @var{list} in lexical order, removing duplicate
 words.  The output is a list of words separated by single spaces.
+Thus,
 
-@item $(word @var{n},@var{text})
-@findex word
-Returns the @var{n}th word of @var{text}.  If @var{n} is bigger than
-the number of words in @var{text}, nothing is returned.  If you give
-0 as @var{n}, you will get a fatal error to remind you to quit
-thinking like a C programmer.
+@example
+$(sort foo bar lose)
+@end example
 
-@item $(words @var{text})
-@findex words
-Returns the number of words in @var{text}.  Thus, @code{$(word
-$(words @var{text}),@var{text})} is the last word of @var{text}.@refill
+@noindent
+returns the value @samp{bar foo lose}.
 @end table
 
-Here is a realistic example of the use of @code{subst}.  Suppose that a
-makefile uses the @code{VPATH} variable to specify a list of directories
-that @code{make} should search for dependency files.  This example shows
-how to tell the C compiler to search for header files in the same list of
-directories.
+Here is a realistic example of the use of @code{subst} and @code{patsubst}.
+Suppose that a makefile uses the @code{VPATH} variable to specify a list of
+directories that @code{make} should search for dependency files.  This
+example shows how to tell the C compiler to search for header files in the
+same list of directories.
 
 The value of @code{VPATH} is a list of directories separated by colons,
 such as @samp{src:../headers}.  First, the @code{subst} function is used to
@@ -2887,13 +3304,13 @@ $(subst :, ,$(VPATH))
 @end example
 
 @noindent
-This produces @samp{src ../headers}.  Then another function,
-@code{addprefix}, can turn each directory name into an @samp{-I} flag.
-These can be added to the value of the variable @code{CFLAGS}, which is
-passed automatically to the C compiler, like this:
+This produces @samp{src ../headers}.  Then @code{patsubst} is used to turn
+each directory name into a @samp{-I} flag.  These can be added to the
+value of the variable @code{CFLAGS}, which is passed automatically to the C
+compiler, like this:
 
 @example
-override CFLAGS:= $(CFLAGS) $(addprefix -I,$(subst :, ,$(VPATH)))
+override CFLAGS:= $(CFLAGS) $(patsubst %,-I%,$(subst :, ,$(VPATH)))
 @end example
 
 @noindent
@@ -2910,7 +3327,7 @@ of just whitespace to match the null string.  Thus,
 
 @example
 .PHONY: all
-ifneq	"$(needs_made)" ""
+ifneq   "$(needs_made)" ""
 all: $(needs_made)
 else
 all:;@@echo 'Nothing to make!'
@@ -2922,108 +3339,17 @@ might fail to have the desired results.  Replacing the variable reference
 @samp{"$(needs_made)"} with the function call @samp{"$(strip
 $(needs_made))"} in the @code{ifneq} directive would make it more robust.
 
-@node Foreach Function, Filename Functions, Text Functions, Functions
-@section The @code{foreach} Function
-@findex foreach
-
-The @code{foreach} function is very different from other functions.  It
-causes one piece of text to be used repeatedly, each time with a different
-substitution performed on it.  It resembles the @code{for} command in the
-shell @code{sh} and the @code{foreach} command in the C-shell @code{csh}.
-
-The syntax of the @code{foreach} function is:
-
-@example
-$(foreach @var{var},@var{list},@var{text})
-@end example
-
-@noindent
-The first two arguments, @var{var} and @var{list}, are expanded before
-anything else is done; note that the last argument, @var{text}, is
-@emph{not} expanded at the same time.  Then for each word of the expanded
-value of @var{list}, the variable named by the expanded value of @var{var}
-is set to that word, and @var{text} is expanded.  Presumably @var{text}
-contains references to that variable, so the expansions will be different
-each time.
-
-The result is that @var{text} is expanded as many times as there are
-whitespace-separated words in @var{list}.  The multiple expansions of
-@var{text} are concatenated, with spaces between them, to make the result
-of @code{foreach}.
-
-This simple example sets the variable @samp{files} to the list of all files
-in the directories in the list @samp{dirs}:
-
-@example
-find_files = $(wildcard $(dir)/*)
-dirs := a b c d
-files := $(foreach dir,$(dirs),$(find_files))
-@end example
-
-For readability, it is a good idea to put the @var{text} part of a
-@code{foreach} function invokation into a variable.  Here we use the
-variable @code{find_file} this way.  We make this a recursively-expanding
-variable by using @samp{=} to define it.  This is necessary so that when
-its value is substituted by @code{foreach} the value is rescanned for
-variable references and function calls.  This is what causes the
-@code{wildcard} function actually to be called.
-
-This example has the same result (except for setting @samp{find_files},
-@samp{dirs} and @samp{dir}) as the following example:
-
-@example
-files := $(wildcard a/* b/* c/* d/*)
-@end example
-
-The value of the variable @var{var} after the @code{foreach} function call
-is the same as the value beforehand.  Other values taken from @var{list}
-are in effect only temporarily, during the execution of @code{foreach}.
-The variable @var{var} is a simply-expanded variable during the execution
-of @code{foreach} but is returned to the same flavor it was before the
-@code{foreach} when it is done.  @xref{Flavors}.
-
-If @var{var} was previously undefined, then it is defined as a recursively
-expanded variable (@samp{=}, not @samp{:=}) during the @code{foreach} and
-remains so (with a null value) afterward.
-
-Because it is expanded before @code{foreach} runs, the @var{var} argument
-to @code{foreach} need not be a literal variable name.  It can instead be a
-variable expression resulting in the name.  Thus,
-
-@example
-dir := a
-var = $(whatsthevar)
-foo := dar
-whatsthevar := $(subst a,i,$(foo))
-files := $(foreach $(var),$(dirs),$(find_files))
-@end example
-
-@noindent
-is ultimately equivalent to the first example.  You must take care when
-using complex variable expressions that result in variable names because
-many strange things are legal variable names, and these might not be what
-you intended.  For example,
-
-@example
-files := $(foreach Es escrito en espanol!,b c ch,$(find_files))
-@end example
-
-@noindent
-might be useful if @samp{find_files} references the variable @samp{Es
-escrito en espanol!} (es un nombre bastante largo, no?), but it is more
-likely to be a mistake.
-
-@node Filename Functions,, Foreach Function, Functions
+@node Filename Functions, Foreach Function, Text Functions, Functions
 @section Functions for File Names
 
 Several of the built-in expansion functions relate specifically to
 taking apart file names or lists of file names.
 
-Each of these functions performs a specific transformation on a file name.
-The argument of the function is regarded as a series of file names,
-separated by whitespace.  (Leading and trailing whitespace is ignored.)
-Each file name in the series is transformed in the same way and the results
-are concatenated with single spaces between them.
+Each of the following functions performs a specific transformation on a
+file name.  The argument of the function is regarded as a series of file
+names, separated by whitespace.  (Leading and trailing whitespace is
+ignored.)  Each file name in the series is transformed in the same way and
+the results are concatenated with single spaces between them.
 
 @table @code
 @item $(dir @var{names})
@@ -3044,11 +3370,12 @@ produces the result @samp{src/ ./}.
 @findex notdir
 Extracts all but the directory-part of each file name in @var{names}.
 If the file name contains no slash, it is left unchanged.  Otherwise,
-everything through the last slash is removed from it.  A file name
-that ends with a slash becomes an empty string.  This is unfortunate,
-because it means that the result does not always have the same number
-of whitespace-separated file names as the argument had; but we do not
-see any other valid alternative.
+everything through the last slash is removed from it.
+
+A file name that ends with a slash becomes an empty string.  This is
+unfortunate, because it means that the result does not always have the
+same number of whitespace-separated file names as the argument had;
+but we do not see any other valid alternative.
 
 For example,
 
@@ -3135,9 +3462,27 @@ For example, @samp{$(join a b,.c .o)} produces @samp{a.c b.o}.
 Whitespace between the words in the lists is not preserved; it is
 replaced with a single space.
 
-This function can reverse the effect of the @code{dir} and @code{notdir}
-functions, after other processing has been done on the separated lists
-of directories and files.@refill
+This function can merge the results of the @code{dir} and
+@code{notdir} functions, to produce the original list of files which
+was given to those two functions.@refill
+
+@item $(word @var{n},@var{text})
+@findex word
+Returns the @var{n}th word of @var{text}.  The legitimate values of
+@var{n} start from 1.  If @var{n} is bigger than the number of words
+in @var{text}, the value is empty.  For example,
+
+@example
+$(word 2, foo bar baz)
+@end example
+
+@noindent
+returns @samp{bar}.
+
+@item $(words @var{text})
+@findex words
+Returns the number of words in @var{text}.  Thus, @code{$(word
+$(words @var{text}),@var{text})} is the last word of @var{text}.@refill
 
 @item $(firstword @var{names})
 @findex firstword
@@ -3152,7 +3497,7 @@ $(firstword foo bar)
 @noindent
 produces the result @samp{foo}.  Although @code{$(firstword
 @var{text})} is the same as @code{$(word 1,@var{text})}, the
-@code{firstword} function is retained for its ease of use.@refill
+@code{firstword} function is retained for its simplicity.@refill
 
 @item $(wildcard @var{pattern})
 @findex wildcard
@@ -3160,12 +3505,233 @@ The argument @var{pattern} is a file name pattern, typically containing
 wildcard characters.  The result of @code{wildcard} is a space-separated
 list of the names of existing files that match the pattern.
 
-Wildcards are expanded automatically in rules (@pxref{Wildcards}).
+Wildcards are expanded automatically in rules.  @xref{Wildcards}.
 But they are not normally expanded when a variable is set, or inside the
 arguments of other functions.  Those occasions are when the @code{wildcard}
-function is useful.
+function is useful.@refill
+@end table
+
+@node Foreach Function, Origin Function, Filename Functions, Functions
+@section The @code{foreach} Function
+@findex foreach
+
+The @code{foreach} function is very different from other functions.  It
+causes one piece of text to be used repeatedly, each time with a different
+substitution performed on it.  It resembles the @code{for} command in the
+shell @code{sh} and the @code{foreach} command in the C-shell @code{csh}.
+
+The syntax of the @code{foreach} function is:
+
+@example
+$(foreach @var{var},@var{list},@var{text})
+@end example
+
+@noindent
+The first two arguments, @var{var} and @var{list}, are expanded before
+anything else is done; note that the last argument, @var{text}, is
+@emph{not} expanded at the same time.  Then for each word of the expanded
+value of @var{list}, the variable named by the expanded value of @var{var}
+is set to that word, and @var{text} is expanded.  Presumably @var{text}
+contains references to that variable, so its expansion will be different
+each time.
+
+The result is that @var{text} is expanded as many times as there are
+whitespace-separated words in @var{list}.  The multiple expansions of
+@var{text} are concatenated, with spaces between them, to make the result
+of @code{foreach}.
+
+This simple example sets the variable @samp{files} to the list of all files
+in the directories in the list @samp{dirs}:
+
+@example
+dirs := a b c d
+files := $(foreach dir,$(dirs),$(wildcard $(dir)/*))
+@end example
+
+Here @var{text} is @samp{$(wildcard $(dir)/*)}.  The first repetition
+finds the value @samp{a} for @code{dir}, so it produces the same result
+as @samp{$(wildcard a/*)}; the second repetition produces the result
+of @samp{$(wildcard b/*)}; and the third, that of @samp{$(wildcard c/*)}.
+
+This example has the same result (except for setting @samp{find_files},
+@samp{dirs} and @samp{dir}) as the following example:
+
+@example
+files := $(wildcard a/* b/* c/* d/*)
+@end example
+
+When @var{text} is complicated, you can improve readability by giving it
+a name, with an additional variable:
+
+@example
+find_files = $(wildcard $(dir)/*)
+dirs := a b c d
+files := $(foreach dir,$(dirs),$(find_files))
+@end example
+
+@noindent
+Here we use the variable @code{find_files} this way.  We use plain @samp{=}
+to define a recursively-expanding variable, so that its value contains an
+actual function call to be reexpanded under the control of @code{foreach};
+a simply-expanded variable would not do, since @code{wildcard} would be
+called only once at the time of defining @code{find_files}.
+
+The @code{foreach} function has no permanent effect on the variable
+@var{var}; its value and flavor after the @code{foreach} function call are
+the same as they were beforehand.  The other values which are taken from
+@var{list} are in effect only temporarily, during the execution of
+@code{foreach}.  The variable @var{var} is a simply-expanded variable
+during the execution of @code{foreach}.  If @var{var} was undefined
+before the @code{foreach} function call, it is undefined after the call.
+@xref{Flavors}.@refill
+
+You must take care when using complex variable expressions that result in
+variable names because many strange things are valid variable names, but
+are probably not what you intended.  For example,
+
+@example
+files := $(foreach Es escrito en espanol!,b c ch,$(find_files))
+@end example
+
+@noindent
+might be useful if the value of @code{find_files} references the variable
+whose name is @samp{Es escrito en espanol!} (es un nombre bastante largo,
+que no?), but it is more likely to be a mistake.
+
+@node Origin Function, Shell Function, Foreach Function, Functions
+@section The @code{origin} Function
+@findex origin
+
+The @code{origin} function is unlike most other functions in that it does
+not operate on the values of variables; it tells you something @emph{about}
+a variable.  Specifically, it tells you where it came from.
+
+The syntax of the @code{origin} function is:
+
+@example
+$(origin @var{variable})
+@end example
+
+Note that @var{variable} is the @emph{name} of a variable to inquire about;
+not a @emph{reference} to that variable.  Therefore you would not normally
+use a @samp{$} or parentheses when writing it.  (You can, however, use a
+variable reference in the name if you want the name not to be a constant.)
+
+The result of this function is a string telling you how the variable
+@var{variable} was defined:
+
+@table @samp
+@item undefined
+if @var{variable} was never defined.
+
+@item default
+if @var{variable} has a default definition, as is usual with @code{CC}
+and so on.  @xref{Implicit Variables}.  Note that if you have
+redefined a default variable, the @code{origin} function will return
+the origin of the later definition.
+
+@item environment
+if @var{variable} was defined as an environment variable and the
+@samp{-e} option is @emph{not} turned on (@pxref{Options}).
+
+@item environment override
+if @var{variable} was defined as an environment variable and the
+@samp{-e} option @emph{is} turned on (@pxref{Options}).
+
+@item file
+if @var{variable} was defined in a makefile.
+
+@item command line
+if @var{variable} was defined on the command line.
+
+@item override
+if @var{variable} was defined with an @code{override} directive in a
+makefile (@pxref{Override Directive}).
+
+@item automatic
+if @var{variable} is an automatic variable defined for the
+execution of the commands for each rule.
 @end table
 
+This information is primarily useful (other than for your curiosity) to
+determine if you want to believe the value of a variable.  For example,
+suppose you have a makefile @file{foo} that includes another makefile
+@file{bar}.  You want a variable @code{bletch} to be defined in @file{bar}
+if you run the command @samp{make -f bar}, even if the environment contains
+a definition of @code{bletch}.  However, if @file{foo} defined
+@code{bletch} before including @file{bar}, you don't want to override that
+definition.  This could be done by using an @code{override} directive in
+@file{foo}, giving that definition precedence over the later definition in
+@file{bar}; unfortunately, the @code{override} directive would also
+override any command line definitions.  So, @file{bar} could
+include:@refill
+
+@example
+ifdef bletch
+ifeq "$(origin bletch)" "environment"
+bletch = barf, gag, etc.
+endif
+endif
+@end example
+
+@noindent
+If @code{bletch} has been defined from the environment, this will redefine
+it.
+
+If you want to override a previous definition of @code{bletch} if it came
+from the environment, even under @samp{-e}, you could instead write:
+
+@example
+ifneq "$(findstring environment,$(origin bletch))" ""
+bletch = barf, gag, etc.
+endif
+@end example
+
+Here the redefinition takes place if @samp{$(origin bletch)} returns either
+@samp{environment} or @samp{environment override}.
+
+@node Shell Function,  , Origin Function, Functions
+@section The @code{shell} Function
+@findex shell
+@cindex command expansion
+@cindex backquotes
+
+The @code{shell} function is unlike any other function except the
+@code{wildcard} function (@pxref{Wildcard Function}) in that it
+communicates with the world outside of @code{make}.
+
+The @code{shell} function performs the same function that backquotes
+(@samp{`}) perform in most shells: it does @dfn{command expansion}.  This
+means that it takes an argument that is a shell command and returns the
+output of the command.  The only processing @code{make} does on the result,
+before substituting it into the surrounding text, is to convert newlines to
+spaces.@refill
+
+The commands run by calls to the @code{shell} function are run when the
+function calls are expanded.  In most cases, this is when the makefile is
+read in.  The exception is that function calls in the commands of the rules
+are expanded when the commands are run, and this applies to @code{shell}
+function calls like all others.
+
+Here are some examples of the use of the @code{shell} function:
+
+@example
+contents := $(shell cat foo)
+@end example
+
+@noindent
+sets @code{contents} to the contents of the file @file{foo}, with a space
+(rather than a newline) separating each line.
+
+@example
+files := $(shell echo *.c)
+@end example
+
+@noindent
+sets @code{files} to the expansion of @samp{*.c}.  Unless @code{make} is
+using a very strange shell, this has the same result as @samp{$(wildcard
+*.c)}.@refill
+
 @node Running, Implicit, Functions, Top
 @chapter How to Run @code{make}
 
@@ -3186,12 +3752,12 @@ things or many others.
 * Goals::                 Goal arguments specify which parts of the makefile
                            should be used.
 
-* Avoid Compilation::     How to avoid recompiling certain files.
-
 * Instead of Execution::  Mode flags specify what kind of thing to do
                            with the commands in the makefile
                            other than simply execute them.
 
+* Avoiding Compilation::  How to avoid recompiling certain files.
+
 * Overriding::            Overriding a variable can specify an alternate
                            compiler, or alternate flags for the compiler,
                            or whatever else you program into the makefile.
@@ -3212,12 +3778,12 @@ If you use the @samp{-f} flag several times (each time with a
 following argument), all the specified files are used jointly as
 makefiles.
 
-If you do not use the @samp{-f} flag, the default is to use
-@file{./makefile}, or, if that does not exist, @file{./Makefile}.
-@xref{Makefiles}.@refill
+If you do not use the @samp{-f} flag, the default is to try
+@file{GNUmakefile}, @file{makefile}, or @file{Makefile}, in that order, and
+use the first of these three which exists.  @xref{Makefiles}.@refill
 
-@node Goals, Avoid Compilation, Makefile Arguments, Running
-@section Goals
+@node Goals, Instead of Execution, Makefile Arguments, Running
+@section Arguments to Specify the Goals
 @cindex goal
 
 The @dfn{goals} are the targets that @code{make} should strive ultimately
@@ -3225,11 +3791,11 @@ to update.  Other targets are updated as well if they appear as
 dependencies of goals, or dependencies of dependencies of goals, etc.
 
 By default, the goal is the first target in the makefile (not counting
-targets that start with a period or that appear in included makefiles).
-Therefore, makefiles are usually written so that the first target is for
-compiling the entire program or programs they describe.
+targets that start with a period).  Therefore, makefiles are usually
+written so that the first target is for compiling the entire program or
+programs they describe.
 
-You can specify a different goal or goal with arguments to @code{make}.
+You can specify a different goal or goals with arguments to @code{make}.
 Use the name of the goal as an argument.  If you specify several goals,
 @code{make} processes each of them in turn, in the order you name them.
 
@@ -3241,7 +3807,7 @@ make them.
 One use of specifying a goal is if you want to compile only a part of
 the program, or only one of several programs.  Specify as a goal each
 file that you wish to remake.  For example, consider a directory containing
-a several programs, with a makefile that starts like this:
+several programs, with a makefile that starts like this:
 
 @example
 .PHONY: all
@@ -3263,48 +3829,137 @@ everything except source files.  Naturally, this is done only if you
 request it explicitly with @samp{make clean}.  Here is a list of typical
 phony and empty target names:
 
-@table @file
-@item all
-Make all the top-level targets the makefile knows about.
+@table @file
+@item all
+Make all the top-level targets the makefile knows about.
+
+@item clean
+Delete all files that are normally created by running @code{make}.
+
+@item distclean
+@itemx realclean
+@itemx clobber
+Any of these three might be defined to delete everything that would
+not be part of a standard distribution.  For example, this would
+delete configuration files or links that you would normally create as
+preparation for compilation, even if the makefile itself cannot create
+these files.
+
+@item install
+Copy the executable file into a directory that users typically search
+for commands; copy any auxiliary files that the executable uses into
+the directories where it will look for them.
+
+@item print
+Print listings of the source files that have changed.
+
+@item tar
+Create a tar file of the source files.
+
+@item shar
+Create a shell archive (shar file) of the source files.
+
+@item dist
+Create a distribution file of the source files.  This might
+be a tar file, or a shar file, or a compressed version of one of the
+above, or even more than one of the above.
+@end table
+
+@node Instead of Execution, Avoiding Compilation, Goals, Running
+@section Instead of Executing the Commands
+
+The makefile tells @code{make} how to tell whether a target is up to date,
+and how to update each target.  But updating the targets is not always
+what you want.  Certain options specify other activities for @code{make}.
+
+@table @samp
+@item -t
+@cindex touching files
+@cindex @code{-t}
+``Touch''.  The activity is to mark the targets as up to date without
+actually changing them.  In other words, @code{make} pretends to compile
+the targets but does not really change their contents.
+
+@item -n
+@cindex @code{-n}
+``No-op''.  The activity is to print what commands would be used to make
+the targets up to date, but not actually execute them.
+
+@item -q
+@cindex @code{-q}
+@cindex question mode
+``Question''.  The activity is to find out silently whether the targets
+are up to date already; but execute no commands in either case.  In other
+words, neither compilation nor output will occur.
+
+@item -W
+@cindex @code{-W}
+@cindex what if
+``What if''.  Each @samp{-W} flag is followed by a file name.  The given
+files' modification times are recorded by @code{make} as being the present
+time, although the actual modification times remain the same.  When used in
+conjunction with the @samp{-n} flag, the @samp{-W} flag provides a way to
+see what would happen if you were to modify specific files.@refill
+@end table
+
+With the @samp{-n} flag, @code{make} prints without execution the commands
+that it would normally execute.
+
+With the @samp{-t} flag, @code{make} ignores the commands in the rules
+and uses (in effect) the command @code{touch} for each target that needs to
+be remade.  The @code{touch} command is also printed, unless @samp{-s} or
+@code{.SILENT} is used.  For speed, @code{make} does not actually invoke
+the program @code{touch}.  It does the work directly.
 
-@item clean
-Delete all files that the makefile could remake.
+With the @samp{-q} flag, @code{make} prints nothing and executes no
+commands, but the exit status code it returns is zero if and only if the
+targets to be considered are already up to date.
 
-@item clobber
-Delete absolutely everything the makefile could remake (whereas
-@samp{make clean} often leaves intact some files that might take a
-long time to remake).
+It is an error to use more than one of these three flags in the same
+invocation of @code{make}.
 
-@item install
-Copy the executable file into a directory that users typically search
-for commands; copy any auxiliary files that the executable uses into
-the directories where it will look for them.
+The @samp{-n}, @samp{-t}, and @samp{-q} options do not affect command
+lines that begin with @samp{+} characters or contain the strings
+@samp{$(MAKE)} or @samp{$@{MAKE@}}.  Note that only the line containing
+the @samp{+} character or the strings @samp{$(MAKE)} or @samp{$@{MAKE@}}
+is run regardless of these options.  Other lines in the same rule are
+not run unless they too begin with @samp{+} or contain @samp{$(MAKE)} or
+@samp{$@{MAKE@}}.@refill
 
-@item print
-Print listings of the source files that have changed.
+The @samp{-W} flag provides two features:
 
-@item tar
-Create a tar file of the source files.
+@itemize @bullet
+@item
+If you also use the @samp{-n} or @samp{-q} flag, you can see what
+@code{make} would do if you were to modify some files.
 
-@item shar
-Create a shell archive (shar file) of the source files.
-@end table
+@item
+Without the @samp{-n} or @samp{-q} flag, when @code{make} is actually
+executing commands, the @samp{-W} flag can direct @code{make} to act
+as if some files had been modified, without actually modifying the
+files.@refill
+@end itemize
+
+Note that the options @samp{-p} and @samp{-v} allow you to obtain other
+information about @code{make} or about the makefiles in use.
+@xref{Options}.@refill
 
-@node Avoid Compilation, Instead of Execution, Goals, Running
+@node Avoiding Compilation, Overriding, Instead of Execution, Running
 @section Avoiding Recompilation of Some Files
-@cindex -o
+@cindex @code{-o}
 
 Sometimes you may have changed a source file but you don't want to
 recompile all the files that depend on it.  For example, suppose you add a
 macro or a declaration to a header file that many other files depend on.
 Being conservative, @code{make} assumes that any change in the header file
 requires recompilation of all dependent files, but you know that they don't
-need to be recompiled and you would rather not waste the time waiting.
+need to be recompiled and you would rather not waste the time waiting for
+them to compile.
 
-If you anticipate the problem before making the change, you can use the
-@samp{-t} flag.  This flag tells @code{make} not to run the commands in the
-rules, but rather to mark the target up to date by changing its
-last-modification date.  You would follow this procedure:
+If you anticipate the problem before changing the header file, you can
+use the @samp{-t} flag.  This flag tells @code{make} not to run the
+commands in the rules, but rather to mark the target up to date by
+changing its last-modification date.  You would follow this procedure:
 
 @enumerate
 @item
@@ -3337,72 +3992,20 @@ for each header file.
 Touch all the object files with @samp{make -t}.
 @end enumerate
 
-@node Instead of Execution, Overriding, Avoid Compilation, Running
-@section Instead of Executing the Commands
-@cindex -t
-@cindex touch
-@cindex -q
-@cindex -n
-
-The makefile tells @code{make} how to tell whether a target is up to date,
-and how to update each target.  But updating the targets is not always
-what you want.  Certain options specify other activities for @code{make}.
-
-@table @samp
-@item -t
-``Touch''.  The activity is to mark the targets as up to date without
-actually changing them.  In other words, @code{make} pretends to compile
-the targets but does not really change their contents.
-
-@item -n
-``No-op''.  The activity is to print what commands would be used to make
-the targets up to date, but not actually execute them.
-
-@item -q
-``Question''.  The activity is to find out silently whether the targets
-are up to date already; but execute no commands in either case.  In other
-words, neither compilation nor output will occur.
-@end table
-
-With the @samp{-n} flag, @code{make} prints without execution the commands
-that it would normally execute.
-
-With the @samp{-t} flag, @code{make} ignores the commands in the rules
-and uses (in effect) the command @code{touch} for each target that needs to
-be remade.  The @code{touch} command is also printed, unless @samp{-s} or
-@code{.SILENT} is used.  For speed, @code{make} does not actually invoke
-the program @code{touch}.  It does the work directly.
-
-With the @samp{-q} flag, @code{make} prints nothing and executes no
-commands, but the exit status code it returns is zero if and only if the
-targets to be considered are already up to date.
-
-It is an error to use more than one of these three flags in the same
-invocation of @code{make}.
-
-If you are not at all interested in what @code{make} @emph{would} do,
-but rather in some other information about @code{make}, there are two
-options: the command line @samp{make -p -f /dev/null} will print the
-information in @code{make}'s database of variables, rules, directories
-and files and @samp{make -v -f /dev/null} will print information about
-what version of GNU @code{make} you are using.  @xref{Options}.@refill
-
-@node Overriding, Testing, Instead of Execution, Running
+@node Overriding, Testing, Avoiding Compilation, Running
 @section Overriding Variables
+@cindex overriding variables with arguments
 
-You can override the value of a variable using an argument to @code{make}
-that contains a @samp{=}.  The argument @samp{@var{v}=@var{x}} (or
-@samp{@var{v}:=@var{x}}; @pxref{Flavors}) sets the value of the variable
-@var{v} to @var{x}.
-
-Values specified this way override all values specified in the makefile
-itself; once you have set a variable with a command argument, any ordinary
-attempt in the makefile to change that variable is simply ignored.
+An argument that contains @samp{=} specifies the value of a variable:
+@samp{@var{v}=@var{x}} sets the value of the variable @var{v} to @var{x}.
+If you specify a value in this way, all ordinary assignments of the same
+variable in the makefile are ignored; we say they have been
+@dfn{overridden} by the command line argument.
 
-One way to use this facility is to pass extra flags to compilers.
-For example, in a properly written makefile, the variable @code{CFLAGS}
-is included in each command that runs the C compiler, so a file
-@file{foo.c} would be compiled like this:
+The most common way to use this facility is to pass extra flags to
+compilers.  For example, in a properly written makefile, the variable
+@code{CFLAGS} is included in each command that runs the C compiler, so a
+file @file{foo.c} would be compiled something like this:
 
 @example
 cc -c $(CFLAGS) foo.c
@@ -3416,19 +4019,27 @@ that occurs.  The makefile probably specifies the usual value for
 CFLAGS=-g
 @end example
 
-Each time you run @code{make}, you can override this value and specify a
-different value.  For example, if you say @samp{make CFLAGS='-g -O'}, each
-C compilation will be done with @samp{cc -c -g -O}.  (This illustrates how
-you can enclose spaces and other special characters in the value of a
-variable when you override it.)
+Each time you run @code{make}, you can override this value if you wish.
+For example, if you say @samp{make CFLAGS='-g -O'}, each C compilation will
+be done with @samp{cc -c -g -O}.  (This illustrates how you can enclose
+spaces and other special characters in the value of a variable when you
+override it.)
 
 The variable @code{CFLAGS} is only one of many standard variables that
-exist just so that you can change them this way.
-@xref{Implicit Variables}, for a complete list.
+exist just so that you can change them this way.  @xref{Implicit
+Variables}, for a complete list.
 
 You can also program the makefile to look at additional variables of your
-own, giving the user ability to control other aspects of how the makefile
-works by changing the variables.
+own, giving the user the ability to control other aspects of how the
+makefile works by changing the variables.
+
+When you override a variable with a command argument, you can define either
+a recursively-expanded variable or a simply-expanded variable.  The
+examples shown above make a recursively-expanded variable; to make a
+simply-expanded variable, write @samp{:=} instead of @samp{=}.  But, unless
+you want to include a variable reference or function call in the
+@emph{value} that you specify, it makes no difference which kind of
+variable you create.
 
 There is one way that the makefile can change a variable that you have
 overridden.  This is to use the @code{override} directive, which is a line
@@ -3437,6 +4048,7 @@ that looks like this: @samp{override @var{variable} = @var{value}}.
 
 @node Testing, Options, Overriding, Running
 @section Testing the Compilation of a Program
+@cindex testing compilation
 
 Normally, when an error happens in executing a shell command, @code{make}
 gives up immediately, returning a nonzero status.  No further commands are
@@ -3445,16 +4057,17 @@ correctly remade, and @code{make} reports this as soon as it knows.
 
 When you are compiling a program that you have just changed, this is not
 what you want.  Instead, you would rather that @code{make} try compiling
-every file that can be tried, to show you all the compilation errors.
+every file that can be tried, to show you as many compilation errors
+as possible.
 
-@cindex -k
+@cindex @code{-k}
 On these occasions, you should use the @samp{-k} flag.  This tells
 @code{make} to continue to consider the other dependencies of the pending
 targets, remaking them if necessary, before it gives up and returns nonzero
 status.  For example, after an error in compiling one object file,
 @samp{make -k} will continue compiling other object files even though it
 already knows that linking them will be impossible.  In addition to
-contuing after failing shell commands, @samp{make -k} will continue as much
+continuing after failed shell commands, @samp{make -k} will continue as much
 as possible after discovering that it doesn't know how to make a target or
 dependency file.  This will always cause an error message, but without
 @samp{-k}, it is a fatal error.  @xref{Options}.
@@ -3465,9 +4078,9 @@ as well report the failure immediately.  The @samp{-k} flag says that the
 real purpose is to test as much as possible of the changes made in the
 program, perhaps to find several independent problems so that you can
 correct them all before the next attempt to compile.  This is why Emacs's
-@code{compile} command passes the @samp{-k} flag by default.
+@kbd{M-x compile} command passes the @samp{-k} flag by default.
 
-@node Options,, Testing, Running
+@node Options,  , Testing, Running
 @section Summary of Options
 @cindex options
 @cindex flags
@@ -3479,10 +4092,10 @@ Here is a table of all the options @code{make} understands:
 @itemx -m
 These options are ignored for compatibility with other versions of @code{make}.
 
-@item -c @var{dir}
-Change to directory @var{dir} before executing the rules.  If multiple
-@samp{-c} options are specified, each is interpreted relative to the
-previous one: @samp{-c / -c etc} is equivalent to @samp{-c /etc}.
+@item -C @var{dir}
+Change to directory @var{dir} before reading the makefiles.  If multiple
+@samp{-C} options are specified, each is interpreted relative to the
+previous one: @samp{-C / -C etc} is equivalent to @samp{-C /etc}.
 This is typically used with recursive invocations of @code{make}
 (@pxref{Recursion}).
 
@@ -3494,6 +4107,10 @@ which files actually need to be remade, which implicit rules are
 considered and which are applied---everything interesting about how
 @code{make} decides what to do.
 
+@item -e
+Give variables taken from the environment precedence
+over variables from makefiles.  @xref{Environment}.
+
 @item -f @var{file}
 Use file @var{file} as a makefile.  @xref{Makefiles}.
 
@@ -3503,9 +4120,17 @@ Ignore all errors in commands executed to remake files.
 
 @item -I @var{dir}
 Specifies a directory @var{dir} to search for included makefiles.
-@xref{Include}.  If several @samp{-I} options are used to specify
-several directories, the directories are searched in the order
-specified.
+@xref{Include}.  If several @samp{-I} options are used to specify several
+directories, the directories are searched in the order specified.  Unlike
+the arguments to other flags of @code{make}, directories given with
+@samp{-I} flags may come directly after the flag: @samp{-I@var{dir}} is
+allowed, as well as @samp{-I @var{dir}}.  This syntax is allowed for
+compatibility with the C preprocessor's @samp{-I} flag.@refill
+
+@item -j @var{jobs}
+Specifies the number of jobs (commands) to run simultaneously.  If
+there is more than one @samp{-j} option, the last one is effective.
+@xref{Execution}, for more information on how commands are run.
 
 @item -k
 Continue as much as possible after an error.  While the target that
@@ -3513,6 +4138,13 @@ failed, and those that depend on it, cannot be remade, the other
 dependencies of these targets can be processed all the same.
 @xref{Testing}.
 
+@item -l @var{load}
+@item -l
+Specifies that no new jobs (commands) should be started if there are
+others jobs running and the load average is at least @var{load} (a
+floating-point number).  With no argument, removes a previous load
+limit.  @xref{Parallel}.
+
 @item -n
 Print the commands that would be executed, but do not execute them.
 @xref{Instead of Execution}.
@@ -3521,7 +4153,7 @@ Print the commands that would be executed, but do not execute them.
 Do not remake the file @var{file} even if it is older than its
 dependencies, and do not remake anything on account of changes in
 @var{file}.  Essentially the file is treated as very old and its rules
-are ignored.  @xref{Avoid Compilation}.
+are ignored.  @xref{Avoiding Compilation}.
 
 @item -p
 Print the data base (rules and variable values) that results from
@@ -3552,21 +4184,30 @@ or if you set @samp{-k} in @code{MAKEFLAGS} in your environment.@refill
 
 @item -t
 Touch files (mark them up to date without really changing them)
-instead of running their commands.  This is used to pretend (to fool
-future invocations of @code{make}) that the commands were done.
-@xref{Instead of Execution}.
+instead of running their commands.  This is used to pretend that the
+commands were done, in order to fool future invocations of
+@code{make}.  @xref{Instead of Execution}.
 
 @item -v
-Print the version of the @code{make} program plus a copyright,
-list of authors and notice of (non)warranty (short).
-After this information is printed, processing continues normally.
-To get the version information without doing anything else,
-use @samp{make -v -f /dev/null}.
+Print the version of the @code{make} program plus a copyright, a list
+of authors and a notice that there is no warranty.  After this
+information is printed, processing continues normally.  To get this
+information without doing anything else, use @samp{make -v -f
+/dev/null}.
 
 @item -w
 Print a message containing the working directory both before and after
-executing the makefile; this is useful for tracking down errors from
-builds of large directory trees.  @xref{Recursion}.
+executing the makefile.  This may be useful for tracking down errors
+from complicated nests of recursive @code{make} commands.
+@xref{Recursion}.
+
+@item -W @var{file}
+Pretend that the target @var{file} has just been modified.  When used
+with the @samp{-n} flag, this shows you what would happen if you were
+to modify that file.  Without @samp{-n}, it is almost the same as
+running a @code{touch} command on the given file before running
+@code{make}, except that the modification time is changed only in the
+imagination of @code{make}.@refill
 @end table
 
 @node Implicit, Archives, Running, Top
@@ -3579,11 +4220,11 @@ using the C compiler, @code{cc}.
 
 @dfn{Implicit rules} tell @code{make} how to use customary techniques so
 that you don't have to specify them in detail when you want to use them.
-For example, there is an implicit rule for C compilation.
-
-Implicit rules work based on file names.  For example, C compilation typically
-takes a @file{.c} file and makes a @file{.o} file.  So @code{make} applies
-the implicit rule when it sees this combination of file-name endings.
+For example, there is an implicit rule for C compilation.  Implicit rules
+work based on file names.  For example, C compilation typically takes a
+@file{.c} file and makes a @file{.o} file.  So @code{make} applies the
+implicit rule for C compilation when it sees this combination of file-name
+endings.
 
 A chain of implicit rules can apply in sequence; for example, @code{make}
 will remake a @file{.o} file from a @file{.y} file by way of a @file{.c} file.
@@ -3617,6 +4258,10 @@ You can define your own implicit rules by writing @dfn{pattern rules}.
 
 * Pattern Rules::        Defining new implicit rules.
 
+* Last Resort::          Defining commands for rules which can't find any.
+
+* Suffix Rules::         The old-fashioned style of implicit rule.
+
 * Search Algorithm::     Precise algorithm for applying implicit rules.
 @end menu
 
@@ -3641,30 +4286,30 @@ Because you mention @file{foo.o} but do not give a rule for it, @code{make}
 will automatically look for an implicit rule that tells how to update it.
 This happens whether or not the file @file{foo.o} currently exists.
 
-If an implicit rule is found, it supplies both commands and a dependency
-(the source file).  You would want to write a rule for @file{foo.o} with no
-command lines if you need to specify additional dependencies, such as
-header files, that the implicit rule cannot supply.
+If an implicit rule is found, it supplies both commands and one or more
+dependencies (the source files).  You would want to write a rule for
+@file{foo.o} with no command lines if you need to specify additional
+dependencies, such as header files, that the implicit rule cannot supply.
 
 Each implicit rule has a target pattern and dependency patterns.  There may
 be many implicit rules with the same target pattern.  For example, numerous
 rules make @samp{.o} files: one, from a @samp{.c} file with the C compiler;
 another, from a @samp{.p} file with the Pascal compiler; and so on.  The rule
-that actually applies is the one whose dependency exists or can be made.
-
+that actually applies is the one whose dependencies exist or can be made.
 So, if you have a file @file{foo.c}, @code{make} will run the C compiler;
 otherwise, if you have a file @file{foo.p}, @code{make} will run the Pascal
 compiler; and so on.
 
 Of course, when you write the makefile, you know which implicit rule you
 want @code{make} to use, and you know it will choose that one because you
-know which other files are supposed to exist.  @xref{Catalogue of Rules},
-for a catalogue of all the predefined implicit rules.
+know which possible dependency files are supposed to exist.
+@xref{Catalogue of Rules}, for a catalogue of all the predefined implicit
+rules.
 
-Above, we said an implicit rule applies if the required dependency ``exists
+Above, we said an implicit rule applies if the required dependencies ``exist
 or can be made''.  A file ``can be made'' if it is mentioned explicitly in
 the makefile as a target or a dependency, or if an implicit rule can be
-recursively found for how to make it.  When the implicit dependency is the
+recursively found for how to make it.  When an implicit dependency is the
 result of another implicit rule, we say that @dfn{chaining} is occurring.
 @xref{Chained Rules}.
 
@@ -3674,69 +4319,102 @@ only as a dependency is considered a target whose rule specifies nothing,
 so implicit rule search happens for it.  @xref{Search Algorithm}, for the
 details of how the search is done.
 
+If you don't want an implicit rule to be used for a target that has no
+commands, you can give that target empty commands by writing a semicolon.
+@xref{Empty Commands}.
+
 @node Catalogue of Rules, Implicit Variables, Using Implicit, Implicit
 @section Catalogue of Implicit Rules
 
 Here is a catalogue of predefined implicit rules which are always available
 unless the makefile explicitly overrides or cancels them.
-(@xref{Canceling Rules}, for information on canceling or overriding an
-implicit rule.  The @samp{-r} option cancels all predefined rules.)
+@xref{Canceling Rules}, for information on canceling or overriding an
+implicit rule.  The @samp{-r} option cancels all predefined rules.
+
+Not all of these rules will always be defined, even when the @samp{-r}
+option is not given.  Many of the predefined implicit rules are
+implemented in @code{make} as suffix rules, so which ones will be
+defined depends on the @dfn{suffix list} (the list of dependencies of
+the special target @code{.SUFFIXES}).  @xref{Suffix Rules}.
+The default suffix list is: @samp{.out}, @samp{.a}, @samp{.o},
+@samp{.c}, @samp{.cc}, @samp{.p}, @samp{.f}, @samp{.F}, @samp{.r},
+@samp{.e}, @samp{.y}, @samp{.ye}, @samp{.yr}, @samp{.l}, @samp{.s},
+@samp{.S}, @samp{.h}, @samp{.info}, @samp{.dvi}, @samp{.tex},
+@samp{.texinfo}, @samp{.cweb}, @samp{.web}, @samp{.sh}, @samp{.elc},
+@samp{.el}. All of the implicit rules described below whose dependencies
+have one of these suffixes are actually suffix rules.  If you modify
+the suffix list, the only predefined suffix rules in effect will be those
+named by one or two of the suffixes that are on the list you specify;
+rules whose suffixes fail to be on the list are disabled.@refill
 
 @table @asis
 @item Compiling C programs
-@file{@var{n}.o} will be made automatically from @file{@var{n}.c} 
-with the command @samp{$(CC) -c $(CFLAGS)}.@refill
+@file{@var{n}.o} will be made automatically from @file{@var{n}.c} with
+a command of the form @samp{$(CC) -c $(CPPFLAGS) $(CFLAGS)}.@refill
+
+@item Compiling C++ programs
+@file{@var{n}.o} will be made automatically from @file{@var{n}.cc}
+with a command of the form @samp{$(C++) -c $(CPPFLAGS) $(C++FLAGS)}.
+Although supported by the GNU C++ compiler, the suffix used by the
+AT&T C++ preprocessor, @samp{.C}, is not supported in @code{make}
+because we encourage the use of the preferred suffix for C++ files,
+@samp{.cc}.@refill
 
 @item Compiling Pascal programs
 @file{@var{n}.o} will be made automatically from @file{@var{n}.p}
 with the command @samp{$(PC) -c $(PFLAGS)}.@refill
 
-@item Compiling Fortran, EFL and Ratfor programs
-@file{@var{n}.o} will be made automatically from @file{@var{n}.e},
-@file{@var{n}.r}, @file{@var{n}.F} or @file{@var{n}.f} by running the
+@item Compiling Fortran and Ratfor programs
+@file{@var{n}.o} will be made automatically from @file{@var{n}.r},
+@file{@var{n}.F} or @file{@var{n}.f} by running the
 Fortran compiler.  The precise command used is as follows:@refill
 
-@table @code
-@item .e
-@samp{$(FC) -c $(EFLAGS)}.
+@table @samp
 @item .f
 @samp{$(FC) -c $(FFLAGS)}.
 @item .F
-@samp{$(FC) -c $(FFLAGS)}.
+@samp{$(FC) -c $(FFLAGS) $(CPPFLAGS)}.
 @item .r
-@samp{$(FC) -c $(RFLAGS)}.
+@samp{$(FC) -c $(FFLAGS) $(RFLAGS)}.
 @end table
 
-@item Preprocessing Fortran, EFL and Ratfor programs
-@file{@var{n}.f} will be made automatically from @file{@var{n}.e},
-@file{@var{n}.r} or @file{@var{n}.F}.  This rule runs just the
-preprocessor to convert a Ratfor, EFL or preprocessable Fortran
-program into a strict Fortran program.  The precise command used is as
-follows:@refill
+@item Preprocessing Fortran and Ratfor programs
+@file{@var{n}.f} will be made automatically from @file{@var{n}.r} or
+@file{@var{n}.F}.  This rule runs just the preprocessor to convert a
+Ratfor or preprocessable Fortran program into a strict Fortran
+program.  The precise command used is as follows:@refill
 
-@table @code
-@item .e
-@samp{$(FC) -F $(EFLAGS)}.
+@table @samp
 @item .F
-@samp{$(FC) -F $(FFLAGS)}.
+@samp{$(FC) -F $(CPPFLAGS) $(FFLAGS)}.
 @item .r
-@samp{$(FC) -F $(RFLAGS)}.
+@samp{$(FC) -F $(FFLAGS) $(RFLAGS)}.
 @end table
 
-@item Assembling assembler programs
+@item Compiling Modula-2 programs
+@file{@var{n}.sym} will be made from @file{@var{n}.def} with a command
+of the form @samp{$(M2C) $(M2FLAGS) $(DEFFLAGS)}.  @file{@var{n}.o}
+will be made from @file{@var{n}.mod} with a command of the form
+@samp{$(M2C) $(M2FLAGS) $(MODFLAGS)}.@refill
+
+@item Assembling and preprocessing assembler programs
 @file{@var{n}.o} will be made automatically from @file{@var{n}.s} by
 running the assembler @code{as}.  The precise command used is
 @samp{$(AS) $(ASFLAGS)}.@refill
 
+@file{@var{n}.s} will be made automatically from @file{@var{n}.S} by
+running the C preprocessor @code{cpp}.  The precise command used is
+@samp{$(CPP) $(CPPFLAGS)}.@refill
+
 @item Linking a single object file
 @file{@var{n}} will be made automatically from @file{@var{n}.o} by
 running the linker @code{ld} via the C compiler.  The precise command
-used is @samp{$(CC) $(LDFLAGS) @dots{} $(LOADLIBES)}.@refill
+used is @samp{$(CC) $(LDFLAGS) @var{n}.o $(LOADLIBES)}.@refill
 
-This rule does the right thing for a simple program with only one source
-file.  It will also do the right thing if there are multiple object files
-(presumably coming from various other source files), the first of which has
-a name matching that of the executable file.  Thus,
+This rule does the right thing for a simple program with only one
+source file.  It will also do the right thing if there are multiple
+object files (presumably coming from various other source files), the
+first of which has a name matching that of the executable file.  Thus,
 
 @example
 x: y.o z.o
@@ -3756,20 +4434,22 @@ rm -f z.o
 @end example
 
 @noindent
-In more complicated cases, you must write an explicit command for linking.
+In more complicated cases, such as when there is no object file whose
+name derives from the executable file name, you must write an explicit
+command for linking.
+
+Each kind of file automatically made into @code{.o} object files will
+be automatically linked by using the compiler (@samp{$(CC)},
+@samp{$(FC)} or @samp{$(PC)}; the C compiler @samp{$(CC)} is used to
+assemble @code{.s} files) without the @samp{-c} option.  This could be
+done by using the @code{.o} object files as intermediates, but it is
+faster to do the compiling and linking in one step, so that's how it's
+done.@refill
 
 @item Yacc for C programs
 @file{@var{n}.c} will be made automatically from @file{@var{n}.y} by
 running Yacc with the command @samp{$(YACC) $(YFLAGS)}.
 
-@item Yacc for Ratfor programs
-@file{@var{n}.r} will be made automatically from @file{@var{n}.yr} by
-running Yacc with the command @samp{$(YACCR) $(YFLAGS)}.
-
-@item Yacc for EFL programs
-@file{@var{n}.e} will be made automatically from @file{@var{n}.ye} by
-running Yacc with the command @samp{$(YACCE) $(YFLAGS)}.
-
 @item Lex for C programs
 @file{@var{n}.c} will be made automatically from @file{@var{n}.l} by
 by running Lex.  The actual command is @samp{$(LEX) $(LFLAGS)}.
@@ -3778,30 +4458,66 @@ by running Lex.  The actual command is @samp{$(LEX) $(LFLAGS)}.
 @file{@var{n}.r} will be made automatically from @file{@var{n}.l} by
 by running Lex.  The actual command is @samp{$(LEX) $(LFLAGS)}.
 
-The traditional custom of using the same suffix @samp{.l} for all Lex
-files regardless of whether they produce C code or Ratfor code makes
-it impossible for @code{make} to determine automatically which of the
-two languages you are using in any particular case.  If @code{make} is
+The convention of using the same suffix @samp{.l} for all Lex files
+regardless of whether they produce C code or Ratfor code makes it
+impossible for @code{make} to determine automatically which of the two
+languages you are using in any particular case.  If @code{make} is
 called upon to remake an object file from a @samp{.l} file, it must
 guess which compiler to use.  It will guess the C compiler, because
 that is more common.  If you are using Ratfor, make sure @code{make}
-knows this by mentioning @file{@var{n}.r} in the makefile.
+knows this by mentioning @file{@var{n}.r} in the makefile.  Or, if you
+are using Ratfor exclusively, with no C files, remove @code{.c} from
+the list of implicit rule suffixes with:@refill
+
+@example
+.SUFFIXES:
+.SUFFIXES: .r .f .l @dots{}
+@end example
+
+@item Making Lint Libraries from C, Yacc, or Lex programs
+@file{@var{n}.ln} will be made from @file{@var{n}.c} with a command of
+the form @samp{$(LINT) $(LINTFLAGS) $(CPPFLAGS) -i}.  The same command
+will be used on the C code produced from @file{@var{n}.y} or
+@file{@var{n}.l}.@refill
+
+@item @TeX{} and Web
+@file{@var{n}.dvi} will be made from @file{@var{n}.tex} with the
+command @samp{$(TEX)}.  @file{@var{n}.tex} will be made from
+@file{@var{n}.web} with @samp{$(WEAVE)}, or from @file{@var{n}.cweb}
+with @samp{$(CWEAVE)}.  @file{@var{n}.p} will be made from
+@file{@var{n}.web} with @samp{$(TANGLE)} and @file{@var{n}.c} will be
+made from @file{@var{n}.cweb} with @samp{$(CTANGLE)}.@refill
+
+@item Texinfo and Info
+@file{@var{n}.dvi} will be made from @file{@var{n}.texinfo} using the
+@samp{$(TEX)} and @samp{$(TEXINDEX)} commands.  The actual command
+sequence contains many shell conditionals to avoid unnecessarily
+running @TeX{} twice and to create the proper sorted index files.
+@file{@var{n}.info} will be made from @file{@var{n}.texinfo} with the
+command @samp{$(MAKEINFO)}.@refill
 
 @item RCS
-Any file @file{@var{n}} will be extracted if necessary from an RCS
-file named either @file{@var{n},v} or @file{RCS/@var{n},v}.  The
-precise command used is @samp{$(CO) $(COFLAGS)}.  The variable
-@code{CO} has default value @samp{co}.
+Any file @file{@var{n}} will be extracted if necessary from an RCS file
+named either @file{@var{n},v} or @file{RCS/@var{n},v}.  The precise
+command used is @samp{$(CO) $(COFLAGS)}.  @file{@var{n}} will not be
+extracted from RCS if it already exists, even if the RCS file is
+newer.@refill
 
 @item SCCS
 Any file @file{@var{n}} will be extracted if necessary from an SCCS
 file named either @file{s.@var{n}} or @file{SCCS/s.@var{n}}.  The
-precise command used is @samp{$(GET) $(GFLAGS)}.
+precise command used is @samp{$(GET) $(GFLAGS)}.@refill
+
+For the benefit of SCCS, a file @file{@var{n}} will be copied from
+@file{@var{n}.sh} and made executable (by everyone).  This is for
+shell scripts that are checked into SCCS.  Since RCS preserves the
+execution permission of a file, you don't need to use this feature
+with RCS.@refill
 
 We recommend that you avoid the use of SCCS.  RCS is widely held to be
 superior, and is also free.  By choosing free software in place of
-comparable (or lesser) proprietary software, you support the free software
-movement.
+comparable (or inferior) proprietary software, you support the free
+software movement.
 @end table
 
 @node Implicit Variables, Chained Rules, Catalogue of Rules, Implicit
@@ -3809,20 +4525,19 @@ movement.
 @cindex flags for compilers
 
 The commands in built-in implicit rules make liberal use of certain
-predefined variables.  You can redefine these variables, either in the
+predefined variables.  You can alter these variables, either in the
 makefile or with arguments to @code{make}, to alter how the implicit rules
-work without actually redefining them.
+work without redefining the rules themselves.
 
 For example, the command used to compile a C source file actually says
-@samp{$(CC) -c $(CFLAGS)}.  The default values of the variables used
-are @samp{cc} and nothing, resulting in the command @samp{cc -c}.  By
-redefining @samp{$(CC)} to @samp{ncc}, you could cause @samp{ncc} to
-be used for all C compilations performed by the implicit rule.  By
-redefining @samp{$(CFLAGS)} to be @samp{-g}, you could pass the
-@samp{-g} option to each compilation.  @emph{All} implicit rules that
-do C compilation use @samp{$(CC)} to get the program name for the
-compiler and @emph{all} include @samp{$(CFLAGS)} among the arguments
-given to the compiler.@refill
+@samp{$(CC) -c $(CFLAGS) $(CPPFLAGS)}.  The default values of the variables
+used are @samp{cc} and nothing, resulting in the command @samp{cc -c}.  By
+redefining @samp{$(CC)} to @samp{ncc}, you could cause @samp{ncc} to be
+used for all C compilations performed by the implicit rule.  By redefining
+@samp{$(CFLAGS)} to be @samp{-g}, you could pass the @samp{-g} option to
+each compilation.  @emph{All} implicit rules that do C compilation use
+@samp{$(CC)} to get the program name for the compiler and @emph{all}
+include @samp{$(CFLAGS)} among the arguments given to the compiler.@refill
 
 The variables used in implicit rules fall into two classes: those that are
 names of programs (like @code{CC}) and those that contain arguments for the
@@ -3834,6 +4549,10 @@ with spaces.
 Here is a table of variables used as names of programs:
 
 @table @code
+@item AR
+@vindex AR
+Archive-maintaing program; default @samp{ar}.
+
 @item AS
 @vindex AS
 Program for doing assembly; default @samp{as}.
@@ -3842,10 +4561,19 @@ Program for doing assembly; default @samp{as}.
 @vindex CC
 Program for compiling C programs; default @samp{cc}.
 
+@item C++
+@vindex C++
+Program for compiling C++ programs; default @samp{g++}.
+
 @item CO
 @vindex CO
 Program for extracting a file from RCS; default @samp{co}.
 
+@item CPP
+@vindex CPP
+Program for running the C preprocessor, with results to standard output;
+default @samp{$(CC) -E}.
+
 @item FC
 @vindex FC
 Program for compiling or preprocessing Fortran, Ratfor,
@@ -3864,6 +4592,15 @@ default @samp{lex}.
 @vindex PC
 Program for compiling Pascal programs; default @samp{pc}.
 
+@item FC
+@itemx EC
+@itemx RC
+@vindex FC
+@vindex EC
+@vindex RC
+Programs for compiling Fortran, EFL, and Ratfor programs,
+respectively; these all default to @samp{f77}.
+
 @item YACC
 @vindex YACC
 Program to use to turn Yacc grammars into C programs; default @samp{yacc}.
@@ -3878,16 +4615,50 @@ programs; default @samp{yacc -r}.
 Program to use to turn Yacc grammars into EFL
 programs; default @samp{yacc -e}.
 
-@item RANLIB
-@vindex RANLIB
-Program to use to update the symbol-directory of an archive
-(the @file{__.SYMDEF} member); default @samp{ranlib}.
+@item MAKEINFO
+@vindex MAKEINFO
+Program to make Info files from Texinfo source; default @samp{makeinfo}.
+
+@item TEX
+@vindex TEX
+Program to make @TeX{} DVI files from @TeX{} or Texinfo source;
+default @samp{tex}.
+
+@item TEXINDEX
+@vindex TEXINDEX
+The @code{texindex} program distributed with Emacs.
+This is used in the process to make @TeX{} DVI files from Texinfo source.
+
+@item WEAVE
+@vindex WEAVE
+Program to translate Web into @TeX{}; default @samp{weave}.
+
+@item CWEAVE
+@vindex CWEAVE
+Program to translate C Web into @TeX{}; default @samp{cweave}.
+
+@item TANGLE
+@vindex TANGLE
+Program to translate Web into Pascal; default @samp{tangle}.
+
+@item CTANGLE
+@vindex CTANGLE
+Program to translate C Web into C; default @samp{ctangle}.
+
+@item RM
+@vindex RM
+Command to remove a file; default @samp{rm -f}.
 @end table
 
 Here is a table of variables whose values are additional arguments for the
-programs above.  The default values for all of these is the empty string.
+programs above.  The default values for all of these is the empty
+string, unless otherwise noted.
 
 @table @code
+@item ARFLAGS
+@vindex ARFLAGS
+Flags to give the archive- maintaining program; default @samp{rv}.
+
 @item ASFLAGS
 @vindex ASFLAGS
 Extra flags to give to the assembler (when explicitly
@@ -3897,6 +4668,19 @@ invoked on a @samp{.s} file).
 @vindex CFLAGS
 Extra flags to give to the C compiler.
 
+@item C++FLAGS
+@vindex C++FLAGS
+Extra flags to give to the C++ compiler.
+
+@item COFLAGS
+@vindex COFLAGS
+Extra flags to give to the RCS @code{co} program.
+
+@item CPPFLAGS
+@vindex CPPFLAGS
+Extra flags to give to the C preprocessor and programs
+that use it (the C and Fortran compilers).
+
 @item EFLAGS
 @vindex EFLAGS
 Extra flags to give to the Fortran compiler for EFL programs.
@@ -3905,14 +4689,18 @@ Extra flags to give to the Fortran compiler for EFL programs.
 @vindex FFLAGS
 Extra flags to give to the Fortran compiler.
 
-@item LFLAGS
-@vindex LFLAGS
-Extra flags to give to Lex.
+@item GFLAGS
+@vindex GFLAGS
+Extra flags to give to the SCCS @code{get} program.
 
 @item LDFLAGS
 @vindex LDFLAGS
-Extra flags to give to compilers when they are supposed to invoke the
-linker, @samp{ld} (actually the value of the variable @code{LD}).
+Extra flags to give to compilers when they are
+supposed to invoke the linker, @samp{ld}.
+
+@item LFLAGS
+@vindex LFLAGS
+Extra flags to give to Lex.
 
 @item PFLAGS
 @vindex PFLAGS
@@ -3961,6 +4749,7 @@ implicit rule so as to preserve certain intermediate files.  You can also
 list the target pattern of an implicit rule (such as @samp{%.o}) as a
 dependency file of the special target @code{.PRECIOUS} to preserve intermediate
 files whose target patterns match that file's name.)@refill
+@cindex preserving intermediate files with .PRECIOUS
 
 A chain can involve more than two implicit rules.  For example, it is
 possible to make a file @file{foo} from @file{RCS/foo.y,v} by running RCS,
@@ -3975,21 +4764,56 @@ search for an implicit rule chain.
 
 There are some special implicit rules to optimize certain cases that would
 otherwise by handled by rule chains.  For example, making @file{foo} from
-@file{foo.c} could be handled by compiling and linking with separate rules,
-using @file{foo.o} as an intermediate file.  But what actually happens is
-that a special rule for this case does the compilation and linking with a
-single @code{cc} command.  The optimized rule is used in preference to the
-step-by-step chain because it comes earlier in the ordering of rules.
+@file{foo.c} could be handled by compiling and linking with separate
+chained rules, using @file{foo.o} as an intermediate file.  But what
+actually happens is that a special rule for this case does the compilation
+and linking with a single @code{cc} command.  The optimized rule is used in
+preference to the step-by-step chain because it comes earlier in the
+ordering of rules.
 
 @node Pattern Rules, Last Resort, Chained Rules, Implicit
 @section Defining and Redefining Pattern Rules
 
+You define an implicit rule by writing a @dfn{pattern rule}.  A pattern
+rule looks like an ordinary rule, except that its target contains the
+character @samp{%} (exactly one of them).  The target is considered a
+pattern for matching file names; the @samp{%} can match any nonempty
+substring, while other characters match only themselves.  The dependencies
+likewise use @samp{%} to show how their names relate to the target name.
+
+Thus, a pattern rule @samp{%.o : %.c} says how to make any file
+@file{@var{stem}.o} from another file @file{@var{stem}.c}.@refill
+
+@menu
+* Intro: Pattern Intro.        Basics of writing pattern rules.
+* Examples: Pattern Examples.  Real examples of pattern rule definitions.
+
+* Vars: Automatic.             The automatic variables enable the commands
+                                in pattern rules to act on the right files.
+
+* Matching: Pattern Match.     Details of how patterns match.
+
+* Match-Anything Rules::       Precautions in defining a rules that can
+                                match any target file whatever.
+
+* Canceling Rules::            Overriding or canceling built-in rules.
+
+* Last Resort::                How to define a last-resort rule
+                                that applies to any target that no other
+                                rule applies to.
+
+* Suffix Rules::               The old-fashioned way to define implicit rules.
+@end menu
+
+@node Pattern Intro, Pattern Examples, Pattern Rules, Pattern Rules
+@subsection Introduction to Pattern Rules
+
 @cindex pattern rule
 You define an implicit rule by writing a @dfn{pattern rule}.  A pattern
 rule looks like an ordinary rule, except that its target contains the
 character @samp{%} (exactly one of them).  The target is considered a
-pattern for matching file names; the @samp{%} can match any substring,
-while other characters match only themselves.
+pattern for matching file names; the @samp{%} can match any nonempty
+substring, while other characters match only themselves.
 
 For example, @samp{%.c} as a pattern matches any file name that ends in
 @samp{.c}.  @samp{s.%.c} as a pattern matches any file name that starts
@@ -3997,16 +4821,41 @@ with @samp{s.}, ends in @samp{.c} and is at least five characters long.
 (There must be at least one character to match the @samp{%}.)  The substring
 that the @samp{%} matches is called the @dfn{stem}.@refill
 
-A pattern rule must have at least one dependency that uses @samp{%}.
 @samp{%} in a dependency of a pattern rule stands for the same stem
 that was matched by the @samp{%} in the target.  In order for
 the pattern rule to apply, its target pattern must match the file name
 under consideration, and its dependency patterns must name files that
 exist or can be made.  These files become dependencies of the target.
 
+Thus, a rule of the form
+
+@example
+%.o : %.c
+@end example
+
+@noindent
+would specify how to make any file @file{@var{n}.o}, with another file
+@file{@var{n}.c} as its dependency, provided that the other file exists or
+can be made.
+
 There may also be dependencies that do not use @samp{%}; such a dependency
 attaches to every file made by this pattern rule.  These unvarying
-dependencies are rarely useful.
+dependencies are useful occasionally.
+
+It is allowed for a pattern rule to have no dependencies that contain
+@samp{%} or to have no dependencies at all.  This is effectively a general
+wildcard.  It provides a way to make any file that matches the target pattern.
+
+Pattern rules may have more than one target.  Unlike normal rules, this
+does not act as many different rules with the same dependencies and
+commands.  If a pattern rule has multiple targets, @code{make} knows that
+the rule's commands are responsible for making all of the targets.  The
+commands are executed only once to make all of the targets.  When searching
+for a pattern rule to match a target, the target patterns of a rule other
+than the one that matches the target in need of a rule are incidental:
+@code{make} worries only about giving commands and dependencies to the file
+presently in question.  However, when this file's commands are run, the
+other targets are marked as having been updated themselves.
 
 The order in which pattern rules appear in the makefile is important
 because the rules are considered in that order.  Of equally applicable
@@ -4015,27 +4864,7 @@ over those that are built in.  Note, however, that a rule whose
 dependencies actually exist or are mentioned always takes priority over a
 rule with dependencies that must be made by chaining other implicit rules.
 
-@menu
-* Examples: Pattern Examples.  Real examples of pattern rule definitions.
-
-* Vars: Automatic.             The automatic variables enable the commands
-                                in pattern rules to act on the right files.
-
-* Matching: Pattern Match.     Details of how patterns match.
-
-* Match-Anything Rules::       Precautions in defining a rules that can
-                                match any target file whatever.
-
-* Canceling Rules::           Overriding or canceling built-in rules.
-
-* Last Resort::                How to define a last-resort rule
-                                that applies to any target that no other
-                                rule applies to.
-
-* Suffix Rules::               The old-fashioned way to define implicit rules.
-@end menu
-
-@node Pattern Examples, Automatic, Pattern Rules, Pattern Rules
+@node Pattern Examples, Automatic, Pattern Intro, Pattern Rules
 @subsection Pattern Rule Examples
 
 Here are some examples of pattern rules actually predefined in
@@ -4044,14 +4873,14 @@ files:@refill
 
 @example
 %.o : %.c
-        $(CC) -c $(CFLAGS) $< -o $@@
+        $(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@@
 @end example
 
 @noindent
 defines a rule that can make any file @file{@var{x}.o} from
 @file{@var{x}.c}.  The command uses the automatic variables @samp{$@@} and
 @samp{$<} to substitute the names of the target file and the source file
-as they are in each case where the rule apply (@pxref{Automatic}).@refill
+in each case where the rule applies (@pxref{Automatic}).@refill
 
 Here is a second built-in rule:
 
@@ -4068,6 +4897,25 @@ the appropriate dependency file exists.  The double colon makes the rule
 @dfn{terminal}, which means that its dependency may not be an intermediate
 file (@pxref{Match-Anything Rules}).@refill
 
+This pattern rule has two targets:
+
+@example
+%.tab.c %.tab.h: %.y
+        bison -d $<
+@end example
+
+@noindent
+This tells @code{make} that the command @samp{bison -d @var{x}.y}
+will make both @file{@var{x}.tab.c} and @file{@var{x}.tab.h}.  If the file
+@file{foo} depends on the files @file{parse.tab.o} and @file{scan.o} and
+@file{scan.o} depends on @file{parse.tab.h}, when @file{parse.y} is
+changed, the command @samp{bison -d parse.y} will be executed only once,
+and the dependencies of both @file{parse.tab.o} and @file{scan.o} will be
+satisfied.  (Presumably, @file{parse.tab.o} will be recompiled from
+@file{parse.tab.c} and @file{scan.o} from @file{scan.c}, and @file{foo}
+will be linked from @file{parse.tab.o}, @file{scan.o}, and its other
+dependencies, and it will execute happily ever after.)@refill
+
 @node Automatic, Pattern Match, Pattern Examples, Pattern Rules
 @subsection Automatic Variables
 @cindex automatic variables
@@ -4100,8 +4948,8 @@ when the target is not an archive member.
 The name of the first dependency.
 
 @item $?
-The names of all the dependencies that are newer than the target, with
-spaces between them.
+The names of all the dependencies that are
+newer than the target, with spaces between them.
 
 @item $^
 The names of all the dependencies, with spaces between them.
@@ -4111,6 +4959,16 @@ The stem with which an implicit rule matches (@pxref{Pattern Match}).
 If the target is @file{dir/a.foo.b} and the target pattern is
 @file{a.%.b} then the stem is @file{dir/foo}.  The stem is useful for
 constructing names of related files.@refill
+
+In an explicit rule, there is no stem; so @samp{$*} cannot be
+determined in that way.  Instead, if the target name ends with a
+recognized suffix (@pxref{Suffix Rules}), @samp{$*} is set to the
+target name minus the suffix.  For example, if the target name is
+@samp{foo.c}, then @samp{$*} is set to @samp{foo}, since @samp{.c} is
+a suffix.@refill
+
+If the target name in an explicit rule does not end with a recognized
+suffix, @samp{$*} is set to the empty string for that rule.
 @end table
 
 @samp{$?} is useful even in explicit rules when you wish to operate on only
@@ -4120,13 +4978,14 @@ This rule copies just the changed object files into the archive:
 
 @example
 lib: foo.o bar.o lose.o win.o
-        ar c lib $?
+        ar r lib $?
 @end example
 
-Of the variables listed above, four have values that are single file names.
-These four have variants that get just the file's directory name or just
-the file name within the directory.  The variant variables' names are
-formed by appending @samp{D} or @samp{F}, respectively.  These variants are
+Of the variables listed above, four have values that are single file
+names, and two have values that are lists of file names.  These six have
+variants that get just the file's directory name or just the file name
+within the directory.  The variant variables' names are formed by
+appending @samp{D} or @samp{F}, respectively.  These variants are
 semi-obsolete in GNU @code{make} since the functions @code{dir} and
 @code{notdir} can be used to get an equivalent effect (@pxref{Filename
 Functions}).  Here is a table of the variants:@refill
@@ -4143,39 +5002,57 @@ The file-within-directory part of the file name of the target.  If the
 value of @samp{$@@} is @file{dir/foo.o} then @samp{$(@@F)} is
 @file{foo.o}.  @samp{$(@@F)} is equivalent to @samp{$(notdir $@@)}.
 
-@item $($/)
-The same as @code{$(@@F)}, for compatibility with some other versions
-of @code{make}.
+@item $(*D)
+@itemx $(*F)
+The directory part and the file-within-directory
+part of the stem; @file{dir/} and @file{foo} in this example.
 
 @item $(%D)
 @itemx $(%F)
-The directory part and the file-within-directory part of the archive
-member name.
-
-@item $(*D)
-@itemx $(*F)
-The directory part and the file-within-directory part of the stem;
-@file{dir/} in this example.
+The directory part and the file-within-directory part of the target
+archive member name.  This makes sense only for archive member
+targets of the form @file{@var{archive}(@var{member})}
+and useful only when @var{member} may contain a directory name.
+(@xref{Archive Members}.)
 
 @item $(<D)
 @itemx $(<F)
-The directory part and the file-within-directory part of the first
-implicit dependency.
+The directory part and the file-within-directory
+part of the first dependency.
+
+@item $(^D)
+@itemx $(^F)
+Lists of the directory parts and the file-within-directory
+parts of all dependencies.
+
+@item $(?D)
+@itemx $(?F)
+Lists of the directory parts and the file-within-directory
+parts of all dependencies that are out of date with
+respect to the target.
 @end table
 
+Note that we use a special stylistic convention when we talk about these
+automatic variables; we write ``the value of @samp{$<}'', rather than ``the
+variable @code{<}'' as we would write for ordinary variables such as
+@code{objects} and @code{CFLAGS}.  We think this convention looks more
+natural in this special case.  Please don't assume it has a deep
+significance; @samp{$<} refers to the variable named @code{<} just as
+@samp{$(CFLAGS)} refers to the variable named @code{CFLAGS}.@refill
+
 @node Pattern Match, Match-Anything Rules, Automatic, Pattern Rules
 @subsection How Patterns Match
 
 @cindex stem
 A target pattern is composed of a @samp{%} between a prefix and a suffix,
-either of which may be empty.  The pattern matches a file name only if the
-file name starts with the prefix and ends with the suffix, without overlap.
-The text between the prefix and the suffix is called the @dfn{stem}.  Thus,
-when the pattern @samp{%.o} matches the file name @file{test.o}, the stem
-is @samp{test}.  The pattern rule dependencies are turned into actual file
-names by substituting the stem for the character @samp{%}.  Thus, if in the
-same example one of the dependencies is written as @samp{%.c}, it expands
-to @samp{test.c}.@refill
+either or both of which may be empty.  The pattern matches a file name only
+if the file name starts with the prefix and ends with the suffix, without
+overlap.  The text between the prefix and the suffix is called the
+@dfn{stem}.  Thus, when the pattern @samp{%.o} matches the file name
+@file{test.o}, the stem is @samp{test}.  The pattern rule dependencies are
+turned into actual file names by substituting the stem for the character
+@samp{%}.  Thus, if in the same example one of the dependencies is written
+as @samp{%.c}, it expands to @samp{test.c}.@refill
 
 When the target pattern does not contain a slash (and usually it does not),
 directory names in the file names are removed from the file name before it
@@ -4202,13 +5079,14 @@ Suppose the makefile mentions @file{foo.c}.  For this target, @code{make}
 would have to consider making it by linking an object file @file{foo.c.o},
 or by C compilation-and-linking in one step from @file{foo.c.c}, or by
 Pascal compilation-and-linking from @file{foo.c.p}, and many other
-possibilities.  We know these possibilities are ridiculous since
-@file{foo.c} is a C source file, not an executable.@refill
+possibilities.
 
-If @code{make} did consider these possibilities, it would ultimately reject
-them, because files such as @file{foo.c.o}, @file{foo.c.p}, etc. would not
-exist.  But these possibilities are so numerous that @code{make} would run
-very slowly if it had to consider them.@refill
+We know these possibilities are ridiculous since @file{foo.c} is a C source
+file, not an executable.  If @code{make} did consider these possibilities,
+it would ultimately reject them, because files such as @file{foo.c.o},
+@file{foo.c.p}, etc. would not exist.  But these possibilities are so
+numerous that @code{make} would run very slowly if it had to consider
+them.@refill
 
 To gain speed, we have put various constraints on the way @code{make}
 considers match-anything rules.  There are two different constraints that
@@ -4216,9 +5094,10 @@ can be applied, and each time you define a match-anything rule you must
 choose one or the other for that rule.
 
 One choice is to mark the match-anything rule as @dfn{terminal} by defining
-it with a double colon.  When a rule is terminal, it does not apply
-unless its dependencies actually exist.  Dependencies that could be made
-with other implicit rules are not good enough.
+it with a double colon.  When a rule is terminal, it does not apply unless
+its dependencies actually exist.  Dependencies that could be made with
+other implicit rules are not good enough.  In other words, no further
+chaining is allowed beyond a terminal rule.
 
 For example, the built-in implicit rules for extracting sources from RCS
 and SCCS files are terminal; as a result, if the file @file{foo.c,v} does
@@ -4237,18 +5116,18 @@ For example, the file name @file{foo.c} matches the target for the pattern
 rule @samp{%.c : %.y} (the rule to run Yacc).  Regardless of whether this
 rule is actually applicable (which happens only if there is a file
 @file{foo.y}), the fact that its target matches is enough to prevent
-consideration of any nonterminal match-everything rules for the file
+consideration of any nonterminal match-anything rules for the file
 @file{foo.c}.  Thus, @code{make} will not even consider trying to make
 @file{foo.c} as an executable file from @file{foo.c.o}, @file{foo.c.c},
 @file{foo.c.p}, etc.@refill
 
-The motivation for this constraint is that nonterminal match-everything
+The motivation for this constraint is that nonterminal match-anything
 rules are used for making files containing specific types of data (such as
-executable files) and a file name with a recognized suffix indicates a
-specific different type of data (such as a C source file).
+executable files) and a file name with a recognized suffix indicates some
+other specific type of data (such as a C source file).
 
 Special built-in dummy pattern rules are provided solely to recognize
-certain file names so that nonterminal match-everything rules won't be
+certain file names so that nonterminal match-anything rules won't be
 considered.  These dummy rules have no dependencies and no commands, and
 they are ignored for all other purposes.  For example, the built-in
 implicit rule
@@ -4262,7 +5141,10 @@ exists to make sure that Pascal source files such as @file{foo.p} match a
 specific target pattern and thereby prevent time from being wasted looking
 for @file{foo.p.o} or @file{foo.p.c}.
 
-@node Canceling Rules,, Match-Anything Rules, Pattern Rules
+Dummy pattern rules such as the one for @samp{%.p} are made for every
+suffix listed as valid for use in suffix rules.  @xref{Suffix Rules}.
+
+@node Canceling Rules,  , Match-Anything Rules, Pattern Rules
 @subsection Canceling Implicit Rules
 
 You can override a built-in implicit rule by defining a new pattern rule
@@ -4299,7 +5181,21 @@ files contain real data, only that they exist.  Then you might do this:
 
 @noindent
 to cause all the source files needed (as dependencies) to be created
-silently.
+automatically.
+
+If you give @code{.DEFAULT} with no commands or dependencies:
+
+@example
+.DEFAULT:
+@end example
+
+@noindent
+the commands previously stored for @code{.DEFAULT} are cleared.
+Then @code{make} acts as if you had never defined @code{.DEFAULT} at all.
+
+If you want a target not to get the commands from @code{.DEFAULT}, but nor
+do you want any commands to be run for the target, you can give it empty
+commands.  @xref{Empty Commands}.
 
 @node Suffix Rules, Search Algorithm, Last Resort, Implicit
 @section Old-Fashioned Suffix Rules
@@ -4338,13 +5234,40 @@ fashioned way to define the rule for compiling a C source:@refill
 
 @example
 .c.o:
-        $(CC) -c $(CFLAGS) -o $@@ $<
+        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@@ $<
+@end example
+
+Suffix rules cannot have any dependencies of their own.  If they have any,
+they are treated as normal files with funny names, not as suffix rules.
+Thus, the rule:
+
+@example
+.c.o: foo.h
+        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@@ $<
 @end example
 
+@noindent
+tells how to make the file @file{.c.o} from the dependency file
+@file{foo.h}, and is not at all like the pattern rule:
+
+@example
+%.o: %.c foo.h
+        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@@ $<
+@end example
+
+@noindent
+which tells how to make @code{.o} files from @code{.c} files, and makes all
+@code{.o} files using this pattern rule also depend on @file{foo.h}.
+
+Suffix rules with no commands are also meaningless.  They do not remove
+previous rules as do pattern rules with no commands (@pxref{Canceling
+Rules}).  They simply enter the suffix or pair of suffixes concatenated as
+a target in the data base.@refill
+
 @findex .SUFFIXES
 The known suffixes are simply the names of the dependencies of the special
 target @code{.SUFFIXES}.  You can add your own suffixes by writing a rule
-for @code{.SUFFIXES} that adds more dependencies, as in
+for @code{.SUFFIXES} that adds more dependencies, as in:
 
 @example
 .SUFFIXES: .hack .win
@@ -4366,7 +5289,13 @@ want.  For example,
 
 The @samp{-r} flag causes the default list of suffixes to be empty.
 
-@node Search Algorithm,, Last Resort, Implicit
+@vindex SUFFIXES
+The variable @code{SUFFIXES} is defined to the default list of suffixes
+before @code{make} reads any makefiles.  You can change the list of suffixes
+with a rule for the special target @code{.SUFFIXES}, but that does not alter
+this variable.
+
+@node Search Algorithm,  , Suffix Rules, Implicit
 @section Implicit Rule Search Algorithm
 
 Here is the procedure @code{make} uses for searching for an implicit rule
@@ -4377,8 +5306,7 @@ is also followed recursively for dependencies that come from implicit
 rules, in the search for a chain of rules.
 
 Suffix rules are not mentioned in this algorithm because suffix rules are
-converted to equivalent pattern rules after the makefiles have been read
-in.
+converted to equivalent pattern rules once the makefiles have been read in.
 
 For an archive member target of the form
 @samp{@var{archive}(@var{member})}, the following algorithm is run twice,
@@ -4392,46 +5320,46 @@ called @var{n}.  For example, if @var{t} is @samp{src/foo.o}, then
 @var{d} is @samp{src/} and @var{n} is @samp{foo.o}.@refill
 
 @item
-Make a list of the pattern rules whose target matches @var{t} or
-@var{n}.  If the target pattern contains a slash, it is matched
-against @var{t}; otherwise, against @var{n}.
+Make a list of all the pattern rules one of whose targets matches
+@var{t} or @var{n}.  If the target pattern contains a slash, it is
+matched against @var{t}; otherwise, against @var{n}.
 
 @item
 If any rule in that list is @emph{not} a match-anything rule, then
 remove all nonterminal match-anything rules from the list.
 
 @item
-Remove any rules with no dependencies from the list.
+Remove from the list all rules with no commands.
 
 @item
 For each pattern rule in the list:
 
 @enumerate
 @item
-Find the stem @var{s}: the part of @var{t} or @var{n} that the
-@samp{%} in the target pattern matches.@refill
+Find the stem @var{s}, which is the nonempty part of @var{t} or @var{n}
+matched by the @samp{%} in the target pattern.@refill
 
 @item
 Compute the dependency names by substituting @var{s} for @samp{%}; if
-the target pattern does not contain a slash, @var{d} is appended to
-the front of each dependency name.
+the target pattern does not contain a slash, append @var{d} to
+the front of each dependency name.@refill
 
 @item
 Test whether all the dependencies exist or ought to exist.  (If a
-file name mentioned in the makefile as a target or as an explicit
+file name is mentioned in the makefile as a target or as an explicit
 dependency then we say it ought to exist.)
 
-If all dependencies exist or ought to exist, then this rule applies.
+If all dependencies exist or ought to exist, or there are no dependencies,
+then this rule applies.
 @end enumerate
 
 @item
-If no pattern rule has been found so far, try harder.  For
-each pattern rule in the list:
+If no pattern rule has been found so far, try harder.
+For each pattern rule in the list:
 
 @enumerate
 @item
-If the rule is a terminal match-anything rule, ignore it and go
-on to the next rule.
+If the rule is terminal, ignore it and go on to the next rule.
 
 @item
 Compute the dependency names as before.
@@ -4445,35 +5373,27 @@ recursively to see if the dependency can be made by an implicit
 rule.
 
 @item
-If all dependencies exist, ought to exist, or can be made by
-implicit rules, then this rule applies.
+If all dependencies exist, ought to exist, or can be
+made by implicit rules, then this rule applies.
 @end enumerate
 
 @item
-If no rule has been found so far, this target cannot be made by an
-implicit rule.  Return failure.
-
-@item
 If no implicit rule applies, the rule for @code{.DEFAULT}, if any,
 applies.  In that case, give @var{t} the same commands that
 @code{.DEFAULT} has.  Otherwise, there are no commands for @var{t}.
 @end enumerate
 
-When the commands of a pattern rule are executed for @var{t}, the automatic
-variables @samp{$@@}, @samp{$*} and @samp{$<} are set as follows:
-
-@table @samp
-@item $@@
-@var{t}
-@item $*
-If the target pattern contains a slash, this is @var{s}; otherwise, it
-is @var{d}@var{s}.
-@item $<
-The name of the first dependency that came via the implicit rule.
-@end table
+Once a rule that applies has been found, for each target pattern of the
+rule other than the one that matched @var{t} or @var{n}, the @samp{%} in
+the pattern is replaced with @var{s} and the resultant file name is stored
+until the commands to remake the target file @var{t} are executed.  After
+these commands are executed, each of these stored file names are entered
+into the data base and marked as having been updated and having the same
+update status as the file @var{t}.
 
-For @code{.DEFAULT} commands, as for non-implicit commands, @samp{$*}
-and @samp{$<} are empty.  @samp{$@@} is @var{t}, as always.
+When the commands of a pattern rule are executed for @var{t}, the automatic
+variables are set corresponding to the target and dependencies.
+@xref{Automatic}.
 
 @node Archives, Features, Implicit, Top
 @chapter Using @code{make} to Update Archive Files
@@ -4485,11 +5405,10 @@ main use is as subroutine libraries for linking.
 
 @menu
 * Members: Archive Members.    How to name an archive member
-				as a target or dependency.
+                                as a target or dependency.
 * Update: Archive Update.      An implicit rule can update
-				most archive member targets just right.
-* Symbols: Archive Symbols.    Another implicit rule runs @code{ranlib}
-				to update the special member @file{__.SYMDEF}.
+                                most archive member targets just right.
+* Symbols: Archive Symbols.    Special things to do for library archives.
 @end menu
 
 @node Archive Members, Archive Update, Archives, Archives
@@ -4536,7 +5455,7 @@ This causes one special rule whose target is @file{(%)} to match.  This
 rule updates the target @file{@var{a}(@var{m})} by copying the file @var{m}
 into the archive.  For example, it will update the archive member target
 @file{foo.a(bar.o)} by copying the @emph{file} @file{bar.o} into the
-archive @file{foo.a} as a member named @file{bar.o}.
+archive @file{foo.a} as a @emph{member} named @file{bar.o}.
 
 When this rule is chained with others, the result is very powerful.  Thus,
 @samp{make "foo.a(bar.o)"} in the presence of a file @file{bar.c} is enough
@@ -4549,9 +5468,27 @@ rm -f bar.o
 @end example
 
 @noindent
-Here the file @file{bar.o} has been envisioned as an intermediate file.
+Here @code{make} has envisioned the file @file{bar.o} as an intermediate
+file.
+
+Implicit rules such as this one are written using the automatic variable
+@samp{$%}.  @xref{Automatic}.
+
+An archive member name in an archive cannot contain a directory name, but
+it may be useful in a makefile to pretend that it does.  If you write an
+archive member target @file{foo.a(dir/file.o)}, @code{make} will perform
+automatic updating with this command:
+
+@example
+ar r foo.a dir/file.o
+@end example
+
+@noindent
+which has the effect of copying the file @file{dir/foo.o} into a member
+named @file{foo.o}.  In connection with such usage, the automatic variables
+@code{%D} and @code{%F} may be useful.
 
-@node Archive Symbols,, Archive Update, Archives
+@node Archive Symbols, , Archive Update, Archives
 @subsection Updating Archive Symbol Directories
 @cindex __.SYMDEF
 
@@ -4581,6 +5518,9 @@ running @code{ranlib}.  The rules for updating the members are not shown
 here; most likely you can omit them and use the implicit rule which copies
 files into the archive, as described in the preceding section.
 
+This is not necessary when using the GNU @code{ar} program, which
+updates the @file{__.SYMDEF} member automatically.
+
 @node Features, Missing, Archives, Top
 @chapter Features of GNU @code{make}
 
@@ -4588,7 +5528,7 @@ Here is a summary of the features of GNU @code{make}, for comparison
 with and credit to other versions of @code{make}.  We consider the features
 of @code{make} in BSD 4.2 systems as a baseline.
 
-Many features come from the version of @code{make} in System V:
+Many features come from the version of @code{make} in System V.
 
 @itemize @bullet
 @item
@@ -4630,7 +5570,7 @@ Execution of recursive commands to run @code{make} via the variable
 
 @item
 Support for suffix @samp{.a} in suffix rules.  In GNU @code{make},
-this is actually implemented by changing with one pattern rule for
+this is actually implemented by chaining with one pattern rule for
 installing members in an archive.  @xref{Chained Rules}.@refill
 
 @item
@@ -4640,16 +5580,51 @@ they do in the makefile, except for the stripping of initial
 whitespace.
 @end itemize
 
-Some features were inspired by a version of @code{make} whose identity we
-don't recall:
+The following features were inspired by various other versions of
+@code{make}.  In some cases it is unclear exactly which versions inspired
+which others.
 
 @itemize @bullet
 @item
-Pattern rules using @samp{%}.  @xref{Pattern Rules}.
+Pattern rules using @samp{%}.
+This has been implemented in several versions of @code{make}.
+We're not sure who invented it first, but it's been spread around a bit.
+@xref{Pattern Rules}.@refill
+
+@item
+Rule chaining and implicit intermediate files.
+This was implemented by Stu Feldman in his version of @code{make}
+for AT&T Eighth Edition Research Unix, and later by Andrew Hume of
+AT&T Bell Labs in his @code{mk} program.  We don't really know if
+we got this from either of them or thought it up ourselves at the
+same time.  @xref{Chained Rules}.
 
 @item
 The automatic variable @code{$^} containing a list of all dependencies
-of the current target.  @xref{Automatic}.
+of the current target.  We didn't invent this, but we have no idea who did.
+@xref{Automatic}.
+
+@item
+The ``what if'' flag (@samp{-W} in GNU @code{make}) was (as far as we know)
+invented by Andrew Hume in @code{mk}.  @xref{Instead of Execution}.
+
+@item
+The concept of doing several things at once (parallelism) exists in
+many incarnations of @code{make} and similar programs, though not in the
+System V or BSD implementations.  @xref{Execution}.
+
+@item
+Modified variable references using pattern substitution come from
+SunOS 4.0.  @xref{Reference}.  This functionality was provided in GNU
+@code{make} by the @code{patsubst} function before the alternate syntax
+was implemented for compatibility with SunOS 4.0.  It is not altogether
+clear who inspired whom, since GNU @code{make} had @code{patsubst}
+before SunOS 4.0 was released.@refill
+
+@item
+The special significance of @samp{+} characters preceding command lines
+(@pxref{Instead of Execution}) is mandated by draft 8 of IEEE Std 1003.2
+(POSIX).@refill
 @end itemize
 
 The remaining features are inventions new in GNU @code{make}:
@@ -4667,27 +5642,30 @@ variable @code{MAKE} to recursive @code{make} invocations.
 @xref{Recursion}.
 
 @item
-The @samp{-c} command option to change directory.  @xref{Options}.
+The @samp{-C} command option to change directory.  @xref{Options}.
 
 @item
 Verbatim variable definitions made with @code{define}.  @xref{Defining}.
 
 @item
 Phony targets declared with the special target @code{.PHONY}.
-@xref{Phony Targets}.
+A similar feature with a different syntax was implemented by
+Andrew Hume of AT&T Bell Labs in his @code{mk} program.  This
+seems to be a case of parallel discovery.  @xref{Phony Targets}.
 
 @item
 Text manipulation by calling functions.  @xref{Functions}.
 
 @item
 The @samp{-o} option to pretend a file's modification-time is old.
-@xref{Avoid Compilation}.
+@xref{Avoiding Compilation}.
 
 @item
-Conditional execution.  @xref{Conditionals}.
-
-@item
-Included makefiles never determine the default goal.
+Conditional execution.
+This has been implemented numerous times in various versions of
+@code{make}; it seems a natural extension derived from the features
+of the C preprocessor and similar macro languages and is not a
+revolutionary concept.  @xref{Conditionals}.
 
 @item
 The included makefile search path.  @xref{Include}.
@@ -4698,7 +5676,7 @@ Specifying extra makefiles to read.  @xref{MAKEFILES Variable}.
 @item
 Stripping leading sequences of @samp{./} from file names, so that
 @file{./@var{file}} and @file{@var{file}} are considered to be the
-same file.
+same file.@refill
 
 @item
 Special search method for library dependencies written in the form
@@ -4714,9 +5692,6 @@ The variable @code{MAKELEVEL} which keeps track of the current level
 of @code{make} recursion.  @xref{Recursion}.
 
 @item
-Rule chaining and implicit intermediate files.  @xref{Chained Rules}.
-
-@item
 Static pattern rules.  @xref{Static Pattern}.
 
 @item
@@ -4724,13 +5699,23 @@ Selective @code{vpath} search.  @xref{Directory Search}.
 
 @item
 Recursive variable references.  @xref{Reference}.
+
+@item
+Updated makefiles.  @xref{Remaking Makefiles}.
+System V @code{make} has a very, very limited form of this
+functionality in that it will check out SCCS files for makefiles.
+
+@item
+Several new built-in implicit rules.  @xref{Catalogue of Rules}.
 @end itemize
 
 @node Missing, Concept Index, Features, Top
 @chapter Missing Features in GNU @code{make}
 
 The @code{make} programs in various other systems support a few features
-that are not implemented in GNU @code{make}.
+that are not implemented in GNU @code{make}.  Draft 11.1 of the POSIX.2
+standard which specifies @code{make} does not require any of these
+features.@refill
 
 @itemize @bullet
 @item
@@ -4778,11 +5763,27 @@ $(targets): %: %.o lib.a
 
 @item
 In System V and 4.3 BSD @code{make}, files found by @code{VPATH} search
-(@pxref{Directory Search}) have their names changed inside command strings.
-We feel it is much cleaner to always use automatic variables and thus
-obviate the need for this feature.  We are still debating whether to
-implement this for the sake of compatibility or to leave it out to avoid
-such terrible ugliness.@refill
+(@pxref{Directory Search}) have their names changed inside command
+strings.  We feel it is much cleaner to always use automatic variables
+and thus make this feature obsolete.@refill
+
+@item
+In some Unix @code{make}s, implicit rule search (@pxref{Implicit}) is
+apparently done for @emph{all} targets, not just those without commands.
+This means you can do:@refill
+
+@example
+foo.o:
+        cc -c foo.c
+@end example
+
+@noindent
+and Unix @code{make} will intuit that @file{foo.o} depends on
+@file{foo.c}.@refill
+
+We feel that such usage is broken.  The dependency properties of
+@code{make} are well-defined (for GNU @code{make}, at least),
+and doing such a thing simply does not fit the model.@refill
 @end itemize
 
 @node Concept Index, Name Index, Missing, Top
@@ -4790,10 +5791,11 @@ such terrible ugliness.@refill
 
 @printindex cp
 
-@node Name Index,, Concept Index, Top
-@unnumbered Index of Functions, Directives and Variables
+@node Name Index,  , Concept Index, Top
+@unnumbered Index of Functions, Variables, and Directives
 
 @printindex fn
 
+@summarycontents
 @contents
 @bye
-- 
cgit v1.0-41-gc330

