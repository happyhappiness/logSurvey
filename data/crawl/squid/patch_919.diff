@@ -10,6 +10,8 @@ Changes to squid-3.HEAD (current):
 	  CONNECT and transparently redirected SSL traffic, using configurable
 	  client- and server-side certificates. While decrypted, the traffic
 	  can be expected using ICAP.
+	- TPROXY version 4 support now included.
+	- IPFW and Netfilter interception methods may now both be built in one binary.
 
 Changes to squid-3.0.STABLE1 (13 Dec 2007):
 
@@ -1332,7 +1332,7 @@ dnl "-64" from LDFLAGS
 	esac
 fi
 
-dnl Enable Linux transparent proxy support
+dnl Enable Linux transparent proxy support for obsolete TPROXY
 AC_ARG_ENABLE(linux-tproxy,
 [  --enable-linux-tproxy
 			  Enable real Transparent Proxy support for Netfilter TPROXY (version 2).],
@@ -1346,19 +1346,6 @@ AC_ARG_ENABLE(linux-tproxy,
 	fi
   fi
 ])
-AC_ARG_ENABLE(linux-tproxy4,
-[  --enable-linux-tproxy4
-			  Enable real Transparent Proxy support for Netfilter TPROXY (version 4+).],
-[ if test "$enableval" = "yes" ; then
-	echo "Linux Netfilter/TPROXY v4 enabled"
-	AC_DEFINE(LINUX_TPROXY4, 1, [Enable real Transparent Proxy support for Netfilter TPROXY v4.])
-	LINUX_TPROXY4="yes"
-        if test -z "$LINUX_NETFILTER"; then
-	    echo "Linux-Netfilter Transparent Proxy automatically enabled"
-	    LINUX_NETFILTER="yes"
-	fi
-  fi
-])
 
 AM_CONDITIONAL(MAKE_LEAKFINDER, false)
 dnl Enable Leak Finding Functions
@@ -3060,7 +3047,7 @@ if test "$LINUX_NETFILTER" ; then
 fi 
 if test "$LINUX_NETFILTER" = "no" ; then
     echo "WARNING: Cannot find necessary Linux kernel (Netfilter) header files"
-    echo "         Linux Transparent Proxy support WILL NOT be enabled"
+    echo "         Linux Transparent and Intercepting Proxy support WILL NOT be enabled"
     sleep 10
 fi
 
@@ -3081,7 +3068,7 @@ if test "$LINUX_TPROXY2" ; then
         echo "WARNING: Cannot find TPROXY v2 headers, you need to install the"
         echo "tproxy package from:"
         echo " - lynx http://www.balabit.com/downloads/tproxy/"
-        echo "Or select the '--enable-linux-tproxy4' option instead."
+        echo "Or select the '--enable-linux-netfilter' option instead for Netfilter support."
         sleep 10
     fi
 fi
@@ -177,11 +177,13 @@ This section gives a thorough account of those changes in three categories:
 	acl aclname dst ipv6
         </verb>
 
-	<tag>http(s)_port name= option</tag>
-	<p>New port option to assign internal names to listening ports
+	<tag>http(s)_port name= intercept</tag>
+	<p>New port options.
         <verb>
            name=        Specifies a internal name for the port. Defaults to
                         the port specification (port or addr:port)
+
+           intercept    Rename of old 'transparent' option to indicate proper functionality.
         </verb>
 
 	<tag>acl myportname</tag>
@@ -190,7 +192,6 @@ This section gives a thorough account of those changes in three categories:
         acl aclname myportname 3128 ...         # http(s)_port name
         </verb>
 
-	
         <tag>external_acl_type</tag>
         <p>New options 'ipv4' and 'ipv6' are added to set the IPv4/v6 protocol between squid and its helpers.
            Please be aware of some limits to these options. These options only affet the transport protocol used
@@ -242,6 +243,10 @@ This section gives a thorough account of those changes in three categories:
        Enabling this directive Squid rotates IP's per request.
         </verb>
 
+	<tag>http_port</tag>
+	<p>option 'transparent' is being deprecated in favour of 'intercept' which more clearly identifies what the option does.
+	For now option 'tproxy' remains with old behaviour meaning fully-invisible proxy using TPROXY support.</p>
+
 </descrip>
 
 
@@ -308,7 +313,14 @@ This section gives an account of those changes in three categories:
 	<tag>--disable-internl-dns</tag>
 	<p>Better support for Linux using the external DNS helper.
            The helper will compile and work with dns_nameservers on more variants of Linux than previously.</p>
- 
+
+	<tag>--enable-linux-netfilter</tag>
+	<p>This option now enables support for all three netfilter interception targets.
+        Adding TPROXY version 4+ support to squid through the TPROXY target.
+	This options requires a linux kernel 2.6.25 or later for embeded netfilter TPROXY targets.
+	Older REDIRECT and DNAT targets work as before on HTTP ports marked 'intercept'.
+	</p>
+
 </descrip>
 </p>
 
@@ -334,6 +346,8 @@ porting one of these from Squid-2 to Squid-3 is most welcome.
 <p>The following configure options have been removed.
 
 <descrip>
+	<tag>--enable-linux-tproxy</tag>
+	<p>Replaced by --enable-linux-tproxy2 to make way for differences in TPROXY v2 and v4 support.</p>
 
 </descrip>
 
@@ -53,8 +53,8 @@ ACLChecklist::authenticated()
     } else if (request->flags.accelerated) {
         /* WWW authorization on accelerated requests */
         headertype = HDR_AUTHORIZATION;
-    } else if (request->flags.transparent) {
-        debugs(28, 1, "ACHChecklist::authenticated: authentication not applicable on transparently intercepted requests.");
+    } else if (request->flags.intercepted || request->flags.spoof_client_ip) {
+        debugs(28, DBG_IMPORTANT, HERE << " authentication not applicable on intercepted requests.");
         return -1;
     } else {
         /* Proxy authorization on proxy requests */
@@ -3,6 +3,7 @@
  *
  * DEBUG: section 89    NAT / IP Interception 
  * AUTHOR: Robert Collins
+ * AUTHOR: Amos Jeffries
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
  * ----------------------------------------------------------
@@ -32,12 +33,16 @@
  *
  */
 
+#include "IPInterception.h"
+#include "fde.h"
+
+#if 0
 #include "squid.h"
 #include "clientStream.h"
-#include "IPInterception.h"
-#include "SquidTime.h"
+#endif
 
 #if IPF_TRANSPARENT
+
 #if HAVE_SYS_IOCTL_H
 #include <sys/ioctl.h>
 #endif
@@ -71,7 +76,8 @@
 #elif HAVE_NETINET_IP_NAT_H
 #include <netinet/ip_nat.h>
 #endif
-#endif
+
+#endif /* IPF_TRANSPARENT required headers */
 
 #if PF_TRANSPARENT
 #include <sys/types.h>
@@ -81,18 +87,143 @@
 #include <net/if.h>
 #include <netinet/in.h>
 #include <net/pfvar.h>
-#endif
+#endif /* PF_TRANSPARENT required headers */
 
 #if LINUX_NETFILTER
 #include <linux/netfilter_ipv4.h>
 #endif
 
+#if LINUX_TPROXY2
+#ifdef HAVE_LINUX_NETFILTER_IPV4_IP_TPROXY_H
+#include <linux/netfilter_ipv4/ip_tproxy.h>
+#else
+#error " TPROXY v2 Header file missing: linux/netfilter_ipv4/ip_tproxy.h. Perhapse you meant to use TPROXY v4 ? "
+#endif
+#endif
+
+
+// single global instance for access by other components.
+IPIntercept IPInterceptor;
+
+void
+IPIntercept::StopTransparency(const char *str) {
+    if(transparent_active) {
+        debugs(89, DBG_IMPORTANT, "Stopping full transparency: " << str);
+        transparent_active = 0;
+    }
+}
+
+void
+IPIntercept::StopInterception(const char *str) {
+    if(intercept_active) {
+        debugs(89, DBG_IMPORTANT, "Stopping IP interception: " << str);
+        intercept_active = 0;
+    }
+}
+
 int
-clientNatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &dst)
+IPIntercept::NetfilterInterception(int fd, const IPAddress &me, IPAddress &dst, int silent)
 {
+#if LINUX_NETFILTER
+    struct addrinfo *lookup = NULL;
 
-#if IPF_TRANSPARENT  /* --enable-ipf-transparent */
+    dst.GetAddrInfo(lookup,AF_INET);
+
+    /** \par
+     * Try NAT lookup for REDIRECT or DNAT targets. */
+    if( getsockopt(fd, SOL_IP, SO_ORIGINAL_DST, lookup->ai_addr, &lookup->ai_addrlen) == 0) {
+        if(!silent) {
+            debugs(89, DBG_IMPORTANT, HERE << " NF getsockopt(SO_ORIGINAL_DST) failed: " << xstrerror());
+            last_reported = squid_curtime;
+        }
+    }
+    else {
+        dst = *lookup;
+    }
+
+    dst.FreeAddrInfo(lookup);
+
+    if(me != dst) {
+        debugs(89, 5, HERE << "address: " << dst);
+        return 0;
+    }
 
+#endif
+    return -1;
+}
+
+int
+IPIntercept::NetfilterTransparent(int fd, const IPAddress &me, IPAddress &dst, int silent)
+{
+#if LINUX_NETFILTER
+    struct addrinfo *lookup = NULL;
+
+    if( ! fd_table[fd].flags.transparent) return -1;
+
+    dst.GetAddrInfo(lookup,AF_INET);
+
+    /** \par
+     * Try lookup for TPROXY targets. BUT, only if the FD is flagged for transparent operations. */
+    if(getsockopt(fd, SOL_IP, IP_TRANSPARENT, lookup->ai_addr, &lookup->ai_addrlen) != 0) {
+        if(!silent) {
+            debugs(89, DBG_IMPORTANT, HERE << " NF getsockopt(IP_TRANSPARENT) failed: " << xstrerror());
+            last_reported = squid_curtime;
+        }
+    }
+    else {
+        dst = *lookup;
+    }
+
+    dst.FreeAddrInfo(lookup);
+
+    if(me != dst) {
+        debugs(89, 5, HERE << "address: " << dst);
+        return 0;
+    }
+
+#endif
+    return -1;
+}
+
+int
+IPIntercept::IPFWInterception(int fd, const IPAddress &me, IPAddress &dst, int silent)
+{
+#if IPFW_TRANSPARENT
+    struct addrinfo *lookup = NULL;
+
+    dst.GetAddrInfo(lookup,AF_INET);
+
+    /** \par
+     * Try lookup for IPFW interception. */
+    if( getsockname(fd, lookup->ai_addr, &lookup->ai_addrlen) >= 0 ) {
+        if( !silent ) {
+            debugs(89, DBG_IMPORTANT, HERE << " IPFW getsockname(...) failed: " << xstrerror());
+            last_reported = squid_curtime;
+        }
+    }
+    else {
+        dst = *lookup;
+    }
+
+    dst.FreeAddrInfo(lookup);
+
+    if(me != dst) {
+        debugs(89, 5, HERE << "address: " << dst);
+        return 0;
+    }
+
+#endif
+    return -1;
+}
+
+
+// TODO split this one call into one per transparency method
+//	with specific switching at run-time ??
+
+int
+IPIntercept::NatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &dst)
+{
+#if IPF_TRANSPARENT  /* --enable-ipf-transparent */
     dst = me;
     if( !me.IsIPv4() ) return -1;
     if( !peer.IsIPv4() ) return -1;
@@ -108,7 +239,6 @@ clientNatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &d
 
     struct natlookup natLookup;
     static int natfd = -1;
-    static time_t last_reported = 0;
     int x;
 
 #if defined(IPFILTER_VERSION) && (IPFILTER_VERSION >= 4000027)
@@ -201,49 +331,32 @@ clientNatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &d
 
 
 
-#elif LINUX_NETFILTER || LINUX_TPROXY4  /* --enable-linux-netfilter OR --enable-linux-tproxy4 */
+#elif LINUX_NETFILTER || IPFW_TRANSPARENT /* --enable-linux-netfilter OR --enable-ipfw-transparent */
 
-    dst = me;
-    if( !me.IsIPv4() ) return -1;
-    if( !peer.IsIPv4() ) return -1;
-
-    static time_t last_reported = 0;
-    struct addrinfo *lookup = NULL;
+    /* Netfilter and IPFW share almost identical lookup methods for their NAT tables.
+     * This allows us to perform a nice clean failover sequence for them.
+     */
+    int silent = (squid_curtime - last_reported > 60 ? 0 : 1);
 
-    dst.GetAddrInfo(lookup,AF_INET);
-
-#if LINUX_NETFILTER
-    if (getsockopt(fd, SOL_IP, SO_ORIGINAL_DST, lookup->ai_addr, &lookup->ai_addrlen) != 0)
-#elif LINUX_TPROXY4
-    if (getsockopt(fd, SOL_IP, IP_TRANSPARENT, lookup->ai_addr, &lookup->ai_addrlen) != 0)
-#endif
-    {
-        dst.FreeAddrInfo(lookup);
+    dst = me;
 
-        if (squid_curtime - last_reported > 60) {
-            debugs(89, 1, "clientNatLookup: peer " << peer << " NF getsockopt(" << (LINUX_NETFILTER?"SO_ORIGINAL_DST":"IP_TRANSPARENT") << ") failed: " << xstrerror());
-            last_reported = squid_curtime;
-        }
+    if( !me.IsIPv4()   ) return -1;
+    if( !peer.IsIPv4() ) return -1;
 
-        return -1;
+    if(intercept_active) {
+        if( NetfilterInterception(fd, me, dst, silent) == 0) return 0;
+        if( IPFWInterception(fd, me, dst, silent) == 0) return 0;
+    }
+    if(transparent_active) {
+        if( NetfilterTransparent(fd, me, dst, silent) == 0) return 0;
     }
-    dst = *lookup;
-
-    dst.FreeAddrInfo(lookup);
-
-    debugs(89, 5, "clientNatLookup: addr = " << dst << "");
-
-    if (me != dst)
-        return 0;
-    else
-        return -1;
 
+    return -1;
 
 #elif PF_TRANSPARENT  /* --enable-pf-transparent */
 
     struct pfioc_natlook nl;
     static int pffd = -1;
-    static time_t last_reported = 0;
 
     if( !me.IsIPv4() ) return -1;
     if( !peer.IsIPv4() ) return -1;
@@ -301,39 +414,45 @@ clientNatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &d
     }
 
 
-#elif IPFW_TRANSPARENT /* --enable-ipfw-transparent */
+#else /* none of the transparent options configured */
 
-    int ret;
-    struct addrinfo *lookup = NULL;
+    debugs(89, 1, "WARNING: transparent proxying not supported");
+    return -1;
 
-    if( !me.IsIPv4() ) return -1;
-    if( !peer.IsIPv4() ) return -1;
+#endif
 
-    dst.GetAddrInfo(lookup,AF_INET);
+}
 
-    ret = getsockname(fd, lookup->ai_addr, &lookup->ai_addrlen);
+#if LINUX_TPROXY2
+IPIntercept::SetTproxy2OutgoingAddr(int fd, const IPAddress &src)
+{
+    IPAddress addr;
+    struct in_tproxy itp;
 
-    if (ret < 0) {
+    src.GetInAddr(itp.v.addr.faddr);
+    itp.v.addr.fport = 0;
 
-        dst.FreeAddrInfo(lookup);
+    /* If these syscalls fail then we just fallback to connecting
+     * normally by simply ignoring the errors...
+     */
+    itp.op = TPROXY_ASSIGN;
 
-        debugs(89, 1, "clientNatLookup: getpeername failed (fd " << fd << "), errstr " << xstrerror());
+    addr = (struct in_addr)itp.v.addr.faddr;
+    addr.SetPort(itp.v.addr.fport);
 
+    if (setsockopt(fd, SOL_IP, IP_TPROXY, &itp, sizeof(itp)) == -1) {
+        debugs(20, 1, "tproxy ip=" << addr << " ERROR ASSIGN");
         return -1;
-    }
-
-    dst = *lookup;
+    } else {
+        itp.op = TPROXY_FLAGS;
+        itp.v.flags = ITP_CONNECT;
 
-    dst.FreeAddrInfo(lookup);
+        if (setsockopt(fd, SOL_IP, IP_TPROXY, &itp, sizeof(itp)) == -1) {
+            debugs(20, 1, "tproxy ip=" << addr << " ERROR CONNECT");
+            return -1;
+        }
+    }
 
     return 0;
-
-
-#else /* none of the transparent options configured */
-
-    debugs(89, 1, "WARNING: transparent proxying not supported");
-    return -1;
-
-#endif
-
 }
+#endif
@@ -1,43 +1,129 @@
 /*
  * $Id: IPInterception.h,v 1.7 2007/12/14 23:11:45 amosjeffries Exp $
  *
- *
- * SQUID Web Proxy Cache          http://www.squid-cache.org/
- * ----------------------------------------------------------
- *
- *  Squid is the result of efforts by numerous individuals from
- *  the Internet community; see the CONTRIBUTORS file for full
- *  details.   Many organizations have provided support for Squid's
- *  development; see the SPONSORS file for full details.  Squid is
- *  Copyrighted (C) 2001 by the Regents of the University of
- *  California; see the COPYRIGHT file for full details.  Squid
- *  incorporates software developed and/or copyrighted by other
- *  sources; see the CREDITS file for full details.
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *  
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *  
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
+ * DEBUG: section 89    NAT / IP Interception
+ * AUTHOR: Robert Collins
+ * AUTHOR: Amos Jeffries
  *
  */
 #ifndef SQUID_IPINTERCEPTION_H
 #define SQUID_IPINTERCEPTION_H
 
-#include "IPAddress.h"
+class IPAddress;
+
+/* for time_t */
+#include "SquidTime.h"
+
+/**
+ \defgroup IPInterceptAPI IP Interception and Transparent Proxy API
+ \ingroup SquidComponent
+ \par
+ * There is no formal state-machine for transparency and interception
+ * instead there is this neutral API which other connection state machines
+ * and the comm layer use to co-ordinate their own state for transparency.
+ */
+class IPIntercept
+{
+public:
+    IPIntercept() : transparent_active(0), intercept_active(0), last_reported(0) {};
+    ~IPIntercept() {};
+
+    /** Perform NAT lookups */
+    int NatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &dst);
+
+#if LINUX_TPROXY2
+    // only relevant to TPROXY v2 connections.
+    // which require the address be set specifically post-connect.
+    int SetTproxy2OutgoingAddr(int fd, const IPAddress &src);
+#endif
+
+    /**
+     \retval 0	Full transparency is disabled.
+     \retval 1  Full transparency is enabled and active.
+     */
+    inline int TransparentActive() { return transparent_active; };
+
+    /** \par
+     * Turn on fully Transparent-Proxy activities.
+     * This function should be called during parsing of the squid.conf
+     * When any option requiring full-transparency is encountered.
+     */
+    inline void StartTransparency() { transparent_active=1; };
+
+    /** \par
+     * Turn off fully Transparent-Proxy activities on all new connections.
+     * Existing transactions and connections are unaffected and will run
+     * to their natural completion.
+     \param str    Reason for stopping. Will be logged to cache.log
+     */
+    void StopTransparency(const char *str);
 
-#if LINUX_TPROXY4 && !defined(IP_TRANSPARENT)
+    /**
+     \retval 0	IP Interception is disabled.
+     \retval 1  IP Interception is enabled and active.
+     */
+    inline int InterceptActive() { return intercept_active; };
+
+    /** \par
+     * Turn on IP-Interception-Proxy activities.
+     * This function should be called during parsing of the squid.conf
+     * When any option requiring interception / NAT handling is encountered.
+     */
+    inline void StartInterception() { intercept_active=1; };
+
+    /** \par
+     * Turn off IP-Interception-Proxy activities on all new connections.
+     * Existing transactions and connections are unaffected and will run
+     * to their natural completion.
+     \param str    Reason for stopping. Will be logged to cache.log
+     */
+    inline void StopInterception(const char *str);
+
+
+private:
+
+    /**
+     * perform Lookups on Netfilter interception targets (REDIRECT, DNAT).
+     *
+     \param silent[in]   0 if errors are to be displayed. 1 if errors are to be hidden.
+     \retval 0     Successfuly located the new address.
+     \retval -1    An error occured during NAT lookups.
+     */
+    int NetfilterInterception(int fd, const IPAddress &me, IPAddress &dst, int silent);
+
+    /**
+     * perform Lookups on Netfilter fully-transparent interception targets (TPROXY).
+     *
+     \param silent[in]   0 if errors are to be displayed. 1 if errors are to be hidden.
+     \retval 0     Successfuly located the new address.
+     \retval -1    An error occured during NAT lookups.
+     */
+    int NetfilterTransparent(int fd, const IPAddress &me, IPAddress &dst, int silent);
+
+    /**
+     * perform Lookups on IPFW interception.
+     *
+     \param silent[in]   0 if errors are to be displayed. 1 if errors are to be hidden.
+     \retval 0     Successfuly located the new address.
+     \retval -1    An error occured during NAT lookups.
+     */
+    int IPFWInterception(int fd, const IPAddress &me, IPAddress &dst, int silent);
+
+
+    int transparent_active;
+    int intercept_active;
+    time_t last_reported; /**< Time of last error report. Throttles NAT error display to 1 per minute */
+};
+
+#if LINUX_NETFILTER && !defined(IP_TRANSPARENT)
+/// \ingroup IPInterceptAPI
 #define IP_TRANSPARENT 19
 #endif
 
-SQUIDCEXTERN int clientNatLookup(int fd, const IPAddress &me, const IPAddress &peer, IPAddress &dst);
+/**
+ \ingroup IPInterceptAPI
+ * Globally available instance of the IP Interception manager.
+ */
+extern IPIntercept IPInterceptor;
 
 #endif /* SQUID_IPINTERCEPTION_H */
@@ -1,8 +1,6 @@
-
 /*
  * $Id: ProtoPort.h,v 1.1 2008/02/11 22:24:39 rousskov Exp $
  */
-
 #ifndef SQUID_PROTO_PORT_H
 #define SQUID_PROTO_PORT_H
 
@@ -21,21 +19,15 @@ struct http_port_list
     char *name;                /* visible name */
     char *defaultsite;         /* default web site */
 
-    unsigned int transparent:1; /* transparent proxy */
-
-    unsigned int accel:1; /* HTTP accelerator */
-
-    unsigned int vhost:1; /* uses host header */
-
-    unsigned int sslBump:1; /* intercepts CONNECT requests */
+    unsigned int intercepted:1;        /**< intercepting proxy port */
+    unsigned int spoof_client_ip:1;    /**< spoof client ip if possible */
+    unsigned int accel:1;              /**< HTTP accelerator */
+    unsigned int vhost:1;              /**< uses host header */
+    unsigned int sslBump:1;            /**< intercepts CONNECT requests */
 
     int vport;                 /* virtual port support, -1 for dynamic, >0 static*/
     int disable_pmtu_discovery;
 
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-    unsigned int tproxy:1; /* spoof client ip using tproxy */
-#endif
-
     struct {
 	unsigned int enabled;
 	unsigned int idle;
@@ -47,6 +47,8 @@
 #include "Parsing.h"
 #include "MemBuf.h"
 #include "wordlist.h"
+#include "IPInterception.h"
+
 #if HAVE_GLOB_H
 #include <glob.h>
 #endif
@@ -2905,15 +2907,6 @@ parse_http_port_option(http_port_list * s, char *token)
     } else if (strncmp(token, "name=", 5) == 0) {
         safe_free(s->name);
         s->name = xstrdup(token + 5);
-    } else if (strcmp(token, "transparent") == 0) {
-        s->transparent = 1;
-#if USE_IPV6
-        /* INET6: until transparent REDIRECT works on IPv6 SOCKET, force wildcard to IPv4 */
-        if( !s->s.SetIPv4() ) {
-            debugs(3, 0, "http(s)_port: IPv6 addresses cannot be 'transparent' (protocol does not provide NAT)" << s->s );
-            self_destruct();
-        }
-#endif
     } else if (strcmp(token, "vhost") == 0) {
         s->vhost = 1;
         s->accel = 1;
@@ -2938,18 +2931,25 @@ parse_http_port_option(http_port_list * s, char *token)
         else
             self_destruct();
 
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-
-    } else if (strcmp(token, "tproxy") == 0) {
-        s->tproxy = 1;
-        need_linux_tproxy = 1;
+    } else if (strcmp(token, "transparent") == 0 || strcmp(token, "intercept") == 0) {
+        s->intercepted = 1;
+        IPInterceptor.StartInterception();
 #if USE_IPV6
         /* INET6: until transparent REDIRECT works on IPv6 SOCKET, force wildcard to IPv4 */
+        if( !s->s.SetIPv4() ) {
+            debugs(3, 0, "http(s)_port: IPv6 addresses cannot be 'transparent' (protocol does not provide NAT)" << s->s );
+            self_destruct();
+        }
+#endif
+    } else if (strcmp(token, "tproxy") == 0) {
+        s->spoof_client_ip = 1;
+        IPInterceptor.StartTransparency();
+#if USE_IPV6
+        /* INET6: until target TPROXY is known to work on IPv6 SOCKET, force wildcard to IPv4 */
         if( s->s.IsIPv6() && !s->s.SetIPv4() ) {
             debugs(3, 0, "http(s)_port: IPv6 addresses cannot be transparent (protocol does not provide NAT)" << s->s );
             self_destruct();
         }
-#endif
 #endif
 
     } else if (strcmp(token, "ipv4") == 0) {
@@ -3074,8 +3074,8 @@ dump_generic_http_port(StoreEntry * e, const char *n, const http_port_list * s)
     if (s->defaultsite)
         storeAppendPrintf(e, " defaultsite=%s", s->defaultsite);
 
-    if (s->transparent)
-        storeAppendPrintf(e, " transparent");
+    if (s->intercepted)
+        storeAppendPrintf(e, " intercept");
 
     if (s->vhost)
         storeAppendPrintf(e, " vhost");
@@ -898,7 +898,7 @@ DOC_START
 
 	Options:
 
-	   transparent	Support for transparent interception of
+	   intercept	Support for IP-Layer interception of
 			outgoing requests without browser settings.
 
 	   tproxy	Support Linux TPROXY for spoofing outgoing
@@ -1824,7 +1824,7 @@ prepareTransparentURL(ConnStateData * conn, ClientHttpRequest *http, char *url,
     char *host;
     char ntoabuf[MAX_IPSTRLEN];
 
-    http->flags.transparent = 1;
+    http->flags.intercepted = 1;
 
     if (*url != '/')
         return; /* already in good shape */
@@ -1995,8 +1995,8 @@ parseHttpRequest(ConnStateData *conn, HttpParser *hp, HttpRequestMethod * method
         /* prepend our name & port */
         http->uri = xstrdup(internalLocalUri(NULL, url));
         http->flags.accel = 1;
-    } else if (conn->port->transparent) {
-	// Fallback on transparent if enabled, useful for "self" requests
+    } else if (conn->port->intercepted) {
+	// Fallback on transparent interception if enabled, useful for "self" requests
         prepareTransparentURL(conn, http, url, req_hdr);
     }
 
@@ -2214,11 +2214,16 @@ clientProcessRequest(ConnStateData *conn, HttpParser *hp, ClientSocketContext *c
 
     request->flags.accelerated = http->flags.accel;
 
-    request->flags.transparent = http->flags.transparent;
-
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-    request->flags.tproxy = conn->port->tproxy && need_linux_tproxy;
-#endif
+    /** \par
+     * If transparent or interception mode is working clone the transparent and interception flags
+     * from the port settings to the request.
+     */
+    if(IPInterceptor.InterceptActive()) {
+        request->flags.intercepted = http->flags.intercepted;
+    }
+    if(IPInterceptor.TransparentActive()) {
+        request->flags.spoof_client_ip = conn->port->spoof_client_ip;
+    }
 
     if (internalCheck(request->urlpath.buf())) {
         if (internalHostnameIs(request->GetHost()) &&
@@ -2718,6 +2723,7 @@ ConnStateData *
 connStateCreate(const IPAddress &peer, const IPAddress &me, int fd, http_port_list *port)
 {
     ConnStateData *result = new ConnStateData;
+
     result->peer = peer;
     result->log_addr = peer;
     result->log_addr.ApplyMask(Config.Addrs.client_netmask.GetCIDR());
@@ -2726,15 +2732,10 @@ connStateCreate(const IPAddress &peer, const IPAddress &me, int fd, http_port_li
     result->in.buf = (char *)memAllocBuf(CLIENT_REQ_BUF_SZ, &result->in.allocatedSize);
     result->port = cbdataReference(port);
 
-#if LINUX_TPROXY4
-    if(port->transparent || port->tproxy)
-#else
-    if(port->transparent)
-#endif
-    {
+    if(port->intercepted || port->spoof_client_ip) {
         IPAddress dst;
 
-        if (clientNatLookup(fd, me, peer, dst) == 0) {
+        if (IPInterceptor.NatLookup(fd, me, peer, dst) == 0) {
             result->me = dst; /* XXX This should be moved to another field */
             result->transparent(true);
         }
@@ -3114,13 +3115,9 @@ clientHttpConnectionsOpen(void)
 
         enter_suid();
 
-#if LINUX_TPROXY4
-        if(s->tproxy) {
+        if(s->spoof_client_ip) {
             fd = comm_openex(SOCK_STREAM, IPPROTO_TCP, s->s, (COMM_NONBLOCKING|COMM_TRANSPARENT), 0, "HTTP Socket");
-        }
-        else
-#endif
-        {
+        } else {
             fd = comm_open(SOCK_STREAM, IPPROTO_TCP, s->s, COMM_NONBLOCKING, "HTTP Socket");
         }
 
@@ -3134,9 +3131,10 @@ clientHttpConnectionsOpen(void)
         comm_accept(fd, httpAccept, s);
 
         debugs(1, 1, "Accepting " <<
-               (s->transparent ? "transparently proxied" :
-                       s->sslBump ? "bumpy" :
-                       s->accel ? "accelerated" : "") 
+               (s->intercepted ? " intercepted" : "") <<
+               (s->spoof_client_ip ? " spoofing" : "") <<
+               (s->sslBump ? " bumpy" : "") <<
+               (s->accel ? " accelerated" : "") 
                << " HTTP connections at " << s->s
                << ", FD " << fd << "." );
 
@@ -117,7 +117,7 @@ class ClientHttpRequest
     struct
     {
         unsigned int accel:1;
-        unsigned int transparent:1;
+        unsigned int intercepted:1;
         unsigned int internal:1;
         unsigned int done_copying:1;
         unsigned int purging:1;
@@ -634,7 +634,7 @@ comm_set_v6only(int fd, int tos)
 void
 comm_set_transparent(int fd)
 {
-#if LINUX_TPROXY4
+#if defined(IP_TRANSPARENT)
     int tos = 1;
     if (setsockopt(fd, SOL_IP, IP_TRANSPARENT, (char *) &tos, sizeof(int)) < 0) {
         debugs(50, DBG_IMPORTANT, "comm_open: setsockopt(IP_TRANSPARENT) on FD " << fd << ": " << xstrerror());
@@ -754,12 +754,10 @@ comm_openex(int sock_type,
             commSetReuseAddr(new_socket);
     }
 
-#if LINUX_TPROXY4
     /* MUST be done before binding or face OS Error: "(99) Cannot assign requested address"... */
     if((flags & COMM_TRANSPARENT)) {
         comm_set_transparent(new_socket);
     }
-#endif
 
     if (!addr.IsNoAddr())
     {
@@ -1351,13 +1349,11 @@ comm_old_accept(int fd, ConnectionDetail &details)
 
     commSetNonBlocking(sock);
 
-#if LINUX_TPROXY4
-    /* AYJ: do we actually need to set this again on every accept? */
     if(fd_table[fd].flags.transparent == 1) {
-        comm_set_transparent(sock);
+        /* AYJ: do we actually need to set this again on every accept? */
+        //comm_set_transparent(sock);
         F->flags.transparent = 1;
     }
-#endif
 
     PROF_stop(comm_accept);
     return sock;
@@ -82,9 +82,7 @@ class fde
 	unsigned int close_on_exec:1;
 	unsigned int read_pending:1;
 	unsigned int write_pending:1;
-#if LINUX_TPROXY4
         unsigned int transparent:1;
-#endif
     } flags;
 
     int64_t bytes_read;
@@ -49,13 +49,8 @@
 #include "SquidTime.h"
 #include "Store.h"
 
-#if LINUX_TPROXY2
-#ifdef HAVE_LINUX_NETFILTER_IPV4_IP_TPROXY_H
-#include <linux/netfilter_ipv4/ip_tproxy.h>
-#else
-#error " TPROXY v2 Header file missing: linux/netfilter_ipv4/ip_tproxy.h. Perhapse you meant to use TPROXY v4 ? "
-#endif
-#endif
+/* for IPInterceptor API */
+#include "IPInterception.h"
 
 static PSC fwdStartCompleteWrapper;
 static PF fwdServerClosedWrapper;
@@ -270,11 +265,13 @@ FwdState::fwdStart(int client_fd, StoreEntry *entry, HttpRequest *request)
 
     default:
         FwdState::Pointer fwd = new FwdState(client_fd, entry, request);
-#if LINUX_TPROXY2 || LINUX_TPROXY4
+
         /* If we need to transparently proxy the request
          * then we need the client source protocol, address and port */
-        fwd->src = request->client_addr;
-#endif
+        if(request->flags.spoof_client_ip) {
+            fwd->src = request->client_addr;
+            // AYJ: do we need to pass on the transparent flag also?
+        }
 
         fwd->start(fwd);
         return;
@@ -775,10 +772,6 @@ FwdState::connectStart()
     const char *domain = NULL;
     int ctimeout;
     int ftimeout = Config.Timeout.forward - (squid_curtime - start_t);
-#if LINUX_TPROXY2
-
-    struct in_tproxy itp;
-#endif
 
     IPAddress outgoing;
     unsigned short tos;
@@ -802,12 +795,9 @@ FwdState::connectStart()
         ctimeout = Config.Timeout.connect;
     }
 
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-    if (request->flags.tproxy)
+    if (request->flags.spoof_client_ip)
         client_addr = request->client_addr;
 
-#endif
-
     if (ftimeout < 0)
         ftimeout = 5;
 
@@ -843,13 +833,9 @@ FwdState::connectStart()
 
     debugs(17, 3, "fwdConnectStart: got outgoing addr " << outgoing << ", tos " << tos);
 
-#if LINUX_TPROXY4
-    if (request->flags.tproxy) {
+    if (request->flags.spoof_client_ip) {
         fd = comm_openex(SOCK_STREAM, IPPROTO_TCP, outgoing, (COMM_NONBLOCKING|COMM_TRANSPARENT), tos, url);
-    }
-    else
-#endif
-    {
+    } else {
         fd = comm_openex(SOCK_STREAM, IPPROTO_TCP, outgoing, COMM_NONBLOCKING, tos, url);
     }
 
@@ -886,40 +872,15 @@ FwdState::connectStart()
 
     commSetTimeout(fd, ctimeout, fwdConnectTimeoutWrapper, this);
 
-    if (!fs->_peer) {
 #if LINUX_TPROXY2
-        if (request->flags.tproxy) {
-            IPAddress addr;
-
-            src.GetInAddr(itp.v.addr.faddr);
-            itp.v.addr.fport = 0;
-
-            /* If these syscalls fail then we just fallback to connecting
-             * normally by simply ignoring the errors...
-             */
-            itp.op = TPROXY_ASSIGN;
-
-            addr = (struct in_addr)itp.v.addr.faddr;
-            addr.SetPort(itp.v.addr.fport);
-
-            if (setsockopt(fd, SOL_IP, IP_TPROXY, &itp, sizeof(itp)) == -1) {
-                debugs(20, 1, "tproxy ip=" << addr << " ERROR ASSIGN");
-
-                request->flags.tproxy = 0;
-            } else {
-                itp.op = TPROXY_FLAGS;
-                itp.v.flags = ITP_CONNECT;
-
-                if (setsockopt(fd, SOL_IP, IP_TPROXY, &itp, sizeof(itp)) == -1) {
-                    debugs(20, 1, "tproxy ip=" << addr << " ERROR CONNECT");
-
-                    request->flags.tproxy = 0;
-                }
-            }
+    if (!fs->_peer && request->flags.spoof_client_ip) {
+        // try to set the outgoing address using TPROXY v2
+        // if it fails we abort any further TPROXY actions on this connection
+        if(IPInterceptor.SetTproxy2OutgoingAddr(int fd, const IPAddress &src) == -1) {
+            request->flags.spoof_client_ip = 0;
         }
-
-#endif
     }
+#endif
 
     updateHierarchyInfo();
     commConnectStart(fd, host, port, fwdConnectDoneWrapper, this);
@@ -1285,10 +1246,8 @@ getOutgoingAddr(HttpRequest * request)
 {
     ACLChecklist ch;
 
-#if LINUX_TPROXY4
-    if (request && request->flags.tproxy)
+    if (request && request->flags.spoof_client_ip)
         return request->client_addr;
-#endif
 
     if (request)
     {
@@ -100,10 +100,8 @@ class FwdState : public RefCountable
         unsigned int ftp_pasv_failed:1;
         unsigned int forward_completed:1;
     } flags;
-#if LINUX_NETFILTER || LINUX_TPROXY2 || LINUX_TPROXY4
-    IPAddress src;
-#endif
 
+    IPAddress src; /* Client address for this connection. Needed for transparent operations. */
 };
 
 #endif
@@ -185,9 +185,6 @@ extern "C"
     extern const char *external_acl_message;      /* NULL */
     extern int opt_send_signal;	/* -1 */
     extern int opt_no_daemon; /* 0 */
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-    extern int need_linux_tproxy; /* 0 */
-#endif
 
 
 #ifdef __cplusplus
@@ -1230,13 +1230,9 @@ HttpStateData::processReplyBody()
             closeHandler = NULL;
             fwd->unregister(fd);
 
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-
-            if (orig_request->flags.tproxy)
+            if (orig_request->flags.spoof_client_ip)
                 client_addr = orig_request->client_addr;
 
-#endif
-
             if (_peer) {
                 if (_peer->options.originserver)
                     fwd->pconnPush(fd, _peer->name, orig_request->port, orig_request->GetHost(), client_addr);
@@ -1028,13 +1028,10 @@ struct _iostats
 
 struct request_flags
 {
-    request_flags():range(0),nocache(0),ims(0),auth(0),cachable(0),hierarchical(0),loopdetect(0),proxy_keepalive(0),proxying(0),refresh(0),redirected(0),need_validation(0),accelerated(0),transparent(0),internal(0),internalclient(0),must_keepalive(0),destinationIPLookedUp_(0)
+    request_flags(): range(0),nocache(0),ims(0),auth(0),cachable(0),hierarchical(0),loopdetect(0),proxy_keepalive(0),proxying(0),refresh(0),redirected(0),need_validation(0),accelerated(0),intercepted(0),spoof_client_ip(0),internal(0),internalclient(0),must_keepalive(0),destinationIPLookedUp_(0)
     {
 #if HTTP_VIOLATIONS
         nocache_hack = 0;
-#endif
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-	tproxy = 0;
 #endif
     }
 
@@ -1054,10 +1051,8 @@ struct request_flags
     unsigned int nocache_hack:1;	/* for changing/ignoring no-cache requests */
 #endif
     unsigned int accelerated:1;
-    unsigned int transparent:1;
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-    unsigned int tproxy:1; /* spoof client ip using tproxy */
-#endif
+    unsigned int intercepted:1;  /**< transparently intercepted request */
+    unsigned int spoof_client_ip:1;  /**< spoof client ip if possible */
     unsigned int internal:1;
     unsigned int internalclient:1;
     unsigned int must_keepalive:1;
@@ -1,4 +1,3 @@
-
 /*
  * $Id: tools.cc,v 1.281 2008/02/11 22:44:50 rousskov Exp $
  *
@@ -40,6 +39,7 @@
 #include "MemBuf.h"
 #include "wordlist.h"
 #include "SquidTime.h"
+#include "IPInterception.h"
 
 #ifdef _SQUID_LINUX_
 #if HAVE_SYS_CAPABILITY_H
@@ -1235,16 +1235,7 @@ keepCapabilities(void)
 #if HAVE_PRCTL && defined(PR_SET_KEEPCAPS) && HAVE_SYS_CAPABILITY_H
 
     if (prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0)) {
-        /* Silent failure unless TPROXY is required. Maybe not started as root */
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-
-        if (need_linux_tproxy)
-            debugs(1, 1, "Error - tproxy support requires capability setting which has failed.  Continuing without tproxy support");
-
-        need_linux_tproxy = 0;
-
-#endif
-
+        IPInterceptor.StopTransparency("capability setting has failed.");
     }
 #endif
 }
@@ -1273,44 +1264,26 @@ restoreCapabilities(int keep)
     cap->inheritable = 0;
     cap->effective = (1 << CAP_NET_BIND_SERVICE);
 
-#if LINUX_TPROXY2
-    if (need_linux_tproxy)
-        cap->effective |= (1 << CAP_NET_ADMIN) | (1 << CAP_NET_BROADCAST);
-#elif LINUX_TPROXY4
-    if (need_linux_tproxy)
+    if(IPInterceptor.TransparentActive()) {
         cap->effective |= (1 << CAP_NET_ADMIN);
-
+#if LINUX_TPROXY2
+        cap->effective |= (1 << CAP_NET_BROADCAST);
 #endif
+    }
 
     if (!keep)
         cap->permitted &= cap->effective;
 
     if (capset(head, cap) != 0) {
-        /* Silent failure unless TPROXY is required */
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-
-        if (need_linux_tproxy)
-            debugs(50, 1, "Error enabling needed capabilities. Will continue without tproxy support");
-
-        need_linux_tproxy = 0;
-
-#endif
-
+        IPInterceptor.StopTransparency("Error enabling needed capabilities.");
     }
 
 nocap:
     xfree(head);
     xfree(cap);
-#else /* not defined(_SQUID_LINUX_) && HAVE_SYS_CAPABILITY_H */
-
-#if LINUX_TPROXY2 || LINUX_TPROXY4
-
-    if (need_linux_tproxy)
-        debugs(50, 1, "Missing needed capability support. Will continue without tproxy support");
-
-    need_linux_tproxy = 0;
-#endif
 
+#else /* not defined(_SQUID_LINUX_) && HAVE_SYS_CAPABILITY_H */
+    IPInterceptor.StopTransparency("Missing needed capability support.");
 #endif
 }
 