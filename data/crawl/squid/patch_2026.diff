@@ -1,7 +1,7 @@
 #
 #  Makefile for the Harvest Object Cache server
 #
-#  $Id: Makefile.in,v 1.14 1996/04/09 18:18:45 wessels Exp $
+#  $Id: Makefile.in,v 1.15 1996/04/11 04:47:18 wessels Exp $
 #
 #  Uncomment and customize the following to suit your needs:
 #
@@ -53,7 +53,7 @@ CLIENT_LIBS	= -L../lib -lutil $(XTRA_LIBS)
 PROGS		= cached 
 UTILS		= client dnsserver ftpget
 CGIPROGS	= cachemgr.cgi
-OBJS	 	= blocklist.o cache_cf.o cached_error.o comm.o \
+OBJS	 	= acl.o blocklist.o cache_cf.o cached_error.o comm.o \
 		connect.o debug.o disk.o dynamic_array.o \
 		fdstat.o filemap.o ftp.o gopher.o \
 		hash.o http.o icp.o ipcache.o \
@@ -1,4 +1,8 @@
-#ident "$Id: acl.cc,v 1.3 1996/04/11 03:22:13 wessels Exp $"
+#ident "$Id: acl.cc,v 1.4 1996/04/11 04:46:49 wessels Exp $"
+
+/*
+ * DEBUG: Section 28          acl
+ */
 
 #include "squid.h"
 
@@ -169,7 +173,8 @@ wordlist *aclParseWordList()
 
 
 
-void aclParseAclLine()
+void aclParseAclLine(line_in)
+     char *line_in;
 {
     /* we're already using strtok() to grok the line */
     char *t = NULL;
@@ -218,16 +223,18 @@ void aclParseAclLine()
 	return;
 	break;
     }
+    A->cfgline = xstrdup(line_in);
     *AclListTail = A;
     AclListTail = &A->next;
 }
 
-void aclParseAccessLine()
+void aclParseAccessLine(line_in)
+     char *line_in;
 {
     char *t = NULL;
     struct _acl_access *A = NULL;
     struct _acl_list *L = NULL;
-    struct _acl_list **Tail = &L;
+    struct _acl_list **Tail = NULL;
     struct _acl *a = NULL;
 
     /* first expect either 'allow' or 'deny' */
@@ -248,6 +255,7 @@ void aclParseAccessLine()
 
     /* next expect a list of ACL names, possibly preceeded
      * by '!' for negation */
+    Tail = &A->acl_list;
     while ((t = strtok(NULL, w_space))) {
 	L = (struct _acl_list *) xcalloc(1, sizeof(struct _acl_list));
 	L->op = 1;		/* defaults to non-negated */
@@ -256,6 +264,8 @@ void aclParseAccessLine()
 	    L->op = 0;
 	    t++;
 	}
+	debug(28, 1, "aclParseAccessLine: looking for ACL name '%s'\n",
+	    t);
 	a = aclFindByName(t);
 	if (a == NULL) {
 	    debug(28, 1, "aclParseAccessLine: ACL name '%s' not found.\n", t);
@@ -266,6 +276,7 @@ void aclParseAccessLine()
 	*Tail = L;
 	Tail = &L->next;
     }
+    A->cfgline = xstrdup(line_in);
     *AccessListTail = A;
     AccessListTail = &A->next;
 }
@@ -288,8 +299,10 @@ int aclMatchWord(data, word)
      wordlist *data;
      char *word;
 {
+    debug(28, 1, "aclMatchWord: looking for '%s'\n", word);
     while (data) {
-	if (!strcasecmp(data->key, word))
+	debug(28, 1, "aclMatchWord: checking '%s'\n", data->key);
+	if (strstr(word, data->key))
 	    return 1;
 	data = data->next;
     }
@@ -328,6 +341,7 @@ int aclMatchAcl(acl, c, pr, h, po, r)
 {
     if (!acl)
 	return 0;
+    debug(28, 1, "aclMatchAcl: checking '%s'\n", acl->cfgline);
     switch (acl->type) {
     case ACL_SRC_IP:
 	return aclMatchIp(acl->data, c);
@@ -370,6 +384,7 @@ int aclMatchAclList(list, c, pr, h, po, r)
      int po;
      char *r;
 {
+    debug(28, 1, "aclMatchAclList: list=%p\n", list);
     while (list) {
 	if (aclMatchAcl(list->acl, c, pr, h, po, r) != list->op)
 	    return 0;
@@ -388,10 +403,19 @@ int aclCheck(cli_addr, proto, host, port, request)
     struct _acl_access *A = NULL;
     int allow = 0;
 
+    debug(28, 1, "aclCheck: cli_addr=%s\n", inet_ntoa(cli_addr));
+    debug(28, 1, "aclCheck: proto=%d\n", proto);
+    debug(28, 1, "aclCheck: host=%s\n", host);
+    debug(28, 1, "aclCheck: port=%d\n", port);
+    debug(28, 1, "aclCheck: request=%s\n", request);
+
     for (A = AccessList; A; A = A->next) {
+	debug(28, 1, "aclCheck: checking '%s'\n", A->cfgline);
 	allow = A->allow;
-	if (aclMatchAclList(A->acl_list, cli_addr, proto, host, port, request))
+	if (aclMatchAclList(A->acl_list, cli_addr, proto, host, port, request)) {
+	    debug(28, 1, "aclCheck: match found, returning %d\n", allow);
 	    return allow;
+	}
     }
     return !allow;
 }
@@ -1,4 +1,4 @@
-/* $Id: cache_cf.cc,v 1.31 1996/04/10 20:53:44 wessels Exp $ */
+/* $Id: cache_cf.cc,v 1.32 1996/04/11 04:47:19 wessels Exp $ */
 
 /* DEBUG: Section 3             cache_cf: Configuration file parsing */
 
@@ -187,7 +187,6 @@ void self_destruct(in_string)
     fatal(fatal_str);
 }
 
-#ifndef IPACL_INTS
 int ip_acl_match(c, a)
      struct in_addr c;
      ip_acl *a;
@@ -315,105 +314,6 @@ void addToIPACL(list, ip_str, access)
     q->mask.s_addr = lmask.s_addr;
 }
 
-#else /* original code using ints */
-
-int ip_acl_match(c1, c2, c3, c4, a1, a2, a3, a4)
-     int c1;
-     int c2;
-     int c3;
-     int c4;
-     int a1;
-     int a2;
-     int a3;
-     int a4;
-{
-    if (!((a1 == 0) || (a1 == c1)))
-	return 0;
-    if (!((a2 == 0) || (a2 == c2)))
-	return 0;
-    if (!((a3 == 0) || (a3 == c3)))
-	return 0;
-    if (!((a4 == 0) || (a4 == c4)))
-	return 0;
-
-    return 1;
-}
-
-ip_access_type ip_access_check(address, list)
-     struct in_addr address;
-     ip_acl *list;
-{
-    int c1, c2, c3, c4;
-    ip_acl *p;
-    unsigned int naddr = 0;	/* network byte-order IP addr */
-
-    if (!list)
-	return IP_ALLOW;
-
-    naddr = htonl(address.s_addr);
-    c1 = ((int) naddr & 0xff000000) >> 24;
-    c2 = ((int) naddr & 0x00ff0000) >> 16;
-    c3 = ((int) naddr & 0x0000ff00) >> 8;
-    c4 = ((int) naddr & 0x000000ff);
-
-    debug(3, 10, "ip_access_check: Using %d.%d.%d.%d\n", c1, c2, c3, c4);
-
-    if ((c1 == 127) && (c2 == 0) && (c3 == 0) && (c4 == 1))
-	return IP_ALLOW;	/* always allow localhost */
-
-    for (p = list; p; p = p->next) {
-	debug(3, 10, "ip_access_check: %d.%d.%d.%d vs %d.%d.%d.%d\n",
-	    c1, c2, c3, c4, p->a1, p->a2, p->a3, p->a4);
-	if (ip_acl_match(c1, c2, c3, c4, p->a1, p->a2, p->a3, p->a4))
-	    return p->access;
-    }
-    return IP_ALLOW;
-}
-
-void addToIPACL(list, ip_str, access)
-     ip_acl **list;
-     char *ip_str;
-     ip_access_type access;
-{
-    ip_acl *p, *q;
-    int a1, a2, a3, a4;
-
-    if (!ip_str) {
-	return;
-    }
-    if (!(*list)) {
-	/* empty list */
-	*list = (ip_acl *) xcalloc(1, sizeof(ip_acl));
-	(*list)->next = NULL;
-	q = *list;
-    } else {
-	p = *list;
-	while (p->next)
-	    p = p->next;
-	q = (ip_acl *) xcalloc(1, sizeof(ip_acl));
-	q->next = NULL;
-	p->next = q;
-    }
-
-    /* decode ip address */
-    if (strstr(ip_str, "all") || strstr(ip_str, "ALL") ||
-	strstr(ip_str, "All")) {
-	a1 = a2 = a3 = a4 = 0;
-    } else {
-	a1 = a2 = a3 = a4 = 0;
-	sscanf(ip_str, "%d.%d.%d.%d", &a1, &a2, &a3, &a4);
-    }
-
-    q->access = access;
-    q->a1 = a1;
-    q->a2 = a2;
-    q->a3 = a3;
-    q->a4 = a4;
-
-}
-
-#endif /* ndef IPACL_INTS */
-
 static void wordlistDestroy(list)
      wordlist **list;
 {
@@ -1370,6 +1270,12 @@ int parseConfigFile(file_name)
 	else if (!strcmp(token, "manager_deny"))
 	    parseManagerDenyLine(line_in);
 
+	else if (!strcmp(token, "acl"))
+	    aclParseAclLine(line_in);
+
+	else if (!strcmp(token, "access"))
+	    aclParseAccessLine(line_in);
+
 	/* Parse a http_stop line */
 	else if (!strcmp(token, "http_stop"))
 	    parseHttpStopLine(line_in);
@@ -1,5 +1,5 @@
 
-/* $Id: comm.cc,v 1.20 1996/04/10 20:45:26 wessels Exp $ */
+/* $Id: comm.cc,v 1.21 1996/04/11 04:47:21 wessels Exp $ */
 
 /* DEBUG: Section 5             comm: socket level functions */
 
@@ -21,10 +21,6 @@ FD_ENTRY *fd_table = NULL;	/* also used in disk.c */
 
 /* STATIC */
 static int *fd_lifetime = NULL;
-#ifdef UNUSED_CODE
-static fd_set send_sockets;
-static fd_set receive_sockets;
-#endif
 static int (*app_handler) ();
 static void checkTimeouts();
 static void checkLifetimes();
@@ -188,9 +184,6 @@ int comm_listen(sock)
      int sock;
 {
     int x;
-#ifdef UNUSED_CODE
-    FD_SET(sock, &receive_sockets);
-#endif
     if ((x = listen(sock, 50)) < 0) {
 	debug(5, 0, "comm_listen: listen(%d, 50): %s\n",
 	    sock, xstrerror());
@@ -301,9 +294,6 @@ int comm_connect_addr(sock, address)
 	    sock, lft);
     }
     /* Add new socket to list of open sockets. */
-#ifdef UNUSED_CODE
-    FD_SET(sock, &send_sockets);
-#endif
     conn->sender = 1;
     return status;
 }
@@ -360,9 +350,6 @@ int comm_accept(fd, peer, me)
     conn->comm_type = listener->comm_type;
     strcpy(conn->ipaddr, inet_ntoa(P.sin_addr));
 
-#ifdef UNUSED_CODE
-    FD_SET(sock, &receive_sockets);
-#endif
     commSetNonBlocking(sock);
 
     return sock;
@@ -382,11 +369,6 @@ int comm_close(fd)
     }
     conn = &fd_table[fd];
 
-#ifdef UNUSED_SOCKETS
-    FD_CLR(fd, &receive_sockets);
-    FD_CLR(fd, &send_sockets);
-#endif
-
     comm_set_fd_lifetime(fd, -1);	/* invalidate the lifetime */
     debug(5, 10, "comm_close: FD %d\n", fd);
     /* update fdstat */
@@ -1,4 +1,4 @@
-/* $Id: errorpage.cc,v 1.16 1996/04/09 23:27:53 wessels Exp $ */
+/* $Id: errorpage.cc,v 1.17 1996/04/11 04:47:20 wessels Exp $ */
 
 /* DEBUG: Section 4             cached_error: Error printing routines */
 
@@ -131,7 +131,7 @@ void cached_error_entry(entry, type, msg)
     }
     sprintf(tbuf, CACHED_ERROR_MSG_P3,
 	ErrorData[index].lng,
-	SQUID_VERSION,
+	version_string,
 	getMyHostname());
     strcat(tmp_error_buf, tbuf);
     entry->mem_obj->abort_code = type;
@@ -168,7 +168,7 @@ char *cached_error_url(url, method, type, address, code, msg)
     }
     sprintf(tbuf, CACHED_ERROR_MSG_P3,
 	ErrorData[index].lng,
-	SQUID_VERSION,
+	version_string,
 	getMyHostname());
     if (!log_errors)
 	return tmp_error_buf;
@@ -205,10 +205,39 @@ char *cached_error_request(request, type, address, code)
     sprintf(tmp_error_buf, "HTTP/1.0 %d Cache Detected Error\r\nContent-type: text/html\r\n\r\n", code);
     sprintf(tbuf, CACHED_REQUEST_ERROR_MSG,
 	request,
-	SQUID_VERSION,
+	version_string,
 	getMyHostname());
     strcat(tmp_error_buf, tbuf);
     if (!log_errors)
 	return tmp_error_buf;
     return tmp_error_buf;
 }
+
+char *access_denied_msg (code, method, url, client)
+	int code;
+	int method;
+	char *url;
+	char *client;
+{
+	sprintf(tmp_error_buf, "\
+HTTP/1.0 %d Access Denied\r\n\
+Content-type: text/html\r\n\
+\r\n\
+<TITLE>Access Denied</TITLE>\n\
+<H2>Access Denied</H2>\n\
+<P>\n\
+Sorry, you are not currently allowed to access\n\
+<PRE>    %s</PRE>\n\
+Please check with the cache administrator if you believe this\n\
+is incorrect.\n\
+<HR>\n\
+<ADDRESS>\n\
+Generated by cached/%s@%s\n\
+</ADDRESS>\n\
+\n",
+	code,
+	url,
+	version_string,
+	getMyHostname());
+	return tmp_error_buf;
+}
@@ -1,4 +1,4 @@
-/* $Id: gopher.cc,v 1.23 1996/04/10 20:45:27 wessels Exp $ */
+/* $Id: gopher.cc,v 1.24 1996/04/11 04:47:22 wessels Exp $ */
 
 /*
  * DEBUG: Section 10          gopher: GOPHER
@@ -138,7 +138,7 @@ void gopherMimeCreate(data)
     sprintf(tempMIME, "\
 HTTP/1.0 200 OK Gatewaying\r\n\
 Server: HarvestCache/%s\r\n\
-MIME-version: 1.0\r\n", SQUID_VERSION);
+MIME-version: 1.0\r\n", version_string);
 
     switch (data->type_id) {
 
@@ -1,4 +1,4 @@
-/* $Id: http.cc,v 1.36 1996/04/10 20:45:27 wessels Exp $ */
+/* $Id: http.cc,v 1.37 1996/04/11 04:47:23 wessels Exp $ */
 
 /*
  * DEBUG: Section 11          http: HTTP
@@ -454,7 +454,7 @@ static void httpSendRequest(fd, data)
 	    if (strncasecmp(t, "User-Agent:", 11) == 0) {
 		ybuf = (char *) get_free_4k_page(__FILE__, __LINE__);
 		memset(ybuf, '\0', SM_PAGE_SIZE);
-		sprintf(ybuf, "%s %s %s", t, HARVEST_PROXY_TEXT, SQUID_VERSION);
+		sprintf(ybuf, "%s %s %s", t, HARVEST_PROXY_TEXT, version_string);
 		t = ybuf;
 	    }
 	    if (len + (int) strlen(t) > buflen - 10)
@@ -1,4 +1,4 @@
-/* $Id: main.cc,v 1.30 1996/04/10 20:53:04 wessels Exp $ */
+/* $Id: main.cc,v 1.31 1996/04/11 04:47:24 wessels Exp $ */
 
 /* DEBUG: Section 1             main: startup and main loop */
 
@@ -17,6 +17,7 @@ int vhost_mode = 0;
 int unbuffered_logs = 1;	/* debug and hierarhcy unbuffered by default */
 int shutdown_pending = 0;	/* set by SIGTERM handler (shut_down()) */
 int reread_pending = 0;		/* set by SIGHUP handler */
+char *version_string = SQUID_VERSION;
 
 extern void (*failure_notify) ();	/* for error reporting from xmalloc */
 
@@ -54,7 +55,7 @@ static void mainParseOptions(argc, argv)
     while ((c = getopt(argc, argv, "vCDRVbsif:a:p:u:m:zh?")) != -1) {
 	switch (c) {
 	case 'v':
-	    printf("Harvest Cache: Version %s\n", SQUID_VERSION);
+	    printf("Harvest Cache: Version %s\n", version_string);
 	    exit(0);
 	    /* NOTREACHED */
 	case 'b':
@@ -167,7 +168,7 @@ void serverConnectionsClose()
 
 static void mainReinitialize()
 {
-    debug(1, 0, "Retarting Harvest Cache (version %s)...\n", SQUID_VERSION);
+    debug(1, 0, "Retarting Harvest Cache (version %s)...\n", version_string);
     /* Already called serverConnectionsClose and ipcacheShutdownServers() */
     neighborsDestroy();
 
@@ -194,7 +195,7 @@ static void mainInitialize()
     fdstat_open(fileno(debug_log), LOG);
     fd_note(fileno(debug_log), getCacheLogFile());
 
-    debug(1, 0, "Starting Harvest Cache (version %s)...\n", SQUID_VERSION);
+    debug(1, 0, "Starting Harvest Cache (version %s)...\n", version_string);
 
     ipcache_init();
     neighbors_init();
@@ -1,4 +1,4 @@
-/* $Id: send-announce.cc,v 1.7 1996/04/09 18:23:33 wessels Exp $ */
+/* $Id: send-announce.cc,v 1.8 1996/04/11 04:47:24 wessels Exp $ */
 
 /*
  * DEBUG: Section 27          send-announce
@@ -22,7 +22,7 @@ void send_announce()
 
     sndbuf[0] = '\0';
 
-    sprintf(tbuf, "cache_version HARVEST/%s\n", SQUID_VERSION);
+    sprintf(tbuf, "cache_version HARVEST/%s\n", version_string);
     strcat(sndbuf, tbuf);
     sprintf(tbuf, "Running on %s %d %d\n",
 	getMyHostname(),
@@ -1,5 +1,5 @@
 
-/* $Id: squid.h,v 1.13 1996/04/10 20:53:34 wessels Exp $ */
+/* $Id: squid.h,v 1.14 1996/04/11 04:47:25 wessels Exp $ */
 
 #include "config.h"
 #include "autoconf.h"
@@ -117,6 +117,7 @@ typedef unsigned long u_num32;
 #include "connect.h"
 #include "objcache.h"
 #include "send-announce.h"
+#include "acl.h"
 #include "util.h"
 
 extern time_t cached_starttime;	/* main.c */
@@ -128,3 +129,5 @@ extern int theUdpConnection;	/* main.c */
 extern int shutdown_pending;	/* main.c */
 extern int reread_pending;	/* main.c */
 extern int opt_unlink_on_reload;	/* main.c */
+extern int vhost_mode;		/* main.c */
+extern char *version_string;	/* main.c */
@@ -1,4 +1,4 @@
-/* $Id: stat.cc,v 1.19 1996/04/10 20:45:32 wessels Exp $ */
+/* $Id: stat.cc,v 1.20 1996/04/11 04:47:25 wessels Exp $ */
 
 /*
  * DEBUG: Section 18          stat
@@ -48,8 +48,8 @@ void stat_utilization_get(obj, sentry)
      StoreEntry *sentry;
 {
     static char tempbuf[MAX_LINELEN];
-    int proto_id;
-    proto_stat *p = &obj->proto_stat_data[0];
+    protocol_t proto_id;
+    proto_stat *p = &obj->proto_stat_data[PROTO_MAX];
     proto_stat *q = NULL;
     int secs = 0;
 
@@ -69,7 +69,7 @@ void stat_utilization_get(obj, sentry)
 
 
     /* find the total */
-    for (proto_id = 1; proto_id <= PROTOCOL_SUPPORTED; ++proto_id) {
+    for (proto_id = 0; proto_id < PROTO_MAX; ++proto_id) {
 	q = &obj->proto_stat_data[proto_id];
 
 	p->object_count += q->object_count;
@@ -84,7 +84,7 @@ void stat_utilization_get(obj, sentry)
     }
 
     /* dump it */
-    for (proto_id = 0; proto_id < PROTOCOL_SUPPORTED + PROTOCOL_EXTRA; ++proto_id) {
+    for (proto_id = 0; proto_id <= PROTO_MAX; ++proto_id) {
 	p = &obj->proto_stat_data[proto_id];
 	if (p->hit != 0) {
 	    p->hitratio =
@@ -116,13 +116,11 @@ int cache_size_get(obj)
      cacheinfo *obj;
 {
     int size = 0;
-    int proto_id;
+    protocol_t proto_id;
     /* sum all size, exclude total */
-    for (proto_id = 1; proto_id <= PROTOCOL_SUPPORTED + PROTOCOL_EXTRA - 1;
-	++proto_id) {
+    for (proto_id = 0; proto_id < PROTO_MAX; proto_id++)
 	size += obj->proto_stat_data[proto_id].kb.now;
-    }
-    return (size);
+    return size;
 }
 
 /* process general IP cache information */
@@ -408,7 +406,7 @@ void info_get(obj, sentry)
 
     storeAppend(sentry, open_bracket, (int) strlen(open_bracket));
 
-    sprintf(line, "{Harvest Object Cache: Version %s}\n", SQUID_VERSION);
+    sprintf(line, "{Harvest Object Cache: Version %s}\n", version_string);
     storeAppend(sentry, line, strlen(line));
 
     tod = mkrfc850(&cached_starttime);
@@ -890,7 +888,7 @@ void log_clear(obj, sentry)
 
 void proto_newobject(obj, proto_id, size, restart)
      cacheinfo *obj;
-     int proto_id;
+     protocol_t proto_id;
      int size;
      int restart;
 {
@@ -910,7 +908,7 @@ void proto_newobject(obj, proto_id, size, restart)
 
 void proto_purgeobject(obj, proto_id, size)
      cacheinfo *obj;
-     int proto_id;
+     protocol_t proto_id;
      int size;
 {
     proto_stat *p = &obj->proto_stat_data[proto_id];
@@ -927,7 +925,7 @@ void proto_purgeobject(obj, proto_id, size)
 /* update stat for each particular protocol when an object is fetched */
 void proto_touchobject(obj, proto_id, size)
      cacheinfo *obj;
-     int proto_id;
+     protocol_t proto_id;
      int size;
 {
     obj->proto_stat_data[proto_id].refcount++;
@@ -936,38 +934,50 @@ void proto_touchobject(obj, proto_id, size)
 
 void proto_hit(obj, proto_id)
      cacheinfo *obj;
-     int proto_id;
+     protocol_t proto_id;
 {
     obj->proto_stat_data[proto_id].hit++;
 }
 
 void proto_miss(obj, proto_id)
      cacheinfo *obj;
-     int proto_id;
+     protocol_t proto_id;
 {
     obj->proto_stat_data[proto_id].miss++;
 }
 
-int proto_url_to_id(url)
+protocol_t proto_url_to_id(url)
      char *url;
 {
-    if (strncmp(url, "http:", 5) == 0)
-	return HTTP_ID;
-    if (strncmp(url, "ftp:", 4) == 0)
-	return FTP_ID;
-    if (strncmp(url, "gopher:", 7) == 0)
-	return GOPHER_ID;
-    if (strncmp(url, "cache_object:", 13) == 0)
-	return CACHEOBJ_ID;
-    if (strncmp(url, "abort:", 6) == 0)
-	return ABORT_ID;
-    if (strncmp(url, "news:", 5) == 0)
-	return NOTIMPLE_ID;
-    if (strncmp(url, "file:", 5) == 0)
-	return NOTIMPLE_ID;
-    return NOTIMPLE_ID;
+    if (strncasecmp(url, "http", 4) == 0)
+	return PROTO_HTTP;
+    if (strncasecmp(url, "ftp", 3) == 0)
+	return PROTO_FTP;
+    if (strncasecmp(url, "gopher", 6) == 0)
+	return PROTO_GOPHER;
+    if (strncasecmp(url, "cache_object", 12) == 0)
+	return PROTO_CACHEOBJ;
+    if (strncasecmp(url, "file", 4) == 0)
+	return PROTO_FTP;
+    return PROTO_NONE;
 }
 
+int proto_default_port(p)
+	protocol_t p;
+{
+	switch(p) {
+	case PROTO_HTTP:
+		return 80;
+	case PROTO_FTP:
+		return 21;
+	case PROTO_GOPHER:
+		return 70;
+	case PROTO_CACHEOBJ:
+		return CACHE_HTTP_PORT;
+	default:
+		return 0;
+	}
+}
 
 
 void stat_init(object, logfilename)
@@ -1014,40 +1024,28 @@ void stat_init(object, logfilename)
     obj->proto_miss = proto_miss;
     obj->NotImplement = dummyhandler;
 
-    for (i = 0; i < PROTOCOL_SUPPORTED + PROTOCOL_EXTRA; ++i) {
-
+    for (i = 0; i < PROTO_MAX; i++) {
 	switch (i) {
-
-	case TOTAL_ID:
-	    strcpy(obj->proto_stat_data[i].protoname, "TOTAL");
-	    break;
-
-	case HTTP_ID:
+	case PROTO_HTTP:
 	    strcpy(obj->proto_stat_data[i].protoname, "HTTP");
 	    break;
-
-	case GOPHER_ID:
+	case PROTO_GOPHER:
 	    strcpy(obj->proto_stat_data[i].protoname, "GOPHER");
 	    break;
-
-	case FTP_ID:
+	case PROTO_FTP:
 	    strcpy(obj->proto_stat_data[i].protoname, "FTP");
 	    break;
-
-	case CACHEOBJ_ID:
-	    strcpy(obj->proto_stat_data[i].protoname, "CACHEMGR");
+	case PROTO_CACHEOBJ:
+	    strcpy(obj->proto_stat_data[i].protoname, "CACHE_OBJ");
 	    break;
-
-	case ABORT_ID:
-	    strcpy(obj->proto_stat_data[i].protoname, "ABORTED");
+	case PROTO_MAX:
+	    strcpy(obj->proto_stat_data[i].protoname, "TOTAL");
 	    break;
-
-	case NOTIMPLE_ID:
+	case PROTO_NONE:
 	default:
-	    strcpy(obj->proto_stat_data[i].protoname, "UNKNOWN");
+	    strcpy(obj->proto_stat_data[i].protoname, "OTHER");
 	    break;
 	}
-
 	obj->proto_stat_data[i].object_count = 0;
 	obj->proto_stat_data[i].hit = 0;
 	obj->proto_stat_data[i].miss = 0;
@@ -1,6 +1,6 @@
 
-/* $Id: store.cc,v 1.42 1996/04/10 20:57:26 wessels Exp $ */
-#ident "$Id: store.cc,v 1.42 1996/04/10 20:57:26 wessels Exp $"
+/* $Id: store.cc,v 1.43 1996/04/11 04:47:27 wessels Exp $ */
+#ident "$Id: store.cc,v 1.43 1996/04/11 04:47:27 wessels Exp $"
 
 /*
  * DEBUG: Section 20          store
@@ -2253,41 +2253,6 @@ int storeClientCopy(e, stateoffset, maxSize, buf, size, fd)
     return *size;
 }
 
-#ifdef UNUSED_CODE
-/*
- * Go through the first 300 bytes of MIME header of a cached object, returning
- * fields that match.
- */
-char *storeMatchMime(e, mimehdr, buf, buf_len)
-     StoreEntry *e;
-     char *mimehdr;
-     char *buf;
-     int buf_len;
-{
-    int i;
-    int offset = 0;
-
-    offset = storeGrep(e, mimehdr, 300);
-
-    buf[0] = '\0';
-
-    if (offset) {
-	storeCopy(e, offset, buf_len, buf, &buf_len);
-	for (i = 0; i < buf_len; ++i) {
-	    if (buf[i] == '\r') {
-		buf[i] = ' ';
-	    }			/* strip \r */
-	    if (buf[i] == '\n') {
-		buf[i] = '\0';
-		break;
-	    }
-	}
-	buf[buf_len - 1] = '\0';	/* always terminate at the end */
-    }
-    return (buf);
-}
-#endif
-
 int storeGrep(e, string, nbytes)
      StoreEntry *e;
      char *string;
@@ -1,5 +1,5 @@
 
-/* $Id: tools.cc,v 1.28 1996/04/10 20:45:34 wessels Exp $ */
+/* $Id: tools.cc,v 1.29 1996/04/11 04:47:28 wessels Exp $ */
 
 /*
  * DEBUG: Section 21          tools
@@ -26,7 +26,7 @@ Thanks!\n"
 static char *dead_msg()
 {
     static char msg[1024];
-    sprintf(msg, DEAD_MSG, SQUID_VERSION, SQUID_VERSION);
+    sprintf(msg, DEAD_MSG, version_string, version_string);
     return msg;
 }
 
@@ -158,7 +158,7 @@ void normal_shutdown()
     storeWriteCleanLog();
     PrintRusage(NULL, debug_log);
     debug(21, 0, "Harvest Cache (Version %s): Exiting normally.\n",
-	SQUID_VERSION);
+	version_string);
     exit(0);
 }
 void shut_down(sig)
@@ -180,7 +180,7 @@ void fatal_common(message)
 #endif
     fprintf(debug_log, "FATAL: %s\n", message);
     fprintf(debug_log, "Harvest Cache (Version %s): Terminated abnormally.\n",
-	SQUID_VERSION);
+	version_string);
     fflush(debug_log);
     PrintRusage(NULL, debug_log);
 }