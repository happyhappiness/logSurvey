@@ -205,7 +205,7 @@ static void submit_counter (const char *type, const char *type_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "apache");
 	strcpy (vl.plugin_instance, "");
 	strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
@@ -227,7 +227,7 @@ static void submit_gauge (const char *type, const char *type_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "apache");
 	strcpy (vl.plugin_instance, "");
 
@@ -423,7 +423,7 @@ static void apc_submit_generic (char *type, char *type_inst, double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "apcups");
 	strcpy (vl.plugin_instance, "");
 	strncpy (vl.type_instance, type_inst, sizeof (vl.type_instance));
@@ -118,7 +118,7 @@ static void as_submit (const char *type, const char *type_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "apple_sensors");
 	strcpy (vl.plugin_instance, "");
 	strcpy (vl.type_instance, type_instance);
@@ -132,7 +132,7 @@ static void battery_submit (const char *plugin_instance, const char *type, doubl
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "battery");
 	strcpy (vl.plugin_instance, plugin_instance);
 
@@ -28,16 +28,16 @@
 #include "plugin.h"
 #include "configfile.h"
 
-static int loop = 0;
-
+/*
+ * Global variables
+ */
+char hostname_g[DATA_MAX_NAME_LEN];
+int  interval_g;
 #if HAVE_LIBKSTAT
 kstat_ctl_t *kc;
 #endif /* HAVE_LIBKSTAT */
 
-/*
- * exported variables
- */
-time_t curtime;
+static int loop = 0;
 
 static void sigIntHandler (int signal)
 {
@@ -49,6 +49,41 @@ static void sigTermHandler (int signal)
 	loop++;
 }
 
+static int init_global_variables (void)
+{
+	const char *str;
+
+	str = global_option_get ("Hostname");
+	if (str != NULL)
+	{
+		strncpy (hostname_g, str, sizeof (hostname_g));
+	}
+	else
+	{
+		if (gethostname (hostname_g, sizeof (hostname_g)) != 0)
+		{
+			fprintf (stderr, "`gethostname' failed and no "
+					"hostname was configured.\n");
+			return (-1);
+		}
+	}
+	DBG ("hostname_g = %s;", hostname_g);
+
+	str = global_option_get ("Interval");
+	if (str == NULL)
+		str = COLLECTD_STEP;
+	interval_g = atoi (str);
+	if (interval_g <= 0)
+	{
+		fprintf (stderr, "Cannot set the interval to a correct value.\n"
+				"Please check your settings.\n");
+		return (-1);
+	}
+	DBG ("interval_g = %i;", interval_g);
+
+	return (0);
+} /* int init_global_variables */
+
 static int change_basedir (const char *orig_dir)
 {
 	char *dir = strdup (orig_dir);
@@ -185,31 +220,22 @@ static int do_init (void)
 
 static int do_loop (void)
 {
-	int step;
-
 	struct timeval tv_now;
 	struct timeval tv_next;
 	struct timespec ts_wait;
 
-	step = atoi (COLLECTD_STEP);
-	if (step <= 0)
-		step = 10;
-
 	while (loop == 0)
 	{
 		if (gettimeofday (&tv_next, NULL) < 0)
 		{
 			syslog (LOG_ERR, "gettimeofday failed: %s", strerror (errno));
 			return (-1);
 		}
-		tv_next.tv_sec += step;
+		tv_next.tv_sec += interval_g;
 
 #if HAVE_LIBKSTAT
 		update_kstat ();
 #endif
-		/* `curtime' is used by many (all?) plugins as the
-		 * data-sample-time passed to RRDTool */
-		curtime = time (NULL);
 
 		/* Issue all plugins */
 		plugin_read_all (&loop);
@@ -281,7 +307,7 @@ int main (int argc, char **argv)
 	struct sigaction sigIntAction;
 	struct sigaction sigTermAction;
 	char *configfile = CONFIGFILE;
-	const char *datadir;
+	const char *basedir;
 #if COLLECT_DAEMON
 	struct sigaction sigChldAction;
 	pid_t pid;
@@ -349,17 +375,26 @@ int main (int argc, char **argv)
 	 * Change directory. We do this _after_ reading the config and loading
 	 * modules to relative paths work as expected.
 	 */
-	if ((datadir = global_option_get ("BaseDir")) == NULL)
+	if ((basedir = global_option_get ("BaseDir")) == NULL)
 	{
-		fprintf (stderr, "Don't have a datadir to use. This should not happen. Ever.");
+		fprintf (stderr, "Don't have a basedir to use. This should not happen. Ever.");
 		return (1);
 	}
-	else if (change_basedir (datadir))
+	else if (change_basedir (basedir))
 	{
-		fprintf (stderr, "Error: Unable to change to directory `%s'.\n", datadir);
+		fprintf (stderr, "Error: Unable to change to directory `%s'.\n", basedir);
 		return (1);
 	}
 
+	/*
+	 * Set global variables or, if that failes, exit. We cannot run with
+	 * them being uninitialized. If nothing is configured, then defaults
+	 * are being used. So this means that the user has actually done
+	 * something wrong.
+	 */
+	if (init_global_variables () != 0)
+		return (1);
+
 #if COLLECT_DAEMON
 	/*
 	 * fork off child
@@ -59,6 +59,14 @@ setting using the B<-P> commandline option.
 Sets the file to write debugging output to. This is only used if compiled with
 debugging enabled. It's ignored otherwise.
 
+=item B<Interval> I<Seconds>
+
+Configures the interval in which to query the read plugins. Obviously smaller
+values lead to a higher system load produces by collectd, while higher values
+lead to more coarse statistics. Please note that changing this value may render
+your RRD-files unuseable, if you use the C<rrdtool plugin>. You have been
+warned.
+
 =back
 
 =head1 PLUGIN OPTIONS
@@ -223,10 +223,8 @@
 
 #define STATIC_ARRAY_LEN(array) (sizeof (array) / sizeof ((array)[0]))
 
-extern time_t curtime;
-
-int pidfile_set (const char *file);
-const char *pidfile_get (void);
+extern char hostname_g[];
+extern int  interval_g;
 
 /* int main (int argc, char **argv); */
 
@@ -77,9 +77,11 @@ static int cf_value_map_num = STATIC_ARRAY_LEN (cf_value_map);
 
 static cf_global_option_t cf_global_options[] =
 {
-	{"BaseDir", NULL, PKGLOCALSTATEDIR},
-	{"LogFile", NULL, LOGFILE},
-	{"PIDFile", NULL, PIDFILE}
+	{"BaseDir",   NULL, PKGLOCALSTATEDIR},
+	{"LogFile",   NULL, LOGFILE},
+	{"PIDFile",   NULL, PIDFILE},
+	{"Hostname",  NULL, NULL},
+	{"Interval",  NULL, "10"}
 };
 static int cf_global_options_num = STATIC_ARRAY_LEN (cf_global_options);
 
@@ -285,6 +287,8 @@ int global_option_set (const char *option, const char *value)
 {
 	int i;
 
+	DBG ("option = %s; value = %s;", option, value);
+
 	for (i = 0; i < cf_global_options_num; i++)
 		if (strcasecmp (cf_global_options[i].key, option) == 0)
 			break;
@@ -183,7 +183,7 @@ static void submit (int cpu_num, const char *type_instance, counter_t value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "cpu");
 	snprintf (vl.plugin_instance, sizeof (vl.type_instance),
 			"%i", cpu_num);
@@ -89,7 +89,7 @@ static void cpufreq_submit (int cpu_num, double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "cpufreq");
 	snprintf (vl.type_instance, sizeof (vl.type_instance),
 			"%i", cpu_num);
@@ -142,7 +142,7 @@ static void df_submit (char *df_name,
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "df");
 	strcpy (vl.plugin_instance, "");
 	strncpy (vl.type_instance, df_name, sizeof (vl.type_instance));
@@ -210,7 +210,7 @@ static void disk_submit (const char *plugin_instance,
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "disk");
 	strncpy (vl.plugin_instance, plugin_instance,
 			sizeof (vl.plugin_instance));
@@ -342,7 +342,7 @@ static void submit_counter (const char *type, const char *type_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "dns");
 	strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
 
@@ -360,7 +360,7 @@ static void submit_octets (counter_t queries, counter_t responses)
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "dns");
 
 	plugin_dispatch_values ("dns_octets", &vl);
@@ -52,7 +52,7 @@ static void entropy_submit (double entropy)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "entropy");
 	strcpy (vl.plugin_instance, "");
 	strcpy (vl.type_instance, "");
@@ -136,7 +136,7 @@ static void submit_counter (const char *type_instance, counter_t value)
   vl.values = values;
   vl.values_len = 1;
   vl.time = time (NULL);
-  strcpy (vl.host, hostname);
+  strcpy (vl.host, hostname_g);
   strcpy (vl.plugin, "exec");
   strcpy (vl.plugin_instance, "");
   strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
@@ -156,7 +156,7 @@ static void submit_gauge (const char *type_instance, gauge_t value)
   vl.values = values;
   vl.values_len = 1;
   vl.time = time (NULL);
-  strcpy (vl.host, hostname);
+  strcpy (vl.host, hostname_g);
   strcpy (vl.plugin, "exec");
   strcpy (vl.plugin_instance, "");
   strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
@@ -431,7 +431,7 @@ static void hddtemp_submit (char *type_instance, double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "hddtemp");
 	strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
 
@@ -147,7 +147,7 @@ static void irq_submit (unsigned int irq, counter_t value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "irq");
 
 	status = snprintf (vl.type_instance, sizeof (vl.type_instance),
@@ -68,7 +68,7 @@ static void load_submit (double snum, double mnum, double lnum)
 	vl.values = values;
 	vl.values_len = 3;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "load");
 	strcpy (vl.plugin_instance, "");
 	strcpy (vl.type_instance, "");
@@ -252,7 +252,7 @@ static void mbmon_submit (const char *type, const char *type_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "mbmon");
 	strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
 
@@ -123,7 +123,7 @@ static void memory_submit (long long mem_used, long long mem_buffered,
 	vl.values = values;
 	vl.values_len = 4;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "memory");
 
 	plugin_dispatch_values ("memory", &vl);
@@ -223,7 +223,7 @@ static void multimeter_submit (double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "multimeter");
 
 	plugin_dispatch_values ("multimeter", &vl);
@@ -190,7 +190,7 @@ static void counter_submit (const char *type, const char *type_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "mysql");
 	strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
 
@@ -213,7 +213,7 @@ static void qcache_submit (counter_t hits, counter_t inserts,
 	vl.values = values;
 	vl.values_len = 5;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "mysql");
 
 	plugin_dispatch_values ("mysql_qcache", &vl);
@@ -233,7 +233,7 @@ static void threads_submit (gauge_t running, gauge_t connected, gauge_t cached,
 	vl.values = values;
 	vl.values_len = 4;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "mysql");
 
 	plugin_dispatch_values ("mysql_threads", &vl);
@@ -250,7 +250,7 @@ static void traffic_submit (counter_t rx, counter_t tx)
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "mysql");
 
 	plugin_dispatch_values ("mysql_octets", &vl);
@@ -205,7 +205,7 @@ static void nfs_procedures_submit (const char *plugin_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "nfs");
 	strncpy (vl.plugin_instance, plugin_instance,
 		       	sizeof (vl.plugin_instance));
@@ -326,7 +326,7 @@ static void ntpd_submit (char *type, char *type_inst, double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "ntpd");
 	strcpy (vl.plugin_instance, "");
 	strncpy (vl.type_instance, type_inst, sizeof (vl.type_instance));
@@ -189,7 +189,7 @@ static void ping_submit (char *host, double latency)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "ping");
 	strcpy (vl.plugin_instance, "");
 	strncpy (vl.type_instance, host, sizeof (vl.type_instance));
@@ -50,8 +50,6 @@ static llist_t *list_data_set;
 
 static char *plugindir = NULL;
 
-char hostname[DATA_MAX_NAME_LEN] = "localhost";
-
 /*
  * Static functions
  */
@@ -319,8 +317,6 @@ void plugin_init_all (void)
 	llentry_t *le;
 	int status;
 
-	gethostname (hostname, sizeof (hostname));
-
 	if (list_init == NULL)
 		return;
 
@@ -77,8 +77,6 @@ typedef struct complain_s
 	unsigned int delay;    /* how many more iterations we still need to wait */
 } complain_t;
 
-extern char hostname[DATA_MAX_NAME_LEN];
-
 /*
  * NAME
  *  plugin_set_dir
@@ -478,7 +478,7 @@ static void ps_submit_state (const char *state, double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "processes");
 	strcpy (vl.plugin_instance, "");
 	strncpy (vl.type_instance, state, sizeof (vl.type_instance));
@@ -494,7 +494,7 @@ static void ps_submit_proc_list (procstat_t *ps)
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "processes");
 	strncpy (vl.plugin_instance, ps->name, sizeof (vl.plugin_instance));
 
@@ -119,7 +119,8 @@ static int rra_get (char ***ret)
 		return (-1);
 	memset (rra_def, '\0', (rra_max + 1) * sizeof (char *));
 
-	step = atoi (COLLECTD_STEP);
+	step = interval_g;
+	/* FIXME: Use config here */
 	rows = atoi (COLLECTD_ROWS);
 
 	if ((step <= 0) || (rows <= 0))
@@ -277,6 +278,7 @@ static int rrd_create_file (char *filename, const data_set_t *ds)
 	char **ds_def;
 	int ds_num;
 	int i, j;
+	char step[16];
 	int status = 0;
 
 	if (check_create_dir (filename))
@@ -302,10 +304,17 @@ static int rrd_create_file (char *filename, const data_set_t *ds)
 		return (-1);
 	}
 
+	status = snprintf (step, sizeof (step), "%i", interval_g);
+	if ((status < 1) || (status >= sizeof (step)))
+	{
+		syslog (LOG_ERR, "rrdtool plugin: snprintf failed.");
+		return (-1);
+	}
+
 	argv[0] = "create";
 	argv[1] = filename;
 	argv[2] = "-s";
-	argv[3] = COLLECTD_STEP;
+	argv[3] = step;
 
 	j = 4;
 	for (i = 0; i < ds_num; i++)
@@ -384,7 +384,7 @@ static void sensors_submit (const char *plugin_instance,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "sensors");
 	strcpy (vl.plugin_instance, plugin_instance);
 	strcpy (vl.type_instance, type_instance);
@@ -55,7 +55,7 @@ static void serial_submit (const char *type_instance,
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "serial");
 	strncpy (vl.type_instance, type_instance,
 			sizeof (vl.type_instance));
@@ -133,7 +133,7 @@ static void swap_submit (const char *type_instance, double value)
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "swap");
 	strncpy (vl.type_instance, type_instance, sizeof (vl.type_instance));
 
@@ -122,7 +122,7 @@ static void tape_submit (const char *plugin_instance,
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "tape");
 	strncpy (vl.plugin_instance, plugin_instance,
 			sizeof (vl.plugin_instance));
@@ -232,7 +232,7 @@ static void if_submit (const char *dev, const char *type,
 	vl.values = values;
 	vl.values_len = 2;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "interface");
 	strncpy (vl.type_instance, dev, sizeof (vl.type_instance));
 
@@ -84,7 +84,7 @@ static void wireless_submit (const char *plugin_instance, const char *type,
 	vl.values = values;
 	vl.values_len = 1;
 	vl.time = time (NULL);
-	strcpy (vl.host, hostname);
+	strcpy (vl.host, hostname_g);
 	strcpy (vl.plugin, "wireless");
 	strncpy (vl.plugin_instance, plugin_instance,
 			sizeof (vl.plugin_instance));