@@ -748,6 +748,7 @@ EXTRA_DIST = \
 	mk-string-arrays.pl \
 	mk-string-arrays.awk \
 	repl_modules.sh \
+	tests/STUB.h \
 	mib.txt \
 	mime.conf.default
 
@@ -950,6 +951,7 @@ test_tools.cc: $(top_srcdir)/test-suite/test_tools.cc
 # globals.cc is needed by test_tools.cc.
 # Neither of these should be disted from here.
 TESTSOURCES= \
+	tests/STUB.h \
 	test_tools.cc \
 	globals.cc
 
@@ -2177,6 +2179,9 @@ tests_testStore_SOURCES= \
 	HttpMsg.cc \
 	RemovalPolicy.cc \
 	store_dir.cc \
+	store_io.cc \
+	store_swapout.cc \
+	StoreIOState.cc \
 	store.cc \
 	HttpRequestMethod.cc \
 	store_key_md5.cc \
@@ -664,7 +664,10 @@ icpHandleUdp(int sock, void *data)
 
         icp_version = (int) buf[1];	/* cheat! */
 
-        if (icp_version == ICP_VERSION_2)
+        if (theOutICPAddr == from)
+            // ignore ICP packets which loop back (multicast usually)
+            debugs(12, 4, "icpHandleUdp: Ignoring UDP packet sent by myself");
+        else if (icp_version == ICP_VERSION_2)
             icpHandleIcpV2(sock, from, buf, len);
         else if (icp_version == ICP_VERSION_3)
             icpHandleIcpV3(sock, from, buf, len);
@@ -52,3 +52,5 @@ libmgr_la_SOURCES = \
 	IntParam.h \
 	StringParam.cc \
 	StringParam.h
+
+EXTRA_DIST = stub_libmgr.cc
@@ -0,0 +1,240 @@
+#include "config.h"
+
+#define STUB_API "lmgr/libmgr.la"
+#include "tests/STUB.h"
+
+// NP: used by Command.h instantiations
+#include "mgr/ActionProfile.h"
+
+// NP: used by Action.h instantiations
+#include "mgr/Command.h"
+std::ostream &operator <<(std::ostream &os, const Mgr::Command &cmd) STUB_RETVAL(os)
+
+#include "mgr/Action.h"
+Mgr::Action::Action(const CommandPointer &aCmd) STUB
+Mgr::Action::~Action() STUB
+void Mgr::Action::run(StoreEntry *entry, bool writeHttpHeader) STUB
+void Mgr::Action::fillEntry(StoreEntry *entry, bool writeHttpHeader) STUB
+void Mgr::Action::add(const Action &action) STUB
+void Mgr::Action::respond(const Request &request) STUB
+void Mgr::Action::sendResponse(unsigned int requestId) STUB
+bool Mgr::Action::atomic() const STUB_RETVAL(false)
+const char * Mgr::Action::name() const STUB_RETVAL(NULL)
+static Mgr::Command static_Command;
+const Mgr::Command & Mgr::Action::command() const STUB_RETVAL(static_Command)
+StoreEntry * Mgr::Action::createStoreEntry() const STUB_RETVAL(NULL)
+static Mgr::Action::Pointer dummyAction;
+
+#include "mgr/ActionParams.h"
+Mgr::ActionParams::ActionParams() STUB
+Mgr::ActionParams::ActionParams(const Ipc::TypedMsgHdr &msg) STUB
+void Mgr::ActionParams::pack(Ipc::TypedMsgHdr &msg) const STUB
+std::ostream &operator <<(std::ostream &os, const Mgr::ActionParams &params) STUB_RETVAL(os)
+
+#include "mgr/ActionWriter.h"
+//Mgr::ActionWriter::ActionWriter(const Action::Pointer &anAction, int aFd) STUB
+//protected:
+void Mgr::ActionWriter::start() STUB
+
+#include "mgr/BasicActions.h"
+Mgr::Action::Pointer Mgr::MenuAction::Create(const Mgr::CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::MenuAction::dump(StoreEntry *entry) STUB
+//protected:
+//Mgr::MenuAction::MenuAction(const CommandPointer &cmd) STUB
+
+Mgr::Action::Pointer Mgr::ShutdownAction::Create(const Mgr::CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::ShutdownAction::dump(StoreEntry *entry) STUB
+// protected:
+//Mgr::ShutdownAction::ShutdownAction(const CommandPointer &cmd) STUB
+
+Mgr::Action::Pointer Mgr::ReconfigureAction::Create(const Mgr::CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::ReconfigureAction::dump(StoreEntry *entry) STUB
+//protected:
+//Mgr::ReconfigureAction::ReconfigureAction(const CommandPointer &cmd) STUB
+
+Mgr::Action::Pointer Mgr::RotateAction::Create(const Mgr::CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::RotateAction::dump(StoreEntry *entry) STUB
+//protected:
+//Mgr::RotateAction::RotateAction(const CommandPointer &cmd) STUB
+
+Mgr::Action::Pointer Mgr::OfflineToggleAction::Create(const CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::OfflineToggleAction::dump(StoreEntry *entry) STUB
+//protected:
+//Mgr::OfflineToggleAction::OfflineToggleAction(const CommandPointer &cmd) STUB
+
+void Mgr::RegisterBasics() STUB
+
+#include "CountersAction.h"
+//Mgr::CountersActionData::CountersActionData() STUB
+Mgr::CountersActionData& Mgr::CountersActionData::operator +=(const Mgr::CountersActionData& stats) STUB_RETVAL(*this)
+
+Mgr::Action::Pointer Mgr::CountersAction::Create(const CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::CountersAction::add(const Action& action) STUB
+void Mgr::CountersAction::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::CountersAction::unpack(const Ipc::TypedMsgHdr& msg) STUB
+//protected:
+//Mgr::CountersAction::CountersAction(const CommandPointer &cmd) STUB
+void Mgr::CountersAction::collect() STUB
+void Mgr::CountersAction::dump(StoreEntry* entry) STUB
+
+#include "mgr/Filler.h"
+//Mgr::Filler::Filler(const Action::Pointer &anAction, int aFd, unsigned int aRequestId) STUB
+//protected:
+//void Mgr::Filler::start() STUB
+//void Mgr::Filler::swanSong() STUB
+
+#include "mgr/Forwarder.h"
+//Mgr::Forwarder::Forwarder(int aFd, const ActionParams &aParams, HttpRequest* aRequest, StoreEntry* anEntry) STUB
+//Mgr::Forwarder::~Forwarder() STUB
+//protected:
+void Mgr::Forwarder::cleanup() STUB
+void Mgr::Forwarder::handleError() STUB
+void Mgr::Forwarder::handleTimeout() STUB
+void Mgr::Forwarder::handleException(const std::exception& e) STUB
+void Mgr::Forwarder::handleRemoteAck() STUB
+
+#include "mgr/FunAction.h"
+Mgr::Action::Pointer Mgr::FunAction::Create(const CommandPointer &cmd, OBJH *aHandler) STUB_RETVAL(dummyAction)
+void Mgr::FunAction::respond(const Request& request) STUB
+//protected:
+//Mgr::FunAction::FunAction(const CommandPointer &cmd, OBJH *aHandler) STUB
+void Mgr::FunAction::dump(StoreEntry *entry) STUB
+
+#include "mgr/InfoAction.h"
+//Mgr::InfoActionData::InfoActionData() STUB
+Mgr::InfoActionData& Mgr::InfoActionData::operator += (const Mgr::InfoActionData& stats) STUB_RETVAL(*this)
+
+Mgr::Action::Pointer Mgr::InfoAction::Create(const CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::InfoAction::add(const Action& action) STUB
+void Mgr::InfoAction::respond(const Request& request) STUB
+void Mgr::InfoAction::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::InfoAction::unpack(const Ipc::TypedMsgHdr& msg) STUB
+//protected:
+//Mgr::InfoAction::InfoAction(const Mgr::CommandPointer &cmd) STUB
+void Mgr::InfoAction::collect() STUB
+void Mgr::InfoAction::dump(StoreEntry* entry) STUB
+
+#include "mgr/Inquirer.h"
+//Mgr::Inquirer::Inquirer(Action::Pointer anAction, const Request &aCause, const Ipc::StrandCoords &coords) STUB
+//protected:
+void Mgr::Inquirer::start() STUB
+bool Mgr::Inquirer::doneAll() const STUB_RETVAL(false)
+void Mgr::Inquirer::cleanup() STUB
+void Mgr::Inquirer::sendResponse() STUB
+bool Mgr::Inquirer::aggregate(Ipc::Response::Pointer aResponse) STUB_RETVAL(false)
+
+#include "mgr/IntervalAction.h"
+//Mgr::IntervalActionData::IntervalActionData() STUB
+Mgr::IntervalActionData& Mgr::IntervalActionData::operator +=(const Mgr::IntervalActionData& stats) STUB_RETVAL(*this)
+
+//Mgr::Action::Pointer Mgr::IntervalAction::Create5min(const CommandPointer &cmd) STUB_RETVAL(new Mgr::IntervalAction(*cmd))
+//Mgr::Action::Pointer Mgr::IntervalAction::Create60min(const CommandPointer &cmd) STUB_RETVAL(new Mgr::IntervalAction(*cmd))
+void Mgr::IntervalAction::add(const Action& action) STUB
+void Mgr::IntervalAction::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::IntervalAction::unpack(const Ipc::TypedMsgHdr& msg) STUB
+//protected:
+//Mgr::IntervalAction::IntervalAction(const CommandPointer &cmd, int aMinutes, int aHours) STUB
+void Mgr::IntervalAction::collect() STUB
+void Mgr::IntervalAction::dump(StoreEntry* entry) STUB
+
+#include "mgr/IntParam.h"
+//Mgr::IntParam::IntParam() STUB
+//Mgr::IntParam::IntParam(const std::vector<int>& anArray) STUB
+void Mgr::IntParam::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::IntParam::unpackValue(const Ipc::TypedMsgHdr& msg) STUB
+static std::vector<int> static_vector;
+const std::vector<int>& Mgr::IntParam::value() const STUB_RETVAL(static_vector)
+
+#include "mgr/IoAction.h"
+//Mgr::IoActionData::IoActionData() STUB
+Mgr::IoActionData& Mgr::IoActionData::operator += (const IoActionData& stats) STUB_RETVAL(*this)
+
+Mgr::Action::Pointer Mgr::IoAction::Create(const CommandPointer &cmd) STUB_RETVAL(dummyAction)
+void Mgr::IoAction::add(const Action& action) STUB
+void Mgr::IoAction::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::IoAction::unpack(const Ipc::TypedMsgHdr& msg) STUB
+//protected:
+//Mgr::IoAction::IoAction(const CommandPointer &cmd) STUB
+void Mgr::IoAction::collect() STUB
+void Mgr::IoAction::dump(StoreEntry* entry) STUB
+
+//#include "mgr/QueryParam.h"
+//void Mgr::QueryParam::pack(Ipc::TypedMsgHdr& msg) const = 0;
+//void Mgr::QueryParam::unpackValue(const Ipc::TypedMsgHdr& msg) = 0;
+
+#include "mgr/QueryParams.h"
+Mgr::QueryParam::Pointer Mgr::QueryParams::get(const String& name) const STUB_RETVAL(Mgr::QueryParam::Pointer(NULL))
+void Mgr::QueryParams::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::QueryParams::unpack(const Ipc::TypedMsgHdr& msg) STUB
+bool Mgr::QueryParams::Parse(const String& aParamsStr, QueryParams& aParams) STUB_RETVAL(false)
+//private:
+//Params::const_iterator Mgr::QueryParams::find(const String& name) const STUB_RETVAL(new Mgr::Params::const_iterator(*this))
+Mgr::QueryParam::Pointer Mgr::QueryParams::CreateParam(QueryParam::Type aType) STUB_RETVAL(Mgr::QueryParam::Pointer(NULL))
+bool Mgr::QueryParams::ParseParam(const String& paramStr, Param& param) STUB_RETVAL(false)
+
+#include "mgr/Registration.h"
+void Mgr::RegisterAction(char const * action, char const * desc, OBJH * handler, int pw_req_flag, int atomic);
+void Mgr::RegisterAction(char const * action, char const * desc, ClassActionCreationHandler *handler, int pw_req_flag, int atomic);
+
+#include "mgr/Request.h"
+//Mgr::Request::Request(int aRequestorId, unsigned int aRequestId, int aFd, const Mgr::ActionParams &aParams) STUB
+//Mgr::Request::Request(const Ipc::TypedMsgHdr& msg) STUB
+void Mgr::Request::pack(Ipc::TypedMsgHdr& msg) const STUB
+Ipc::Request::Pointer Mgr::Request::clone() const STUB_RETVAL(const_cast<Mgr::Request*>(this))
+
+#include "mgr/Response.h"
+//Mgr::Response::Response(unsigned int aRequestId, Action::Pointer anAction = NULL) STUB
+//Mgr::Response::Response(const Ipc::TypedMsgHdr& msg) STUB
+void Mgr::Response::pack(Ipc::TypedMsgHdr& msg) const STUB
+static Ipc::Response::Pointer ipr_static;
+Ipc::Response::Pointer Mgr::Response::clone() const STUB_RETVAL(Ipc::Response::Pointer(NULL))
+bool Mgr::Response::hasAction() const STUB_RETVAL(false)
+//static Mgr::Action mgraction_static;
+//const Mgr::Action& Mgr::Response::getAction() const STUB_RETVAL(mgraction_static)
+
+#include "mgr/ServiceTimesAction.h"
+//Mgr::ServiceTimesActionData::ServiceTimesActionData() STUB
+Mgr::ServiceTimesActionData& Mgr::ServiceTimesActionData::operator +=(const Mgr::ServiceTimesActionData& stats) STUB_RETVAL(*this)
+
+Mgr::Action::Pointer Mgr::ServiceTimesAction::Create(const Mgr::CommandPointer &cmd) STUB_RETVAL(Mgr::Action::Pointer(NULL))
+void Mgr::ServiceTimesAction::add(const Action& action) STUB
+void Mgr::ServiceTimesAction::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::ServiceTimesAction::unpack(const Ipc::TypedMsgHdr& msg) STUB
+//protected:
+//Mgr::ServiceTimesAction::ServiceTimesAction(const CommandPointer &cmd) STUB
+void Mgr::ServiceTimesAction::collect() STUB
+void Mgr::ServiceTimesAction::dump(StoreEntry* entry) STUB
+
+#include "mgr/StoreIoAction.h"
+//Mgr::StoreIoActionData::StoreIoActionData() STUB
+Mgr::StoreIoActionData & Mgr::StoreIoActionData::operator +=(const StoreIoActionData& stats) STUB_RETVAL(*this)
+//Mgr::StoreIoAction::StoreIoAction(const CommandPointer &cmd) STUB
+Mgr::Action::Pointer Mgr::StoreIoAction::Create(const CommandPointer &cmd) STUB_RETVAL(Mgr::Action::Pointer(NULL))
+void Mgr::StoreIoAction::add(const Action& action) STUB
+void Mgr::StoreIoAction::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::StoreIoAction::unpack(const Ipc::TypedMsgHdr& msg) STUB
+void Mgr::StoreIoAction::collect() STUB
+void Mgr::StoreIoAction::dump(StoreEntry* entry) STUB
+
+#include "mgr/StoreToCommWriter.h"
+//Mgr::StoreToCommWriter::StoreToCommWriter(int aFd, StoreEntry *anEntry) STUB
+Mgr::StoreToCommWriter::~StoreToCommWriter() STUB
+void Mgr::StoreToCommWriter::start() STUB
+void Mgr::StoreToCommWriter::swanSong() STUB
+bool Mgr::StoreToCommWriter::doneAll() const STUB_RETVAL(false)
+void Mgr::StoreToCommWriter::scheduleStoreCopy() STUB
+void Mgr::StoreToCommWriter::noteStoreCopied(StoreIOBuffer ioBuf) STUB
+void Mgr::StoreToCommWriter::NoteStoreCopied(void* data, StoreIOBuffer ioBuf) STUB
+void Mgr::StoreToCommWriter::Abort(void* param) STUB
+void Mgr::StoreToCommWriter::scheduleCommWrite(const StoreIOBuffer& ioBuf) STUB
+void Mgr::StoreToCommWriter::noteCommWrote(const CommIoCbParams& params) STUB
+void Mgr::StoreToCommWriter::noteCommClosed(const CommCloseCbParams& params) STUB
+void Mgr::StoreToCommWriter::close() STUB
+
+#include "mgr/StringParam.h"
+//Mgr::StringParam::StringParam() STUB
+//Mgr::StringParam::StringParam(const String& aString) STUB
+void Mgr::StringParam::pack(Ipc::TypedMsgHdr& msg) const STUB
+void Mgr::StringParam::unpackValue(const Ipc::TypedMsgHdr& msg) STUB
+static String t;
+const String& Mgr::StringParam::value() const STUB_RETVAL(t)
@@ -0,0 +1,11 @@
+#ifndef STUB
+#include "fatal.h"
+
+#define STUB { fatal(STUB_API " required"); }
+#define STUB_RETVAL(x) { fatal(STUB_API " required"); return x; }
+//#define STUB_RETREF(x) { fatal(STUB_API " required"); x* o = new (x); return *o; }
+// NP: no () around the x here
+#define STUB_RETREF(x) { fatal(STUB_API " required"); return new x; }
+#define STUB_RETSTATREF(x) { fatal(STUB_API " required"); static x v; return v; }
+
+#endif /* STUB */
@@ -42,7 +42,7 @@
 RemovalPolicy * mem_policy = NULL;
 
 int64_t
-MemObject::endOffset () const
+MemObject::endOffset() const
 {
     return data_hdr.endOffset();
 }
@@ -165,3 +165,17 @@ MemObject::kickReads()
 {
     fatal ("Not implemented");
 }
+
+int64_t
+MemObject::objectBytesOnDisk() const
+{
+    fatal ("MemObject.cc required.");
+    return 0;
+}
+
+bool
+MemObject::isContiguous() const
+{
+    fatal ("MemObject.cc required.");
+    return false;
+}
@@ -1,53 +1,130 @@
-/*
- * $Id$
- *
- * DEBUG: section 20    Storage Manager
- * AUTHOR: Robert Collins
- *
- * SQUID Web Proxy Cache          http://www.squid-cache.org/
- * ----------------------------------------------------------
- *
- *  Squid is the result of efforts by numerous individuals from
- *  the Internet community; see the CONTRIBUTORS file for full
- *  details.   Many organizations have provided support for Squid's
- *  development; see the SPONSORS file for full details.  Squid is
- *  Copyrighted (C) 2001 by the Regents of the University of
- *  California; see the COPYRIGHT file for full details.  Squid
- *  incorporates software developed and/or copyrighted by other
- *  sources; see the CREDITS file for full details.
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
- *
- */
-
 #include "squid.h"
-#include "Store.h"
 
-StorePointer Store::CurrentRoot = NULL;
+#define STUB_API "store.cc"
+#include "tests/STUB.h"
+
+/* and code defined in the wrong .cc file */
+#include "SwapDir.h"
+void StoreController::maintain() STUB
+#include "RemovalPolicy.h"
+RemovalPolicy * createRemovalPolicy(RemovalPolicySettings * settings) STUB_RETVAL(NULL)
 
-extern "C" void
-storeAppendPrintf(StoreEntry * e, const char *fmt,...)
-{
-    fatal("storeAppendPrintf: Not implemented");
-}
 
-void
-storeAppendVPrintf(StoreEntry * e, const char *fmt, va_list vargs)
+#include "Store.h"
+StorePointer Store::CurrentRoot = NULL;
+StoreIoStats store_io_stats;
+bool StoreEntry::checkDeferRead(int fd) const STUB_RETVAL(false)
+const char *StoreEntry::getMD5Text() const STUB_RETVAL(NULL)
+StoreEntry::StoreEntry() STUB
+StoreEntry::StoreEntry(const char *url, const char *log_url) STUB
+HttpReply const *StoreEntry::getReply() const STUB_RETVAL(NULL)
+void StoreEntry::write(StoreIOBuffer) STUB
+bool StoreEntry::isAccepting() const STUB_RETVAL(false)
+size_t StoreEntry::bytesWanted(Range<size_t> const) const STUB_RETVAL(0)
+void StoreEntry::complete() STUB
+store_client_t StoreEntry::storeClientType() const STUB_RETVAL(STORE_NON_CLIENT)
+char const *StoreEntry::getSerialisedMetaData() STUB_RETVAL(NULL)
+void StoreEntry::replaceHttpReply(HttpReply *) STUB
+bool StoreEntry::swapoutPossible() STUB_RETVAL(false)
+void StoreEntry::trimMemory() STUB
+void StoreEntry::abort() STUB
+void StoreEntry::unlink() STUB
+void StoreEntry::makePublic() STUB
+void StoreEntry::makePrivate() STUB
+void StoreEntry::setPublicKey() STUB
+void StoreEntry::setPrivateKey() STUB
+void StoreEntry::expireNow() STUB
+void StoreEntry::releaseRequest() STUB
+void StoreEntry::negativeCache() STUB
+void StoreEntry::cacheNegatively() STUB
+void StoreEntry::invokeHandlers() STUB
+void StoreEntry::purgeMem() STUB
+void StoreEntry::swapOut() STUB
+bool StoreEntry::swapOutAble() const STUB_RETVAL(false)
+void StoreEntry::swapOutFileClose() STUB
+const char *StoreEntry::url() const STUB_RETVAL(NULL)
+int StoreEntry::checkCachable() STUB_RETVAL(0)
+int StoreEntry::checkNegativeHit() const STUB_RETVAL(0)
+int StoreEntry::locked() const STUB_RETVAL(0)
+int StoreEntry::validToSend() const STUB_RETVAL(0)
+int StoreEntry::keepInMemory() const STUB_RETVAL(0)
+void StoreEntry::createMemObject(const char *, const char *) STUB
+void StoreEntry::dump(int debug_lvl) const STUB
+void StoreEntry::hashDelete() STUB
+void StoreEntry::hashInsert(const cache_key *) STUB
+void StoreEntry::registerAbort(STABH * cb, void *) STUB
+void StoreEntry::reset() STUB
+void StoreEntry::setMemStatus(mem_status_t) STUB
+void StoreEntry::timestampsSet() STUB
+void StoreEntry::unregisterAbort() STUB
+void StoreEntry::destroyMemObject() STUB
+int StoreEntry::checkTooSmall() STUB_RETVAL(0)
+void StoreEntry::delayAwareRead(int fd, char *buf, int len, AsyncCall::Pointer callback) STUB
+void StoreEntry::setNoDelay (bool const) STUB
+bool StoreEntry::modifiedSince(HttpRequest * request) const STUB_RETVAL(false)
+bool StoreEntry::hasIfMatchEtag(const HttpRequest &request) const STUB_RETVAL(false)
+bool StoreEntry::hasIfNoneMatchEtag(const HttpRequest &request) const STUB_RETVAL(false)
+RefCount<Store> StoreEntry::store() const STUB_RETVAL(StorePointer())
+size_t StoreEntry::inUseCount() STUB_RETVAL(0)
+void StoreEntry::getPublicByRequestMethod(StoreClient * aClient, HttpRequest * request, const HttpRequestMethod& method) STUB
+void StoreEntry::getPublicByRequest(StoreClient * aClient, HttpRequest * request) STUB
+void StoreEntry::getPublic(StoreClient * aClient, const char *uri, const HttpRequestMethod& method) STUB
+void *StoreEntry::operator new(size_t byteCount)
 {
-    fatal("storeAppendVPrintf: Not implemented");
+    STUB
+    return new StoreEntry();
 }
+void StoreEntry::operator delete(void *address) STUB
+void StoreEntry::setReleaseFlag() STUB
+//#if USE_SQUID_ESI
+//ESIElement::Pointer StoreEntry::cachedESITree STUB_RETVAL(NULL)
+//#endif
+void StoreEntry::append(char const *, int len) STUB
+void StoreEntry::buffer() STUB
+void StoreEntry::flush() STUB
+int StoreEntry::unlock() STUB_RETVAL(0)
+int64_t StoreEntry::objectLen() const STUB_RETVAL(0)
+int64_t StoreEntry::contentLen() const STUB_RETVAL(0)
+void StoreEntry::lock() STUB
+void StoreEntry::release() STUB
+
+NullStoreEntry *NullStoreEntry::getInstance() STUB_RETVAL(NULL)
+const char *NullStoreEntry::getMD5Text() const STUB_RETVAL(NULL)
+void NullStoreEntry::operator delete(void *address) STUB
+// private virtual. Why is this linked from outside?
+const char *NullStoreEntry::getSerialisedMetaData() STUB_RETVAL(NULL)
+
+void Store::Root(Store *) STUB
+void Store::Root(RefCount<Store>) STUB
+void Store::Stats(StoreEntry * output) STUB
+void Store::Maintain(void *unused) STUB
+void Store::create() STUB
+void Store::diskFull() STUB
+void Store::sync() STUB
+void Store::unlink(StoreEntry &) STUB
+
+SQUIDCEXTERN size_t storeEntryInUse() STUB_RETVAL(0)
+SQUIDCEXTERN const char *storeEntryFlags(const StoreEntry *) STUB_RETVAL(NULL)
+void storeEntryReplaceObject(StoreEntry *, HttpReply *) STUB
+SQUIDCEXTERN StoreEntry *storeGetPublic(const char *uri, const HttpRequestMethod& method) STUB_RETVAL(NULL)
+SQUIDCEXTERN StoreEntry *storeGetPublicByRequest(HttpRequest * request) STUB_RETVAL(NULL)
+SQUIDCEXTERN StoreEntry *storeGetPublicByRequestMethod(HttpRequest * request, const HttpRequestMethod& method) STUB_RETVAL(NULL)
+SQUIDCEXTERN StoreEntry *storeCreateEntry(const char *, const char *, request_flags, const HttpRequestMethod&) STUB_RETVAL(NULL)
+SQUIDCEXTERN void storeInit(void) STUB
+SQUIDCEXTERN void storeConfigure(void) STUB
+SQUIDCEXTERN void storeFreeMemory(void) STUB
+SQUIDCEXTERN int expiresMoreThan(time_t, time_t) STUB_RETVAL(0)
+SQUIDCEXTERN void storeAppendPrintf(StoreEntry *, const char *,...) STUB
+void storeAppendVPrintf(StoreEntry *, const char *, va_list ap) STUB
+SQUIDCEXTERN int storeTooManyDiskFilesOpen(void) STUB_RETVAL(0)
+SQUIDCEXTERN void storeHeapPositionUpdate(StoreEntry *, SwapDir *) STUB
+SQUIDCEXTERN void storeSwapFileNumberSet(StoreEntry * e, sfileno filn) STUB
+SQUIDCEXTERN void storeFsInit(void) STUB
+SQUIDCEXTERN void storeFsDone(void) STUB
+SQUIDCEXTERN void storeReplAdd(const char *, REMOVALPOLICYCREATE *) STUB
+void destroyStoreEntry(void *) STUB
+// in Packer.cc !? SQUIDCEXTERN void packerToStoreInit(Packer * p, StoreEntry * e) STUB
+SQUIDCEXTERN void storeGetMemSpace(int size) STUB
 
 #if !_USE_INLINE_
 #include "Store.cci"
@@ -33,28 +33,6 @@
  */
 
 #include "squid.h"
-#include "Store.h"
-
-StoreIoStats store_io_stats;
-
-void
-StoreEntry::swapOutFileClose()
-{
-    fatal ("Not implemented");
-}
-
-bool
-StoreEntry::swapOutAble() const
-{
-    fatal ("Not implemented");
-    return false;
-}
-
-void
-StoreEntry::swapOut()
-{
-    fatal ("Not implemented");
-}
 
 /* wrong stub file... */
 void
@@ -12,19 +12,6 @@ struct SquidConfig Config;
 
 /* stub functions to link successfully */
 
-#include "Store.h"
-void
-StoreEntry::timestampsSet()
-{
-    fatal("StoreEntry::timestampsSet. Not implemented.");
-}
-
-void
-StoreEntry::setPublicKey()
-{
-    fatal("StoreEntry::setPulicKey. Not implemented.");
-}
-
 #include "MemObject.h"
 int64_t
 MemObject::endOffset() const