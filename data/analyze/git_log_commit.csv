url,date,title,changes,file_name
https://github.com/git/git/commit/878056005e94f5fea00c9ff8999f30a99bf10cae,22 Feb 2018,"sequencer: factor out strbuf_read_file_or_whine()

Reduce code duplication by factoring out a function that reads an entire
file into a strbuf, or reports errors on stderr if something goes wrong.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_0.diff
https://github.com/git/git/commit/efdfe11f4f1f901db1ebfa7ebda6337293a2e5c5,22 Feb 2018,"replace: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1.diff
https://github.com/git/git/commit/fa0fccae6ab1ad242d8805baf5acb7e5d4518540,22 Feb 2018,"init-db: rename 'template' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2.diff
https://github.com/git/git/commit/b537e0b1cfe9b1e52fad2623c8de0de40ab12beb,22 Feb 2018,"remote: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_3.diff
https://github.com/git/git/commit/c8a3ea1f2972cb18715f06f99973c594b329c472,22 Feb 2018,"checkout: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/patch_4.diff
https://github.com/git/git/commit/e3a80781f5932f5fea12a49eb06f3ade4ed8945c,21 Feb 2018,Fourth batch for 2.17,12,data/crawl/git/patch_5.diff
https://github.com/git/git/commit/2bbc6e8a92e5bfe4f1db3836d7106aa0e9df9479,21 Feb 2018,"ref-filter: get rid of duplicate code

Make one function from 2 duplicate pieces and invoke it twice.

Signed-off-by: Olga Telezhnaia <olyatelezhnaya@gmail.com>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_6.diff
https://github.com/git/git/commit/90dce21eb0fcf28096e661a3dd3b4e93fa0bccb5,20 Feb 2018,"remote-curl: unquote incoming push-options

The transport-helper protocol c-style quotes the value of
any options passed to the helper via the ""option <key> <value>""
directive. However, remote-curl doesn't actually unquote the
push-option values, meaning that we will send the quoted
version to the other side (whereas git-over-ssh would send
the raw value).

The pack-protocol.txt documentation defines the push-options
as a series of VCHARs, which excludes most characters that
would need quoting. But:

  1. You can still see the bug with a valid push-option that
     starts with a double-quote (since that triggers
     quoting).

  2. We do currently handle any non-NUL characters correctly
     in git-over-ssh. So even though the spec does not say
     that we need to handle most quoted characters, it's
     nice if our behavior is consistent between protocols.

There are two new tests: the ""direct"" one shows that this
already works in the non-http case, and the http one covers
this bugfix.

Reported-by: Jon Simons <jon@jonsimons.org>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_7.diff
https://github.com/git/git/commit/4669e7d68ec8fb6ff3572a1193ae75ae2094b8e6,15 Feb 2018,"packfile: remove GIT_DEBUG_LOOKUP log statements

In commit 628522ec1439 (""sha1-lookup: more memory efficient search in
sorted list of SHA-1"", 2008-04-09), a different algorithm for searching
a sorted list was introduced, together with a set of log statements
guarded by GIT_DEBUG_LOOKUP that are invoked both when using that
algorithm and when using the existing binary search. Those log
statements was meant for experiments and debugging, but with the removal
of the aforementioned different algorithm in commit f1068efefe6d
(""sha1_file: drop experimental GIT_USE_LOOKUP search"", 2017-08-09),
those log statements are probably no longer necessary.

Remove those statements.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_8.diff
https://github.com/git/git/commit/debca9d2fe784193dc2d9f98b5edac605ddfefbb,14 Feb 2018,"object: rename function 'typename' to 'type_name'

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/patch_9.diff
https://github.com/git/git/commit/7daa825d677dcbd40724cb146f3949b7d574e8b3,14 Feb 2018,"test-hashmap: simplify alloc_test_entry

This function takes two ptr/len pairs, which implies that
they can be arbitrary buffers. But internally, it assumes
that each ""ptr"" is NUL-terminated at ""len"" (because we
memcpy an extra byte to pick up the NUL terminator).

In practice this works because each caller only ever passes
strlen(ptr) as the length. But let's drop the ""len""
parameters to make our expectations clear.

Note that we can get rid of the ""l1"" and ""l2"" variables from
cmd_main() as a further cleanup, since they are now mostly
used to check whether the p1 and p2 arguments are present
(technically the length parameters conflated NULL with the
empty string, which we no longer do, but I think that is
actually an improvement).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_10.diff
https://github.com/git/git/commit/b2e45c695d09f6a31ce09347ae0a5d2cdfe9dd4e,14 Feb 2018,"Second batch for 2.17

Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_11.diff
https://github.com/git/git/commit/fc045fe7d4fa220f19274715c936636fe0516ea3,13 Feb 2018,"Mark messages for translations

Small changes in messages to fit the style and typography of rest.
Reuse already translated messages if possible.
Do not translate messages aimed at developers of git.
Fix unit tests depending on the original string.
Use `test_i18ngrep` for tests with translatable strings.
Change and verify rest of tests via `make GETTEXT_POISON=1 test`.

Signed-off-by: Alexander Shopov <ash@kambanaria.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/patch_12.diff
https://github.com/git/git/commit/fbd7a23237094c3fb2e249bbcacbbf1e858e79c9,12 Feb 2018,"rebase: introduce and use pseudo-ref REBASE_HEAD

The new command `git rebase --show-current-patch` is useful for seeing
the commit related to the current rebase state. Some however may find
the ""git show"" command behind it too limiting. You may want to
increase context lines, do a diff that ignores whitespaces...

For these advanced use cases, the user can execute any command they
want with the new pseudo ref REBASE_HEAD.

This also helps show where the stopped commit is from, which is hard
to see from the previous patch which implements --show-current-patch.

Helped-by: Tim Landscheidt <tim@tim-landscheidt.de>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_13.diff
https://github.com/git/git/commit/984913a210bb6d17fb3dd515975930661a00c3b5,12 Feb 2018,"am: add --show-current-patch

Pointing the user to $GIT_DIR/rebase-apply may encourage them to mess
around in there, which is not a good thing. With this, the user does
not have to keep the path around somewhere (because after a couple of
commands, the path may be out of scrollback buffer) when they need to
look at the patch.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_14.diff
https://github.com/git/git/commit/bb1356dc643e1488ccc1924ab674f6cbbe615f74,08 Feb 2018,"always check for NULL return from packet_read_line()

The packet_read_line() function will die if it sees any
protocol or socket errors. But it will return NULL for a
flush packet; some callers which are not expecting this may
dereference NULL if they get an unexpected flush. This would
involve the other side breaking protocol, but we should
flag the error rather than segfault.

Signed-off-by: Jon Simons <jon@jonsimons.org>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_15.diff
https://github.com/git/git/commit/bc9d4dc5b07c05c7b26a4e781b7538db7c775fc3,08 Feb 2018,"correct error messages for NULL packet_read_line()

The packet_read_line() function dies if it gets an
unexpected EOF. It only returns NULL if we get a flush
packet (or technically, a zero-length ""0004"" packet, but
nobody is supposed to send those, and they are
indistinguishable from a flush in this interface).

Let's correct error messages which claim an unexpected EOF;
it's really an unexpected flush packet.

While we're here, let's also check ""!line"" instead of
""!len"" in the second case. The two events should always
coincide, but checking ""!line"" makes it more obvious that we
are not about to dereference NULL.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_16.diff
https://github.com/git/git/commit/8cdef01c4282e6006b785a0222589ccd2b65a187,08 Feb 2018,"t5541: add 'test_i18ngrep's missing filename parameter

The test 'push --no-progress silences progress but not status' runs
'test_i18ngrep' without specifying a filename parameter.  This has
remained unnoticed since its introduction in e304aeba2 (t5541: test
more combinations of --progress, 2012-05-01), because that
'test_i18ngrep' is supposed to check that the given pattern is not
present in its input, and of course it won't find that pattern if its
input is empty (as it comes from /dev/null).  This also means that
this test could miss a potential breakage of 'git push --no-progress'.

Signed-off-by: SZEDER Gábor <szeder.dev@gmail.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_17.diff
https://github.com/git/git/commit/0c668f559cc149720b999d7bd1c0060e9fd7caf3,07 Feb 2018,"blame: tighten command line parser

The command line parser of ""git blame"" is prepared to take an
ancient odd argument order ""blame <path> <rev>"" in addition to the
usual ""blame [<rev>] <path>"".  It has at least two negative
ramifications:

 - In order to tell these two apart, it checks if the last command
   line argument names a path in the working tree, using
   file_exists().  However, ""blame <rev> <path>"" is a request to
   explain each and every line in the contents of <path> stored in
   revision <rev> and does not need to have a working tree version
   of the file.  A check with file_exists() is simply wrong.

 - To coerce that mistaken file_exists() check to work, the code
   calls setup_work_tree() before doing so, because the path it has
   is relative to the top-level of the project tree.  However,
   ""blame <rev> <path>"" MUST be usable even in a bare repository,
   and there is no reason for letting setup_work_tree() complain
   and die with ""This operation must be run in a work tree"".

To correct the former, switch to check if the last token is a
revision (and if so, parse arguments using ""blame <path> <rev>""
rule).  Correct the latter by getting rid of setup_work_tree() and
file_exists() check--the only case the call to this function matters
is when we are running ""blame <path>"" (i.e. no starting revision and
asking to blame the working tree file at <path>, digging through the
HEAD revision), but there is a call in setup_scoreboard() just
before it calls fake_working_tree_commit().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_18.diff
https://github.com/git/git/commit/0c591cacba00a36af797fa3b6c4a4f12d342be86,05 Feb 2018,"daemon: add --log-destination=(stderr|syslog|none)

This new option can be used to override the implicit --syslog of
--inetd, or to disable all logging. (While --detach also implies
--syslog, --log-destination=stderr with --detach is useless since
--detach disassociates the process from the original stderr.) --syslog
is retained as an alias for --log-destination=syslog.

--log-destination always overrides implicit --syslog regardless of
option order. This is different than the “last one wins” logic that
applies to some implicit options elsewhere in Git, but should hopefully
be less confusing. (I also don’t know if *all* implicit options in Git
follow “last one wins”.)

The combination of --inetd with --log-destination=stderr is useful, for
instance, when running `git daemon` as an instanced systemd service
(with associated socket unit). In this case, log messages sent via
syslog are received by the journal daemon, but run the risk of being
processed at a time when the `git daemon` process has already exited
(especially if the process was very short-lived, e.g. due to client
error), so that the journal daemon can no longer read its cgroup and
attach the message to the correct systemd unit (see systemd/systemd#2913
[1]). Logging to stderr instead can solve this problem, because systemd
can connect stderr directly to the journal daemon, which then already
knows which unit is associated with this stream.

[1]: https://github.com/systemd/systemd/issues/2913

Helped-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Lucas Werkmeister <mail@lucaswerkmeister.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_19.diff
https://github.com/git/git/commit/1cf823fb68cae95fa1887e9eaa314c2b6e619e09,02 Feb 2018,"reset --hard: make use of the pretty machinery

reset --hard currently uses its own logic for printing the first line of
the commit message in its output.  Instead of just using the first line,
use the pretty machinery to create the output.

In addition to the easier to follow code, this makes the output more
consistent with other commands that print the title of the commit, such
as 'git commit --oneline' or 'git checkout', which both use
'pp_commit_easy()' with the CMIT_FMT_ONELINE modifier.

It is a slight change of the output if the second line of the commit
message is not a blank line, i.e. if the commit message is

    foo
    bar

previously we would print ""HEAD is now at 000000 foo"", while after
this change we print ""HEAD is now at 000000 foo bar"", same as 'git log
--oneline' shows ""000000 foo bar"".

So this does make the output more consistent with other commands, and
'reset' is a porcelain command, so nobody should be parsing the output
in scripts.

The current behaviour dates back to 0e5a7faa3a (""Make ""git reset"" a
builtin."", 2007-09-11), so I assume (without digging into the old
codebase too much) that the logic was implemented because there was
no convenience function such as 'pp_commit_easy' that would do this
already.

Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_20.diff
https://github.com/git/git/commit/ccc12e06764e551c86ff458b16db35958957645f,02 Feb 2018,"pack-check: convert various uses of SHA-1 to abstract forms

Convert various explicit calls to use SHA-1 functions and constants to
references to the_hash_algo.  Make several strings more generic with
respect to the hash algorithm used.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_21.diff
https://github.com/git/git/commit/454253f059746e8c9cc96cf3af525d4827a45aa4,02 Feb 2018,"builtin/index-pack: improve hash function abstraction

Convert several uses of unsigned char [20] to struct object_id and
convert various hard-coded constants and uses of SHA-1 functions to use
the_hash_algo.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/patch_22.diff
https://github.com/git/git/commit/3fc7281ffa2533820d26809223c7181256b88fe2,30 Jan 2018,"sha1_file: convert write_loose_object to object_id

Convert the definition and declaration of static write_loose_object
function to struct object_id.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_23.diff
https://github.com/git/git/commit/4bdb70a4f73369af39989a3ab5732825600dc914,30 Jan 2018,"sha1_file: convert force_object_loose to object_id

Convert the definition and declaration of force_object_loose to
struct object_id and adjust usage of this function.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_24.diff
https://github.com/git/git/commit/a09c985eae694db1cf31c72db0e2e1bf42f1274f,30 Jan 2018,"sha1_file: convert write_sha1_file to object_id

Convert the definition and declaration of write_sha1_file to
struct object_id and adjust usage of this function.

This commit also converts static function write_sha1_file_prepare, as it
is closely related.

Rename these functions to write_object_file and
write_object_file_prepare respectively.

Replace sha1_to_hex, hashcpy and hashclr with their oid equivalents
wherever possible.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/patch_25.diff
https://github.com/git/git/commit/3b34934dcaa4e643a3691ba1f10db054adf60ffb,30 Jan 2018,"match-trees: convert splice_tree to object_id

Convert the definition of static recursive splice_tree function to use
struct object_id and adjust single caller.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_26.diff
https://github.com/git/git/commit/4b33e60201c12f3a68441807444e3726853a3960,30 Jan 2018,"dir: convert struct sha1_stat to use object_id

Convert the declaration of struct sha1_stat. Adjust all usages of this
struct and replace hash{clr,cmp,cpy} with oid{clr,cmp,cpy} wherever
possible.  Rename it to struct oid_stat.

Rename static function load_sha1_stat to load_oid_stat.

Remove macro EMPTY_BLOB_SHA1_BIN, as it's no longer used.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/patch_27.diff
https://github.com/git/git/commit/fd9b544a2991ad74d73ad1bc0af4d24f91a6802b,24 Jan 2018,"status: add --[no-]ahead-behind to status and commit for V2 format.

Teach ""git status"" and ""git commit"" to accept ""--no-ahead-behind""
and ""--ahead-behind"" arguments to request quick or full ahead/behind
reporting.

When ""--no-ahead-behind"" is given, the existing porcelain V2 line
""branch.ab +x -y"" is replaced with a new ""branch.ab +? -?"" line.
This indicates that the branch and its upstream are or are not equal
without the expense of computing the full ahead/behind values.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_28.diff
https://github.com/git/git/commit/a2b9820ceccf2065a3d3d347e9b1cf7834f5e146,24 Jan 2018,"http-push: improve error log

When git push fails due to server-side WebDAV error, it's not easy to
point to the main culprit.  Additional information about exact cURL
error and HTTP server response is helpful for debugging purpose.

New error log helped me pinpoint failing test t5540-http-push-webdav
to a missing Apache dependency in Fedora 27:
https://bugzilla.redhat.com/show_bug.cgi?id=1491151

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_29.diff
https://github.com/git/git/commit/66618a50f9c9f008d7aef751418f12ba9bfc6b85,24 Jan 2018,"sequencer: run 'prepare-commit-msg' hook

Commit 356ee4659b (""sequencer: try to commit without forking 'git
commit'"", 2017-11-24) forgot to run the 'prepare-commit-msg' hook when
creating the commit. Fix this by writing the commit message to a
different file and running the hook. Using a different file means that
if the commit is cancelled the original message file is
unchanged. Also move the checks for an empty commit so the order
matches 'git commit'.

Reported-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_30.diff
https://github.com/git/git/commit/28d6daed4f119940ace31e523b3b272d3d153d04,13 Dec 2017,"sequencer: improve config handling

The previous config handling relied on global variables, called
git_default_config() even when the key had already been handled by
git_sequencer_config() and did not initialize the diff configuration
variables. Improve this by: i) loading the default values for message
cleanup and gpg signing of commits into struct replay_opts;
ii) restructuring the code to return immediately once a key is
handled; and iii) calling git_diff_basic_config(). Note that
unfortunately it is not possible to return early if the key is handled
by git_gpg_config() as it does not indicate to the caller if the key
has been handled or not.

The sequencer should probably have been calling
git_diff_basic_config() before as it creates a patch when there are
conflicts. The shell version uses 'diff-tree' to create the patch so
calling git_diff_basic_config() should match that. Although 'git
commit' calls git_diff_ui_config() I don't think the output of
print_commit_summary() is affected by anything that is loaded by that
as print_commit_summary() always turns on rename detection so would
ignore the value in the user's configuration anyway. The other values
loaded by git_diff_ui_config() are about the formatting of patches so
are not relevant to print_commit_summary().

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",134,data/crawl/git/patch_31.diff
https://github.com/git/git/commit/356ee4659bb551cd9464b317d691827276752c2d,24 Nov 2017,"sequencer: try to commit without forking 'git commit'

If the commit message does not need to be edited then create the
commit without forking 'git commit'. Taking the best time of ten runs
with a warm cache this reduces the time taken to cherry-pick 10
commits by 27% (from 282ms to 204ms), and the time taken by 'git
rebase --continue' to pick 10 commits by 45% (from 386ms to 212ms) on
my computer running linux. Some of greater saving for rebase is
because it no longer wastes time creating the commit summary just to
throw it away.

The code to create the commit is based on builtin/commit.c. It is
simplified as it doesn't have to deal with merges and modified so that
it does not die but returns an error to make sure the sequencer exits
cleanly, as it would when forking 'git commit'

Even when not forking 'git commit' the commit message is written to a
file and CHERRY_PICK_HEAD is created unnecessarily. This could be
eliminated in future. I hacked up a version that does not write these
files and just passed an strbuf (with the wrong message for fixup and
squash commands) to do_commit() but I couldn't measure any significant
time difference when running cherry-pick or rebase. I think
eliminating the writes properly for rebase would require a bit of
effort as the code would need to be restructured.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/patch_32.diff
https://github.com/git/git/commit/e47c6cafcb5a2223ea3de3d0b65f668f717cb2ab,24 Nov 2017,"commit: move print_commit_summary() to libgit

Move print_commit_summary() from builtin/commit.c to sequencer.c so it
can be shared with other commands. The function is modified by
changing the last argument to a flag so callers can specify whether
they want to show the author date in addition to specifying if this is
an initial commit.

If the sequencer dies in print_commit_summary() (which can only happen
when cherry-picking or reverting) then neither the todo list nor the
abort safety file are updated to reflect the commit that was just
made. print_commit_summary() can die if:

 - The commit that was just created cannot be found or parsed.

 - HEAD cannot be resolved either because some other process is
   updating it (which is bad news in the middle of a cherry-pick) or
   because it is corrupt.

 - log_tree_commit() cannot read some objects.

In all those cases dying will leave the sequencer in a sane state for
aborting; 'git cherry-pick --abort' will rewind HEAD to the last
successful commit before there was a problem with HEAD or the object
database. If the user somehow fixes the problem and runs 'git
cherry-pick --continue' then the sequencer will try and pick the same
commit again which may or may not be what the user wants depending on
what caused print_commit_summary() to die. If print_commit_summary()
returned an error instead then update_abort_safety_file() would try to
resolve HEAD which may or may not be successful. If it is successful
then running 'git rebase --abort' would not rewind HEAD to the last
successful commit which is not what we want.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/patch_33.diff
https://github.com/git/git/commit/b2f55717c7f9b335b7ac2e3358b0498116b94a5d,02 Nov 2017,"mingw: document the standard handle redirection

This feature has been in Git for Windows since v2.11.0(2), as an
experimental option. Now it is considered mature, and it is high time to
document it properly.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_34.diff
https://github.com/git/git/commit/601e1e7897022b1f166c81e58c95e9afa06cac25,01 Nov 2017,"wincred: handle empty username/password correctly

Empty (length 0) usernames and/or passwords, when saved in the Windows
Credential Manager, come back as null when reading the credential.

One use case for such empty credentials is with NTLM authentication, where
empty username and password instruct libcurl to authenticate using the
credentials of the currently logged-on user (single sign-on).

When locating the relevant credentials, make empty username match null.
When outputting the credentials, handle nulls correctly.

Signed-off-by: Jakub Bereżański <kuba@berezanscy.pl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_35.diff
https://github.com/git/git/commit/cc61cf465f7777d0aebd1a35ca72650fef8f253f,21 Oct 2017,"test-ref-store: avoid passing NULL to printf

It's possible for resolve_ref_unsafe() to return NULL (e.g.,
if we are reading and the ref does not exist), in which case
we'll pass NULL to printf. On glibc systems this produces
""(null)"", but on others it may segfault.

The tests don't expect any such case, but if we ever did
trigger this, we would prefer to cleanly fail the test with
unexpected input rather than segfault. Let's manually
replace NULL with ""(null)"". The exact value doesn't matter,
as it won't match any possible ref the caller could expect
(and anyway, the exit code of the program will tell whether
""ref"" is valid or not).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_36.diff
https://github.com/git/git/commit/c26de08370ad5d927d93dbe6fb46103caabb889c,21 Oct 2017,"commit: check result of resolve_ref_unsafe

Add check of the resolved HEAD reference while printing of a commit summary.
resolve_ref_unsafe() may return NULL pointer if underlying calls of lstat() or
open() fail in files_read_raw_ref().
Such situation can be caused by race: file becomes inaccessible to this moment.

Signed-off-by: Andrey Okoshkin <a.okoshkin@samsung.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_37.diff
https://github.com/git/git/commit/7ccc94ff4590cd035b7f78dfd9debbd7e692f3e6,17 Oct 2017,"check-ref-format --branch: strip refs/heads/ using skip_prefix

The expansion returned from strbuf_check_branch_ref always starts with
""refs/heads/"" by construction, but there is nothing about its name or
advertised API making that obvious.  This command is used to process
human-supplied input from the command line and is usually not the
inner loop, so we can spare some cycles to be more defensive.  Instead
of hard-coding the offset strlen(""refs/heads/"") to skip, verify that
the expansion actually starts with refs/heads/.

[jn: split out from a larger patch, added explanation]

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_38.diff
https://github.com/git/git/commit/c68f8375760dc6b77f9c68772230a9c6cfd52aa7,17 Oct 2017,"implement fetching of moved submodules

We store the changed submodules paths to calculate which submodule needs
fetching. This does not work for moved submodules since their paths do
not stay the same in case of a moved submodules. In case of new
submodules we do not have a path in the current checkout, since they
just appeared in this fetch.

It is more general to collect the submodule names for changes instead of
their paths to include the above cases. If we do not have a
configuration for a gitlink we rely on constructing a default name from
the path if a git repository can be found at its path. We skip
non-configured gitlinks whose default name collides with a configured
one.

With the change described above we implement 'on-demand' fetching of
changes in moved submodules.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",176,data/crawl/git/patch_39.diff
https://github.com/git/git/commit/4f01e5080c4a7eee69da47c958888358e6127584,16 Oct 2017,"refs/files-backend: convert static functions to object_id

Convert several static functions to take pointers to struct object_id.
Change the relevant parameters to write_packed_entry to be const, as we
don't modify them.  Rename lock_ref_sha1_basic to lock_ref_oid_basic to
reflect its new argument.  Update the docstring for verify lock to
account for the new parameter name, and note additionally that the
old_oid may be NULL.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_40.diff
https://github.com/git/git/commit/49e61479be913f67e66bb3fdf8de9475c41b58bd,16 Oct 2017,"refs: convert resolve_ref_unsafe to struct object_id

Convert resolve_ref_unsafe to take a pointer to struct object_id by
converting one remaining caller to use struct object_id, removing the
temporary NULL pointer check in expand_ref, converting the declaration
and definition, and applying the following semantic patch:

@@
expression E1, E2, E3, E4;
@@
- resolve_ref_unsafe(E1, E2, E3.hash, E4)
+ resolve_ref_unsafe(E1, E2, &E3, E4)

@@
expression E1, E2, E3, E4;
@@
- resolve_ref_unsafe(E1, E2, E3->hash, E4)
+ resolve_ref_unsafe(E1, E2, E3, E4)

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_41.diff
https://github.com/git/git/commit/0f05154c7064f82f122b845e0fe49a487d3a8d6e,16 Oct 2017,"worktree: convert struct worktree to object_id

Convert the head_sha1 member to be head_oid instead.  This is required
to convert resolve_ref_unsafe.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_42.diff
https://github.com/git/git/commit/188960b4d68e0b77e31481592b86306a9ce37632,16 Oct 2017,"builtin/pack-objects: convert to struct object_id

This is one of the last unconverted callers to peel_ref.  While we're
fixing that, convert the rest of the file, since it will need to be
converted at some point anyway.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/patch_43.diff
https://github.com/git/git/commit/206649672e9cae1af7f1e23ea6648b39d73b71a4,16 Oct 2017,"pack-bitmap: convert traverse_bitmap_commit_list to object_id

Convert traverse_bitmap_commit_list and the callbacks it takes to use a
pointer to struct object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_44.diff
https://github.com/git/git/commit/89f3bbdd3b1f46a5747aa5618b7742f7b3f2adef,16 Oct 2017,"refs: update ref transactions to use struct object_id

Update the ref transaction code to use struct object_id.  Remove one
NULL pointer check which was previously inserted around a dereference;
since we now pass a pointer to struct object_id directly through, the
code we're calling handles this for us.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_45.diff
https://github.com/git/git/commit/a92b1095d190ea348d365baeb9ff5c5023d0efd2,11 Oct 2017,"merge-ours: do not use cmd_*() as a subroutine

The call to cmd_diff_index() ""git merge-ours"" makes has been working
by accident that the function did not call exit(3), and the caller
exited almost immediately after making a call, but it sets a bad
precedent for people to cut and paste.

For finding out if the index exactly matches the HEAD (or a given
tree-ish), there is index_differs_from() which is exactly written
for that purpose.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_46.diff
https://github.com/git/git/commit/7cbbf9d6a275eb23b889158edb753d651542d5a9,10 Oct 2017,"write_entry: untangle symlink and regular-file cases

The write_entry() function switches on the mode of the entry
we're going to write out. The cases for S_IFLNK and S_IFREG
are lumped together. In earlier versions of the code, this
made some sense. They have a shared preamble (which reads
the blob content), a short type-specific body, and a shared
conclusion (which writes out the file contents; always for
S_IFREG and only sometimes for S_IFLNK).

But over time this has grown to make less sense. The preamble
now has conditional bits for each type, and the S_IFREG body
has grown a lot more complicated. It's hard to follow the
logic of which code is running for which mode.

Let's give each mode its own case arm. We will still share
the conclusion code, which means we now jump to it with a
goto. Ideally we'd pull that shared code into its own
function, but it touches so much internal state in the
write_entry() function that the end result is actually
harder to follow than the goto.

While we're here, we'll touch up a few bits of whitespace to
make the beginning and endings of the cases easier to read.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_47.diff
https://github.com/git/git/commit/c602d3a9897a408ce0db543860d472332f79d045,09 Oct 2017,"write_entry: avoid reading blobs in CE_RETRY case

When retrying a delayed filter-process request, we don't
need to send the blob to the filter a second time. However,
we read it unconditionally into a buffer, only to later
throw away that buffer. We can make this more efficient by
skipping the read in the first place when it isn't
necessary.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_48.diff
https://github.com/git/git/commit/dfab1eac2362dfcac7c96a43c3938d8ec67d7722,09 Oct 2017,"i18n: add a missing space in message

The message spans over 2 lines but the C conconcatenation does not add
the needed space between the two lines.

Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_49.diff
https://github.com/git/git/commit/a9f8a37584a6d3e4702ce115476bebda20d871d3,07 Oct 2017,"submodule: port submodule subcommand 'status' from shell to C

This aims to make git-submodule 'status' a built-in. Hence, the function
cmd_status() is ported from shell to C. This is done by introducing
four functions: module_status(), submodule_status_cb(),
submodule_status() and print_status().

The function module_status() acts as the front-end of the subcommand.
It parses subcommand's options and then calls the function
module_list_compute() for computing the list of submodules. Then
this functions calls for_each_listed_submodule() looping through the
list obtained.

Then for_each_listed_submodule() calls submodule_status_cb() for each of
the submodule in its list. The function submodule_status_cb() calls
submodule_status() after passing appropriate arguments to the funciton.
Function submodule_status() is responsible for generating the status
each submodule it is called for, and then calls print_status().

Finally, the function print_status() handles the printing of submodule's
status.

Function set_name_rev() is also ported from git-submodule to the
submodule--helper builtin function compute_rev_name(), which now
generates the value of the revision name as required.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Prathamesh Chavan <pc44800@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",259,data/crawl/git/patch_50.diff
https://github.com/git/git/commit/d35688db19c9ea97e9e2ce751dc7b47aee21636b,07 Oct 2017,"Prepare for -rc1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_51.diff
https://github.com/git/git/commit/9c5b2fab304b5ce3233401c7c7e7a123d551c484,07 Oct 2017,"tests: fix diff order arguments in test_cmp

Fix the argument order for test_cmp. When given the expected
result first the diff shows the actual output with '+' and the
expectation with '-', which is the convention for our tests.

Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_52.diff
https://github.com/git/git/commit/fb71a329964da0892cc11cc94b5b379b0803ed92,06 Oct 2017,"bisect--helper: `bisect_clean_state` shell function in C

Reimplement `bisect_clean_state` shell function in C and add a
`bisect-clean-state` subcommand to `git bisect--helper` to call it from
git-bisect.sh .

Using `--bisect-clean-state` subcommand is a measure to port shell
function to C so as to use the existing test suite. As more functions
are ported, this subcommand will be retired but its implementation  will
be called by bisect_reset() and bisect_start().

Also introduce a function `mark_for_removal` to store the refs which
need to be removed while iterating through the refs.

Mentored-by: Lars Schneider <larsxschneider@gmail.com>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_53.diff
https://github.com/git/git/commit/ecb3f3733cbeaf514508f97429863d33a6ac0d57,06 Oct 2017,"bisect--helper: `write_terms` shell function in C

Reimplement the `write_terms` shell function in C and add a `write-terms`
subcommand to `git bisect--helper` to call it from git-bisect.sh . Also
remove the subcommand `--check-term-format` as it can now be called from
inside the function write_terms() C implementation.

Also `|| exit` is added when calling write-terms subcommand from
git-bisect.sh so as to exit whenever there is an error.

Using `--write-terms` subcommand is a temporary measure to port shell
function to C so as to use the existing test suite. As more functions
are ported, this subcommand will be retired and its implementation will
be called by some other method.

Mentored-by: Lars Schneider <larsxschneider@gmail.com>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_54.diff
https://github.com/git/git/commit/4ba1e5c4144bd268dafb252fd652dd37d9e4a1ed,06 Oct 2017,"bisect--helper: rewrite `check_term_format` shell function in C

Reimplement the `check_term_format` shell function in C and add
a `--check-term-format` subcommand to `git bisect--helper` to call it
from git-bisect.sh

Using `--check-term-format` subcommand is a temporary measure to port
shell function to C so as to use the existing test suite. As more
functions are ported, this subcommand will be retired and its
implementation will be called by some other method/subcommand. For
eg. In conversion of write_terms() of git-bisect.sh, the subcommand will
be removed and instead check_term_format() will be called in its C
implementation while a new subcommand will be introduced for write_terms().

Helped-by: Johannes Schindelein <Johannes.Schindelein@gmx.de>
Mentored-by: Lars Schneider <larsxschneider@gmail.com>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_55.diff
https://github.com/git/git/commit/9e1c84dfd5311c80962ea0f8a1589881c20d028d,06 Oct 2017,"bisect--helper: use OPT_CMDMODE instead of OPT_BOOL

`--next-all` is meant to be used as a subcommand to support multiple
""operation mode"" though the current implementation does not contain any
other subcommand along side with `--next-all` but further commits will
include some more subcommands.

Helped-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Mentored-by: Lars Schneider <larsxschneider@gmail.com>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_56.diff
https://github.com/git/git/commit/6d058c882643dc45c8d708be98e86c38f25511a9,06 Oct 2017,"apply: move lockfile into `apply_state`

We have two users of `struct apply_state` and the related functionality
in apply.c. Each user sets up its `apply_state` by handing over a
pointer to its static `lock_file`. (Before 076aa2cbd (tempfile:
auto-allocate tempfiles on heap, 2017-09-05), we could never free
lockfiles, so making them static was a reasonable approach.)

Other than that, they never directly access their `lock_file`s, which
are instead handled by the functionality in apply.c.

To make life easier for the caller and to make it less tempting for a
future caller to mess with the lock, make apply.c fully responsible for
setting up the `lock_file`. As mentioned above, it is now safe to free a
`lock_file`, so we can make the `struct apply_state` contain an actual
`struct lock_file` instead of a pointer to one.

The user in builtin/apply.c is rather simple. For builtin/am.c, we might
worry that the lock state is actually meant to be inherited across
calls. But the lock is only taken as `apply_all_patches()` executes, and
code inspection shows that it will always be released.

Alternatively, we can observe that the lock itself is never queried
directly. When we decide whether we should lock, we check a related
variable `newfd`. That variable is not inherited, so from the point of
view of apply.c, the state machine really is reset with each call to
`init_apply_state()`. (It would be a bug if `newfd` and the lock status
were not in sync. The duplication of information in `newfd` and the lock
will be addressed in the next patch.)

Signed-off-by: Martin Ågren <martin.agren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_57.diff
https://github.com/git/git/commit/7451fcdc0d3cffdb9aa79d2651830b44a8e052d6,26 Sep 2017,"Sync with 2.14.2

* maint:
  Git 2.14.2
  Git 2.13.6
  Git 2.12.5
  Git 2.11.4
  Git 2.10.5
  cvsimport: shell-quote variable used in backticks
  archimport: use safe_pipe_capture for user input
  shell: drop git-cvsserver support by default
  cvsserver: use safe_pipe_capture for `constant commands` as well
  cvsserver: use safe_pipe_capture instead of backticks
  cvsserver: move safe_pipe_capture() to the main package",239,data/crawl/git/patch_58.diff
https://github.com/git/git/commit/db2f7c48cb30f8fdcb2933aa7d9890b34e0c4e94,26 Sep 2017,"Win32: simplify loading of DLL functions

Dynamic loading of DLL functions is duplicated in several places in Git
for Windows' source code.

This patch adds a pair of macros to simplify the process: the
DECLARE_PROC_ADDR(<dll>, <return-type>, <function-name>,
...<function-parameter-types>...) macro to be used at the beginning of a
code block, and the INIT_PROC_ADDR(<function-name>) macro to call before
using the declared function. The return value of the INIT_PROC_ADDR()
call has to be checked; If it is NULL, the function was not found in the
specified DLL.

Example:

        DECLARE_PROC_ADDR(kernel32.dll, BOOL, CreateHardLinkW,
                          LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);

        if (!INIT_PROC_ADDR(CreateHardLinkW))
                return error(""Could not find CreateHardLinkW() function"";

	if (!CreateHardLinkW(source, target, NULL))
		return error(""could not create hardlink from %S to %S"",
			     source, target);
	return 0;

Signed-off-by: Karsten Blees <blees@dcon.de>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_59.diff
https://github.com/git/git/commit/cef9271e0181fa22d337dca3a17bf07aa92a03e8,22 Sep 2017,"Sync with 2.13.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",228,data/crawl/git/patch_60.diff
https://github.com/git/git/commit/1df0306d9b6a9e92c646dab77683c2a72957d03d,22 Sep 2017,"Sync with 2.12.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",211,data/crawl/git/patch_61.diff
https://github.com/git/git/commit/65c9d4bd7bcb3f087b56b659423c82a034ecacbd,22 Sep 2017,"Sync with 2.11.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",194,data/crawl/git/patch_62.diff
https://github.com/git/git/commit/0a4986d95111da89a416e2a28f5bb5d534c07271,22 Sep 2017,"Sync with 2.10.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_63.diff
https://github.com/git/git/commit/29c0e902a803d8865b9421edadf2ca7c565e355c,21 Sep 2017,"pathspec doc: parse_pathspec does not maintain references to args

The command line arguments passed to main() are valid for the life of
a program, but the same is not true for all other argv-style arrays
(e.g.  when a caller creates an argv_array).  Clarify that
parse_pathspec does not rely on the argv passed to it to remain valid.

This makes it easier to tell that callers like ""git rev-list --stdin""
are safe and ensures that that is more likely to remain true as the
implementation of parse_pathspec evolves.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_64.diff
https://github.com/git/git/commit/b3e8ca89cfe34712a093c37fdbac7df7eaae91e7,21 Sep 2017,"fast-export: do not copy from modified file

When run with the ""-C"" option, fast-export writes 'C' commands in its
output whenever the internal diff mechanism detects a file copy,
indicating that fast-import should copy the given existing file to the
given new filename. However, the diff mechanism works against the
prior version of the file, whereas fast-import uses whatever is current.
This causes issues when a commit both modifies a file and uses it as the
source for a copy.

Therefore, teach fast-export to refrain from writing 'C' when it has
already written a modification command for a file.

An existing test in t9350-fast-export is also fixed in this patch. The
existing line ""C file6 file7"" copies the wrong version of file6, but it
has coincidentally worked because file7 was subsequently overridden.

Reported-by: Juraj Oršulić <juraj.orsulic@fer.hr>
Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_65.diff
https://github.com/git/git/commit/417abfde3534ad51a1a47e00ed799e40e3f7b4ae,19 Sep 2017,"rev-parse: rev-parse: add --is-shallow-repository

Running `git fetch --unshallow` on a repo that is not in fact shallow
produces a fatal error message. Add a helper to rev-parse that scripters
can use to determine whether a repo is shallow or not.

Signed-off-by: Øystein Walle <oystwa@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_66.diff
https://github.com/git/git/commit/4c95e3dd28342878e0deed264ddc784b775361b7,14 Sep 2017,"pkt-line: check write_in_full() errors against ""< 0""

As with the previous two commits, we prefer to check
write_in_full()'s return value to see if it is negative,
rather than comparing it to the input length.

These cases actually flip the logic to check for success,
making conversion a little different than in other cases. We
could of course write:

  if (write_in_full(...) >= 0)
          return 0;
  return error(...);

But our usual method of spelling write() error checks is
just ""< 0"". So let's flip the logic for each of these
conditionals to our usual style.

Signed-off-by: Jeff King <peff@peff.net>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_67.diff
https://github.com/git/git/commit/3c96aa97232367a24eef8b3b387f5ddae5b0c10f,14 Sep 2017,"push, fetch: error out for submodule entries not pointing to commits

The check_has_commit helper uses resolves a submodule entry to a
commit, when validating its existence. As a side effect this means
tolerates a submodule entry pointing to a tag, which is not a valid
submodule entry that git commands would know how to cope with.

Tighten the check to require an actual commit, not a tag pointing to a
commit.

Also improve the error handling when a submodule entry points to
non-commit (e.g., a blob) to error out instead of warning and
pretending the pointed to object doesn't exist.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_68.diff
https://github.com/git/git/commit/b3a8076e0d9319be38d786a0bffc50c4248a0d3e,14 Sep 2017,"help: change a message to be more precise

When the user tries to use '--help' option on an aliased command
information about the alias is printed as sshown below,

    $ git co --help
    `git co' is aliased to `checkout'

This doesn't seem correct as the user has aliased only 'co' and not
'git co'. This might even be incorrect in cases in which the user has
used an alias like 'tgit'.

    $ tgit co --help
    `git co' is aliased to `checkout'

So, make the message more precise.

Signed-off-by: Kaartic Sivaraam <kaarticsivaraam91196@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_69.diff
https://github.com/git/git/commit/9a42c03cb71eaa9d41ba67275de38c997a791c32,12 Sep 2017,"shell: drop git-cvsserver support by default

The git-cvsserver script is old and largely unmaintained
these days. But git-shell allows untrusted users to run it
out of the box, significantly increasing its attack surface.

Let's drop it from git-shell's list of internal handlers so
that it cannot be run by default.  This is not backwards
compatible. But given the age and development activity on
CVS-related parts of Git, this is likely to impact very few
users, while helping many more (i.e., anybody who runs
git-shell and had no intention of supporting CVS).

There's no configuration mechanism in git-shell for us to
add a boolean and flip it to ""off"". But there is a mechanism
for adding custom commands, and adding CVS support here is
fairly trivial. Let's document it to give guidance to
anybody who really is still running cvsserver.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_70.diff
https://github.com/git/git/commit/ab46e6fc7265de3e354d7eaaa7ed7c1e2426171f,11 Sep 2017,"subprocess: loudly die when subprocess asks for an unsupported capability

The handshake_capabilities() function first advertises the set of
capabilities it supports, so that the other side can pick and choose
which ones to use and ask us to enable in its response.  Then we
read the response that tells us what choice the other side made.  If
we saw something that we never advertised, that indicates one of two
things.  The other side, i.e. the ""upgraded"" filter, is not paying
attention of the capabilities advertisement, and asking something
its correct operation relies on, but we are not capable of giving
that unknown feature and operate without it, so after that point the
exchange of data is a garbage-in-garbage-out.  Or the other side
wanted to ask for one of the capabilities we advertised, but the
code has typo and their wish to enable a capability that its correct
operation relies on is not understood on this end.  The result is
the same garbage-in-garbage-out.

Instead of sweeping such a potential bug under the rug, die loudly
when we see a request for an unsupported capability in order to
force sloppily-written filter scripts to get corrected.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_71.diff
https://github.com/git/git/commit/9939b33d6a3900e76b9cf95cbbb30ad8cf38cab3,08 Sep 2017,"packed-backend: rip out some now-unused code

Now the outside world interacts with the packed ref store only via the
generic refs API plus a few lock-related functions. This allows us to
delete some functions that are no longer used, thereby completing the
encapsulation of the packed ref store.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",201,data/crawl/git/patch_72.diff
https://github.com/git/git/commit/dc39e099422b1d44f6230f557f94f7945c7521a7,08 Sep 2017,"files_ref_store: use a transaction to update packed refs

When processing a `files_ref_store` transaction, it is sometimes
necessary to delete some references from the ""packed-refs"" file. Do
that using a reference transaction conducted against the
`packed_ref_store`.

This change further decouples `files_ref_store` from
`packed_ref_store`. It also fixes multiple problems, including the two
revealed by test cases added in the previous commit.

First, the old code didn't obtain the `packed-refs` lock until
`files_transaction_finish()`. This means that a failure to acquire the
`packed-refs` lock (e.g., due to contention with another process)
wasn't detected until it was too late (problems like this are supposed
to be detected in the ""prepare"" phase). The new code acquires the
`packed-refs` lock in `files_transaction_prepare()`, the same stage of
the processing when the loose reference locks are being acquired,
removing another reason why the ""prepare"" phase might succeed and the
""finish"" phase might nevertheless fail.

Second, the old code deleted the loose version of a reference before
deleting any packed version of the same reference. This left a moment
when another process might think that the packed version of the
reference is current, which is incorrect. (Even worse, the packed
version of the reference can be arbitrarily old, and might even point
at an object that has since been garbage-collected.)

Third, if a reference deletion fails to acquire the `packed-refs` lock
altogether, then the old code might leave the repository in the
incorrect state (possibly corrupt) described in the previous
paragraph.

Now we activate the new ""packed-refs"" file (sans any references that
are being deleted) *before* deleting the corresponding loose
references. But we hold the ""packed-refs"" lock until after the loose
references have been finalized, thus preventing a simultaneous
""pack-refs"" process from packing the loose version of the reference in
the time gap, which would otherwise defeat our attempt to delete it.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",136,data/crawl/git/patch_73.diff
https://github.com/git/git/commit/27d03d04d5b7e86a260d7afa283c9905f64de350,08 Sep 2017,"files_pack_refs(): use a reference transaction to write packed refs

Now that the packed reference store supports transactions, we can use
a transaction to write the packed versions of references that we want
to pack. This decreases the coupling between `files_ref_store` and
`packed_ref_store`.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_74.diff
https://github.com/git/git/commit/2fb330ca7238088eea5c1926380feb187f4867bc,08 Sep 2017,"packed_delete_refs(): implement method

Implement `packed_delete_refs()` using a reference transaction. This
means that `files_delete_refs()` can use `refs_delete_refs()` instead
of `repack_without_refs()` to delete any packed references, decreasing
the coupling between the classes.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_75.diff
https://github.com/git/git/commit/2775d8724d73ba2705af72db075b0cdfba3c94f1,08 Sep 2017,"packed_ref_store: implement reference transactions

Implement the methods needed to support reference transactions for
the packed-refs backend. The new methods are not yet used.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",322,data/crawl/git/patch_76.diff
https://github.com/git/git/commit/1ab03a57e1856b3619accb1d42e997bc84cae79f,08 Sep 2017,"shortlog: skip format/parse roundtrip for internal traversal

The original git-shortlog command parsed the output of
git-log, and the logic went something like this:

  1. Read stdin looking for ""author"" lines.

  2. Parse the identity into its name/email bits.

  3. Apply mailmap to the name/email.

  4. Reformat the identity into a single buffer that is our
     ""key"" for grouping entries (either a name by default,
     or ""name <email>"" if --email was given).

The first part happens in read_from_stdin(), and the other
three steps are part of insert_one_record().

When we do an internal traversal, we just swap out the stdin
read in step 1 for reading the commit objects ourselves.
Prior to 2db6b83d18 (shortlog: replace hand-parsing of
author with pretty-printer, 2016-01-18), that made sense; we
still had to parse the ident in the commit message.

But after that commit, we use pretty.c's ""%an <%ae>"" to get
the author ident (for simplicity). Which means that the
pretty printer is doing a parse/format under the hood, and
then we parse the result, apply the mailmap, and format the
result again.

Instead, we can just ask pretty.c to do all of those steps
for us (including the mailmap via ""%aN <%aE>"", and not
formatting the address when --email is missing).

And then we can push steps 2-4 into read_from_stdin(). This
speeds up ""git shortlog -ns"" on linux.git by about 3%, and
eliminates a leak in insert_one_record() of the namemailbuf
strbuf.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_77.diff
https://github.com/git/git/commit/8b604d19515c4be18403047045faa363d4de217b,07 Sep 2017,"hashmap: add API to disable item counting when threaded

This is to address concerns raised by ThreadSanitizer on the mailing list
about threaded unprotected R/W access to map.size with my previous ""disallow
rehash"" change (0607e10009ee4e37cb49b4cec8d28a9dda1656a4).

See:
https://public-inbox.org/git/adb37b70139fd1e2bac18bfd22c8b96683ae18eb.1502780344.git.martin.agren@gmail.com/

Add API to hashmap to disable item counting and thus automatic rehashing.
Also include API to later re-enable them.

When item counting is disabled, the map.size field is invalid.  So to
prevent accidents, the field has been renamed and an accessor function
hashmap_get_size() has been added.  All direct references to this
field have been been updated.  And the name of the field changed
to map.private_size to communicate this.

Here is the relevant output from ThreadSanitizer showing the problem:

WARNING: ThreadSanitizer: data race (pid=10554)
  Read of size 4 at 0x00000082d488 by thread T2 (mutexes: write M16):
    #0 hashmap_add hashmap.c:209
    #1 hash_dir_entry_with_parent_and_prefix name-hash.c:302
    #2 handle_range_dir name-hash.c:347
    #3 handle_range_1 name-hash.c:415
    #4 lazy_dir_thread_proc name-hash.c:471
    #5 <null> <null>

  Previous write of size 4 at 0x00000082d488 by thread T1 (mutexes: write M31):
    #0 hashmap_add hashmap.c:209
    #1 hash_dir_entry_with_parent_and_prefix name-hash.c:302
    #2 handle_range_dir name-hash.c:347
    #3 handle_range_1 name-hash.c:415
    #4 handle_range_dir name-hash.c:380
    #5 handle_range_1 name-hash.c:415
    #6 lazy_dir_thread_proc name-hash.c:471
    #7 <null> <null>

Martin gives instructions for running TSan on test t3008 in this post:
https://public-inbox.org/git/CAN0heSoJDL9pWELD6ciLTmWf-a=oyxe4EXXOmCKvsG5MSuzxsA@mail.gmail.com/

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_78.diff
https://github.com/git/git/commit/ea8e029785f87dc167491ebbc7ea3e924a72b5c4,06 Sep 2017,"sha1_file: release strbuf on error return in index_path()

strbuf_readlink() already frees the buffer for us on error.  Clean up
if write_sha1_file() fails as well instead of returning early.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_79.diff
https://github.com/git/git/commit/b36474ff6b4c7d0a4939b7551c576ef3de7e4719,06 Sep 2017,"am: release strbuf on error return in hg_patch_to_mail()

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_80.diff
https://github.com/git/git/commit/afbb8838b7d4d1887da1e1871f8e9ccd01ae1138,06 Sep 2017,"reset: free allocated tree buffers

We read the tree objects with fill_tree_descriptor(), but
never actually free the resulting buffers, causing a memory
leak. This isn't a huge deal because we call this code at
most twice per program invocation. But it does potentially
double our heap usage if you have large root trees. Let's
free the trees before returning.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_81.diff
https://github.com/git/git/commit/ee4d8e455c0981269213eccfd788a9bb9adf77d9,06 Sep 2017,"ref_lock: stop leaking lock_files

Since the tempfile code recently relaxed the rule that
tempfile structs (and thus locks) need to hang around
forever, we no longer have to leak our lock_file structs.

In fact, we don't even need to heap-allocate them anymore,
since their lifetime can just match that of the surrounding
ref_lock (and if we forget to delete a lock, the effect is
the same as before: it will eventually go away at program
exit).

Note that there is a check in unlock_ref() to only rollback
a lock file if it has been allocated. We don't need that
check anymore; we zero the ref_lock (and thus the
lock_file), so at worst we pass a NULL pointer to
delete_tempfile(), which considers that a noop.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_82.diff
https://github.com/git/git/commit/076aa2cbda5782426c45cd65017b81d77876297a,06 Sep 2017,"tempfile: auto-allocate tempfiles on heap

The previous commit taught the tempfile code to give up
ownership over tempfiles that have been renamed or deleted.
That makes it possible to use a stack variable like this:

  struct tempfile t;

  create_tempfile(&t, ...);
  ...
  if (!err)
          rename_tempfile(&t, ...);
  else
          delete_tempfile(&t);

But doing it this way has a high potential for creating
memory errors. The tempfile we pass to create_tempfile()
ends up on a global linked list, and it's not safe for it to
go out of scope until we've called one of those two
deactivation functions.

Imagine that we add an early return from the function that
forgets to call delete_tempfile(). With a static or heap
tempfile variable, the worst case is that the tempfile hangs
around until the program exits (and some functions like
setup_shallow_temporary rely on this intentionally, creating
a tempfile and then leaving it for later cleanup).

But with a stack variable as above, this is a serious memory
error: the variable goes out of scope and may be filled with
garbage by the time the tempfile code looks at it.  Let's
see if we can make it harder to get this wrong.

Since many callers need to allocate arbitrary numbers of
tempfiles, we can't rely on static storage as a general
solution. So we need to turn to the heap. We could just ask
all callers to pass us a heap variable, but that puts the
burden on them to call free() at the right time.

Instead, let's have the tempfile code handle the heap
allocation _and_ the deallocation (when the tempfile is
deactivated and removed from the list).

This changes the return value of all of the creation
functions. For the cleanup functions (delete and rename),
we'll add one extra bit of safety: instead of taking a
tempfile pointer, we'll take a pointer-to-pointer and set it
to NULL after freeing the object. This makes it safe to
double-call functions like delete_tempfile(), as the second
call treats the NULL input as a noop. Several callsites
follow this pattern.

The resulting patch does have a fair bit of noise, as each
caller needs to be converted to handle:

  1. Storing a pointer instead of the struct itself.

  2. Passing the pointer instead of taking the struct
     address.

  3. Handling a ""struct tempfile *"" return instead of a file
     descriptor.

We could play games to make this less noisy. For example, by
defining the tempfile like this:

  struct tempfile {
	struct heap_allocated_part_of_tempfile {
                int fd;
                ...etc
        } *actual_data;
  }

Callers would continue to have a ""struct tempfile"", and it
would be ""active"" only when the inner pointer was non-NULL.
But that just makes things more awkward in the long run.
There aren't that many callers, so we can simply bite
the bullet and adjust all of them. And the compiler makes it
easy for us to find them all.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",277,data/crawl/git/patch_83.diff
https://github.com/git/git/commit/9b028aa45a2016ae0dbdfeb85ad9d43f2017db0d,06 Sep 2017,"tempfile: replace die(""BUG"") with BUG()

Compared to die(), using BUG() triggers abort(). That may
give us an actual coredump, which should make it easier to
get a stack trace. And since the programming error for these
assertions is not in the functions themselves but in their
callers, such a stack trace is needed to actually find the
source of the bug.

In addition, abort() raises SIGABRT, which is more likely to
be caught by our test suite.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_84.diff
https://github.com/git/git/commit/f5b4dc7668b6c8d71432af9f9ddad6f7c62d284e,06 Sep 2017,"tempfile: handle NULL tempfile pointers gracefully

The tempfile functions all take pointers to tempfile
objects, but do not check whether the argument is NULL.
This isn't a big deal in practice, since the lifetime of any
tempfile object is defined to last for the whole program. So
even if we try to call delete_tempfile() on an
already-deleted tempfile, our ""active"" check will tell us
that it's a noop.

In preparation for transitioning to a new system that
loosens the ""tempfile objects can never be freed"" rule,
let's tighten up our active checks:

  1. A NULL pointer is now defined as ""inactive"" (so it will
     BUG for most functions, but works as a silent noop for
     things like delete_tempfile).

  2. Functions should always do the ""active"" check before
     looking at any of the struct fields.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_85.diff
https://github.com/git/git/commit/49bd0fc2220eef17d8f5fd3ee76e391d03df8a6d,06 Sep 2017,"tempfile: do not delete tempfile on failed close

When close_tempfile() fails, we delete the tempfile and
reset the fields of the tempfile struct. This makes it
easier for callers to return without cleaning up, but it
also makes this common pattern:

  if (close_tempfile(tempfile))
	return error_errno(""error closing %s"", tempfile->filename.buf);

wrong, because the ""filename"" field has been reset after the
failed close. And it's not easy to fix, as in many cases we
don't have another copy of the filename (e.g., if it was
created via one of the mks_tempfile functions, and we just
have the original template string).

Let's drop the feature that a failed close automatically
deletes the file. This puts the burden on the caller to do
the deletion themselves, but this isn't that big a deal.
Callers which do:

  if (write(...) || close_tempfile(...)) {
	delete_tempfile(...);
	return -1;
  }

already had to call delete when the write() failed, and so
aren't affected. Likewise, any caller which just calls die()
in the error path is OK; we'll delete the tempfile during
the atexit handler.

Because this patch changes the semantics of close_tempfile()
without changing its signature, all callers need to be
manually checked and converted to the new scheme. This patch
covers all in-tree callers, but there may be others for
not-yet-merged topics. To catch these, we rename the
function to close_tempfile_gently(), which will attract
compile-time attention to new callers. (Technically the
original could be considered ""gentle"" already in that it
didn't die() on errors, but this one is even more so).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_86.diff
https://github.com/git/git/commit/cfdc88f1a34ccb8e59899501b0ede875afac0d83,26 Aug 2017,"hex_to_bytes(): simpler replacement for `get_oid_hex_segment()`

Now that `get_oid_hex_segment()` does less, it makes sense to rename
it and simplify its semantics:

* Instead of a `hex_len` parameter, which was the number of hex
  characters (and had to be even), use a `len` parameter, which is the
  number of resulting bytes. This removes then need for the check that
  `hex_len` is even and to divide it by two to determine the number of
  bytes. For good hygiene, declare the `len` parameter to be `size_t`
  instead of `unsigned int`.

* Change the order of the arguments to the more traditional (dst,
  src, len).

* Rename the function to `hex_to_bytes()`.

* Remove a loop variable: just count `len` down instead.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_87.diff
https://github.com/git/git/commit/67c9b422513ac601c68c191a026af968a2838ae1,26 Aug 2017,"get_oid_hex_segment(): return 0 on success

Nobody cares about the return value of get_oid_hex_segment() except to
check whether it failed. So just return 0 on success.

And while we're updating its docstring, update it for some argument
renaming that happened a while ago.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_88.diff
https://github.com/git/git/commit/d3b0c6bebf3d8e85464b33d58e47a73894d882c7,26 Aug 2017,"load_subtree(): remove unnecessary conditional

At this point in the code, len is *always* <= 20.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_89.diff
https://github.com/git/git/commit/d0c39a49ccb5dfe7feba4325c3374d99ab123c59,24 Aug 2017,"revision.c: --all adds HEAD from all worktrees

Unless single_worktree is set, --all now adds HEAD from all worktrees.

Since reachable.c code does not use setup_revisions(), we need to call
other_head_refs_submodule() explicitly there to have the same effect on
""git prune"", so that we won't accidentally delete objects needed by some
other HEADs.

A new FIXME is added because we would need something like

    int refs_other_head_refs(struct ref_store *, each_ref_fn, cb_data);

in addition to other_head_refs() to handle it, which might require

    int get_submodule_worktrees(const char *submodule, int flags);

It could be a separate topic to reduce the scope of this one.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_90.diff
https://github.com/git/git/commit/7709f468fdeece2a99d60a581a4ced65cd2844df,23 Aug 2017,"pack: move for_each_packed_object()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_91.diff
https://github.com/git/git/commit/a2551953b9619b285128c1e9cf35120fb7555d8f,23 Aug 2017,"pack: move find_pack_entry_one(), is_pack_valid()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",166,data/crawl/git/patch_92.diff
https://github.com/git/git/commit/9e0f45f5a61d9d0556e6004198dd6a650be14bd9,23 Aug 2017,"pack: move check_pack_index_ptr(), nth_packed_object_offset()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_93.diff
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/patch_94.diff
https://github.com/git/git/commit/7b3aa75df7db72a283a11b9ce41658b89576db2b,23 Aug 2017,"pack: move get_size_from_delta()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_95.diff
https://github.com/git/git/commit/32b42e152fcc453273fadb5a7d639e4e9b506783,23 Aug 2017,"pack: move unpack_object_header_buffer()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_96.diff
https://github.com/git/git/commit/84f80ad5e11d29b61570269a25cf447f34c5aeba,23 Aug 2017,"pack: move use_pack()

The function open_packed_git() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",604,data/crawl/git/patch_97.diff
https://github.com/git/git/commit/3836d88ae575cf2321fb17296f748c0bb35ba268,23 Aug 2017,"pack: move pack-closing functions

The function close_pack_fd() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_98.diff
https://github.com/git/git/commit/0317f45576a0b48c90c4b023fa572a000633946c,23 Aug 2017,"pack: move open_pack_index(), parse_pack_index()

alloc_packed_git() in packfile.c is duplicated from sha1_file.c. In a
subsequent commit, alloc_packed_git() will be removed from sha1_file.c.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",311,data/crawl/git/patch_99.diff
https://github.com/git/git/commit/8e21176c3cff203c1b991fda55df3ac7904d09fa,23 Aug 2017,"pack: move pack_report()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_100.diff
https://github.com/git/git/commit/7560f547e614244fe1d4648598d4facf7ed33a56,23 Aug 2017,"treewide: correct several ""up-to-date"" to ""up to date""

Follow the Oxford style, which says to use ""up-to-date"" before the noun,
but ""up to date"" after it. Don't change plumbing (specifically
send-pack.c, but transport.c (git push) also has the same string).

This was produced by grepping for ""up-to-date"" and ""up to date"". It
turned out we only had to edit in one direction, removing the hyphens.

Fix a typo in Documentation/git-diff-index.txt while we're there.

Reported-by: Jeffrey Manian <jeffrey.manian@gmail.com>
Reported-by: STEVEN WHITE <stevencharleswhitevoices@gmail.com>
Signed-off-by: Martin Ågren <martin.agren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_101.diff
https://github.com/git/git/commit/b8f43b120b4d7bd0638eb072f8527c5a33a70579,23 Aug 2017,"vcs-svn: move remaining repo_tree functions to fast_export.h

These used to be for manipulating the in-memory repo_tree structure,
but nowadays they are convenience wrappers to handle a few git-vs-svn
mismatches:

 1. Git does not track empty directories but Subversion does.  When
    looking up a path in git that Subversion thinks exists and finding
    nothing, we can safely assume that the path represents a
    directory.  This is needed when a later Subversion revision
    modifies that directory.

 2. Subversion allows deleting a file by copying.  In Git fast-import
    we have to handle that more explicitly as a deletion.

These are details of the tool's interaction with git fast-import.
Move them to fast_export.c, where other such details are handled.

This way the function names do not start with a repo_ prefix that
would clash with the repository object introduced in
v2.14.0-rc0~38^2~16 (repository: introduce the repository object,
2017-06-22) or an svn_ prefix that would clash with libsvn (in case
someone wants to link this code with libsvn some day).

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/patch_102.diff
https://github.com/git/git/commit/b50386c7c038ccea8f70d2a66ac78f189240ef05,21 Aug 2017,"read-cache: fix memory leak in do_write_index

The previous_name_buf was never getting released when there
was an error in ce_write_entry or allow was false and execution
was returned to the caller.

Signed-off-by: Kevin Willford <kewillf@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_103.diff
https://github.com/git/git/commit/eab8bf292b9616772245717ce8069ec1a4354bd4,21 Aug 2017,"builtin/hash-object: convert to struct object_id

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_104.diff
https://github.com/git/git/commit/9a9340329a7151697c943794369950115963879f,18 Aug 2017,"commit: replace the raw buffer with strbuf in read_graft_line

This simplifies function declaration and allows for use of strbuf_rtrim
instead of modifying buffer directly.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_105.diff
https://github.com/git/git/commit/52668846ea2d41ffbd87cda7cb8e492dea9f2c4d,17 Aug 2017,"builtin/branch: stop supporting the ""--set-upstream"" option

The '--set-upstream' option of branch was deprecated in b347d06b
(""branch: deprecate --set-upstream and show help if we detect
possible mistaken use"", 2012-08-30) and has been planned for removal
ever since.

In order to prevent ""--set-upstream"" on a command line from being taken as
an abbreviated form of ""--set-upstream-to"", explicitly catch ""--set-upstream""
option and die, instead of just removing it from the list of options.

Before this change, an attempt to use ""--set-upstream"" resulted in:

    $ git branch
    * master

    $ git branch --set-upstream origin/master
    The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to
    Branch origin/master set up to track local branch master.

    $ echo $?
    0

    $ git branch
    * master
      origin/master

With this change, the behaviour becomes like this:

    $ git branch
    * master

    $ git branch --set-upstream origin/master
    fatal: the '--set-upstream' option is no longer supported. Please use '--track' or '--set-upstream-to' instead.

    $ echo $?
    128

    $ git branch
    * master

Signed-off-by: Kaartic Sivaraam <kaarticsivaraam91196@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_106.diff
https://github.com/git/git/commit/36f048c5e488005da0a9dfba6b617c7c9951c7cf,16 Aug 2017,"sha1dc: build git plumbing code more explicitly

The plumbing code between sha1dc and git is defined in
sha1dc_git.[ch], but these aren't compiled / included directly but
only via the indirect inclusion from sha1dc code.  This is slightly
confusing when you try to trace the build flow.

This patch brings the following changes for simplification:

  - Make sha1dc_git.c stand-alone and build from Makefile

  - sha1dc_git.h is the common header to include further sha1.h
    depending on the build condition

  - Move comments for plumbing codes from the header to definitions

This is also meant as a preliminary work for further plumbing with
external sha1dc shlib.

Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_107.diff
https://github.com/git/git/commit/d3ba566342a4fd81b24d926efc35506d58e10a19,16 Aug 2017,"sub-process: print the cmd when a capability is unsupported

In handshake_capabilities() we use warning() when a capability
is not supported, so the exit code of the function is 0 and no
further error is shown. This is a problem because the warning
message doesn't tell us which subprocess cmd failed.

On the contrary if we cannot write a packet from this function,
we use error() and then subprocess_start() outputs:

    initialization for subprocess '<cmd>' failed

so we can know which subprocess cmd failed.

Let's improve the warning() message, so that we can know which
subprocess cmd failed.

Helped-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_108.diff
https://github.com/git/git/commit/fdbdb64f49959f9c83329554080934895f02ae59,15 Aug 2017,"interpret-trailers: add an option to show only existing trailers

It can be useful to invoke interpret-trailers for the
primary purpose of parsing existing trailers. But in that
case, we don't want to apply existing ifMissing or ifExists
rules from the config. Let's add a special mode where we
avoid applying those rules. Coupled with --only-trailers,
this gives us a reasonable parsing tool.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_109.diff
https://github.com/git/git/commit/5c377d3d593d324346bbaa965cbff8870795b420,14 Aug 2017,"tree-walk: convert fill_tree_descriptor() to object_id

All callers of fill_tree_descriptor() have been converted to object_id
already, so convert that function as well.  As a nice side-effect we get
rid of NULL checks in tree-diff.c, as fill_tree_descriptor() already
does them for us.

Helped-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Rene Scharfe <l.s.r@web.de>
Reviewed-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_110.diff
https://github.com/git/git/commit/0ea5292e6be2f37b647b744177cfe6cc5e6f605d,14 Aug 2017,"interpret-trailers: add options for actions

Allow using non-default values for trailers without having to set
them up in .gitconfig first.  For example, if you have the following
configuration

     trailer.signed-off-by.where = end

you may use ""--where before"" when a patch author forgets his
Signed-off-by and provides it in a separate email.  Likewise for
--if-exists and --if-missing

Reverting to the behavior specified by .gitconfig is done with
--no-where, --no-if-exists and --no-if-missing.

Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",162,data/crawl/git/patch_111.diff
https://github.com/git/git/commit/789bf26b07dbdd5985e30136f4ba638bb9c7f00e,11 Aug 2017,"sha1_file: remove read_packed_sha1()

Use read_object() in its place instead. This avoids duplication of code.

This makes force_object_loose() slightly slower (because of a redundant
check of loose object storage), but only in the error case.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_112.diff
https://github.com/git/git/commit/b3622a4ee94e4916cd05e6d96e41eeb36b941182,11 Aug 2017,"The first batch of topics after the 2.14 cycle

Notably, let's declare that we aim to make ""git add ''"" illegal in
the cycle after this one.

The topic to do so, ex/deprecate-empty-pathspec-as-match-all, has
been cooking in 'next' too long, and will stay there during this
cycle, but not after.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/patch_113.diff
https://github.com/git/git/commit/3ae6bf9265e8c89303d1bb86ae6e00015d2eaa5f,10 Aug 2017,"t1200: remove t1200-tutorial.sh

v1.2.0~121 (New tutorial, 2006-01-22) rewrote the tutorial such that the
original intent of 2ae6c70674 (Adapt tutorial to cygwin and add test case,
2005-10-13) to test the examples from the tutorial doesn't hold any more.

There are dedicated tests for the commands used, even ""git whatchanged"",
such that removing these tests doesn't seem like a reduction in test
coverage.

Signed-off-by: Stefan Beller <sbeller@google.com>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",268,data/crawl/git/patch_114.diff
https://github.com/git/git/commit/f1068efefe6dd3beaa89484db5e2db730b094e0b,09 Aug 2017,"sha1_file: drop experimental GIT_USE_LOOKUP search

Long ago in 628522ec14 (sha1-lookup: more memory efficient
search in sorted list of SHA-1, 2007-12-29) we added
sha1_entry_pos(), a binary search that uses the uniform
distribution of sha1s to scale the selection of mid-points.
As this was a performance experiment, we tied it to the
GIT_USE_LOOKUP environment variable and never enabled it by
default.

This code was successful in reducing the number of steps in
each search. But the overhead of the scaling ends up making
it slower when the cache is warm. Here are best-of-five
timings for running rev-list on linux.git, which will have
to look up every object:

  $ time git rev-list --objects --all >/dev/null
  real	0m35.357s
  user	0m35.016s
  sys	0m0.340s

  $ time GIT_USE_LOOKUP=1 git rev-list --objects --all >/dev/null
  real	0m37.364s
  user	0m37.045s
  sys	0m0.316s

The USE_LOOKUP version might have more benefit on a cold
cache, as the time to fault in each page would dominate. But
that would be for a single lookup. In practice, most
operations tend to look up many objects, and the whole pack
.idx will end up warm.

It's possible that the code could be better optimized to
compete with a naive binary search for the warm-cache case,
and we could have the best of both worlds. But over the
years nobody has done so, and this is largely dead code that
is rarely run outside of the test suite. Let's drop it in
the name of simplicity.

This lets us remove sha1_entry_pos() entirely, as the .idx
lookup code was the only caller.  Note that sha1-lookup.c
still contains sha1_pos(), which differs from
sha1_entry_pos() in two ways:

  - it has a different interface; it uses a function pointer
    to access sha1 entries rather than a size/offset pair
    describing the table's memory layout

  - it only scales the initial selection of ""mi"", rather
    than each iteration of the search

We can't get rid of this function, as it's called from
several places. It may be that we could replace it with a
simple binary search, but that's out of scope for this patch
(and would need benchmarking).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",239,data/crawl/git/patch_115.diff
https://github.com/git/git/commit/1e22a9917b48809a1825f79c66e58e9b1b1da08a,09 Aug 2017,"builtin/add: add detail to a 'cannot chmod' error message

In addition to adding the missing newline, add the x-ecutable bit
'mode change' character to the error message. This message now has
the same form as similar messages output by 'update-index'.

Signed-off-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_116.diff
https://github.com/git/git/commit/7463e2ec3e932707b70b5d5c82df51bfbb6aa77d,03 Aug 2017,"unpack-trees: don't respect submodule.update

The 'submodule.update' config was historically used and respected by the
'submodule update' command because update handled a variety of different
ways it updated a submodule.  As we begin teaching other commands about
submodules it makes more sense for the different settings of
'submodule.update' to be handled by the individual commands themselves
(checkout, rebase, merge, etc) so it shouldn't be respected by the
native checkout command.

Also remove the overlaying of the repository's config (via using
'submodule_config()') from the commands which use the unpack-trees
logic (checkout, read-tree, reset).

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_117.diff
https://github.com/git/git/commit/f9ee2fcdfa05586b6a4476c7aa5f4f0162e48455,02 Aug 2017,"grep: recurse in-process using 'struct repository'

Convert grep to use 'struct repository' which enables recursing into
submodules to be handled in-process.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",432,data/crawl/git/patch_118.diff
https://github.com/git/git/commit/2184d4ba0cb86a7f40153cd46b03d3fa75b247d9,02 Aug 2017,"submodule: merge repo_read_gitmodules and gitmodules_config

Since 69aba5329 (submodule: add repo_read_gitmodules) there have been
two ways to load a repository's .gitmodules file:
'repo_read_gitmodules()' is used if you have a repository object you are
working with or 'gitmodules_config()' if you are implicitly working with
'the_repository'.  Merge the logic of these two functions to remove
duplicate code.

In addition, 'repo_read_gitmodules()' can segfault by passing in a NULL
pointer to 'git_config_from_file()' if a repository doesn't have a
worktree.  Instead check for the existence of a worktree before
attempting to load the .gitmodules file.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_119.diff
https://github.com/git/git/commit/f20e7c1ea2459d9b8c12f8ed1f1546665841b643,02 Aug 2017,"submodule: remove submodule.fetchjobs from submodule-config parsing

The '.gitmodules' file should only contain information pertinent to
configuring individual submodules (name to path mapping, URL where to
obtain the submodule, etc.) while other configuration like the number of
jobs to use when fetching submodules should be a part of the
repository's config.

Remove the 'submodule.fetchjobs' configuration option from the general
submodule-config parsing and instead rely on using the
'config_from_gitmodules()' in order to maintain backwards compatibility
with this config being placed in the '.gitmodules' file.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_120.diff
https://github.com/git/git/commit/5116f791c12dda6b6c22fa85b600a8e30dfa168a,30 Jun 2017,"Thirteenth batch for 2.14

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_121.diff
https://github.com/git/git/commit/1ecbf31d0298a1ed952623108e23234d5cf37086,30 Jun 2017,"hashmap: migrate documentation from Documentation/technical into header

While at it, clarify the use of `key`, `keydata`, `entry_or_key` as well
as documenting the new data pointer for the compare function.

Rework the example.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",657,data/crawl/git/patch_122.diff
https://github.com/git/git/commit/b3cf1b77894861920671def129a981b54ec9618e,30 Jun 2017,"commit-template: distinguish status information unconditionally

The commit template adds the status information without
adding a new line to distinguish them in the absence
of optional parts. This results in difficulty in interpreting
it's content, specifically for inexperienced users.

Unconditionally, add new lines to separate the status message
from the other parts of the commit-template to make it more
readable.

Signed-off-by: Kaartic Sivaraam <kaarticsivaraam91196@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_123.diff
https://github.com/git/git/commit/b884244c844a5688f9e8de3256143839c7b3c40a,30 Jun 2017,"commit-template: remove outdated notice about explicit paths

The notice that ""git commit <paths>"" default to ""git commit
--only <paths>"" was there since 756e3ee0 (""Merge branch
'jc/commit'"", 2006-02-14).  Back then, existing users of Git
expected the command doing ""git commit --include <paths>"", and
after the behaviour of the command was changed to align with
other people's ""$scm commit <paths>"", the text was added to help
them transition their expectations.

Remove the message that now has outlived its usefulness.

Signed-off-by: Kaartic Sivaraam <kaarticsivaraam91196@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_124.diff
https://github.com/git/git/commit/dc4b4a61baac86bb75b0bdffb9ca45e90c4e194d,28 Jun 2017,"submodule--helper: do not call utf8_fprintf() unnecessarily

The helper function utf8_fprintf(fp, ...) has exactly the same
effect to the output stream fp as fprintf(fp, ...) does, and the
only difference is that its return value counts in display columns
consumed (assuming that the payload is encoded in UTF-8), as opposed
to number of bytes.

There is no reason to call it unless the caller cares about its
return value.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_125.diff
https://github.com/git/git/commit/d70e9c5c8c865626b6e69c2bf9fd0e368543617b,27 Jun 2017,"apply: check git diffs for mutually exclusive header lines

A file can either be added, removed, copied, or renamed, but no two of
these actions can be done by the same patch.  Some of these combinations
provoke error messages due to missing file names, and some are only
caught by an assertion.  Check git patches already as they are parsed
and report conflicting lines on sight.

Found by Vegard Nossum using AFL.

Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_126.diff
https://github.com/git/git/commit/44e5471a8d8ec5f04058220f8b91513b5b5accaa,27 Jun 2017,"apply: check git diffs for invalid file modes

An empty string as mode specification is accepted silently by git apply,
as Vegard Nossum found out using AFL.  It's interpreted as zero.  Reject
such bogus file modes, and only accept ones consisting exclusively of
octal digits.

Reported-by: Vegard Nossum <vegard.nossum@oracle.com>
Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_127.diff
https://github.com/git/git/commit/64127575149e35b409bc2f78962f86507346d604,27 Jun 2017,"Spelling fixes

Signed-off-by: Ville Skyttä <ville.skytta@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_128.diff
https://github.com/git/git/commit/df801f3f9f5be52842239f0d0233d5c3fb0cdffd,25 Jun 2017,"read-cache: use shared perms when writing shared index

Since f6ecc62dbf (write_shared_index(): use tempfile module, 2015-08-10)
write_shared_index() has been using mks_tempfile() to create the
temporary file that will become the shared index.

But even before that, it looks like the functions used to create this
file didn't call adjust_shared_perm(), which means that the shared
index file has always been created with 600 permissions regardless
of the shared permission settings.

Because of that, on repositories created with `git init --shared=all`
and using the split index feature, one gets an error like:

fatal: .git/sharedindex.a52f910b489bc462f187ab572ba0086f7b5157de: index file open failed: Permission denied

when another user performs any operation that reads the shared index.

Call adjust_shared_perm() on the temporary file created by
mks_tempfile() ourselves to adjust the permission bits.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_129.diff
https://github.com/git/git/commit/8592c95cdfb476dff5c9e18c185289927601236d,24 Jun 2017,"doc: clarify syntax for %C(auto,...) in pretty formats

The manual correctly describes the syntax with `auto,` but the
trailing `,` is hard to spot in a terminal.  The HTML format does not
have this problem.  Adding an example helps both worlds.

Signed-off-by: Andreas Heiduk <asheiduk@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_130.diff
https://github.com/git/git/commit/188dce131fa95d85ddc024a1bc7d2b7fc5da4424,24 Jun 2017,"ls-files: use repository object

Convert ls-files to use a repository struct and recurse submodules
inprocess.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",233,data/crawl/git/patch_131.diff
https://github.com/git/git/commit/3b256228a66f8587661481ef3e08259864f3ba2a,24 Jun 2017,"config: read config from a repository object

Teach the config machinery to read config information from a repository
object.  This involves storing a 'struct config_set' inside the
repository object and adding a number of functions (repo_config*) to be
able to query a repository's config.

The current config API enables lazy-loading of the config.  This means
that when 'git_config_get_int()' is called, if the_config_set hasn't
been populated yet, then it will be populated and properly initialized by
reading the necessary config files (system wide .gitconfig, user's home
.gitconfig, and the repository's config).  To maintain this paradigm,
the new API to read from a repository object's config will also perform
this lazy-initialization.

Since both APIs (git_config_get* and repo_config_get*) have the same
semantics we can migrate the default config to be stored within
'the_repository' and just have the 'git_config_get*' family of functions
redirect to the 'repo_config_get*' functions.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",257,data/crawl/git/patch_132.diff
https://github.com/git/git/commit/359efeffc1f16443be18a80b91ba7cd356eb34f1,24 Jun 2017,"repository: introduce the repository object

Introduce the repository object 'struct repository' which can be used to
hold all state pertaining to a git repository.

Some of the benefits of object-ifying a repository are:

  1. Make the code base more readable and easier to reason about.

  2. Allow for working on multiple repositories, specifically
     submodules, within the same process.  Currently the process for
     working on a submodule involves setting up an argv_array of options
     for a particular command and then launching a child process to
     execute the command in the context of the submodule.  This is
     clunky and can require lots of little hacks in order to ensure
     correctness.  Ideally it would be nice to simply pass a repository
     and an options struct to a command.

  3. Eliminating reliance on global state will make it easier to
     enable the use of threading to improve performance.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",224,data/crawl/git/patch_133.diff
https://github.com/git/git/commit/a6d7eb2c7a6a402a938824bcf1c5f331dd1a06bb,23 Jun 2017,"pull: optionally rebase submodules (remote submodule changes only)

Teach pull to optionally update submodules when '--recurse-submodules'
is provided.  This will teach pull to run 'submodule update --rebase'
when the '--recurse-submodules' and '--rebase' flags are given under
specific circumstances.

On a rebase workflow:
=====================

1. Both sides change the submodule
 ------------------------------
Let's assume the following history in a submodule:

  H---I---J---K---L local branch
       \
        M---N---O---P remote branch

and the following in the superproject (recorded submodule in parens):

  A(H)---B(I)---F(K)---G(L)  local branch
          \
           C(N)---D(N)---E(P) remote branch

In an ideal world this would rebase the submodule and rewrite
the submodule pointers that the superproject points at such that
the superproject looks like

  A(H)---B(I)              F(K')---G(L')  rebased branch
           \                /
           C(N)---D(N)---E(P) remote branch

and the submodule as:

        J---K---L (old dangeling tip)
       /
  H---I               J'---K'---L' rebased branch
       \             /
        M---N---O---P remote branch

And if a conflict arises in the submodule the superproject rebase
would stop at that commit at which the submodule conflict occurs.

Currently a ""pull --rebase"" in the superproject produces
a merge conflict as the submodule pointer changes are
conflicting and cannot be resolved.

2. Local submodule changes only
 -----------------------
Assuming histories as above, except that the remote branch
would not contain submodule changes, then a result as

  A(H)---B(I)               F(K)---G(L)  rebased branch
           \                /
           C(I)---D(I)---E(I) remote branch

is desire-able. This is what currently happens in rebase.

If the recursive flag is given, the ideal git would
produce a superproject as:

  A(H)---B(I)              F(K')---G(L')  rebased branch (incl. sub rebase!)
           \                /
           C(I)---D(I)---E(I) remote branch

and the submodule as:

        J---K---L (old dangeling tip)
       /
  H---I               J'---K'---L' locally rebased branch
       \             /
        M---N---O---P advanced branch

This patch doesn't address this issue, however
a test is added that this fails up front.

3. Remote submodule changes only
 ----------------------
Assuming histories as in (1) except that the local superproject branch
would not have touched the submodule the rebase already works out in the
superproject with no conflicts:

  A(H)---B(I)               F(P)---G(P)  rebased branch (no sub changes)
           \                 /
           C(N)---D(N)---E(P) remote branch

The recurse flag as presented in this patch would additionally
update the submodule as:

  H---I              J'---K'---L' rebased branch
       \            /
        M---N---O---P remote branch

As neither J, K, L nor J', K', L' are referred to from the superproject,
no rewriting of the superproject commits is required.

Conclusion for 'pull --rebase --recursive'
 -----------------------------------------
If there are no local superproject changes it is sufficient to call
""submodule update --rebase"" as this produces the desired results. In case
of conflicts, the behavior is the same as in 'submodule update --recursive'
which is assumed to be sane.

This patch implements (3) only.

On a merge workflow:
====================

We'll start off with the same underlying DAG as in (1) in the rebase
workflow. So in an ideal world a 'pull --merge --recursive' would
produce this:

  H---I---J---K---L----X
       \              /
        M---N---O---P

with X as the new merge-commit in the submodule and the superproject
as:

  A(H)---B(I)---F(K)---G(L)---Y(X)
          \                  /
           C(N)---D(N)---E(P)

However modifying the submodules on the fly is not supported in git-merge
such that Y(X) is not easy to produce in a single patch. In fact git-merge
doesn't know about submodules at all.

However when at least one side does not contain commits touching the
submodule at all, then we do not need to perform the merge for the
submodule but a fast-forward can be done via checking out either L or P
in the submodule.  This strategy is implemented in 68d03e4a6e (Implement
automatic fast-forward merge for submodules, 2010-07-07) already, so
to align with the rebase behavior we need to also update the worktree
of the submodule.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",173,data/crawl/git/patch_134.diff
https://github.com/git/git/commit/4ddb1354e8d5daf5671d3d451a67d2d1e82d9b49,22 Jun 2017,"status: contextually notify user about an initial commit

The existing message, ""Initial commit"", makes sense for the commit template
notifying users that it's their initial commit, but is confusing when
merely checking the status of a fresh repository (or orphan branch)
without having any commits yet.

Change the output of ""status"" to say ""No commits yet"" when ""git
status"" is run on a fresh repo (or orphan branch), while retaining the
current ""Initial commit"" message displayed in the template that's
displayed in the editor when the initial commit is being authored.

Correspondingly change the output of ""short status"" to ""No commits yet
on "" when ""git status -sb"" is run on a fresh repo (or orphan branch).

A few alternatives considered were,

 * Waiting for initial commit
 * Your current branch does not have any commits
 * Current branch waiting for initial commit

The most succint one among the alternatives was chosen.

[with help on tests from Ævar]

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Kaartic Sivaraam <kaarticsivaraam91196@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_135.diff
https://github.com/git/git/commit/2d3c02f5db620af7169b651ff4afe625df3af156,21 Jun 2017,"die(): stop hiding errors due to overzealous recursion guard

Change the recursion limit for the default die routine from a *very*
low 1 to 1024. This ensures that infinite recursions are broken, but
doesn't lose the meaningful error messages under threaded execution
where threads concurrently start to die.

The intent of the existing code, as explained in commit
cd163d4b4e (""usage.c: detect recursion in die routines and bail out
immediately"", 2012-11-14), is to break infinite recursion in cases
where the die routine itself calls die(), and would thus infinitely
recurse.

However, doing that very aggressively by immediately printing out
""recursion detected in die handler"" if we've already called die() once
means that threaded invocations of git can end up only printing out
the ""recursion detected"" error, while hiding the meaningful error.

An example of this is running a threaded grep which dies on execution
against pretty much any repo, git.git will do:

    git grep -P --threads=8 '(*LIMIT_MATCH=1)-?-?-?---$'

With the current version of git this will print some combination of
multiple PCRE failures that caused the abort and multiple ""recursion
detected"", some invocations will print out multiple ""recursion
detected"" errors with no PCRE error at all!

Before this change, running the above grep command 1000 times against
git.git[1] and taking the top 20 results will on my system yield the
following distribution of actual errors (""E"") and recursion
errors (""R""):

    322 E R
    306 E
    116 E R R
     65 R R
     54 R E
     49 E E
     44 R
     15 E R R R
      9 R R R
      7 R E R
      5 R R E
      3 E R R R R
      2 E E R
      1 R R R R
      1 R R R E
      1 R E R R

The exact results are obviously random and system-dependent, but this
shows the race condition in this code. Some small part of the time
we're about to print out the actual error (""E"") but another thread's
recursion error beats us to it, and sometimes we print out nothing but
the recursion error.

With this change we get, now with ""W"" to mean the new warning being
emitted indicating that we've called die() many times:

    502 E
    160 E W E
    120 E E
     53 E W
     35 E W E E
     34 W E E
     29 W E E E
     16 E E W
     16 E E E
     11 W E E E E
      7 E E W E
      4 W E
      3 W W E E
      2 E W E E E
      1 W W E
      1 W E W E
      1 E W W E E E
      1 E W W E E
      1 E W W E
      1 E W E E W

Which still sucks a bit, due to a still present race-condition in this
code we're sometimes going to print out several errors still, or
several warnings, or two duplicate errors without the warning.

But we will never have a case where we completely hide the actual
error as we do now.

Now, git-grep could make use of the pluggable error facility added in
commit c19a490e37 (""usage: allow pluggable die-recursion checks"",
2013-04-16). There's other threaded code that calls set_die_routine()
or set_die_is_recursing_routine().

But this is about fixing the general die() behavior with threading
when we don't have such a custom routine yet. Right now the common
case is not an infinite recursion in the handler, but us losing error
messages by default because we're overly paranoid about our recursion
check.

So let's just set the recursion limit to a number higher than the
number of threads we're ever likely to spawn. Now we won't lose
errors, and if we have a recursing die handler we'll still die within
microseconds.

There are race conditions in this code itself, in particular the
""dying"" variable is not thread mutexed, so we e.g. won't be dying at
exactly 1024, or for that matter even be able to accurately test
""dying == 2"", see the cases where we print out more than one ""W""
above.

But that doesn't really matter, for the recursion guard we just need
to die ""soon"", not at exactly 1024 calls, and for printing the correct
error and only one warning most of the time in the face of threaded
death this is good enough and a net improvement on the current code.

1. for i in {1..1000}; do git grep -P --threads=8 '(*LIMIT_MATCH=1)-?-?-?---$' 2>&1|perl -pe 's/^fatal: r.*/R/; s/^fatal: p.*/E/; s/^warning.*/W/' | tr '\n' ' '; echo; done | sort | uniq -c | sort -nr | head -n 20

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_136.diff
https://github.com/git/git/commit/968b1fe263f9dfec65be4598e4f0dd76f1692551,21 Jun 2017,"auto-correct: tweak phrasing

When help.autoCorrect is enabled, an invalid git command prints a
warning and a continuation message, which differs depending on
whether or not the value of help.autoCorrect is positive or
negative.

With help.autoCorrect = 15:

   WARNING: You called a Git command named 'lgo', which does not exist.
   Continuing under the assumption that you meant 'log'
   in 1.5 seconds automatically...

With help.autoCorrect < 0:

   WARNING: You called a Git command named 'lgo', which does not exist.
   Continuing under the assumption that you meant 'log'

The continuation message's phrasing is awkward.  This commit cleans it up.
As a bonus, we now use full-sentence strings which make translation easier.

With help.autoCorrect = 15:

   WARNING: You called a Git command named 'lgo', which does not exist.
   Continuing in 1.5 seconds, assuming that you meant 'log'.

With help.autoCorrect < 0:

   WARNING: You called a Git command named 'lgo', which does not exist.
   Continuing under the assumption that you meant 'log'.

Signed-off-by: Marc Branchaud <marcnarc@xiplink.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_137.diff
https://github.com/git/git/commit/cdb866b30bd862527de597ae9c7fe7540de55bf2,19 Jun 2017,"sequencer: print autostash messages to stderr

The rebase messages are printed to stderr traditionally. However due
to a bug introduced in 587947750bd (rebase: implement --[no-]autostash
and rebase.autostash, 2013-05-12) which was faithfully copied when
reimplementing parts of the interactive rebase in the sequencer the
autostash messages are printed to stdout instead.

It is time to fix that: let's print the autostash messages to stderr
instead of stdout.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_138.diff
https://github.com/git/git/commit/c1b5d0194b98bd3d0acc9cec7070808fbbe6a740,19 Jun 2017,"status: add optional stash count information

Introduce '--show-stash' and its configuration option 'status.showStash'
to allow git-status to show information about currently stashed entries.

Signed-off-by: Liam Beguin <liambeguin@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_139.diff
https://github.com/git/git/commit/e67a57fc5187f93ced9631edf80fc09eefb3fed9,15 Jun 2017,"config: create config.h

Move all config related declarations from cache.h to a new config.h
header file.  This makes cache.h smaller and allows for the opportunity
in a following patch to only include config.h when needed.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",384,data/crawl/git/patch_140.diff
https://github.com/git/git/commit/a9bcf6586d1a4888aea91553d73cda20494b8335,15 Jun 2017,"alias: use the early config machinery to expand aliases

Instead of discovering the .git/ directory, reading the config and then
trying to painstakingly reset all the global state if we did not find a
matching alias, let's use the early config machinery instead.

It may look like unnecessary work to discover the .git/ directory in the
early config machinery and then call setup_git_directory_gently() in the
case of a shell alias, repeating the very same discovery *again*.
However, we have to do this as the early config machinery takes pains
*not* to touch any global state, while shell aliases expect a possibly
changed working directory and at least the GIT_PREFIX and GIT_DIR
variables to be set.

This change also fixes a known issue where Git tried to read the pager
config from an incorrect path in a subdirectory of a Git worktree if an
alias expanded to a shell command.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_141.diff
https://github.com/git/git/commit/0c977dbc8180892af42d7ab9235fd3e51d6c4078,15 Jun 2017,"diff-highlight: split code into module

The diff-so-fancy project is also written in perl, and most
of its users pipe diffs through both diff-highlight and
diff-so-fancy. It would be nice if this could be done in a
single script. So let's pull most of diff-highlight's code
into its own module which can be used by diff-so-fancy.

In addition, we'll abstract a few basic items like reading
from stdio so that a script using the module can do more
processing before or after diff-highlight handles the lines.
See the README update for more details.

One small downside is that the diff-highlight script must
now be built using the Makefile. There are ways around this,
but it quickly gets into perl arcana. Let's go with the
simple solution. As a bonus, our Makefile now respects the
PERL_PATH variable if it is set.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_142.diff
https://github.com/git/git/commit/532139940c98a98bce2001bb495d75dec3d88e4d,15 Jun 2017,"add: warn when adding an embedded repository

It's an easy mistake to add a repository inside another
repository, like:

  git clone $url
  git add .

The resulting entry is a gitlink, but there's no matching
.gitmodules entry. Trying to use ""submodule init"" (or clone
with --recursive) doesn't do anything useful. Prior to
v2.13, such an entry caused git-submodule to barf entirely.
In v2.13, the entry is considered ""inactive"" and quietly
ignored. Either way, no clone of your repository can do
anything useful with the gitlink without the user manually
adding the submodule config.

In most cases, the user probably meant to either add a real
submodule, or they forgot to put the embedded repository in
their .gitignore file.

Let's issue a warning when we see this case. There are a few
things to note:

  - the warning will go in the git-add porcelain; anybody
    wanting to do low-level manipulation of the index is
    welcome to create whatever funny states they want.

  - we detect the case by looking for a newly added gitlink;
    updates via ""git add submodule"" are perfectly reasonable,
    and this avoids us having to investigate .gitmodules
    entirely

  - there's a command-line option to suppress the warning.
    This is needed for git-submodule itself (which adds the
    entry before adding any submodule config), but also
    provides a mechanism for other scripts doing
    submodule-like things.

We could make this a hard error instead of a warning.
However, we do add lots of sub-repos in our test suite. It's
not _wrong_ to do so. It just creates a state where users
may be surprised. Pointing them in the right direction with
a gentle hint is probably the best option.

There is a config knob that can disable the (long) hint. But
I intentionally omitted a config knob to disable the warning
entirely. Whether the warning is sensible or not is
generally about context, not about the user's preferences.
If there's a tool or workflow that adds gitlinks without
matching .gitmodules, it should probably be taught about the
new command-line option, rather than blanket-disabling the
warning.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_143.diff
https://github.com/git/git/commit/02a2850ad58eff6de70eb2dc5f96345c463857ac,13 Jun 2017,Sync with maint,37,data/crawl/git/patch_144.diff
https://github.com/git/git/commit/fd99e2bda0ca6a361ef03c04d6d7fdc7a9c40b78,13 Jun 2017,"Prepare for 2.13.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_145.diff
https://github.com/git/git/commit/5306ccf9e9ec7204eef409e90b57ddf23b8f5ca6,13 Jun 2017,"ls-files: factor out debug info into a function

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_146.diff
https://github.com/git/git/commit/dffc651ed191ff0eb3cfd0e8df83a423b4dae994,12 Jun 2017,"revision.c: stricter parsing of '--early-output'

The parsing of '--early-output' with or without its optional integer
argument allowed bogus options like '--early-output-foobarbaz' to slip
through and be ignored.

Fix it by parsing '--early-output' in the same way as other options
with an optional argument are parsed.  Furthermore, use strtoul_ui()
to parse the optional integer argument and to refuse negative numbers.

While at it, use skip_prefix() instead of starts_with() and magic
numbers.

Signed-off-by: SZEDER Gábor <szeder.dev@gmail.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_147.diff
https://github.com/git/git/commit/d691551192ac845747694258ccae9ffeeb6bdd58,05 Jun 2017,"t0012: test ""-h"" with builtins

Since commit 99caeed05 (Let 'git <command> -h' show usage
without a git dir, 2009-11-09), the git wrapper handles ""-h""
specially, skipping any repository setup but still calling
the builtin's cmd_foo() function. This means that every
cmd_foo() must be ready to handle this case, but we don't
have any systematic tests. This led to ""git am -h"" being
broken for some time without anybody noticing.

This patch just tests that ""git foo -h"" works for every
builtin, where we see a 129 exit code (the normal code for
our usage() helper), and that the word ""usage"" appears in
the output.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_148.diff
https://github.com/git/git/commit/8893fd95b66cbd6566136a289dd05fcf4e547281,05 Jun 2017,"git: add hidden --list-builtins option

It can be useful in the test suite to be able to iterate
over the list of builtins. We could do this with some
Makefile magic. But since the authoritative list is in the
commands array inside git.c, and since this could also be
handy for debugging, let's add a hidden command-line option
to dump that list.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_149.diff
https://github.com/git/git/commit/b48cbfc5e6112952bc3be4dea0208bc5e1f331eb,05 Jun 2017,"version: convert to parse-options

The ""git version"" command didn't traditionally accept any
options, and in fact ignores any you give it. When we added
simple option parsing for ""--build-options"" in 6b9c38e14, we
didn't improve this; we just loop over the arguments and
pick out the one we recognize.

Instead, let's move to a real parsing loop, complain about
nonsense options, and recognize conventions like ""-h"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_150.diff
https://github.com/git/git/commit/177409e5897988f03e0c8111c94db6ea0466b138,02 Jun 2017,"send-email: check for repo before invoking hook

Unless --no-validate is passed, send-email will invoke
$repo->repo_path() in its search for a validate hook regardless of
whether a Git repo is actually present.  Teach send-email to first check
for repo existence.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_151.diff
https://github.com/git/git/commit/490bc83a01acfefa11e98f8852b1f4a9dd962331,02 Jun 2017,"notes: convert for_each_note to struct object_id

Convert for_each_note and each of the callbacks to use struct object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_152.diff
https://github.com/git/git/commit/94da9193a6eb8f1085d611c04ff8bbb4f5ae1e0a,01 Jun 2017,"grep: add support for PCRE v2

Add support for v2 of the PCRE API. This is a new major version of
PCRE that came out in early 2015[1].

The regular expression syntax is the same, but while the API is
similar, pretty much every function is either renamed or takes
different arguments. Thus using it via entirely new functions makes
sense, as opposed to trying to e.g. have one compile_pcre_pattern()
that would call either PCRE v1 or v2 functions.

Git can now be compiled with either USE_LIBPCRE1=YesPlease or
USE_LIBPCRE2=YesPlease, with USE_LIBPCRE=YesPlease currently being a
synonym for the former. Providing both is a compile-time error.

With earlier patches to enable JIT for PCRE v1 the performance of the
release versions of both libraries is almost exactly the same, with
PCRE v2 being around 1% slower.

However after I reported this to the pcre-dev mailing list[2] I got a
lot of help with the API use from Zoltán Herczeg, he subsequently
optimized some of the JIT functionality in v2 of the library.

Running the p7820-grep-engines.sh performance test against the latest
Subversion trunk of both, with both them and git compiled as -O3, and
the test run against linux.git, gives the following results. Just the
/perl/ tests shown:

    $ GIT_PERF_REPEAT_COUNT=30 GIT_PERF_LARGE_REPO=~/g/linux GIT_PERF_MAKE_COMMAND='grep -q LIBPCRE2 Makefile && make -j8 USE_LIBPCRE2=YesPlease CC=~/perl5/installed/bin/gcc NO_R_TO_GCC_LINKER=YesPlease CFLAGS=-O3 LIBPCREDIR=/home/avar/g/pcre2/inst LDFLAGS=-Wl,-rpath,/home/avar/g/pcre2/inst/lib || make -j8 USE_LIBPCRE=YesPlease CC=~/perl5/installed/bin/gcc NO_R_TO_GCC_LINKER=YesPlease CFLAGS=-O3 LIBPCREDIR=/home/avar/g/pcre/inst LDFLAGS=-Wl,-rpath,/home/avar/g/pcre/inst/lib' ./run HEAD~5 HEAD~ HEAD p7820-grep-engines.sh
    [...]
    Test                                            HEAD~5            HEAD~                    HEAD
    -----------------------------------------------------------------------------------------------------------------
    7820.3: perl grep 'how.to'                      0.31(1.10+0.48)   0.21(0.35+0.56) -32.3%   0.21(0.34+0.55) -32.3%
    7820.7: perl grep '^how to'                     0.56(2.70+0.40)   0.24(0.64+0.52) -57.1%   0.20(0.28+0.60) -64.3%
    7820.11: perl grep '[how] to'                   0.56(2.66+0.38)   0.29(0.95+0.45) -48.2%   0.23(0.45+0.54) -58.9%
    7820.15: perl grep '(e.t[^ ]*|v.ry) rare'       1.02(5.77+0.42)   0.31(1.02+0.54) -69.6%   0.23(0.50+0.54) -77.5%
    7820.19: perl grep 'm(ú|u)lt.b(æ|y)te'          0.38(1.57+0.42)   0.27(0.85+0.46) -28.9%   0.21(0.33+0.57) -44.7%

See commit (""perf: add a comparison test of grep regex engines"",
2017-04-19) for details on the machine the above test run was executed
on.

Here HEAD~2 is git with PCRE v1 without JIT, HEAD~ is PCRE v1 with
JIT, and HEAD is PCRE v2 (also with JIT). See previous commits of mine
mentioning p7820-grep-engines.sh for more details on the test setup.

For ease of readability, a different run just of HEAD~ (PCRE v1 with
JIT v.s. PCRE v2), again with just the /perl/ tests shown:

    [...]
    Test                                            HEAD~             HEAD
    ----------------------------------------------------------------------------------------
    7820.3: perl grep 'how.to'                      0.21(0.42+0.52)   0.21(0.31+0.58) +0.0%
    7820.7: perl grep '^how to'                     0.25(0.65+0.50)   0.20(0.31+0.57) -20.0%
    7820.11: perl grep '[how] to'                   0.30(0.90+0.50)   0.23(0.46+0.53) -23.3%
    7820.15: perl grep '(e.t[^ ]*|v.ry) rare'       0.30(1.19+0.38)   0.23(0.51+0.51) -23.3%
    7820.19: perl grep 'm(ú|u)lt.b(æ|y)te'          0.27(0.84+0.48)   0.21(0.34+0.57) -22.2%

I.e. the two are either neck-to-neck, but PCRE v2 usually pulls ahead,
when it does it's around 20% faster.

A brief note on thread safety: As noted in pcre2api(3) & pcre2jit(3)
the compiled pattern can be shared between threads, but not some of
the JIT context, however the grep threading support does all pattern &
JIT compilation in separate threads, so this code doesn't need to
concern itself with thread safety.

See commit 63e7e9d8b6 (""git-grep: Learn PCRE"", 2011-05-09) for the
initial addition of PCRE v1. This change follows some of the same
patterns it did (and which were discussed on list at the time),
e.g. mocking up types with typedef instead of ifdef-ing them out when
USE_LIBPCRE2 isn't defined. This adds some trivial memory use to the
program, but makes the code look nicer.

1. https://lists.exim.org/lurker/message/20150105.162835.0666407a.en.html
2. https://lists.exim.org/lurker/thread/20170419.172322.833ee099.en.html

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",277,data/crawl/git/patch_153.diff
https://github.com/git/git/commit/f0994fa85dfcbd9854686d7b6de3b05b7952f41c,30 May 2017,"submodule--helper: show usage for ""-h""

Normal users shouldn't ever call submodule--helper, but it
doesn't hurt to give them a normal usage message if they try
""-h"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_154.diff
https://github.com/git/git/commit/bb246590a1b648ac23f6a22d1d9e119129ba2f03,30 May 2017,"remote-{ext,fd}: print usage message on invalid arguments

We just say ""Expected two arguments"" when we get a different
number of arguments, but we can be slightly friendlier.
People shouldn't generally be running remote helpers
themselves, but curious users might say ""git remote-ext -h"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_155.diff
https://github.com/git/git/commit/e83352ef23cca2701953ed3c915f1db49b255a7d,29 May 2017,"Third batch for 2.14

Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_156.diff
https://github.com/git/git/commit/c99eddd83519811d6604b4ce4a8d2001787a30d4,29 May 2017,"verify_filename(): treat "":(magic)"" as a pathspec

For commands that take revisions and pathspecs, magic
pathspecs like "":(exclude)foo"" require the user to specify
a disambiguating ""--"", since they do not match a file in the
filesystem, like:

  git grep foo -- :(exclude)bar

This makes them more annoying to use than they need to be.
We loosened the rules for wildcards in 28fcc0b71 (pathspec:
avoid the need of ""--"" when wildcard is used, 2015-05-02).
Let's do the same for pathspecs with long-form magic.

We already handle the short-forms "":/"" and "":^"" specially in
check_filename(), so we don't need to handle them here. And
in fact, we could do the same with long-form magic, parsing
out the actual filename and making sure it exists. But there
are a few reasons not to do it that way:

  - the parsing gets much more complicated, and we'd want to
    hand it off to the pathspec code. But that code isn't
    ready to do this kind of speculative parsing (it's happy
    to die() when it sees a syntactically invalid pathspec).

  - not all pathspec magic maps to a filesystem path. E.g.,
    :(attr) should be treated as a pathspec regardless of
    what is in the filesystem

  - we can be a bit looser with "":("" than with the
    short-form "":/"", because it is much less likely to have
    a false positive. Whereas "":/"" also means ""search for a
    commit with this regex"".

Note that because the change is in verify_filename() and not
in its helper check_filename(), this doesn't affect the
verify_non_filename() case. I.e., if an item that matches
our new rule doesn't resolve as an object, we may fallback
to treating it as a pathspec (rather than complaining it
doesn't exist). But if it does resolve (e.g., as a file in
the index that starts with an open-paren), we won't then
complain that it's also a valid pathspec. This matches the
wildcard-exception behavior.

And of course in either case, one can always insert the ""--""
to get more precise results.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_157.diff
https://github.com/git/git/commit/fbaceaac4731655540e48845eb3a3e2ce2282b38,26 May 2017,"grep: add support for the PCRE v1 JIT API

Change the grep PCRE v1 code to use JIT when available. When PCRE
support was initially added in commit 63e7e9d8b6 (""git-grep: Learn
PCRE"", 2011-05-09) PCRE had no JIT support, it was integrated into
8.20 released on 2011-10-21.

Enabling JIT support usually improves performance by more than
40%. The pattern compilation times are relatively slower, but those
relative numbers are tiny, and are easily made back in all but the
most trivial cases of grep. Detailed benchmarks & overview of
compilation times is at: http://sljit.sourceforge.net/pcre.html

With this change the difference in a t/perf/p7820-grep-engines.sh run
is, with just the /perl/ tests shown:

    $ GIT_PERF_REPEAT_COUNT=30 GIT_PERF_LARGE_REPO=~/g/linux GIT_PERF_MAKE_OPTS='-j8 USE_LIBPCRE=YesPlease CC=~/perl5/installed/bin/gcc NO_R_TO_GCC_LINKER=YesPlease CFLAGS=-O3 LIBPCREDIR=/home/avar/g/pcre/inst LDFLAGS=-Wl,-rpath,/home/avar/g/pcre/inst/lib' ./run HEAD~ HEAD p7820-grep-engines.sh
    Test                                           HEAD~             HEAD
    ---------------------------------------------------------------------------------------
    7820.3: perl grep 'how.to'                      0.35(1.11+0.43)   0.23(0.42+0.46) -34.3%
    7820.7: perl grep '^how to'                     0.64(2.71+0.36)   0.27(0.66+0.44) -57.8%
    7820.11: perl grep '[how] to'                   0.63(2.51+0.42)   0.33(0.98+0.39) -47.6%
    7820.15: perl grep '(e.t[^ ]*|v.ry) rare'       1.17(5.61+0.35)   0.34(1.08+0.46) -70.9%
    7820.19: perl grep 'm(ú|u)lt.b(æ|y)te'          0.43(1.52+0.44)   0.30(0.88+0.42) -30.2%

The conditional support for JIT is implemented as suggested in the
pcrejit(3) man page. E.g. defining PCRE_STUDY_JIT_COMPILE to 0 if it's
not present.

The implementation is relatively verbose because even if
PCRE_CONFIG_JIT is defined only a call to pcre_config() can determine
if the JIT is available, and if so the faster pcre_jit_exec() function
should be called instead of pcre_exec(), and a different (but not
complimentary!) function needs to be called to free pcre1_extra_info.

There's no graceful fallback if pcre_jit_stack_alloc() fails under
PCRE_CONFIG_JIT, instead the program will simply abort. I don't think
this is worth handling gracefully, it'll only fail in cases where
malloc() doesn't work, in which case we're screwed anyway.

That there's no assignment of `p->pcre1_jit_on = 0` when
PCRE_CONFIG_JIT isn't defined isn't a bug. The create_grep_pat()
function allocates the grep_pat allocates it with calloc(), so it's
guaranteed to be 0 when PCRE_CONFIG_JIT isn't defined.

I you're bisecting and find this change, check that your PCRE isn't
older than 8.32. This change intentionally broke really old versions
of PCRE, but that's fixed in follow-up commits.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_158.diff
https://github.com/git/git/commit/d1edee4adac8f516f1545d080fbffcdb148ac7b7,26 May 2017,"grep: given --threads with NO_PTHREADS=YesPlease, warn

Add a warning about missing thread support when grep.threads or
--threads is set to a non 0 (default) or 1 (no parallelism) value
under NO_PTHREADS=YesPlease.

This is for consistency with the index-pack & pack-objects commands,
which also take a --threads option & are configurable via
pack.threads, and have long warned about the same under
NO_PTHREADS=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_159.diff
https://github.com/git/git/commit/374166cb381eef5498ac41f1f2835163ac656bdc,26 May 2017,"grep: catch a missing enum in switch statement

Add a die(...) to a default case for the switch statement selecting
between grep pattern types under --recurse-submodules.

Normally this would be caught by -Wswitch, but the grep_pattern_type
type is converted to int by going through parse_options(). Changing
the argument type passed to compile_submodule_options() won't work,
the value will just get coerced. The -Wswitch-default warning will
warn about it, but that produces a lot of noise across the codebase,
this potential issue would be drowned in that noise.

Thus catching this at runtime is the least bad option. This won't ever
trigger in practice, but if a new pattern type were to be added this
catches an otherwise silent bug during development.

See commit 0281e487fd (""grep: optionally recurse into submodules"",
2016-12-16) for the initial addition of this code.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_160.diff
https://github.com/git/git/commit/5118d7f4e6e00b7eac3ce08a16392a732edc0b2b,26 May 2017,"print errno when reporting a system call error

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_161.diff
https://github.com/git/git/commit/e2d90fd1c33ae57e4a6da5729ae53876107b3463,26 May 2017,"config.mak.uname: set FREAD_READS_DIRECTORIES for Linux and FreeBSD

This variable is added [1] with the assumption that on a sane system,
fopen(<dir>, ""r"") should return NULL. Linux and FreeBSD do not meet this
expectation while at least Windows and AIX do. Let's make sure they
behave the same way.

I only tested one version on Linux (4.7.0 with glibc 2.22) and
FreeBSD (11.0) but since GNU/kFreeBSD is fbsd kernel with gnu userspace,
I'm pretty sure it shares the same problem.

[1] cba22528fa (Add compat/fopen.c which returns NULL on attempt to open
    directory - 2008-02-08)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_162.diff
https://github.com/git/git/commit/23a9e0712d76a63c5af1caeb816943f466f0300e,26 May 2017,"use xfopen() in more places

xfopen()

 - provides error details
 - explains error on reading, or writing, or whatever operation
 - has l10n support
 - prints file name in the error

Some of these are missing in the places that are replaced with xfopen(),
which is a clear win. In some other places, it's just less code (not as
clearly a win as the previous case but still is).

The only slight regresssion is in remote-testsvn, where we don't report
the file class (marks files) in the error messages anymore. But since
this is a _test_ svn remote transport, I'm not too concerned.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_163.diff
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/patch_164.diff
https://github.com/git/git/commit/b543bb1cdfc9b61b262a848f936c326f4b060a6c,25 May 2017,"blame: move scoreboard-related methods to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2642,data/crawl/git/patch_165.diff
https://github.com/git/git/commit/072bf4321fb484a8eabb315c031f47883336fba2,25 May 2017,"blame: move fake-commit-related methods to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",404,data/crawl/git/patch_166.diff
https://github.com/git/git/commit/f5dd754c36f7d9cc7dd4c3f1a22e0e4a557b2021,25 May 2017,"blame: move origin-related methods to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",150,data/crawl/git/patch_167.diff
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/patch_168.diff
https://github.com/git/git/commit/4149c1860b10512cf32410c1f71311a23dc97f07,24 May 2017,"blame: make sanity_check use a callback in scoreboard

Allow the interface user to decide how to handle a failed sanity check,
whether that be to output with the current state or to do nothing.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_169.diff
https://github.com/git/git/commit/8449528deb6826fac5e6a9a312b45b4522ef7ebb,24 May 2017,"blame: move stat counters to scoreboard

Statistic counters are used in parts of blame that are being moved to
libgit, and should be accessible via the scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_170.diff
https://github.com/git/git/commit/006a0744998804d43a02034bf44b97a163027bb5,24 May 2017,"blame: rename origin-related functions

Functions related to blame_origin that will be publicly exposed should
have names that better reflect what they are a part of.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_171.diff
https://github.com/git/git/commit/9807b3d65d3789ed7916ffc98dbdf7ed89634ca3,24 May 2017,"blame: rename scoreboard structure to blame_scoreboard

The scoreboard structure is core to the blame interface. Since
scoreboard will become more exposed, rename it to blame_scoreboard to
clarify what it is a part of.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_172.diff
https://github.com/git/git/commit/62faad5aa5441942c333c15f3afa03a6e2dd994d,24 May 2017,"handle_revision_arg: add handle_dotdot() helper

The handle_revision_arg function is rather long, and a big
chunk of it is handling the range operators. Let's pull that
out to a separate helper. While we're doing so, we can clean
up a few of the rough edges that made the flow hard to
follow:

  - instead of manually restoring *dotdot (that we overwrote
    with a NUL), do the real work in a sub-helper, which
    makes it clear that the munge/restore lines are a
    matched pair

  - eliminate a goto which wasn't actually used for control
    flow, but only to avoid duplicating a few lines
    (instead, those lines are pushed into another helper
    function)

  - use early returns instead of deep nesting

  - consistently name all variables for the left-hand side
    of the range as ""a"" (rather than ""this"" or ""from"") and
    the right-hand side as ""b"" (rather than ""next"", or using
    the unadorned ""sha1"" or ""flags"" from the main function).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_173.diff
https://github.com/git/git/commit/c1da06c6f1a77370341d93d80af027caa6a19a94,23 May 2017,"create_ref_entry(): remove `check_name` option

Only one caller was using it, so move the check to that caller.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_174.diff
https://github.com/git/git/commit/89c571da56a1e84fe12308f727fac0e82c1d5be6,23 May 2017,"read_packed_refs(): report unexpected fopen() failures

The old code ignored any errors encountered when trying to fopen the
""packed-refs"" file, treating all such failures as if the file didn't
exist. But it could be that there is some other error opening the
file (e.g., permissions problems), and we don't want to silently
ignore such problems. So report any failures that are not due to
ENOENT.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_175.diff
https://github.com/git/git/commit/8556f8d61330ec677dc48b0ef39e2017d6927708,23 May 2017,"ref_update_reject_duplicates(): add a sanity check

It's pretty cheap to make sure that the caller didn't pass us an
unsorted list by accident, so do so.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_176.diff
https://github.com/git/git/commit/30173b8851bb7203de938a638386cb9e6d7c501b,23 May 2017,"ref_transaction_prepare(): new optional step for reference updates

In the future, compound reference stores will sometimes need to modify
references in two different reference stores at the same time, meaning
that a single logical reference transaction might have to be
implemented as two internal sub-transactions. They won't want to call
`ref_transaction_commit()` for the two sub-transactions one after the
other, because that wouldn't be atomic (the first commit could succeed
and the second one fail). Instead, they will want to prepare both
sub-transactions (i.e., obtain any necessary locks and do any
pre-checks), and only if both prepare steps succeed, then commit both
sub-transactions.

Start preparing for that day by adding a new, optional
`ref_transaction_prepare()` step to the reference transaction
sequence, which obtains the locks and does any prechecks, reporting
any errors that occur. Also add a `ref_transaction_abort()` function
that can be used to abort a sub-transaction even if it has already
been prepared.

That is on the side of the public-facing API. On the side of the
`ref_store` VTABLE, get rid of `transaction_commit` and instead add
methods `transaction_prepare`, `transaction_finish`, and
`transaction_abort`. A `ref_transaction_commit()` now basically calls
methods `transaction_prepare` then `transaction_finish`.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",306,data/crawl/git/patch_177.diff
https://github.com/git/git/commit/8d4240d3c8a2d31b7bedda8408c0b3c217c76998,23 May 2017,"ref_transaction_commit(): check for valid `transaction->state`

Move the check that `transaction->state` is valid from
`files_transaction_commit()` to `ref_transaction_commit()`, where
other future reference backends can benefit from it as well.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_178.diff
https://github.com/git/git/commit/b9c8e7f2fb6ee19defeaa2927a0af42b525d8b33,23 May 2017,"prefix_ref_iterator: don't trim too much

The `trim` parameter can be set independently of `prefix`. So if some
caller were to set `trim` to be greater than `strlen(prefix)`, we
could end up pointing the `refname` field of the iterator past the NUL
of the actual reference name string.

That can't happen currently, because `trim` is always set either to
zero or to `strlen(prefix)`. But even the latter could lead to
confusion, if a refname is exactly equal to the prefix, because then
we would set the outgoing `refname` to the empty string.

And we're about to decouple the `prefix` and `trim` arguments even
more, so let's be cautious here. Report a bug if ever asked to trim a
reference whose name is not longer than `trim`.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_179.diff
https://github.com/git/git/commit/04aea8d4df199836da3802f08cb5738eae66fa6c,23 May 2017,"files-backend: use `die(""BUG: ..."")`, not `die(""internal error: ..."")`

The former is by far more common in our codebase.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_180.diff
https://github.com/git/git/commit/a0103914c228cee430b37faab212d1769e8218a0,22 May 2017,"sha1dc: update from upstream

Update sha1dc from the latest version by the upstream
maintainer[1].

This version includes a commit of mine which allows for replacing the
local modifications done to the upstream files in git.git with macro
definitions to monkeypatch it in place.

It also brings in a change[2] upstream made for the breakage 2.13.0
introduced on SPARC and other platforms that forbid unaligned
access[3].

This means that the code customizations done since the initial import
in commit 28dc98e343 (""sha1dc: add collision-detecting sha1
implementation"", 2017-03-16) can be done purely via Makefile
definitions and by including the content of our own sha1dc_git.[ch] in
sha1dc/sha1.c via a macro.

1. https://github.com/cr-marcstevens/sha1collisiondetection/commit/cc465543b310e5f59a1d534381690052e8509b22
2. https://github.com/cr-marcstevens/sha1collisiondetection/commit/33a694a9ee1b79c24be45f9eab5ac0e1aeeaf271
3. ""Git 2.13.0 segfaults on Solaris SPARC due to DC_SHA1=YesPlease
   being on by default""
   (https://public-inbox.org/git/CACBZZX6nmKK8af0-UpjCKWV4R+hV-uk2xWXVA5U+_UQ3VXU03g@mail.gmail.com/)

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/patch_181.diff
https://github.com/git/git/commit/d096d7f1ef81f5c52d0c9d3070ad82b66de9c981,20 May 2017,"rebase -i: add missing newline to end of message

The message that's printed when auto-stashed changes are successfully
restored was missing '\n' at the end.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_182.diff
https://github.com/git/git/commit/10c78a162fa821ee85203165b805ff46be454091,16 May 2017,"Start post 2.13 cycle

Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_183.diff
https://github.com/git/git/commit/6489660b4bba7456fac0d0a41f5d6295c5900c5f,16 May 2017,"send-email: support validate hook

Currently, send-email has support for rudimentary e-mail validation.
Allow the user to add support for more validation by providing a
sendemail-validate hook.

Helped-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_184.diff
https://github.com/git/git/commit/99605d62e8e7e568035dc953b24b79b3d52f0522,15 May 2017,"sub-process: move sub-process functions into separate files

Move the sub-proces functions into sub-process.h/c.  Add documentation
for the new module in Documentation/technical/api-sub-process.txt

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",315,data/crawl/git/patch_185.diff
https://github.com/git/git/commit/f514d7d177f7cabbacc3f2cda96ca211266ac2ff,15 May 2017,"convert: rename reusable sub-process functions

Do a mechanical rename of the functions that will become the reusable
sub-process module.

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_186.diff
https://github.com/git/git/commit/a810ea9945d5959b6cf73d117bc0f20fde58c556,15 May 2017,"convert: split start_multi_file_filter() into two separate functions

To enable future reuse of the filter.<driver>.process infrastructure,
split start_multi_file_filter() into two separate parts.

start_multi_file_filter() will now only contain the generic logic to
manage the creation and tracking of the child process in a hashmap.

start_multi_file_filter_fn() is a protocol specific initialization
function that will negotiate the multi-file-filter interface version
and capabilities.

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_187.diff
https://github.com/git/git/commit/e3f43ce765c38f4be94239d07c8c3c596780c514,15 May 2017,"usage.c: drop set_error_handle()

The set_error_handle() function was introduced by 3b331e926
(vreportf: report to arbitrary filehandles, 2015-08-11) so
that run-command could send post-fork, pre-exec errors to
the parent's original stderr.

That use went away in 79319b194 (run-command: eliminate
calls to error handling functions in child, 2017-04-19),
which pushes all of the error reporting to the parent.
This leaves no callers of set_error_handle(). As we're not
likely to add any new ones, let's drop it.

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_188.diff
https://github.com/git/git/commit/25cd291963e4b0fae0eabe7fe02be693702d79bb,15 May 2017,"config: complain about --local outside of a git repo

The ""--local"" option instructs git-config to read or modify
the repository-level config. This doesn't make any sense if
you're not actually in a repository.

Older versions of Git would blindly try to read or write
"".git/config"". For reading, this would result in a quiet
failure, since there was no config to read (and thus no
matching config value). Writing would generally fail
noisily, since "".git"" was unlikely to exist. But since
b1ef400ee (setup_git_env: avoid blind fall-back to "".git"",
2016-10-20), we catch this in the call to git_pathdup() and
die with an assertion.

Dying is the right thing to do, but we should catch the
problem early and give a more human-friendly error message.

Note that even without --local, git-config will sometimes
default to using local repository config (e.g., when
writing). These cases are already protected by similar
checks, and covered by a test in t1308.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_189.diff
https://github.com/git/git/commit/588a538ae554f61a37d43c972da75d0f7c3ed484,15 May 2017,"setup_git_env: convert die(""BUG"") to BUG()

Converting to BUG() makes it easier to detect and debug
cases where we hit this assertion. Coupled with a new test
in t1300, this shows that the test suite can detect such
corner cases.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_190.diff
https://github.com/git/git/commit/d8193743e0883e7331c102a4d04cee5324eb3b5f,15 May 2017,"usage.c: add BUG() function

There's a convention in Git's code base to write assertions
as:

  if (...some_bad_thing...)
	die(""BUG: the terrible thing happened"");

with the idea that users should never see a ""BUG:"" message
(but if they, it at least gives a clue what happened).  We
use die() here because it's convenient, but there are a few
draw-backs:

  1. Without parsing the messages, it's hard for callers to
     distinguish BUG assertions from regular errors.

     For instance, it would be nice if the test suite could
     check that we don't hit any assertions, but
     test_must_fail will pass BUG deaths as OK.

  2. It would be useful to add more debugging features to
     BUG assertions, like file/line numbers or dumping core.

  3. The die() handler can be replaced, and might not
     actually exit the whole program (e.g., it may just
     pthread_exit()). This is convenient for normal errors,
     but for an assertion failure (which is supposed to
     never happen), we're probably better off taking down
     the whole process as quickly and cleanly as possible.

We could address these by checking in die() whether the
error message starts with ""BUG"", and behaving appropriately.
But there's little advantage at that point to sharing the
die() code, and only downsides (e.g., we can't change the
BUG() interface independently). Moreover, converting all of
the existing BUG calls reveals that the test suite does
indeed trigger a few of them.

Instead, this patch introduces a new BUG() function, which
prints an error before dying via SIGABRT. This gives us test
suite checking and core dumps.  The function is actually a
macro (when supported) so that we can show the file/line
number.

We can convert die(""BUG"") invocations to BUG() in further
patches, dealing with any test fallouts individually.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_191.diff
https://github.com/git/git/commit/9932242f597b2990117430546e411793090e22e2,12 May 2017,"read-tree -m: make error message for merging 0 trees less smart aleck

""git read-tree -m"" requires a tree argument to name the tree to be
merged in.  Git uses a cutesy error message to say so and why:

    $ git read-tree -m
    warning: read-tree: emptying the index with no arguments is
    deprecated; use --empty
    fatal: just how do you expect me to merge 0 trees?
    $ git read-tree -m --empty
    fatal: just how do you expect me to merge 0 trees?

When lucky, that could produce an ah-hah moment for the user, but it's
more likely to irritate and distract them.

Instead, tell the user plainly that the tree argument is
required. Also document this requirement in the git-read-tree(1)
manpage where there is room to explain it in a more straightforward way.

Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_192.diff
https://github.com/git/git/commit/6c486862636be1fe2d5785451c52f5379b0bad24,12 May 2017,"usability: don't ask questions if no reply is required

There has been a bug report by a corporate user that stated that
""spelling mistake of stash followed by a yes prints character 'y'
infinite times.""

This analysis was false. When the spelling of a command contains
errors, the git program tries to help the user by providing candidates
which are close to the unexisting command. E.g Git prints the
following:

        git: 'stahs' is not a git command. See 'git --help'.
        Did you mean this?

        stash

and then exits.

The problem with this hint is that it is not formally indicated as an
hint and the user is in fact encouraged to reply to the question,
whereas the Git command is already finished.

The user was unlucky enough that it was the command he was looking
for, and replied ""yes"" on the command line, effectively launching the
`yes` program.

The initial error is that the Git programs, when launched in
command-line mode (without interaction) must not ask questions,
because these questions would normally require a user input as a reply
that they won't handle indeed. That's a source of confusion on UX
level.

To improve the general usability of the Git suite, the following rule
was applied:

if the sentence
 * appears in a non-interactive session
 * is printed last before exit
 * is a question addressing the user (""you"")

the sentence is turned into affirmative and proposes the option.

The basic rewording of the question sentences has been extended to
other spots found in the source.

Requested at https://github.com/git/git-scm.com/issues/999 by rpai1

Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_193.diff
https://github.com/git/git/commit/c08397e3aa46fd0f0da29dfe5b257839b9c5d1c8,12 May 2017,"pathspec: remove PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag

Since (ae8d08242 pathspec: pass directory indicator to
match_pathspec_item()) the path matching logic has been able to cope
with submodules without needing to strip off a trailing slash if a path
refers to a submodule.

Since the stripping the trailing slash is no longer necessary, remove
the PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag.  In addition, factor
out the logic which dies if a path decends into a submodule so that it
can still be used as a check after a pathspec struct has been
initialized.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_194.diff
https://github.com/git/git/commit/0d75bfe67bfd7538c0188f862fb4770f09620b8d,11 May 2017,"tests: fix tests broken under GETTEXT_POISON=YesPlease

The GETTEXT_POISON=YesPlease compile-time testing option added in my
bb946bba76 (""i18n: add GETTEXT_POISON to simulate unfriendly
translator"", 2011-02-22) has been slowly bitrotting as strings have
been marked for translation, and new tests have been added without
running it.

I brought this up on the list (""[BUG] test suite broken with
GETTEXT_POISON=YesPlease"", [1]) asking whether this mode was useful at
all anymore. At least one person occasionally uses it, and Lars
Schneider offered to change one of the the Travis builds to run in
this mode, so fix up the failing ones.

My test setup runs most of the tests, with the notable exception of
skipping all the p4 tests, so it's possible that there's still some
lurking regressions I haven't fixed.

1. <CACBZZX62+acvi1dpkknadTL827mtCm_QesGSZ=6+UnyeMpg8+Q@mail.gmail.com>

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_195.diff
https://github.com/git/git/commit/bdab972153a73815e04e9699406433e409ed28ab,10 May 2017,"submodule: add die_in_unpopulated_submodule function

Currently 'git add' is the only command which dies when launched from an
unpopulated submodule (the place-holder directory for a submodule which
hasn't been checked out).  This is triggered implicitly by passing the
PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag to 'parse_pathspec()'.

Instead make this desire more explicit by creating a function
'die_in_unpopulated_submodule()' which dies if the provided 'prefix' has
a leading path component which matches a submodule in the the index.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_196.diff
https://github.com/git/git/commit/2c3b40799fcdb9d2dedc90134e4f3841af08bbe7,10 May 2017,"pathspec: provide a more descriptive die message

The current message displayed upon an internal error in
'init_pathspec_item()' isn't very descriptive and doesn't provide much
context to where the error occurred.  Update the error message to
provide more context to where the error occured.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_197.diff
https://github.com/git/git/commit/e294e8959fea043225a023f981121540b14b08cd,09 May 2017,"apply.c: fix whitespace-only mismerge

4af9a7d3 (""Merge branch 'bc/object-id'"", 2016-09-19) involved
merging a lot of changes made to builtin/apply.c on the side branch
manually to apply.c as an intervening commit 13b5af22 (""apply: move
libified code from builtin/apply.c to apply.{c,h}"", 2016-04-22)
moved a lot of the lines changed on the side branch to a different
file apply.c at the top-level, requiring manual patching of it.
Apparently, the maintainer screwed up and made the code indent in a
funny way while doing so.

Reported-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/patch_198.diff
https://github.com/git/git/commit/c251c83df276dc0bff4d008433268ad59b7a8df2,08 May 2017,"object: convert parse_object* to take struct object_id

Make parse_object, parse_object_or_die, and parse_object_buffer take a
pointer to struct object_id.  Remove the temporary variables inserted
earlier, since they are no longer necessary.  Transform all of the
callers using the following semantic patch:

@@
expression E1;
@@
- parse_object(E1.hash)
+ parse_object(&E1)

@@
expression E1;
@@
- parse_object(E1->hash)
+ parse_object(E1)

@@
expression E1, E2;
@@
- parse_object_or_die(E1.hash, E2)
+ parse_object_or_die(&E1, E2)

@@
expression E1, E2;
@@
- parse_object_or_die(E1->hash, E2)
+ parse_object_or_die(E1, E2)

@@
expression E1, E2, E3, E4, E5;
@@
- parse_object_buffer(E1.hash, E2, E3, E4, E5)
+ parse_object_buffer(&E1, E2, E3, E4, E5)

@@
expression E1, E2, E3, E4, E5;
@@
- parse_object_buffer(E1->hash, E2, E3, E4, E5)
+ parse_object_buffer(E1, E2, E3, E4, E5)

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",215,data/crawl/git/patch_199.diff
https://github.com/git/git/commit/cf93982faefd3a9a488ea9a68c60e3a81a4e0432,08 May 2017,"upload-pack: convert remaining parse_object callers to object_id

Convert the remaining parse_object callers to struct object_id.  Use
named constants for several hard-coded values.  In addition, rename
got_sha1 to got_oid to reflect the new argument.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_200.diff
https://github.com/git/git/commit/9fd750461befcaf984d5966606308c8cd6912f3c,08 May 2017,"Convert the verify_pack callback to struct object_id

Make the verify_pack_callback take a pointer to struct object_id.
Change the pack checksum to use GIT_MAX_RAWSZ, even though it is not
strictly an object ID.  Doing so ensures resilience against future hash
size changes, and allows us to remove hard-coded assumptions about how
big the buffer needs to be.

Also, use a union to convert the pointer from nth_packed_object_sha1 to
to a pointer to struct object_id.  This behavior is compatible with GCC
and clang and explicitly sanctioned by C11.  The alternatives are to
just perform a cast, which would run afoul of strict aliasing rules, but
should just work, and changing the pointer into an instance of struct
object_id and copying the value.  The latter operation could seriously
bloat memory usage on fsck, which already uses a lot of memory on some
repositories.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_201.diff
https://github.com/git/git/commit/3e9309815da9aab4e13195b7c6a52c1f7161562a,08 May 2017,"Convert remaining callers of lookup_blob to object_id

All but a few callers of lookup_blob have been converted to struct
object_id.  Introduce a temporary, which will be removed later, into
parse_object to ease the transition, and convert the remaining callers
so that we can update lookup_blob to take struct object_id *.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_202.diff
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/patch_203.diff
https://github.com/git/git/commit/7422ab50d1011b2b26b59bf11b91a1202618f3e5,08 May 2017,"builtin/tag: convert to struct object_id

Parts of this module call lookup_commit_reference, which we want to
convert.  The module is small and mostly self-contained, so convert the
rest of it while we're at it.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_204.diff
https://github.com/git/git/commit/8eb9460045e44065a85c1dc735bbb8fcba776146,08 May 2017,"http-push: convert some static functions to struct object_id

Among the functions converted is a caller of lookup_commit_or_die, which
we will convert later on.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_205.diff
https://github.com/git/git/commit/912c13d58faf355589a3f67fd55b2015561e0184,08 May 2017,"fast-import: convert to struct object_id

Convert the remaining parts of fast-import.c to use struct object_id.
Convert several instances of get_sha1_hex to parse_oid_hex to avoid
needing to specify constants.  Convert other hardcoded values to named
constants.  Finally, use the is_empty_tree_oid function instead of a
direct comparison against a fixed string.

Note that the odd computation with GIT_MAX_HEXSZ is due to the insertion
of a slash between every two hex digits in the path, plus one for the
terminating NUL.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",317,data/crawl/git/patch_206.diff
https://github.com/git/git/commit/f0733c13ed8b79bb10e240c4b4a6630784c7d258,08 May 2017,"mailinfo & mailsplit: check for EOF while parsing

While POSIX states that it is okay to pass EOF to isspace() (and it seems
to be implied that EOF should *not* be treated as whitespace), and also to
pass EOF to ungetc() (which seems to be intended to fail without buffering
the character), it is much better to handle these cases explicitly. Not
only does it reduce head-scratching (and helps static analysis avoid
reporting false positives), it also lets us handle files containing
nothing but whitespace by erroring out.

Reported via Coverity.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_207.diff
https://github.com/git/git/commit/5f3296c069bfe2872592f96b29bdcc8f0edd5eb8,08 May 2017,"difftool: address a couple of resource/memory leaks

This change plugs a couple of memory leaks and makes sure that the file
descriptor is closed in run_dir_diff().

Spotted by Coverity.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_208.diff
https://github.com/git/git/commit/3057da5ad51b3256a6f6b94d034e6a5571ce5ece,08 May 2017,"winansi: avoid use of uninitialized value

To initialize the foreground color attributes of ""plain text"", our ANSI
emulation tries to infer them from the currently attached console while
running the is_console() function. This function first tries to detect any
console attached to stdout, then it is called with stderr.

If neither stdout nor stderr has any console attached, it does not
actually matter what we use for ""plain text"" attributes, as we never need
to output any text to any console in that case.

However, after working on stdout and stderr, is_console() is called with
stdin, and it still tries to initialize the ""plain text"" attributes if
they had not been initialized earlier. In this case, we cannot detect any
attributes, and we used an uninitialized value for them.

Naturally, Coverity complained about this use case because it could not
reason about the code deeply enough to figure out that we do not even use
those attributes in that case.

Let's just initialize the value to 0 in that case, both to avoid future
Coverity reports, and to help catch future regressions in case anybody
changes the order of the is_console() calls (which would make the text
black on black).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_209.diff
https://github.com/git/git/commit/d7e6b6a8dcc8a98a4dcf6bc291f1e68b1acaecae,02 May 2017,"fast-import: convert internal structs to struct object_id

Convert struct tree_entry_ms, struct branch, struct tag, and struct
hash_list to use struct object_id by changing the definition and
applying the following semantic patch, plus the standard object_id
transforms:

@@
struct tree_entry_ms E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tree_entry_ms *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct branch E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct branch *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct tag E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tag *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct hash_list E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct hash_list *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/patch_210.diff
https://github.com/git/git/commit/b8607f35b180a00b3f3240ff7d26d034a83fb23a,02 May 2017,"bundle: convert to struct object_id

Convert the bundle code, plus the sole external user of struct
ref_list_entry, to use struct object_id.  Include cache.h from within
bundle.h to provide the definition.  Convert some of the hash parsing
code to use parse_oid_hex to avoid needing to hard-code constant values.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_211.diff
https://github.com/git/git/commit/511dca80cce868237b2b64f909ed83863fcf5455,02 May 2017,"builtin/name-rev: convert to struct object_id

Convert all the uses of unsigned char [20] to struct object_id.  Also,
convert some hard-coded integers into constants.

name_rev_line accepts a wide variety of free-form input and only
interprets 40-character hex values, passing through everything else.
Consequently, it is not a good candidate for parse_oid_hex, which is
much stricter.

This change is a prerequisite for converting parse_object.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_212.diff
https://github.com/git/git/commit/1b283377b18bc1e363005729b025a88b36084c4e,02 May 2017,"fetch-pack: convert to struct object_id

Convert all uses of unsigned char [20] to struct object_id.  Switch one
use of get_sha1_hex to parse_oid_hex to avoid the need for a constant.
This change is necessary in order to convert parse_object.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_213.diff
https://github.com/git/git/commit/aacc5c1a81c004efccff8075edb78acdf5f15264,02 May 2017,"submodule: refactor logic to determine changed submodules

There are currently two instances (fetch and push) where we want to
determine if submodules have changed given some revision specification.
These two instances don't use the same logic to generate a list of
changed submodules and as a result there is a fair amount of code
duplication.

This patch refactors these two code paths such that they both use the
same logic to generate a list of changed submodules.  This also makes it
easier for future callers to be able to reuse this logic as they only
need to create an argv_array with the revision specification to be using
during the revision walk.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/patch_214.diff
https://github.com/git/git/commit/9f41c7a6b3e3cc3ac4a739364400393fa2492880,28 Apr 2017,"read-cache: close index.lock in do_write_index

Teach do_write_index() to close the index.lock file
before getting the mtime and updating the istate.timestamp
fields.

On Windows, a file's mtime is not updated until the file is
closed.  On Linux, the mtime is set after the last flush.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_215.diff
https://github.com/git/git/commit/75177c8591aee23374c2ead9c9505ce989a8eec2,28 Apr 2017,"status: fix missing newline when comment chars are disabled

When git-status shows tracking data for the current branch
in the long format, we try to end the stanza with a blank
line. When status.displayCommentPrefix is true, we call
color_fprintf_ln() to do so. But when it's false, we call
the enigmatic:

  fputs("""", s->fp);

which does nothing at all! This is a bug from 7d7d68022
(silence a bunch of format-zero-length warnings,
2014-05-04). Prior to that, we called fprintf_ln() with an
empty string. Switching to fputs() meant we needed to
include the ""newline in the string, but we didn't.

So you see:

  On branch jk/status-tracking-newline
  Your branch is ahead of 'origin/master' by 1 commit.
  Changes not staged for commit:
          modified:  foo

  Untracked files:
     bar

whereas there should be a blank line before the ""Changes not
staged"" line.

The fix itself is a one-liner. But we never noticed this
bug because t7508 doesn't exercise the ahead/behind code at
all.  So let's configure an upstream during the initial
setup, which means that the code will be exercised as part
of all of the various invocations in that script. This makes
the diff rather noisy, but should give us good coverage.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_216.diff
https://github.com/git/git/commit/2e2bbb9624e10537560c3ac45ff6820ff773b3d6,27 Apr 2017,"am: simplify allocations in get_commit_info()

After we call split_ident_line(), we have several begin/end
pairs for various parts of the ident. We then copy each into
a strbuf to create a single string, and then detach that
string.  We can instead skip the strbuf entirely and just
duplicate the strings directly.

This is shorter, and it makes it more obvious that we are
not leaking the strbuf (we were not before, because every
code path either died or hit a strbuf_detach).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_217.diff
https://github.com/git/git/commit/1e65a982da0e9dd4eac440e82392a8b7c72b3def,27 Apr 2017,"date.c: abort if the system time cannot handle one of our timestamps

We are about to switch to a new data type for time stamps that is
definitely not smaller or equal, but larger or equal to time_t.

So before using the system functions to process or format timestamps,
let's make extra certain that they can handle what we feed them.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_218.diff
https://github.com/git/git/commit/dddbad728c93280fe54ef86699b6d70e2aab44d1,27 Apr 2017,"timestamp_t: a new data type for timestamps

Git's source code assumes that unsigned long is at least as precise as
time_t. Which is incorrect, and causes a lot of problems, in particular
where unsigned long is only 32-bit (notably on Windows, even in 64-bit
versions).

So let's just use a more appropriate data type instead. In preparation
for this, we introduce the new `timestamp_t` data type.

By necessity, this is a very, very large patch, as it has to replace all
timestamps' data type in one go.

As we will use a data type that is not necessarily identical to `time_t`,
we need to be very careful to use `time_t` whenever we interact with the
system functions, and `timestamp_t` everywhere else.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/patch_219.diff
https://github.com/git/git/commit/54fd3243daec7d59394f25846450d83c0012e57c,27 Apr 2017,"rebase -i: reread the todo list if `exec` touched it

In the scripted version of the interactive rebase, there was no internal
representation of the todo list; it was re-read before every command.
That allowed the hack that an `exec` command could append (or even
completely rewrite) the todo list.

This hack was broken by the partial conversion of the interactive rebase
to C, and this patch reinstates it.

We also add a small test to verify that this fix does not regress in the
future.

Signed-off-by: Stephen Hicks <sdh@google.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_220.diff
https://github.com/git/git/commit/d026a25657cbe15ceb6bcb5d5047a36a0a70b33e,25 Apr 2017,"refs: kill set_worktree_head_symref()

70999e9cec (branch -m: update all per-worktree HEADs - 2016-03-27)
added this function in order to update HEADs of all relevant
worktrees, when a branch is renamed.

It, as a public ref api, kind of breaks abstraction when it uses
internal functions of files backend. With the introduction of
refs_create_symref(), we can move back pretty close to the code before
70999e9cec, where create_symref() was used for updating HEAD.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_221.diff
https://github.com/git/git/commit/fa099d23227f88b5a1cd79c646551130d9b36e6d,25 Apr 2017,"worktree.c: kill parse_ref() in favor of refs_resolve_ref_unsafe()

The manual parsing code is replaced with a call to refs_resolve_ref_unsafe().
The manual parsing code must die because only refs/files-backend.c
should do that.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",165,data/crawl/git/patch_222.diff
https://github.com/git/git/commit/cb71f8bdb5a105cd5b66142b887989d9addc82d0,24 Apr 2017,"PRItime: introduce a new ""printf format"" for timestamps

Currently, Git's source code treats all timestamps as if they were
unsigned longs. Therefore, it is okay to write ""%lu"" when printing them.

There is a substantial problem with that, though: at least on Windows,
time_t is *larger* than unsigned long, and hence we will want to switch
away from the ill-specified `unsigned long` data type.

So let's introduce the pseudo format ""PRItime"" (currently simply being
defined to ""lu"") to make it easier to change the data type used for
timestamps.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_223.diff
https://github.com/git/git/commit/45afb1ca9c28855096c94926e5b16dfbcde7381f,21 Apr 2017,"run-command: block signals between fork and execve

Signal handlers of the parent firing in the forked child may
have unintended side effects.  Rather than auditing every signal
handler we have and will ever have, block signals while forking
and restore default signal handlers in the child before execve.

Restoring default signal handlers is required because
execve does not unblock signals, it only restores default
signal handlers.  So we must restore them with sigprocmask
before execve, leaving a window when signal handlers
we control can fire in the child.  Continue ignoring
ignored signals, but reset the rest to defaults.

Similarly, disable pthread cancellation to future-proof our code
in case we start using cancellation; as cancellation is
implemented with signals in glibc.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_224.diff
https://github.com/git/git/commit/79319b1949f0055bd42bac7fa398fca8c2f26116,21 Apr 2017,"run-command: eliminate calls to error handling functions in child

All of our standard error handling paths have the potential to
call malloc or take stdio locks; so we must avoid them inside
the forked child.

Instead, the child only writes an 8 byte struct atomically to
the parent through the notification pipe to propagate an error.
All user-visible error reporting happens from the parent;
even avoiding functions like atexit(3) and exit(3).

Helped-by: Eric Wong <e@80x24.org>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/patch_225.diff
https://github.com/git/git/commit/db015a284e74b93db9184d39eb0be749e631242d,21 Apr 2017,"run-command: don't die in child when duping /dev/null

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_226.diff
https://github.com/git/git/commit/3967e25be11ab96ced71f16b9f082de270a518db,21 Apr 2017,"run-command: prepare command before forking

According to [1] we need to only call async-signal-safe operations between fork
and exec.  Using malloc to build the argv array isn't async-signal-safe.

In order to avoid allocation between 'fork()' and 'exec()' prepare the
argv array used in the exec call prior to forking the process.

[1] http://pubs.opengroup.org/onlinepubs/009695399/functions/fork.html

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_227.diff
https://github.com/git/git/commit/f2d48994dc11ba367e92c38c8025c3354418145a,19 Apr 2017,"submodule.c: submodule_move_head works with broken submodules

Early on in submodule_move_head just after the check if the submodule is
initialized, we need to check if the submodule is populated correctly.

If the submodule is initialized but doesn't look like it is populated,
this is a red flag and can indicate multiple sorts of failures:
(1) The submodule may be recorded at an object name, that is missing.
(2) The submodule '.git' file link may be broken and it is not pointing
    at a repository.

In both cases we want to complain to the user in the non-forced mode,
and in the forced mode ignoring the old state and just moving the
submodule into its new state with a fixed '.git' file link.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_228.diff
https://github.com/git/git/commit/8e2c7bef034f0712c6db776974ee4b40f1150a56,18 Apr 2017,"fetch-pack: show clearer error message upon ERR

Currently, fetch-pack prints a confusing error message (""expected
ACK/NAK"") when the server it's communicating with sends a pkt-line
starting with ""ERR"".  Replace it with a less confusing error message.

Also update the documentation describing the fetch-pack/upload-pack
protocol (pack-protocol.txt) to indicate that ""ERR"" can be sent in the
place of ""ACK"" or ""NAK"". In practice, this has been done for quite some
time by other Git implementations (e.g. JGit sends ""want $id not valid"")
and by Git itself (since commit bdb31ea: ""upload-pack: report ""not our
ref"" to client"", 2017-02-23) whenever a ""want"" line references an object
that it does not have. (This is uncommon, but can happen if a repository
is garbage-collected during a negotiation.)

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_229.diff
https://github.com/git/git/commit/be686f03e0f4c4f14f1d4ae9b1b35836168a0a4b,18 Apr 2017,"files_for_each_reflog_ent_reverse(): close stream and free strbuf on error

Exit the loop orderly through the cleanup code, instead of dashing out
with logfp still open and sb leaking.

Found with Cppcheck.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Reviewed-by: Jeff King <peff@peff.net>
Reviewed-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_230.diff
https://github.com/git/git/commit/50c2d8555bbc5b29625452fbcc92d4e3395e7366,17 Apr 2017,"files_pack_refs(): use reference iteration

Use reference iteration rather than `do_for_each_entry_in_dir()` in
the definition of `files_pack_refs()`. This makes the code shorter and
easier to follow, because the logic can be inline rather than spread
between the main function and a callback function, and it removes the
need to use `pack_refs_cb_data` to preserve intermediate state.

This removes the last callers of `entry_resolves_to_object()` and
`get_loose_ref_dir()`, so delete those functions.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/patch_231.diff
https://github.com/git/git/commit/1710fbafb699a651243ea1af9d21a8b571a66965,17 Apr 2017,"commit_packed_refs(): use reference iteration

Use reference iteration rather than do_for_each_entry_in_dir() in the
definition of commit_packed_refs().

Note that an internal consistency check that was previously done in
`write_packed_entry_fn()` is not there anymore. This is actually an
improvement:

The old error message was emitted when there is an entry in the
packed-ref cache that is not `REF_KNOWS_PEELED`, and when we attempted
to peel the reference, the result was `PEEL_INVALID`,
`PEEL_IS_SYMREF`, or `PEEL_BROKEN`. Since a packed ref cannot be a
symref, `PEEL_IS_SYMREF` and `PEEL_BROKEN` can be ruled out. So we're
left with `PEEL_INVALID`.

An entry without `REF_KNOWS_PEELED` can get into the packed-refs cache
in the following two ways:

* The reference was read from a `packed-refs` file that didn't have
  the `fully-peeled` attribute. In that case, we *don't want* to emit
  an error, because the broken value is presumably a stale value of
  the reference that is now masked by a loose version of the same
  reference (which we just don't happen to be packing this time). This
  is a perfectly legitimate situation and doesn't indicate that the
  repository is corrupt. The old code incorrectly emits an error
  message in this case. (It was probably never reported as a bug
  because this scenario is rare.)

* The reference was a loose reference that was just added to the
  packed ref cache by `files_packed_refs()` via
  `pack_if_possible_fn()` in preparation for being packed. The latter
  function refuses to pack a reference for which
  `entry_resolves_to_object()` returns false, and otherwise calls
  `peel_entry()` itself and checks the return value. So an entry added
  this way should always have `REF_KNOWS_PEELED` and shouldn't trigger
  the error message in either the old code or the new.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_232.diff
https://github.com/git/git/commit/df30875987329bb46e54ec7be0eb29c33702de3a,17 Apr 2017,"ref-cache: use a callback function to fill the cache

It is a leveling violation for `ref_cache` to know about
`files_ref_store` or that it should call `read_loose_refs()` to lazily
fill cache directories. So instead, have its constructor take as an
argument a callback function that it should use for lazy-filling, and
change `files_ref_store` to supply a pointer to function
`read_loose_refs` (renamed to `loose_fill_ref_dir`) when creating the
ref cache for its loose refs.

This means that we can generify the type of the back-pointer in
`struct ref_cache` from `files_ref_store` to `ref_store`.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_233.diff
https://github.com/git/git/commit/958f964691a250d9a7173f1c0a4c03fd9e71e2aa,17 Apr 2017,"refs: split `ref_cache` code into separate files

The `ref_cache` code is currently too tightly coupled to
`files-backend`, making the code harder to understand and making it
awkward for new code to use `ref_cache` (as we indeed have planned).
Start loosening that coupling by splitting `ref_cache` into a separate
module.

This commit moves code, adds declarations, and changes the visibility
of some functions, but doesn't change any code.

The modules are still too tightly coupled, but the situation will be
improved in subsequent commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1500,data/crawl/git/patch_234.diff
https://github.com/git/git/commit/b05855b5bcaf07fe8a636e621bd9d12d51963b5a,17 Apr 2017,"refs_verify_refname_available(): implement once for all backends

It turns out that we can now implement
`refs_verify_refname_available()` based on the other virtual
functions, so there is no need for it to be defined at the backend
level. Instead, define it once in `refs.c` and remove the
`files_backend` definition.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_235.diff
https://github.com/git/git/commit/78871bf46f18cd92e744a993c1d6422ff30d8bca,17 Apr 2017,"git-p4: add read_pipe_text() internal function

The existing read_pipe() function returns an empty string on
error, but also returns an empty string if the command returns
an empty string.

This leads to ugly constructions trying to detect error cases.

Add read_pipe_text() which just returns None on error.

Signed-off-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_236.diff
https://github.com/git/git/commit/0c064d907b5d96cb4f68c9f1f3214b115d43436e,17 Apr 2017,"refs.c: make submodule ref store hashmap generic

This removes the ""submodule"" from submodule_hash_entry and other
function names. The goal is to reuse the same code and data structure
for other ref store types. The first one is worktree ref stores.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_237.diff
https://github.com/git/git/commit/a6db3fbb6e4ec11695e2a3af8bc2cb9119cb1941,15 Apr 2017,"read-cache: add strcmp_offset function

Add strcmp_offset() function to also return the offset of the
first change.

Add unit test and helper to verify.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_238.diff
https://github.com/git/git/commit/80f2a6097c403234892b884a21810411e5837853,14 Apr 2017,"t/helper: add test-ref-store to test ref-store functions

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",279,data/crawl/git/patch_239.diff
https://github.com/git/git/commit/9e7ec634a130535982e9bc63d65c2fe8c076a662,14 Apr 2017,"files-backend: replace submodule_allowed check in files_downcast()

files-backend.c is unlearning submodules. Instead of having a specific
check for submodules to see what operation is allowed, files backend
now takes a set of flags at init. Each operation will check if the
required flags is present before performing.

For now we have four flags: read, write and odb access. Main ref store
has all flags, obviously, while submodule stores are read-only and have
access to odb (*).

The ""main"" flag stays because many functions in the backend calls
frontend ones without a ref store, so these functions always target the
main ref store. Ideally the flag should be gone after ref-store-aware
api is in place and used by backends.

(*) Submodule code needs for_each_ref. Try take REF_STORE_ODB flag
out. At least t3404 would fail. The ""have access to odb"" in submodule is
a bit hacky since we don't know from he whether add_submodule_odb() has
been called.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_240.diff
https://github.com/git/git/commit/37ee680d9b90fe4c4fc5be4e14f17baf49f6ce59,14 Apr 2017,"http.postbuffer: allow full range of ssize_t values

Unfortunately, in order to push some large repos where a server does
not support chunked encoding, the http postbuffer must sometimes
exceed two gigabytes.  On a 64-bit system, this is OK: we just malloc
a larger buffer.

This means that we need to use CURLOPT_POSTFIELDSIZE_LARGE to set the
buffer size.

Signed-off-by: David Turner <dturner@twosigma.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_241.diff
https://github.com/git/git/commit/9af7ec30cbd4b4ce9e071cd0d54297101f98b426,14 Apr 2017,"submodule--helper: fix typo in is_active error message

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_242.diff
https://github.com/git/git/commit/35ad44cbd813f2f25fac002942c500855220718f,14 Apr 2017,"submodule.c: add missing ' in error messages

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Acked-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_243.diff
https://github.com/git/git/commit/ae51d91105981888f58ad21825b4ef0c540032e3,13 Apr 2017,"http: fix the silent ignoring of proxy misconfiguraion

Earlier, the whole http.proxy option string was passed to curl without
any preprocessing so curl could complain about the invalid proxy
configuration.

After the commit 372370f167 (""http: use credential API to handle proxy
authentication"", 2016-01-26), if the user specified an invalid HTTP
proxy option in the configuration, then the option parsing silently
fails and NULL will be passed to curl as a proxy. This forces curl to
fall back to detecting the proxy configuration from the environment,
causing the http.proxy option ignoring.

Fix this issue by checking the proxy option parsing result. If parsing
failed then print an error message and die. Such behaviour allows the
user to quickly figure the proxy misconfiguration and correct it.

Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Sergey Ryazanov <ryazanov.s.a@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_244.diff
https://github.com/git/git/commit/e3482ccf27b8278289f899cbb294696389a9e1c8,13 Apr 2017,"test-online-cpus: helper to return cpu count

Created helper executable to print the value of online_cpus()
allowing multi-threaded tests to be skipped when appropriate.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_245.diff
https://github.com/git/git/commit/06bf4ad1db92c32af38e16d9b7f928edbd647780,11 Apr 2017,"push: propagate remote and refspec with --recurse-submodules

Teach ""push --recurse-submodules"" to propagate, if given a name as remote, the
provided remote and refspec recursively to the pushes performed in the
submodules. The push will therefore only succeed if all submodules have a
remote with such a name configured.

Note that ""push --recurse-submodules"" with a path or URL as remote will not
propagate the remote or refspec and instead use the default remote and refspec
configured in the submodule, preserving the current behavior.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/patch_246.diff
https://github.com/git/git/commit/93481a6b89be41086997ecaf9454f0c0bf6a961e,11 Apr 2017,"submodule--helper: add push-check subcommand

Add the 'push-check' subcommand to submodule--helper which is used to
check if the provided remote and refspec can be used as part of a push
operation in the submodule.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_247.diff
https://github.com/git/git/commit/51054177b312ce0795f2866d4c3aed246eeccea9,01 Apr 2017,"index-pack: detect local corruption in collision check

When we notice that we have a local copy of an incoming
object, we compare the two objects to make sure we haven't
found a collision. Before we get to the actual object
bytes, though, we compare the type and size from
sha1_object_info().

If our local object is corrupted, then the type will be
OBJ_BAD, which obviously will not match the incoming type,
and we'll report ""SHA1 COLLISION FOUND"" (with capital
letters and everything). This is confusing, as the problem
is not a collision but rather local corruption. We should
report that instead (just like we do if reading the rest of
the object content fails a few lines later).

Note that we _could_ just ignore the error and mark it as a
non-collision. That would let you ""git fetch"" to replace a
corrupted object. But it's not a very reliable method for
repairing a repository. The earlier want/have negotiation
tries to get the other side to omit objects we already have,
and it would not realize that we are ""missing"" this
corrupted object. So we're better off complaining loudly
when we see corruption, and letting the user take more
drastic measures to repair (like making a full clone
elsewhere and copying the pack into place).

Note that the test sets transfer.unpackLimit in the
receiving repository so that we use index-pack (which is
what does the collision check). Normally for such a small
push we'd use unpack-objects, which would simply try to
write the loose object, and discard the new one when we see
that there's already an old one.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_248.diff
https://github.com/git/git/commit/e239dabb1465d3ff927840b4fff15150a2170b4e,31 Mar 2017,"Documentation: update and rename api-sha1-array.txt

Since the structure and functions have changed names, update the code
examples and the documentation.  Rename the file to match the new name
of the API.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_249.diff
https://github.com/git/git/commit/910650d2f8755359ab7b1f0e2a2d576c06a68091,31 Mar 2017,"Rename sha1_array to oid_array

Since this structure handles an array of object IDs, rename it to struct
oid_array.  Also rename the accessor functions and the initialization
constant.

This commit was produced mechanically by providing non-Documentation
files to the following Perl one-liners:

    perl -pi -E 's/struct sha1_array/struct oid_array/g'
    perl -pi -E 's/\bsha1_array_/oid_array_/g'
    perl -pi -E 's/SHA1_ARRAY_INIT/OID_ARRAY_INIT/g'

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",310,data/crawl/git/patch_250.diff
https://github.com/git/git/commit/5d3206d5010423b3bbf479e32567d0fddc7095e0,31 Mar 2017,"Convert sha1_array_lookup to take struct object_id

Convert this function by changing the declaration and definition and
applying the following semantic patch to update the callers:

@@
expression E1, E2;
@@
- sha1_array_lookup(E1, E2.hash)
+ sha1_array_lookup(E1, &E2)

@@
expression E1, E2;
@@
- sha1_array_lookup(E1, E2->hash)
+ sha1_array_lookup(E1, E2)

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_251.diff
https://github.com/git/git/commit/07af88913662f1179ba34b92370a6df24263ae5f,30 Mar 2017,"gc: replace local buffer with git_path

We probe the ""17/"" loose object directory for auto-gc, and
use a local buffer to format the path. We can just use
git_path() for this. It handles paths of any length
(reducing our error handling). And because we feed the
result straight to a system call, we can just use the static
variant.

Note that git_path also knows the string ""objects/"" is
special, and will replace it with git_object_directory()
when necessary.

Another alternative would be to use sha1_file_name() for the
pretend object ""170000..."", but that ends up being more
hassle for no gain, as we have to truncate the final path
component.

Signed-off-by: Jeff King <peff@peff.net>",8,data/crawl/git/patch_252.diff
https://github.com/git/git/commit/8c5acfb923a94dc746baa4eef8454cb4c4f18270,30 Mar 2017,"transport-helper: replace checked snprintf with xsnprintf

We can use xsnprintf to do our truncation check with less
code. The error message isn't as specific, but the point is
that this isn't supposed to trigger in the first place
(because our buffer is big enough to handle any int).

Signed-off-by: Jeff King <peff@peff.net>",5,data/crawl/git/patch_253.diff
https://github.com/git/git/commit/6cd4a8982dbde0b6fee26faba2873c475af50a28,30 Mar 2017,"avoid using mksnpath for refs

Like the previous commit, we'd like to avoid the assumption
that refs fit into PATH_MAX-sized buffers. These callsites
have an extra twist, though: they write the refnames using
mksnpath. This does two things beyond a regular snprintf:

  1. It quietly writes ""/bad-path/"" when truncation occurs.
     This saves the caller having to check the error code,
     but if you aren't actually feeding the result to a
     system call (and we aren't here), it's questionable.

  2. It calls cleanup_path(), which removes leading
     instances of ""./"".  That's questionable when dealing
     with refnames, as we could silently canonicalize a
     syntactically bogus refname into a valid one.

Let's convert each case to use a strbuf. This is preferable
to xstrfmt() because we can reuse the same buffer as we
loop.

Signed-off-by: Jeff King <peff@peff.net>",44,data/crawl/git/patch_254.diff
https://github.com/git/git/commit/7f897b6f176319ec0f490d286c3fee11187d7095,30 Mar 2017,"avoid using fixed PATH_MAX buffers for refs

Many functions which handle refs use a PATH_MAX-sized buffer
to do so. This is mostly reasonable as we have to write
loose refs into the filesystem, and at least on Linux the 4K
PATH_MAX is big enough that nobody would care. But:

  1. The static PATH_MAX is not always the filesystem limit.

  2. On other platforms, PATH_MAX may be much smaller.

  3. As we move to alternate ref storage, we won't be bound
     by filesystem limits.

Let's convert these to heap buffers so we don't have to
worry about truncation or size limits.

We may want to eventually constrain ref lengths for sanity
and to prevent malicious names, but we should do so
consistently across all platforms, and in a central place
(like the ref code).

Signed-off-by: Jeff King <peff@peff.net>",80,data/crawl/git/patch_255.diff
https://github.com/git/git/commit/b0ceab98d72a4861a8cea061487169fb5468b736,30 Mar 2017,"tag: use strbuf to format tag header

We format the tag header into a fixed 1024-byte buffer. But
since the tag-name and tagger ident can be arbitrarily
large, we may unceremoniously die with ""tag header too big"".
Let's just use a strbuf instead.

Note that it looks at first glance like we can just format
this directly into the ""buf"" strbuf where it will ultimately
go. But that buffer may already contain the tag message, and
we have no easy way to prepend formatted data to a strbuf
(we can only splice in an already-generated buffer). This
isn't a performance-critical path, so going through an extra
buffer isn't a big deal.

Signed-off-by: Jeff King <peff@peff.net>",27,data/crawl/git/patch_256.diff
https://github.com/git/git/commit/b14f27f91770e0f99f64135348977a0ce1c7993a,30 Mar 2017,"Tenth batch for 2.13

Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_257.diff
https://github.com/git/git/commit/c105f563d1b8894af8a7bee68852e45831d55224,30 Mar 2017,"update-index: fix xgetcwd() related memory leak

As xgetcwd() returns an allocated buffer, we should free this
buffer when we don't need it any more.

This was found by Coverity.

Reported-by: Jeff King <peff@peff.net>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_258.diff
https://github.com/git/git/commit/40069d6e3a195c8c2414ea60ed75b84ae47f88a1,30 Mar 2017,"submodule.c: correctly handle nested submodules in is_submodule_modified

Suppose I have a superproject 'super', with two submodules 'super/sub'
and 'super/sub1'. 'super/sub' itself contains a submodule
'super/sub/subsub'. Now suppose I run, from within 'super':

    echo hi >sub/subsub/stray-file
    echo hi >sub1/stray-file

Currently we get would see the following output in git-status:

    git status --short
     m sub
     ? sub1

With this patch applied, the untracked file in the nested submodule is
displayed as an untracked file on the 'super' level as well.

    git status --short
     ? sub
     ? sub1

This doesn't change the output of 'git status --porcelain=1' for nested
submodules, because its output is always ' M' for either untracked files
or local modifications no matter the nesting level of the submodule.

'git status --porcelain=2' is affected by this change in a nested
submodule, though. Without this patch it would report the direct submodule
as modified and having no untracked files. With this patch it would report
untracked files. Chalk this up as a bug fix.

This bug fix also affects the default output (non-short, non-porcelain)
of git-status, which is not tested here.

Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_259.diff
https://github.com/git/git/commit/dd6962dd731e6ec679f772d2bb14657f79062580,29 Mar 2017,"short status: improve reporting for submodule changes

If I add an untracked file to a submodule or modify a tracked file,
currently ""git status --short"" treats the change in the same way as
changes to the current HEAD of the submodule:

        $ git clone --quiet --recurse-submodules https://gerrit.googlesource.com/gerrit
        $ echo hello >gerrit/plugins/replication/stray-file
        $ sed -i -e 's/.*//' gerrit/plugins/replication/.mailmap
        $ git -C gerrit status --short
         M plugins/replication

This is by analogy with ordinary files, where ""M"" represents a change
that has not been added yet to the index.  But this change cannot be
added to the index without entering the submodule, ""git add""-ing it,
and running ""git commit"", so the analogy is counterproductive.

Introduce new status letters "" ?"" and "" m"" for this.  These are similar
to the existing ""??"" and "" M"" but mean that the submodule (not the
parent project) has new untracked files and modified files, respectively.
The user can use ""git add"" and ""git commit"" from within the submodule to
add them.

Changes to the submodule's HEAD commit can be recorded in the index with
a plain ""git add -u"" and are shown with "" M"", like today.

To avoid excessive clutter, show at most one of "" ?"", "" m"", and "" M"" for
the submodule.  They represent increasing levels of change --- the last
one that applies is shown (e.g., "" m"" if there are both modified files
and untracked files in the submodule, or "" M"" if the submodule's HEAD
has been modified and it has untracked files).

While making these changes, we need to make sure to not break porcelain
level 1, which shares code with ""status --short"".  We only change
""git status --short"".

Non-short ""git status"" and ""git status --porcelain=2"" already handle
these cases by showing more detail:

        $ git -C gerrit status --porcelain=2
        1 .M S.MU 160000 160000 160000 305c864db28eb0c77c8499bc04c87de3f849cf3c 305c864db28eb0c77c8499bc04c87de3f849cf3c plugins/replication
        $ git -C gerrit status
[...]
        modified:   plugins/replication (modified content, untracked content)

Scripts caring about these distinctions should use --porcelain=2.

Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",163,data/crawl/git/patch_260.diff
https://github.com/git/git/commit/892e723afd2b5696e4d75280e730bf9f1ea92329,28 Mar 2017,"do not check odb_mkstemp return value for errors

The odb_mkstemp function does not return an error; it dies
on failure instead. But many of its callers compare the
resulting descriptor against -1 and die themselves.

Mostly this is just pointless, but it does raise a question
when looking at the callers: if they show the results of the
""template"" buffer after a failure, what's in it? The answer
is: it doesn't matter, because it cannot happen.

So let's make that clear by removing the bogus error checks.
In bitmap_writer_finish(), we can drop the error-handling
code entirely. In the other two cases, it's shared with the
open() in another code path; we can just move the
error-check next to that open() call.

And while we're at it, let's flesh out the function's
docstring a bit to make the error behavior clear.

Signed-off-by: Jeff King <peff@peff.net>",18,data/crawl/git/patch_261.diff
https://github.com/git/git/commit/ee3051bd2307cdc0145aa9ed9dcacb8acfc08c40,28 Mar 2017,"sha1-array: convert internal storage for struct sha1_array to object_id

Make the internal storage for struct sha1_array use an array of struct
object_id internally.  Update the users of this struct which inspect its
internals.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_262.diff
https://github.com/git/git/commit/57836f10ad47c2b2c3b94502024758871841091f,28 Mar 2017,"test-sha1-array: convert most code to struct object_id

This helper is very small, so convert the entire thing.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_263.diff
https://github.com/git/git/commit/646c3bd1ad59ab4aea2718d89c8eb9ce8cfa83bf,27 Mar 2017,"describe: localize debug output fully

git describe --debug localizes all debug messages but not the terms
head, lightweight, annotated that it outputs for the candidates.
Localize them, too.

Signed-off-by: Michael J Gruber <git@grubix.eu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_264.diff
https://github.com/git/git/commit/5d0bc90e5de37c708f0856aef2c7b353a9d5030b,27 Mar 2017,"refs: move submodule code out of files-backend.c

files-backend is now initialized with a $GIT_DIR. Converting a submodule
path to where real submodule gitdir is located is done in get_ref_store().

This gives a slight performance improvement for submodules since we
don't convert submodule path to gitdir at every backend call like
before. We pay that once at ref-store creation.

More cleanup in files_downcast() and files_assert_main_repository()
follows shortly. It's separate to keep noises from this patch.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_265.diff
https://github.com/git/git/commit/378dc9103a6b36ecac5f63eb0d5a87f573081094,27 Mar 2017,"refs.c: kill register_ref_store(), add register_submodule_ref_store()

This is the last function in this code (besides public API) that takes
submodule argument and handles both main/submodule cases. Break it down,
move main store registration in get_main_ref_store() and keep the rest
in register_submodule_ref_store().

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_266.diff
https://github.com/git/git/commit/f57f37e2e1bf11ab4cdfd221ad47e961ba9353a0,27 Mar 2017,"files-backend: remove the use of git_path()

Given $GIT_DIR and $GIT_COMMON_DIR, files-backend is now in charge of
deciding what goes where (*). The end goal is to pass $GIT_DIR only. A
refs ""view"" of a linked worktree is a logical ref store that combines
two files backends together.

(*) Not entirely true since strbuf_git_path_submodule() still does path
translation underneath. But that's for another patch.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_267.diff
https://github.com/git/git/commit/a5c1efd693a09bd7d058e1370869e061f94b61ed,27 Mar 2017,"files-backend: move ""logs/"" out of TMP_RENAMED_LOG

This makes reflog path building consistent, always in the form of

    strbuf_git_path(sb, ""logs/%s"", refname);

It reduces the mental workload a bit in the next patch when that
function call is converted.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_268.diff
https://github.com/git/git/commit/e9dcc3054fb0fdf0faafd0ef57a238f4a692fb23,27 Mar 2017,"files-backend: convert git_path() to strbuf_git_path()

git_path() and friends are going to be killed in files-backend.c in near
future. And because there's a risk with overwriting buffer in
git_path(), let's convert them all to strbuf_git_path(). We'll have
easier time killing/converting strbuf_git_path() then because we won't
have to worry about memory management again.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",130,data/crawl/git/patch_269.diff
https://github.com/git/git/commit/0a3f07d6c0ce8ee3fb315d582a0eaaba56fb7873,27 Mar 2017,"files-backend: make sure files_rename_ref() always reach the end

This is a no-op patch. It prepares the function so that we can release
resources (to be added later in this function) before we return.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_270.diff
https://github.com/git/git/commit/5c896f7c3ec69f017d1e1be4164d558918f3ae4c,27 Mar 2017,"submodule.c: stricter checking for submodules in is_submodule_modified

By having a stricter check in the superproject we catch errors earlier,
instead of spawning a child process to tell us.

Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_271.diff
https://github.com/git/git/commit/fcecf0b968b5e262200426ccf1d0b82495c261fe,27 Mar 2017,"submodule.c: port is_submodule_modified to use porcelain 2

Migrate 'is_submodule_modified' to the new porcelain format of
git-status. This conversion attempts to convert faithfully, i.e.
the behavior ought to be exactly the same.

As the output in the parsing only distinguishes between untracked files
and the rest, this is easy to port to the new format, as we only
need to identify untracked files and the rest is handled in the ""else""
case.

untracked files are indicated by only a single question mark instead of
two question marks, so the conversion is easy.

Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_272.diff
https://github.com/git/git/commit/7202a6fa8773fdcf3f374625def3c15276250b67,24 Mar 2017,"encode_in_pack_object_header: respect output buffer length

The encode_in_pack_object_header() writes a variable-length
header to an output buffer, but it doesn't actually know
long the buffer is. At first glance, this looks like it
might be possible to overflow.

In practice, this is probably impossible. The smallest
buffer we use is 10 bytes, which would hold the header for
an object up to 2^67 bytes. Obviously we're not likely to
see such an object, but we might worry that an object could
lie about its size (causing us to overflow before we realize
it does not actually have that many bytes). But the argument
is passed as a uintmax_t. Even on systems that have __int128
available, uintmax_t is typically restricted to 64-bit by
the ABI.

So it's unlikely that a system exists where this could be
exploited. Still, it's easy enough to use a normal out/len
pair and make sure we don't write too far. That protects the
hypothetical 128-bit system, makes it harder for callers to
accidentally specify a too-small buffer, and makes the
resulting code easier to audit.

Note that the one caller in fast-import tried to catch such
a case, but did so _after_ the call (at which point we'd
have already overflowed!). This check can now go away.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_273.diff
https://github.com/git/git/commit/98718242cfd18f106dfcd7663282fb9906fd38a5,24 Mar 2017,"fast-import: use xsnprintf for formatting headers

The stream_blob() function checks the return value of
snprintf and dies. This is more simply done with
xsnprintf (and matches the similar call in store_object).

The message the user would get is less specific, but since
the point is that this _shouldn't_ ever happen, that's OK.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_274.diff
https://github.com/git/git/commit/ac3f5a346860b824e083c5d305757c3260565475,24 Mar 2017,"ref-filter: add --no-contains option to tag/branch/for-each-ref

Change the tag, branch & for-each-ref commands to have a --no-contains
option in addition to their longstanding --contains options.

This allows for finding the last-good rollout tag given a known-bad
<commit>. Given a hypothetically bad commit cf5c7253e0, the git
version to revert to can be found with this hacky two-liner:

    (git tag -l 'v[0-9]*'; git tag -l --contains cf5c7253e0 'v[0-9]*') |
        sort | uniq -c | grep -E '^ *1 ' | awk '{print $2}' | tail -n 10

With this new --no-contains option the same can be achieved with:

    git tag -l --no-contains cf5c7253e0 'v[0-9]*' | sort | tail -n 10

As the filtering machinery is shared between the tag, branch &
for-each-ref commands, implement this for those commands too. A
practical use for this with ""branch"" is e.g. finding branches which
were branched off between v2.8.0 and v2.10.0:

    git branch --contains v2.8.0 --no-contains v2.10.0

The ""describe"" command also has a --contains option, but its semantics
are unrelated to what tag/branch/for-each-ref use --contains for. A
--no-contains option for ""describe"" wouldn't make any sense, other
than being exactly equivalent to not supplying --contains at all,
which would be confusing at best.

Add a --without option to ""tag"" as an alias for --no-contains, for
consistency with --with and --contains.  The --with option is
undocumented, and possibly the only user of it is
Junio (<xmqqefy71iej.fsf@gitster.mtv.corp.google.com>). But it's
trivial to support, so let's do that.

The additions to the the test suite are inverse copies of the
corresponding --contains tests. With this change --no-contains for
tag, branch & for-each-ref is just as well tested as the existing
--contains option.

In addition to those tests, add a test for ""tag"" which asserts that
--no-contains won't find tree/blob tags, which is slightly
unintuitive, but consistent with how --contains works & is documented.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/patch_275.diff
https://github.com/git/git/commit/6a338149f623f493525324bc0f8d7bb9257cb840,24 Mar 2017,"tag: implicitly supply --list given another list-like option

Change the ""tag"" command to implicitly turn on its --list mode when
provided with a list-like option such as --contains, --points-at etc.

This is for consistency with how ""branch"" works. When ""branch"" is
given a list-like option, such as --contains, it implicitly provides
--list. Before this change ""tag"" would error out on those sorts of
invocations. I.e. while both of these worked for ""branch"":

    git branch --contains v2.8.0 <pattern>
    git branch --list --contains v2.8.0 <pattern>

Only the latter form worked for ""tag"":

    git tag --contains v2.8.0 '*rc*'
    git tag --list --contains v2.8.0 '*rc*'

Now ""tag"", like ""branch"", will implicitly supply --list when a
list-like option is provided, and no other conflicting non-list
options (such as -d) are present on the command-line.

Spelunking through the history via:

    git log --reverse -p -G'only allowed with' -- '*builtin*tag*c'

Reveals that there was no good reason for not allowing this in the
first place. The --contains option added in 32c35cfb1e (""git-tag: Add
--contains option"", 2009-01-26) made this an error. All the other
subsequent list-like options that were added copied its pattern of
making this usage an error.

The only tests that break as a result of this change are tests that
were explicitly checking that this ""branch-like"" usage wasn't
permitted. Change those failing tests to check that this invocation
mode is permitted, add extra tests for the list-like options we
weren't testing, and tests to ensure that e.g. we don't toggle the
list mode in the presence of other conflicting non-list options.

With this change errors messages such as ""--contains option is only
allowed with -l"" don't make sense anymore, since options like
--contain turn on -l. Instead we error out when list-like options such
as --contain are used in conjunction with conflicting options such as
-d or -v.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/patch_276.diff
https://github.com/git/git/commit/ea194895326d10f6e255eee05ac25ab5ae096dd9,24 Mar 2017,"name-hash: add test-lazy-init-name-hash

Add t/helper/test-lazy-init-name-hash.c test code
to demonstrate performance times for lazy_init_name_hash()
using the original single-threaded and the new multi-threaded
code paths.

Includes a --dump option to dump the created hashmaps to
stdout.  You can use this to run both code paths and
confirm that they generate the same hashmaps.

Includes a --analyze option to analyze performance of both
code paths over a range of index sizes to help you find a
lower bound for the LAZY_THREAD_COST in name-hash.c.
For example, passing ""-a 4000"" will set ""istate.cache_nr""
to 4000 and then try the multi-threaded code -- probably
giving 2 threads with 2000 entries each.  It will then
run both the single-threaded (1x4000) and the multi-threaded
(2x2000) and compare the times.  It will then repeat the
test with 8000, 12000, and etc. so that you can see the
cross over.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",266,data/crawl/git/patch_277.diff
https://github.com/git/git/commit/846df809bc671d6487fa2be7550e3ed2b62e62f9,24 Mar 2017,"name-hash: perf improvement for lazy_init_name_hash

Improve performance of lazy_init_name_hash() when
ignore_case is set.  Teach name-hash to build the
istate.name_hash and istate.dir_hash simultaneously
using a forward-diving technique on the pathname
of the index_entry, rather than adding name_hash
entries and then searching backwards in the pathname
for parent directories.

This borrows algorithm ideas from clear_ce_flags_{1,dir}.

Multiple threads are used with the new algorithm to
speed hashmap construction.

This new code path is only used when threads are present
(a compiler settings) and when the index is large enough
to warrant the pthread complexity.

The code in clear_ce_flags_dir() uses a linear search to
find the adjacent index entries with the same prefix; a
binary search is used here handle_range_dir() to further
speed things up.

The size of LAZY_THREAD_COST was determined from rough
analysis using:
    t/helper/test-lazy-init-name-hash --analyze

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",492,data/crawl/git/patch_278.diff
https://github.com/git/git/commit/eb7b9749f2b7bc0d0e0ac2c68d98cf1b8f4a2761,22 Mar 2017,"send-pack: send push options correctly in stateless-rpc case

""git send-pack --stateless-rpc"" puts each request in a sequence of pkt-lines
followed by a flush-pkt. The push option code forgot about this and sends push
options and their terminating delimiter as ordinary pkt-lines that get their
length header stripped off by remote-curl before being sent to the server.

The result is multiple malformed requests, which the server rejects.

Fortunately send-pack --stateless-rpc already is aware of this ""pkt-line within
pkt-line"" framing for the update commands that precede push options. Handle
push options the same way.

Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_279.diff
https://github.com/git/git/commit/57f82f4f6037fd8243f44fd8b5f553e444d13f2c,22 Mar 2017,"t/README: change ""Inside <X> part"" to ""Inside the <X> part""

Change the mention of ""Inside the <script> part, the standard
output..."" to use the definite article, which makes more sense in this
context.

This changes documentation I originally added back in commit
20873f45e7 (""t/README: Document the do's and don'ts of tests"",
2010-07-02).

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_280.diff
https://github.com/git/git/commit/b0176ce6b5d954a747dc4d0c5a8593ed576714c4,22 Mar 2017,"builtin/describe: introduce --broken flag

git-describe tells you the version number you're at, or errors out, e.g.
when you run it outside of a repository, which may happen when downloading
a tar ball instead of using git to obtain the source code.

To keep this property of only erroring out, when not in a repository,
severe (submodule) errors must be downgraded to reporting them gently
instead of having git-describe error out completely.

To achieve that a flag '--broken' is introduced, which is in the same
vein as '--dirty' but uses an actual child process to check for dirtiness.
When that child dies unexpectedly, we'll append '-broken' instead of
'-dirty'.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_281.diff
https://github.com/git/git/commit/17d6c744dc0d5ed4cd0f228da14239ea2654f05b,21 Mar 2017,"ref-filter: make combining --merged & --no-merged an error

Change the behavior of specifying --merged & --no-merged to be an
error, instead of silently picking the option that was provided last.

Subsequent changes of mine add a --no-contains option in addition to
the existing --contains. Providing both of those isn't an error, and
has actual meaning.

Making its cousins have different behavior in this regard would be
confusing to the user, especially since we'd be silently disregarding
some of their command-line input.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_282.diff
https://github.com/git/git/commit/e94eac49e6edb1ef37796e11bf52a7cb301645e8,18 Mar 2017,"http-push: don't check return value of lookup_unknown_object()

This function always returns a reference to an object, creating one if
needed, so remove the unnecessary NULL check.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_283.diff
https://github.com/git/git/commit/2225e1ea20481a7c0da526891470abf9ece623e7,18 Mar 2017,"grep: fix builds with with no thread support

Commit 0281e487fd91 (""grep: optionally recurse into submodules"")
added functions grep_submodule() and grep_submodule_launch() which
use ""struct work_item"" which is defined only when thread support
is available.

The original implementation of grep_submodule() used the ""struct
work_item"" in order to gain access to a strbuf to store its output which
was to be printed at a later point in time.  This differs from how both
grep_file() and grep_sha1() handle their output.  This patch eliminates
the reliance on the ""struct work_item"" and instead opts to use the
output function stored in the output field of the ""struct grep_opt""
object directly, making it behave similarly to both grep_file() and
grep_sha1().

Reported-by: Rahul Bedarkar <rahul.bedarkar@imgtec.com>
Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_284.diff
https://github.com/git/git/commit/b58a68c1c1874ff155699d82947c9f026f431cb3,17 Mar 2017,"setup: allow for prefix to be passed to git commands

In a future patch child processes which act on submodules need a little
more context about the original command that was invoked.  This patch
teaches git to use the prefix stored in `GIT_INTERNAL_TOPLEVEL_PREFIX`
instead of the prefix that was potentally found during the git directory
setup process.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_285.diff
https://github.com/git/git/commit/5c2bd8b77aeefa4c6484684ef3e9227a6287a93e,17 Mar 2017,"submodule--helper: add is-active subcommand

The definition of which submodules are of interest by the user
is tied to the configuration submodule.<name>.url; when it is
set to a non-empty string, it is of interest.  We'd want to be
able to later change this definition, but there are many places
that explicitly check this condition in the scripted Porcelain.

Introduce the ""is-active"" subcommand to ""submodule--helper"", so
that the exact definition of what submodule is of interest can
be centrally defined (and changed in later steps).  In a few
patches that follow, this helper is used to replace the explicit
checks of the configuration variable in scripts.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_286.diff
https://github.com/git/git/commit/8325e43b82dd0bd00c37abed45861bb8c155b022,17 Mar 2017,"Makefile: add DC_SHA1 knob

This knob lets you use the sha1dc implementation from:

      https://github.com/cr-marcstevens/sha1collisiondetection

which can detect certain types of collision attacks (even
when we only see half of the colliding pair). So it
mitigates any attack which consists of getting the ""good""
half of a collision into a trusted repository, and then
later replacing it with the ""bad"" half. The ""good"" half is
rejected by the victim's version of Git (and even if they
run an old version of Git, any sha1dc-enabled git will
complain loudly if it ever has to interact with the object).

The big downside is that it's slower than either the openssl
or block-sha1 implementations.

Here are some timings based off of linux.git:

  - compute sha1 over whole packfile
      sha1dc: 3.580s
    blk-sha1: 2.046s (-43%)
     openssl: 1.335s (-62%)

  - rev-list --all --objects
      sha1dc: 33.512s
    blk-sha1: 33.514s (+0.0%)
     openssl: 33.650s (+0.4%)

  - git log --no-merges -10000 -p
      sha1dc: 8.124s
    blk-sha1: 7.986s (-1.6%)
     openssl: 8.203s (+0.9%)

  - index-pack --verify
      sha1dc: 4m19s
    blk-sha1: 2m57s (-32%)
     openssl: 2m19s (-42%)

So overall the sha1 computation with collision detection is
about 1.75x slower than block-sha1, and 2.7x slower than
sha1. But of course most operations do more than just sha1.
Normal object access isn't really slowed at all (both the
+/- changes there are well within the run-to-run noise); any
changes are drowned out by the other work Git is doing.

The most-affected operation is `index-pack --verify`, which
is essentially just computing the sha1 on every object. This
is similar to the `index-pack` invocation that the receiver
of a push or fetch would perform. So clearly there's some
extra CPU load here.

There will also be some latency for the user, though keep in
mind that such an operation will generally be network bound
(this is about a 1.2GB packfile). Some of that extra CPU is
""free"" in the sense that we use it while the pack is
streaming in anyway. But most of it comes during the
delta-resolution phase, after the whole pack has been
received. So we can imagine that for this (quite large)
push, the user might have to wait an extra 100 seconds over
openssl (which is what we use now). If we assume they can
push to us at 20Mbit/s, that's 480s for a 1.2GB pack, which
is only 20% slower.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_287.diff
https://github.com/git/git/commit/994292130121175dcb53f72541b7445e4b054d75,17 Mar 2017,"sequencer: drop ""warning:"" when stopping for edit

Since the conversion from shell to C in 56dc3ab04 (sequencer
(rebase -i): implement the 'edit' command, 2017-01-02),
stopping at an ""edit"" instruction went from:

  $ git rebase -i
  Stopped at 6ce6b914a... odb_pack_keep(): stop generating keepfile name
  You can amend the commit now, with
    [...more instructions...]

to:

  $ git rebase -i
  warning: stopped at 6ce6b914a... odb_pack_keep(): stop generating keepfile name
  You can amend the commit now, with
    [...more instructions...]

The ""warning"" implies that it's something unexpected, but
it's not. Let's switch back to the original message.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_288.diff
https://github.com/git/git/commit/6d14eac3ec3e935ada977dfbdf4c61a0a3222010,16 Mar 2017,"entry.c: create submodules when interesting

When a submodule is introduced with a new revision
we need to create the submodule in the worktree as well.
As 'submodule_move_head' handles edge cases, all we have
to do is call it from within the function that creates
new files in the working tree for workingtree operations.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_289.diff
https://github.com/git/git/commit/a7bc845a9ae2bc4c58566e6744dd3cec0f805244,16 Mar 2017,"unpack-trees: check if we can perform the operation for submodules

In a later patch we'll support submodule entries to be
in sync with the tree in working tree changing commands,
such as checkout or read-tree.

When a new submodule entry changes in the tree, we need to
check if there are conflicts (directory/file conflicts)
for the tree. Add this check for submodules to be
performed before the working tree is touched.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_290.diff
https://github.com/git/git/commit/6e3c1595c66e2b192a2a516447c5645814766339,16 Mar 2017,"update submodules: add submodule_move_head

In later patches we introduce the options and flag for commands
that modify the working directory, e.g. git-checkout.

This piece of code will be used universally for
all these working tree modifications as it
* supports dry run to answer the question:
  ""Is it safe to change the submodule to this new state?""
  e.g. is it overwriting untracked files or are there local
  changes that would be overwritten?
* supports a force flag that can be used for resetting
  the tree.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_291.diff
https://github.com/git/git/commit/d601fd09573540287d1e00e3a25ef6311885bb46,16 Mar 2017,"update submodules: add submodule config parsing

Similar to b33a15b08 (push: add recurseSubmodules config option,
2015-11-17) and 027771fcb1 (submodule: allow erroneous values for the
fetchRecurseSubmodules option, 2015-08-17), we add submodule-config code
that is later used to parse whether we are interested in updating
submodules.

We need the `die_on_error` parameter to be able to call this parsing
function for the config file as well, which if incorrect lets Git die.

As we're just touching the header file, also mark all functions extern.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_292.diff
https://github.com/git/git/commit/4682085cd4bfdd6adbe2d5afcfab01d6a116b7d9,16 Mar 2017,"submodule--helper.c: remove duplicate code

Remove code fragment from module_clone that duplicates functionality
of connect_work_tree_and_git_dir in dir.c

Signed-off-by: Valery Tolstov <me@vtolstov.org>
Reviewed-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_293.diff
https://github.com/git/git/commit/365444a6a55391e192662964d523e2b0887557bd,16 Mar 2017,"connect_work_tree_and_git_dir: safely create leading directories

In a later patch we'll use connect_work_tree_and_git_dir when the
directory for the gitlink file doesn't exist yet. This patch makes
connect_work_tree_and_git_dir safe to use for both cases of
either the git dir or the working dir missing.

To do so, we need to call safe_create_leading_directories[_const]
on both directories. However this has to happen before we construct
the absolute paths as real_pathdup assumes the directories to
be there already.

So for both the config file in the git dir as well as the .git link
file we need to
a) construct the name
b) call SCLD
c) get the absolute path
d) once a-c is done for both we can consume the absolute path
   to compute the relative path to each other and store those
   relative paths.

The implementation provided here puts a) and b) for both cases first,
and then performs c and d after.

One of the two users of 'connect_work_tree_and_git_dir' already checked
for the directory being there, so we can loose that check as
connect_work_tree_and_git_dir handles this functionality now.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_294.diff
https://github.com/git/git/commit/438fc68462d5839ef6ca231cdcb411105eaf0ba2,08 Feb 2017,"push options: pass push options to the transport helper

When using non-builtin protocols relying on a transport helper
(such as http), push options are not propagated to the helper.

The user could ask for push options and a push would seemingly succeed,
but the push options would never be transported to the server,
misleading the users expectation.

Fix this by propagating the push options to the transport helper.

This is only addressing the first issue of
   (1) the helper protocol does not propagate push-option
   (2) the http helper is not prepared to handle push-option

Once we fix (2), the http transport helper can make use of push options
as well, but that happens as a follow up. (1) is a bug fix, whereas (2)
is a feature, which is why we only do (1) here.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_295.diff
https://github.com/git/git/commit/f5022b5fedb405c6bbb0b3e7c5a3a7f507279ef5,08 Feb 2017,"diff: print line prefix for --name-only output

If you run ""git log --graph --name-only"", the pathnames are
not indented to go along with their matching commits (unlike
all of the other diff formats). We need to output the line
prefix for each item before writing it.

The tests cover both --name-status and --name-only. The
former actually gets this right already, because it builds
on the --raw format functions. It's only --name-only which
uses its own code (and this fix mirrors the code in
diff_flush_raw()).

Note that the tests don't follow our usual style of setting
up the ""expect"" output inside the test block. This matches
the surrounding style, but more importantly it is easier to
read: we don't have to worry about embedded single-quotes,
and the leading indentation is more obvious.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_296.diff
https://github.com/git/git/commit/1ce515f09d2bb0836ee100b4d48e9496f5cdde95,08 Feb 2017,"t7800: replace ""wc -l"" with test_line_count

Make t7800 easier to debug by capturing output into temporary files and
using test_line_count to make assertions on those files.

Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_297.diff
https://github.com/git/git/commit/e66adcadfe63508dfd7410c2253116043894d298,08 Feb 2017,"t7800: simplify basic usage test

Use ""test_line_count"" instead of ""wc -l"", use ""git -C"" instead of a
subshell, and use test_expect_code when calling difftool.  Ease
debugging by capturing output into temporary files.

Suggested-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_298.diff
https://github.com/git/git/commit/f483a0aa2a4ca30f4fa76ea4aff621e59cdb882c,04 Feb 2017,"completion: recognize more long-options

Command completion only recognizes a subset of the available options for
the various git commands. The set of recognized options needs to balance
between having all useful options and to not clutter the terminal.

This commit adds all long-options that are mentioned in the man-page
synopsis of the respective git command. Possibly dangerous options are
not included in this set, to avoid accidental data loss. The added
options are:

 - apply: --recount --directory=
 - archive: --output
 - branch: --column --no-column --sort= --points-at
 - clone: --no-single-branch --shallow-submodules
 - commit: --patch --short --date --allow-empty
 - describe: --first-parent
 - fetch, pull: --unshallow --update-shallow
 - fsck: --name-objects
 - grep: --break --heading --show-function --function-context
         --untracked --no-index
 - mergetool: --prompt --no-prompt
 - reset: --keep
 - revert: --strategy= --strategy-option=
 - shortlog: --email
 - tag: --merged --no-merged --create-reflog

Signed-off-by: Cornelius Weig <cornelius.weig@tngtech.com>
Helped-by: Johannes Sixt <j6t@kdbg.org>
Reviewed-by: SZEDER Gábor <szeder.dev@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_299.diff
https://github.com/git/git/commit/55cccf4bb3d7e99223b8ebb3d4480f73c456dd61,01 Feb 2017,"color_parse_mem: allow empty color spec

Prior to c2f41bf52 (color.c: fix color_parse_mem() with
value_len == 0, 2017-01-19), the empty string was
interpreted as a color ""reset"". This was an accidental
outcome, and that commit turned it into an error.

However, scripts may pass the empty string as a default
value to ""git config --get-color"" to disable color when the
value is not defined. The git-add--interactive script does
this. As a result, the script is unusable since c2f41bf52
unless you have color.diff.plain defined (if it is defined,
then we don't parse the empty default at all).

Our test scripts didn't notice the recent breakage because
they run without a terminal, and thus without color. They
never hit this code path at all. And nobody noticed the
original buggy ""reset"" behavior, because it was effectively
a noop.

Let's fix the code to have an empty color name produce an
empty sequence of color codes. The tests need a few fixups:

  - we'll add a new test in t4026 to cover this case. But
    note that we need to tweak the color() helper. While
    we're there, let's factor out the literal ANSI ESC
    character. Otherwise it makes the diff quite hard to
    read.

  - we'll add a basic sanity-check in t4026 that ""git add
    -p"" works at all when color is enabled. That would have
    caught this bug, as well as any others that are specific
    to the color code paths.

  - 73c727d69 (log --graph: customize the graph lines with
    config log.graphColors, 2017-01-19) added a test to
    t4202 that checks some ""invalid"" graph color config.
    Since "",, blue"" before yielded only ""blue"" as valid, and
    now yields ""empty, empty, blue"", we don't match the
    expected output.

    One way to fix this would be to change the expectation
    to the empty color strings. But that makes the test much
    less interesting, since we show only two graph lines,
    both of which would be colorless.

    Since the empty-string case is now covered by t4026,
    let's remove them entirely here. They're just in the way
    of the primary thing the test is supposed to be
    checking.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_300.diff
https://github.com/git/git/commit/8f60064c1f538f06e1c579cbd9840b86b10bcd3d,31 Jan 2017,"Sync with maint

* maint:
  Ready for 2.11.1",45,data/crawl/git/patch_301.diff
https://github.com/git/git/commit/b32fe956d0d8d601e2dc915d96e14d8bbdda6b71,31 Jan 2017,"Ready for 2.11.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_302.diff
https://github.com/git/git/commit/df9ded4984ca9a2d8da9007049f4fb5275eaa3ac,26 Jan 2017,"status: be prepared for not-yet-started interactive rebase

Some developers might want to call `git status` in a working
directory where they just started an interactive rebase, but the
edit script is still opened in the editor.

Let's show a meaningful message in such cases.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_303.diff
https://github.com/git/git/commit/ec9629b3b9abc9fc9cb2a9e058bf8dccbc760433,26 Jan 2017,"submodule absorbing: fix worktree/gitdir pointers recursively for non-moves

Consider having a submodule 'sub' and a nested submodule at 'sub/nested'.
When nested is already absorbed into sub, but sub is not absorbed into
its superproject, then we need to fixup the gitfile and core.worktree
setting for 'nested' when absorbing 'sub', but we do not need to move
its git dir around.

Previously 'nested's gitfile contained ""gitdir: ../.git/modules/nested"";
it has to be corrected to ""gitdir: ../../.git/modules/sub1/modules/nested"".

An alternative I considered to do this work lazily, i.e. when resolving
""../.git/modules/nested"", we would notice the "".git"" being a gitfile
linking to another path.  That seemed to be robuster by design, but harder
to get the implementation right.  Maybe we have to do that anyway once we
try to have submodules and worktrees working nicely together, but for now
just produce 'correct' (i.e. direct) pointers.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_304.diff
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_305.diff
https://github.com/git/git/commit/a2b22854bd5f252cd036636091a1d30141c35bce,26 Jan 2017,"fsck: lazily load types under --connectivity-only

The recent fixes to ""fsck --connectivity-only"" load all of
the objects with their correct types. This keeps the
connectivity-only code path close to the regular one, but it
also introduces some unnecessary inefficiency. While getting
the type of an object is cheap compared to actually opening
and parsing the object (as the non-connectivity-only case
would do), it's still not free.

For reachable non-blob objects, we end up having to parse
them later anyway (to see what they point to), making our
type lookup here redundant.

For unreachable objects, we might never hit them at all in
the reachability traversal, making the lookup completely
wasted. And in some cases, we might have quite a few
unreachable objects (e.g., when alternates are used for
shared object storage between repositories, it's normal for
there to be objects reachable from other repositories but
not the one running fsck).

The comment in mark_object_for_connectivity() claims two
benefits to getting the type up front:

  1. We need to know the types during fsck_walk(). (And not
     explicitly mentioned, but we also need them when
     printing the types of broken or dangling commits).

     We can address this by lazy-loading the types as
     necessary. Most objects never need this lazy-load at
     all, because they fall into one of these categories:

       a. Reachable from our tips, and are coerced into the
	  correct type as we traverse (e.g., a parent link
	  will call lookup_commit(), which converts OBJ_NONE
	  to OBJ_COMMIT).

       b. Unreachable, but not at the tip of a chunk of
          unreachable history. We only mention the tips as
	  ""dangling"", so an unreachable commit which links
	  to hundreds of other objects needs only report the
	  type of the tip commit.

  2. It serves as a cross-check that the coercion in (1a) is
     correct (i.e., we'll complain about a parent link that
     points to a blob). But we get most of this for free
     already, because right after coercing, we'll parse any
     non-blob objects. So we'd notice then if we expected a
     commit and got a blob.

     The one exception is when we expect a blob, in which
     case we never actually read the object contents.

     So this is a slight weakening, but given that the whole
     point of --connectivity-only is to sacrifice some data
     integrity checks for speed, this seems like an
     acceptable tradeoff.

Here are before and after timings for an extreme case with
~5M reachable objects and another ~12M unreachable (it's the
torvalds/linux repository on GitHub, connected to shared
storage for all of the other kernel forks):

  [before]
  $ time git fsck --no-dangling --connectivity-only
  real	3m4.323s
  user	1m25.121s
  sys	1m38.710s

  [after]
  $ time git fsck --no-dangling --connectivity-only
  real	0m51.497s
  user	0m49.575s
  sys	0m1.776s

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_306.diff
https://github.com/git/git/commit/97ca7ca8ba3acbc7166fb7ff40819696ed20e8c6,26 Jan 2017,"fsck: move typename() printing to its own function

When an object has a problem, we mention its type. But we do
so by feeding the result of typename() directly to
fprintf(). This is potentially dangerous because typename()
can return NULL for some type values (like OBJ_NONE).

It's doubtful that this can be triggered in practice with
the current code, so this is probably not fixing a bug. But
it future-proofs us against modifications that make things
like OBJ_NONE more likely (and gives future patches a
central point to handle them).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_307.diff
https://github.com/git/git/commit/e0ae5b67a804463277ab7398f8d7557133e2c3db,25 Jan 2017,"relink: really remove the command

The files in contrib/examples are meant to illustrate ""you could
combine plumbing commands to implement something like these""; this
is an opposite and is an example of what not to do, e.g. accessing
the object store directly bypassing Git.

Remove it.

Suggested-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",203,data/crawl/git/patch_308.diff
https://github.com/git/git/commit/94d3997ecc09f36d17b9ad4b49c4709885e300f7,25 Jan 2017,"difftool: hack around -Wzero-length-format warning

Building with ""gcc -Wall"" will complain that the format in:

  warning("""")

is empty. Which is true, but the warning is over-eager. We
are calling the function for its side effect of printing
""warning:"", even with an empty string.

Our DEVELOPER Makefile knob disables the warning, but not
everybody uses it. Let's silence the warning in the code so
that nobody reports it or tries to ""fix"" it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_309.diff
https://github.com/git/git/commit/3d415425c7b6ca0d2243a4589672369e7a02fc2c,25 Jan 2017,"unpack-trees: support super-prefix option

In the future we want to support working tree operations within submodules,
e.g. ""git checkout --recurse-submodules"", which will update the submodule
to the commit as recorded in its superproject. In the submodule the
unpack-tree operation is carried out as usual, but the reporting to the
user needs to prefix any path with the superproject. The mechanism for
this is the super-prefix. (see 74866d757, git: make super-prefix option)

Add support for the super-prefix option for commands that unpack trees
by wrapping any path output in unpacking trees in the newly introduced
super_prefixed function. This new function prefixes any path with the
super-prefix if there is one.  Assuming the submodule case doesn't happen
in the majority of the cases, we'd want to have a fast behavior for no
super prefix, i.e. no reallocation/copying, but just returning path.

Another aspect of introducing the `super_prefixed` function is to consider
who owns the memory and if this is the right place where the path gets
modified. As the super prefix ought to change the output behavior only and
not the actual unpack tree part, it is fine to be that late in the line.
As we get passed in 'const char *path', we cannot change the path itself,
which means in case of a super prefix we have to copy over the path.
We need two static buffers in that function as the error messages
contain at most two paths.

For testing purposes enable it in read-tree, which has no output
of paths other than an unpack-trees.c. These are all converted in
this patch.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_310.diff
https://github.com/git/git/commit/73c727d69f47572bf7f21fa31831f9a3fdad944c,24 Jan 2017,"log --graph: customize the graph lines with config log.graphColors

If you have a 256 colors terminal (or one with true color support), then
the predefined 12 colors seem limited. On the other hand, you don't want
to draw graph lines with every single color in this mode because the two
colors could look extremely similar. This option allows you to hand pick
the colors you want.

Even with standard terminal, if your background color is neither black
or white, then the graph line may match your background and become
hidden. You can exclude your background color (or simply the colors you
hate) with this.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_311.diff
https://github.com/git/git/commit/d01b8203ec24732e5e8829db44a8150468f2fb7d,23 Jan 2017,"show-ref: detect dangling refs under --verify as well

Move detection of dangling refs into show_one(), so that they are
detected when --verify is present as well as when it is absent.

Signed-off-by: Vladimir Panteleev <git@thecybershadow.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_312.diff
https://github.com/git/git/commit/f1627040b9305dc38994f799c172393909b2c70c,23 Jan 2017,"show-ref: allow -d to work with --verify

Move handling of -d into show_one(), so that it takes effect when
--verify is present as well as when it is absent. This is useful when
the user wishes to avoid the costly iteration of refs.

Signed-off-by: Vladimir Panteleev <git@thecybershadow.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_313.diff
https://github.com/git/git/commit/3ca869940994866796edf9e53e52d80f82c3c04c,23 Jan 2017,"add QSORT_S

Add the macro QSORT_S, a convenient wrapper for qsort_s() that infers
the size of the array elements and dies on error.

Basically all possible errors are programming mistakes (passing NULL as
base of a non-empty array, passing NULL as comparison function,
out-of-bounds accesses), so terminating the program should be acceptable
for most callers.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_314.diff
https://github.com/git/git/commit/c9a98ddc26175b29a4081ff3a55dcf054b76245b,19 Jan 2017,"contrib: remove git-convert-objects

git-convert-objects, originally named git-convert-cache was used in
early 2005 to convert ancient repositories where objects are named
after the hash of their compressed contents to the current object
naming sheme where they are named after the hash of their pre-compression
contents.

By now the need for conversion of the very early repositories is
less relevant, we no longer need to keep it in contrib; remove it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",358,data/crawl/git/patch_315.diff
https://github.com/git/git/commit/019678d6b1f83419cdc35e3d455175adce3a379c,19 Jan 2017,"difftool: retire the scripted version

It served its purpose, but now we have a builtin difftool. Time for the
Perl script to enjoy Florida.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_316.diff
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/patch_317.diff
https://github.com/git/git/commit/787f75f0567aa8c7347544c65e9d3bc6640a27d4,18 Jan 2017,Sixth batch for 2.12,64,data/crawl/git/patch_318.diff
https://github.com/git/git/commit/ad36dc8b4b165bf9eb3576b42a241164e312d48c,17 Jan 2017,"Almost ready for 2.11.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",127,data/crawl/git/patch_319.diff
https://github.com/git/git/commit/c6c7b16d23a4cb6af26acee865c2ade1a3822bef,17 Jan 2017,"fsck: tighten error-checks of ""git fsck <head>""

Instead of checking reachability from the refs, you can ask
fsck to check from a particular set of heads. However, the
error checking here is quite lax. In particular:

  1. It claims lookup_object() will report an error, which
     is not true. It only does a hash lookup, and the user
     has no clue that their argument was skipped.

  2. When either the name or sha1 cannot be resolved, we
     continue to exit with a successful error code, even
     though we didn't check what the user asked us to.

This patch fixes both of these cases.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_320.diff
https://github.com/git/git/commit/3e3f8bd608e6682a2ad4f6cef52ed8ec45b8ad59,17 Jan 2017,"fsck: prepare dummy objects for --connectivity-check

Normally fsck makes a pass over all objects to check their
integrity, and then follows up with a reachability check to
make sure we have all of the referenced objects (and to know
which ones are dangling). The latter checks for the HAS_OBJ
flag in obj->flags to see if we found the object in the
first pass.

Commit 02976bf85 (fsck: introduce `git fsck --connectivity-only`,
2015-06-22) taught fsck to skip the initial pass, and to
fallback to has_sha1_file() instead of the HAS_OBJ check.

However, it converted only one HAS_OBJ check to use
has_sha1_file(). But there are many other places in
builtin/fsck.c that assume that the flag is set (or that
lookup_object() will return an object at all). This leads to
several bugs with --connectivity-only:

  1. mark_object() will not queue objects for examination,
     so recursively following links from commits to trees,
     etc, did nothing. I.e., we were checking the
     reachability of hardly anything at all.

  2. When a set of heads is given on the command-line, we
     use lookup_object() to see if they exist. But without
     the initial pass, we assume nothing exists.

  3. When loading reflog entries, we do a similar
     lookup_object() check, and complain that the reflog is
     broken if the object doesn't exist in our hash.

So in short, --connectivity-only is broken pretty badly, and
will claim that your repository is fine when it's not.
Presumably nobody noticed for a few reasons.

One is that the embedded test does not actually test the
recursive nature of the reachability check. All of the
missing objects are still in the index, and we directly
check items from the index. This patch modifies the test to
delete the index, which shows off breakage (1).

Another is that --connectivity-only just skips the initial
pass for loose objects. So on a real repository, the packed
objects were still checked correctly. But on the flipside,
it means that ""git fsck --connectivity-only"" still checks
the sha1 of all of the packed objects, nullifying its
original purpose of being a faster git-fsck.

And of course the final problem is that the bug only shows
up when there _is_ corruption, which is rare. So anybody
running ""git fsck --connectivity-only"" proactively would
assume it was being thorough, when it was not.

One possibility for fixing this is to find all of the spots
that rely on HAS_OBJ and tweak them for the connectivity-only
case. But besides the risk that we might miss a spot (and I
found three already, corresponding to the three bugs above),
there are other parts of fsck that _can't_ work without a
full list of objects. E.g., the list of dangling objects.

Instead, let's make the connectivity-only case look more
like the normal case. Rather than skip the initial pass
completely, we'll do an abbreviated one that sets up the
HAS_OBJ flag for each object, without actually loading the
object data.

That's simple and fast, and we don't have to care about the
connectivity_only flag in the rest of the code at all.
While we're at it, let's make sure we treat loose and packed
objects the same (i.e., setting up dummy objects for both
and skipping the actual sha1 check). That makes the
connectivity-only check actually fast on a real repo (40
seconds versus 180 seconds on my copy of linux.git).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/patch_321.diff
https://github.com/git/git/commit/5da4966f2808371ba94de467d06b4e7e7ab125d8,17 Jan 2017,"sequencer (rebase -i): write out the final message

The shell script version of the interactive rebase has a very specific
final message. Teach the sequencer to print the same.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_322.diff
https://github.com/git/git/commit/ef80069a037e5c5180a67eadedc375e184a28dbb,17 Jan 2017,"sequencer (rebase -i): write the progress into files

For the benefit of e.g. the shell prompt, the interactive rebase not
only displays the progress for the user to see, but also writes it into
the msgnum/end files in the state directory.

Teach the sequencer this new trick.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_323.diff
https://github.com/git/git/commit/968492e44c08f40cbfec083c22e05984f84c2353,17 Jan 2017,"sequencer (rebase -i): show the progress

The interactive rebase keeps the user informed about its progress.
If the sequencer wants to do the grunt work of the interactive
rebase, it also needs to show that progress.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_324.diff
https://github.com/git/git/commit/27fdbb96aae789105dadbddbfa9bccce8f88d3c8,17 Jan 2017,"sequencer (rebase -i): suggest --edit-todo upon unknown command

This is the same behavior as known from `git rebase -i`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_325.diff
https://github.com/git/git/commit/62fdb6529a5b744e544ec3d776ba1adf48dab751,17 Jan 2017,"sequencer (rebase -i): show only failed cherry-picks' output

This is the behavior of the shell script version of the interactive
rebase, by using the `output` function defined in `git-rebase.sh`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_326.diff
https://github.com/git/git/commit/9a757c4970837162dfe4a64b70a428209c135641,17 Jan 2017,"sequencer (rebase -i): show only failed `git commit`'s output

This is the behavior of the shell script version of the interactive
rebase, by using the `output` function defined in `git-rebase.sh`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_327.diff
https://github.com/git/git/commit/be8a90e59ce4c7603207a8255284fdbbffff1a2e,17 Jan 2017,"difftool: add a skeleton for the upcoming builtin

This adds a builtin difftool that still falls back to the legacy Perl
version, which has been renamed to `legacy-difftool`.

The idea is that the new, experimental, builtin difftool immediately hands
off to the legacy difftool for now, unless the config variable
difftool.useBuiltin is set to true.

This feature flag will be used in the upcoming Git for Windows v2.11.0
release, to allow early testers to opt-in to use the builtin difftool and
flesh out any bugs.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_328.diff
https://github.com/git/git/commit/874444b70451879d5b9b7e288e5c4e711c4a87ac,16 Jan 2017,"diff: document the format of the -O (diff.orderFile) file

Signed-off-by: Richard Hansen <hansenr@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_329.diff
https://github.com/git/git/commit/cce044df7f2392d0c6cb21d6dca94f01ff838727,15 Jan 2017,"fsck: detect trailing garbage in all object types

When a loose tree or commit is read by fsck (or any git
program), unpack_sha1_rest() checks whether there is extra
cruft at the end of the object file, after the zlib data.
Blobs that are streamed, however, do not have this check.

For normal git operations, it's not a big deal. We know the
sha1 and size checked out, so we have the object bytes we
wanted.  The trailing garbage doesn't affect what we're
trying to do.

But since the point of fsck is to find corruption or other
problems, it should be more thorough. This patch teaches its
loose-sha1 reader to detect extra bytes after the zlib
stream and complain.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_330.diff
https://github.com/git/git/commit/c68b489e56431cf27f7719913ab09ddc62f95912,15 Jan 2017,"fsck: parse loose object paths directly

When we iterate over the list of loose objects to check, we
get the actual path of each object. But we then throw it
away and pass just the sha1 to fsck_sha1(), which will do a
fresh lookup. Usually it would find the same object, but it
may not if an object exists both as a loose and a packed
object. We may end up checking the packed object twice, and
never look at the loose one.

In practice this isn't too terrible, because if fsck doesn't
complain, it means you have at least one good copy. But
since the point of fsck is to look for corruption, we should
be thorough.

The new read_loose_object() interface can help us get the
data from disk, and then we replace parse_object() with
parse_object_buffer(). As a bonus, our error messages now
mention the path to a corrupted object, which should make it
easier to track down errors when they do happen.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_331.diff
https://github.com/git/git/commit/f6371f9210418f1beabc85b097e2a3470aeeb54d,15 Jan 2017,"sha1_file: add read_loose_object() function

It's surprisingly hard to ask the sha1_file code to open a
_specific_ incarnation of a loose object. Most of the
functions take a sha1, and loop over the various object
types (packed versus loose) and locations (local versus
alternates) at a low level.

However, some tools like fsck need to look at a specific
file. This patch gives them a function they can use to open
the loose object at a given path.

The implementation unfortunately ends up repeating bits of
related functions, but there's not a good way around it
without some major refactoring of the whole sha1_file stack.
We need to mmap the specific file, then partially read the
zlib stream to know whether we're streaming or not, and then
finally either stream it or copy the data to a buffer.

We can do that by assembling some of the more arcane
internal sha1_file functions, but we end up having to
essentially reimplement unpack_sha1_file(), along with the
streaming bits of check_sha1_signature().

Still, most of the ugliness is contained in the new
function, and the interface is clean enough that it may be
reusable (though it seems unlikely anything but git-fsck
would care about opening a specific file).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/patch_332.diff
https://github.com/git/git/commit/771e7d578ee93753f5ac0ed346effd0af3d5a4b4,15 Jan 2017,"sha1_file: fix error message for alternate objects

When we fail to open a corrupt loose object, we report an
error and mention the filename via sha1_file_name().
However, that function will always give us a path in the
local repository, whereas the corrupt object may have come
from an alternate. The result is a very misleading error
message.

Teach the open_sha1_file() and stat_sha1_file() helpers to
pass back the path they found, so that we can report it
correctly.

Note that the pointers we return go to static storage (e.g.,
from sha1_file_name()), which is slightly dangerous.
However, these helpers are static local helpers, and the
names are used for immediately generating error messages.
The simplicity is an acceptable tradeoff for the danger.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_333.diff
https://github.com/git/git/commit/6e7c14e65c863b615a6a3abb2a3668b261008809,12 Jan 2017,"submodule update --init: display correct path from submodule

In the submodule helper we did not correctly handled the display path
for initializing submodules when both the submodule is inside a
subdirectory as well as the command being invoked from a subdirectory
(as viewed from the superproject).

This was broken in 3604242f080, which was written at a time where
there was no super-prefix available, so we abused the --prefix option
for the same purpose and could get only one case right (the call from
within a subdirectory, not the submodule being in a subdirectory).

Test-provided-by: David Turner <novalis@novalis.org>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_334.diff
https://github.com/git/git/commit/c026557a37361b7019acca28f240a19f546739e9,12 Jan 2017,"versioncmp: generalize version sort suffix reordering

The 'versionsort.prereleaseSuffix' configuration variable, as its name
suggests, is supposed to only deal with tagnames with prerelease
suffixes, and allows sorting those prerelease tags in a user-defined
order before the suffixless main release tag, instead of sorting them
simply lexicographically.

However, the previous changes in this series resulted in an
interesting and useful property of version sort:

  - The empty string as a configured suffix matches all tagnames,
    including tagnames without any suffix, but

  - tagnames containing a ""real"" configured suffix are still ordered
    according to that real suffix, because any longer suffix takes
    precedence over the empty string.

Exploiting this property we can easily generalize suffix reordering
and specify the order of tags with given suffixes not only before but
even after a main release tag by using the empty suffix to denote the
position of the main release tag, without any algorithm changes:

  $ git -c versionsort.prereleaseSuffix=-alpha \
        -c versionsort.prereleaseSuffix=-beta \
        -c versionsort.prereleaseSuffix="""" \
        -c versionsort.prereleaseSuffix=-gamma \
        -c versionsort.prereleaseSuffix=-delta \
        tag -l --sort=version:refname 'v3.0*'
  v3.0-alpha1
  v3.0-beta1
  v3.0
  v3.0-gamma1
  v3.0-delta1

Since 'versionsort.prereleaseSuffix' is not a fitting name for a
configuration variable to control this more general suffix reordering,
introduce the new variable 'versionsort.suffix'.  Still keep the old
configuration variable name as a deprecated alias, though, to avoid
suddenly breaking setups already using it.  Ignore the old variable if
both old and new configuration variables are set, but emit a warning
so users will be aware of it and can fix their configuration.  Extend
the documentation to describe and add a test to check this more
general behavior.

Note: since the empty suffix matches all tagnames, tagnames with
suffixes not included in the configuration are listed together with
the suffixless main release tag, ordered lexicographically right after
that, i.e. before tags with suffixes listed in the configuration
following the empty suffix.

Signed-off-by: SZEDER Gábor <szeder.dev@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_335.diff
https://github.com/git/git/commit/b5a9e435c6dfb40df0a27521c1c6590c8f68ffb2,11 Jan 2017,"Revert ""vreportf: avoid intermediate buffer""

This reverts commit f4c3edc0b156362a92bf9de4f0ec794e90a757fc.

The purpose of that commit was to let us write errors of
arbitrary length to stderr by skipping the intermediate
buffer and sending our varargs straight to fprintf. That
works, but it comes with a downside: we do not get access to
the varargs before they are sent to stderr.

On balance, it's not a good tradeoff. Error messages larger
than our 4K buffer are quite uncommon, and we've lost the
ability to make any modifications to the output (e.g., to
remove non-printable characters).

The only way to have both would be one of:

  1. Write into a dynamic buffer. But this is a bad idea for
     a low-level function that may be called when malloc()
     has failed.

  2. Do our own printf-format varargs parsing. This is too
     complex to be worth the trouble.

Let's just revert that change and go back to a fixed buffer.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_336.diff
https://github.com/git/git/commit/2d81c48fa7f7679a92c9fe674b53656166ade4f8,09 Jan 2017,"pathspec: give better message for submodule related pathspec error

Every once in a while someone complains to the mailing list to have
run into this weird assertion[1]. The usual response from the mailing
list is link to old discussions[2], and acknowledging the problem
stating it is known.

This patch accomplishes two things:

  1. Switch assert() to die(""BUG"") to give a more readable message.

  2. Take one of the cases where we hit a BUG and turn it into a normal
     ""there was something wrong with the input"" message.

     This assertion triggered for cases where there wasn't a programming
     bug, but just bogus input. In particular, if the user asks for a
     pathspec that is inside a submodule, we shouldn't assert() or
     die(""BUG""); we should tell the user their request is bogus.

     The only reason we did not check for it, is the expensive nature
     of such a check, so callers avoid setting the flag
     PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE. However when we die due
     to bogus input, the expense of CPU cycles spent outweighs the user
     wondering what went wrong, so run that check unconditionally before
     dying with a more generic error message.

Note: There is a case (e.g. ""git -C submodule add ."") in which we call
strip_submodule_slash_expensive, as git-add requests it via the flag
PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE, but the assert used to
trigger nevertheless, because the flag PATHSPEC_LITERAL was not set,
such that we executed

	if (item->nowildcard_len < prefixlen)
		item->nowildcard_len = prefixlen;

and prefixlen was not adapted (e.g. it was computed from ""submodule/"")
So in the die_inside_submodule_path function we also need handle paths,
that were stripped before, i.e. are the exact submodule path. This
is why the conditions in die_inside_submodule_path are slightly
different than in strip_submodule_slash_expensive.

[1] https://www.google.com/search?q=item-%3Enowildcard_len
[2] http://git.661346.n2.nabble.com/assert-failed-in-submodule-edge-case-td7628687.html
    https://www.spinics.net/lists/git/msg249473.html

Helped-by: Jeff King <peff@peff.net>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_337.diff
https://github.com/git/git/commit/796c7972c7236634655d2333333e9f871149b994,09 Jan 2017,"sequencer (rebase -i): respect the rebase.autostash setting

Git's `rebase` command inspects the `rebase.autostash` config setting
to determine whether it should stash any uncommitted changes before
rebasing and re-apply them afterwards.

As we introduce more bits and pieces to let the sequencer act as
interactive rebase's backend, here is the part that adds support for
the autostash feature.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_338.diff
https://github.com/git/git/commit/25cb8df97c9be26d7638e79595d361fbc40b65a0,09 Jan 2017,"sequencer (rebase -i): copy commit notes at end

When rebasing commits that have commit notes attached, the interactive
rebase rewrites those notes faithfully at the end. The sequencer must
do this, too, if it wishes to do interactive rebase's job.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_339.diff
https://github.com/git/git/commit/bcbb68be2e287209eb257de314d72d022712e4c9,09 Jan 2017,"sequencer (rebase -i): allow fast-forwarding for edit/reword

The sequencer already knew how to fast-forward instead of
cherry-picking, if possible.

We want to continue to do this, of course, but in case of the 'reword'
command, we will need to call `git commit` after fast-forwarding.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_340.diff
https://github.com/git/git/commit/4b83ce9f6772451d4582dc1f0891790acbdf4eb1,09 Jan 2017,"sequencer (rebase -i): update refs after a successful rebase

An interactive rebase operates on a detached HEAD (to keep the reflog
of the original branch relatively clean), and updates the branch only
at the end.

Now that the sequencer learns to perform interactive rebases, it also
needs to learn the trick to update the branch before removing the
directory containing the state of the interactive rebase.

We introduce a new head_ref variable in a wider scope than necessary at
the moment, to allow for a later patch that prints out ""Successfully
rebased and updated <ref>"".

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_341.diff
https://github.com/git/git/commit/52865279ee1187a0f630779d2015587ae702b1f4,09 Jan 2017,"sequencer (rebase -i): the todo can be empty when continuing

When the last command of an interactive rebase fails, the user needs to
resolve the problem and then continue the interactive rebase. Naturally,
the todo script is empty by then. So let's not complain about that!

To that end, let's move that test out of the function that parses the
todo script, and into the more high-level function read_populate_todo().
This is also necessary by now because the lower-level parse_insn_buffer()
has no idea whether we are performing an interactive rebase or not.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_342.diff
https://github.com/git/git/commit/5263220967209c7a64c065054fb64036815ac2ee,09 Jan 2017,"sequencer (rebase -i): remove CHERRY_PICK_HEAD when no longer needed

The scripted version of the interactive rebase already does that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_343.diff
https://github.com/git/git/commit/9d93ccd1d2d2d40a3c7ecc76740caf28683144ac,09 Jan 2017,"sequencer (rebase -i): allow continuing with staged changes

When an interactive rebase is interrupted, the user may stage changes
before continuing, and we need to commit those changes in that case.

Please note that the nested ""if"" added to the sequencer_continue() is
not combined into a single ""if"" because it will be extended with an
""else"" clause in a later patch in this patch series.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_344.diff
https://github.com/git/git/commit/6e98de72c03a5bad5ecab1e328e91ef329ba1f41,09 Jan 2017,"sequencer (rebase -i): add support for the 'fixup' and 'squash' commands

This is a huge patch, and at the same time a huge step forward to
execute the performance-critical parts of the interactive rebase in a
builtin command.

Since 'fixup' and 'squash' are not only similar, but also need to know
about each other (we want to reduce a series of fixups/squashes into a
single, final commit message edit, from the user's point of view), we
really have to implement them both at the same time.

Most of the actual work is done by the existing code path that already
handles the ""pick"" and the ""edit"" commands; We added support for other
features (e.g. to amend the commit message) in the patches leading up to
this one, yet there are still quite a few bits in this patch that simply
would not make sense as individual patches (such as: determining whether
there was anything to ""fix up"" in the ""todo"" script, etc).

In theory, it would be possible to reuse the fast-forward code path also
for the fixup and the squash code paths, but in practice this would make
the code less readable. The end result cannot be fast-forwarded anyway,
therefore let's just extend the cherry-picking code path for now.

Since the sequencer parses the entire `git-rebase-todo` script in one go,
fixup or squash commands without a preceding pick can be reported early
(in git-rebase--interactive, we could only report such errors just before
executing the fixup/squash).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",227,data/crawl/git/patch_345.diff
https://github.com/git/git/commit/311af5266b27523742e8be9d8297ea475137cfb5,09 Jan 2017,"sequencer (rebase -i): implement the 'exec' command

The 'exec' command is a little special among rebase -i's commands, as it
does *not* have a SHA-1 as first parameter. Instead, everything after the
`exec` command is treated as command-line to execute.

Let's reuse the arg/arg_len fields of the todo_item structure (which hold
the oneline for pick/edit commands) to point to the command-line.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_346.diff
https://github.com/git/git/commit/56dc3ab04bf0f7bb8c73ebbba47469bdf8be8ac4,09 Jan 2017,"sequencer (rebase -i): implement the 'edit' command

This patch is a straight-forward reimplementation of the `edit`
operation of the interactive rebase command.

Well, not *quite* straight-forward: when stopping, the `edit`
command wants to write the `patch` file (which is not only the
patch, but includes the commit message and author information). To
that end, this patch requires the earlier work that taught the
log-tree machinery to respect the `file` setting of
rev_info->diffopt to write to a file stream different than stdout.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_347.diff
https://github.com/git/git/commit/25c4366782ea941baad3b09d4b9ef63996f1e3b1,09 Jan 2017,"sequencer (rebase -i): implement the 'noop' command

The 'noop' command is probably the most boring of all rebase -i commands
to support in the sequencer.

Which makes it an excellent candidate for this first stab to add support
for rebase -i's commands to the sequencer.

For the moment, let's also treat empty lines and commented-out lines as
'noop'; We will refine that handling later in this patch series.

To make it easier to identify ""classes"" of todo_commands (such as:
determine whether a command is pick-like, i.e. handles a single commit),
let's enforce a certain order of said commands.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_348.diff
https://github.com/git/git/commit/845839575d37da825746816b24376c7799ef1105,09 Jan 2017,"sequencer: support a new action: 'interactive rebase'

This patch introduces a new action for the sequencer. It really does not
do a whole lot of its own right now, but lays the ground work for
patches to come. The intention, of course, is to finally make the
sequencer the work horse of the interactive rebase (the original idea
behind the ""sequencer"" concept).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_349.diff
https://github.com/git/git/commit/5590215b1392b4f094f60d7db7a3c796b8bc9aae,09 Jan 2017,"pathspec: create strip submodule slash helpers

Factor out the logic responsible for stripping the trailing slash on
pathspecs referencing submodules into its own function.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_350.diff
https://github.com/git/git/commit/8881fde01340e1fff4a3acc17805886b644d18d8,09 Jan 2017,"pathspec: create parse_long_magic function

Factor out the logic responsible for parsing long magic into its own
function.  As well as hoist the prefix check logic outside of the inner
loop as there isn't anything that needs to be done after matching
""prefix:"".

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_351.diff
https://github.com/git/git/commit/b4bebdce834d9186f6b1646a943612658f4fb91c,09 Jan 2017,"pathspec: create parse_short_magic function

Factor out the logic responsible for parsing short magic into its own
function.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_352.diff
https://github.com/git/git/commit/db7e85988f71b13f83f37c30e772d0e9a90d840d,09 Jan 2017,"pathspec: factor global magic into its own function

Create helper functions to read the global magic environment variables
in additon to factoring out the global magic gathering logic into its
own function.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",127,data/crawl/git/patch_353.diff
https://github.com/git/git/commit/4e768329847c8226a230406041fe249adea245cf,08 Jan 2017,"blame: output porcelain ""previous"" header for each file

It's possible for content currently found in one file to
have originated in two separate files, each of which may
have been modified in some single older commit.  The
--porcelain output generates an incorrect ""previous"" header
in this case, whereas --line-porcelain gets it right.  The
problem is that the porcelain output tries to omit repeated
details of commits, and treats ""previous"" as a property of
the commit, when it is really a property of the blamed block
of lines.

Let's look at an example. In a case like this, you might see
this output from --line-porcelain:

  SOME_SHA1 1 1 1
  author ...
  committer ...
  previous SOME_SHA1^ file_one
  filename file_one
          ...some line content...
  SOME_SHA1 2 1 1
  author ...
  committer ...
  previous SOME_SHA1^ file_two
  filename file_two
          ...some different content....

The ""filename"" fields tell us that the two lines are from
two different files. But notice that the filename also
appears in the ""previous"" field, which tells us where to
start a re-blame. The second content line never appeared in
file_one at all, so we would obviously need to re-blame from
file_two (or possibly even some other file, if had just been
renamed to file_two in SOME_SHA1).

So far so good. Now here's what --porcelain looks like:

  SOME_SHA1 1 1 1
  author ...
  committer ...
  previous SOME_SHA1^ file_one
  filename file_one
          ...some line content...
  SOME_SHA1 2 1 1
  filename file_two
          ...some different content....

We've dropped the author and committer fields from the
second line, as they would just be repeats.  But we can't
omit ""filename"", because it depends on the actual block of
blamed lines, not just the commit. This is handled by
emit_porcelain_details(), which will show the filename
either if it is the first mention of the commit _or_ if the
commit has multiple paths in it.

But we don't give ""previous"" the same handling. It's written
inside emit_one_suspect_detail(), which bails early if we've
already seen that commit. And so the output above is wrong;
a reader would assume that the correct place to re-blame
line two is from file_one, but that's obviously nonsense.

Let's treat ""previous"" the same as ""filename"", and show it
fresh whenever we know we are in a confusing case like this.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_354.diff
https://github.com/git/git/commit/b10731f43dc21fa47c275052e7c074c686335cd3,08 Jan 2017,"branch_get_push: do not segfault when HEAD is detached

Move the detached HEAD check from branch_get_push_1() to
branch_get_push() to avoid setting branch->push_tracking_ref when
branch is NULL.

Signed-off-by: Kyle Meyer <kyle@kyleam.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_355.diff
https://github.com/git/git/commit/1c409a705cb30ae3db6cdd48757c4a85f51456d4,29 Dec 2016,"repack: die on incremental + write-bitmap-index

The bitmap index only works for single packs, so requesting an
incremental repack with bitmap indexes makes no sense.

Signed-off-by: David Turner <dturner@twosigma.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_356.diff
https://github.com/git/git/commit/55856a35b20dae2499d4e0b23551c7ba9a33baf2,27 Dec 2016,"rm: absorb a submodules git dir before deletion

When deleting a submodule, we need to keep the actual git directory around,
such that we do not lose local changes in there and at a later checkout
of the submodule we don't need to clone it again.

Now that the functionality is available to absorb the git directory of a
submodule, rewrite the checking in git-rm to not complain, but rather
relocate the git directories inside the superproject.

An alternative solution was discussed to have a function
`depopulate_submodule`. That would couple the check for its git directory
and possible relocation before the the removal, such that it is less
likely to miss the check in the future.  But the indirection with such
a function added seemed also complex. The reason for that was that this
possible move of the git directory was also implemented in
`ok_to_remove_submodule`, such that this function could truthfully
answer whether it is ok to remove the submodule.

The solution proposed here defers all these checks to the caller.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/patch_357.diff
https://github.com/git/git/commit/83b7696605dbea3eb4e878cf904159f398345aa9,27 Dec 2016,"submodule: rename and add flags to ok_to_remove_submodule

In different contexts the question ""Is it ok to delete a submodule?""
may be answered differently.

In 293ab15eea (submodule: teach rm to remove submodules unless they
contain a git directory, 2012-09-26) a case was made that we can safely
ignore ignored untracked files for removal as we explicitely ask for the
removal of the submodule.

In a later patch we want to remove submodules even when the user doesn't
explicitly ask for it (e.g. checking out a tree-ish in which the submodule
doesn't exist).  In that case we want to be more careful when it comes
to deletion of untracked files. As of this patch it is unclear how this
will be implemented exactly, so we'll offer flags in which the caller
can specify how the different untracked files ought to be handled.

As the flags allow the function to not die on an error when spawning
a child process, we need to find an appropriate return code for the
case when the child process could not be started. As in that case we
cannot tell if the submodule is ok to remove, we'd want to return 'false'.

As only 0 is understood as false, rename the function to invert the
meaning, i.e. the return code of 0 signals the removal of the submodule
is fine, and other values can be used to return a more precise answer
what went wrong.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_358.diff
https://github.com/git/git/commit/5a1c824f70ec261f8f9e5e039555fc80301dee0b,27 Dec 2016,"submodule: modernize ok_to_remove_submodule to use argv_array

Instead of constructing the NULL terminated array ourselves, we
should make use of the argv_array infrastructure.

While at it, adapt the error messages to reflect the actual invocation.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_359.diff
https://github.com/git/git/commit/48d5014dd42cc4a4465162c9807eaa253715e105,22 Dec 2016,"config.abbrev: document the new default that auto-scales

We somehow forgot to update the ""default is 7"" in the
documentation.  Also give a way to explicitly ask the auto-scaling
by setting config.abbrev to ""auto"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_360.diff
https://github.com/git/git/commit/0281e487fd913bd9a32a710f3109ff3002f3e4a9,22 Dec 2016,"grep: optionally recurse into submodules

Allow grep to recognize submodules and recursively search for patterns in
each submodule.  This is done by forking off a process to recursively
call grep on each submodule.  The top level --super-prefix option is
used to pass a path to the submodule which can in turn be used to
prepend to output or in pathspec matching logic.

Recursion only occurs for submodules which have been initialized and
checked out by the parent project.  If a submodule hasn't been
initialized and checked out it is simply skipped.

In order to support the existing multi-threading infrastructure in grep,
output from each child process is captured in a strbuf so that it can be
later printed to the console in an ordered fashion.

To limit the number of theads that are created, each child process has
half the number of threads as its parents (minimum of 1), otherwise we
potentailly have a fork-bomb.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",406,data/crawl/git/patch_361.diff
https://github.com/git/git/commit/4538eef564c81c96f2874ccadc54d3c69cc0e19c,22 Dec 2016,"grep: add submodules as a grep source type

Add `GREP_SOURCE_SUBMODULE` as a grep_source type and cases for this new
type in the various switch statements in grep.c.

When initializing a grep_source with type `GREP_SOURCE_SUBMODULE` the
identifier can either be NULL (to indicate that the working tree will be
used) or a SHA1 (the REV of the submodule to be grep'd).  If the
identifier is a SHA1 then we want to fall through to the
`GREP_SOURCE_SHA1` case to handle the copying of the SHA1.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_362.diff
https://github.com/git/git/commit/a9b8a09c3c30886c79133da9f48ef9f98c21c3b2,22 Dec 2016,"mingw: replace isatty() hack

Git for Windows has carried a patch that depended on internals
of MSVC runtime, but it does not work correctly with recent MSVC
runtime. A replacement was written originally for compiling
with VC++. The patch in this message is a backport of that
replacement, and it also fixes the previous attempt to make
isatty() tell that /dev/null is *not* an interactive terminal.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Tested-by: Beat Bolli <dev+git@drbeat.li>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",176,data/crawl/git/patch_363.diff
https://github.com/git/git/commit/1d1bdafd64266e5ee3bd46c6965228f32e4022ea,21 Dec 2016,"Third batch for 2.12

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_364.diff
https://github.com/git/git/commit/08414938a26f66988418dfdac03a62b97450056d,20 Dec 2016,"mailinfo.c: move side-effects outside of assert

Since 6b4b013f18 (mailinfo: handle in-body header continuations,
2016-09-20, v2.11.0) mailinfo.c has contained new code with an
assert of the form:

	assert(call_a_function(...))

The function in question, check_header, has side effects.  This
means that when NDEBUG is defined during a release build the
function call is omitted entirely, the side effects do not
take place and tests (fortunately) start failing.

Since the only time that mi->inbody_header_accum is appended to is
in check_inbody_header, and appending onto a blank
mi->inbody_header_accum always happens when is_inbody_header is
true, this guarantees a prefix that causes check_header to always
return true.

Therefore replace the assert with an if !check_header + DIE
combination to reflect this.

Helped-by: Jonathan Tan <jonathantanmy@google.com>
Helped-by: Jeff King <peff@peff.net>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Kyle J. McKay <mackyle@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_365.diff
https://github.com/git/git/commit/7176a31444ce5ed683dbd75d2e1e2f89018d0100,16 Dec 2016,"index-pack: complain when --stdin is used outside of a repo

The index-pack builtin is marked as RUN_SETUP_GENTLY,
because it's perfectly fine to index a pack in the
filesystem outside of any repository. However, --stdin mode
will write the result to the object database, which does not
make sense outside of a repository. Doing so creates a bogus
"".git"" directory with nothing in it except the newly-created
pack and its index.

Instead, let's flag this as an error and abort.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_366.diff
https://github.com/git/git/commit/c7d227df5bf7fe9d5df98a55cd637bfaf38685ea,16 Dec 2016,"merge: mark usage error strings for translation

The nearby error messages are already marked for
translation, but these new ones aren't.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_367.diff
https://github.com/git/git/commit/abcbdc03895ff3f00280e54af11fee92d6877044,15 Dec 2016,"http: respect protocol.*.allow=user for http-alternates

The http-walker may fetch the http-alternates (or
alternates) file from a remote in order to find more
objects. This should count as a ""not from the user"" use of
the protocol. But because we implement the redirection
ourselves and feed the new URL to curl, it will use the
CURLOPT_PROTOCOLS rules, not the more restrictive
CURLOPT_REDIR_PROTOCOLS.

The ideal solution would be for each curl request we make to
know whether or not is directly from the user or part of an
alternates redirect, and then set CURLOPT_PROTOCOLS as
appropriate. However, that would require plumbing that
information through all of the various layers of the http
code.

Instead, let's check the protocol at the source: when we are
parsing the remote http-alternates file. The only downside
is that if there's any mismatch between what protocol we
think it is versus what curl thinks it is, it could violate
the policy.

To address this, we'll make the parsing err on the picky
side, and only allow protocols that it can parse
definitively. So for example, you can't elude the ""http""
policy by asking for ""HTTP://"", even though curl might
handle it; we would reject it as unknown. The only unsafe
case would be if you have a URL that starts with ""http://""
but curl interprets as another protocol. That seems like an
unlikely failure mode (and we are still protected by our
base CURLOPT_PROTOCOL setting, so the worst you could do is
trigger one of https, ftp, or ftps).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_368.diff
https://github.com/git/git/commit/f1762d772e9b415a3163abf5f217fc3b71a3b40e,15 Dec 2016,"transport: add protocol policy config option

Previously the `GIT_ALLOW_PROTOCOL` environment variable was used to
specify a whitelist of protocols to be used in clone/fetch/push
commands.  This patch introduces new configuration options for more
fine-grained control for allowing/disallowing protocols.  This also has
the added benefit of allowing easier construction of a protocol
whitelist on systems where setting an environment variable is
non-trivial.

Now users can specify a policy to be used for each type of protocol via
the 'protocol.<name>.allow' config option.  A default policy for all
unconfigured protocols can be set with the 'protocol.allow' config
option.  If no user configured default is made git will allow known-safe
protocols (http, https, git, ssh, file), disallow known-dangerous
protocols (ext), and have a default policy of `user` for all other
protocols.

The supported policies are `always`, `never`, and `user`.  The `user`
policy can be used to configure a protocol to be usable when explicitly
used by a user, while disallowing it for commands which run
clone/fetch/push commands without direct user intervention (e.g.
recursive initialization of submodules).  Commands which can potentially
clone/fetch/push from untrusted repositories without user intervention
can export `GIT_PROTOCOL_FROM_USER` with a value of '0' to prevent
protocols configured to the `user` policy from being used.

Fix remote-ext tests to use the new config to allow the ext
protocol to be tested.

Based on a patch by Jeff King <peff@peff.net>

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/patch_369.diff
https://github.com/git/git/commit/f962ddf6edb199b2611d575a75f60d20d5c137c3,15 Dec 2016,"http: always warn if libcurl version is too old

Always warn if libcurl version is too old because:

1. Even without a protocol whitelist, newer versions of curl have all
   non-standard protocols disabled by default.
2. A future patch will introduce default ""known-good"" and ""known-bad""
   protocols which are allowed/disallowed by 'is_transport_allowed'
   which older version of libcurl can't respect.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_370.diff
https://github.com/git/git/commit/3c5cd20c7d177f0d93532271f421037c1440a2ff,14 Dec 2016,"i18n: send-email: mark string with interpolation for translation

Mark warnings, errors and other messages that are interpolated for
translation.

We call sprintf() before calling die() and in few other circumstances in
order to replace the values on the placeholders.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_371.diff
https://github.com/git/git/commit/464931053bba771c670fa52ed6ca2eea72a55109,14 Dec 2016,"i18n: send-email: mark warnings and errors for translation

Mark warnings, errors and other messages for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_372.diff
https://github.com/git/git/commit/a4dde4c4e9059416a6249dce3958ffce5a134e0f,14 Dec 2016,"i18n: send-email: mark strings for translation

Mark strings often displayed to the user for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_373.diff
https://github.com/git/git/commit/c4a85c3b8eef8c3b37f5103870e82894d9e5e7d0,14 Dec 2016,"i18n: add--interactive: mark plural strings

Mark plural strings for translation.  Unfold each action case in one
entire sentence.

Pass new keyword for xgettext to extract.

Update test to include new subroutine __n() for plural strings handling.

Update documentation to include a description of the new __n()
subroutine.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_374.diff
https://github.com/git/git/commit/901707babc95950a6e6bd0fcea2070f63b704ef4,14 Dec 2016,"i18n: clean.c: match string with git-add--interactive.perl

Change strings for help to match the ones in git-add--interactive.perl.
The strings now represent one entry to translate each rather then two
entries each different only by an ending newline character.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_375.diff
https://github.com/git/git/commit/13c58c1754393c17fb50b63ae9a3bc07195e520c,14 Dec 2016,"i18n: add--interactive: mark strings with interpolation for translation

Since at this point Git::I18N.perl lacks support for Perl i18n
placeholder substitution, use of sprintf following die or error_msg is
necessary for placeholder substitution take place.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_376.diff
https://github.com/git/git/commit/042e290da6aee0a9f21cd5890ccf231c266e177e,14 Dec 2016,"merge: ensure '--abort' option takes no arguments

Like '--continue', the '--abort' option doesn't make any sense with
other options or arguments to 'git merge' so ensure that none are
present.

Signed-off-by: Chris Packham <judge.packham@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_377.diff
https://github.com/git/git/commit/367ff694281ce569edd8f6e444fc770f92f5d215,14 Dec 2016,"merge: add '--continue' option as a synonym for 'git commit'

Teach 'git merge' the --continue option which allows 'continuing' a
merge by completing it. The traditional way of completing a merge after
resolving conflicts is to use 'git commit'. Now with commands like 'git
rebase' and 'git cherry-pick' having a '--continue' option adding such
an option to 'git merge' presents a consistent UI.

Signed-off-by: Chris Packham <judge.packham@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_378.diff
https://github.com/git/git/commit/87433261a46db1a9bd012acd7fba868f009ba38f,14 Dec 2016,"parse-options: print ""fatal:"" before usage_msg_opt()

Programs may use usage_msg_opt() to print a brief message
followed by the program usage, and then exit. The message
isn't prefixed at all, though, so it doesn't match our usual
error output and is easy to overlook:

    $ git clone 1 2 3
    Too many arguments.

    usage: git clone [<options>] [--] <repo> [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    [...and so on for another 31 lines...]

It looks especially bad when the message starts with an
option, like:

    $ git replace -e
    -e needs exactly one argument

    usage: git replace [-f] <object> <replacement>
       or: git replace [-f] --edit <object>
    [...etc...]

Let's put our usual ""fatal:"" prefix in front of it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_379.diff
https://github.com/git/git/commit/05b458c104708141d2fad211d79703b3b99cc5a8,12 Dec 2016,"real_path: resolve symlinks by hand

The current implementation of real_path uses chdir() in order to resolve
symlinks.  Unfortunately this isn't thread-safe as chdir() affects a
process as a whole and not just an individual thread.  Instead perform
the symlink resolution by hand so that the calls to chdir() can be
removed, making real_path one step closer to being reentrant.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/patch_380.diff
https://github.com/git/git/commit/f6f858614003a3da794385cefdbddf00b85f7501,12 Dec 2016,"submodule: add absorb-git-dir function

When a submodule has its git dir inside the working dir, the submodule
support for checkout that we plan to add in a later patch will fail.

Add functionality to migrate the git directory to be absorbed
into the superprojects git directory.

The newly added code in this patch is structured such that other areas of
Git can also make use of it. The code in the submodule--helper is a mere
wrapper and option parser for the function
`absorb_git_dir_into_superproject`, that takes care of embedding the
submodules git directory into the superprojects git dir. That function
makes use of the more abstract function for this use case
`relocate_gitdir`, which can be used by e.g. the worktree code eventually
to move around a git directory.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",283,data/crawl/git/patch_381.diff
https://github.com/git/git/commit/86defcbe3f6c54a31dc898cb3adb4a3b25f1eb1a,12 Dec 2016,"difftool: fix dir-diff index creation when in a subdirectory

9ec26e7977 (difftool: fix argument handling in subdirs, 2016-07-18)
corrected how path arguments are handled in a subdirectory, but
it introduced a regression in how entries outside of the
subdirectory are handled by dir-diff.

When preparing the right-side of the diff we only include the
changed paths in the temporary area.

The left side of the diff is constructed from a temporary
index that is built from the same set of changed files, but it
was being constructed from within the subdirectory.  This is a
problem because the indexed paths are toplevel-relative, and
thus they were not getting added to the index.

Teach difftool to chdir to the toplevel of the repository before
preparing its temporary indexes.  This ensures that all of the
toplevel-relative paths are valid.

Add test cases to more thoroughly exercise this scenario.

Reported-by: Frank Becker <fb@mooflu.com>
Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_382.diff
https://github.com/git/git/commit/b1d31c8954f9c21b275f4fb7d872414b564c201c,11 Dec 2016,"ref-filter: add support to display trailers as part of contents

Add %(trailers) and %(contents:trailers) to display the trailers as
interpreted by trailer_info_get. Update documentation and add a test for
the new feature.

Signed-off-by: Jacob Keller <jacob.keller@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_383.diff
https://github.com/git/git/commit/89c8626557621ef000930da3c8a23fa03ad7e01a,09 Dec 2016,"submodule helper: support super prefix

Just like main commands in Git, the submodule helper needs
access to the superproject prefix. Enable this in the git.c
but have its own fuse in the helper code by having a flag to
turn on the super prefix.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_384.diff
https://github.com/git/git/commit/1e41229d962b43208e6bf79e729b400c31697cc9,09 Dec 2016,"sequencer: make sequencer abort safer

In contrast to ""git am --abort"", a sequencer abort did not check
whether the current HEAD is the one that is expected. This can lead
to loss of work (when not spotted and resolved using reflog before
the garbage collector chimes in).

This behavior is now changed by mimicking ""git am --abort"".  The
abortion is done but HEAD is not changed when the current HEAD is
not the expected HEAD.

A new file ""sequencer/abort-safety"" is added to save the expected
HEAD.

The new behavior is only active when --abort is invoked on multiple
picks. The problem does not occur for the single-pick case because
it is handled differently.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_385.diff
https://github.com/git/git/commit/853e10c19755669bd4695b1d9fd81f3278466727,08 Dec 2016,"difftool: fix dir-diff index creation when in a subdirectory

9ec26e7977 (difftool: fix argument handling in subdirs, 2016-07-18)
corrected how path arguments are handled in a subdirectory, but
it introduced a regression in how entries outside of the
subdirectory are handled by dir-diff.

When preparing the right-side of the diff we only include the
changed paths in the temporary area.

The left side of the diff is constructed from a temporary
index that is built from the same set of changed files, but it
was being constructed from within the subdirectory.  This is a
problem because the indexed paths are toplevel-relative, and
thus they were not getting added to the index.

Teach difftool to chdir to the toplevel of the repository before
preparing its temporary indexes.  This ensures that all of the
toplevel-relative paths are valid.

Add test cases to more thoroughly exercise this scenario.

Reported-by: Frank Becker <fb@mooflu.com>
Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_386.diff
https://github.com/git/git/commit/1868331f136cfda63ec3296dad66b48f7e9ffe00,08 Dec 2016,"am: change safe_to_abort()'s not rewinding error into a warning

The error message tells the user that something went terribly wrong
and the --abort could not be performed. But the --abort is performed,
only without rewinding. By simply changing the error into a warning,
we indicate the user that she must not try something like
""git am --abort --force"", instead she just has to check the HEAD.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_387.diff
https://github.com/git/git/commit/ccd71b2f38f86a28db2cce811f414fe5369eaa1d,08 Dec 2016,"am: fix filename in safe_to_abort() error message

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_388.diff
https://github.com/git/git/commit/f2386c6b77e236fc104d3a024e5d314c23a941eb,07 Dec 2016,"shallow.c: make paint_alloc slightly more robust

paint_alloc() allocates a big block of memory and splits it into
smaller, fixed size, chunks of memory whenever it's called. Each chunk
contains enough bits to present all ""new refs"" [1] in a fetch from a
shallow repository.

We do not check if the new ""big block"" is smaller than the requested
memory chunk though. If it happens, we'll happily pass back a memory
region smaller than expected. Which will lead to problems eventually.

A normal fetch may add/update a dozen new refs. Let's stay on the
""reasonably extreme"" side and say we need 16k refs (or bits from
paint_alloc's perspective). Each chunk of memory would be 2k, much
smaller than the memory pool (512k).

So, normally, the under-allocation situation should never happen. A bad
guy, however, could make a fetch that adds more than 4m new/updated refs
to this code which results in a memory chunk larger than pool size.
Check this case and abort.

Noticed-by: Rasmus Villemoes <rv@rasmusvillemoes.dk>
Reviewed-by: Jeff King <peff@peff.net>

[1] Details are in commit message of 58babff (shallow.c: the 8 steps to
    select new commits for .git/shallow - 2013-12-05), step 6.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_389.diff
https://github.com/git/git/commit/3f061bf514667497a948804828064b9b9c3b249b,07 Dec 2016,"lockfile: LOCK_REPORT_ON_ERROR

The ""libify sequencer"" topic stopped passing the die_on_error option
to hold_locked_index(), and this lost an error message from ""git
merge --ff-only $commit"" when there are competing updates in
progress.

The command still exits with a non-zero status, but that is not of
much help for an interactive user.  The last thing the command says
is ""Updating $from..$to"".  We used to follow it with a big error
message that makes it clear that ""merge --ff-only"" did not succeed.

What is sad is that we should have noticed this regression while
reviewing the change.  It was clear that the update to the
checkout_fast_forward() function made a failing hold_locked_index()
silent, but the only caller of the checkout_fast_forward() function
had this comment:

	    if (checkout_fast_forward(from, to, 1))
    -               exit(128); /* the callee should have complained already */
    +               return -1; /* the callee should have complained already */

which clearly contradicted the assumption X-<.

Add a new option LOCK_REPORT_ON_ERROR that can be passed instead of
LOCK_DIE_ON_ERROR to the hold_lock*() family of functions and teach
checkout_fast_forward() to use it to fix this regression.

After going thourgh all calls to hold_lock*() family of functions
that used to pass LOCK_DIE_ON_ERROR but were modified to pass 0 in
the ""libify sequencer"" topic ""git show --first-parent 2a4062a4a8"",
it appears that this is the only one that has become silent.  Many
others used to give detailed report that talked about ""there may be
competing Git process running"" but with the series merged they now
only give a single liner ""Unable to lock ..."", some of which may
have to be tweaked further, but at least they say something, unlike
the one this patch fixes.

Reported-by: Robbie Iannucci <iannucci@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_390.diff
https://github.com/git/git/commit/cb4d2d35c4622ec2513c1c352d30ff8f9f9cdb9e,06 Dec 2016,"http: treat http-alternates like redirects

The previous commit made HTTP redirects more obvious and
tightened up the default behavior. However, there's another
way for a server to ask a git client to fetch arbitrary
content: by having an http-alternates file (or a regular
alternates file, which is used as a backup).

Similar to the HTTP redirect case, a malicious server can
claim to have refs pointing at object X, return a 404 when
the client asks for X, but point to some other URL via
http-alternates, which the client will transparently fetch.
The end result is that it looks from the user's perspective
like the objects came from the malicious server, as the
other URL is not mentioned at all.

Worse, because we feed the new URL to curl ourselves, the
usual protocol restrictions do not kick in (neither curl's
default of disallowing file://, nor the protocol
whitelisting in f4113cac0 (http: limit redirection to
protocol-whitelist, 2015-09-22).

Let's apply the same rules here as we do for HTTP redirects.
Namely:

  - unless http.followRedirects is set to ""always"", we will
    not follow remote redirects from http-alternates (or
    alternates) at all

  - set CURLOPT_PROTOCOLS alongside CURLOPT_REDIR_PROTOCOLS
    restrict ourselves to a known-safe set and respect any
    user-provided whitelist.

  - mention alternate object stores on stderr so that the
    user is aware another source of objects may be involved

The first item may prove to be too restrictive. The most
common use of alternates is to point to another path on the
same server. While it's possible for a single-server
redirect to be an attack, it takes a fairly obscure setup
(victim and evil repository on the same host, host speaks
dumb http, and evil repository has access to edit its own
http-alternates file).

So we could make the checks more specific, and only cover
cross-server redirects. But that means parsing the URLs
ourselves, rather than letting curl handle them. This patch
goes for the simpler approach. Given that they are only used
with dumb http, http-alternates are probably pretty rare.
And there's an escape hatch: the user can allow redirects on
a specific server by setting http.<url>.followRedirects to
""always"".

Reported-by: Jann Horn <jannh@google.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_391.diff
https://github.com/git/git/commit/50d3413740d1da599cdc0106e6e916741394cc98,06 Dec 2016,"http: make redirects more obvious

We instruct curl to always follow HTTP redirects. This is
convenient, but it creates opportunities for malicious
servers to create confusing situations. For instance,
imagine Alice is a git user with access to a private
repository on Bob's server. Mallory runs her own server and
wants to access objects from Bob's repository.

Mallory may try a few tricks that involve asking Alice to
clone from her, build on top, and then push the result:

  1. Mallory may simply redirect all fetch requests to Bob's
     server. Git will transparently follow those redirects
     and fetch Bob's history, which Alice may believe she
     got from Mallory. The subsequent push seems like it is
     just feeding Mallory back her own objects, but is
     actually leaking Bob's objects. There is nothing in
     git's output to indicate that Bob's repository was
     involved at all.

     The downside (for Mallory) of this attack is that Alice
     will have received Bob's entire repository, and is
     likely to notice that when building on top of it.

  2. If Mallory happens to know the sha1 of some object X in
     Bob's repository, she can instead build her own history
     that references that object. She then runs a dumb http
     server, and Alice's client will fetch each object
     individually. When it asks for X, Mallory redirects her
     to Bob's server. The end result is that Alice obtains
     objects from Bob, but they may be buried deep in
     history. Alice is less likely to notice.

Both of these attacks are fairly hard to pull off. There's a
social component in getting Mallory to convince Alice to
work with her. Alice may be prompted for credentials in
accessing Bob's repository (but not always, if she is using
a credential helper that caches). Attack (1) requires a
certain amount of obliviousness on Alice's part while making
a new commit. Attack (2) requires that Mallory knows a sha1
in Bob's repository, that Bob's server supports dumb http,
and that the object in question is loose on Bob's server.

But we can probably make things a bit more obvious without
any loss of functionality. This patch does two things to
that end.

First, when we encounter a whole-repo redirect during the
initial ref discovery, we now inform the user on stderr,
making attack (1) much more obvious.

Second, the decision to follow redirects is now
configurable. The truly paranoid can set the new
http.followRedirects to false to avoid any redirection
entirely. But for a more practical default, we will disallow
redirects only after the initial ref discovery. This is
enough to thwart attacks similar to (2), while still
allowing the common use of redirects at the repository
level. Since c93c92f30 (http: update base URLs when we see
redirects, 2013-09-28) we re-root all further requests from
the redirect destination, which should generally mean that
no further redirection is necessary.

As an escape hatch, in case there really is a server that
needs to redirect individual requests, the user can set
http.followRedirects to ""true"" (and this can be done on a
per-server basis via http.*.followRedirects config).

Reported-by: Jann Horn <jannh@google.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_392.diff
https://github.com/git/git/commit/6628eb41db5189c0cdfdced6d8697e7c813c5f0f,06 Dec 2016,"http: always update the base URL for redirects

If a malicious server redirects the initial ref
advertisement, it may be able to leak sha1s from other,
unrelated servers that the client has access to. For
example, imagine that Alice is a git user, she has access to
a private repository on a server hosted by Bob, and Mallory
runs a malicious server and wants to find out about Bob's
private repository.

Mallory asks Alice to clone an unrelated repository from her
over HTTP. When Alice's client contacts Mallory's server for
the initial ref advertisement, the server issues an HTTP
redirect for Bob's server. Alice contacts Bob's server and
gets the ref advertisement for the private repository. If
there is anything to fetch, she then follows up by asking
the server for one or more sha1 objects. But who is the
server?

If it is still Mallory's server, then Alice will leak the
existence of those sha1s to her.

Since commit c93c92f30 (http: update base URLs when we see
redirects, 2013-09-28), the client usually rewrites the base
URL such that all further requests will go to Bob's server.
But this is done by textually matching the URL. If we were
originally looking for ""http://mallory/repo.git/info/refs"",
and we got pointed at ""http://bob/other.git/info/refs"", then
we know that the right root is ""http://bob/other.git"".

If the redirect appears to change more than just the root,
we punt and continue to use the original server. E.g.,
imagine the redirect adds a URL component that Bob's server
will ignore, like ""http://bob/other.git/info/refs?dummy=1"".

We can solve this by aborting in this case rather than
silently continuing to use Mallory's server. In addition to
protecting from sha1 leakage, it's arguably safer and more
sane to refuse a confusing redirect like that in general.
For example, part of the motivation in c93c92f30 is
avoiding accidentally sending credentials over clear http,
just to get a response that says ""try again over https"". So
even in a non-malicious case, we'd prefer to err on the side
of caution.

The downside is that it's possible this will break a
legitimate but complicated server-side redirection scheme.
The setup given in the newly added test does work, but it's
convoluted enough that we don't need to care about it. A
more plausible case would be a server which redirects a
request for ""info/refs?service=git-upload-pack"" to just
""info/refs"" (because it does not do smart HTTP, and for some
reason really dislikes query parameters).  Right now we
would transparently downgrade to dumb-http, but with this
patch, we'd complain (and the user would have to set
GIT_SMART_HTTP=0 to fetch).

Reported-by: Jann Horn <jannh@google.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_393.diff
https://github.com/git/git/commit/3f407b7614bccffffad14fad42377dd0c3603f66,05 Dec 2016,"bisect: improve English grammar of not-ancestors message

Multiple revisions cannot be a single ancestor.

Signed-off-by: Alex Henrie <alexhenrie24@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_394.diff
https://github.com/git/git/commit/33b842a1e9bf28bcffe953ad9dcdbb0561336314,29 Nov 2016,"pull: fast-forward ""pull --rebase=true""

""git pull --rebase"" always runs ""git rebase"" after fetching the
commit to serve as the new base, even when the new base is a
descendant of the current HEAD, i.e. we haven't done any work.

In such a case, we can instead fast-forward to the new base without
invoking the rebase process.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_395.diff
https://github.com/git/git/commit/022349c3b091f2aa047f1cd12b5409d564b25324,29 Nov 2016,"trailer: avoid unnecessary splitting on lines

trailer.c currently splits lines while processing a buffer (and also
rejoins lines when needing to invoke ignore_non_trailer).

Avoid such line splitting, except when generating the strings
corresponding to trailers (for ease of use by clients - a subsequent
patch will allow other components to obtain the layout of a trailer
block in a buffer, including the trailers themselves). The main purpose
of this is to make it easy to return pointers into the original buffer
(for a subsequent patch), but this also significantly reduces the number
of memory allocations required.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",194,data/crawl/git/patch_396.diff
https://github.com/git/git/commit/aeddbfdfa48443c034a9b28b10dfddf2f71b907f,28 Nov 2016,"RelNotes: spelling and phrasing fixups

Signed-off-by: Marc Branchaud <marcnarc@xiplink.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",148,data/crawl/git/patch_397.diff
https://github.com/git/git/commit/55e9f0e5c9a918c246b7eae1fe2a2e954f6426af,28 Nov 2016,"merge-recursive: handle NULL in add_cacheinfo() correctly

1335d76e45 (""merge: avoid ""safer crlf"" during recording of merge
results"", 2016-07-08) tried to split make_cache_entry() call made
with CE_MATCH_REFRESH into a call to make_cache_entry() without one,
followed by a call to add_cache_entry(), refresh_cache() and another
add_cache_entry() as needed.  However the conversion was botched in
that it forgot that refresh_cache() can return NULL, which was
handled correctly in make_cache_entry() but in the updated code.

This fixes https://github.com/git-for-windows/git/issues/952

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_398.diff
https://github.com/git/git/commit/5b6607d23f8a262e1c0ede954f0477664934eed8,16 Nov 2016,"batch check whether submodule needs pushing into one call

We run a command for each sha1 change in a submodule. This is
unnecessary since we can simply batch all sha1's we want to check into
one command. Lets do it so we can speedup the check when many submodule
changes are in need of checking.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_399.diff
https://github.com/git/git/commit/9cfa1c260fd10dadb2dfbb62f8e120a10cabfd06,16 Nov 2016,"serialize collection of refs that contain submodule changes

We are iterating over each pushed ref and want to check whether it
contains changes to submodules. Instead of immediately checking each ref
lets first collect them and then do the check for all of them in one
revision walk.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_400.diff
https://github.com/git/git/commit/8de7eeb54b6aaa6d429b5d9c2b667847c35480ff,16 Nov 2016,"compression: unify pack.compression configuration parsing

There are three codepaths that use a variable whose name is
pack_compression_level to affect how objects and deltas sent to a
packfile is compressed.  Unlike zlib_compression_level that controls
the loose object compression, however, this variable was static to
each of these codepaths.  Two of them read the pack.compression
configuration variable, using core.compression as the default, and
one of them also allowed overriding it from the command line.

The other codepath in bulk-checkin did not pay any attention to the
configuration.

Unify the configuration parsing to git_default_config(), where we
implement the parsing of core.loosecompression and core.compression
and make the former override the latter, by moving code to parse
pack.compression and also allow core.compression to give default to
this variable.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",189,data/crawl/git/patch_401.diff
https://github.com/git/git/commit/dfbfb9f3771e9070f239458dd2e3b535b64c4012,11 Nov 2016,"fetch-pack.c: correct command at the beginning of an error message

One error message in fetch-pack.c uses 'git fetch_pack' at the beginning
which is not a git command.  Use 'git fetch-pack' instead.

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_402.diff
https://github.com/git/git/commit/4f03666ac69ec4799998f010d04916c12e38edf8,26 Oct 2016,"diff: handle sha1 abbreviations outside of repository

When generating diffs outside a repository (e.g., with ""diff
--no-index""), we may write abbreviated sha1s as part of
""--raw"" output or the ""index"" lines of ""--patch"" output.
Since we have no object database, we never find any
collisions, and these sha1s get whatever static abbreviation
length is configured (typically 7).

However, we do blindly look in "".git/objects"" to see if any
objects exist, even though we know we are not in a
repository. This is usually harmless because such a
directory is unlikely to exist, but could be wrong in rare
circumstances.

Let's instead notice when we are not in a repository and
behave as if the object database is empty (i.e., just use
the default abbrev length). It would perhaps make sense to
be conservative and show full sha1s in that case, but
showing the default abbreviation is what we've always done
(and is certainly less ugly).

Note that this does mean that:

  cd /not/a/repo
  GIT_OBJECT_DIRECTORY=/some/real/objdir git diff --no-index ...

used to look for collisions in /some/real/objdir but now
does not. This could be considered either a bugfix (we do
not look at objects if we have no repository) or a
regression, but it seems unlikely that anybody would care
much either way.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_403.diff
https://github.com/git/git/commit/d6cece51b83db5d8a523c4ba857013c4242e310e,26 Oct 2016,"diff_aligned_abbrev: use ""struct oid""

Since we're modifying this function anyway, it's a good time
to update it to the more modern ""struct oid"". We can also
drop some of the magic numbers in favor of GIT_SHA1_HEXSZ,
along with some descriptive comments.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_404.diff
https://github.com/git/git/commit/d5e3b01e5bd6b06c06dbd5d1e2257d57e6b1deb7,26 Oct 2016,"diff_unique_abbrev: rename to diff_aligned_abbrev

The word ""align"" describes how the function actually differs
from find_unique_abbrev, and will make it less confusing
when we add more diff-specific abbrevation functions that do
not do this alignment.

Since this is a globally available function, let's also move
its descriptive comment to the header file, where we
typically document function interfaces.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_405.diff
https://github.com/git/git/commit/ef2ed5013c4160284d9de18903bd4f7d0542d810,26 Oct 2016,"find_unique_abbrev: use 4-buffer ring

Some code paths want to format multiple abbreviated sha1s in
the same output line. Because we use a single static buffer
for our return value, they have to either break their output
into several calls or allocate their own arrays and use
find_unique_abbrev_r().

Intead, let's mimic sha1_to_hex() and use a ring of several
buffers, so that the return value stays valid through
multiple calls. This shortens some of the callers, and makes
it harder to for them to make a silly mistake.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_406.diff
https://github.com/git/git/commit/2cc2e70264e0fcba04f9ef791d144bbc8b501206,26 Oct 2016,"Eleventh batch for 2.11

There still are a few topics that need to go in before -rc0 which
would make the shape of the upcoming release clearer, but here is
the final batch before it happens.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/patch_407.diff
https://github.com/git/git/commit/425a28e0a4edfc39585cec6b0b6368c0ad9dbf7e,24 Oct 2016,"diff-lib: allow ita entries treated as ""not yet exist in index""

When comparing the index and the working tree to show which paths are
new, and comparing the tree recorded in the HEAD and the index to see if
committing the contents recorded in the index would result in an empty
commit, we would want the former comparison to say ""these are new paths""
and the latter to say ""there is no change"" for paths that are marked as
intent-to-add.

We made a similar attempt at d95d728a (""diff-lib.c: adjust position of
i-t-a entries in diff"", 2015-03-16), which redefined the semantics of
these two comparison modes globally, which was a disaster and had to be
reverted at 78cc1a54 (""Revert ""diff-lib.c: adjust position of i-t-a
entries in diff"""", 2015-06-23).

To make sure we do not repeat the same mistake, introduce a new internal
diffopt option so that this different semantics can be asked for only by
callers that ask it, while making sure other unaudited callers will get
the same comparison result.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_408.diff
https://github.com/git/git/commit/6bdb0083be3b42aab5dfa6bf18b447623704f7f5,24 Oct 2016,"daemon: detect and reject too-long paths

When we are checking the path via path_ok(), we use some
fixed PATH_MAX buffers. We write into them via snprintf(),
so there's no possibility of overflow, but it does mean we
may silently truncate the path, leading to potentially
confusing errors when the partial path does not exist.

We're better off to reject the path explicitly.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_409.diff
https://github.com/git/git/commit/7101e10ce7ba917d1b7a6ff73e0008c2be4a43ed,21 Oct 2016,"transport: pass summary_width down the callchain

The callchain that originates at transport_print_push_status()
eventually hits a single leaf function, print_ref_status(), that is
used to show from what old object to what new object a ref got
updated, and the width of the part that shows old and new object
names used a constant TRANSPORT_SUMMARY_WIDTH.

Teach the callchain to pass the width down from the top instead.
This allows a future enhancement to compute the necessary display
width before calling down this callchain.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_410.diff
https://github.com/git/git/commit/146245063e286d5a38b146bd5a38da958bd3957b,21 Oct 2016,"trailer: allow non-trailers in trailer block

Currently, interpret-trailers requires all lines of a trailer block to
be trailers (or comments) - if not it would not identify that block as a
trailer block, and thus create its own trailer block, inserting a blank
line.  For example:

  echo -e ""\nSigned-off-by: x\nnot trailer"" |
  git interpret-trailers --trailer ""c: d""

would result in:

  Signed-off-by: x
  not trailer

  c: d

Relax the definition of a trailer block to require that the trailers (i)
are all trailers, or (ii) contain at least one Git-generated trailer and
consists of at least 25% trailers.

  Signed-off-by: x
  not trailer
  c: d

(i) is the existing functionality. (ii) allows arbitrary lines to be
included in trailer blocks, like those in [1], and still allow
interpret-trailers to be used.

[1]
https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux-stable/+/e7d316a02f683864a12389f8808570e37fb90aa3

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",209,data/crawl/git/patch_411.diff
https://github.com/git/git/commit/fdbf4510aeb7e7b860c2ee77b8a4a3c5787fe182,21 Oct 2016,"trailer: clarify failure modes in parse_trailer

The parse_trailer function has a few modes of operation, all depending
on whether the separator is present in its input, and if yes, the
separator's position. Some of these modes are failure modes, and these
failure modes are handled differently depending on whether the trailer
line was sourced from a file or from a command-line argument.

Extract a function to find the separator, allowing the invokers of
parse_trailer to determine how to handle the failure modes instead of
making parse_trailer do it. In this function, also take in the list of
separators, so that we can distinguish between command line arguments
(which allow '=' as separator) and file input (which does not allow '='
as separator).

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_412.diff
https://github.com/git/git/commit/791eb8708f7a98c9f3924b1810c20a9c7dd4c767,21 Oct 2016,"sequencer: mark all error messages for translation

There was actually only one error message that was not yet marked for
translation.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_413.diff
https://github.com/git/git/commit/93b3df6f147fa2bf10116aaeb3597e0b6becaf35,21 Oct 2016,"sequencer: start error messages consistently with lower case

Quite a few error messages touched by this developer during the work to
speed up rebase -i started with an upper case letter, violating our
current conventions. Instead of sneaking in this fix (and forgetting
quite a few error messages), let's just have one wholesale patch fixing
all of the error messages in the sequencer.

While at it, the funny ""error: Error wrapping up..."" was changed to a
less funny, but more helpful, ""error: failed to finalize..."".

Pointed out by Junio Hamano.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_414.diff
https://github.com/git/git/commit/f7ed1953d88e3eaffbbd52e47faa73ae8640ecd7,21 Oct 2016,"sequencer: quote filenames in error messages

This makes the code consistent by fixing quite a couple of error messages.

Suggested by Jakub Narębski.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_415.diff
https://github.com/git/git/commit/2eeaf1b36becceef56dbe44a2de6b108c3e072ff,21 Oct 2016,"sequencer: remove overzealous assumption in rebase -i mode

The sequencer was introduced to make the cherry-pick and revert
functionality available as library function, with the original idea
being to extend the sequencer to also implement the rebase -i
functionality.

The test to ensure that all of the commands in the script are identical
to the overall operation does not mesh well with that.

Therefore let's disable the test in rebase -i mode.

While at it, error out early if the ""instruction sheet"" (i.e. the todo
script) could not be parsed.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_416.diff
https://github.com/git/git/commit/b5a670452c742345918e12b1d002b3502fe1de96,21 Oct 2016,"sequencer: prepare for rebase -i's commit functionality

In interactive rebases, we commit a little bit differently than the
sequencer did so far: we heed the ""author-script"", the ""message"" and the
""amend"" files in the .git/rebase-merge/ subdirectory.

Likewise, we may want to edit the commit message *even* when providing a
file containing the suggested commit message. Therefore we change the
code to not even provide a default message when we do not want any, and
to call the editor explicitly.

Also, in ""interactive rebase"" mode we want to skip reading the options
in the state directory of the cherry-pick/revert commands.

Finally, as interactive rebase's GPG settings are configured differently
from how cherry-pick (and therefore sequencer) handles them, we will
leave support for that to the next commit.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_417.diff
https://github.com/git/git/commit/e635d5ceb7bb4e51d2121b74262ea8fffd5cda4e,21 Oct 2016,"sequencer: avoid completely different messages for different actions

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_418.diff
https://github.com/git/git/commit/004fefa754a4aa3a99a5954da9fb805dbba8dbeb,21 Oct 2016,"sequencer: completely revamp the ""todo"" script parsing

When we came up with the ""sequencer"" idea, we really wanted to have
kind of a plumbing equivalent of the interactive rebase. Hence the
choice of words: the ""todo"" script, a ""pick"", etc.

However, when it came time to implement the entire shebang, somehow this
idea got lost and the sequencer was used as working horse for
cherry-pick and revert instead. So as not to interfere with the
interactive rebase, it even uses a separate directory to store its
state.

Furthermore, it also is stupidly strict about the ""todo"" script it
accepts: while it parses commands in a way that was *designed* to be
similar to the interactive rebase, it then goes on to *error out* if the
commands disagree with the overall action (cherry-pick or revert).

Finally, the sequencer code chose to deviate from the interactive rebase
code insofar that when it comes to writing the file with the remaining
commands, it *reformats* the ""todo"" script instead of just writing the
part of the parsed script that were not yet processed. This is not only
unnecessary churn, but might well lose information that is valuable to
the user (i.e. comments after the commands).

Let's just bite the bullet and rewrite the entire parser; the code now
becomes not only more elegant: it allows us to go on and teach the
sequencer how to parse *true* ""todo"" scripts as used by the interactive
rebase itself. In a way, the sequencer is about to grow up to do its
older brother's job. Better.

In particular, we choose to maintain the list of commands in an array
instead of a linked list: this is flexible enough to allow us later on to
even implement rebase -i's reordering of fixup!/squash! commits very
easily (and with a very nice speed bonus, at least on Windows).

While at it, do not stop at the first problem, but list *all* of the
problems. This will help the user when the sequencer will do `rebase
-i`'s work by allowing to address all issues in one go rather than going
back and forth until the todo list is valid.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",284,data/crawl/git/patch_419.diff
https://github.com/git/git/commit/c0246501ed02c3bd1baa0953d5a46a874edc171e,21 Oct 2016,"sequencer: future-proof read_populate_todo()

Over the next commits, we will work on improving the sequencer to the
point where it can process the todo script of an interactive rebase. To
that end, we will need to teach the sequencer to read interactive
rebase's todo file. In preparation, we consolidate all places where
that todo file is needed to call a function that we will later extend.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_420.diff
https://github.com/git/git/commit/db424979a83c11d7e3389ed505b13e7e718132ec,17 Oct 2016,"i18n: diff: mark warnings for translation

Mark rename_limit_warning and degrade_cc_to_c_warning and
rename_limit_warning for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_421.diff
https://github.com/git/git/commit/af64f20b1e753f9ede6004e8f15e28888097b874,17 Oct 2016,"i18n: credential-cache--daemon: mark advice for translation

Mark permissions_advice for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_422.diff
https://github.com/git/git/commit/87cb7845fee4f23434da8b601583dab225dd85d6,17 Oct 2016,"i18n: convert mark error messages for translation

Mark error messages about CRLF for translation.

Update test to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_423.diff
https://github.com/git/git/commit/f25dfb5e8d26204e58d60a6fc209e4ae65827d83,17 Oct 2016,"i18n: apply: mark error message for translation

Update test to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_424.diff
https://github.com/git/git/commit/86009f32bb0e17829f0178953729e78f69e831c6,17 Oct 2016,"t0040: convert all possible tests to use `test-parse-options --expect`

Use ""test-parse-options --expect"" to rewrite the tests to avoid checking
the whole variable dump by just testing what is required.

This commit is a follow-up to 8ca65aebad (""t0040: convert a few
tests to use test-parse-options --expect"", 2016-05-06).

Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/patch_425.diff
https://github.com/git/git/commit/edcc85814c87ebd7f3b1b7d3979fac3dfb84d308,17 Oct 2016,"convert: add filter.<driver>.process option

Git's clean/smudge mechanism invokes an external filter process for
every single blob that is affected by a filter. If Git filters a lot of
blobs then the startup time of the external filter processes can become
a significant part of the overall Git execution time.

In a preliminary performance test this developer used a clean/smudge
filter written in golang to filter 12,000 files. This process took 364s
with the existing filter mechanism and 5s with the new mechanism. See
details here: https://github.com/github/git-lfs/pull/1382

This patch adds the `filter.<driver>.process` string option which, if
used, keeps the external filter process running and processes all blobs
with the packet format (pkt-line) based protocol over standard input and
standard output. The full protocol is explained in detail in
`Documentation/gitattributes.txt`.

A few key decisions:

* The long running filter process is referred to as filter protocol
  version 2 because the existing single shot filter invocation is
  considered version 1.
* Git sends a welcome message and expects a response right after the
  external filter process has started. This ensures that Git will not
  hang if a version 1 filter is incorrectly used with the
  filter.<driver>.process option for version 2 filters. In addition,
  Git can detect this kind of error and warn the user.
* The status of a filter operation (e.g. ""success"" or ""error) is set
  before the actual response and (if necessary!) re-set after the
  response. The advantage of this two step status response is that if
  the filter detects an error early, then the filter can communicate
  this and Git does not even need to create structures to read the
  response.
* All status responses are pkt-line lists terminated with a flush
  packet. This allows us to send other status fields with the same
  protocol in the future.

Helped-by: Martin-Louis Bright <mlbright@gmail.com>
Reviewed-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1092,data/crawl/git/patch_426.diff
https://github.com/git/git/commit/b84be553548b6d493d6eff728f3e11b5b5f9a254,17 Oct 2016,"convert: make apply_filter() adhere to standard Git error handling

apply_filter() returns a boolean that tells the caller if it
""did convert or did not convert"". The variable `ret` was used throughout
the function to track errors whereas `1` denoted success and `0`
failure. This is unusual for the Git source where `0` denotes success.

Rename the variable and flip its value to make the function easier
readable for Git developers.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_427.diff
https://github.com/git/git/commit/edfb780cd4fe73474583016055542f5686d3d98d,17 Oct 2016,"pkt-line: add packet_write_gently()

packet_write_fmt_gently() uses format_packet() which lets the caller
only send string data via ""%s"". That means it cannot be used for
arbitrary data that may contain NULs.

Add packet_write_gently() which writes arbitrary data and does not die
in case of an error. The function is used by other pkt-line functions in
a subsequent patch.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_428.diff
https://github.com/git/git/commit/038ce90f2ff91587f2d61993f5c4c23d6fdca144,17 Oct 2016,"pkt-line: add packet_flush_gently()

packet_flush() would die in case of a write error even though for some
callers an error would be acceptable. Add packet_flush_gently() which
writes a pkt-line flush packet like packet_flush() but does not die in
case of an error. The function is used in a subsequent patch.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_429.diff
https://github.com/git/git/commit/70428d1a5209f8c9996e9a4e0cc2f7aa0f83f3e8,17 Oct 2016,"pkt-line: add packet_write_fmt_gently()

packet_write_fmt() would die in case of a write error even though for
some callers an error would be acceptable. Add packet_write_fmt_gently()
which writes a formatted pkt-line like packet_write_fmt() but does not
die in case of an error. The function is used in a subsequent patch.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_430.diff
https://github.com/git/git/commit/81c634e94f2fef0cec295f7554080c82bd6aeeb7,17 Oct 2016,"pkt-line: rename packet_write() to packet_write_fmt()

packet_write() should be called packet_write_fmt() because it is a
printf-like function that takes a format string as first parameter.

packet_write_fmt() should be used for text strings only. Arbitrary
binary data should use a new packet_write() function that is introduced
in a subsequent patch.

Suggested-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_431.diff
https://github.com/git/git/commit/255f04d604dbb331933c2354b5d15ed6715e7d6a,17 Oct 2016,"convert: quote filter names in error messages

Git filter driver commands with spaces (e.g. `filter.sh foo`) are hard
to read in error messages. Quote them to improve the readability.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_432.diff
https://github.com/git/git/commit/d1d42bf5980b2d31f43f4a54c3d98d19f879b919,14 Oct 2016,"i18n: apply: mark error messages for translation

Mark error messages for translation passed to error() and die()
functions.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_433.diff
https://github.com/git/git/commit/5886637a2fb6e22200d53bc4b86d3f7ae12ab1bc,14 Oct 2016,"i18n: apply: mark info messages for translation

Mark messages for translation printed to stderr.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_434.diff
https://github.com/git/git/commit/965d5c851ac8cea3521e805a3370c587fed78143,14 Oct 2016,"i18n: apply: mark plural string for translation

Mark plural string for translation using Q_().

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_435.diff
https://github.com/git/git/commit/87d1353a6a133aafd2ef29ba6c740a8d3d71dadb,11 Oct 2016,"contrib: add credential helper for libsecret

This is based on the existing gnome-keyring helper, but instead of
libgnome-keyring (which was specific to GNOME and is deprecated), it
uses libsecret which can support other implementations of XDG Secret
Service API.

Passes t0303-credential-external.sh.

Signed-off-by: Mantas Mikulėnas <grawity@gmail.com>
Reviewed-by: Dennis Kaarsemaker <dennis@kaarsemaker.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",395,data/crawl/git/patch_436.diff
https://github.com/git/git/commit/2564d994c9c91aea58d59565d68d42bbc017f536,10 Oct 2016,"tmp-objdir: introduce API for temporary object directories

Once objects are added to the object database by a process,
they cannot easily be deleted, as we don't know what other
processes may have started referencing them. We have to
clean them up with git-gc, which will apply the usual
reachability and grace-period checks.

This patch provides an alternative: it helps callers create
a temporary directory inside the object directory, and a
temporary environment which can be passed to sub-programs to
ask them to write there (the original object directory
remains accessible as an alternate of the temporary one).

See tmp-objdir.h for details on the API.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/patch_437.diff
https://github.com/git/git/commit/087b6d584062f5b704356286d6445bcc84d686fb,10 Oct 2016,"sha1_file: always allow relative paths to alternates

We recursively expand alternates repositories, so that if A
borrows from B which borrows from C, A can see all objects.

For the root object database, we allow relative paths, so A
can point to B as ""../B/objects"". However, we currently do
not allow relative paths when recursing, so B must use an
absolute path to reach C.

That is an ancient protection from c2f493a (Transitively
read alternatives, 2006-05-07) that tries to avoid adding
the same alternate through two different paths. Since
5bdf0a8 (sha1_file: normalize alt_odb path before comparing
and storing, 2011-09-07), we use a normalized absolute path
for each alt_odb entry.

This means that in most cases the protection is no longer
necessary; we will detect the duplicate no matter how we got
there (but see below).  And it's a good idea to get rid of
it, as it creates an unnecessary complication when setting
up recursive alternates (B has to know that A is going to
borrow from it and make sure to use an absolute path).

Note that our normalization doesn't actually look at the
filesystem, so it can still be fooled by crossing symbolic
links. But that's also true of absolute paths, so it's not a
good reason to disallow only relative paths (it's
potentially a reason to switch to real_path(), but that's a
separate and non-trivial change).

We adjust the test script here to demonstrate that this now
works, and add new tests to show that the normalization does
indeed suppress duplicates.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_438.diff
https://github.com/git/git/commit/5fe849d651e259af58f29f9cfb1b1405154ffacc,10 Oct 2016,"count-objects: report alternates via verbose mode

There's no way to get the list of alternates that git
computes internally; our tests only infer it based on which
objects are available. In addition to testing, knowing this
list may be helpful for somebody debugging their alternates
setup.

Let's add it to the ""count-objects -v"" output. We could give
it a separate flag, but there's not really any need.
""count-objects -v"" is already a debugging catch-all for the
object database, its output is easily extensible to new data
items, and printing the alternates is not expensive (we
already had to find them to count the objects).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_439.diff
https://github.com/git/git/commit/f7b7774f34b86fed8a2e9554a9fe865c62a0a5eb,10 Oct 2016,"fill_sha1_file: write into a strbuf

It's currently the responsibility of the caller to give
fill_sha1_file() enough bytes to write into, leading them to
manually compute the required lengths. Instead, let's just
write into a strbuf so that it's impossible to get this
wrong.

The alt_odb caller already has a strbuf, so this makes
things strictly simpler. The other caller, sha1_file_name(),
uses a static PATH_MAX buffer and dies when it would
overflow. We can convert this to a static strbuf, which
means our allocation cost is amortized (and as a bonus, we
no longer have to worry about PATH_MAX being too short for
normal use).

This does introduce some small overhead in fill_sha1_file(),
as each strbuf_addchar() will check whether it needs to
grow. However, between the optimization in fec501d
(strbuf_addch: avoid calling strbuf_grow, 2015-04-16) and
the fact that this is not generally called in a tight loop
(after all, the next step is typically to access the file!)
this probably doesn't matter. And even if it did, the right
place to micro-optimize is inside fill_sha1_file(), by
calling a single strbuf_grow() there.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_440.diff
https://github.com/git/git/commit/4ea82473aa310de7543141f96c2e6b23ef9fcd4c,10 Oct 2016,"link_alt_odb_entry: refactor string handling

The string handling in link_alt_odb_entry() is mostly an
artifact of the original version, which took the path as a
ptr/len combo, and did not have a NUL-terminated string
until we created one in the alternate_object_database
struct.  But since 5bdf0a8 (sha1_file: normalize alt_odb
path before comparing and storing, 2011-09-07), the first
thing we do is put the path into a strbuf, which gives us
some easy opportunities for cleanup.

In particular:

  - we call strlen(pathbuf.buf), which is silly; we can look
    at pathbuf.len.

  - even though we have a strbuf, we don't maintain its
    ""len"" field when chomping extra slashes from the
    end, and instead keep a separate ""pfxlen"" variable. We
    can fix this and then drop ""pfxlen"" entirely.

  - we don't check whether the path is usable until after we
    allocate the new struct, making extra cleanup work for
    ourselves. Since we have a NUL-terminated string, we can
    bump the ""is it usable"" checks higher in the function.
    While we're at it, we can move that logic to its own
    helper, which makes the flow of link_alt_odb_entry()
    easier to follow.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_441.diff
https://github.com/git/git/commit/670c359da357639f9f9a814ed646b4d854ec5d55,10 Oct 2016,"link_alt_odb_entry: handle normalize_path errors

When we add a new alternate to the list, we try to normalize
out any redundant "".."", etc. However, we do not look at the
return value of normalize_path_copy(), and will happily
continue with a path that could not be normalized. Worse,
the normalizing process is done in-place, so we are left
with whatever half-finished working state the normalizing
function was in.

Fortunately, this cannot cause us to read past the end of
our buffer, as that working state will always leave the
NUL from the original path in place. And we do tend to
notice problems when we check is_directory() on the path.
But you can see the nonsense that we feed to is_directory
with an entry like:

  this/../../is/../../way/../../too/../../deep/../../to/../../resolve

in your objects/info/alternates, which yields:

  error: object directory
  /to/e/deep/too/way//ects/this/../../is/../../way/../../too/../../deep/../../to/../../resolve
  does not exist; check .git/objects/info/alternates.

We can easily fix this just by checking the return value.
But that makes it hard to generate a good error message,
since we're normalizing in-place and our input value has
been overwritten by cruft.

Instead, let's provide a strbuf helper that does an in-place
normalize, but restores the original contents on error. This
uses a second buffer under the hood, which is slightly less
efficient, but this is not a performance-critical code path.

The strbuf helper can also properly set the ""len"" parameter
of the strbuf before returning. Just doing:

  normalize_path_copy(buf.buf, buf.buf);

will shorten the string, but leave buf.len at the original
length. That may be confusing to later code which uses the
strbuf.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_442.diff
https://github.com/git/git/commit/75a6315f7416a2fd559d0b0c7352b4f1cd10e186,10 Oct 2016,"ls-files: add pathspec matching for submodules

Pathspecs can be a bit tricky when trying to apply them to submodules.
The main challenge is that the pathspecs will be with respect to the
superproject and not with respect to paths in the submodule.  The
approach this patch takes is to pass in the identical pathspec from the
superproject to the submodule in addition to the submodule-prefix, which
is the path from the root of the superproject to the submodule, and then
we can compare an entry in the submodule prepended with the
submodule-prefix to the pathspec in order to determine if there is a
match.

This patch also permits the pathspec logic to perform a prefix match against
submodules since a pathspec could refer to a file inside of a submodule.
Due to limitations in the wildmatch logic, a prefix match is only done
literally.  If any wildcard character is encountered we'll simply punt
and produce a false positive match.  More accurate matching will be done
once inside the submodule.  This is due to the superproject not knowing
what files could exist in the submodule.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",188,data/crawl/git/patch_443.diff
https://github.com/git/git/commit/e77aa336f116e8ff8a72d034494b3a476b78c3ee,10 Oct 2016,"ls-files: optionally recurse into submodules

Allow ls-files to recognize submodules in order to retrieve a list of
files from a repository's submodules.  This is done by forking off a
process to recursively call ls-files on all submodules. Use top-level
--super-prefix option to pass a path to the submodule which it can
use to prepend to output or pathspec matching logic.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",248,data/crawl/git/patch_444.diff
https://github.com/git/git/commit/74866d75793559e8b351a17100679f83b96972ca,10 Oct 2016,"git: make super-prefix option

Add a super-prefix environment variable 'GIT_INTERNAL_SUPER_PREFIX'
which can be used to specify a path from above a repository down to its
root.  When such a super-prefix is specified, the paths reported by Git
are prefixed with it to make them relative to that directory ""above"".
The paths given by the user on the command line
(e.g. ""git subcmd --output-file=path/to/a/file"" and pathspecs) are taken
relative to the directory ""above"" to match.

The immediate use of this option is by commands which have a
--recurse-submodule option in order to give context to submodules about
how they were invoked.  This option is currently only allowed for
builtins which support a super-prefix.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_445.diff
https://github.com/git/git/commit/4777e175de439b7ea0c435de4bb0de9ab1663c38,07 Oct 2016,"wt-status: begin error messages with lower-case

The previous code still followed the old git-pull.sh code which did not
adhere to our new convention.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_446.diff
https://github.com/git/git/commit/fd84986f467b2556e0675d1df00f83b3a323cf2e,07 Oct 2016,"wt-status: make the require_clean_work_tree() function reusable

The function used by ""git pull"" to stop the user when the working
tree has changes is useful in other places.

Let's move it into a more prominent (and into an actually reusable)
spot: wt-status.[ch].

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",156,data/crawl/git/patch_447.diff
https://github.com/git/git/commit/ea63b393ec76484690733d6f589c9e67fedbaa78,07 Oct 2016,"pull: make code more similar to the shell script again

When converting the pull command to a builtin, the
require_clean_work_tree() function was renamed and the pull-specific
parts hard-coded.

This makes it impossible to reuse the code, so let's modify the code to
make it more similar to the original shell script again.

Note: when the hint ""Please commit or stash them"" was introduced first,
Git did not have the convention of continuing error messages in lower
case, but now we do have that convention, therefore we reintroduce this
hint down-cased, obeying said convention.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_448.diff
https://github.com/git/git/commit/a23ca1b8dc42ffd4de2ef30d67ce1e21ded29886,06 Oct 2016,"Eighth batch for 2.11

Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_449.diff
https://github.com/git/git/commit/22d3b8de1b625813faec6f3d6ffe66124837b78b,05 Oct 2016,"clone: detect errors in normalize_path_copy

When we are copying the alternates from the source
repository, if we find a relative path that is too deep for
the source (e.g., ""../../../objects"" from ""/repo.git/objects""),
then normalize_path_copy will report an error and leave
trash in the buffer, which we will add to our new alternates
file. Instead, let's detect the error, print a warning, and
skip copying that alternate.

There's no need to die. The relative path is probably just
broken cruft in the source repo. If it turns out to have
been important for accessing some objects, we rely on other
parts of the clone to detect that, just as they would with a
missing object in the source repo itself (though note that
clones with ""-s"" are inherently local, which may do fewer
object-quality checks in the first place).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_450.diff
https://github.com/git/git/commit/077965f84a580b7e1de7d60ed13656bec19cc2fb,04 Oct 2016,"diff.c: refactor parse_ws_error_highlight()

Rename the function to parse_ws_error_highlight_opt(), because it is
meant to parse a command line option, and then refactor the meat of
the function into a helper function that reports the parsed result
which is typically a small unsigned int (these are OR'ed bitmask
after all), or a negative offset that indicates where in the input
string a parse error happened.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_451.diff
https://github.com/git/git/commit/26a7b2342980f2eb46b47122d1d6dfbf13ed4ccb,30 Sep 2016,"http: control GSSAPI credential delegation

Delegation of credentials is disabled by default in libcurl since
version 7.21.7 due to security vulnerability CVE-2011-2192. Which
makes troubles with GSS/kerberos authentication when delegation
of credentials is required. This can be changed with option
CURLOPT_GSSAPI_DELEGATION in libcurl with set expected parameter
since libcurl version 7.22.0.

This patch provides new configuration variable http.delegation
which corresponds to curl parameter ""--delegation"" (see man 1 curl).

The following values are supported:

* none (default).
* policy
* always

Signed-off-by: Petr Stodulka <pstodulk@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_452.diff
https://github.com/git/git/commit/8354fa3d4ca50850760ceee9054e3e7a799a4d62,27 Sep 2016,"fsck: handle bad trees like other errors

Instead of dying when fsck hits a malformed tree object, log the error
like any other and continue.  Now fsck can tell the user which tree is
bad, too.

Signed-off-by: David Turner <dturner@twosigma.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/patch_453.diff
https://github.com/git/git/commit/2edffef2337eae691a454a072e0f9b9538725317,27 Sep 2016,"tree-walk: be more specific about corrupt tree errors

When the tree-walker runs into an error, it just calls
die(), and the message is always ""corrupt tree file"".
However, we are actually covering several cases here; let's
give the user a hint about what happened.

Let's also avoid using the word ""corrupt"", which makes it
seem like the data bit-rotted on disk. Our sha1 check would
already have found that. These errors are ones of data that
is malformed in the first place.

Signed-off-by: David Turner <dturner@twosigma.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_454.diff
https://github.com/git/git/commit/5b33cb1fd733f581da07ae8afa7e9547eafd248e,27 Sep 2016,"get_short_sha1: make default disambiguation configurable

When we find ambiguous short sha1s, we may get a
disambiguation rule from our caller's context. But if we
don't, we fall back to treating all sha1s the same, even
though most projects will tend to refer only to commits by
their short sha1s.

This patch introduces a configuration option that lets the
user pick a different fallback (e.g., only commits). It's
possible that we may want to make this the default, but it's
a good idea to start as a config option for two reasons:

  1. It lets people experiment with this and see if it's a
     good idea (i.e., the ""tend to"" above is an assumption;
     we don't really know if this will break some obscure
     cases).

  2. Even if we do flip the default, it gives people an
     escape hatch if it causes problems (you can sometimes
     override it by asking for ""1234^{tree}"", but not all
     combinations are possible).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_455.diff
https://github.com/git/git/commit/1ffa26c4614720f8bb6c04703c7b65b34bd93fe3,26 Sep 2016,"get_short_sha1: list ambiguous objects on error

When the user gives us an ambiguous short sha1, we print an
error and refuse to resolve it. In some cases, the next step
is for them to feed us more characters (e.g., if they were
retyping or cut-and-pasting from a full sha1). But in other
cases, that might be all they have. For example, an old
commit message may have used a 7-character hex that was
unique at the time, but is now ambiguous.  Git doesn't
provide any information about the ambiguous objects it
found, so it's hard for the user to find out which one they
probably meant.

This patch teaches get_short_sha1() to list the sha1s of the
objects it found, along with a few bits of information that
may help the user decide which one they meant. Here's what
it looks like on git.git:

  $ git rev-parse b2e1
  error: short SHA1 b2e1 is ambiguous
  hint: The candidates are:
  hint:   b2e1196 tag v2.8.0-rc1
  hint:   b2e11d1 tree
  hint:   b2e1632 commit 2007-11-14 - Merge branch 'bs/maint-commit-options'
  hint:   b2e1759 blob
  hint:   b2e18954 blob
  hint:   b2e1895c blob
  fatal: ambiguous argument 'b2e1': unknown revision or path not in the working tree.
  Use '--' to separate paths from revisions, like this:
  'git <command> [<revision>...] -- [<file>...]'

We show the tagname for tags, and the date and subject for
commits. For trees and blobs, in theory we could dig in the
history to find the paths at which they were present. But
that's very expensive (on the order of 30s for the kernel),
and it's not likely to be all that helpful. Most short
references are to commits, so the useful information is
typically going to be that the object in question _isn't_ a
commit. So it's silly to spend a lot of CPU preemptively
digging up the path; the user can do it themselves if they
really need to.

And of course it's somewhat ironic that we abbreviate the
sha1s in the disambiguation hint. But full sha1s would cause
annoying line wrapping for the commit lines, and presumably
the user is going to just re-issue their command immediately
with the corrected sha1.

We also restrict the list to those that match any
disambiguation hint. E.g.:

  $ git rev-parse b2e1:foo
  error: short SHA1 b2e1 is ambiguous
  hint: The candidates are:
  hint:   b2e1196 tag v2.8.0-rc1
  hint:   b2e11d1 tree
  hint:   b2e1632 commit 2007-11-14 - Merge branch 'bs/maint-commit-options'
  fatal: Invalid object name 'b2e1'.

does not bother reporting the blobs, because they cannot
work as a treeish.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_456.diff
https://github.com/git/git/commit/0c99171ad2f79430eb81214d3f1d8ced3d3621e3,26 Sep 2016,"get_short_sha1: mark ambiguity error for translation

This is a human-readable message, and there's no reason it
should not be translated. While we're at it, let's drop the
period from the end, which is not our usual style.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_457.diff
https://github.com/git/git/commit/59e4e34f6977f83c3a3842178da6358a5d130eb6,26 Sep 2016,"get_short_sha1: NUL-terminate hex prefix

We store the hex prefix in a 40-byte buffer with the prefix
itself followed by 40-minus-len ""x"" characters. These x's
serve no purpose, and the lack of NUL termination makes the
prefix string annoying to use. Let's just terminate it.

Note that this is in contrast to the binary prefix, which
_must_ be zero-padded, because we look at the whole thing
during a binary search to find the first potential match in
each pack index. The loose-object hex search cannot use the
same trick because it has to do a linear walk through the
unsorted results of readdir() (and even if it could, you'd
want zeroes instead of x's).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_458.diff
https://github.com/git/git/commit/0016043bf46f4b85054c61f9000ccc58d0ef4ad7,26 Sep 2016,"get_short_sha1: refactor init of disambiguation code

The disambiguation machinery has two callers: get_short_sha1
and for_each_abbrev. Both need to repeat much of the same
setup: declaring buffers, sanity-checking lengths, preparing
the prefixes, etc.  Let's pull that into a single init
function so we can avoid repeating ourselves.

Pulling the buffers into the ""struct disambiguate_state""
isn't strictly necessary, but it does make things simpler
for the callers, who no longer have to worry about sizing
them correctly (i.e., it's an implicit requirement that
the caller provide 20- and 40-byte buffers).

And while we're touching this code, we can convert any
magic-number sizes to the more modern GIT_SHA1_* constants.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_459.diff
https://github.com/git/git/commit/259942f549eb235e9d7d095c2db8f3dc279f3958,26 Sep 2016,"get_sha1: detect buggy calls with multiple disambiguators

The get_sha1() family of functions takes a flags field, but
some of the flags are mutually exclusive. In particular, we
can only handle one disambiguating function, and the flags
quietly override each other. Let's instead detect these as
programming bugs.

Technically some of the flags are supersets of the others,
so treating COMMITTISH|TREEISH as just COMMITTISH is not
wrong, but it's a good sign the caller is confused. And
certainly asking for BLOB|TREE does not work.

We can do the check easily with some bit-twiddling, and as a
bonus, the bit-mask of disambiguators will come in handy in
a future patch.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_460.diff
https://github.com/git/git/commit/1bd1907951a42040fa14fd19e432df9cb4107180,25 Sep 2016,"init: kill set_git_dir_init()

This is a pure code move, necessary to kill the global variable git_link
later (and also helps a bit in the next patch).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_461.diff
https://github.com/git/git/commit/a9445d859e810cc193c1cdcb15fa684a5e9b7560,22 Sep 2016,"verify_packfile: check pack validity before accessing data

The verify_packfile() does not explicitly open the packfile;
instead, it starts with a sha1 checksum over the whole pack,
and relies on use_pack() to open the packfile as a side
effect.

If the pack cannot be opened for whatever reason (either
because its header information is corrupted, or perhaps
because a simultaneous repack deleted it), then use_pack()
will die(), as it has no way to return an error. This is not
ideal, as verify_packfile() otherwise tries to gently return
an error (this lets programs like git-fsck go on to check
other packs).

Instead, let's check is_pack_valid() up front, and return an
error if it fails. This will open the pack as a side effect,
and then use_pack() will later rely on our cached
descriptor, and avoid calling die().

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_462.diff
https://github.com/git/git/commit/c041c6d06a7fce3aa563d7b0c4a47feccc541400,21 Sep 2016,"i18n: notes-merge: mark die messages for translation

Update test to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_463.diff
https://github.com/git/git/commit/166e55e328a5b303031140f758a0463df331777a,21 Sep 2016,"i18n: ident: mark hint for translation

Mark env_hint for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_464.diff
https://github.com/git/git/commit/a2f05c94545a5409d4a90fcad5d495d3d758b218,21 Sep 2016,"i18n: i18n: diff: mark die messages for translation

While marking individual messages for translation, consolidate some
messages ""option 'foo' requires a value"" that is used for many
options into one by introducing a helper function to die with the
message with the option name embedded in it, and ask the translators
to localize that single message instead.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_465.diff
https://github.com/git/git/commit/68e83a5b8277adfc6f8a307bc2454bc6723717f4,21 Sep 2016,"format-patch: add ""--rfc"" for the common case of [RFC PATCH]

Add an alias for --subject-prefix='RFC PATCH', which is used
commonly in some development communities to deserve such a
short-hand.

Signed-off-by: Josh Triplett <josh@joshtriplett.org>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_466.diff
https://github.com/git/git/commit/f2b93b388ccbce342bc8b58d8581f6a077f42eff,19 Sep 2016,"i18n: connect: mark die messages for translation

Mark messages passed to die() in die_initial_contact().

Update test to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_467.diff
https://github.com/git/git/commit/4fa4b31507f28b3a6486e44b620ab36c6380cb7d,19 Sep 2016,"i18n: commit: mark message for translation

Mark message commit_utf8_warn for translation.

Update tests to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_468.diff
https://github.com/git/git/commit/e510a86c816530237c99de34ce3049043f4b5d37,15 Sep 2016,"Second batch for 2.11

Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_469.diff
https://github.com/git/git/commit/43073f89848d4683656a0770e8ee8d1e1734e6e3,15 Sep 2016,"i18n: update-index: mark warnings for translation

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_470.diff
https://github.com/git/git/commit/205d13451d52722420cba32cebd5962e0d92793e,15 Sep 2016,"i18n: show-branch: mark plural strings for translation

Mark plural string for translation using Q_().

Although we already know that the plural sentence is always used in the
English source, other languages have complex plural rules they must
comply according to the value of MAX_REVS.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_471.diff
https://github.com/git/git/commit/8a78d462c9d47a362b27b0386b40a44e192695d4,15 Sep 2016,"i18n: show-branch: mark error messages for translation

Spell the first word of messages in lowercase, following the usual
style.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_472.diff
https://github.com/git/git/commit/8ba35a2dc696c1b9eb95976a690b61d375a083d5,15 Sep 2016,"i18n: receive-pack: mark messages for translation

Mark messages refuse_unconfigured_deny_msg and
refuse_unconfigured_deny_delete_current_msg for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_473.diff
https://github.com/git/git/commit/8d79589ad61132e038dd7312ab018c6d6518ead7,15 Sep 2016,"notes: spell first word of error messages in lowercase

That's the usual style.

Update one test to reflect these changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_474.diff
https://github.com/git/git/commit/2d1252dade6cdc32be071aabddc0b9fc5ca9af46,15 Sep 2016,"i18n: notes: mark error messages for translation

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_475.diff
https://github.com/git/git/commit/765773c8397800218e7389fd3e9431cfbfdb6ad1,15 Sep 2016,"i18n: merge-recursive: mark verbose message for translation

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_476.diff
https://github.com/git/git/commit/ccf7813139f0cb8800b0490d572a22c864a2f0f6,15 Sep 2016,"i18n: merge-recursive: mark error messages for translation

Spell the first word of such error messages in lowercase,
following the usual style.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_477.diff
https://github.com/git/git/commit/ccf638015418d59aafa475b181334f12c1b916df,15 Sep 2016,"i18n: config: mark error message for translation

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_478.diff
https://github.com/git/git/commit/e3f54bff43e61934643108ee26bfe1ad0c19c6a3,15 Sep 2016,"i18n: blame: mark error messages for translation

Mark error messages for translation passed to die() function.
Change ""Cannot"" to lowercase following the usual style.

Reflect changes to test by using test_i18ngrep.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_479.diff
https://github.com/git/git/commit/610d55af0f082f6b866dc858e144c03d8ed4424c,15 Sep 2016,"add: modify already added files when --chmod is given

When the chmod option was added to git add, it was hooked up to the diff
machinery, meaning that it only works when the version in the index
differs from the version on disk.

As the option was supposed to mirror the chmod option in update-index,
which always changes the mode in the index, regardless of the status of
the file, make sure the option behaves the same way in git add.

Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/patch_480.diff
https://github.com/git/git/commit/480871e09ed2e5275b4ba16b278681e5a8c122ae,15 Sep 2016,"format-patch: show base info before email signature

Any text below the ""-- "" for the email signature gets treated as part of
the signature, and many mail clients will trim it from the quoted text
for a reply.  Move it above the signature, so people can reply to it
more easily.

Similarly, when producing the patch as a MIME attachment, the
original code placed the base info after the attached part, which
would be discarded.  Move the base info to the end of the part,
still inside the part boundary.

Add tests for the exact format of the email signature, and add tests
to ensure that the base info appears before the email signature when
producing a plain-text output, and that it appears before the part
boundary when producing a MIME attachment.

Signed-off-by: Josh Triplett <josh@joshtriplett.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_481.diff
https://github.com/git/git/commit/5efc60c12f6f63f0ab4e9601c17fdbec94e4049a,14 Sep 2016,"vcs-svn/fast_export: fix timestamp fmt specifiers

Two instances of %ld being used for unsigned longs

Signed-off-by: Mike Ralphson <mike.ralphson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_482.diff
https://github.com/git/git/commit/9f1b58842a44e8f0dc8fb4a447449cb31957b4bf,13 Sep 2016,"http: warn on curl_multi_add_handle failures

This will be useful for tracking down curl usage errors.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_483.diff
https://github.com/git/git/commit/321459439e19517c412cab1cfbb64a2749f272c9,11 Sep 2016,"cat-file: support --textconv/--filters in batch mode

With this patch, --batch can be combined with --textconv or --filters.
For this to work, the input needs to have the form

	<object name><single white space><path>

so that the filters can be chosen appropriately.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_484.diff
https://github.com/git/git/commit/7bcf341453572a227036afec76bdab451b798870,11 Sep 2016,"cat-file --textconv/--filters: allow specifying the path separately

There are circumstances when it is relatively easy to figure out the
object name for a given path, but not the name of the containing tree.
For example, when looking at a diff generated by Git, the object names
are recorded, but not the revision. As a matter of fact, the revisions
from which the diff was generated may not even exist locally.

In such a case, the user would have to generate a fake revision just to
be able to use --textconv or --filters.

Let's simplify this dramatically, because we do not really need that
revision at all: all we care about is that we know the path. In the
scenario described above, we do know the path, and we just want to
specify it separately from the object name.

Example usage:

	git cat-file --textconv --path=main.c 0f1937fd

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_485.diff
https://github.com/git/git/commit/b9e62f60115c75c5be5de593862925c8b8d7e683,11 Sep 2016,"cat-file: introduce the --filters option

The --filters option applies the convert_to_working_tree() filter for
the path when showing the contents of a regular file blob object;
the contents are written out as-is for other types of objects.

This feature comes in handy when a 3rd-party tool wants to work with
the contents of files from past revisions as if they had been checked
out, but without detouring via temporary files.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_486.diff
https://github.com/git/git/commit/6fb5acfd8f7102f53dedc887233313f233a65932,09 Sep 2016,"refs: add methods to init refs db

Alternate refs backends might not need the refs/heads directory and so
on, so we make ref db initialization part of the backend.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_487.diff
https://github.com/git/git/commit/00eebe351c4b4626a7b8e0b2dc4b7a172f3fd8d9,09 Sep 2016,"refs: create a base class ""ref_store"" for files_ref_store

We want ref_stores to be polymorphic, so invent a base class of which
files_ref_store is a derived class. For now there is exactly one
ref_store for the main repository and one for any submodules whose
references have been accessed.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",348,data/crawl/git/patch_488.diff
https://github.com/git/git/commit/ff3a299c457cb159a83df8382ed76731e03db530,09 Sep 2016,"rename_ref_available(): add docstring

And improve the internal variable names.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_489.diff
https://github.com/git/git/commit/eb398797cdc97aae15419f5ac1316440936c31f1,09 Sep 2016,"connect: advertized capability is not a ref

When cloning an empty repository served by standard git, ""git clone"" produces
the following reassuring message:

	$ git clone git://localhost/tmp/empty
	Cloning into 'empty'...
	warning: You appear to have cloned an empty repository.
	Checking connectivity... done.

Meanwhile when cloning an empty repository served by JGit, the output is more
haphazard:

	$ git clone git://localhost/tmp/empty
	Cloning into 'empty'...
	Checking connectivity... done.
	warning: remote HEAD refers to nonexistent ref, unable to checkout.

This is a common command to run immediately after creating a remote repository
as preparation for adding content to populate it and pushing. The warning is
confusing and needlessly worrying.

The cause is that, since v3.1.0.201309270735-rc1~22 (Advertise capabilities
with no refs in upload service., 2013-08-08), JGit's ref advertisement includes
a ref named capabilities^{} to advertise its capabilities on, while git's ref
advertisement is empty in this case. This allows the client to learn about the
server's capabilities and is needed, for example, for fetch-by-sha1 to work
when no refs are advertised.

This also affects ""ls-remote"". For example, against an empty repository served
by JGit:

	$ git ls-remote git://localhost/tmp/empty
	0000000000000000000000000000000000000000        capabilities^{}

Git advertises the same capabilities^{} ref in its ref advertisement for push
but since it never did so for fetch, the client didn't need to handle this
case.  Handle it.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_490.diff
https://github.com/git/git/commit/55f5704da69d3e6836620f01bee0093ad5e331e8,09 Sep 2016,"sequencer: lib'ify checkout_fast_forward()

Instead of dying there, let the caller high up in the callchain
notice the error and handle it (by dying, still).

The only callers of checkout_fast_forward(), cmd_merge(),
pull_into_void(), cmd_pull() and sequencer's fast_forward_to(),
already check the return value and handle it appropriately. With this
step, we make it notice an error return from this function.

So this is a safe conversion to make checkout_fast_forward()
callable from new callers that want it not to die, without changing
the external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_491.diff
https://github.com/git/git/commit/221675de8d7ef363944161d8d887fb1b7afdf915,09 Sep 2016,"sequencer: lib'ify save_todo()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only caller of save_todo(), pick_commits() can already return
errors, so its caller must be already prepared to handle error
returns, and with this step, we make it notice an error return from
this function.

So this is a safe conversion to make save_todo() callable
from new callers that want it not to die, without changing the
external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_492.diff
https://github.com/git/git/commit/311fd397f0e750333e0aaa8e45b9284a5227e353,09 Sep 2016,"sequencer: lib'ify save_head()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only caller of save_head(), sequencer_pick_revisions() can already
return errors, so its caller must be already prepared to handle error
returns, and with this step, we make it notice an error return from
this function.

So this is a safe conversion to make save_head() callable from new
callers that want it not to die, without changing the external
behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_493.diff
https://github.com/git/git/commit/f6e82b0d91251ac207da94952ee129642bd2d2b9,09 Sep 2016,"sequencer: lib'ify create_seq_dir()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only caller of create_seq_dir(), sequencer_pick_revisions() can
already return errors, so its caller must be already prepared to
handle error returns, and with this step, we make it notice an error
return from this function.

So this is a safe conversion to make create_seq_dir() callable from
new callers that want it not to die, without changing the external
behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_494.diff
https://github.com/git/git/commit/0d00da7bb3780c29e3d42ee255e0a09de8c43587,09 Sep 2016,"sequencer: lib'ify read_populate_opts()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only caller of read_populate_opts(), sequencer_continue() can
already return errors, so its caller must be already prepared to
handle error returns, and with this step, we make it notice an error
return from this function.

So this is a safe conversion to make read_populate_opts() callable
from new callers that want it not to die, without changing the
external behaviour of anything existing.

Note that the function git_config_from_file(), called from
read_populate_opts(), can currently still die() (in git_parse_source(),
because the do_config_from_file() function sets die_on_error = 1). We do
not try to fix that here, as it would have larger ramifications on the
config code, and we also assume that we write the opts file
programmatically, hence any parse errors would be bugs.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_495.diff
https://github.com/git/git/commit/0ae42a038da1f63a5b090b70502087817cc54f5d,09 Sep 2016,"sequencer: lib'ify read_populate_todo()

Instead of dying there, let the caller high up in the callchain
notice the error and handle it (by dying, still).

The only caller of read_populate_todo(), sequencer_continue() can
already return errors, so its caller must be already prepared to
handle error returns, and with this step, we make it notice an
error return from this function.

So this is a safe conversion to make read_populate_todo() callable
from new callers that want it not to die, without changing the
external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_496.diff
https://github.com/git/git/commit/0d9c6dc9ec316c5b117ee53b44d346349bd8b818,09 Sep 2016,"sequencer: lib'ify read_and_refresh_cache()

Instead of dying there, let the caller high up in the callchain
notice the error and handle it (by dying, still).

There are two call sites of read_and_refresh_cache(), one of which is
pick_commits(), whose callers were already prepared to do the right
thing given an ""error"" return from it by an earlier patch, so the
conversion is safe.

The other one, sequencer_pick_revisions() was also prepared to relay
an error return back to its caller in all remaining cases in an
earlier patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_497.diff
https://github.com/git/git/commit/c3e8618c1f26f9b6b658d02a09530ae8eb85fc04,09 Sep 2016,"sequencer: lib'ify prepare_revs()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only caller of prepare_revs(), walk_revs_populate_todo() was just
taught to return errors, after verifying that its callers are prepared
to handle error returns, and with this step, we make it notice an
error return from this function.

So this is a safe conversion to make prepare_revs() callable from new
callers that want it not to die, without changing the external
behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_498.diff
https://github.com/git/git/commit/f74087f6ed21e65a926cb4facfa39d142eeffa96,09 Sep 2016,"sequencer: lib'ify do_pick_commit()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only two callers of do_pick_commit(), pick_commits() and
single_pick() already check the return value and pass it on to their
callers, so their callers must be already prepared to handle error
returns, and with this step, we make it notice an error return from
this function.

So this is a safe conversion to make do_pick_commit() callable from
new callers that want it not to die, without changing the external
behaviour of anything existing.

While at it, remove the superfluous space.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_499.diff
https://github.com/git/git/commit/c527b55e74181291da9bf9d6ca4cd2f7133f934b,09 Sep 2016,"sequencer: lib'ify do_recursive_merge()

Instead of dying there, let the caller high up in the callchain
notice the error and handle it (by dying, still).

The only caller of do_recursive_merge(), do_pick_commit() already
checks the return value and passes it on to its callers, so its caller
must be already prepared to handle error returns, and with this step,
we make it notice an error return from this function.

So this is a safe conversion to make do_recursive_merge() callable
from new callers that want it not to die, without changing the
external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_500.diff
https://github.com/git/git/commit/4ef3d8f0336d4d1d5a57de9ac7c0cfdb09b974b1,09 Sep 2016,"sequencer: lib'ify write_message()

Instead of dying there, let the caller high up in the callchain
notice the error and handle it (by dying, still).

The only caller of write_message(), do_pick_commit() already checks
the return value and passes it on to its callers, so its caller must
be already prepared to handle error returns, and with this step, we
make it notice an error return from this function.

So this is a safe conversion to make write_message() callable
from new callers that want it not to die, without changing the
external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_501.diff
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/patch_502.diff
https://github.com/git/git/commit/ca9b37e5a8a76b7b5c9990481ce4f9894dd40392,08 Sep 2016,"diff: remove dead code

When `len < 1`, len has to be 0 or negative, emit_line will then remove the
first character and by then `len` would be negative. As this doesn't
happen, it is safe to assume it is dead code.

This continues to simplify the code, which was started in b8d9c1a66b
(2009-09-03,  diff.c: the builtin_diff() deals with only two-file
comparison).

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_503.diff
https://github.com/git/git/commit/fb33b62ca6e6dbfa8a5330cb0535fe122e250b5f,08 Sep 2016,"diff.c: use diff_options directly

The value of `ecbdata->opt` is accessible via the short variable `o`
already, so let's use that instead.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_504.diff
https://github.com/git/git/commit/5cb5fe4ae0f9329843c9b028b45df9c6b987c851,08 Sep 2016,"transport: report missing submodule pushes consistently on stderr

The surrounding advice is printed to stderr, but the list of submodules
is not. Make the report consistent by reporting everything to stderr.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_505.diff
https://github.com/git/git/commit/3a5d7c55f76681ad9dcef8564275217881c9ace0,07 Sep 2016,"builtin/reset: convert to use struct object_id

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_506.diff
https://github.com/git/git/commit/031cee5b73caa25c1e2e75ead641230927bb272d,07 Sep 2016,"builtin/commit-tree: convert to struct object_id

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_507.diff
https://github.com/git/git/commit/8c88769ba422e451fb50eb2ea843233580befed4,07 Sep 2016,"builtin/am: convert to struct object_id

Convert uses of unsigned char [20] to struct object_id.  Rename the
generically-named ""ptr"" to ""old_oid"" and make it const.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_508.diff
https://github.com/git/git/commit/110d26fce8a9912d457c091faf14be9cbc22e3b8,07 Sep 2016,"builtin/blame: convert file to use struct object_id

Convert this file to use struct object_id, and additionally convert some
uses of the constant 40 to GIT_SHA1_HEXSZ.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_509.diff
https://github.com/git/git/commit/d449347d080cd97a9d6dc029014383d4817e34bf,07 Sep 2016,"Convert read_mmblob to take struct object_id.

Since all of its callers have been updated, convert read_mmblob to take
a pointer to struct object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_510.diff
https://github.com/git/git/commit/e910bb1e79d53d43d07013b4d7e58c9f3ec53c8d,07 Sep 2016,"notes-merge: convert struct notes_merge_pair to struct object_id

Convert each of this structure's members from an unsigned char array to
a struct object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",127,data/crawl/git/patch_511.diff
https://github.com/git/git/commit/63ecb99e0d05bd4b73d14f439e489e70176fad43,07 Sep 2016,"builtin/cat-file: convert some static functions to struct object_id

Convert all of the static functions that are not callbacks to use struct
object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_512.diff
https://github.com/git/git/commit/cd4f77beb7c7dcb996e08f1eae566802d4056a6c,07 Sep 2016,"builtin/cat-file: convert struct expand_data to use struct object_id

Convert struct cache_entry to use struct object_id by applying the
following semantic patch and the object_id transforms from contrib,
plus the actual change to the struct:

@@
struct expand_data E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct expand_data *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct expand_data E1;
@@
- E1.delta_base_sha1
+ E1.delta_base_oid.hash

@@
struct expand_data *E1;
@@
- E1->delta_base_sha1
+ E1->delta_base_oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_513.diff
https://github.com/git/git/commit/d801627b0c66138eab33a1cf8cd61d056ee946f1,07 Sep 2016,"builtin/log: convert some static functions to use struct object_id

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_514.diff
https://github.com/git/git/commit/99d1a9861ae88595e7386c453b6b38573a8a570c,07 Sep 2016,"cache: convert struct cache_entry to use struct object_id

Convert struct cache_entry to use struct object_id by applying the
following semantic patch and the object_id transforms from contrib, plus
the actual change to the struct:

@@
struct cache_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct cache_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",148,data/crawl/git/patch_515.diff
https://github.com/git/git/commit/edfac5ebffd41b1f83b31d042e9534a0254a05fe,07 Sep 2016,"builtin/am: use apply API in run_apply()

This replaces run_apply() implementation with a new one that
uses the apply API that has been previously prepared in
apply.c and apply.h.

This shoud improve performance a lot in certain cases.

As the previous implementation was creating a new `git apply`
process to apply each patch, it could be slow on systems like
Windows where it is costly to create new processes.

Also the new `git apply` process had to read the index from
disk, and when the process was done the calling process
discarded its own index and read back from disk the new
index that had been created by the `git apply` process.

This could be very inefficient with big repositories that
have big index files, especially when the system decided
that it was a good idea to run the `git apply` processes on
a different processor core.

Also eliminating index reads enables further performance
improvements by using:

`git update-index --split-index`

For example here is a benchmark of a multi hundred commit
rebase on the Linux kernel on a Debian laptop with SSD:

command: git rebase --onto 1993b17 52bef0c 29dde7c

Vanilla ""next"" without split index:                1m54.953s
Vanilla ""next"" with split index:                   1m22.476s
This series on top of ""next"" without split index:  1m12.034s
This series on top of ""next"" with split index:     0m15.678s

(using branch ""next"" from mid April 2016.)

Benchmarked-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_516.diff
https://github.com/git/git/commit/b4290342dd2d957cbcdb100c7d847802746b0730,07 Sep 2016,"apply: pass apply state to build_fake_ancestor()

To libify git apply functionality, we will need to read from a
different index file in get_current_sha1(). This index file will be
stored in ""struct apply_state"", so let's pass the state to
build_fake_ancestor() which will later pass it to get_current_sha1().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_517.diff
https://github.com/git/git/commit/a46160d27ebdcd609aeae60b6163548af337d280,07 Sep 2016,"apply: make it possible to silently apply

This changes 'int apply_verbosely' into 'enum apply_verbosity', and
changes the possible values of the variable from a bool to
a tristate.

The previous 'false' state is changed into 'verbosity_normal'.
The previous 'true' state is changed into 'verbosity_verbose'.

The new added state is 'verbosity_silent'. It should prevent
anything to be printed on both stderr and stdout.

This is needed because `git am` wants to first call apply
functionality silently, if it can then fall back on 3-way merge
in case of error.

Printing on stdout, and calls to warning() or error() are not
taken care of in this patch, as that will be done in following
patches.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_518.diff
https://github.com/git/git/commit/90875eca5a0b227e6a1be3ccece0a3da5e72017f,07 Sep 2016,"apply: use error_errno() where possible

To avoid possible mistakes and to uniformly show the errno
related messages, let's use error_errno() where possible.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_519.diff
https://github.com/git/git/commit/603752a88df398cbe6cad449b9fbd49aa28dfa20,07 Sep 2016,"builtin/apply: make create_one_file() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of exit()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", create_one_file() should return -1 instead of
calling exit().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_520.diff
https://github.com/git/git/commit/739d8a16b5f1fefc42177c4619605c8cddb3a094,07 Sep 2016,"builtin/apply: make try_create_file() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", try_create_file() should return -1 in case of
error.

Unfortunately try_create_file() currently returns -1 to signal a
recoverable error. To fix that, let's make it return 1 in case of
a recoverable error and -1 in case of an unrecoverable error.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_521.diff
https://github.com/git/git/commit/b773ddea2cd3b08cb5654884f26c69b46e2d0c50,07 Sep 2016,"pack-objects: walk tag chains for --include-tag

When pack-objects is given --include-tag, it peels each tag
ref down to a non-tag object, and if that non-tag object is
going to be packed, we include the tag, too. But what
happens if we have a chain of tags (e.g., tag ""A"" points to
tag ""B"", which points to commit ""C"")?

We'll peel down to ""C"" and realize that we want to include
tag ""A"", but we do not ever consider tag ""B"", leading to a
broken pack (assuming ""B"" was not otherwise selected).
Instead, we have to walk the whole chain, adding any tags we
find to the pack.

Interestingly, it doesn't seem possible to trigger this
problem with ""git fetch"", but you can with ""git clone
--single-branch"". The reason is that we generate the correct
pack when the client explicitly asks for ""A"" (because we do
a real reachability analysis there), and ""fetch"" is more
willing to do so. There are basically two cases:

  1. If ""C"" is already a ref tip, then the client can deduce
     that it needs ""A"" itself (via find_non_local_tags), and
     will ask for it explicitly rather than relying on the
     include-tag capability. Everything works.

  2. If ""C"" is not already a ref tip, then we hope for
     include-tag to send us the correct tag. But it doesn't;
     it generates a broken pack. However, the next step is
     to do a follow-up run of find_non_local_tags(),
     followed by fetch_refs() to backfill any tags we
     learned about.

     In the normal case, fetch_refs() calls quickfetch(),
     which does a connectivity check and sees we have no
     new objects to fetch. We just write the refs.

     But for the broken-pack case, the connectivity check
     fails, and quickfetch will follow-up with the remote,
     asking explicitly for each of the ref tips. This picks
     up the missing object in a new pack.

For a regular ""git clone"", we are similarly OK, because we
explicitly request all of the tag refs, and get a correct
pack. But with ""--single-branch"", we kick in tag
auto-following via ""include-tag"", but do _not_ do a
follow-up backfill. We just take whatever the server sent us
via include-tag and write out tag refs for any tag objects
we were sent. So prior to c6807a4 (clone: open a shortcut
for connectivity check, 2013-05-26), we actually claimed the
clone was a success, but the result was silently
corrupted!  Since c6807a4, index-pack's connectivity
check catches this case, and we correctly complain.

The included test directly checks that pack-objects does not
generate a broken pack, but also confirms that ""clone
--single-branch"" does not hit the bug.

Note that tag chains introduce another interesting question:
if we are packing the tag ""B"" but not the commit ""C"", should
""A"" be included?

Both before and after this patch, we do not include ""A"",
because the initial peel_ref() check only knows about the
bottom-most level, ""C"". To realize that ""B"" is involved at
all, we would have to switch to an incremental peel, in
which we examine each tagged object, asking if it is being
packed (and including the outer tag if so).

But that runs contrary to the optimizations in peel_ref(),
which avoid accessing the objects at all, in favor of using
the value we pull from packed-refs. It's OK to walk the
whole chain once we know we're going to include the tag (we
have to access it anyway, so the effort is proportional to
the pack we're generating). But for the initial selection,
we have to look at every ref. If we're only packing a few
objects, we'd still have to parse every single referenced
tag object just to confirm that it isn't part of a tag
chain.

This could be addressed if packed-refs stored the complete
tag chain for each peeled ref (in most cases, this would be
the same cost as now, as each ""chain"" is only a single
link). But given the size of that project, it's out of scope
for this fix (and probably nobody cares enough anyway, as
it's such an obscure situation). This commit limits itself
to just avoiding the creation of a broken pack.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_522.diff
https://github.com/git/git/commit/12cfa792b8657cfd37523df83df0a83d987570a5,02 Sep 2016,"symbolic-ref -d: do not allow removal of HEAD

If you delete the symbolic-ref HEAD from a repository, Git no longer
considers the repository valid, and even ""git symbolic-ref HEAD
refs/heads/master"" would not be able to recover from that state
(although ""git init"" can, but that is a sure sign that you are
talking about a ""broken"" repository).

In the spirit similar to afe5d3d5 (""symbolic ref: refuse non-ref
targets in HEAD"", 2009-01-29), forbid removal of HEAD to avoid
corrupting a repository.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_523.diff
https://github.com/git/git/commit/fd47ae6a5b9cc0cfc56c1f7c43db612d26ca4b75,01 Sep 2016,"diff: teach diff to display submodule difference with an inline diff

Teach git-diff and friends a new format for displaying the difference
of a submodule. The new format is an inline diff of the contents of the
submodule between the commit range of the update. This allows the user
to see the actual code change caused by a submodule update.

Add tests for the new format and option.

Signed-off-by: Jacob Keller <jacob.keller@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",884,data/crawl/git/patch_524.diff
https://github.com/git/git/commit/8e6df65015f9a947d9ccca8950c2d60a4600cba2,01 Sep 2016,"submodule: refactor show_submodule_summary with helper function

A future patch is going to add a new submodule diff format which
displays an inline diff of the submodule changes. To make this easier,
and to ensure that both submodule diff formats use the same initial
header, factor out show_submodule_header() function which will print the
current submodule header line, and then leave the show_submodule_summary
function to lookup and print the submodule log format.

This does create one format change in that ""(revision walker failed)""
will now be displayed on its own line rather than as part of the message
because we no longer perform this step directly in the header display
flow. However, this is a rare case as most causes of the failure will be
due to a missing commit which we already check for and avoid previously.
flow. However, this is a rare case and shouldn't impact much.

Signed-off-by: Jacob Keller <jacob.keller@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",115,data/crawl/git/patch_525.diff
https://github.com/git/git/commit/af74128f4a447678daae4d59069fba8a0c797210,30 Aug 2016,"help: introduce option --exclude-guides

Introduce option --exclude-guides to the help command.  With this option
being passed, ""git help"" will open man pages only for actual commands.

Since we know it is a command, we can use function help_unknown_command
to give the user advice on typos.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_526.diff
https://github.com/git/git/commit/b9b946d4a4e9e30bc0dba9ce3ff81ab3d3666632,29 Aug 2016,"sequencer: lib'ify sequencer_pick_revisions()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The function sequencer_pick_revisions() has only two callers,
cmd_revert() and cmd_cherry_pick(), both of which check the return
value and react appropriately upon errors.

So this is a safe conversion to make sequencer_pick_revisions()
callable from new callers that want it not to die, without changing
the external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_527.diff
https://github.com/git/git/commit/23b250ab0f041bba7af4ba8eb1a686f6850677a6,29 Aug 2016,"diff-highlight: add some tests

Signed-off-by: Brian Henderson <henderson.bj@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/patch_528.diff
https://github.com/git/git/commit/5ad218673328262839542b841b505c78132857e7,24 Aug 2016,"unpack-objects: add --max-input-size=<size> option

When receiving a pack-file, it can be useful to abort the
`git unpack-objects`, if the pack-file is too big.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_529.diff
https://github.com/git/git/commit/411481be6f27fb1ae8e2263d1e686357226391a3,24 Aug 2016,"index-pack: add --max-input-size=<size> option

When receiving a pack-file, it can be useful to abort the
`git index-pack`, if the pack-file is too big.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_530.diff
https://github.com/git/git/commit/078fe30523f6361849a895999c04cf5f377a1656,24 Aug 2016,"i18n: simplify numeric error reporting

Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_531.diff
https://github.com/git/git/commit/e8adf23d1ee97b57c8aea32ee8365203b77c0e42,23 Aug 2016,"xdl_change_compact(): introduce the concept of a change group

The idea of xdl_change_compact() is fairly simple:

* Proceed through groups of changed lines in the file to be compacted,
  keeping track of the corresponding location in the ""other"" file.

* If possible, slide the group up and down to try to give the most
  aesthetically pleasing diff. Whenever it is slid, the current location
  in the other file needs to be adjusted.

But these simple concepts are obfuscated by a lot of index handling that
is written in terse, subtle, and varied patterns. I found it very hard
to convince myself that the function was correct.

So introduce a ""struct group"" that represents a group of changed lines
in a file. Add some functions that perform elementary operations on
groups:

* Initialize a group to the first group in a file
* Move to the next or previous group in a file
* Slide a group up or down

Even though the resulting code is longer, I think it is easier to
understand and review. Its performance is not changed
appreciably (though it would be if `group_next()` and `group_previous()`
were not inlined).

...and in fact, the rewriting helped me discover another bug in the
--compaction-heuristic code: The update of blank_lines was never done
for the highest possible position of the group. This means that it could
fail to slide the group to its highest possible position, even if that
position had a blank line as its last line. So for example, it yielded
the following diff:

    $ git diff --no-index --compaction-heuristic a.txt b.txt
    diff --git a/a.txt b/b.txt
    index e53969f..0d60c5fe 100644
    --- a/a.txt
    +++ b/b.txt
    @@ -1,3 +1,7 @@
     1
     A
    +
    +B
    +
    +A
     2

when in fact the following diff is better (according to the rules of
--compaction-heuristic):

    $ git diff --no-index --compaction-heuristic a.txt b.txt
    diff --git a/a.txt b/b.txt
    index e53969f..0d60c5fe 100644
    --- a/a.txt
    +++ b/b.txt
    @@ -1,3 +1,7 @@
     1
    +A
    +
    +B
    +
     A
     2

The new code gives the bottom answer.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",293,data/crawl/git/patch_532.diff
https://github.com/git/git/commit/6db5967d4e6640c5a3ee3cde151c5fdde5ab508f,19 Aug 2016,"Revert ""display HTML in default browser using Windows' shell API""

Since 4804aab (help (Windows): Display HTML in default browser using
Windows' shell API, 2008-07-13), Git for Windows used to call
`ShellExecute()` to launch the default Windows handler for `.html`
files.

The idea was to avoid going through a shell script, for performance
reasons.

However, this change ignores the `help.browser` config setting. Together
with browsing help not being a performance-critical operation, let's
just revert that patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_533.diff
https://github.com/git/git/commit/31224cbdc723d78a310b4cdbbd5abcfcbd44a4e5,18 Aug 2016,"clone: recursive and reference option triggers submodule alternates

When `--recursive` and `--reference` is given, it is reasonable to
expect that the submodules are created with references to the submodules
of the given alternate for the superproject.

  An initial attempt to do this was presented to the mailing list, which
  used flags that are passed around (""--super-reference"") that instructed
  the submodule clone to look for a reference in the submodules of the
  referenced superproject. This is not well thought out, as any further
  `submodule update` should also respect the initial setup.

  When a new  submodule is added to the superproject and the alternate
  of the superproject does not know about that submodule yet, we rather
  error out informing the user instead of being unclear if we did or did
  not use a submodules alternate.

To solve this problem introduce new options that store the configuration
for what the user wanted originally.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",176,data/crawl/git/patch_534.diff
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/patch_535.diff
https://github.com/git/git/commit/f7415b4d71150d5c2d52f87c8792591237aaf00e,15 Aug 2016,"clone: implement optional references

In a later patch we want to try to create alternates for submodules,
but they might not exist in the referenced superproject. So add a way
to skip the non existing references and report them.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_536.diff
https://github.com/git/git/commit/9eeea7d2bc8132cfaa1b79271c077e80317f3ae1,15 Aug 2016,"clone: factor out checking for an alternate path

In a later patch we want to determine if a path is suitable as an
alternate from other commands than builtin/clone. Move the checking
functionality of `add_one_reference` to `compute_alternate_path` that is
defined in cache.h.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/patch_537.diff
https://github.com/git/git/commit/a0ad53c18100226cb1a138cb9b3bc3615170be8f,14 Aug 2016,"convert: Correct NNO tests and missing `LF will be replaced by CRLF`

When a non-reversible CRLF conversion is done in ""git add"",
a warning is printed on stderr (or Git dies, depending on checksafe)

The function commit_chk_wrnNNO() in t0027 was written to test this,
but did the wrong thing: Instead of looking at the warning
from ""git add"", it looked at the warning from ""git commit"".

This is racy because ""git commit"" may not have to do CRLF conversion
at all if it can use the sha1 value from the index (which depends on
whether ""add"" and ""commit"" run in a single second).

Correct t0027 and replace the commit for each and every file with a commit
of all files in one go.
The function commit_chk_wrnNNO() should be renamed in a separate commit.

Now that t0027 does the right thing, it detects a bug in covert.c:
This sequence should generate the warning `LF will be replaced by CRLF`,
but does not:

$ git init
$ git config core.autocrlf false
$ printf ""Line\r\n"" >file
$ git add file
$ git commit -m ""commit with CRLF""
$ git config core.autocrlf true
$ printf ""Line\n"" >file
$ git add file

""git add"" calls crlf_to_git() in convert.c, which calls check_safe_crlf().
When has_cr_in_index(path) is true, crlf_to_git() returns too early and
check_safe_crlf() is not called at all.

Factor out the code which determines if ""git checkout"" converts LF->CRLF
into will_convert_lf_to_crlf().

Update the logic around check_safe_crlf() and ""simulate"" the possible
LF->CRLF conversion at ""git checkout"" with help of will_convert_lf_to_crlf().
Thanks to Jeff King <peff@peff.net> for analyzing t0027.

Reported-By: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_538.diff
https://github.com/git/git/commit/b3dfeebb92630c54db1e4f03dbcff0e05208c4c1,11 Aug 2016,"rebase: avoid computing unnecessary patch IDs

The `rebase` family of Git commands avoid applying patches that were
already integrated upstream. They do that by using the revision walking
option that computes the patch IDs of the two sides of the rebase
(local-only patches vs upstream-only ones) and skipping those local
patches whose patch ID matches one of the upstream ones.

In many cases, this causes unnecessary churn, as already the set of
paths touched by a given commit would suffice to determine that an
upstream patch has no local equivalent.

This hurts performance in particular when there are a lot of upstream
patches, and/or large ones.

Therefore, let's introduce the concept of a ""diff-header-only"" patch ID,
compare those first, and only evaluate the ""full"" patch ID lazily.

Please note that in contrast to the ""full"" patch IDs, those
""diff-header-only"" patch IDs are prone to collide with one another, as
adjacent commits frequently touch the very same files. Hence we now
have to be careful to allow multiple hash entries with the same hash.
We accomplish that by using the hashmap_add() function that does not even
test for hash collisions.  This also allows us to evaluate the full patch ID
lazily, i.e. only when we found commits with matching diff-header-only
patch IDs.

We add a performance test that demonstrates ~1-6% improvement.  In
practice this will depend on various factors such as how many upstream
changes and how big those changes are along with whether file system
caches are cold or warm.  As Git's test suite has no way of catching
performance regressions, we also add a regression test that verifies
that the full patch ID computation is skipped when the diff-header-only
computation suffices.

Signed-off-by: Kevin Willford <kcwillford@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_539.diff
https://github.com/git/git/commit/69e1609f812d5accc1b54f737faba354f5bd85db,11 Aug 2016,"builtin/apply: make add_index_file() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", add_index_file() should return -1 instead of
calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_540.diff
https://github.com/git/git/commit/a902edceebd0a25a307163f050326bda8f494204,11 Aug 2016,"builtin/apply: make add_conflicted_stages_file() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", add_conflicted_stages_file() should return -1
instead of calling die().

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_541.diff
https://github.com/git/git/commit/6e8df314692105e7d3e69f548440e4b817bf3211,11 Aug 2016,"builtin/apply: make remove_file() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", remove_file() should return -1 instead of
calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_542.diff
https://github.com/git/git/commit/fe41b8022560e24c1617cc8b3bd11b72bd1ff4bd,11 Aug 2016,"builtin/apply: make build_fake_ancestor() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", build_fake_ancestor() should return -1 instead
of calling die().

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_543.diff
https://github.com/git/git/commit/119ab159e65b229feb3851334441ca24aab131ba,11 Aug 2016,"builtin/apply: change die_on_unsafe_path() to check_unsafe_path()

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", die_on_unsafe_path() should return a negative
integer instead of calling die(), so while doing that let's change
its name to check_unsafe_path().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_544.diff
https://github.com/git/git/commit/dbf1b5fb6a86acafd8294e98b464e2aa370fdde0,11 Aug 2016,"builtin/apply: make gitdiff_*() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", gitdiff_*() functions should return -1 instead
of calling die().

A previous patch made it possible for gitdiff_*() functions to
return -1 in case of error. Let's take advantage of that to
make gitdiff_verify_name() return -1 on error, and to have
gitdiff_oldname() and gitdiff_newname() directly return
what gitdiff_verify_name() returns.

Helped-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_545.diff
https://github.com/git/git/commit/9724e6ff48506323ab897e2d9f8d27febd4d9bb0,11 Aug 2016,"builtin/apply: make parse_traditional_patch() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", parse_traditional_patch() should return -1
instead of calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_546.diff
https://github.com/git/git/commit/fef7ba5353095e87b3bcd712fa15eb71e1f53b30,11 Aug 2016,"builtin/apply: make apply_all_patches() return 128 or 1 on error

To finish libifying the apply functionality, apply_all_patches() should not
die() or exit() in case of error, but return either 128 or 1, so that it
gives the same exit code as when die() or exit(1) is called. This way
scripts relying on the exit code don't need to be changed.

While doing that we must take care that file descriptors are properly closed
and, if needed, reset to a sensible value.

Also, according to the lockfile API, when finished with a lockfile, one
should either commit it or roll it back.

This is even more important now that the same lockfile can be passed
to init_apply_state() many times to be reused by series of calls to
the apply lib functions.

Helped-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Helped-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_547.diff
https://github.com/git/git/commit/b6446d54ec70817ddd96b5c9668dd74a996719bf,11 Aug 2016,"builtin/apply: move check_apply_state() to apply.c

To libify `git apply` functionality we must make check_apply_state()
usable outside ""builtin/apply.c"".

Let's do that by moving it into ""apply.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_548.diff
https://github.com/git/git/commit/f36538d88b12595d527c60ae1b882c89bb5d1b2a,11 Aug 2016,"builtin/apply: make check_apply_state() return -1 instead of die()ing

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", check_apply_state() should return -1 instead of
calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_549.diff
https://github.com/git/git/commit/bb493a5c147a4b60f0f412a71bf9236ede4a560c,11 Aug 2016,"builtin/apply: move init_apply_state() to apply.c

To libify `git apply` functionality we must make init_apply_state()
usable outside ""builtin/apply.c"".

Let's do that by moving it into a new ""apply.c"".

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/patch_550.diff
https://github.com/git/git/commit/f95fdc256b4732e6363823daa707ea6058e6db8e,11 Aug 2016,"builtin/apply: make parse_ignorewhitespace_option() return -1 instead of die()ing

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", parse_ignorewhitespace_option() should return
-1 instead of calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_551.diff
https://github.com/git/git/commit/aaf6c447aabb16ed71345d5baf8b12ced26c5c95,11 Aug 2016,"builtin/apply: make parse_whitespace_option() return -1 instead of die()ing

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in builtin/apply.c, parse_whitespace_option() should return -1 instead
of calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_552.diff
https://github.com/git/git/commit/dae197f753c8b3ccdc9c97cfc04f0dbd99a5cc3c,11 Aug 2016,"builtin/apply: make parse_single_patch() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in builtin/apply.c, parse_single_patch() should return a negative
integer instead of calling die().

Let's do that by using error() and let's adjust the related test
cases accordingly.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_553.diff
https://github.com/git/git/commit/b654b34c1cf877709febb602991f46e7ba0d947d,11 Aug 2016,"builtin/apply: make parse_chunk() return a negative integer on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing or exit()ing.

To do that in a compatible manner with the rest of the error handling
in builtin/apply.c, parse_chunk() should return a negative integer
instead of calling die() or exit().

As parse_chunk() is called only by apply_patch() which already
returns either -1 or -128 when an error happened, let's make it also
return -1 or -128.

This makes it compatible with what find_header() and parse_binary()
already return.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_554.diff
https://github.com/git/git/commit/5950851e44fc6f19e9fc9261bac4a61e59fc5121,11 Aug 2016,"builtin/apply: make find_header() return -128 instead of die()ing

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in builtin/apply.c, let's make find_header() return -128 instead of
calling die().

We could make it return -1, unfortunately find_header() already
returns -1 when no header is found.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_555.diff
https://github.com/git/git/commit/3bee345d7b6c7d95e9585b224320689979a58f9e,11 Aug 2016,"builtin/apply: read_patch_file() return -1 instead of die()ing

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing. Let's do that by returning -1 instead of
die()ing in read_patch_file().

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_556.diff
https://github.com/git/git/commit/f07a9f7643c8b261b5d03d9c288c44916277f05e,11 Aug 2016,"builtin/apply: make apply_patch() return -1 or -128 instead of die()ing

To libify `git apply` functionality we have to signal errors
to the caller instead of die()ing.

As a first step in this direction, let's make apply_patch() return
-1 or -128 in case of errors instead of dying. For now its only
caller apply_all_patches() will exit(128) when apply_patch()
return -128 and it will exit(1) when it returns -1.

We exit() with code 128 because that was what die() was doing
and we want to keep the distinction between exiting with code 1
and exiting with code 128.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_557.diff
https://github.com/git/git/commit/d9fc746cd77910a7dec53abfec36df5c699b33c2,11 Aug 2016,"status: print branch info with --porcelain=v2 --branch

Expand porcelain v2 output to include branch and tracking
branch information. This includes the commit id, the branch,
the upstream branch, and the ahead and behind counts.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_558.diff
https://github.com/git/git/commit/24959bad5dba353497323f10b3bf39f243c0f174,11 Aug 2016,"status: print per-file porcelain v2 status data

Print per-file information in porcelain v2 format.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",285,data/crawl/git/patch_559.diff
https://github.com/git/git/commit/1ecdecce621009a4d039d061d514056501d0ed8f,11 Aug 2016,"status: collect per-file data for --porcelain=v2

Collect extra per-file data for porcelain V2 format.

The output of `git status --porcelain` leaves out many
details about the current status that clients might like
to have.  This can force them to be less efficient as they
may need to launch secondary commands (and try to match
the logic within git) to accumulate this extra information.
For example, a GUI IDE might want the file mode to display
the correct icon for a changed item (without having to stat
it afterwards).

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_560.diff
https://github.com/git/git/commit/b36045c1dc43e36f6fb84b041b59317b7f02b58c,10 Aug 2016,"http-backend: buffer headers before sending

Avoid waking up the readers for unnecessary context switches for
each line of header data being written, as all the headers are
written in short succession.

It is unlikely any HTTP/1.x server would want to read a CGI
response one-line-at-a-time and trickle each to the client.
Instead, I'd expect HTTP servers want to minimize syscall and
TCP/IP framing overhead by trying to send all of its response
headers in a single syscall or even combining the headers and
first chunk of the body with MSG_MORE or writev.

Verified by strace-ing response parsing on the CGI side.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/patch_561.diff
https://github.com/git/git/commit/2201ee09b542693f3c0c00df9482c098474cb1fe,09 Aug 2016,"submodule--helper: use parallel processor correctly

When developing another patch series I had a temporary state in
which git-clone would segfault, when the call was prepared in
prepare_to_clone_next_submodule. This lead to the call failing,
i.e. in `update_clone_task_finished` the task was scheduled to be
tried again.  The second call to prepare_to_clone_next_submodule
would return 0, as the segfaulted clone did create the .git file
already, such that was not considered to need to be cloned again. I
was seeing the ""BUG: ce was a submodule before?\n"" message, which
was the correct behavior at the time as my local code was
buggy. When trying to debug this failure, I tried to use printing
messages into the strbuf that is passed around, but these messages
were never printed as the die(..) doesn't flush the `err` strbuf.

When implementing the die() in 665b35ecc (2016-06-09, ""submodule--helper:
initial clone learns retry logic""), I considered this condition to be
a severe condition, which should lead to an immediate abort as we do not
trust ourselves any more. However the queued messages in `err` are valuable
so let's not toss them out by immediately dying, but a graceful return.

Another thing to note: The error message itself was misleading. A return
value of 0 doesn't indicate the passed in `ce` is not a submodule any more,
but just that we do not consider cloning it any more.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_562.diff
https://github.com/git/git/commit/5a36d00cf2e06e6cc19cb285393c63260913263f,09 Aug 2016,"i18n: archive: mark errors for translation

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_563.diff
https://github.com/git/git/commit/2ff30e67d996b89fe16517a2ba4b55b417172389,09 Aug 2016,"i18n: setup: mark error messages for translation

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_564.diff
https://github.com/git/git/commit/c4f596b98ed305ceb594857fa34524fedc30a031,05 Aug 2016,"status: support --porcelain[=<version>]

Update --porcelain argument to take optional version parameter
to allow multiple porcelain formats to be supported in the future.

The token ""v1"" is the default value and indicates the traditional
porcelain format.  (The token ""1"" is an alias for that.)

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_565.diff
https://github.com/git/git/commit/be7e795efe35d3e50199af5452b218e5121b1713,05 Aug 2016,"status: cleanup API to wt_status_print

Refactor the API between builtin/commit.c and wt-status.[ch].

Hide the details of the various wt_*status_print() routines inside
wt-status.c behind a single (new) wt_status_print() routine.
Eliminate the switch statements from builtin/commit.c.
Allow details of new status formats to be isolated within wt-status.c

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_566.diff
https://github.com/git/git/commit/957a0fe2e59343f10f10620fab787f7e5abf3ab8,05 Aug 2016,"status: rename long-format print routines

Rename the various wt_status_print*() routines to be
wt_longstatus_print*() to make it clear that these
routines are only concerned with the normal/long
status output and reduce developer confusion as other
status formats are added in the future.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_567.diff
https://github.com/git/git/commit/6f25305799f0bbddbac1d678293e8c5cf404deb3,05 Aug 2016,"trace: do not fall back to stderr

If the trace code cannot open a specified file, or does not
understand the contents of the GIT_TRACE variable, it falls
back to printing trace output to stderr.

This is an attempt to be helpful, but in practice it just
ends up annoying. The user was trying to get the output to
go somewhere else, so spewing it to stderr does not really
accomplish that. And as it's intended for debugging, they
can presumably re-run the command with their error
corrected.

So instead of falling back, this patch disables bogus trace
keys for the rest of the program, just as we do for write
errors. We can drop the ""Defaulting to..."" part of the error
message entirely; after seeing ""cannot open '/foo'"", the
user can assume that tracing is skipped.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_568.diff
https://github.com/git/git/commit/ca5c701ca50c24807793294c5ed22230858ac5e6,05 Aug 2016,"write_or_die: drop write_or_whine_pipe()

This function has no callers, and is not likely to gain any
because it's confusing to use.

It unconditionally complains to stderr, but _doesn't_ die.
Yet any caller which wants a ""gentle"" write would generally
want to suppress the error message, because presumably
they're going to write a better one, and/or try the
operation again.

And the check_pipe() call leads to confusing behaviors. It
means we die for EPIPE, but not for other errors, which is
confusing and pointless.

On top of all that, it has unusual error return semantics,
which makes it easy for callers to get it wrong.

Let's drop the function, and if somebody ever needs to
resurrect something like it, they can fix these warts.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_569.diff
https://github.com/git/git/commit/3b0c3ab777d7d1fc2fbfaba9ec8ce4d845428d99,05 Aug 2016,"trace: correct variable name in write() error message

Our error message for write() always mentions GIT_TRACE,
even though we may be writing for a different variable
entirely. It's also not quite accurate to say ""fd given by
GIT_TRACE environment variable"", as we may hit this error
based on a filename the user put in the variable (we do
complain and switch to stderr if the file cannot be opened,
but it's still possible to hit a write() error on the
descriptor later).

So let's fix those things, and switch to our more usual
""unable to do X: Y"" format for the error.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_570.diff
https://github.com/git/git/commit/b3a1c5da0242c936bfc007722aa0011494629b32,05 Aug 2016,"trace: cosmetic fixes for error messages

The error messages for the trace code are often multi-line;
the first line gets a nice ""warning:"", but the rest are
left-aligned. Let's give them an indentation to make sure
they stand out as a unit.

While we're here, let's also downcase the first letter of
each error (our usual style), and break up a long line of
advice (since we're already using multiple lines, one more
doesn't hurt).

We also replace ""What does 'foo' for GIT_TRACE mean?"". While
cute, it's probably a good idea to give more context, and
follow our usual styles. So it's now ""unknown trace value
for 'GIT_TRACE': foo"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_571.diff
https://github.com/git/git/commit/38f460caa26e5dd06c3e874e30ea0ec5beb49b56,05 Aug 2016,"trace: use warning() for printing trace errors

Right now we just fprintf() straight to stderr, which can
make the output hard to distinguish. It would be helpful to
give it one of our usual prefixes like ""error:"", ""warning:"",
etc.

It doesn't make sense to use error() here, as the trace code
is ""optional"" debugging code. If something goes wrong, we
should warn the user, but saying ""error"" implies the actual
git operation had a problem. So warning() is the only sane
choice.

Note that this does end up calling warn_routine() to do the
formatting. This is probably a good thing, since they are
clearly trying to hook messages before they make it to
stderr. However, it also means that in theory somebody who
tries to trace from their warn_routine() could cause a loop.
This seems rather unlikely in practice (we've never even
overridden the default warn_builtin routine before, and
recent discussions to do so would just install a noop
routine).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_572.diff
https://github.com/git/git/commit/995bc22d7f8c611e342095a211065f8585a08e65,04 Aug 2016,"pager: move pager-specific setup into the build

Allowing PAGER_ENV to be set at build-time allows us to move
pager-specific knowledge out of our build.  This allows us to
set a better default for FreeBSD more(1), which pretends not to
understand ANSI color escapes if the MORE environment variable
is left empty, but accepts the same variables as less(1)

Originally-from:
 https://public-inbox.org/git/xmqq61piw4yf.fsf@gitster.dls.corp.google.com/

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_573.diff
https://github.com/git/git/commit/c0222e762ef57c59fa793862618cfcdfef1cf3f8,04 Aug 2016,"trace: stop using write_or_whine_pipe()

The write_or_whine_pipe function does two things:

  1. it checks for EPIPE and converts it into a signal death

  2. it prints a message to stderr on error

The first thing does not help us, and actively hurts.
Generally we would simply die from SIGPIPE in this case,
unless somebody has taken the time to ignore SIGPIPE for the
whole process.  And if they _did_ do that, it seems rather
silly for the trace code, which otherwise takes pains to
continue even in the face of errors (e.g., by not using
write_or_die!), to take down the whole process for one
specific type of error.

Nor does the second thing help us; it just makes it harder
to write our error message, because we have to feed bits of
it as an argument to write_or_whine_pipe(). Translators
never get to see the full message, and it's hard for us to
customize it.

Let's switch to just using write_in_full() and writing our
own error string. For now, the error is identical to what
write_or_whine_pipe() would say, but now that it's more
under our control, we can improve it in future patches.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_574.diff
https://github.com/git/git/commit/4d7bc52b178bffe9e484c4dcd92d5353e2ce716f,03 Aug 2016,"submodule update: allow '.' for branch value

Gerrit has a ""superproject subscription"" feature[1], that triggers a
commit in a superproject that is subscribed to its submodules.
Conceptually this Gerrit feature can be done on the client side with
Git via (except for raciness, error handling etc):

  while [ true ]; do
    git -C <superproject> submodule update --remote --force
    git -C <superproject> commit -a -m ""Update submodules""
    git -C <superproject> push
  done

for each branch in the superproject. To ease the configuration in Gerrit
a special value of ""."" has been introduced for the submodule.<name>.branch
to mean the same branch as the superproject[2], such that you can create a
new branch on both superproject and the submodule and this feature
continues to work on that new branch.

Now we find projects in the wild with such a .gitmodules file.
The .gitmodules used in these Gerrit projects do not conform
to Gits understanding of how .gitmodules should look like.
This teaches Git to deal gracefully with this syntax as well.

The redefinition of ""."" does no harm to existing projects unaware of
this change, as ""."" is an invalid branch name in Git, so we do not
expect such projects to exist.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_575.diff
https://github.com/git/git/commit/92bbe7ccf1fedac825f2c6ab4c8de91dc5370fd2,03 Aug 2016,"submodule--helper: add remote-branch helper

In a later patch we want to enhance the logic for the branch selection.
Rewrite the current logic to be in C, so we can directly use C when
we enhance the logic.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_576.diff
https://github.com/git/git/commit/2de26ae1dc89236ff5d0d0657b0eb884b6c331b5,01 Aug 2016,"submodule--helper: fix usage string for relative-path

Internally we call the underscore version of relative_path, but externally
we present an API with no underscores.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_577.diff
https://github.com/git/git/commit/f1e2426b28399b563527d110c849acd65b680de6,01 Aug 2016,"merge-recursive: offer an option to retain the output in 'obuf'

Since 66a155b (Enable output buffering in merge-recursive., 2007-01-14),
we already accumulate the output in a buffer. The idea was to avoid
interfering with the progress output that goes to stderr, which is
unbuffered, when we write to stdout, which is buffered.

We extend that buffering to allow the caller to handle the output
(possibly suppressing it). This will help us when extending the
sequencer to do rebase -i's brunt work: it does not want the picks to
print anything by default but instead determine itself whether to print
the output or not.

Note that we also redirect the error messages into the output buffer
when the caller asked not to flush the output buffer, for two reasons:
1) to retain the correct output order, and 2) to allow the caller to
suppress *all* output.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_578.diff
https://github.com/git/git/commit/dde75cb0561fa8a6bbb2de4c3662dbcc33728938,01 Aug 2016,"merge-recursive: write the commit title in one go

In 66a155b (Enable output buffering in merge-recursive., 2007-01-14), we
changed the code such that it prints the output in one go, to avoid
interfering with the progress output.

Let's make sure that the same holds true when outputting the commit
title: previously, we used several printf() statements to stdout and
assumed that stdout's buffer is large enough to hold the entire
commit title.

Apart from making that speculation unnecessary, we change the code to
add the message to the output buffer before flushing for another reason:
the next commit will introduce a new level of output buffering, where
the caller can request the output not to be flushed, but to be retained
for further processing.

This latter feature will be needed when teaching the sequencer to do
rebase -i's brunt work: it wants to control the output of the
cherry-picks (i.e. recursive merges).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_579.diff
https://github.com/git/git/commit/bc9204d4ef6e0672389fdfb0d398fa9a39dba3d5,01 Aug 2016,"merge-recursive: flush output buffer before printing error messages

The data structure passed to the recursive merge machinery has a feature
where the caller can ask for the output to be buffered into a strbuf, by
setting the field 'buffer_output'.

Previously, we died without flushing, losing accumulated output.  With
this patch, we show the output first, and only then print the error
message.

Currently, the only user of that buffering is merge_recursive() itself,
to avoid the progress output to interfere.

In the next patches, we will introduce a new buffer_output mode that
forces merge_recursive() to retain the output buffer for further
processing by the caller. If the caller asked for that, we will then
also write the error messages into the output buffer. This is necessary
to give the caller more control not only how to react in case of errors
but also control how/if to display the error messages.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_580.diff
https://github.com/git/git/commit/3e8e32c32ef8e49bcfd715837d51aca30925fdfe,29 Jul 2016,"patch-ids: add flag to create the diff patch id using header only data

This will allow a diff patch id to be created using only the header data
so that the contents of the file will not have to be loaded.

Signed-off-by: Kevin Willford <kcwillford@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_581.diff
https://github.com/git/git/commit/98f917ed421a477e0575c58f801ac25f0e261b9d,28 Jul 2016,"difftool: avoid $GIT_DIR and $GIT_WORK_TREE

Environment variables are global and hard to reason about.
Use the `--git-dir` and `--work-tree` arguments when invoking `git`
instead of relying on the environment.

Add a test to ensure that difftool's dir-diff feature works when these
variables are present in the environment.

Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_582.diff
https://github.com/git/git/commit/1b8132d99d80ca98218c2685bbe5ba016a0a42f8,28 Jul 2016,"i18n: config: unfold error messages marked for translation

Introduced in 473166b (""config: add 'origin_type' to config_source
struct"", 2016-02-19), Git can inform the user about the origin of a
config error, but the implementation does not allow translators to
translate the keywords 'file', 'blob, 'standard input', and
'submodule-blob'. Moreover, for the second message, a reason for the
error is appended to the message, not allowing translators to translate
that reason either.

Unfold the message into several templates for each known origin_type.
That would result in better translation at the expense of code
verbosity.

Add enum config_oringin_type to ease management of the various
configuration origin types (blob, file, etc).  Previously origin type
was considered from command line if cf->origin_type == NULL, i.e.,
uninitialized. Now we set origin_type to CONFIG_ORIGIN_CMDLINE in
git_config_from_parameters() and configset_add_value().

For error message in git_parse_source(), use xstrfmt() function to
prepare the message string, instead of doing something like it's done
for die_bad_number(), because intelligibility and code conciseness are
improved for that instance.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/patch_583.diff
https://github.com/git/git/commit/6ae6a2331879626e127ab912e746931ea30a2166,28 Jul 2016,"subtree: adjust style to match CodingGuidelines

Prefer ""test"" over ""[ ... ]"", use double-quotes around variables, break
long lines, and properly indent ""case"" statements.

Helped-by: Johannes Sixt <j6t@kdbg.org>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",575,data/crawl/git/patch_584.diff
https://github.com/git/git/commit/6003303a1e5086a9f28f18469a8a72ad22f75c86,26 Jul 2016,"merge-recursive: switch to returning errors instead of dying

The recursive merge machinery is supposed to be a library function, i.e.
it should return an error when it fails. Originally the functions were
part of the builtin ""merge-recursive"", though, where it was simpler to
call die() and be done with error handling.

The existing callers were already prepared to detect negative return
values to indicate errors and to behave as previously: exit with code 128
(which is the same thing that die() does, after printing the message).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_585.diff
https://github.com/git/git/commit/7e97e1003349107b9fdc388bb4aa006fae9ab560,26 Jul 2016,"die(_(""BUG"")): avoid translating bug messages

While working on the patch series that avoids die()ing in recursive
merges, the issue came up that bug reports (i.e. die(""BUG: ..."")
constructs) should never be translated, as the target audience is the
Git developer community, not necessarily the current user, and hence
a translated message would make it *harder* to address the problem.

So let's stop translating the obvious ones. As it is really, really
outside the purview of this patch series to see whether there are more
die() statements that report bugs and are currently translated, that
task is left for another day and patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_586.diff
https://github.com/git/git/commit/ef1177d18e35c030c37aa533002a11d98361e6b9,26 Jul 2016,"die(""bug""): report bugs consistently

The vast majority of error messages in Git's source code which report a
bug use the convention to prefix the message with ""BUG:"".

As part of cleaning up merge-recursive to stop die()ing except in case of
detected bugs, let's just make the remainder of the bug reports consistent
with the de facto rule.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_587.diff
https://github.com/git/git/commit/b0a61ab23c0fd51a1b641b481e6a63f8661a8f9f,22 Jul 2016,"status: suggest 'git merge --abort' when appropriate

We already suggest 'git rebase --abort' during a conflicted rebase.
Similarly, suggest 'git merge --abort' during conflict resolution on
'git merge'.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_588.diff
https://github.com/git/git/commit/83558686ceaeb634b630d5177818d571cafafbf4,20 Jul 2016,"receive-pack: send keepalives during quiet periods

After a client has sent us the complete pack, we may spend
some time processing the data and running hooks. If the
client asked us to be quiet, receive-pack won't send any
progress data during the index-pack or connectivity-check
steps. And hooks may or may not produce their own progress
output. In these cases, the network connection is totally
silent from both ends.

Git itself doesn't care about this (it will wait forever),
but other parts of the system (e.g., firewalls,
load-balancers, etc) might hang up the connection. So we'd
like to send some sort of keepalive to let the network and
the client side know that we're still alive and processing.

We can use the same trick we did in 05e9515 (upload-pack:
send keepalive packets during pack computation, 2013-09-08).
Namely, we will send an empty sideband data packet every `N`
seconds that we do not relay any stderr data over the
sideband channel. As with 05e9515, this means that we won't
bother sending keepalives when there's actual progress data,
but will kick in when it has been disabled (or if there is a
lull in the progress data).

The concept is simple, but the details are subtle enough
that they need discussing here.

Before the client sends us the pack, we don't want to do any
keepalives. We'll have sent our ref advertisement, and we're
waiting for them to send us the pack (and tell us that they
support sidebands at all).

While we're receiving the pack from the client (or waiting
for it to start), there's no need for keepalives; it's up to
them to keep the connection active by sending data.
Moreover, it would be wrong for us to do so. When we are the
server in the smart-http protocol, we must treat our
connection as half-duplex. So any keepalives we send while
receiving the pack would potentially be buffered by the
webserver. Not only does this make them useless (since they
would not be delivered in a timely manner), but it could
actually cause a deadlock if we fill up the buffer with
keepalives. (It wouldn't be wrong to send keepalives in this
phase for a full-duplex connection like ssh; it's simply
pointless, as it is the client's responsibility to speak).

As soon as we've gotten all of the pack data, then the
client is waiting for us to speak, and we should start
keepalives immediately. From here until the end of the
connection, we send one any time we are not otherwise
sending data.

But there's a catch. Receive-pack doesn't know the moment
we've gotten all the data. It passes the descriptor to
index-pack, who reads all of the data, and then starts
resolving the deltas. We have to communicate that back.

To make this work, we instruct the sideband muxer to enable
keepalives in three phases:

  1. In the beginning, not at all.

  2. While reading from index-pack, wait for a signal
     indicating end-of-input, and then start them.

  3. Afterwards, always.

The signal from index-pack in phase 2 has to come over the
stderr channel which the muxer is reading. We can't use an
extra pipe because the portable run-command interface only
gives us stderr and stdout.

Stdout is already used to pass the .keep filename back to
receive-pack. We could also send a signal there, but then we
would find out about it in the main thread. And the
keepalive needs to be done by the async muxer thread (since
it's the one writing sideband data back to the client). And
we can't reliably signal the async thread from the main
thread, because the async code sometimes uses threads and
sometimes uses forked processes.

Therefore the signal must come over the stderr channel,
where it may be interspersed with other random
human-readable messages from index-pack. This patch makes
the signal a single NUL byte.  This is easy to parse, should
not appear in any normal stderr output, and we don't have to
worry about any timing issues (like seeing half the signal
bytes in one read(), and half in a subsequent one).

This is a bit ugly, but it's simple to code and should work
reliably.

Another option would be to stop using an async thread for
muxing entirely, and just poll() both stderr and stdout of
index-pack from the main thread. This would work for
index-pack (because we aren't doing anything useful in the
main thread while it runs anyway). But it would make the
connectivity check and the hook muxers much more
complicated, as they need to simultaneously feed the
sub-programs while reading their stderr.

The index-pack phase is the only one that needs this
signaling, so it could simply behave differently than the
other two. That would mean having two separate
implementations of copy_to_sideband (and the keepalive
code), though. And it still doesn't get rid of the
signaling; it just means we can write a nicer message like
""END_OF_INPUT"" or something on stdout, since we don't have
to worry about separating it from the stderr cruft.

One final note: this signaling trick is only done with
index-pack, not with unpack-objects. There's no point in
doing it for the latter, because by definition it only kicks
in for a small number of objects, where keepalives are not
as useful (and this conveniently lets us avoid duplicating
the implementation).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_589.diff
https://github.com/git/git/commit/38e590ea12336bcfae0310092885743e6ba79781,20 Jul 2016,"clone: use a real progress meter for connectivity check

Because the initial connectivity check for a cloned
repository can be slow, 0781aa4 (clone: let the user know
when check_everything_connected is run, 2013-05-03) added a
""fake"" progress meter; we simply say ""Checking connectivity""
when it starts, and ""done"" at the end, with nothing between.

Since check_connected() now knows how to do a real progress
meter, we can drop our fake one and use that one instead.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_590.diff
https://github.com/git/git/commit/90cf590f53f2939a47ca7b397e270e8228699829,18 Jul 2016,"fsck: optionally show more helpful info for broken links

When reporting broken links between commits/trees/blobs, it would be
quite helpful at times if the user would be told how the object is
supposed to be reachable.

With the new --name-objects option, git-fsck will try to do exactly
that: name the objects in a way that shows how they are reachable.

For example, when some reflog got corrupted and a blob is missing that
should not be, the user might want to remove the corresponding reflog
entry. This option helps them find that entry: `git fsck` will now
report something like this:

	broken link from    tree b5eb6ff...  (refs/stash@{<date>}~37:)
	              to    blob ec5cf80...

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/patch_591.diff
https://github.com/git/git/commit/3b75ee93278179004bc2f117fcfe3d5d76a0a2fa,18 Jul 2016,"blame: allow to blame paths freshly added to the index

When blaming files, changes in the work tree are taken into account
and displayed as being ""Not Committed Yet"".

However, when blaming a file that is not known to the current HEAD,
git blame fails with `no such path 'foo' in HEAD`, even when the file
was git add'ed.

Allowing such a blame is useful when the new file added to the index
(not yet committed) was created by renaming an existing file.  It
also is useful when the new file was created from pieces already in
HEAD, moved or copied from other files and blaming with copy
detection (i.e. ""-C"").

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_592.diff
https://github.com/git/git/commit/993a21b0a05bf2e2063c58e5722c29f5747e39d4,18 Jul 2016,"fsck: refactor how to describe objects

In many places, we refer to objects via their SHA-1s. Let's abstract
that into a function.

For the moment, it does nothing else than what we did previously: print
out the 40-digit hex string. But that will change over the course of the
next patches.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_593.diff
https://github.com/git/git/commit/49c58d86ceb7816c5f0ca36e38e26cd6b8506d74,18 Jul 2016,"daemon: ignore ENOTSOCK from setsockopt

In inetd mode, we are not guaranteed stdin or stdout is a
socket; callers could filter the data through a pipe
or be testing with regular files.

This prevents t5802 from polluting syslog.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_594.diff
https://github.com/git/git/commit/82246e075e5c028dd886adda68e28de092e33df1,15 Jul 2016,"Sync with 2.9.2

* maint:
  Git 2.9.2
  t0006: skip ""far in the future"" test when unsigned long is not long enough",37,data/crawl/git/patch_595.diff
https://github.com/git/git/commit/6b9c38e14cd3abf9b95cabe8b86954f0c4e94a38,15 Jul 2016,"t0006: skip ""far in the future"" test when unsigned long is not long enough

Git's source code refers to timestamps as unsigned longs.  On 32-bit
platforms, as well as on Windows, unsigned long is not large enough
to capture dates that are ""absurdly far in the future"".

While we can fix this issue properly by replacing unsigned long with
a larger type, we want to be a bit more conservative and just skip
those tests on the maint track.

Signed-off-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_596.diff
https://github.com/git/git/commit/f6a4e61fbb647928d615a0befaec163a5d2bf4af,14 Jul 2016,"push: accept push options

This implements everything that is required on the client side to make use
of push options from the porcelain push command.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_597.diff
https://github.com/git/git/commit/882d49ca5cb6a584a37ab0266b8720b5b0bf2101,14 Jul 2016,"push: anonymize URL in status output

Commit 47abd85 (fetch: Strip usernames from url's before
storing them, 2009-04-17) taught fetch to anonymize URLs.
The primary purpose there was to avoid sticking passwords in
merge-commit messages, but as a side effect, we also avoid
printing them to stderr.

The push side does not have the merge-commit problem, but it
probably should avoid printing them to stderr. We can reuse
the same anonymizing function.

Note that for this to come up, the credentials would have to
appear either on the command line or in a git config file,
neither of which is particularly secure. So people _should_
be switching to using credential helpers instead, which
makes this problem go away. But that's no excuse not to
improve the situation for people who for whatever reason end
up using credentials embedded in the URL.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_598.diff
https://github.com/git/git/commit/fd3e67474c0b349049ccff5f72a50ef930a56013,13 Jul 2016,"index-pack: report correct bad object offsets even if they are large

Use the right type for offsets in this case, off_t, which makes a
difference on 32-bit systems with large file support, and change
formatting code accordingly.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_599.diff
https://github.com/git/git/commit/7171a0b0cf5792fd549b601c84b274cd5e4155ed,13 Jul 2016,"index-pack: correct ""len"" type in unpack_data()

On 32-bit systems with large file support, one entry could be larger
than 4GB and overflow ""len"". Correct it so we can unpack a full entry.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_600.diff
https://github.com/git/git/commit/17966c0a63d25b1cc2dd1e98d30873e643bd581f,12 Jul 2016,"http: avoid disconnecting on 404s for loose objects

404s are common when fetching loose objects on static HTTP
servers, and reestablishing a connection for every single
404 adds additional latency.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_601.diff
https://github.com/git/git/commit/2af7da9f8fb68337030630d88c19db512189babc,09 Jul 2016,"git-svn: warn instead of dying when commit data is missing

It is possible to have refs globbed by git-svn which stores data
purely in git; gently skip those instead of dying and assuming
user error.

ref: http://mid.gmane.org/CALi1mtdtNF_GtzyPTbfb7N51wwxsFY7zm8hsgwxr3tHcZZboyg@mail.gmail.com

Suggested-by: Jacob Godserv <jacobgodserv@gmail.com>
Cc: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_602.diff
https://github.com/git/git/commit/6d308627cae4d34c058591de73ce14a52b79cf4e,08 Jul 2016,"worktree: add ""unlock"" command

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_603.diff
https://github.com/git/git/commit/58142c09a4fe825912e5a2ebfa1ba5f7f6d8beb5,08 Jul 2016,"worktree: add ""lock"" command

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_604.diff
https://github.com/git/git/commit/54307ea7c3ced760ee375483a786ec7180798aed,08 Jul 2016,"commit.c: remove print_commit_list()

The helper function tries to offer a way to conveniently show the
last one differently from others, presumably to allow you to say
something like

	A, B, and C.

while iterating over a list that has these three elements.

However, there is only one caller, and it passes the same format
string ""%s\n"" for both the last one and the other ones.  Retire the
helper function and update the caller with a simplified version.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_605.diff
https://github.com/git/git/commit/fa262cac766d383c51e0ead04c62e114a79bd738,08 Jul 2016,"walker: let walker_say take arbitrary formats

We take a printf-style format and a single ""char *""
parameter, and the format must therefore have at most one
""%s"" in it. Besides being error-prone (and tickling
-Wformat-nonliteral), this is unnecessarily restrictive. We
can just provide the usual varargs interface.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_606.diff
https://github.com/git/git/commit/e78d5d49935373dabcc40c5e32aefe4956a70b97,08 Jul 2016,"use write_file_buf where applicable

There are several places where we open a file, write some
content from a strbuf, and close it. These can be simplified
with write_file_buf(). As a bonus, many of these did not
catch write problems at close() time.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_607.diff
https://github.com/git/git/commit/52563d7ecc8f3f38cb1c0521294c5f6a0a475637,08 Jul 2016,"write_file: add pointer+len variant

There are many callsites which could use write_file, but for
which it is a little awkward because they have a strbuf or
other pointer/len combo. Specifically:

 1. write_file() takes a format string, so we have to use
    ""%s"" or ""%.*s"", which are ugly.

 2. Using any form of ""%s"" does not handle embedded NULs in
    the output. That probably doesn't matter for our
    call-sites, but it's nicer not to have to worry.

 3. It's less efficient; we format into another strbuf
    just to do the write. That's probably not measurably
    slow for our uses, but it's simply inelegant.

We can fix this by providing a helper to write out the
formatted buffer, and just calling it from write_file().

Note that we don't do the usual ""complete with a newline""
that write_file does. If the caller has their own buffer,
there's a reasonable chance they're doing something more
complicated than a single line, and they can call
strbuf_complete_line() themselves.

We could go even further and add strbuf_write_file(), but it
doesn't save much:

  -  write_file_buf(path, sb.buf, sb.len);
  +  strbuf_write_file(&sb, path);

It would also be somewhat asymmetric with strbuf_read_file,
which actually returns errors rather than dying (and the
error handling is most of the benefit of write_file() in the
first place).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_608.diff
https://github.com/git/git/commit/ee861e0f78367ff0e94feeb42f721ef83ceec251,08 Jul 2016,"write_file: use xopen

This simplifies the code a tiny bit, and provides consistent
error messages with other users of xopen().

While we're here, let's also switch to using O_WRONLY. We
know we're only going to open/write/close the file, so
there's no point in asking for O_RDWR.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_609.diff
https://github.com/git/git/commit/ef22318cff51244cd0047b11ee7accfded522782,08 Jul 2016,"write_file: drop ""gently"" form

There are no callers left of write_file_gently(). Let's drop
it, as it doesn't seem likely for new callers to be added
(since its inception, the only callers who wanted the gentle
form generally just died immediately themselves, and have
since been converted).

While we're there, let's also drop the ""int"" return from
write_file, as it is never meaningful (in the non-gentle
form, we always either die or return 0).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_610.diff
https://github.com/git/git/commit/deb9c1575c456b9d12ff05fdd2bec516dfb34ae4,07 Jul 2016,"notes-merge: use O_EXCL to avoid overwriting existing files

Use the open(2) flag O_EXCL to ensure the file doesn't already exist
instead of (racily) calling stat(2) through file_exists().  While at it
switch to xopen() to reduce code duplication and get more consistent
error messages.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_611.diff
https://github.com/git/git/commit/bc437d10202c015a5733f706dc44fa6bbf4d85b9,06 Jul 2016,"fetch: reduce duplicate in ref update status lines with placeholder

In the ""remote -> local"" line, if either ref is a substring of the
other, the common part in the other string is replaced with ""*"". For
example

    abc                -> origin/abc
    refs/pull/123/head -> pull/123

become

    abc         -> origin/*
    refs/*/head -> pull/123

Activated with fetch.output=compact.

For the record, this output is not perfect. A single giant ref can
push all refs very far to the right and likely be wrapped around. We
may have a few options:

 - exclude these long lines smarter

 - break the line after ""->"", exclude it from column width calculation

 - implement a new format, { -> origin/}foo, which makes the problem
   go away at the cost of a bit harder to read

 - reverse all the arrows so we have ""* <- looong-ref"", again still
   hard to read.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_612.diff
https://github.com/git/git/commit/023ff39b2994804e4a7b2274b22336bdb37d4a54,06 Jul 2016,"parse_options: allocate a new array when concatenating

In exactly one callers (builtin/revert.c), we build up the
options list dynamically from multiple arrays. We do so by
manually inserting ""filler"" entries into one array, and then
copying the other array into the allocated space.

This is tedious and error-prone, as you have to adjust the
filler any time the second array is modified (although we do
at least check and die() when the counts do not match up).

Instead, let's just allocate a new array.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_613.diff
https://github.com/git/git/commit/57f5d52a942e8bbfa82e2741faf050de0d6b3eb3,01 Jul 2016,"common-main: call sanitize_stdfds()

This is setup that should be done in every program for
safety, but we never got around to adding it everywhere (so
builtins benefited from the call in git.c, but any external
commands did not). Putting it in the common main() gives us
this safety everywhere.

Note that the case in daemon.c is a little funny. We wait
until we know whether we want to daemonize, and then either:

 - call daemonize(), which will close stdio and reopen it to
   /dev/null under the hood

 - sanitize_stdfds(), to fix up any odd cases

But that is way too late; the point of sanitizing is to give
us reliable descriptors on 0/1/2, and we will already have
executed code, possibly called die(), etc. The sanitizing
should be the very first thing that happens.

With this patch, git-daemon will sanitize first, and can
remove the call in the non-daemonize case. It does mean that
daemonize() may just end up closing the descriptors we
opened, but that's not a big deal (it's not wrong to do so,
nor is it really less optimal than the case where our parent
process redirected us from /dev/null ahead of time).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_614.diff
https://github.com/git/git/commit/5e5be9e257239b3599701f05518ce9e45f565e9f,01 Jul 2016,"sideband.c: refactor recv_sideband()

We used character buffer manipulations to split messages from the
sideband at line breaks and insert ""remote: "" at the beginning of
each line, using the packet size to determine the end of a message.

However, since it is safe to assume that diagnostic messages from
the sideband never contain NUL characters, we can also NUL-terminate
the buffer, use strpbrk() for splitting lines and use format strings
to insert the prefix, to make the code easier to read and maintain.

A strbuf is used for accumulating the output which is then printed
using a single write(2) call to ensure the atomicity of the output.
See 9ac13ec (atomic write for sideband remote messages, 2006-10-11)
for details.

Helped-by: Jeff King <peff@peff.net>
Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Lukas Fleischer <lfleischer@lfos.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_615.diff
https://github.com/git/git/commit/415c7dd026e4649bea48c35ccbe29d2fa8b69be5,01 Jul 2016,"t5541: become resilient to GETTEXT_POISON

Use test_i18n* functions for testing text already marked for
translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_616.diff
https://github.com/git/git/commit/3d5b23a36218b0417a056fa7b5e6d25d595ccaf2,01 Jul 2016,"diffcore-pickaxe: Add regcomp_or_die()

There's another regcomp code block coming in this function that needs
the same error handling. This function can help avoid duplicating
error handling code.

Helped-by: Jeff King <peff@peff.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_617.diff
https://github.com/git/git/commit/793dc676e08394ed15bffe0ed66606ff9ced1c6a,01 Jul 2016,"grep/icase: avoid kwsset when -F is specified

Similar to the previous commit, we can't use kws on icase search
outside ascii range. But we can't simply pass the pattern to
regcomp/pcre like the previous commit because it may contain regex
special characters, so we need to quote the regex first.

To avoid misquote traps that could lead to undefined behavior, we
always stick to basic regex engine in this case. We don't need fancy
features for grepping a literal string anyway.

basic_regex_quote_buf() assumes that if the pattern is in a multibyte
encoding, ascii chars must be unambiguously encoded as single
bytes. This is true at least for UTF-8. For others, let's wait until
people yell up. Chances are nobody uses multibyte, non utf-8 charsets
anymore.

Noticed-by: Plamen Totev <plamen.totev@abv.bg>
Helped-by: René Scharfe <l.s.r@web.de>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/patch_618.diff
https://github.com/git/git/commit/b4da9d62f91d66ab97815007105b42a2aa5846b5,28 Jun 2016,"merge-recursive: convert leaf functions to use struct object_id

Convert all but two of the static functions in this file to use struct
object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",236,data/crawl/git/patch_619.diff
https://github.com/git/git/commit/a0d12c4433e25e87b67df78b45635df8a098fb23,28 Jun 2016,"diff: convert struct diff_filespec to struct object_id

Convert struct diff_filespec's sha1 member to use a struct object_id
called ""oid"" instead.  The following Coccinelle semantic patch was used
to implement this, followed by the transformations in object_id.cocci:

@@
struct diff_filespec o;
@@
- o.sha1
+ o.oid.hash

@@
struct diff_filespec *p;
@@
- p->sha1
+ p->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",275,data/crawl/git/patch_620.diff
https://github.com/git/git/commit/3d0a83382f26c5385ffcfa3fb0d9b7d69d998647,28 Jun 2016,"color.h: remove obsolete comment about limitations on Windows

Originally, ANSI color sequences were supported on Windows only by
overriding the printf() and fprintf() functions, as mentioned in e7821d7
(Add a notice that only certain functions can print color escape codes,
2009-11-27).

As of eac14f8 (Win32: Thread-safe windows console output, 2012-01-14),
however, this is no longer the case, as the ANSI color sequence support
code needed to be replaced with a thread-safe version, one side effect
being that stdout and stderr handled no matter which function is used to
write to it.

So let's just remove the comment that is now obsolete.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_621.diff
https://github.com/git/git/commit/23f8239bbe0a893bd8754a03e9d4fda62804ac14,28 Jun 2016,"doc: typeset short command-line options as literal

It was common in our documentation to surround short option names with
forward quotes, which renders as italic in HTML. Instead, use backquotes
which renders as monospace. This is one more step toward conformance to
Documentation/CodingGuidelines.

This was obtained with:

  perl -pi -e ""s/'(-[a-z])'/\`\$1\`/g"" *.txt

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_622.diff
https://github.com/git/git/commit/46e22b70dfe541f4ca1c04a53aba17df377b70f9,28 Jun 2016,"Documentation/git-mv.txt: fix whitespace indentation

Replace spaces with tabs to avoid a warning when further patches change
these lines.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_623.diff
https://github.com/git/git/commit/d0b39a03cd5d6d5f9e2eac4907d9f47ec3d821da,27 Jun 2016,"fetch: refactor ref update status formatting code

This makes it easier to change the formatting later. And it makes sure
translators cannot mess up format specifiers and break Git.

There are a couple call sites where the length of the second column is
TRANSPORT_SUMMARY_WIDTH instead of calculated by TRANSPORT_SUMMARY(),
which is enforced now. The result should be the same because these call
sites do not contain characters outside ASCII range.

The two strbuf_addf() calls instead of one is mostly to reduce
diff-noise in a future patch where ""ref -> ref"" is reformatted
differently.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_624.diff
https://github.com/git/git/commit/a52397cce6c1049c3c9507d734243ee125d11f0c,27 Jun 2016,"git-fetch.txt: document fetch output

This documents the ref update status of fetch. The structure of this
output is defined in [1]. The ouput content is refined a bit in [2]
[3] [4].

This patch is a copy from git-push.txt, modified a bit because the
flag '-' means different things in push (delete) and fetch (tag
update).

PS. For code archaeologists, the discussion mentioned in [1] is
probably [5].

[1] 165f390 (git-fetch: more terse fetch output - 2007-11-03)
[2] 6315472 (fetch: report local storage errors ... - 2008-06-26)
[3] f360d84 (builtin-fetch: add --prune option - 2009-11-10)
[4] 0997ada (fetch: describe new refs based on where... - 2012-04-16)
[5] http://thread.gmane.org/gmane.comp.version-control.git/61657

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_625.diff
https://github.com/git/git/commit/d8acfe1eaf8621025c4095d3fbb88b2703b3fa54,27 Jun 2016,"test-regex: expose full regcomp() to the command line

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_626.diff
https://github.com/git/git/commit/36a4d905c36a598d17274765b57690ecfb4a23f8,24 Jun 2016,"format-patch: use stdout directly

Earlier, we freopen()ed stdout in order to write patches to files.
That forced us to duplicate stdout (naming it ""realstdout"") because we
*still* wanted to be able to report the file names.

As we do not abuse stdout that way anymore, we no longer need to
duplicate stdout, either.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_627.diff
https://github.com/git/git/commit/95235f5ba1a9398c8503b809370ece18bba72ba2,24 Jun 2016,"format-patch: avoid freopen()

We just taught the relevant functions to respect the diffopt.file field,
to allow writing somewhere else than stdout. Let's make use of it.

Technically, we do not need to avoid that call in a builtin: we assume
that builtins (as opposed to library functions) are stand-alone programs
that may do with their (global) state. Yet, we want to be able to reuse
that code in properly lib-ified code, e.g. when converting scripts into
builtins.

Further, while we did not *have* to touch the cmd_show() and cmd_cherry()
code paths (because they do not want to write anywhere but stdout as of
yet), it just makes sense to be consistent, making it easier and safer to
move the code later.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_628.diff
https://github.com/git/git/commit/0a7b357737e3352ce1b0385313c1efc1b2564dbb,24 Jun 2016,"shortlog: support outputting to streams other than stdout

This will be needed to avoid freopen() in `git format-patch`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_629.diff
https://github.com/git/git/commit/179795e51171ebf10932b553d7df72819fa4a7b5,24 Jun 2016,"line-log: respect diffopt's configured output file stream

The diff machinery can optionally output to a file stream other than
stdout, by overriding diffopt.file. In such a case, the rest of the
log tree machinery should also write to that stream.

Currently, there is no user of the line level log that wants to
redirect output to a file. Therefore, one might argue that it is
superfluous to support that now. However, it is better to be
consistent now, rather than to face hard-to-debug problems later.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_630.diff
https://github.com/git/git/commit/4d7b0efc5e2eea1923803dd9c5d5d1288c99cd00,24 Jun 2016,"log-tree: respect diffopt's configured output file stream

The diff options already know how to print the output anywhere else
than stdout. The same is needed for log output in general, e.g.
when writing patches to files in `git format-patch`. Let's allow
users to use log_tree_commit() *without* changing global state via
freopen().

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_631.diff
https://github.com/git/git/commit/d426430e6ec2a05bf0a4ee88c319dd6072908504,22 Jun 2016,"pathspec: warn on empty strings as pathspec

An empty string as a pathspec element matches all paths.  A buggy
script, however, could accidentally assign an empty string to a
variable that then gets passed to a Git command invocation, e.g.:

	path=... compute a path to be removed in $path ...
        git rm -r ""$paht""

which would unintentionally remove all paths in the current
directory.

The fix for this issue requires a two-step approach. As there may be
existing scripts that knowingly use empty strings in this manner,
the first step simply gives a warning that (1) tells that an empty
string will become an invalid pathspec element and (2) asks the user
to use ""."" if they mean to match all.

For step two, a follow-up patch several release cycles later will
remove the warning and throw an error instead.

This patch is the first step.

Signed-off-by: Emily Xie <emilyxxie@gmail.com>
Reported-by: David Turner <novalis@novalis.org>
Mentored-by: Michail Denchev <mdenchev@gmail.com>
Thanks-to: Sarah Sharp <sarah@thesharps.us> and James Sharp <jamey@minilop.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_632.diff
https://github.com/git/git/commit/4e1b06da252a7609f0c6641750e6acbec451e698,22 Jun 2016,"commit.c: make find_commit_subject() more robust

Just like the pretty printing machinery, we should simply ignore
blank lines at the beginning of the commit messages.

This discrepancy was noticed when an early version of the
rebase--helper produced commit objects with more than one empty line
between the header and the commit message.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_633.diff
https://github.com/git/git/commit/36d6792157cc064607147b942c80bc3716dd339b,20 Jun 2016,"t0006: test various date formats

We ended up testing some of these date formats throughout
the rest of the suite (e.g., via for-each-ref's
""$(authordate:...)"" format), but we never did so
systematically. t0006 is the right place for unit-testing of
our date-handling code.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_634.diff
https://github.com/git/git/commit/2880d16f09635f9d43247b27fd7e6508b992e599,20 Jun 2016,"for_each_reflog(): reimplement using iterators

Allow references with reflogs to be iterated over using a ref_iterator.
The latter is implemented as a files_reflog_iterator, which in turn uses
dir_iterator to read the ""logs"" directory.

Note that reflog iteration doesn't correctly handle per-worktree
reflogs (either before or after this patch).

Signed-off-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/patch_635.diff
https://github.com/git/git/commit/0fe5043dad74352c08447eb1913df0b6c3f2731c,20 Jun 2016,"dir_iterator: new API for iterating over a directory tree

The iterator interface is modeled on that for references, though no
vtable is necessary because there is (so far?) only one type of
dir_iterator.

There are obviously a lot of features that could easily be added to this
class:

* Skip/include directory paths in the iteration
* Shallow/deep iteration
* Letting the caller decide which subdirectories to recurse into (e.g.,
  via a dir_iterator_advance_into() function)
* Option to iterate in sorted order
* Option to iterate over directory paths before vs. after their contents

But these are not needed for the current patch series, so I refrain.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/patch_636.diff
https://github.com/git/git/commit/d24b21e9fcaa9ed4b7966275a8d82406f578577d,20 Jun 2016,"for_each_reflog(): don't abort for bad references

If there is a file under ""$GIT_DIR/logs"" with no corresponding
reference, the old code was emitting an error message, aborting the
reflog iteration, and returning -1. But

* None of the callers was checking the exit value

* The callers all want to find all legitimate reflogs (sometimes for the
  purpose of determining object reachability!) and wouldn't benefit from
  a truncated iteration anyway.

So instead, emit an error message and skip the ""broken"" reflog, but
continue with the iteration.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_637.diff
https://github.com/git/git/commit/4c4de89573fa29b7f97e7a9a3d0674dbdb6f2a28,20 Jun 2016,"do_for_each_ref(): reimplement using reference iteration

Use the reference iterator interface to implement do_for_each_ref().
Delete a bunch of code supporting the old for_each_ref() implementation.
And now that do_for_each_ref() is generic code (it is no longer tied to
the files backend), move it to refs.c.

The implementation is via a new function, do_for_each_ref_iterator(),
which takes a reference iterator as argument and calls a callback
function for each of the references in the iterator.

This change requires the current_ref performance hack for peel_ref() to
be implemented via ref_iterator_peel() rather than peel_entry() because
we don't have a ref_entry handy (it is hidden under three layers:
file_ref_iterator, merge_ref_iterator, and cache_ref_iterator). So:

* do_for_each_ref_iterator() records the active iterator in
  current_ref_iter while it is running.

* peel_ref() checks whether current_ref_iter is pointing at the
  requested reference. If so, it asks the iterator to peel the
  reference (which it can do efficiently via its ""peel"" virtual
  function). For extra safety, we do the optimization only if the
  refname *addresses* are the same, not only if the refname *strings*
  are the same, to forestall possible mixups between refnames that come
  from different ref_iterators.

Please note that this optimization of peel_ref() is only available when
iterating via do_for_each_ref_iterator() (including all of the
for_each_ref() functions, which call it indirectly). It would be
complicated to implement a similar optimization when iterating directly
using a reference iterator, because multiple reference iterators can be
in use at the same time, with interleaved calls to
ref_iterator_advance(). (In fact we do exactly that in
merge_ref_iterator.)

But that is not necessary. peel_ref() is only called while iterating
over references. Callers who iterate using the for_each_ref() functions
benefit from the optimization described above. Callers who iterate using
reference iterators directly have access to the ref_iterator, so they
can call ref_iterator_peel() themselves to get an analogous optimization
in a more straightforward manner.

If we rewrite all callers to use the reference iteration API, then we
can remove the current_ref_iter hack permanently.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/patch_638.diff
https://github.com/git/git/commit/3bc581b9406e1e9a3f879d379106ee1e3bc48f5c,20 Jun 2016,"refs: introduce an iterator interface

Currently, the API for iterating over references is via a family of
for_each_ref()-type functions that invoke a callback function for each
selected reference. All of these eventually call do_for_each_ref(),
which knows how to do one thing: iterate in parallel through two
ref_caches, one for loose and one for packed refs, giving loose
references precedence over packed refs. This is rather complicated code,
and is quite specialized to the files backend. It also requires callers
to encapsulate their work into a callback function, which often means
that they have to define and use a ""cb_data"" struct to manage their
context.

The current design is already bursting at the seams, and will become
even more awkward in the upcoming world of multiple reference storage
backends:

* Per-worktree vs. shared references are currently handled via a kludge
  in git_path() rather than iterating over each part of the reference
  namespace separately and merging the results. This kludge will cease
  to work when we have multiple reference storage backends.

* The current scheme is inflexible. What if we sometimes want to bypass
  the ref_cache, or use it only for packed or only for loose refs? What
  if we want to store symbolic refs in one type of storage backend and
  non-symbolic ones in another?

In the future, each reference backend will need to define its own way of
iterating over references. The crux of the problem with the current
design is that it is impossible to compose for_each_ref()-style
iterations, because the flow of control is owned by the for_each_ref()
function. There is nothing that a caller can do but iterate through all
references in a single burst, so there is no way for it to interleave
references from multiple backends and present the result to the rest of
the world as a single compound backend.

This commit introduces a new iteration primitive for references: a
ref_iterator. A ref_iterator is a polymorphic object that a reference
storage backend can be asked to instantiate. There are three functions
that can be applied to a ref_iterator:

* ref_iterator_advance(): move to the next reference in the iteration
* ref_iterator_abort(): end the iteration before it is exhausted
* ref_iterator_peel(): peel the reference currently being looked at

Iterating using a ref_iterator leaves the flow of control in the hands
of the caller, which means that ref_iterators from multiple
sources (e.g., loose and packed refs) can be composed and presented to
the world as a single compound ref_iterator.

It also means that the backend code for implementing reference iteration
will sometimes be more complicated. For example, the
cache_ref_iterator (which iterates over a ref_cache) can't use the C
stack to recurse; instead, it must manage its own stack internally as
explicit data structures. There is also a lot of boilerplate connected
with object-oriented programming in C.

Eventually, end-user callers will be able to be written in a more
natural way—managing their own flow of control rather than having to
work via callbacks. Since there will only be a few reference backends
but there are many consumers of this API, this is a good tradeoff.

More importantly, we gain composability, and especially the possibility
of writing interchangeable parts that can work with any ref_iterator.

For example, merge_ref_iterator implements a generic way of merging the
contents of any two ref_iterators. It is used to merge loose + packed
refs as part of the implementation of the files_ref_iterator. But it
will also be possible to use it to merge other pairs of reference
sources (e.g., per-worktree vs. shared refs).

Another example is prefix_ref_iterator, which can be used to trim a
prefix off the front of reference names before presenting them to the
caller (e.g., ""refs/heads/master"" -> ""master"").

In this patch, we introduce the iterator abstraction and many utilities,
and implement a reference iterator for the files ref storage backend.
(I've written several other obvious utilities, for example a generic way
to filter references being iterated over. These will probably be useful
in the future. But they are not needed for this patch series, so I am
not including them at this time.)

In a moment we will rewrite do_for_each_ref() to work via reference
iterators (allowing some special-purpose code to be discarded), and do
something similar for reflogs. In future patch series, we will expose
the ref_iterator abstraction in the public refs API so that callers can
use it directly.

Implementation note: I tried abstracting this a layer further to allow
generic iterators (over arbitrary types of objects) and generic
utilities like a generic merge_iterator. But the implementation in C was
very cumbersome, involving (in my opinion) too much boilerplate and too
much unsafe casting, some of which would have had to be done on the
caller side. However, I did put a few iterator-related constants in a
top-level header file, iterator.h, as they will be useful in a moment to
implement iteration over directory trees and possibly other types of
iterators in the future.

Signed-off-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",916,data/crawl/git/patch_639.diff
https://github.com/git/git/commit/a873924483ec6ec548e94d723fe62875b1a4ec93,20 Jun 2016,"ref_resolves_to_object(): new function

Extract new function ref_resolves_to_object() from
entry_resolves_to_object(). It can be used even if there is no ref_entry
at hand.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_640.diff
https://github.com/git/git/commit/0581b546419627d4e82f7df8b195fa207ef42f6a,18 Jun 2016,"sign_buffer: use pipe_command

Similar to the prior commit for verify_signed_buffer, the
motivation here is both to make the code simpler, and to
avoid any possible deadlocks with gpg.

In this case we have the same ""write to stdin, then read
from stdout"" that the verify case had. This is unlikely to
be a problem in practice, since stdout has the detached
signature, which it cannot compute until it has read all of
stdin (if it were a non-detached signature, that would be a
problem, though).

We don't read from stderr at all currently. However, we will
want to in a future patch, so this also prepares us there
(and in that case gpg _does_ write before reading all of the
input, though again, it is unlikely that a key uid will fill
up a pipe buffer).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_641.diff
https://github.com/git/git/commit/0d2b664efd815a3f6432723adb41732d90cc9be1,18 Jun 2016,"verify_signed_buffer: use pipe_command

This is shorter and should make the function easier to
follow. But more importantly, it removes the possibility of
any deadlocks based on reading or writing to gpg.

It's not clear if such a deadlock is possible in practice.

We do write the whole payload before reading anything, so we
could deadlock there. However, in practice gpg will need to
read our whole input to verify the signature, so it will
drain our payload first. It could write an error to stderr
before reading, but it's unlikely that such an error
wouldn't be followed by it immediately exiting, or that the
error would actually be larger than a pipe buffer.

On the writing side, we drain stderr (with the
human-readable output) in its entirety before reading stdout
(with the status-fd data). Running strace on ""gpg --verify""
does show interleaved output on the two descriptors:

  write(2, ""gpg: "", 5)                    = 5
  write(2, ""Signature made Thu 16 Jun 2016 0""..., 73) = 73
  write(1, ""[GNUPG:] SIG_ID tQw8KGcs9rBfLvAj""..., 66) = 66
  write(1, ""[GNUPG:] GOODSIG 69808639F9430ED""..., 60) = 60
  write(2, ""gpg: "", 5)                    = 5
  write(2, ""Good signature from \""Jeff King <""..., 47) = 47
  write(2, ""\n"", 1)                       = 1
  write(2, ""gpg: "", 5)                    = 5
  write(2, ""                aka \""Jeff King <""..., 49) = 49
  write(2, ""\n"", 1)                       = 1
  write(1, ""[GNUPG:] VALIDSIG C49CE24156AF08""..., 135) = 135
  write(1, ""[GNUPG:] TRUST_ULTIMATE\n"", 24) = 24

The second line written to stdout there contains the
signer's UID, which can be arbitrarily long. If it fills the
pipe buffer, then gpg would block writing to its stdout,
while we are blocked trying to read its stderr.

In practice, GPG seems to limit UIDs to 2048 bytes, so
unless your pipe buffer size is quite small, or unless gpg
does not enforce the limit under some conditions, this seems
unlikely in practice.

Still, it is not hard for us to be cautious and just use
pipe_command.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_642.diff
https://github.com/git/git/commit/96335bcf4d64c29add3692fb41671190123cf44e,18 Jun 2016,"run-command: add pipe_command helper

We already have capture_command(), which captures the stdout
of a command in a way that avoids deadlocks. But sometimes
we need to do more I/O, like capturing stderr as well, or
sending data to stdin. It's easy to write code that
deadlocks racily in these situations depending on how fast
the command reads its input, or in which order it writes its
output.

Let's give callers an easy interface for doing this the
right way, similar to what capture_command() did for the
simple case.

The whole thing is backed by a generic poll() loop that can
feed an arbitrary number of buffers to descriptors, and fill
an arbitrary number of strbufs from other descriptors. This
seems like overkill, but the resulting code is actually a
bit cleaner than just handling the three descriptors
(because the output code for stdout/stderr is effectively
duplicated, so being able to loop is a benefit).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/patch_643.diff
https://github.com/git/git/commit/f813fb41fcf90683afa5c4eb28807d3d3fca63be,17 Jun 2016,"i18n: unmark die messages for translation

These messages are relevant for the programmer only, not for the end
user.  Thus, they can be unmarked for translation, saving translator
some work.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_644.diff
https://github.com/git/git/commit/c30364d0804e260049c0933879a3bafe01e5e57e,17 Jun 2016,"i18n: init-db: join message pieces

Join message displayed during repository initialization in one entire
sentence.  That would improve translations since it's easier translate
an entire sentence than translating each piece.

Update Icelandic translation to reflect the changes.  The Icelandic
translation of these messages is used with test
t0204-gettext-reencode-sanity.sh and not updating the translation would
fail the test.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_645.diff
https://github.com/git/git/commit/a1b467a4eee547973709ee4e1473febd8d1b4c85,17 Jun 2016,"i18n: remote: allow translations to reorder message

Before this patch, translations couldn't place the branch name
where it was better fit in the message ""and with remote <branch_name>"".
Allow translations that, instead of forcing the branch name to display
right of the message.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_646.diff
https://github.com/git/git/commit/7ba7b9abcc6f683f3b18315495d30811a6bc9e12,17 Jun 2016,"i18n: remote: mark URL fallback text for translation

Marks fallback text for translation that may be displayed in git remote
show output.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_647.diff
https://github.com/git/git/commit/e923a8abe9b9e1ada28153160fb86a144162b06e,17 Jun 2016,"i18n: standardise messages

Standardise messages in order to save translators some work.

Nuances fixed in this commit:
""failed to read %s""
""read of %s failed""

""detach the HEAD at named commit""
""detach HEAD at named commit""

""removing '%s' failed""
""failed to remove '%s'""

""index file corrupt""
""corrupt index file""

""failed to read %s""
""read of %s failed""

""detach the HEAD at named commit""
""detach HEAD at named commit""

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_648.diff
https://github.com/git/git/commit/62d09ef3191e119791902e3a87a776ab79ab60be,17 Jun 2016,"i18n: sequencer: add period to error message

Add a period to error message so it matches others instances in
sequencer.c. Now translator would have to translate such message only
once.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_649.diff
https://github.com/git/git/commit/bef4830e88008adf488d190c742e243cacc46e16,17 Jun 2016,"i18n: merge: mark messages for translation

Mark messages shown to the user for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_650.diff
https://github.com/git/git/commit/5313827f7eb5a54391da357ae01f2651fde28c8f,17 Jun 2016,"i18n: notes: mark strings for translation

Mark strings of messages for the user as translatable.

Update tests t3310-notes-merge-manual-resolve.sh and
t3320-notes-merge-worktrees.sh to reflect new translatable messages.

Tests that grep for .git/NOTES_MERGE_WORKTREE reflect the translatable
string ""Automatic notes merge failed. Fix conflicts in %s and [...]"".

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_651.diff
https://github.com/git/git/commit/3c5077fe338c5af4f003e298267aa4071c125c8a,17 Jun 2016,"i18n: transport-helper.c: change N_() call to _()

The N_() no-op call currently marks the string to be extracted by
xgettext but doesn't trigger the retrieval of the translation at run
time, whereas _() does both. Meaning that, in spite of having
translations available, they were never retrieved to make use of them.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_652.diff
https://github.com/git/git/commit/14dc4899e535964311dfafc504dac941ecd52432,17 Jun 2016,"i18n: bisect: mark strings for translation

In the last message, involving Q_(), try to mark the message in such way
that is suited for RTL (Right to Left) languages.

Update test t6030-bisect-porcelain.sh to reflect the changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_653.diff
https://github.com/git/git/commit/1edbaac3bbe1a55cf3450ae7a350b50826d5d283,17 Jun 2016,"tests: use test_i18n* functions to suppress false positives

The test functions test_i18ncmp and test_i18ngrep pretend success if run
under GETTEXT_POISON. By using those functions to test output which is
correctly marked as translatable, enables one to detect if the strings
newly marked for translation are from plumbing output. If they are
indeed from plumbing, the test would fail, and the string should be
unmarked, since it is not seen by users.

Thus, it is productive to not have false positives when running the test
under GETTEXT_POISON. This commit replaces normal test functions by
their i18n aware variants in use-cases know to be correctly marked for
translation, suppressing false positives.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_654.diff
https://github.com/git/git/commit/ff3b018d2f7d6ed9ebf7d728b2fa2b5d0bb1b207,17 Jun 2016,"merge-octopus: use die shell function from git-sh-setup.sh

Source git-sh-setup in order to use die shell function from
git-sh-setup.sh library instead of using the one defined in
git-merge-octopus.sh. Remove the former die function.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_655.diff
https://github.com/git/git/commit/ab33a76ec5313b00d630a14d2a843cdb942ed2be,17 Jun 2016,"i18n: setup: mark strings for translation

Update tests that compare the strings newly marked for translation to
succeed when running under GETTEXT_POISON.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_656.diff
https://github.com/git/git/commit/b8fc9e43a7da5c8cb1e90eb569b5e821883c2e06,17 Jun 2016,"i18n: rebase-interactive: mark here-doc strings for translation

Use pipe to send gettext output to git stripspace instead of the
original method of using shell here-document, because command
substitution '$(...)' would not take place inside the here-documents.
The exception is the case of the last here-document redirecting to cat,
in which commands substitution works and, thus, is preserved in this
commit.

t3404: adapt test to the strings newly marked for translation
Test t3404-rebase-interactive.sh would fail under GETTEXT_POISON unless
using test_i18ngrep.

Add eval_ngettext fallback functions to be called when running, for
instance, under GETTEXT_POISON. Otherwise, tests would fail under
GETTEXT_POISON, or other build that doesn't support the GNU gettext,
because that function could not be found.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_657.diff
https://github.com/git/git/commit/9b0df093f6e9959bf8e788012d724a74f5f15a21,17 Jun 2016,"i18n: sequencer: mark entire sentences for translation

Mark entire sentences of error message rather than assembling one using
placeholders (e.g. ""Cannot %s during a %s"").

That would facilitate translation work because it is easier to translate
a entire sentence than translating pieces. We would have better
translations at the expense of source code verbosity.

Moreover, translators can now 1) translate the terms ""revert"" and
""cherry-pick"" if they please 2) have more leeway to adapt their
translations.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_658.diff
https://github.com/git/git/commit/7ab1d44f3316ccab63c5df39fda36ba9b74c4068,17 Jun 2016,"i18n: transport: mark strings for translation

Mark one printf string and one error string for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_659.diff
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_660.diff
https://github.com/git/git/commit/070b7e441649b9c2543fda7bfbef0ad58761f869,17 Jun 2016,"i18n: builtin/remote.c: fix mark for translation

The second string inside _() was not being extracted for translation by
xgettext, meaning that, although the string was passed to gettext, there
was no translation available.

Mark each individual string instead of marking the result of ternary if.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_661.diff
https://github.com/git/git/commit/e26a8c4721ceaf4c59e33bbd4e60f777b7ea9b62,14 Jun 2016,"repack: extend --keep-unreachable to loose objects

If you use ""repack -adk"" currently, we will pack all objects
that are already packed into the new pack, and then drop the
old packs. However, loose unreachable objects will be left
as-is. In theory these are meant to expire eventually with
""git prune"". But if you are using ""repack -k"", you probably
want to keep things forever and therefore do not run ""git
prune"" at all. Meaning those loose objects may build up over
time and end up fooling any object-count heuristics (such as
the one done by ""gc --auto"", though since git-gc does not
support ""repack -k"", this really applies to whatever custom
scripts people might have driving ""repack -k"").

With this patch, we instead stuff any loose unreachable
objects into the pack along with the already-packed
unreachable objects. This may seem wasteful, but it is
really no more so than using ""repack -k"" in the first place.
We are at a slight disadvantage, in that we have no useful
ordering for the result, or names to hand to the delta code.
However, this is again no worse than what ""repack -k"" is
already doing for the packed objects. The packing of these
objects doesn't matter much because they should not be
accessed frequently (unless they actually _do_ become
referenced, but then they would get moved to a different
part of the packfile during the next repack).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_662.diff
https://github.com/git/git/commit/905f27b86ac1f50c6870a064c3b5b9d82c97a145,14 Jun 2016,"repack: add --keep-unreachable option

The usual way to do a full repack (and what is done by
git-gc) is to run ""repack -Ad --unpack-unreachable=<when>"",
which will loosen any unreachable objects newer than
""<when>"", and drop any older ones.

This is a safer alternative to ""repack -ad"", because
""<when>"" becomes a grace period during which we will not
drop any new objects that are about to be referenced.
However, it isn't perfectly safe. It's always possible that
a process is about to reference an old object. Even if that
process were to take care to update the timestamp on the
object, there is no atomicity with a simultaneously running
""repack"" process.

So while unlikely, there is a small race wherein we may drop
an object that is in the process of being referenced. If you
do automated repacking on a large number of active
repositories, you may hit it eventually, and the result is a
corrupted repository.

It would be nice to fix that race in the long run, but it's
complicated.  In the meantime, there is a much simpler
strategy for automated repository maintenance: do not drop
objects at all. We already have a ""--keep-unreachable""
option in pack-objects; we just need to plumb it through
from git-repack.

Note that this _isn't_ plumbed through from git-gc, so at
this point it's strictly a tool for people doing their own
advanced repository maintenance strategy.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_663.diff
https://github.com/git/git/commit/d993ce1ed2f025708b0f78bed241466e35f1e8a0,14 Jun 2016,"blame: improve diagnosis for ""--reverse NEW""

""git blame --reverse OLD..NEW -- PATH"" tells us to start from the
contents in PATH at OLD and observe how each line is changed while
the history develops up to NEW, and report for each line the latest
commit up to which the line survives in the original form.

If you say ""git blame --reverse NEW -- PATH"" by mistake, we complain
about the missing OLD, but we phrased it as ""No commit to dig down
to?""  In this case, however, we are digging up from OLD, so say so.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_664.diff
https://github.com/git/git/commit/ed008d7bb957ccfbe32c95aad74ee78e0e31de16,14 Jun 2016,"strbuf: describe the return value of strbuf_read_file

Mentored-by: Lars Schneider <larsxschneider@gmail.com>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_665.diff
https://github.com/git/git/commit/cccf74e2da85808478c784e403a69bbfe2b9f518,13 Jun 2016,"fetch, upload-pack: --deepen=N extends shallow boundary by N commits

In git-fetch, --depth argument is always relative with the latest
remote refs. This makes it a bit difficult to cover this use case,
where the user wants to make the shallow history, say 3 levels
deeper. It would work if remote refs have not moved yet, but nobody
can guarantee that, especially when that use case is performed a
couple months after the last clone or ""git fetch --depth"". Also,
modifying shallow boundary using --depth does not work well with
clones created by --since or --not.

This patch fixes that. A new argument --deepen=<N> will add <N> more (*)
parent commits to the current history regardless of where remote refs
are.

Have/Want negotiation is still respected. So if remote refs move, the
server will send two chunks: one between ""have"" and ""want"" and another
to extend shallow history. In theory, the client could send no ""want""s
in order to get the second chunk only. But the protocol does not allow
that. Either you send no want lines, which means ls-remote; or you
have to send at least one want line that carries deep-relative to the
server..

The main work was done by Dongcan Jiang. I fixed it up here and there.
And of course all the bugs belong to me.

(*) We could even support --deepen=<N> where <N> is negative. In that
case we can cut some history from the shallow clone. This operation
(and --depth=<shorter depth>) does not require interaction with remote
side (and more complicated to implement as a result).

Helped-by: Duy Nguyen <pclouds@gmail.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Dongcan Jiang <dongcan.jiang@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/patch_666.diff
https://github.com/git/git/commit/859e5df916cc3f3cba920c527f485ffaf6d7efa9,13 Jun 2016,"clone: define shallow clone boundary with --shallow-exclude

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_667.diff
https://github.com/git/git/commit/a45a260086b395729e3c26c9680602e1352184b5,13 Jun 2016,"fetch: define shallow boundary with --shallow-exclude

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_668.diff
https://github.com/git/git/commit/269a7a831636b7c7a453f6621fc8b440ff28a408,13 Jun 2016,"upload-pack: support define shallow boundary by excluding revisions

This should allow the user to say ""create a shallow clone of this branch
after version <some-tag>"".

Short refs are accepted and expanded at the server side with expand_ref()
because we cannot expand (unknown) refs from the client side.

Like deepen-since, deepen-not cannot be used with deepen. But deepen-not
can be mixed with deepen-since. The result is exactly how you do the
command ""git rev-list --since=... --not ref"".

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_669.diff
https://github.com/git/git/commit/994c2aaf31e1f8e8e69f86324e585620fee68c82,13 Jun 2016,"clone: define shallow clone boundary based on time with --shallow-since

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_670.diff
https://github.com/git/git/commit/508ea88226bbdd25ac0aac4f9c8a65a2c3b5be5c,13 Jun 2016,"fetch: define shallow boundary with --shallow-since

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_671.diff
https://github.com/git/git/commit/569e554be9cb88047d9f2752750e0c260241f446,13 Jun 2016,"upload-pack: add deepen-since to cut shallow repos based on time

This should allow the user to say ""create a shallow clone containing the
work from last year"" (once the client side is fixed up, of course).

In theory deepen-since and deepen (aka --depth) can be used together to
draw the shallow boundary (whether it's intersection or union is up to
discussion, but if rev-list is used, it's likely intersection). However,
because deepen goes with a custom commit walker, we can't mix the two
yet.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_672.diff
https://github.com/git/git/commit/3d9ff4d736475bc74ed249c579b3ad7322e22b85,13 Jun 2016,"shallow.c: implement a generic shallow boundary finder based on rev-list

Instead of a custom commit walker like get_shallow_commits(), this new
function uses rev-list to mark NOT_SHALLOW to all reachable commits,
except borders. The definition of reachable is to be defined by the
protocol later. This makes it more flexible to define shallow boundary.

The way we find border is paint all reachable commits NOT_SHALLOW.  Any
of them that ""touches"" commits without NOT_SHALLOW flag are considered
shallow (e.g. zero parents via grafting mechanism). Shallow commits and
their true parents are all marked SHALLOW. Then NOT_SHALLOW is removed
from shallow commits at the end.

There is an interesting observation. With a generic walker, we can
produce all kinds of shallow cutting. In the following graph, every
commit but ""x"" is reachable. ""b"" is a parent of ""a"".

           x -- a -- o
          /    /
    x -- c -- b -- o

After this function is run, ""a"" and ""c"" are both considered shallow
commits. After grafting occurs at the client side, what we see is

                a -- o
                    /
         c -- b -- o

Notice that because of grafting, ""a"" has zero parents, so ""b"" is no
longer a parent of ""a"".

This is unfortunate and may be solved in two ways. The first is change
the way shallow grafting works and keep ""a -- b"" connection if ""b""
exists and always ends at shallow commits (iow, no loose ends). This is
hard to detect, or at least not cheap to do.

The second way is mark one ""x"" as shallow commit instead of ""a"" and
produce this graph at client side:

           x -- a -- o
               /    /
         c -- b -- o

More commits, but simpler grafting rules.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_673.diff
https://github.com/git/git/commit/1dd73e20d72921fe81a881a9f6cff6d02eca8146,13 Jun 2016,"fetch-pack.c: mark strings for translating

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_674.diff
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_675.diff
https://github.com/git/git/commit/5c24cdea1e33c72bfed4af25a363eb5ceae11199,13 Jun 2016,"upload-pack: move ""shallow"" sending code out of deepen()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_676.diff
https://github.com/git/git/commit/e8e44de7874f6ea7cdf35b526f790cc7fa8f34e6,13 Jun 2016,"upload-pack: move shallow deepen code out of receive_needs()

This is a prep step for further refactoring. Besides reindentation and
s/shallows\./shallows->/g, no other changes are expected.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_677.diff
https://github.com/git/git/commit/9318c5dd140b55c0384843c57b4b24a378cd5068,13 Jun 2016,"transport-helper.c: refactor set_helper_option()

For now we can handle two types, string and boolean, in
set_helper_option(). Later on we'll add string_list support, which does
not fit well. The new function strbuf_set_helper_option() can be reused
for a separate function that handles string-list.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_678.diff
https://github.com/git/git/commit/346ef53058ef25f5a7273ee77c03ebc5f732ad77,13 Jun 2016,"worktree.c: add is_worktree_locked()

We need this later to avoid double locking a worktree, or unlocking one
when it's not even locked.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_679.diff
https://github.com/git/git/commit/665b35eccd39fefd714cb5c332277a6b94fd9386,13 Jun 2016,"submodule--helper: initial clone learns retry logic

Each submodule that is attempted to be cloned, will be retried once in
case of failure after all other submodules were cloned. This helps to
mitigate ephemeral server failures and increases chances of a reliable
clone of a repo with hundreds of submodules immensely.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_680.diff
https://github.com/git/git/commit/71564516deccafba0a58129bd7d3851e28fdb4bb,13 Jun 2016,"add_update(): initialize the whole ref_update

Change add_update() to initialize all of the fields in the new
ref_update object. Rename the function to ref_transaction_add_update(),
and increase its visibility to all of the refs-related code.

All of this makes the function more useful for other future callers.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",62,data/crawl/git/patch_681.diff
https://github.com/git/git/commit/c52ce248d63a185eb0a616b361d1fd72c5c66451,13 Jun 2016,"ref_transaction_create(): disallow recursive pruning

It is nonsensical (and a little bit dangerous) to use REF_ISPRUNING
without REF_NODEREF. Forbid it explicitly. Change the one REF_ISPRUNING
caller to pass REF_NODEREF too.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",7,data/crawl/git/patch_682.diff
https://github.com/git/git/commit/3a39f61e0468d7aea1a6f57ddbdcc74aaafa8410,10 Jun 2016,"config.c: fix misspelt ""occurred"" in an error message

Signed-off-by: Peter Colberg <peter@colberg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_683.diff
https://github.com/git/git/commit/b333d0d6f450d4f9c4535fd9fd6e0f4ef367507c,10 Jun 2016,"write_or_die: remove the unused write_or_whine() function

Now the last caller of this function is gone, and new ones are
unlikely to appear, because this function is doing very little that
a regular if() does not besides obfuscating the error message (and
if we ever did want something like it, we would probably prefer the
function to come back with more ""normal"" return value semantics).

Signed-off-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_684.diff
https://github.com/git/git/commit/2a0e6cdedab306eccbd297c051035c13d0266343,09 Jun 2016,"Use ""working tree"" instead of ""working directory"" for git status

Working directory can be easily confused with the current directory.
In one of my patches I already updated the usage of working directory
with working tree for the man page but I noticed that git status also
uses this incorrect term.

Signed-off-by: Lars Vogel <Lars.Vogel@vogella.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_685.diff
https://github.com/git/git/commit/e51b0dfc978649b9f0e3a594030810cc472a8b08,09 Jun 2016,"builtin/commit.c: memoize git-path for COMMIT_EDITMSG

This is a follow up commit for f932729c (memoize common git-path
""constant"" files, 10-Aug-2015).

The many function calls to git_path() are replaced by
git_path_commit_editmsg() and which thus eliminates the need to repeatedly
compute the location of ""COMMIT_EDITMSG"".

Mentored-by: Lars Schneider <larsxschneider@gmail.com>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_686.diff
https://github.com/git/git/commit/f0bca72dc77f62d61fc355bd6fe6e32b194950b8,08 Jun 2016,"send-pack: use buffered I/O to talk to pack-objects

We start a pack-objects process and then write all of the
positive and negative sha1s to it over a pipe. We do so by
formatting each item into a fixed-size buffer and then
writing each individually. This has two drawbacks:

  1. There's some manual computation of the buffer size,
     which is not immediately obvious is correct (though it
     is).

  2. We write() once per sha1, which means a lot more system
     calls than are necessary.

We can solve both by wrapping the pipe descriptor in a stdio
handle; this is the same technique used by upload-pack when
serving fetches.

Note that we can also simplify and improve the error
handling here. The original detected a single write error
and broke out of the loop (presumably to avoid writing the
error message over and over), but never actually acted on
seeing an error; we just fed truncated input and took
whatever pack-objects returned.

In practice, this probably didn't matter, as the likely
errors would be caused by pack-objects dying (and we'd
probably just die with SIGPIPE anyway). But we can easily
make this simpler and more robust; the stdio handle keeps an
error flag, which we can check at the end.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_687.diff
https://github.com/git/git/commit/4e55ed32db81d06a4f618e2cc0f9da0e223ae304,08 Jun 2016,"add: add --chmod=+x / --chmod=-x options

The executable bit will not be detected (and therefore will not be
set) for paths in a repository with `core.filemode` set to false,
though the users may still wish to add files as executable for
compatibility with other users who _do_ have `core.filemode`
functionality.  For example, Windows users adding shell scripts may
wish to add them as executable for compatibility with users on
non-Windows.

Although this can be done with a plumbing command
(`git update-index --add --chmod=+x foo`), teaching the `git-add`
command allows users to set a file executable with a command that
they're already familiar with.

Signed-off-by: Edward Thomson <ethomson@edwardthomson.com>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_688.diff
https://github.com/git/git/commit/0f974e2124e5220674eee079988b87e23f5e2de1,06 Jun 2016,"cherry-pick: allow to pick to unborn branches

cherry-pick allows to pick single commits to an empty HEAD, but not
multiple commits.

Allow the multiple commit case, too.

Reported-by: Fabrizio Cucci <fabrizio.cucci@gmail.com>
Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_689.diff
https://github.com/git/git/commit/8f31fac365c312aa9109a7a1fc1014e56ed473d2,03 Jun 2016,"builtin/apply: add 'lock_file' pointer into 'struct apply_state'

We cannot have a 'struct lock_file' allocated on the stack, as lockfile.c
keeps a linked list of all created lock_file structures.

Also 'struct apply_state' users might later want the same 'struct lock_file'
instance to be reused by different series of calls to the apply api.

So let's add a 'struct lock_file *lock_file' pointer into 'struct apply_state'
and have the user of 'struct apply_state' allocate memory for the actual
'struct lock_file' instance.

Let's also add an argument to init_apply_state(), so that the caller can
easily supply a pointer to the allocated instance.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_690.diff
https://github.com/git/git/commit/44431df02459ec6c4d8c705dd15f376015407043,01 Jun 2016,"submodule: remove bashism from shell script

Junio pointed out `relative_path` was using bashisms via the
local variables. As the longer term goal is to rewrite most of the
submodule code in C, do it now.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_691.diff
https://github.com/git/git/commit/b0f4b4084626ab0f87611acd89030e8bdf0b850e,01 Jun 2016,"submodule--helper: offer a consistent API

In 48308681 (2016-02-29, git submodule update: have a dedicated helper
for cloning), the helper communicated errors back only via exit code,
and dance with printing '#unmatched' in case of error was left to
git-submodule.sh as it uses the output of the helper and pipes it into
shell commands. This change makes the helper consistent by never
printing '#unmatched' in the helper but always handling these piping
issues in the actual shell script.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_692.diff
https://github.com/git/git/commit/91b769c48f4cf46d9514770849a1bf9cb33430c3,01 Jun 2016,"builtin/apply: move applying patches into apply_all_patches()

To libify the apply functionality we should provide a function to
apply many patches. Let's move the code to do that into a new
apply_all_patches() function.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/patch_693.diff
https://github.com/git/git/commit/c84a86c99526b88cfd7664888ecbfd28f35a025f,01 Jun 2016,"builtin/apply: move 'state' check into check_apply_state()

To libify the apply functionality we should provide a function
to check that the values in a 'struct apply_state' instance are
coherent. Let's move the code to do that into a new
check_apply_state() function.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_694.diff
https://github.com/git/git/commit/d7263d097c4510d864f8c9ff808bc9b377f0bf8f,01 Jun 2016,"builtin/apply: move 'state_linenr' global into 'struct apply_state'

To libify the apply functionality the 'state_linenr' variable should
not be static and global to the file. Let's move it into
'struct apply_state'.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_695.diff
https://github.com/git/git/commit/4b0891ffe4ec3aef081cf48c5f9a747586076f7a,31 May 2016,"More topics for 2.8.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_696.diff
https://github.com/git/git/commit/d3621de789ab57739f48b065751089d828b50240,31 May 2016,"t4051: rewrite, add more tests

Remove the tests that checked against a fixed result and replace them
with more focused checks of desired properties of the created diffs.
That way we get more detailed and meaningful diagnostics.

Store test file contents in files in a subdirectory in order to avoid
cluttering the test script with them.

Use tagged commits to store the changes to test diff -W against instead
of using changes to the worktree.  Use the worktree instead to try and
apply the generated patch in order to validate it.

Document unwanted features: trailing empty lines, too much context for
appended functions, insufficient context at the end with -U0.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",314,data/crawl/git/patch_697.diff
https://github.com/git/git/commit/9acc5911119ec0209877fbaa0a1e68aa714c191e,27 May 2016,"config: add a notion of ""scope""

A config callback passed to git_config() doesn't know very
much about the context in which it sees a variable. It can
ask whether the variable comes from a file, and get the file
name. But without analyzing the filename (which is hard to
do accurately), it cannot tell whether it is in system-level
config, user-level config, or repo-specific config.

Generally this doesn't matter; the point of not passing this
to the callback is that it should treat the config the same
no matter where it comes from. But some programs, like
upload-pack, are a special case: we should be able to run
them in an untrusted repository, which means we cannot use
any ""dangerous"" config from the repository config file (but
it is OK to use it from system or user config).

This patch teaches the config code to record the ""scope"" of
each variable, and make it available inside config
callbacks, similar to how we give access to the filename.
The scope is the starting source for a particular parsing
operation, and remains the same even if we include other
files (so a .git/config which includes another file will
remain CONFIG_SCOPE_REPO, as it would be similarly
untrusted).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_698.diff
https://github.com/git/git/commit/0d44a2dacc84fb7dcb5d684800e976f3b3c76d00,27 May 2016,"config: return configset value for current_config_ functions

When 473166b (config: add 'origin_type' to config_source
struct, 2016-02-19) added accessor functions for the origin
type and name, it taught them only to look at the ""cf""
struct that is filled in while we are parsing the config.
This is sufficient to make it work with git-config, which
uses git_config_with_options() under the hood. That function
freshly parses the config files and triggers the callback
when it parses each key.

Most git programs, however, use git_config(). This interface
will populate a cache during the actual parse, and then
serve values from the cache. Calling current_config_filename()
in a callback here will find a NULL cf and produce an error.
There are no such callers right now, but let's prepare for
adding some by making this work.

We already record source information in a struct attached to
each value. We just need to make it globally available and
then consult it from the accessor functions.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_699.diff
https://github.com/git/git/commit/a43b68a196652a0c6b054ee4905ac98d1cdcbbb9,25 May 2016,"daemon: enable SO_KEEPALIVE for all sockets

While --init-timeout and --timeout options exist and I've never
run git-daemon without them, some users may forget to set them
and encounter hung daemon processes when connections fail.
Enable socket-level timeouts so the kernel can send keepalive
probes as necessary to detect failed connections.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_700.diff
https://github.com/git/git/commit/3258258f51f45efeff5ce0e9f825f347a1404efa,24 May 2016,"config: set up config_source for command-line config

When we parse a config file, we set up the global ""cf""
variable as a pointer to a ""struct config_source"" describing
the file we are parsing. This is used for error messages, as
well as for lookup functions like current_config_name().

The ""cf"" variable is NULL in two cases:

  1. When we are parsing command-line config, in which case
     there is no source file.

  2. When we are not parsing any config at all.

Callers like current_config_name() must assume we are in
case 1 if they see a NULL ""cf"". However, this means that if
they are accidentally used outside of a config parsing
callback, they will quietly return a bogus answer.

This might seem like an unlikely accident (why would you ask
for the current config file if you are not parsing config?),
but it's actually an easy mistake to make due to the
configset caching. git_config() serves the answers from a
configset cache, and any calls to current_config_name() will
claim that we are parsing command-line config, no matter
what the original source.

So let's distinguish these cases by having the command-line
config parser set up a config_source with a NULL name (which
callers already handle properly). We can use this to catch
programming errors in some cases, and to give better
messages to the user in others.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_701.diff
https://github.com/git/git/commit/a77d6db69b2cbd16e98763f33ceaa76ff5ca2c54,24 May 2016,"git_config_parse_parameter: refactor cleanup code

We have several exits from the function, each of which has
to do some cleanup. Let's consolidate these in an ""out""
label we can jump to. This doesn't save us much now, but it
will help as we add more things that need cleanup.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_702.diff
https://github.com/git/git/commit/c57e501c51d6b76ce30658b94ee4a5dc6ac27f3e,20 May 2016,"pull: warn on --verify-signatures with --rebase

git-pull silently ignores the --verify-signatures option when
running --rebase, potentially leaving users in the belief that
the rebase operation would check for valid GPG signatures.

Implementing --verify-signatures for git-rebase was talked about,
but doubts for a valid workflow rose up.  Since you usually merge
other's branches into your branch you might have an interest that
their side has a valid GPG signature.

Rebasing, on the other hand, is to rebuild your branch on top of
other's work, in order to push the result back, and it is too late
to reject their work even if you find their commits lack acceptable
signature.

Let's warn users that the --verify-signatures option is ignored
during ""pull --rebase""; users do not wonder what would happen if
their commits lack acceptable signature that way.

Signed-off-by: Alexander Hirsch <1zeeky@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_703.diff
https://github.com/git/git/commit/3916adf9978b020f9a9b165f4c1c109046899560,18 May 2016,"Sync with 2.8.3

* maint:
  Git 2.8.3",38,data/crawl/git/patch_704.diff
https://github.com/git/git/commit/0f8e831356d4f1a34baf46bb1a6b2d4c89ec9cb8,18 May 2016,"Git 2.8.3

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_705.diff
https://github.com/git/git/commit/1f66975deb8402131fbf7c14330d0c7cdebaeaa2,17 May 2016,"Thirteenth batch for 2.9

Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_706.diff
https://github.com/git/git/commit/eb8fdbff3c26639912e73a01cfa2a86ce787d4b2,12 May 2016,"builtin/apply: avoid parameter shadowing 'linenr' global

Let's just rename the global 'state_linenr' as it will become
'state->linenr' in a following patch.

This also avoid errors when compiling with -Wshadow and makes
it safer to later move global variables into a ""state"" struct.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_707.diff
https://github.com/git/git/commit/8f4496148b643f48ec969f48fdaf5d6d8e6153ed,11 May 2016,"rerere: plug memory leaks upon ""rerere forget"" failure

Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_708.diff
https://github.com/git/git/commit/d9545c7f465ed103df44cd93caddfdd265757779,11 May 2016,"fast-import: implement unpack limit

With many incremental imports, small packs become highly
inefficient due to the need to readdir scan and load many
indices to locate even a single object.  Frequent repacking and
consolidation may be prohibitively expensive in terms of disk
I/O, especially in large repositories where the initial packs
were aggressively optimized and marked with .keep files.

In those cases, users may be better served with loose objects
and relying on ""git gc --auto"".

This changes the default behavior of fast-import for small
imports found in test cases, so adjustments to t9300 were
necessary.

Signed-off-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_709.diff
https://github.com/git/git/commit/f30afdabbfb9feeec402d351935879caf8b298ad,11 May 2016,"mingw: introduce the 'core.hideDotFiles' setting

On Unix (and Linux), files and directories whose names start with a dot
are usually not shown by default. This convention is used by Git: the
.git/ directory should be left alone by regular users, and only accessed
through Git itself.

On Windows, no such convention exists. Instead, there is an explicit flag
to mark files or directories as hidden.

In the early days, Git for Windows did not mark the .git/ directory (or
for that matter, any file or directory whose name starts with a dot)
hidden. This lead to quite a bit of confusion, and even loss of data.

Consequently, Git for Windows introduced the core.hideDotFiles setting,
with three possible values: true, false, and dotGitOnly, defaulting to
marking only the .git/ directory as hidden.

The rationale: users do not need to access .git/ directly, and indeed (as
was demonstrated) should not really see that directory, either. However,
not all dot files should be hidden by default, as e.g. Eclipse does not
show them (and the user would therefore be unable to see, say, a
.gitattributes file).

In over five years since the last attempt to bring this patch into core
Git, a slightly buggy version of this patch has served Git for Windows'
users well: no single report indicated problems with the hidden .git/
directory, and the stream of problems caused by the previously non-hidden
.git/ directory simply stopped. The bugs have been fixed during the
process of getting this patch upstream.

Note that there is a funny quirk we have to pay attention to when
creating hidden files: we use Win32's _wopen() function which
transmogrifies its arguments and hands off to Win32's CreateFile()
function. That latter function errors out with ERROR_ACCESS_DENIED (the
equivalent of EACCES) when the equivalent of the O_CREAT flag was passed
and the file attributes (including the hidden flag) do not match an
existing file's. And _wopen() accepts no parameter that would be
transmogrified into said hidden flag. Therefore, we simply try again
without O_CREAT.

A slightly different method is required for our fopen()/freopen()
function as we cannot even *remove* the implicit O_CREAT flag.
Therefore, we briefly mark existing files as unhidden when opening them
via fopen()/freopen().

The ERROR_ACCESS_DENIED error can also be triggered by opening a file
that is marked as a system file (which is unlikely to be tracked in
Git), and by trying to create a file that has *just* been deleted and is
awaiting the last open handles to be released (which would be handled
better by the ""Try again?"" logic, a story for a different patch series,
though). In both cases, it does not matter much if we try again without
the O_CREAT flag, read: it does not hurt, either.

For details how ERROR_ACCESS_DENIED can be triggered, see
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858

Original-patch-by: Erik Faye-Lund <kusmabite@gmail.com>
Initial-Test-By: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/patch_710.diff
https://github.com/git/git/commit/8ca65aebad55790d675f1eaead2dfc15fae60847,10 May 2016,"t0040: convert a few tests to use test-parse-options --expect

As a small example of using ""test-parse-options --expect"",
rewrite the ""check"" helper using it, instead of comparing
the whole variable dump.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_711.diff
https://github.com/git/git/commit/32d51d473f7a0a9f86b4d082fb4f9de78314a0bd,10 May 2016,"t0040: remove unused test helpers

9a001381 (Fix tests under GETTEXT_POISON on parseopt, 2012-08-27)
introduced check_i18n, but the helper was never used from the
beginning.

The same commit also introduced check_unknown_i18n to replace the
helper check_unknown and changed all users of the latter to use the
former, but failed to remove check_unknown itself.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_712.diff
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_713.diff
https://github.com/git/git/commit/accac4199c1d28dfd6c860b32d7111c3de8df7a6,10 May 2016,"test-parse-options: fix output when callback option fails

When test-parse-options detects an error on the command line, it
gives the usage string just like any parse-options API users do,
without showing any ""variable dump"".  An exception is the callback
test, where a ""variable dump"" for the option is done before the
command line options are fully parsed.

Do not expose this implementation detail by separating the handling
of callback test into two phases, one to capture the fact that an
option was given during the option parsing phase, and the other to
show that fact as a part of normal ""variable dump"".

The effect of this fix is seen in the patch to t/t0040 where it
tried ""test-parse-options --no-length"" where ""--length"" is a callback
that does not take a negative form.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_714.diff
https://github.com/git/git/commit/ab81411cede9e5fe52b416c4df835e19f1048426,10 May 2016,"ci: validate ""linkgit:"" in documentation

It is easy to add incorrect ""linkgit:<page>[<section>]"" references
to our documentation suite.  Catch these common classes of errors:

 * Referring to Documentation/<page>.txt that does not exist.

 * Referring to a <page> outside the Git suite.  In general, <page>
   must begin with ""git"".

 * Listing the manual <section> incorrectly.  The first line of the
   Documentation/<page>.txt must end with ""(<section>)"".

with a new script ""ci/lint-gitlink"", and drive it from ""make check-docs"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_715.diff
https://github.com/git/git/commit/1da045fb9db5db8f01eb5e7c6106880ca5274643,09 May 2016,"wrapper.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_716.diff
https://github.com/git/git/commit/1c8ead97f842fb385ce729bc45760b439365b79a,09 May 2016,"vcs-svn: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_717.diff
https://github.com/git/git/commit/d2b6afa2cb2e56d506442dfba96aa08b54d71f6b,09 May 2016,"upload-pack.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_718.diff
https://github.com/git/git/commit/43c728e2c2fe81cf401f39a60ab167a9ed542428,09 May 2016,"unpack-trees.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_719.diff
https://github.com/git/git/commit/1fee1dce711327811956bd78ad1f7270a3e2d824,09 May 2016,"transport-helper.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_720.diff
https://github.com/git/git/commit/7616c6ca9d3559a1768b7293c64c5a39e73bd365,09 May 2016,"sha1_file.c: use {error,die,warning}_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_721.diff
https://github.com/git/git/commit/02382f51b36c09ecacd21be18b55ba6b1433e9c9,09 May 2016,"server-info.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_722.diff
https://github.com/git/git/commit/6c979c74b26d48b82f5e144faf5aeccc2e875a8a,09 May 2016,"sequencer.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_723.diff
https://github.com/git/git/commit/fbcb0e0659618793815a57c5f60ad391ad6f452e,09 May 2016,"run-command.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_724.diff
https://github.com/git/git/commit/033e011e64052e61e03b4d4cec06c7445ed36e7f,09 May 2016,"rerere.c: use error_errno() and warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_725.diff
https://github.com/git/git/commit/9a3acba1caead126a9c009eb00573fc9451f8cf2,09 May 2016,"reachable.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_726.diff
https://github.com/git/git/commit/60901e4c220e565518c87b1349108ac7dfec0ba0,09 May 2016,"mailmap.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_727.diff
https://github.com/git/git/commit/a26f4ed682a64dcc6092c28dadb3f5c139d50576,09 May 2016,"ident.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_728.diff
https://github.com/git/git/commit/d2e255eefab204fa6585963d5670b6cffdee866e,09 May 2016,"http.c: use error_errno() and warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_729.diff
https://github.com/git/git/commit/7645d8f119997320c33423d95670824f05657bbb,09 May 2016,"grep.c: use error_errno()

While at there, improve the error message a bit (what operation failed?)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_730.diff
https://github.com/git/git/commit/ddf362a2a9b6cf784497162d21556a950f99dce8,09 May 2016,"gpg-interface.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_731.diff
https://github.com/git/git/commit/6c223e495877001987e525ca93b7fdd63e03b529,09 May 2016,"fast-import.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_732.diff
https://github.com/git/git/commit/e1ebb3c25bd42b06fe8f5f886af37dfac8a823a1,09 May 2016,"entry.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_733.diff
https://github.com/git/git/commit/9f9a522c159d5f7f399c91a22e2f73287a393a57,09 May 2016,"editor.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_734.diff
https://github.com/git/git/commit/a1f06be3ff78f088aa5e71cd518b74cdf5a4d34e,09 May 2016,"diff-no-index.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_735.diff
https://github.com/git/git/commit/26604f9f621b7b5710309671168d98722b8f5f33,09 May 2016,"credential-cache--daemon.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_736.diff
https://github.com/git/git/commit/37653a130af87f9103cf710bbd018eb9078f4bf4,09 May 2016,"copy.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_737.diff
https://github.com/git/git/commit/5cc026e218d0ad3962d10c0775fe9b5ac68eed09,09 May 2016,"connected.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_738.diff
https://github.com/git/git/commit/f0658ec9ea996f993e3665786b3f5ac0b92179e2,09 May 2016,"config.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_739.diff
https://github.com/git/git/commit/df8e31391da9ec97f907bec32a648da6145f4b08,09 May 2016,"compat/win32/syslog.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_740.diff
https://github.com/git/git/commit/4b94ec9b200e9bafc5fd2c9c4e8b7e7934d60c00,09 May 2016,"combine-diff.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_741.diff
https://github.com/git/git/commit/eb031a580163b396ff0e4ee0f219758b517380d5,09 May 2016,"check-racy.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_742.diff
https://github.com/git/git/commit/8d19e9309411ca875928b9336ff626b8b6851fcb,09 May 2016,"builtin/worktree.c: use error_errno()

While at there, improve the error message to say _what_ failed to
remove.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_743.diff
https://github.com/git/git/commit/17bef17ef8d319e620c19d032c082a18eb88a65f,09 May 2016,"builtin/upload-archive.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_744.diff
https://github.com/git/git/commit/23d05364fc5ba9fcc54cf5ae5503f3e987cec315,09 May 2016,"builtin/update-index.c: prefer ""err"" to ""errno"" in process_lstat_error

""errno"" is already passed in as ""err"". Here we should use err instead of
errno. errno is probably a copy/paste mistake in e011054 (Teach
git-update-index about gitlinks - 2007-04-12)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_745.diff
https://github.com/git/git/commit/7dcf3d97fa6098382828551de8f91ad8b23d5a4c,09 May 2016,"builtin/rm.c: use warning_errno()

While at there, improve the message a bit (what operation failed?) and
mark it for translation since the format string is now a sentence.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_746.diff
https://github.com/git/git/commit/54d47394b4307a0c9149007bd3d396b8eda8e995,09 May 2016,"builtin/pack-objects.c: use die_errno() and warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_747.diff
https://github.com/git/git/commit/62f94d54a98983a19cc9dc82daec5c76df466b0b,09 May 2016,"builtin/merge-file.c: use error_errno()

All these error() calls do not print error message previously, but
because when they are called, errno should be set. Use error_errno()
instead to give more information.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_748.diff
https://github.com/git/git/commit/880c0aef0fa8229ff4d3bc96f1f221ebf36443fe,09 May 2016,"builtin/mailsplit.c: use error_errno()

There's one change, in split_mbox(), where an error() without strerror()
as argument is converted to error_errno(). This is correct because the
previous call is fopen (not shown in the context lines), which should
set errno if it returns NULL.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_749.diff
https://github.com/git/git/commit/574774980cfdfe72d77cec831024f0229d10a1f3,09 May 2016,"builtin/help.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_750.diff
https://github.com/git/git/commit/6da31d7f75fa921f871eda76760b0c622d04147d,09 May 2016,"builtin/fetch.c: use error_errno()

A couple of newlines are also removed, because both error() and
error_errno() automatically append a newline.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_751.diff
https://github.com/git/git/commit/896ba1d11269e6e1cbf5c2795f908da5e3e1ce29,09 May 2016,"builtin/branch.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_752.diff
https://github.com/git/git/commit/6e59e9c0a658c619d390ed93466e457d4b80f0fe,09 May 2016,"builtin/am.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_753.diff
https://github.com/git/git/commit/23e7a312e115e4cbeda3d944b8020e014f0f908a,09 May 2016,"bisect.c: use die_errno() and warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_754.diff
https://github.com/git/git/commit/58e4e5118ae3707b417a19e8dc9224ac25c3f32f,09 May 2016,"usage.c: move format processing out of die_errno()

fmt_with_err() will be shared with the coming error_errno() and
warning_errno().

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_755.diff
https://github.com/git/git/commit/523a33ca17c76bee007d7394fb3930266c577c02,08 May 2016,"Git/SVN: die when there is no commit metadata

When passing a bad --trunk option to `git svn clone`, like for example the
same URL that we are cloning:

  C:\Windows\system32>git svn clone
  https://mycompany.svn.beanstalkapp.com/myproject --no-metadata -A
  c:\temp\svn_to_git_users.txt
  --trunk=https://mycompany.svn.beanstalkapp.com/myproject
  --tags=https://mycompany.svn.beanstalkapp.com/myproject/tags
  --branches=https://mycompany.svn.beanstalkapp.com/myproject/branches
  c:\code\Git_myproject

One gets an ""Use of uninitialized value $u in substitution (s///)"" error:

  [...]
  W: +empty_dir: branches/20080918_DBDEPLOY/vendor/src/csharp/MS WCSF
  Contrib/src/Services
  W: +empty_dir: branches/20080918_DBDEPLOY/vendor/src/csharp/RealWorldControls/References
  r530 = c276e3b039d8e38759c6fb17443349732552d7a2 (refs/remotes/origin/trunk)
  Found possible branch point:
  https://mycompany.svn.beanstalkapp.com/myproject/trunk =>
  https://mycompany.svn.beanstalkapp.com/myproject/branches/20080918_DBDEPLOY,
  529
  Use of uninitialized value $u in substitution (s///) at
  /mingw32/share/perl5/site_perl/Git/SVN.pm line 101.
  Use of uninitialized value $u in concatenation (.) or string at
  /mingw32/share/perl5/site_perl/Git/SVN.pm line 101.
  refs/remotes/origin/trunk:
  'https://mycompany.svn.beanstalkapp.com/myproject' not found in ''
  C:\Windows\system32>

Let's fix that by just die()ing when we have an uninitialized value because we
cannot get commit metadata from a ref.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Eric Wong <e@80x24.org>",3,data/crawl/git/patch_756.diff
https://github.com/git/git/commit/832c0e5e63a0f61c3788847d4a7abb82d9e86ef4,06 May 2016,"typofix: assorted typofixes in comments, documentation and messages

Many instances of duplicate words (e.g. ""the the path"") and
a few typoes are fixed, originally in multiple patches.

    wildmatch: fix duplicate words of ""the""
    t: fix duplicate words of ""output""
    transport-helper: fix duplicate words of ""read""
    Git.pm: fix duplicate words of ""return""
    path: fix duplicate words of ""look""
    pack-protocol.txt: fix duplicate words of ""the""
    precompose-utf8: fix typo of ""sequences""
    split-index: fix typo
    worktree.c: fix typo
    remote-ext: fix typo
    utf8: fix duplicate words of ""the""
    git-cvsserver: fix duplicate words

Signed-off-by: Li Peng <lip@dtdream.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_757.diff
https://github.com/git/git/commit/89044baa8b8a14b48e78a42ebdc43cfcd144ce28,06 May 2016,"submodule: stop sanitizing config options

The point of having a whitelist of command-line config
options to pass to submodules was two-fold:

  1. It prevented obvious nonsense like using core.worktree
     for multiple repos.

  2. It could prevent surprise when the user did not mean
     for the options to leak to the submodules (e.g.,
     http.sslverify=false).

For case 1, the answer is mostly ""if it hurts, don't do
that"". For case 2, we can note that any such example has a
matching inverted surprise (e.g., a user who meant
http.sslverify=true to apply everywhere, but it didn't).

So this whitelist is probably not giving us any benefit, and
is already creating a hassle as people propose things to put
on it. Let's just drop it entirely.

Note that we still need to keep a special code path for
""prepare the submodule environment"", because we still have
to take care to pass through $GIT_CONFIG_PARAMETERS (and
block the rest of the repo-specific environment variables).

We can do this easily from within the submodule shell
script, which lets us drop the submodule--helper option
entirely (and it's OK to do so because as a ""--"" program, it
is entirely a private implementation detail).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_758.diff
https://github.com/git/git/commit/7d1771524c8bc39856f7b30769c2f47c6061ba2f,05 May 2016,"t0040-parse-options: improve test coverage

Include tests to check for multiple levels of quiet and to check the
behavior of '--no-quiet'.

Include tests to check for multiple levels of verbose and to check the
behavior of '--no-verbose'.

Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",114,data/crawl/git/patch_759.diff
https://github.com/git/git/commit/e711b1af2ead2ffad5c510aadbbc387c7d8aa4c7,05 May 2016,"rename_ref(): remove unneeded local variable

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",9,data/crawl/git/patch_760.diff
https://github.com/git/git/commit/76fc394d50efef8f1308a0f0d56087f502dac689,05 May 2016,"commit_ref_update(): write error message to *err, not stderr

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",2,data/crawl/git/patch_761.diff
https://github.com/git/git/commit/4bb51aed1e858bfac174255ae4d8994af3a8e07a,03 May 2016,"Sync with maint

* maint:
  git-multimail: update to release 1.3.0",619,data/crawl/git/patch_762.diff
https://github.com/git/git/commit/4453d76c6abf28a3945a336c5321ea05f07bd8b6,03 May 2016,"git-multimail: update to release 1.3.0

The changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Stefan Tatschner <rumpelsepp@sevenbyte.org>
Contributions-by: Simon P <simon.git@le-huit.fr>
Contributions-by: Leander Hasty <leander@1stplayable.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",619,data/crawl/git/patch_763.diff
https://github.com/git/git/commit/c66410ed32a807cefca6f679ad5583eda2e9527b,03 May 2016,"submodule init: redirect stdout to stderr

Reroute the output of stdout to stderr as it is just informative
messages, not to be consumed by machines.

This should not regress any scripts that try to parse the
current output, as the output is already internationalized
and therefore unstable.

We want to init submodules from the helper for `submodule update`
in a later patch and the stdout output of said helper is consumed
by the parts of `submodule update` which are still written in shell.
So we have to be careful which messages are on stdout.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_764.diff
https://github.com/git/git/commit/ee88674f24151fe5c6cd6ccd3c1a6cd972b2adc0,02 May 2016,"Sync with maint

* maint:
  Start preparing for 2.8.3",61,data/crawl/git/patch_765.diff
https://github.com/git/git/commit/5b618c1c8d4feceba85cb3fc16f90b94f689877e,02 May 2016,"Start preparing for 2.8.3

Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_766.diff
https://github.com/git/git/commit/bbc61680168542cf6fd3ae637bde395c73b76f0f,29 Apr 2016,"Eighth batch for 2.9

Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_767.diff
https://github.com/git/git/commit/d92028a575dde9c325e23f89c3d2b24f13868c57,29 Apr 2016,"submodule init: fail gracefully with a missing .gitmodules file

When there is no .gitmodules file availabe to initialize a submodule
from, `submodule_from_path` just returns NULL. We need to check for
that and abort gracefully. When `submodule init` was implemented in shell,
a missing .gitmodules file would result in an error message

    No url found for submodule path '%s' in .gitmodules

Replicate that error message for now.

When the .gitmodules file is missing we can probably fail even earlier
for all of the submodules with an improved error message.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_768.diff
https://github.com/git/git/commit/9cea46cdda9359e54aec379c4b4e2f9470c35023,28 Apr 2016,"pack-objects: warn on split packs disabling bitmaps

It can be tempting for a server admin to want a stable set of
long-lived packs for dumb clients; but also want to enable bitmaps
to serve smart clients more quickly.

Unfortunately, such a configuration is impossible; so at least warn
users of this incompatibility since commit 21134714 (pack-objects:
turn off bitmaps when we split packs, 2014-10-16).

Tested the warning by inspecting the output of:

	make -C t t5310-pack-bitmaps.sh GIT_TEST_OPTS=-v

Signed-off-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_769.diff
https://github.com/git/git/commit/bb52995f3ec7fac2b282a91af4230e4f387af234,26 Apr 2016,"format-patch: introduce format.useAutoBase configuration

This allows to record the base commit automatically, it is equivalent
to set --base=auto in cmdline.

The format.useAutoBase has lower priority than command line option,
so if user set format.useAutoBase and pass the command line option in
the meantime, base_commit will be the one passed to command line
option.

Signed-off-by: Xiaolong Ye <xiaolong.ye@intel.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_770.diff
https://github.com/git/git/commit/3de665175f3433ccd1dadd4d5d09fa9553948e55,26 Apr 2016,"format-patch: introduce --base=auto option

Introduce --base=auto to record the base commit info automatically, the
base_commit will be the merge base of tip commit of the upstream branch
and revision-range specified in cmdline.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Wu Fengguang <fengguang.wu@intel.com>
Signed-off-by: Xiaolong Ye <xiaolong.ye@intel.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_771.diff
https://github.com/git/git/commit/fa2ab86d18f16ab5e6d2f2cd6e8cc00460bada17,26 Apr 2016,"format-patch: add '--base' option to record base tree info

Maintainers or third party testers may want to know the exact base tree
the patch series applies to. Teach git format-patch a '--base' option
to record the base tree info and append it at the end of the first
message (either the cover letter or the first patch in the series).

The base tree info consists of the ""base commit"", which is a well-known
commit that is part of the stable part of the project history everybody
else works off of, and zero or more ""prerequisite patches"", which are
well-known patches in flight that is not yet part of the ""base commit""
that need to be applied on top of ""base commit"" in topological order
before the patches can be applied.

The ""base commit"" is shown as ""base-commit: "" followed by the 40-hex of
the commit object name.  A ""prerequisite patch"" is shown as
""prerequisite-patch-id: "" followed by the 40-hex ""patch id"", which can
be obtained by passing the patch through the ""git patch-id --stable""
command.

Imagine that on top of the public commit P, you applied well-known
patches X, Y and Z from somebody else, and then built your three-patch
series A, B, C, the history would be like:

---P---X---Y---Z---A---B---C

With ""git format-patch --base=P -3 C"" (or variants thereof, e.g. with
""--cover-letter"" of using ""Z..C"" instead of ""-3 C"" to specify the
range), the base tree information block is shown at the end of the
first message the command outputs (either the first patch, or the
cover letter), like this:

base-commit: P
prerequisite-patch-id: X
prerequisite-patch-id: Y
prerequisite-patch-id: Z

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Wu Fengguang <fengguang.wu@intel.com>
Signed-off-by: Xiaolong Ye <xiaolong.ye@intel.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",240,data/crawl/git/patch_772.diff
https://github.com/git/git/commit/b6aec868afb17acdbd486c09602a658e14c98602,25 Apr 2016,"match-trees: convert several leaf functions to use struct object_id

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_773.diff
https://github.com/git/git/commit/70ad8c8d8c0840fb89492063274132d28bdfbe3b,25 Apr 2016,"convert: allow core.autocrlf=input and core.eol=crlf

Even though the configuration parser errors out when core.autocrlf
is set to 'input' when core.eol is set to 'crlf', there is no need
to do so, because the core.autocrlf setting trumps core.eol.

Allow all combinations of core.crlf and core.eol and document
that core.autocrlf overrides core.eol.

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_774.diff
https://github.com/git/git/commit/a0c4ddf6776dfcd9ea778e22abf1fbdcfa56d3aa,22 Apr 2016,"Sixth batch for post 2.8 cycle

Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_775.diff
https://github.com/git/git/commit/14ace5b77b493506a1f8ffde96a2f49cc7bc4db0,22 Apr 2016,"branch: do not rename a branch under bisect or rebase

The branch name in that case could be saved in rebase's head_name or
bisect's BISECT_START files. Ideally we should try to update them as
well. But it's trickier (*). Let's play safe and see if the user
complains about inconveniences before doing that.

(*) If we do it, bisect and rebase need to provide an API to rename
branches. We can't do it in worktree.c or builtin/branch.c because
when other people change rebase/bisect code, they may not be aware of
this code and accidentally break it (e.g. rename the branch file, or
refer to the branch in new files). It's a lot more work.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_776.diff
https://github.com/git/git/commit/d3b9ac07eb44974bb619d71fc6c81c9f2036b96c,22 Apr 2016,"worktree.c: make find_shared_symref() return struct worktree *

This gives the caller more information and they can answer things like,
""is it the main worktree"" or ""is it the current worktree"". The latter
question is needed for the ""checkout a rebase branch"" case later.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_777.diff
https://github.com/git/git/commit/bef234b09e5c3b2f63429fb49aff983f6f617f22,22 Apr 2016,"tag -v: verify directly rather than exec-ing verify-tag

Instead of having tag -v fork to run verify-tag, use the
gpg_verify_tag() function directly.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Santiago Torres <santiago@nyu.edu>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_778.diff
https://github.com/git/git/commit/45a227ef769df9fc0d198f323d2f919aa74375e1,22 Apr 2016,"verify-tag: move tag verification code to tag.c

The PGP verification routine for tags could be accessed by other modules
that require to do so.

Publish the verify_tag function in tag.c and rename it to gpg_verify_tag
so it does not conflict with builtin/mktag's static function.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Santiago Torres <santiago@nyu.edu>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_779.diff
https://github.com/git/git/commit/78ccd4419525562a2c9d2b7cebddba0914bde151,22 Apr 2016,"verify-tag: prepare verify_tag for libification

The current interface of verify_tag() resolves reference names to SHA1,
however, the plan is to make this functionality public and the current
interface is cumbersome for callers: they are expected to supply the
textual representation of a sha1/refname. In many cases, this requires
them to turn the sha1 to hex representation, just to be converted back
inside verify_tag.

Add a SHA1 parameter to use instead of the name parameter, and rename
the name parameter to ""name_to_report"" for reporting purposes only.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Santiago Torres <santiago@nyu.edu>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_780.diff
https://github.com/git/git/commit/c792d7b6cebe302d6e0377d9d983608309bcd775,20 Apr 2016,"run-command: teach async threads to ignore SIGPIPE

Async processes can be implemented as separate forked
processes, or as threads (depending on the NO_PTHREADS
setting). In the latter case, if an async thread gets
SIGPIPE, it takes down the whole process. This is obviously
bad if the main process was not otherwise going to die, but
even if we were going to die, it means the main process does
not have a chance to report a useful error message.

There's also the small matter that forked async processes
will not take the main process down on a signal, meaning git
will behave differently depending on the NO_PTHREADS
setting.

This patch fixes it by adding a new flag to ""struct async""
to block SIGPIPE just in the async thread. In theory, this
should always be on (which makes async threads behave more
like async processes), but we would first want to make sure
that each async process we spawn is careful about checking
return codes from write() and would not spew endlessly into
a dead pipe. So let's start with it as optional, and we can
enable it for specific sites in future patches.

The natural name for this option would be ""ignore_sigpipe"",
since that's what it does for the threaded case. But since
that name might imply that we are ignoring it in all cases
(including the separate-process one), let's call it
""isolate_sigpipe"". What we are really asking for is
isolation. I.e., not to have our main process taken down by
signals spawned by the async process. How that is
implemented is up to the run-command code.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_781.diff
https://github.com/git/git/commit/c9baaf9db99dc9f66d9674ab5d467b73f36ab1bf,19 Apr 2016,"test-match-trees: convert to use struct object_id

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_782.diff
https://github.com/git/git/commit/36e6a5baf1d45e125fcdb99781a0c6448109b44d,19 Apr 2016,"test-parse-options: print quiet as integer

We would want to see how multiple --quiet options affect the value of
the underlying variable (we may want ""--quiet --quiet"" to still be 1, or
we may want to see the value incremented to 2). Show the value as
integer to allow us to inspect it.

Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_783.diff
https://github.com/git/git/commit/8425b7ea6a00c443ca3649545ac6e9ddfa196ef6,19 Apr 2016,"t0040-test-parse-options.sh: fix style issues

Signed-off-by: Pranit Bauva <pranit.bauva@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_784.diff
https://github.com/git/git/commit/daf9f6499f853804270da4456664c2ff576774de,19 Apr 2016,"i18n: builtin/pull.c: split strings marked for translation

Split string ""If you wish to set tracking information
for this branch you can do so with:\n"" to match occurring string in
git-parse-remote.sh. In this case, the translator handles it only once.

On the other hand, the translations of the string that were already made
are mark as fuzzy and the translator needs to correct it herself.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_785.diff
https://github.com/git/git/commit/8a0de58a2a0cfd64944c2de9df184253286b7eac,19 Apr 2016,"i18n: builtin/pull.c: mark placeholders for translation

Some translations might also translate ""<remote>"" and ""<branch>"".

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_786.diff
https://github.com/git/git/commit/a127331cd812336235cb95b45b7e4c52c433be7f,19 Apr 2016,"mv: allow moving nested submodules

When directories are moved using `git mv` all files in the directory
have been just moved, but no further action was taken on them. This
was done by assigning the mode = WORKING_DIRECTORY to the files
inside a moved directory.

submodules however need to update their link to the git directory as
well as updates to the .gitmodules file. By removing the condition of
`mode != INDEX` (the remaining modes are BOTH and WORKING_DIRECTORY) for
the required submodule actions, we perform these for submodules in a
moved directory.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_787.diff
https://github.com/git/git/commit/3604242f080a813d6f20a7394def422d1e55b30e,17 Apr 2016,"submodule: port init from shell to C

By having the `submodule init` functionality in C, we can reference it
easier from other parts in the code in later patches. The code is split
up to have one function to initialize one submodule and a calling function
that takes care of the rest, such as argument handling and translating the
arguments to the paths of the submodules.

This is the first submodule subcommand that is fully converted to C
except for the usage string, so this is actually removing a call to
the `submodule--helper list` function, which is supposed to be used in
this transition. Instead we'll make a direct call to `module_list_compute`.

An explanation why we need to edit the prefixes in cmd_update in
git-submodule.sh in this patch:

By having no processing in the shell part, we need to convey the notion
of wt_prefix and prefix to the C parts, which former patches punted on
and did the processing of displaying path in the shell.

`wt_prefix` used to hold the path from the repository root to the current
directory, e.g. wt_prefix would be t/ if the user invoked the
`git submodule` command in ~/repo/t and ~repo is the GIT_DIR.

`prefix` used to hold the relative path from the repository root to the
operation, e.g. if you have recursive submodules, the shell script would
modify the `prefix` in each recursive step by adding the submodule path.

We will pass `wt_prefix` into the C helper via `git -C <dir>` as that
will setup git in the directory the user actually called git-submodule.sh
from. The `prefix` will be passed in via the `--prefix` option.

Having `prefix` and `wt_prefix` relative to the GIT_DIR of the
calling superproject is unfortunate with this patch as the C code doesn't
know about a possible recursion from a superproject via `submodule update
--init --recursive`.

To fix this, we change the meaning of `wt_prefix` to point to the current
project instead of the superproject and `prefix` to include any relative
paths issues in the superproject. That way `prefix` will become the leading
part for displaying paths and `wt_prefix` will be empty in recursive
calls for now.

The new notion of `wt_prefix` and `prefix` still allows us to reconstruct
the calling directory in the superproject by just traveling reverse of
`prefix`.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",185,data/crawl/git/patch_788.diff
https://github.com/git/git/commit/63e95beb085ce8ae359d728ec0a54c3dcfe741f5,17 Apr 2016,"submodule: port resolve_relative_url from shell to C

Later on we want to automatically call `git submodule init` from
other commands, such that the users don't have to initialize the
submodule themselves.  As these other commands are written in C
already, we'd need the init functionality in C, too.  The
`resolve_relative_url` function is a large part of that init
functionality, so start by porting this function to C.

To create the tests in t0060, the function `resolve_relative_url`
was temporarily enhanced to write all inputs and output to disk
when running the test suite. The added tests in this patch are
a small selection thereof.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",336,data/crawl/git/patch_789.diff
https://github.com/git/git/commit/6c50a575952fcffa0df0cb435e9e3f4eab74b1bf,13 Apr 2016,"imap-send: check for NOLOGIN capability only when using LOGIN command

Don't check for NOLOGIN (LOGINDISABLED) capability when imap.authMethod
is specified.

LOGINDISABLED capability doesn't forbid using AUTHENTICATE, so it should
be allowed, or we can't connect to IMAP servers which only accepts
AUTHENTICATE command.

Signed-off-by: Kazuki Yamaguchi <k@rhe.jp>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_790.diff
https://github.com/git/git/commit/2010aabd91eec0e8b074774e924e5264a522a923,13 Apr 2016,"i18n: branch: unmark string for translation

Unmark strings for translation for command help/hint.
These strings can not be translated, just copied.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_791.diff
https://github.com/git/git/commit/40d71940b6a0dadb7873cce614992f1d71fcdfbd,13 Apr 2016,"builtin/merge.c: fix a bug with trivial merges

If read_tree_trivial() succeeds and produces a tree that is already
in the object store, then the index is not written to disk, leaving
it out-of-sync with both HEAD and the working tree.

In order to write the index back out to disk after a merge,
write_index_locked() needs to be called.  For most merge strategies, this
is done from try_merge_strategy().  For fast forward updates, this is
done from checkout_fast_forward().  When trivial merges work, the call to
write_index_locked() is buried a little deeper:

  merge_trivial()
  -> write_tree_trivial()
     -> write_cache_as_tree()
        -> write_index_as_tree()
           -> write_locked_index()

However, it is only called when !cache_tree_fully_valid(), which is how
this bug is triggered.  But that also shows why this bug doesn't affect
any other merge strategies or cases.

Add a direct call to write_index_locked() from merge_trivial() to fix
this issue.  Since the indirect call to write_locked_index() was
conditional on cache_tree_fully_valid(), it won't be written twice.

Signed-off-by: Elijah Newren <newren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_792.diff
https://github.com/git/git/commit/8ae51c412815c1ded92bd85e47a5c209d516d969,12 Apr 2016,"i18n: builtin/rm.c: remove a comma ',' from string

Remove a comma from string marked for translation. Make the string match the
one in builtin/mv.c. Now translators have do handle this string only once.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_793.diff
https://github.com/git/git/commit/ed47fdf7fa80ae5f93eb708e82c625086f837b3f,12 Apr 2016,"i18n: unpack-trees: mark strings for translation

Mark strings seen by the user inside setup_unpack_trees_porcelain() and
display_error_msgs() functions for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_794.diff
https://github.com/git/git/commit/757552db5794056cdeccab827745f3de1fb82f4b,10 Apr 2016,"t1430: improve test coverage of deletion of badly-named refs

Check ""branch -d broken...ref""

Check various combinations of

* Deleting using ""update-ref -d""
* Deleting using ""update-ref --no-deref -d""
* Deleting using ""branch -d""

in the following combinations of symref -> ref:

* badname -> broken...ref
* badname -> broken...ref (dangling)
* broken...symref -> master
* broken...symref -> idonotexist (dangling)

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_795.diff
https://github.com/git/git/commit/b78ceced0ce0a8c098fad9d979b47ea98e27d22a,10 Apr 2016,"t1430: test for-each-ref in the presence of badly-named refs

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_796.diff
https://github.com/git/git/commit/f86d8350c8c72851dc9c250dbf0a6f1254e59282,10 Apr 2016,"t1430: test the output and error of some commands more carefully

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_797.diff
https://github.com/git/git/commit/1cae428e2902b3f19a56625411f09cc239855fe7,10 Apr 2016,"git_config_set_multivar_in_file: handle ""unset"" errors

We pass off to the ""_gently"" form to do the real work, and
just die() if it returned an error. However, our die message
de-references ""value"", which may be NULL if the request was
to unset a variable. Nobody using glibc noticed, because it
simply prints ""(null)"", which is good enough for the test
suite (and presumably very few people run across this in
practice). But other libc implementations (like Solaris) may
segfault.

Let's not only fix that, but let's make the message more
clear about what is going on in the ""unset"" case.

Reported-by: ""Tom G. Christensen"" <tgc@jupiterrise.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_798.diff
https://github.com/git/git/commit/8c3ca351cb125c94870d7b8278a7efa1f1474d22,10 Apr 2016,"config: lower-case first word of error strings

This follows our usual style (both throughout git, and
throughout the rest of this file).

This covers the whole file, but note that I left the capitalization in
the multi-sentence:

  error: malformed value...
  error: Must be one of ...

because it helps make it clear that we are starting a new sentence in
the second one.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_799.diff
https://github.com/git/git/commit/1ed2c7b11570f5d16bdc70d151fa78c3dccf6d38,08 Apr 2016,"imap-send: use HMAC() function provided by OpenSSL

Fix compile errors with OpenSSL 1.1.0.

HMAC_CTX is made opaque and HMAC_CTX_cleanup is removed in OpenSSL
1.1.0. But since we just want to calculate one HMAC, we can use HMAC()
here, which exists since OpenSSL 0.9.6 at least.

Signed-off-by: Kazuki Yamaguchi <k@rhe.jp>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_800.diff
https://github.com/git/git/commit/890fca84be9d2419939f64872648ebe79e68a0b2,06 Apr 2016,"rerere: adjust 'forget' to multi-variant world order

Because conflicts with the same contents inside conflict blocks
enclosed by ""<<<<<<<"" and "">>>>>>>"" can now have multiple variants
to help three-way merge to adjust to the differences outside the
conflict blocks, ""rerere forget $path"" needs to be taught that there
may be multiple recorded resolutions that share the same conflict
hash (which groups the conflicts with ""the same contents inside
conflict blocks""), among which there are some that would not be
relevant to the conflict we are looking at.  These ""other variants""
that happen to share the same conflict hash should not be cleared,
and the variant that would apply to the current conflict may not be
the zero-th one (which is the only one that is cleared by the
current code).

After finding the conflict hash, iterate over the existing variants
and try to resolve the conflict using each of them to find the one
that ""cleanly"" resolves the current conflict.  That is the one we
want to forget and record the preimage for, so that the user can
record the corrected resolution.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_801.diff
https://github.com/git/git/commit/915c96df3822f968332f6bf3642e5195b52201c9,05 Apr 2016,"pretty: test --expand-tabs

The test prepares a simple commit with HT on its log message lines,
and makes sure that

 - formats that should or should not expand tabs by default do or do
   not expand tabs respectively,

 - with explicit --expand-tabs=<N> and short-hands --expand-tabs
   (equivalent to --expand-tabs=8) and --no-expand-tabs (equivalent
   to --expand-tabs=0) before or after the explicit --pretty=$fmt,
   the tabs are expanded (or not expanded) accordingly.

The tests use the second line of the log message for formats other
than --pretty=short, primarily because the first line of the email
format is handled specially to add the [PATCH] prefix, etc. in a
separate codepath (--pretty=short uses the first line because there
is no other line to test).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_802.diff
https://github.com/git/git/commit/70999e9ceca47e03b8900bfb310b2f804125811e,04 Apr 2016,"branch -m: update all per-worktree HEADs

When renaming a branch, currently only the HEAD of current working tree
is updated, but it must update HEADs of all working trees which point at
the old branch.

This is the current behavior, /path/to/wt's HEAD is not updated:

  % git worktree list
  /path/to     2c3c5f2 [master]
  /path/to/wt  2c3c5f2 [oldname]
  % git branch -m master master2
  % git worktree list
  /path/to     2c3c5f2 [master2]
  /path/to/wt  2c3c5f2 [oldname]
  % git branch -m oldname newname
  % git worktree list
  /path/to     2c3c5f2 [master2]
  /path/to/wt  0000000 [oldname]

This patch fixes this issue by updating all relevant worktree HEADs
when renaming a branch.

Signed-off-by: Kazuki Yamaguchi <k@rhe.jp>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_803.diff
https://github.com/git/git/commit/2233066e778e32dfab0471ea2ad8d1c7a94b7e39,04 Apr 2016,"refs: add a new function set_worktree_head_symref

Add a new function set_worktree_head_symref, to update HEAD symref for
the specified worktree.

To update HEAD of a linked working tree,
create_symref(""worktrees/$work_tree/HEAD"", ""refs/heads/$branch"", msg)
could be used. However when it comes to updating HEAD of the main
working tree, it is unusable because it uses $GIT_DIR for
worktree-specific symrefs (HEAD).

The new function takes git_dir (real directory) as an argument, and
updates HEAD of the working tree. This function will be used when
renaming a branch.

Signed-off-by: Kazuki Yamaguchi <k@rhe.jp>
Acked-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_804.diff
https://github.com/git/git/commit/d3c06c196964c02f7343b53301e0e85679fad51f,01 Apr 2016,"ident: give ""please tell me"" message upon useConfigOnly error

The env_hint message applies perfectly to the case when
user.useConfigOnly is set and at least one of the user.name and the
user.email are not provided.

Additionally, use a less descriptive error message to discourage
users from disabling user.useConfigOnly configuration variable to
work around this error condition.  We want to encourage them to set
user.name or user.email instead.

Signed-off-by: Marios Titas <redneb@gmx.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_805.diff
https://github.com/git/git/commit/734c7789aa1055d465e336f618889cc6df478535,01 Apr 2016,"ident: check for useConfigOnly before auto-detection of name/email

If user.useConfigOnly is set, it does not make sense to try to
auto-detect the name and/or the email.  The auto-detection may
even result in a bogus name and trigger an error message.

Check if the use-config-only is set and die if no explicit name was
given, before attempting to auto-detect, to correct this.

Signed-off-by: Marios Titas <redneb@gmx.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_806.diff
https://github.com/git/git/commit/1f15ba1f3c370acbe85d451fe1520bffe0b2cb6f,01 Apr 2016,"submodule--helper, module_clone: catch fprintf failure

The return value of fprintf is unchecked, which may lead to
unreported errors. Use fprintf_or_die to report the error to the user.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_807.diff
https://github.com/git/git/commit/f5ff5fb56485979895cff5954e4db1ea4ff4c9f7,01 Apr 2016,"bundle: don't leak an fd in case of early return

In successful operation `write_pack_data` will close the `bundle_fd`,
but when we exit early, we need to take care of the file descriptor
as well as the lock file ourselves. The lock file may be deleted at the
end of running the program, but we are in library code, so we should
not rely on that.

Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_808.diff
https://github.com/git/git/commit/47d5d6487902753f9483dc340de12551f90d4bdb,31 Mar 2016,"submodule--helper clone: create the submodule path just once

We make sure that the parent directory of path exists (or create it
otherwise) and then do the same for path + ""/.git"".

That is equivalent to just making sure that the parent directory of
path + ""/.git"" exists (or create it otherwise).

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_809.diff
https://github.com/git/git/commit/3c0663e16630ddfd9f4c2e46e52c9984a03b888d,31 Mar 2016,"submodule--helper: fix potential NULL-dereference

Don't dereference NULL 'path' if it was never assigned.  Also
protect against an empty --path argument.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_810.diff
https://github.com/git/git/commit/fe37a9c586a65943e1bca327a1bbe1ca4a3d3023,30 Mar 2016,"pretty: allow tweaking tabwidth in --expand-tabs

When the local convention of the project is to use tab width that is
not 8, it may make sense to allow ""git log --expand-tabs=<n>"" to
tweak the output to match it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_811.diff
https://github.com/git/git/commit/f292244c04d8109ee32a45016ce08984fbd925f0,29 Mar 2016,"branch -d: refuse deleting a branch which is currently checked out

When a branch is checked out by current working tree, deleting the
branch is forbidden. However when the branch is checked out only by
other working trees, deleting incorrectly succeeds.
Use find_shared_symref() to check if the branch is in use, not just
comparing with the current working tree's HEAD.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Kazuki Yamaguchi <k@rhe.jp>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_812.diff
https://github.com/git/git/commit/e379fdf34fee96cd205be83ff4e71699bdc32b18,23 Mar 2016,"merge: refuse to create too cool a merge by default

While it makes sense to allow merging unrelated histories of two
projects that started independently into one, in the way ""gitk"" was
merged to ""git"" itself aka ""the coolest merge ever"", such a merge is
still an unusual event.	 Worse, if somebody creates an independent
history by starting from a tarball of an established project and
sends a pull request to the original project, ""git merge"" however
happily creates such a merge without any sign of something unusual
is happening.

Teach ""git merge"" to refuse to create such a merge by default,
unless the user passes a new ""--allow-unrelated-histories"" option to
tell it that the user is aware that two unrelated projects are
merged.

Because such a ""two project merge"" is a rare event, a configuration
option to always allow such a merge is not added.

We could add the same option to ""git pull"" and have it passed
through to underlying ""git merge"".  I do not have a fundamental
opposition against such a feature, but this commit does not do so
and instead leaves it as low-hanging fruit for others, because such
a ""two project merge"" would be done after fetching the other project
into some location in the working tree of an existing project and
making sure how well they fit together, it is sufficient to allow a
local merge without such an option pass-through from ""git pull"" to
""git merge"".  Many tests that are updated by this patch does the
pass-through manually by turning:

	git pull something

into its equivalent:

	git fetch something &&
	git merge --allow-unrelated-histories FETCH_HEAD

If somebody is inclined to add such an option, updated tests in this
change need to be adjusted back to:

	git pull --allow-unrelated-histories something

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_813.diff
https://github.com/git/git/commit/2ec20212c56575dc5e6875f36fa68b6b4a8edd70,23 Mar 2016,"t1300-repo-config: make it resilient to being run via 'sh -x'

One way to diagnose broken regression tests is to run the test
script using 'sh -x t... -i -v' to find out which call actually
demonstrates the symptom.

Hence it is pretty counterproductive if the test script behaves
differently when being run via 'sh -x', in particular when using
test_cmp or test_i18ncmp on redirected stderr.  A more recent way
""sh tXXXX -i -v -x"" has the same issue.

So let's use test_i18ngrep (as suggested by Jonathan Nieder) instead of
test_cmp/test_i18ncmp to verify that stderr looks as expected.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_814.diff
https://github.com/git/git/commit/fda3e2cf017493ad9051c027a527e5c995ebfaf1,22 Mar 2016,"builtin/apply: get rid of useless 'name' variable

While at it put an 'else' on the same line as the previous '}'.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_815.diff
https://github.com/git/git/commit/b64c1e0718f4a54d75b8faf0421471faa531af68,21 Mar 2016,"commit: do not lose SQUASH_MSG contents

When concluding a conflicted ""git merge --squash"", the command
failed to read SQUASH_MSG that was prepared by ""git merge"", and
showed only the ""# Conflicts:"" list of conflicted paths.

Place the contents from SQUASH_MSG at the beginning, just like we
show the commit log skeleton first when concluding a normal merge,
and then show the ""# Conflicts:"" list, to help the user write the
log message for the resulting commit.

Test by Junio C Hamano <gitster@pobox.com>.

Signed-off-by: Sven Strickroth <sven@cs-ware.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_816.diff
https://github.com/git/git/commit/f66398eb57c627169429f47bbe4d943d2c975959,21 Mar 2016,"pull --rebase: add --[no-]autostash flag

If rebase.autoStash configuration variable is set, there is no way to
override it for ""git pull --rebase"" from the command line.

Teach ""git pull --rebase"" the --[no-]autostash command line flag which
overrides the current value of rebase.autoStash, if set. As ""git rebase""
understands the --[no-]autostash option, it's just a matter of passing
the option to underlying ""git rebase"" when ""git pull --rebase"" is called.

Helped-by: Matthieu Moy <Matthieu.Moy@grenoble-inp.fr>
Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Paul Tan <pyokagan@gmail.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Mehul Jain <mehul.jain2029@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_817.diff
https://github.com/git/git/commit/5cee349370bd2dce48d0d653ab4ce99bb79a3415,18 Mar 2016,"Revert ""Merge branch 'nd/exclusion-regression-fix'""

This reverts commit 5e57f9c3dfe7dd44a1b56bb5b3327d7a1356ec7c, reversing
changes made to e79112d21024beb997951381db21a70b087d459d.

We will be postponing nd/exclusion-regression-fix topic to later
cycle.",390,data/crawl/git/patch_818.diff
https://github.com/git/git/commit/935de81289cd04b4736c538747c53df123c30d1c,16 Mar 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_819.diff
https://github.com/git/git/commit/629716d256a792179325c2cc7945bb2d81dda8c2,15 Mar 2016,"rerere: do use multiple variants

This enables the multiple-variant support for real.  Multiple
conflicts of the same shape can have differences in contexts where
they appear, interfering the replaying of recorded resolution of one
conflict to another, and in such a case, their resolutions are
recorded as different variants under the same conflict ID.

We still need to adjust garbage collection codepaths for this
change, but the basic ""replay"" functionality is functional with
this change.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_820.diff
https://github.com/git/git/commit/a13d13700b05442855447670d7c3313f99f5da3c,15 Mar 2016,"rerere: allow multiple variants to exist

The shape of the conflict in a path determines the conflict ID.  The
preimage and postimage pair that was recorded for the conflict ID
previously may or may not replay well for the conflict we just saw.

Currently, we punt when the previous resolution does not cleanly
replay, but ideally we should then be able to record the currently
conflicted path by assigning a new 'variant', and then record the
resolution the user is going to make.

Introduce a mechanism to have more than one variant for a given
conflict ID; we do not actually assign any variant other than 0th
variant yet at this step.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_821.diff
https://github.com/git/git/commit/c0a5423b6f09f0c08749697b8d2860f956e905e9,15 Mar 2016,"rerere: delay the recording of preimage

We record the preimage only when there is no directory to record the
conflict we encountered, i.e. when $GIT_DIR/rr-cache/$ID does not
exist.  As the plan is to allow multiple <preimage,postimage> pairs
as variants for the same conflict ID eventually, this logic needs to
go.

As the first step in that direction, stop the ""did we create the
directory?  Then we record the preimage"" logic.  Instead, we record
if a preimage does not exist when we saw a conflict in a path.  Also
make sure that we remove a stale postimage, which most likely is
totally unrelated to the resolution of this new conflict, when we
create a new preimage under $ID when $GIT_DIR/rr-cache/$ID already
exists.

In later patches, we will further update this logic to be ""do we
have <preimage,postimage> pair that cleanly resolve the current
conflicts?  If not, record a new preimage as a new variant"", but
that does not happen at this stage yet.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_822.diff
https://github.com/git/git/commit/05dd9f139d6a7e4c7cd22d8d3b57faf5be88a571,15 Mar 2016,"rerere: handle leftover rr-cache/$ID directory and postimage files

If by some accident there is only $GIT_DIR/rr-cache/$ID directory
existed, we wouldn't have recorded a preimage for a conflict that
is newly encountered, which would mean after a manual resolution,
we wouldn't have recorded it by storing the postimage, because the
logic used to be ""if there is no rr-cache/$ID directory, then we are
the first so record the preimage"".  Instead, record preimage if we
do not have one.

In addition, if there is only $GIT_DIR/rr-cache/$ID/postimage
without corresponding preimage, we would have tried to call into
merge() and punted.

These would have been a situation frustratingly hard to recover
from.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_823.diff
https://github.com/git/git/commit/94ce167249781d2c80ba28412d853c426d41a55a,11 Mar 2016,"init: use setup.c's repo version verification

We check our templates to make sure they are from a
version of git we understand (otherwise we would init a
repository we cannot ourselves run in!). But our simple
integer check has fallen behind the times. Let's use the
helpers that setup.c provides to do it right.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_824.diff
https://github.com/git/git/commit/2cc7c2c737f2af16915b3d6cb6245111e1349609,11 Mar 2016,"setup: refactor repo format reading and verification

When we want to know if we're in a git repository of
reasonable vintage, we can call check_repository_format_gently(),
which does three things:

  1. Reads the config from the .git/config file.

  2. Verifies that the version info we read is sane.

  3. Writes some global variables based on this.

There are a few things we could improve here.

One is that steps 1 and 3 happen together. So if the
verification in step 2 fails, we still clobber the global
variables. This is especially bad if we go on to try another
repository directory; we may end up with a state of mixed
config variables.

The second is there's no way to ask about the repository
version for anything besides the main repository we're in.
git-init wants to do this, and it's possible that we would
want to start doing so for submodules (e.g., to find out
which ref backend they're using).

We can improve both by splitting the first two steps into
separate functions. Now check_repository_format_gently()
calls out to steps 1 and 2, and does 3 only if step 2
succeeds.

Note that the public interface for read_repository_format()
and what check_repository_format_gently() needs from it are
not quite the same, leading us to have an extra
read_repository_format_1() helper. The extra needs from
check_repository_format_gently() will go away in a future
patch, and we can simplify this then to just the public
interface.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_825.diff
https://github.com/git/git/commit/5d1847b7609110b95814e82dcb66c88d858b032b,10 Mar 2016,Sync with 2.7.3,65,data/crawl/git/patch_826.diff
https://github.com/git/git/commit/594730e980521310d88006d91f3f14ef5eff1e2b,10 Mar 2016,"Git 2.7.3

Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_827.diff
https://github.com/git/git/commit/3bd1b51d3a3884df186beddaf3a101a5e624f07a,07 Mar 2016,"Documentation: talk about pager in api-trace.txt

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_828.diff
https://github.com/git/git/commit/46c3cd44d7a1e8a33ad66c017ac9e3575cc88c00,07 Mar 2016,"setup: make startup_info available everywhere

Commit a60645f (setup: remember whether repository was
found, 2010-08-05) introduced the startup_info structure,
which records some parts of the setup_git_directory()
process (notably, whether we actually found a repository or
not).

One of the uses of this data is for functions to behave
appropriately based on whether we are in a repo. But the
startup_info struct is just a pointer to storage provided by
the main program, and the only program that sets it up is
the git.c wrapper. Thus builtins have access to
startup_info, but externally linked programs do not.

Worse, library code which is accessible from both has to be
careful about accessing startup_info. This can be used to
trigger a die(""BUG"") via get_sha1():

	$ git fast-import <<-\EOF
	tag foo
	from HEAD:./whatever
	EOF

	fatal: BUG: startup_info struct is not initialized.

Obviously that's fairly nonsensical input to feed to
fast-import, but we should never hit a die(""BUG""). And there
may be other ways to trigger it if other non-builtins
resolve sha1s.

So let's point the storage for startup_info to a static
variable in setup.c, making it available to all users of the
library code. We _could_ turn startup_info into a regular
extern struct, but doing so would mean tweaking all of the
existing use sites. So let's leave the pointer indirection
in place.  We can, however, drop any checks for NULL, as
they will always be false (and likewise, we can drop the
test covering this case, which was a rather artificial
situation using one of the test-* programs).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_829.diff
https://github.com/git/git/commit/bfee614a2f5838e03378888d78e8247b8400d5ce,03 Mar 2016,"index-pack: add a helper function to derive .idx/.keep filename

These are automatically named by replacing .pack suffix in the
name of the packfile.  Add a small helper to do so, as I'll be
adding another one soonish.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_830.diff
https://github.com/git/git/commit/1b68387e026f81dcda330f721c0e54a8902ad4eb,01 Mar 2016,"builtin/receive-pack.c: use parse_options API

Make receive-pack use the parse_options API,
bringing it more in line with send-pack and push.

Helped-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Sidhant Sharma [:tk] <tigerkid001@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_831.diff
https://github.com/git/git/commit/14111fc49272a70ceaeb5039796fbceb8a6e1cb7,01 Mar 2016,"git: submodule honor -c credential.* from command line

Due to the way that the git-submodule code works, it clears all local
git environment variables before entering submodules. This is normally
a good thing since we want to clear settings such as GIT_WORKTREE and
other variables which would affect the operation of submodule commands.
However, GIT_CONFIG_PARAMETERS is special, and we actually do want to
preserve these settings. However, we do not want to preserve all
configuration as many things should be left specific to the parent
project.

Add a git submodule--helper function, sanitize-config, which shall be
used to sanitize GIT_CONFIG_PARAMETERS, removing all key/value pairs
except a small subset that are known to be safe and necessary.

Replace all the calls to clear_local_git_env with a wrapped function
that filters GIT_CONFIG_PARAMETERS using the new helper and then
restores it to the filtered subset after clearing the rest of the
environment.

Signed-off-by: Jacob Keller <jacob.keller@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/patch_832.diff
https://github.com/git/git/commit/cdc04b65b4bc8094e082ac65a7dce75a7a990163,01 Mar 2016,"submodule helper: remove double 'fatal: ' prefix

The prefix is added by die(...), so we don't have to do it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_833.diff
https://github.com/git/git/commit/48308681b072a1d32e1361c255347324a8ad151e,01 Mar 2016,"git submodule update: have a dedicated helper for cloning

This introduces a new helper function in git submodule--helper
which takes care of cloning all submodules, which we want to
parallelize eventually.

Some tests (such as empty URL, update_mode=none) are required in the
helper to make the decision for cloning. These checks have been
moved into the C function as well (no need to repeat them in the
shell script).

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",293,data/crawl/git/patch_834.diff
https://github.com/git/git/commit/2dac9b5637abe580e8b8ea36e00dbbf28ec99af6,01 Mar 2016,"run_processes_parallel: treat output of children as byte array

We do not want the output to be interrupted by a NUL byte, so we
cannot use raw fputs. Introduce strbuf_write to avoid having long
arguments in run-command.c.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_835.diff
https://github.com/git/git/commit/a028a1930c6b4b848e8fb47cc92c30b23d99a75e,01 Mar 2016,"fetching submodules: respect `submodule.fetchJobs` config option

This allows to configure fetching and updating in parallel
without having the command line option.

This moved the responsibility to determine how many parallel processes
to start from builtin/fetch to submodule.c as we need a way to communicate
""The user did not specify the number of parallel processes in the command
line options"" in the builtin fetch. The submodule code takes care of
the precedence (CLI > config > default).

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_836.diff
https://github.com/git/git/commit/ea2fa5a3388281b880ae2aa75c8eac0d4b1a6c69,01 Mar 2016,"submodule-config: keep update strategy around

Currently submodule.<name>.update is only handled by git-submodule.sh.
C code will start to need to make use of that value as more of the
functionality of git-submodule.sh moves into library code in C.

Add the update field to 'struct submodule' and populate it so it can
be read as sm->update or from sm->update_command.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_837.diff
https://github.com/git/git/commit/13ad56f848976adc32fd190b4ab03f00360d40e8,29 Feb 2016,"trailer.c: mark strings for translation

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_838.diff
https://github.com/git/git/commit/1823c619e9fa9d7826b4cfc58bf05815cf88eaed,29 Feb 2016,"ref-filter.c: mark strings for translation

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_839.diff
https://github.com/git/git/commit/39ad4f39cc502c2a9c355d6b1eb62f30fca3d2c8,29 Feb 2016,"builtin/clone.c: mark strings for translation

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_840.diff
https://github.com/git/git/commit/4636f651234b3fe950246cd1aa2c8b0a5955ea6b,29 Feb 2016,"builtin/checkout.c: mark strings for translation

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_841.diff
https://github.com/git/git/commit/fc7d47f0dd4f041af2ed2004700f18b635f3b204,29 Feb 2016,"rev-parse: let some options run outside repository

Once upon a time, you could use ""--local-env-vars"" and
""--resolve-git-dir"" outside of any git repository, but they
had to come first on the command line. Commit 68889b4
(rev-parse: remove restrictions on some options, 2013-07-21)
put them into the normal option-parsing loop, fixing the
latter. But it inadvertently broke the former, as we call
setup_git_directory() before starting that loop.

We can note that those options don't care even conditionally
about whether we are in a git repo. So it's fine if we
simply wait to setup the repo until we see an option that
needs it.

However, there is one special exception we should make:
historically, rev-parse will set up the repository and read
config even if there are _no_ options. Some of the
tests in t1300 rely on this to check ""git -c $config""
parsing. That's not mirroring real-world use, and we could
tweak the test.  But t0002 uses a bare ""git rev-parse"" to
check ""are we in a git repository?"". It's plausible that
real-world scripts are relying on this.

So let's cover this case specially, and treat an option-less
""rev-parse"" as ""see if we're in a repo"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_842.diff
https://github.com/git/git/commit/7465feba513a8bd3d47f27630ccc9ab7e82d916c,27 Feb 2016,"sha1_file.c: mark strings for translation

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_843.diff
https://github.com/git/git/commit/f02fbc4f9433937ee0463d0342d6d7d97e1f6f1e,26 Feb 2016,"Git 2.8-rc0

Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_844.diff
https://github.com/git/git/commit/13e0b0d3dc76353632dcb0bc63cdf03426154317,25 Feb 2016,"use_pack: handle signed off_t overflow

A v2 pack index file can specify an offset within a packfile
of up to 2^64-1 bytes. On a system with a signed 64-bit
off_t, we can represent only up to 2^63-1. This means that a
corrupted .idx file can end up with a negative offset in the
pack code. Our bounds-checking use_pack function looks for
too-large offsets, but not for ones that have wrapped around
to negative. Let's do so, which fixes an out-of-bounds
access demonstrated in t5313.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_845.diff
https://github.com/git/git/commit/47fe3f6ef0f5a336db90d816c5fb4330ffa23668,25 Feb 2016,"nth_packed_object_offset: bounds-check extended offset

If a pack .idx file has a corrupted offset for an object, we
may try to access an offset in the .idx or .pack file that
is larger than the file's size.  For the .pack case, we have
use_pack() to protect us, which realizes the access is out
of bounds. But if the corrupted value asks us to look in the
.idx file's secondary 64-bit offset table, we blindly add it
to the mmap'd index data and access arbitrary memory.

We can fix this with a simple bounds-check compared to the
size we found when we opened the .idx file.

Note that there's similar code in index-pack that is
triggered only during ""index-pack --verify"". To support
both, we pull the bounds-check into a separate function,
which dies when it sees a corrupted file.

It would be nice if we could return an error, so that the
pack code could try to find a good copy of the object
elsewhere. Currently nth_packed_object_offset doesn't have
any way to return an error, but it could probably use ""0"" as
a sentinel value (since no object can start there). This is
the minimal fix, and we can improve the resilience later on
top.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_846.diff
https://github.com/git/git/commit/a1283866bab1cd12da57b3e427664180f5dee333,25 Feb 2016,"t5313: test bounds-checks of corrupted/malicious pack/idx files

Our on-disk .pack and .idx files may reference other data by
offset. We should make sure that we are not fooled by
corrupt data into accessing memory outside of our mmap'd
boundaries.

This patch adds a series of tests for offsets found in .pack
and .idx files. For the most part we get this right, but
there are two tests of .idx files marked as failures: we do
not bounds-check offsets in the v2 index's extended offset
table, nor do we handle .idx offsets that overflow a signed
off_t.

With these tests, we should have good coverage of all
offsets found in these files. Note that this doesn't cover
.bitmap files, which may have similar bugs.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",179,data/crawl/git/patch_847.diff
https://github.com/git/git/commit/638fa623d5b5fb392a062edf61ccf086d35ab26b,25 Feb 2016,"git config: report when trying to modify a non-existing repo config

It is a pilot error to call `git config section.key value` outside of
any Git worktree. The message

	error: could not lock config file .git/config: No such file or
	directory

is not very helpful in that situation, though. Let's print a helpful
message instead.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_848.diff
https://github.com/git/git/commit/2f275207ce9c8f6a03efa4fbd7c68d0e0b3e449c,25 Feb 2016,"push: remove ""push.default is unset"" warning message

The warning was important before the 2.0 transition, and remained
important for a while after, so that new users get push.default
explicitly in their configuration and do not experience inconsistent
behavior if they ever used an older version of Git.

The warning has been there since version 1.8.0 (Oct 2012), hence we can
expect the vast majority of current Git users to have been exposed to
it, and most of them have already set push.default explicitly. The
switch from 'matching' to 'simple' was planned for 2.0 (May 2014), but
actually happened only for 2.3 (Feb 2015).

Today, the warning is mostly seen by beginners, who have not set their
push.default configuration (yet). For many of them, the warning is
confusing because it talks about concepts that they have not learned and
asks them a choice that they are not able to make yet. See for example

  http://stackoverflow.com/questions/13148066/warning-push-default-is-unset-its-implicit-value-is-changing-in-git-2-0

(1260 votes for the question, 1824 for the answer as of writing)

Remove the warning completely to avoid disturbing beginners. People who
still occasionally use an older version of Git will be exposed to the
warning through this old version.

Eventually, versions of Git without the warning will be deployed enough
and tutorials will not need to advise setting push.default anymore.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_849.diff
https://github.com/git/git/commit/bd93b8d9becb01d21871b63e34c2e824c60b1e8c,23 Feb 2016,"credential-cache--daemon: disallow relative socket path

Relative socket paths are dangerous since the user cannot generally
control when the daemon starts (initially, after a timeout, kill or
crash). Since the daemon creates but does not delete the socket
directory, this could lead to spurious directory creation relative
to the users cwd.

Suggested-by: Jeff King <peff@peff.net>
Signed-off-by: Jon Griffiths <jon_p_griffiths@yahoo.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_850.diff
https://github.com/git/git/commit/a6e5e2864f96ebce9ec6656841c8965bcdf1b37f,23 Feb 2016,"credential-cache--daemon: refactor check_socket_directory

This function does an early return, and therefore has to
repeat its cleanup. We can stick the later bit of the
function into an ""else"" and avoid duplicating the shared
part (which will get bigger in a future patch).

Let's also rename the function to init_socket_directory. It
not only checks the directory but also creates it. Saying
""init"" is more accurate.

Signed-off-by: Jon Griffiths <jon_p_griffiths@yahoo.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_851.diff
https://github.com/git/git/commit/62f17513e7113b7139e925df76d37f3d7df6b38c,22 Feb 2016,"test-path-utils: fix normalize_path_copy output buffer size

The normalize_path_copy function needs an output buffer that
is at least as long as its input (it may shrink the path,
but never expand it). However, this test program feeds it
static PATH_MAX-sized buffers, which have no relation to the
input size.

In the normalize_ceiling_entry case, we do at least check
the size against PATH_MAX and die(), but that case is even
more convoluted. We normalize into a fixed-size buffer, free
the original, and then replace it with a strdup'd copy of
the result. But normalize_path_copy explicitly allows
normalizing in-place, so we can simply do that.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_852.diff
https://github.com/git/git/commit/850d2fec53ee188bab9e458f77906041ac7f1904,22 Feb 2016,"convert manual allocations to argv_array

There are many manual argv allocations that predate the
argv_array API. Switching to that API brings a few
advantages:

  1. We no longer have to manually compute the correct final
     array size (so it's one less thing we can screw up).

  2. In many cases we had to make a separate pass to count,
     then allocate, then fill in the array. Now we can do it
     in one pass, making the code shorter and easier to
     follow.

  3. argv_array handles memory ownership for us, making it
     more obvious when things should be free()d and and when
     not.

Most of these cases are pretty straightforward. In some, we
switch from ""run_command_v"" to ""run_command"" which lets us
directly use the argv_array embedded in ""struct
child_process"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_853.diff
https://github.com/git/git/commit/e7792a74bcf7fcd554b4546fc91122b8c2af7d75,22 Feb 2016,"harden REALLOC_ARRAY and xcalloc against size_t overflow

REALLOC_ARRAY inherently involves a multiplication which can
overflow size_t, resulting in a much smaller buffer than we
think we've allocated. We can easily harden it by using
st_mult() to check for overflow.  Likewise, we can add
ALLOC_ARRAY to do the same thing for xmalloc calls.

xcalloc() should already be fine, because it takes the two
factors separately, assuming the system calloc actually
checks for overflow. However, before we even hit the system
calloc(), we do our memory_limit_check, which involves a
multiplication. Let's check for overflow ourselves so that
this limit cannot be bypassed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_854.diff
https://github.com/git/git/commit/a64e6a44c63a965c5bc26242ddd3ed049b42e117,22 Feb 2016,"diff: clarify textconv interface

The memory allocation scheme for the textconv interface is a
bit tricky, and not well documented. It was originally
designed as an internal part of diff.c (matching
fill_mmfile), but gradually was made public.

Refactoring it is difficult, but we can at least improve the
situation by documenting the intended flow and enforcing it
with an in-code assertion.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_855.diff
https://github.com/git/git/commit/c397debf3d046713ffd040f2c7da5e6921121ce8,22 Feb 2016,"remote: die on config error when manipulating remotes

When manipulating remotes we try to set various configuration
values without checking if the values were persisted correctly,
possibly leaving the remote in an inconsistent state.

Fix this issue by dying early and notifying the user about the
error.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_856.diff
https://github.com/git/git/commit/1a90dfe8a7e3fae31aa0b13b799bd3345e91e985,22 Feb 2016,"submodule: die on config error when linking modules

When trying to connect a submodule with its corresponding
repository in '.git/modules' we try to set the core.worktree
setting in the submodule, which may fail due to an error
encountered in `git_config_set_in_file`.

The function is used in the git-mv command when trying to move a
submodule to another location. We already die when renaming a
file fails but do not pay attention to the case where updating
the connection between submodule and its repository fails. As
this leaves the repository in an inconsistent state, as well,
abort the program by dying early and presenting the failure to
the user.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_857.diff
https://github.com/git/git/commit/27852b2c5347ecd815301e668e7415509f1dae07,22 Feb 2016,"branch: report errors in tracking branch setup

When setting up a new tracking branch fails due to issues with
the configuration file we do not report any errors to the user
and pretend setting the tracking branch succeeded.

Setting up the tracking branch is handled by the
`install_branch_config` function. We do not want to simply die
there as the function is not only invoked when explicitly setting
upstream information with `git branch --set-upstream-to=`, but
also by `git push --set-upstream` and `git clone`. While it is
reasonable to die in the explict first case, we would lose
information in the latter two cases, so we only print the error
message but continue the program as usual.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_858.diff
https://github.com/git/git/commit/70bd879ab66aeee809306908e3551d50cdf06802,22 Feb 2016,"config: add '--show-origin' option to print the origin of a config value

If config values are queried using 'git config' (e.g. via --get,
--get-all, --get-regexp, or --list flag) then it is sometimes hard to
find the configuration file where the values were defined.

Teach 'git config' the '--show-origin' option to print the source
configuration file for every printed value.

Based-on-patch-by: Jeff King <peff@peff.net>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/patch_859.diff
https://github.com/git/git/commit/473166b99078a2724b4fcda11a6a5327b9af60da,22 Feb 2016,"config: add 'origin_type' to config_source struct

Use the config origin_type to print more detailed error messages that
inform the user about the origin of a config error (file, stdin, blob).

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_860.diff
https://github.com/git/git/commit/320d0b493a259db3b481f985545b244438e6c086,19 Feb 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_861.diff
https://github.com/git/git/commit/fe63c4d110acd348244bb0065518a62a1a8dbb00,17 Feb 2016,"ref-filter: introduce objectname_atom_parser()

Introduce objectname_atom_parser() which will parse the
'%(objectname)' atom and store information into the 'used_atom'
structure based on the modifiers used along with the atom.

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_862.diff
https://github.com/git/git/commit/452db3973c7380808d6e000eff609825e0069105,17 Feb 2016,"ref-filter: introduce contents_atom_parser()

Introduce contents_atom_parser() which will parse the '%(contents)'
atom and store information into the 'used_atom' structure based on the
modifiers used along with the atom. Also introduce body_atom_parser()
and subject_atom_parser() for parsing atoms '%(body)' and '%(subject)'
respectively.

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_863.diff
https://github.com/git/git/commit/5339bdad96ace2fa76bf5d80b8596ad84b037aed,17 Feb 2016,"ref-filter: introduce remote_ref_atom_parser()

Introduce remote_ref_atom_parser() which will parse the '%(upstream)'
and '%(push)' atoms and store information into the 'used_atom'
structure based on the modifiers used along with the corresponding
atom.

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_864.diff
https://github.com/git/git/commit/395fb8f9f4e13f0ca30b93c7b419c22a4625e5c4,17 Feb 2016,"ref-filter: align: introduce long-form syntax

Introduce optional prefixes ""width="" and ""position="" for the align atom
so that the atom can be used as ""%(align:width=<width>,position=<position>)"".

Add Documentation and tests for the same.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_865.diff
https://github.com/git/git/commit/5bd881d998d6475b8a866af00b1a4d4e6b04c2cc,17 Feb 2016,"ref-filter: introduce align_atom_parser()

Introduce align_atom_parser() which will parse an 'align' atom and
store the required alignment position and width in the 'used_atom'
structure for further usage in populate_value().

Since this patch removes the last usage of match_atom_name(), remove
the function from ref-filter.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_866.diff
https://github.com/git/git/commit/fd935cc7e8e2fdf7ad837dc74509c75877a489ba,17 Feb 2016,"ref-filter: introduce color_atom_parser()

Introduce color_atom_parser() which will parse a ""color"" atom and
store its color in the ""used_atom"" structure for further usage in
populate_value().

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_867.diff
https://github.com/git/git/commit/132676478c808b5468cc47daccf5324055a81229,17 Feb 2016,"ref-filter: use string_list_split over strbuf_split

We don't do any post-processing on the resulting strbufs, so it is
simpler to just use string_list_split, which takes care of removing
the delimiter for us.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_868.diff
https://github.com/git/git/commit/8a71d90b7e6bcf88232e34c77560dd3d0b334247,17 Feb 2016,"Start preparing for 2.7.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_869.diff
https://github.com/git/git/commit/b4c8aba659cb3264bcce3110d54bfcaab485408b,16 Feb 2016,"config: introduce set_or_die wrappers

A lot of call-sites for the existing family of `git_config_set`
functions do not check for errors that may occur, e.g. when the
configuration file is locked. In many cases we simply want to die
when such a situation arises.

Introduce wrappers that will cause the program to die in those
cases. These wrappers are temporary only to ease the transition
to let `git_config_set` die by default. They will be removed
later on when `git_config_set` itself has been replaced by
`git_config_set_gently`.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_870.diff
https://github.com/git/git/commit/674468b3642abfff7c61d5ff95fffc43b87f70b7,16 Feb 2016,"remote: simplify remote_is_configured()

The remote_is_configured() function allows checking whether a remote
exists or not.  The function however only works if remote_get() wasn't
called before calling it.  In addition, it only checks the configuration
for remotes, but not remotes or branches files.

Make use of the origin member of struct remote instead, which indicates
where the remote comes from.  It will be set to some value if the remote
is configured in any file in the repository, but is initialized to 0 if
the remote is only created in make_remote().

Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_871.diff
https://github.com/git/git/commit/aeff8a61216bf6e0d663c08c583bc8552fa3c344,16 Feb 2016,"http: implement public key pinning

Add the http.pinnedpubkey configuration option for public key
pinning. It allows any string supported by libcurl --
base64(sha256(pubkey)) or filename of the full public key.

If cURL does not support pinning (is too old) output a warning to the
user.

Signed-off-by: Christoph Egger <christoph@christoph-egger.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_872.diff
https://github.com/git/git/commit/d589a67eceacd1cc171bbe94906ca7c9a0edd8c5,15 Feb 2016,"dir.c: don't exclude whole dir prematurely

If there is a pattern ""!foo/bar"", this patch makes it not exclude
""foo"" right away. This gives us a chance to examine ""foo"" and
re-include ""foo/bar"".

Helped-by: brian m. carlson <sandals@crustytoothpaste.net>
Helped-by: Micha Wiedenmann <mw-u2@gmx.de>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",286,data/crawl/git/patch_873.diff
https://github.com/git/git/commit/bac65a2be598811d944c846bdf61580f5c1af927,15 Feb 2016,"dir.c: support tracing exclude

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_874.diff
https://github.com/git/git/commit/00540458a82ff2454ae1cc63e38a9ce4a1eea878,15 Feb 2016,"remote-curl: include curl_errorstr on SSL setup failures

For curl error 35 (CURLE_SSL_CONNECT_ERROR) users need the
additional text stored in CURLOPT_ERRORBUFFER to debug why
the connection did not start. This is curl_errorstr inside
of http.c, so include that in the message if it is non-empty.

Sometimes HTTP response codes aren't yet available, such as
when the SSL setup fails. Don't include HTTP 0 in the message.

Signed-off-by: Shawn Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_875.diff
https://github.com/git/git/commit/df747b818f0c9b7d0db1d7e3837b78e5d48b6fde,10 Feb 2016,"convert.c: refactor crlf_action

Refactor the determination and usage of crlf_action.
Today, when no ""crlf"" attribute are set on a file, crlf_action is set to
CRLF_GUESS. Use CRLF_UNDEFINED instead, and search for ""text"" or ""eol"" as
before.
After searching for line ending attributes, save the value in
struct conv_attrs.crlf_action attr_action,
so that get_convert_attr_ascii() is able report the attributes.

Replace the old CRLF_GUESS usage:
CRLF_GUESS && core.autocrlf=true -> CRLF_AUTO_CRLF
CRLF_GUESS && core.autocrlf=false -> CRLF_BINARY
CRLF_GUESS && core.autocrlf=input -> CRLF_AUTO_INPUT

Save the action in conv_attrs.crlf_action (as before) and change
all callers.

Make more clear, what is what, by defining:

- CRLF_UNDEFINED : No attributes set. Temparally used, until core.autocrlf
                   and core.eol is evaluated and one of CRLF_BINARY,
                   CRLF_AUTO_INPUT or CRLF_AUTO_CRLF is selected
- CRLF_BINARY    : No processing of line endings.
- CRLF_TEXT      : attribute ""text"" is set, line endings are processed.
- CRLF_TEXT_INPUT: attribute ""input"" or ""eol=lf"" is set. This implies text.
- CRLF_TEXT_CRLF : attribute ""eol=crlf"" is set. This implies text.
- CRLF_AUTO      : attribute ""auto"" is set.
- CRLF_AUTO_INPUT: core.autocrlf=input (no attributes)
- CRLF_AUTO_CRLF : core.autocrlf=true  (no attributes)

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_876.diff
https://github.com/git/git/commit/494398473714dcbedb38b1ac79b531c7384b3bc4,10 Feb 2016,"Sixth batch for the 2.8 cycle

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_877.diff
https://github.com/git/git/commit/aac4fac1689f7d1414523d2ac96f1c737ee53b71,10 Feb 2016,"get_sha1: don't die() on bogus search strings

The get_sha1() function generally returns an error code
rather than dying, and we sometimes speculatively call it
with something that may be a revision or a pathspec, in
order to see which one it might be.

If it sees a bogus "":/"" search string, though, it complains,
without giving the caller the opportunity to recover. We can
demonstrate this in t6133 by looking for "":/*.t"", which
should mean ""*.t at the root of the tree"", but instead dies
because of the invalid regex (the ""*"" has nothing to operate
on).

We can fix this by returning an error rather than calling
die(). Unfortunately, the tradeoff is that the error message
is slightly worse in cases where we _do_ know we have a rev.
E.g., running ""git log ':/*.t' --"" before yielded:

  fatal: Invalid search pattern: *.t

and now we get only:

  fatal: bad revision ':/*.t'

There's not a simple way to fix this short of passing a
""quiet"" flag all the way through the get_sha1() stack.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_878.diff
https://github.com/git/git/commit/4d5c2956969a6690db2bbb2f3ff40459c09d7646,08 Feb 2016,"ident: add user.useConfigOnly boolean for when ident shouldn't be guessed

It used to be that:

   git config --global user.email ""(none)""

was a viable way for people to force themselves to set user.email in
each repository.  This was helpful for people with more than one
email address, targeting different email addresses for different
clones, as it barred git from creating a commit unless the user.email
config was set in the per-repo config to the correct email address.

A recent change, 19ce497c (ident: keep a flag for bogus
default_email, 2015-12-10), however, declared that an explicitly
configured user.email is not bogus, no matter what its value is, so
this hack no longer works.

Provide the same functionality by adding a new configuration
variable user.useConfigOnly; when this variable is set, the
user must explicitly set user.email configuration.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Dan Aloni <alonid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_879.diff
https://github.com/git/git/commit/59f929596b611d88270ac0fd3ea132b32d66d460,04 Feb 2016,"fmt_ident: refactor strictness checks

This function has evolved quite a bit over time, and as a
result, the logic for ""is this an OK ident"" has been
sprinkled throughout. This ends up with a lot of redundant
conditionals, like checking want_name repeatedly. Worse,
we want to know in many cases whether we are using the
""default"" ident, and we do so by comparing directly to the
global strbuf, which violates the abstraction of the
ident_default_* functions.

Let's reorganize the function into a hierarchy of
conditionals to handle similar cases together. The only
case that doesn't just work naturally for this is that of an
empty name, where our advice is different based on whether
we came from ident_default_name() or not. We can use a
simple flag to cover this case.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_880.diff
https://github.com/git/git/commit/22396175267b7bcef97a02036831152539429bec,01 Feb 2016,"checkout-index: disallow ""--no-stage"" option

We do not really expect people to use ""--no-stage"", but if
they do, git currently segfaults. We could instead have it
undo the effects of a previous ""--stage"", but this gets
tricky around the ""to_tempfile"" flag. We cannot simply reset
it to 0, because we don't know if it was set by a previous
""--stage=all"" or an explicit ""--temp"" option.

We could solve this by setting a flag and resolving
to_tempfile later, but it's not worth the effort. Nobody
actually wants to use ""--no-stage""; we are just trying to
fix a potential segfault here.

While we're in the area, let's improve the user-facing
messages for this option. The error string should be
translatable, and we should give some hint in the ""-h""
output about what can go in the argument field.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_881.diff
https://github.com/git/git/commit/0769854f3db2c09c8b5993ea023ea07ddc1eb6eb,01 Feb 2016,"object name: introduce '^{/!-<negative pattern>}' notation

To name a commit, you can now use the :/!-<negative pattern> regex
style, and consequentially, say

    $ git rev-parse HEAD^{/!-foo}

and it will return the hash of the first commit reachable from HEAD,
whose commit message does not contain ""foo"". This is the opposite of the
existing <rev>^{/<pattern>} syntax.

The specific use-case this is intended for is to perform an operation,
excluding the most-recent commits containing a particular marker. For
example, if you tend to make ""work in progress"" commits, with messages
beginning with ""WIP"", you work, then it could be useful to diff against
""the most recent commit which was not a WIP commit"". That sort of thing
now possible, via commands such as:

    $ git diff @^{/!-^WIP}

The leader '/!-', rather than simply '/!', to denote a negative match,
is chosen to leave room for additional modifiers in the future.

Signed-off-by: Will Palmer <wmpalmer@gmail.com>
Signed-off-by: Stephen P. Smith <ischis2@cox.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_882.diff
https://github.com/git/git/commit/0d0bac67ce3b3f2301702573f6acc100798d7edd,01 Feb 2016,"transport: drop support for git-over-rsync

The git-over-rsync protocol is inefficient and broken, and
has been for a long time. It transfers way more objects than
it needs (grabbing all of the remote's ""objects/"",
regardless of which objects we need). It does its own ad-hoc
parsing of loose and packed refs from the remote, but
doesn't properly override packed refs with loose ones,
leading to garbage results (e.g., expecting the other side
to have an object pointed to by a stale packed-refs entry,
or complaining that the other side has two copies of the
refs[1]).

This latter breakage means that nobody could have
successfully pulled from a moderately active repository
since cd547b4 (fetch/push: readd rsync support, 2007-10-01).

We never made an official deprecation notice in the release
notes for git's rsync protocol, but the tutorial has marked
it as such since 914328a (Update tutorial., 2005-08-30).
And on the mailing list as far back as Oct 2005, we can find
Junio mentioning it as having ""been deprecated for quite
some time.""[2,3,4]. So it was old news then; cogito had
deprecated the transport in July of 2005[5] (though it did
come back briefly when Linus broke git-http-pull!).

Of course some people professed their love of rsync through
2006, but Linus clarified in his usual gentle manner[6]:

  > Thanks!  This is why I still use rsync, even though
  > everybody and their mother tells me ""Linus says rsync is
  > deprecated.""

  No. You're using rsync because you're actively doing
  something _wrong_.

The deprecation sentiment was reinforced in 2008, with a
mention that cloning via rsync is broken (with no fix)[7].

Even the commit porting rsync over to C from shell (cd547b4)
lists it as deprecated! So between the 10 years of informal
warnings, and the fact that it has been severely broken
since 2007, it's probably safe to simply remove it without
further deprecation warnings.

[1] http://article.gmane.org/gmane.comp.version-control.git/285101
[2] http://article.gmane.org/gmane.comp.version-control.git/10093
[3] http://article.gmane.org/gmane.comp.version-control.git/17734
[4] http://article.gmane.org/gmane.comp.version-control.git/18911
[5] http://article.gmane.org/gmane.comp.version-control.git/5617
[6] http://article.gmane.org/gmane.comp.version-control.git/19354
[7] http://article.gmane.org/gmane.comp.version-control.git/103635

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",405,data/crawl/git/patch_883.diff
https://github.com/git/git/commit/3064d5a38c72532e603faed4c63042b375ded2c7,27 Jan 2016,"mingw: fix t5601-clone.sh

Since baaf233 (connect: improve check for plink to reduce false
positives, 2015-04-26), t5601 writes out a `plink.exe` for testing that
is actually a shell script. So the assumption that the `.exe` extension
implies that the file is *not* a shell script is now wrong.

Since there was no love for the idea of allowing `.exe` files to be
shell scripts on Windows, let's go the other way round: *make*
`plink.exe` a real `.exe`.

This fixes t5601-clone.sh in Git for Windows' SDK.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_884.diff
https://github.com/git/git/commit/435ec090ec6aed9c533e096b31947b3fa765548e,27 Jan 2016,"config: add core.untrackedCache

When we know that mtime on directory as given by the environment
is usable for the purpose of untracked cache, we may want the
untracked cache to be always used without any mtime test or
kernel name check being performed.

Also when we know that mtime is not usable for the purpose of
untracked cache, for example because the repo is shared over a
network file system, we may want the untracked-cache to be
automatically removed from the index.

Allow the user to express such preference by setting the
'core.untrackedCache' configuration variable, which can take
'keep', 'false', or 'true' and default to 'keep'.

When read_index_from() is called, it now adds or removes the
untracked cache in the index to respect the value of this
variable. So it does nothing if the value is `keep` or if the
variable is unset; it adds the untracked cache if the value is
`true`; and it removes the cache if the value is `false`.

`git update-index --[no-|force-]untracked-cache` still adds the
untracked cache to, or removes it, from the index, but this
shows a warning if it goes against the value of
core.untrackedCache, because the next time the index is read
the untracked cache will be added or removed if the
configuration is set to do so.

Also `--untracked-cache` used to check that the underlying
operating system and file system change `st_mtime` field of a
directory if files are added or deleted in that directory. But
because those tests take a long time, `--untracked-cache` no
longer performs them. Instead, there is now
`--test-untracked-cache` to perform the tests. This change
makes `--untracked-cache` the same as `--force-untracked-cache`.

This last change is backward incompatible and should be
mentioned in the release notes.

Helped-by: Duy Nguyen <pclouds@gmail.com>
Helped-by: Torsten Bögershausen <tboegi@web.de>
Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>

read-cache: Duy'sfixup

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",164,data/crawl/git/patch_885.diff
https://github.com/git/git/commit/0571979bd60837d3c0802ecc1a47c48b4a6114d0,26 Jan 2016,"tag: do not show ambiguous tag names as ""tags/foo""

Since b7cc53e9 (tag.c: use 'ref-filter' APIs, 2015-07-11),
git-tag has started showing tags with ambiguous names (i.e.,
when both ""heads/foo"" and ""tags/foo"" exists) as ""tags/foo""
instead of just ""foo"". This is both:

  - pointless; the output of ""git tag"" includes only
    refs/tags, so we know that ""foo"" means the one in
    ""refs/tags"".

and

  - ambiguous; in the original output, we know that the line
    ""foo"" means that ""refs/tags/foo"" exists. In the new
    output, it is unclear whether we mean ""refs/tags/foo"" or
    ""refs/tags/tags/foo"".

The reason this happens is that commit b7cc53e9 switched
git-tag to use ref-filter's ""%(refname:short)"" output
formatting, which was adapted from for-each-ref. This more
general code does not know that we care only about tags, and
uses shorten_unambiguous_ref to get the short-name. We need
to tell it that we care only about ""refs/tags/"", and it
should shorten with respect to that value.

In theory, the ref-filter code could figure this out by us
passing FILTER_REFS_TAGS. But there are two complications
there:

  1. The handling of refname:short is deep in formatting
     code that does not even have our ref_filter struct, let
     alone the arguments to the filter_ref struct.

  2. In git v2.7.0, we expose the formatting language to the
     user. If we follow this path, it will mean that
     ""%(refname:short)"" behaves differently for ""tag"" versus
     ""for-each-ref"" (including ""for-each-ref refs/tags/""),
     which can lead to confusion.

Instead, let's add a new modifier to the formatting
language, ""strip"", to remove a specific set of prefix
components. This fixes ""git tag"", and lets users invoke the
same behavior from their own custom formats (for ""tag"" or
""for-each-ref"") while leaving "":short"" with its same
consistent meaning in all places.

We introduce a test in t7004 for ""git tag"", which fails
without this patch. We also add a similar test in t3203 for
""git branch"", which does not actually fail. But since it is
likely that ""branch"" will eventually use the same formatting
code, the test helps defend against future regressions.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_886.diff
https://github.com/git/git/commit/ef976395e26a25fb6d048d859a1c8cddb2640b9a,26 Jan 2016,"http: allow selection of proxy authentication method

CURLAUTH_ANY does not work with proxies which answer unauthenticated requests
with a 307 redirect to an error page instead of a 407 listing supported
authentication methods. Therefore, allow the authentication method to be set
using the environment variable GIT_HTTP_PROXY_AUTHMETHOD or configuration
variables http.proxyAuthmethod and remote.<name>.proxyAuthmethod (in analogy
to http.proxy and remote.<name>.proxy).

The following values are supported:

* anyauth (default)
* basic
* digest
* negotiate
* ntlm

Signed-off-by: Knut Franke <k.franke@science-computing.de>
Signed-off-by: Elia Pinto <gitter.spiros@gmail.com>
Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Elia Pinto <gitter.spiros@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_887.diff
https://github.com/git/git/commit/0e0f761842eafb51c1a5d93fbc84470e2d7ee7c3,25 Jan 2016,"dir: simplify untracked cache ""ident"" field

It is not a good idea to compare kernel versions and disable
the untracked cache if it changes, as people may upgrade and
still want the untracked cache to work. So let's just
compare work tree locations and kernel name to decide if we
should disable it.

Also storing many locations in the ident field and comparing
to any of them can be dangerous if GIT_WORK_TREE is used with
different values. So let's just store one location, the
location of the current work tree.

The downside is that untracked cache can only be used by one
type of OS for now. Exporting a git repo to different clients
via a network to e.g. Linux and Windows means that only one
can use the untracked cache.

If the location changed in the ident field and we still want
an untracked cache, let's delete the cache and recreate it.

Note that if an untracked cache has been created by a
previous Git version, then the kernel version is stored in
the ident field. As we now compare with just the kernel
name the comparison will fail and the untracked cache will
be disabled until it's recreated.

Helped-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_888.diff
https://github.com/git/git/commit/6d19db1491f1f48c5112f460e1f2d2e359e113c9,25 Jan 2016,"update-index: add untracked cache notifications

Attempting to flip the untracked-cache feature on for a random index
file with

    cd /random/unrelated/place
    git --git-dir=/somewhere/else/.git update-index --untracked-cache

would not work as you might expect. Because flipping the feature on
in the index also records the location of the corresponding working
tree (/random/unrelated/place in the above example), when the index
is subsequently used to keep track of files in the working tree in
/somewhere/else, the feature is disabled.

With this patch ""git update-index --[test-]untracked-cache"" tells the
user in which directory tests are performed. This makes it easy to
spot any problem.

Also in verbose mode, let's tell the user when the cache is enabled
or disabled.

Helped-by: Duy Nguyen <pclouds@gmail.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_889.diff
https://github.com/git/git/commit/a2d5156c2b0e6dbffc216b4a673156487a2f8b65,25 Jan 2016,"resolve_gitlink_ref: ignore non-repository paths

When we want to look up a submodule ref, we use
get_ref_cache(path) to find or auto-create its ref cache.
But if we feed a path that isn't actually a git repository,
we blindly create the ref cache, and then may die deeper in
the code when we try to access it. This is a problem because
many callers speculatively feed us a path that looks vaguely
like a repository, and expect us to tell them when it is
not.

This patch teaches resolve_gitlink_ref to reject
non-repository paths without creating a ref_cache. This
avoids the die(), and also performs better if you have a
large number of these faux-submodule directories (because
the ref_cache lookup is linear, under the assumption that
there won't be a large number of submodules).

To accomplish this, we also break get_ref_cache into two
pieces: the lookup and auto-creation (the latter is lumped
into create_ref_cache). This lets us first cheaply ask our
cache ""is it a submodule we know about?"" If so, we can avoid
repeating our filesystem lookup. So lookups of real
submodules are not penalized; they examine the submodule's
.git directory only once.

The test in t3000 demonstrates a case where this improves
correctness (we used to just die). The new perf case in
p7300 shows off the speed improvement in an admittedly
pathological repository:

Test                  HEAD^               HEAD
----------------------------------------------------------------
7300.4: ls-files -o   66.97(66.15+0.87)   0.33(0.08+0.24) -99.5%

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_890.diff
https://github.com/git/git/commit/a97262c62f1a31fcc7edf7629d313058bc7d66b5,21 Jan 2016,"diff: make -O and --output work in subdirectory

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_891.diff
https://github.com/git/git/commit/99c08d4eb28f0525d71125e7903fd4462bfd6787,19 Jan 2016,"ls-remote: add support for showing symrefs

Sometimes it's useful to know the main branch of a git repository
without actually downloading the repository.  This can be done by
looking at the symrefs stored in the remote repository.  Currently git
doesn't provide a simple way to show the symrefs stored on the remote
repository, even though the information is available.  Add a --symref
command line argument to the ls-remote command, which shows the symrefs
in the remote repository.

While there, replace a literal tab in the format string with \t to make
it more obvious to the reader.

Suggested-by: pedro rijo <pedrorijo91@gmail.com>
Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_892.diff
https://github.com/git/git/commit/d6b16ce9147e787cce3551fc79d52b3e30c3ad3a,19 Jan 2016,"shortlog: don't warn on empty author

Git tries to avoid creating a commit with an empty author
name or email. However, commits created by older, less
strict versions of git may still be in the history.  There's
not much point in issuing a warning to stderr for an empty
author. The user can't do anything about it now, and we are
better off to simply include it in the shortlog output as an
empty name/email, and let the caller process it however they
see fit.

Older versions of shortlog differentiated between ""author
header not present"" (which complained) and ""author
name/email are blank"" (which included the empty ident in the
output).  But since switching to format_commit_message, we
complain to stderr about either case (linux.git has a blank
author deep in its history which triggers this).

We could try to restore the older behavior (complaining only
about the missing header), but in retrospect, there's not
much point in differentiating these cases. A missing
author header is bogus, but as for the ""blank"" case, the
only useful behavior is to add it to the ""empty name""
collection.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_893.diff
https://github.com/git/git/commit/9b21a34a968080873519a927afd9c2570f464785,19 Jan 2016,"shortlog: optimize out useless string list

If we are in ""--summary"" mode, then we do not care about the
actual list of subject onelines associated with each author.
We care only about the number. So rather than store a
string-list for each author full of ""<none>"", let's just
keep a count.

This drops my best-of-five for ""git shortlog -ns HEAD"" on
linux.git from:

  real    0m5.194s
  user    0m5.028s
  sys     0m0.168s

to:

  real    0m5.057s
  user    0m4.916s
  sys     0m0.144s

That's about 2.5%.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_894.diff
https://github.com/git/git/commit/2db6b83d189bb82d1d45805fa6c85a9c8b507920,19 Jan 2016,"shortlog: replace hand-parsing of author with pretty-printer

When gathering the author and oneline subject for each
commit, we hand-parse the commit headers to find the
""author"" line, and then continue past to the blank line at
the end of the header.

We can replace this tricky hand-parsing by simply asking the
pretty-printer for the relevant items. This also decouples
the author and oneline parsing, opening up some new
optimizations in further commits.

One reason to avoid the pretty-printer is that it might be
less efficient than hand-parsing. However, I measured no
slowdown at all running ""git shortlog -ns HEAD"" on
linux.git.

As a bonus, we also fix a memory leak in the (uncommon) case
that the author field is blank.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_895.diff
https://github.com/git/git/commit/50250491bded3190e16978e836a4dbe129c632cf,19 Jan 2016,"shortlog: use strbufs to read from stdin

We currently use fixed-size buffers with fgets(), which
could lead to incorrect results in the unlikely event that a
line had something like ""Author:"" at exactly its 1024th
character.

But it's easy to convert this to a strbuf, and because we
can reuse the same buffer through the loop, we don't even
pay the extra allocation cost.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_896.diff
https://github.com/git/git/commit/5c3894c39d4095e6875376a6c05c6390b9a50754,19 Jan 2016,"shortlog: match both ""Author:"" and ""author"" on stdin

The original git-shortlog could read both the normal ""git
log"" output as well as ""git log --format=raw"". However, when
it was converted to C by b8ec592 (Build in shortlog,
2006-10-22), the trailing colon became mandatory, and we no
longer matched the raw output.

Given the amount of intervening time without any bug
reports, it's probable that nobody cares. But it's
relatively easy to fix, and the end result is hopefully more
readable than the original.

Note that this no longer matches ""author: "", which we did
before, but that has never been a format generated by git.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_897.diff
https://github.com/git/git/commit/a7630bd4274a0dff7cff8b92de3d3f064e321359,19 Jan 2016,"ls-files: add eol diagnostics

When working in a cross-platform environment, a user may want to
check if text files are stored normalized in the repository and
if .gitattributes are set appropriately.

Make it possible to let Git show the line endings in the index and
in the working tree and the effective text/eol attributes.

The end of line (""eolinfo"") are shown like this:

    ""-text""        binary (or with bare CR) file
    ""none""         text file without any EOL
    ""lf""           text file with LF
    ""crlf""         text file with CRLF
    ""mixed""        text file with mixed line endings.

The effective text/eol attribute is one of these:

    """", ""-text"", ""text"", ""text=auto"", ""text eol=lf"", ""text eol=crlf""

git ls-files --eol gives an output like this:

    i/none   w/none   attr/text=auto      t/t5100/empty
    i/-text  w/-text  attr/-text          t/test-binary-2.png
    i/lf     w/lf     attr/text eol=lf    t/t5100/rfc2047-info-0007
    i/lf     w/crlf   attr/text eol=crlf  doit.bat
    i/mixed  w/mixed  attr/               locale/XX.po

to show what eol convention is used in the data in the index ('i'),
and in the working tree ('w'), and what attribute is in effect,
for each path that is shown.

Add test cases in t0027.

Helped-By: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",286,data/crawl/git/patch_898.diff
https://github.com/git/git/commit/371471cea38cb4b5834c9e5715e1fe633829004f,15 Jan 2016,"t0060: loosen overly strict expectations

The dirname() tests file were developed and tested on only the five
platforms available to the developer at the time, namely: Linux (both 32
and 64bit), Windows XP 32-bit (MSVC), MinGW 32-bit and Cygwin 32-bit.

http://pubs.opengroup.org/onlinepubs/9699919799/functions/basename.html
(i.e. the POSIX spec) says, in part:

	If the string pointed to by path consists entirely of the '/'
	character, basename() shall return a pointer to the string ""/"".
	If the string pointed to by path is exactly ""//"", it is
	implementation-defined whether ""/"" or ""//"" is returned.

The thinking behind testing precise, OS-dependent output values was to
document that different setups produce different values. However, as the
test failures on MacOSX illustrated eloquently: hardcoding pretty much each
and every setup's expectations is pretty fragile.

This is not limited to the ""//"" vs ""/"" case, of course, other inputs are
also allowed to produce multiple outputs by the POSIX specs.

So let's just test for all allowed values and be done with it. This still
documents that Git cannot rely on one particular output value in those
cases, so the intention of the original tests is still met.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_899.diff
https://github.com/git/git/commit/e1f898639e906158fec26bdf3111d6f623288fa1,14 Jan 2016,"interpret-trailers: add option for in-place editing

Add a command line option --in-place to support in-place editing akin to
sed -i.  This allows to write commands like the following:

  git interpret-trailers --trailer ""X: Y"" a.txt > b.txt && mv b.txt a.txt

in a more concise way:

  git interpret-trailers --trailer ""X: Y"" --in-place a.txt

Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/patch_900.diff
https://github.com/git/git/commit/d0d2344ad84cde7fddedc1e141296607af673454,14 Jan 2016,"trailer: allow to write to files other than stdout

Use fprintf instead of printf in trailer.c in order to allow printing
to a file other than stdout. This will be needed to support in-place
editing in git interpret-trailers.

Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_901.diff
https://github.com/git/git/commit/b5496d484d244bc291db0973466b76e7f679cb9f,13 Jan 2016,"remote: handle the config setting branch.*.rebase=interactive

The config variable branch.<branchname>.rebase is not only used by `git
pull`, but also by `git remote` when showing details about a remote.
Therefore, it needs to be taught to accept the newly-introduced
`interactive` value of said variable.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_902.diff
https://github.com/git/git/commit/ee76f92fe883305c1260952f5b325b0503311fc9,12 Jan 2016,"notes: allow treeish expressions as notes ref

init_notes() is the main point of entry to the notes API. It ensures
that the input can be used as ref, because it needs a ref to update to
store notes tree after modifying it.

There however are many use cases where notes tree is only read, e.g.
""git log --notes=..."".  Any notes-shaped treeish could be used for such
purpose, but it is not allowed due to existing restriction.

Allow treeish expressions to be used in the case the notes tree is going
to be used without write ""permissions"".  Add a flag to distinguish
whether the notes tree is intended to be used read-only, or will be
updated.

With this change, operations that use notes read-only can be fed any
notes-shaped tree-ish can be used, e.g. git log --notes=notes@{1}.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_903.diff
https://github.com/git/git/commit/4be49d756894daca0e8a4477d36c6ed1096ccddc,12 Jan 2016,"checkout,clone: check return value of create_symref

It's unlikely that we would fail to create or update a
symbolic ref (especially HEAD), but if we do, we should
notice and complain. Note that there's no need to give more
details in our error message; create_symref will already
have done so.

While we're here, let's also fix a minor memory leak in
clone.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_904.diff
https://github.com/git/git/commit/7d1aaa684d42964b8b287b8c9450184dfd5bce85,12 Jan 2016,"t0060: verify that basename() and dirname() work as expected

Unfortunately, some libgen implementations yield outcomes different
from what Git expects. For example, mingw-w64-crt provides a basename()
function, that shortens `path0/` to `path`!

So let's verify that the basename() and dirname() functions we use
conform to what Git expects.

Derived-from-code-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",169,data/crawl/git/patch_905.diff
https://github.com/git/git/commit/370e5ad65e8878989eecbae28a479b1a4d6a841b,29 Dec 2015,"create_symref: use existing ref-lock code

The create_symref() function predates the existence of
""struct lock_file"", let alone the more recent ""struct
ref_lock"". Instead, it just does its own manual dot-locking.
Besides being more code, this has a few downsides:

 - if git is interrupted while holding the lock, we don't
   clean up the lockfile

 - we don't do the usual directory/filename conflict check.
   So you can sometimes create a symref ""refs/heads/foo/bar"",
   even if ""refs/heads/foo"" exists (namely, if the refs are
   packed and we do not hit the d/f conflict in the
   filesystem).

This patch refactors create_symref() to use the ""struct
ref_lock"" interface, which handles both of these things.
There are a few bonus cleanups that come along with it:

 - we leaked ref_path in some error cases

 - the symref contents were stored in a fixed-size buffer,
   putting an artificial (albeit large) limitation on the
   length of the refname. We now write through fprintf, and
   handle refnames of any size.

 - we called adjust_shared_perm only after the file was
   renamed into place, creating a potential race with
   readers in a shared repository. The lockfile code now
   handles this when creating the lockfile, making it
   atomic.

 - the legacy prefer_symlink_refs path did not do any
   locking at all. Admittedly, it is not atomic from a
   reader's perspective (as it unlinks and re-creates the
   symlink to overwrite), but at least it cannot conflict
   with other writers now.

 - the result of this patch is hopefully more readable. It
   eliminates three goto labels. Two were for error checking
   that is now simplified, and the third was to reach shared
   code that has been pulled into its own function.

Signed-off-by: Jeff King <peff@peff.net>
Reviewed-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_906.diff
https://github.com/git/git/commit/b9badadd06ae307c5e1e0e7c36985a1360cabc22,29 Dec 2015,"create_symref: modernize variable names

Once upon a time, create_symref() was used only to point
HEAD at a branch name, and the variable names reflect that
(e.g., calling the path git_HEAD). However, it is much more
generic these days (and has been for some time). Let's
update the variable names to make it easier to follow:

  - `ref_target` is now just `refname`. This is closer to
    the `ref` that is already in `cache.h`, but with the
    extra twist that ""name"" makes it clear this is the name
    and not a ref struct. Dropping ""target"" hopefully makes
    it clear that we are talking about the symref itself,
    not what it points to.

  - `git_HEAD` is now `ref_path`; the on-disk path
    corresponding to `ref`.

  - `refs_heads_master` is now just `target`; i.e., what the
    symref points at. This term also matches what is in
    the symlink(2) manpage (at least on Linux).

  - the buffer to hold the symref file's contents was simply
    called `ref`. It's now `buf` (admittedly also generic,
    but at least not actively introducing confusion with the
    other variable holding the refname).

Signed-off-by: Jeff King <peff@peff.net>
Reviewed-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_907.diff
https://github.com/git/git/commit/86d26f240fcb4f287258ad459efc2b5e30e60cfd,22 Dec 2015,"setup.c: re-fix d95138e (setup: set env $GIT_WORK_TREE when ..

Commit d95138e [1] attempted to fix a .git file problem by
setting GIT_WORK_TREE whenever GIT_DIR is set. It sounded harmless
because we handle GIT_DIR and GIT_WORK_TREE side by side for most
commands, with two exceptions: git-init and git-clone.

""git clone"" is not happy with d95138e. This command ignores GIT_DIR
but respects GIT_WORK_TREE [2] [3] which means it used to run fine
from a hook, where GIT_DIR was set but GIT_WORK_TREE was not (*).
With d95138e, GIT_WORK_TREE is set all the time and git-clone
interprets that as ""I give you order to put the worktree here"",
usually against the user's intention.

The solution in d95138e is reverted earlier, and instead we reuse
the solution from c056261 [4].  It fixed another setup-messed-
up-by-alias by saving and restoring env and spawning a new process,
but for git-clone and git-init only.

Now we conclude that setup-messed-up-by-alias is always evil. So the
env restoration is done for _all_ commands, including external ones,
whenever aliases are involved. It fixes what d95138e tried to fix,
without upsetting git-clone-inside-hooks.

The test from d95138e remains to verify it's not broken by this. A new
test is added to make sure git-clone-inside-hooks remains happy.

(*) GIT_WORK_TREE was not set _most of the time_. In some cases
    GIT_WORK_TREE is set and git-clone will behave differently. The
    use of GIT_WORK_TREE to direct git-clone to put work tree
    elsewhere looks like a mistake because it causes surprises this
    way. But that's a separate story.

[1] d95138e (setup: set env $GIT_WORK_TREE when work tree is set, like
             $GIT_DIR - 2015-06-26)
[2] 2beebd2 (clone: create intermediate directories of destination
             repo - 2008-06-25)
[3] 20ccef4 (make git-clone GIT_WORK_TREE aware - 2007-07-06)
[4] c056261 (git potty: restore environments after alias expansion -
             2014-06-08)

Reported-by: Anthony Sottile <asottile@umich.edu>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_908.diff
https://github.com/git/git/commit/df1e6ea87a58fc8d029efb3041d851f7d6653a1d,22 Dec 2015,"Revert ""setup: set env $GIT_WORK_TREE when work tree is set, like $GIT_DIR""

This reverts d95138e6 (setup: set env $GIT_WORK_TREE when work tree
is set, like $GIT_DIR, 2015-06-26).

It has caused three regression reports so far.

  http://article.gmane.org/gmane.comp.version-control.git/281608
  http://article.gmane.org/gmane.comp.version-control.git/281979
  http://article.gmane.org/gmane.comp.version-control.git/282691

All of them are about spawning git subprocesses, where the new
presence of GIT_WORK_TREE either changes command behaviour (git-init
or git-clone), or how repo/worktree is detected (from aliases), with
or without $GIT_DIR.

The original bug will be re-fixed another way.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_909.diff
https://github.com/git/git/commit/f4015337daf130944393296550dd7d8a9c172325,21 Dec 2015,"pack-revindex: drop hash table

The main entry point to the pack-revindex code is
find_pack_revindex(). This calls revindex_for_pack(), which
lazily computes and caches the revindex for the pack.

We store the cache in a very simple hash table. It's created
by init_pack_revindex(), which inserts an entry for every
packfile we know about, and we never grow or shrink the
hash. If we ever need the revindex for a pack that isn't in
the hash, we die() with an internal error.

This can lead to a race, because we may load more packs
after having called init_pack_revindex(). For example,
imagine we have one process which needs to look at the
revindex for a variety of objects (e.g., cat-file's
""%(objectsize:disk)"" format).  Simultaneously, git-gc is
running, which is doing a `git repack -ad`. We might hit a
sequence like:

  1. We need the revidx for some packed object. We call
     find_pack_revindex() and end up in init_pack_revindex()
     to create the hash table for all packs we know about.

  2. We look up another object and can't find it, because
     the repack has removed the pack it's in. We re-scan the
     pack directory and find a new pack containing the
     object. It gets added to our packed_git list.

  3. We call find_pack_revindex() for the new object, which
     hits revindex_for_pack() for our new pack. It can't
     find the packed_git in the revindex hash, and dies.

You could also replace the `repack` above with a push or
fetch to create a new pack, though these are less likely
(you would have to somehow learn about the new objects to
look them up).

Prior to 1a6d8b9 (do not discard revindex when re-preparing
packfiles, 2014-01-15), this was safe, as we threw away the
revindex whenever we re-scanned the pack directory (and thus
re-created the revindex hash on the fly). However, we don't
want to simply revert that commit, as it was solving a
different race.

So we have a few options:

  - We can fix the race in 1a6d8b9 differently, by having
    the bitmap code look in the revindex hash instead of
    caching the pointer. But this would introduce a lot of
    extra hash lookups for common bitmap operations.

  - We could teach the revindex to dynamically add new packs
    to the hash table. This would perform the same, but
    would mean adding extra code to the revindex hash (which
    currently cannot be resized at all).

  - We can get rid of the hash table entirely. There is
    exactly one revindex per pack, so we can just store it
    in the packed_git struct. Since it's initialized lazily,
    it does not add to the startup cost.

    This is the best of both worlds: less code and fewer
    hash table lookups.  The original code likely avoided
    this in the name of encapsulation. But the packed_git
    and reverse_index code are fairly intimate already, so
    it's not much of a loss.

This patch implements the final option. It's a minimal
conversion that retains the pack_revindex struct. No callers
need to change, and we can do further cleanup in a follow-on
patch.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_910.diff
https://github.com/git/git/commit/fe85ee6e23e642985004d37e63b4c0d0e5f30587,16 Dec 2015,"fetch_populated_submodules: use new parallel job processing

In a later patch we enable parallel processing of submodules, this
only adds the possibility for it. So this change should not change
any user facing behavior.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_911.diff
https://github.com/git/git/commit/c553c72eed64b5f7316ce227f6d5d783eae6f2ed,16 Dec 2015,"run-command: add an asynchronous parallel child processor

This allows to run external commands in parallel with ordered output
on stderr.

If we run external commands in parallel we cannot pipe the output directly
to the our stdout/err as it would mix up. So each process's output will
flow through a pipe, which we buffer. One subprocess can be directly
piped to out stdout/err for a low latency feedback to the user.

Example:
Let's assume we have 5 submodules A,B,C,D,E and each fetch takes a
different amount of time as the different submodules vary in size, then
the output of fetches in sequential order might look like this:

 time -->
 output: |---A---| |-B-| |-------C-------| |-D-| |-E-|

When we schedule these submodules into maximal two parallel processes,
a schedule and sample output over time may look like this:

process 1: |---A---| |-D-| |-E-|

process 2: |-B-| |-------C-------|

output:    |---A---|B|---C-------|DE

So A will be perceived as it would run normally in the single child
version. As B has finished by the time A is done, we can dump its whole
progress buffer on stderr, such that it looks like it finished in no
time. Once that is done, C is determined to be the visible child and
its progress will be reported in real time.

So this way of output is really good for human consumption, as it only
changes the timing, not the actual output.

For machine consumption the output needs to be prepared in the tasks,
by either having a prefix per line or per block to indicate whose tasks
output is displayed, because the output order may not follow the
original sequential ordering:

 |----A----| |--B--| |-C-|

will be scheduled to be all parallel:

process 1: |----A----|
process 2: |--B--|
process 3: |-C-|
output:    |----A----|CB

This happens because C finished before B did, so it will be queued for
output before B.

To detect when a child has finished executing, we check interleaved
with other actions (such as checking the liveliness of children or
starting new processes) whether the stderr pipe still exists. Once a
child closed its stderr stream, we assume it is terminating very soon,
and use `finish_command()` from the single external process execution
interface to collect the exit status.

By maintaining the strong assumption of stderr being open until the
very end of a child process, we can avoid other hassle such as an
implementation using `waitpid(-1)`, which is not implemented in Windows.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",523,data/crawl/git/patch_912.diff
https://github.com/git/git/commit/fbf71645d12d30219e88598c4867ef7c2fe48cee,16 Dec 2015,"submodule.c: write ""Fetching submodule <foo>"" to stderr

The ""Pushing submodule <foo>"" progress output correctly goes to
stderr, but ""Fetching submodule <foo>"" is going to stdout by
mistake.  Fix it to write to stderr.

Noticed while trying to implement a parallel submodule fetch.  When
this particular output line went to a different file descriptor, it
was buffered separately, resulting in wrongly interleaved output if
we copied it to the terminal naively.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_913.diff
https://github.com/git/git/commit/89f09dd34e613394c749f69ddd74adc90cb034ca,16 Dec 2015,"grep: add --threads=<num> option and grep.threads configuration

""git grep"" can now be configured (or told from the command line) how
many threads to use when searching in the working tree files.

Signed-off-by: Victor Leschuk <vleschuk@accesssoftek.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_914.diff
https://github.com/git/git/commit/87d01c854bf9860c8c21814c991f58652f6b4332,16 Dec 2015,"credential-store: don't pass strerror to die_errno()

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_915.diff
https://github.com/git/git/commit/aba37f495ee39aa9506a375bb4c667731df39899,16 Dec 2015,"blame: add support for --[no-]progress option

Teach the command to show progress output when it takes long time to
produce the first line of output; this option cannot be used with
""--incremental"" or ""--porcelain"" options.

git-annotate inherits the option as well.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Edmundo Carmona Antoranz <eantoranz@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_916.diff
https://github.com/git/git/commit/92bcbb9b338dd27f0fd4245525093c4bce867f3d,14 Dec 2015,"ident: loosen getpwuid error in non-strict mode

If the user has not specified an identity and we have to
turn to getpwuid() to find the username or gecos field, we
die immediately when getpwuid fails (e.g., because the user
does not exist). This is OK for making a commit, where we
have set IDENT_STRICT and would want to bail on bogus input.

But for something like a reflog, where the ident is ""best
effort"", it can be pain. For instance, even running ""git
clone"" with a UID that is not in /etc/passwd will result in
git barfing, just because we can't find an ident to put in
the reflog.

Instead of dying in xgetpwuid_self, we can instead return a
fallback value, and set a ""bogus"" flag. For the username in
an email, we already have a ""default_email_is_bogus"" flag.
For the name field, we introduce (and check) a matching
""default_name_is_bogus"" flag. As a bonus, this means you now
get the usual ""tell me who you are"" advice instead of just a
""no such user"" error.

No tests, as this is dependent on configuration outside of
git's control. However, I did confirm that it behaves
sensibly when I delete myself from the local /etc/passwd
(reflogs get written, and commits complain).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_917.diff
https://github.com/git/git/commit/e850194c83985396435b01b70d2db00b6d3af02e,10 Dec 2015,"ident: make xgetpwuid_self() a static local helper

This function is defined in wrapper.c, but nobody besides
ident.c uses it. And nobody is likely to in the future,
either, as anything that cares about the user's name should
be going through the ident code.

Moving it here is a cleanup of the global namespace, but it
will also enable further cleanups inside ident.c.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_918.diff
https://github.com/git/git/commit/d34141cd08fb1c6938eae329a7c3122b05e9eb01,04 Dec 2015,"push: follow the ""last one wins"" convention for --recurse-submodules

Use the ""last one wins"" convention for --recurse-submodules rather
than treating conflicting options as an error.

Also, fix the declaration of the file-scope recurse_submodules
global variable to put it on a separate line.

Signed-off-by: Mike Crowe <mac@mcrowe.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_919.diff
https://github.com/git/git/commit/08a3651fe7f3163acbac461e0daf370329a1d332,01 Dec 2015,"Make error message after failing commit_lock_file() less confusing

The error message after a failing commit_lock_file() call sometimes
looks like this, causing confusion:

  $ git remote add remote git@server.com/repo.git
  error: could not commit config file .git/config
  # Huh?!
  # I didn't want to commit anything, especially not my config file!

While in the narrow context of the lockfile module using the verb
'commit' in the error message makes perfect sense, in the broader
context of git the word 'commit' already has a very specific meaning,
hence the confusion.

Reword these error messages to say ""could not write"" instead of ""could
not commit"".

While at it, include strerror in the error messages after writing the
config file or the credential store fails to provide some information
about the cause of the failure, and update the style of the error
message after writing the reflog fails to match surrounding error
messages (i.e. no '' around the pathname and no () around the error
description).

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Jeff King <peff@peff.net>",13,data/crawl/git/patch_920.diff
https://github.com/git/git/commit/00ad6e3182bbe68a94eaedf322918e4f266d184f,24 Nov 2015,"git-p4: work with a detached head

When submitting, git-p4 finds the current branch in
order to know if it is allowed to submit (configuration
""git-p4.allowSubmit"").

On a detached head, detecting the branch would fail, and
git-p4 would report a cryptic error.

This change teaches git-p4 to recognise a detached head and
submit successfully.

Signed-off-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Jeff King <peff@peff.net>",25,data/crawl/git/patch_921.diff
https://github.com/git/git/commit/b33a15b08131514b593015cb3e719faf9db20208,20 Nov 2015,"push: add recurseSubmodules config option

The --recurse-submodules command line parameter has existed for some
time but it has no config file equivalent.

Following the style of the corresponding parameter for git fetch, let's
invent push.recurseSubmodules to provide a default for this
parameter. This also requires the addition of --recurse-submodules=no to
allow the configuration to be overridden on the command line when
required.

The most straightforward way to implement this appears to be to make
push use code in submodule-config in a similar way to fetch.

Signed-off-by: Mike Crowe <mac@mcrowe.com>
Signed-off-by: Jeff King <peff@peff.net>",260,data/crawl/git/patch_922.diff
https://github.com/git/git/commit/acf3af25fbc8b2323ab210e0b63abcb912bd7def,20 Nov 2015,"modernize t9300: use test_must_be_empty

Instead of comparing actual output to an empty file, use
test_must_be_empty. In addition to the better error message provided by
the helper, allocation of an empty file during the setup sequence can be
avoided.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Jeff King <peff@peff.net>",8,data/crawl/git/patch_923.diff
https://github.com/git/git/commit/d67824feaa1613d363834b93e40c70b93791952b,20 Nov 2015,"modernize t9300: single-quote placement and indentation

Many test cases do not follow our modern style that places the
single-quotes that surround the shell code snippets before and after
the shell code. Make it so.

Many of the lines changed in this way are indented other than by a
single tab. Change them (and some additional lines) to be indented
with a tab.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Jeff King <peff@peff.net>",872,data/crawl/git/patch_924.diff
https://github.com/git/git/commit/ed1c9977cb1b63e4270ad8bdf967a2d02580aa08,20 Nov 2015,"Remove get_object_hash.

Convert all instances of get_object_hash to use an appropriate reference
to the hash member of the oid member of struct object.  This provides no
functional change, as it is essentially a macro substitution.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",504,data/crawl/git/patch_925.diff
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/patch_926.diff
https://github.com/git/git/commit/7999b2cf772956466baa8925491d6fb1b0963292,20 Nov 2015,"Add several uses of get_object_hash.

Convert most instances where the sha1 member of struct object is
dereferenced to use get_object_hash.  Most instances that are passed to
functions that have versions taking struct object_id, such as
get_sha1_hex/get_oid_hex, or instances that can be trivially converted
to use struct object_id instead, are not converted.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",506,data/crawl/git/patch_927.diff
https://github.com/git/git/commit/f4e54d02b894064d370e461385b48701485672bd,20 Nov 2015,"Convert struct ref to use object_id.

Use struct object_id in three fields in struct ref and convert all the
necessary places that use it.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",302,data/crawl/git/patch_928.diff
https://github.com/git/git/commit/700fd28e4f3ecd6e7b5f8f2098e62ffef9ab958b,30 Oct 2015,"blame: allow blame --reverse --first-parent when it makes sense

Allow combining --reverse and --first-parent if initial commit of
specified range is at the first-parent chain starting from the final
commit. Disable the prepare_revision_walk()'s builtin children
collection, instead picking only the ones which are along the first
parent chain.

Signed-off-by: Max Kirillov <max@max630.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_929.diff
https://github.com/git/git/commit/37023ba381b6d251d7140a997b39b566dbc63c42,26 Oct 2015,"Seventh batch for 2.7

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_930.diff
https://github.com/git/git/commit/71d92575251bdb8b5e1b5b3a5c649bb63d9fc116,26 Oct 2015,"imap-send: only use CURLOPT_LOGIN_OPTIONS if it is actually available

This fixes the compilation on an older Linux that was used to debug
test failures when upgrading Git for Windows to Git v2.3.0.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_931.diff
https://github.com/git/git/commit/95261974bbc8cc1a32ed260f06a694cde86f732d,26 Oct 2015,"blame: fix option name in error message

The option name used in blame's UI is `--reverse`.

Signed-off-by: Max Kirillov <max@max630.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_932.diff
https://github.com/git/git/commit/0181681e921fa4e001a51886749ee0584233db51,22 Oct 2015,"clone: allow ""--dissociate"" without reference

The ""--reference"" option is not the only way to provide a repository
to borrow objects from.  A repository that borrows from another
repository can be cloned with ""clone --local"" and the resulting
repository will borrow from the same repository, which the user
may want to ""--dissociate"" from.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_933.diff
https://github.com/git/git/commit/6ac617a321383b2e3a0f0537e3224ec6229e6500,21 Oct 2015,"mailinfo: remove calls to exit() and die() deep in the callchain

The top-level mailinfo() would instead punt when the code in the
deeper part of the callchain detects an unrecoverable error in the
input.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_934.diff
https://github.com/git/git/commit/4b98bae2cbc6bf49a5fd7bab330191d002e6e2fc,21 Oct 2015,"am: make direct call to mailinfo

And finally the endgame.  Instead of spawning ""git mailinfo"" via the
run_command() API the same number of times as there are incoming
patches, make direct internal call to the libified mailinfo() from
""git am"" to reduce the spawning overhead, which would matter on some
platforms.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_935.diff
https://github.com/git/git/commit/669b963af2778c489b0742d2f4d56aeda7dcfad8,21 Oct 2015,"mailinfo: handle charset conversion errors in the caller

Instead of dying in convert_to_utf8(), just report an error and let
the callers handle it.  Between the two callers:

 - decode_header() silently punts when it cannot parse a broken
   RFC2047 encoded text (e.g. when it sees anything other than B or
   Q after it sees ""=?<charset>"") by jumping to release_return,
   returning the string it successfully parsed out so far, to the
   caller.  A piece of string that convert_to_utf8() cannot handle
   can be treated the same way.

 - handle_commit_msg() doesn't cope with a malformed line well, so
   die there for now.  We'll lift this even higher in later changes
   in this series.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_936.diff
https://github.com/git/git/commit/c6905e45f078530cda57690b0db6a7378dc1f794,21 Oct 2015,"mailinfo: libify

Move the bulk of the code from builtin/mailinfo.c to mailinfo.c
so that new callers can start calling mailinfo() directly.

Note that a few calls to exit() and die() need to be cleaned up
for the API to be truly useful, which will come in later steps.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2110,data/crawl/git/patch_937.diff
https://github.com/git/git/commit/05e625e5bf5231af984f17b82be9c48063b37242,21 Oct 2015,"mailinfo: keep the parsed log message in a strbuf

When mailinfo() is eventually libified, the calling ""git am"" still
will have to write out the log message in the ""msg"" file for hooks
and other users of the information, but it does not have to reopen
and reread what it wrote earlier if the function kept it in a strbuf.

This also removes the need for seeking and truncating the output
file when we see a scissors mark in the input, which in turn allows
us to lose two callsites of die_errno().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_938.diff
https://github.com/git/git/commit/8f63588a6e23685b8deae681c9f126158c612e97,21 Oct 2015,"mailinfo: move cmitmsg and patchfile to struct mailinfo

Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_939.diff
https://github.com/git/git/commit/6200b751bb83d3ea982774e479ad6674c9e84b0a,21 Oct 2015,"mailinfo: move add_message_id and message_id to struct mailinfo

This requires us to pass the structure into check_header() codepath.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_940.diff
https://github.com/git/git/commit/173aef7c2ee9aa0021dad7c70d30f9099be4a134,21 Oct 2015,"mailinfo: move global ""FILE *fin, *fout"" to struct mailinfo

This requires us to pass ""struct mailinfo"" to more functions
throughout the codepath that read input lines.  Incidentally,
later steps are helped by this patch passing the struct to
more callchains.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_941.diff
https://github.com/git/git/commit/c69f2395ba6f4bc96542d6d52987989992331226,21 Oct 2015,"mailinfo: introduce ""struct mailinfo"" to hold globals

In this first step, move only 'email' and 'name' fields in there and
remove the corresponding globals.  In subsequent patches, more
globals will be moved to this and the structure will be passed
around as a new parameter to more functions.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_942.diff
https://github.com/git/git/commit/39afcd38196fa3594924a73896e5fa2bca21dd63,21 Oct 2015,"mailinfo: move handle_boundary() lower

This function wants to call find_boundary() and is called only from
one place without any recursing, so it becomes easier to read if it
appears after the called function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",114,data/crawl/git/patch_943.diff
https://github.com/git/git/commit/bca92e88e7d5c95ef6d38d6966f5e7a11969c7d2,20 Oct 2015,"Sixth batch for 2.7

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_944.diff
https://github.com/git/git/commit/b2a7123b997f950e9785a5e7df64c3104270fef3,09 Oct 2015,"test-path-utils.c: remove incorrect assumption

In normalize_ceiling_entry(), we test that normalized paths end with
slash, *unless* the path to be normalized was already the root
directory.

However, normalize_path_copy() does not even enforce this condition.

Even worse: on Windows, the root directory gets translated into a
Windows directory by the Bash before being passed to `git.exe` (or
`test-path-utils.exe`), which means that we cannot even know whether
the path that was passed to us was the root directory to begin with.

This issue has already caused endless hours of trying to ""fix"" the
MSYS2 runtime, only to break other things due to MSYS2 ensuring that
the converted path maintains the same state as the input path with
respect to any final '/'.

So let's just forget about this test. It is non-essential to Git's
operation, anyway.

Acked-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Ray Donnelly <mingw.android@gmail.com>",7,data/crawl/git/patch_945.diff
https://github.com/git/git/commit/14886b40c552d3ad4d5492d922948d76762af198,08 Oct 2015,"pack-objects: do not get distracted by broken symrefs

It is quite possible for, say, a remote HEAD to become broken, e.g.
when the default branch was renamed.

We should still be able to pack our objects when such a thing happens;
simply ignore broken symrefs (because they cannot matter for the packing
process anyway).

This fixes https://github.com/git-for-windows/git/issues/423

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_946.diff
https://github.com/git/git/commit/bb9c03b82add467592249a222018a150684a4c97,08 Oct 2015,"worktree: add 'list' command

'git worktree list' iterates through the worktree list, and outputs
details of the worktree including the path to the worktree, the currently
checked out revision and branch, and if the work tree is bare.  There is
also porcelain format option available.

Signed-off-by: Michael Rappazzo <rappazzo@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",226,data/crawl/git/patch_947.diff
https://github.com/git/git/commit/1ceb7f90674897a24a9f2a56abf7d26297761f18,08 Oct 2015,"worktree: refactor find_linked_symref function

Refactoring will help transition this code to provide additional useful
worktree functions.

Signed-off-by: Michael Rappazzo <rappazzo@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_948.diff
https://github.com/git/git/commit/38849a8116e690071c02eba0a8ef60a031a58080,07 Oct 2015,"sha1_file.c: add a function to release all packs

On Windows, files that are in use cannot be removed or renamed. That
means that we have to release pack files when we are about to, say,
repack them. Let's introduce a convenient function to close all the
pack files and their idx files.

While at it, we consolidate the close windows/close fd/close index
stanza in `free_pack_by_name()` into the `close_pack()` function that
is used by the new `close_all_packs()` function to avoid repeated code.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_949.diff
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/patch_950.diff
https://github.com/git/git/commit/f0766bf94ec7a398a5a524053ea5334883c16a2e,05 Oct 2015,"fsck: use for_each_loose_file_in_objdir

Since 27e1e22 (prune: factor out loose-object directory
traversal, 2014-10-15), we now have a generic callback
system for iterating over the loose object directories. This
is used by prune, count-objects, etc.

We did not convert git-fsck at the time because it
implemented an inode-sorting scheme that was not part of the
generic code. Now that the inode-sorting code is gone, we
can reuse the generic code.  The result is shorter,
hopefully more readable, and drops some unchecked sprintf
calls.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_951.diff
https://github.com/git/git/commit/cbc8feeaf97db39ff7220c4d1b03e0c3fdd2401c,05 Oct 2015,"color: add overflow checks for parsing colors

Our color parsing is designed to never exceed COLOR_MAXLEN
bytes. But the relationship between that hand-computed
number and the parsing code is not at all obvious, and we
merely hope that it has been computed correctly for all
cases.

Let's mark the expected ""end"" pointer for the destination
buffer and make sure that we do not exceed it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_952.diff
https://github.com/git/git/commit/2b87d3a89633fb6078203a77d2610175f94cef95,05 Oct 2015,"drop strcpy in favor of raw sha1_to_hex

In some cases where we strcpy() the result of sha1_to_hex(),
there's no need; the result goes directly into a printf
statement, and we can simply pass the return value from
sha1_to_hex() directly.

When this code was originally written, sha1_to_hex used a
single buffer, and it was not safe to use it twice within a
single expression. That changed as of dcb3450 (sha1_to_hex()
usage cleanup, 2006-05-03), but this code was never updated.

History-dug-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_953.diff
https://github.com/git/git/commit/d59f765ac9b3d6fc2e6bea262222b80493055f12,05 Oct 2015,"use sha1_to_hex_r() instead of strcpy

Before sha1_to_hex_r() existed, a simple way to get hex
sha1 into a buffer was with:

  strcpy(buf, sha1_to_hex(sha1));

This isn't wrong (assuming the buf is 41 characters), but it
makes auditing the code base for bad strcpy() calls harder,
as these become false positives.

Let's convert them to sha1_to_hex_r(), and likewise for
some calls to find_unique_abbrev(). While we're here, we'll
double-check that all of the buffers are correctly sized,
and use the more obvious GIT_SHA1_HEXSZ constant.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_954.diff
https://github.com/git/git/commit/bd22d4ffbc10052fef1a6c52aec066ee64236340,05 Oct 2015,"transport: use strbufs for status table ""quickref"" strings

We generate range strings like ""1234abcd...5678efab"" for use
in the the fetch and push status tables. We use fixed-size
buffers along with strcat to do so. These aren't buggy, as
our manual size computation is correct, but there's nothing
checking that this is so.  Let's switch them to strbufs
instead, which are obviously correct, and make it easier to
audit the code base for problematic calls to strcat().

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_955.diff
https://github.com/git/git/commit/9c28390bda4bb86f48a3145417c1cb1892782c47,05 Oct 2015,"init: use strbufs to store paths

The init code predates strbufs, and uses PATH_MAX-sized
buffers along with many manual checks on intermediate sizes
(some of which make magic assumptions, such as that init
will not create a path inside .git longer than 50
characters).

We can simplify this greatly by using strbufs, which drops
some hard-to-verify strcpy calls in favor of git_path_buf.
While we're in the area, let's also convert existing calls
to git_path to the safer git_path_buf (our existing calls
were passed to pretty tame functions, and so were not a
problem, but it's easy to be consistent and safe here).

Note that we had an explicit test that ""git init"" rejects
long template directories. This comes from 32d1776 (init: Do
not segfault on big GIT_TEMPLATE_DIR environment variable,
2009-04-18). We can drop the test_must_fail here, as we now
accept this and need only confirm that we don't segfault,
which was the original point of the test.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",176,data/crawl/git/patch_956.diff
https://github.com/git/git/commit/fdf729661a777d8bd598f40055d92b2df5601332,05 Oct 2015,"probe_utf8_pathname_composition: use internal strbuf

When we are initializing a .git directory, we may call
probe_utf8_pathname_composition to detect utf8 mangling. We
pass in a path buffer for it to use, and it blindly
strcpy()s into it, not knowing whether the buffer is large
enough to hold the result or not.

In practice this isn't a big deal, because the buffer we
pass in already contains ""$GIT_DIR/config"", and we append
only a few extra bytes to it. But we can easily do the right
thing just by calling git_path_buf ourselves. Technically
this results in a different pathname (before we appended our
utf8 characters to the ""config"" path, and now they get their
own files in $GIT_DIR), but that should not matter for our
purposes.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_957.diff
https://github.com/git/git/commit/b47d807d20374d8dc929ba4c0ca3bd7e8a4ce1f7,03 Oct 2015,"git-p4: add Git LFS backend for large file system

Add example implementation including test cases for the large file
system using Git LFS.

Pushing files to the Git LFS server is not tested.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",360,data/crawl/git/patch_958.diff
https://github.com/git/git/commit/a5db4b127bf86b9dbeb3cb079f4a9530ba313941,03 Oct 2015,"git-p4: add support for large file systems

Perforce repositories can contain large (binary) files. Migrating these
repositories to Git generates very large local clones. External storage
systems such as Git LFS [1], Git Fat [2], Git Media [3], git-annex [4]
try to address this problem.

Add a generic mechanism to detect large files based on extension,
uncompressed size, and/or compressed size.

[1] https://git-lfs.github.com/
[2] https://github.com/jedbrown/git-fat
[3] https://github.com/alebedev/git-media
[4] https://git-annex.branchable.com/

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>

Conflicts:
	Documentation/git-p4.txt
	git-p4.py
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/patch_959.diff
https://github.com/git/git/commit/3adc4ec7b9e1d2118501728a75a5b93d971974fa,29 Sep 2015,Sync with v2.5.4,516,data/crawl/git/patch_960.diff
https://github.com/git/git/commit/11a458befcd7662fbe6d2d53c76d49ae2b0fe219,28 Sep 2015,Sync with 2.4.10,495,data/crawl/git/patch_961.diff
https://github.com/git/git/commit/6343e2f6f271cf344ea8e7384342502faecaf37c,28 Sep 2015,Sync with 2.3.10,474,data/crawl/git/patch_962.diff
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_963.diff
https://github.com/git/git/commit/d78db8424ec5c3f3327441cd1a897064af39da91,28 Sep 2015,"clone: better error when --reference is a linked checkout

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_964.diff
https://github.com/git/git/commit/f4113cac0c88b4f36ee6f3abf3218034440a68e3,25 Sep 2015,"http: limit redirection to protocol-whitelist

Previously, libcurl would follow redirection to any protocol
it was compiled for support with. This is desirable to allow
redirection from HTTP to HTTPS. However, it would even
successfully allow redirection from HTTP to SFTP, a protocol
that git does not otherwise support at all. Furthermore
git's new protocol-whitelisting could be bypassed by
following a redirect within the remote helper, as it was
only enforced at transport selection time.

This patch limits redirects within libcurl to HTTP, HTTPS,
FTP and FTPS. If there is a protocol-whitelist present, this
list is limited to those also allowed by the whitelist. As
redirection happens from within libcurl, it is impossible
for an HTTP redirect to a protocol implemented within
another remote helper.

When the curl version git was compiled with is too old to
support restrictions on protocol redirection, we warn the
user if GIT_ALLOW_PROTOCOL restrictions were requested. This
is a little inaccurate, as even without that variable in the
environment, we would still restrict SFTP, etc, and we do
not warn in that case. But anything else means we would
literally warn every time git accesses an http remote.

This commit includes a test, but it is not as robust as we
would hope. It redirects an http request to ftp, and checks
that curl complained about the protocol, which means that we
are relying on curl's specific error message to know what
happened. Ideally we would redirect to a working ftp server
and confirm that we can clone without protocol restrictions,
and not with them. But we do not have a portable way of
providing an ftp server, nor any other protocol that curl
supports (https is the closest, but we would have to deal
with certificates).

[jk: added test and version warning]

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_965.diff
https://github.com/git/git/commit/df1ed03a6fabf58b63b26950c71d36eff4aa25e8,25 Sep 2015,"remote-ext: simplify git pkt-line generation

We format a pkt-line into a heap buffer, which requires
manual computation of the required size, and uses some bare
sprintf calls. We could use a strbuf instead, which would
take care of the computation for us. But it's even easier
still to use packet_write(). Besides handling the formatting
and writing for us, it fixes two things:

  1. Our manual max-size check used 0xFFFF, while technically
     LARGE_PACKET_MAX is slightly smaller than this.

  2. Our packet will now be output as part of
     GIT_TRACE_PACKET debugging.

Unfortunately packet_write() does not let us build up the
buffer progressively, so we do have to repeat ourselves a
little depending on the ""vhost"" setting, but the end result
is still far more readable than the original.

Since there were no tests covering this feature at all,
we'll add a few into t5802.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_966.diff
https://github.com/git/git/commit/0cb9d6d6b63ad7fea4ca8363f7f1f921b1e16ec7,25 Sep 2015,"upload-archive: convert sprintf to strbuf

When we report an error to the client, we format it into a
fixed-size buffer using vsprintf(). This can't actually
overflow in practice, since we only format a very tame
subset of strings (mostly strerror() output). However, it's
hard to tell immediately, so let's just use a strbuf so
readers do not have to wonder.

We do add an allocation here, but the performance is not
important; the next step is to call die() anyway.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_967.diff
https://github.com/git/git/commit/9ae97018fb2e7f30ab92fdc2965d1dcff2c5c296,25 Sep 2015,"use strip_suffix and xstrfmt to replace suffix

When we want to convert ""foo.pack"" to ""foo.idx"", we do it by
duplicating the original string and then munging the bytes
in place. Let's use strip_suffix and xstrfmt instead, which
has several advantages:

  1. It's more clear what the intent is.

  2. It does not implicitly rely on the fact that
     strlen("".idx"") <= strlen("".pack"") to avoid an overflow.

  3. We communicate the assumption that the input file ends
     with "".pack"" (and get a run-time check that this is so).

  4. We drop calls to strcpy, which makes auditing the code
     base easier.

Likewise, we can do this to convert "".pack"" to "".bitmap"",
avoiding some manual memory computation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_968.diff
https://github.com/git/git/commit/3ec832c4b563f3dd1f23399c3bdede1168cc77e7,25 Sep 2015,"config: use xstrfmt in normalize_value

We xmalloc a fixed-size buffer and sprintf into it; this is
OK because the size of our formatting types is finite, but
that's not immediately clear to a reader auditing sprintf
calls. Let's switch to xstrfmt, which is shorter and
obviously correct.

Note that just dropping the common xmalloc here causes gcc
to complain with -Wmaybe-uninitialized. That's because if
""types"" does not match any of our known types, we never
write anything into the ""normalized"" pointer. With the
current code, gcc doesn't notice because we always return a
valid pointer (just one which might point to uninitialized
data, but the compiler doesn't know that). In other words,
the current code is potentially buggy if new types are added
without updating this spot.

So let's take this opportunity to clean up the function a
bit more. We can drop the ""normalized"" pointer entirely, and
just return directly from each code path. And then add an
assertion at the end in case we haven't covered any cases.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_969.diff
https://github.com/git/git/commit/5096d4909f9b13c7a650d9dbb7c9702ea7413566,25 Sep 2015,"convert trivial sprintf / strcpy calls to xsnprintf

We sometimes sprintf into fixed-size buffers when we know
that the buffer is large enough to fit the input (either
because it's a constant, or because it's numeric input that
is bounded in size). Likewise with strcpy of constant
strings.

However, these sites make it hard to audit sprintf and
strcpy calls for buffer overflows, as a reader has to
cross-reference the size of the array with the input. Let's
use xsnprintf instead, which communicates to a reader that
we don't expect this to overflow (and catches the mistake in
case we do).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_970.diff
https://github.com/git/git/commit/af49c6d0918bf04aad89bd885a4eef5767a33d0e,25 Sep 2015,"add reentrant variants of sha1_to_hex and find_unique_abbrev

The sha1_to_hex and find_unique_abbrev functions always
write into reusable static buffers. There are a few problems
with this:

  - future calls overwrite our result. This is especially
    annoying with find_unique_abbrev, which does not have a
    ring of buffers, so you cannot even printf() a result
    that has two abbreviated sha1s.

  - if you want to put the result into another buffer, we
    often strcpy, which looks suspicious when auditing for
    overflows.

This patch introduces sha1_to_hex_r and find_unique_abbrev_r,
which write into a user-provided buffer. Of course this is
just punting on the overflow-auditing, as the buffer
obviously needs to be GIT_SHA1_HEXSZ + 1 bytes. But it is
much easier to audit, since that is a well-known size.

We retain the non-reentrant forms, which just become thin
wrappers around the reentrant ones. This patch also adds a
strbuf variant of find_unique_abbrev, which will be handy in
later patches.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_971.diff
https://github.com/git/git/commit/7b03c89ebd10396ac7569f0c8c4fa0b4efd4f7ed,25 Sep 2015,"add xsnprintf helper function

There are a number of places in the code where we call
sprintf(), with the assumption that the output will fit into
the buffer. In many cases this is true (e.g., formatting a
number into a large buffer), but it is hard to tell
immediately from looking at the code. It would be nice if we
had some run-time check to make sure that our assumption is
correct (and to communicate to readers of the code that we
are not blindly calling sprintf, but have actually thought
about this case).

This patch introduces xsnprintf, which behaves just like
snprintf, except that it dies whenever the output is
truncated. This acts as a sort of assert() for these cases,
which can help find places where the assumption is violated
(as opposed to truncating and proceeding, which may just
silently give a wrong answer).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_972.diff
https://github.com/git/git/commit/7cd17e80579c2bffd6245837175a6e1b12a78045,25 Sep 2015,"show-branch: avoid segfault with --reflog of unborn branch

When no branch is given to the ""--reflog"" option, we resolve
HEAD to get the default branch. However, if HEAD points to
an unborn branch, resolve_ref returns NULL, and we later
segfault trying to access it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_973.diff
https://github.com/git/git/commit/aedcb7dc75e5c260f20bebe14925f3ac4841b03d,25 Sep 2015,"branch.c: use 'ref-filter' APIs

Make 'branch.c' use 'ref-filter' APIs for iterating through refs
sorting. This removes most of the code used in 'branch.c' replacing it
with calls to the 'ref-filter' library.

Make 'branch.c' use the 'filter_refs()' function provided by 'ref-filter'
to filter out tags based on the options set.

We provide a sorting option provided for 'branch.c' by using the
sorting options provided by 'ref-filter'. Also by default, we sort by
'refname'.  Since 'HEAD' is alphabatically before 'refs/...' we end up
with an array consisting of the 'HEAD' ref then the local branches and
finally the remote-tracking branches.

Also remove the 'ignore' variable from ref_array_item as it was
previously used for the '--merged' option and now that is handled by
ref-filter.

Modify some of the tests in t1430 to check the stderr for a warning
regarding the broken ref. This is done as ref-filter throws a warning
for broken refs rather than directly printing them.

Add tests and documentation for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/patch_974.diff
https://github.com/git/git/commit/1511b22d40d102f397104858a617aa1662bb1c98,25 Sep 2015,"branch.c: use 'ref-filter' data structures

Make 'branch.c' use 'ref-filter' data structures and make changes to
support the new data structures. This is a part of the process of
porting 'branch.c' to use 'ref-filter' APIs.

This is a temporary step before porting 'branch.c' to use 'ref-filter'
completely. As this is a temporary step, most of the code introduced
here will be removed when 'branch.c' is ported over to use
'ref-filter' APIs.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",324,data/crawl/git/patch_975.diff
https://github.com/git/git/commit/ca41799068e101e908544d4e2000a747b1389ebc,25 Sep 2015,"branch: drop non-commit error reporting

Remove the error ""branch '%s' does not point at a commit"" in
append_ref(), which reports branch refs which do not point to
commits.  Also remove the error ""some refs could not be read"" in
print_ref_list() which is triggered as a consequence of the first
error.

The purpose of these codepaths is not to diagnose and report a
repository corruption.  If we care about such a corruption, we
should report it from fsck instead, which we already do.

This also helps in a smooth port of branch.c to use ref-filter APIs
over the following patches. On the other hand, ref-filter ignores refs
which do not point at commits silently.

Based-on-patch-by: Jeff King <peff@peff.net>
Helped-by: Junio C Hamano <gitster@pobox.com>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_976.diff
https://github.com/git/git/commit/a5adaced2e13c135d5d9cc65be9eb95aa3bacedf,23 Sep 2015,"transport: add a protocol-whitelist environment variable

If we are cloning an untrusted remote repository into a
sandbox, we may also want to fetch remote submodules in
order to get the complete view as intended by the other
side. However, that opens us up to attacks where a malicious
user gets us to clone something they would not otherwise
have access to (this is not necessarily a problem by itself,
but we may then act on the cloned contents in a way that
exposes them to the attacker).

Ideally such a setup would sandbox git entirely away from
high-value items, but this is not always practical or easy
to set up (e.g., OS network controls may block multiple
protocols, and we would want to enable some but not others).

We can help this case by providing a way to restrict
particular protocols. We use a whitelist in the environment.
This is more annoying to set up than a blacklist, but
defaults to safety if the set of protocols git supports
grows). If no whitelist is specified, we continue to default
to allowing all protocols (this is an ""unsafe"" default, but
since the minority of users will want this sandboxing
effect, it is the only sensible one).

A note on the tests: ideally these would all be in a single
test file, but the git-daemon and httpd test infrastructure
is an all-or-nothing proposition rather than a test-by-test
prerequisite. By putting them all together, we would be
unable to test the file-local code on machines without
apache.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",255,data/crawl/git/patch_977.diff
https://github.com/git/git/commit/1f5f3907117021961545e42097829001b58288db,22 Sep 2015,"git-p4: handle ""Translation of file content failed""

A P4 repository can get into a state where it contains a file with
type UTF-16 that does not contain a valid UTF-16 BOM. If git-p4
attempts to retrieve the file then the process crashes with a
""Translation of file content failed"" error.

More info here: http://answers.perforce.com/articles/KB/3117

Fix this by detecting this error and retrieving the file as binary
instead. The result in Git is the same.

Known issue: This works only if git-p4 is executed in verbose mode.
In normal mode no exceptions are thrown and git-p4 just exits.

Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_978.diff
https://github.com/git/git/commit/329e6e8794c347d3da92144f88ad838945508ac6,21 Sep 2015,"gc: save log from daemonized gc --auto and print it next time

While commit 9f673f9 (gc: config option for running --auto in
background - 2014-02-08) helps reduce some complaints about 'gc
--auto' hogging the terminal, it creates another set of problems.

The latest in this set is, as the result of daemonizing, stderr is
closed and all warnings are lost. This warning at the end of cmd_gc()
is particularly important because it tells the user how to avoid ""gc
--auto"" running repeatedly. Because stderr is closed, the user does
not know, naturally they complain about 'gc --auto' wasting CPU.

Daemonized gc now saves stderr to $GIT_DIR/gc.log. Following gc --auto
will not run and gc.log printed out until the user removes gc.log.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_979.diff
https://github.com/git/git/commit/96f78d39989d1fcf393d7bc42357467dd8cf0f15,17 Sep 2015,"remote: add get-url subcommand

Expanding `insteadOf` is a part of ls-remote --url and there is no way
to expand `pushInsteadOf` as well. Add a get-url subcommand to be able
to query both as well as a way to get all configured urls.

Signed-off-by: Ben Boeckel <mathstuf@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/patch_980.diff
https://github.com/git/git/commit/5242860f548d1869ac2779726ad496f0ae8ab5ca,17 Sep 2015,"tag.c: implement '--merged' and '--no-merged' options

Use 'ref-filter' APIs to implement the '--merged' and '--no-merged'
options into 'tag.c'. The '--merged' option lets the user to only list
tags merged into the named commit. The '--no-merged' option lets the
user to only list tags not merged into the named commit.  If no object
is provided it assumes HEAD as the object.

Add documentation and tests for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_981.diff
https://github.com/git/git/commit/b7cc53e92c806b73e14b03f60c17b7c29e52b4a4,17 Sep 2015,"tag.c: use 'ref-filter' APIs

Make 'tag.c' use 'ref-filter' APIs for iterating through refs, sorting
and printing of refs. This removes most of the code used in 'tag.c'
replacing it with calls to the 'ref-filter' library.

Make 'tag.c' use the 'filter_refs()' function provided by 'ref-filter'
to filter out tags based on the options set.

For printing tags we use 'show_ref_array_item()' function provided by
'ref-filter'.

We improve the sorting option provided by 'tag.c' by using the sorting
options provided by 'ref-filter'. This causes the test 'invalid sort
parameter on command line' in t7004 to fail, as 'ref-filter' throws an
error for all sorting fields which are incorrect. The test is changed
to reflect the same.

Modify documentation for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",369,data/crawl/git/patch_982.diff
https://github.com/git/git/commit/ac4cc866c8cddbc25b5f213286a0269318dd2485,17 Sep 2015,"tag.c: use 'ref-filter' data structures

Make 'tag.c' use 'ref-filter' data structures and make changes to
support the new data structures. This is a part of the process
of porting 'tag.c' to use 'ref-filter' APIs.

This is a temporary step before porting 'tag.c' to use 'ref-filter'
completely. As this is a temporary step, most of the code
introduced here will be removed when 'tag.c' is ported over to use
'ref-filter' APIs.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/patch_983.diff
https://github.com/git/git/commit/1bb38e5a6a8fb6cf9b882a1a7038d649ceba0085,17 Sep 2015,"ref-filter: add support for %(contents:lines=X)

In 'tag.c' we can print N lines from the annotation of the tag using
the '-n<num>' option. Copy code from 'tag.c' to 'ref-filter' and
modify it to support appending of N lines from the annotation of tags
to the given strbuf.

Implement %(contents:lines=X) where X lines of the given object are
obtained.

While we're at it, remove unused ""contents:<suboption>"" atoms from
the `valid_atom` array.

Add documentation and test for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/patch_984.diff
https://github.com/git/git/commit/ce59208293f793ae822b5bfdf4040739f1c3ccb7,17 Sep 2015,"ref-filter: implement an `align` atom

Implement an `align` atom which left-, middle-, or right-aligns the
content between %(align:...) and %(end).

The ""align:"" is followed by `<width>` and `<position>` in any order
separated by a comma, where the `<position>` is either left, right or
middle, default being left and `<width>` is the total length of the
content with alignment. If the contents length is more than the width
then no alignment is performed.  e.g. to align a refname atom to the
middle with a total width of 40 we can do:
--format=""%(align:middle,40)%(refname)%(end)"".

We introduce an `at_end` function for each element of the stack which
is to be called when the `end` atom is encountered. Using this we
implement end_align_handler() for the `align` atom, this aligns the
final strbuf by calling `strbuf_utf8_align()` from utf8.c.

Ensure that quote formatting is performed on the whole of
%(align:...)...%(end) rather than individual atoms inside. We skip
quote formatting for individual atoms when the current stack element
is handling an %(align:...) atom and perform quote formatting at the
end when we encounter the %(end) atom of the second element of then
stack.

Add documentation and tests for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",203,data/crawl/git/patch_985.diff
https://github.com/git/git/commit/40a7551d25efac7979ee1a675c05e67313205444,17 Sep 2015,"ref-filter: introduce match_atom_name()

Introduce match_atom_name() which helps in checking if a particular
atom is the atom we're looking for and if it has a value attached to
it or not.

Use it instead of starts_with() for checking the value of %(color:...)
atom. Write a test for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Thanks-to: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_986.diff
https://github.com/git/git/commit/574e96a2418cce16934f2b6e20a0af5ff5f85c92,17 Sep 2015,"ref-filter: introduce ref_formatting_state and ref_formatting_stack

Introduce ref_formatting_state which will hold the formatted output
strbuf instead of directly printing to stdout. This will help us in
creating modifier atoms which modify the format specified before
printing to stdout.

Implement a stack machinery for ref_formatting_state, this allows us
to push and pop elements onto the stack. Whenever we pop an element
from the stack, the strbuf from that element is appended to the strbuf
of the next element on the stack, this will allow us to support
nesting of modifier atoms.

Rename some functions to reflect the changes made:
print_value() -> append_atom()
emit()        -> append_literal()

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_987.diff
https://github.com/git/git/commit/95a4fb0eac20de024fed242a7c9227af86334202,16 Sep 2015,"blame: handle --first-parent

The revision.c options-parser will parse ""--first-parent""
for us, but the blame code does not actually respect it, as
we simply iterate over the whole list returned by
first_scapegoat(). We can fix this by returning a
truncated parent list.

Note that we could technically also do so by limiting the
return value of num_scapegoats(), but that is less robust.
We would rely on nobody ever looking at the ""next"" pointer
from the returned list.

Combining ""--reverse"" with ""--first-parent"" is more
complicated, and will probably involve cooperation from
revision.c. Since the desired semantics are not even clear,
let's punt on this for now, but explicitly disallow it to
avoid confusing users (this is not really a regression,
since it did something nonsensical before).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_988.diff
https://github.com/git/git/commit/f0bc85462332644ecd2386e0f4fdc9948b9f47dc,09 Sep 2015,Sync with 2.5.2,153,data/crawl/git/patch_989.diff
https://github.com/git/git/commit/ee8838d157761acf4cc38f2378277dc894c10eb0,08 Sep 2015,"submodule: rewrite `module_clone` shell function in C

This reimplements the helper function `module_clone` in shell
in C as `clone`. This functionality is needed for converting
`git submodule update` later on, which we want to add threading
to.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",210,data/crawl/git/patch_990.diff
https://github.com/git/git/commit/27ea6f85beff1173ec74349fa35c45951feee570,04 Sep 2015,"Git 2.5.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_991.diff
https://github.com/git/git/commit/3d3caf0b78106c390fc5daceb95ee968312765dd,04 Sep 2015,Sync with 2.4.9,87,data/crawl/git/patch_992.diff
https://github.com/git/git/commit/ef0e938a1a4b34bc0882e1c542c8e99c98737f7d,04 Sep 2015,Sync with 2.3.9,75,data/crawl/git/patch_993.diff
https://github.com/git/git/commit/8267cd11d677f1a5f8441ac2880f5e9d48dba60b,04 Sep 2015,Sync with 2.2.3,63,data/crawl/git/patch_994.diff
https://github.com/git/git/commit/f514ef9787f320287d7ba71f2965127b9d8b3832,04 Sep 2015,"verify_absent: allow filenames longer than PATH_MAX

When unpack-trees wants to know whether a path will
overwrite anything in the working tree, we use lstat() to
see if there is anything there. But if we are going to write
""foo/bar"", we can't just lstat(""foo/bar""); we need to look
for leading prefixes (e.g., ""foo""). So we use the lstat cache
to find the length of the leading prefix, and copy the
filename up to that length into a temporary buffer (since
the original name is const, we cannot just stick a NUL in
it).

The copy we make goes into a PATH_MAX-sized buffer, which
will overflow if the prefix is longer than PATH_MAX. How
this happens is a little tricky, since in theory PATH_MAX is
the biggest path we will have read from the filesystem. But
this can happen if:

  - the compiled-in PATH_MAX does not accurately reflect
    what the filesystem is capable of

  - the leading prefix is not _quite_ what is on disk; it
    contains the next element from the name we are checking.
    So if we want to write ""aaa/bbb/ccc/ddd"" and ""aaa/bbb""
    exists, the prefix of interest is ""aaa/bbb/ccc"". If
    ""aaa/bbb"" approaches PATH_MAX, then ""ccc"" can overflow
    it.

So this can be triggered, but it's hard to do. In
particular, you cannot just ""git clone"" a bogus repo. The
verify_absent checks happen before unpack-trees writes
anything to the filesystem, so there are never any leading
prefixes during the initial checkout, and the bug doesn't
trigger. And by definition, these files are larger than
PATH_MAX, so writing them will fail, and clone will
complain (though it may write a partial path, which will
cause a subsequent ""git checkout"" to hit the bug).

We can fix it by creating the temporary path on the heap.
The extra malloc overhead is not important, as we are
already making at least one stat() call (and probably more
for the prefix discovery).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_995.diff
https://github.com/git/git/commit/add00ba2de971e0c5ba00f1f02b73c5534079d2c,03 Sep 2015,"date: make ""local"" orthogonal to date format

Most of our ""--date"" modes are about the format of the date:
which items we show and in what order. But ""--date=local"" is
a bit of an oddball. It means ""show the date in the normal
format, but using the local timezone"". The timezone we use
is orthogonal to the actual format, and there is no reason
we could not have ""localized iso8601"", etc.

This patch adds a ""local"" boolean field to ""struct
date_mode"", and drops the DATE_LOCAL element from the
date_mode_type enum (it's now just DATE_NORMAL plus
local=1). The new feature is accessible to users by adding
""-local"" to any date mode (e.g., ""iso-local""), and we retain
""local"" as an alias for ""default-local"" for backwards
compatibility.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/patch_996.diff
https://github.com/git/git/commit/547ed71636dbfab2dc303ba8cabb29c2cab22f1e,03 Sep 2015,"fast-import: switch crash-report date to iso8601

When fast-import emits a crash report, it does so in the
user's local timezone. But because we omit the timezone
completely for DATE_LOCAL, a reader of the report does not
immediately know which time zone was used. Let's switch this
to ISO8601 instead, which includes the time zone.

This does mean we will show the time in UTC, but that's not
a big deal. A crash report like this will either be looked
at immediately (in which case nobody even looks at the
timestamp), or it will be passed along to a developer to
debug, in which case the original timezone is less likely to
be of interest.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_997.diff
https://github.com/git/git/commit/0ea306ef1701d6f42e74d3c33addfcd630248904,03 Sep 2015,"submodule: rewrite `module_name` shell function in C

This implements the helper `name` in C instead of shell,
yielding a nice performance boost.

Before this patch, I measured a time (best out of three):

  $ time ./t7400-submodule-basic.sh  >/dev/null
    real	0m11.066s
    user	0m3.348s
    sys	0m8.534s

With this patch applied I measured (also best out of three)

  $ time ./t7400-submodule-basic.sh  >/dev/null
    real	0m10.063s
    user	0m3.044s
    sys	0m7.487s

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_998.diff
https://github.com/git/git/commit/74703a1e4dfc5affcb8944e78b53f0817b492246,03 Sep 2015,"submodule: rewrite `module_list` shell function in C

Most of the submodule operations work on a set of submodules.
Calculating and using this set is usually done via:

       module_list ""$@"" | {
           while read mode sha1 stage sm_path
           do
                # the actual operation
           done
       }

Currently the function `module_list` is implemented in the
git-submodule.sh as a shell script wrapping a perl script.
The rewrite is in C, such that it is faster and can later be
easily adapted when other functions are rewritten in C.

git-submodule.sh, similar to the builtin commands, will navigate
to the top-most directory of the repository and keep the
subdirectory as a variable. As the helper is called from
within the git-submodule.sh script, we are already navigated
to the root level, but the path arguments are still relative
to the subdirectory we were in when calling git-submodule.sh.
That's why there is a `--prefix` option pointing to an alternative
path which to anchor relative path arguments.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",186,data/crawl/git/patch_999.diff
https://github.com/git/git/commit/ce113604672fed9b429b1c162b1005794fff6a17,31 Aug 2015,"log: diagnose empty HEAD more clearly

If you init or clone an empty repository, the initial
message from running ""git log"" is not very friendly:

  $ git init
  Initialized empty Git repository in /home/peff/foo/.git/
  $ git log
  fatal: bad default revision 'HEAD'

Let's detect this situation and write a more friendly
message:

  $ git log
  fatal: your current branch 'master' does not have any commits yet

We also detect the case that 'HEAD' points to a broken ref;
this should be even less common, but is easy to see. Note
that we do not diagnose all possible cases. We rely on
resolve_ref, which means we do not get information about
complex cases. E.g., ""--default master"" would use dwim_ref
to find ""refs/heads/master"", but we notice only that
""master"" does not exist. Similarly, a complex sha1
expression like ""--default HEAD^2"" will not resolve as a
ref.

But that's OK. We fall back to a generic error message in
those cases, and they are unlikely to be used anyway.
Catching an empty or broken ""HEAD"" improves the common case,
and the other cases are not regressed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1000.diff
https://github.com/git/git/commit/aae42e43c42911a3c260ae9fa8681e779c6d5943,28 Aug 2015,"lockfile: remove function ""hold_lock_file_for_append""

With 77b9b1d (add_to_alternates_file: don't add duplicate entries,
2015-08-10) the last caller of function ""hold_lock_file_for_append""
has been removed, so we can remove the function as well.

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_1001.diff
https://github.com/git/git/commit/99885bc0ef0013a8979ad8cefe56360e69791811,28 Aug 2015,"reflog: add missing single quote to error message

The error message can be seen by running
`git config gc.reflogexpire foo` and then `git reflog expire`.

Signed-off-by: Alex Henrie <alexhenrie24@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1002.diff
https://github.com/git/git/commit/8da8889a4bdff30c12b75e36d4b9de4788761ff0,25 Aug 2015,"Fifth batch for 2.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1003.diff
https://github.com/git/git/commit/2aea7a51a11598427d5b57e4bc042930d592547f,24 Aug 2015,"rev-list: make it obvious that we do not support notes

The rev-list command does not have the internal
infrastructure to display notes. Running:

  git rev-list --notes HEAD

will silently ignore the ""--notes"" option. Running:

  git rev-list --notes --grep=. HEAD

will crash on an assert. Running:

  git rev-list --format=%N HEAD

will place a literal ""%N"" in the output (it does not even
expand to an empty string).

Let's have rev-list tell the user that it cannot fill the
user's request, rather than silently producing wrong data.
Likewise, let's remove mention of the notes options from the
rev-list documentation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1004.diff
https://github.com/git/git/commit/9e9de18f1ad39901a8f0c67f0af70d66d427e326,24 Aug 2015,"config: silence warnings for command names with invalid keys

When we are running the git command ""foo"", we may have to
look up the config keys ""pager.foo"" and ""alias.foo"". These
config schemes are mis-designed, as the command names can be
anything, but the config syntax has some restrictions. For
example:

  $ git foo_bar
  error: invalid key: pager.foo_bar
  error: invalid key: alias.foo_bar
  git: 'foo_bar' is not a git command. See 'git --help'.

You cannot name an alias with an underscore. And if you have
an external command with one, you cannot configure its
pager.

In the long run, we may develop a different config scheme
for these features. But in the near term (and because we'll
need to support the existing scheme indefinitely), we should
at least squelch the error messages shown above.

These errors come from git_config_parse_key. Ideally we
would pass a ""quiet"" flag to the config machinery, but there
are many layers between the pager code and the key parsing.
Passing a flag through all of those would be an invasive
change.

Instead, let's provide a config function to report on
whether a key is syntactically valid, and have the pager and
alias code skip lookup for bogus keys. We can build this
easily around the existing git_config_parse_key, with two
minor modifications:

  1. We now handle a NULL store_key, to validate but not
     write out the normalized key.

  2. We accept a ""quiet"" flag to avoid writing to stderr.
     This doesn't need to be a full-blown public ""flags""
     field, because we can make the existing implementation
     a static helper function, keeping the mess contained
     inside config.c.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1005.diff
https://github.com/git/git/commit/68c757f2199911005918aba45aa8ae0fecc72074,19 Aug 2015,"push: add a config option push.gpgSign for default signed pushes

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_1006.diff
https://github.com/git/git/commit/30261094b1f7fdcba3b7a1f396e43891cd998149,19 Aug 2015,"push: support signing pushes iff the server supports it

Add a new flag --sign=true (or --sign=false), which means the same
thing as the original --signed (or --no-signed).  Give it a third
value --sign=if-asked to tell push and send-pack to send a push
certificate if and only if the server advertised a push cert nonce.

If not, warn the user that their push may not be as secure as they
thought.

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_1007.diff
https://github.com/git/git/commit/027771fcb153e0003bcb2d68e1838594a48b0161,19 Aug 2015,"submodule: allow erroneous values for the fetchRecurseSubmodules option

We should not die when reading the submodule config cache since the
user might not be able to get out of that situation when the
configuration is part of the history.

We should handle this condition later when the value is about to be
used.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_1008.diff
https://github.com/git/git/commit/851e18c3859ad0f9f7e91fdb4d6cce5a8272420b,19 Aug 2015,"submodule: use new config API for worktree configurations

We remove the extracted functions and directly parse into and read out
of the cache. This allows us to have one unified way of accessing
submodule configuration values specific to single submodules. Regardless
whether we need to access a configuration from history or from the
worktree.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",242,data/crawl/git/patch_1009.diff
https://github.com/git/git/commit/959b5455d07c7724eea9d323ca8ce6bb6ddde40e,19 Aug 2015,"submodule: implement a config API for lookup of .gitmodules values

In a superproject some commands need to interact with submodules. They
need to query values from the .gitmodules file either from the worktree
of from certain revisions. At the moment this is quite hard since a
caller would need to read the .gitmodules file from the history and then
parse the values. We want to provide an API for this so we have one
place to get values from .gitmodules from any revision (including the
worktree).

The API is realized as a cache which allows us to lazily read
.gitmodules configurations by commit into a runtime cache which can then
be used to easily lookup values from it. Currently only the values for
path or name are stored but it can be extended for any value needed.

It is expected that .gitmodules files do not change often between
commits. Thats why we lookup the .gitmodules sha1 from a commit and then
either lookup an already parsed configuration or parse and cache an
unknown one for each sha1. The cache is lazily build on demand for each
requested commit.

This cache can be used for all purposes which need knowledge about
submodule configurations. Example use cases are:

 * Recursive submodule checkout needs to lookup a submodule name from
   its path when a submodule first appears. This needs be done before
   this configuration exists in the worktree.

 * The implementation of submodule support for 'git archive' needs to
   lookup the submodule name to generate the archive when given a
   revision that is not checked out.

 * 'git fetch' when given the --recurse-submodules=on-demand option (or
   configuration) needs to lookup submodule names by path from the
   database rather than reading from the worktree. For new submodule it
   needs to lookup the name from its path to allow cloning new
   submodules into the .git folder so they can be checked out without
   any network interaction when the user does a checkout of that
   revision.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",671,data/crawl/git/patch_1010.diff
https://github.com/git/git/commit/3ecc7040eff29fea0051df9faf21b0a73ee6d911,19 Aug 2015,"am --skip/--abort: merge HEAD/ORIG_HEAD tree into index

After running ""git am --abort"", and then running ""git reset --hard"",
files that were not modified would still be re-checked out.

This is because clean_index() in builtin/am.c mistakenly called the
read_tree() function, which overwrites all entries in the index,
including the stat info.

""git am --skip"" did not seem to have this issue because am_skip() called
am_run(), which called refresh_cache() to update the stat info. However,
there's still a performance penalty as the lack of stat info meant that
refresh_cache() would have to scan all files for changes.

Fix this by using unpack_trees() instead to merge the tree into the
index, so that the stat info from the index is kept.

Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1011.diff
https://github.com/git/git/commit/4f655e22b76fed49b0c32bcdcd899934215b9a6d,17 Aug 2015,"notes: teach git-notes about notes.<name>.mergeStrategy option

Teach notes about a new ""notes.<name>.mergeStrategy"" option for
configuring the notes merge strategy when merging into
refs/notes/<name>. This option allows for the selection of merge
strategy for particular notes refs, rather than all notes ref merges, as
user may not want cat_sort_uniq for all refs, but only some. Note that
the <name> is the local reference we are merging into, not the remote
ref we merged from. The assumption is that users will mostly want to
configure separate local ref merge strategies rather than strategies
depending on which remote ref they merge from.

notes.<name>.mergeStrategy overrides the general behavior as it is more
specific.

Signed-off-by: Jacob Keller <jacob.keller@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_1012.diff
https://github.com/git/git/commit/d2d68d9975da4a15dfca0e6e59001948e5bf57f9,17 Aug 2015,"notes: add notes.mergeStrategy option to select default strategy

Teach git-notes about ""notes.mergeStrategy"" to select a general strategy
for all notes merges. This enables a user to always get expected merge
strategy such as ""cat_sort_uniq"" without having to pass the ""-s"" option
manually.

Signed-off-by: Jacob Keller <jacob.keller@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_1013.diff
https://github.com/git/git/commit/01861cb7a27b948bc0218877311f531f25386691,17 Aug 2015,"http: add support for specifying the SSL version

Teach git about a new option, ""http.sslVersion"", which permits one
to specify the SSL version to use when negotiating SSL connections.
The setting can be overridden by the GIT_SSL_VERSION environment
variable.

Signed-off-by: Elia Pinto <gitter.spiros@gmail.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_1014.diff
https://github.com/git/git/commit/2c3aed1381f22494bc06fd66dec8292a296db10f,11 Aug 2015,"pseudoref: check return values from read_ref()

These codepaths attempt to compare the ""expected"" current value with
the actual current value, but did not check if we successfully read
the current value before comparison.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1015.diff
https://github.com/git/git/commit/f4c3edc0b156362a92bf9de4f0ec794e90a757fc,11 Aug 2015,"vreportf: avoid intermediate buffer

When we call ""die(fmt, args...)"", we end up in vreportf with
two pieces of information:

  1. The prefix ""fatal: ""

  2. The original fmt and va_list of args.

We format item (2) into a temporary buffer, and then fprintf
the prefix and the temporary buffer, along with a newline.
This has the unfortunate side effect of truncating any error
messages that are longer than 4096 bytes.

Instead, let's use separate calls for the prefix and
newline, letting us hand the item (2) directly to vfprintf.
This is essentially undoing d048a96 (print
warning/error/fatal messages in one shot, 2007-11-09), which
tried to have the whole output end up in a single `write`
call.

But we can address this instead by explicitly requesting
line-buffering for the output handle, and by making sure
that the buffer is empty before we start (so that outputting
the prefix does not cause a flush due to hitting the buffer
limit).

We may still break the output into two writes if the content
is larger than our buffer, but there's not much we can do
there; depending on the stdio implementation, that might
have happened even with a single fprintf call.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1016.diff
https://github.com/git/git/commit/3b331e92671469614662830402103848a8004b97,11 Aug 2015,"vreportf: report to arbitrary filehandles

The vreportf function always goes to stderr, but run-command
wants child errors to go to the parent's original stderr. To
solve this, commit a5487dd duplicates the stderr fd and
installs die and error handlers to direct the output
appropriately (which later turned into the vwritef
function). This has two downsides, though:

  - we make multiple calls to write(), which contradicts the
    ""write at once"" logic from d048a96 (print
    warning/error/fatal messages in one shot, 2007-11-09).

  - the custom handlers basically duplicate the normal
    handlers.  They're only a few lines of code, but we
    should not have to repeat the magic ""exit(128)"", for
    example.

We can solve the first by using fdopen() on the duplicated
descriptor. We can't pass this to vreportf, but we could
introduce a new vreportf_to to handle it.

However, to fix the second problem, we instead introduce a
new ""set_error_handle"" function, which lets the normal
vreportf calls output to a handle besides stderr. Thus we
can get rid of our custom handlers entirely, and just ask
the regular handlers to output to our new descriptor.

And as vwritef has no more callers, it can just go away.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1017.diff
https://github.com/git/git/commit/b02e8595e263e284e45a6262b92ef158b6966478,11 Aug 2015,"notes: handle multiple worktrees

Before creating NOTES_MERGE_REF, check NOTES_MERGE_REF using
find_shared_symref and die if we find one.  This prevents simultaneous
merges to the same notes branch from different worktrees.

Signed-off-by: David Turner <dturner@twopensource.com>
Reviewed-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1018.diff
https://github.com/git/git/commit/41af65651d4333cd19ab4af3509fa2d08f3816ed,11 Aug 2015,"worktrees: add find_shared_symref

Add a new function, find_shared_symref, which contains the heart of
die_if_checked_out, but works for any symref, not just HEAD.  Refactor
die_if_checked_out to use the same infrastructure as
find_shared_symref.

Soon, we will use find_shared_symref to protect notes merges in
worktrees.

Signed-off-by: David Turner <dturner@twopensource.com>
Reviewed-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1019.diff
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/patch_1020.diff
https://github.com/git/git/commit/77b9b1d13ac9e6b78ba676d4edb221b7d2273c62,10 Aug 2015,"add_to_alternates_file: don't add duplicate entries

The add_to_alternates_file function blindly uses
hold_lock_file_for_append to copy the existing contents, and
then adds the new line to it. This has two minor problems:

  1. We might add duplicate entries, which are ugly and
     inefficient.

  2. We do not check that the file ends with a newline, in
     which case we would bogusly append to the final line.
     This is quite unlikely in practice, though, as we call
     this function only from git-clone, so presumably we are
     the only writers of the file (and we always add a
     newline).

Instead of using hold_lock_file_for_append, let's copy the
file line by line, which ensures all records are properly
terminated. If we see an extra line, we can simply abort the
update (there is no point in even copying the rest, as we
know that it would be identical to the original).

As a bonus, we also get rid of some calls to the
static-buffer mkpath and git_path functions.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_1021.diff
https://github.com/git/git/commit/6e122b449b41d83ccfa459819688f7092aa1da19,10 Aug 2015,"setup_temporary_shallow(): use tempfile module

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1022.diff
https://github.com/git/git/commit/354ab1120665f691c17b21fdb04c4362c8088dfa,10 Aug 2015,"tempfile: add several functions for creating temporary files

Add several functions for creating temporary files with
automatically-generated names, analogous to mkstemps(), but also
arranging for the files to be deleted on program exit.

The functions are named according to a pattern depending how they
operate. They will be used to replace many places in the code where
temporary files are created and cleaned up ad-hoc.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/patch_1023.diff
https://github.com/git/git/commit/7eba6ce5c79447579689218d8dab59a8434fd7c7,10 Aug 2015,"prepare_tempfile_object(): new function, extracted from create_tempfile()

This makes the next step easier.

The old code used to use ""path"" to set the initial length of
tempfile->filename. This was not helpful because path was usually
relative whereas the value stored to filename will be absolute. So
just initialize the length to 0.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1024.diff
https://github.com/git/git/commit/1a9d15db25487bb3fc009a88375cc206a60e0e3b,10 Aug 2015,"tempfile: a new module for handling temporary files

A lot of work went into defining the state diagram for lockfiles and
ensuring correct, race-resistant cleanup in all circumstances.

Most of that infrastructure can be applied directly to *any* temporary
file. So extract a new ""tempfile"" module from the ""lockfile"" module.
Reimplement lockfile on top of tempfile.

Subsequent commits will add more users of the new module.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",740,data/crawl/git/patch_1025.diff
https://github.com/git/git/commit/9c77381d6a495e102b811df954d0fa14e62250ab,10 Aug 2015,"commit_lock_file(): use get_locked_file_path()

First beef up the sanity checking in get_locked_file_path() to match
that in commit_lock_file(). Then rewrite commit_lock_file() to use
get_locked_file_path() for its pathname computation.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1026.diff
https://github.com/git/git/commit/b4fb09e4da53bfc6c720337142af5db3204736d5,10 Aug 2015,"lockfile: add accessor get_lock_file_path()

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1027.diff
https://github.com/git/git/commit/c99a4c2db3053e4fb6a43870f5c747f858b0f58f,10 Aug 2015,"lockfile: add accessors get_lock_file_fd() and get_lock_file_fp()

We are about to move those members, so change client code to read them
through accessor functions.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1028.diff
https://github.com/git/git/commit/e54c347c1c444c0f37b64b8735c50a66ee0527e9,10 Aug 2015,"create_bundle(): duplicate file descriptor to avoid closing it twice

write_pack_data() passes bundle_fd to start_command() to be used as
the stdout of pack-objects. But start_command() closes its stdout if
it is > 1. This is a problem if bundle_fd is the fd of a lock_file,
because commit_lock_file() will also try to close the fd.

So the old code suppressed commit_lock_file()'s usual behavior of
closing the file descriptor by setting the lock_file object's fd field
to -1.

But this is not really kosher. Code here shouldn't be mutating fields
within the lock_file object.

Instead, duplicate the file descriptor before passing it to
write_pack_data(). Then that function can close its copy without
closing the copy held in the lock_file object.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1029.diff
https://github.com/git/git/commit/2db69de81deea4682579d0b9e6da40b4e9558c05,10 Aug 2015,"lockfile: move documentation to lockfile.h and lockfile.c

Rearrange/rewrite it somewhat to fit its new environment.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",563,data/crawl/git/patch_1030.diff
https://github.com/git/git/commit/adef9561f0c8cf2c974d78adac0ae236e159e49f,10 Aug 2015,"clone: abort if no dir name could be guessed

Due to various components of the URI being stripped off it may
happen that we fail to guess a directory name. We currently error
out with a message that it is impossible to create the working
tree '' in such cases. Instead, error out early with a sensible
error message hinting that a directory name should be specified
manually on the command line.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1031.diff
https://github.com/git/git/commit/578625fa918922713a2ecce2b06611e4566778f5,10 Aug 2015,"config: add '--name-only' option to list only variable names

'git config' can only show values or name-value pairs, so if a shell
script needs the names of set config variables it has to run 'git config
--list' or '--get-regexp' and parse the output to separate config
variable names from their values.  However, such a parsing can't cope
with multi-line values.  Though 'git config' can produce null-terminated
output for newline-safe parsing, that's of no use in such a case, becase
shells can't cope with null characters.

Even our own bash completion script suffers from these issues.

Help the completion script, and shell scripts in general, by introducing
the '--name-only' option to modify the output of '--list' and
'--get-regexp' to list only the names of config variables, so they don't
have to perform error-prone post processing to separate variable names
from their values anymore.

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1032.diff
https://github.com/git/git/commit/2a01ef8ca31ab1cb889485ba8d9a20c7ba7ab54f,07 Aug 2015,"test-lib: turn off ""-x"" tracing during chain-lint check

Now that GIT_TEST_CHAIN_LINT is on by default, running:

    ./t0000-basic.sh -x --verbose-only=1

starts with:

    expecting success:
            find .git/objects -type f -print >should-be-empty &&
            test_line_count = 0 should-be-empty

    + exit 117
    error: last command exited with $?=117
    + find .git/objects -type f -print
    + test_line_count = 0 should-be-empty
    + test 3 != 3
    + wc -l
    + test 0 = 0
    ok 1 - .git/objects should be empty after git init in an empty repo

This is confusing, as the ""exit 117"" line and the error line
(which is printed in red, no less!) are not part of the test
at all, but are rather in the separate chain-lint test_eval.
Let's unset the ""trace"" variable when eval-ing the chain
lint check, which avoids this.

Note that we cannot just do a one-shot variable like:

    trace= test_eval ...

as the behavior of one-shot variables for function calls
is not portable.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1033.diff
https://github.com/git/git/commit/783d7e865ec8f6190f8d3abe3ab72a9410d611f1,05 Aug 2015,"builtin-am: remove redirection to git-am.sh

At the beginning of the rewrite of git-am.sh to C, in order to not break
existing test scripts that depended on a functional git-am, a
redirection to git-am.sh was introduced that would activate if the
environment variable _GIT_USE_BUILTIN_AM was not defined.

Now that all of git-am.sh's functionality has been re-implemented in
builtin/am.c, remove this redirection, and retire git-am.sh into
contrib/examples/.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1034.diff
https://github.com/git/git/commit/c2676cde9f2c2a67b3860f7fc69e4dc8597e505f,05 Aug 2015,"builtin-am: implement legacy -b/--binary option

The -b/--binary option was initially implemented in 087b674 (git-am:
--binary; document --resume and --binary., 2005-11-16). The option will
pass the --binary flag to git-apply to allow it to apply binary patches.

However, in 2b6eef9 (Make apply --binary a no-op., 2006-09-06), --binary
was been made a no-op in git-apply. Following that, since cb3a160
(git-am: ignore --binary option, 2008-08-09), the --binary option in
git-am is ignored as well.

In 6c15a1c (am: officially deprecate -b/--binary option, 2012-03-13),
the --binary option was tweaked to its present behavior: when set, the
message:

	The -b/--binary option has been a no-op for long time, and it
	will be removed. Please do not use it anymore.

will be printed.

Re-implement this in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1035.diff
https://github.com/git/git/commit/7ff26832535a83bd8d75beefbf822d965e066961,05 Aug 2015,"builtin-am: implement -i/--interactive

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07),
git-am.sh supported the --interactive mode. After parsing the patch mail
and extracting the patch, commit message and authorship info, an
interactive session will begin that allows the user to choose between:

* applying the patch

* applying the patch and all subsequent patches (by disabling
  interactive mode in subsequent patches)

* skipping the patch

* editing the commit message

Since f89ad67 (Add [v]iew patch in git-am interactive., 2005-10-25),
git-am.sh --interactive also supported viewing the patch to be applied.

When --resolved-ing in --interactive mode, we need to take care to
update the patch with the contents of the index, such that the correct
patch will be displayed when the patch is viewed in interactive mode.

Re-implement the above in builtin/am.c

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_1036.diff
https://github.com/git/git/commit/94cd175cff196d2571bc2e17ad8e9f47ef4b3911,05 Aug 2015,"builtin-am: support and auto-detect mercurial patches

Since 0cfd112 (am: preliminary support for hg patches, 2011-08-29),
git-am.sh could convert mercurial patches to an RFC2822 mail patch
suitable for parsing with git-mailinfo, and queue them in the state
directory for application.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh was able to auto-detect mercurial
patches by checking if the file begins with the line:

	# HG changeset patch

Re-implement the above in builtin/am.c.

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_1037.diff
https://github.com/git/git/commit/336108c1563c23e1af5b7b7e6fbe52f511c21748,05 Aug 2015,"builtin-am: support and auto-detect StGit series files

Since c574e68 (git-am foreign patch support: StGIT support, 2009-05-27),
git-am.sh is able to read a single StGit series file and, for each StGit
patch listed in the file, convert the StGit patch into a RFC2822 mail
patch suitable for parsing with git-mailinfo, and queue them in the
state directory for applying.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to auto-detect StGit series
files by checking to see if the file starts with the string:

	# This series applies on GIT commit

Re-implement the above in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_1038.diff
https://github.com/git/git/commit/5ae41c79b81a5c73939749bee19c1d1075cc0cdf,05 Aug 2015,"builtin-am: support and auto-detect StGit patches

Since c574e68 (git-am foreign patch support: StGIT support, 2009-05-27),
git-am.sh supported converting StGit patches into RFC2822 mail patches
that can be parsed with git-mailinfo.

Implement this by introducing two functions in builtin/am.c:
stgit_patch_to_mail() and split_mail_conv().

stgit_patch_to_mail() is a callback function for split_mail_conv(), and
contains the logic for converting an StGit patch into an RFC2822 mail
patch.

split_mail_conv() implements the logic to go through each file in the
`paths` list, reading from stdin where specified, and calls the callback
function to write the converted patch to the corresponding output file
in the state directory. This interface should be generic enough to
support other foreign patch formats in the future.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to auto-detect StGit patches.
Re-implement this in builtin/am.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_1039.diff
https://github.com/git/git/commit/b8803d8f8c987b9867385a033aab71a7cb967553,05 Aug 2015,"builtin-am: invoke applypatch-msg hook

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07),
git-am.sh will invoke the applypatch-msg hooks just after extracting the
patch message. If the applypatch-msg hook exits with a non-zero status,
git-am.sh abort before even applying the patch to the index.

Re-implement this in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1040.diff
https://github.com/git/git/commit/88b291fe9db645366853fc759d497342c130fd35,05 Aug 2015,"builtin-am: support automatic notes copying

Since eb2151b (rebase: support automatic notes copying, 2010-03-12),
git-am.sh supported automatic notes copying in --rebasing mode by
invoking ""git notes copy"" once it has finished applying all the patches.

Re-implement this feature in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_1041.diff
https://github.com/git/git/commit/13b97ea5f0bec8f529e8b819a24502023bfbacba,05 Aug 2015,"builtin-am: invoke post-rewrite hook

Since 96e1948 (rebase: invoke post-rewrite hook, 2010-03-12), git-am.sh
will invoke the post-rewrite hook after it successfully finishes
applying all the queued patches.

To do this, when parsing a mail to extract its patch and metadata, in
--rebasing mode git-am.sh will also store the original commit ID in the
$state_dir/original-commit file. Once it applies and commits the patch,
the original commit ID, and the new commit ID, will be appended to the
$state_dir/rewritten file.

Once all of the queued mail have been processed, git-am.sh will then
invoke the post-rewrite hook with the contents of the
$state_dir/rewritten file.

Re-implement this in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1042.diff
https://github.com/git/git/commit/257e8cecc13b323c7b5c3fb249955b3ee8f4af3d,05 Aug 2015,"builtin-am: pass git-apply's options to git-apply

git-am.sh recognizes some of git-apply's options, and would pass them to
git-apply:

* --whitespace, since 8c31cb8 (git-am: --whitespace=x option.,
  2006-02-28)

* -C, since 67dad68 (add -C[NUM] to git-am, 2007-02-08)

* -p, since 2092a1f (Teach git-am to pass -p option down to git-apply,
  2007-02-11)

* --directory, since b47dfe9 (git-am: add --directory=<dir> option,
  2009-01-11)

* --reject, since b80da42 (git-am: implement --reject option passed to
  git-apply, 2009-01-23)

* --ignore-space-change, --ignore-whitespace, since 86c91f9 (git apply:
  option to ignore whitespace differences, 2009-08-04)

* --exclude, since 77e9e49 (am: pass exclude down to apply, 2011-08-03)

* --include, since 58725ef (am: support --include option, 2012-03-28)

* --reject, since b80da42 (git-am: implement --reject option passed to
  git-apply, 2009-01-23)

Re-implement support for these options in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_1043.diff
https://github.com/git/git/commit/9b646617b8b4894490a549e4db95c1303f40bd25,05 Aug 2015,"builtin-am: implement --[no-]scissors

Since 017678b (am/mailinfo: Disable scissors processing by default,
2009-08-26), git-am supported the --[no-]scissors option, passing it to
git-mailinfo.

Re-implement support for this option in builtin/am.c.

Since the default setting of --scissors in git-mailinfo can be
configured with mailinfo.scissors (and perhaps through other settings in
the future), to be safe we make an explicit distinction between
SCISSORS_UNSET, SCISSORS_TRUE and SCISSORS_FALSE.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_1044.diff
https://github.com/git/git/commit/4f1b69617577309d361a006fc77d71a5cff7ec06,05 Aug 2015,"builtin-am: implement -k/--keep, --keep-non-patch

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07),
git-am.sh supported the -k/--keep option to pass the -k option to
git-mailsplit.

Since f7e5ea1 (am: learn passing -b to mailinfo, 2012-01-16), git-am.sh
supported the --keep-non-patch option to pass the -b option to
git-mailsplit.

Re-implement these two options in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_1045.diff
https://github.com/git/git/commit/6d42ac2941cac80b44e318d867bae7979c1af6fe,05 Aug 2015,"builtin-am: handle stray state directory

Should git-am terminate unexpectedly between the point where the state
directory is created, but the ""next"" and ""last"" files are not written
yet, a stray state directory will be left behind.

As such, since b141f3c (am: handle stray $dotest directory, 2013-06-15),
git-am.sh explicitly recognizes such a stray directory, and allows the
user to remove it with am --abort.

Re-implement this feature in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1046.diff
https://github.com/git/git/commit/df2760a576a8d26e26a6a11aa497e347c7402fd3,05 Aug 2015,"builtin-am: bypass git-mailinfo when --rebasing

Since 5e835ca (rebase: do not munge commit log message, 2008-04-16),
git am --rebasing no longer gets the commit log message from the patch,
but reads it directly from the commit identified by the ""From "" header
line.

Since 43c2325 (am: use get_author_ident_from_commit instead of mailinfo
when rebasing, 2010-06-16), git am --rebasing also gets the author name,
email and date directly from the commit.

Since 0fbb95d (am: don't call mailinfo if $rebasing, 2012-06-26), git am
--rebasing does not use git-mailinfo to get the patch body, but rather
generates it directly from the commit itself.

The above 3 commits introduced a separate parse_mail() code path in
git-am.sh's --rebasing mode that bypasses git-mailinfo. Re-implement
this code path in builtin/am.c as parse_mail_rebase().

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",134,data/crawl/git/patch_1047.diff
https://github.com/git/git/commit/84f3de28baf6fc6a91b95fad9a4c5468dec3ea8e,05 Aug 2015,"builtin-am: implement --3way

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07),
git-am.sh supported the --3way option, and if set, would attempt to do a
3-way merge if the initial patch application fails.

Since 5d86861 (am -3: list the paths that needed 3-way fallback,
2012-03-28), in a 3-way merge git-am.sh would list the paths that needed
3-way fallback, so that the user can review them more carefully to spot
mismerges.

Re-implement the above in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/patch_1048.diff
https://github.com/git/git/commit/2d83109aabbb8c660c27cbf03ec67cb88822639f,05 Aug 2015,"builtin-am: exit with user friendly message on failure

Since ced9456 (Give the user a hint for how to continue in the case that
git-am fails because it requires user intervention, 2006-05-02), git-am
prints additional information on how the user can re-invoke git-am to
resume patch application after resolving the failure. Re-implement this
through the die_user_resolve() function.

Since cc12005 (Make git rebase interactive help match documentation.,
2006-05-13), git-am supports the --resolvemsg option which is used by
git-rebase to override the message printed out when git-am fails.
Re-implement this option.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_1049.diff
https://github.com/git/git/commit/5d28cf78196acc454b4430b1efe3b5f9e55ae2e6,05 Aug 2015,"builtin-am: implement -q/--quiet

Since 0e987a1 (am, rebase: teach quiet option, 2009-06-16), git-am
supported the --quiet option, and when told to be quiet, would only
speak on failure. Re-implement this by introducing the say() function,
which works like fprintf_ln(), but would only write to the stream when
state->quiet is false.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1050.diff
https://github.com/git/git/commit/8d185503186ea0bc906defb9ecb1e9fb0e06efae,05 Aug 2015,"builtin-am: reject patches when there's a session in progress

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07), git-am
would error out if the user gave it mbox(s) on the command-line, but
there was a session in progress.

Since c95b138 (Fix git-am safety checks, 2006-09-15), git-am would
detect if the user attempted to feed it a mbox via stdin, by checking if
stdin is not a tty and there is no resume command given.

Re-implement the above two safety checks.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1051.diff
https://github.com/git/git/commit/33388a71d23e6a296eb33879e418e857444f2d74,05 Aug 2015,"builtin-am: implement --abort

Since 3e5057a (git am --abort, 2008-07-16), git-am supported the --abort
option that will rewind HEAD back to the original commit. Re-implement
this through am_abort().

Since 7b3b7e3 (am --abort: keep unrelated commits since the last failure
and warn, 2010-12-21), to prevent commits made since the last failure
from being lost, git-am will not rewind HEAD back to the original
commit if HEAD moved since the last failure. Re-implement this through
safe_to_abort().

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_1052.diff
https://github.com/git/git/commit/9990080c9db0e4cb1dc0f981d85983edbf2a6f68,05 Aug 2015,"builtin-am: implement --skip

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07), git-am
supported resuming from a failed patch application by skipping the
current patch. Re-implement this feature by introducing am_skip().

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/patch_1053.diff
https://github.com/git/git/commit/240bfd2de9a7aec31240300ba1d7e89c59dbafe9,05 Aug 2015,"builtin-am: implement --resolved/--continue

Since 0c15cc9 (git-am: --resolved., 2005-11-16), git-am supported
resuming from a failed patch application. The user will manually apply
the patch, and the run git am --resolved which will then commit the
resulting index. Re-implement this feature by introducing am_resolve().

Since it makes no sense for the user to run am --resolved when there is
no session in progress, we error out in this case.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_1054.diff
https://github.com/git/git/commit/32a5fcbfe9e9436224278ec7eb137b0f2905928d,05 Aug 2015,"builtin-am: refuse to apply patches if index is dirty

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07), git-am
will refuse to apply patches if the index is dirty. Re-implement this
behavior in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_1055.diff
https://github.com/git/git/commit/c9e8d960b612d5962cd1e952916c2ab6f483e620,05 Aug 2015,"builtin-am: implement committing applied patch

Implement do_commit(), which commits the index which contains the
results of applying the patch, along with the extracted commit message
and authorship information.

Since 29b6754 (am: remove rebase-apply directory before gc, 2010-02-22),
git gc --auto is also invoked to pack the loose objects that are created
from making the commits.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1056.diff
https://github.com/git/git/commit/38a824fe050c4da3f2e0979a94062119080a77a0,05 Aug 2015,"builtin-am: apply patch with git-apply

Implement applying the patch to the index using git-apply.

If a file is unchanged but stat-dirty, git-apply may erroneously fail to
apply patches, thinking that they conflict with a dirty working tree.

As such, since 2a6f08a (am: refresh the index at start and --resolved,
2011-08-15), git-am will refresh the index before applying patches.
Re-implement this behavior.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_1057.diff
https://github.com/git/git/commit/3e20dcf367f551e5a0efab74e7bc2c07f0549a3d,05 Aug 2015,"builtin-am: extract patch and commit info with git-mailinfo

For the purpose of applying the patch and committing the results,
implement extracting the patch data, commit message and authorship from
an e-mail message using git-mailinfo.

git-mailinfo is run as a separate process, but ideally in the future,
we should be be able to access its functionality directly without
spawning a new process.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",317,data/crawl/git/patch_1058.diff
https://github.com/git/git/commit/c29807b27dc60e17eb1cd8bc50900af2a09ce66f,05 Aug 2015,"builtin-am: auto-detect mbox patches

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to autodetect mbox, stgit and
mercurial patches through heuristics.

Re-implement support for autodetecting mbox/maildir files in
builtin/am.c.

RFC 2822 requires that lines are terminated by ""\r\n"". To support this,
implement strbuf_getline_crlf(), which will remove both '\n' and ""\r\n""
from the end of the line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/patch_1059.diff
https://github.com/git/git/commit/11c2177f2c264513f8d3abe64666fa05bcd84a57,05 Aug 2015,"builtin-am: split out mbox/maildir patches with git-mailsplit

git-am.sh supports mbox, stgit and mercurial patches. Re-implement
support for splitting out mbox/maildirs using git-mailsplit, while also
implementing the framework required to support other patch formats in
the future.

Re-implement support for the --patch-format option (since a5a6755
(git-am foreign patch support: introduce patch_format, 2009-05-27)) to
allow the user to choose between the different patch formats.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",107,data/crawl/git/patch_1060.diff
https://github.com/git/git/commit/8c3bd9e288b3ce70d02d8a843219168a9589e917,05 Aug 2015,"builtin-am: implement patch queue mechanism

git-am applies a series of patches. If the process terminates
abnormally, we want to be able to resume applying the series of patches.
This requires the session state to be saved in a persistent location.

Implement the mechanism of a ""patch queue"", represented by 2 integers --
the index of the current patch we are applying and the index of the last
patch, as well as its lifecycle through the following functions:

* am_setup(), which will set up the state directory
  $GIT_DIR/rebase-apply. As such, even if the process exits abnormally,
  the last-known state will still persist.

* am_load(), which is called if there is an am session in
  progress, to load the last known state from the state directory so we
  can resume applying patches.

* am_run(), which will do the actual patch application. After applying a
  patch, it calls am_next() to increment the current patch index. The
  logic for applying and committing a patch is not implemented yet.

* am_destroy(), which is finally called when we successfully applied all
  the patches in the queue, to clean up by removing the state directory
  and its contents.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Stefan Beller <sbeller@google.com>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_1061.diff
https://github.com/git/git/commit/73c2779f421fe1eaead6f1c07a0e134a9c17d6db,05 Aug 2015,"builtin-am: implement skeletal builtin am

For the purpose of rewriting git-am.sh into a C builtin, implement a
skeletal builtin/am.c that redirects to $GIT_EXEC_PATH/git-am if the
environment variable _GIT_USE_BUILTIN_AM is not defined. Since in the
Makefile git-am.sh takes precedence over builtin/am.c,
$GIT_EXEC_PATH/git-am will contain the shell script git-am.sh, and thus
this allows us to fall back on the functional git-am.sh when running the
test suite for tests that depend on a working git-am implementation.

Since git-am.sh cannot handle any environment modifications by
setup_git_directory(), ""am"" is declared with no setup flags in git.c. On
the other hand, to re-implement git-am.sh in builtin/am.c, we need to
run all the git dir and work tree setup logic that git.c typically does
for us. As such, we work around this temporarily by copying the logic in
git.c's run_builtin(), which is roughly:

	prefix = setup_git_directory();
	trace_repo_setup(prefix);
	setup_work_tree();

This redirection should be removed when all the features of git-am.sh
have been re-implemented in builtin/am.c.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1062.diff
https://github.com/git/git/commit/260eec292736388831958637eccdcf1a8f00e14d,05 Aug 2015,"wrapper: implement xfopen()

A common usage pattern of fopen() is to check if it succeeded, and die()
if it failed:

	FILE *fp = fopen(path, ""w"");
	if (!fp)
		die_errno(_(""could not open '%s' for writing""), path);

Implement a wrapper function xfopen() for the above, so that we can save
a few lines of code and make the die() messages consistent.

Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1063.diff
https://github.com/git/git/commit/3ff53df7b4cbc331d302181d2d6644f4cb860a52,05 Aug 2015,"wrapper: implement xopen()

A common usage pattern of open() is to check if it was successful, and
die() if it was not:

	int fd = open(path, O_WRONLY | O_CREAT, 0777);
	if (fd < 0)
		die_errno(_(""Could not open '%s' for writing.""), path);

Implement a wrapper function xopen() that does the above so that we can
save a few lines of code, and make the die() messages consistent.

Helped-by: Torsten Bögershausen <tboegi@web.de>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1064.diff
https://github.com/git/git/commit/ae25fd39bc6fdc3457976c8d3398aa0fda352f97,03 Aug 2015,"transport-helper: die on errors reading refs.

We check the return value of read_ref in 19 out of 21 cases.
This adds checks to the missing cases.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1065.diff
https://github.com/git/git/commit/21e5cfd8b3d35a702b19be6964b8809045dd6278,03 Aug 2015,"bisect: add the terms old/new

When not looking for a regression during a bisect but for a fix or a
change in another given property, it can be confusing to use 'good'
and 'bad'.

This patch introduce `git bisect new` and `git bisect old` as an
alternative to 'bad' and good': the commits which have a certain
property must be marked as `new` and the ones which do not as `old`.

The output will be the first commit after the change in the property.
During a new/old bisect session you cannot use bad/good commands and
vice-versa.

Some commands are still not available for old/new:
     * git rev-list --bisect does not treat the revs/bisect/new and
       revs/bisect/old-SHA1 files.

Old discussions:
	- http://thread.gmane.org/gmane.comp.version-control.git/86063
		introduced bisect fix unfixed to find fix.
	- http://thread.gmane.org/gmane.comp.version-control.git/182398
		discussion around bisect yes/no or old/new.
	- http://thread.gmane.org/gmane.comp.version-control.git/199758
		last discussion and reviews
New discussions:
	- http://thread.gmane.org/gmane.comp.version-control.git/271320
		( v2 1/7-4/7 )
	- http://comments.gmane.org/gmane.comp.version-control.git/271343
		( v2 5/7-7/7 )

Signed-off-by: Antoine Delaite <antoine.delaite@ensimag.grenoble-inp.fr>
Signed-off-by: Louis Stuber <stuberl@ensimag.grenoble-inp.fr>
Signed-off-by: Valentin Duperray <Valentin.Duperray@ensimag.imag.fr>
Signed-off-by: Franck Jonas <Franck.Jonas@ensimag.imag.fr>
Signed-off-by: Lucien Kong <Lucien.Kong@ensimag.imag.fr>
Signed-off-by: Thomas Nguy <Thomas.Nguy@ensimag.imag.fr>
Signed-off-by: Huynh Khoi Nguyen Nguyen <Huynh-Khoi-Nguyen.Nguyen@ensimag.imag.fr>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_1066.diff
https://github.com/git/git/commit/cb46d630baf780412f8ca0592531880b592f0922,03 Aug 2015,"bisect: simplify the addition of new bisect terms

We create a file BISECT_TERMS in the repository .git to be read during a
bisection. There's no user-interface yet, but ""git bisect"" works if terms
other than old/new or bad/good are set in .git/BISECT_TERMS. The
fonctions to be changed if we add new terms are quite few.

In git-bisect.sh:
	check_and_set_terms
	bisect_voc

Co-authored-by: Louis Stuber <stuberl@ensimag.grenoble-inp.fr>
Tweaked-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Antoine Delaite <antoine.delaite@ensimag.grenoble-inp.fr>
Signed-off-by: Louis Stuber <stuberl@ensimag.grenoble-inp.fr>
Signed-off-by: Valentin Duperray <Valentin.Duperray@ensimag.imag.fr>
Signed-off-by: Franck Jonas <Franck.Jonas@ensimag.imag.fr>
Signed-off-by: Lucien Kong <Lucien.Kong@ensimag.imag.fr>
Signed-off-by: Thomas Nguy <Thomas.Nguy@ensimag.imag.fr>
Signed-off-by: Huynh Khoi Nguyen Nguyen <Huynh-Khoi-Nguyen.Nguyen@ensimag.imag.fr>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_1067.diff
https://github.com/git/git/commit/35257aa01203bae74f9fb856fb02c10c4b3836e6,03 Aug 2015,"ref-filter: implement '--merged' and '--no-merged' options

In 'branch -l' we have '--merged' option which only lists refs (branches)
merged into the named commit and '--no-merged' option which only lists
refs (branches) not merged into the named commit. Implement these two
options in ref-filter.{c,h} so that other commands can benefit from this.

Based-on-patch-by: Jeff King <peff@peff.net>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_1068.diff
https://github.com/git/git/commit/5afcb90560586765bf21fb09959a8b4497804639,03 Aug 2015,"ref-filter: add parse_opt_merge_filter()

Add 'parse_opt_merge_filter()' to parse '--merged' and '--no-merged'
options and write macros for the same.

This is copied from 'builtin/branch.c' which will eventually be removed
when we port 'branch.c' to use ref-filter APIs.

Based-on-patch-by: Jeff King <peff@peff.net>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1069.diff
https://github.com/git/git/commit/68411046b5067de9c378d1f58313f2fae288286c,03 Aug 2015,"ref-filter: implement '--points-at' option

In 'tag -l' we have '--points-at' option which lets users
list only tags of a given object. Implement this option in
'ref-filter.{c,h}' so that other commands can benefit from this.

This is duplicated from tag.c, we will eventually remove that
when we port tag.c to use ref-filter APIs.

Based-on-patch-by: Jeff King <peff@peff.net>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1070.diff
https://github.com/git/git/commit/b2172fdf702426cb4eba093b5504d0a0e9e59746,03 Aug 2015,"tag: libify parse_opt_points_at()

Rename 'parse_opt_points_at()' to 'parse_opt_object_name()' and
move it from 'tag.c' to 'parse-options'. This now acts as a common
parse_opt function which accepts an objectname and stores it into
a sha1_array.

Based-on-patch-by: Jeff King <peff@peff.net>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1071.diff
https://github.com/git/git/commit/14de7fba3462aa8051bc63260fc6407aa51b8f68,03 Aug 2015,"for-each-ref: introduce filter_refs()

Introduce filter_refs() which will act as an API for filtering
a set of refs. Based on the type of refs the user has requested,
we iterate through those refs and apply filters as per the
given ref_filter structure and finally store the filtered refs
in the ref_array structure.

Currently this will wrap around ref_filter_handler(). Hence,
ref_filter_handler is made file scope static.

As users of this API will no longer send a ref_filter_cbdata
structure directly, we make the elements of ref_filter_cbdata
pointers. We can now use the information given by the users
to obtain our own ref_filter_cbdata structure. Changes are made to
support the change in ref_filter_cbdata structure.

Make 'for-each-ref' use this API.

Helped-by: Junio C Hamano <gitster@pobox.com>
Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_1072.diff
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/patch_1073.diff
https://github.com/git/git/commit/d96a53996b6c02b96a9a2b4eed9eac4e9d661a38,31 Jul 2015,"sequencer: replace write_cherry_pick_head with update_ref

Now update_ref (via write_pseudoref) does almost exactly what
write_cherry_pick_head did, so we can remove write_cherry_pick_head
and just use update_ref.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1074.diff
https://github.com/git/git/commit/f3a977187edd82d6b20fd018e55e471f7cf13d6a,31 Jul 2015,"bisect: use update_ref

Instead of manually writing a pseudoref (in one case) and shelling out
to git update-ref (in another), use the update_ref function.  This
is much simpler.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1075.diff
https://github.com/git/git/commit/74ec19d4be76c52b872e6f95b39ecbfbe5d9100c,31 Jul 2015,"pseudorefs: create and use pseudoref update and delete functions

Pseudorefs should not be updated through the ref transaction
API, because alternate ref backends still need to store pseudorefs
in GIT_DIR (instead of wherever they store refs).  Instead,
change update_ref and delete_ref to call pseudoref-specific
functions.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_1076.diff
https://github.com/git/git/commit/d0ab058498cf3f1862de76b419abc0b67fabbd83,28 Jul 2015,"tests: remove some direct access to .git/logs

Alternate refs backends might store reflogs somewhere other than
.git/logs.  Change most test code that directly accesses .git/logs to
instead use git reflog commands.

There are still a few tests which need direct access to reflogs: to
check reflog permissions, to manually create reflogs from scratch, to
save/restore reflogs, to check the format of raw reflog data, and to
remove not just reflog contents, but the reflogs themselves. All cases
which don't need direct access have been modified.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_1077.diff
https://github.com/git/git/commit/15ed07d532db743a2a397a38bacc1f20e54b2c80,24 Jul 2015,"rerere: un-nest merge() further

By consistently using ""upon failure, set 'ret' and jump to out""
pattern, flatten the function further.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_1078.diff
https://github.com/git/git/commit/925d73c4217388838e36bfed85553132c458c7d0,24 Jul 2015,"rerere: further clarify do_rerere_one_path()

Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1079.diff
https://github.com/git/git/commit/c7a25d3790bdbc486362084238db5a773f728570,24 Jul 2015,"rerere: further de-dent do_plain_rerere()

It's just easier to follow this way.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_1080.diff
https://github.com/git/git/commit/8e7768b2de8bfdf82cde565d2f42e8d7f91e74e0,24 Jul 2015,"rerere: refactor ""replay"" part of do_plain_rerere()

Extract the body of a loop that attempts to replay recorded
resolution for each conflicted path into a helper function, not
because I want to call it from multiple places later, but because
the logic has become too deeply nested and hard to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_1081.diff
https://github.com/git/git/commit/cc899eca552a9b93788e6bca34aa0e4d86b251a0,24 Jul 2015,"rerere: explain the primary codepath

Explain the internals of rerere as in-code comments, while
sprinkling ""NEEDSWORK"" comment to highlight iffy bits and
questionable assumptions.

This one covers the codepath reached from rerere(), the primary
interface to the subsystem.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_1082.diff
https://github.com/git/git/commit/a96847cc1691840bd95cc56549d7c00b35f6d5a0,24 Jul 2015,"rerere: explain the rerere I/O abstraction

Explain the internals of rerere as in-code comments.

This one covers our thin I/O abstraction to read from either
a file or a memory while optionally writing out to a file.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1083.diff
https://github.com/git/git/commit/a14c7ab8f58f3b2aea99e65a74c9f9ab4f955a40,24 Jul 2015,"rerere: report autoupdated paths only after actually updating them

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1084.diff
https://github.com/git/git/commit/f5800f6ad8b8cbf41a252f7ca0ae465217174c60,24 Jul 2015,"rerere: lift PATH_MAX limitation

The MERGE_RR file records a collection of NUL-terminated entries,
each of which consists of

 - a hash that identifies the conflict
 - a HT
 - the pathname

We used to read this piece-by-piece, and worse yet, read the
pathname part a byte at a time into a fixed buffer of size PATH_MAX.

Instead, read a whole entry using strbuf_getwholeline() and parse
out the fields.  This way, we issue fewer read(2) calls and more
importantly we do not have to limit the pathname to PATH_MAX.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1085.diff
https://github.com/git/git/commit/afcb2e7a3b855887e79d1ee6d70ec80ab6456a64,21 Jul 2015,"git-reflog: add exists command

This is necessary because alternate ref backends might store reflogs
somewhere other than .git/logs.  Code that now directly manipulates
.git/logs should instead go through git-reflog.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_1086.diff
https://github.com/git/git/commit/a4c653dfcd05c987028b847092a1ee7e5d86a596,21 Jul 2015,"refs.c: add err arguments to reflog functions

Add an err argument to log_ref_setup that can explain the reason
for a failure. This then eliminates the need to manage errno through
this function since we can just add strerror(errno) to the err string
when meaningful. No callers relied on errno from this function for
anything else than the error message.

Also add err arguments to private functions write_ref_to_lockfile,
log_ref_write_1, commit_ref_update. This again eliminates the need to
manage errno in these functions.

Some error messages are slightly reordered.

Update of a patch by Ronnie Sahlberg.

Signed-off-by: Ronnie Sahlberg <sahlberg@google.com>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/patch_1087.diff
https://github.com/git/git/commit/7d782416cb5176d93a073bee8048163db544c80f,21 Jul 2015,"unpack-trees: don't update files with CE_WT_REMOVE set

Don't update files in the worktree from cache entries which are
flagged with CE_WT_REMOVE.

When a user does a sparse checkout, git removes files that are
marked with CE_WT_REMOVE (because they are out-of-scope for the
sparse checkout). If those files are also marked CE_UPDATE (for
instance, because they differ in the branch that is being checked
out and the outgoing branch), git would previously recreate them.
This patch prevents them from being recreated.

These erroneously-created files would also interfere with merges,
causing pre-merge revisions of out-of-scope files to appear in the
worktree.

apply_sparse_checkout() is the function where all ""action""
manipulation (add, delete, update files..) for sparse checkout
occurs; it should not ask to delete and update both at the same
time.

Signed-off-by: Anatole Shaw <git-devel@omni.poc.net>
Signed-off-by: David Turner <dturner@twopensource.com>
Helped-by: Duy Nguyen <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1088.diff
https://github.com/git/git/commit/ed197a6ab983783550bd0b0c71cb97d734f4cfaa,20 Jul 2015,"worktree: avoid resolving HEAD unnecessarily

Now that git-worktree sets HEAD explicitly to its final value via either
git-symbolic-ref or git-update-ref, rather than relying upon
git-checkout to do so, the ""hack"" for pacifying is_git_directory() with
a temporary HEAD, though still necessary, can be simplified.

Since the real HEAD is now populated with its proper final value, the
value of the temporary HEAD truly no longer matters, and any value which
looks like an object ID is good enough to satisfy is_git_directory().
Therefore, just set the temporary HEAD to a literal value rather than
going through the effort of resolving the current branch's HEAD.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1089.diff
https://github.com/git/git/commit/f7c9dac1b037e453e934c272d77cc648d56d5477,20 Jul 2015,"worktree: detect branch-name/detached and error conditions locally

git-worktree currently conflates setting of HEAD in the new worktree
with initial worktree population via a single git-checkout invocation,
which requires git-checkout to have special knowledge that it is
operating in a newly created worktree. The eventual goal is to separate
these operations and rid git-checkout of that overly-intimate knowledge.

Once these operations are separate, git-worktree will no longer be able
to rely upon git-branch to determine the state of the worktree (branch
name or detached), or to check for error conditions, such as the
requested branch already checked out elsewhere, or an invalid reference.
Therefore, imbue git-worktree with the intelligence to determine a
branch name or detached state locally, and to perform error checking on
its own.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1090.diff
https://github.com/git/git/commit/ab0b2c53ed853e34def18e7b84acd7da7e2ddd49,20 Jul 2015,"worktree: make --detach mutually exclusive with -b/-B

Be consistent with git-checkout which disallows this (not particularly
meaningful) combination.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1091.diff
https://github.com/git/git/commit/cd2f4713112119e18af8b5b580c5661a52320632,20 Jul 2015,"worktree: improve worktree setup message

When git-worktree creates a new worktree, it reports:

    Enter ""<path>"" (identifier <tag>)

which misleadingly implies that it is setting <path> as the working
directory (as if ""cd <path>"" had been invoked), whereas it's actually
preparing the new worktree by creating its administrative files, setting
HEAD, and populating it. Make this more clear by instead saying:

    Preparing ""<path>"" (identifier <tag>)

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1092.diff
https://github.com/git/git/commit/ed89f84b3c05d6359aba842e245910c996d91859,20 Jul 2015,"branch: publish die_if_checked_out()

git-worktree currently conflates new branch creation, setting of HEAD in
the new wortkree, and worktree population into a single sub-invocation
of git-checkout. However, these operations will eventually be separated,
and git-worktree itself will need to be able to detect if the branch is
already checked out elsewhere, rather than relying upon git-branch to
make this determination, so publish die_if_checked_out().

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/patch_1093.diff
https://github.com/git/git/commit/4341460d92c2857193954158f35aaf7518aa7a58,20 Jul 2015,"checkout: generalize die_if_checked_out() branch name argument

The plan is to publish die_if_checked_out() so that callers other than
git-checkout can take advantage of it, however, those callers won't have
access to git-checkout's ""struct branch_info"". Therefore, change it to
accept the full name of the branch as a simple string instead.

While here, also give the argument a more meaningful name (""branch""
instead of ""new"").

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1094.diff
https://github.com/git/git/commit/c925fe23684455735c3bb1903803643a24a58d8f,12 Jul 2015,"Revert ""checkout: retire --ignore-other-worktrees in favor of --force""

This reverts commit 0d1a1517835a10818f2d40d8780a268dbb5e20ce.

When trying to switch to a different branch, that happens to be
checked out in another working tree, the user shouldn't have to
give up the other safety measures (like protecting the local changes
that overlap the difference between the branches) while defeating
the ""no two checkouts of the same branch"" safety.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1095.diff
https://github.com/git/git/commit/0d1a1517835a10818f2d40d8780a268dbb5e20ce,07 Jul 2015,"checkout: retire --ignore-other-worktrees in favor of --force

As a safeguard, checking out a branch already checked out by a different
worktree is disallowed. This behavior can be overridden with
--ignore-other-worktrees, however, this option is neither obvious nor
particularly discoverable. As a common safeguard override, --force is
more likely to come to mind. Therefore, overload it to also suppress the
check for a branch already checked out elsewhere.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1096.diff
https://github.com/git/git/commit/84e6fb9da95c1d2407fd2740336371f9604ef6d7,06 Jul 2015,"status: give more information during rebase -i

git status gives more information during rebase -i, about the list of
command that are done during the rebase. It displays the two last
commands executed and the two next lines to be executed. It also gives
hints to find the whole files in .git directory.

Signed-off-by: Guillaume Pagès <guillaume.pages@ensimag.grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",225,data/crawl/git/patch_1097.diff
https://github.com/git/git/commit/b979d95027242455b10e6f566b0e96c5f30cc908,06 Jul 2015,"checkout: retire --to option

Now that ""git worktree add"" has achieved user-facing feature-parity with
""git checkout --to"", retire the latter.

Move the actual linked worktree creation functionality,
prepare_linked_checkout() and its helpers, verbatim from checkout.c to
worktree.c.

This effectively reverts changes to checkout.c by 529fef2 (checkout:
support checking out into a new working directory, 2014-11-30) with the
exception of merge_working_tree() and switch_branches() which still
require specialized knowledge that a the checkout is occurring in a
newly-created linked worktree (signaled to them by the private
GIT_CHECKOUT_NEW_WORKTREE environment variable).

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",312,data/crawl/git/patch_1098.diff
https://github.com/git/git/commit/cbdf60fa183e3a2330849046846b400ef4a99c3b,06 Jul 2015,"worktree: add -b/-B options

One of git-worktree's roles is to populate the new worktree, much like
git-checkout, and thus, for convenience, ought to support several of the
same shortcuts. Toward this goal, add -b/-B options to create a new
branch and check it out in the new worktree.

(For brevity, only -b is mentioned in the synopsis; -B is omitted.)

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1099.diff
https://github.com/git/git/commit/338dfd0da4b7fd3ccf0772788d64cbcdf089f486,06 Jul 2015,"checkout: make --to unconditionally verbose

prepare_linked_checkout() respects git-checkout's --quiet flag, however,
the plan is to relocate ""git checkout --to"" functionality to ""git
worktree add"", and git-worktree does not (yet) have a --quiet flag.
Consequently, make prepare_linked_checkout() unconditionally verbose to
ease eventual code movement to worktree.c.

(A --quiet flag can be added to git-worktree later if there is demand
for it.)

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1100.diff
https://github.com/git/git/commit/9559ce8368b533862584b2717532e3c25232f1c9,06 Jul 2015,"checkout: relocate --to's ""no branch specified"" check

The plan is to relocate ""git checkout --to"" functionality to ""git
worktree add"", however, this check expects a 'struct branch_info' which
git-worktree won't have at hand. It will, however, have access to its
own command-line from which it can pick up the branch name. Therefore,
as a preparatory step, rather than having prepare_linked_checkout()
perform this check, make it the caller's responsibility.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1101.diff
https://github.com/git/git/commit/c990a4c11dd7bb671da1b30e14568ad986621488,06 Jul 2015,"checkout: fix bug with --to and relative HEAD

Given ""git checkout --to <path> HEAD~1"", the new worktree's HEAD should
begin life at the current branch's HEAD~1, however, it actually ends up
at HEAD~2. This happens because:

    1. git-checkout resolves HEAD~1

    2. to satisfy is_git_directory(), prepare_linked_worktree() creates
       a HEAD for the new worktree with the value of the resolved HEAD~1

    3. git-checkout re-invokes itself with the same arguments within the
       new worktree to populate the worktree

    4. the sub git-checkout resolves HEAD~1 relative to its own HEAD,
       which is the resolved HEAD~1 from the original invocation,
       resulting unexpectedly and incorrectly in HEAD~2 (relative to the
       original)

Fix this by unconditionally assigning the current worktree's HEAD as the
value of the new worktree's HEAD.

As a side-effect, this change also eliminates a dependence within
prepare_linked_checkout() upon 'struct branch_info'. The plan is to
eventually relocate ""git checkout --to"" functionality to ""git worktree
add"", and worktree.c won't have knowledge of 'struct branch_info', so
removal of this dependency is a step toward that goal.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1102.diff
https://github.com/git/git/commit/28c7b1f7b7b70013c2f380c2d720d0c918d3d83a,01 Jul 2015,"fast-import: add a get-mark command

It is sometimes useful for importers to be able to read the SHA-1
corresponding to a mark that they have created via fast-import. For
example, they might want to embed the SHA-1 into the commit message of
a later commit. Or it might be useful for internal bookkeeping uses,
or for logging.

Add a ""get-mark"" command to ""git fast-import"" that allows the importer
to ask for the value of a mark that has been created earlier.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_1103.diff
https://github.com/git/git/commit/370799596081e1d1f862e42305ba8119183bde94,30 Jun 2015,"git rebase -i: warn about removed commits

Check if commits were removed (i.e. a line was deleted) and print
warnings or stop git rebase depending on the value of the
configuration variable rebase.missingCommitsCheck.

This patch gives the user the possibility to avoid silent loss of
information (losing a commit through deleting the line in this case)
if he wants.

Add the configuration variable rebase.missingCommitsCheck.
    - When unset or set to ""ignore"", no checking is done.
    - When set to ""warn"", the commits are checked, warnings are
      displayed but git rebase still proceeds.
    - When set to ""error"", the commits are checked, warnings are
      displayed and the rebase is stopped.
      (The user can then use 'git rebase --edit-todo' and
      'git rebase --continue', or 'git rebase --abort')

rebase.missingCommitsCheck defaults to ""ignore"".

Signed-off-by: Galan Rémi <remi.galan-alfonso@ensimag.grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/patch_1104.diff
https://github.com/git/git/commit/05eb5635537bac0494bfd8cf41fa5502e05b6fd6,30 Jun 2015,"status: factor two rebase-related messages together

Signed-off-by: Guillaume Pagès <guillaume.pages@ensimag.grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1105.diff
https://github.com/git/git/commit/43f9d9f3a6c6004853fcc7b283dafc3590478498,29 Jun 2015,"bisect: replace hardcoded ""bad|good"" by variables

To add new tags like old/new and have keywords less confusing, the
first step is to avoid hardcoding the keywords.

The default mode is still bad/good.

Signed-off-by: Antoine Delaite <antoine.delaite@ensimag.grenoble-inp.fr>
Signed-off-by: Louis Stuber <stuberl@ensimag.grenoble-inp.fr>
Signed-off-by: Valentin Duperray <Valentin.Duperray@ensimag.imag.fr>
Signed-off-by: Franck Jonas <Franck.Jonas@ensimag.imag.fr>
Signed-off-by: Lucien Kong <Lucien.Kong@ensimag.imag.fr>
Signed-off-by: Thomas Nguy <Thomas.Nguy@ensimag.imag.fr>
Signed-off-by: Huynh Khoi Nguyen Nguyen <Huynh-Khoi-Nguyen.Nguyen@ensimag.imag.fr>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/patch_1106.diff
https://github.com/git/git/commit/aa1462cc3d3b0c4c8ad6a60aaf31e0f3a424162d,29 Jun 2015,"introduce ""format"" date-mode

This feeds the format directly to strftime. Besides being a
little more flexible, the main advantage is that your system
strftime may know more about your locale's preferred format
(e.g., how to spell the days of the week).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1107.diff
https://github.com/git/git/commit/a5481a6c9438cbd9c246cfa59ff49c31a0926fb6,29 Jun 2015,"convert ""enum date_mode"" into a struct

In preparation for adding date modes that may carry extra
information beyond the mode itself, this patch converts the
date_mode enum into a struct.

Most of the conversion is fairly straightforward; we pass
the struct as a pointer and dereference the type field where
necessary. Locations that declare a date_mode can use a ""{}""
constructor.  However, the tricky case is where we use the
enum labels as constants, like:

  show_date(t, tz, DATE_NORMAL);

Ideally we could say:

  show_date(t, tz, &{ DATE_NORMAL });

but of course C does not allow that. Likewise, we cannot
cast the constant to a struct, because we need to pass an
actual address. Our options are basically:

  1. Manually add a ""struct date_mode d = { DATE_NORMAL }""
     definition to each caller, and pass ""&d"". This makes
     the callers uglier, because they sometimes do not even
     have their own scope (e.g., they are inside a switch
     statement).

  2. Provide a pre-made global ""date_normal"" struct that can
     be passed by address. We'd also need ""date_rfc2822"",
     ""date_iso8601"", and so forth. But at least the ugliness
     is defined in one place.

  3. Provide a wrapper that generates the correct struct on
     the fly. The big downside is that we end up pointing to
     a single global, which makes our wrapper non-reentrant.
     But show_date is already not reentrant, so it does not
     matter.

This patch implements 3, along with a minor macro to keep
the size of the callers sane.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/patch_1108.diff
https://github.com/git/git/commit/df0b6cfbda88144714541664fb501146d6465a82,29 Jun 2015,"worktree: new place for ""git prune --worktrees""

Commit 23af91d (prune: strategies for linked checkouts - 2014-11-30)
adds ""--worktrees"" to ""git prune"" without realizing that ""git prune"" is
for object database only. This patch moves the same functionality to a
new command ""git worktree"".

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>",312,data/crawl/git/patch_1109.diff
https://github.com/git/git/commit/d95138e695d99d32dcad528a2a7974f434c51e79,26 Jun 2015,"setup: set env $GIT_WORK_TREE when work tree is set, like $GIT_DIR

In the test case, we run setup_git_dir_gently() the first time to read
$GIT_DIR/config so that we can resolve aliases. We'll enter
setup_discovered_git_dir() and may or may not call set_git_dir() near
the end of the function, depending on whether the detected git dir is
"".git"" or not. This set_git_dir() will set env var $GIT_DIR.

For normal repo, git dir detected via setup_discovered_git_dir() will be
"".git"", and set_git_dir() is not called. If .git file is used however,
the git dir can't be "".git"" and set_git_dir() is called and $GIT_DIR
set. This is the key of this problem.

If we expand an alias (or autocorrect command names), then
setup_git_dir_gently() is run the second time. If $GIT_DIR is not set in
the first run, we run the same setup_discovered_git_dir() as before.
Nothing to see. If it is, however, we'll enter setup_explicit_git_dir()
this time.

This is where the ""fun"" is.  If $GIT_WORK_TREE is not set but
$GIT_DIR is, you are supposed to be at the root level of the
worktree.  But if you are in a subdir ""foo/bar"" (real worktree's top
is ""foo""), this rule bites you: your detected worktree is now
""foo/bar"", even though the first run correctly detected worktree as
""foo"". You get ""internal error: work tree has already been set"" as a
result.

Bottom line is, when $GIT_DIR is set, $GIT_WORK_TREE should be set too
unless there's no work tree. But setting $GIT_WORK_TREE inside
set_git_dir() may backfire. We don't know at that point if work tree is
already configured by the caller. So set it when work tree is
detected. It does not harm if $GIT_WORK_TREE is set while $GIT_DIR is
not.

Reported-by: Bjørnar Snoksrud <snoksrud@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1110.diff
https://github.com/git/git/commit/067fbd4105c5aa8260a73cc6961854be0e93fa03,25 Jun 2015,"introduce ""preciousObjects"" repository extension

If this extension is used in a repository, then no
operations should run which may drop objects from the object
storage. This can be useful if you are sharing that storage
with other repositories whose refs you cannot see.

For instance, if you do:

  $ git clone -s parent child
  $ git -C parent config extensions.preciousObjects true
  $ git -C parent config core.repositoryformatversion 1

you now have additional safety when running git in the
parent repository. Prunes and repacks will bail with an
error, and `git gc` will skip those operations (it will
continue to pack refs and do other non-object operations).
Older versions of git, when run in the repository, will
fail on every operation.

Note that we do not set the preciousObjects extension by
default when doing a ""clone -s"", as doing so breaks
backwards compatibility. It is a decision the user should
make explicitly.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_1111.diff
https://github.com/git/git/commit/00a09d57eb8a041e6a6b0470c53533719c049bab,25 Jun 2015,"introduce ""extensions"" form of core.repositoryformatversion

Normally we try to avoid bumps of the whole-repository
core.repositoryformatversion field. However, it is
unavoidable if we want to safely change certain aspects of
git in a backwards-incompatible way (e.g., modifying the set
of ref tips that we must traverse to generate a list of
unreachable, safe-to-prune objects).

If we were to bump the repository version for every such
change, then any implementation understanding version `X`
would also have to understand `X-1`, `X-2`, and so forth,
even though the incompatibilities may be in orthogonal parts
of the system, and there is otherwise no reason we cannot
implement one without the other (or more importantly, that
the user cannot choose to use one feature without the other,
weighing the tradeoff in compatibility only for that
particular feature).

This patch documents the existing repositoryformatversion
strategy and introduces a new format, ""1"", which lets a
repository specify that it must run with an arbitrary set of
extensions. This can be used, for example:

 - to inform git that the objects should not be pruned based
   only on the reachability of the ref tips (e.g, because it
   has ""clone --shared"" children)

 - that the refs are stored in a format besides the usual
   ""refs"" and ""packed-refs"" directories

Because we bump to format ""1"", and because format ""1""
requires that a running git knows about any extensions
mentioned, we know that older versions of the code will not
do something dangerous when confronted with these new
formats.

For example, if the user chooses to use database storage for
refs, they may set the ""extensions.refbackend"" config to
""db"". Older versions of git will not understand format ""1""
and bail. Versions of git which understand ""1"" but do not
know about ""refbackend"", or which know about ""refbackend""
but not about the ""db"" backend, will refuse to run. This is
annoying, of course, but much better than the alternative of
claiming that there are no refs in the repository, or
writing to a location that other implementations will not
read.

Note that we are only defining the rules for format 1 here.
We do not ever write format 1 ourselves; it is a tool that
is meant to be used by users and future extensions to
provide safety with older implementations.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",162,data/crawl/git/patch_1112.diff
https://github.com/git/git/commit/cd94c6f91ee92ffb0592696170fa84f426b839ab,23 Jun 2015,"fsck: git receive-pack: support excluding objects from fsck'ing

The optional new config option `receive.fsck.skipList` specifies the path
to a file listing the names, i.e. SHA-1s, one per line, of objects that
are to be ignored by `git receive-pack` when `receive.fsckObjects = true`.

This is extremely handy in case of legacy repositories where it would
cause more pain to change incorrect objects than to live with them
(e.g. a duplicate 'author' line in an early commit object).

The intended use case is for server administrators to inspect objects
that are reported by `git push` as being too problematic to enter the
repository, and to add the objects' SHA-1 to a (preferably sorted) file
when the objects are legitimate, i.e. when it is determined that those
problematic objects should be allowed to enter the server.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_1113.diff
https://github.com/git/git/commit/f50c44073051820cd368be4ca520ae43f34fdf8b,23 Jun 2015,"fsck: disallow demoting grave fsck errors to warnings

Some kinds of errors are intrinsically unrecoverable (e.g. errors while
uncompressing objects). It does not make sense to allow demoting them to
mere warnings.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1114.diff
https://github.com/git/git/commit/5d477a334a68698709f07ebda4999c10997ef6f7,23 Jun 2015,"fsck (receive-pack): allow demoting errors to warnings

For example, missing emails in commit and tag objects can be demoted to
mere warnings with

	git config receive.fsck.missingemail=warn

The value is actually a comma-separated list.

In case that the same key is listed in multiple receive.fsck.<msg-id>
lines in the config, the latter configuration wins (this can happen for
example when both $HOME/.gitconfig and .git/config contain message type
settings).

As git receive-pack does not actually perform the checks, it hands off
the setting to index-pack or unpack-objects in the form of an optional
argument to the --strict option.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1115.diff
https://github.com/git/git/commit/0282f4dced029230024196e460b9d9f971f494dd,23 Jun 2015,"fsck: offer a function to demote fsck errors to warnings

There are legacy repositories out there whose older commits and tags
have issues that prevent pushing them when 'receive.fsckObjects' is set.
One real-life example is a commit object that has been hand-crafted to
list two authors.

Often, it is not possible to fix those issues without disrupting the
work with said repositories, yet it is still desirable to perform checks
by setting `receive.fsckObjects = true`. This commit is the first step
to allow demoting specific fsck issues to mere warnings.

The `fsck_set_msg_types()` function added by this commit parses a list
of settings in the form:

	missingemail=warn,badname=warn,...

Unfortunately, the FSCK_WARN/FSCK_ERROR flag is only really heeded by
git fsck so far, but other call paths (e.g. git index-pack --strict)
error out *always* no matter what type was specified. Therefore, we need
to take extra care to set all message types to FSCK_ERROR by default in
those cases.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_1116.diff
https://github.com/git/git/commit/2a514ed8058e35841d3d7b05a898991b83e5eaf0,22 Jun 2015,"parse-options: move unsigned long option parsing out of pack-objects.c

The unsigned long option parsing (including 'k'/'m'/'g' suffix
parsing) is more widely applicable.  Add support for OPT_MAGNITUDE
to parse-options.h and change pack-objects.c use this support.

The error behavior on parse errors follows that of OPT_INTEGER.  The
name of the option that failed to parse is reported with a brief
message describing the expect format for the option argument and
then the full usage message for the command invoked.

This differs from the previous behavior for OPT_ULONG used in
pack-objects for --max-pack-size and --window-memory which used to
display the value supplied in the error message and did not display
the full usage message.

Signed-off-by: Charles Bailey <cbailey32@bloomberg.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_1117.diff
https://github.com/git/git/commit/81a48cc08033a453bcb884ec0838a8f064a6611e,22 Jun 2015,"test-parse-options: update to handle negative ints

Fix the printf specification to treat 'integer' as the signed type
that it is and add a test that checks that we parse negative option
arguments.

Signed-off-by: Charles Bailey <cbailey32@bloomberg.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1118.diff
https://github.com/git/git/commit/6a951937ae1abb5fe438bfb41ebb28c5abe0419d,22 Jun 2015,"cat-file: add --batch-all-objects option

It can sometimes be useful to examine all objects in the
repository. Normally this is done with ""git rev-list --all
--objects"", but:

  1. That shows only reachable objects. You may want to look
     at all available objects.

  2. It's slow. We actually open each object to walk the
     graph. If your operation is OK with seeing unreachable
     objects, it's an order of magnitude faster to just
     enumerate the loose directories and pack indices.

You can do this yourself using ""ls"" and ""git show-index"",
but it's non-obvious.  This patch adds an option to
""cat-file --batch-check"" to operate on all available
objects (rather than reading names from stdin).

This is based on a proposal by Charles Bailey to provide a
separate ""git list-all-objects"" command. That is more
orthogonal, as it splits enumerating the objects from
getting information about them. However, in practice you
will either:

  a. Feed the list of objects directly into cat-file anyway,
     so you can find out information about them. Keeping it
     in a single process is more efficient.

  b. Ask the listing process to start telling you more
     information about the objects, in which case you will
     reinvent cat-file's batch-check formatter.

Adding a cat-file option is simple and efficient. And if you
really do want just the object names, you can always do:

  git cat-file --batch-check='%(objectname)' --batch-all-objects

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_1119.diff
https://github.com/git/git/commit/44b877e9bc944258db096a0ec57151be7c8cbf66,22 Jun 2015,"cat-file: split batch_one_object into two stages

There are really two things going on in this function:

  1. We convert the name we got on stdin to a sha1.

  2. We look up and print information on the sha1.

Let's split out the second half so that we can call it
separately.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1120.diff
https://github.com/git/git/commit/fc4937c37219347f4e2c25a271577b333942453f,22 Jun 2015,"cat-file: add --buffer option

We use a direct write() to output the results of --batch and
--batch-check. This is good for processes feeding the input
and reading the output interactively, but it introduces
measurable overhead if you do not want this feature. For
example, on linux.git:

  $ git rev-list --objects --all | cut -d' ' -f1 >objects
  $ time git cat-file --batch-check='%(objectsize)' \
          <objects >/dev/null
  real    0m5.440s
  user    0m5.060s
  sys     0m0.384s

This patch adds an option to use regular stdio buffering:

  $ time git cat-file --batch-check='%(objectsize)' \
          --buffer <objects >/dev/null
  real    0m4.975s
  user    0m4.888s
  sys     0m0.092s

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1121.diff
https://github.com/git/git/commit/aeff29dd4dab01b497b2a2cf73e982e846a5fe4c,22 Jun 2015,"verify-commit: add option to print raw gpg status information

verify-commit by default displays human-readable output on standard
error.  However, it can also be useful to get access to the raw gpg
status information, which is machine-readable, allowing automated
implementation of signing policy.  Add a --raw option to make
verify-commit produce the gpg status information on standard error
instead of the human-readable format.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_1122.diff
https://github.com/git/git/commit/ca194d50b84b53a0b711fef46d1a47657ec5da41,22 Jun 2015,"gpg: centralize printing signature buffers

The code to handle printing of signature data from a struct
signature_check is very similar between verify-commit and verify-tag.
Place this in a single function.  verify-tag retains its special case
behavior of printing the tag even when no valid signature is found.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1123.diff
https://github.com/git/git/commit/a4cc18f2934b8d2f00c7c3e11107acb6bfafe2c6,22 Jun 2015,"verify-tag: share code with verify-commit

verify-tag was executing an entirely different codepath than
verify-commit, except for the underlying verify_signed_buffer.  Move
much of the code from check_commit_signature to a generic
check_signature function and adjust both codepaths to call it.

Update verify-tag to explicitly output the signature text, as we now
call verify_signed_buffer with strbufs to catch the output, which
prevents it from being printed automatically.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1124.diff
https://github.com/git/git/commit/e2991c80485c646c86f5d80423f9ae983bed120b,22 Jun 2015,"cmd_update_ref(): make logic more straightforward

Restructure the code to avoid clearing oldsha1 when oldval is unset.
It's value is not needed in that case, so this change makes it more
obvious that its initialization is consistent with its later use.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1125.diff
https://github.com/git/git/commit/e426ff4222ba82a57ed459320509273dc8959ade,22 Jun 2015,"initial_ref_transaction_commit(): check for ref D/F conflicts

In initial_ref_transaction_commit(), check for D/F conflicts (i.e.,
the type of conflict that exists between ""refs/foo"" and
""refs/foo/bar"") among the references being created and between the
references being created and any hypothetical existing references.

Ideally, there shouldn't *be* any existing references when this
function is called. But, at least in the case of the ""testgit"" remote
helper, ""clone"" can be called after the remote-tracking ""HEAD"" and
""master"" branches have already been created. So let's just do the
full-blown check.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1126.diff
https://github.com/git/git/commit/58f233ce1ed67bbc31a429fde5c65d5050fdbd7d,22 Jun 2015,"initial_ref_transaction_commit(): function for initial ref creation

""git clone"" uses shortcuts when creating the initial set of
references:

* It writes them directly to packed-refs.

* It doesn't lock the individual references (though it does lock the
  packed-refs file).

* It doesn't check for refname conflicts between two new references or
  between one new reference and any hypothetical old ones.

* It doesn't create reflog entries for the reference creations.

This functionality was implemented in builtin/clone.c. But really that
file shouldn't have such intimate knowledge of how references are
stored. So provide a new function in the refs API,
initial_ref_transaction_commit(), which can be used for initial
reference creation. The new function is based on the ref_transaction
interface.

This means that we can make some other functions private to the refs
module. That will be done in a followup commit.

It would seem to make sense to add a test here that there are no
existing references, because that is how the function *should* be
used. But in fact, the ""testgit"" remote helper appears to call it
*after* having set up refs/remotes/<name>/HEAD and
refs/remotes/<name>/master, so we can't be so strict. For now, the
function trusts its caller to only call it when it makes sense. Future
commits will add some more limited sanity checks.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_1127.diff
https://github.com/git/git/commit/79e4d8a9b839ed18816e78ed52f0ff5a5f6e9a63,22 Jun 2015,"repack_without_refs(): make function private

It is no longer called from outside of the refs module. Also move its
docstring and change it to imperative voice.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1128.diff
https://github.com/git/git/commit/a087b432a79f85b34e8582219a0bdec73c5821f5,22 Jun 2015,"prune_refs(): use delete_refs()

The old version just looped over the references to delete, calling
delete_ref() on each one. But that has quadratic behavior, because
each call to delete_ref() might have to rewrite the packed-refs file.
This can be very expensive in a repository with a large number of
references. In some (admittedly extreme) repositories, we've seen
cases where the ref-pruning part of fetch takes multiple tens of
minutes.

Instead call delete_refs(), which (aside from being less code) has the
optimization that it only rewrites the packed-refs file a single time.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1129.diff
https://github.com/git/git/commit/a122366d6946ea41ac8167a88f1949416008decb,22 Jun 2015,"prune_remote(): use delete_refs()

This slightly changes how errors are reported. The old and new code
both report errors that come from repack_without_refs() the same way.
But if an error occurs within delete_ref(), the old version only
emitted an error within delete_ref() without further comment. The new
version (in delete_refs()) still emits that error, but then follows it
up with

    error(_(""could not remove reference %s""), refname)

The ""could not remove reference"" error originally came from a similar
message in remove_branches() (from builtin/remote.c).

This is an improvement, because the error from delete_ref() (which
usually comes from ref_transaction_commit()) can be pretty low-level,
like

    Cannot lock ref '%s': unable to resolve reference %s: %s

where the last ""%s"" is the original strerror.

In any case, I don't think we need to sweat the details too much,
because these errors should only ever be seen in the case of a broken
repository or a race between two processes; i.e., only in pretty rare
and anomalous situations.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1130.diff
https://github.com/git/git/commit/7fa7dc8904882a40107af71a751bad5d1572ba4c,22 Jun 2015,"delete_refs(): bail early if the packed-refs file cannot be rewritten

If we fail to delete the doomed references from the packed-refs file,
then it is unsafe to delete their loose references, because doing so
might expose a value from the packed-refs file that is obsolete and
perhaps even points at an object that has been garbage collected.

So if repack_without_refs() fails, emit a more explicit error message
and bail.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1131.diff
https://github.com/git/git/commit/5d97861b9baf3b0596f2a1c343634062aec2df84,22 Jun 2015,"delete_refs(): make error message more generic

Change the error message from

    Could not remove branch %s

to

    could not remove reference %s

First of all, the old error message referred to ""branch
refs/remotes/origin/foo"", which was awkward even for the existing
caller. Normally we would refer to a reference like that as either
""remote-tracking branch origin/foo"" or ""reference
refs/remotes/origin/foo"". Here I take the lazier alternative.

Moreover, now that this function is part of the refs API, it might be
called for refs that are neither branches nor remote-tracking
branches.

While we're at it, convert the error message to lower case, as per our
usual convention.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1132.diff
https://github.com/git/git/commit/98ffd5ff67d1097280e3c16accde6de86d3ece3d,22 Jun 2015,"delete_refs(): new function for the refs API

Move the function remove_branches() from builtin/remote.c to refs.c,
rename it to delete_refs(), and make it public.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1133.diff
https://github.com/git/git/commit/c99ba492f1cc3e632ed12d46d7358effb6fa7f03,22 Jun 2015,"fsck: introduce identifiers for fsck messages

Instead of specifying whether a message by the fsck machinery constitutes
an error or a warning, let's specify an identifier relating to the
concrete problem that was encountered. This is necessary for upcoming
support to be able to demote certain errors to warnings.

In the process, simplify the requirements on the calling code: instead of
having to handle full-blown varargs in every callback, we now send a
string buffer ready to be used by the callback.

We could use a simple enum for the message IDs here, but we want to
guarantee that the enum values are associated with the appropriate
message types (i.e. error or warning?). Besides, we want to introduce a
parser in the next commit that maps the string representation to the
enum value, hence we use the slightly ugly preprocessor construct that
is extensible for use with said parser.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",232,data/crawl/git/patch_1134.diff
https://github.com/git/git/commit/b1456605c26eb6bd991b70b0ca0a3ce0f02473e9,18 Jun 2015,"pull: remove redirection to git-pull.sh

At the beginning of the rewrite of git-pull.sh to C, we introduced a
redirection to git-pull.sh if the environment variable
_GIT_USE_BUILTIN_PULL was not defined in order to not break test scripts
that relied on a functional git-pull.

Now that all of git-pull's functionality has been re-implemented in
builtin/pull.c, remove this redirection, and retire the old git-pull.sh
into contrib/examples/.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1135.diff
https://github.com/git/git/commit/b7b314711ad28b129e6c5916eee1f2036ffa94df,18 Jun 2015,"pull --rebase: error on no merge candidate cases

Tweak the error messages printed by die_no_merge_candidates() to take
into account that we may be ""rebasing against"" rather than ""merging
with"".

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1136.diff
https://github.com/git/git/commit/8944969c20e80f13965905ecd2ccccac36a34831,18 Jun 2015,"pull --rebase: exit early when the working directory is dirty

Re-implement the behavior introduced by f9189cf (pull --rebase: exit
early when the working directory is dirty, 2008-05-21).

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_1137.diff
https://github.com/git/git/commit/1678b81ecce8bcde1356dbe969fdfea96fc91639,18 Jun 2015,"pull: teach git pull about --rebase

Since cd67e4d (Teach 'git pull' about --rebase, 2007-11-28), if the
--rebase option is set, git-rebase is run instead of git-merge.

Re-implement this by introducing run_rebase(), which is called instead
of run_merge() if opt_rebase is a true value.

Since c85c792 (pull --rebase: be cleverer with rebased upstream
branches, 2008-01-26), git-pull handles the case where the upstream
branch was rebased since it was last fetched. The fork point (old remote
ref) of the branch from the upstream branch is calculated before fetch,
and then rebased from onto the new remote head (merge_head) after fetch.

Re-implement this by introducing get_merge_branch_2() and
get_merge_branch_1() to find the upstream branch for the
specified/current branch, and get_rebase_fork_point() which will find
the fork point between the upstream branch and current branch.

However, the above change created a problem where git-rebase cannot
detect commits that are already upstream, and thus may result in
unnecessary conflicts. cf65426 (pull --rebase: Avoid spurious conflicts
and reapplying unnecessary patches, 2010-08-12) fixes this by ignoring
the above old remote ref if it is contained within the merge base of the
merge head and the current branch.

This is re-implemented in run_rebase() where fork_point is not used if
it is the merge base returned by get_octopus_merge_base().

Helped-by: Stefan Beller <sbeller@google.com>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/patch_1138.diff
https://github.com/git/git/commit/49ec402d52dc8f8e55e62537c95766b623e63d6b,18 Jun 2015,"pull: implement pulling into an unborn branch

b4dc085 (pull: merge into unborn by fast-forwarding from empty
tree, 2013-06-20) established git-pull's current behavior of pulling
into an unborn branch by fast-forwarding the work tree from an empty
tree to the merge head, then setting HEAD to the merge head.

Re-implement this behavior by introducing pull_into_void() which will be
called instead of run_merge() if HEAD is invalid.

Helped-by: Stephen Robin <stephen.robin@gmail.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1139.diff
https://github.com/git/git/commit/fe911b8ca0b466697b38880512ea2b28f2699dbd,18 Jun 2015,"pull: fast-forward working tree if head is updated

Since b10ac50 (Fix pulling into the same branch., 2005-08-25), git-pull,
upon detecting that git-fetch updated the current head, will
fast-forward the working tree to the updated head commit.

Re-implement this behavior.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_1140.diff
https://github.com/git/git/commit/4a4cf9e821f604b79817bc37b475828f3fb8b0a4,18 Jun 2015,"pull: check if in unresolved merge state

Since d38a30d (Be more user-friendly when refusing to do something
because of conflict., 2010-01-12), git-pull will error out with
user-friendly advices if the user is in the middle of a merge or has
unmerged files.

Re-implement this behavior. While the ""has unmerged files"" case can be
handled by die_resolve_conflict(), we introduce a new function
die_conclude_merge() for printing a different error message for when
there are no unmerged files but the merge has not been finished.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1141.diff
https://github.com/git/git/commit/a9de98975479ef7d42986db63c16251c1f87ebcb,18 Jun 2015,"pull: support pull.ff config

Since b814da8 (pull: add pull.ff configuration, 2014-01-15), git-pull.sh
would lookup the configuration value of ""pull.ff"", and set the flag
""--ff"" if its value is ""true"", ""--no-ff"" if its value is ""false"" and
""--ff-only"" if its value is ""only"".

Re-implement this behavior.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1142.diff
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_1143.diff
https://github.com/git/git/commit/0179ca7a626e0a6c7bf5eaccf88dead307306dee,15 Jun 2015,"clean: improve performance when removing lots of directories

""git clean"" uses resolve_gitlink_ref() to check for the presence of
nested git repositories, but it has the drawback of creating a
ref_cache entry for every directory that should potentially be
cleaned. The linear search through the ref_cache list causes a massive
performance hit for large number of directories.

Modify clean.c:remove_dirs to use setup.c:is_git_directory and
setup.c:read_gitfile_gently instead.

Both these functions will open files and parse contents when they find
something that looks like a git repository. This is ok from a
performance standpoint since finding repository candidates should be
comparatively rare.

Using is_git_directory and read_gitfile_gently should give a more
standardized check for what is and what isn't a git repository but
also gives three behavioral changes.

The first change is that we will now detect and avoid cleaning empty
nested git repositories (only init run). This is desirable.

Second, we will no longer die when cleaning a file named "".git"" with
garbage content (it will be cleaned instead). This is also desirable.

The last change is that we will detect and avoid cleaning empty bare
repositories that have been placed in a directory named "".git"". This
is not desirable but should have no real user impact since we already
fail to clean non-empty bare repositories in the same scenario. This
is thus deemed acceptable.

On top of this we add some extra precautions. If read_gitfile_gently
fails to open the git file, read the git file or verify the path in
the git file we assume that the path with the git file is a valid
repository and avoid cleaning.

Update t7300 to reflect these changes in behavior.

The time to clean an untracked directory containing 100000 sub
directories went from 61s to 1.7s after this change.

Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1144.diff
https://github.com/git/git/commit/91479b9c72f1ffb13493736954149a34fddaf3aa,15 Jun 2015,"t7300: add tests to document behavior of clean and nested git

Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_1145.diff
https://github.com/git/git/commit/921bdd96afc17ca055af261066eabdf026cb2195,15 Jun 2015,"setup: sanity check file size in read_gitfile_gently

read_gitfile_gently will allocate a buffer to fit the entire file that
should be read. Add a sanity check of the file size before opening to
avoid allocating a potentially huge amount of memory if we come across
a large file that someone happened to name "".git"". The limit is set to
a sufficiently unreasonable size that should never be exceeded by a
genuine .git file.

Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1146.diff
https://github.com/git/git/commit/f2c5baa14e01e74527cc5807e5d47fdf67a05dd3,15 Jun 2015,"pull: implement fetch + merge

Implement the fetch + merge functionality of git-pull, by first running
git-fetch with the repo and refspecs provided on the command line, then
running git-merge on FETCH_HEAD to merge the fetched refs into the
current branch.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1147.diff
https://github.com/git/git/commit/1e1ea69fa4e5fb20baefe9e5422527e971d56a86,15 Jun 2015,"pull: implement skeletal builtin pull

For the purpose of rewriting git-pull.sh into a C builtin, implement a
skeletal builtin/pull.c that redirects to $GIT_EXEC_PATH/git-pull.sh if
the environment variable _GIT_USE_BUILTIN_PULL is not defined. This
allows us to fall back on the functional git-pull.sh when running the
test suite for tests that depend on a working git-pull implementation.

This redirection should be removed when all the features of git-pull.sh
have been re-implemented in builtin/pull.c.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1148.diff
https://github.com/git/git/commit/1051ef00636357061d72bcf673da86054fb14a12,10 Jun 2015,"git-p4: fixing --changes-block-size handling

The --changes-block-size handling was intended to help when
a user has a limited ""maxscanrows"" (see ""p4 group""). It used
""p4 changes -m $maxchanges"" to limit the number of results.

Unfortunately, it turns out that the ""maxscanrows"" and ""maxresults""
limits are actually applied *before* the ""-m maxchanges"" parameter
is considered (experimentally).

Fix the block-size handling so that it gets blocks of changes
limited by revision number ($Start..$Start+$N, etc). This limits
the number of results early enough that both sets of tests pass.

Note that many other Perforce operations can fail for the same
reason (p4 print, p4 files, etc) and it's probably not possible
to workaround this. In the real world, this is probably not
usually a problem.

Signed-off-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_1149.diff
https://github.com/git/git/commit/a93bedada88dc15b0143708e1cb87c8fe9b9c705,09 Jun 2015,"setup: add gentle version of read_gitfile

read_gitfile will die on most error cases. This makes it unsuitable
for speculative calls. Extract the core logic and provide a gentle
version that returns NULL on failure.

The first usecase of the new gentle version will be to probe for
submodules during git clean.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_1150.diff
https://github.com/git/git/commit/19bf6c9b345d18150805bde328284692d9fb3a91,08 Jun 2015,"fsck: report errors if reflog entries point at invalid objects

Previously, if a reflog entry's old or new SHA-1 was not resolvable to
an object, that SHA-1 was silently ignored. Instead, report such cases
as errors.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1151.diff
https://github.com/git/git/commit/d66ae59b8a76c18da2900482c47d4177a1271eb9,08 Jun 2015,"fsck_handle_reflog_sha1(): new function

New function, extracted from fsck_handle_reflog_ent(). The extra
is_null_sha1() test for the new reference is currently unnecessary, as
reflogs are deleted when the reference itself is deleted. But it
doesn't hurt, either.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1152.diff
https://github.com/git/git/commit/8afc493d115e35092be8de3a441317f175928ab5,02 Jun 2015,"for-each-ref: report broken references correctly

If there is a loose reference file with invalid contents, ""git
for-each-ref"" incorrectly reports the problem as being a missing
object with name NULL_SHA1:

    $ echo '12345678' >.git/refs/heads/nonsense
    $ git for-each-ref
    fatal: missing object 0000000000000000000000000000000000000000 for refs/heads/nonsense

With an explicit ""--format"" string, it can even report that the
reference validly points at NULL_SHA1:

    $ git for-each-ref --format='%(objectname) %(refname)'
    0000000000000000000000000000000000000000 refs/heads/nonsense
    $ echo $?
    0

This has been broken since

    b7dd2d2 for-each-ref: Do not lookup objects when they will not be used (2009-05-27)

, which changed for-each-ref from using for_each_ref() to using
git_for_each_rawref() in order to avoid looking up the referred-to
objects unnecessarily. (When ""git for-each-ref"" is given a ""--format""
string that doesn't include information about the pointed-to object,
it does not look up the object at all, which makes it considerably
faster. Iterating with DO_FOR_EACH_INCLUDE_BROKEN is essential to this
optimization because otherwise for_each_ref() would itself need to
check whether the object exists as part of its brokenness test.)

But for_each_rawref() includes broken references in the iteration, and
""git for-each-ref"" doesn't itself reject references with REF_ISBROKEN.
The result is that broken references are processed *as if* they had
the value NULL_SHA1, which is the value stored in entries for broken
references.

Change ""git for-each-ref"" to emit warnings for references that are
REF_ISBROKEN but to otherwise skip them.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1153.diff
https://github.com/git/git/commit/9cc2b07a7c95fad0bb5e3a7a8db29bebdb90d92b,01 Jun 2015,"add quieter versions of parse_{tree,commit}

When we call parse_commit, it will complain to stderr if the
object does not exist or cannot be read. This means that we
may produce useless error messages if this situation is
expected (e.g., because the object is marked UNINTERESTING,
or because revs->ignore_missing_links is set).

We can fix this by adding a new ""parse_X_gently"" form that
takes a flag to suppress the messages. The existing
""parse_X"" form is already gentle in the sense that it
returns an error rather than dying, and we could in theory
just add a ""quiet"" flag to it (with existing callers passing
""0""). But doing it this way means we do not have to disturb
existing callers.

Note also that the new flag is ""quiet_on_missing"", and not
just ""quiet"". We could add a flag to suppress _all_ errors,
but besides being a more invasive change (we would have to
pass the flag down to sub-functions, too), there is a good
reason not to: we would never want to use it. Missing a
linked object is expected in some circumstances, but it is
never expected to have a malformed commit, or to get a tree
when we wanted a commit.  We should always complain about
these corruptions.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1154.diff
https://github.com/git/git/commit/fada767463b599951b37bd544379a1d18dcf9370,29 May 2015,"setup_git_directory: delay core.bare/core.worktree errors

If both core.bare and core.worktree are set, we complain
about the bogus config and die. Dying is good, because it
avoids commands running and doing damage in a potentially
incorrect setup. But dying _there_ is bad, because it means
that commands which do not even care about the work tree
cannot run. This can make repairing the situation harder:

  [setup]
  $ git config core.bare true
  $ git config core.worktree /some/path

  [OK, expected.]
  $ git status
  fatal: core.bare and core.worktree do not make sense

  [Hrm...]
  $ git config --unset core.worktree
  fatal: core.bare and core.worktree do not make sense

  [Nope...]
  $ git config --edit
  fatal: core.bare and core.worktree do not make sense

  [Gaaah.]
  $ git help config
  fatal: core.bare and core.worktree do not make sense

Instead, let's issue a warning about the bogus config when
we notice it (i.e., for all commands), but only die when the
command tries to use the work tree (by calling setup_work_tree).
So we now get:

  $ git status
  warning: core.bare and core.worktree do not make sense
  fatal: unable to set up work tree using invalid config

  $ git config --unset core.worktree
  warning: core.bare and core.worktree do not make sense

We have to update t1510 to accomodate this; it uses
symbolic-ref to check whether the configuration works or
not, but of course that command does not use the working
tree. Instead, we switch it to use `git status`, as it
requires a work-tree, does not need any special setup, and
is read-only (so a failure will not adversely affect further
tests).

In addition, we add a new test that checks the desired
behavior (i.e., that running ""git config"" with the bogus
config does in fact work).

Reported-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1155.diff
https://github.com/git/git/commit/9ca0aaf6de357d46916d81ca40c47886092fe610,28 May 2015,"xmmap(): drop ""Out of memory?""

We show that message with die_errno(), but the OS is ought to know
why mmap(2) failed much better than we do.  There is no reason for
us to say ""Out of memory?"" here.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1156.diff
https://github.com/git/git/commit/1570856b510e3722a3620063e7ba209106b75857,28 May 2015,"config.c: avoid xmmap error messages

The config-writing code uses xmmap to map the existing
config file, which will die if the map fails. This has two
downsides:

  1. The error message is not very helpful, as it lacks any
     context about the file we are mapping:

       $ mkdir foo
       $ git config --file=foo some.key value
       fatal: Out of memory? mmap failed: No such device

  2. We normally do not die in this code path; instead, we'd
     rather report the error and return an appropriate exit
     status (which is part of the public interface
     documented in git-config.1).

This patch introduces a ""gentle"" form of xmmap which lets us
produce our own error message. We do not want to use mmap
directly, because we would like to use the other
compatibility elements of xmmap (e.g., handling 0-length
maps portably).

The end result is:

    $ git.compile config --file=foo some.key value
    error: unable to mmap 'foo': No such device
    $ echo $?
    3

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_1157.diff
https://github.com/git/git/commit/33ffc176d65e1e98e1eea262dc7827830c33c56d,27 May 2015,"verify_lock(): report errors via a strbuf

Instead of writing error messages directly to stderr, write them to
a ""strbuf *err"".  The caller, lock_ref_sha1_basic(), uses this error
reporting convention with all the other callees, and reports its
error this way to its callers.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1158.diff
https://github.com/git/git/commit/8dbf3eb6850d6d9495ace908625fe50888b111e6,27 May 2015,"diff.h: rename DIFF_PLAIN color slot to DIFF_CONTEXT

The latter is a much more descriptive name (and we support
""color.diff.context"" now). This also updates the name of any
local variables which were used to store the color.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1159.diff
https://github.com/git/git/commit/b8767f791c15f119554c1466af60e4f2433ae971,27 May 2015,"diff.c: --ws-error-highlight=<kind> option

Traditionally, we only cared about whitespace breakages introduced
in new lines.  Some people want to paint whitespace breakages on old
lines, too.  When they see a whitespace breakage on a new line, they
can spot the same kind of whitespace breakage on the corresponding
old line and want to say ""Ah, those breakages are there but they
were inherited from the original, so let's not touch them for now.""

Introduce `--ws-error-highlight=<kind>` option, that lets them pass
a comma separated list of `old`, `new`, and `context` to specify
what lines to highlight whitespace errors on.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",195,data/crawl/git/patch_1160.diff
https://github.com/git/git/commit/6bc0cb5176a5e42ca4a74e3558e8f0790ed09bb1,26 May 2015,"http-backend: spool ref negotiation requests to buffer

When http-backend spawns ""upload-pack"" to do ref
negotiation, it streams the http request body to
upload-pack, who then streams the http response back to the
client as it reads. In theory, git can go full-duplex; the
client can consume our response while it is still sending
the request.  In practice, however, HTTP is a half-duplex
protocol. Even if our client is ready to read and write
simultaneously, we may have other HTTP infrastructure in the
way, including the webserver that spawns our CGI, or any
intermediate proxies.

In at least one documented case[1], this leads to deadlock
when trying a fetch over http. What happens is basically:

  1. Apache proxies the request to the CGI, http-backend.

  2. http-backend gzip-inflates the data and sends
     the result to upload-pack.

  3. upload-pack acts on the data and generates output over
     the pipe back to Apache. Apache isn't reading because
     it's busy writing (step 1).

This works fine most of the time, because the upload-pack
output ends up in a system pipe buffer, and Apache reads
it as soon as it finishes writing. But if both the request
and the response exceed the system pipe buffer size, then we
deadlock (Apache blocks writing to http-backend,
http-backend blocks writing to upload-pack, and upload-pack
blocks writing to Apache).

We need to break the deadlock by spooling either the input
or the output. In this case, it's ideal to spool the input,
because Apache does not start reading either stdout _or_
stderr until we have consumed all of the input. So until we
do so, we cannot even get an error message out to the
client.

The solution is fairly straight-forward: we read the request
body into an in-memory buffer in http-backend, freeing up
Apache, and then feed the data ourselves to upload-pack. But
there are a few important things to note:

  1. We limit the in-memory buffer to prevent an obvious
     denial-of-service attack. This is a new hard limit on
     requests, but it's unlikely to come into play. The
     default value is 10MB, which covers even the ridiculous
     100,000-ref negotation in the included test (that
     actually caps out just over 5MB). But it's configurable
     on the off chance that you don't mind spending some
     extra memory to make even ridiculous requests work.

  2. We must take care only to buffer when we have to. For
     pushes, the incoming packfile may be of arbitrary
     size, and we should connect the input directly to
     receive-pack. There's no deadlock problem here, though,
     because we do not produce any output until the whole
     packfile has been read.

     For upload-pack's initial ref advertisement, we
     similarly do not need to buffer. Even though we may
     generate a lot of output, there is no request body at
     all (i.e., it is a GET, not a POST).

[1] http://article.gmane.org/gmane.comp.version-control.git/269020

Test-adapted-from: Dennis Kaarsemaker <dennis@kaarsemaker.net>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_1161.diff
https://github.com/git/git/commit/21758affae79a23e402c46cb375a0fd0407050c9,25 May 2015,"send_ref(): convert local variable ""peeled"" to object_id

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1162.diff
https://github.com/git/git/commit/363e98bfc27d810a0e41684b7744cc587c15c330,25 May 2015,"upload-pack: rewrite functions to take object_id arguments

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1163.diff
https://github.com/git/git/commit/e2b0bcdf4a1106342dd443b7f86aef63bbe54897,25 May 2015,"add_info_ref(): rewrite to take an object_id argument

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1164.diff
https://github.com/git/git/commit/6c4461e8d9d9f04920c53d98da9c4ed3bc42a237,25 May 2015,"builtin/show-ref: rewrite to take an object_id argument

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1165.diff
https://github.com/git/git/commit/635b99a0c715c87fe535b9174a453c2deec4566f,25 May 2015,"fsck: change functions to use object_id

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1166.diff
https://github.com/git/git/commit/d70d7a8a4d1e985dea02713a3b1fda3a08d4325e,25 May 2015,"show_reference(): rewrite to take an object_id argument

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1167.diff
https://github.com/git/git/commit/68ee628932c2196742b77d2961c5e16360734a62,23 May 2015,"upload-pack: optionally allow fetching reachable sha1

With uploadpack.allowReachableSHA1InWant configuration option set on the
server side, ""git fetch"" can make a request with a ""want"" line that names
an object that has not been advertised (likely to have been obtained out
of band or from a submodule pointer). Only objects reachable from the
branch tips, i.e. the union of advertised branches and branches hidden by
transfer.hideRefs, will be processed. Note that there is an associated
cost of having to walk back the history to check the reachability.

This feature can be used when obtaining the content of a certain commit,
for which the sha1 is known, without the need of cloning the whole
repository, especially if a shallow fetch is used. Useful cases are e.g.
repositories containing large files in the history, fetching only the
needed data for a submodule checkout, when sharing a sha1 without telling
which exact branch it belongs to and in Gerrit, if you think in terms of
commits instead of change numbers. (The Gerrit case has already been
solved through allowTipSHA1InWant as every Gerrit change has a ref.)

Signed-off-by: Fredrik Medley <fredrik.medley@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_1168.diff
https://github.com/git/git/commit/48c58471c2d4d7293272448a18801cd27555f6b5,22 May 2015,"sha1_name: refactor interpret_upstream_mark

Now that most of the logic for our local get_upstream_branch
has been pushed into the generic branch_get_upstream, we can
fold the remainder into interpret_upstream_mark.

Furthermore, what remains is generic to any branch-related
""@{foo}"" we might add in the future, and there's enough
boilerplate that we'd like to reuse it. Let's parameterize
the two operations (parsing the mark and computing its
value) so that we can reuse this for ""@{push}"" in the near
future.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1169.diff
https://github.com/git/git/commit/e291c75a95d60862cbe12897b5cffb01ba4cedd5,22 May 2015,"remote.c: add branch_get_push

In a triangular workflow, the place you pull from and the
place you push to may be different. As we have
branch_get_upstream for the former, this patch adds
branch_get_push for the latter (and as the former implements
@{upstream}, so will this implement @{push} in a future
patch).

Note that the memory-handling for the return value bears
some explanation. Some code paths require allocating a new
string, and some let us return an existing string. We should
provide a consistent interface to the caller, so it knows
whether to free the result or not.

We could do so by xstrdup-ing any existing strings, and
having the caller always free. But that makes us
inconsistent with branch_get_upstream, so we would prefer to
simply take ownership of the resulting string. We do so by
storing it inside the ""struct branch"", just as we do with
the upstream refname (in that case we compute it when the
branch is created, but there's no reason not to just fill
it in lazily in this case).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_1170.diff
https://github.com/git/git/commit/1ca41a19323d455cf0028001677f3adfae0d4cc4,22 May 2015,"remote.c: untangle error logic in branch_get_upstream

The error-diagnosis logic in branch_get_upstream was copied
straight from sha1_name.c in the previous commit. However,
because we check all error cases and upfront and then later
diagnose them, the logic is a bit tangled. In particular:

  - if branch->merge[0] is NULL, we may end up dereferencing
    it for an error message (in practice, it should never be
    NULL, so this is probably not a triggerable bug).

  - We may enter the code path because branch->merge[0]->dst
    is NULL, but we then start our error diagnosis by
    checking whether our local branch exists. But that is
    only relevant to diagnosing missing merge config, not a
    missing tracking ref; our diagnosis may hide the real
    problem.

Instead, let's just use a sequence of ""if"" blocks to check
for each error type, diagnose it, and return NULL.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1171.diff
https://github.com/git/git/commit/224147704a3696d396dae005c280f7a25de407c7,21 May 2015,"help: respect new common command grouping

'git help' shows common commands in alphabetical order:

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   [...]

without any indication of how commands relate to high-level
concepts or each other. Revise the output to explain their relationship
with the typical Git workflow:

  These are common Git commands used in various situations:

  start a working area (see also: git help tutorial)
     clone      Clone a repository into a new directory
     init       Create an empty Git repository or reinitialize [...]

  work on the current change (see also: git help everyday)
     add        Add file contents to the index
     reset      Reset current HEAD to the specified state

  examine the history and state (see also: git help revisions)
     log        Show commit logs
     status     Show the working tree status

     [...]

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Signed-off-by: Sébastien Guimmara <sebastien.guimmara@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1172.diff
https://github.com/git/git/commit/3a429d0af342d85ef6d561e3a60ae8793a34ae78,21 May 2015,"remote.c: report specific errors from branch_get_upstream

When the previous commit introduced the branch_get_upstream
helper, there was one call-site that could not be converted:
the one in sha1_name.c, which gives detailed error messages
for each possible failure.

Let's teach the helper to optionally report these specific
errors. This lets us convert another callsite, and means we
can use the helper in other locations that want to give the
same error messages.

The logic and error messages come straight from sha1_name.c,
with the exception that we start each error with a lowercase
letter, as is our usual style (note that a few tests need
updated as a result).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1173.diff
https://github.com/git/git/commit/122d53464b29d3ac20891c5ee2f75ac5ecbb7b20,20 May 2015,"cat-file: add --follow-symlinks to --batch

This wires the in-repo-symlink following code through to the cat-file
builtin.  In the event of an out-of-repo link, cat-file will print
the link in a new format.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",355,data/crawl/git/patch_1174.diff
https://github.com/git/git/commit/c4ec96774ba247597bc4c571d85069d225665422,20 May 2015,"sha1_name: get_sha1_with_context learns to follow symlinks

Wire up get_sha1_with_context to call get_tree_entry_follow_symlinks
when GET_SHA1_FOLLOW_SYMLINKS is passed in flags. G_S_FOLLOW_SYMLINKS
is incompatible with G_S_ONLY_TO_DIE because the diagnosis
that ONLY_TO_DIE triggers does not at present consider symlinks, and
it would be a significant amount of additional code to allow it to
do so.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1175.diff
https://github.com/git/git/commit/00b7cbfcb36b6679c64ad0566c0fc251f7e979fe,19 May 2015,"copy.c: make copy_fd() report its status silently

When copy_fd() function encounters errors, it emits error messages
itself, which makes it impossible for callers to take responsibility
for reporting errors, especially when they want to ignore certain
errors.

Move the error reporting to its callers in preparation.

 - copy_file() and copy_file_with_time() by indirection get their
   own calls to error().

 - hold_lock_file_for_append(), when told to die on error, used to
   exit(128) relying on the error message from copy_fd(), but now it
   does its own die() instead.  Note that the callers that do not
   pass LOCK_DIE_ON_ERROR need to be adjusted for this change, but
   fortunately there is none ;-)

 - filter_buffer_or_fd() has its own error() already, in addition to
   the message from copy_fd(), so this will change the output but
   arguably in a better way.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1176.diff
https://github.com/git/git/commit/838d6a928fc3aef3827d9a45e6aac044fea7451e,18 May 2015,"clean: only lstat files in pathspec

Even though ""git clean"" takes pathspec to limit the part of the
working tree to be cleaned, it checked the paths it encounters
during its directory traversal with lstat(2), before checking if
the path is within the pathspec.

Ignore paths outside pathspec and proceed without checking with
lstat(2).  Even if such a path is unreadable due to e.g. EPERM,
""git clean"" should not care.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1177.diff
https://github.com/git/git/commit/7253a02348c1c44c84f8a13309d6d30b443bf23c,15 May 2015,"http-backend: fix die recursion with custom handler

When we die() in http-backend, we call a custom handler that
writes an HTTP 500 response to stdout, then reports the
error to stderr. Our routines for writing out the HTTP
response may themselves die, leading to us entering die()
again.

When it was originally written, that was OK; our custom
handler keeps a variable to notice this and does not
recurse. However, since cd163d4 (usage.c: detect recursion
in die routines and bail out immediately, 2012-11-14), the
main die() implementation detects recursion before we even
get to our custom handler, and bails without printing
anything useful.

We can handle this case by doing two things:

  1. Installing a custom die_is_recursing handler that
     allows us to enter up to one level of recursion. Only
     the first call to our custom handler will try to write
     out the error response. So if we die again, that is OK.
     If we end up dying more than that, it is a sign that we
     are in an infinite recursion.

  2. Reporting the error to stderr before trying to write
     out the HTTP response. In the current code, if we do
     die() trying to write out the response, we'll exit
     immediately from this second die(), and never get a
     chance to output the original error (which is almost
     certainly the more interesting one; the second die is
     just going to be along the lines of ""I tried to write
     to stdout but it was closed"").

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1178.diff
https://github.com/git/git/commit/cb64800d83ace6fecb8701151cfdb6ed0712702c,13 May 2015,"add: check return value of launch_editor

When running ""add -e"", if launching the editor fails, we do
not notice and continue as if the output is what the user
asked for. The likely case is that the editor did not touch
the contents at all, and we end up adding everything.

Reported-by: Russ Cox <rsc@golang.org>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1179.diff
https://github.com/git/git/commit/c99fec6e35437f9db228c5a37c676faf844b3fa3,11 May 2015,"Sync with 2.3.8

Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/patch_1180.diff
https://github.com/git/git/commit/22aca1b3ac10af7188dccf033b44a36926f04d4b,11 May 2015,"Second batch for 2.5 cycle

Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_1181.diff
https://github.com/git/git/commit/c628edfddbf37eefab810a3107a2c32b45abaedc,11 May 2015,"reflog_expire(): integrate lock_ref_sha1_basic() errors into ours

Now that lock_ref_sha1_basic() gives us back its error messages via a
strbuf, incorporate its error message into our error message rather
than emitting two separate error messages.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",4,data/crawl/git/patch_1182.diff
https://github.com/git/git/commit/cbaabcbc6fa9568269d6baeccb0a621cd0413c6c,11 May 2015,"ref_transaction_commit(): provide better error messages

Now that lock_ref_sha1_basic() gives us back its error messages via a
strbuf, incorporate its error message into our error message rather
than emitting one error messages to stderr immediately and returning a
second to our caller.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",10,data/crawl/git/patch_1183.diff
https://github.com/git/git/commit/abeef9c85657fddf98f01c8479f1437719e95864,11 May 2015,"rename_ref(): integrate lock_ref_sha1_basic() errors into ours

Now that lock_ref_sha1_basic() gives us back its error messages via a
strbuf, incorporate its error message into our error message rather
than emitting two separate error messages.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",6,data/crawl/git/patch_1184.diff
https://github.com/git/git/commit/4a32b2e08be8daf965949956e8ea16718797a031,11 May 2015,"lock_ref_sha1_basic(): report errors via a ""struct strbuf *err""

For now, change the callers to spew the error to stderr like before.
But soon we will change them to incorporate the reason for the failure
into their own error messages.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",44,data/crawl/git/patch_1185.diff
https://github.com/git/git/commit/1146f17e2ce6054b502a46bafc102312c60a8380,11 May 2015,"verify_refname_available(): report errors via a ""struct strbuf *err""

It shouldn't be spewing errors directly to stderr.

For now, change its callers to spew the errors to stderr.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",50,data/crawl/git/patch_1186.diff
https://github.com/git/git/commit/e911104c84f2efd64aded6831bd7e6625c8a0fab,11 May 2015,"refs: check for D/F conflicts among refs created in a transaction

If two references that D/F conflict (e.g., ""refs/foo"" and
""refs/foo/bar"") are created in a single transaction, the old code
discovered the problem only after the ""commit"" phase of
ref_transaction_commit() had already begun. This could leave some
references updated and others not, which violates the promise of
atomicity.

Instead, check for such conflicts during the ""locking"" phase:

* Teach is_refname_available() to take an ""extras"" parameter that can
  contain extra reference names with which the specified refname must
  not conflict.

* Change lock_ref_sha1_basic() to take an ""extras"" parameter, which it
  passes through to is_refname_available().

* Change ref_transaction_commit() to pass ""affected_refnames"" to
  lock_ref_sha1_basic() as its ""extras"" argument.

This change fixes a test case in t1404.

This code is a bit stricter than it needs to be. We could conceivably
allow reference ""refs/foo/bar"" to be created in the same transaction
as ""refs/foo"" is deleted (or vice versa). But that would be
complicated to implement, because it is not possible to lock
""refs/foo/bar"" while ""refs/foo"" exists as a loose reference, but on
the other hand we don't want to delete some references before adding
others (because that could leave a gap during which required objects
are unreachable). There is also a complication that reflog files'
paths can conflict.

Any less-strict implementation would probably require tricks like the
packing of all references before the start of the real transaction, or
the use of temporary intermediate reference names.

So for now let's accept too-strict checks. Some reference update
transactions will be rejected unnecessarily, but they will be rejected
in their entirety rather than leaving the repository in an
intermediate state, as would happen now.

Please note that there is still one kind of D/F conflict that is *not*
handled correctly. If two processes are running at the same time, and
one tries to create ""refs/foo"" at the same time that the other tries
to create ""refs/foo/bar"", then they can race with each other. Both
processes can obtain their respective locks (""refs/foo.lock"" and
""refs/foo/bar.lock""), proceed to the ""commit"" phase of
ref_transaction_commit(), and then the slower process will discover
that it cannot rename its lockfile into place (after possibly having
committed changes to other references). There appears to be no way to
fix this race without changing the locking policy, which in turn would
require a change to *all* Git clients.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",158,data/crawl/git/patch_1187.diff
https://github.com/git/git/commit/61da59699263afcbf8f1e3c66763237fe35ba670,11 May 2015,"is_refname_available(): use dirname in first loop

In the first loop (over prefixes of refname), use dirname to keep
track of the current prefix. This is not an improvement in itself, but
in a moment we will start using dirname for a role where a
NUL-terminated string is needed.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",40,data/crawl/git/patch_1188.diff
https://github.com/git/git/commit/521331cc9f71515e214d0821a35cafd5c03eaad3,11 May 2015,"struct nonmatching_ref_data: store a refname instead of a ref_entry

Now that we don't need a ref_entry to pass to
report_refname_conflict(), it is sufficient to store the refname of
the conflicting reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",7,data/crawl/git/patch_1189.diff
https://github.com/git/git/commit/385e8af5a2d1056b75428eea810bce65d2c83363,11 May 2015,"report_refname_conflict(): inline function

It wasn't pulling its weight. And we are about to need code similar to
this where no ref_entry is available and with more diverse error
messages. Rather than try to generalize the function, just inline it.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",10,data/crawl/git/patch_1190.diff
https://github.com/git/git/commit/39e4ae388047bd7f6f3a4ad86ba5eba523dd0668,06 May 2015,"cat-file: teach cat-file a '--allow-unknown-type' option

'git cat-file' throws an error while trying to print the type or
size of a broken/corrupt object. This is because these objects are
usually of unknown types.

Teach git cat-file a '--allow-unknown-type' option where it prints
the type or size of a broken/corrupt object without throwing
an error.

Modify '-t' and '-s' options to call sha1_object_info_extended()
directly to support the '--allow-unknown-type' option.

Add documentation for 'cat-file --allow-unknown-type'.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>

cat-file: add documentation for '--allow-unknown-type' option.

Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_1191.diff
https://github.com/git/git/commit/46f034483eb9f88cf79cba8b76f085464287fc58,06 May 2015,"sha1_file: support reading from a loose object of unknown type

Update sha1_loose_object_info() to optionally allow it to read
from a loose object file of unknown/bogus type; as the function
usually returns the type of the object it read in the form of enum
for known types, add an optional ""typename"" field to receive the
name of the type in textual form and a flag to indicate the reading
of a loose object file of unknown/bogus type.

Add parse_sha1_header_extended() which acts as a wrapper around
parse_sha1_header() allowing more information to be obtained.

Add unpack_sha1_header_to_strbuf() to unpack sha1 headers of
unknown/corrupt objects which have a unknown sha1 header size to
a strbuf structure. This was written by Junio C Hamano but tested
by me.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Hepled-by: Jeff King <peff@peff.net>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",130,data/crawl/git/patch_1192.diff
https://github.com/git/git/commit/89c855ed3cbe64bea93ea081d0e96077e9ee8517,05 May 2015,"git-compat-util.h: implement a different ARRAY_SIZE macro for for safely deriving the size of array

To get number of elements in an array git use the ARRAY_SIZE macro
defined as:

       #define ARRAY_SIZE(x) (sizeof(x)/sizeof((x)[0]))

The problem with it is a possibility of mistakenly passing to it a
pointer instead an array. The ARRAY_SIZE macro as conventionally
defined does not provide good type-safety and the open-coded
approach is more fragile, more verbose and provides no improvement in
type-safety.

Use instead a different but compatible ARRAY_SIZE() macro,
which will also break compile if you try to
use it on a pointer. This implemention revert to the original code
if the compiler doesn't know the typeof and __builtin_types_compatible_p
GCC extensions.

This can ensure our code is robust to changes, without
needing a gratuitous macro or constant. A similar
ARRAY_SIZE implementation also exists in the linux kernel.

Credits to Rusty Russell and his ccan library.

Signed-off-by: Elia Pinto <gitter.spiros@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1193.diff
https://github.com/git/git/commit/95d621217a386b821d606168f986c89254584a87,04 May 2015,"config: use error() instead of fprintf(stderr, ...)

The die() / error() / warning() helpers put a fatal: / error: /
warning: prefix in front of the error message they print describing
the message's severity, which users are likely to be accustomed to
seeing these days.

This change will also be useful when marking the message for
translation: the argument to error() includes no newline at the end,
so it is less fussy for translators to translate without lines running
together in the translated output.

While we're here, start the error messages with a lowercase letter to
match the usual typography of error messages.

A quick web search and a code search at codesearch.debian.net finds no
scripts trying to parse these error messages, so this change should be
safe.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1194.diff
https://github.com/git/git/commit/d45366e8aa922037e7e84c3f35924d2b1399a453,29 Apr 2015,"merge: deprecate 'git merge <message> HEAD <commit>' syntax

We had this in ""git merge"" manual for eternity:

    'git merge' <msg> HEAD <commit>...

    [This] syntax (<msg> `HEAD` <commit>...) is supported for
    historical reasons.  Do not use it from the command line or in
    new scripts.  It is the same as `git merge -m <msg> <commit>...`.

With the update to ""git merge"" to make it understand what is
recorded in FETCH_HEAD directly, including Octopus merge cases, we
now can rewrite the use of this syntax in ""git pull"" with a simple
""git merge FETCH_HEAD"".

Also there are quite a few fallouts in the test scripts, and it
turns out that ""git cvsimport"" also uses this old syntax to record
a merge.

Judging from this result, I would not be surprised if dropping the
support of the old syntax broke scripts people have written and been
relying on for the past ten years.  But at least we can start the
deprecation process by throwing a warning message when the syntax is
used.

With luck, we might be able to drop the support in a few years.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1195.diff
https://github.com/git/git/commit/74e8bc59cb324d2d7a55c90195db004219770eec,29 Apr 2015,"merge: handle FETCH_HEAD internally

The collect_parents() function now is responsible for

 1. parsing the commits given on the command line into a list of
    commits to be merged;

 2. filtering these parents into independent ones; and

 3. optionally calling fmt_merge_msg() via prepare_merge_message()
    to prepare an auto-generated merge log message, using fake
    contents that FETCH_HEAD would have had if these commits were
    fetched from the current repository with ""git pull . $args...""

Make ""git merge FETCH_HEAD"" to be the same as the traditional

    git merge ""$(git fmt-merge-msg <.git/FETCH_HEAD)"" $commits

invocation of the command in ""git pull"", where $commits are the ones
that appear in FETCH_HEAD that are not marked as not-for-merge, by
making it do a bit more, specifically:

 - noticing ""FETCH_HEAD"" is the only ""commit"" on the command line
   and picking the commits that are not marked as not-for-merge as
   the list of commits to be merged (substitute for step #1 above);

 - letting the resulting list fed to step #2 above;

 - doing the step #3 above, using the contents of the FETCH_HEAD
   instead of fake contents crafted from the list of commits parsed
   in the step #1 above.

Note that this changes the semantics.  ""git merge FETCH_HEAD"" has
always behaved as if the first commit in the FETCH_HEAD file were
directly specified on the command line, creating a two-way merge
whose auto-generated merge log said ""merge commit xyz"".  With this
change, if the previous fetch was to grab multiple branches (e.g.
""git fetch $there topic-a topic-b""), the new world order is to
create an octopus, behaving as if ""git pull $there topic-a topic-b""
were run.  This is a deliberate change to make that happen, and
can be seen in the changes to t3033 tests.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/patch_1196.diff
https://github.com/git/git/commit/34349dbff8632c353f083959881e38e1c853abf8,29 Apr 2015,"merge: split reduce_parents() out of collect_parents()

The latter does two separate things:

 - Parse the list of commits on the command line, and formulate the
   list of commits to be merged (including the current HEAD);

 - Compute the list of parents to be recorded in the resulting merge
   commit.

Split the latter into a separate helper function, so that we can
later supply the list commits to be merged from a different source
(namely, FETCH_HEAD).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1197.diff
https://github.com/git/git/commit/eaa4e59c8545f61c6e61559df33dc4792e455d5a,29 Apr 2015,"merge: do not check argc to determine number of remote heads

To reject merging multiple commits into an unborn branch, we check
argc, thinking that collect_parents() that reads the remaining
command line arguments from <argc, argv> will give us the same
number of commits as its input, i.e. argc.

Because what we really care about is the number of commits, let the
function run and then make sure it returns only one commit instead.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1198.diff
https://github.com/git/git/commit/00c7e7e7e8a2aa07b2cd3a09c8f9e11872727d86,29 Apr 2015,"merge: simplify code flow

One of the first things cmd_merge() does is to see if the ""--abort""
option is given and run ""reset --merge"" and exit.  When the control
reaches this point, we know ""--abort"" was not given.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1199.diff
https://github.com/git/git/commit/0269f968b7effea8a4f61f1fb0ac7e9386a9d90c,20 Apr 2015,"log -L: improve error message on malformed argument

The old message did not mention the :regex:file form.

To avoid overly long lines, split the message into two lines (in case
item->string is long, it will be the only part truncated in a narrow
terminal).

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1200.diff
https://github.com/git/git/commit/c6458e60ed0f3e26a1df88bf5a3da8b091b0ce15,19 Apr 2015,"index-pack: kill union delta_base to save memory

Once we know the number of objects in the input pack, we allocate an
array of nr_objects of struct delta_entry. On x86-64, this struct is
32 bytes long. The union delta_base, which is part of struct
delta_entry, provides enough space to store either ofs-delta (8 bytes)
or ref-delta (20 bytes).

Because ofs-delta encoding is more efficient space-wise and more
performant at runtime than ref-delta encoding, Git packers try to use
ofs-delta whenever possible, and it is expected that objects encoded
as ref-delta are minority.

In the best clone case where no ref-delta object is present, we waste
(20-8) * nr_objects bytes because of this union. That's about 38MB out
of 100MB for deltas[] with 3.4M objects, or 38%. deltas[] would be
around 62MB without the waste.

This patch attempts to eliminate that. deltas[] array is split into
two: one for ofs-delta and one for ref-delta. Many functions are also
duplicated because of this split. With this patch, ofs_deltas[] array
takes 51MB. ref_deltas[] should remain unallocated in clone case (0
bytes). This array grows as we see ref-delta. We save about half in
this case, or 25% of total bookkeeping.

The saving is more than the calculation above because some padding in
the old delta_entry struct is removed. ofs_delta_entry is 16 bytes,
including the 4 bytes padding. That's 13MB for padding, but packing
the struct could break platforms that do not support unaligned
access. If someone on 32-bit is really low on memory and only deals
with packs smaller than 2G, using 32-bit off_t would eliminate the
padding and save 27MB on top.

A note about ofs_deltas allocation. We could use ref_deltas memory
allocation strategy for ofs_deltas. But that probably just adds more
overhead on top. ofs-deltas are generally the majority (1/2 to 2/3) in
any pack. Incremental realloc may lead to too many memcpy. And if we
preallocate, say 1/2 or 2/3 of nr_objects initially, the growth rate
of ALLOC_GROW() could make this array larger than nr_objects, wasting
more memory.

Brought-up-by: Matthew Sporleder <msporleder@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/patch_1201.diff
https://github.com/git/git/commit/03afcbee9b9246f5ec9b013f2a699b151f0ba7ab,16 Apr 2015,"read_packed_refs: avoid double-checking sane refs

Prior to d0f810f (refs.c: allow listing and deleting badly
named refs, 2014-09-03), read_packed_refs would barf on any
malformed refnames by virtue of calling create_ref_entry
with the ""check"" parameter set to 1. That commit loosened
our reading so that we call check_refname_format ourselves
and just set a REF_BAD_NAME flag.

We then call create_ref_entry with the check parameter set
to 0. That function learned to do an extra safety check even
when the check parameter is 0, so that we don't load any
dangerous refnames (like ""../../../etc/passwd""). This is
implemented by calling refname_is_safe() in
create_ref_entry().

However, we can observe that refname_is_safe() can only be
true if check_refname_format() also failed. So in the common
case of a sanely named ref, we perform _both_ checks, even
though we know that the latter will never trigger. This has
a noticeable performance impact when the packed-refs file is
large.

Let's drop the refname_is_safe check from create_ref_entry(),
and make it the responsibility of the caller.  Of the three
callers that pass a check parameter of ""0"", two will have
just called check_refname_format(), and can check the
refname-safety only when it fails. The third case,
pack_if_possible_fn, is copying from an existing ref entry,
which must have previously passed our safety check.

With this patch, running ""git rev-parse refs/heads/does-not-exist""
on a repo with a large (1.6GB) packed-refs file went from:

  real    0m6.768s
  user    0m6.340s
  sys     0m0.432s

to:

  real    0m5.703s
  user    0m5.276s
  sys     0m0.432s

for a wall-clock speedup of 15%.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1202.diff
https://github.com/git/git/commit/0cc30e0e842a25846e76e09f62a1d425a25ee556,16 Apr 2015,"strbuf_getwholeline: use getdelim if it is available

We spend a lot of time in strbuf_getwholeline in a tight
loop reading characters from a stdio handle into a buffer.
The libc getdelim() function can do this for us with less
overhead. It's in POSIX.1-2008, and was a GNU extension
before that. Therefore we can't rely on it, but can fall
back to the existing getc loop when it is not available.

The HAVE_GETDELIM knob is turned on automatically for Linux,
where we have glibc. We don't need to set any new
feature-test macros, because we already define _GNU_SOURCE.
Other systems that implement getdelim may need to other
macros (probably _POSIX_C_SOURCE >= 200809L), but we can
address that along with setting the Makefile knob after
testing the feature on those systems.

Running ""git rev-parse refs/heads/does-not-exist"" on a repo
with an extremely large (1.6GB) packed-refs file went from
(best-of-5):

  real    0m8.601s
  user    0m8.084s
  sys     0m0.524s

to:

  real    0m6.768s
  user    0m6.340s
  sys     0m0.432s

for a wall-clock speedup of 21%.

Based on a patch from Rasmus Villemoes <rv@rasmusvillemoes.dk>.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1203.diff
https://github.com/git/git/commit/85cb8906f0e9b5639230fe247d5d916db8806777,15 Apr 2015,"progress: no progress in background

Disable the display of the progress if stderr is not the
current foreground process.
Still display the final result when done.

Signed-off-by: Luke Mewburn <luke@mewburn.net>
Acked-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1204.diff
https://github.com/git/git/commit/afcb6ee30acf17f4e0338c49fbab301131abfbba,02 Apr 2015,"push --signed: tighten what the receiving end can ask to sign

Instead of blindly trusting the receiving side to give us a sensible
nonce to sign, limit the length (max 256 bytes) and the alphabet
(alnum and a few selected punctuations, enough to encode in base64)
that can be used in nonce.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1205.diff
https://github.com/git/git/commit/c8b8f22aa97a94dbad4fb7d8dcb2c5bf21c4fa32,02 Apr 2015,"send-pack: unify error messages for unsupported capabilities

If --signed is not supported, the error message names the remote
""receiving end"". If --atomic is not supported, the error message
names the remote ""server"". Unify the naming to ""receiving end""
as we're in the context of ""push"".

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1206.diff
https://github.com/git/git/commit/2b8bd44aaba66898a92e6dac5c285285d1b94ac2,02 Apr 2015,"howto: document more tools for recovery corruption

Long ago, I documented a corruption recovery I did and gave
some C code that I used to help find a flipped bit.  I had
to fix a similar case recently, and I ended up writing a few
more tools.  I hope nobody ever has to use these, but it
does not hurt to share them, just in case.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",237,data/crawl/git/patch_1207.diff
https://github.com/git/git/commit/319b678a7b7c7fd03242b2b91d936f65e798cd06,31 Mar 2015,"sha1_file: squelch ""packfile cannot be accessed"" warnings

When we find an object in a packfile index, we make sure we
can still open the packfile itself (or that it is already
open), as it might have been deleted by a simultaneous
repack. If we can't access the packfile, we print a warning
for the user and tell the caller that we don't have the
object (we can then look in other packfiles, or find a loose
version, before giving up).

The warning we print to the user isn't really accomplishing
anything, and it is potentially confusing to users. In the
normal case, it is complete noise; we find the object
elsewhere, and the user does not have to care that we racily
saw a packfile index that became stale. It didn't affect the
operation at all.

A possibly more interesting case is when we later can't find
the object, and report failure to the user. In this case the
warning could be considered a clue toward that ultimate
failure. But it's not really a useful clue in practice. We
wouldn't even print it consistently (since we are racing
with another process, we might not even see the .idx file,
or we might win the race and open the packfile, completing
the operation).

This patch drops the warning entirely (not only from the
fill_pack_entry site, but also from an identical use in
pack-objects). If we did find the warning interesting in the
error case, we could stuff it away and reveal it to the user
when we later die() due to the broken object. But that
complexity just isn't worth it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1208.diff
https://github.com/git/git/commit/06151739988601b0fe6179c6c67a0031b85b536f,26 Mar 2015,"diff-no-index: align D/F handling with that of normal Git

When a commit changes a path P that used to be a file to a directory
and creates a new path P/X in it, ""git show"" would say that file P
was removed and file P/X was created for such a commit.

However, if we compare two directories, D1 and D2, where D1 has a
file D1/P in it and D2 has a directory D2/P under which there is a
file D2/P/X, and ask ""git diff --no-index D1 D2"" to show their
differences, we simply get a refusal ""file/directory conflict"".

Surely, that may be what GNU diff does, but we can do better and it
is easy to do so.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1209.diff
https://github.com/git/git/commit/777c55a61615837d4391facd75cf334b96635801,24 Mar 2015,"report_path_error(): move to dir.c

The expected call sequence is for the caller to use match_pathspec()
repeatedly on a set of pathspecs, accumulating the ""hits"" in a
separate array, and then call this function to diagnose a pathspec
that never matched anything, as that can indicate a typo from the
command line, e.g. ""git commit Maekfile"".

Many builtin commands use this function from builtin/ls-files.c,
which is not a very healthy arrangement.  ls-files might have been
the first command to feel the need for such a helper, but the need
is shared by everybody who uses the ""match and then report"" pattern.

Move it to dir.c where match_pathspec() is defined.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_1210.diff
https://github.com/git/git/commit/c4ad00f8ccb59a0ae0735e8e32b203d4bd835616,28 Jul 2014,"add object_as_type helper for casting objects

When we call lookup_commit, lookup_tree, etc, the logic goes
something like:

  1. Look for an existing object struct. If we don't have
     one, allocate and return a new one.

  2. Double check that any object we have is the expected
     type (and complain and return NULL otherwise).

  3. Convert an object with type OBJ_NONE (from a prior
     call to lookup_unknown_object) to the expected type.

We can encapsulate steps 2 and 3 in a helper function which
checks whether we have the expected object type, converts
OBJ_NONE as appropriate, and returns the object.

Not only does this shorten the code, but it also provides
one central location for converting OBJ_NONE objects into
objects of other types. Future patches will use that to
enforce type-specific invariants.

Since this is a refactoring, we would want it to behave
exactly as the current code. It takes a little reasoning to
see that this is the case:

  - for lookup_{commit,tree,etc} functions, we are just
    pulling steps 2 and 3 into a function that does the same
    thing.

  - for the call in peel_object, we currently only do step 3
    (but we want to consolidate it with the others, as
    mentioned above). However, step 2 is a noop here, as the
    surrounding conditional makes sure we have OBJ_NONE
    (which we want to keep to avoid an extraneous call to
    sha1_object_info).

  - for the call in lookup_commit_reference_gently, we are
    currently doing step 2 but not step 3. However, step 3
    is a noop here. The object we got will have just come
    from deref_tag, which must have figured out the type for
    each object in order to know when to stop peeling.
    Therefore the type will never be OBJ_NONE.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_1211.diff
https://github.com/git/git/commit/b66103c3baa593a39b8b0751213b9fce60e94de4,13 Jun 2014,"convert logmsg_reencode to get_commit_buffer

Like the callsites in the previous commit, logmsg_reencode
already falls back to read_sha1_file when necessary.
However, I split its conversion out into its own commit
because it's a bit more complex.

We return either:

  1. The original commit->buffer

  2. A newly allocated buffer from read_sha1_file

  3. A reencoded buffer (based on either 1 or 2 above).

while trying to do as few extra reads/allocations as
possible. Callers currently free the result with
logmsg_free, but we can simplify this by pointing them
straight to unuse_commit_buffer. This is a slight layering
violation, in that we may be passing a buffer from (3).
However, since the end result is to free() anything except
(1), which is unlikely to change, and because this makes the
interface much simpler, it's a reasonable bending of the
rules.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_1212.diff
https://github.com/git/git/commit/152ff1ccebd822fd97f27d2a6c3fa2058f088fd8,13 Jun 2014,"provide helpers to access the commit buffer

Many sites look at commit->buffer to get more detailed
information than what is in the parsed commit struct.
However, we sometimes drop commit->buffer to save memory,
in which case the caller would need to read the object
afresh. Some callers do this (leading to duplicated code),
and others do not (which opens the possibility of a segfault
if somebody else frees the buffer).

Let's provide a pair of helpers, ""get"" and ""unuse"", that let
callers easily get the buffer. They will use the cached
buffer when possible, and otherwise load from disk using
read_sha1_file.

Note that we also need to add a ""get_cached"" variant which
returns NULL when we do not have a cached buffer. At first
glance this seems to defeat the purpose of ""get"", which is
to always provide a return value. However, some log code
paths actually use the NULL-ness of commit->buffer as a
boolean flag to decide whether to try printing the
commit. At least for now, we want to continue supporting
that use.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1213.diff
https://github.com/git/git/commit/0fb370da9ca972f9571530f95c0dacb31368c280,13 Jun 2014,"provide a helper to free commit buffer

This converts two lines into one at each caller. But more
importantly, it abstracts the concept of freeing the buffer,
which will make it easier to change later.

Note that we also need to provide a ""detach"" mechanism for a
tricky case in index-pack. We are passed a buffer for the
object generated by processing the incoming pack. If we are
not using --strict, we just calculate the sha1 on that
buffer and return, leaving the caller to free it.  But if we
are using --strict, we actually attach that buffer to an
object, pass the object to the fsck functions, and then
detach the buffer from the object again (so that the caller
can free it as usual).  In this case, we don't want to free
the buffer ourselves, but just make sure it is no longer
associated with the commit.

Note that we are making the assumption here that the
attach/detach process does not impact the buffer at all
(e.g., it is never reallocated or modified). That holds true
now, and we have no plans to change that. However, as we
abstract the commit_buffer code, this dependency becomes
less obvious. So when we detach, let's also make sure that
we get back the same buffer that we gave to the
commit_buffer code.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1214.diff
https://github.com/git/git/commit/e3fa568cb397a78a56716137c826f21f5e0b0a77,09 Jun 2014,"revision: parse ""git log -<count>"" more carefully

This mistyped command line simply ignores ""master"" and ends up
showing two commits from the current HEAD:

    $ git log -2master

because we feed ""2master"" to atoi() without making sure that the
whole string is parsed as an integer.

Use the strtol_i() helper function instead.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1215.diff
https://github.com/git/git/commit/62aad1849f3009d1e6c7126a321e5515c1543dc3,27 May 2014,"gc --auto: do not lock refs in the background

9f673f9 (gc: config option for running --auto in background -
2014-02-08) puts ""gc --auto"" in background to reduce user's wait
time. Part of the garbage collecting is pack-refs and pruning
reflogs. These require locking some refs and may abort other processes
trying to lock the same ref. If gc --auto is fired in the middle of a
script, gc's holding locks in the background could fail the script,
which could never happen before 9f673f9.

Keep running pack-refs and ""reflog --prune"" in foreground to stop
parallel ref updates. The remaining background operations (repack,
prune and rerere) should not impact running git processes.

Reported-by: Adam Borowski <kilobyte@angband.pl>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1216.diff
https://github.com/git/git/commit/b07bdd3472886cbdd412ee3e7489273522c43133,23 May 2014,"remote rm: delete remote configuration as the last

When removing a remote, delete the remote-tracking branches before
deleting the remote configuration.  This way, if the operation fails or
is aborted while deleting the remote-tracking branches, the command can
be rerun to complete the operation.

Signed-off-by: Jens LindstrÃ¶m <jl@opera.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1217.diff
https://github.com/git/git/commit/b2c851a8e67da752d8a5dbde5a9dae6e3428a4c9,20 May 2014,"Revert ""Merge branch 'jc/graduate-remote-hg-bzr' (early part)""

Instead of showing a warning and working as before, fail and show
the message and force immediate upgrade from their upstream
repositories when these tools are run, per request from their
primary author.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4447,data/crawl/git/patch_1218.diff
https://github.com/git/git/commit/dd63f169d9381a77db469325688a2bef1a79a9e1,20 May 2014,"move ""--follow needs one pathspec"" rule to diff_setup_done

Because of the way ""--follow"" is implemented, we must have
exactly one pathspec. ""git log"" enforces this restriction,
but other users of the revision traversal code do not. For
example, ""git format-patch --follow"" will segfault during
try_to_follow_renames, as we have no pathspecs at all.

We can push this check down into diff_setup_done, which is
probably a better place anyway. It is the diff code that
introduces this restriction, so other parts of the code
should not need to care themselves.

Reported-by: ""Michael S. Tsirkin"" <mst@redhat.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1219.diff
https://github.com/git/git/commit/77583e7739c76f623f49681c9ee4d10a313fe786,12 May 2014,"index-pack: distinguish missing objects from type errors

When we fetch a pack that does not contain an object we
expected to receive, we get an error like:

  $ git init --bare tmp.git && cd tmp.git
  $ git fetch ../parent.git
  [...]
  error: Could not read 964953ec7bcc0245cb1d0db4095455edd21a2f2e
  fatal: Failed to traverse parents of commit b8247b40caf6704fe52736cdece6d6aae87471aa
  error: ../parent.git did not send all necessary objects

This comes from the check_everything_connected rev-list. If
we try cloning the same repo (rather than a fetch), we end
up using index-pack's --check-self-contained-and-connected
option instead, which produces output like:

  $ git clone --no-local --bare parent.git tmp.git
  [...]
  fatal: object of unexpected type
  fatal: index-pack failed

Not only is the sha1 missing, but it's a misleading message.
There's no type problem, but rather a missing object
problem; we don't notice the difference because we simply
compare OBJ_BAD != OBJ_BLOB.  Let's provide a different
message for this case:

  $ git clone --no-local --bare parent.git tmp.git
  fatal: did not receive expected object 6b00a8c61ed379d5f925a72c1987c9c52129d364
  fatal: index-pack failed

While we're at it, let's also improve a true type mismatch
error to look like

  fatal: object 6b00a8c61ed379d5f925a72c1987c9c52129d364: expected type blob, got tree

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1220.diff
https://github.com/git/git/commit/076cbd6341182d296671cb101c75145eb3bfda0a,28 Apr 2014,"commit: do not complain of empty messages from -C

When we pick another commit's message, we die() immediately
if we find that it's empty and we are not going to run an
editor (i.e., when running ""-C"" instead of ""-c"").  However,
this check is redundant and harmful.

It's redundant because we will already notice the empty
message later, after we would have run the editor, and die
there (just as we would for a regular, not ""-C"" case, where
the user provided an empty message in the editor).

It's harmful for a few reasons:

  1. It does not respect --allow-empty-message. As a result,
     a ""git rebase -i"" cannot ""pick"" such a commit. So you
     cannot even go back in time to fix it with a ""reword""
     or ""edit"" instruction.

  2. It does not take into account other ways besides the
     editor to modify the message. For example, ""git commit
     -C empty-commit -m foo"" could take the author
     information from empty-commit, but add a message to it.
     There's more to do to make that work correctly (and
     right now we explicitly forbid ""-C with -m""), but this
     removes one roadblock.

  3. The existing check is not enough to prevent segfaults.
     We try to find the ""\n\n"" header/body boundary in the
     commit. If it is at the end of the string (i.e., no
     body), _or_ if we cannot find it at all (i.e., a
     truncated commit object), we consider the message
     empty. With ""-C"", that's OK; we die in either case. But
     with ""-c"", we continue on, and in the case of a
     truncated commit may end up dereferencing NULL+2.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1221.diff
https://github.com/git/git/commit/39539495acb24abfb4dee551e3e9f2e696be7abf,16 Apr 2014,"index-pack: work around thread-unsafe pread()

Multi-threaing of index-pack was disabled with c0f8654
(index-pack: Disable threading on cygwin - 2012-06-26), because
pread() implementations for Cygwin and MSYS were not thread
safe.  Recent Cygwin does offer usable pread() and we enabled
multi-threading with 103d530f (Cygwin 1.7 has thread-safe pread,
2013-07-19).

Work around this problem on platforms with a thread-unsafe
pread() emulation by opening one file handle per thread; it
would prevent parallel pread() on different file handles from
stepping on each other.

Also remove NO_THREAD_SAFE_PREAD that was introduced in c0f8654
because it's no longer used anywhere.

This workaround is unconditional, even for platforms with
thread-safe pread() because the overhead is small (a couple file
handles more) and not worth fragmenting the code.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Tested-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1222.diff
https://github.com/git/git/commit/9aa91af0361e3c32fde5f8388dee963838308cd6,10 Apr 2014,"wrapper.c: add xpread() similar to xread()

It is a common mistake to call read(2)/pread(2) and forget to
anticipate that they may return error with EAGAIN/EINTR when the
system call is interrupted.

We have xread() helper to relieve callers of read(2) from having to
worry about it; add xpread() helper to do the same for pread(2).

Update the caller in the builtin/index-pack.c and the mmap emulation
in compat/.

Signed-off-by: Yiannis Marangos <yiannis.marangos@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1223.diff
https://github.com/git/git/commit/1d2f393ac9bfb4c20f14d6ead7bb4c56e766ab77,07 Apr 2014,"status/commit: show staged submodules regardless of ignore config

Currently setting submodule.<name>.ignore and/or diff.ignoreSubmodules to
""all"" suppresses all output of submodule changes for the diff family,
status and commit. For status and commit this is really confusing, as it
even when the user chooses to record a new commit for an ignored submodule
by adding it manually this change won't show up under the to-be-committed
changes. To add insult to injury, a later ""git commit"" will error out with
""nothing to commit"" when only ignored submodules are staged.

Fix that by making wt_status always print staged submodule changes, no
matter what ignore settings are configured. The only exception is when the
user explicitly uses the ""--ignore-submodules=all"" command line option, in
that case the submodule output is still suppressed. This also makes ""git
commit"" work again when only modifications of ignored submodules are
staged, as that command uses the ""commitable"" member of the wt_status
struct to determine if staged changes are present. But this only happens
when the commit command uses the wt_status* functions to produce status
output for human consumption (when forking an editor or with --dry-run),
in all other cases (e.g. when run in a script with '-m') another code path
is taken which uses index_differs_from() to determine if any changes are
staged which still ignores submodules according to their configuration.
This will be fixed in a follow-up commit.

Change t7508 to reflect this new behavior and add three new tests to show
that a single staged submodule configured to be ignored will be committed
when the status output is generated and won't be if not. Also update the
documentation of the ignore config options accordingly.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_1224.diff
https://github.com/git/git/commit/2db1a43f41880bb4aeea9dee8a7d13c5ad76db3f,04 Apr 2014,"add `ignore_missing_links` mode to revwalk

When pack-objects is computing the reachability bitmap to
serve a fetch request, it can erroneously die() if some of
the UNINTERESTING objects are not present. Upload-pack
throws away HAVE lines from the client for objects we do not
have, but we may have a tip object without all of its
ancestors (e.g., if the tip is no longer reachable and was
new enough to survive a `git prune`, but some of its
reachable objects did get pruned).

In the non-bitmap case, we do a revision walk with the HAVE
objects marked as UNINTERESTING. The revision walker
explicitly ignores errors in accessing UNINTERESTING commits
to handle this case (and we do not bother looking at
UNINTERESTING trees or blobs at all).

When we have bitmaps, however, the process is quite
different.  The bitmap index for a pack-objects run is
calculated in two separate steps:

First, we perform an extensive walk from all the HAVEs to
find the full set of objects reachable from them. This walk
is usually optimized away because we are expected to hit an
object with a bitmap during the traversal, which allows us
to terminate early.

Secondly, we perform an extensive walk from all the WANTs,
which usually also terminates early because we hit a commit
with an existing bitmap.

Once we have the resulting bitmaps from the two walks, we
AND-NOT them together to obtain the resulting set of objects
we need to pack.

When we are walking the HAVE objects, the revision walker
does not know that we are walking it only to mark the
results as uninteresting. We strip out the UNINTERESTING flag,
because those objects _are_ interesting to us during the
first walk. We want to keep going to get a complete set of
reachable objects if we can.

We need some way to tell the revision walker that it's OK to
silently truncate the HAVE walk, just like it does for the
UNINTERESTING case. This patch introduces a new
`ignore_missing_links` flag to the `rev_info` struct, which
we set only for the HAVE walk.

It also adds tests to cover UNINTERESTING objects missing
from several positions: a missing blob, a missing tree, and
a missing parent commit. The missing blob already worked (as
we do not care about its contents at all), but the other two
cases caused us to die().

Note that there are a few cases we do not need to test:

  1. We do not need to test a missing tree, with the blob
     still present. Without the tree that refers to it, we
     would not know that the blob is relevant to our walk.

  2. We do not need to test a tip commit that is missing.
     Upload-pack omits these for us (and in fact, we
     complain even in the non-bitmap case if it fails to do
     so).

Reported-by: Siddharth Agarwal <sid0@fb.com>
Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1225.diff
https://github.com/git/git/commit/2f91649a9ba7c590be4f1ce66521b21e305fb7bc,03 Apr 2014,"Start preparing for 1.9.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1226.diff
https://github.com/git/git/commit/235e8d591480d7e1378c27fe65c5529625d4b5be,31 Mar 2014,"code and test: fix misuses of ""nor""

Signed-off-by: Justin Lebar <jlebar@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1227.diff
https://github.com/git/git/commit/e6f637122ecd60c59df27b8188b6ddac39ac0063,26 Mar 2014,"fetch: handle overlaping refspecs on --prune

We need to consider that a remote-tracking branch may match more than
one rhs of a fetch refspec. In such a case, it is not enough to stop at
the first match but look at all of the matches in order to determine
whether a head is stale.

To this goal, introduce a variant of query_refspecs which returns all of
the matching refspecs and loop over those answers to check for
staleness.

Signed-off-by: Carlos Martín Nieto <cmn@elego.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_1228.diff
https://github.com/git/git/commit/1b32decefd840e0ca5d18eefd6472fd8624dd849,25 Mar 2014,"log: add --show-linear-break to help see non-linear history

Option explanation is in rev-list-options.txt. The interaction with -z
is left undecided.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1229.diff
https://github.com/git/git/commit/63b52afaa88bf89c781fe11c6803ff1dcc47d424,24 Mar 2014,"pickaxe: merge diffcore_pickaxe_grep() and diffcore_pickaxe_count() into diffcore_pickaxe()

diffcore_pickaxe_count() initializes the regular expression or kwset for
the search term, calls pickaxe() with the callback has_changes() and
cleans up afterwards.  diffcore_pickaxe_grep() does the same, only it
doesn't support kwset and uses the callback diff_grep() instead.  Merge
the two functions to form the new diffcore_pickaxe() and thus get rid of
the duplicate regex setup and cleanup code.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1230.diff
https://github.com/git/git/commit/9fe0cf3a5ee01ebe0c323789cce3916b443980dc,24 Mar 2014,"branch.c: install_branch_config: simplify if chain

Simplify if chain in install_branch_config().

Signed-off-by: Adam <Adam@sigterm.info>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1231.diff
https://github.com/git/git/commit/b6c2a0d45d4165dfd326bd7a28e66d9cedb8ae84,24 Mar 2014,"parse-options: make sure argh string does not have SP or _

We encourage to spell an argument hint that consists of multiple
words as a single-token separated with dashes.  In order to help
catching violations added by new callers of parse-options, make sure
argh does not contain SP or _ when the code validates the option
definitions.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1232.diff
https://github.com/git/git/commit/ec160ae12b0ae938ed5076b9f604e88976fc429c,24 Mar 2014,"update-index: teach --cacheinfo a new syntax ""mode,sha1,path""

The ""--cacheinfo"" option is unusual in that it takes three option
parameters.  An option with an optional parameter is bad enough.  An
option with multiple parameters is simply insane.

Introduce a new syntax that takes these three things concatenated
together with a comma, which makes the command line syntax more
uniform across subcommands, while retaining the traditional syntax
for backward compatiblity.

If we were designing the ""update-index"" subcommand from scratch
today, it may probably have made sense to make this option (and
possibly others) a command mode option that does not take any option
parameter (hence no need for arg-help).  But we do not live in such
an ideal world, and as far as I can tell, the command still supports
(and must support) mixed command modes in a single invocation, e.g.

    $ git update-index path1 --add path2 \
        --cacheinfo 100644 $(git hash-object --stdin -w <path3) path3 \
	path4

must make sure path1 is already in the index and update all of these
four paths.  So this is probably as far as we can go to fix this issue
without risking to break people's existing scripts.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1233.diff
https://github.com/git/git/commit/3f09db07b3dc0758756fad73c96abd0e47cbcd1b,21 Mar 2014,Update draft release notes to 2.0,28,data/crawl/git/patch_1234.diff
https://github.com/git/git/commit/512477b175288a429aaf4071dc9fe94f17f0e4ee,19 Mar 2014,"tests: use ""env"" to run commands with temporary env-var settings

Ordinarily, we would say ""VAR=VAL command"" to execute a tested
command with environment variable(s) set only for that command.
This however does not work if 'command' is a shell function (most
notably 'test_must_fail'); the result of the assignment is retained
and affects later commands.

To avoid this, we used to assign and export environment variables
and run such a test in a subshell, like so:

        (
                VAR=VAL && export VAR &&
                test_must_fail git command to be tested
        )

But with ""env"" utility, we should be able to say:

        test_must_fail env VAR=VAL git command to be tested

which is much shorter and easier to read.

Signed-off-by: David Tran <unsignedzero@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",194,data/crawl/git/patch_1235.diff
https://github.com/git/git/commit/373c67da1df7fcd33593ca26e6d67f177152b21a,17 Mar 2014,"pack-objects: turn off bitmaps when skipping objects

The pack bitmap format requires that we have a single bit
for each object in the pack, and that each object's bitmap
represents its complete set of reachable objects. Therefore
we have no way to represent the bitmap of an object which
references objects outside the pack.

We notice this problem while generating the bitmaps, as we
try to find the offset of a particular object and realize
that we do not have it. In this case we die, and neither the
bitmap nor the pack is generated. This is correct, but
perhaps a little unfriendly. If you have bitmaps turned on
in the config, many repacks will fail which would otherwise
succeed. E.g., incremental repacks, repacks with ""-l"" when
you have alternates, "".keep"" files.

Instead, this patch notices early that we are omitting some
objects from the pack and turns off bitmaps (with a
warning). Note that this is not strictly correct, as it's
possible that the object being omitted is not reachable from
any other object in the pack. In practice, this is almost
never the case, and there are two advantages to doing it
this way:

  1. The code is much simpler, as we do not have to cleanly
     abort the bitmap-generation process midway through.

  2. We do not waste time partially generating bitmaps only
     to find out that some object deep in the history is not
     being packed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1236.diff
https://github.com/git/git/commit/78d2214eb4d10ea1e30dd7e69a4e6d73d9f66164,17 Mar 2014,"pack-objects: show reused packfile objects in ""Counting objects""

When we are sending a pack for push or fetch, we may reuse a
chunk of packfile without even parsing it. The progress
meter then looks like this:

  Reusing existing pack: 3440489, done.
  Counting objects: 3, done.

The first line shows that we are reusing a large chunk of
objects, and then we further count any objects not included
in the reused portion with an actual traversal.

These are all implementation details that the user does not
need to care about. Instead, we can show the reused objects
in the normal ""counting..."" progress meter (which will
simply go much faster than normal), and then continue to add
to it as we traverse.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1237.diff
https://github.com/git/git/commit/2f29e0c6fa5d312c4e0675b0dd23d3126b9f55fa,13 Mar 2014,"entry.c: fix possible buffer overflow in remove_subtree()

remove_subtree() manipulated path in a fixed-size buffer even though
the length of the input, let alone the length of entries within the
directory, were not known in advance.  Change the function to take a
strbuf argument and use that object as its scratch space.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1238.diff
https://github.com/git/git/commit/f63272a35e03a9895c468d1a698dabaa4c3d9273,13 Mar 2014,"checkout_entry(): use the strbuf throughout the function

There is no need to break out the ""buf"" and ""len"" members into
separate temporary variables.  Rename path_buf to path and use
path.buf and path.len directly.  This makes it easier to reason about
the data flow in the function.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1239.diff
https://github.com/git/git/commit/8f17f5b22ae54ecc3dfdafe33d7697e1bf3949f6,12 Mar 2014,"wt-status: i18n of section labels

The original code assumes that:

 (1) the number of bytes written is the width of a string, so they
     can line up;

 (2) the ""how"" string is always <= 19 bytes.

Neither of which we should assume.

Using the same approach as the earlier 3651e45c (wt-status: take the
alignment burden off translators, 2013-11-05), compute the necessary
column width to hold the longest label and use that for alignment.

cf. http://bugs.debian.org/725777

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Helped-by: Sandy Carter
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1240.diff
https://github.com/git/git/commit/b790e0f67cd97f29b72cb9007632b0329e5eebec,11 Mar 2014,"upload-pack: send shallow info over stdin to pack-objects

Before cdab485 (upload-pack: delegate rev walking in shallow fetch to
pack-objects - 2013-08-16) upload-pack does not write to the source
repository. cdab485 starts to write $GIT_DIR/shallow_XXXXXX if it's a
shallow fetch, so the source repo must be writable.

git:// servers do not need write access to repos and usually don't
have it, which means cdab485 breaks shallow clone over git://

Instead of using a temporary file as the media for shallow points, we
can send them over stdin to pack-objects as well. Prepend shallow
SHA-1 with --shallow so pack-objects knows what is what.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1241.diff
https://github.com/git/git/commit/303d1d0bd660b56d25ac6016c085bb3856b08203,06 Mar 2014,"branch: use skip_prefix() in install_branch_config()

The install_branch_config() function reimplemented the skip_prefix()
function inline.

Reported-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Brian Gesiak <modocache@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1242.diff
https://github.com/git/git/commit/f7ade3d36bdffe79c12b563154028f700bb8ed3d,05 Mar 2014,"match_explicit: hoist refspec lhs checks into their own function

In preparation for being able to check the left-hand side of
our push refspecs separately, this pulls the examination of
them out into its own function. There should be no behavior
change.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1243.diff
https://github.com/git/git/commit/9ef5e2a7223fbabf6a29946c1c120bc2c3c6cf86,05 Mar 2014,"branch.c: delete size check of newly tracked branch names

Since commit 6f084a56 the length of a newly tracked branch name was limited
to 1019 = 1024 - 7 - 7 - 1 characters, a bound derived by having to store
this name in a char[1024] called key with two strings of length at most 7
and a '\0' character.

This was no longer necessary as of commit a9f2c136, which uses a strbuf
(documented in Documentation/technical/api-strbuf.txt) to store this value.

Remove this unneeded check to allow branch names longer than 1019
characters.

Signed-off-by: Jacopo Notarstefano <jacopo.notarstefano@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1244.diff
https://github.com/git/git/commit/5889271114a25b6750bb6137784ae5a93df22b39,03 Mar 2014,"finish_tmp_packfile():use strbuf for pathname construction

The old version fixes a maximum length on the buffer, which could be a problem
if one is not certain of the length of get_object_directory().
Using strbuf can avoid the protential bug.

Helped-by: Michael Haggerty <mhagger@alum.mit.edu>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Sun He <sunheehnus@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_1245.diff
https://github.com/git/git/commit/9ef176b55c373ba087b2d84e77b5713578891927,27 Feb 2014,"tag: support --sort=<spec>

--sort=version:refname (or --sort=v:refname for short) sorts tags as
if they are versions. --sort=-refname reverses the order (with or
without "":version"").

versioncmp() is copied from string/strverscmp.c in glibc commit
ee9247c38a8def24a59eb5cfb7196a98bef8cfdc, reformatted to Git coding
style. The implementation is under LGPL-2.1 and according to [1] I can
relicense it to GPLv2.

[1] http://www.gnu.org/licenses/gpl-faq.html#AllCompatibility

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",216,data/crawl/git/patch_1246.diff
https://github.com/git/git/commit/0179c945fce361c56b465e8a3f0fdf0962a816a1,27 Feb 2014,"shallow: automatically clean up shallow tempfiles

We sometimes write tempfiles of the form ""shallow_XXXXXX""
during fetch/push operations with shallow repositories.
Under normal circumstances, we clean up the result when we
are done. However, we do no take steps to clean up after
ourselves when we exit due to die() or signal death.

This patch teaches the tempfile creation code to register
handlers to clean up after ourselves. To handle this, we
change the ownership semantics of the filename returned by
setup_temporary_shallow. It now keeps a copy of the filename
itself, and returns only a const pointer to it.

We can also do away with explicit tempfile removal in the
callers. They all exit not long after finishing with the
file, so they can rely on the auto-cleanup, simplifying the
code.

Note that we keep things simple and maintain only a single
filename to be cleaned. This is sufficient for the current
caller, but we future-proof it with a die(""BUG"").

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_1247.diff
https://github.com/git/git/commit/0cc77c386cea7afebb54a5e7263ca37569ecfe7a,27 Feb 2014,"shallow: use stat_validity to check for up-to-date file

When we are about to write the shallow file, we check that
it has not changed since we last read it. Instead of
hand-rolling this, we can use stat_validity. This is built
around the index stat-check, so it is more robust than just
checking the mtime, as we do now (it uses the same check as
we do for index files).

The new code also handles the case of a shallow file
appearing unexpectedly. With the current code, two
simultaneous processes making us shallow (e.g., two ""git
fetch --depth=1"" running at the same time in a non-shallow
repository) can race to overwrite each other.

As a bonus, we also remove a race in determining the stat
information of what we read (we stat and then open, leaving
a race window; instead we should open and then fstat the
descriptor).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1248.diff
https://github.com/git/git/commit/3c09d6845d253f9d8a75f3a36278c69e01b073e9,24 Feb 2014,"read-cache: add index.version config variable

Add a config variable that allows setting the default index version when
initializing a new index file.  Similar to the GIT_INDEX_VERSION
environment variable this only affects new index files.

Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1249.diff
https://github.com/git/git/commit/136347d718320c56030e3b7a3437259e99c4c41b,24 Feb 2014,"introduce GIT_INDEX_VERSION environment variable

Respect a GIT_INDEX_VERSION environment variable, when a new index is
initialized.  Setting the environment variable will not cause existing
index files to be converted to another format, but will only affect
newly written index files.  This can be used to initialize repositories
with index-v4.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_1250.diff
https://github.com/git/git/commit/ff8802283f78e02ccd5d450ccf0ac434bc6258c7,20 Feb 2014,"Revert ""test-wildmatch: add ""perf"" command to compare wildmatch and fnmatch""

This reverts commit 1b25892636d2f250eb2163301440ee8c8c1ac944. compat
fnmatch will be removed soon and we can't rely on fnmatch() available
everywhere.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1251.diff
https://github.com/git/git/commit/ce8daa1eb863c9cdefb06feae2ee7c742ea89847,20 Feb 2014,"notes: disallow reusing non-blob as a note object

Currently ""git notes add -C $object"" will read the raw bytes from $object,
and then copy those bytes into the note object, which is hardcoded to be
of type blob. This means that if the given $object is a non-blob (e.g.
tree or commit), the raw bytes from that object is copied into a blob
object. This is probably not useful, and certainly not what any sane
user would expect. So disallow it, by erroring out if the $object passed
to the -C option is not a blob.

The fix also applies to the -c option (in which the user is prompted to
edit/verify the note contents in a text editor), and also when -c/-C is
passed to ""git notes append"" (which appends the $object contents to an
existing note object). In both cases, passing a non-blob $object does not
make sense.

Also add a couple of tests demonstrating expected behavior.

Suggested-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1252.diff
https://github.com/git/git/commit/3caec73b5568341c5d8f303692423a8e9fb0cb39,19 Feb 2014,"config: teach ""git config --file -"" to read from the standard input

The patch extends git config --file interface to allow read config from
stdin.

Editing stdin or setting value in stdin is an error.

Include by absolute path is allowed in stdin config, but not by relative
path.

Signed-off-by: Kirill A. Shutemov <kirill@shutemov.name>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",86,data/crawl/git/patch_1253.diff
https://github.com/git/git/commit/fcef9312a4ad3d94bfa2d02c41e46eb6adcde9b1,18 Feb 2014,"wt-status.c: move cut-line print code out to wt_status_add_cut_line

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1254.diff
https://github.com/git/git/commit/475c52b7ac59bb5d2f955bd68c069622d9575d50,13 Feb 2014,"Sync with 1.8.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_1255.diff
https://github.com/git/git/commit/7bbc4e8fdb33e0a8e42e77cc05460d4c4f615f4d,13 Feb 2014,"Git 1.8.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1256.diff
https://github.com/git/git/commit/7e2e4b37d3d57a95a525ba1a18224ba04f858768,10 Feb 2014,"dir: ignore trailing spaces in exclude patterns

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1257.diff
https://github.com/git/git/commit/16402b992e0332d2ac68106f4488b47175bf0a13,10 Feb 2014,"dir: warn about trailing spaces in exclude patterns

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_1258.diff
https://github.com/git/git/commit/9f673f9477c63433aa0774c11b9e42979721f4d6,10 Feb 2014,"gc: config option for running --auto in background

`gc --auto` takes time and can block the user temporarily (but not any
less annoyingly). Make it run in background on systems that support
it. The only thing lost with running in background is printouts. But
gc output is not really interesting. You can keep it in foreground by
changing gc.autodetach.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1259.diff
https://github.com/git/git/commit/de0957ce2e88b8ad639f1e4a7197eb556e114a1c,10 Feb 2014,"daemon: move daemonize() to libgit.a

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1260.diff
https://github.com/git/git/commit/b4b313f94ab06fabe78fa91b3f2ebbc7ef08b012,06 Feb 2014,"reset: support ""--mixed --intent-to-add"" mode

When --mixed is used, entries could be removed from index if the
target ref does not have them. When ""reset"" is used in preparation for
commit spliting (in a dirty worktree), it could be hard to track what
files to be added back. The new option --intent-to-add simplifies it
by marking all removed files intent-to-add.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>",65,data/crawl/git/patch_1261.diff
https://github.com/git/git/commit/89ba81dc7643f5b126b15b15a8dcd3893d05ee47,05 Feb 2014,Sync with 1.8.5.4,51,data/crawl/git/patch_1262.diff
https://github.com/git/git/commit/3330a2c4f6b494f2b02fda2869d85bc1f8e019aa,05 Feb 2014,"Git 1.8.5.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1263.diff
https://github.com/git/git/commit/7bc4ec01dde22be0156d64ef77db7364a11cb859,05 Feb 2014,"line-log: convert to using diff_tree_sha1()

Since diff_tree_sha1() can now accept empty trees via NULL sha1, we
could just call it without manually reading trees into tree_desc and
duplicating code.

Cc: Thomas Rast <tr@thomasrast.ch>
Signed-off-by: Kirill Smelkov <kirr@mns.spb.ru>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1264.diff
https://github.com/git/git/commit/0b707c3319f37f2ec3700638d62f3199af40c138,05 Feb 2014,"tree-diff: convert diff_root_tree_sha1() to just call diff_tree_sha1 with old=NULL

Now since diff_tree_sha1 understands NULL for both old and new, we could
indicate an empty tree for root commit by providing just NULL for old
sha1.

Signed-off-by: Kirill Smelkov <kirr@mns.spb.ru>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1265.diff
https://github.com/git/git/commit/791303284cb3ede61729e33112d6923df406161f,05 Feb 2014,"tree-diff: allow diff_tree_sha1 to accept NULL sha1

which would mean that corresponding tree - old or new - is empty.

As followup patches will show, that functionality was already needed in
several places of Git codebase, but there, we were preparing empty
tree_desc objects by hand, with some code duplication.

For handling sha1 = NULL case, let's reuse fill_tree_descriptor() which
returns just empty tree_desc in that case.

Signed-off-by: Kirill Smelkov <kirr@mns.spb.ru>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1266.diff
https://github.com/git/git/commit/a43219f2aaa39fbc53ba0aee2481e1cca3c0e649,28 Jan 2014,"rev-parse: check i before using argv[i] against argc

The --prefix, --default, and --resolve-git-dir options to
git-rev-parse require an argument, but when given no argument,
the code uses the NULL read from argv[argc] without checking,
leading to a segfault.

Instead, check first and die() with an error message.

Signed-off-by: David Sharp <dhsharp@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1267.diff
https://github.com/git/git/commit/2000544330d5b047074d8043042f7cc66157f8f5,22 Jan 2014,"git p4: fix an error message when ""p4 where"" fails

When ""p4 where"" fails, for whatever reason, the error message tries to
show an undefined variable.  This minor bug applies only when using a
client spec, and was introduced recently in 9d57c4a (git p4: implement
view spec wildcards with ""p4 where"", 2013-08-30).

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1268.diff
https://github.com/git/git/commit/40f846c35c504a1c2303be5dcca6db069a17b856,22 Jan 2014,"git p4: work around p4 bug that causes empty symlinks

Damien Gérard highlights an interesting problem.  Some p4
repositories end up with symlinks that have an empty target.  It
is not possible to create this with current p4, but they do
indeed exist.

The effect in git p4 is that ""p4 print"" on the symlink returns an
empty string, confusing the curret symlink-handling code.

Such broken repositories cause problems in p4 as well, even with
no git involved.  In p4, syncing to a change that includes a
bogus symlink causes errors:

    //depot/empty-symlink - updating /home/me/p4/empty-symlink
    rename: /home/me/p4/empty-symlink: No such file or directory

and leaves no symlink.

In git, replicate the p4 behavior by ignoring these bad symlinks.
If, in a later p4 revision, the symlink happens to point to
something non-null, the symlink will be replaced properly.

Add a big test for all this too.

This happens to be a regression introduced by 1292df1 (git-p4:
Fix occasional truncation of symlink contents., 2013-08-08) and
appeared first in 1.8.5.  But it shows up only in p4 repositories
of dubious character, so can wait for a proper release.

Tested-by: Damien Gérard <damien@iwi.me>
Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_1269.diff
https://github.com/git/git/commit/fa59ae7971498157370d935adbb2bfc28012aa9f,21 Jan 2014,"rename_ref(): extract function rename_tmp_log()

It's about to become a bit more complex.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_1270.diff
https://github.com/git/git/commit/428d52a5a56f81d3a42871b51480cecafec58fdd,17 Jan 2014,"diff_filespec: drop xfrm_flags field

The only mention of this field in the code is by some
debugging code which prints it out (and it will always be
zero, since we never touch it otherwise). It was obsoleted
very early on by 25d5ea4 ([PATCH] Redo rename/copy detection
logic., 2005-05-24).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1271.diff
https://github.com/git/git/commit/a39c14af82e973ba1502888e89585b7501721ede,15 Jan 2014,"interpret_branch_name: factor out upstream handling

This function checks a few different @{}-constructs. The
early part checks for and dispatches us to helpers for each
construct, but the code for handling @{upstream} is inline.

Let's factor this out into its own function. This makes
interpret_branch_name more readable, and will make it much
simpler to further refactor the function in future patches.

While we're at it, let's also break apart the refactored
code into a few helper functions. These will be useful if we
eventually implement similar @{upstream}-like constructs.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_1272.diff
https://github.com/git/git/commit/14598b907008dc9952428662a30ecfd74dc90a79,13 Jan 2014,"Sync with 1.8.5.3

* maint:
  Git 1.8.5.3
  pack-heuristics.txt: mark up the file header properly",34,data/crawl/git/patch_1273.diff
https://github.com/git/git/commit/864085aaf6bafceb19191debbbdb19a5959248e2,13 Jan 2014,"Update draft release notes to 1.9

Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1274.diff
https://github.com/git/git/commit/4224916ae979204f13db2996d9e32490e0acb90f,13 Jan 2014,Git 1.8.5.3,34,data/crawl/git/patch_1275.diff
https://github.com/git/git/commit/a25014bc4cef56712f7d005d7b76070d0270f454,10 Jan 2014,"Update draft release notes to 1.9

Signed-off-by: Junio C Hamano <gitster@pobox.com>",115,data/crawl/git/patch_1276.diff
https://github.com/git/git/commit/4346663a14fe2af5e5cec94213203e199b7dfc3f,09 Jan 2014,"gen_scanf_fmt(): delete function and use snprintf() instead

To replace ""%.*s"" with ""%s"", all we have to do is use snprintf()
to interpolate ""%s"" into the pattern.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1277.diff
https://github.com/git/git/commit/3f784a4dcbe270a1f48b23177917a1832a777d1c,06 Jan 2014,"git.c: consistently use the term ""builtin"" instead of ""internal command""

Signed-off-by: Sebastian Schuberth <sschuberth@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1278.diff
https://github.com/git/git/commit/f3565c0ca535d3becdcd2266002385709ddfa66c,06 Jan 2014,"cmd_init_db(): when creating directories, handle errors conservatively

safe_create_leading_directories_const() returns a non-zero value on
error.  The old code at this calling site recognized a couple of
particular error values, and treated all other return values as
success.  Instead, be more conservative: recognize the errors we are
interested in, but treat any other nonzero values as failures.  This
is more robust in case somebody adds another possible return value
without telling us.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1279.diff
https://github.com/git/git/commit/4b3b33a747c325f76b1f6eef89c231609dd4d361,03 Jan 2014,"fetch --prune: always print header url

If ""fetch --prune"" is run with no new refs to fetch, but it has refs
to prune. Then, the header url is not printed as it would if there were
new refs to fetch.

Output before this patch:

	$ git fetch --prune remote-with-no-new-refs
	 x [deleted]         (none)     -> origin/world

Output after this patch:

	$ git fetch --prune remote-with-no-new-refs
	From https://github.com/git/git
	 x [deleted]         (none)     -> origin/test

Signed-off-by: Tom Miller <jackerran@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1280.diff
https://github.com/git/git/commit/212f2ffbf0331ceca1a4bc1820ab1ac5c5115e8b,30 Dec 2013,"t: add basic bitmap functionality tests

Now that we can read and write bitmaps, we can exercise them
with some basic functionality tests. These tests aren't
particularly useful for seeing the benefit, as the test
repo is too small for it to make a difference. However, we
can at least check that using bitmaps does not break anything.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/patch_1281.diff
https://github.com/git/git/commit/b77fcd1edca58621627d46af0321a9737b1310f0,30 Dec 2013,"repack: handle optional files created by pack-objects

We ask pack-objects to pack to a set of temporary files, and
then rename them into place. Some files that pack-objects
creates may be optional (like a .bitmap file), in which case
we would not want to call rename(). We already call stat()
and make the chmod optional if the file cannot be accessed.
We could simply skip the rename step in this case, but that
would be a minor regression in noticing problems with
non-optional files (like the .pack and .idx files).

Instead, we can now annotate extensions as optional, and
skip them if they don't exist (and otherwise rely on
rename() to barf).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1282.diff
https://github.com/git/git/commit/7cc8f9710857ed69d34c696330f7fd0367a5a29c,30 Dec 2013,"pack-objects: implement bitmap writing

This commit extends more the functionality of `pack-objects` by allowing
it to write out a `.bitmap` index next to any written packs, together
with the `.idx` index that currently gets written.

If bitmap writing is enabled for a given repository (either by calling
`pack-objects` with the `--write-bitmap-index` flag or by having
`pack.writebitmaps` set to `true` in the config) and pack-objects is
writing a packfile that would normally be indexed (i.e. not piping to
stdout), we will attempt to write the corresponding bitmap index for the
packfile.

Bitmap index writing happens after the packfile and its index has been
successfully written to disk (`finish_tmp_packfile`). The process is
performed in several steps:

    1. `bitmap_writer_set_checksum`: this call stores the partial
       checksum for the packfile being written; the checksum will be
       written in the resulting bitmap index to verify its integrity

    2. `bitmap_writer_build_type_index`: this call uses the array of
       `struct object_entry` that has just been sorted when writing out
       the actual packfile index to disk to generate 4 type-index bitmaps
       (one for each object type).

       These bitmaps have their nth bit set if the given object is of
       the bitmap's type. E.g. the nth bit of the Commits bitmap will be
       1 if the nth object in the packfile index is a commit.

       This is a very cheap operation because the bitmap writing code has
       access to the metadata stored in the `struct object_entry` array,
       and hence the real type for each object in the packfile.

    3. `bitmap_writer_reuse_bitmaps`: if there exists an existing bitmap
       index for one of the packfiles we're trying to repack, this call
       will efficiently rebuild the existing bitmaps so they can be
       reused on the new index. All the existing bitmaps will be stored
       in a `reuse` hash table, and the commit selection phase will
       prioritize these when selecting, as they can be written directly
       to the new index without having to perform a revision walk to
       fill the bitmap. This can greatly speed up the repack of a
       repository that already has bitmaps.

    4. `bitmap_writer_select_commits`: if bitmap writing is enabled for
       a given `pack-objects` run, the sequence of commits generated
       during the Counting Objects phase will be stored in an array.

       We then use that array to build up the list of selected commits.
       Writing a bitmap in the index for each object in the repository
       would be cost-prohibitive, so we use a simple heuristic to pick
       the commits that will be indexed with bitmaps.

       The current heuristics are a simplified version of JGit's
       original implementation. We select a higher density of commits
       depending on their age: the 100 most recent commits are always
       selected, after that we pick 1 commit of each 100, and the gap
       increases as the commits grow older. On top of that, we make sure
       that every single branch that has not been merged (all the tips
       that would be required from a clone) gets their own bitmap, and
       when selecting commits between a gap, we tend to prioritize the
       commit with the most parents.

       Do note that there is no right/wrong way to perform commit
       selection; different selection algorithms will result in
       different commits being selected, but there's no such thing as
       ""missing a commit"". The bitmap walker algorithm implemented in
       `prepare_bitmap_walk` is able to adapt to missing bitmaps by
       performing manual walks that complete the bitmap: the ideal
       selection algorithm, however, would select the commits that are
       more likely to be used as roots for a walk in the future (e.g.
       the tips of each branch, and so on) to ensure a bitmap for them
       is always available.

    5. `bitmap_writer_build`: this is the computationally expensive part
       of bitmap generation. Based on the list of commits that were
       selected in the previous step, we perform several incremental
       walks to generate the bitmap for each commit.

       The walks begin from the oldest commit, and are built up
       incrementally for each branch. E.g. consider this dag where A, B,
       C, D, E, F are the selected commits, and a, b, c, e are a chunk
       of simplified history that will not receive bitmaps.

            A---a---B--b--C--c--D
                     \
                      E--e--F

       We start by building the bitmap for A, using A as the root for a
       revision walk and marking all the objects that are reachable
       until the walk is over. Once this bitmap is stored, we reuse the
       bitmap walker to perform the walk for B, assuming that once we
       reach A again, the walk will be terminated because A has already
       been SEEN on the previous walk.

       This process is repeated for C, and D, but when we try to
       generate the bitmaps for E, we can reuse neither the current walk
       nor the bitmap we have generated so far.

       What we do now is resetting both the walk and clearing the
       bitmap, and performing the walk from scratch using E as the
       origin. This new walk, however, does not need to be completed.
       Once we hit B, we can lookup the bitmap we have already stored
       for that commit and OR it with the existing bitmap we've composed
       so far, allowing us to limit the walk early.

       After all the bitmaps have been generated, another iteration
       through the list of commits is performed to find the best XOR
       offsets for compression before writing them to disk. Because of
       the incremental nature of these bitmaps, XORing one of them with
       its predecesor results in a minimal ""bitmap delta"" most of the
       time. We can write this delta to the on-disk bitmap index, and
       then re-compose the original bitmaps by XORing them again when
       loaded.

       This is a phase very similar to pack-object's `find_delta` (using
       bitmaps instead of objects, of course), except the heuristics
       have been greatly simplified: we only check the 10 bitmaps before
       any given one to find best compressing one. This gives good
       results in practice, because there is locality in the ordering of
       the objects (and therefore bitmaps) in the packfile.

     6. `bitmap_writer_finish`: the last step in the process is
	serializing to disk all the bitmap data that has been generated
	in the two previous steps.

	The bitmap is written to a tmp file and then moved atomically to
	its final destination, using the same process as
	`pack-write.c:write_idx_file`.

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",711,data/crawl/git/patch_1283.diff
https://github.com/git/git/commit/aa32939fea9c8934b41efce56015732fa12b8247,30 Dec 2013,"rev-list: add bitmap mode to speed up object lists

The bitmap reachability index used to speed up the counting objects
phase during `pack-objects` can also be used to optimize a normal
rev-list if the only thing required are the SHA1s of the objects during
the list (i.e., not the path names at which trees and blobs were found).

Calling `git rev-list --objects --use-bitmap-index [committish]` will
perform an object iteration based on a bitmap result instead of actually
walking the object graph.

These are some example timings for `torvalds/linux` (warm cache,
best-of-five):

    $ time git rev-list --objects master > /dev/null

    real    0m34.191s
    user    0m33.904s
    sys     0m0.268s

    $ time git rev-list --objects --use-bitmap-index master > /dev/null

    real    0m1.041s
    user    0m0.976s
    sys     0m0.064s

Likewise, using `git rev-list --count --use-bitmap-index` will speed up
the counting operation by building the resulting bitmap and performing a
fast popcount (number of bits set on the bitmap) on the result.

Here are some sample timings of different ways to count commits in
`torvalds/linux`:

    $ time git rev-list master | wc -l
        399882

        real    0m6.524s
        user    0m6.060s
        sys     0m3.284s

    $ time git rev-list --count master
        399882

        real    0m4.318s
        user    0m4.236s
        sys     0m0.076s

    $ time git rev-list --use-bitmap-index --count master
        399882

        real    0m0.217s
        user    0m0.176s
        sys     0m0.040s

This also respects negative refs, so you can use it to count
a slice of history:

        $ time git rev-list --count v3.0..master
        144843

        real    0m1.971s
        user    0m1.932s
        sys     0m0.036s

        $ time git rev-list --use-bitmap-index --count v3.0..master
        real    0m0.280s
        user    0m0.220s
        sys     0m0.056s

Though note that the closer the endpoints, the less it helps. In the
traversal case, we have fewer commits to cross, so we take less time.
But the bitmap time is dominated by generating the pack revindex, which
is constant with respect to the refs given.

Note that you cannot yet get a fast --left-right count of a symmetric
difference (e.g., ""--count --left-right master...topic""). The slow part
of that walk actually happens during the merge-base determination when
we parse ""master...topic"". Even though a count does not actually need to
know the real merge base (it only needs to take the symmetric difference
of the bitmaps), the revision code would require some refactoring to
handle this case.

Additionally, a `--test-bitmap` flag has been added that will perform
the same rev-list manually (i.e. using a normal revwalk) and using
bitmaps, and verify that the results are the same. This can be used to
exercise the bitmap code, and also to verify that the contents of the
.bitmap file are sane.

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_1284.diff
https://github.com/git/git/commit/6b8fda2db1d69606954711b606c546c0e4e51680,30 Dec 2013,"pack-objects: use bitmaps when packing objects

In this patch, we use the bitmap API to perform the `Counting Objects`
phase in pack-objects, rather than a traditional walk through the object
graph. For a reasonably-packed large repo, the time to fetch and clone
is often dominated by the full-object revision walk during the Counting
Objects phase. Using bitmaps can reduce the CPU time required on the
server (and therefore start sending the actual pack data with less
delay).

For bitmaps to be used, the following must be true:

  1. We must be packing to stdout (as a normal `pack-objects` from
     `upload-pack` would do).

  2. There must be a .bitmap index containing at least one of the
     ""have"" objects that the client is asking for.

  3. Bitmaps must be enabled (they are enabled by default, but can be
     disabled by setting `pack.usebitmaps` to false, or by using
     `--no-use-bitmap-index` on the command-line).

If any of these is not true, we fall back to doing a normal walk of the
object graph.

Here are some sample timings from a full pack of `torvalds/linux` (i.e.
something very similar to what would be generated for a clone of the
repository) that show the speedup produced by various
methods:

    [existing graph traversal]
    $ time git pack-objects --all --stdout --no-use-bitmap-index \
			    </dev/null >/dev/null
    Counting objects: 3237103, done.
    Compressing objects: 100% (508752/508752), done.
    Total 3237103 (delta 2699584), reused 3237103 (delta 2699584)

    real    0m44.111s
    user    0m42.396s
    sys     0m3.544s

    [bitmaps only, without partial pack reuse; note that
     pack reuse is automatic, so timing this required a
     patch to disable it]
    $ time git pack-objects --all --stdout </dev/null >/dev/null
    Counting objects: 3237103, done.
    Compressing objects: 100% (508752/508752), done.
    Total 3237103 (delta 2699584), reused 3237103 (delta 2699584)

    real    0m5.413s
    user    0m5.604s
    sys     0m1.804s

    [bitmaps with pack reuse (what you get with this patch)]
    $ time git pack-objects --all --stdout </dev/null >/dev/null
    Reusing existing pack: 3237103, done.
    Total 3237103 (delta 0), reused 0 (delta 0)

    real    0m1.636s
    user    0m1.460s
    sys     0m0.172s

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_1285.diff
https://github.com/git/git/commit/fff42755efc7585378ca562e54828532922371be,30 Dec 2013,"pack-bitmap: add support for bitmap indexes

A bitmap index is a `.bitmap` file that can be found inside
`$GIT_DIR/objects/pack/`, next to its corresponding packfile, and
contains precalculated reachability information for selected commits.
The full specification of the format for these bitmap indexes can be found
in `Documentation/technical/bitmap-format.txt`.

For a given commit SHA1, if it happens to be available in the bitmap
index, its bitmap will represent every single object that is reachable
from the commit itself. The nth bit in the bitmap is the nth object in
the packfile; if it's set to 1, the object is reachable.

By using the bitmaps available in the index, this commit implements
several new functions:

	- `prepare_bitmap_git`
	- `prepare_bitmap_walk`
	- `traverse_bitmap_commit_list`
	- `reuse_partial_packfile_from_bitmap`

The `prepare_bitmap_walk` function tries to build a bitmap of all the
objects that can be reached from the commit roots of a given `rev_info`
struct by using the following algorithm:

- If all the interesting commits for a revision walk are available in
the index, the resulting reachability bitmap is the bitwise OR of all
the individual bitmaps.

- When the full set of WANTs is not available in the index, we perform a
partial revision walk using the commits that don't have bitmaps as
roots, and limiting the revision walk as soon as we reach a commit that
has a corresponding bitmap. The earlier OR'ed bitmap with all the
indexed commits can now be completed as this walk progresses, so the end
result is the full reachability list.

- For revision walks with a HAVEs set (a set of commits that are deemed
uninteresting), first we perform the same method as for the WANTs, but
using our HAVEs as roots, in order to obtain a full reachability bitmap
of all the uninteresting commits. This bitmap then can be used to:

	a) limit the subsequent walk when building the WANTs bitmap
	b) finding the final set of interesting commits by performing an
	   AND-NOT of the WANTs and the HAVEs.

If `prepare_bitmap_walk` runs successfully, the resulting bitmap is
stored and the equivalent of a `traverse_commit_list` call can be
performed by using `traverse_bitmap_commit_list`; the bitmap version
of this call yields the objects straight from the packfile index
(without having to look them up or parse them) and hence is several
orders of magnitude faster.

As an extra optimization, when `prepare_bitmap_walk` succeeds, the
`reuse_partial_packfile_from_bitmap` call can be attempted: it will find
the amount of objects at the beginning of the on-disk packfile that can
be reused as-is, and return an offset into the packfile. The source
packfile can then be loaded and the bytes up to `offset` can be written
directly to the result without having to consider the entires inside the
packfile individually.

If the `prepare_bitmap_walk` call fails (e.g. because no bitmap files
are available), the `rev_info` struct is left untouched, and can be used
to perform a manual rev-walk using `traverse_commit_list`.

Hence, this new set of functions are a generic API that allows to
perform the equivalent of

	git rev-list --objects [roots...] [^uninteresting...]

for any set of commits, even if they don't have specific bitmaps
generated for them.

In further patches, we'll use this bitmap traversal optimization to
speed up the `pack-objects` and `rev-list` commands.

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1353,data/crawl/git/patch_1286.diff
https://github.com/git/git/commit/e2f5df42449ace700e5a237f604c34b4657c0edf,30 Dec 2013,"merge-base: separate ""--independent"" codepath into its own helper

It piggybacks on an unrelated handle_octopus() function only because
there are some similarities between the way they need to preprocess
their input and output their result.  There is nothing similar in
the true logic between these two operations.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1287.diff
https://github.com/git/git/commit/e228c1736f25c59cd6da51ed97e03ecd80a935e6,28 Dec 2013,"Remove the line length limit for graft files

Support for grafts predates Git's strbuf, and hence it is understandable
that there was a hard-coded line length limit of 1023 characters (which
was chosen a bit awkwardly, given that it is *exactly* one byte short of
aligning with the 41 bytes occupied by a commit name and the following
space or new-line character).

While regular commit histories hardly win comprehensibility in general
if they merge more than twenty-two branches in one go, it is not Git's
business to limit grafts in such a way.

In this particular developer's case, the use case that requires
substantially longer graft lines to be supported is the visualization of
the commits' order implied by their changes: commits are considered to
have an implicit relationship iff exchanging them in an interactive
rebase would result in merge conflicts.

Thusly implied branches tend to be very shallow in general, and the
resulting thicket of implied branches is usually very wide; It is
actually quite common that *most* of the commits in a topic branch have
not even one implied parent, so that a final merge commit has about as
many implied parents as there are commits in said branch.

[jc: squashed in tests by Jonathan]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1288.diff
https://github.com/git/git/commit/9af270e8c2a02afd9a3262a2c9312ee7fefbb7a3,26 Dec 2013,"do not pretend sha1write returns errors

The sha1write function returns an int, but it will always be
""0"". The failure-prone parts of the function happen in the
""flush"" callback, which cannot pass an error back to us. So
we just end up calling die() during the flush.

Let's just drop the return value altogether, as it only
confuses callers into thinking that it might be useful.

Only one call site actually checked the return value. We can
drop that check, since it just led to a die() anyway.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1289.diff
https://github.com/git/git/commit/a21bae33d9e13c59217639b866355f1a02211a2c,19 Dec 2013,"diff: let ""git diff -O"" read orderfile from any file and fail properly

The -O flag really shouldn't silently fail to do anything when given
a path that it can't read from.

However, it should be able to read from un-mmappable files, such as:

 * pipes/fifos

 * /dev/null:  It's a character device (at least on Linux)

 * ANY empty file:

   Quoting Linux mmap(2), ""SUSv3 specifies that mmap() should fail if
   length is 0.  However, in kernels before 2.6.12, mmap() succeeded in
   this case: no mapping was created and the call returned addr.  Since
   kernel 2.6.12, mmap() fails with the error EINVAL for this case.""

We especially want ""-O/dev/null"" to work, since we will be documenting
it as the way to cancel ""diff.orderfile"" when we add that.

(Note: ""-O/dev/null"" did have the right effect, since the existing error
handling essentially worked out to ""silently ignore the orderfile"".  But
this was probably more coincidence than anything else.)

So, lets toss all of that logic to get the file mmapped and just use
strbuf_read_file() instead, which gives us decent error handling
practically for free.

Signed-off-by: Samuel Bronson <naesten@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1290.diff
https://github.com/git/git/commit/4454e9cb5994467fb1a6b60b3b2637fd4ff76ac0,18 Dec 2013,"builtin/prune.c: use strbuf to avoid having to worry about PATH_MAX

While at it, rename prune_tmp_object(), which used to be a helper to
remove temporary files that were created to become loose object
files, to prune_tmp_file(), as the function is also used to remove
any random cruft whose name begins with tmp_ directly in .git/object
or .git/object/pack directories these days.

Noticed-by:  Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1291.diff
https://github.com/git/git/commit/491a8dec44e9b91149ef77c77c341e7d41df39be,18 Dec 2013,"get_max_fd_limit(): fall back to OPEN_MAX upon getrlimit/sysconf failure

On broken systems where RLIMIT_NOFILE is visible by the compliers
but underlying getrlimit() system call does not behave, we used to
simply die() when we are trying to decide how many file descriptors
to allocate for keeping packfiles open.  Instead, allow the fallback
codepath to take over when we get such a failure from getrlimit().

The same issue exists with _SC_OPEN_MAX and sysconf(); restructure
the code in a similar way to prepare for a broken sysconf() as well.

Noticed-by: Joey Hess <joey@kitenet.net>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1292.diff
https://github.com/git/git/commit/b10cd577d8061912996576a096e2fd5503c770e6,17 Dec 2013,"Update draft release notes to 1.9

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1293.diff
https://github.com/git/git/commit/c235d960cb32ddca352d12c3f8dc053ddfd421dd,17 Dec 2013,"prune-packed: use strbuf to avoid having to worry about PATH_MAX

A/very/long/path/to/.git that becomes exactly PATH_MAX bytes long
after suffixed with /objects/??/??38-hex??, would have overflown
the on-stack pathname[] buffer.

Noticed-by:  Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1294.diff
https://github.com/git/git/commit/aad90e85f8e6368533aa30c072b8e2bd7adafa53,16 Dec 2013,"diff: avoid some nesting

Avoid some nesting in builtin/diff.c, to make the code easier to read.
There are no functional changes.

Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1295.diff
https://github.com/git/git/commit/0162b3c43063ad8886a6e2f5bd52110f1e7ebfaf,16 Dec 2013,"contrib/git-credential-gnome-keyring.c: small stylistic cleanups

Signed-off-by: John Szakmeister <john@szakmeister.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Reviewed-by: Felipe Contreras <felipe.contreras@gmail.com>",85,data/crawl/git/patch_1296.diff
https://github.com/git/git/commit/470faf96544c1844ad775c695dfa370fe0ef3756,12 Dec 2013,"diff: move no-index detection to builtin/diff.c

Currently the --no-index option is parsed in diff_no_index().  Move the
detection if a no-index diff should be executed to builtin/diff.c, where
we can use it for executing diff_no_index() conditionally.  This will
also allow us to execute other operations conditionally, which will be
done in the next patch.

There are no functional changes.

Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_1297.diff
https://github.com/git/git/commit/44f9f850e8ee6e2824ceb1855d836d484340edf7,12 Dec 2013,"builtin/replace: teach listing using short, medium or full formats

By default when listing replace refs, only the sha1 of the
replaced objects are shown.

In many cases, it is much nicer to be able to list all the
sha1 of the replaced objects along with the sha1 of the
replacment objects.

And in other cases it might be interesting to also show the
types of the replaced and replacement objects.

This patch introduce a new --format=<fmt> option where
<fmt> can be any of the following:

	'short': this is the same as when no --format
		option is used, that is only the sha1 of
		the replaced objects are shown
	'medium': this also lists the sha1 of the
		replacement objects
	'full': this shows the sha1 and the type of both
		the replaced and the replacement objects

Some documentation and some tests will follow.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_1298.diff
https://github.com/git/git/commit/370c9268d13ef54a05ed84b92baa81b75930e58f,12 Dec 2013,"cat-file: pass expand_data to print_object_or_die

We currently individually pass the sha1, type, and size
fields calculated by sha1_object_info. However, if we pass
the whole struct, the called function can make more
intelligent decisions about which fields were actually
filled by sha1_object_info.

This patch takes that first refactoring step, passing the
whole struct, so further patches can make those decisions
with less noise in their diffs. There should be no
functional change to this patch (aside from a minor typo fix
in the error message).

As a side effect, we can rename the local variables in the
function to ""type"" and ""size"", since the names are no longer
taken.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1299.diff
https://github.com/git/git/commit/eab3296c7e5c99f559818357e70eeae09c24ac99,11 Dec 2013,"prune: clean .git/shallow after pruning objects

This patch teaches ""prune"" to remove shallow roots that are no longer
reachable from any refs (e.g. when the relevant refs are removed).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1300.diff
https://github.com/git/git/commit/0d7d285f0e29abb994fe32db87ee81b00f403bd2,11 Dec 2013,"clone: use git protocol for cloning shallow repo locally

clone_local() does not handle $SRC/shallow. It could be made so, but
it's simpler to use fetch-pack/upload-pack instead.

This used to be caught by the check in upload-pack, which is triggered
by transport_get_remote_refs(), even in local clone case. The check is
now gone and check_everything_connected() should catch the result
incomplete repo. But check_everything_connected() will soon be skipped
in local clone case, opening a door to corrupt repo. This patch should
close that door.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1301.diff
https://github.com/git/git/commit/f2c681cf12c54ce3859b36693f8a13c36126577b,11 Dec 2013,"send-pack: support pushing from a shallow clone via http

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1302.diff
https://github.com/git/git/commit/c29a7b8b3f71c1bede1f57626bafe120280aaea3,11 Dec 2013,"receive-pack: support pushing to a shallow clone via http

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1303.diff
https://github.com/git/git/commit/16094885ca94f72abc28a915f9aa4021e203a16d,11 Dec 2013,"smart-http: support shallow fetch/clone

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/patch_1304.diff
https://github.com/git/git/commit/58f2ed051fe9b966100d8c531a79200628490ec4,11 Dec 2013,"remote-curl: pass ref SHA-1 to fetch-pack as well

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1305.diff
https://github.com/git/git/commit/b016918b2f283513758957b06a14eb2f5c2a9619,11 Dec 2013,"send-pack: support pushing to a shallow clone

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1306.diff
https://github.com/git/git/commit/0a1bc12b6e401825f009ac8bb14fc438f77e2d9f,11 Dec 2013,"receive-pack: allow pushes that update .git/shallow

The basic 8 steps to update .git/shallow does not fully apply here
because the user may choose to accept just a few refs (while fetch
always accepts all refs). The steps are modified a bit.

1-6. same as before. After calling assign_shallow_commits_to_refs at
   step 6, each shallow commit has a bitmap that marks all refs that
   require it.

7. mark all ""ours"" shallow commits that are reachable from any
   refs. We will need to do the original step 7 on them later.

8. go over all shallow commit bitmaps, mark refs that require new
   shallow commits.

9. setup a strict temporary shallow file to plug all the holes, even
   if it may cut some of our history short. This file is used by all
   hooks. The hooks could use --shallow-file=$GIT_DIR/shallow to
   overcome this and reach everything in current repo.

10. go over the new refs one by one. For each ref, do the reachability
   test if it needs a shallow commit on the list from step 7. Remove
   it if it's reachable from our refs. Gather all required shallow
   commits, run check_everything_connected() with the new ref, then
   install them to .git/shallow.

This mode is disabled by default and can be turned on with
receive.shallowupdate

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",214,data/crawl/git/patch_1307.diff
https://github.com/git/git/commit/5dbd767601812209273ae007a97b7c9305dc6cfd,11 Dec 2013,"receive/send-pack: support pushing from a shallow clone

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",157,data/crawl/git/patch_1308.diff
https://github.com/git/git/commit/4820a33baa963c4559736d7a1c4c35f8dcb37293,11 Dec 2013,"fetch: support fetching from a shallow repository

This patch just put together pieces from the 8 steps patch. We stop at
step 7 and reject refs that require new shallow commits.

Note that, by rejecting refs that require new shallow commits, we
leave dangling objects in the repo, which become ""object islands"" by
the next ""git fetch"" of the same source.

If the first fetch our ""ours"" set is zero and we do practically
nothing at step 7, ""ours"" is full at the next fetch and we may need to
walk through commits for reachability test. Room for improvement.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",181,data/crawl/git/patch_1309.diff
https://github.com/git/git/commit/8e277383e0902551c0d5d3ef9591196de5a7078c,11 Dec 2013,"shallow.c: steps 6 and 7 to select new commits for .git/shallow

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",297,data/crawl/git/patch_1310.diff
https://github.com/git/git/commit/b06dcd7d6829c86afda6b311cadf009ee4b4dd59,11 Dec 2013,"connect.c: teach get_remote_heads to parse ""shallow"" lines

No callers pass a non-empty pointer as shallow_points at this
stage. As a result, all clients still refuse to talk to shallow
repository on the other end.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1311.diff
https://github.com/git/git/commit/ad491366de6c883cd04539cb86db31049201dfbd,11 Dec 2013,"make the sender advertise shallow commits to the receiver

If either receive-pack or upload-pack is called on a shallow
repository, shallow commits (*) will be sent after the ref
advertisement (but before the packet flush), so that the receiver has
the full ""shape"" of the sender's commit graph. This will be needed for
the receiver to update its .git/shallow if necessary.

This breaks the protocol for all clients trying to push to a shallow
repo, or fetch from one. Which is basically the same end result as
today's ""is_repository_shallow() && die()"" in receive-pack and
upload-pack. New clients will be made aware of shallow upstream and
can make use of this information.

The sender must send all shallow commits that are sent in the
following pack. It may send more shallow commits than necessary.

upload-pack for example may choose to advertise no shallow commits if
it knows in advance that the pack it's going to send contains no
shallow commits. But upload-pack is the server, so we choose the
cheaper way, send full .git/shallow and let the client deal with it.

Smart HTTP is not affected by this patch. Shallow support on
smart-http comes later separately.

(*) A shallow commit is a commit that terminates the revision
    walker. It is usually put in .git/shallow in order to keep the
    revision walker from going out of bound because there is no
    guarantee that objects behind this commit is available.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1312.diff
https://github.com/git/git/commit/606e435a0a11634744282068174240caf2926fec,11 Dec 2013,"clone: prevent --reference to a shallow repository

If we borrow objects from another repository, we should also pay
attention to their $GIT_DIR/shallow (and even info/grafts). But
current alternates code does not.

Reject alternate repos that are shallow because we do not do it
right. In future the alternate code may be updated to check
$GIT_DIR/shallow properly so that this restriction could be lifted.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1313.diff
https://github.com/git/git/commit/0b854bcc2a3b34c09835393234cd807fde08722f,11 Dec 2013,"send-pack: forbid pushing from a shallow repository

send-pack can send a pack with loose ends to the server.  receive-pack
before 6d4bb38 (fetch: verify we have everything we need before
updating our ref - 2011-09-01) does not detect this and keeps the pack
anyway, which corrupts the repository, at least from fsck point of
view.

send-pack will learn to safely push from a shallow repository later.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1314.diff
https://github.com/git/git/commit/a2036d7e00ad8aa16ba010a80078e10f0e4568a3,09 Dec 2013,"git_connect(): use common return point

Use only one return point from git_connect(), doing the

    free();
    return conn;

only at one place in the code.

There may be a little confusion what the variable ""host"" is for.  At
some places it is only the host part, at other places it may include
the port number, so change host into hostandport here.

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/patch_1315.diff
https://github.com/git/git/commit/83b058752707a6ba4af51ebc98c47913bc7d2d25,09 Dec 2013,"git_connect(): refactor the port handling for ssh

Use get_host_and_port() even for ssh.
Remove the variable port git_connect(), and simplify parse_connect_url()
Use only one return point in git_connect(), doing the free() and return conn.

t5601 had 2 corner test cases which now pass.

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1316.diff
https://github.com/git/git/commit/5610b7c0c6957cf0b236b6fac087c1f4dc209376,09 Dec 2013,"git fetch-pack: add --diag-url

The main purpose is to trace the URL parser called by git_connect() in
connect.c

The main features of the parser can be listed as this:

- parse out host and path for URLs with a scheme (git:// file:// ssh://)
- parse host names embedded by [] correctly
- extract the port number, if present
- separate URLs like ""file"" (which are local)
  from URLs like ""host:repo"" which should use ssh

Add the new parameter ""--diag-url"" to ""git fetch-pack"", which prints
the value for protocol, host and path to stderr and exits.

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1317.diff
https://github.com/git/git/commit/d98d109979760bed1909fbf5e56cbb6239980095,09 Dec 2013,"git_connect: remove artificial limit of a remote command

Since day one, function git_connect() had a limit on the command line of
the command that is invoked to make a connection. 7a33bcbe converted the
code that constructs the command to strbuf. This would have been the
right time to remove the limit, but it did not happen. Remove it now.

git_connect() uses start_command() to invoke the command; consequently,
the limits of the system still apply, but are diagnosed only at execve()
time. But these limits are more lenient than the 1K that git_connect()
imposed.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1318.diff
https://github.com/git/git/commit/e46c92e4ef75a74e210dcd517b04d7ea4b6e17ba,09 Dec 2013,"abspath: trivial style fix

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1319.diff
https://github.com/git/git/commit/0c0ebc1fdf57c3ac968e1afdadbc17b9010da6fa,09 Dec 2013,"remote-helpers: add extra safety checks

Suggested-by: Roman Ovchinnikov <coolthecold@gmail.com>
Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1320.diff
https://github.com/git/git/commit/141856738152d02beac5d4270a310a6007597282,09 Dec 2013,"rev-parse: correctly diagnose revision errors before ""--""

Rev-parse understands that a ""--"" may separate revisions and
filenames, and that anything after the ""--"" is taken as-is.
However, it does not understand that anything before the
token must be a revision (which is the usual rule
implemented by the setup_revisions parser).

Since rev-parse prefers revisions to files when parsing
before the ""--"", we end up with the correct result (if such
an argument is a revision, we parse it as one, and if it is
not, it is an error either way).  However, we misdiagnose
the errors:

  $ git rev-parse foobar -- >/dev/null
  fatal: ambiguous argument 'foobar': unknown revision or path not in the working tree.
  Use '--' to separate paths from revisions, like this:
  'git <command> [<revision>...] -- [<file>...]'

  $ >foobar
  $ git rev-parse foobar -- >/dev/null
  fatal: bad flag '--' used after filename

In both cases, we should know that the real error is that
""foobar"" is meant to be a revision, but could not be
resolved.

Signed-off-by: Jeff King <peff@peff.net>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1321.diff
https://github.com/git/git/commit/1649612a227eaa5af7cb0e2d059728c0148485d9,06 Dec 2013,"pathspec.c: support adding prefix magic to a pathspec with mnemonic magic

Back in 233c3e6 (parse_pathspec: preserve prefix length via
PATHSPEC_PREFIX_ORIGIN - 2013-07-14), parse_pathspec() is taught to
save prefix length as a dynamic magic. This is needed when the
pathspec is passed to another process and and prefix lenght would be
lost.

Back then we support two cases. If the pathspec is normal, e.g. ""abc"",
we simply add the prefix to become "":(prefix:2)abc"". If the pathspec
contains long magic, e.g. "":(foo,bar)abc"" then we turn it to
"":(foo,bar,prefix:2)abc"". We do not support prefixing on short form,
because the only supported mnemonic '/' disappears after the the
preprocessing steps.

With the introduction of exclude magic with mnemonic '!', we need to
add support for the short form case so that ':!abc' becomes
':(exclude,prefix:2)abc'. Without this, it will break

    cd Documentation
    git add -p -- . ':!technical'

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1322.diff
https://github.com/git/git/commit/ef79b1f8704668a6cdf4278f9255e03ca785bfb4,06 Dec 2013,"Support pathspec magic :(exclude) and its short form :!

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",337,data/crawl/git/patch_1323.diff
https://github.com/git/git/commit/5594bcad21da70d2e9704cf96baa91b8d99dc27b,06 Dec 2013,"clone,fetch: catch non positive --depth option value

Instead of simply ignoring the value passed to --depth option when
it is zero or negative, catch and report it as an error to let
people know that they were using the option incorrectly.

Original-patch-by: Andrés G. Aragoneses <knocte@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1324.diff
https://github.com/git/git/commit/83786fa412662f6d7cdade9e4043882c5ad21c1a,06 Dec 2013,"config: arbitrary number of matches for --unset and --replace-all

git-config used a static match array to hold the matches we want to
unset/replace when using --unset or --replace-all.  Use a
variable-sized array instead.

This in particular fixes the symptoms git-svn had when storing large
numbers of svn-remote.*.added-placeholder entries in the config file.

While the tests are rather more paranoid than just --unset and
--replace-all, the other operations already worked.  Indeed git-svn's
usage only breaks the first time *after* creating so many entries,
when it wants to unset and re-add them all.

Reported-by: Jess Hottenstein <jess.hottenstein@gmail.com>
Signed-off-by: Thomas Rast <tr@thomasrast.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_1325.diff
https://github.com/git/git/commit/83786fa412662f6d7cdade9e4043882c5ad21c1a,06 Dec 2013,"config: arbitrary number of matches for --unset and --replace-all

git-config used a static match array to hold the matches we want to
unset/replace when using --unset or --replace-all.  Use a
variable-sized array instead.

This in particular fixes the symptoms git-svn had when storing large
numbers of svn-remote.*.added-placeholder entries in the config file.

While the tests are rather more paranoid than just --unset and
--replace-all, the other operations already worked.  Indeed git-svn's
usage only breaks the first time *after* creating so many entries,
when it wants to unset and re-add them all.

Reported-by: Jess Hottenstein <jess.hottenstein@gmail.com>
Signed-off-by: Thomas Rast <tr@thomasrast.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_1325.diff
https://github.com/git/git/commit/d619cfc7490481652833dff820e04263869c8861,30 Oct 2013,"t5570: Update for clone-progress-to-stderr branch

git clone now reports its progress to standard error, which throws off
t5570.  Using test_i18ngrep instead of test_cmp allows the test to be
more flexible by only looking for the expected error and ignoring any
other output from the program.

Signed-off-by: Brian Gernhardt <brian@gernhardtsoftware.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1326.diff
https://github.com/git/git/commit/360a3261a471ee59760b0743bbb27d3a60849ae2,22 Oct 2013,"t5570: Update for clone-progress-to-stderr branch

git clone now reports its progress to standard error, which throws off
t5570.  Using test_i18ngrep instead of test_cmp allows the test to be
more flexible by only looking for the expected error and ignoring any
other output from the program.

Signed-off-by: Brian Gernhardt <brian@gernhardtsoftware.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1327.diff
https://github.com/git/git/commit/bca39695343ecb113b30c72a3b2e0cb7e73757d8,18 Oct 2013,"checkout: proper error message on 'git checkout foo bar --'

The previous code was detecting the presence of ""--"" by looking only at
argument 1. As a result, ""git checkout foo bar --"" was interpreted as an
ambiguous file/revision list, and errored out with:

error: pathspec 'foo' did not match any file(s) known to git.
error: pathspec 'bar' did not match any file(s) known to git.
error: pathspec '--' did not match any file(s) known to git.

This patch fixes it by walking through the argument list to find the
""--"", and now complains about the number of references given.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_1328.diff
https://github.com/git/git/commit/a047fafc7866cc4087201e284dc1f53e8f9a32d5,18 Oct 2013,"checkout: allow dwim for branch creation for ""git checkout $branch --""

The ""--"" notation disambiguates files and branches, but as a side-effect
of the previous implementation, also disabled the branch auto-creation
when $branch does not exist.

A possible scenario is then:

git checkout $branch
=> fails if $branch is both a ref and a file, and suggests --

git checkout $branch --
=> refuses to create the $branch

This patch allows the second form to create $branch, and since the -- is
provided, it does not look for file named $branch.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_1329.diff
https://github.com/git/git/commit/895c5ba3c1c927c68e581ebb0e13d9a123e477ab,15 Oct 2013,"revision: do not peel tags used in range notation

A range notation ""A..B"" means exactly the same thing as what ""^A B""
means, i.e. the set of commits that are reachable from B but not
from A.  But the internal representation after the revision parser
parsed these two notations are subtly different.

 - ""rev-list ^A B"" leaves A and B in the revs->pending.objects[]
   array, with the former marked as UNINTERESTING and the revision
   traversal machinery propagates the mark to underlying commit
   objects A^0 and B^0.

 - ""rev-list A..B"" peels tags and leaves A^0 (marked as
   UNINTERESTING) and B^0 in revs->pending.objects[] array before
   the traversal machinery kicks in.

This difference usually does not matter, but starts to matter when
the --objects option is used.  For example, we see this:

    $ git rev-list --objects v1.8.4^1..v1.8.4 | grep $(git rev-parse v1.8.4)
    $ git rev-list --objects v1.8.4 ^v1.8.4^1 | grep $(git rev-parse v1.8.4)
    04f013dc38d7512eadb915eba22efc414f18b869 v1.8.4

With the former invocation, the revision traversal machinery never
hears about the tag v1.8.4 (it only sees the result of peeling it,
i.e. the commit v1.8.4^0), and the tag itself does not appear in the
output.  The latter does send the tag object itself to the output.

Make the range notation keep the unpeeled objects and feed them to
the traversal machinery to fix this inconsistency.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_1330.diff
https://github.com/git/git/commit/b227bbc43a568b282b5f8cb35e563d00d60b272d,15 Oct 2013,"remote-curl: store url as a strbuf

We use a strbuf to generate the string containing the remote
URL, but then detach it to a bare pointer. This makes it
harder to later manipulate the URL, as we have forgotten the
length (and the allocation semantics are not as clear).

Let's instead keep the strbuf around. As a bonus, this
eliminates a confusing double-use of the ""buf"" strbuf in
main(). Prior to this, it was used both for constructing the
url, and for reading commands from stdin.

The downside is that we have to update each call site to
refer to ""url.buf"" rather than just ""url"" when they want the
C string.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",38,data/crawl/git/patch_1331.diff
https://github.com/git/git/commit/c93c92f30977adb2eb385a851f9f5e9975da7d5e,14 Oct 2013,"http: update base URLs when we see redirects

If a caller asks the http_get_* functions to go to a
particular URL and we end up elsewhere due to a redirect,
the effective_url field can tell us where we went.

It would be nice to remember this redirect and short-cut
further requests for two reasons:

  1. It's more efficient. Otherwise we spend an extra http
     round-trip to the server for each subsequent request,
     just to get redirected.

  2. If we end up with an http 401 and are going to ask for
     credentials, it is to feed them to the redirect target.
     If the redirect is an http->https upgrade, this means
     our credentials may be provided on the http leg, just
     to end up redirected to https. And if the redirect
     crosses server boundaries, then curl will drop the
     credentials entirely as it follows the redirect.

However, it, it is not enough to simply record the effective
URL we saw and use that for subsequent requests. We were
originally fed a ""base"" url like:

   http://example.com/foo.git

and we want to figure out what the new base is, even though
the URLs we see may be:

     original: http://example.com/foo.git/info/refs
    effective: http://example.com/bar.git/info/refs

Subsequent requests will not be for ""info/refs"", but for
other paths relative to the base. We must ask the caller to
pass in the original base, and we must pass the redirected
base back to the caller (so that it can generate more URLs
from it). Furthermore, we need to feed the new base to the
credential code, so that requests to credential helpers (or
to the user) match the URL we will be requesting.

This patch teaches http_request_reauth to do this munging.
Since it is the caller who cares about making more URLs, it
seems at first glance that callers could simply check
effective_url themselves and handle it. However, since we
need to update the credential struct before the second
re-auth request, we have to do it inside http_request_reauth.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",68,data/crawl/git/patch_1332.diff
https://github.com/git/git/commit/a3552aba55b9ed2860b8eb0581c73fc0e996369d,14 Oct 2013,"clone --branch: refuse to clone if upstream repo is empty

Since 920b691 (clone: refuse to clone if --branch
points to bogus ref) we refuse to clone with option
""-b"" if the specified branch does not exist in the
(non-empty) upstream. If the upstream repository is empty,
the branch doesn't exist, either. So refuse the clone too.

Reported-by: Robert Mitwicki <robert.mitwicki@opensoftware.pl>
Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Acked-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",12,data/crawl/git/patch_1333.diff
https://github.com/git/git/commit/02a110ad435a6ccda648f09f94e546dfd7bdd0ac,26 Sep 2013,"Git 1.8.4.1

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",52,data/crawl/git/patch_1334.diff
https://github.com/git/git/commit/cd4f09e38341bdd17cf008ea57863e4b10ac176b,18 Sep 2013,"shortlog: ignore commits with missing authors

Most of git's traversals are robust against minor breakages
in commit data. For example, ""git log"" will still output an
entry for a commit that has a broken encoding or missing
author, and will not abort the whole operation.

Shortlog, on the other hand, will die as soon as it sees a
commit without an author, meaning that a repository with
a broken commit cannot get any shortlog output at all.

Let's downgrade this fatal error to a warning, and continue
the operation.

We simply ignore the commit and do not count it in the total
(since we do not have any author under which to file it).
Alternatively, we could output some kind of ""<empty>"" record
to collect these bogus commits. It is probably not worth it,
though; we have already warned to stderr, so the user is
aware that such bogosities exist, and any placeholder we
came up with would either be syntactically invalid, or would
potentially conflict with real data.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1335.diff
https://github.com/git/git/commit/643f918d13906cbccdc5ad188767fc7895e30fc1,18 Sep 2013,"clone: always set transport options

A clone will always create a transport struct, whether we
are cloning locally or using an actual protocol. In the
local case, we only use the transport to get the list of
refs, and then transfer the objects out-of-band.

However, there are many options that we do not bother
setting up in the local case. For the most part, these are
noops, because they only affect the object-fetching stage
(e.g., the --depth option).  However, some options do have a
visible impact. For example, giving the path to upload-pack
via ""-u"" does not currently work for a local clone, even
though we need upload-pack to get the ref list.

We can just drop the conditional entirely and set these
options for both local and non-local clones. Rather than
keep track of which options impact the object versus the ref
fetching stage, we can simply let the noops be noops (and
the cost of setting the options in the first place is not
high).

The one exception is that we also check that the transport
provides both a ""get_refs_list"" and a ""fetch"" method. We
will now be checking the former for both cases (which is
good, since a transport that cannot fetch refs would not
work for a local clone), and we tweak the conditional to
check for a ""fetch"" only when we are non-local.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1336.diff
https://github.com/git/git/commit/68b939b2f097b6675c4aaa178655559aa81b25cb,18 Sep 2013,"clone: send diagnostic messages to stderr

Putting messages like ""Cloning into.."" and ""done"" on stdout
is un-Unix and uselessly clutters the stdout channel. Send
them to stderr.

We have to tweak two tests to accommodate this:

  1. t5601 checks for doubled output due to forking, and
     doesn't actually care where the output goes; adjust it
     to check stderr.

  2. t5702 is trying to test whether progress output was
     sent to stderr, but naively does so by checking
     whether stderr produced any output. Instead, have it
     look for ""%"", a token found in progress output but not
     elsewhere (and which lets us avoid hard-coding the
     progress text in the test).

This should not regress any scripts that try to parse the
current output, as the output is already internationalized
and therefore unstable.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1337.diff
https://github.com/git/git/commit/7171d8c15f919c760d52f814a0aee1b1253385b1,18 Sep 2013,"upload-pack: send symbolic ref information as capability

One long-standing flaw in the pack transfer protocol was that there
was no way to tell the other end which branch ""HEAD"" points at.
With a capability ""symref=HEAD:refs/heads/master"", let the sender to
tell the receiver what symbolic ref points at what ref.

This capability can be repeated more than once to represent symbolic
refs other than HEAD, such as ""refs/remotes/origin/HEAD"").

Add an infrastructure to collect symbolic refs, format them as extra
capabilities and put it on the wire.  For now, just send information
on the ""HEAD"" and nothing else.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_1338.diff
https://github.com/git/git/commit/cdab485853b405d6454d4974bdc3825134d85249,28 Aug 2013,"upload-pack: delegate rev walking in shallow fetch to pack-objects

upload-pack has a special revision walking code for shallow
recipients. It works almost like the similar code in pack-objects
except:

1. in upload-pack, graft points could be added for deepening;

2. also when the repository is deepened, the shallow point will be
   moved further away from the tip, but the old shallow point will be
   marked as edge to produce more efficient packs. See 6523078 (make
   shallow repository deepening more network efficient - 2009-09-03).

Pass the file to pack-objects via --shallow-file. This will override
$GIT_DIR/shallow and give pack-objects the exact repository shape
that upload-pack has.

mark edge commits by revision command arguments. Even if old shallow
points are passed as ""--not"" revisions as in this patch, they will not
be picked up by mark_edges_uninteresting() because this function looks
up to parents for edges, while in this case the edge is the children,
in the opposite direction. This will be fixed in an later patch when
all given uninteresting commits are marked as edges.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/patch_1339.diff
https://github.com/git/git/commit/08ea65ad13faaf24f57732cdc8af3d830d4b367f,28 Aug 2013,"shallow: add setup_temporary_shallow()

This function is like setup_alternate_shallow() except that it does
not lock $GIT_DIR/shallow.  It is supposed to be used when a program
generates temporary shallow for use by another program, then throw
the shallow file away.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1340.diff
https://github.com/git/git/commit/680be044d98b3b703bc33d546a987c19b3779aeb,23 Aug 2013,"dir.c::test_one_path(): work around directory_exists_in_index_icase() breakage

directory_exists_in_index() takes pathname and its length, but its
helper function directory_exists_in_index_icase() reads one byte
beyond the end of the pathname and expects there to be a '/'.

This needs to be fixed, as that one-byte-beyond-the-end location may
not even be readable, possibly by not registering directories to
name hashes with trailing slashes.  In the meantime, update the new
caller added recently to treat_one_path() to make sure that the path
buffer it gives the function is one byte longer than the path it is
asking the function about by appending a slash to it.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1341.diff
https://github.com/git/git/commit/3125fe528b65c1e4a4f5f934d056af342ab5472d,18 Aug 2013,"move setup_alternate_shallow and write_shallow_commits to shallow.c

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_1342.diff
https://github.com/git/git/commit/db5723c6283d9a8dff3397c432af80cf5e2f7766,07 Aug 2013,"fetch: refactor code that prepares a transport

Make a helper function prepare_transport() that returns a transport
to talk to a given remote.

The set_option() helper that used to always affect the file-scope
global ""gtransport"" now takes a transport as its parameter.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1343.diff
https://github.com/git/git/commit/89b0230a20e435c02effafd3de16bb105d652505,07 Aug 2013,"die_with_status: use ""printf '%s\n'"", not ""echo""

Some implementations of 'echo' (e.g. dash's built-in) interpret
backslash sequences in their arguments.

This triggered at least one bug: the error message of ""rebase -i"" was
turning \t in commit messages into actual tabulations. There may be
others.

Using ""printf '%s\n'"" instead avoids this bad behavior, and is the form
used by the ""say"" function.

Noticed-by: David Kastrup <dak@gnu.org>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1344.diff
https://github.com/git/git/commit/c17592a7a2420a61c4c407f4cf635f196f1254f3,29 Jul 2013,"commit: tweak empty cherry pick advice for sequencer

When we refuse to make an empty commit, we check whether we
are in a cherry-pick in order to give better advice on how
to proceed. We instruct the user to repeat the commit with
""--allow-empty"" to force the commit, or to use ""git reset""
to skip it and abort the cherry-pick.

In the case of a single cherry-pick, the distinction between
skipping and aborting is not important, as there is no more
work to be done afterwards.  When we are using the sequencer
to cherry pick a series of commits, though, the instruction
is confusing: does it skip this commit, or does it abort the
rest of the cherry-pick?

It does skip, after which the user can continue the
cherry-pick. This is the right thing to be advising the user
to do, but let's make it more clear what will happen, both
by using the word ""skip"", and by mentioning that the rest of
the sequence can be continued via ""cherry-pick --continue""
(whether we skip or take the commit).

Noticed-by: Ramkumar Ramachandra <artagnon@gmail.com>
Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1345.diff
https://github.com/git/git/commit/60838613054f43d63086b0f4a7596baaee9e20c5,25 Jul 2013,"git-clean: implement partial matching for selection

Document for interactive git-clean says: ""You also could say `c` or
`clean` above as long as the choice is unique"". But it's not true,
because only hotkey `c` and full match (`clean`) could work.

Implement partial matching via find_unique function to make the
document right.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/patch_1346.diff
https://github.com/git/git/commit/9c559d5b86389de2449cd3cd5d53afa14936a6df,22 Jul 2013,"Update draft release notes to 1.8.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_1347.diff
https://github.com/git/git/commit/acb01a359bc2fe3f1ddfb1eb9daa60b8c83e5153,21 Jul 2013,"contrib: contacts: add documentation

Assuming that git-contacts may some day be promoted to a core git
command, the documentation is written and formatted as if it already
belongs in Documentation/ even though it presently resides in
contrib/contacts.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/patch_1348.diff
https://github.com/git/git/commit/adfc1857bdb090786fd9d22c1acec39371c76048,18 Jul 2013,"describe: fix --contains when a tag is given as input

""git describe"" takes a commit and gives it a name based on tags in
its neighbourhood.  The command does take a commit-ish but when
given a tag that points at a commit, it should dereference the tag
before computing the name for the commit.

As the whole processing is internally delegated to name-rev, if we
unwrap tags down to the underlying commit when invoking name-rev, it
will make the name-rev issue an error message based on the unwrapped
object name (i.e. either 40-hex object name, or ""$tag^0"") that is
different from what the end-user gave to the command when the commit
cannot be described.  Introduce an internal option --peel-tag to the
name-rev to tell it to unwrap a tag in its input from the command
line.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1349.diff
https://github.com/git/git/commit/118aa4acff6afae733c206df7049ea54f7e0b282,18 Jul 2013,"name-rev: differentiate between tags and commits they point at

""git name-rev --stdin"" has been fixed to convert an object name that
points at a tag to a refname of the tag.  The codepath to handle its
command line arguments, however, fed the commit that the tag points
at to the underlying naming machinery.

With this fix, you will get this:

    $ git name-rev --refs=tags/\* --name-only $(git rev-parse v1.8.3 v1.8.3^0)
    v1.8.3
    v1.8.3^0

which is the same as what you would get from the fixed ""--stdin"" variant:

    $ git rev-parse v1.8.3 v1.8.3^0 | git name-rev --refs=tags/\* --name-only
    v1.8.3
    v1.8.3^0

Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1350.diff
https://github.com/git/git/commit/42063f95a0f285382458f357bd256df252000ef1,18 Jul 2013,"apply, entry: speak of submodules instead of subprojects

There are only four (with some generous rounding) instances in the
current source code where we speak of ""subproject"" instead of
""submodule"".  They are as follows:

* one error message in git-apply and two in entry.c

* the patch format for submodule changes

The latter was introduced in 0478675 (Expose subprojects as special
files to ""git diff"" machinery, 2007-04-15), apparently before the
terminology was settled.  We can of course not change the patch
format.

Let's at least change the error messages to consistently call them
""submodule"".

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1351.diff
https://github.com/git/git/commit/a11c39646c14600d588ca55fcfe3c244b66047c7,17 Jul 2013,"git: ensure 0/1/2 are open in main()

Not having an open FD in the 0--2 range can lead to strange results,
for example, a subsequent open() may return 2 (stderr) and then a
die() would clobber this file.

git-daemon and git-shell already guarded against this, but apparently
users also manage to trip over it in other git commands.  So we call
sanitize_stdfds() during main git startup.

Since these FDs are inherited, this covers all use of 'git foo ...',
and all internal C commands when called directly.  It does not fix
shell/perl commands called directly.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1352.diff
https://github.com/git/git/commit/1d999ddd1daa6da2779d21b293ea9b275780bff8,17 Jul 2013,"daemon/shell: refactor redirection of 0/1/2 from /dev/null

Both daemon.c and shell.c contain logic to open FDs 0/1/2 from
/dev/null if they are not already open.  Move the function in daemon.c
to setup.c and use it in shell.c, too.

While there, remove a 'not' that inverted the meaning of the comment.
The point is indeed to *avoid* messing up.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1353.diff
https://github.com/git/git/commit/bc501f69fc6d697968d472afbabe6af97a758b12,15 Jul 2013,"git-multimail: an improved replacement for post-receive-email

Add git-multimail, a tool for generating notification emails for
pushes to a Git repository.  It is largely plug-in compatible with
post-receive-email, and is proposed to eventually replace that script.
The advantages of git-multimail relative to post-receive-email are
described in README.migrate-from-post-receive-email.

git-multimail is organized in a directory contrib/hooks/multimail.
The directory contains:

* git_multimail.py -- a Python module that can generate notification
  emails for pushes to a Git repository.  The file can be used
  directly as a post-receive script (configured via git config
  settings), or it can be imported as a Python module and configured
  via arbitrary Python code.

* README -- user-level documentation for configuring and using
  git-multimail.

* post-receive -- an example of building a post-receive script that
  imports git_multimail.py as a Python module, with an example of how
  to change the email templates.

* README.migrate-from-post-receive-email -- documentation targeted at
  current users of post-receive-email, explaining the differences and
  how to migrate a post-receive-email configuration to git-multimail.

* migrate-mailhook-config -- a script that can migrate a user's
  post-receive-email configuration options to the equivalent
  git-multimail options.

* README.Git -- a short explanation of the relationship between
  git-multimail and the rest of the Git project, plus the exact date
  and revision when this version was taken from the upstream project.

All but the last file are taken verbatim from the upstream
git-multimail project.

git-multimail is originally derived from post-receive-email and also
incorporates suggestions from the mailing list as well as patches by
the people listed below.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Ramkumar Ramachandra <artagnon@gmail.com>
Contributions-by: Chris Hiestand <chrishiestand@gmail.com>
Contributions-by: Michiel Holtkamp <git@elfstone.nl>
Contributions-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3398,data/crawl/git/patch_1354.diff
https://github.com/git/git/commit/226ad3482ac506af0eadd04e732dda556fda80e4,13 Jul 2013,"builtin: add git-check-mailmap command

Introduce command check-mailmap, similar to check-attr and check-ignore,
which allows direct testing of .mailmap configuration.

As plumbing accessible to scripts and other porcelain, check-mailmap
publishes the stable, well-tested .mailmap functionality employed by
built-in Git commands.  Consequently, script authors need not
re-implement .mailmap functionality manually, thus avoiding potential
quirks and behavioral differences.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_1355.diff
https://github.com/git/git/commit/a77f106c7837faf6a712ea3ac720f5c4fa2feb07,12 Jul 2013,"run-command: dup_devnull(): guard against syscalls failing

dup_devnull() did not check the return values of open() and dup2().
Fix this omission.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1356.diff
https://github.com/git/git/commit/25fba78d36be6297bb17aed5f3e21ed850ce3e03,12 Jul 2013,"cat-file: disable object/refname ambiguity check for batch mode

A common use of ""cat-file --batch-check"" is to feed a list
of objects from ""rev-list --objects"" or a similar command.
In this instance, all of our input objects are 40-byte sha1
ids. However, cat-file has always allowed arbitrary revision
specifiers, and feeds the result to get_sha1().

Fortunately, get_sha1() recognizes a 40-byte sha1 before
doing any hard work trying to look up refs, meaning this
scenario should end up spending very little time converting
the input into an object sha1. However, since 798c35f
(get_sha1: warn about full or short object names that look
like refs, 2013-05-29), when we encounter this case, we
spend the extra effort to do a refname lookup anyway, just
to print a warning. This is further exacerbated by ca91993
(get_packed_ref_cache: reload packed-refs file when it
changes, 2013-06-20), which makes individual ref lookup more
expensive by requiring a stat() of the packed-refs file for
each missing ref.

With no patches, this is the time it takes to run:

  $ git rev-list --objects --all >objects
  $ time git cat-file --batch-check='%(objectname)' <objects

on the linux.git repository:

  real    1m13.494s
  user    0m25.924s
  sys     0m47.532s

If we revert ca91993, the packed-refs up-to-date check, it
gets a little better:

  real    0m54.697s
  user    0m21.692s
  sys     0m32.916s

but we are still spending quite a bit of time on ref lookup
(and we would not want to revert that patch, anyway, which
has correctness issues).  If we revert 798c35f, disabling
the warning entirely, we get a much more reasonable time:

  real    0m7.452s
  user    0m6.836s
  sys     0m0.608s

This patch does the moral equivalent of this final case (and
gets similar speedups). We introduce a global flag that
callers of get_sha1() can use to avoid paying the price for
the warning.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1357.diff
https://github.com/git/git/commit/b2dc09455a9ed5521c2e84fc67d8dacf2c28c39f,12 Jul 2013,"do not die when error in config parsing of buf occurs

If a config parsing error in a file occurs we can die and let the user
fix the issue. This is different for the buf parsing function since it
can be used to parse blobs of .gitmodules files. If a parsing error
occurs here we should proceed since otherwise a database containing such
an error in a single revision could be rendered unusable.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1358.diff
https://github.com/git/git/commit/1bc888193e1044db317a45b9a4c8d2b87b998f40,12 Jul 2013,"teach config --blob option to parse config from database

This can be used to read configuration values directly from git's
database. For example it is useful for reading to be checked out
.gitmodules files directly from the database.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/patch_1359.diff
https://github.com/git/git/commit/93d2a607ba05fba31442941d0425019120993846,12 Jul 2013,"cat-file: add --batch-check=<format>

The `cat-file --batch-check` command can be used to quickly
get information about a large number of objects. However, it
provides a fixed set of information.

This patch adds an optional <format> option to --batch-check
to allow a caller to specify which items they are interested
in, and in which order to output them. This is not very
exciting for now, since we provide the same limited set that
you could already get. However, it opens the door to adding
new format items in the future without breaking backwards
compatibility (or forcing callers to pay the cost to
calculate uninteresting items).

Since the --batch option shares code with --batch-check, it
receives the same feature, though it is less likely to be of
interest there.

The format atom names are chosen to match their counterparts
in for-each-ref. Though we do not (yet) share any code with
for-each-ref's formatter, this keeps the interface as
consistent as possible, and may help later on if the
implementations are unified.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",168,data/crawl/git/patch_1360.diff
https://github.com/git/git/commit/98e2092b5027fde9dbe68cb49a196ad2184c02c3,11 Jul 2013,"cat-file: teach --batch to stream blob objects

The regular ""git cat-file -p"" and ""git cat-file blob"" code
paths already learned to stream large blobs. Let's do the
same here.

Note that this means we look up the type and size before
making a decision of whether to load the object into memory
or stream (just like the ""-p"" code path does). That can lead
to extra work, but it should be dwarfed by the cost of
actually accessing the object itself. In my measurements,
there was a 1-2% slowdown when using ""--batch"" on a large
number of objects.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1361.diff
https://github.com/git/git/commit/8dd0ee823f1829a3aa228c3c73e31de5c89b5317,10 Jul 2013,"wt-status: use ""format"" function attribute for status_printf

These functions could benefit from the added compile-time
safety of having the compiler check printf arguments.

Unfortunately, we also sometimes pass an empty format string,
which will cause false positives with -Wformat-zero-length.
In this case, that warning is wrong because our function is
not a no-op with an empty format: it may be printing
colorized output along with a trailing newline.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1362.diff
https://github.com/git/git/commit/18d472db6fe3909537ceb7e0c54cf01fa3466b8f,09 Jul 2013,"t4211: fix broken test when one -L range is subset of another

t4211 attempts to test multiple git-log -L ranges where one range is a
superset of the other, and falsely succeeds because its ""expected""
output is incorrect.

Overlapping -L ranges handed to git-log are coalesced by
line-log.c:sort_and_merge_range_set() into a set of non-overlapping,
disjoint ranges. When one range is a subset of another,
sort_and_merge_range_set() should coalesce both ranges to the superset
range, but instead the coalesced range often is incorrectly truncated to
the end of the subset range. For example, ranges 2-8 and 3-4 are
coalesced incorrectly to 2-4.

One can observe this incorrect behavior with git-log -L using the test
repository created by t4211. The superset/subset ranges t4211 employs
are 4-$ and 8-12 (where $ represents end-of-file). The coalesced range
should be 4-$. Manually invoking git-log with the same ranges the test
employs, we see:

  % git log -L 4:a.c simple |
    awk '/^commit [0-9a-f]{40}/ { print substr($2,1,7) }'
  4659538
  100b61a
  39b6eb2
  a6eb826
  f04fb20
  de4c48a

  % git log -L 8,12:a.c simple | awk ...
  f04fb20
  de4c48a

  % git log -L 4:a.c -L 8,12:a.c simple | awk ...
  a6eb826
  f04fb20
  de4c48a

This last output is incorrect. 8-12 is a subset of 4-$, hence the output
of the coalesced range should be the same as the 4-$ output shown first.
In fact, the above incorrect output is the truncated bogus range 4-12:

  % git log -L 4,12:a.c simple | awk ...
  a6eb826
  f04fb20
  de4c48a

Fix the test to correctly fail in the presence of the
sort_and_merge_range_set() coalescing bug. Do so by changing the
""expected"" output to the commits mentioned in the 4-$ output above.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/patch_1363.diff
https://github.com/git/git/commit/0078a7fa05b3d671739aefba5265da809ea32e55,08 Jul 2013,"git-remote-mediawiki: add preview subcommand into git mw

In the current state, a user of git-remote-mediawiki can edit the markup text
locally, but has to push to the remote wiki to see how the page is rendererd.
Add a new 'git mw preview' command that allows rendering the markup text on
the remote wiki without actually pushing any change on the wiki.

This uses Mediawiki's API to render the markup and inserts it in an actual
HTML page from the wiki so that CSS can be rendered properly. Most links
should work when the page exists on the remote.

Signed-off-by: Benoit Person <benoit.person@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",313,data/crawl/git/patch_1364.diff
https://github.com/git/git/commit/125a05fd0b45416558923b753f6418c24208d443,08 Jul 2013,"clone: drop connectivity check for local clones

Commit 0433ad1 (clone: run check_everything_connected,
2013-03-25) added the same connectivity check to clone that
we use for fetching. The intent was to provide enough safety
checks that ""git clone git://..."" could be counted on to
detect bit errors and other repo corruption, and not
silently propagate them to the clone.

For local clones, this turns out to be a bad idea, for two
reasons:

  1. Local clones use hard linking (or even shared object
     stores), and so complete far more quickly. The time
     spent on the connectivity check is therefore
     proportionally much more painful.

  2. Local clones do not actually meet our safety guarantee
     anyway. The connectivity check makes sure we have all
     of the objects we claim to, but it does not check for
     bit errors. We will notice bit errors in commits and
     trees, but we do not load blob objects at all. Whereas
     over the pack transport, we actually recompute the sha1
     of each object in the incoming packfile; bit errors
     change the sha1 of the object, which is then caught by
     the connectivity check.

This patch drops the connectivity check in the local case.
Note that we have to revert the changes from 0433ad1 to
t5710, as we no longer notice the corruption during clone.

We could go a step further and provide a ""verify even local
clones"" option, but it is probably not worthwhile. You can
already spell that as ""cd foo.git && git fsck && git clone .""
or as ""git clone --no-local foo.git"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1365.diff
https://github.com/git/git/commit/d6ac1d2120573a9dab5a9502fd1cb1a8e4ad58b5,03 Jul 2013,"Change ""remote tracking"" to ""remote-tracking""

Fix a typo (""remote remote-tracking"") going back to the big cleanup
in 2010 (8b3f3f84 etc). Also, remove some more occurrences of
""tracking"" and ""remote tracking"" in favor of ""remote-tracking"".

Signed-off-by: Michael Schubert <mschub@elegosoft.com>
Reviewed-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1366.diff
https://github.com/git/git/commit/a90804752f6ab2b911882d47fafb6c2b78f447c3,03 Jul 2013,"teach format-patch to place other authors into in-body ""From""

Format-patch generates emails with the ""From"" address set to the
author of each patch. If you are going to send the emails, however,
you would want to replace the author identity with yours (if they
are not the same), and bump the author identity to an in-body
header.

Normally this is handled by git-send-email, which does the
transformation before sending out the emails. However, some
workflows may not use send-email (e.g., imap-send, or a custom
script which feeds the mbox to a non-git MUA). They could each
implement this feature themselves, but getting it right is
non-trivial (one must canonicalize the identities by reversing any
RFC2047 encoding or RFC822 quoting of the headers, which has caused
many bugs in send-email over the years).

This patch takes a different approach: it teaches format-patch a
""--from"" option which handles the ident check and in-body header
while it is writing out the email.  It's much simpler to do at this
level (because we haven't done any quoting yet), and any workflow
based on format-patch can easily turn it on.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_1367.diff
https://github.com/git/git/commit/a54841e96b78203598dea6b31b9618f40f107e7b,02 Jul 2013,"merge: handle --ff/--no-ff/--ff-only as a tri-state option

These three options mean ""favor fast-forwarding when possible,
without creating an unnecessary merge"", ""never fast-forward and
always create a merge commit even when the commit being merged is a
strict descendant"", and ""we do not want to create any merge commit;
update only when the merged commit is a strict descendant"".

They are ""pick one out of these three possibilities"" options, and
correspond to ""merge.ff"" configuration that is tri-state (yes, no
and only).

However, the implementation did not follow the usual convention for
the command line options (later one wins, and command line overrides
what is in the configuration).

Fix this by consolidating two variables (fast_forward_only and
allow_fast_forward) used in the implementation into one enum that
can take one of the three possible values.

Signed-off-by: Miklos Vajna <vmiklos@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_1368.diff
https://github.com/git/git/commit/e2652c0bcfdeee88f416c6e2c34163545ea30047,27 Jun 2013,"Start preparing for 1.8.3.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1369.diff
https://github.com/git/git/commit/96a799b6d1d4a63dccfe8b5dcabd2d738fa6c26e,26 Jun 2013,"git-clean: add ask each interactive action

Add a new action for interactive git-clean: ask each. It's just like
the ""rm -i"" command, that the user must confirm one by one for each
file or directory to be cleaned.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1370.diff
https://github.com/git/git/commit/d1239264f2786d7ea15543b980c6bf6afbc4701a,26 Jun 2013,"git-clean: add filter by pattern interactive action

Add a new action for interactive git-clean: filter by pattern. When the
user chooses this action, user can input space-separated patterns (the
same syntax as gitignore), and each clean candidate that matches with
one of the patterns will be excluded from cleaning. When the user feels
it's OK, presses ENTER and backs to the confirmation dialog.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Suggested-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_1371.diff
https://github.com/git/git/commit/9f93e4611f72577306e369a64d0a4da847be9751,26 Jun 2013,"git-clean: use a git-add-interactive compatible UI

Rewrite menu using a new method `list_and_choose`, which is borrowed
from `git-add--interactive.perl`. We will use this framework to add
new actions for interactive git-clean later.

Please NOTE:

 * Method `list_and_choose` return an array of integers, and
 * it is up to you to free the allocated memory of the array.
 * The array ends with EOF.
 * If user pressed CTRL-D (i.e. EOF), no selection returned.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",456,data/crawl/git/patch_1372.diff
https://github.com/git/git/commit/7a9b0b802ecf5a09502b46de27c07ff05f55b247,26 Jun 2013,"git-clean: add colors to interactive git-clean

Show header, help, error messages, and prompt in colors for interactive
git-clean. Re-use config variables, such as ""color.interactive"" and
""color.interactive.<slot>"" for command `git-add--interactive`.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Comments-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/patch_1373.diff
https://github.com/git/git/commit/1b8fd46732fc2e4e8300c11057a7fa9a8c2bc1b4,26 Jun 2013,"git-clean: show items of del_list in columns

When there are lots of items to be cleaned, it is hard to see them all
in one screen. Show them in columns will solve this problem.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Comments-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_1374.diff
https://github.com/git/git/commit/17696002086e8c6b9e998543d212e707c7d511ab,26 Jun 2013,"git-clean: add support for -i/--interactive

Show what would be done and the user must confirm before actually
cleaning.

    Would remove ...
    Would remove ...
    Would remove ...

    Remove [y/n]?

Press ""y"" to start cleaning, and press ""n"" if you want to abort.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_1375.diff
https://github.com/git/git/commit/396049e5fb62ea921379d02133e1ff00cc47bb3f,26 Jun 2013,"git-clean: refactor git-clean into two phases

Before introducing interactive git-clean, refactor git-clean operations
into two phases:

 * hold cleaning items in del_list,
 * and remove them in a separate loop at the end.

We will introduce interactive git-clean between the two phases. The
interactive git-clean will show what would be done and must confirm
before do real cleaning.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_1376.diff
https://github.com/git/git/commit/203439b2840c4c384060df2fa192994e4b6740ed,26 Jun 2013,"test: add test cases for relative_path

Add subcommand ""relative_path"" in test-path-utils, and add test cases
in t0060.

Johannes tested an earlier version of this patch on Windows, and
found that some relative_path tests should be skipped on
Windows. This is because the bash on Windows rewrites arguments of
regular Windows programs, such as git and the test helpers, if the
arguments look like absolute POSIX paths. As a consequence, the
actual tests performed are not what the tests scripts expect.

The tests that need *not* be skipped are those where the two paths passed
to 'test-path-utils relative_path' have the same prefix and the result is
expected to be a relative path. This is because the rewriting changes
""/a/b"" to ""D:/Src/MSysGit/a/b"", and when both inputs are extended the same
way, this just cancels out in the relative path computation.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Helped-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1377.diff
https://github.com/git/git/commit/84b4202d804c7faec76f3eab22744b6288c63481,24 Jun 2013,"status/commit: make sure --porcelain is not affected by user-facing config

The recent addition of status.branch started affecting what is shown
when ""git status --porcelain"" is run by mistake.  Identify the
configuration items that should be ignored under ""--porcelain""
option, introduce a ""deferred config"" mechanism to keep the values
read from the configuration, and decide what value to use only after
we read both from configuration and command line.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_1378.diff
https://github.com/git/git/commit/6e1696b7c46f02310a882b4e761a29d3a0cf278f,24 Jun 2013,"t/t5528-push-default: test pushdefault workflows

Introduce test_pushdefault_workflows(), and test that all push.default
modes work with central and triangular workflows as expected.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_1379.diff
https://github.com/git/git/commit/396243fa479cd27bef1ced2ea5a9e4cf20f85a4b,24 Jun 2013,"t/t5528-push-default: generalize test_push_*

The setup creates two bare repositories: repo1 and repo2, but
test_push_commit() hard-codes checking in repo1 for the actual output.
Generalize it and its caller, test_push_success(), to optionally accept
a third argument to specify the name of the repository to check for
actual output.  We will use this in the next patch.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1380.diff
https://github.com/git/git/commit/ed2b18292bfeedc98c9e2b6bd8a35d8001dab2fc,24 Jun 2013,"push: change `simple` to accommodate triangular workflows

When remote.pushdefault or branch.<name>.pushremote is set to a
remote that is different from where you usually fetch from (i.e. a
triangular workflow), master@{u} != origin, and push.default is set
to `upstream` or `simple` would fail with this error:

  $ git push
  fatal: You are pushing to remote 'origin', which is not the upstream of
  your current branch 'master', without telling me what to push
  to update which remote branch.

The very name of ""upstream"" indicates that it is only suitable for
use in central workflows; let us not even attempt to give it a new
meaning in triangular workflows, and error out as before.

However, the `simple` does not have to share this error.  It is
poised to be the default for Git 2.0, and we would like it to do
something sensible in triangular workflows.

Redefine ""simple"" as ""safer upstream"" for centralized workflow as
before, but work as ""current"" for triangular workflow.

We may want to make it ""safer current"", but that is a separate
issue.

Reported-by: Leandro Lucarella <leandro.lucarella@sociomantic.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_1381.diff
https://github.com/git/git/commit/ff09af3fb8f5bede0de523723bbd00d6ef2ab71e,23 Jun 2013,"test-lib: verbose mode for only tests matching a pattern

With the new --verbose-only=<pattern> option, one can enable --verbose
at a per-test granularity.  The pattern is matched against the test
number, e.g.

  ./t0000-basic.sh --verbose-only='2[0-2]'

to see only the full output of test 20-22, while showing the rest in the
one-liner format.

As suggested by Jeff King, this takes care to wrap the entire
test_expect_* block, but nothing else, in the verbose toggling.  We
can use the test_start/end functions from the previous commit for the
purpose.

This is arguably not *too* useful on its own, but makes the next patch
easier to follow.

Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_1382.diff
https://github.com/git/git/commit/517cd55fd51ebf4c6c20597055ff191fefe5dda0,23 Jun 2013,"test-lib: self-test that --verbose works

t0000 contains some light self-tests of test-lib.sh, but --verbose was
not covered.  Add a test.

The only catch is that the presence of a test harness influences the
output (specifically, the presence of some empty lines).  So we need
to unset TEST_HARNESS or set it to a known value.  Leaving it unset
leads to spurious test failures in the final summary, which come from
the subtest.  So we always set it.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1383.diff
https://github.com/git/git/commit/9b9439afd8e08a2370d008af2836198ff9008179,23 Jun 2013,"t/t5505-remote: modernize style

Modernize the style of all tests throughout the file:

 - Remove spurious blank lines.

 - Indent the test body.

 - Make sure that all lines end with &&, to make it easier to spot
   breaks in the chain.

 - When executing something in a subshell, put the parenthesis on
   separate lines and indent the body.  Also make sure that the
   first statement in the subshell is a 'cd'.

 - When redirecting input or output, do not use SP between
   redirection operator and the target filename.

 - Use the <<-\EOF and <<-EOF forms of heredoc, not <<EOF, when the
   command is indented and the heredoc text itself does not have to
   have a leading tab.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",813,data/crawl/git/patch_1384.diff
https://github.com/git/git/commit/266f1fdfa99f5d29ca7ce455966e7960c00a82e4,21 Jun 2013,"transport-helper: be quiet on read errors from helpers

Prior to commit 81d340d4, we did not print any error message
if a remote transport helper died unexpectedly. If a helper
did not print any error message (e.g., because it crashed),
the user could be left confused. That commit tried to
rectify the situation by printing a note that the helper
exited unexpectedly.

However, this makes a much more common case worse: when a
helper does die with a useful message, we print the extra
""Reading from 'git-remote-foo failed"" message. This can also
end up confusing users, as they may not even know what
remote helpers are (e.g., the fact that http support comes
through git-remote-https is purely an implementation detail
that most users do not know or care about).

Since we do not have a good way of knowing whether the
helper printed a useful error, and since the common failure
mode is for it to do so, let's default to remaining quiet.
Debuggers can dig further by setting GIT_TRANSPORT_HELPER_DEBUG.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1385.diff
https://github.com/git/git/commit/c21d39d7c7eb07eed0be301a72856bff65201256,20 Jun 2013,"Extract a struct stat_data from cache_entry

Add public functions fill_stat_data() and match_stat_data() to work
with it.  This infrastructure will later be used to check the validity
of other types of file.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/patch_1386.diff
https://github.com/git/git/commit/9f69d297703bff37c5506276c2565c721347e03f,20 Jun 2013,"refs: implement simple transactions for the packed-refs file

Handle simple transactions for the packed-refs file at the
packed_ref_cache level via new functions lock_packed_refs(),
commit_packed_refs(), and rollback_packed_refs().

Only allow the packed ref cache to be modified (via add_packed_ref())
while the packed refs file is locked.

Change clone to add the new references within a transaction.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_1387.diff
https://github.com/git/git/commit/7b40d3963835699e138d21f6040a60c07e797853,20 Jun 2013,"repack_without_ref(): split list curation and entry writing

The repack_without_ref() function first removes the deleted ref from
the internal packed-refs list, then writes the packed-refs list to
disk, omitting any broken or stale entries.  This patch splits that
second step into multiple passes:

* collect the list of refnames that should be deleted from packed_refs

* delete those refnames from the cache

* write the remainder to the packed-refs file

The purpose of this change is to make the ""write the remainder"" part
reusable.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1388.diff
https://github.com/git/git/commit/f7e604ed390cec7b20471f9c03bbc507ebfe41c0,19 Jun 2013,"random typofixes (committed missing a 't', successful missing an 's')

Signed-off-by: Veres Lajos <vlajos@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1389.diff
https://github.com/git/git/commit/091a6eb0feed820a43663ca63dc2bc0bb247bbae,17 Jun 2013,"submodule: drop the top-level requirement

Use the new rev-parse --prefix option to process all paths given to the
submodule command, dropping the requirement that it be run from the
top-level of the repository.

Since the interpretation of a relative submodule URL depends on whether
or not ""remote.origin.url"" is configured, explicitly block relative URLs
in ""git submodule add"" when not at the top level of the working tree.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",354,data/crawl/git/patch_1390.diff
https://github.com/git/git/commit/b95e66f507967fdfbf7275a94729fe09aa4b20ca,17 Jun 2013,"wt-status: give better advice when cherry-pick is in progress

When cherry-pick is in progress, 'git status' gives the advice to
run ""git commit"" to finish the cherry-pick.

However, this won't continue the sequencer, when picking a range of
commits.

Advise users to run ""git cherry-pick --continue/--abort""; they work
when picking a single commit as well.

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1391.diff
https://github.com/git/git/commit/1ee886c1f08f4dd672a342b7811191b02291a597,14 Jun 2013,"unpack_entry: do not die when we fail to apply a delta

When we try to load an object from disk and fail, our
general strategy is to see if we can get it from somewhere
else (e.g., a loose object). That lets users fix corruption
problems by copying known-good versions of objects into the
object database.

We already handle the case where we were not able to read
the delta from disk. However, when we find that the delta we
read does not apply, we simply die.  This case is harder to
trigger, as corruption in the delta data itself would
trigger a crc error from zlib.  However, a corruption that
pointed us at the wrong delta base might cause it.

We can do the same ""fail and try to find the object
elsewhere"" trick instead of dying. This not only gives us a
chance to recover, but also puts us on code paths that will
alert the user to the problem (with the current message,
they do not even know which sha1 caused the problem).

Note that unlike some other pack corruptions, we do not
recover automatically from this case when doing a repack.
There is nothing apparently wrong with the delta, as it
points to a valid, accessible object, and we realize the
error only when the resulting size does not match up. And in
theory, one could even have a case where the corrupted size
is the same, and the problem would only be noticed by
recomputing the sha1.

We can get around this by recomputing the deltas with
--no-reuse-delta, which our test does (and this is probably
good advice for anyone recovering from pack corruption).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1392.diff
https://github.com/git/git/commit/d8e7c67e13e0687ba01ea53522db2615ea897f96,14 Jun 2013,"git-remote-mediawiki: make error message more precise

In subroutine parse_command, error messages were not correct. For the ""import""
function, having too much or incorrect arguments displayed both
""invalid arguments"", while it displayed ""too many arguments"" for the ""option""
functions under the same conditions.
Separate the two error messages in both cases.

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1393.diff
https://github.com/git/git/commit/6a316beeeecc76d19ff60fda62e00a7e2e041137,14 Jun 2013,"git-remote-mediawiki: put long code into a subroutine

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1394.diff
https://github.com/git/git/commit/267055f8609ff3e3134765395569b87269699c0a,14 Jun 2013,"git-remote-mediawiki: turn double-negated expressions into simple expressions

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1395.diff
https://github.com/git/git/commit/8a43b36ac225304f31730465c9c8e8ba77695a7d,14 Jun 2013,"git-remote-mediawiki: add newline in the end of die() error messages

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1396.diff
https://github.com/git/git/commit/10a3fb00ebbf19d5c22a0aa9ccd7803fe5367329,13 Jun 2013,"match-trees: factor out fill_tree_desc_strict

Deduplicate code by moving tree_desc initialization into a helper
function, fill_tree_desc_strict.  It is like fill_tree_descriptor,
except that it only accepts tree hashes and no tree references (tags,
commits).  No functional change.

Signed-off-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1397.diff
https://github.com/git/git/commit/914dc0289d1df75cfa744cea8ec84cb529cbc791,12 Jun 2013,"rm: better error message on failure for multiple files

When 'git rm' fails, it now displays a single message
with the list of files involved, instead of displaying
a list of messages with one file each.

As an example, the old message:
	error: 'foo.txt' has changes staged in the index
	(use --cached to keep the file, or -f to force removal)
	error: 'bar.txt' has changes staged in the index
	(use --cached to keep the file, or -f to force removal)

would now be displayed as:
	error: the following files have changes staged in the index:
	    foo.txt
	    bar.txt
	(use --cached to keep the file, or -f to force removal)

Signed-off-by: Mathieu Lienard--Mayor <Mathieu.Lienard--Mayor@ensimag.imag.fr>
Signed-off-by: Jorge Juan Garcia Garcia <Jorge-Juan.Garcia-Garcia@ensimag.imag.fr>
Signed-off-by: Matthieu Moy <Matthieu.Moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",167,data/crawl/git/patch_1398.diff
https://github.com/git/git/commit/bf9a05ba46a9d464424d22482aaa54abdd28b77d,12 Jun 2013,"Move create_notes_commit() from notes-merge.c into notes-utils.c

create_notes_commit() is needed by both the notes-merge code, and by
commit_notes() in notes-utils. Since it is generally useful, and not
bound to the notes-merge machinery, we move it from (the more specific)
notes-merge to (the more general) notes-utils.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_1399.diff
https://github.com/git/git/commit/49c2470400bbb695b953abeb4e6737be747317af,12 Jun 2013,"Move copy_note_for_rewrite + friends from builtin/notes.c to notes-utils.c

This is a pure code movement of the machinery for copying notes to
rewritten objects. This code was located in builtin/notes.c for
historical reasons. In order to make it available to builtin/commit.c
it was declared in builtin.h. This was more of an accident of history
than a concious design, and we now want to make this machinery more
widely available.

Hence, this patch moves the code into the new notes-utils.[hc] files
which are included into libgit.a. Except for adjusting #includes
accordingly, this patch merely moves the relevant functions verbatim
into the new files.

Cc: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",305,data/crawl/git/patch_1400.diff
https://github.com/git/git/commit/da24b1044f7dc85cda52d6423f5a794a7074fbf8,11 Jun 2013,"sort-in-topological-order: use prio-queue

Use the prio-queue data structure to implement a priority queue of
commits sorted by committer date, when handling --date-order.  The
structure can also be used as a simple LIFO stack, which is a good
match for --topo-order processing.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_1401.diff
https://github.com/git/git/commit/b4b594a3154078430b04fad4f6ffbed9c7274be5,11 Jun 2013,"prio-queue: priority queue of pointers to structs

Traditionally we used a singly linked list of commits to hold a set
of in-flight commits while traversing history.  The most typical use
of the list is to add commits that are newly discovered to it, keep
the list sorted by commit timestamp, pick up the newest one from the
list, and keep digging.  The cost of keeping the singly linked list
sorted is nontrivial, and this typical use pattern better matches a
priority queue.

Introduce a prio-queue structure, that can be used either as a LIFO
stack, or a priority queue.  This will be used in the next patch to
hold in-flight commits during sort-in-topological-order.

Tests and the idea to make it usable for any ""void *"" pointers to
""things"" are by Jeff King.  Bugs are mine.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",209,data/crawl/git/patch_1402.diff
https://github.com/git/git/commit/39fd762572d42a118e577d9095d83d84f3db9ddf,10 Jun 2013,"Sync with 1.8.3.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1403.diff
https://github.com/git/git/commit/467b8fe1bb900832f51281fe954d9134b545d6dd,09 Jun 2013,"submodule: remove redundant check for the_index.initialized

read_cache already performs the same check and returns immediately if
the cache has already been loaded.

Signed-off-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1404.diff
https://github.com/git/git/commit/cb648689b9456a1131b494065d7888c925265ddd,07 Jun 2013,"t3010: modernize style

In particular:

- move test preparations inside test_expect_success

- place test description on the test_expect_success line

- indent with a tab

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/patch_1405.diff
https://github.com/git/git/commit/dbea72a8c05d12c7dfd6a35376e62b21d5a655b5,03 Jun 2013,"sha1_file: silence sha1_loose_object_info

sha1_object_info() returns -1 (OBJ_BAD) if it cannot find the object
for some reason, which suggests that it wants the _caller_ to report
this error.  However, part of its work happens in
sha1_loose_object_info, which _does_ report errors itself.  This is
doubly strange because:

* packed_object_info(), which is the other half of the duo, does _not_
  report this.

* In the event that an object is packed and pruned while
  sha1_object_info_extended() goes looking for it, we would
  erroneously show the error -- even though the code of the latter
  function purports to handle this case gracefully.

* A caller might invoke sha1_object_info() to find the type of an
  object even if that object is not known to exist.

Silence this error.  The others remain untouched as a corrupt object
is a much more grave error than it merely being absent.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1406.diff
https://github.com/git/git/commit/276b22d333d4207928f6cfe3ab7c1898cd509b88,03 Jun 2013,"diffcore-pickaxe: make error messages more consistent

Currently, diffcore-pickaxe reports two distinct errors for the same
user error:

    $ git log --pickaxe-regex -S'\1'
    fatal: invalid pickaxe regex: Invalid back reference

    $ git log -G'\1'
    fatal: invalid log-grep regex: Invalid back reference

This ""log-grep"" was only an internal name for the -G feature during
development, and invite confusion with ""git log --grep=<pattern>"".

Change the error messages to say ""invalid regex"".

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1407.diff
https://github.com/git/git/commit/c3c327deeaf018e727a27f5ae88e140ff7a48595,02 Jun 2013,"dir.c: fix ignore processing within not-ignored directories

As of 95c6f271 ""dir.c: unify is_excluded and is_path_excluded APIs"", the
is_excluded API no longer recurses into directories that match an ignore
pattern, and returns the directory's ignored state for all contained paths.

This is OK for normal ignore patterns, i.e. ignoring a directory affects
the entire contents recursively.

Unfortunately, this also ""works"" for negated ignore patterns ('!dir'), i.e.
the entire contents is ""not-ignored"" recursively, regardless of ignore
patterns that match the contents directly.

In prep_exclude, skip recursing into a directory only if it is really
ignored (i.e. the ignore pattern is not negated).

Signed-off-by: Karsten Blees <blees@dcon.de>
Tested-by: Øystein Walle <oystwa@gmail.com>
Reviewed-by: Duy Nguyen <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1408.diff
https://github.com/git/git/commit/7b2ecd81084adeba701c60da81eec6be478910b8,29 May 2013,"push: fail early with detached HEAD and current

Setting push.default to current adds the refspec ""HEAD"" for the
transport layer to handle.  If ""HEAD"" doesn't resolve to a branch (and
since no refspec rhs is specified), the push fails after some time with
a cryptic error message:

  $ git push
  error: unable to push to unqualified destination: HEAD
  The destination refspec neither matches an existing ref on the remote nor
  begins with refs/, and we are unable to guess a prefix based on the source ref.
  error: failed to push some refs to 'git@github.com:artagnon/git'

Fail early with a nicer error message:

  $ git push
  fatal: You are not currently on a branch.
  To push the history leading to the current (detached HEAD)
  state now, use

    git push ram HEAD:<name-of-remote-branch>

Just like in the upstream and simple cases.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1409.diff
https://github.com/git/git/commit/54219a4d89bac94c98f19f4eb5d1e18eb9499232,29 May 2013,"Start 1.8.4 cycle

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_1410.diff
https://github.com/git/git/commit/35ee69c0f6c77f293b66125d334467d9692ef866,29 May 2013,"push: factor out the detached HEAD error message

With push.default set to upstream or simple, and a detached HEAD, git
push prints the following error:

  $ git push
  fatal: You are not currently on a branch.
  To push the history leading to the current (detached HEAD)
  state now, use

    git push ram HEAD:<name-of-remote-branch>

This error is not unique to upstream or simple: current cannot push with
a detached HEAD either.  So, factor out the error string in preparation
for using it in current.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1411.diff
https://github.com/git/git/commit/798c35fcd8a71a094ca68ac05d81e08c5ac8166d,29 May 2013,"get_sha1: warn about full or short object names that look like refs

When we get 40 hex digits, we immediately assume it's an SHA-1. This
is the right thing to do because we have no way else to specify an
object. If there is a ref with the same object name, it will be
ignored. Warn the user about this case because the ref with full
object name is likely a mistake, for example

    git checkout -b $empty_var $(git rev-parse something)

advice.object_name_warning is not documented because frankly people
should not be aware about it until they encounter this situation.

While at there, warn about ambiguation with abbreviated SHA-1 too.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1412.diff
https://github.com/git/git/commit/5b1e14eab3109c1d33e27b00ee18f8f9f60e779c,28 May 2013,"cmd_diff(): make it obvious which cases are exclusive of each other

At first glance the OBJ_COMMIT, OBJ_TREE, and OBJ_BLOB cases look like
they might be mutually exclusive.  But the OBJ_COMMIT case doesn't end
the loop iteration with ""continue"" like the other two cases, but
rather falls through.  So use if...else if...else construct to make it
more obvious that only the last two cases are mutually exclusive.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1413.diff
https://github.com/git/git/commit/33055fa823eff9f4fddb858856f9b9a8d85316fc,28 May 2013,"cmd_diff(): use an object_array for holding trees

Change cmd_diff() to use a (struct object_array) for holding the trees
that it accumulates, rather than rolling its own equivalent.

Incidentally, this change removes a hard-coded limit of 100 trees in
combined diff, not that it matters in practice.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1414.diff
https://github.com/git/git/commit/6035d6aad8ca11954c0d7821f6f3e7c047039c8f,28 May 2013,"fetch-pack: prepare updated shallow file before fetching the pack

index-pack --strict looks up and follows parent commits. If shallow
information is not ready by the time index-pack is run, index-pack may
be led to non-existent objects. Make fetch-pack save shallow file to
disk before invoking index-pack.

git learns new global option --shallow-file to pass on the alternate
shallow file path. Undocumented (and not even support --shallow-file=
syntax) because it's unlikely to be used again elsewhere.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/patch_1415.diff
https://github.com/git/git/commit/42cbbcc73b312e2306f051f89702799546aa7953,28 May 2013,"remote-hg: add check_push() helper

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1416.diff
https://github.com/git/git/commit/d2c76330286c8bd604f9fbbb7818cecce893b769,28 May 2013,"remote-hg: add test for big push

With lots branches and bookmarks, non-ff, updated and new.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_1417.diff
https://github.com/git/git/commit/747b61c6a66b5af279fdc1f919e9519045ed097a,28 May 2013,"remote-hg: add test for bookmark diverge

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1418.diff
https://github.com/git/git/commit/1a810864e87b78c08295acca124eb66b8cf2a973,28 May 2013,"remote-hg: add test for diverged push

Neither mercurial nor git allows pushing to a remote when it's a
non-fast-forward push. We should be able to detect these errors and
report them properly, as opposed to throwing an exception
stack-trace.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1419.diff
https://github.com/git/git/commit/6796d49ed01c214d4eeb5b9f2ffd2a49b54a7207,28 May 2013,"remote-hg: use a shared repository store

This way we don't have to have duplicated Mercurial objects.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1420.diff
https://github.com/git/git/commit/17bf4ff3cd3d7fd4b252b81417df8be1b3b2b128,22 May 2013,"sha1_name: fix error message for @{u}

Currently, when no (valid) upstream is configured for a branch, you get
an error like:

  $ git show @{u}
  error: No upstream configured for branch 'upstream-error'
  error: No upstream configured for branch 'upstream-error'
  fatal: ambiguous argument '@{u}': unknown revision or path not in the working tree.
  Use '--' to separate paths from revisions, like this:
  'git <command> [<revision>...] -- [<file>...]'

The ""error: "" line actually appears twice, and the rest of the error
message is useless.  In sha1_name.c:interpret_branch_name(), there is
really no point in processing further if @{u} couldn't be resolved, and
we might as well die() instead of returning an error().  After making
this change, you get:

  $ git show @{u}
  fatal: No upstream configured for branch 'upstream-error'

Also tweak a few tests in t1507 to expect this output.

This only turns error() that may be called after we know we are
dealing with an @{upstream} marker into die(), without touching
silent error returns ""return -1"" from the function.  Any caller that
wants to handle an error condition itself will not be hurt by this
change, unless they want to see the message from error() and then
exit silently without giving its own message, which needs to be
fixed anyway.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1421.diff
https://github.com/git/git/commit/21457f5719b894a5997d66ff098b375bc2404260,21 May 2013,"transport-helper: check if the dry-run is supported

Certain remote-helpers (the ones with 'export') would try to push
regardless.

Obviously this is not what the user wants.

Also, add a check for the 'dry-run' option, so remote-helpers can
implement it.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1422.diff
https://github.com/git/git/commit/67c9c782dae17822266783f8b5e15d73e7c91c65,21 May 2013,"transport-helper: barf when user tries old:new

Otherwise with certain remote helpers (the ones that support 'export'),
the users will be pushing to the wrong branch:

  git push topic:master

Will push the topic branch, as if the user typed:

  git push topic

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1423.diff
https://github.com/git/git/commit/1f197a1de497db8898c9920fab77533dab34a03c,17 May 2013,"difftool: fix dir-diff when file does not exist in working tree

Commit 02c5631 (difftool --dir-diff: symlink all files matching the
working tree, 2013-03-14) does not handle the case where a file that is
being compared does not exist in the working tree.  Fix this by checking
for existence explicitly before running git-hash-object.

Reported-by: Kevin Bracey <kevin@bracey.fi>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1424.diff
https://github.com/git/git/commit/d0af663e42abfcd5be6f7c3db21a29e521aa4ca2,16 May 2013,"revision.c: Make --full-history consider more merges

History simplification previously always treated merges as TREESAME
if they were TREESAME to any parent.

While this was consistent with the default behaviour, this could be
extremely unhelpful when searching detailed history, and could not be
overridden. For example, if a merge had ignored a change, as if by ""-s
ours"", then:

  git log -m -p --full-history -Schange file

would successfully locate ""change""'s addition but would not locate the
merge that resolved against it.

Futher, simplify_merges could drop the actual parent that a commit
was TREESAME to, leaving it as a normal commit marked TREESAME that
isn't actually TREESAME to its remaining parent.

Now redefine a commit's TREESAME flag to be true only if a commit is
TREESAME to _all_ of its parents. This doesn't affect either the default
simplify_history behaviour (because partially TREESAME merges are turned
into normal commits), or full-history with parent rewriting (because all
merges are output). But it does affect other modes. The clearest
difference is that --full-history will show more merges - sufficient to
ensure that -m -p --full-history log searches can really explain every
change to the file, including those changes' ultimate fate in merges.

Also modify simplify_merges to recalculate TREESAME after removing
a parent. This is achieved by storing per-parent TREESAME flags on the
initial scan, so the combined flag can be easily recomputed.

This fixes some t6111 failures, but creates a couple of new ones -
we are now showing some merges that don't need to be shown.

Signed-off-by: Kevin Bracey <kevin@bracey.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",276,data/crawl/git/patch_1425.diff
https://github.com/git/git/commit/900f2814b8da951a450f5762dabb1b248dd77abc,12 May 2013,"refactor ""ref->merge"" flag

Each ""struct ref"" has a boolean flag that is set by the
fetch code to determine whether the ref should be marked as
""not-for-merge"" or not when we write it out to FETCH_HEAD.

It would be useful to turn this boolean into a tri-state,
with the third state meaning ""do not bother writing it out
to FETCH_HEAD at all"". That would let us add extra refs to
the set of refs to be stored (e.g., to store copies of
things we fetched) without impacting FETCH_HEAD.

This patch turns it into an enum that covers the tri-state
case, and hopefully makes the code more explicit and easier
to read.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1426.diff
https://github.com/git/git/commit/0781aa4766ed88d620ea060c7d775ca806ebfa93,11 May 2013,"clone: let the user know when check_everything_connected is run

check_everything_connected could take a long time, especially in the
clone case where the whole DAG is traversed. The user deserves to know
what's going on.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1427.diff
https://github.com/git/git/commit/f3f8af0e54a31ffed242dc36482f82393f596ee5,08 May 2013,"merge: use help_unknown_ref()

Use help.c:help_unknown_ref() instead of die() to provide a
friendlier error message before exiting, when one of the refs
specified in a merge is unknown.

Signed-off-by: Vikrant Varma <vikrant.varma94@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1428.diff
https://github.com/git/git/commit/e56181060e1117d458b854c34e63206117dab8b6,08 May 2013,"help: add help_unknown_ref()

When the user gives an unknown string to a command that expects to
get a ref, we could be more helpful than just saying ""that's not a
ref"" and die.

Add helper function help_unknown_ref() to take care of displaying an
error message along with a list of suggested refs the user might
have meant.  An interaction with ""git merge"" might go like this:

	$ git merge foo
	merge: foo - not something we can merge

	Did you mean one of these?
	    origin/foo
	    upstream/foo

Signed-off-by: Vikrant Varma <vikrant.varma94@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1429.diff
https://github.com/git/git/commit/60003340cda05f5ecd79ee8522b21eda038b994b,07 May 2013,"clone: allow cloning local paths with colons in them

Usually ""foo:bar"" is interpreted as an ssh url. This patch allows to
clone from such paths by putting at least one slash before the colon
(i.e. /path/to/foo:bar or just ./foo:bar).

file://foo:bar should also work, but local optimizations are off in
that case, which may be unwanted. While at there, warn the users about
--local being ignored in this case.

Reported-by: William Giokas <1007380@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1430.diff
https://github.com/git/git/commit/47bd9bf82daeac71b28a5a697ecc44e70b205e18,07 May 2013,"fast-export: don't parse commits while reading marks file

We don't need the parsed objects at this point, merely the
information that they have marks.

Seems to be three times faster in my setup with lots of objects.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1431.diff
https://github.com/git/git/commit/e6812cfa9aba69a8c9d83b0710291b27bff0f7a3,07 May 2013,"fast-export: do not parse non-commit objects while reading marks file

We read from the marks file and keep only marked commits, but in
order to find the type of object, we are parsing the whole thing,
which is slow, specially in big repositories with lots of big files.

There's no need for that, we can query the object information with
sha1_object_info().

Before this, loading the objects of a fresh emacs import, with 260598
blobs took 14 minutes, after this patch, it takes 3 seconds.

This is the way fast-import does it. Also die if the object is not
found (like fast-import).

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1432.diff
https://github.com/git/git/commit/6f4dd60d0713980cf976f569eb83850f9a28fe3c,07 May 2013,"deprecate core.statinfo at Git 2.0 boundary

c08e4d5b5cfa (Enable minimal stat checking, 2013-01-22) advertised
the configuration variable core.checkstat in the documentation and
its log message, but the code expected core.statinfo instead.

For now, add core.checkstat, and warn people who have core.statinfo
in their configuration file that we will remove it in Git 2.0.

Noticed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1433.diff
https://github.com/git/git/commit/0f29920f1e0ce00aaf867fdd9ad2174011179f47,01 May 2013,"pack_one_ref(): use write_packed_entry() to do the writing

Change pack_refs() to work with a file descriptor instead of a FILE*
(making the file-locking code less awkward) and use
write_packed_entry() to do the writing.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1434.diff
https://github.com/git/git/commit/f85354b5c7b800912743927f4abba022444163fd,01 May 2013,"pack_one_ref(): use function peel_entry()

Change pack_one_ref() to call peel_entry() rather than using its own
code for peeling references.  Aside from sharing code, this lets it
take advantage of the optimization introduced by 6c4a060d7d.

Please note that we *could* use any peeled values that happen to
already be stored in the ref_entries, which would avoid some object
lookups for references that were already packed.  But doing so would
also propagate any peeling errors across runs of ""git pack-refs"" and
give no way to recover from such errors.  And ""git pack-refs"" isn't
run often enough that the performance cost is a problem.  So instead,
add a new option to peel_entry() to force the entry to be re-peeled,
and call it with that option set.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1435.diff
https://github.com/git/git/commit/12e77559ec4bf863d3703a25ab79298d5ff89b3b,01 May 2013,"pack_refs(): change to use do_for_each_entry()

pack_refs() was not using any of the extra features of for_each_ref(),
so change it to use do_for_each_entry().  This also gives it access to
the ref_entry and in particular its peeled field, which will be taken
advantage of in the next commit.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1436.diff
https://github.com/git/git/commit/3b4ae6d5023095114692d1e2e1a213611fec9314,01 May 2013,"pack_one_ref(): rename ""path"" parameter to ""refname""

Make this function conform to the naming convention established in
65385ef7d4 for the rest of the refs.c file.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1437.diff
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/patch_1438.diff
https://github.com/git/git/commit/fec3137ffcc49d58e6388b1c61da902b031e01ca,01 May 2013,"refs: extract a function write_packed_entry()

Extract the I/O code from the ""business logic"" in repack_ref_fn().
Later there will be another caller for this function.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1439.diff
https://github.com/git/git/commit/694b7a1999fa331e00ed9297f3b6b01f7da7a104,01 May 2013,"repack_without_ref(): write peeled refs in the rewritten file

When a reference that existed in the packed-refs file is deleted, the
packed-refs file must be rewritten.  Previously, the file was
rewritten without any peeled refs, even if the file contained peeled
refs when it was read.  This was not a bug, because the packed-refs
file header didn't claim that the file contained peeled values.  But
it had a performance cost, because the repository would lose the
benefit of having precomputed peeled references until pack-refs was
run again.

Teach repack_without_ref() to write peeled refs to the packed-refs
file (regardless of whether they were present in the old version of
the file).

This means that if the old version of the packed-refs file was not
fully peeled, then repack_without_ref() will have to peel references.
To avoid the expense of reading lots of loose references, we take two
shortcuts relative to pack-refs:

* If the peeled value of a reference is already known (i.e., because
  it was read from the old version of the packed-refs file), then
  output that peeled value again without any checks.  This is the
  usual code path and should avoid any noticeable overhead.  (This is
  different than pack-refs, which always re-peels references.)

* We don't verify that the packed ref is still current.  It could be
  that a packed references is overridden by a loose reference, in
  which case the packed ref is no longer needed and might even refer
  to an object that has been garbage collected.  But we don't check;
  instead, we just try to peel all references.  If peeling is
  successful, the peeled value is written out (even though it might
  not be needed any more); if not, then the reference is silently
  omitted from the output.

The extra overhead of peeling references in repack_without_ref()
should only be incurred the first time the packed-refs file is written
by a version of Git that knows about the ""fully-peeled"" attribute.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1440.diff
https://github.com/git/git/commit/ab292bc4f30dd29d3d111b040b9e982f20b9ceb7,01 May 2013,"repack_without_ref(): silence errors for dangling packed refs

Stop emitting an error message when deleting a packed reference if we
find another dangling packed reference that is overridden by a loose
reference.  See the previous commit for a longer explanation of the
issue.

We have to be careful to make sure that the invalid packed reference
really *is* overridden by a loose reference; otherwise what we have
found is repository corruption, which we *should* report.

Please note that this approach is vulnerable to a race condition
similar to the race conditions already known to affect packed
references [1]:

* Process 1 tries to peel packed reference X as part of deleting
  another packed reference.  It discovers that X does not refer to a
  valid object (because the object that it referred to has been
  garbage collected).

* Process 2 tries to delete reference X.  It starts by deleting the
  loose reference X.

* Process 1 checks whether there is a loose reference X.  There is not
  (it has just been deleted by process 2), so process 1 reports a
  spurious error ""X does not point to a valid object!""

The worst case seems relatively harmless, and the fix is identical to
the fix that will be needed for the other race conditions (namely
holding a lock on the packed-refs file during *all* reference
deletions), so we leave the cleaning up of all of them as a future
project.

[1] http://thread.gmane.org/gmane.comp.version-control.git/211956

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1441.diff
https://github.com/git/git/commit/624cac351478be90bf02a753f9de3e7dc80ca300,01 May 2013,"refs: change the internal reference-iteration API

Establish an internal API for iterating over references, which gives
the callback functions direct access to the ref_entry structure
describing the reference.  (Do not change the iteration API that is
exposed outside of the module.)

Define a new internal callback signature

   int each_ref_entry_fn(struct ref_entry *entry, void *cb_data)

Change do_for_each_ref_in_dir() and do_for_each_ref_in_dirs() to
accept each_ref_entry_fn callbacks, and rename them to
do_for_each_entry_in_dir() and do_for_each_entry_in_dirs(),
respectively.  Adapt their callers accordingly.

Add a new function do_for_each_entry() analogous to do_for_each_ref()
but using the new callback style.

Change do_one_ref() into an each_ref_entry_fn that does some
bookkeeping and then calls a wrapped each_ref_fn.

Reimplement do_for_each_ref() in terms of do_for_each_entry(), using
do_one_ref() as an adapter.

Please note that the responsibility for setting current_ref remains in
do_one_ref(), which means that current_ref is *not* set when iterating
over references via the new internal API.  This is not a disadvantage,
because current_ref is not needed by callers of the internal API (they
receive a pointer to the current ref_entry anyway).  But more
importantly, this change prevents peel_ref() from returning invalid
results in the following scenario:

When iterating via the external API, the iteration always includes
both packed and loose references, and in particular never presents a
packed ref if there is a loose ref with the same name.  The internal
API, on the other hand, gives the option to iterate over only the
packed references.  During such an iteration, there is no check
whether the packed ref might be hidden by a loose ref of the same
name.  But until now the packed ref was recorded in current_ref during
the iteration.  So if peel_ref() were called with the reference name
corresponding to current ref, it would return the peeled version of
the packed ref even though there might be a loose ref that peels to a
different value.  This scenario doesn't currently occur in the code,
but fix it to prevent things from breaking in a very confusing way in
the future.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_1442.diff
https://github.com/git/git/commit/662428f4e98a740800659081910ef8b1ef3940fa,01 May 2013,"refs: extract a function ref_resolves_to_object()

It is a nice unit of work and soon will be needed from multiple
locations.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1443.diff
https://github.com/git/git/commit/3212d56ce528a86170f7809659f80a8769a5875f,01 May 2013,"contrib/subtree: don't delete remote branches if split fails

When using ""git subtree push"" to split out a subtree and push it to a
remote repository, we do not detect if the split command fails which
causes the LHS of the refspec to be empty, deleting the remote branch.

Fix this by pulling the result of the split command into a variable so
that we can die if the command fails.

Reported-by: Steffen Jaeckel <steffen.jaeckel@stzedn.de>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1444.diff
https://github.com/git/git/commit/248663c4ff931f1f42fb7f8233d0ae23f80c7835,01 May 2013,"remote-bzr: add option to specify branches

We might not want all the branches. And branch handling in bazaar is
rather tricky, so it's safer to simply specify them.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1445.diff
https://github.com/git/git/commit/95b0c60831148ca929e31b214ab3d29537ba20c9,01 May 2013,"remote-bzr: add support for bzr repos

In bazaar, a repository can contain multiple branches, and previously we
were supporting only one branch at a time. Now we fetch them all.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",194,data/crawl/git/patch_1446.diff
https://github.com/git/git/commit/af04fa2a78af3f4dc07bdc3e3018ccf3baa88c20,29 Apr 2013,"upload-pack: ignore 'shallow' lines with unknown obj-ids

When the client sends a 'shallow' line for an object that the server does
not have, the server currently dies with the error: ""did not find object
for shallow <obj-id>"".  The client may have truncated the history at
the commit by fetching shallowly from a different server, or the commit
may have been garbage collected by the server. In either case, this
unknown commit is not relevant for calculating the pack that is to be
sent and can be safely ignored, and it is not used when recomputing where
the updated history of the client is cauterised.

The documentation in technical/pack-protocol.txt has been updated to
remove the restriction that ""Clients MUST NOT mention an obj-id which it
does not know exists on the server"". This requirement is not realistic
because clients cannot know whether an object has been garbage collected
by the server.

Signed-off-by: Michael Heemskerk <mheemskerk@atlassian.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1447.diff
https://github.com/git/git/commit/891122266fc6836cb8a8ebf77d75aa6c9306a04c,22 Apr 2013,"remote-hg: add support for schemes extension

So that we can use shortened URLs, for example 'bb:://felipec/repo'
(Bitbucket).

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1448.diff
https://github.com/git/git/commit/ccc663bc24a3925b818df0ce97a5ba47e221f383,22 Apr 2013,"git add: rephrase the ""removal will cease to be ignored"" warning

Now the logic to decide when to warn has been tightened, we know the
user is in a situation where the current and future behaviours will
be different.  Spell out what happens with these two versions and
how to explicitly ask for the behaviour, and suggest ""git status"" as
a way to inspect the current status.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1449.diff
https://github.com/git/git/commit/9d3f002f21f78576f3c31ae94ce78de54e305c95,18 Apr 2013,"pretty: share code between format_decoration and show_decorations

This also adds color support to format_decorations()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_1450.diff
https://github.com/git/git/commit/9c51558cfb6ffe104da45d324194d9f1ebf9bc65,18 Apr 2013,"transport-helper: trivial code shuffle

Just shuffle the die() part to make it more explicit, and cleanup the
code-style.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1451.diff
https://github.com/git/git/commit/a93b4a09acfed0e2a006770d0196c74968e65c25,18 Apr 2013,"transport-helper: warn when refspec is not used

For the modes that need it. In the future we should probably error out,
instead of providing half-assed support.

The reason we want to do this is because if it's not present, the remote
helper might be updating refs/heads/*, or refs/remotes/origin/*,
directly, and in the process fetch will get confused trying to update
refs that are already updated, or older than what they should be. We
shouldn't be messing with the rest of git.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1452.diff
https://github.com/git/git/commit/21610d820b97583a8f4e3e7f4a48716c8e32fd92,18 Apr 2013,"transport-helper: clarify pushing without refspecs

This has never worked, since it's inception the code simply skips all
the refs, essentially telling fast-export to do nothing.

Let's at least tell the user what's going on.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1453.diff
https://github.com/git/git/commit/d226b14d47311d74e2d55059a54594c3fe474b25,18 Apr 2013,"git add: rework the logic to warn ""git add <pathspec>..."" default change

The earlier logic to warn against ""git add subdir"" that is run
without ""-A"" or ""--no-all"" was only to check any <pathspec> given
exactly spells a directory name that (still) exists on the
filesystem.  This had number of problems:

 * ""git add '*dir'"" (note that the wildcard is hidden from the
   shell) would not trigger the warning.

 * ""git add '*.py'"" would behave differently between the current
   version of Git and Git 2.0 for the same reason as ""subdir"", but
   would not trigger the warning.

 * ""git add dir"" for a submodule ""dir"" would just update the index
   entry for the submodule ""dir"" without ever recursing into it, and
   use of ""-A"" or ""--no-all"" would matter.  But the logic only
   checks the directory-ness of ""dir"" and gives an unnecessary
   warning.

Rework the logic to detect the case where the behaviour will be
different in Git 2.0, and issue a warning only when it matters.
Even with the code before this warning, ""git add subdir"" will have
to traverse the directory in order to find _new_ files the index
does not know about _anyway_, so we can do this check without adding
an extra pass to find if <pathspec> matches any removed file.

This essentially updates the ""add_files_to_cache()"" public API to
""update_files_in_cache()"" API that is internal to ""git add"", because
with the ""--all"" option, the function is no longer about ""adding""
paths to the cache, but is also used to remove them.

There are other callers of the former from ""checkout"" (used when
""checkout -m"" prepares the temporary tree that represents the local
modifications to be merged) and ""commit"" (""commit --include"" that
picks up local changes in addition to what is in the index).  Since
ADD_CACHE_IGNORE_ERRORS (aka ""--no-all"") is not used by either of
them, once dust settles after Git 2.0 and the warning becomes
unnecessary, we may want to unify these two functions again.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_1454.diff
https://github.com/git/git/commit/3d27b9b005f26b107227fc18b6648df329daee97,17 Apr 2013,"date.c: add parse_expiry_date()

""git reflog --expire=all"" tries to expire reflog entries up to the
current second, because the approxidate() parser gives the current
timestamp for anything it does not understand (and it does not know
what time ""all"" means).  When the user tells us to expire ""all"" (or
set the expiration time to ""now""), the user wants to remove all the
reflog entries (no reflog entry should record future time).

Just set it to ULONG_MAX and to let everything that is older that
timestamp expire.

While at it, allow ""now"" to be treated the same way for callers that
parse expiry date timestamp with this function.  Also use an error
reporting version of approxidate() to report misspelled date.  When
the user says e.g. ""--expire=mnoday"" to delete entries two days or
older on Wednesday, we wouldn't want the ""unknown, default to now""
logic to kick in.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1455.diff
https://github.com/git/git/commit/bc554df8c90e3592e8cd70460032b524fb6f03bc,16 Apr 2013,"i18n: branch: mark strings for translation

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1456.diff
https://github.com/git/git/commit/6cd5c582dcf8e6b960079247ac9d0dbace856458,15 Apr 2013,"dir.c: move prep_exclude

Move prep_exclude in preparation for the next patch.

Signed-off-by: Karsten Blees <blees@dcon.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_1457.diff
https://github.com/git/git/commit/cd16c59bfa216b7e153f357ccfa89d2a567b8c00,15 Apr 2013,"fast-export: add --signed-tags=warn-strip mode

This issues a warning while stripping signatures from signed tags, which
allows us to use it as default behaviour for remote helpers which cannot
specify how to handle signed tags.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1458.diff
https://github.com/git/git/commit/caa7d79f1f7c9940acfaf161b9b84bbf81980d95,12 Apr 2013,"Sync with 'maint'

* maint:
  Correct common spelling mistakes in comments and tests
  kwset: fix spelling in comments
  precompose-utf8: fix spelling of ""want"" in error message
  compat/nedmalloc: fix spelling in comments
  compat/regex: fix spelling and grammar in comments
  obstack: fix spelling of similar
  contrib/subtree: fix spelling of accidentally
  git-remote-mediawiki: spelling fixes
  doc: various spelling fixes
  fast-export: fix argument name in error messages
  Documentation: distinguish between ref and offset deltas in pack-format
  i18n: make the translation of -u advice in one go",168,data/crawl/git/patch_1459.diff
https://github.com/git/git/commit/d51c5274e458e9c2545144b6821978ccda85c117,12 Apr 2013,"log -L: test merge of parallel modify/rename

This tests a toy example of a history like

  * Merge
  | \
  |  * Modify foo
  |  |
  *  | Rename foo->bar
  | /
  * Create foo

Current log -L fails on this; we'll fix it in the next commit.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",256,data/crawl/git/patch_1460.diff
https://github.com/git/git/commit/04a74b6cfa5ef4870263f84ac94a488d9f2ef14a,12 Apr 2013,"fast-export: fix argument name in error messages

The --signed-tags argument is plural, while error messages referred
to --signed-tag (singular).  Tweak error messages to correspond to the
argument.

Signed-off-by: Paul Price <price@astro.princeton.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1461.diff
https://github.com/git/git/commit/62901179cfbb86e31a4bed098cee9734a701912b,12 Apr 2013,"i18n: make the translation of -u advice in one go

The advice (consider use of -u when read_directory takes too long) is
separated into 3 different status_printf_ln() calls, and which brings
trouble for translators.

Since status_vprintf() called by status_printf_ln() can handle eol in
buffer, we could simply join these lines into one paragraph.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1462.diff
https://github.com/git/git/commit/f1ed7fea7974218db15155f3b8d2e29d3fe0971c,11 Apr 2013,"Documentation: add caveats about I/O buffering for check-{attr,ignore}

check-attr and check-ignore have the potential to deadlock callers
which do not read back the output in real-time.  For example, if a
caller writes N paths out and then reads N lines back in, it risks
becoming blocked on write() to check-*, and check-* is blocked on
write back to the caller.  Somebody has to buffer; the pipe buffers
provide some leeway, but they are limited.

Thanks to Peff for pointing this out:

    http://article.gmane.org/gmane.comp.version-control.git/220534

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1463.diff
https://github.com/git/git/commit/0c8e8c080b08632d6dbee33d093b5df648196b49,11 Apr 2013,"check-ignore: allow incremental streaming of queries via --stdin

Some callers, such as the git-annex web assistant, find it useful to
invoke git check-ignore as a persistent background process, which can
then have queries fed to its STDIN at any point, and the corresponding
response consumed from its STDOUT.  For this we need to invoke
check_ignore() once per line of standard input, and flush standard
output after each result.

The above use case suggests that empty STDIN is actually a reasonable
scenario (e.g. when the caller doesn't know in advance whether any
queries need to be fed to the background process until after it's
already started), so we make the minor behavioural change that ""no
pathspec given."" is no longer emitted in when STDIN is empty.

Even though check_ignore() could now be changed to operate on a single
pathspec, we keep it operating on an array of pathspecs since that is
a more convenient way of consuming the existing pathspec API.

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_1464.diff
https://github.com/git/git/commit/0006d85c3a2fcbd803ed46cf283fab4e4fae3a7f,11 Apr 2013,"check-ignore: move setup into cmd_check_ignore()

Initialisation of the dir_struct and path_exclude_check structs was
previously done within check_ignore().  This was acceptable since
check_ignore() was only called once per check-ignore invocation;
however the next commit will convert it into an inner loop which is
called once per line of STDIN when --stdin is given.  Therefore moving
the initialisation code out into cmd_check_ignore() ensures that
initialisation is still only performed once per check-ignore
invocation, and consequently that the output is identical whether
pathspecs are provided as CLI arguments or via STDIN.

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1465.diff
https://github.com/git/git/commit/ae3caf4c912429c8e9755f2e10d2f0a7f6279c36,11 Apr 2013,"check-ignore: add -n / --non-matching option

If `-n` or `--non-matching` are specified, non-matching pathnames will
also be output, in which case all fields in each output record except
for <pathname> will be empty.  This can be useful when running
check-ignore as a background process, so that files can be
incrementally streamed to STDIN, and for each of these files, STDOUT
will indicate whether that file matched a pattern or not.  (Without
this option, it would be impossible to tell whether the absence of
output for a given file meant that it didn't match any pattern, or
that the result simply hadn't been flushed to STDOUT yet.)

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/patch_1466.diff
https://github.com/git/git/commit/cbf6237c2ba989794815f980af1d26860840daf6,11 Apr 2013,"remote-hg: show more proper errors

When cloning or pushing fails, we don't want to show a stack-trace.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1467.diff
https://github.com/git/git/commit/21246dbb9e0af278bc671e32e45a6cae4ad38b6f,11 Apr 2013,"cherry-pick: make sure all input objects are commits

When a single argument was a non-commit, the error message used to be:

	fatal: BUG: expected exactly one commit from walk

For multiple arguments, when none of the arguments was a commit, the error was:

	fatal: empty commit set passed

Finally, when some of the arguments were non-commits, we ignored those
arguments.  Fix this bug and make sure all arguments are commits, and
for the first non-commit, error out with:

	fatal: <name>: Can't cherry-pick a <type>

Signed-off-by: Miklos Vajna <vmiklos@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1468.diff
https://github.com/git/git/commit/c096955c5bb8e20186cc7c07d4d12b77ddcd01c6,11 Apr 2013,"transport-helper: mention helper name when it dies

When we try to read from a remote-helper and get EOF or an
error, we print a message indicating that the helper died.
However, users may not know that a remote helper was in use
(e.g., when using git-over-http), or even what a remote
helper is.

Let's print the name of the helper (e.g., ""git-remote-https"");
this makes it more obvious what the program is for, and
provides a useful token for reporting bugs or searching for
more information (e.g., in manpages).

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1469.diff
https://github.com/git/git/commit/81d340d40af506eda3182190b6132575547fa4c5,11 Apr 2013,"transport-helper: report errors properly

If a push fails because the remote-helper died (with fast-export),
the user may not see any error message. We do correctly die with a
failed exit code, as we notice that the helper has died while
reading back the ref status from the helper. However, we don't print
any message. This is OK if the helper itself printed a useful error
message, but we cannot count on that; let's let the user know that
the helper failed.

In the long run, it may make more sense to propagate the error back
up to push, so that it can present the usual status table and give a
nicer message. But this is a much simpler fix that can help
immediately.

While we're adding tests, let's also confirm that the remote-helper
dying is also detected when importing refs. We currently do so
robustly when the helper uses the ""done"" feature (and that is what
we test).  We cannot do so reliably when the helper does not use the
""done"" feature, but it is not even worth testing; the right solution
is for the helper to start using ""done"".

Suggested-by: Jeff King <peff@peff.net>
Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1470.diff
https://github.com/git/git/commit/1918225d2fce49c830b41b8c7907229638ae2825,10 Apr 2013,"count-objects: add -H option to humanize sizes

Use the new humanize() function to print loose objects size, pack size,
and garbage size in verbose mode, or loose objects size in regular mode.
This patch doesn't change the way anything is displayed when the option
is not used.

Also update the documentation.

Signed-off-by: Antoine Pelisse <apelisse@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_1471.diff
https://github.com/git/git/commit/0658569eb03e743ef46abd06abd9d0d81d53e72c,09 Apr 2013,"clone: Fix error message for reference repository

Do not report that an argument to clone's --reference option is not a
local directory.  Nothing checks for the existence or type of the path
as supplied by the user; checks are only done for particular contents of
the supposed directory, so we have no way to know the status of the
supplied path.  Telling the user that a directory doesn't exist when
that isn't actually known may lead him or her on the wrong path to
finding the problem.

Instead just state that the entered path is not a local repository which
is really all that is known about it.  It could be more helpful to state
the actual paths which were checked, but I believe that giving a good
description of that would be too verbose for a simple error message and
would be too dependent on implementation details.

Signed-off-by: Aaron Schrab <aaron@schrab.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1472.diff
https://github.com/git/git/commit/c4458ecdc565fb63cc3247bd1e2d7525d9d6d2fa,07 Apr 2013,"fast-export: Allow pruned-references in mark file

fast-export can fail because of some pruned-reference when importing a
mark file.

The problem happens in the following scenario:

    $ git fast-export --export-marks=MARKS master
    (rewrite master)
    $ git prune
    $ git fast-export --import-marks=MARKS master

This might fail if some references have been removed by prune
because some marks will refer to no longer existing commits.
git-fast-export will not need these objects anyway as they were no
longer reachable.

We still need to update last_numid so we don't change the mapping
between marks and objects for remote-helpers.
Unfortunately, the mark file should not be rewritten without lost marks
if no new objects has been exported, as we could lose track of the last
last_numid.

Signed-off-by: Antoine Pelisse <apelisse@gmail.com>
Reviewed-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1473.diff
https://github.com/git/git/commit/4df13f69e9facbd09a2b06478e8c40082cda7ce6,07 Apr 2013,"http: drop http_error function

This function is a single-liner and is only called from one
place. Just inline it, which makes the code more obvious.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1474.diff
https://github.com/git/git/commit/de89f0b25a42238948787421c0253228c006f7fa,07 Apr 2013,"remote-curl: die directly with http error messages

When we encounter an unknown http error (e.g., a 403), we
hand the error code to http_error, which then prints it with
error(). After that we die with the redundant message ""HTTP
request failed"".

Instead, let's just drop http_error entirely, which does
nothing but pass arguments to error(), and instead die
directly with a useful message.

So before:

  $ git clone https://example.com/repo.git
  Cloning into 'repo'...
  error: unable to access 'https://example.com/repo.git': The requested URL returned error: 403 Forbidden
  fatal: HTTP request failed

and after:

  $ git clone https://example.com/repo.git
  Cloning into 'repo'...
  fatal: unable to access 'https://example.com/repo.git': The requested URL returned error: 403 Forbidden

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1475.diff
https://github.com/git/git/commit/39a570f26c953e8277a6a26c00da657b240dcdd4,07 Apr 2013,"http: re-word http error message

When we report an http error code, we say something like:

  error: The requested URL reported failure: 403 Forbidden while accessing http://example.com/repo.git

Everything between ""error:"" and ""while"" is written by curl,
and the resulting sentence is hard to read (especially
because there is no punctuation between curl's sentence and
the remainder of ours). Instead, let's re-order this to give
better flow:

  error: unable to access 'http://example.com/repo.git: The requested URL reported failure: 403 Forbidden

This is still annoyingly long, but at least reads more
clearly left to right.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1476.diff
https://github.com/git/git/commit/67d2a7b5c502496b0c5acd25a5e0ffa766b61745,07 Apr 2013,"http: simplify http_error helper function

This helper function should really be a one-liner that
prints an error message, but it has ended up unnecessarily
complicated:

  1. We call error() directly when we fail to start the curl
     request, so we must later avoid printing a duplicate
     error in http_error().

     It would be much simpler in this case to just stuff the
     error message into our usual curl_errorstr buffer
     rather than printing it ourselves. This means that
     http_error does not even have to care about curl's exit
     value (the interesting part is in the errorstr buffer
     already).

  2. We return the ""ret"" value passed in to us, but none of
     the callers actually cares about our return value. We
     can just drop this entirely.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1477.diff
https://github.com/git/git/commit/d5ccbe4dfb43d95d1d04252490fcd200e6aa5759,07 Apr 2013,"remote-curl: consistently report repo url for http errors

When we report http errors in fetching the initial ref
advertisement, we show the full URL we attempted to use,
including ""info/refs?service=git-upload-pack"". While this
may be useful for debugging a broken server, it is
unnecessarily verbose and confusing for most cases, in which
the client user is not even the same person as the owner of
the repository.

Let's just show the repository URL; debugging can happen
with GIT_CURL_VERBOSE, which shows way more useful
information, anyway.

At the same time, let's also make sure to mention the
repository URL when we report failed authentication
(previously we said only ""Authentication failed""). Knowing
the URL can help the user realize why authentication failed
(e.g., they meant to push to remote A, not remote B).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1478.diff
https://github.com/git/git/commit/cfa0f4040dd1885fbcdd3d306c1defe22d0fee00,07 Apr 2013,"remote-curl: always show friendlier 404 message

When we get an http 404 trying to get the initial list of
refs from the server, we try to be helpful and remind the
user that update-server-info may need to be run. This looks
like:

  $ git clone https://github.com/non/existent
  Cloning into 'existent'...
  fatal: https://github.com/non/existent/info/refs?service=git-upload-pack not found: did you run git update-server-info on the server?

Suggesting update-server-info may be a good suggestion for
users who are in control of the server repo and who are
planning to set up dumb http. But for users of smart http,
and especially users who are not in control of the server
repo, the advice is useless and confusing.

Since most people are expected to use smart http these days,
it does not make sense to keep the update-server-info hint.

We not only drop the mention of update-server-info, but also
show only the main repo URL, not the full ""info/refs"" and
service parameter. These elements may be useful for
debugging a broken server configuration, but in the majority
of cases, users are not fetching from their own
repositories, but rather from other people's repositories;
they have neither the power nor interest to fix a broken
configuration, and the extra components just make the
message more confusing. Users who do want to debug can and
should use GIT_CURL_VERBOSE to get more complete information
on the actual URLs visited.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1479.diff
https://github.com/git/git/commit/110bcdc3d0ea9f0042f24a4c0319dede36dfe7f9,07 Apr 2013,"remote-curl: let servers override http 404 advice

When we get an http 404 trying to get the initial list of
refs from the server, we try to be helpful and remind the
user that update-server-info may need to be run. This looks
like:

  $ git clone https://github.com/non/existent
  Cloning into 'existent'...
  fatal: https://github.com/non/existent/info/refs?service=git-upload-pack not found: did you run git update-server-info on the server?

Suggesting update-server-info may be a good suggestion for
users who are in control of the server repo and who are
planning to set up dumb http. But for users of smart http,
and especially users who are not in control of the server
repo, the advice is useless and confusing.

The previous patch taught remote-curl to show custom advice
from the server when it is available. When we have shown
messages from the server, we can also drop our custom
advice; what the server has to say is likely to be more
accurate and helpful.

We not only drop the mention of update-server-info, but also
show only the main repo URL, not the full ""info/refs"" and
service parameter. These elements may be useful for
debugging a broken server configuration, but again, anything
the server has provided is likely to be more useful (and one
can still use GIT_CURL_VERBOSE to get much more complete
debugging information).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1480.diff
https://github.com/git/git/commit/426e70d4a11ce3b4f70636d57c6a0ab16ae08a00,07 Apr 2013,"remote-curl: show server content on http errors

If an http request to a remote git server fails, we show
only the http response code, or sometimes a custom message
for particular codes. This gives the server no opportunity
to offer a more detailed explanation of the reason for the
failure, or to give extra advice.

This patch teaches remote-curl to record and display the
body content of a failed http response. We only display such
responses when the content-type is advertised as text/plain,
as it is the most likely to look presentable on the user's
terminal (and it is hoped to be a good indication that the
message is intended for git clients, and not for a web
browser).

Each line of the new output is prepended with ""remote:"".
Example output may look like this (assuming the server is
configured to display such a helpful message):

  $ GIT_SMART_HTTP=0 git clone https://example.com/some/repo.git
  Cloning into 'repo'...
  remote: Sorry, fetching via dumb http is forbidden.
  remote: Please upgrade your git client to v1.6.6 or greater
  remote: and make sure that smart-http is enabled.
  error: The requested URL returned error: 403 while accessing http://localhost:5001/some/repo.git/info/refs
  fatal: HTTP request failed

For the sake of simplicity, we only record and display these
errors during the initial fetch of the ref list, as that is
the initial contact with the server and where the most
common, interesting errors happen (and there is already
precedent, as that is the only place we currently massage
http error codes into more helpful messages).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1481.diff
https://github.com/git/git/commit/6d052d78d74e581dd93dd6328d3c214f469e34d7,07 Apr 2013,"http: add HTTP_KEEP_ERROR option

We currently set curl's FAILONERROR option, which means that
any http failures are reported as curl errors, and the
http body content from the server is thrown away.

This patch introduces a new option to http_get_strbuf which
specifies that the body content from a failed http response
should be placed in the destination strbuf, where it can be
accessed by the caller.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1482.diff
https://github.com/git/git/commit/0f33a0677d6d93b3f6d8fb7d1df62f30eb7b73a9,05 Apr 2013,"submodule: print graph output next to submodule log

When running ""git log -p --submodule=log"", the submodule log is not
indented by the graph output, although all other lines are.  Fix this by
prepending the current line prefix to each line of the submodule log.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1483.diff
https://github.com/git/git/commit/209618860c2627a4e134a15472587c574b328b40,05 Apr 2013,"log -L: fix overlapping input ranges

The existing code was too defensive, and would trigger the assert in
range_set_append() if the user gave overlapping ranges.

The intent was always to define overlapping ranges as just the union
of all of them, as evidenced by the call to sort_and_merge_range_set().
(Which was already used, unlike what the comment said.)

Fix by splitting out the meat of range_set_append() to a new _unsafe()
function that lacks the paranoia.  sort_and_merge_range_set will fix
up the ranges, so we don't need the checks there.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",373,data/crawl/git/patch_1484.diff
https://github.com/git/git/commit/92e0d916326de103e463f9ffcfcd99ec1f3a9dc0,03 Apr 2013,"Sync with 1.8.1 maintenance track

* maint-1.8.1:
  Start preparing for 1.8.1.6
  git-tag(1): we tag HEAD by default
  Fix revision walk for commits with the same dates
  t2003: work around path mangling issue on Windows
  pack-refs: add fully-peeled trait
  pack-refs: write peeled entry for non-tags
  use parse_object_or_die instead of die(""bad object"")
  avoid segfaults on parse_object failure
  entry: fix filter lookup
  t2003: modernize style
  name-hash.c: fix endless loop with core.ignorecase=true",626,data/crawl/git/patch_1485.diff
https://github.com/git/git/commit/002b726a400a1dea16c0b59ae61527a1e55799fb,03 Apr 2013,"builtin/help.c: add list_common_guides_help() function

This implements what ""help -g"" introduced in the previous step does.

Signed-off-by: Philip Oakley <philipoakley@iee.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1486.diff
https://github.com/git/git/commit/caa2036b3b4105bfe34f01115e4fb34b78a4db86,02 Apr 2013,"branch: give advice when tracking start-point is missing

If the user requests to --set-upstream-to a branch that does
not exist, then either:

  1. It was a typo.

  2. They thought the branch should exist.

In case (1), there is not much we can do beyond showing the
name we tried to use. For case (2), though, we can help to
guide them through common workflows.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1487.diff
https://github.com/git/git/commit/1a15d00bb910de0a86981f0d75836feac71d1fe0,02 Apr 2013,"branch: mention start_name in set-upstream error messages

If we refuse a branch operation because the tracking
start_name the user gave us is bogus, we just print
something like:

 fatal: Cannot setup tracking information; start point is not a branch

If we mention the actual name we tried to use, that may help
the user figure out why it didn't work (e.g., if they gave
us the arguments in the wrong order).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1488.diff
https://github.com/git/git/commit/a5e91c722cceb667ad05a13f9fde150cc1dbe9aa,02 Apr 2013,"branch: improve error message for missing --set-upstream-to ref

If we are trying to set the upstream config for a branch,
the create_branch function will check both that the name
resolves as a ref, and that it is either a local or
remote-tracking branch.

However, before we do so we run get_sha1 on it to find out
whether it resolves at all (since the create_branch function
is also used to create actual branches, it wants to know
where to start the new branch). This means that if you feed
a ref that does not exist to ""branch --set-upstream-to"",
rather than getting a helpful message about tracking, you
only get ""not a valid object name"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1489.diff
https://github.com/git/git/commit/e2b6aa5f1b85d5f49f0cf280162cf216e55e1eba,02 Apr 2013,"branch: factor out ""upstream is not a branch"" error messages

This message is duplicated, and is quite long. Let's factor
it out, which avoids the repetition and the long lines. It
will also make future patches easier as we tweak the
message.

While we're at it, let's also mark it for translation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1490.diff
https://github.com/git/git/commit/87e139c0ad32b72ad989fe7d69381f1146250f7a,02 Apr 2013,"status: show commit sha1 in ""You are currently reverting"" message

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1491.diff
https://github.com/git/git/commit/db4ef4496e7a99809f7caa52e8821320e5cca7bc,02 Apr 2013,"status: show 'revert' state and status hint

This is the logical equivalent for ""git status"" of 3ee4452 (bash: teach
__git_ps1 about REVERT_HEAD).

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_1492.diff
https://github.com/git/git/commit/eb307ae7bb78ccde4e2ac69f302ccf8834883628,01 Apr 2013,"merge/pull Check for untrusted good GPG signatures

When --verify-signatures is specified, abort the merge in case a good
GPG signature from an untrusted key is encountered.

Signed-off-by: Sebastian Götte <jaseg@physik-pool.tu-berlin.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1493.diff
https://github.com/git/git/commit/d1520c4b1a6105356c7a2def6b90239057270598,01 Apr 2013,"branch: give better message when no names specified for rename

Signed-off-by: Jonathon Mah <me@JonathonMah.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1494.diff
https://github.com/git/git/commit/efed0022492b81bf59d29193c4ffe96492dd9e9b,01 Apr 2013,"merge/pull: verify GPG signatures of commits being merged

When --verify-signatures is specified on the command-line of git-merge
or git-pull, check whether the commits being merged have good gpg
signatures and abort the merge in case they do not. This allows e.g.
auto-deployment from untrusted repo hosts.

Signed-off-by: Sebastian Götte <jaseg@physik-pool.tu-berlin.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_1495.diff
https://github.com/git/git/commit/d3b34622f699ff14646de4ec1b1ab9afb0bcb056,29 Mar 2013,"clone: leave repo in place after checkout errors

If we manage to clone a remote repository but run into an
error in the checkout, it is probably sane to leave the repo
directory in place. That lets the user examine the situation
without spending time to re-clone from the remote (which may
be a lengthy process).

Rather than try to convert each die() from the checkout code
path into an error(), we simply set a flag that tells the
""remove_junk"" atexit function to print a helpful message and
leave the repo in place.

Note that the test added in this patch actually passes
without the code change. The reason is that the cleanup code
is buggy; we chdir into the working tree for the checkout,
but still may use relative paths to remove the directories
(which means if you cloned into ""foo"", we would accidentally
remove ""foo"" from the working tree!).  There's no point in
fixing it now, since this patch means we will never try to
remove anything after the chdir, anyway.

[jc: replaced the message with a more succinct version from
Jonathan]

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1496.diff
https://github.com/git/git/commit/472353a579b3c3fd645ea4f0aac582317e488775,29 Mar 2013,"t7800: don't hide grep output

Remove the stdin_contains and stdin_doesnt_contain helper functions
which add nothing but hide the output of grep, hurting debugging.

Suggested-by: Johannes Sixt <j.sixt@viscovery.net>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1497.diff
https://github.com/git/git/commit/bf341b902ea1346373886f4eb4352a06b7b4cdfd,29 Mar 2013,"t7800: move '--symlinks' specific test to the end

This will group the tests more logically when we introduce a helper to
run most --dir-diff tests with both --symlinks and --no-symlinks.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_1498.diff
https://github.com/git/git/commit/39410bf0bf81cb3f76fb9bfa8308cd672bc1442c,28 Mar 2013,"Speed up log -L... -M

So far log -L only used the implicit diff filtering by pathspec.  If
the user specifies -M, we cannot do that, and so we simply handed the
whole diff queue (which is approximately 'git show --raw') to
diffcore_std().

Unfortunately this is very slow.  We can optimize a lot if we throw
out files that we know cannot possibly be interesting, in the same
spirit that the pathspec filtering reduces the number of files.

However, in this case, we have to be more careful.  Because we want to
look out for renames, we need to keep all filepairs where something
was deleted.

This is a bit hacky and should really be replaced by equivalent
support in --follow, and just using that.  However, in the meantime it
speeds up 'log -M -L' by an order of magnitude.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1499.diff
https://github.com/git/git/commit/13b8f68c1f0b6d4ff5a7bed5a834e7e5e34a9fd0,28 Mar 2013,"log -L: :pattern:file syntax to find by funcname

This new syntax finds a funcname matching /pattern/, and then takes from there
up to (but not including) the next funcname.  So you can say

  git log -L:main:main.c

and it will dig up the main() function and show its line-log, provided
there are no other funcnames matching 'main'.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",346,data/crawl/git/patch_1500.diff
https://github.com/git/git/commit/12da1d1f6ffcd546a892a33302bb34fd37169022,28 Mar 2013,"Implement line-history search (git log -L)

This is a rewrite of much of Bo's work, mainly in an effort to split
it into smaller, easier to understand routines.

The algorithm is built around the struct range_set, which encodes a
series of line ranges as intervals [a,b).  This is used in two
contexts:

* A set of lines we are tracking (which will change as we dig through
  history).
* To encode diffs, as pairs of ranges.

The main routine is range_set_map_across_diff().  It processes the
diff between a commit C and some parent P.  It determines which diff
hunks are relevant to the ranges tracked in C, and computes the new
ranges for P.

The algorithm is then simply to process history in topological order
from newest to oldest, computing ranges and (partial) diffs.  At
branch points, we need to merge the ranges we are watching.  We will
find that many commits do not affect the chosen ranges, and mark them
TREESAME (in addition to those already filtered by pathspec limiting).
Another pass of history simplification then gets rid of such commits.

This is wired as an extra filtering pass in the log machinery.  This
currently only reduces code duplication, but should allow for other
simplifications and options to be used.

Finally, we hook a diff printer into the output chain.  Ideally we
would wire directly into the diff logic, to optionally use features
like word diff.  However, that will require some major reworking of
the diff chain, so we completely replace the output with our own diff
for now.

As this was a GSoC project, and has quite some history by now, many
people have helped.  In no particular order, thanks go to

  Jakub Narebski <jnareb@gmail.com>
  Jens Lehmann <Jens.Lehmann@web.de>
  Jonathan Nieder <jrnieder@gmail.com>
  Junio C Hamano <gitster@pobox.com>
  Ramsay Jones <ramsay@ramsay1.demon.co.uk>
  Will Palmer <wmpalmer@gmail.com>

Apologies to everyone I forgot.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2158,data/crawl/git/patch_1501.diff
https://github.com/git/git/commit/25ed3412f86b136efb17689b6712d9e546cac388,28 Mar 2013,"Refactor parse_loc

We want to use the same style of -L n,m argument for 'git log -L' as
for git-blame.  Refactor the argument parsing of the range arguments
from builtin/blame.c to the (new) file that will hold the 'git log -L'
logic.

To accommodate different data structures in blame and log -L, the file
contents are abstracted away; parse_range_arg takes a callback that it
uses to get the contents of a line of the (notional) file.

The new test is for a case that made me pause during debugging: the
'blame -L with invalid end' test was the only one that noticed an
outright failure to parse the end *at all*.  So make a more explicit
test for that.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/patch_1502.diff
https://github.com/git/git/commit/0433ad128c59f233046b3f8a68246ca3a8a77af8,27 Mar 2013,"clone: run check_everything_connected

When we fetch from a remote, we do a revision walk to make
sure that what we received is connected to our existing
history. We do not do the same check for clone, which should
be able to check that we received an intact history graph.

The upside of this patch is that it will make clone more
resilient against propagating repository corruption. The
downside is that we will now traverse ""rev-list --objects
--all"" down to the roots, which may take some time (it is
especially noticeable for a ""--local --bare"" clone).

Note that we need to adjust t5710, which tries to make such
a bogus clone. Rather than checking after the fact that our
clone is bogus, we can simplify it to just make sure ""git
clone"" reports failure.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1503.diff
https://github.com/git/git/commit/0aac7bb287645dd72ad8ad6b805128b8ff7f111f,27 Mar 2013,"clone: die on errors from unpack_trees

When clone is populating the working tree, it ignores the
return status from unpack_trees; this means we may report a
successful clone, even when the checkout fails.

When checkout fails, we may want to leave the $GIT_DIR in
place, as it might be possible to recover the data through
further use of ""git checkout"" (e.g., if the checkout failed
due to a transient error, disk full, etc). However, we
already die on a number of other checkout-related errors, so
this patch follows that pattern.

In addition to marking a now-passing test, we need to adjust
t5710, which blindly assumed it could make bogus clones of
very deep alternates hierarchies. By using ""--bare"", we can
avoid it actually touching any objects.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1504.diff
https://github.com/git/git/commit/abe601bba52ee6b0bf89d282aa1c3ef5fd89cbb0,27 Mar 2013,"sha1_file: remove recursion in unpack_entry

Similar to the recursion in packed_object_info(), this leads to
problems on stack-space-constrained systems in the presence of long
delta chains.

We proceed in three phases:

1. Dig through the delta chain, saving each delta object's offsets and
   size on an ad-hoc stack.

2. Unpack the base object at the bottom.

3. Unpack and apply the deltas from the stack.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/patch_1505.diff
https://github.com/git/git/commit/99d3206010ba1fcc9311cbe8376c0b5e78f4a136,25 Mar 2013,"combine-diff: coalesce lost lines optimally

This replaces the greedy implementation to coalesce lost lines by using
dynamic programming to find the Longest Common Subsequence.

The O(n²) time complexity is obviously bigger than previous
implementation but it can produce shorter diff results (and most likely
easier to read).

List of lost lines is now doubly-linked because we reverse-read it when
reading the direction matrix.

Signed-off-by: Antoine Pelisse <apelisse@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",384,data/crawl/git/patch_1506.diff
https://github.com/git/git/commit/c9fc4415e2c7d7673cdad34d41114ede3435a395,21 Mar 2013,"diff.c: diff.renamelimit => diff.renameLimit in message

In the warning message printed when rename or unmodified copy
detection was skipped due to too many files, change ""diff.renamelimit""
to ""diff.renameLimit"", in order to make it consistent with git
documentation, which consistently uses ""diff.renameLimit"".

Signed-off-by: Max Nanasy <max.nanasy@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1507.diff
https://github.com/git/git/commit/b8527d5fa61f4401c38e5992b154d7a323aacbf0,21 Mar 2013,"wt-status: fix possible use of uninitialized variable

In wt_status_print_change_data, we accept a change_type flag
that is meant to be either WT_STATUS_UPDATED or
WT_STATUS_CHANGED.  We then switch() on this value to set
the local variable ""status"" for each case, but do not
provide a fallback ""default"" label to the switch statement.

As a result, the compiler realizes that ""status"" might be
unset, and complains with a warning. To silence this
warning, we use the ""int status = status"" trick.  This is
correct with the current code, as all callers provide one of
the two expected change_type flags. However, it's also a
maintenance trap, as there is nothing to prevent future
callers from passing another flag, nor to document this
assumption.

Instead of using the ""x = x"" hack, let's handle the default
case in the switch() statement with a die(""BUG""). That tells
the compiler and any readers of the code exactly what the
function's input assumptions are.

We could also convert the flag to an enum, which would
provide a compile-time check on the function input. However,
since these flags are part of a larger enum, that would make
the code unnecessarily complex (we would have to make a new
enum with just the two flags, and then convert it to the old
enum for passing to sub-functions).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1508.diff
https://github.com/git/git/commit/e24afab09137d785f07e62aee8936b548436d21f,20 Mar 2013,"add: make pathless 'add [-u|-A]' warning a file-global function

Currently warn_pathless_add() is only called directly by cmd_add(),
but that is about to change.  Move its definition higher in the file
and pass the ""--update"" or ""--all"" option name used in its message
through globals instead of function arguments to make it easier to
call without passing values that will not change through the call
chain.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_1509.diff
https://github.com/git/git/commit/c29c46fa2e21e608ce2e603649af5bf38e7969c2,18 Mar 2013,"pack-refs: add fully-peeled trait

Older versions of pack-refs did not write peel lines for
refs outside of refs/tags. This meant that on reading the
pack-refs file, we might set the REF_KNOWS_PEELED flag for
such a ref, even though we do not know anything about its
peeled value.

The previous commit updated the writer to always peel, no
matter what the ref is. That means that packed-refs files
written by newer versions of git are fine to be read by both
old and new versions of git. However, we still have the
problem of reading packed-refs files written by older
versions of git, or by other implementations which have not
yet learned the same trick.

The simplest fix would be to always unset the
REF_KNOWS_PEELED flag for refs outside of refs/tags that do
not have a peel line (if it has a peel line, we know it is
valid, but we cannot assume a missing peel line means
anything). But that loses an important optimization, as
upload-pack should not need to load the object pointed to by
refs/heads/foo to determine that it is not a tag.

Instead, we add a ""fully-peeled"" trait to the packed-refs
file. If it is set, we know that we can trust a missing peel
line to mean that a ref cannot be peeled. Otherwise, we fall
back to assuming nothing.

[commit message and tests by Jeff King <peff@peff.net>]

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1510.diff
https://github.com/git/git/commit/30b939c33ad5b8a9dfbe3fe5aafc36d89c40409f,17 Mar 2013,"fast-export: do not load blob objects twice

When fast-export wants to export a blob object, it first
calls parse_object to get a ""struct object"" and check
whether we have already shown the object.  If we haven't
shown it, we then use read_sha1_file to pull it from disk
and write it out.

That means we load each blob from disk twice: once for
parse_object to find its type and check its sha1, and a
second time when we actually output it. We can drop this to
a single load by using lookup_object to check the SHOWN
flag, and then checking the signature on and outputting a
single buffer.

This provides modest speedups on git.git (best-of-five, ""git
fast-export HEAD >/dev/null""):

  [before]                [after]
  real    0m14.347s       real    0m13.780s
  user    0m14.084s       user    0m13.620s
  sys     0m0.208s        sys     0m0.100s

and somewhat more on more blob-heavy repos (this is a
repository full of media files):

  [before]                [after]
  real    0m52.236s       real    0m44.451s
  user    0m50.568s       user    0m43.000s
  sys     0m1.536s        sys     0m1.284s

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1511.diff
https://github.com/git/git/commit/03a8eddfd1bd7cdce0b2361753691f53c00e5ba6,17 Mar 2013,"pack-refs: write peeled entry for non-tags

When we pack an annotated tag ref, we write not only the
sha1 of the tag object along with the ref, but also the sha1
obtained by peeling the tag. This lets readers of the
pack-refs file know the peeled value without having to
actually load the object, speeding up upload-pack's ref
advertisement.

The writer marks a packed-refs file with peeled refs using
the ""peeled"" trait at the top of the file. When the reader
sees this trait, it knows that each ref is either followed
by its peeled value, or it is not an annotated tag.

However, there is a mismatch between the assumptions of the
reader and writer. The writer will only peel refs under
refs/tags, but the reader does not know this; it will assume
a ref without a peeled value must not be a tag object. Thus
an annotated tag object placed outside of the refs/tags
hierarchy will not have its peeled value printed by
upload-pack.

The simplest way to fix this is to start writing peel values
for all refs. This matches what the reader expects for both
new and old versions of git.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_1512.diff
https://github.com/git/git/commit/f7892d181752187513f10b13f2272fa46c9c8422,17 Mar 2013,"use parse_object_or_die instead of die(""bad object"")

Some call-sites do:

  o = parse_object(sha1);
  if (!o)
	  die(""bad object %s"", some_name);

We can now handle that as a one-liner, and get more
consistent output.

In the third case of this patch, it looks like we are losing
information, as the existing message also outputs the sha1
hex; however, parse_object will already have written a more
specific complaint about the sha1, so there is no point in
repeating it here.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1513.diff
https://github.com/git/git/commit/75a95490474ab6e991cbbbd10d980498a9109648,17 Mar 2013,"avoid segfaults on parse_object failure

Many call-sites of parse_object assume that they will get a
non-NULL return value; this is not the case if we encounter
an error while parsing the object.

This patch adds a wrapper function around parse_object that
handles dying automatically, and uses it anywhere we
immediately try to access the return value as a non-NULL
pointer (i.e., anywhere that we would currently segfault).

This wrapper may also be useful in other places. The most
obvious one is code like:

  o = parse_object(sha1);
  if (!o)
	  die(...);

However, these should not be mechanically converted to
parse_object_or_die, as the die message is sometimes
customized. Later patches can address these sites on a
case-by-case basis.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1514.diff
https://github.com/git/git/commit/b2981d06226ab0fdabf9110c3be7104110b307ae,17 Mar 2013,"sha1_name: pass object name length to diagnose_invalid_sha1_path()

The only caller of diagnose_invalid_sha1_path() extracts a substring from
an object name by creating a NUL-terminated copy of the interesting part.
Add a length parameter to the function and thus avoid the need for an
allocation, thereby simplifying the code.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1515.diff
https://github.com/git/git/commit/6a38ef2ced55f0a8a7967581934e40f79e1d8733,17 Mar 2013,"status: advise to consider use of -u when read_directory takes too long

Introduce advice.statusUoption to suggest considering use of -u to
strike different trade-off when it took more than 2 seconds to
enumerate untracked/ignored files.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1516.diff
https://github.com/git/git/commit/fa04ae0be8cca1291a60bc8a393f9c52d2582089,14 Mar 2013,"Allow combined diff to ignore white-spaces

The combined diff --cc output does not honor options to ignore
whitespace changes (-b, -w, and --ignore-space-at-eol).

Correct this by passing diff flags to diff engine, so that combined
diff behaves as normal diff does with spaces, and by coalescing
lines that are removed from both (or more) parents, honoring the
same rule to ignore whitespace changes.

With this change, a conflict-less merge done using a ignore-*
strategy option will not show any conflict if shown in combined-diff
using the same option.

Signed-off-by: Antoine Pelisse <apelisse@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",168,data/crawl/git/patch_1517.diff
https://github.com/git/git/commit/f612a67eac32d73d781503d39077371977d46eae,14 Mar 2013,"setup.c: check that the pathspec magic ends with "")""

The previous code did not diagnose an incorrectly spelled "":(top""
as an error.

Signed-off-by: Andrew Wong <andrew.kw.w@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1518.diff
https://github.com/git/git/commit/c6898ebf219424775160f28855964b103dd880b4,11 Mar 2013,"add: update pathless 'add [-u|-A]' warning to reflect change of plan

We originally thought the transition would need a period where ""git add
[-u|-A]"" without pathspec would be forbidden, but the warning is big
enough to scare people and teach them not to use it (or, if so, to
understand the consequences).

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1519.diff
https://github.com/git/git/commit/421a97694590c2be58f3ccebf301c7239289aa00,10 Mar 2013,"Translate git_more_info_string consistently

""git help"" translated the ""See 'git help <command>' for more
information..."" message, but ""git"" didn't.

Signed-off-by: Kevin Bracey <kevin@bracey.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1520.diff
https://github.com/git/git/commit/45c45e300bcbe493a39533bb04f6bd548e8a3f19,09 Mar 2013,"git add: start preparing for ""git add <pathspec>..."" to default to ""-A""

When ""git add subdir/"" is run without ""-u"" or ""-A"" option, e.g.

    $ edit subdir/x
    $ create subdir/y
    $ rm subdir/z
    $ git add subdir/

the command does not notice removal of paths (e.g. subdir/z) from
the working tree.  This sometimes confuses new people, as arguably
""git add"" is told to record the current state of ""subdir/"" as a
whole, not the current state of the paths that exist in the working
tree that matches that pathspec (the latter by definition excludes
the state of ""subdir/z"" because it does not exist in the working
tree).

Plan to eventually make ""git add"" pretend as if ""-A"" is given when
there is a pathspec on the command line.  When resolving a conflict
to remove a path, the current code tells you to ""git rm $path"", but
with such a change, you will be able to say ""git add $path"" (of
course you can do ""git add -A $path"" today).  That means that we can
simplify the advice messages given by ""git status"".  That all will
be in Git 2.0 or later, if we are going to do so.

For that transition to work, people need to learn either to say ""git
add --no-all subdir/"" when they want to ignore the removed paths
like ""subdir/z"", or to say ""git add -A subdir/"" when they want to
take the state of the directory as a whole.

""git add"" without any argument will continue to be a no-op.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_1521.diff
https://github.com/git/git/commit/98f85ff4b65b565bae0592ded494d67045cbd3bf,08 Mar 2013,"reflog: add for_each_reflog_ent_reverse() API

""git checkout -"" is a short-hand for ""git checkout @{-1}"" and the
""@{nth}"" notation for a negative number is to find nth previous
checkout in the reflog of the HEAD to determine the name of the
branch the user was on.  We would want to find the nth most recent
reflog entry that matches ""checkout: moving from X to Y"" for this.

Unfortunately, reflog is implemented as an append-only file, and the
API to iterate over its entries, for_each_reflog_ent(), reads the
file in order, giving the entries from the oldest to newer.  For the
purpose of finding nth most recent one, this API forces us to record
the last n entries in a rotating buffer and give the result out only
after we read everything.  To optimize for a common case of finding
the nth most recent one for a small value of n, we also have a side
API for_each_recent_reflog_ent() that starts reading near the end of
the file, but it still has to read the entries in the ""wrong"" order.
The implementation of understanding @{-1} uses this interface.

This all becomes unnecessary if we add an API to let us iterate over
reflog entries in the reverse order, from the newest to older.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/patch_1522.diff
https://github.com/git/git/commit/a02ffe0e1a19c9594af3e81f4e04b46eabe4755a,08 Mar 2013,"bundle: Add colons to list headings in ""verify""

These slightly improve the reading flow by making it obvious that a list
follows.

Also, make the wording of both headings consistent by changing ""contains
%d ref(s)"" to ""contains this ref""/""contains these %d refs"".

Signed-off-by: Lukas Fleischer <git@cryptocrack.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1523.diff
https://github.com/git/git/commit/b174eb42d08eeb32ae7341ff46b05c20d38abc2b,06 Mar 2013,"tests: make sure rename pretty print works

Add basic use cases and corner cases tests for
""git diff -M --summary/stat"".

Signed-off-by: Antoine Pelisse <apelisse@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1524.diff
https://github.com/git/git/commit/06d67b876642822828596b0b38cda2f61d438335,01 Mar 2013,Sync with 1.8.1.5,22,data/crawl/git/patch_1525.diff
https://github.com/git/git/commit/8b1bd024154f0ee0d71a6befe9bbd96462e76abc,01 Mar 2013,"Make !pattern in .gitattributes non-fatal

Before 82dce99 (attr: more matching optimizations from .gitignore,
2012-10-15), .gitattributes did not have any special treatment of a
leading '!'.  The docs, however, always said

  The rules how the pattern matches paths are the same as in
  `.gitignore` files; see linkgit:gitignore[5].

By those rules, leading '!' means pattern negation.  So 82dce99
correctly determined that this kind of line makes no sense and should
be disallowed.

However, users who actually had a rule for files starting with a '!'
are in a bad position: before 82dce99 '!' matched that literal
character, so it is conceivable that users have .gitattributes with
such lines in them.  After 82dce99 the unescaped version was
disallowed in such a way that git outright refuses to run(!) most
commands in the presence of such a .gitattributes.  It therefore
becomes very hard to fix, let alone work with, such repositories.

Let's at least allow the users to fix their repos: change the fatal
error into a warning.

Reported-by: mathstuf@gmail.com
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1526.diff
https://github.com/git/git/commit/8b2d219a3d6db49c8c3c0a5b620af33d6a40a974,26 Feb 2013,"wincred: improve compatibility with windows versions

On WinXP, the windows credential helper doesn't work at all (due to missing
Cred[Un]PackAuthenticationBuffer APIs). On Win7, the credential format used
by wincred is incompatible with native Windows tools (such as the control
panel applet or 'cmdkey.exe /generic'). These Windows tools only set the
TargetName, UserName and CredentialBlob members of the CREDENTIAL
structure (where CredentialBlob is the UTF-16-encoded password).

Remove the unnecessary packing / unpacking of the password, along with the
related API definitions, for compatibility with Windows XP.

Don't use CREDENTIAL_ATTRIBUTEs to identify credentials for compatibility
with Windows credential manager tools. Parse the protocol, username, host
and path fields from the credential's target name instead.

Credentials created with an old wincred version will have mangled or empty
passwords after this change.

Signed-off-by: Karsten Blees <blees@dcon.de>
Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>",199,data/crawl/git/patch_1527.diff
https://github.com/git/git/commit/2a4a26b53d5ad18ded5d79b0cf0b617ebbb758b4,25 Feb 2013,"Sync with 'maint'

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1528.diff
https://github.com/git/git/commit/7a0d8db36e1256fd2ac9fa6b97b947e536c2202b,25 Feb 2013,"Prepare for 1.8.1.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1529.diff
https://github.com/git/git/commit/b978403aed7f2df46bc4c8a63314959d8982e0ac,25 Feb 2013,"tests: use a lowercase ""usage:"" string

Adjust test commands and test suites so that their
usage strings are consistent with Git.

Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1530.diff
https://github.com/git/git/commit/c358ed756e6a6c6f762b453dd3698fa06bbb9664,24 Feb 2013,"contrib/credential: use a lowercase ""usage:"" string

Make the usage string consistent with Git.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1531.diff
https://github.com/git/git/commit/b8054bbee70620b57e11ed78716bf187071bc368,24 Feb 2013,"remote-curl: move ref-parsing code up in file

The ref-parsing functions are static. Let's move them up in
the file to be available to more functions, which will help
us with later refactoring.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/patch_1532.diff
https://github.com/git/git/commit/5dbf43602de31cac518607b4d9a04a40d7b154c8,24 Feb 2013,"remote-curl: pass buffer straight to get_remote_heads

Until recently, get_remote_heads only knew how to read refs
from a file descriptor. To hack around this, we spawned a
thread (or forked a process) to write the buffer back to us.

Now that we can just pass it our buffer directly, we don't
have to use this hack anymore.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1533.diff
https://github.com/git/git/commit/4981fe750b1fc58bfdf5b9ca9843f4f505b9bb4d,24 Feb 2013,"pkt-line: share buffer/descriptor reading implementation

The packet_read function reads from a descriptor. The
packet_get_line function is similar, but reads from an
in-memory buffer, and uses a completely separate
implementation. This patch teaches the generic packet_read
function to accept either source, and we can do away with
packet_get_line's implementation.

There are two other differences to account for between the
old and new functions. The first is that we used to read
into a strbuf, but now read into a fixed size buffer. The
only two callers are fine with that, and in fact it
simplifies their code, since they can use the same
static-buffer interface as the rest of the packet_read_line
callers (and we provide a similar convenience wrapper for
reading from a buffer rather than a descriptor).

This is technically an externally-visible behavior change in
that we used to accept arbitrary sized packets up to 65532
bytes, and now cap out at LARGE_PACKET_MAX, 65520. In
practice this doesn't matter, as we use it only for parsing
smart-http headers (of which there is exactly one defined,
and it is small and fixed-size). And any extension headers
would be breaking the protocol to go over LARGE_PACKET_MAX
anyway.

The other difference is that packet_get_line would return
on error rather than dying. However, both callers of
packet_get_line are actually improved by dying.

The first caller does its own error checking, but we can
drop that; as a result, we'll actually get more specific
reporting about protocol breakage when packet_read dies
internally. The only downside is that packet_read will not
print the smart-http URL that failed, but that's not a big
deal; anybody not debugging can already see the remote's URL
already, and anybody debugging would want to run with
GIT_CURL_VERBOSE anyway to see way more information.

The second caller, which is just trying to skip past any
extra smart-http headers (of which there are none defined,
but which we allow to keep room for future expansion), did
not error check at all. As a result, it would treat an error
just like a flush packet. The resulting mess would generally
cause an error later in get_remote_heads, but now we get
error reporting much closer to the source of the problem.

Brown-paper-bag-fixes-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_1534.diff
https://github.com/git/git/commit/8efb8899cfe866dddb3659b9e0a94232161db65e,23 Feb 2013,"branch: segfault fixes and validation

branch_get() can return NULL (so far on detached HEAD only) but some
code paths in builtin/branch.c cannot deal with that and cause
segfaults.

While at there, make sure to bail out when the user gives 2 or more
branches with --set-upstream-to or --unset-upstream, where only the
first branch is processed and the rest silently dropped.

Reported-by: Per Cederqvist <cederp@opera.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_1535.diff
https://github.com/git/git/commit/698a1ec4d52e90d611c233a12147daf261168bc6,21 Feb 2013,"imap-send: support Server Name Indication (RFC4366)

To talk with some sites that serve multiple names on a single IP
address, the client needs to ask for the specific host that it wants
to talk to.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1536.diff
https://github.com/git/git/commit/e42360c48eebc633b1536904839a1a073780ad8a,21 Feb 2013,"t7800: modernize tests

Eliminate a lot of redundant work by using test_config().
Catch more return codes by more use of temporary files
and test_cmp.

The original tests relied upon restore_test_defaults()
from the previous test to provide the next test with a sane
environment.  Make the tests do their own setup so that they
are not dependent on the success of the previous test.
The end result is shorter tests and better test isolation.

Signed-off-by: David Aguilar <davvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",366,data/crawl/git/patch_1537.diff
https://github.com/git/git/commit/cdf4fb8e332f9641ac1ca95e999fe98251d31392,20 Feb 2013,"pkt-line: drop safe_write function

This is just write_or_die by another name. The one
distinction is that write_or_die will treat EPIPE specially
by suppressing error messages. That's fine, as we die by
SIGPIPE anyway (and in the off chance that it is disabled,
write_or_die will simulate it).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1538.diff
https://github.com/git/git/commit/090fd4fe24b9da9d912aa5856f4cd32d157924c6,20 Feb 2013,"upload-archive: use argv_array to store client arguments

The current parsing scheme for upload-archive is to pack
arguments into a fixed-size buffer, separated by NULs, and
put a pointer to each argument in the buffer into a
fixed-size argv array.

This works fine, and the limits are high enough that nobody
reasonable is going to hit them, but it makes the code hard
to follow.  Instead, let's just stuff the arguments into an
argv_array, which is much simpler. That lifts the ""all
arguments must fit inside 4K together"" limit.

We could also trivially lift the MAX_ARGS limitation (in
fact, we have to keep extra code to enforce it). But that
would mean a client could force us to allocate an arbitrary
amount of memory simply by sending us ""argument"" lines. By
limiting the MAX_ARGS, we limit an attacker to about 4
megabytes (64 times a maximum 64K packet buffer). That may
sound like a lot compared to the 4K limit, but it's not a
big deal compared to what git-archive will actually allocate
while working (e.g., to load blobs into memory). The
important thing is that it is bounded.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1539.diff
https://github.com/git/git/commit/6379dd052243aa6b1cc5115b72b78aedbeeed008,20 Feb 2013,"upload-archive: do not copy repo name

According to the comment, enter_repo will modify its input.
However, this has not been the case since 1c64b48
(enter_repo: do not modify input, 2011-10-04). Drop the
now-useless copy.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1540.diff
https://github.com/git/git/commit/8f9e3e498c113e987c2b8662485db5461cad1c36,20 Feb 2013,"send-pack: prefer prefixcmp over memcmp in receive_status

This code predates prefixcmp, so it used memcmp along with
static sizes. Replacing these memcmps with prefixcmp makes
the code much more readable, and the lack of static sizes
will make refactoring it in future patches simpler.

Note that we used to be unnecessarily liberal in parsing the
""unpack"" status line, and would accept ""unpack ok\njunk"". No
version of git has ever produced that, and it violates the
BNF in Documentation/technical/pack-protocol.txt. Let's take
this opportunity to tighten the check by converting the
prefix comparison into a strcmp.

While we're in the area, let's also fix a vague error
message that does not follow our usual conventions (it
writes directly to stderr and does not use the ""error:""
prefix).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1541.diff
https://github.com/git/git/commit/b3600c36286517cda38df976946557ce3e87bd82,20 Feb 2013,Sync with v1.8.1.4,81,data/crawl/git/patch_1542.diff
https://github.com/git/git/commit/b62fb077d5504deadea931fd16075729f39b8f47,20 Feb 2013,"imap-send: the subject of SSL certificate must match the host

We did not check a valid certificate's subject at all, and would
have happily talked with a wrong host after connecting to an
incorrect address and getting a valid certificate that does not
belong to the host we intended to talk to.

Signed-off-by: Oswald Buddenhagen <ossi@kde.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1543.diff
https://github.com/git/git/commit/1a20dd49f8c4e6c62080f267ca77b357cb61be8e,15 Feb 2013,"count-objects: report how much disk space taken by garbage files

Also issue warnings on loose garbages instead of errors as a result of
using report_garbage() function in count_objects()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1544.diff
https://github.com/git/git/commit/543c5caa6c93bb3d42545aeef334c6a175384db8,15 Feb 2013,"count-objects: report garbage files in pack directory too

prepare_packed_git_one() is modified to allow count-objects to hook a
report function to so we don't need to duplicate the pack searching
logic in count-objects.c. When report_pack_garbage is NULL, the
overhead is insignificant.

The garbage is reported with warning() instead of error() in packed
garbage case because it's not an error to have garbage. Loose garbage
is still reported as errors and will be converted to warnings later.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_1545.diff
https://github.com/git/git/commit/f4c0035de660f5be4d78b0ba0aa8a7863b89c72f,12 Feb 2013,"Git.pm: allow pipes to be closed prior to calling command_close_bidi_pipe

The command_close_bidi_pipe() function will insist on closing both
input and output pipes returned by command_bidi_pipe().  With this
change it is possible to close one of the pipes in advance and pass
undef as an argument.

Signed-off-by: Michal Nazarewicz <mina86@mina86.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1546.diff
https://github.com/git/git/commit/41ee2ad6cbebab0429248a14ec4e02afddd60dbe,12 Feb 2013,"combine-diff.c: teach combined diffs about line prefix

When running ""git log --graph --cc -p"" the diff output for merges is not
indented by the graph structure, unlike the diffs of non-merge commits
(added in commit 7be5761 - diff.c: Output the text graph padding before
each diff line).

Fix this by teaching the combined diff code to output diff_line_prefix()
before each line.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1547.diff
https://github.com/git/git/commit/30997bb8f11bd6e63a582c3b4e029ca47868ad8d,12 Feb 2013,"diff.c: use diff_line_prefix() where applicable

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",115,data/crawl/git/patch_1548.diff
https://github.com/git/git/commit/5289c56a72efc6e5e4409c7a3802fc54aea09340,12 Feb 2013,"format-patch: update append_signoff prototype

This is a preparation step for merging with append_signoff from
sequencer.c

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Brandon Casey <bcasey@nvidia.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1549.diff
https://github.com/git/git/commit/b141a47801d6fb2d68ec48adfe7597ec3ce49c0d,11 Feb 2013,"parse-options: report uncorrupted multi-byte options

Because our command-line parser considers only one byte at the time
for short-options, we incorrectly report only the first byte when
multi-byte input was provided. This makes user-errors slightly
awkward to diagnose for instance under UTF-8 locale and non-English
keyboard layouts.

Report the whole argument-string when a non-ASCII short-option is
detected.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Improved-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1550.diff
https://github.com/git/git/commit/c082196575e13dd5960031f213b20e2df989ca18,11 Feb 2013,"Add utf8_fprintf helper that returns correct number of columns

Since command usages can be translated, they may include utf-8
encoded strings, and the output in console may not align well any
more. This is because strlen() is different from strwidth() on utf-8
strings.

A wrapper utf8_fprintf() can help to return the correct number of
columns required.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Reviewed-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_1551.diff
https://github.com/git/git/commit/9798f7e5f948b2586c33d850f6a00d4fc0537d75,08 Feb 2013,"Use __VA_ARGS__ for all of error's arguments

QNX 6.3.2 uses GCC 2.95.3 by default, and GCC 2.95.3 doesn't remove the
comma if the error macro's variable argument is left out.

Instead of testing for a sufficiently recent version of GCC, make
__VA_ARGS__ match all of the arguments.

Signed-off-by: Matt Kraai <matt.kraai@amo.abbott.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1552.diff
https://github.com/git/git/commit/6e7b66eebd18c11f58a9790b8f071618a1bb5b2c,07 Feb 2013,"fetch: fetch objects by their exact SHA-1 object names

Teach ""git fetch"" to accept an exact SHA-1 object name the user may
obtain out of band on the LHS of a pathspec, and send it on a ""want""
message when the server side advertises the allow-tip-sha1-in-want
capability.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_1553.diff
https://github.com/git/git/commit/390eb36b0a9cbaa5051040c762b986ddd4b3848f,07 Feb 2013,"upload-pack: optionally allow fetching from the tips of hidden refs

With uploadpack.allowtipsha1inwant configuration option set, future
versions of ""git fetch"" that allow an exact object name (likely to
have been obtained out of band) on the LHS of the fetch refspec can
make a request with a ""want"" line that names an object that may not
have been advertised due to transfer.hiderefs configuration.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1554.diff
https://github.com/git/git/commit/f2db854d24f32de7b03dde5a7d7134f5e31100b9,07 Feb 2013,"fetch: use struct ref to represent refs to be fetched

Even though ""git fetch"" has full infrastructure to parse refspecs to
be fetched and match them against the list of refs to come up with
the final list of refs to be fetched, the list of refs that are
requested to be fetched were internally converted to a plain list of
strings at the transport layer and then passed to the underlying
fetch-pack driver.

Stop this conversion and instead pass around an array of refs.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_1555.diff
https://github.com/git/git/commit/5e026920a9465c6c3e026c5bf0d1c4d9d3f05cfa,05 Feb 2013,"apply: verify submodule commit object name better

A textual patch also records the submodule commit object name in
full.  Make the parsing more robust by reading from there and
verifying the (possibly abbreviated) name on the index line matches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1556.diff
https://github.com/git/git/commit/0722c805d616eb644a868a995b891470f9e5e30d,05 Feb 2013,"status: show the branch name if possible in in-progress info

The typical use-case is starting a rebase, do something else, come
back the day after, run ""git status"" or make a new commit and wonder
what in the world's going on. Which branch is being rebased is
probably the most useful tidbit to help, but the target may help
too.

Ideally, I would have loved to see ""rebasing master on
origin/master"", but the target ref name is not stored during rebase,
so this patch writes ""rebasing master on a78c8c98b"" as a
half-measure to remind future users of that potential improvement.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/patch_1557.diff
https://github.com/git/git/commit/776670519823b5c49ff4107dc9f77706fa37bb76,03 Feb 2013,"combine-diff: lift 32-way limit of combined diff

The ""raw"" format of combine-diff output is supposed to have as many
colons as there are parents at the beginning, then blob modes for
these parents, and then object names for these parents.

We weren't however prepared to handle a more than 32-way merge and
did not show the correct number of colons in such a case.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1558.diff
https://github.com/git/git/commit/939296c4a42b0eb22542f0fe2e50b53993489eff,01 Feb 2013,"run-command: be more informative about what failed

While debugging an error with verify_signed_buffer() the error
messages from run-command weren't very useful:

 error: cannot create pipe for gpg: Too many open files
 error: could not run gpg.

because they didn't indicate *which* pipe couldn't be created.

Print which pipe failed to be created in the error message so we
can more easily debug similar problems in the future.

For example, the above error now prints:

 error: cannot create standard error pipe for gpg: Too many open files
 error: could not run gpg.

Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1559.diff
https://github.com/git/git/commit/e28efb1998bb0b73057de13b9568f6aef439a583,01 Feb 2013,"apply: diagnose incomplete submodule object name better

""git am -3"" uses this function to build a tree that records how the
preimage the patch was created from would have looked like.  An
abbreviated object name on the index line is ordinarily sufficient
for us to figure out the object name the preimage tree would have
contained, but a change to a submodule by definition shows an object
name of a submodule commit which our repository should not have, and
get_sha1_blob() is not an appropriate way to read it (or get_sha1()
for that matter).

Use get_sha1_hex() and complain if we do not find a full object name
there.

We could read from the payload part of the patch to learn the full
object name of the commit, but the primary user ""git rebase"" has
been fixed to give us a full object name, so this should suffice
for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1560.diff
https://github.com/git/git/commit/e2afb0be9073fbe9f565ad9e952155c0bf7dd7c6,01 Feb 2013,"apply: simplify build_fake_ancestor()

The local variable sha1_ptr in the build_fake_ancestor() function
used to either point at the null_sha1[] (if the ancestor did not
have the path) or at sha1[] (if we read the object name into the
local array), but 7a98869 (apply: get rid of --index-info in favor
of --build-fake-ancestor, 2007-09-17) made the ""missing in the
ancestor"" case unnecessary, hence sha1_ptr, when used, always points
at the local array.

Get rid of the unneeded variable, and restructure the if/else
cascade a bit to make it easier to read.  There should be no
behaviour change.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1561.diff
https://github.com/git/git/commit/4c9a418227a55832de90ec2662570c9daef537da,31 Jan 2013,"gpg: allow translation of more error messages

Mark these strings for translation so that error messages are
printed in the user's language of choice.

Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1562.diff
https://github.com/git/git/commit/045e3884bc432aff651659dc60059d1e8c2f86ea,30 Jan 2013,"branch: mark more strings for translation

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1563.diff
https://github.com/git/git/commit/43722c4d9e04b3749372b13598b32cdceb1f1252,30 Jan 2013,"branch: give a more helpful message on redundant arguments

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1564.diff
https://github.com/git/git/commit/640d0401be5f29db8c9e914d8a19dbc9b950448d,30 Jan 2013,"branch: reject -D/-d without branch name

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1565.diff
https://github.com/git/git/commit/75135b23f66afd362c864939ecd0d6871a87d769,30 Jan 2013,"branch: no detached HEAD check when editing another branch's description

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1566.diff
https://github.com/git/git/commit/3f1da57fffdcfb48bd8b85da347f310b955245d7,29 Jan 2013,"upload-pack: simplify request validation

Long time ago, we used to punt on a large (read: asking for more
than 256 refs) fetch request and instead sent a full pack, because
we couldn't fit many refs on the command line of rev-list we run
internally to enumerate the objects to be sent.  To fix this,
565ebbf (upload-pack: tighten request validation., 2005-10-24),
added a check to count the number of refs in the request and matched
with the number of refs we advertised, and changed the invocation of
rev-list to pass ""--all"" to it, still keeping us under the command
line argument limit.

However, these days we feed the list of objects requested and the
list of objects the other end is known to have via standard input,
so there is no longer a valid reason to special case a full clone
request.  Remove the code associated with ""create_full_pack"" to
simplify the logic.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1567.diff
https://github.com/git/git/commit/0fa2eb530fb748774c5b2f309a471cf048b8d9d9,28 Jan 2013,"add: warn when -u or -A is used without pathspec

Most Git commands that can be used with or without pathspec operate
tree-wide by default, the pathspec being used to restrict their
scope.  A few exceptions are: 'git grep', 'git clean', 'git add -u'
and 'git add -A'.  When run in a subdirectory without pathspec, they
operate only on paths in the current directory.

The inconsistency of 'git add -u' and 'git add -A' is particularly
problematic since other 'git add' subcommands (namely 'git add -p'
and 'git add -e') are tree-wide by default.  It also means that ""git
add -u && git commit"" will record a state that is different from
what is recorded with ""git commit -a"".

Flipping the default now is unacceptable, so let's start training
users to type 'git add -u|-A :/' or 'git add -u|-A .' explicitly, to
prepare for the next steps:

* forbid 'git add -u|-A' without pathspec (like 'git add' without
  option)

* much later, maybe, re-allow 'git add -u|-A' without pathspec, that
  will add all tracked and modified files, or all files, tree-wide.

A nice side effect of this patch is that it makes the :/ magic
pathspec easier to discover for users.

When the command is called from the root of the tree, there is no
ambiguity and no need to change the behavior, hence no need to warn.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_1568.diff
https://github.com/git/git/commit/be5c9fb9049ed470e7005f159bb923a5f4de1309,26 Jan 2013,"logmsg_reencode: lazily load missing commit buffers

Usually a commit that makes it to logmsg_reencode will have
been parsed, and the commit->buffer struct member will be
valid. However, some code paths will free commit buffers
after having used them (for example, the log traversal
machinery will do so to keep memory usage down).

Most of the time this is fine; log should only show a commit
once, and then exits. However, there are some code paths
where this does not work. At least two are known:

  1. A commit may be shown as part of a regular ref, and
     then it may be shown again as part of a submodule diff
     (e.g., if a repo contains refs to both the superproject
     and subproject).

  2. A notes-cache commit may be shown during ""log --all"",
     and then later used to access a textconv cache during a
     diff.

Lazily loading in logmsg_reencode does not necessarily catch
all such cases, but it should catch most of them. Users of
the commit buffer tend to be either parsing for structure
(in which they will call parse_commit, and either we will
already have parsed, or we will load commit->buffer lazily
there), or outputting (either to the user, or fetching a
part of the commit message via format_commit_message). In
the latter case, we should always be using logmsg_reencode
anyway (and typically we do so via the pretty-print
machinery).

If there are any cases that this misses, we can fix them up
to use logmsg_reencode (or handle them on a case-by-case
basis if that is inappropriate).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1569.diff
https://github.com/git/git/commit/dd0d388c44c28ebc021a24eeddc60287d4ea249c,26 Jan 2013,"logmsg_reencode: never return NULL

The logmsg_reencode function will return the reencoded
commit buffer, or NULL if reencoding failed or no reencoding
was necessary. Since every caller then ends up checking for NULL
and just using the commit's original buffer, anyway, we can
be a bit more helpful and just return that buffer when we
would have returned NULL.

Since the resulting string may or may not need to be freed,
we introduce a logmsg_free, which checks whether the buffer
came from the commit object or not (callers either
implemented the same check already, or kept two separate
pointers, one to mark the buffer to be used, and one for the
to-be-freed string).

Pushing this logic into logmsg_* simplifies the callers, and
will let future patches lazily load the commit buffer in a
single place.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1570.diff
https://github.com/git/git/commit/e510f2d610b30013675c9b08bae92a9cfc4b5907,25 Jan 2013,"howto/maintain: document ""### match next"" convention in jch/pu branch

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1571.diff
https://github.com/git/git/commit/75e5c0dc5529aed42122b3a774e6b17383e51b66,24 Jan 2013,"push: introduce REJECT_FETCH_FIRST and REJECT_NEEDS_FORCE

When we push to update an existing ref, if:

 * the object at the tip of the remote is not a commit; or
 * the object we are pushing is not a commit,

it won't be correct to suggest to fetch, integrate and push again,
as the old and new objects will not ""merge"".  We should explain that
the push must be forced when there is a non-committish object is
involved in such a case.

If we do not have the current object at the tip of the remote, we do
not even know that object, when fetched, is something that can be
merged.  In such a case, suggesting to pull first just like
non-fast-forward case may not be technically correct, but in
practice, most such failures are seen when you try to push your work
to a branch without knowing that somebody else already pushed to
update the same branch since you forked, so ""pull first"" would work
as a suggestion most of the time.  And if the object at the tip is
not a commit, ""pull first"" will fail, without making any permanent
damage.  As a side effect, it also makes the error message the user
will get during the next ""push"" attempt easier to understand, now
the user is aware that a non-commit object is involved.

In these cases, the current code already rejects such a push on the
client end, but we used the same error and advice messages as the
ones used when rejecting a non-fast-forward push, i.e. pull from
there and integrate before pushing again.

Introduce new rejection reasons and reword the messages
appropriately.

[jc: with help by Peff on message details]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_1572.diff
https://github.com/git/git/commit/c4ada6283eaf1d4970b92b0e2cb9503a17da27ad,22 Jan 2013,"Update draft release notes to 1.8.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1573.diff
https://github.com/git/git/commit/1542d4cdad9287896fd80d84a4c2256197087308,19 Jan 2013,"help: include <common-cmds.h> only in one file

This header not only declares but also defines the contents of the
array that holds the list of command names and help text.  Do not
include it in multiple places to waste text space.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1574.diff
https://github.com/git/git/commit/cbbe50db7691cd9d7d261ebc5c5ffec55f93127d,18 Jan 2013,"upload-pack: share more code

We mark the objects pointed at our refs with ""OUR_REF"" flag in two
functions (mark_our_ref() and send_ref()), but we can just use the
former as a helper for the latter.

Update the way mark_our_ref() prepares in-core object to use
lookup_unknown_object() to delay reading the actual object data,
just like we did in 435c833 (upload-pack: use peel_ref for ref
advertisements, 2012-10-04).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1575.diff
https://github.com/git/git/commit/eff80a9fd990de3605063050dae32f969ef18ba8,16 Jan 2013,"Allow custom ""comment char""

Some users do want to write a line that begin with a pound sign, #,
in their commit log message.  Many tracking system recognise
a token of #<bugid> form, for example.

The support we offer these use cases is not very friendly to the end
users.  They have a choice between

 - Don't do it.  Avoid such a line by rewrapping or indenting; and

 - Use --cleanup=whitespace but remove all the hint lines we add.

Give them a way to set a custom comment char, e.g.

    $ git -c core.commentchar=""%"" commit

so that they do not have to do either of the two workarounds.

[jc: although I started the topic, all the tests and documentation
updates, many of the call sites of the new strbuf_add_commented_*()
functions, and the change to git-submodule.sh scripted Porcelain are
from Ralf.]

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",362,data/crawl/git/patch_1576.diff
https://github.com/git/git/commit/07924d4d50e5304fb53eb60aaba8aef31d4c4e5e,16 Jan 2013,"diff: Introduce --diff-algorithm command line option

Since command line options have higher priority than config file
variables and taking previous commit into account, we need a way
how to specify myers algorithm on command line. However,
inventing `--myers` is not the right answer. We need far more
general option, and that is `--diff-algorithm`.

Signed-off-by: Michal Privoznik <mprivozn@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1577.diff
https://github.com/git/git/commit/5a8e84cde3711076d3ad7260daa0a24ee40c8e07,15 Jan 2013,"git p4: fail gracefully on sync with no master branch

If --branch was used to build a repository with no
refs/remotes/p4/master, future syncs will not know
which branch to sync.  Notice this situation and
print a helpful error message.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1578.diff
https://github.com/git/git/commit/2f328c3d2e88230a236e3d84d2bd6de59aea578d,15 Jan 2013,"reset $sha1 $pathspec: require $sha1 only to be treeish

Resetting with paths does not update HEAD and there is nothing else
that a commit should be needed for. Relax the argument parsing so only
a tree is required.

The sha1 is only passed to read_from_tree(), which already only
requires a tree.

The ""rev"" variable we pass to run_add_interactive() will resolve to a
tree. This is fine since interactive_reset only needs the parameter to
be a treeish and doesn't use it for display purposes.

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1579.diff
https://github.com/git/git/commit/3bbf2f20f62ec6aa7998d9f7acc942ded6639870,15 Jan 2013,"reset.c: finish entire cmd_reset() whether or not pathspec is given

By not returning from inside the ""if (pathspec)"" block, we can let the
pathspec-aware and pathspec-less code share a bit more, making it
easier to make future changes that should affect both cases. This also
highlights the similarity between read_from_tree() and reset_index().

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_1580.diff
https://github.com/git/git/commit/bc41bf422e15209860bfc6c898dbd3cd89d5da34,15 Jan 2013,"reset [--mixed]: only write index file once

When doing a mixed reset without paths, the index is locked, read,
reset, and written back as part of the actual reset operation (in
reset_index()). Then, when showing the list of worktree modifications,
we lock the index again, refresh it, and write it.

Change this so we only write the index once, making ""git reset"" a
little faster. It does mean that the index lock will be held a little
longer, but the difference is small compared to the time spent
refreshing the index.

There is one minor functional difference: We used to say ""Could not
write new index file."" if the first write failed, and ""Could not
refresh index"" if the second write failed. Now, we will only use the
first message.

This speeds up ""git reset"" a little on the linux-2.6 repo (best of
five, warm cache):

        Before      After
real    0m0.239s    0m0.214s
user    0m0.160s    0m0.130s
sys     0m0.070s    0m0.080s

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1581.diff
https://github.com/git/git/commit/01a19dfc1ac53011deef492b21e52bf7840cef49,15 Jan 2013,"reset.c: move lock, write and commit out of update_index_refresh()

In preparation for the/a following patch, move the locking, writing
and committing of the index file out of update_index_refresh(). The
code duplication caused will soon be taken care of. What remains of
update_index_refresh() is just one line, but it is still called from
two places, so let's leave it for now.

In the process, we expose and fix the minor UI bug that makes us print
""Could not refresh index"" when we fail to write the index file when
invoked with a pathspec. Copy the error message from the pathspec-less
codepath (""Could not write new index file."").

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1582.diff
https://github.com/git/git/commit/1ca38f85860b33ddc79b1494baf29aecde8616cd,15 Jan 2013,"reset: avoid redundant error message

If writing or committing the new index file fails, we print ""Could not
write new index file."" followed by ""Could not reset index file to
revision $rev."". The first message seems to imply the second, so print
only the first message.

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1583.diff
https://github.com/git/git/commit/b7099a06e8ffe61a06d3e32632e832e59f23bd4d,15 Jan 2013,"reset --keep: only write index file once

""git reset --keep"" calls reset_index_file() twice, first doing a
two-way merge to the target revision, updating the index and worktree,
and then resetting the index. After each call, we write the index
file.

In the unlikely event that the second call to reset_index_file()
fails, the index will have been merged to the target revision, but
HEAD will not be updated, leaving the user with a dirty index.

By moving the locking, writing and committing out of
reset_index_file() and into the caller, we can avoid writing the index
twice, thereby making the sure we don't end up in the half-way reset
state. As a bonus, we speed up ""git reset --keep"" a little on the
linux-2.6 repo (best of five, warm cache):

        Before      After
real    0m0.315s    0m0.296s
user    0m0.290s    0m0.280s
sys     0m0.020s    0m0.010s

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1584.diff
https://github.com/git/git/commit/10746a361689aaa1aa98b8d4e7fb3b8463391864,15 Jan 2013,"reset $pathspec: no need to discard index

Since 34110cd (Make 'unpack_trees()' have a separate source and
destination index, 2008-03-06), the index no longer gets clobbered by
do_diff_cache() and we can remove the code for discarding and
re-reading it.

There are two paths to update_index_refresh() from cmd_reset(), but on
both paths, either read_cache() or read_cache_unmerged() will have
been called, so the call to read_cache() in this method is redundant
(although practically free).

This speeds up ""git reset -- ."" a little on the linux-2.6 repo (best
of five, warm cache):

        Before      After
real    0m0.093s    0m0.080s
user    0m0.040s    0m0.020s
sys     0m0.050s    0m0.050s

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1585.diff
https://github.com/git/git/commit/f538a91e3c58bb0882be895eec099e51a74dfac4,14 Jan 2013,"git-clean: Display more accurate delete messages

(1) Only print out the names of the files and directories that got
    actually deleted. Also do not mention that we are not removing
    directories when the user did not ask us to do so with '-d'.
(2) Show ignore message for skipped untracked git repositories.

Consider the following repo layout:

  test.git/
    |-- tracked_dir/
    |     |-- some_tracked_file
    |     |-- some_untracked_file
    |-- tracked_file
    |-- untracked_file
    |-- untracked_foo/
    |     |-- bar/
    |     |     |-- bar.txt
    |     |-- emptydir/
    |     |-- frotz.git/
    |           |-- frotz.tx
    |-- untracked_some.git/
          |-- some.txt

Suppose the user issues 'git clean -fd' from the test.git directory.

When -d option is used and untracked directory 'foo' contains a
subdirectory 'frotz.git' that is managed by a different git repository
therefore it will not be removed.

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Removing untracked_foo/
  Removing untracked_some.git/

The message displayed to the user is slightly misleading. The foo/
directory has not been removed because of foo/frotz.git still exists.
On the other hand the subdirectories 'bar' and 'emptydir' have been
deleted but they're not mentioned anywhere. Also, untracked_some.git
has not been removed either.

This behaviour is the result of the way the deletion of untracked
directories are reported. In the current implementation they are
deleted recursively but only the name of the top most directory is
printed out. The calling function does not know about any
subdirectories that could not be removed during the recursion.

Improve the way the deleted directories are reported back to
the user:
  (1) Create a recursive delete function 'remove_dirs' in builtin/clean.c
      to run in both dry_run and delete modes with the delete logic as
      follows:
        (a) Check if the current directory to be deleted is an untracked
            git repository. If it is and --force --force option is not set
            do not touch this directory, print ignore message, set dir_gone
            flag to false for the caller and return.
        (b) Otherwise for each item in current directory:
              (i)   If current directory cannot be accessed, print warning,
                    set dir_gone flag to false and return.
              (ii)  If the item is a subdirectory recurse into it,
                    check for the returned value of the dir_gone flag.
                    If the subdirectory is gone, add the name of the deleted
                    directory to a list of successfully removed items 'dels'.
                    Else set the dir_gone flag as the current directory
                    cannot be removed because we have at least one subdirectory
                    hanging around.
              (iii) If it is a file try to remove it. If success add the
                    file name to the 'dels' list, else print error and set
                    dir_gone flag to false.
        (c) After we finished deleting all items in the current directory and
            the dir_gone flag is still true, remove the directory itself.
            If failed set the dir_gone flag to false.

        (d) If the current directory cannot be deleted because the dir_gone flag
            has been set to false, print out all the successfully deleted items
            for this directory from the 'dels' list.
        (e) We're done with the current directory, return.

  (2) Modify the cmd_clean() function to:
        (a) call the recursive delete function 'remove_dirs()' for each
            topmost directory it wants to remove
        (b) check for the returned value of dir_gone flag. If it's true
            print the name of the directory as being removed.

Consider the output of the improved version:

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Skipping repository untracked_foo/frotz.git
  Removing untracked_foo/bar
  Removing untracked_foo/emptydir
  Skipping repository untracked_some.git/

Now it displays only the file and directory names that got actually
deleted and shows the name of the untracked git repositories it ignored.

Reported-by: Soren Brinkmann <soren.brinkmann@xilinx.com>

Signed-off-by: Zoltan Klinger <zoltan.klinger@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/patch_1586.diff
https://github.com/git/git/commit/eacf0117752780bf418d352a6ad2f033aeda1cce,14 Jan 2013,Sync with 1.8.1.1,54,data/crawl/git/patch_1587.diff
https://github.com/git/git/commit/e4f59a32de3f90ff5aabc09b9da6bd5818c5076b,14 Jan 2013,"Git 1.8.1.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1588.diff
https://github.com/git/git/commit/4dcb167fc3536db0e78c50f239cd3a19afd383fa,11 Jan 2013,"fetch: add --unshallow for turning shallow repo into complete one

The user can do --depth=2147483647 (*) for restoring complete repo
now. But it's hard to remember. Any other numbers larger than the
longest commit chain in the repository would also do, but some
guessing may be involved. Make easy-to-remember --unshallow an alias
for --depth=2147483647.

Make upload-pack recognize this special number as infinite depth. The
effect is essentially the same as before, except that upload-pack is
more efficient because it does not have to traverse to the bottom
anymore.

The chance of a user actually wanting exactly 2147483647 commits
depth, not infinite, on a repository with a history that long, is
probably too small to consider. The client can learn to add or
subtract one commit to avoid the special treatment when that actually
happens.

(*) This is the largest positive number a 32-bit signed integer can
    contain. JGit and older C Git store depth as ""int"" so both are OK
    with this number. Dulwich does not support shallow clone.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1589.diff
https://github.com/git/git/commit/95b63f1ebb1d2b1ae34238cac331dd1e6e437975,11 Jan 2013,"clone: forbid --bare --separate-git-dir <dir>

The --separate-git-dir option was introduced to make it simple to put
the git directory somewhere outside the worktree, for example when
cloning a repository for use as a submodule.

It was not intended for use when creating a bare repository. In that
case there is no worktree and it is more natural to directly clone the
repository and create a .git file as separate steps:

        git clone --bare /path/to/repo.git bar.git
        printf 'gitdir: bar.git\n' >foo.git

Forbid the combination, making the command easier to explain.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1590.diff
https://github.com/git/git/commit/ea02ffa38571084007eb7c63f650d0011e44a3dd,10 Jan 2013,"mailmap: simplify map_user() interface

Simplify map_user(), mostly to avoid copies of string buffers. It
also simplifies caller functions.

map_user() directly receive pointers and length from the commit buffer
as mail and name. If mapping of the user and mail can be done, the
pointer is updated to a new location. Lengths are also updated if
necessary.

The caller of map_user() can then copy the new email and name if
necessary.

Signed-off-by: Antoine Pelisse <apelisse@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/patch_1591.diff
https://github.com/git/git/commit/29b1b21f07f8d9b1778a4f3df690e004832d4be8,09 Jan 2013,"git-fast-import(1): reorganise options

The options in git-fast-import(1) are not currently arranged in a
logical order, which has caused the '--done' options to be documented
twice (commit 3266de10).

Rearrange them into logical groups under subheadings.

Suggested-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",86,data/crawl/git/patch_1592.diff
https://github.com/git/git/commit/44fe83502edf5391bb3a5997cab01794b4568062,09 Jan 2013,"Update draft release notes to 1.8.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_1593.diff
https://github.com/git/git/commit/6293ded348a918e5644d286dcd8b05044097c27d,08 Jan 2013,"upload-pack: only accept commits from ""shallow"" line

We only allow cuts at commits, not arbitrary objects. upload-pack will
fail eventually in register_shallow if a non-commit is given with a
generic error ""Object %s is a %s, not a commit"". Check it early and
give a more accurate error.

This should never show up in an ordinary session. It's for buggy
clients, or when the user manually edits .git/shallow.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1594.diff
https://github.com/git/git/commit/368aa52952deb631b38a89837c4abbb00c5261c1,06 Jan 2013,"add git-check-ignore sub-command

This works in a similar manner to git-check-attr.

Thanks to Jeff King and Junio C Hamano for the idea:
http://thread.gmane.org/gmane.comp.version-control.git/108671/focus=108815

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",908,data/crawl/git/patch_1595.diff
https://github.com/git/git/commit/512aaf9453cecfa57dddc61aec2132b936b2ff70,06 Jan 2013,"add.c: extract new die_if_path_beyond_symlink() for reuse

This will be reused by a new git check-ignore command.

Also document validate_pathspec().

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1596.diff
https://github.com/git/git/commit/9d67b61f739a1a898bc8c9960047ebff0e9c9d09,06 Jan 2013,"add.c: extract check_path_for_gitlink() from treat_gitlinks() for reuse

Extract the body of the for loop in treat_gitlinks() into a separate
check_path_for_gitlink() function so that it can be reused elsewhere.
This paves the way for a new check-ignore sub-command.

Also document treat_gitlinks().

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1597.diff
https://github.com/git/git/commit/cc1b258e2aaba8cbb34aa7dca72a3a4a5a07014f,03 Jan 2013,"Documentation: update ""howto maintain git""

The flow described in the document is still correct, but over time I
have automated various parts of the workflow with tools and their
use was not explained at all.

Update it and outline the use of two key scripts from the 'todo'
branch, ""Reintegrate"" and ""cook"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",330,data/crawl/git/patch_1598.diff
https://github.com/git/git/commit/bdeeb809d75b71bc9bdc3ed1b4ebc64e3d965840,03 Jan 2013,"remote-bzr: add support for fecthing special modes

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_1599.diff
https://github.com/git/git/commit/1b25892636d2f250eb2163301440ee8c8c1ac944,01 Jan 2013,"test-wildmatch: add ""perf"" command to compare wildmatch and fnmatch

It takes a text file, a pattern, a number <n> and pathname flag. Each
line in the text file is matched against the pattern <n> times. If
""pathname"" is given, FNM_PATHNAME is used.

test-wildmatch is built with -O2 and tested against glibc 2.14.1 (also
-O2) and compat/fnmatch. The input file is linux-2.6.git file list.
<n> is 2000. The complete command list is at the end.

wildmatch is beaten in the following cases. Apparently it needs some
improvement in FNM_PATHNAME case:

glibc, '*/*/*' with FNM_PATHNAME:
wildmatch 8s 1559us
fnmatch   1s 11877us or 12.65% faster

compat, '*/*/*' with FNM_PATHNAME:
wildmatch 7s 922458us
fnmatch   2s 905111us or 36.67% faster

compat, '*/*/*' without FNM_PATHNAME:
wildmatch 7s 264201us
fnmatch   2s 1897us or 27.56% faster

compat, '[a-z]*/[a-z]*/[a-z]*' with FNM_PATHNAME:
wildmatch 8s 742827us
fnmatch   0s 922943us or 10.56% faster

compat, '[a-z]*/[a-z]*/[a-z]*' without FNM_PATHNAME:
wildmatch 8s 284520us
fnmatch   0s 6936us or 0.08% faster

The rest of glibc numbers
-------------------------

'Documentation/*'
wildmatch 1s 529479us
fnmatch   1s 98263us or 71.81% slower

'drivers/*'
wildmatch 1s 988288us
fnmatch   1s 192049us or 59.95% slower

'Documentation/*' pathname
wildmatch 1s 557507us
fnmatch   1s 93696us or 70.22% slower

'drivers/*' pathname
wildmatch 2s 161626us
fnmatch   1s 230372us or 56.92% slower

'[Dd]ocu[Mn]entation/*'
wildmatch 1s 776581us
fnmatch   1s 471693us or 82.84% slower

'[Dd]o?u[Mn]en?ati?n/*'
wildmatch 1s 770770us
fnmatch   1s 555727us or 87.86% slower

'[Dd]o?u[Mn]en?ati?n/*' pathname
wildmatch 1s 783507us
fnmatch   1s 537029us or 86.18% slower

'[A-Za-z][A-Za-z]??*'
wildmatch 4s 110386us
fnmatch   4s 926306us or 119.85% slower

'[A-Za-z][A-Za-z]??'
wildmatch 3s 918114us
fnmatch   3s 686175us or 94.08% slower

'[A-Za-z][A-Za-z]??*' pathname
wildmatch 4s 453746us
fnmatch   4s 955856us or 111.27% slower

'[A-Za-z][A-Za-z]??' pathname
wildmatch 3s 896646us
fnmatch   3s 733828us or 95.82% slower

'*/*/*'
wildmatch 7s 287985us
fnmatch   1s 74083us or 14.74% slower

'[a-z]*/[a-z]*/[a-z]*' pathname
wildmatch 8s 796659us
fnmatch   1s 568409us or 17.83% slower

'[a-z]*/[a-z]*/[a-z]*'
wildmatch 8s 316559us
fnmatch   3s 430652us or 41.25% slower

The rest of compat numbers
--------------------------

'Documentation/*'
wildmatch 1s 520389us
fnmatch   0s 62579us or 4.12% slower

'drivers/*'
wildmatch 1s 955354us
fnmatch   0s 190109us or 9.72% slower

'Documentation/*' pathname
wildmatch 1s 561675us
fnmatch   0s 55336us or 3.54% slower

'drivers/*' pathname
wildmatch 2s 106100us
fnmatch   0s 219680us or 10.43% slower

'[Dd]ocu[Mn]entation/*'
wildmatch 1s 750810us
fnmatch   0s 542721us or 31.00% slower

'[Dd]o?u[Mn]en?ati?n/*'
wildmatch 1s 724791us
fnmatch   0s 538948us or 31.25% slower

'[Dd]o?u[Mn]en?ati?n/*' pathname
wildmatch 1s 731403us
fnmatch   0s 537474us or 31.04% slower

'[A-Za-z][A-Za-z]??*'
wildmatch 4s 28555us
fnmatch   1s 67297us or 26.49% slower

'[A-Za-z][A-Za-z]??'
wildmatch 3s 838279us
fnmatch   0s 880005us or 22.93% slower

'[A-Za-z][A-Za-z]??*' pathname
wildmatch 4s 379476us
fnmatch   1s 55643us or 24.10% slower

'[A-Za-z][A-Za-z]??' pathname
wildmatch 3s 830910us
fnmatch   0s 849699us or 22.18% slower

The following commands are used:

LANG=C ./test-wildmatch perf /tmp/filelist.txt 'Documentation/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt 'drivers/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt 'Documentation/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt 'drivers/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[Dd]ocu[Mn]entation/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[Dd]o?u[Mn]en?ati?n/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[Dd]o?u[Mn]en?ati?n/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '*/*/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '*/*/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[a-z]*/[a-z]*/[a-z]*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[a-z]*/[a-z]*/[a-z]*' 2000

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1600.diff
https://github.com/git/git/commit/126b59692bb4d1e2283e8528fe0a8103995c23c4,26 Dec 2012,"make __git_ps1 accept a third parameter in pcmode

The optional third parameter when __git_ps1 is used in
PROMPT_COMMAND mode as format string for printf to further
customize the way the git status string is embedded in the
user's PS1 prompt.

Signed-off-by: Simon Oosthoek <s.oosthoek@xs4all.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1601.diff
https://github.com/git/git/commit/334ae397452170dacfcd8e69e4a41f6a64f54eec,23 Dec 2012,"learn to pick/revert into unborn branch

cherry-picking into an unborn branch should work, so make it work,
with or without --ff.

Cherry-picking anything other than a commit that only adds files, will
naturally result in conflicts. Similarly, revert also works, but will
result in conflicts unless the specified revision only deletes files.

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1602.diff
https://github.com/git/git/commit/5d77298d084f01a854c8aecc1709acf53d956ef8,23 Dec 2012,"tests: move test_cmp_rev to test-lib-functions

A function for checking that two given parameters refer to the same
revision was defined in several places, so move the definition to
test-lib-functions.sh instead.

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1603.diff
https://github.com/git/git/commit/30825178fb72e3664bd1bda7c02c62e300e2e5ce,18 Dec 2012,"log --format: teach %C(auto,black) to respect color config

Traditionally, %C(color attr) always emitted the ANSI color
sequence; it was up to the scripts that wanted to conditionally
color their output to omit %C(...) specifier when they do not want
colors.

Optionally allow ""auto,"" to be prefixed to the color, so that the
output is colored iff we would color regular ""log"" output
(e.g., taking into account color.* and --color command line
options).

Tests and pretty_context bits by Jeff King <peff@peff.net>.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_1604.diff
https://github.com/git/git/commit/dbc3904ebc604bf5b818d9840b79228aacdd1343,16 Dec 2012,"cache-tree: remove dead i-t-a code in verify_cache()

This code is added in 331fcb5 (git add --intent-to-add: do not let an
empty blob be committed by accident - 2008-11-28) to forbid committing
when i-t-a entries are present. When we allow that, we forgot to
remove this.

Noticed-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1605.diff
https://github.com/git/git/commit/a469a1019352b8efc4bd7003b0bd59eb60fc428c,15 Dec 2012,"silence some -Wuninitialized false positives

There are a few error functions that simply wrap error() and
provide a standardized message text. Like error(), they
always return -1; knowing that can help the compiler silence
some false positive -Wuninitialized warnings.

One strategy would be to just declare these as inline in the
header file so that the compiler can see that they always
return -1. However, gcc does not always inline them (e.g.,
it will not inline opterror, even with -O3), which renders
our change pointless.

Instead, let's follow the same route we did with error() in
the last patch, and define a macro that makes the constant
return value obvious to the compiler.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1606.diff
https://github.com/git/git/commit/e208f9cc7574f5980faba498d0aa30b4defeb34f,15 Dec 2012,"make error()'s constant return value more visible

When git is compiled with ""gcc -Wuninitialized -O3"", some
inlined calls provide an additional opportunity for the
compiler to do static analysis on variable initialization.
For example, with two functions like this:

  int get_foo(int *foo)
  {
	if (something_that_might_fail() < 0)
		return error(""unable to get foo"");
	*foo = 0;
	return 0;
  }

  void some_fun(void)
  {
	  int foo;
	  if (get_foo(&foo) < 0)
		  return -1;
	  printf(""foo is %d\n"", foo);
  }

If get_foo() is not inlined, then when compiling some_fun,
gcc sees only that a pointer to the local variable is
passed, and must assume that it is an out parameter that
is initialized after get_foo returns.

However, when get_foo() is inlined, the compiler may look at
all of the code together and see that some code paths in
get_foo() do not initialize the variable. As a result, it
prints a warning. But what the compiler can't see is that
error() always returns -1, and therefore we know that either
we return early from some_fun, or foo ends up initialized,
and the code is safe.  The warning is a false positive.

If we can make the compiler aware that error() will always
return -1, it can do a better job of analysis. The simplest
method would be to inline the error() function. However,
this doesn't work, because gcc will not inline a variadc
function. We can work around this by defining a macro. This
relies on two gcc extensions:

  1. Variadic macros (these are present in C99, but we do
     not rely on that).

  2. Gcc treats the ""##"" paste operator specially between a
     comma and __VA_ARGS__, which lets our variadic macro
     work even if no format parameters are passed to
     error().

Since we are using these extra features, we hide the macro
behind an #ifdef. This is OK, though, because our goal was
just to help gcc.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1607.diff
https://github.com/git/git/commit/938a60d64fc91fd7d646ed33fad527b724d1e534,12 Dec 2012,"mailmap: clean up read_mailmap error handling

The error handling for the read_mailmap function is odd. It
returns 1 on error, rather than -1. And it treats a
non-existent mailmap as an error, even though there is no
reason that one needs to exist. Unless some other mailmap
source loads successfully, in which case the original error
is completely masked.

This does not cause any bugs, however, because no caller
bothers to check the return value, anyway. Let's make this a
little more robust to real errors and less surprising for
future callers that do check the error code:

  1. Return -1 on errors.

  2. Treat a missing entry (e.g., no mailmap.file given),
     ENOENT, or a non-existent blob (for mailmap.blob) as
     ""no error"".

  3. Complain loudly when a real error (e.g., a transient
     I/O error, no permission to open the mailmap file,
     missing or corrupted blob object, etc) occurs.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1608.diff
https://github.com/git/git/commit/a859d3ee57acee1ca9fbb37e763814f83d11e7bd,07 Dec 2012,"Update draft release notes to 1.8.0.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1609.diff
https://github.com/git/git/commit/f7a4cea25e3ee1c8f27777bc4293dca0210fa573,04 Dec 2012,"mingw: get rid of getpass implementation

There's no remaining call-sites, and as pointed out in the
previous commit message, it's not quite ideal. So let's just
lose it.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1610.diff
https://github.com/git/git/commit/67fe7356538c714da9da6061abe99209452260d7,04 Dec 2012,"compat/terminal: separate input and output handles

On Windows, the terminal cannot be opened in read-write mode, so
we need distinct pairs for reading and writing. Since this works
fine on other platforms as well, always open them in pairs.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1611.diff
https://github.com/git/git/commit/176478a8bd028a3877d2be49a1e7a49386c095ce,04 Dec 2012,"mingw: make fgetc raise SIGINT if apropriate

Set a control-handler to prevent the process from terminating, and
simulate SIGINT so it can be handled by a signal-handler as usual.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_1612.diff
https://github.com/git/git/commit/f4f549892ac686a9adcf3cb72bee1a11c0566c88,04 Dec 2012,"mingw: correct exit-code for SIGALRM's SIG_DFL

Make sure SIG_DFL for SIGALRM exits with 128 + SIGALRM so other
processes can diagnose why it exits.

While we're at it, make sure we only write to stderr if it's a
terminal, and  change the output to match that of Linux.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1613.diff
https://github.com/git/git/commit/a2767c5c91ebda3c083419c80a7f64248c5ec175,02 Dec 2012,"run-command: do not warn about child death from terminal

SIGINT and SIGQUIT are not generally interesting signals to
the user, since they are typically caused by them hitting ""^C""
or otherwise telling their terminal to send the signal.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1614.diff
https://github.com/git/git/commit/f42ca31d8d209a43342ea345a52fc0bd43d71cc8,02 Dec 2012,"launch_editor: refactor to use start/finish_command

The launch_editor function uses the convenient run_command_*
interface. Let's use the more flexible start_command and
finish_command functions, which will let us manipulate the
parent state while we're waiting for the child to finish.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1615.diff
https://github.com/git/git/commit/dbfeddb12e5bb540ed3c852eebda3df9117bd150,02 Dec 2012,"push: require force for refs under refs/tags/

References are allowed to update from one commit-ish to another if the
former is an ancestor of the latter.  This behavior is oriented to
branches which are expected to move with commits.  Tag references are
expected to be static in a repository, though, thus an update to
something under refs/tags/ should be rejected unless the update is
forced.

Signed-off-by: Chris Rorvick <chris@rorvick.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_1616.diff
https://github.com/git/git/commit/f94c3251e1400c3cf349f7f84fea4db66b540113,29 Nov 2012,Update draft release notes to 1.8.1,33,data/crawl/git/patch_1617.diff
https://github.com/git/git/commit/9ff10fc86989940eb2c016511c293bc0ac50e6f6,29 Nov 2012,"fast-export: fix comparison in tests

First the expected, then the actual, otherwise the diff would be the
opposite of what we want.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1618.diff
https://github.com/git/git/commit/f04977168f520a50b51794c17b443e256a61b4ec,28 Nov 2012,"remote-bzr: add support for pushing

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/patch_1619.diff
https://github.com/git/git/commit/bee118ec048911cfacdd65ad1ea2bdd6e25a6254,28 Nov 2012,"Add new remote-bzr transport helper

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",352,data/crawl/git/patch_1620.diff
https://github.com/git/git/commit/1e310551e7e3a2efe41cbe1bc0a6b919cd6f7d34,28 Nov 2012,"remote-hg: fix for older versions of python

As Amit Bakshi reported, older versions of python (< 2.7) don't have
subprocess.check_output, so let's use subprocess.Popen directly as
suggested.

Suggested-by: Amit Bakshi <ambakshi@gmail.com>
Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1621.diff
https://github.com/git/git/commit/6360bee4cd902bdea5db5826821edffd6f367d89,26 Nov 2012,"imap-send: correctly report errors reading from stdin

Previously, read_message() didn't distinguish between an error and eof
when reading its input.  This could have resulted in incorrect
behavior if there was an error: (1) reporting ""nothing to send"" if no
bytes were read or (2) sending an incomplete message if some bytes
were read before the error.

Change read_message() to return -1 on ferror()s and 0 on success, so
that the caller can recognize that an error occurred.  (The return
value used to be the length of the input read, which was redundant
because that is already available as the strbuf length.

Change the caller to report errors correctly.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1622.diff
https://github.com/git/git/commit/78189bead3f5fde22ae651d66208a0e0a375a819,26 Nov 2012,"git p4: catch p4 errors when streaming file contents

Error messages that arise during the ""p4 print"" phase of
generating commits were silently ignored.  Catch them,
abort the fast-import, and exit.

Without this fix, the sync/clone appears to work, but files that
are inaccessible by the p4d server will still be imported to git,
although without the proper contents.  Instead the errant files
will contain a p4 error message, such as ""Librarian checkout
//depot/path failed"".

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_1623.diff
https://github.com/git/git/commit/18fa13d0b34b6243d3679ea78325ee33ee4d0989,26 Nov 2012,"git p4: catch p4 describe errors

Group the two calls to ""p4 describe"" into a new helper function,
and try to validate the p4 results.  The current behavior when p4
describe fails is to die with a python backtrace.  The new behavior
will print the full response.

This does not solve any particular problem, but adds more
checking in hopes of narrowing down odd behavior seen on
at least two occasions.

Based-on-patch-by: Matt Arsenault <arsenm2@gmail.com>
Reported-by: Arthur <a.foulon@amesys.fr>
Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1624.diff
https://github.com/git/git/commit/ef49841ddf98ed1eb40c60153072fa1a91fc2f18,20 Nov 2012,"test-wildmatch: avoid Windows path mangling

The MSYS bash mangles arguments that begin with a forward slash
when they are passed to test-wildmatch. This causes tests to fail.
Avoid mangling by prepending ""XXX"", which is removed by
test-wildmatch before further processing.

[J6t: reworded commit message]

Reported-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>",18,data/crawl/git/patch_1625.diff
https://github.com/git/git/commit/c47ef57caaa2b17d32b343fbe652f33b31c81362,19 Nov 2012,"diff: introduce diff.submodule configuration variable

Introduce a diff.submodule configuration variable corresponding to the
'--submodule' command-line option of 'git diff'.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1626.diff
https://github.com/git/git/commit/cd163d4b4e190d5e5131962c1b8f84601d4736d4,16 Nov 2012,"usage.c: detect recursion in die routines and bail out immediately

It is theoretically possible for a die handler to get into a state of
infinite recursion.  For example, if a die handler called another function
which itself called die().  Let's at least detect this situation, inform the
user, and call exit.

Signed-off-by: Brandon Casey <bcasey@nvidia.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1627.diff
https://github.com/git/git/commit/afa8c07a26b9783c41b1066b75a35de1610a3cfa,16 Nov 2012,"checkout: print a message when switching unborn branches

When we switch to a new branch using checkout, we usually output a
message indicating what happened. However, when we switch from an unborn
branch to a new branch, we do not print anything, which may leave the
user wondering what happened.

The reason is that the unborn branch is a special case (see abe1998),
and does not follow the usual switch_branches code path. Let's add a
similar informational message to the special case to match the usual
code path.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1628.diff
https://github.com/git/git/commit/1d34c50f132d2234bd70956ef99b2b94786d43dd,13 Nov 2012,"format-patch: add a blank line between notes and diffstat

The last line of the note text comes immediately before the diffstat
block, making the latter unnecessarily harder to view.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1629.diff
https://github.com/git/git/commit/9dfc36841b3f1a2669f0513676cc4d72ef1220a1,13 Nov 2012,"replace: parse revision argument for -d

'git replace' parses the revision arguments when it creates replacements
(so that a sha1 can be abbreviated, e.g.) but not when deleting
replacements.

Make it parse the argument to 'replace -d' in the same way.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Jeff King <peff@peff.net>",26,data/crawl/git/patch_1630.diff
https://github.com/git/git/commit/6eac50d8274ef0acbbaec4f79e2876405ba8dcee,08 Nov 2012,"link_alt_odb_entries(): use string_list_split_in_place()

Change link_alt_odb_entry() to take a NUL-terminated string instead of
(char *, len).  Use string_list_split_in_place() rather than inline
code in link_alt_odb_entries().

This approach saves some code and also avoids the (probably harmless)
error of passing a non-NUL-terminated string to is_absolute_path().

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Jeff King <peff@peff.net>",42,data/crawl/git/patch_1631.diff
https://github.com/git/git/commit/23b4a11fa47161a5e5f221c58f47400207403bc4,04 Nov 2012,"remote-hg: add support for pushing

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>",217,data/crawl/git/patch_1632.diff
https://github.com/git/git/commit/5085a4e2e81f295a93df9b4bd98813d771f18a3c,04 Nov 2012,"Add new remote-hg transport helper

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>",391,data/crawl/git/patch_1633.diff
https://github.com/git/git/commit/5085a4e2e81f295a93df9b4bd98813d771f18a3c,04 Nov 2012,"Add new remote-hg transport helper

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>",391,data/crawl/git/patch_1633.diff
https://github.com/git/git/commit/f3f47a1e8ddbecb0865be3d4c5dfef609cb58867,18 Oct 2012,"status: add --long output format option

You can currently set the output format to --short or
--porcelain. There is no --long, because we default to it
already. However, you may want to override an alias that
uses ""--short"" to get back to the default.

This requires a little bit of refactoring, because currently
we use STATUS_FORMAT_LONG internally to mean the same as
""the user did not specify anything"". By expanding the enum
to include STATUS_FORMAT_NONE, we can distinguish between
the implicit and explicit cases. This effects these
conditions:

  1. The user has asked for NUL termination. With NONE, we
     currently default to turning on the porcelain mode.
     With an explicit --long, we would in theory use NUL
     termination with the long mode, but it does not support
     it. So we can just complain and die.

  2. When an output format is given to ""git commit"", we
     default to ""--dry-run"". This behavior would now kick in
     when ""--long"" is given, too.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1634.diff
https://github.com/git/git/commit/13baa9fe866f63311af5a5ee318beddb16eb5df4,18 Oct 2012,"branch: show targets of deleted symrefs, not sha1s

git branch reports the abbreviated hash of the head commit of
a deleted branch to make it easier for a user to undo the
operation.  For symref branches this doesn't help.  Print the
symref target instead for them.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1635.diff
https://github.com/git/git/commit/22ed79275360a3dbb480e2c510a94c4b817afad2,18 Oct 2012,"branch: factor out delete_branch_config()

Provide a small helper function for deleting branch config sections.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1636.diff
https://github.com/git/git/commit/f5d0e162c49320d5069a63a05960fc5a38d72423,18 Oct 2012,"branch: factor out check_branch_commit()

Move the code to perform checks on the tip commit of a branch
to its own function.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1637.diff
https://github.com/git/git/commit/7687a0541e0a6d86c5005d84057321368181c1b5,09 Oct 2012,"grep: move the configuration parsing logic to grep.[ch]

The configuration handling is a library-ish part of this program,
that is not specific to ""git grep"" command.  It should be reusable
by ""log"" and others.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",265,data/crawl/git/patch_1638.diff
https://github.com/git/git/commit/5bfc76b5b275bbf0ddc2cf1a3a33fa6156addbd8,07 Oct 2012,"remote-svn: add marks-file regeneration

fast-import mark files are stored outside the object database and are
therefore not fetched and can be lost somehow else.  marks provide a
svn revision --> git sha1 mapping, while the notes that are attached
to each commit when it is imported provide a git sha1 --> svn revision
mapping.

If the marks file is not available or not plausible, regenerate it by
walking through the notes tree.  , i.e.  The plausibility check tests
if the highest revision in the marks file matches the revision of the
top ref. It doesn't ensure that the mark file is completely correct.
This could only be done with an effort equal to unconditional
regeneration.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1639.diff
https://github.com/git/git/commit/8e43a1d010e22a0e432de440b08cc4389d8370f9,07 Oct 2012,"remote-svn: add incremental import

Search for a note attached to the ref to update and read it's
'Revision-number:'-line. Start import from the next svn revision.

If there is no next revision in the svn repo, svnrdump terminates with
a message on stderr an non-zero return value. This looks a little
weird, but there is no other way to know whether there is a new
revision in the svn repo.

On the start of an incremental import, the parent of the first commit
in the fast-import stream is set to the branch name to update. All
following commits specify their parent by a mark number. Previous mark
files are currently not reused.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/patch_1640.diff
https://github.com/git/git/commit/8d7cd8eb3b4cee410ee391f7d59610e2f90adf4f,07 Oct 2012,"remote-svn: Activate import/export-marks for fast-import

Enable import and export of a marks file by sending the appropriate
feature commands to fast-import before sending data.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1641.diff
https://github.com/git/git/commit/a9a55613cb9b92e0dd65f8c4554fd7b562377a6e,07 Oct 2012,"Create a note for every imported commit containing svn metadata

To provide metadata from svn dumps for further processing, e.g.
branch detection, attach a note to each imported commit that stores
additional information.  The notes are currently hard-coded in
refs/notes/svn/revs.  Currently the following lines from the svn dump
are directly accumulated in the note. This can be refined as needed.

 - ""Revision-number""
 - ""Node-path""
 - ""Node-kind""
 - ""Node-action""
 - ""Node-copyfrom-path""
 - ""Node-copyfrom-rev""

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1642.diff
https://github.com/git/git/commit/3c23953fb220675c1387c8afc23e0cb7c7ed914c,07 Oct 2012,"vcs-svn: add fast_export_note to create notes

fast_export lacked a method to writes notes to fast-import stream.
Add two new functions fast_export_note which is similar to
fast_export_modify. And also add fast_export_buf_to_data to be able to
write inline blobs that don't come from a line_buffer or from delta
application.

To be used like this:

  fast_export_begin_commit(""refs/notes/somenotes"", ...)
  fast_export_note(""refs/heads/master"", ""inline"")
  fast_export_buf_to_data(&data)

or maybe

  fast_export_note(""refs/heads/master"", sha1)

Signed-off-by: Dmitry Ivankov <divanorama@gmail.com>
Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1643.diff
https://github.com/git/git/commit/f6529de9f4fc66de7679fa1204da1da50f6292fb,07 Oct 2012,"Allow reading svn dumps from files via file:// urls

For testing as well as for importing large, already available dumps,
it's useful to bypass svnrdump and replay the svndump from a file
directly.

Add support for file:// urls in the remote url, e.g.

  svn::file:///path/to/dump

When the remote helper finds an url starting with file:// it tries to
open that file instead of invoking svnrdump.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_1644.diff
https://github.com/git/git/commit/271fd1fc2a25ebfc1782aab0d39b613555d22315,07 Oct 2012,"remote-svn, vcs-svn: Enable fetching to private refs

The reference to update by the fast-import stream is hard-coded.  When
fetching from a remote the remote-helper shall update refs in a
private namespace, i.e. a private subdir of refs/.  This namespace is
defined by the 'refspec' capability, that the remote-helper advertises
as a reply to the 'capabilities' command.

Extend svndump and fast-export to allow passing the target ref.
Update svn-fe to be compatible.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1645.diff
https://github.com/git/git/commit/fd871b94f6d564864194befa10c621586b7b8bcf,07 Oct 2012,"Add svndump_init_fd to allow reading dumps from arbitrary FDs

The existing function only allows reading from a filename or from
stdin. Allow passing of a FD and an additional FD for the back report
pipe. This allows us to retrieve the name of the pipe in the caller.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1646.diff
https://github.com/git/git/commit/68f64ff8b49ce5b32b11fe136ac89f0ba838a61c,07 Oct 2012,"Implement a remote helper for svn in C

Enable basic fetching from subversion repositories. When processing
remote URLs starting with testsvn::, git invokes this remote-helper.
It starts svnrdump to extract revisions from the subversion repository
in the 'dump file format', and converts them to a git-fast-import stream
using the functions of vcs-svn/.

Imported refs are created in a private namespace at
refs/svn/<remote-name>/master.  The revision history is imported
linearly (no branch detection) and completely, i.e. from revision 0 to
HEAD.

The 'bidi-import' capability is used. The remote-helper expects data
from fast-import on its stdin. It buffers a batch of 'import' command
lines in a string_list before starting to process them.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",176,data/crawl/git/patch_1647.diff
https://github.com/git/git/commit/435c83323713066723e4194cd89c31bbec7011a2,05 Oct 2012,"upload-pack: use peel_ref for ref advertisements

When upload-pack advertises refs, we attempt to peel tags
and advertise the peeled version. We currently hand-roll the
tag dereferencing, and use as many optimizations as we can
to avoid loading non-tag objects into memory.

Not only has peel_ref recently learned these optimizations,
too, but it also contains an even more important one: it
has access to the ""peeled"" data from the pack-refs file.
That means we can avoid not only loading annotated tags
entirely, but also avoid doing any kind of object lookup at
all.

This cut the CPU time to advertise refs by 50% in the
linux-2.6 repo, as measured by:

  echo 0000 | git-upload-pack . >/dev/null

best-of-five, warm cache, objects and refs fully packed:

  [before]             [after]
  real    0m0.026s     real    0m0.013s
  user    0m0.024s     user    0m0.008s
  sys     0m0.000s     sys     0m0.000s

Those numbers are irrelevantly small compared to an actual
fetch. Here's a larger repo (400K refs, of which 12K are
unique, and of which only 107 are unique annotated tags):

  [before]             [after]
  real    0m0.704s     real    0m0.596s
  user    0m0.600s     user    0m0.496s
  sys     0m0.096s     sys     0m0.092s

This shows only a 15% speedup (mostly because it has fewer
actual tags to parse), but a larger absolute value (100ms,
which isn't a lot compared to a real fetch, but this
advertisement happens on every fetch, even if the client is
just finding out they are completely up to date).

In truly pathological cases, where you have a large number
of unique annotated tags, it can make an even bigger
difference. Here are the numbers for a linux-2.6 repository
that has had every seventh commit tagged (so about 50K
tags):

  [before]             [after]
  real    0m0.443s     real    0m0.097s
  user    0m0.416s     user    0m0.080s
  sys     0m0.024s     sys     0m0.012s

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1648.diff
https://github.com/git/git/commit/e6dbffa67b8e4c463a8fe18e8599b8623d7f0485,05 Oct 2012,"peel_ref: do not return a null sha1

The idea of the peel_ref function is to dereference tag
objects recursively until we hit a non-tag, and return the
sha1. Conceptually, it should return 0 if it is successful
(and fill in the sha1), or -1 if there was nothing to peel.

However, the current behavior is much more confusing. For a
regular loose ref, the behavior is as described above. But
there is an optimization to reuse the peeled-ref value for a
ref that came from a packed-refs file. If we have such a
ref, we return its peeled value, even if that peeled value
is null (indicating that we know the ref definitely does
_not_ peel).

It might seem like such information is useful to the caller,
who would then know not to bother loading and trying to peel
the object. Except that they should not bother loading and
trying to peel the object _anyway_, because that fallback is
already handled by peel_ref. In other words, the whole point
of calling this function is that it handles those details
internally, and you either get a sha1, or you know that it
is not peel-able.

This patch catches the null sha1 case internally and
converts it into a -1 return value (i.e., there is nothing
to peel). This simplifies callers, which do not need to
bother checking themselves.

Two callers are worth noting:

  - in pack-objects, a comment indicates that there is a
    difference between non-peelable tags and unannotated
    tags. But that is not the case (before or after this
    patch). Whether you get a null sha1 has to do with
    internal details of how peel_ref operated.

  - in show-ref, if peel_ref returns a failure, the caller
    tries to decide whether to try peeling manually based on
    whether the REF_ISPACKED flag is set. But this doesn't
    make any sense. If the flag is set, that does not
    necessarily mean the ref came from a packed-refs file
    with the ""peeled"" extension. But it doesn't matter,
    because even if it didn't, there's no point in trying to
    peel it ourselves, as peel_ref would already have done
    so. In other words, the fallback peeling is guaranteed
    to fail.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1649.diff
https://github.com/git/git/commit/6468a4e5486d01e4da5ea8e8f2990523c3d18688,01 Oct 2012,"diff: diff.context configuration gives default to -U

Introduce a configuration variable diff.context that tells
Porcelain commands to use a non-default number of context
lines instead of 3 (the default).  With this variable, users
do not have to keep repeating ""git log -U8"" from the command
line; instead, it becomes sufficient to say ""git config
diff.context 8"" just once.

Signed-off-by: Jeff Muizelaar <jmuizelaar@mozilla.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/patch_1650.diff
https://github.com/git/git/commit/baa6378ff2106738c74213280904507d0ed8129c,29 Sep 2012,"log --grep-reflog: reject the option without -g

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1651.diff
https://github.com/git/git/commit/293ab15eea341ffe8705bac99136f2e3a286db5f,29 Sep 2012,"submodule: teach rm to remove submodules unless they contain a git directory

Currently using ""git rm"" on a submodule - populated or not - fails with
this error:

	fatal: git rm: '<submodule path>': Is a directory

This made sense in the past as there was no way to remove a submodule
without possibly removing unpushed parts of the submodule's history
contained in its .git directory too, so erroring out here protected the
user from possible loss of data.

But submodules cloned with a recent git version do not contain the .git
directory anymore, they use a gitfile to point to their git directory
which is safely stored inside the superproject's .git directory. The work
tree of these submodules can safely be removed without losing history, so
let's teach git to do so.

Using rm on an unpopulated submodule now removes the empty directory from
the work tree and the gitlink from the index. If the submodule's directory
is missing from the work tree, it will still be removed from the index.

Using rm on a populated submodule using a gitfile will apply the usual
checks for work tree modification adapted to submodules (unless forced).
For a submodule that means that the HEAD is the same as recorded in the
index, no tracked files are modified and no untracked files that aren't
ignored are present in the submodules work tree (ignored files are deemed
expendable and won't stop a submodule's work tree from being removed).
That logic has to be applied in all nested submodules too.

Using rm on a submodule which has its .git directory inside the work trees
top level directory will just error out like it did before to protect the
repository, even when forced. In the future git could either provide a
message informing the user to convert the submodule to use a gitfile or
even attempt to do the conversion itself, but that is not part of this
change.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/patch_1652.diff
https://github.com/git/git/commit/df995c7dd21bca9c61f9e5480fdfc1a015b4f1a0,28 Sep 2012,"silence git gc --auto --quiet output

When --quiet is requested, gc --auto should not display messages unless
there is an error.

Signed-off-by: Tobias Ulmer <tobiasu@tmux.org>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1653.diff
https://github.com/git/git/commit/88182bab001a9b9e9b0acd4b888693fa7c28ff4c,18 Sep 2012,"archive-zip: support UTF-8 paths

Set general purpose flag 11 if we encounter a path that contains
non-ASCII characters.  We assume that all paths are given as UTF-8; no
conversion is done.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1654.diff
https://github.com/git/git/commit/bb52d22ebbc6d8792d3a016e6e89fd6e39c7a39f,18 Sep 2012,"Revert ""archive-zip: support UTF-8 paths""

This reverts commit 2162bd8cc461d6c3a12ab81c5db5a44bf5ecabc3; a
two-patch series to replace it will follow.",27,data/crawl/git/patch_1655.diff
https://github.com/git/git/commit/2ce4fee8785f5c3cc7955fcc9dff8d516f8c95f7,17 Sep 2012,"Documentation: indent-with-non-tab uses ""equivalent tabs"" not 8

Update the documentation of the core.whitespace option
""indent-with-non-tab"" to correctly reflect that it catches the use of
spaces instead of the equivalent tabs, rather than a fixed number.

Signed-off-by: Wesley J. Landaker <wjl@icecavern.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1656.diff
https://github.com/git/git/commit/6bbfd1372d2aa5b856fc7fb1616cb06c982fcb83,17 Sep 2012,"git-p4: add submit --conflict option and config varaiable

This allows specifying what to do when a conflict
happens when applying a commit to p4, automating the
interactive prompt.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Acked-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_1657.diff
https://github.com/git/git/commit/449bb9cf1a0c42ddf6e9b9b6fd447eda12f9bc92,17 Sep 2012,"git p4: remove submit failure options [a]pply and [w]rite

When a patch failed to apply, these interactive options offered
to:

    1) apply the patch anyway, leaving reject (.rej) files around, or,
    2) write the patch to a file (patch.txt)

In both cases it suggested to invoke ""git p4 submit --continue"",
an unimplemented option.

While manually fixing the rejects and submitting the result might
work, there are many steps that must be done to the job properly:

    * apply patch
    * invoke p4 add and delete
    * change executable bits
    * p4 sync -f renamed/copied files
    * extract commit message into p4 change description and
      move Jobs lines out of description section
    * set changelist owner for --preserve-user

Plus the following manual sync/rebase will cause conflicts too,
which must be resolved once again.

Drop these workflows.  Instead users should do a sync/rebase in
git, fix the conflicts there, and do a clean ""git p4 submit"".

Signed-off-by: Pete Wyckoff <pw@padd.com>
Acked-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1658.diff
https://github.com/git/git/commit/67b0fe2eb6b70f530be347260c3792509a900feb,17 Sep 2012,"git p4: gracefully fail if some commits could not be applied

If a commit fails to apply cleanly to the p4 tree, an interactive
prompt asks what to do next.  In all cases (skip, apply, write),
the behavior after the prompt had a few problems.

Change it so that it does not claim erroneously that all commits
were applied.  Instead list the set of the patches under
consideration, and mark with an asterisk those that were
applied successfully.  Like this example:

    Applying 592f1f9 line5 in file1 will conflict
    ...
    Unfortunately applying the change failed!
    What do you want to do?
    [s]kip this patch / [a]pply the patch forcibly and with .rej files / [w]rite the patch to a file (patch.txt) s
    Skipping! Good luck with the next patches...
    //depot/file1#4 - was edit, reverted
    Applying b8db1c6 okay_commit_after_skip
    ...
    Change 6 submitted.
    Applied only the commits marked with '*':
      592f1f9 line5 in file1 will conflict
    * b8db1c6 okay_commit_after_skip

Do not try to sync and rebase unless all patches were applied.
If there was a conflict during the submit, there is sure to be one
at the rebase.  Let the user to do the sync and rebase manually.

This changes how a couple tets in t9810-git-p4-rcs.sh behave:

    - git p4 now does not leave files open and edited in the
      client

    - If a git commit contains a change to a file that was
      deleted in p4, the test used to check that the sync/rebase
      loop happened after the failure to apply the change.  Since
      now sync/rebase does not happen after failure, do not test
      this.  Normal rebase machinery, outside of git p4, will let
      rebase --skip work.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Acked-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",184,data/crawl/git/patch_1659.diff
https://github.com/git/git/commit/c336bc104c47cc9c2f7caf6bce468fe00a8f6850,15 Sep 2012,Sync with 1.7.11.7,161,data/crawl/git/patch_1660.diff
https://github.com/git/git/commit/a23e3138cb4ddd57e9cbb221e8cbfaf233111d2c,14 Sep 2012,"log: document use of multiple commit limiting options

Generally speaking, using more options will further narrow the
selection, but there are a few exceptions.  Document them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1661.diff
https://github.com/git/git/commit/17bf35a3c7b46df7131681bcc5bee5f12e1caec4,14 Sep 2012,"grep: teach --debug option to dump the parse tree

Our ""grep"" allows complex boolean expressions to be formed to match
each individual line with operators like --and, '(', ')' and --not.
Introduce the ""--debug"" option to show the parse tree to help people
who want to debug and enhance it.

Also ""log"" learns ""--grep-debug"" option to do the same.  The command
line parser to the log family is a lot more limited than the general
""git grep"" parser, but it has special handling for header matching
(e.g. ""--author""), and a parse tree is valuable when working on it.

Note that ""--all-match"" is *not* any individual node in the parse
tree.  It is an instruction to the evaluator to check all the nodes
in the top-level backbone have matched and reject a document as
non-matching otherwise.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_1662.diff
https://github.com/git/git/commit/218adaaaa064c436115dbcd5705a0e2c42e90a25,14 Sep 2012,"Revert diffstat back to English

This reverts the i18n part of 7f81463 (Use correct grammar in diffstat
summary line - 2012-02-01) but still keeps the grammar correctness for
English. It also reverts b354f11 (Fix tests under GETTEXT_POISON on
diffstat - 2012-08-27). The result is diffstat always in English
for all commands.

This helps stop users from accidentally sending localized
format-patch'd patches.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1663.diff
https://github.com/git/git/commit/b285668dd23952b96d716aac769c0ed1080d11d3,12 Sep 2012,"cmd_fetch_pack(): simplify computation of return value

Set the final value at initialization rather than initializing it then
sometimes changing it.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1664.diff
https://github.com/git/git/commit/4ba159996f6c1b0d6dd0a2a8bd9d6f5b342a4aa5,12 Sep 2012,"filter_refs(): delete matched refs from sought list

Remove any references that are available from the remote from the
sought list (rather than overwriting their names with NUL characters,
as previously).  Mark matching entries by writing a non-NULL pointer
to string_list_item::util during the iteration, then use
filter_string_list() later to filter out the entries that have been
marked.

Document this aspect of fetch_pack() in a comment in the header file.
(More documentation is obviously still needed.)

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1665.diff
https://github.com/git/git/commit/8bee93dd24731a1d2ef7c82d484a893cf68b6572,12 Sep 2012,"Change fetch_pack() and friends to take string_list arguments

Instead of juggling <nr_heads,heads> (sometimes called
<nr_match,match>), pass around the list of references to be sought in
a single string_list variable called ""sought"".  Future commits will
make more use of string_list functionality.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/patch_1666.diff
https://github.com/git/git/commit/f103f95b11d087f07c0c48bf784cd9197e18f203,12 Sep 2012,"string_list: add a function string_list_longest_prefix()

Add a function that finds the longest string from a string_list that
is a prefix of a given string.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",86,data/crawl/git/patch_1667.diff
https://github.com/git/git/commit/eb5f0c7a616531a024a582b72ca6d8775ff98d46,12 Sep 2012,"string_list: add a new function, filter_string_list()

This function allows entries that don't match a specified criterion to
be discarded from a string_list while preserving the order of the
remaining entries.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_1668.diff
https://github.com/git/git/commit/ff919f965d20d003e3882c70de667f41a86349ac,12 Sep 2012,"string_list: add two new functions for splitting strings

Add two new functions, string_list_split() and
string_list_split_in_place().  These split a string into a string_list
on a separator character.  The first makes copies of the substrings
(leaving the input string untouched) and the second splits the
original string in place, overwriting the separator characters with
NULs and referring to the original string's memory.

These functions are similar to the strbuf_split_*() functions except
that they work with the more powerful string_list interface.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",214,data/crawl/git/patch_1669.diff
https://github.com/git/git/commit/e0e2065f74500119d5e12524992273de362acd30,12 Sep 2012,"ll-merge: warn about inability to merge binary files only when we can't

When a path being merged is auto detected to be a binary file, we
warned ""Cannot merge binary files"" before switching to activate the
binary ll-merge driver.  When we are merging with the -Xours/theirs
option, however, we know what the ""clean"" merge result is, and the
warning is inappropriate.

In addition, when the path is explicitly marked as a binary file,
this warning was not issued, even though without -Xours/theirs, we
cannot cleanly automerge such a path, which was inconsistent.

Move the warning code from ll_xdl_merge() to ll_binary_merge(), and
issue the message only when we cannot cleanly automerge.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1670.diff
https://github.com/git/git/commit/9aeaab6811dce596b4f6141d76f5300359bfd009,11 Sep 2012,"blame: allow ""blame file"" in the middle of a conflicted merge

""git blame file"" has always meant ""find the origin of each line of
the file in the history leading to HEAD, oh by the way, blame the
lines that are modified locally to the working tree"".

This teaches ""git blame"" that during a conflicted merge, some
uncommitted changes may have come from the other history that is
being merged.

The verify_working_tree_path() function introduced in the previous
patch to notice a typo in the filename (primarily on case insensitive
filesystems) has been updated to allow a filename that does not exist
in HEAD (i.e. the tip of our history) as long as it exists one of the
commits being merged, so that a ""we deleted, the other side modified""
case tracks the history of the file in the history of the other side.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_1671.diff
https://github.com/git/git/commit/b6312c27a06f31625d915d44531d5e728ffd8d63,11 Sep 2012,"checkout: reorder option handling

checkout operates in three different modes. On top of that it tries to
be smart by guessing the branch name for switching. This results in
messy option handling code. This patch reorders it so that

 - cmd_checkout() is responsible for parsing, preparing input and
   determining mode

 - Code of each mode is in checkout_paths() and checkout_branch(),
   where sanity checks are performed

Another slight improvement is always print branch name (or commit
name) when printing errors related ot them. This helps catch the case
where an option is mistaken as branch/commit.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",189,data/crawl/git/patch_1672.diff
https://github.com/git/git/commit/1c88a6d17492b197b9b3298cbc34efa804928302,11 Sep 2012,"Sync with 1.7.11.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",961,data/crawl/git/patch_1673.diff
https://github.com/git/git/commit/ffcabccf5df17f12997feedafefeb5589b8c0511,11 Sep 2012,"blame $path: avoid getting fooled by case insensitive filesystems

""git blame MAKEFILE"" run in a history that has ""Makefile"" but not
MAKEFILE can get confused on a case insensitive filesystem, because
the check we run to see if there is a corresponding file in the
working tree with lstat(""MAKEFILE"") succeeds.  In addition to that
check, we have to make sure that the given path also exists in the
commit we start digging history from (i.e. ""HEAD"").

Note that this reveals the breakage in a test added in cd8ae20
(git-blame shouldn't crash if run in an unmerged tree, 2007-10-18),
which expects the entire merge-in-progress path to be blamed to the
working tree when it did not exist in our tree.  As it is clear in
the log message of that commit, the old breakage was that it was
causing an internal error and the fix was about avoiding it.

Just check that the command does not die an uncontrolled death.  For
this particular case, the blame should fail, as the history for the
file in that contents has not been committed yet at the point in the
test.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1674.diff
https://github.com/git/git/commit/43bc2302706af6a3bb9266eea1bcb7071c54c8c6,12 Jun 2012,"fast-export: report SHA-1 instead of gibberish when marks exist already

Cc: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Max Horn <max@quendi.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1675.diff
https://github.com/git/git/commit/a9c7a8a8bef30bbbf87e0d4c0e64d50c676f70ed,22 May 2012,"avoid segfault when reading header of malformed commits

If a commit object has a header line at the end of the
buffer that is missing its newline (or if it appears so
because the content on the header line contains a stray
NUL), then git will segfault.

Interestingly, this case is explicitly handled and we do
correctly scan the final line for the header we are looking
for. But if we don't find it, we will dereference NULL while
trying to look at the next line.

Git will never generate such a commit, but it's good to be
defensive. We could die() in such a case, but since it's
easy enough to handle it gracefully, let's just issue a
warning and continue (so you could still view such a commit
with ""git show"", though you might be missing headers after
the NUL).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1676.diff
https://github.com/git/git/commit/a5985237878481af5fbca349d0d1ad7d6b2d2bcb,08 May 2012,"status: fix null termination with ""-b""

When the ""-z"" option is given to status, we are supposed to
NUL-terminate each record. However, the ""-b"" code to show
the tracking branch did not respect this, and always ended
with a newline.

Signed-off-by: Jeff King <peff@peff.net>",16,data/crawl/git/patch_1677.diff
https://github.com/git/git/commit/e304aeba20d6f26cb95c022704440a36ef309075,01 May 2012,"t5541: test more combinations of --progress

Previously, we tested only that ""push --quiet --no-progress""
was silent. However, there are many other combinations that
were not tested:

  1. no options at all (but stderr as a tty)
  2. --no-progress by itself
  3. --quiet by itself
  4. --progress (when stderr not a tty)

These are tested elsewhere for general ""push"", but it is
important to test them separately for http. It follows a
very different code path than git://, and options must be
relayed across a remote helper to a separate send-pack
process (and in fact cases (1), (2), and (4) have all been
broken just for http at some point in the past).

We can drop the ""--quiet --no-progress"" test, as it is not
really interesting (it is already handled by testing them
separately in (2) and (3) above).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_1678.diff
https://github.com/git/git/commit/4c0a89fcde219df8db8fdb9635ef2ef40d002a6e,30 Apr 2012,"config: expand tildes in include.path variable

You can already use relative paths in include.path, which
means that including ""foo"" from your global ""~/.gitconfig""
will look in your home directory. However, you might want to
do something clever like putting ""~/.gitconfig-foo"" in a
specific repository's config file.

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1679.diff
https://github.com/git/git/commit/46e358158109200abde4de0a044a415c80c9bce5,27 Apr 2012,"t5570: fix forwarding of git-daemon messages via cat

The shell function that starts git-daemon wants to read the first line of
the daemon's stderr to ensure that it started correctly. Subsequent daemon
errors should be redirected to fd 4 (which is the terminal in verbose mode
or /dev/null in quiet mode). To that end the shell script used 'read' to
get the first line of output, and then 'cat &' to forward everything else
in a background process.

The problem is, that 'cat >&4 &' does not produce any output because the
shell redirects a background process's stdin to /dev/null. To have this
command invocation do anything useful, we have to redirect its stdin
explicitly (which overrides the /dev/null redirection).

The shell function connects the daemon's stderr to its consumers via a
FIFO. We cannot just do this:

   read line <git_daemon_output
   cat <git_daemon_output >&4 &

because after the first redirection the pipe is closed and the daemon
could receive SIGPIPE if it writes at the wrong moment. Therefore, we open
the readable end of the FIFO only once on fd 7 in the shell and dup from
there to the stdin of the two consumers.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1680.diff
https://github.com/git/git/commit/50bf38ac23957c31ae6f24c537e89fc16f1f5e30,26 Apr 2012,Sync with 1.7.9.7,59,data/crawl/git/patch_1681.diff
https://github.com/git/git/commit/b2bab5b338b30d45e338c8df3c15e6483d6bb11e,26 Apr 2012,Sync with 1.7.8.6,43,data/crawl/git/patch_1682.diff
https://github.com/git/git/commit/aba5f57c8fbb04abc5d286310969c1f767793930,26 Apr 2012,Sync with 1.7.7.7,18,data/crawl/git/patch_1683.diff
https://github.com/git/git/commit/97afde15f58728138f8e178b2acb7c72473f7d96,26 Apr 2012,"bundle: remove stray single-quote from error message

After running rev-list --boundary to retrieve the list of boundary
commits, ""git bundle create"" runs its own revision walk.  If in this
stage git encounters an unfamiliar option, it writes a message with an
unbalanced quotation mark:

	error: unrecognized argument: --foo'

Drop the stray quote to match the ""unrecognized argument: %s"" message
used elsewhere and save translators some work.

This is mostly a futureproofing measure: for now, the ""rev-list
--boundary"" command catches most strange arguments on its own and the
above message is not seen unless you try something esoteric like ""git
bundle create test.bundle --header HEAD"".

Reported-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1684.diff
https://github.com/git/git/commit/94a35b1aea88f1ad882cdd111e01410fb6d3eb46,26 Apr 2012,"config: reject bogus section names for --rename-section

You can feed junk to ""git config --rename-section"", which
will result in a config file that git will not even parse
(so you cannot fix it with git-config). We already have
syntactic sanity checks when setting a variable; let's do
the same for section names.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1685.diff
https://github.com/git/git/commit/234587fc87b156dc20461fc61353beeb904b43bc,18 Apr 2012,"gc: use argv-array for sub-commands

git-gc executes many sub-commands. The argument list for
some of these is constant, but for others we add more
arguments at runtime. The latter is implemented by allocating
a constant extra number of NULLs, and either using a custom
append function, or just referencing unused slots by number.

As of commit 7e52f56, which added two new arguments, it is
possible to exceed the constant number of slots for ""repack""
by running ""git gc --aggressive"", causing ""git gc"" to die.

This patch converts all of the static argv lists to use
argv-array. In addition to fixing the overflow caused by
7e52f56, it has a few advantages:

  1. We can drop the custom append function (which,
     incidentally, had an off-by-one error exacerbating the
     static limit).

  2. We can drop the ugly magic numbers used when adding
     arguments to ""prune"".

  3. Adding further arguments will be easier; you can just
     add new ""push"" calls without worrying about increasing
     any static limits.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1686.diff
https://github.com/git/git/commit/da79161db6dcb0643ab805e5cf78d7e4e34ce993,18 Apr 2012,"t4052: Test diff-stat output with minimum columns

When COLUMNS or --stat-width restricts the diff-stat width to near the
minimum, 26 columns, the graph_width value becomes negative. Consequently, the
graph part of diff-stat is not resized properly.

Signed-off-by: Lucian Poston <lucian.poston@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1687.diff
https://github.com/git/git/commit/b5d887f90692515a6e9c99e7683533d12df3ade2,18 Apr 2012,"builtin/merge.c: collect other parents early

Move the code around to populate remoteheads list early in the process
before any decision regarding twohead vs octopus and fast-forwardness is
made.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1688.diff
https://github.com/git/git/commit/36dcc02c52cb60c751338591dbb3bf4d9cf5a753,16 Apr 2012,"t4052: Adjust --graph --stat output for prefixes

Adjust tests to verify that the commit history graph tree is taken into
consideration when the diff stat output width is calculated.

Signed-off-by: Lucian Poston <lucian.poston@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1689.diff
https://github.com/git/git/commit/8c188c74e3f04ab75a42d43375a011f286cb1b66,16 Apr 2012,"t4052: test --stat output with --graph

Add tests which show that the width of the --prefix added by --graph
is not taken into consideration when the diff stat output width is
calculated.

Signed-off-by: Zbigniew Jędrzejewski-Szmek <zbyszek@in.waw.pl>
Signed-off-by: Lucian Poston <lucian.poston@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1690.diff
https://github.com/git/git/commit/2565b43bd2634ffd6bda06236d664288aeb8eb6a,15 Apr 2012,"properly keep track of current working directory

Various failure modes in the repository detection code path currently
quote the wrong directory in their error message. The working directory
is changed iteratively to the parent directory until a git repository is
found. If the working directory cannot be changed to the parent
directory for some reason, the detection gives up and prints an error
message. The error message should report the current working directory.

Instead of continually updating the 'cwd' variable, which is actually
used to remember the original working directory, the 'offset' variable
is used to keep track of the current working directory. At the point
where the affected error handling code is called, 'offset' already
points to the end of the parent of the working directory, rather than
the current working directory.

Fix this by explicitly using a variable 'offset_parent' and update
'offset' concurrently with the call to chdir.

In a similar fashion, the function get_device_or_die() would print the
original working directory in case of a failure, rather than the current
working directory. Fix this as well by making use of the 'offset'
variable.

Lastly, replace the phrase 'mount parent' with 'mount point'. The former
appears to be a typo.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1691.diff
https://github.com/git/git/commit/0aff719f489771c5e52259394d011c51317b118f,12 Apr 2012,"Fix httpd tests that broke when non-ff push advice changed

Signed-off-by: Christopher Tiwald <christiwald@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1692.diff
https://github.com/git/git/commit/3fb0459bc89bebb07e0603ce3ce92dbbc8a39ea4,11 Apr 2012,"tests: modernise style: more uses of test_line_count

Prefer:

  test_line_count <OP> COUNT FILE

over:

  test $(wc -l <FILE) <OP> COUNT

(or similar usages) in several tests.

Signed-off-by: Stefano Lattarini <stefano.lattarini@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",139,data/crawl/git/patch_1693.diff
https://github.com/git/git/commit/8150749da19a3e17623fc40320454afe89e04ca4,10 Apr 2012,"remote-curl: send the refs to fetch-pack on stdin

Now that we can throw an arbitrary number of refs at fetch-pack using
its --stdin option, we use it in the remote-curl helper to bypass the
OS command line length limit.

Signed-off-by: Ivan Todoroski <grnch@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1694.diff
https://github.com/git/git/commit/06454cb9a3bd2a34299779b147e388ff0f31c9f7,10 Apr 2012,"fast-import: tighten parsing of datarefs

The syntax for the use of mark references in fast-import
demands either a SP (space) or LF (end-of-line) after
a mark reference.  Fast-import does not complain when garbage
appears after a mark reference in some cases.

Factor out parsing of mark references and complain if
errant characters are found.  Also be a little more careful
when parsing ""inline"" and SHA1s, complaining if extra
characters appear or if the form of the dataref is unrecognized.

Buggy input can cause fast-import to produce the wrong output,
silently, without error.  This makes it difficult to track
down buggy generators of fast-import streams.  An example is
seen in the last line of this commit command:

    commit refs/heads/S2
    committer Name <name@example.com> 1112912893 -0400
    data <<COMMIT
    commit message
    COMMIT
    from :1M 100644 :103 hello.c

It is missing a newline and should be:

    [...]
    from :1
    M 100644 :103 hello.c

What fast-import does is to produce a commit with the same
contents for hello.c as in refs/heads/S2^.  What the buggy
program was expecting was the contents of blob :103.  While
the resulting commit graph looked correct, the contents in
some commits were wrong.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",397,data/crawl/git/patch_1695.diff
https://github.com/git/git/commit/135dadef712f0c4cf884940e751024c831937904,05 Apr 2012,"push: error out when the ""upstream"" semantics does not make sense

The user can say ""git push"" without specifying any refspec.  When using
the ""upstream"" semantics via the push.default configuration, the user
wants to update the ""upstream"" branch of the current branch, which is the
branch at a remote repository the current branch is set to integrate with,
with this command.

However, there are cases that such a ""git push"" that uses the ""upstream""
semantics does not make sense:

 - The current branch does not have branch.$name.remote configured.  By
   definition, ""git push"" that does not name where to push to will not
   know where to push to.  The user may explicitly say ""git push $there"",
   but again, by definition, no branch at repository $there is set to
   integrate with the current branch in this case and we wouldn't know
   which remote branch to update.

 - The current branch does have branch.$name.remote configured, but it
   does not specify branch.$name.merge that names what branch at the
   remote this branch integrates with. ""git push"" knows where to push in
   this case (or the user may explicitly say ""git push $remote"" to tell us
   where to push), but we do not know which remote branch to update.

 - The current branch does have its remote and upstream branch configured,
   but the user said ""git push $there"", where $there is not the remote
   named by ""branch.$name.remote"".  By definition, no branch at repository
   $there is set to integrate with the current branch in this case, and
   this push is not meant to update any branch at the remote repository
   $there.

The first two cases were already checked correctly, but the third case was
not checked and we ended up updating the branch named branch.$name.merge
at repository $there, which was totally bogus.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_1696.diff
https://github.com/git/git/commit/b2eda9bdfbacdd3bb52da2ebcb468415cf153940,30 Mar 2012,"commit: rephrase the error when user did not touch templated log message

When the user exited editor without editing the commit log template given
by ""git commit -t <template>"", the commit was aborted (correct) with an
error message that said ""due to empty commit message"" (incorrect).

This was because the original template support was done by piggybacking on
the check to detect an empty log message.  Split the codepaths into two
independent checks to clarify the error.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1697.diff
https://github.com/git/git/commit/d387868a7d29621e85e8c5c061d1f50586db74e5,20 Mar 2012,"merge: backport GIT_MERGE_AUTOEDIT support

Even though 1.7.9.x series does not open the editor by default
when merging in general, it does do so in one occassion: when
merging an annotated tag. And worse yet, there is no good way
for older scripts to decline this.

Backport the support for GIT_MERGE_AUTOEDIT environment variable
from 1.7.10 track to help those stuck on 1.7.9.x maintenance
track.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_1698.diff
https://github.com/git/git/commit/aea69a016f5bda67c359e43a3cbfabe923ad0f5a,20 Mar 2012,"log --graph --stat: three-dash separator should come after graph lines

Output from ""git log --graph --stat -p"" emits the three-dash separator
line before the graph that shows ancestry lines.  The separator should
come after the ancestry lines just like all the other output.

Signed-off-by: Lucian Poston <lucian.poston@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1699.diff
https://github.com/git/git/commit/f25950f3475e263ed6c8f0797bb058ba6444f85e,20 Mar 2012,"push: Provide situational hints for non-fast-forward errors

Pushing a non-fast-forward update to a remote repository will result in
an error, but the hint text doesn't provide the correct resolution in
every case. Give better resolution advice in three push scenarios:

1) If you push your current branch and it triggers a non-fast-forward
error, you should merge remote changes with 'git pull' before pushing
again.

2) If you push to a shared repository others push to, and your local
tracking branches are not kept up to date, the 'matching refs' default
will generate non-fast-forward errors on outdated branches. If this is
your workflow, the 'matching refs' default is not for you. Consider
setting the 'push.default' configuration variable to 'current' or
'upstream' to ensure only your current branch is pushed.

3) If you explicitly specify a ref that is not your current branch or
push matching branches with ':', you will generate a non-fast-forward
error if any pushed branch tip is out of date. You should checkout the
offending branch and merge remote changes before pushing again.

Teach transport.c to recognize these scenarios and configure push.c
to hint for them. If 'git push's default behavior changes or we
discover more scenarios, extension is easy. Standardize on the
advice API and add three new advice variables, 'pushNonFFCurrent',
'pushNonFFDefault', and 'pushNonFFMatching'. Setting any of these
to 'false' will disable their affiliated advice. Setting
'pushNonFastForward' to false will disable all three, thus preserving the
config option for users who already set it, but guaranteeing new
users won't disable push advice accidentally.

Based-on-patch-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Christopher Tiwald <christiwald@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/patch_1700.diff
https://github.com/git/git/commit/dabba590aa0e94a8deb6f0e827144697895bcfe8,15 Mar 2012,"notes-merge: Don't remove .git/NOTES_MERGE_WORKTREE; it may be the user's cwd

When a manual notes merge is committed or aborted, we need to remove the
temporary worktree at .git/NOTES_MERGE_WORKTREE. However, removing the
entire directory is not good if the user ran the 'git notes merge
--commit/--abort' from within that directory. On Windows, the directory
removal would simply fail, while on POSIX systems, users would suddenly
find themselves in an invalid current directory.

Therefore, instead of deleting the entire directory, we delete everything
_within_ the directory, and leave the (empty) directory in place.

This would cause a subsequent notes merge to abort, complaining about a
previous - unfinished - notes merge (due to the presence of
.git/NOTES_MERGE_WORKTREE), so we also need to adjust this check to only
trigger when .git/NOTES_MERGE_WORKTREE is non-empty.

Finally, adjust the t3310 manual notes merge testcases to correctly handle
the existence of an empty .git/NOTES_MERGE_WORKTREE directory.

Inspired-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1701.diff
https://github.com/git/git/commit/a0be62c100897573ef1575ec0d5e8b215e9dcafe,15 Mar 2012,"notes-merge: use opendir/readdir instead of using read_directory()

notes_merge_commit() only needs to list all entries (non-recursively)
under a directory, which can be easily accomplished with
opendir/readdir and would be more lightweight than read_directory().

read_directory() is designed to list paths inside a working
directory. Using it outside of its scope may lead to undesired effects.

Apparently, one of the undesired effects of read_directory() is that it
doesn't deal with being given absolute paths. This creates problems for
notes_merge_commit() when git_path() returns an absolute path, which
happens when the current working directory is in a subdirectory of the
.git directory.

Originally-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Updated-by:  Johan Herland <johan@herland.net>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_1702.diff
https://github.com/git/git/commit/77d1a520fb5b8ad8cc86228023f16a44b75c05d1,14 Mar 2012,"diff: refactor the word-diff setup from builtin_diff_cmd

Quite a chunk of builtin_diff_cmd deals with word-diff setup, defaults
and such.  This makes the function a bit hard to read, but is also
asymmetric because the corresponding teardown lives in free_diff_words_data
already.

Refactor into a new function init_diff_words_data.  For simplicity,
also shuffle around some functions it depends on.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_1703.diff
https://github.com/git/git/commit/8ba8fe049feb9207dd3543c339da955336e5df8f,28 Feb 2012,"rev-list: remove BISECT_SHOW_TRIED flag

Since c99f069 (bisect--helper: remove ""--next-vars"" option as it is
now useless - 2009-04-21), this flag has always been off. Remove the
flag and all related code.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1704.diff
https://github.com/git/git/commit/6c41e97557d94df7085e3c0cff247305c9401968,27 Feb 2012,"branch: don't assume the merge filter ref exists

print_ref_list looks up the merge_filter_ref and assumes that a valid
pointer is returned. When the object doesn't exist, it tries to
dereference a NULL pointer. This can be the case when git branch
--merged is given an argument that isn't a valid commit name.

Check whether the lookup returns a NULL pointer and die with an error
if it does. Add a test, while we're at it.

Signed-off-by: Carlos Martín Nieto <cmn@elego.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1705.diff
https://github.com/git/git/commit/543987bd475abae502939eb3db9c6879fde09c88,27 Feb 2012,"git-p4: fix submit regression with clientSpec and subdir clone

When the --use-client-spec is given to clone, and the clone
path is a subset of the full tree as specified in the client,
future submits will go to the wrong place.

Factor out getClientSpec() so both clone/sync and submit can
use it.  Introduce getClientRoot() that is needed for the client
spec case, and use it instead of p4Where().

Test the five possible submit behaviors (add, modify, rename,
copy, delete).

Reported-by: Laurent Charrière <lcharriere@promptu.com>
Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",228,data/crawl/git/patch_1706.diff
https://github.com/git/git/commit/31fd8d72f2eb82c2b6d8d450ee4e13a3925291c3,09 Feb 2012,"tag: do not show non-tag contents with ""-n""

""git tag -n"" did not check the type of the object it is reading the top n
lines from. At least, avoid showing the beginning of trees and blobs when
dealing with lightweight tags that point at them.

As the payload of a tag and a commit look similar in that they both start
with a header block, which is skipped for the purpose of ""-n"" output,
followed by human readable text, allow the message of commit objects to be
shown just like the contents of tag objects. This avoids regression for
people who have been using ""tag -n"" to show the log messages of commits
that are pointed at by lightweight tags.

Test script is from Jeff King.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1707.diff
https://github.com/git/git/commit/33e42de0d21a8365496e904235bd32fd4659300d,06 Feb 2012,"fsck: give accurate error message on empty loose object files

Since 3ba7a065527a (A loose object is not corrupt if it
cannot be read due to EMFILE), ""git fsck"" on a repository with an empty
loose object file complains with the error message

  fatal: failed to read object <sha1>: Invalid argument

This comes from a failure of mmap on this empty file, which sets errno to
EINVAL. Instead of calling xmmap on empty file, we display a clean error
message ourselves, and return a NULL pointer. The new message is

  error: object file .git/objects/09/<rest-of-sha1> is empty
  fatal: loose object <sha1> (stored in .git/objects/09/<rest-of-sha1>) is corrupt

The second line was already there before the regression in 3ba7a065527a,
and the first is an additional message, that should help diagnosing the
problem for the user.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1708.diff
https://github.com/git/git/commit/fb630e048c6efabe4d46b1b125fe7348062d38e6,06 Feb 2012,"tag: die when listing missing or corrupt objects

We don't usually bother looking at tagged objects at all
when listing. However, if ""-n"" is specified, we open the
objects to read the annotations of the tags.  If we fail to
read an object, or if the object has zero length, we simply
silently return.

The first case is an indication of a broken or corrupt repo,
and we should notify the user of the error.

The second case is OK to silently ignore; however, the
existing code leaked the buffer returned by read_sha1_file.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1709.diff
https://github.com/git/git/commit/ca51699961664890fdaabd276af539e6b3514053,06 Feb 2012,"tag: fix output of ""tag -n"" when errors occur

When ""git tag"" is instructed to print lines from annotated
tags via ""-n"", it first prints the tag name, then attempts
to parse and print the lines of the tag object, and then
finally adds a trailing newline.

If an error occurs, we return early from the function and
never print the newline, screwing up the output for the next
tag. Let's factor the line-printing into its own function so
we can manage the early returns better, and make sure that
we always terminate the line.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1710.diff
https://github.com/git/git/commit/c2d17ba3db0d2b14daf04e69a8c5ec73b023c1fe,06 Feb 2012,"branch --edit-description: protect against mistyped branch name

It is very easy to mistype the branch name when editing its description,
e.g.

	$ git checkout -b my-topic master
	: work work work
	: now we are at a good point to switch working something else
	$ git checkout master
	: ah, let's write it down before we forget what we were doing
	$ git branch --edit-description my-tpoic

The command does not notice that branch 'my-tpoic' does not exist.  It is
not lost (it becomes description of an unborn my-tpoic branch), but is not
very useful.  So detect such a case and error out to reduce the grief
factor from this common mistake.

This incidentally also errors out --edit-description when the HEAD points
at an unborn branch (immediately after ""init"", or ""checkout --orphan""),
because at that point, you do not even have any commit that is part of
your history and there is no point in describing how this particular
branch is different from the branch it forked off of, which is the useful
bit of information the branch description is designed to capture.

We may want to special case the unborn case later, but that is outside the
scope of this patch to prevent more common mistakes before 1.7.9 series
gains too much widespread use.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1711.diff
https://github.com/git/git/commit/7f814632f5d4d7af9f4225ece6039dbc44e03079,04 Feb 2012,"Use correct grammar in diffstat summary line

""git diff --stat"" and ""git apply --stat"" now learn to print the line
""%d files changed, %d insertions(+), %d deletions(-)"" in singular form
whenever applicable. ""0 insertions"" and ""0 deletions"" are also omitted
unless they are both zero.

This matches how versions of ""diffstat"" that are not prehistoric produced
their output, and also makes this line translatable.

[jc: with help from Thomas Dickey in archaeology of ""diffstat""]
[jc: squashed Jonathan's updates to illustrations in tutorials and a test]

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",286,data/crawl/git/patch_1712.diff
https://github.com/git/git/commit/84d72733fc8cb90ac7fef04bb114da1e14d8b147,03 Feb 2012,"prompt: fall back to terminal if askpass fails

The current askpass code simply dies if calling an askpass
helper fails. Worse, in some failure modes it doesn't even
print an error (if start_command fails, then it prints its
own error; if reading fails, we print an error; but if the
command exits non-zero, finish_command fails and we print
nothing!).

Let's be more kind to the user by printing an error message
when askpass doesn't work out, and then falling back to the
terminal (which also may fail, of course, but we die already
there with a nice message).

While we're at it, let's clean up the existing error
messages a bit.  Now that our prompts are very long and
contain quotes and colons themselves, our error messages are
hard to read.

So the new failure modes look like:

  [before, with a terminal]
  $ GIT_ASKPASS=false git push
  $ echo $?
  128

  [before, with no terminal, and we must give up]
  $ setsid git push
  fatal: could not read 'Password for 'https://peff@github.com': ': No such device or address

  [after, with a terminal]
  $ GIT_ASKPASS=false git push
  error: unable to read askpass response from 'false'
  Password for 'https://peff@github.com':

  [after, with no terminal, and we must give up]
  $ GIT_ASKPASS=false setsid git push
  error: unable to read askpass response from 'false'
  fatal: could not read Password for 'https://peff@github.com': No such device or address

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1713.diff
https://github.com/git/git/commit/8f24a6323ece9be1bf1a04b4b5856112438337f2,02 Feb 2012,"convert git-grep to use grep_source interface

The grep_source interface (as opposed to grep_buffer) will
eventually gives us a richer interface for telling the
low-level grep code about our buffers. Eventually this will
lead to things like better binary-file handling. For now, it
lets us drop a lot of now-redundant code.

The conversion is mostly straight-forward. One thing to note
is that the memory ownership rules for ""struct grep_source""
are different than the ""struct work_item"" found here (the
former will copy things like the filename, rather than
taking ownership). Therefore you will also see some slight
tweaking of when filename buffers are released.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_1714.diff
https://github.com/git/git/commit/e1327023ea22c3bf57e7d28596da356043f073fc,02 Feb 2012,"grep: refactor the concept of ""grep source"" into an object

The main interface to the low-level grep code is
grep_buffer, which takes a pointer to a buffer and a size.
This is convenient and flexible (we use it to grep commit
bodies, files on disk, and blobs by sha1), but it makes it
hard to pass extra information about what we are grepping
(either for correctness, like overriding binary
auto-detection, or for optimizations, like lazily loading
blob contents).

Instead, let's encapsulate the idea of a ""grep source"",
including the buffer, its size, and where the data is coming
from. This is similar to the diff_filespec structure used by
the diff code (unsurprising, since future patches will
implement some of the same optimizations found there).

The diffstat is slightly scarier than the actual patch
content. Most of the modified lines are simply replacing
access to raw variables with their counterparts that are now
in a ""struct grep_source"". Most of the added lines were
taken from builtin/grep.c, which partially abstracted the
idea of grep sources (for file vs sha1 sources).

Instead of dropping the now-redundant code, this patch
leaves builtin/grep.c using the traditional grep_buffer
interface (which now wraps the grep_source interface). That
makes it easy to test that there is no change of behavior
(yet).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/patch_1715.diff
https://github.com/git/git/commit/95099731bf2c79ccf5870655e36caa4215f0ced0,01 Feb 2012,"sha1_file.c: move the core logic of find_pack_entry() into fill_pack_entry()

The new helper function implements the logic to find the offset for the
object in one pack and fill a pack_entry structure. The next patch will
restructure the loop and will call the helper from two places.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Acked-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_1716.diff
https://github.com/git/git/commit/0f544ee897ac2cc760f29d3568cc4295ca69fd1f,12 Jan 2012,"archive: re-allow HEAD:Documentation on a remote invocation

The tightening done in (ee27ca4a: archive: don't let remote clients
get unreachable commits, 2011-11-17) went too far and disallowed
HEAD:Documentation as it would try to find ""HEAD:Documentation"" as a
ref.

Only DWIM the ""HEAD"" part to see if it exists as a ref. Once we're
sure that we've been given a valid ref, we follow the normal code
path. This still disallows attempts to access commits which are not
branch tips.

Signed-off-by: Carlos Martín Nieto <cmn@elego.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1717.diff
https://github.com/git/git/commit/8ec6c8d79567a71ca3c6f1ec73eb453d371b1ade,10 Jan 2012,"credential-cache: report more daemon connection errors

Originally, this code remained relatively silent when we
failed to connect to the cache. The idea was that it was
simply a cache, and we didn't want to bother the user with
temporary failures (the worst case is that we would simply
ask their password again).

However, if you have a configuration failure or other
problem, it is helpful for the daemon to report those
problems. Git will happily ignore the failed error code, but
the extra information to stderr can help the user diagnose
the problem.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1718.diff
https://github.com/git/git/commit/1eb10f4091931d6b89ff10edad63ce9c01ed17fd,10 Jan 2012,"unix-socket: handle long socket pathnames

On many systems, the sockaddr_un.sun_path field is quite
small. Even on Linux, it is only 108 characters. A user of
the credential-cache daemon can easily surpass this,
especially if their home directory is in a deep directory
tree (since the default location expands ~/.git-credentials).

We can hack around this in the unix-socket.[ch] code by
doing a chdir() to the enclosing directory, feeding the
relative basename to the socket functions, and then
restoring the working directory.

This introduces several new possible error cases for
creating a socket, including an irrecoverable one in the
case that we can't restore the working directory. In the
case of the credential-cache code, we could perhaps get away
with simply chdir()-ing to the socket directory and never
coming back. However, I'd rather do it at the lower level
for a few reasons:

  1. It keeps the hackery behind an opaque interface instead
     of polluting the main program logic.

  2. A hack in credential-cache won't help any unix-socket
     users who come along later.

  3. The chdir trickery isn't that likely to fail (basically
     it's only a problem if your cwd is missing or goes away
     while you're running).  And because we only enable the
     hack when we get a too-long name, it can only fail in
     cases that would have failed under the previous code
     anyway.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1719.diff
https://github.com/git/git/commit/98c2924cfa84a7f30b17636bd5632e53a0fa002e,08 Jan 2012,"credentials: unable to connect to cache daemon

Error out if we just spawned the daemon and yet we cannot connect.

And always release the string buffer.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1720.diff
https://github.com/git/git/commit/c207e34f7733df04342e1c0f449f6d3cae501e33,08 Jan 2012,"fix push --quiet: add 'quiet' capability to receive-pack

Currently, git push --quiet produces some non-error output, e.g.:

 $ git push --quiet
 Unpacking objects: 100% (3/3), done.

This fixes a bug reported for the fedora git package:

 https://bugzilla.redhat.com/show_bug.cgi?id=725593

Reported-by: Jesse Keating <jkeating@redhat.com>
Cc: Todd Zullinger <tmz@pobox.com>

Commit 90a6c7d4 (propagate --quiet to send-pack/receive-pack)
introduced the --quiet option to receive-pack and made send-pack
pass that option. Older versions of receive-pack do not recognize
the option, however, and terminate immediately. The commit was
therefore reverted.

This change instead adds a 'quiet' capability to receive-pack,
which is a backwards compatible.

In addition, this fixes push --quiet via http: A verbosity of 0
means quiet for remote helpers.

Reported-by: Tobias Ulmer <tobiasu@tmux.org>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1721.diff
https://github.com/git/git/commit/c6b3ec41e2efdd9e05118c2e99ad70f0e0629873,05 Jan 2012,"log-tree.c: small refactor in show_signature()

The next patch needs to show the result of signature verification on a
mergetag extended header in a way similar to how embedded signature for
the commit object itself is shown. Separate out the logic to go through
the message lines and show them in the ""error"" color (highlighted) or the
""correct"" color (dim).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1722.diff
https://github.com/git/git/commit/e7622ce8c4c3d5c0a596ace7fb34afe0d1e273ef,04 Jan 2012,"Catch invalid --depth option passed to clone or fetch

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1723.diff
https://github.com/git/git/commit/96890f4c428ed62cf52c11aba5773d364a8d6234,04 Jan 2012,"write first for-merge ref to FETCH_HEAD first

The FETCH_HEAD refname is supposed to refer to the ref that was fetched
and should be merged. However all fetched refs are written to
.git/FETCH_HEAD in an arbitrary order, and resolve_ref_unsafe simply
takes the first ref as the FETCH_HEAD, which is often the wrong one,
when other branches were also fetched.

The solution is to write the for-merge ref(s) to FETCH_HEAD first.
Then, unless --append is used, the FETCH_HEAD refname behaves as intended.
If the user uses --append, they presumably are doing so in order to
preserve the old FETCH_HEAD.

While we are at it, update an old example in the read-tree documentation
that implied that each entry in FETCH_HEAD only has the object name, which
is not true for quite a while.

[jc: adjusted tests]

Signed-off-by: Joey Hess <joey@kitenet.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",216,data/crawl/git/patch_1724.diff
https://github.com/git/git/commit/ecb7cf98a7d02e943ce44b083639c75011f3d8ec,03 Jan 2012,"git-p4: rewrite view handling

The old code was not very complete or robust.  Redo it.

This new code should be useful for a few possible additions
in the future:

    - support for * and %%n wildcards
    - allowing ... inside paths
    - representing branch specs (not just client specs)
    - tracking changes to views

Mark the remaining 12 tests in t9809 as fixed.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",359,data/crawl/git/patch_1725.diff
https://github.com/git/git/commit/c700b684cf879f80d5e9e918210475b02339fc29,03 Jan 2012,"git-p4: test client view handling

Test many aspects of processing p4 client views with the
git-p4 option --use-client-spec.  16 out of 22 tests are
currently broken.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/patch_1726.diff
https://github.com/git/git/commit/28755dbaa5213032b2da202652c214a9f94ff853,27 Dec 2011,"git-p4: document and test submit options

Clarify there is a -M option, but no -C.  These are both
configurable through variables.

Explain that the allowSubmit variable takes a comma-separated
list of branch names.

Catch earlier an invalid branch name given as an argument to
""git p4 clone"".

Test option --origin, variable allowSubmit, and explicit master
branch name.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_1727.diff
https://github.com/git/git/commit/58c8bc7c1aa0c7cf71c524cc4531a19ef72ea706,27 Dec 2011,"git-p4: honor --changesfile option and test

When an explicit list of changes is given, it makes no sense to
use @all or @3,5 or any of the other p4 revision specifiers.
Make the code notice when this happens, instead of just ignoring
--changesfile.  Test it.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1728.diff
https://github.com/git/git/commit/ab1900a36ef7fcfe872ff9d0803f9442e356c2f0,21 Dec 2011,"Appease Sun Studio by renaming ""tmpfile""

On Solaris the system headers define the ""tmpfile"" name, which'll
cause Git compiled with Sun Studio 12 Update 1 to whine about us
redefining the name:

    ""pack-write.c"", line 76: warning: name redefined by pragma redefine_extname declared static: tmpfile     (E_PRAGMA_REDEFINE_STATIC)
    ""sha1_file.c"", line 2455: warning: name redefined by pragma redefine_extname declared static: tmpfile    (E_PRAGMA_REDEFINE_STATIC)
    ""fast-import.c"", line 858: warning: name redefined by pragma redefine_extname declared static: tmpfile   (E_PRAGMA_REDEFINE_STATIC)
    ""builtin/index-pack.c"", line 175: warning: name redefined by pragma redefine_extname declared static: tmpfile    (E_PRAGMA_REDEFINE_STATIC)

Just renaming the ""tmpfile"" variable to ""tmp_file"" in the relevant
places is the easiest way to fix this.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1729.diff
https://github.com/git/git/commit/97f261b1e7f1af54aed700e61cdb8af74dbd2459,21 Dec 2011,"builtin/init-db.c: eliminate -Wformat warning on Solaris

On Solaris systems we'd warn about an implicit cast of mode_t when we
printed things out with the %d format. We'd get this warning under GCC
4.6.0 with Solaris headers:

    builtin/init-db.c: In function ‘separate_git_dir’:
    builtin/init-db.c:354:4: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘mode_t’ [-Wformat]

We've been doing this ever since v1.7.4.1-296-gb57fb80. Just work
around this by adding an explicit cast.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1730.diff
https://github.com/git/git/commit/03f94ae9f909952ed5a78917ab319a312889354b,18 Dec 2011,Update jk/maint-strbuf-missing-init to builtin/ rename,173371,data/crawl/git/patch_1731.diff
https://github.com/git/git/commit/9e1313648d4c0ee1bab0ee3d7ed22553bd5bf87c,15 Dec 2011,"revert: simplify getting commit subject in format_todo()

format_todo() calls get_message(), but uses only the subject line of
the commit message.  As a minor optimization, save work and
unnecessary memory allocations by using find_commit_subject() instead.
Also, remove the unnecessary check on cur->item->buffer: the
lookup_commit_reference() call in parse_insn_line() has already made
sure of this.

Suggested-by: Jonathan Nieder <jrnieder@gmail.com>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1732.diff
https://github.com/git/git/commit/37576c14439a4dfa43bec5a5c953fea1cc436bbf,15 Dec 2011,"commit_tree(): refuse commit messages that contain NULs

Current implementation sees NUL as terminator. If users give a message
with NUL byte in it (e.g. editor set to save as UTF-16), the new commit
message will have NULs. However following operations (displaying or
amending a commit for example) will not keep anything after the first NUL.

Stop user right when they do this. If NUL is added by mistake, they have
their chance to fix. Otherwise, log messages will no longer be text ""git
log"" and friends would grok.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1733.diff
https://github.com/git/git/commit/6b3c4c05475d206fafd650d8d27c82a8b051ac30,15 Dec 2011,"merge: abort if fails to commit

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1734.diff
https://github.com/git/git/commit/96ec7b1e708863d0cd6b8e72a986d6f0a1bb64db,13 Dec 2011,"Convert resolve_ref+xstrdup to new resolve_refdup function

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_1735.diff
https://github.com/git/git/commit/34961d30dae69b00a8a5aabd568fb87f376ebb87,13 Dec 2011,"contrib: add credential helper for OS X Keychain

With this installed in your $PATH, you can store
git-over-http passwords in your keychain by doing:

  git config credential.helper osxkeychain

The code is based in large part on the work of Jay Soffian,
who wrote the helper originally for the initial, unpublished
version of the credential helper protocol.

This version will pass t0303 if you do:

  GIT_TEST_CREDENTIAL_HELPER=osxkeychain \
  GIT_TEST_CREDENTIAL_HELPER_SETUP=""export HOME=$HOME"" \
  ./t0303-credential-external.sh

The ""HOME"" setup is unfortunately necessary. The test
scripts set HOME to the trash directory, but this causes the
keychain API to complain.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",188,data/crawl/git/patch_1736.diff
https://github.com/git/git/commit/71e1b4b6bf7f274f0b3bf45e7325c04abb405b8a,13 Dec 2011,"credentials: add ""store"" helper

This is like ""cache"", except that we actually put the
credentials on disk. This can be terribly insecure, of
course, but we do what we can to protect them by filesystem
permissions, and we warn the user in the documentation.

This is not unlike using .netrc to store entries, but it's a
little more user-friendly. Instead of putting credentials in
place ahead of time, we transparently store them after
prompting the user for them once.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",248,data/crawl/git/patch_1737.diff
https://github.com/git/git/commit/21aeafceda2382d26bfa73a98ba45a937d65d77a,13 Dec 2011,"add generic terminal prompt function

When we need to prompt the user for input interactively, we
want to access their terminal directly. We can't rely on
stdio because it may be connected to pipes or files, rather
than the terminal. Instead, we use ""getpass()"", because it
abstracts the idea of prompting and reading from the
terminal.  However, it has some problems:

  1. It never echoes the typed characters, which makes it OK
     for passwords but annoying for other input (like usernames).

  2. Some implementations of getpass() have an extremely
     small input buffer (e.g., Solaris 8 is reported to
     support only 8 characters).

  3. Some implementations of getpass() will fall back to
     reading from stdin (e.g., glibc). We explicitly don't
     want this, because our stdin may be connected to a pipe
     speaking a particular protocol, and reading will
     disrupt the protocol flow (e.g., the remote-curl
     helper).

  4. Some implementations of getpass() turn off signals, so
     that hitting ""^C"" on the terminal does not break out of
     the password prompt. This can be a mild annoyance.

Instead, let's provide an abstract ""git_terminal_prompt""
function that addresses these concerns. This patch includes
an implementation based on /dev/tty, enabled by setting
HAVE_DEV_TTY. The fallback is to use getpass() as before.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_1738.diff
https://github.com/git/git/commit/1cb0134f3414be187cc3eb98e9740aeeb07dcb16,13 Dec 2011,"refactor git_getpass into generic prompt function

This will allow callers to specify more options (e.g.,
leaving echo on). The original git_getpass becomes a slim
wrapper around the new function.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1739.diff
https://github.com/git/git/commit/d3c58b83aee2007ca76dc5d1242c09b6f7989c76,13 Dec 2011,"move git_getpass to its own source file

This is currently in connect.c, but really has nothing to
do with the git protocol itself. Let's make a new source
file all about prompting the user, which will make it
cleaner to refactor.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_1740.diff
https://github.com/git/git/commit/b8ffedca6f9e1043956ba611ae52bea449779456,12 Dec 2011,"grep: load funcname patterns for -W

git-grep avoids loading the funcname patterns unless they are needed.
ba8ea74 (grep: add option to show whole function as context,
2011-08-01) forgot to extend this test also to the new funcbody
feature.  Do so.

The catch is that we also have to disable threading when using
userdiff, as explained in grep_threads_ok().  So we must be careful to
introduce the same test there.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1741.diff
https://github.com/git/git/commit/534376ca04d524b99d69a30bdcf5e70ac8062aee,12 Dec 2011,"mv: be quiet about overwriting

When a user asks us to force a mv and overwrite the
destination, we print a warning. However, since a typical
use would be:

  $ git mv one two
  fatal: destination exists, source=one, destination=two
  $ git mv -f one two
  warning: overwriting 'two'

this warning is just noise. We already know we're
overwriting; that's why we gave -f!

This patch silences the warning unless ""--verbose"" is given.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1742.diff
https://github.com/git/git/commit/cd40b05d13676a41fc68807c351d0de07eb4c270,12 Dec 2011,"mv: improve overwrite warning

When we try to ""git mv"" over an existing file, the error
message is fairly informative:

  $ git mv one two
  fatal: destination exists, source=one, destination=two

When the user forces the overwrite, we give a warning:

  $ git mv -f one two
  warning: destination exists; will overwrite!

This is less informative, but still sufficient in the simple
rename case, as there is only one rename happening.

But when moving files from one directory to another, it
becomes useless:

  $ mkdir three
  $ touch one two three/one
  $ git add .
  $ git mv one two three
  fatal: destination exists, source=one, destination=three/one
  $ git mv -f one two three
  warning: destination exists; will overwrite!

The first message is helpful, but the second one gives us no
clue about what was overwritten. Let's mention the name of
the destination file:

  $ git mv -f one two three
  warning: overwriting 'three/one'

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1743.diff
https://github.com/git/git/commit/7acaaac275a1d338f7b2540779b7ea60f3f0667c,12 Dec 2011,"revert: allow single-pick in the middle of cherry-pick sequence

After messing up a difficult conflict resolution in the middle of a
cherry-pick sequence, it can be useful to be able to

	git checkout HEAD . && git cherry-pick that-one-commit

to restart the conflict resolution. The current code however errors out
saying that another cherry-pick is already in progress.

Suggested-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1744.diff
https://github.com/git/git/commit/093a309136c38eca0ea2dd5da3c68b483443d113,12 Dec 2011,"revert: allow cherry-pick --continue to commit before resuming

When ""git cherry-pick ..bar"" encounters conflicts, permit the operator
to use cherry-pick --continue after resolving them as a shortcut for
""git commit && git cherry-pick --continue"" to record the resolution
and carry on with the rest of the sequence.

This improves the analogy with ""git rebase"" (in olden days --continue
was the way to preserve authorship when a rebase encountered
conflicts) and fits well with a general UI goal of making ""git cmd
--continue"" save humans the trouble of deciding what to do next.

Example: after encountering a conflict from running ""git cherry-pick
foo bar baz"":

	CONFLICT (content): Merge conflict in main.c
	error: could not apply f78a8d98c... bar!
	hint: after resolving the conflicts, mark the corrected paths
	hint: with 'git add <paths>' or 'git rm <paths>'
	hint: and commit the result with 'git commit'

We edit main.c to resolve the conflict, mark it acceptable with ""git
add main.c"", and can run ""cherry-pick --continue"" to resume the
sequence.

	$ git cherry-pick --continue
	[editor opens to confirm commit message]
	[master 78c8a8c98] bar!
	 1 files changed, 1 insertions(+), 1 deletions(-)
	[master 87ca8798c] baz!
	 1 files changed, 1 insertions(+), 1 deletions(-)

This is done for both codepaths to pick multiple commits and a single
commit.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",162,data/crawl/git/patch_1745.diff
https://github.com/git/git/commit/1df9bf46d656970d0db254cb7faab0d0505802e0,12 Dec 2011,"revert: give --continue handling its own function

This makes pick_revisions() a little shorter and easier to read
straight through.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1746.diff
https://github.com/git/git/commit/77471646d3d87691b4bcf11682945e6ccc27f9e3,12 Dec 2011,"mv: make non-directory destination error more clear

If you try to ""git mv"" multiple files onto another
non-directory file, you confusingly get the ""usage"" message:

  $ touch one two three
  $ git add .
  $ git mv one two three
  usage: git mv [options] <source>... <destination>
  [...]

From the user's perspective, that makes no sense. They just
gave parameters that exactly match that usage!

This behavior dates back to the original C version of ""git
mv"", which had a usage message like:

  usage: git mv (<source> <destination> | <source>...  <destination>)

This was slightly less confusing, because it at least
mentions that there are two ways to invoke (but it still
isn't clear why what the user provided doesn't work).

Instead, let's show an error message like:

  $ git mv one two three
  fatal: destination 'three' is not a directory

We could leave the usage message in place, too, but it
doesn't actually help here. It contains no hints that there
are two forms, nor that multi-file form requires that the
endpoint be a directory. So it just becomes useless noise
that distracts from the real error.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1747.diff
https://github.com/git/git/commit/b0626608ea80e636faaa030a35200d8e47be5564,12 Dec 2011,"Pass a (ref_cache *) to the resolve_gitlink_*() helper functions

And remove some redundant arguments from resolve_gitlink_packed_ref().

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_1748.diff
https://github.com/git/git/commit/202a56a92414a2142cd92f0c3fa89bfb29149388,12 Dec 2011,"is_dup_ref(): extract function from sort_ref_array()

Giving the function a name makes the code easier to understand.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_1749.diff
https://github.com/git/git/commit/19b68b1e632ba989dc62d0956b7fd06978347370,12 Dec 2011,"is_refname_available(): remove the ""quiet"" argument

quiet was always set to 0, so get rid of it.  Add a function docstring
for good measure.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1750.diff
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/patch_1751.diff
https://github.com/git/git/commit/e2770979fec968a25ac21e34f9082bc17a71a780,12 Dec 2011,"credentials: add ""cache"" helper

If you access repositories over smart-http using http
authentication, then it can be annoying to have git ask you
for your password repeatedly. We cache credentials in
memory, of course, but git is composed of many small
programs. Having to input your password for each one can be
frustrating.

This patch introduces a credential helper that will cache
passwords in memory for a short period of time.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",817,data/crawl/git/patch_1752.diff
https://github.com/git/git/commit/abca927dbef2c310056b8a1a8be5561212b3243a,12 Dec 2011,"introduce credentials API

There are a few places in git that need to get a username
and password credential from the user; the most notable one
is HTTP authentication for smart-http pushing.

Right now the only choices for providing credentials are to
put them plaintext into your ~/.netrc, or to have git prompt
you (either on the terminal or via an askpass program). The
former is not very secure, and the latter is not very
convenient.

Unfortunately, there is no ""always best"" solution for
password management. The details will depend on the tradeoff
you want between security and convenience, as well as how
git can integrate with other security systems (e.g., many
operating systems provide a keychain or password wallet for
single sign-on).

This patch provides an abstract notion of credentials as a
data item, and provides three basic operations:

  - fill (i.e., acquire from external storage or from the
    user)

  - approve (mark a credential as ""working"" for further
    storage)

  - reject (mark a credential as ""not working"", so it can
    be removed from storage)

These operations can be backed by external helper processes
that interact with system- or user-specific secure storage.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",773,data/crawl/git/patch_1753.diff
https://github.com/git/git/commit/5914f2d057c259668695bccab8e9bec3a4bead53,10 Dec 2011,"fetch: create status table using strbuf

When we fetch from a remote, we print a status table like:

  From url
   * [new branch]   foo -> origin/foo

We create this table in a static buffer using sprintf. If
the remote refnames are long, they can overflow this buffer
and smash the stack.

Instead, let's use a strbuf to build the string.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_1754.diff
https://github.com/git/git/commit/5743350f696745a48dfe7976c98dc8eb5c842d72,26 May 2011,"rerere.c: diagnose a corrupt MERGE_RR when hitting EOF between TAB and '\0'

If we reach EOF after the SHA1-then-TAB, yet before the NUL that
terminates each file name, we would fill the file name buffer with \255
bytes resulting from the repeatedly-failing fgetc (returns EOF/-1) and
ultimately complain about ""filename too long"", because no NUL was
encountered.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1755.diff
https://github.com/git/git/commit/06eb708f331f0829081f4f3fb3c465eaae345deb,24 May 2011,"config: always parse GIT_CONFIG_PARAMETERS during git_config

Previously we parsed GIT_CONFIG_PARAMETERS lazily into a
linked list, and then checked that list during future
invocations of git_config. However, that ignores the fact
that the environment variable could change during our run
(e.g., because we parse more ""-c"" as part of an alias).

Instead, let's just re-parse the environment variable each
time. It's generally not very big, and it's no more work
than parsing the config files, anyway.

As a bonus, we can ditch all of the linked list storage code
entirely, making the code much simpler.

The test unfortunately still does not pass because of an
unrelated bug in handle_options.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_1756.diff
https://github.com/git/git/commit/fad2652673247203014e2c57622a5ffe0eb5ad93,16 May 2011,"revert: allow reverting a root commit

Although it is probably an uncommon operation, there is no
reason to disallow it, as it works just fine. It is the
reverse of a cherry-pick of a root commit, which is already
allowed.

We do have to tweak one check on whether we have a merge
commit, which assumed we had at least one parent.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1757.diff
https://github.com/git/git/commit/0d8fc3efc65df74a2b39b3f9798861a1b2055b62,06 May 2011,"merge: make branch.<name>.mergeoptions correctly override merge.<option>

The parsing of the additional command line parameters supplied to
the branch.<name>.mergeoptions configuration variable was implemented
at the wrong stage.  If any merge-related variable came after we read
branch.<name>.mergeoptions, the earlier value was overwritten.

We should first read all the merge.* configuration, override them by
reading from branch.<name>.mergeoptions and then finally read from
the command line.

This patch should fix it, even though I now strongly suspect that
branch.<name>.mergeoptions that gives a single command line that
needs to be parsed was likely to be an ill-conceived idea to begin
with.  Sigh...

Helped-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1758.diff
https://github.com/git/git/commit/58fdef0cff5bcf10f2621d00466b33a5b8a39bf7,01 May 2011,"Look for password in both CVS and CVSNT password files.

In conn, if password is not passed on command line, look for a password
entry in both the CVS password file and the CVSNT password file.  If only
one file is found and the requested repository is in that file, or if both
files are found but the requested repository is found in only one file, use
the password from the single file containing the repository entry.  If both
files are found and the requested repository is found in both files, then
produce an error message.

The CVS password file separates tokens with a space character, while
the CVSNT password file separates tokens with an equal (=) character.
Add a sub find_password_entry that accepts the password file name
and a delimiter to eliminate code duplication.

Signed-off-by: Guy Rouillier <guyr@burntmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_1759.diff
https://github.com/git/git/commit/36c10e6d7543f9f35295df0113b0c250ad421eb4,15 Apr 2011,"Documentation: publicize hints for sending patches with GMail

The hints in SubmittingPatches about stopping GMail from clobbering
patches are widely useful both as examples of ""git send-email"" and
""git imap-send"" usage.

Move the documentation to the appropriate places.

While at it, don't encourage storing passwords in config files.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_1760.diff
https://github.com/git/git/commit/e0d48279d5a96bc02edac72c1d28fc38aed37c15,15 Apr 2011,"Documentation: describe the format of messages with inline patches

Add a DISCUSSION section to the ""git format-patch"" manual to encourage
people to send patches in a form that can be applied by ""git am""
automatically.  There are two such forms:

 1. The default form in which most metadata goes in the mail header
    and the message body starts with the patch description;

 2. The snipsnip form in which a message starts with pertinent
    discussion and ends with a patch after a ""scissors"" mark.

The example requires QP encoding in the ""Subject:"" header intended for
the mailer to give the reader a chance to reflect on that, rather than
being startled by it later.  By contrast, in-body ""From:"" and
""Subject:"" lines should be human-readable and not QP encoded.

Inspired-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Improved-by: Junio C Hamano <gitster@pobox.com>
Improved-by: Drew Northup <drew.northup@maine.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_1761.diff
https://github.com/git/git/commit/c9ea118e75b1b8f8cc744e372576b4cf63594e0d,14 Apr 2011,"i18n: use test_i18n{cmp,grep} in t7600, t7607, t7611 and t7811

Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_1762.diff
https://github.com/git/git/commit/cc6658e7b4baad88ea30b0a1c8d4857f6253c2b0,14 Apr 2011,"i18n: use test_i18n{grep,cmp} in t7508

Two tests looked for ""[Uu]sage"" in the output, but we cannot expect the
l10n to use that phrase.  Mark them with test_i18ngrep so that in later
versions we can test truly localized versions with the same tests, not
just GETTEXT_POISON that happens to keep the original string in the
output.

Merge a few tests that were artificially split into ""do"" and ""test output
under C_LOCALE_OUTPUT"" in the original i18n patches back.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",222,data/crawl/git/patch_1763.diff
https://github.com/git/git/commit/7a23d2d28a1fcdb9e52101eacaa87af02a148b21,14 Apr 2011,"i18n: use test_i18ngrep in t7506

Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1764.diff
https://github.com/git/git/commit/476cca692c76a9a771fd59e62a2ce76cf4092e87,13 Apr 2011,"i18n: use test_i18ncmp and test_i18ngrep in t7102 and t7110

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1765.diff
https://github.com/git/git/commit/d3bd0425b21b84fbc554b24b4315bfcbc2d7a5bf,13 Apr 2011,"i18n: use test_i18ngrep in lib-httpd and t2019

Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1766.diff
https://github.com/git/git/commit/c36f94123bb16d412fc0f7c49d655bfe4259c4b6,13 Apr 2011,"i18n: use test_i18ncmp in t1200 and t2200

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1767.diff
https://github.com/git/git/commit/ff7f089ed1064b6a10e958bf405f828226262424,13 Apr 2011,"mergetool: Teach about submodules

When the index has conflicted submodules, mergetool used to mildly
clobber the module, renaming it to mymodule.BACKUP.nnnn, then failing to
copy it non-recursively.

Recognize submodules and offer a resolution instead:

  Submodule merge conflict for 'Shared':
    {local}: submodule commit ad9f12e3e6205381bf2163a793d1e596a9e211d0
    {remote}: submodule commit f5893fb70ec5646efcd9aa643c5136753ac89253
  Use (l)ocal or (r)emote, or (a)bort?

Selecting a commit will stage it, but not update the submodule (as git
does had there been no conflict). Type changes are also supported,
should the path be a submodule on one side, and a file, symlink,
directory, or deleted on the other.

Signed-off-by: Jonathon Mah <me@JonathonMah.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",380,data/crawl/git/patch_1768.diff
https://github.com/git/git/commit/2c050e017a5e7727a7448620d872d46ba22675e9,12 Apr 2011,"i18n: mark init-db messages for translation

Mark the init-db messages that were added in v1.7.5-rc1~16^2 (init,
clone: support --separate-git-dir for .git file) by Nguyễn Thái Ngọc
Duy for translation.

This requires splitting up the tests that the patch added so that
certain parts of them can be skipped unless the C_LOCALE_OUTPUT
prerequisite is satisfied.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1769.diff
https://github.com/git/git/commit/20fc73e3b0bb2b115d88e54514db13ffaf11b025,12 Apr 2011,"i18n: mark checkout --detach messages for translation

Mark messages added in v1.7.5-rc0~117^2~2 (checkout: introduce
--detach synonym for ""git checkout foo^{commit}"") by Junio C Hamano
for translation.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1770.diff
https://github.com/git/git/commit/d3e1ddfd390da8ed6fd275821802eec64c2f74ac,12 Apr 2011,"i18n: mark clone nonexistent repository message for translation

Mark the ""repository '%s' does not exist"" message added in
v1.7.4.2~21^2 (clone: die when trying to clone missing local path) by
Jeff King for translation.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1771.diff
https://github.com/git/git/commit/f68f1801726eb64d139dfb7d7858a470aef595f2,12 Apr 2011,"i18n: mark merge CHERRY_PICK_HEAD messages for translation

Mark CHERRY_PICK_HEAD related messages in builtin/merge.c that were
added in v1.7.5-rc0~88^2~2 (Introduce CHERRY_PICK_HEAD) by Jay Soffian
for translation.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1772.diff
https://github.com/git/git/commit/c7f426d4bc38982fe4e64bf3ed4673ddb03c3374,12 Apr 2011,"i18n: mark merge ""upstream"" messages for translation

Mark the merge messages that were added in v1.7.5-rc1~17^2 (merge:
merge with the default upstream branch without argument) by Junio C
Hamano for translation.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1773.diff
https://github.com/git/git/commit/650ed9db74188654656afcd38b1d7672161cb90b,12 Apr 2011,"i18n: mark merge ""Could not read from"" message for translation

Mark the ""Could not read from '%s'"" message that was added to
builtin/merge.c in v1.7.4.2~25^2 (merge: honor prepare-commit-msg
hook) by Jay Soffian for translation.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1774.diff
https://github.com/git/git/commit/b9612197798dbfc622c766e83b1fe4c20bffae5c,06 Apr 2011,"upload-pack: start pack-objects before async rev-list

In a pthread-enabled version of upload-pack, there's a race condition
that can cause a deadlock on the fflush(NULL) we call from run-command.

What happens is this:

  1. Upload-pack is informed we are doing a shallow clone.

  2. We call start_async() to spawn a thread that will generate rev-list
     results to feed to pack-objects. It gets a file descriptor to a
     pipe which will eventually hook to pack-objects.

  3. The rev-list thread uses fdopen to create a new output stream
     around the fd we gave it, called pack_pipe.

  4. The thread writes results to pack_pipe. Outside of our control,
     libc is doing locking on the stream. We keep writing until the OS
     pipe buffer is full, and then we block in write(), still holding
     the lock.

  5. The main thread now uses start_command to spawn pack-objects.
     Before forking, it calls fflush(NULL) to flush every stdio output
     buffer. It blocks trying to get the lock on pack_pipe.

And we have a deadlock. The thread will block until somebody starts
reading from the pipe. But nobody will read from the pipe until we
finish flushing to the pipe.

To fix this, we swap the start order: we start the
pack-objects reader first, and then the rev-list writer
after. Thus the problematic fflush(NULL) happens before we
even open the new file descriptor (and even if it didn't,
flushing should no longer block, as the reader at the end of
the pipe is now active).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1775.diff
https://github.com/git/git/commit/34df9abb41289e475befd05754e518f44f921ef0,03 Apr 2011,"t1506: factor out test for ""Did you mean...""

With the current code, it's a ""'""'""'"" jungle, and we test only 1 line of
the 2 line response. Factor out and test both.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_1776.diff
https://github.com/git/git/commit/099024861021830f9d4c7db4c64c844bf9d5ebd9,30 Mar 2011,"remote: deprecate --mirror

The configuration created by plain --mirror is dangerous and
useless, and we now have --mirror=fetch and --mirror=push to
replace it. Let's warn the user.

One alternative to this is to try to guess which type the
user wants. In a non-bare repository, a fetch mirror doesn't
make much sense, since it would overwrite local commits. But
in a bare repository, you might use either type, or even
both (e.g., if you are acting as an intermediate drop-point
across two disconnected networks).

So rather than try for complex heuristics, let's keep it
simple. The user knows what they're trying to do, so let
them tell us.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1777.diff
https://github.com/git/git/commit/a9f5a3558dcf83440c60ae5a2e2b56c80d65bb0b,30 Mar 2011,"remote: separate the concept of push and fetch mirrors

git-remote currently has one option, ""--mirror"", which sets
up mirror configuration which can be used for either
fetching or pushing. It looks like this:

  [remote ""mirror""]
    url = wherever
    fetch = +refs/*:refs/*
    mirror = true

However, a remote like this can be dangerous and confusing.
Specifically:

  1. If you issue the wrong command, it can be devastating.
     You are not likely to ""push"" when you meant to ""fetch"",
     but ""git remote update"" will try to fetch it, even if
     you intended the remote only for pushing. In either
     case, the results can be quite destructive. An
     unintended push will overwrite or delete remote refs,
     and an unintended fetch can overwrite local branches.

  2. The tracking setup code can produce confusing results.
     The fetch refspec above means that ""git checkout -b new
     master"" will consider refs/heads/master to come from
     the remote ""mirror"", even if you only ever intend to
     push to the mirror. It will set up the ""new"" branch to
     track mirror's refs/heads/master.

  3. The push code tries to opportunistically update
     tracking branches. If you ""git push mirror foo:bar"",
     it will see that we are updating mirror's
     refs/heads/bar, which corresponds to our local
     refs/heads/bar, and will update our local branch.

To solve this, we split the concept into ""push mirrors"" and
""fetch mirrors"". Push mirrors set only remote.*.mirror,
solving (2) and (3), and making an accidental fetch write
only into FETCH_HEAD. Fetch mirrors set only the fetch
refspec, meaning an accidental push will not force-overwrite
or delete refs on the remote end.

The new syntax is ""--mirror=<fetch|push>"". For
compatibility, we keep ""--mirror"" as-is, setting up both
types simultaneously.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",148,data/crawl/git/patch_1778.diff
https://github.com/git/git/commit/13fc2c1877a50dde5ea43e2f37420ebfb2f7dad1,30 Mar 2011,"remote: disallow some nonsensical option combinations

It doesn't make sense to use ""-m"" on a mirror, since ""-m""
sets up the HEAD symref in the remotes namespace, but with
mirror, we are by definition not using a remotes namespace.

Similarly, it does not make much sense to specify refspecs
with --mirror. For a mirror you plan to push to, those
refspecs will be ignored. For a mirror you are fetching
from, there is no point in mirroring, since the refspec
specifies everything you want to grab.

There is one case where ""--mirror -t <X>"" would be useful.
Because <X> is used as-is in the refspec, and because we
append it to to refs/, you could mirror a subset of the
hierarchy by doing:

  git remote add --mirror -t 'tags/*'

But using anything besides a single branch as an argument to
""-t"" is not documented and only happens to work, so closing
it off is not a serious regression.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_1779.diff
https://github.com/git/git/commit/4e10cf9a17467c08754b36683c240fbab69156de,29 Mar 2011,"Revert two ""no-done"" reverts

Last night I had to make these two emergency reverts, but now we have a
better understanding of which part of the topic was broken, let's get rid
of the revert to fix it correctly.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1780.diff
https://github.com/git/git/commit/cf2ad8e64175bcf4b2bb693a9e4c0a89076111dd,29 Mar 2011,"enable ""no-done"" extension only when serving over smart-http

Do not advertise no-done capability when upload-pack is not serving over
smart-http, as there is no way for this server to know when it should stop
reading in-flight data from the client, even though it is necessary to
drain all the in-flight data in order to unblock the client.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Shawn O. Pearce <spearce@spearce.org>",7,data/crawl/git/patch_1781.diff
https://github.com/git/git/commit/07514c83c2b7e6de926ef758905e3f43b4de6bfa,29 Mar 2011,"Revert ""fetch-pack: Implement no-done capability""

This reverts commit 761ecf0bc7b6cddf311f00877c59e6381cdbdeea.",18,data/crawl/git/patch_1782.diff
https://github.com/git/git/commit/4793b7e86d007c492a76a5fae379ded97008e7fb,29 Mar 2011,"Revert ""upload-pack: Implement no-done capability""

This reverts 3e63b21 (upload-pack: Implement no-done capability,
2011-03-14).  Together with 761ecf0 (fetch-pack: Implement no-done
capability, 2011-03-14) it seems to make the fetch-pack process out of
sync and makes it keep talking long after upload-pack stopped listening to
it, terminating the process with SIGPIPE.",20,data/crawl/git/patch_1783.diff
https://github.com/git/git/commit/8cc299daf29c6726acada3ffad87c3fe2098aa02,28 Mar 2011,"vcs-svn: add missing cast to printf argument

gcc -m32 correctly warns:

 vcs-svn/fast_export.c: In function 'fast_export_commit':
 vcs-svn/fast_export.c:54:2: warning: format '%llu' expects
   argument of type 'long long unsigned int', but argument 2
   has type 'unsigned int' [-Wformat]

Fix it.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_1784.diff
https://github.com/git/git/commit/41e6b91f01bc9bb7e1679542a8cce9bd4252fd2e,27 Mar 2011,"vcs-svn: add missing cast to printf argument

gcc -m32 correctly warns:

 vcs-svn/fast_export.c: In function 'fast_export_commit':
 vcs-svn/fast_export.c:54:2: warning: format '%llu' expects
   argument of type 'long long unsigned int', but argument 2
   has type 'unsigned int' [-Wformat]

Fix it.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",3,data/crawl/git/patch_1785.diff
https://github.com/git/git/commit/195b7ca6f229455da61f9f6b6e56a6558fb0e8ee,26 Mar 2011,"vcs-svn: handle log message with embedded NUL

Pass the log message by strbuf instead of as a C-style string and use
fwrite instead of printf to write it to fast-import so embedded '\0'
bytes can be preserved.

Currently ""git log"" doesn't show the embedded NULs but ""git cat-file
commit"" can.

While at it, stop including system headers from repo_tree.h.  git
source files need to include git-compat-util.h (or cache.h or
builtin.h) sooner to ensure the appropriate feature test macros are
defined.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",107,data/crawl/git/patch_1786.diff
https://github.com/git/git/commit/4c3169b03ec567ac43edcfc08ffdab119e0ebe94,26 Mar 2011,"vcs-svn: avoid unnecessary copying of log message and author

Use strbuf_swap when storing the svn:log and svn:author properties, so
pointers to rather than the contents of buffers get copied.  The main
effect should be to make the code a little easier to read.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",20,data/crawl/git/patch_1787.diff
https://github.com/git/git/commit/7e2fe3a9fc816391b322ad9b3f2adf9342631db6,26 Mar 2011,"vcs-svn: remove buffer_read_string

All previous users of buffer_read_string have already been converted
to use the more intuitive buffer_read_binary, so remove the old API to
avoid some confusion.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",65,data/crawl/git/patch_1788.diff
https://github.com/git/git/commit/e7d04ee147dcbe6af1fa1d2147466696e2be31bc,26 Mar 2011,"vcs-svn: make reading of properties binary-safe

svn-fe errors out on revision 59151 of the ASF repository:

 fatal: invalid dump: unexpected end of file

The proximate cause is a property with an embedded NUL character.
Previously such anomalies were ignored but commit c9d1c8ba
(2010-12-28) introduced a check strlen(val) == len to avoid reading
uninitialized data when a property list ends early and unfortunately
this test does not distinguish between ""foo"" followed by EOF and the
string ""foo\0bar\0baz"".

Fix it by using buffer_read_binary to read to a strbuf and checking
the actual length read.  Most consumers of properties still use
C-style strings, so in practice an author or log message with embedded
NULs will be truncated, but a least this way svn-fe won't error out
(fixing the regression).

Reported-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",51,data/crawl/git/patch_1789.diff
https://github.com/git/git/commit/93e535a5b78c9861eca3e9371d1c3e5173c0ab02,24 Mar 2011,"merge: merge with the default upstream branch without argument

""git merge"" without specifying any commit is a no-op by default.

A new option merge.defaultupstream can be set to true to cause such an
invocation of the command to merge the upstream branches configured for
the current branch by using their last observed values stored in their
remote tracking branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_1790.diff
https://github.com/git/git/commit/c9d1c8ba059577e64fb2213cb0c5f3c4619c7519,22 Mar 2011,"vcs-svn: improve reporting of input errors

Catch input errors and exit early enough to print a reasonable
diagnosis based on errno.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",42,data/crawl/git/patch_1791.diff
https://github.com/git/git/commit/f31027c99cb2ec4eb7ad8d1ebc7f0e20fef4bd1d,22 Mar 2011,"diffcore-rename: fall back to -C when -C -C busts the rename limit

When there are too many paths in the project, the number of rename source
candidates ""git diff -C -C"" finds will exceed the rename detection limit,
and no inexact rename detection is performed.  We however could fall back
to ""git diff -C"" if the number of modified paths is sufficiently small.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/patch_1792.diff
https://github.com/git/git/commit/c2e86addb86689306b992065328ec52aa2479658,22 Mar 2011,"Fix sparse warnings

Fix warnings from 'make check'.

 - These files don't include 'builtin.h' causing sparse to complain that
   cmd_* isn't declared:

   builtin/clone.c:364, builtin/fetch-pack.c:797,
   builtin/fmt-merge-msg.c:34, builtin/hash-object.c:78,
   builtin/merge-index.c:69, builtin/merge-recursive.c:22
   builtin/merge-tree.c:341, builtin/mktag.c:156, builtin/notes.c:426
   builtin/notes.c:822, builtin/pack-redundant.c:596,
   builtin/pack-refs.c:10, builtin/patch-id.c:60, builtin/patch-id.c:149,
   builtin/remote.c:1512, builtin/remote-ext.c:240,
   builtin/remote-fd.c:53, builtin/reset.c:236, builtin/send-pack.c:384,
   builtin/unpack-file.c:25, builtin/var.c:75

 - These files have symbols which should be marked static since they're
   only file scope:

   submodule.c:12, diff.c:631, replace_object.c:92, submodule.c:13,
   submodule.c:14, trace.c:78, transport.c:195, transport-helper.c:79,
   unpack-trees.c:19, url.c:3, url.c:18, url.c:104, url.c:117, url.c:123,
   url.c:129, url.c:136, thread-utils.c:21, thread-utils.c:48

 - These files redeclare symbols to be different types:

   builtin/index-pack.c:210, parse-options.c:564, parse-options.c:571,
   usage.c:49, usage.c:58, usage.c:63, usage.c:72

 - These files use a literal integer 0 when they really should use a NULL
   pointer:

   daemon.c:663, fast-import.c:2942, imap-send.c:1072, notes-merge.c:362

While we're in the area, clean up some unused #includes in builtin files
(mostly exec_cmd.h).

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_1793.diff
https://github.com/git/git/commit/b57fb80a7d7d19102b31ab94a28ed43ea1ee07bb,20 Mar 2011,"init, clone: support --separate-git-dir for .git file

--separate-git-dir tells git to create git dir at the specified
location, instead of where it is supposed to be. A .git file that
points to that location will be put in place so that it appears normal
to repo discovery process.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",163,data/crawl/git/patch_1794.diff
https://github.com/git/git/commit/28bd70d811391be10c55ce4aee1b6ee991d7a86b,17 Mar 2011,"unbreak and eliminate NO_C99_FORMAT

In the spirit of v1.5.0.2~21 (Check for PRIuMAX rather than
NO_C99_FORMAT in fast-import.c, 2007-02-20), use PRIuMAX from
git-compat-util.h on all platforms instead of C99-specific formats
like %zu with dangerous fallbacks to %u or %lu.

So now C99-challenged platforms can build git without provoking
warnings or errors from printf, even if pointers do not have the same
size as an int or long.

The need for a fallback PRIuMAX is detected in git-compat-util.h with
""#ifndef PRIuMAX"".  So while at it, simplify the Makefile and configure
script by eliminating the NO_C99_FORMAT knob altogether.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_1795.diff
https://github.com/git/git/commit/31d713d069f6586c3b18aa721ccd668fa994219c,17 Mar 2011,"mktag: avoid %td in format string

Since v1.7.0-rc0~34 (make ""mktag"" a built-in, 2010-01-22), git mktag
uses the C99-style %td format to print ptrdiff_t values.  It falls
back to %d when NO_C99_FORMAT is set, on the assumption that pre-C99
systems probably are using 32-bit pointers.

But many modern systems are 64-bit and

 * sometimes one wants to test the NO_C99_FORMAT fallbacks using a
   modern development platform;
 * some platforms (I'm looking at you, msvc) have not gotten with the
   program and are still C89-only.

These ptrdiff_t values are offsets from the beginning of a buffer, so
a size_t or uintmax_t would work about as well.  Use the latter so we
can take advantage of the PRIuMAX fallback in git-compat-util.h, even
on C99-challenged systems with 64-bit pointers.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_1796.diff
https://github.com/git/git/commit/808a95dcad957ce00dc6fde7cf7f53ca32200c34,16 Mar 2011,"diff --submodule: split into bite-sized pieces

Introduce two functions:

 - prepare_submodule_summary prepares the revision walker
   to list changes in a submodule.  That is, it:

   * finds merge bases between the commits pointed to this
     path from before (""left"") and after (""right"") the change;
   * checks whether this is a fast-forward or fast-backward;
   * prepares a revision walk to list commits in the symmetric
     difference between the commits at each endpoint.

   It returns nonzero on error.

 - print_submodule_summary runs the revision walk and saves
   the result to a strbuf in --left-right format.

The goal is just readability.  No functional change intended.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Acked-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_1797.diff
https://github.com/git/git/commit/a3a32e7f083cdd3b8e68419d2f012b5561a9ccde,16 Mar 2011,"cherry: split off function to print output lines

Readers uninterested in the details of ""git cherry""'s output format
can see

	print_commit('-', commit, verbose, abbrev);

and ignore the details.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1798.diff
https://github.com/git/git/commit/3e63b21aced116badd30a279c479535449a63560,15 Mar 2011,"upload-pack: Implement no-done capability

If the client requests both multi_ack_detailed and no-done then
upload-pack is free to immediately send a PACK following its first
'ACK %s ready' message.  The upload-pack response actually winds
up being:

  ACK %s common
  ... (maybe more) ...
  ACK %s ready
  NAK
  ACK %s
  PACK.... the pack stream ....

For smart HTTP connections this saves one HTTP RPC, reducing
the overall latency for a trivial fetch.  For git:// and ssh://
a no-done option slightly reduces latency by removing one
server->client->server round-trip at the end of the common
ancestor negotiation.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1799.diff
https://github.com/git/git/commit/761ecf0bc7b6cddf311f00877c59e6381cdbdeea,15 Mar 2011,"fetch-pack: Implement no-done capability

If enabled on the connection ""multi_ack_detailed no-done"" as a
pair allows the remote upload-pack process to send a PACK down
to the client as soon as a ""ACK %s ready"" message was also sent.

Over git:// and ssh:// where a bi-directional stream is in place
this has very little difference over the classical version that
waits for the client to send a ""done\n"" line by itself.  It does
slightly reduce the latency involved to start the pack stream as
there is one less round-trip from client->server required.

Over smart HTTP this avoids needing to send a final RPC that has
all of the prior common objects.  Instead the server is able to
return a pack as soon as its ready to.  For many common users the
smart HTTP fetch is now just 2 requests: GET .../info/refs, and
a POST .../git-upload-pack to not only negotiate but also receive
the pack stream.  Only users who have more than 32 local unshared
commits with the remote will need additional requests to negotiate
a common merge base.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1800.diff
https://github.com/git/git/commit/49bee717f7080f99d3405682cc43ad525dde0973,15 Mar 2011,"upload-pack: More aggressively send 'ACK %s ready'

If a client is merely following the remote (and has not made any
new commits itself), all ""have %s"" lines sent by the client will be
common to the server.  As all lines are common upload-pack never
calls ok_to_give_up() and does not compute if it has a good cut
point in the commit graph.

Without this computation the following client is going to send all
tagged commits, as these were determined to be COMMON_REF during the
initial advertisement, but the client does not parse their history
to transitively pass the COMMON flag and empty its queue of commits.

For git.git with 339 commit tags, it takes clients 11 rounds of
negotation to fully send all tagged commits and exhaust its queue
of things to send as common.  This is pretty slow for a client that
has not done any local development activity.

Force computing ok_to_give_up() and send ""ACK %s ready"" at the end
of the current round if this round only contained common objects
and ok_to_give_up() was therefore not called.  This may allow the
client to break early, avoiding transmission of the COMMON_REFs.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1801.diff
https://github.com/git/git/commit/b1b47554ae889ca76b66349819c9b95a8be5f646,11 Mar 2011,"git-log: put space after commit mark

Currently, commit marks (left, right, boundary, cherry) are output right
before the commit sha1, which makes it difficult to copy sha1s. Sample
output for ""git log --oneline --cherry"":

=049c269 t6007: test rev-list --cherry

Change this to

= 049c269 t6007: test rev-list --cherry

which matches exactly the current output of ""git log --graph"".

Leave ""git rev-list"" output as is (no space) so that they do not break.

Adjust ""git-svn"" which uses ""git log --pretty=raw --boundary"".

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1802.diff
https://github.com/git/git/commit/ab8b53bbf1bd0cc078fe1f9772f9328fad59a203,10 Mar 2011,"i18n: git-shortlog basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1803.diff
https://github.com/git/git/commit/cb6aeb22ace0e20c19ba14fc4540e426a1a37880,10 Mar 2011,"i18n: git-revert split up ""could not revert/apply"" message

Split up the ""could not %s %s... %s"" message into ""could not revert
%s... %s"" and ""could not apply %s... %s"". This makes it easier for
translators to understand the message.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1804.diff
https://github.com/git/git/commit/b9c993e017715e07615df30091b0fe5f556df13d,10 Mar 2011,"i18n: git-revert literal ""me"" messages

Translate messages that use the `me' variable. These are all error
messages referencing the command name, so the name shouldn't be
translated.

Reported-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1805.diff
https://github.com/git/git/commit/d3ee177e5059c81e0e73be091741f60ebfbce520,10 Mar 2011,"i18n: git-revert ""Your local changes"" message

Translate the ""Your local changes [...]"" message without using the
`me' variable, instead split up the two messages so translators can
translate the whole messages as-is.

Reported-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1806.diff
https://github.com/git/git/commit/f30f71ce7aecd86823f7a2d93f56c212bac8f510,10 Mar 2011,"i18n: git-revert basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1807.diff
https://github.com/git/git/commit/e3bd758335ccb2d46ddde628bf391d5155f87730,10 Mar 2011,"i18n: git-notes GIT_NOTES_REWRITE_MODE error message

Use sprintf format for the error message that's displayed if
GIT_NOTES_REWRITE_MODE is invalid, and leave a note in a TRANSLATORS
comment indicating what the message means.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1808.diff
https://github.com/git/git/commit/caeba0ef153574d0240020228e0c48807b665a83,10 Mar 2011,"i18n: git-notes basic commands

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/patch_1809.diff
https://github.com/git/git/commit/f6908ae86e90a49c3346ba3097f7b80d070e38a3,10 Mar 2011,"i18n: git-gc ""Auto packing the repository"" message

Split up the ""Auto packing the repository"" message into quiet and
verbose variants to make translation easier.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1810.diff
https://github.com/git/git/commit/fea6128baec24fcfe9433a34a06bd9d6e6298bab,10 Mar 2011,"i18n: git-gc basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1811.diff
https://github.com/git/git/commit/e41f1cb36b71485715941c2abe67d3e184baf061,10 Mar 2011,"i18n: git-describe basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1812.diff
https://github.com/git/git/commit/a66f9b2afde8ae0d6bd8991e6a8f848904c8bdde,10 Mar 2011,"i18n: git-clean clean.requireForce messages

Split up the ""clean.requireForce set/defaults to true..."" die()
message to make it easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1813.diff
https://github.com/git/git/commit/2da57add287c9a5b26e348c35947d6de369e77da,10 Mar 2011,"i18n: git-clean basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_1814.diff
https://github.com/git/git/commit/c7c4efacf1ea100ac1cd5c2f33d1b6d342b39325,10 Mar 2011,"i18n: git-bundle basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1815.diff
https://github.com/git/git/commit/788a3755df6deadde49fd4bf4edf212b33f1363d,10 Mar 2011,"i18n: git-archive basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1816.diff
https://github.com/git/git/commit/b3b298afcbcb5cf5b497928fc9bcd17624112233,10 Mar 2011,"i18n: git-status ""Initial commit"" message

Gettextize the ""# Initial commit"" message. A test in t7501-commit.sh
explicitly checked for this message. Change it to skip under
GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1817.diff
https://github.com/git/git/commit/919a4ce0c110a22c00aa854aa16638786b143feb,10 Mar 2011,"i18n: git-status ""Changes to be committed"" message

Gettextize the ""# Changes to be committed:"" messages. Several tests
explicitly checked for this message. Change them to skip under
GETTEXT_POISON=YesPlease.

Since these tests didn't check for the rest of the git-status(1)
output this change has been split up from the ""git-status basic
messages"" patch.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1818.diff
https://github.com/git/git/commit/8ec9bc0dd5852e5468db576b0cba39f9179d4610,10 Mar 2011,"i18n: git-status ""nothing to commit"" messages

Gettextize the ""nothing to commit"" messages. Many tests explicitly
checked for this message. Change them to skip under
GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1819.diff
https://github.com/git/git/commit/355ec7a1303af862a76961603ea2a2a11a0d204c,10 Mar 2011,"i18n: git-status basic messages

Gettextize the most common git-status messages. Many tests checked for
these explicitly. Change them to skip under GETTEXT_POISON=YesPlease.

Some of the tests in t7508-status.sh needed to be split up when I
added C_LOCALE_OUTPUT to them, since parts of them affected later
tests (some of which aren't being skipped) indirectly.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",223,data/crawl/git/patch_1820.diff
https://github.com/git/git/commit/b32227e770f6c8ade19d340118a478f8b1a8659d,10 Mar 2011,"i18n: git-push ""prevent you from losing"" message

Gettextize the ""To prevent you from losing history"" message. A test in
lib-httpd.sh and another in t5541-http-push.sh explicitly checked for
this message. Change them to skip under GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1821.diff
https://github.com/git/git/commit/8352d29e00a307698a3438ce4c094827c6f5dcaf,10 Mar 2011,"i18n: git-push basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1822.diff
https://github.com/git/git/commit/d08ebf9972ec890bf1ebea802bb2590784a1199c,10 Mar 2011,"i18n: git-tag basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_1823.diff
https://github.com/git/git/commit/8b2a57b6c8711b7189184e4670d378d8418f7214,10 Mar 2011,"i18n: git-reset reset_type_names messages

Make the messages in git-reset that use the reset_type_names static
array to be translatable by marking the array items with N_() and
using _() later.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1824.diff
https://github.com/git/git/commit/b50a64e81875944985f84df9324c7624776d6cf8,10 Mar 2011,"i18n: git-reset basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1825.diff
https://github.com/git/git/commit/b9b537f7dcd90c125d4902e1eafebc8a151c6a05,10 Mar 2011,"i18n: git-rm basic messages

Make the basic git-mv messages translatable, but skip things like ""rm
'%s'\n"" and ""git rm '%s'\n"" for now.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1826.diff
https://github.com/git/git/commit/431b049e1bfcef5eb8165e4167b53f9717f8a526,10 Mar 2011,"i18n: git-mv basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1827.diff
https://github.com/git/git/commit/157efde10f34344f0970ca71f33dd5ae1c29b6f5,10 Mar 2011,"i18n: git-merge ""Wonderful"" message

Gettextize the ""Wonderful"" message. A test in t7600-merge.sh
explicitly checked for this message. Change it to skip under
GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1828.diff
https://github.com/git/git/commit/2ceb61e0a030eddd46cc62e4d9a0fbf2d16faad1,10 Mar 2011,"i18n: git-merge ""Updating %s..%s"" message

Gettextize the ""Updating %s..%s\n"" message. A test in
t1200-tutorial.sh explicitly checked for this message. Split it into
two tests to skip the test_cmp test under GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1829.diff
https://github.com/git/git/commit/bacec4784598ca35b9be7635cbb630ef59367b6b,10 Mar 2011,"i18n: git-merge basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/patch_1830.diff
https://github.com/git/git/commit/f338cb83a0328b9fe4ec37dff0d4dcc3b8f3cde9,10 Mar 2011,"i18n: git-log ""--OPT does not make sense"" messages

Gettextize the ""--name-only/--name-status/--check does not make sense""
messages. A test in t4014-format-patch.sh explicitly checked for these
messages. Change them to skip under GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1831.diff
https://github.com/git/git/commit/5c5f1d7ce116b945ad74b4ae67ae36a2ddeb610c,10 Mar 2011,"i18n: git-log basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1832.diff
https://github.com/git/git/commit/e4fe4ba57ae32a5a1334db4206412e12333754a3,10 Mar 2011,"i18n: git-grep ""--open-files-in-pager"" message

Gettextize the ""--open-files-in-pager only works on the worktree""
message. A test in t7811-grep-open.sh explicitly checked for this
message. Change it to skip under GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1833.diff
https://github.com/git/git/commit/2fc5f9f189512b82f2154658079e9c3889d4c136,10 Mar 2011,"i18n: git-grep basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_1834.diff
https://github.com/git/git/commit/502681cd7dcf87e067eba61da176388467606a2c,10 Mar 2011,"i18n: git-fetch formatting messages

Translate some of the formatting messages that appear on git-fetch
showing how branches/tags etc. were updated.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_1835.diff
https://github.com/git/git/commit/bd4a51fc254bbf492e08afab5a8853cf10c15fbe,10 Mar 2011,"i18n: git-fetch basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1836.diff
https://github.com/git/git/commit/54214529b5e47a9580747a152aa646132d1d7911,10 Mar 2011,"i18n: git-diff basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1837.diff
https://github.com/git/git/commit/fc88e316e7c628cf51fcc2fe732f34e2e6e15216,10 Mar 2011,"i18n: git-commit advice messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1838.diff
https://github.com/git/git/commit/9c227655b02c8f84e319a57bb8dd7cff63e3fbf8,10 Mar 2011,"i18n: git-commit ""middle of a merge"" message

Gettextize the ""You are in the middle of a merge -- cannot amend.""
message. Several tests in t7110-reset-merge.sh explicitly checked for
this message. Change them to skip under GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1839.diff
https://github.com/git/git/commit/8a6179bcb6022c433ac87a01393155d64166eb7b,10 Mar 2011,"i18n: git-commit basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/patch_1840.diff
https://github.com/git/git/commit/08eaa4be0332e6f9f8732fbb99272b4bbf3ea3de,10 Mar 2011,"i18n: git-checkout ""Switched to a .. branch"" message

Split up the ""Switched to and reset branch"" and ""Switched to a new
branch"" messages to make them easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1841.diff
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1842.diff
https://github.com/git/git/commit/e8a8a4d76b1a609b343a174212655c5e07e00b50,10 Mar 2011,"i18n: git-checkout basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_1843.diff
https://github.com/git/git/commit/8af42b0f7773bff2529f6c8990bb3d872b8270d5,10 Mar 2011,"i18n: git-branch ""Deleted branch [...]"" message

Gettextize the ""Deleted %sbranch %s (was %s).\n"" messages. test in
t3200-branch.sh explicitly checked for this message. Change it to skip
under GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1844.diff
https://github.com/git/git/commit/49df4b0298ea87ec737221c35ac74f8e6ee108c9,10 Mar 2011,"i18n: git-branch basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_1845.diff
https://github.com/git/git/commit/475c73eb8c65fe7b4cb55f05aeb9eee547e4a359,10 Mar 2011,"i18n: git-add ""remove '%s'"" message

Make the ""remove '%s'"" message translatable. It's displayed under `git
add -u --verbose`. Also skip the corresponding test when output is not
in the C locale.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1846.diff
https://github.com/git/git/commit/48168851cffcd14e01d3a10473a02ca4b4479402,10 Mar 2011,"i18n: git-add ""did not match any files"" message

Make the ""did not match any files"" message translatable, and skip the
test that checks for it when the C_LOCALE_OUTPUT prereq is not
present.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1847.diff
https://github.com/git/git/commit/439fb8296d0a08c09653a45c0f44757c6b9c99b2,10 Mar 2011,"i18n: git-add ""The following paths are ignored"" message

The tests t2204 (.gitignore) and t3700 (add) explicitly check for
these messages, so while at it, split each relevant test into a part
that just checks ""git add""'s exit status and a part that checks
porcelain output.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_1848.diff
https://github.com/git/git/commit/990ac4be0ad68e78c042d4caa532c410991420f5,10 Mar 2011,"i18n: git-add basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1849.diff
https://github.com/git/git/commit/5cde59895f6c12fa479154ab111644de40f6a05a,10 Mar 2011,"i18n: git-clone ""Cloning into"" message

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1850.diff
https://github.com/git/git/commit/3781fcce05c16dcb0714c817ecfabbe8e1ffe62c,10 Mar 2011,"i18n: git-clone ""Cloning into"" message

Separate the ""Cloning into %s"" and ""Cloning into bare repository %s""
messages to make them easier to translate. No noticeable change
intended.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1851.diff
https://github.com/git/git/commit/e84d7b74c6e59fac20209c4759791f39afc0e25b,10 Mar 2011,"i18n: git-clone basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1852.diff
https://github.com/git/git/commit/3e5dd7e960953ad03790309c48406a8aa43cb026,10 Mar 2011,"i18n: git-init ""Initialized [...] repository"" message

These messages could benefit from splitting up.  An earlier version of
this patch began like this:

    const char *reinit_shared   = _(""Reinitialized existing shared Git repository in %s\n"");
    const char *init_shared     = _(""Initialized empty shared Git repository in %s\n"");
    const char *reinit_noshared = _(""Reinitialized existing Git repository in %s\n"");
    const char *init_noshared   = _(""Initialized empty Git repository in %s\n"");

But in the first round of gettextization I'm aiming to keep code
changes to a minimum for ease of review.  So just add a comment
explaining to translators how the sprintf format gets used so they
can cope for now if the language's grammar allows.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1853.diff
https://github.com/git/git/commit/33e92e47c5b3eaa66d375cb94c3cfd1a0946bf93,10 Mar 2011,"i18n: git-init basic messages

Change the user visible strings in init-db.c to use gettext
localizations. This only converts messages which needed to be changed
from ""foo"" to _(""foo""), and didn't need any TRANSLATORS comments.

I haven't marked the messages in init_db_usage or init_db_options for
translation, since that would require additional changes in
parse-options.c. Those can be done later.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_1854.diff
https://github.com/git/git/commit/94f605ec0798a1f494023b72cd0d1f10b7a264f7,09 Mar 2011,"log --cherry: a synonym

At the porcelain level, because by definition there are many more contributors
than integrators, it makes sense to give a handy short-hand for --right-only
used with --cherry-mark and --no-merges.  Make it so.

In other words, this provides ""git cherry with rev-list interface"".

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1855.diff
https://github.com/git/git/commit/adbbb31e0d3b4cc7845c6d23d21c00da51025208,09 Mar 2011,"revision.c: introduce --cherry-mark

for marking those commits which ""--cherry-pick"" would drop.
The marker for those commits is '=' because '-' denotes a boundary
commit already, even though 'git cherry' uses it.

Nonequivalent commits are denoted '+' unless '--left-right' is used.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_1856.diff
https://github.com/git/git/commit/1df2d656cc442dc057e30b6fb130967e5ae19654,09 Mar 2011,"rev-list/log: factor out revision mark generation

Currently, we have identical code for generating revision marks ('<',
'>', '-') in 5 places.

Factor out the code to a single function get_revision_mark() for easier
maintenance and extensibility.

Note that the check for !!revs in graph.c (which gets removed
effectively by this patch) is superfluous.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_1857.diff
https://github.com/git/git/commit/88a21979c5717e3f37b9691e90b6dbf2b94c751a,09 Mar 2011,"fetch/pull: recurse into submodules when necessary

To be able to access all commits of populated submodules referenced by the
superproject it is sufficient to only then let ""git fetch"" recurse into a
submodule when the new commits fetched in the superproject record new
commits for it. Having these commits present is extremely useful when
using the ""--submodule"" option to ""git diff"" (which is what ""git gui"" and
""gitk"" do since 1.6.6), as all submodule commits needed for creating a
descriptive output can be accessed. Also merging submodule commits (added
in 1.7.3) depends on the submodule commits in question being present to
work. Last but not least this enables disconnected operation when using
submodules, as all commits necessary for a successful ""git submodule
update -N"" will have been fetched automatically. So we choose this mode as
the default for fetch and pull.

Before a new or changed ref from upstream is updated in update_local_ref()
""git rev-list <new-sha1> --not --branches --remotes"" is used to determine
all newly fetched commits. These are then walked and diffed against their
parent(s) to see if a submodule has been changed. If that is the case, its
path is stored to be fetched after the superproject fetch is completed.

Using the ""--recurse-submodules"" or the ""--no-recurse-submodules"" option
disables the examination of the fetched refs because the result will be
ignored anyway.

There is currently no infrastructure for storing deleted and new
submodules in the .git directory of the superproject. That's why fetch and
pull for now only fetch submodules that are already checked out and are
not renamed.

In t7403 the ""--no-recurse-submodules"" argument had to be added to ""git
pull"" to avoid failure because of the moved upstream submodule repo.

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/patch_1858.diff
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_1859.diff
https://github.com/git/git/commit/37f3012ff2a1a23dc7f8d390fde959d292fcc4e8,08 Mar 2011,"commit: refer to commit template as s->fp

Instead of maintaining a local variable for it, use s->fp to keep
track of where the commit message template should be written.

This prepares us to take advantage of the status_printf functions,
which use a struct wt_status instead of a FILE pointer to determine
where to send their output.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_1860.diff
https://github.com/git/git/commit/becbdae82bb8bb193c2f1e9d8b32a60bdef8b0e4,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_1861.diff
https://github.com/git/git/commit/06796607ef557e8913f1797cca3c98ce4844c36c,08 Mar 2011,"trace: refactor to support multiple env variables

Right now you turn all tracing off and on with GIT_TRACE. To
support new types of tracing without forcing the user to see
all of them, we will soon support turning each tracing area
on with GIT_TRACE_*.

This patch lays the groundwork by providing an interface
which does not assume GIT_TRACE. However, we still maintain
the trace_printf interface so that existing callers do not
need to be refactored.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_1862.diff
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_1863.diff
https://github.com/git/git/commit/3c624a30fa3f047d401e08cf019d39b3a79095ea,08 Mar 2011,"commit: refer to commit template as s->fp

Instead of maintaining a local variable for it, use s->fp to keep
track of where the commit message template should be written.

This prepares us to take advantage of the status_printf functions,
which use a struct wt_status instead of a FILE pointer to determine
where to send their output.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_1864.diff
https://github.com/git/git/commit/e0335fcdad28da578904bb33fcf1dfbcdf172599,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_1865.diff
https://github.com/git/git/commit/e75316de5340e0ba3ac75937c59fa2c9d6ab48d7,07 Mar 2011,"vcs-svn: simplify repo_modify_path and repo_copy

Restrict the repo_tree API to functions that are actually needed.

 - decouple reading the mode and content of dirents from other
   operations.
 - remove repo_modify_path.  It is only used to read the mode from
   dirents.
 - remove the ability to use repo_read_mode on a missing path.  The
   existing code only errors out in that case, anyway.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",35,data/crawl/git/patch_1866.diff
https://github.com/git/git/commit/334f8cb22a085964f1ad7d6063c66767920b3332,06 Mar 2011,"apply -v: show offset count when patch did not apply exactly

When the line number the patch intended to touch does not match
the line in the version being patched, GNU patch reports that
it applied the hunk at a different line number, with how big an
offset.

Teach ""git apply"" to do the same under --verbose option.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1867.diff
https://github.com/git/git/commit/a3f5e7a32ec2d885fe6ff7fc14ee91de391f1d72,02 Mar 2011,"push: better error message when no remote configured

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1868.diff
https://github.com/git/git/commit/ec8460bd91007f0bd7851cd07494d1019a39937f,02 Mar 2011,"push: better error messages when push.default = tracking

A common scenario is to create a new branch and push it (checkout -b &&
push [--set-upstream]). In this case, the user was getting ""The current
branch %s has no upstream branch."", which doesn't help much.

Provide the user a command to push the current branch. To avoid the
situation in the future, suggest --set-upstream.

While we're there, also improve the error message in the ""detached HEAD""
case. We mention explicitly ""detached HEAD"" since this is the keyword to
look for in documentations.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_1869.diff
https://github.com/git/git/commit/45781adb9a89c0c47f61ccf8062be26b86a38a54,02 Mar 2011,"get_remote_url(): use the same data source as ls-remote to get remote urls

The formerly implemented algorithm behaved differently to
remote.c:remote_get() at least for remotes that contain a slash.  While the
former just assumes a/b is a path the latter checks the config for
remote.""a/b"" first which is more reasonable.

This removes the last user of git-parse-remote.sh:get_data_source(), so
this function is removed.

Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_1870.diff
https://github.com/git/git/commit/5d2c3b01604a170c52262bf2751c55053d6bd8c1,02 Mar 2011,"rerere forget: deprecate invocation without pathspec

rerere forget is a destructive command. When invoked without a path, it
operates on the current directory, potentially deleting many recorded
conflict resolutions.

To make the command safer, a path must be specified as of git 1.8.0. Until
then, give users time to write 'git rerere forget .' if they really mean
the entire current directory.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1871.diff
https://github.com/git/git/commit/d131b7afea58f47721dafd013ab6aff4adfc42dd,02 Mar 2011,"sha1_file.c: Don't retain open fds on small packs

If a pack file is small enough that its entire contents fits within
one mmap window, mmap the file and then immediately close its file
descriptor.  This reduces the number of file descriptors that are
needed to read from repositories with many tiny pack files, such
as one that has received 1000 pushes (and created 1000 small pack
files) since its last repack.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_1872.diff
https://github.com/git/git/commit/c7934306d1504325d26950f35759ad478772e9c3,28 Feb 2011,"Limit file descriptors used by packs

Rather than using 'errno == EMFILE' after a failed open() call
to indicate the process is out of file descriptors and an LRU
pack window should be closed, place a hard upper limit on the
number of open packs based on the actual rlimit of the process.

By using a hard upper limit that is below the rlimit of the current
process it is not necessary to check for EMFILE on every single
fd-allocating system call.  Instead reserving 25 file descriptors
makes it safe to assume the system call won't fail due to being over
the filedescriptor limit.  Here 25 is chosen as a WAG, but considers
3 for stdin/stdout/stderr, and at least a few for other Git code
to operate on temporary files.  An additional 20 is reserved as it
is not known what the C library needs to perform other services on
Git's behalf, such as nsswitch or name resolution.

This fixes a case where running `git gc --auto` in a repository
with more than 1024 packs (but an rlimit of 1024 open fds) fails
due to the temporary output file not being able to allocate a
file descriptor.  The output file is opened by pack-objects after
object enumeration and delta compression are done, both of which
have already opened all of the packs and fully populated the file
descriptor table.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_1873.diff
https://github.com/git/git/commit/b1c9b798a6dd391aeaea31663a65164815701244,26 Feb 2011,"vcs-svn: teach line_buffer about temporary files

It can sometimes be useful to write information temporarily to file,
to read back later.  These functions allow a program to use the
line_buffer facilities when doing so.

It works like this:

 1. find a unique filename with buffer_tmpfile_init.
 2. rewind with buffer_tmpfile_rewind.  This returns a stdio
    handle for writing.
 3. when finished writing, declare so with
    buffer_tmpfile_prepare_to_read.  The return value indicates
    how many bytes were written.
 4. read whatever portion of the file is needed.
 5. if finished, remove the temporary file with buffer_deinit.
    otherwise, go back to step 2,

The svn support would use this to buffer the postimage from delta
application until the length is known and fast-import can receive
the resulting blob.

Based-on-patch-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",53,data/crawl/git/patch_1874.diff
https://github.com/git/git/commit/cb3f87cf1ba90373fdc240d65a4d65434099d9a3,26 Feb 2011,"vcs-svn: allow input from file descriptor

Based-on-patch-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",38,data/crawl/git/patch_1875.diff
https://github.com/git/git/commit/d280f68313eecb8b3838c70641a246382d5e5343,26 Feb 2011,"t0081 (line-buffer): add buffering tests

POSIX makes the behavior of read(2) from a pipe fairly clear: a read
from an empty pipe will block until there is data available and any
other read will not block, prefering to return a partial result.
Likewise, fread(3) and fgets(3) are clearly specified to act as
though implemented by calling fgetc(3) in a simple loop.  But the
buffering behavior of fgetc is less clear.

Luckily, no sane platform is going to implement fgetc by calling the
equivalent of read(2) more than once.  fgetc has to be able to
return without filling its buffer to preserve errno when errors are
encountered anyway.  So let's assume the simpler behavior (trust) but
add some tests to catch insane platforms that violate that when they
come (verify).

First check that fread can handle a 0-length read from an empty fifo.
Because open(O_RDONLY) blocks until the writing end is open, open the
writing end of the fifo in advance in a subshell.

Next try short inputs from a pipe that is not filled all the way.

Lastly (two tests) try very large inputs from a pipe that will not fit
in the relevant buffers.  The first of these tests reads a little
more than 8192 bytes, which is BUFSIZ (the size of stdio's buffers)
on this Linux machine.  The second reads a little over 64 KiB (the
pipe capacity on Linux) and is not run unless requested by setting
the GIT_REMOTE_SVN_TEST_BIG_FILES environment variable.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",132,data/crawl/git/patch_1876.diff
https://github.com/git/git/commit/7b990c90514b24097ee71edbc02cb3a497a9476b,26 Feb 2011,"vcs-svn: tweak test-line-buffer to not assume line-oriented input

Do not expect an implicit newline after each input record.
Use a separate command to exercise buffer_skip_bytes.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",37,data/crawl/git/patch_1877.diff
https://github.com/git/git/commit/850c5ea44ce0b4aac3be7c4d14b38ec901e777d1,26 Feb 2011,"vcs-svn: make test-line-buffer input format more flexible

Imitate the input format of test-obj-pool to support arbitrary
sequences of commands rather than alternating read/copy.  This should
make it easier to add tests that exercise other line_buffer functions.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",74,data/crawl/git/patch_1878.diff
https://github.com/git/git/commit/8dc6a373d201839859fe7924b63e57526ee2fc22,26 Feb 2011,"fast-import: add 'ls' command

Lazy fast-import frontend authors that want to rely on the backend to
keep track of the content of the imported trees _almost_ have what
they need in the 'cat-blob' command (v1.7.4-rc0~30^2~3, 2010-11-28).
But it is not quite enough, since

 (1) cat-blob can be used to retrieve the content of files, but
     not their mode, and

 (2) using cat-blob requires the frontend to keep track of a name
     (mark number or object id) for each blob to be retrieved

Introduce an 'ls' command to complement cat-blob and take care of the
remaining needs.  The 'ls' command finds what is at a given path
within a given tree-ish (tag, commit, or tree):

	'ls' SP <dataref> SP <path> LF

or in fast-import's active commit:

	'ls' SP <path> LF

The response is a single line sent through the cat-blob channel,
imitating ls-tree output.  So for example:

	FE> ls :1 Documentation
	gfi> 040000 tree 9e6c2b599341d28a2a375f8207507e0a2a627fe9	Documentation
	FE> ls 9e6c2b599341d28a2a375f8207507e0a2a627fe9 git-fast-import.txt
	gfi> 100644 blob 4f92954396e3f0f97e75b6838a5635b583708870	git-fast-import.txt
	FE> ls :1 RelNotes
	gfi> 120000 blob b942e499449d97aeb50c73ca2bdc1c6e6d528743	RelNotes
	FE> cat-blob b942e499449d97aeb50c73ca2bdc1c6e6d528743
	gfi> b942e499449d97aeb50c73ca2bdc1c6e6d528743 blob 32
	gfi> Documentation/RelNotes/1.7.4.txt

The most interesting parts of the reply are the first word, which is
a 6-digit octal mode (regular file, executable, symlink, directory,
or submodule), and the part from the second space to the tab, which is
a <dataref> that can be used in later cat-blob, ls, and filemodify (M)
commands to refer to the content (blob, tree, or commit) at that path.

If there is nothing there, the response is ""missing some/path"".

The intent is for this command to be used to read files from the
active commit, so a frontend can apply patches to them, and to copy
files and directories from previous revisions.

For example, proposed updates to svn-fe use this command in place of
its internal representation of the repository directory structure.
This simplifies the frontend a great deal and means support for
resuming an import in a separate fast-import run (i.e., incremental
import) is basically free.

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Improved-by: Junio C Hamano <gitster@pobox.com>
Improved-by: Sverre Rabbelier <srabbelier@gmail.com>",317,data/crawl/git/patch_1879.diff
https://github.com/git/git/commit/ebeb60900fbab569ed14f710a0a1abb1637ec792,26 Feb 2011,"strbuf: add strbuf_vaddf

In a variable-args function, the code for writing into a strbuf is
non-trivial. We ended up cutting and pasting it in several places
because there was no vprintf-style function for strbufs (which in turn
was held up by a lack of va_copy).

Now that we have a fallback va_copy, we can add strbuf_vaddf, the
strbuf equivalent of vsprintf. And we can clean up the cut and paste
mess.

Signed-off-by: Jeff King <peff@peff.net>
Improved-by: Christian Couder <christian.couder@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_1880.diff
https://github.com/git/git/commit/8e2dc6ac06ae90a00965e5c00aa4918dfd447639,24 Feb 2011,"commit: give final warning when reattaching HEAD to leave commits behind

You can detach the HEAD at an arbitrary commit in order to browse the
files in various points in the history or build older versions of the
software, without recording any new commit, and come back to an existing
branch.  When used in this ""sightseer"" mode, detached HEAD is a perfectly
safe mechanism.  It also is a useful state to experiment with throw-away
commits.

When coming back to an existing branch with ""git checkout master"",
however, the commits that were created on the detached HEAD will become
unreachable from anywhere but the reflog of the HEAD.  Check if the commit
we are about to leave is connected to some ref, and give a final warning
otherwise to remind the user for safety.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_1881.diff
https://github.com/git/git/commit/2169ddc056b56deba701cbbba28cdaf2e9821224,22 Feb 2011,"Disallow empty section and variable names

It is possible to break your repository config by creating an invalid key.  The
config parser in turn chokes on it:

  $ git init
  Initialized empty Git repository in /tmp/gittest/.git/
  $ git config .foo false
  $ git config core.bare
  fatal: bad config file line 6 in .git/config

This patch makes git-config reject keys which start or end with a dot and adds
tests for these cases.

Signed-off-by: Libor Pechacek <lpechacek@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1882.diff
https://github.com/git/git/commit/b09c53a3e331211fc0154de8ebb271e48f8c7ee5,22 Feb 2011,"Sanity-check config variable names

Sanity-check config variable names when adding and retrieving them.  As a side
effect code duplication between git_config_set_multivar and get_value (in
builtin/config.c) was removed and the common functionality was placed in
git_config_parse_key.

This breaks a test in t1300 which used invalid section-less keys in the tests
for ""git -c"". However, allowing such names there was useless, since there was
no way to set them via config file, and no part of git actually tried to use
section-less keys. This patch updates the test to use more realistic examples
as well as adding its own test.

Signed-off-by: Libor Pechacek <lpechacek@suse.cz>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/patch_1883.diff
https://github.com/git/git/commit/abb371a1ef5bddee904551afdec38854f95e99bb,22 Feb 2011,"diff: don't retrieve binary blobs for diffstat

We only need the size, which is much cheaper to get,
especially if it is a big binary file.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1884.diff
https://github.com/git/git/commit/ded0abc73c67c6a9b9dbc2a22755fab01ae17e41,22 Feb 2011,"diff: handle diffstat of rewritten binary files

The logic in builtin_diffstat assumes that a
complete_rewrite pair should have its lines counted. This is
nonsensical for binary files and leads to confusing things
like:

  $ git diff --stat --summary HEAD^ HEAD
   foo.rand |  Bin 4096 -> 4096 bytes
   1 files changed, 0 insertions(+), 0 deletions(-)

  $ git diff --stat --summary -B HEAD^ HEAD
   foo.rand |   34 +++++++++++++++-------------------
   1 files changed, 15 insertions(+), 19 deletions(-)
   rewrite foo.rand (100%)

So let's reorder the function to handle binary files first
(which from diffstat's perspective look like complete
rewrites anyway), then rewrites, then actual diffstats.

There are two bonus prizes to this reorder:

  1. It gets rid of a now-superfluous goto.

  2. The binary case is at the top, which means we can
     further optimize it in the next patch.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_1885.diff
https://github.com/git/git/commit/37f7a8579363a98efc48dfb6964a519034fc9acc,22 Feb 2011,"Teach commit about CHERRY_PICK_HEAD

Previously the user was advised to use commit -c CHERRY_PICK_HEAD after
a conflicting cherry-pick. While this would preserve the original
commit's authorship, it would sadly discard cherry-pick's carefully
crafted MERGE_MSG (which contains the list of conflicts as well as the
original commit-id in the case of cherry-pick -x).

On the other hand, if a bare 'commit' were performed, it would preserve
the MERGE_MSG while resetting the authorship.

In other words, there was no way to simultaneously take the authorship
from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.

This change fixes that situation. A bare 'commit' will now take the
authorship from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.
If the user wishes to reset authorship, that must now be done explicitly
via --reset-author.

A side-benefit of passing commit authorship along this way is that we
can eliminate redundant authorship parsing code from revert.c.

(Also removed an unused include from revert.c)

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",262,data/crawl/git/patch_1886.diff
https://github.com/git/git/commit/d7e5c0cbfb0421d8a609f1125267dbad73069410,22 Feb 2011,"Introduce CHERRY_PICK_HEAD

When a cherry-pick conflicts git advises:

 $ git commit -c <original commit id>

to preserve the original commit message and authorship. Instead, let's
record the original commit id in CHERRY_PICK_HEAD and advise:

  $ git commit -c CHERRY_PICK_HEAD

A later patch teaches git to handle the '-c CHERRY_PICK_HEAD' part.
Note that we record CHERRY_PICK_HEAD even in the case where there
are no conflicts so that we may use it to communicate authorship to
commit; this will then allow us to remove set_author_ident_env from
revert.c. However, we do not record CHERRY_PICK_HEAD when --no-commit
is used, as presumably the user intends to further edit the commit
and possibly even cherry-pick additional commits on top.

Tests and documentation contributed by Jonathan Nieder.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",136,data/crawl/git/patch_1887.diff
https://github.com/git/git/commit/24852d917104e294726c54803d5c9012997506ca,22 Feb 2011,"rev-list: --left/right-only are mutually exclusive

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1888.diff
https://github.com/git/git/commit/bf0ab10fa84df6c49450a06077d1c52756d88222,21 Feb 2011,"merge: improve inexact rename limit warning

The warning is generated deep in the diffcore code, which
means that it will come first, followed possibly by a spew
of conflicts, making it hard to see.

Instead, let's have diffcore pass back the information about
how big the rename limit would needed to have been, and then
the caller can provide a more appropriate message (and at a
more appropriate time).

No refactoring of other non-merge callers is necessary,
because nobody else was even using the warn_on_rename_limit
feature.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1889.diff
https://github.com/git/git/commit/e32e00dc88948a730b8b1f3b8129f30c313713e7,21 Feb 2011,"git-p4: better message for ""git-p4 sync"" when not cloned

A common error is to do ""git-p4 sync"" in a repository that
was not initialized by ""git-p4 clone"".  There will be no
p4 refs.  The error message in this case is a traceback
for an assertion, which is confusing.

Change it instead to explain the likely problem.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Acked-By: Tor Arvid Lund <torarvid@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1890.diff
https://github.com/git/git/commit/a9026187923643235d4f9b876ff5f4c0ebe5c9ae,18 Feb 2011,"clone: die when trying to clone missing local path

Since 86ac751 (Allow cloning an empty repository,
2009-01-23), doing:

  git clone does-not-exist

has created does-not-exist as an empty repository. This was
an unintentional side effect of 86ac751. Even weirder,
doing:

  git clone does-not-exist new-dir

_does_ fail, making this ""feature"" (if you want to consider
it such) broken. Let's detect this situation and explicitly
die. It's almost certainly not what the user intended.

This patch also adds two tests. One for the missing path
case, and one to confirm that a similar case, cloning a
non-repository directory, fails.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1891.diff
https://github.com/git/git/commit/21b5b1e8dc9bed2b518defe29d69ebc27da4b68f,17 Feb 2011,"branch/checkout --track: Ensure that upstream branch is indeed a branch

When creating a new branch using the --track option, we must make sure that
we don't try to set an upstream that does not make sense to follow (using
'git pull') or update (using 'git push'). The current code checks against
using HEAD as upstream (since tracking a symref doesn't make sense). However,
tracking a tag doesn't make sense either. Indeed, tracking _any_ ref that is
not a (local or remote) branch doesn't make sense, and should be disallowed.

This patch achieves this by checking that the ref we're trying to --track
resides within refs/heads/* or refs/remotes/*. This new check replaces the
previous check against HEAD.

A couple of testcases are also added, verifying that we cannot create
branches with tags as upstreams.

Finally, some selftests relying on using a non-branch as an upstream have
been reworked or removed:

- t6040: Reverse the meaning of two tests that depend on the ability to
use (lightweight and annotated) tags as upstreams. These two tests were
originally added in commits 1be570f and 57ffc5f, and this patch reverts the
intention of those two commits.

- t7201: Remove part of a test (introduced in 9188ed8) relying on a
non-branch as upstream.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_1892.diff
https://github.com/git/git/commit/ac49f5ca84d82e5b10bc1eb022dfdd9b0e8f7749,16 Feb 2011,"rerere ""remaining""

After ""rerere"" resolves conflicts by reusing old resolution, there would
be three kinds of paths with conflict in the index:

 * paths that have been resolved in the working tree by rerere;
 * paths that need further work whose resolution could be recorded;
 * paths that need resolving that rerere won't help.

When the user wants a list of paths that need hand-resolving, output from
""rerere status"" does not help, as it shows only the second category, but
the paths in the third category still needs work (rerere only makes sense
for regular files that have both our side and their side, and does not
help other kinds of conflicts, e.g. ""we modified, they deleted"").

The new subcommand ""rerere remaining"" can be used to show both. As
opposed to ""rerere status"", this subcommand also skips printing paths
that have been added to the index, since these paths are already
resolved and are no longer ""remaining"".

Initial patch provided by Junio. Refactored and modified to skip
resolved paths by Martin. Commit message mostly by Junio.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Martin von Zweigbergk <martin.von.zweigbergk@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_1893.diff
https://github.com/git/git/commit/53c403116a947c538132fc721f83196036f7a299,16 Feb 2011,"push.default: Rename 'tracking' to 'upstream'

Users are sometimes confused with two different types of ""tracking"" behavior
in Git: ""remote-tracking"" branches (e.g. refs/remotes/*/*) versus the
merge/rebase relationship between a local branch and its @{upstream}
(controlled by branch.foo.remote and branch.foo.merge config settings).

When the push.default is set to 'tracking', it specifies that a branch should
be pushed to its @{upstream} branch. In other words, setting push.default to
'tracking' applies only to the latter of the above two types of ""tracking""
behavior.

In order to make this more understandable to the user, we rename the
push.default == 'tracking' option to push.default == 'upstream'.

push.default == 'tracking' is left as a deprecated synonym for 'upstream'.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1894.diff
https://github.com/git/git/commit/65969d43d10512a44f5e7248e4404b946d1d0d9f,15 Feb 2011,"merge: honor prepare-commit-msg hook

When a merge is stopped due to conflicts or --no-commit, the
subsequent commit calls the prepare-commit-msg hook. However,
it is not called after a clean merge. Fix this inconsistency
by invoking the hook after clean merges as well.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_1895.diff
https://github.com/git/git/commit/206b099d269955337bd6169f71aa08ba28a0cf4f,15 Feb 2011,"smart-http: Don't use Expect: 100-Continue

Some HTTP/1.1 servers or proxies don't correctly implement the
100-Continue feature of HTTP/1.1.  Its a difficult feature to
implement right, and isn't commonly used by browsers, so many
developers may not even be aware that their server (or proxy)
doesn't honor it.

Within the smart HTTP protocol for Git we only use this newer
""Expect: 100-Continue"" feature to probe for missing authentication
before uploading a large payload like a pack file during push.
If authentication is necessary, we expect the server to send the
401 Not Authorized response before the bulk data transfer starts,
thus saving the client bandwidth during the retry.

A different method to probe for working authentication is to send an
empty command list (that is just ""0000"") to $URL/git-receive-pack.
or $URL/git-upload-pack.  All versions of both receive-pack and
upload-pack since the introduction of smart HTTP in Git 1.6.6
cleanly accept just a flush-pkt under --stateless-rpc mode, and
exit with success.

If HTTP level authentication is successful, the backend will return
an empty response, but with HTTP status code 200.  This enables
the client to continue with the transfer.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_1896.diff
https://github.com/git/git/commit/6390c905dc6c6b0ca898689ee04a9cd6ac2f0b68,13 Feb 2011,"repo-config: add deprecation warning

repo-config was deprecated in 5c66d0d4 on 2008-01-17.  Warn the
remaining users that it has been replaced by config and is going to
be removed eventually.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1897.diff
https://github.com/git/git/commit/32669671c7746888aa1e3832907deb7fc8405061,08 Feb 2011,"checkout: introduce --detach synonym for ""git checkout foo^{commit}""

For example, one might use this when making a temporary merge to
test that two topics work well together.

Patch by Junio, with tests from Jeff King.

[jn: with some extra checks for bogus commandline usage]

Suggested-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_1898.diff
https://github.com/git/git/commit/09ebad6faeec11c3dbad0bdaf95faed57be5dcba,08 Feb 2011,"checkout: split off a function to peel away branchname arg

The code to parse and consume the tree name and ""--"" in commands such
as ""git checkout @{-1} -- '*.c'"" is intimidatingly long.  Split it out
into a separate function and make it easier to skip on first reading
by making the data it uses and produces more explicit.

No functional change intended.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",229,data/crawl/git/patch_1899.diff
https://github.com/git/git/commit/c9b78400802acb3e02249c44286162edd9ed2b35,07 Feb 2011,"mingw: make failures to unlink or move raise a question

On Windows in case a program is accessing a file unlink or
move operations may fail. To give the user a chance to correct
this we simply wait until the user asks us to retry or fail.

This is useful because of the following use case which seem
to happen rarely but when it does it is a mess:

After making some changes the user realizes that he was on the
incorrect branch. When trying to change the branch some file
is still in use by some other process and git stops in the
middle of changing branches. Now the user has lots of files
with changes mixed with his own. This is especially confusing
on repositories that contain lots of files.

Although the recent implementation of automatic retry makes
this scenario much more unlikely lets provide a fallback as
a last resort.

Thanks to Albert Dvornik for disabling the question if users can't see it.

If the stdout of the command is connected to a terminal but the stderr
has been redirected, the odds are good that the user can't see any
question we print out to stderr.  This will result in a ""mysterious
hang"" while the app is waiting for user input.

It seems better to be conservative, and avoid asking for input
whenever the stderr is not a terminal, just like we do for stdin.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Albert Dvornik <dvornik+git@gmail.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1900.diff
https://github.com/git/git/commit/c879daa23729547fb28aa7e8783c5e4e619a9e7c,07 Feb 2011,"Make hash-object more robust against malformed objects

Commits, trees and tags have structure. Don't let users feed git
with malformed ones. Sooner or later git will die() when
encountering them.

Note that this patch does not check semantics. A tree that points
to non-existent objects is perfectly OK (and should be so, users
may choose to add commit first, then its associated tree for example).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1901.diff
https://github.com/git/git/commit/a2b7a3b3a966c5801efe968d4b5656fa5a885409,07 Feb 2011,"diff: support --cached on unborn branches

""git diff --cached"" (without revision) used to mean ""git diff --cached
HEAD"" (i.e. the user was too lazy to type HEAD). This ""correctly""
failed when there was no commit yet. But was that correctness useful?

This patch changes the definition of what particular command means.
It is a request to show what _would_ be committed without further ""git
add"". The internal implementation is the same ""git diff --cached HEAD""
when HEAD exists, but when there is no commit yet, it compares the index
with an empty tree object to achieve the desired result.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_1902.diff
https://github.com/git/git/commit/a97a96fc9667cd84dc350db309135ea52adac18d,03 Feb 2011,"Add testcases showing how pathspecs are handled with rev-list --objects

Signed-off-by: Elijah Newren <newren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_1903.diff
https://github.com/git/git/commit/4868b2ea17b7a5e8171cb109423a25a269bfefe5,21 Jan 2011,"Subject: setup: officially support --work-tree without --git-dir

The original intention of --work-tree was to allow people to work in a
subdirectory of their working tree that does not have an embedded .git
directory.  Because their working tree, which their $cwd was in, did not
have an embedded .git, they needed to use $GIT_DIR to specify where it is,
and because this meant there was no way to discover where the root level
of the working tree was, so we needed to add $GIT_WORK_TREE to tell git
where it was.

However, this facility has long been (mis)used by people's scripts to
start git from a working tree _with_ an embedded .git directory, let git
find .git directory, and then pretend as if an unrelated directory were
the associated working tree of the .git directory found by the discovery
process.  It happens to work in simple cases, and is not worth causing
""regression"" to these scripts.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",229,data/crawl/git/patch_1904.diff
https://github.com/git/git/commit/5ee5f5a65d5a60cd327f1a4b92ee0f48508f2362,19 Jan 2011,"svndump.c: Fix a printf format compiler warning

In particular, on systems that define uint32_t as an unsigned long,
gcc complains as follows:

        CC vcs-svn/svndump.o
    vcs-svn/svndump.c: In function `svndump_read':
    vcs-svn/svndump.c:215: warning: int format, uint32_t arg (arg 2)

In order to suppress the warning we use the C99 format specifier
macro PRIu32 from <inttypes.h>.

Signed-off-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Acked-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1905.diff
https://github.com/git/git/commit/a93e530184b3f7ae9d9bfb0e569734687f8d1c0b,13 Jan 2011,"unpack-trees: handle lstat failure for existing file

When check_leading_path notices a file in the way of a new entry to be
checked out, verify_absent uses (1) the mode to determine whether it
is a directory (2) the rest of the stat information to check if this
is actually an old entry, disguised by a change in filename (e.g.,
README -> Readme) that is significant to git but insignificant to the
underlying filesystem.  If lstat fails, these checks are performed
with an uninitialied stat structure, producing essentially random
results.

Better to just error out when lstat fails.

The easiest way to reproduce this is to remove a file after the
check_leading_path call and before the lstat in verify_absent.  An
lstat failure other than ENOENT in check_leading_path would also
trigger the same code path.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1906.diff
https://github.com/git/git/commit/92fda79ed048d2d37e760e7a1b6055b2fc801ee3,13 Jan 2011,"unpack-trees: handle lstat failure for existing directory

When check_leading_path notices no file in the way of the new entry to
be checked out, verify_absent checks whether there is a directory
there or nothing at all.  If that lstat call fails (for example due to
ENOMEM), it assumes ENOENT, meaning a directory with untracked files
would be clobbered in that case.

Check errno after calling lstat, and for conditions other than ENOENT,
just error out.

This is a theoretical race condition.  lstat has to succeed moments
before it fails for there to be trouble.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1907.diff
https://github.com/git/git/commit/7f51f8bc2b9d0556f2fbe20056e8fc8839766c99,07 Jan 2011,"alias: use run_command api to execute aliases

On Windows, system() executes with cmd.exe instead of /bin/sh. This
means that aliases currently has to be batch-scripts instead of
bourne-scripts. On top of that, cmd.exe does not handle single quotes,
which is what the code-path currently uses to handle arguments with
spaces.

To solve both problems in one go, use run_command_v_opt() to execute
the alias. It already does the right thing prepend ""sh -c "" to the
alias.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_1908.diff
https://github.com/git/git/commit/0ed748134748579a13cf27e1e8b3e55371bcd9dc,27 Dec 2010,"setup_work_tree: adjust relative $GIT_WORK_TREE after moving cwd

When setup_work_tree() is called, it moves cwd to $GIT_WORK_TREE and
makes internal copy of $GIT_WORK_TREE absolute. The environt variable,
if set by user, remains unchanged. If the variable is relative, it is
no longer correct because its base dir has changed.

Instead of making $GIT_WORK_TREE absolute too, we just say ""."" and let
subsequent git processes handle it.

Reported-by: Michel Briand <michelbriand@free.fr>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_1909.diff
https://github.com/git/git/commit/835183603b4aed84797f60c91c5ebd79be7b2e11,22 Dec 2010,"Remove all logic from get_git_work_tree()

This logic is now only used by cmd_init_db(). setup_* functions do not
rely on it any more. Move all the logic to cmd_init_db() and turn
get_git_work_tree() into a simple function.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1910.diff
https://github.com/git/git/commit/b3f66fd3e3abeb9183f33f023727e3a53868849d,22 Dec 2010,"setup: rework setup_explicit_git_dir()

This function is the most complex one among the three setup_*
functions because all GIT_DIR, GIT_WORK_TREE, core.worktree and
core.bare are involved.

Because core.worktree is only effective inside
setup_explicit_git_dir() and the extra code in setup_git_directory()
is to handle that. The extra code can now be retired.

Also note that setup_explicit assignment is removed, worktree setting
is no longer decided by get_git_work_tree(). get_git_work_tree() will
be simplified in the next commit.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",424,data/crawl/git/patch_1911.diff
https://github.com/git/git/commit/9951d3b37ec7298384640b11d07a990ef031fe83,22 Dec 2010,"setup: clean up setup_discovered_git_dir()

If core.bare is true, discard the discovered worktree, move back to
original cwd.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_1912.diff
https://github.com/git/git/commit/e6aea2dba27798f5d1eca32435e407541caca400,22 Dec 2010,"setup: limit get_git_work_tree()'s to explicit setup case only

get_git_work_tree() takes input as core.worktree, core.bare,
GIT_WORK_TREE and decides correct worktree setting.

Unfortunately it does not do its job well. core.worktree and
GIT_WORK_TREE should only be taken into account, if GIT_DIR is set
(which is handled by setup_explicit_git_dir). For other setup cases,
only core.bare matters.

Add a temporary variable setup_explicit to adjust get_git_work_tree()
behavior as such. This variable will be gone once setup_* rework is
done.

Also remove is_bare_repository_cfg check in set_git_work_tree() to
ease the rework. We are going to check for core.bare and core.worktree
early before setting worktree. For example, if core.bare is true, no
need to set worktree.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_1913.diff
https://github.com/git/git/commit/4c28e4ada03f5440251545cf91e0d81bce9b010d,21 Dec 2010,"commit: die before asking to edit the log message

When determine_author_info() returns to the calling prepare_to_commit(),
we already know the pieces of information necessary to determine what
author ident will be used in the final message, but deferred making a call
to fmt_ident() before the final commit_tree().  Most importantly, we would
open the editor to ask the user to compose the log message before it.

As one important side effect of fmt_ident() is to error out when the given
information is malformed, this resulted in us spawning the editor first
and then refusing to commit due to error, even though we had enough
information to detect the error before starting the editor, which was
annoying.

Move the fmt_ident() call to the end of determine_author_info() where we
have final determination of author info to rectify this.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_1914.diff
https://github.com/git/git/commit/6068ac88488f01400eae5c063d8e4a08e9d87f74,21 Dec 2010,"completion: add missing configuration variables

Quite a few configuration variables have been added since 226b343
(completion: add missing configuration variables to _git_config(),
2009-05-03). Add these variables to the Bash completion script.

Also remove the obsolete 'add.ignore-errors' and
'color.grep.external', as well as 'diff.renameLimit.', which never
existed and rename the misspelled 'sendemail.aliasesfiletype'.

Signed-off-by: Martin von Zweigbergk <martin.von.zweigbergk@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_1915.diff
https://github.com/git/git/commit/4579bb418c2995a8459de7dba42b63a26006f9a6,20 Dec 2010,"ident: die on bogus date format

If the user gives ""git commit --date=foobar"", we silently
ignore the --date flag. We should note the error.

This patch puts the fix at the lowest level of fmt_ident,
which means it also handles GIT_AUTHOR_DATE=foobar, as well.

There are two down-sides to this approach:

  1. Technically this breaks somebody doing something like
     ""git commit --date=now"", which happened to work because
     bogus data is the same as ""now"". Though we do
     explicitly handle the empty string, so anybody passing
     an empty variable through the environment will still
     work.

     If the error is too much, perhaps it can be downgraded
     to a warning?

  2. The error checking happens _after_ the commit message
     is written, which can be annoying to the user. We can
     put explicit checks closer to the beginning of
     git-commit, but that feels a little hack-ish; suddenly
     git-commit has to care about how fmt_ident works. Maybe
     we could simply call fmt_ident earlier?

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_1916.diff
https://github.com/git/git/commit/05bb5a2584ca0e1c87a2135a83c5573b9337d06f,19 Dec 2010,"gitweb: Include links to feeds in HTML header only for '200 OK' response

To do that, generating ""<link />""s to feeds were refactored into
print_feed_meta() subroutine, to keep nesting (indent) level in
git_header_html() low.  This has also the advantage of making code
more clear.

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: John 'Warthog9' Hawley <warthog9@eaglescrag.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_1917.diff
https://github.com/git/git/commit/97a5e3453abf63bbf5926979fcd89efb4388e937,08 Dec 2010,"treap: make treap_insert return inserted node

Suppose I try the following:

	struct int_node *node = node_pointer(node_alloc(1));
	node->n = 5;
	treap_insert(&root, node);
	printf(""%d\n"", node->n);

Usually the result will be 5.  But since treap_insert draws memory
from the node pool, if the caller is unlucky then (1) the node pool
will be full and (2) realloc will be forced to move the node pool to
find room, so the node address becomes invalid and the result of
dereferencing it is undefined.

So we ought to use offsets in preference to pointers for references
that would remain valid after a call to treap_insert.  Tweak the
signature to hint at a certain special case: since the inserted node
can change address (though not offset), as a convenience teach
treap_insert to return its new address.

So the motivational example could be fixed by adding ""node ="".

	struct int_node *node = node_pointer(node_alloc(1));
	node->n = 5;
	node = treap_insert(&root, node);
	printf(""%d\n"", node->n);

Based on a true story.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_1918.diff
https://github.com/git/git/commit/979f792951913d75f992f87022b75610303a614f,07 Dec 2010,"get_sha1: support relative path "":path"" syntax

Currently :path and ref:path can be used to refer to a specific object
in index or ref respectively. ""path"" component is absolute path. This
patch allows ""path"" to be written as ""./path"" or ""../path"", which is
relative to user's original cwd.

This does not work in commands for which startup_info is NULL
(i.e. non-builtin ones, it seems none of them needs this anyway).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_1919.diff
https://github.com/git/git/commit/309be813c9b75fed70f3a03bf803bf47c6670cfc,07 Dec 2010,"update-index: migrate to parse-options API

--refresh and --really-refresh accept flags (like -q) and modify
an error indicator.  It might make sense to make the error
indicator global, but just pass the flags and a pointer to the error
indicator in a struct instead.

--cacheinfo wants 3 arguments.  Use the OPTION_LOWLEVEL_CALLBACK
extension to grab them and PARSE_OPT_NOARG to disallow the ""sticked""
--cacheinfo=foo form.  (The resulting message

	$ git update-index --cacheinfo=foo
	error: option `cacheinfo' takes no value

is unfortunately incorrect.)

--assume-unchanged and --no-assume-unchanged probably should use the
OPT_UYN feature; but use a callback for now so the existing MARK_FLAG
and UNMARK_FLAG values can be used.

--stdin and --index-info are still constrained to be the last argument
(implemented using the OPTION_LOWLEVEL_CALLBACK extension).

--unresolve and --again consume all arguments that come after them
(also using OPTION_LOWLEVEL_CALLBACK).

The order of options matters.  Each path on the command line is
affected only by the options that come before it.  A custom
argument-parsing loop with parse_options_step() brings that about.

In exchange for all the fuss, we get the usual perks: support for
un-sticked options, better usage error messages, more useful -h
output, and argument parsing code that should be easier to tweak
in the future.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",392,data/crawl/git/patch_1920.diff
https://github.com/git/git/commit/c1f4ec9ef45232d6dbdea4c417a9d41eb8ad7f4f,07 Dec 2010,"parse-options: do not infer PARSE_OPT_NOARG from option type

Simplify the ""takes no value"" error path by relying on PARSE_OPT_NOARG
being set correctly.  That is:

 - if the PARSE_OPT_NOARG flag is set, reject --opt=value
   regardless of the option type;
 - if the PARSE_OPT_NOARG flag is unset, accept --opt=value
   regardless of the option type.

This way, the accepted usage more closely matches the usage advertised
with --help-all.

No functional change intended, since the NOARG flag is only used
with ""boolean-only"" option types in existing parse_options callers.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_1921.diff
https://github.com/git/git/commit/5c400ed2e05070d79b6cd9438ff5607ec0a83589,07 Dec 2010,"parse-options: sanity check PARSE_OPT_NOARG flag

Some option types cannot use an argument --- boolean options that
would set a bit or flag or increment a counter, for example.  If
configured in the flag word to accept an argument anyway, the result
is an argument that is advertised in ""program -h"" output only to be
rejected by parse-options::get_value.

Luckily all current users of these option types use PARSE_OPT_NOARG
and do not use PARSE_OPT_OPTARG.  Add a check to ensure that that
remains true.  The check is run once for each invocation of
parse_option_start().

Improved-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1922.diff
https://github.com/git/git/commit/a02dd4ff7dd79eb6aa39b00c90c293e3c3d10b4c,07 Dec 2010,"parse-options: move NODASH sanity checks to parse_options_check

A dashless switch (like '(' passed to 'git grep') cannot be negated,
cannot be attached to an argument, and cannot have a long form.
Currently parse-options runs the related sanity checks when the
dashless option is used; better to always check them at the start of
option parsing, so mistakes can be caught more quickly.

The error message at the new call site is less specific about the
nature of the error, for simplicity.  On the other hand, it prints
which switch was problematic.  Before:

	fatal: BUG: dashless options can't be long

After:

	error: BUG: switch '(' uses feature not supported for dashless options

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_1923.diff
https://github.com/git/git/commit/1e5ce570ca368b97c8e3b238bb0228c5ca41b494,07 Dec 2010,"parse-options: clearer reporting of API misuse

The PARSE_OPT_LASTARG_DEFAULT flag is meant for options like
--contains that (1) traditionally had a mandatory argument and
(2) have some better behavior to use when appearing in the final
position.  It makes no sense to combine this with OPTARG, so ever
since v1.6.4-rc0~71 (parse-options: add parse_options_check to
validate option specs, 2009-07-09) this mistake is flagged with

	error: `--option` uses incompatible flags LASTARG_DEFAULT and OPTARG

and an exit status representing an error in commandline usage.

Unfortunately that which might confuse scripters calling such an
erroneous program into thinking the _script_ contains an error.
Clarify that it is an internal error by dying with a message beginning
""error: BUG: ..."" and status 128.

While at it, clean up parse_options_check to prepare for more checks.

Long term, it would be nicer to make such checks happen at compile
time.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_1924.diff
https://github.com/git/git/commit/1c2ab4303354da23ff74ce2ea4a99b69fcfae825,02 Dec 2010,"Update draft release notes to 1.7.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1925.diff
https://github.com/git/git/commit/7e4eb210bdf2a612d8bf4cc106d99ba190f73e3e,02 Dec 2010,"Prepare for 1.7.3.3

Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_1926.diff
https://github.com/git/git/commit/f4b05a4947f5f1cf3e01fb61ec5919cc28fe11f7,01 Dec 2010,"Make the tab width used for whitespace checks configurable

A new whitespace ""rule"" is added that sets the tab width to use for
whitespace checks and fix-ups and replaces the hard-coded constant 8.

Since the setting is part of the rules, it can be set per file using
.gitattributes.

The new configuration is backwards compatible because older git versions
simply ignore unknown whitespace rules.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",184,data/crawl/git/patch_1927.diff
https://github.com/git/git/commit/85c62395b152f99e8867aaf84cea93dddc03243c,01 Dec 2010,"fast-import: let importers retrieve blobs

New objects written by fast-import are not available immediately.
Until a checkpoint has been started and finishes writing the pack
index, any new blobs will not be accessible using standard git tools.

So introduce a new way to access them: a ""cat-blob"" command in the
command stream requests for fast-import to print a blob to stdout or a
file descriptor specified by the argument to --cat-blob-fd.  The value
for cat-blob-fd cannot be specified in the stream because that would
be a layering violation: the decision of where to direct a stream has
to be made when fast-import is started anyway, so we might as well
make the stream format is independent of that detail.

Output uses the same format as ""git cat-file --batch"".

Thanks to Sverre Rabbelier and Sam Vilain for guidance in designing
the protocol.

Based-on-patch-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Acked-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",331,data/crawl/git/patch_1928.diff
https://github.com/git/git/commit/a9ff277e583782346181f431784e48046b0dfaa9,01 Dec 2010,"fast-import: stricter parsing of integer options

Check the result from strtoul to avoid accepting arguments like
--depth=-1 and --active-branches=foo,bar,baz.

Requested-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_1929.diff
https://github.com/git/git/commit/df5d43be1f721b0ede37097b815463ceb43b0449,01 Dec 2010,"commit.c: Remove backward goto in read_craft_line()

Bad graft data is noticed in several places in read_graft_line(), and in
each case we go back to the first site of detection.  It in general is a
better style to have an exception handling out of line from the main
codepath and make error codepath jump forward.

Signed-off-by: Ralf Thielow <ralf.thielow@googlemail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1930.diff
https://github.com/git/git/commit/d43e90732bbc8eae6cbfd18f61ca6c82c8920732,29 Nov 2010,"entry.c: remove ""checkout-index"" from error messages

Back then when entry.c was part of checkout-index (or checkout-cache
at that time [1]). It makes sense to print the command name in error
messages. Nowadays entry.c is in libgit and can be used by any
commands, printing ""git checkout-index: blah"" does no more than
confusion. The error messages without it still give enough information.

[1] 12dccc1 (Make fiel checkout function available to the git library - 2005-06-05)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1931.diff
https://github.com/git/git/commit/a9ca8a85ef493aac947f9da44a4fbb5724768897,29 Nov 2010,"builtins: print setup info if repo is found

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1932.diff
https://github.com/git/git/commit/dfc2dcd9acf95794788f9471028485c2d2cc78ef,26 Nov 2010,"http-push: check path length before using it

We use path_len to skip the base url/path, but we do not know for sure
if path does indeed contain the base url/path. Check if this is so.

Helped-by: Johnathan Nieder <jrnieder@gmail.com>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1933.diff
https://github.com/git/git/commit/b3e5bce1aa88721dd4565089960997836ce66add,24 Nov 2010,"vcs-svn: Error out for v3 dumps

By ignoring the Text-Delta and Prop-Delta node fields, current svn-fe
happily mistakes deltas for full text and instead of cleanly erroring
out, it produces a valid but semantically bogus fast-import stream
when fed a dump file in the modern ""svnadmin dump --deltas"" format.

Dump file parsers are supposed to ignore header fields they don't
understand (to allow for backward-compatible extensions), but they are
also supposed to check the SVN-fs-dump-format-version header to
prevent misinterpretation of non backward-compatible extensions.
Do so.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_1934.diff
https://github.com/git/git/commit/7851b1e60fabe350216d48e6de03a3ed21a49953,19 Nov 2010,"remote-fd/ext: finishing touches after code review

When compiling with pthread support, transport-helper.c needs to include
necessary header files.  Also fix a few error messages in remote-ext and
remote-fd programs, and a potential buffer underrun in remote-fd.

In the documentation, clarify how %G and %V are used; the old description
looked as if they take repository/vhost parameters, which was wrong.

Also fix AsciiDoc markup for the page title of remote-fd/remote-ext manpages,
and tweak the way how section headers are shown.

Signed-off-by: Ilari Liusvaara <ilari.liusvaara@elisanet.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1935.diff
https://github.com/git/git/commit/d313c1cfe446ae3839c022ed017194d8248c6bd5,18 Nov 2010,"Update draft release notes to 1.7.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_1936.diff
https://github.com/git/git/commit/35d2fffdb857836cc46f5a4ada525a246ddd5e11,17 Nov 2010,"Provide 'git merge --abort' as a synonym to 'git reset --merge'

Teach 'git merge' the --abort option, which verifies the existence of
MERGE_HEAD and then invokes 'git reset --merge' to abort the current
in-progress merge and attempt to reconstruct the pre-merge state.

The reason for adding this option is to provide a user interface for
aborting an in-progress merge that is consistent with the interface
for aborting a rebase ('git rebase --abort'), aborting the application
of a patch series ('git am --abort'), and aborting an in-progress notes
merge ('git notes merge --abort').

The patch includes documentation and testcases that explain and verify
the various scenarios in which 'git merge --abort' can run. The
testcases also document the cases in which 'git merge --abort' is
unable to correctly restore the pre-merge state (look for the '###'
comments towards the bottom of t/t7609-merge-abort.sh).

This patch has been improved by the following contributions:
- Jonathan Nieder: Move test documentation into test_description

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",354,data/crawl/git/patch_1937.diff
https://github.com/git/git/commit/2a22c1b35d6110e72d86a2fac4b68dbad0905adb,17 Nov 2010,"cmd_merge(): Parse options before checking MERGE_HEAD

Reorder the initial part of builtin/merge.c:cmd_merge() so that command-line
options are parsed _before_ we load the index and check for MERGE_HEAD
(and exits if it exists). This does not change the behaviour of 'git merge',
but is needed in preparation for the implementation of 'git merge --abort'
(which requires MERGE_HEAD to be present).

This patch has been improved by the following contributions:
- Junio C Hamano: fixup minor style issues

Thanks-to: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1938.diff
https://github.com/git/git/commit/618cd75707580819f19a5f01dba406ac72219c78,17 Nov 2010,"Provide 'git notes get-ref' to easily retrieve current notes ref

Script may use 'git notes get-ref' to easily retrieve the current notes ref.

Suggested-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_1939.diff
https://github.com/git/git/commit/a6a09095a08339afc8468d053ff978ed4662a1d5,17 Nov 2010,"git notes merge: Add another auto-resolving strategy: ""cat_sort_uniq""

This new strategy is similar to ""concatenate"", but in addition to
concatenating the two note candidates, this strategy sorts the resulting
lines, and removes duplicate lines from the result. This is equivalent to
applying the ""cat | sort | uniq"" shell pipeline to the two note candidates.

This strategy is useful if the notes follow a line-based format where one
wants to avoid duplicate lines in the merge result.

Note that if either of the note candidates contain duplicate lines _prior_
to the merge, these will also be removed by this merge strategy.

The patch also contains tests and documentation for the new strategy.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/patch_1940.diff
https://github.com/git/git/commit/6cfd6a9dea889707fa207ee2003010c3b56b2131,17 Nov 2010,"git notes merge: --commit should fail if underlying notes ref has moved

When manually resolving a notes merge, if the merging ref has moved since
the merge started, we should fail to complete the merge, and alert the user
to what's going on.

This situation may arise if you start a 'git notes merge' which results in
conflicts, and you then update the current notes ref (using for example
'git notes add/copy/amend/edit/remove/prune', 'git update-ref', etc.),
before you get around to resolving the notes conflicts and calling
'git notes merge --commit'.

We detect this situation by comparing the first parent of the partial merge
commit (which was created when the merge started) to the current value of the
merging notes ref (pointed to by the .git/NOTES_MERGE_REF symref).

If we don't fail in this situation, the notes merge commit would overwrite
the updated notes ref, thus losing the changes that happened in the meantime.

The patch includes a testcase verifying that we fail correctly in this
situation.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_1941.diff
https://github.com/git/git/commit/6abb3655efe364cf0375b5cdae2729af7562ed45,17 Nov 2010,"git notes merge: Manual conflict resolution, part 2/2

When the notes merge conflicts in .git/NOTES_MERGE_WORKTREE have been
resolved, we need to record a new notes commit on the appropriate notes
ref with the resolved notes.

This patch implements 'git notes merge --commit' which the user should
run after resolving conflicts in the notes merge worktree. This command
finalizes the notes merge by recombining the partial notes tree from
part 1 with the now-resolved conflicts in the notes merge worktree in a
merge commit, and updating the appropriate ref to this merge commit.

In order to correctly finalize the merge, we need to keep track of three
things:

- The partial merge result from part 1, containing the auto-merged notes.
  This is now stored into a ref called .git/NOTES_MERGE_PARTIAL.
- The unmerged notes. These are already stored in
  .git/NOTES_MERGE_WORKTREE, thanks to part 1.
- The notes ref to be updated by the finalized merge result. This is now
  stored in a symref called .git/NOTES_MERGE_REF.

In addition to ""git notes merge --commit"", which uses the above details
to create the finalized notes merge commit, this patch also implements
""git notes merge --reset"", which aborts the ongoing notes merge by simply
removing the files/directory described above.

FTR, ""git notes merge --commit"" reuses ""git notes merge --reset"" to remove
the information described above (.git/NOTES_MERGE_*) after the notes merge
have been successfully finalized.

The patch also contains documentation and testcases for the two new options.

This patch has been improved by the following contributions:
- Ævar Arnfjörð Bjarmason: Fix nonsense sentence in --commit description
- Sverre Rabbelier: Rename --reset to --abort

Thanks-to: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Thanks-to: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",398,data/crawl/git/patch_1942.diff
https://github.com/git/git/commit/809f38c8abacdbeb7015fdeef03931568c7fddda,17 Nov 2010,"git notes merge: Manual conflict resolution, part 1/2

Conflicts (that are to be resolved manually) are written into a special-
purpose working tree, located at .git/NOTES_MERGE_WORKTREE. Within this
directory, conflicting notes entries are stored (with conflict markers
produced by ll_merge()) using the SHA1 of the annotated object. The
.git/NOTES_MERGE_WORKTREE directory will only contain the _conflicting_
note entries. The non-conflicting note entries (aka. the partial merge
result) are stored in 'local_tree', and the SHA1 of the resulting commit
is written to 'result_sha1'. The return value from notes_merge() is -1.

The user is told to edit the files within the .git/NOTES_MERGE_WORKTREE
directory in order to resolve the conflicts.

The patch also contains documentation and testcases for the correct setup
of .git/NOTES_MERGE_WORKTREE.

The next part will recombine the partial notes merge result with the
resolved conflicts in .git/NOTES_MERGE_WORKTREE to produce the complete
merge result.

This patch has been improved by the following contributions:
- Jonathan Nieder: Use trace_printf(...) instead of OUTPUT(o, 5, ...)

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",487,data/crawl/git/patch_1943.diff
https://github.com/git/git/commit/3228e67120a8c71bf7804a5c52448a841d6f3b58,17 Nov 2010,"git notes merge: Add automatic conflict resolvers (ours, theirs, union)

The new -s/--strategy command-line option to 'git notes merge' allow the user
to choose how notes merge conflicts should be resolved. There are four valid
strategies to choose from:

1. ""manual"" (the default): This will let the user manually resolve conflicts.
   This option currently fails with an error message. It will be implemented
   properly in future patches.

2. ""ours"": This automatically chooses the local version of a conflict, and
   discards the remote version.

3. ""theirs"": This automatically chooses the remote version of a conflict, and
   discards the local version.

4. ""union"": This automatically resolves the conflict by appending the remote
   version to the local version.

The strategies are implemented using the combine_notes_* functions from the
notes.h API.

The patch also includes testcases verifying the correct implementation of
these strategies.

This patch has been improved by the following contributions:
- Jonathan Nieder: Future-proof by always checking add_note() return value
- Stephen Boyd: Use test_commit
- Stephen Boyd: Use correct option name

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",561,data/crawl/git/patch_1944.diff
https://github.com/git/git/commit/2085b16aefdbb1dc081aa40c62eb8110a222731d,17 Nov 2010,"git notes merge: Handle real, non-conflicting notes merges

This continuation of the 'git notes merge' implementation teaches notes-merge
to properly do real merges between notes trees: Two diffs are performed, one
from $base to $remote, and another from $base to $local. The paths in each
diff are normalized to SHA1 object names. The two diffs are then consolidated
into a single list of change pairs to be evaluated. Each change pair consist
of:

  - The annotated object's SHA1
  - The $base SHA1 (i.e. the common ancestor notes for this object)
  - The $local SHA1 (i.e. the current notes for this object)
  - The $remote SHA1 (i.e. the to-be-merged notes for this object)

From the pair ($base -> $local, $base -> $remote), we can determine the merge
result using regular 3-way rules. If conflicts are encountered in this
process, we fail loudly and exit (conflict handling to be added in a future
patch), If we can complete the merge without conflicts, the resulting
notes tree is committed, and the current notes ref updated.

The patch includes added testcases verifying that we can successfully do real
conflict-less merges.

This patch has been improved by the following contributions:
- Jonathan Nieder: Future-proof by always checking add_note() return value
- Stephen Boyd: Use test_commit
- Jonathan Nieder: Use trace_printf(...) instead of OUTPUT(o, 5, ...)
- Junio C Hamano: fixup minor style issues

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Stephen Boyd <bebarino@gmail.com>
Thanks-to: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",543,data/crawl/git/patch_1945.diff
https://github.com/git/git/commit/56881843d4d916a166ac4c6ba1803e5ceba9c44d,17 Nov 2010,"builtin/notes.c: Refactor creation of notes commits.

Create new function create_notes_commit() which is slightly more general than
commit_notes() (accepts multiple commit parents and does not auto-update the
notes ref). This function will be used by the notes-merge functionality in
future patches.

Also rewrite builtin/notes.c:commit_notes() to reuse this new function.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_1946.diff
https://github.com/git/git/commit/75ef3f4a5cc69b21bc825ed0e739030d77a4f077,17 Nov 2010,"git notes merge: Initial implementation handling trivial merges only

This initial implementation of 'git notes merge' only handles the trivial
merge cases (i.e. where the merge is either a no-op, or a fast-forward).

The patch includes testcases for these trivial merge cases.

Future patches will extend the functionality of 'git notes merge'.

This patch has been improved by the following contributions:
- Stephen Boyd: Simplify argc logic
- Stephen Boyd: Use test_commit
- Ævar Arnfjörð Bjarmason: Don't use C99 comments.
- Jonathan Nieder: Add constants for common verbosity values
- Jonathan Nieder: Use trace_printf(...) instead of OUTPUT(o, 5, ...)
- Jonathan Nieder: Remove extraneous show() function
- Jonathan Nieder: Clarify handling of empty/missing notes ref in notes_merge()
- Junio C Hamano: fixup minor style issues

Thanks-to: Stephen Boyd <bebarino@gmail.com>
Thanks-to: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",392,data/crawl/git/patch_1947.diff
https://github.com/git/git/commit/32a36b4d6f3207f5c01e928085b13af87bf223a1,17 Nov 2010,"(trivial) t3303: Indent with tabs instead of spaces for consistency

The rest of the file uses tabs for indenting. Fix the one function
that doesn't.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1948.diff
https://github.com/git/git/commit/180619a58572b17de0ebeb96989e0aa832765186,17 Nov 2010,"notes.h/c: Propagate combine_notes_fn return value to add_note() and beyond

The combine_notes_fn functions uses a non-zero return value to indicate
failure. However, this return value was converted to a call to die()
in note_tree_insert().

Instead, propagate this return value out to add_note(), and return it
from there to enable the caller to handle errors appropriately.

Existing add_note() callers are updated to die() upon failure, thus
preserving the current behaviour. The only exceptions are copy_note()
and notes_cache_put() where we are able to propagate the add_note()
return value instead.

This patch has been improved by the following contributions:
- Jonathan Nieder: Future-proof by always checking add_note() return value
- Jonathan Nieder: Improve clarity of final if-condition in note_tree_insert()

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_1949.diff
https://github.com/git/git/commit/71567e3287cbd1c06e311579d43a7d8cc0648722,16 Nov 2010,"clean: avoid quoting twice

qname is the result of quote_path_relative(), which does
quote_c_style_counted() internally. Remove the hard-coded quotes.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_1950.diff
https://github.com/git/git/commit/172b6428d06ff4eb0812f087a497d50b6c878fe1,15 Nov 2010,"do not overwrite untracked during merge from unborn branch

In case HEAD does not point to a valid commit yet, merge is
implemented as a hard reset. This will cause untracked files to be
overwritten.

Instead, assume the empty tree for HEAD and do a regular merge. An
untracked file will cause the merge to abort and do nothing. If no
conflicting files are present, the merge will have the same effect
as a hard reset.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1951.diff
https://github.com/git/git/commit/7dce19d374a37932e9d4c3a6202af407cf5114eb,12 Nov 2010,"fetch/pull: Add the --recurse-submodules option

Until now you had to call ""git submodule update"" (without -N|--no-fetch
option) or something like ""git submodule foreach git fetch"" to fetch
new commits in populated submodules from their remote.

This could lead to ""(commits not present)"" messages in the output of
""git diff --submodule"" (which is used by ""git gui"" and ""gitk"") after
fetching or pulling new commits in the superproject and is an obstacle for
implementing recursive checkout of submodules. Also ""git submodule
update"" cannot fetch changes when disconnected, so it was very easy to
forget to fetch the submodule changes before disconnecting only to
discover later that they are needed.

This patch adds the ""--recurse-submodules"" option to recursively fetch
each populated submodule from the url configured in the .git/config of the
submodule at the end of each ""git fetch"" or during ""git pull"" in the
superproject. The submodule paths are taken from the index.

The hidden option ""--submodule-prefix"" is added to ""git fetch"" to be able
to print out the full paths of nested submodules.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",248,data/crawl/git/patch_1952.diff
https://github.com/git/git/commit/b0613ce0f9ef3fd111f8c75b84ddd12f9f04fc87,10 Nov 2010,"wrapper: give zlib wrappers their own translation unit

Programs using xmalloc() but not git_inflate() require -lz on the
linker command line because git_inflate() is in the same translation
unit as xmalloc().

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/patch_1953.diff
https://github.com/git/git/commit/33f239365cce2682a1faac0d5670d684aa1981ad,10 Nov 2010,"path helpers: move git_mkstemp* to wrapper.c

git_mkstemp_mode and related functions do not require access to
specialized git machinery, unlike some other functions from
path.c (like set_shared_perm()).  Move them to wrapper.c where
the wrapper xmkstemp_mode is defined.

This eliminates a dependency of wrapper.o on environment.o via
path.o.  With typical linkers (e.g., gcc), that dependency makes
programs that use functions from wrapper.o and not environment.o
or path.o larger than they need to be.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",226,data/crawl/git/patch_1954.diff
https://github.com/git/git/commit/58ecbd5edeb2357c313db75bc49d45981a2061b7,10 Nov 2010,"wrapper: move xmmap() to sha1_file.c

wrapper.o depends on sha1_file.o for a number of reasons.  One is
release_pack_memory().

xmmap function calls mmap, discarding unused pack windows when
necessary to relieve memory pressure.  Simple git programs using
wrapper.o as a friendly libc do not need this functionality.
So move xmmap to sha1_file.o, where release_pack_memory() is.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_1955.diff
https://github.com/git/git/commit/f6ce1f25885f3db71935b201c5e3c858eb993f5c,10 Nov 2010,"cherry-pick/revert: transparently refresh index

A stat-dirty index is not a detail that ought to concern the operator
of porcelain such as ""git cherry-pick"".

Without this change, a cherry-pick after copying a worktree with rsync
errors out with a misleading message.

	$ git cherry-pick build/top
	error: Your local changes to 'file.h' would be overwritten by merge.  Aborting.
	Please, commit your changes or stash them before you can merge.

Noticed-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_1956.diff
https://github.com/git/git/commit/fb3340a6a7a956debcac92cd21cbcaea0928048e,09 Nov 2010,"test-lib: introduce test_line_count to measure files

Some tests check their output with code like the following:

	test ""$(git ls-files -u B | wc -l)"" -eq 3 || {
		echo ""BAD: should have left stages for B""
		return 1
	}

The verbose failure condition is used because test, unlike
diff, does not print any useful information about the
nature of the failure when it fails.

Introduce a test_line_count function to help. If used like

	git ls-files -u B >output &&
	test_line_count -eq 3 output

it will produce output like

	test_line_count: line count for output !-eq 3
	100644 b023018cabc396e7692c70bbf5784a93d3f738ab 2	hi.c
	100644 45b983be36b73c0788dc9cbcb76cbb80fc7bb057 3	hi.c

on failure.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_1957.diff
https://github.com/git/git/commit/a666b472c7d9e72bfacf4145405dbe8924ee153d,04 Nov 2010,"daemon: opt-out on features that require posix

Windows does not supply the POSIX-functions fork(), setuuid(), setgid(),
setsid() and initgroups(). Error out if --user or --detach is specified
when if so.

MinGW doesn't have prototypes and headers for inet_ntop and inet_pton,
so include our implementation instead. MSVC does, so avoid doing so
there.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/patch_1958.diff
https://github.com/git/git/commit/9cddf56ef13c8575ac0c68d82e6196e5b0a2900d,04 Nov 2010,"daemon: make --inetd and --detach incompatible

Since --inetd makes main return with the result of execute() before
daemonize is gets called, these two options are already incompatible.

Document it, and add an error if attempted.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_1959.diff
https://github.com/git/git/commit/fdc12114635581b6901940ddb467a78716bc12ca,04 Nov 2010,"mingw: use poll-emulation from gnulib

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_1960.diff
https://github.com/git/git/commit/30e1560230bc0154230b315a5f7c4f46870f9c81,04 Nov 2010,"daemon: use run-command api for async serving

fork() is only available on POSIX, so to support git-daemon
on Windows we have to use something else.

Instead we invent the flag --serve, which is a stripped down
version of --inetd-mode. We use start_command() to call
git-daemon with this flag appended to serve clients.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_1961.diff
https://github.com/git/git/commit/088d880247dc7bb1a27f07e320bab7f9b63e06bc,04 Nov 2010,"mingw: implement syslog

Syslog does not usually exist on Windows, so implement our own using
Window's ReportEvent mechanism.

Strings containing ""%1"" gets expanded into them selves by ReportEvent,
resulting in an unreadable string. ""%2"" and above is not a problem.
Unfortunately, on Windows an IPv6 address can contain ""%1"", so expand
""%1"" to ""% 1"" before reporting. ""%%1"" is also a problem for ReportEvent,
but that string cannot occur in an IPv6 address.

Signed-off-by: Mike Pape <dotzenlabs@gmail.com>
Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_1962.diff
https://github.com/git/git/commit/772991af40e139814368762d4075be324bfdab77,04 Nov 2010,"mingw: add network-wrappers for daemon

git-daemon requires some socket-functionality that is not yet
supported in the Windows-port. This patch adds said functionality,
and makes sure WSAStartup gets called by socket(), since it is the
first network-call in git-daemon.

Signed-off-by: Mike Pape <dotzenlabs@gmail.com>
Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_1963.diff
https://github.com/git/git/commit/89ac1223c08a19a83f6efb32234ed8665d5ad1ee,04 Nov 2010,"commit: --squash option for use with rebase --autosquash

This option makes it convenient to construct commit messages for use
with 'rebase --autosquash'.  The resulting commit message will be
""squash! ..."" where ""..."" is the subject line of the specified commit
message.  This option can be used with other commit message options
such as -m, -c, -C and -F.

If an editor is invoked (as with -c or -eF or no message options) the
commit message is seeded with the correctly formatted subject line.

Example usage:
  $ git commit --squash HEAD~2
  $ git commit --squash HEAD~2 -m ""clever comment""
  $ git commit --squash HEAD~2 -F msgfile
  $ git commit --squash HEAD~2 -C deadbeef

Signed-off-by: Pat Notz <patnotz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_1964.diff
https://github.com/git/git/commit/d71b8ba7c959e414d36974af890e3e2cbd2acbb9,04 Nov 2010,"commit: --fixup option for use with rebase --autosquash

This option makes it convenient to construct commit messages for use
with 'rebase --autosquash'.  The resulting commit message will be
""fixup! ..."" where ""..."" is the subject line of the specified commit
message.

Example usage:
  $ git commit --fixup HEAD~2

Signed-off-by: Pat Notz <patnotz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_1965.diff
https://github.com/git/git/commit/a6fa59924d154f2dcfc331357bf553e043aa0242,04 Nov 2010,"commit: helper methods to reduce redundant blocks of code

* builtin/commit.c: Replace block of code with a one-liner call to
  logmsg_reencode().

* commit.c: new function for looking up a comit by name

* pretty.c: helper methods for getting output encodings

  Add helpers get_log_output_encoding() and
  get_commit_output_encoding() that eliminate some messy and duplicate
  if-blocks.

Signed-off-by: Pat Notz <patnotz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_1966.diff
https://github.com/git/git/commit/3ba7a065527a27f45659398e882feaa1165cbb4c,03 Nov 2010,"A loose object is not corrupt if it cannot be read due to EMFILE

""git fsck"" bails out with a claim that a loose object that cannot be
read but exists on the filesystem to be corrupt, which is wrong when
read_object() failed due to e.g. EMFILE.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1967.diff
https://github.com/git/git/commit/b6c4ceccb3d6026c612fa55865c51374b26eb176,03 Nov 2010,"read_sha1_file(): report correct name of packfile with a corrupt object

Clarify the error reporting logic by moving the normal codepath (i.e. we
read the object we wanted to read correctly) up and return early.

The logic to report the name of the packfile with a corrupt object,
introduced by e8b15e6 (sha1_file: Show the the type and path to corrupt
objects, 2010-06-10), was totally bogus.  The function that knows which
bad object came from what packfile is has_packed_and_bad(); make it report
which packfile the problem was found.

""Corrupt"" is already an adjective, e.g. an object is ""corrupt""; we do not
have to say ""corrupted object"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_1968.diff
https://github.com/git/git/commit/24305cd7009d682ba4115103c95844446a2bb305,29 Oct 2010,"apply: don't segfault on binary files with missing data

Usually when applying a binary diff generated without
--binary, it will be rejected early, as we don't even have
the full sha1 of the pre- and post-images.

However, if the diff is generated with --full-index (but not
--binary), then we will actually try to apply it. If we have
the postimage blob, then we can take a shortcut and never
even look at the binary diff at all (e.g., this can happen
when rebasing changes within a repository).

If we don't have the postimage blob, though, we try to look
at the actual fragments, of which there are none, and get a
segfault. This patch checks explicitly for that case and
complains to the user instead of segfaulting. We need to
keep the check at a low level so that the ""shortcut"" case
above continues to work.

We also add a test that demonstrates the segfault. While
we're at it, let's also explicitly test the shortcut case.

Reported-by: Rafaël Carré <rafael.carre@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1969.diff
https://github.com/git/git/commit/71064a956b25ef519eab340e364d0bc0e786bd11,22 Oct 2010,"make pack-objects a bit more resilient to repo corruption

Right now, packing valid objects could fail when creating a thin pack
simply because a pack edge object used as a preferred base is corrupted.
Since preferred base objects are not strictly needed to produce a valid
pack, let's not consider the inability to read them as a fatal error.
Delta compression may well be attempted against other objects in the
search window.  To avoid warning storms (we are in the inner loop of
the delta search window) a warning is emitted only on the first
occurrence.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1970.diff
https://github.com/git/git/commit/c50c4316e1eed362bee387e4cbfbe1138957f75b,22 Oct 2010,"diff: don't presume empty file when corresponding object is missing

The low-level diff code will happily produce totally bogus diff output
with a broken repository via format-patch and friends by treating missing
objects as empty files.  Let's prevent that from happening any longer.

Reported-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1971.diff
https://github.com/git/git/commit/07cd7265274ba6aed2589e6b22eae7d413640037,21 Oct 2010,"diff: report bogus input to -C/-M/-B

We already detect invalid input to these functions, but we
simply exit with an error code, never saying anything as
simple as ""your input was wrong"". Let's fix that.

Before:

  $ git diff -CM
  $ echo $?
  128

After:

  $ git diff -CM
  error: invalid argument to -C: M
  $ echo $?
  128

There should be no problems with having diff_opt_parse print
to stderr, as there is already precedent in complaining
about bogus --color and --output arguments.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_1972.diff
https://github.com/git/git/commit/1f2baa78c61bc99fe82bc62fc6d5a8d307984f3d,21 Oct 2010,"config: treat non-existent config files as empty

The git_config() function signals error by returning -1 in
two instances:

  1. An actual error occurs in opening a config file (parse
     errors cause an immediate die).

  2. Of the three possible config files, none was found.

However, this second case is often not an error at all; it
simply means that the user has no configuration (they are
outside a repo, and they have no ~/.gitconfig file). This
can lead to confusing errors, such as when the bash
completion calls ""git config --list"" outside of a repo. If
the user has a ~/.gitconfig, the command completes
succesfully; if they do not, it complains to stderr.

This patch allows callers of git_config to distinguish
between the two cases. Error is signaled by -1, and
otherwise the return value is the number of files parsed.
This means that the traditional ""git_config(...) < 0"" check
for error should work, but callers who want to know whether
we parsed any files or not can still do so.

[jc: with tests from Jonathan]

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1973.diff
https://github.com/git/git/commit/1b8cdce94f4fff2408f8ed26fe4fc2f187a46794,19 Oct 2010,"blame: Add option to show author email instead of name

Add a new option -e (or --show-email) to git-blame that will display
the author's email instead of name on each line. This option works
for both git-blame and git-annotate.

Signed-off-by: Kevin Ballard <kevin@sb.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_1974.diff
https://github.com/git/git/commit/2794ad524462c4e2ecd4573d650e7b4f8da89a5d,13 Oct 2010,"fast-import: Allow filemodify to set the root

v1.7.3-rc0~75^2 (Teach fast-import to import subtrees named by tree id,
2010-06-30) has a shortcoming - it doesn't allow the root to be set.
Extend this behaviour by allowing the root to be referenced as the
empty path, """".

For a command (like filter-branch --subdirectory-filter) that wants
to commit a lot of trees that already exist in the object db, writing
undeltified objects as loose files only to repack them later can
involve a significant amount of overhead.
(23% slow-down observed on Linux 2.6.35, worse on Mac OS X 10.6)

Fortunately we have fast-import (which is one of the only git commands
that will write to a pack directly) but there is not an advertised way
to tell fast-import to commit a given tree without unpacking it.

This patch changes that, by allowing

	M 040000 <tree id> """"

as a filemodify line in a commit to reset to a particular tree without
any need to parse it.  For example,

	M 040000 4b825dc642cb6eb9a060e54bf8d69288fbee4904 """"

is a synonym for the deleteall command and the fast-import equivalent of

	git read-tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904

Signed-off-by: David Barr <david.barr@cordelta.com>
Commit-message-by: Jonathan Nieder <jrnieder@gmail.com>
Acked-by: Sverre Rabbelier <srabbelier@gmail.com>
Tested-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_1975.diff
https://github.com/git/git/commit/79bc2af5ae161d1e81b57313c81fb81e3ec6c57d,07 Oct 2010,"commit-tree: free commit message before exiting

This buffer is freed by the C runtime when commit-tree exits moments
later, but freeing it explicitly should make valgrind quieter.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_1976.diff
https://github.com/git/git/commit/442dada22d3b6e511d30b05a80bab153619e52a7,01 Oct 2010,"MinGW: Report errors when failing to launch the html browser.

The mingw function to launch the system html browser is silent if the
target file does not exist leaving the user confused. Make it display
something.

Signed-off-by: Pat Thoyts <patthoyts@users.sourceforge.net>
Reviewed-by: Erik Faye-Lund <kusmabite@gmail.com>",8,data/crawl/git/patch_1977.diff
https://github.com/git/git/commit/8713feb16dd6a472828bbdcf914a1c8f5c6810a2,30 Sep 2010,"Make sure that git_getpass() never returns NULL

The result of git_getpass() is used without checking for NULL, so let's
just die() instead of returning NULL.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_1978.diff
https://github.com/git/git/commit/9ec26eb7cd7767faffac9bac5e22ede0d25e20e3,29 Sep 2010,"diff: trivial fix for --output file error message

The option argument is either after the equal sign in --output=... or in
the next command-line argument. optarg is the reliable way to access it.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_1979.diff
https://github.com/git/git/commit/5aaeb733f5745b37878901c4687ba67c6a70e581,13 Sep 2010,"log --author: take union of multiple ""author"" requests

In the olden days,

    log --author=me --committer=him --grep=this --grep=that

used to be turned into:

    (OR (HEADER-AUTHOR me)
        (HEADER-COMMITTER him)
        (PATTERN this)
        (PATTERN that))

showing my patches that do not have any ""this"" nor ""that"", which was
totally useless.

80235ba (""log --author=me --grep=it"" should find intersection, not union,
2010-01-17) improved it greatly to turn the same into:

    (ALL-MATCH
      (HEADER-AUTHOR me)
      (HEADER-COMMITTER him)
      (OR (PATTERN this) (PATTERN that)))

That is, ""show only patches by me and committed by him, that have either
this or that"", which is a lot more natural thing to ask.

We however need to be a bit more clever when the user asks more than one
""author"" (or ""committer""); because a commit has only one author (and one
committer), they ought to be interpreted as asking for union to be useful.
The current implementation simply added another author/committer pattern
at the same top-level for ALL-MATCH to insist on matching all, finding
nothing.

Turn

    log --author=me --author=her \
    	--committer=him --committer=you \
	--grep=this --grep=that

into

    (ALL-MATCH
      (OR (HEADER-AUTHOR me) (HEADER-AUTHOR her))
      (OR (HEADER-COMMITTER him) (HEADER-COMMITTER you))
      (OR (PATTERN this) (PATTERN that)))

instead.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_1980.diff
https://github.com/git/git/commit/95ce9ce296e1636a2b78e73b96905d781ef2ddc7,13 Sep 2010,"grep: move logic to compile header pattern into a separate helper

The callers should be queuing only GREP_PATTERN_HEAD elements to the
header_list queue; simplify the switch and guard it with an assert.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_1981.diff
https://github.com/git/git/commit/5418d96ddca8134b5abeb99430f61c062d91f722,12 Sep 2010,"vcs-svn: Fix some printf format compiler warnings

In particular, on systems that define uint32_t as an unsigned long,
gcc complains as follows:

      CC vcs-svn/fast_export.o
  vcs-svn/fast_export.c: In function `fast_export_modify':
  vcs-svn/fast_export.c:28: warning: unsigned int format, uint32_t arg (arg 2)
  vcs-svn/fast_export.c:28: warning: int format, uint32_t arg (arg 3)
  vcs-svn/fast_export.c: In function `fast_export_commit':
  vcs-svn/fast_export.c:42: warning: int format, uint32_t arg (arg 5)
  vcs-svn/fast_export.c:62: warning: int format, uint32_t arg (arg 2)
  vcs-svn/fast_export.c: In function `fast_export_blob':
  vcs-svn/fast_export.c:72: warning: int format, uint32_t arg (arg 2)
  vcs-svn/fast_export.c:72: warning: int format, uint32_t arg (arg 3)
      CC vcs-svn/svndump.o
  vcs-svn/svndump.c: In function `svndump_read':
  vcs-svn/svndump.c:260: warning: int format, uint32_t arg (arg 3)

In order to suppress the warnings we use the C99 format specifier
macros PRIo32 and PRIu32 from <inttypes.h>.

Signed-off-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Acked-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_1982.diff
https://github.com/git/git/commit/fb1bb96516d4bc985393c0bfb8bb7a6d6ce95045,10 Sep 2010,"read-tree: deprecate syntax without tree-ish args

Currently, read-tree can be run without tree-ish arguments, in which
case it will empty the index. Since this behavior is undocumented and
perhaps a bit too invasive to be the ""default"" action for read-tree,
deprecate it in favor of a new --empty option that does the same thing.

Signed-off-by: Jan Krüger <jk@jk.gs>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1983.diff
https://github.com/git/git/commit/18a826924284339e2b637ab747f196235bee1939,09 Sep 2010,"tests: subshell indentation stylefix

Format the subshells introduced by the previous patch (Several tests:
cd inside subshell instead of around, 2010-09-06) like so:

	(
		cd subdir &&
		...
	) &&

This is generally easier to read and has the nice side-effect that
this patch will show what commands are used in the subshell, making
it easier to check for lost environment variables and similar
behavior changes.

Cc: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",452,data/crawl/git/patch_1984.diff
https://github.com/git/git/commit/bda3b8ff1735aecfb5265ed781548eab238d7a14,09 Sep 2010,"merge: Make 'merge.log' an integer or boolean option

Make 'merge.log' an integer or boolean option to set the number of
shortlog entries to display in the merge commit. Note that it defaults
to false, and that true means a default value of 20. Also update
corresponding documentation.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Johannes Sixt <j.sixt@viscovery.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1985.diff
https://github.com/git/git/commit/96e9420cd357728949571b42eb0249881ae3a78e,09 Sep 2010,"merge: Make '--log' an integer option for number of shortlog entries

Change the command-line '--log' option from a boolean option to an
integer option, and parse the optional integer provided on the
command-line into the 'shortlog_len' variable. Also update the
documentation accordingly.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Reported-by: Yaroslav Halchenko <debian@onerussian.com>
Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Johannes Sixt <j.sixt@viscovery.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_1986.diff
https://github.com/git/git/commit/fd4ec4f2bb980ce07bb28d5823a95610f251d00b,06 Sep 2010,"Several tests: cd inside subshell instead of around

Fixed all places where it was a straightforward change from cd'ing into a
directory and back via ""cd .."" to a cd inside a subshell.

Found these places with ""git grep -w ""cd \.\."".

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",516,data/crawl/git/patch_1987.diff
https://github.com/git/git/commit/d2c030d4773f1f00165bffc34e2487043df326e7,06 Sep 2010,"tag.c: whitespace breakages fix

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_1988.diff
https://github.com/git/git/commit/f506b8e8b5fb231e63b69668b6b7516f12b32228,31 Aug 2010,"git log/diff: add -G<regexp> that greps in the patch text

Teach ""-G<regexp>"" that is similar to ""-S<regexp> --pickaxe-regexp"" to the
""git diff"" family of commands.  This limits the diff queue to filepairs
whose patch text actually has an added or a deleted line that matches the
given regexp.  Unlike ""-S<regexp>"", changing other parts of the line that
has a substring that matches the given regexp IS counted as a change, as
such a change would appear as one deletion followed by one addition in a
patch text.

Unlike -S (pickaxe) that is intended to be used to quickly detect a commit
that changes the number of occurrences of hits between the preimage and
the postimage to serve as a part of larger toolchain, this is meant to be
used as the top-level Porcelain feature.

The implementation unfortunately has to run ""diff"" twice if you are
running ""log"" family of commands to produce patches in the final output
(e.g. ""git log -p"" or ""git format-patch"").  I think we _could_ cache the
result in-core if we wanted to, but that would require larger surgery to
the diffcore machinery (i.e. adding an extra pointer in the filepair
structure to keep a pointer to a strbuf around, stuff the textual diff to
the strbuf inside diffgrep_consume(), and make use of it in later stages
when it is available) and it may not be worth it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",168,data/crawl/git/patch_1989.diff
https://github.com/git/git/commit/1ee1e43df37e53b0bc50a0eda57dd1772dc220f5,31 Aug 2010,"notes: Don't create (empty) commit when removing non-existing notes

Extend remove_note() in the notes API to return whether or not a note was
actually removed. Use this in 'git notes remove' to skip the creation of
a notes commit when no notes were actually removed.

Also add a test illustrating the change in behavior.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_1990.diff
https://github.com/git/git/commit/0f5cdf653b8be5b8fad3fb2a3eaecfb9da80d215,27 Aug 2010,"bundle: detect if bundle file cannot be created

bundle command silently died with no sign of failure if it
could not create the bundle file. (Eg.: its path resovles to a directory,
or the parent dir is sticky while file already exists and is owned
by someone else.)

Signed-off-by: Csaba Henk <csaba@gluster.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_1991.diff
https://github.com/git/git/commit/9f29fe9a779e55e7387577cd7f712de0b13b5cd6,27 Aug 2010,"shell: Display errors from improperly-formatted command lines

The interface for split_cmdline has changed such that the caller holds
responsibility for printing any error messages.  This patch changes
the git shell to print these error messages as appropriate.

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_1992.diff
https://github.com/git/git/commit/70256a3a6780a9fd181edf0bf0e762eb56637c9c,24 Aug 2010,"shell: Rewrite documentation and improve error message

Update the documentation of 'git shell' to mention the interactive
mode and COMMAND_DIR. Also provide a hint when interactive mode is not
available in the shell.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Reviewed-by: Greg Brockman <gdb@MIT.EDU>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_1993.diff
https://github.com/git/git/commit/9c46c054ae426cf1d064f651615ce699d038d276,24 Aug 2010,"rev-parse: tests git rev-parse --verify master@{n}, for various n

This commit introduces tests that verify that rev-parse
parses master@{n} correctly for various values of n less
than, equal to and greater than the number of revisions
in the reference log.

In particular, these tests check that rev-parse exits with a
non-zero status code and prints a message of the
following form to stderr.

    fatal: Log for [^ ]* only has [0-9][0-9]* entries.

Signed-off-by: Jon Seymour <jon.seymour@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_1994.diff
https://github.com/git/git/commit/eedce784a7492faa370fd96e372c948cba087965,24 Aug 2010,"sha1_name.c: use warning in preference to fprintf(stderr

This commit changes sha1_name.c to use warning instead of
fprintf(stderr).

Trailing newlines from message formats have been removed
since warning adds one itself.

Signed-off-by: Jon Seymour <jon.seymour@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1995.diff
https://github.com/git/git/commit/e6eedc31d5c3d448d000eecb678ce891a4800b54,24 Aug 2010,"rev-parse: exit with non-zero status if ref@{n} is not valid.

""The current behaviour of ref@{...} syntax parser is suboptimal:

    $ git rev-parse --verify jch@{99999} && echo true
    warning: Log for 'jch' only has 1368 entries.
    cfb88e9a8d4926b0011ae2dd67e1f57a98f4b768
    true

It even knows that it is running off the cut-off point; it should just
cause the caller to notice that fact.  I don't think changing it to error
out should cause any harm to existing callers.""

With this change:

   $ git rev-parse --verify jch@{99999} || echo false
   fatal: Log for 'jch' only has 1368 entries.
   false

   $ git rev-parse jch@{99999} || echo false
   fatal: Log for 'jch' only has 1368 entries.
   false

Signed-off-by: Jon Seymour <jon.seymour@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_1996.diff
https://github.com/git/git/commit/2b64fc894dada0916558fd0bfd19c50631f978cb,24 Aug 2010,"pass ""git -c foo=bar"" params through environment

Git uses the ""-c foo=bar"" parameters to set a config
variable for a single git invocation. We currently do this
by making a list in the current process and consulting that
list in git_config.

This works fine for built-ins, but the config changes are
silently ignored by subprocesses, including dashed externals
and invocations to ""git config"" from shell scripts.

This patch instead puts them in an environment variable
which we consult when looking at config (both internally and
via calls ""git config"").

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_1997.diff
https://github.com/git/git/commit/24c61c44e65f672ffcd032e43519824719d249c4,24 Aug 2010,"clone: warn users --depth is ignored in local clones

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_1998.diff
https://github.com/git/git/commit/22e5e58a3c75b73764b860907e4d871195f276ac,22 Aug 2010,"Typos in code comments, an error message, documentation

Signed-off-by: Ralf Wildenhues <Ralf.Wildenhues@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_1999.diff
https://github.com/git/git/commit/a4941a81c8a67abad2000b044ecad71ceff9d695,22 Aug 2010,"reset: suggest what to do upon ""git reset --mixed <paths>""

When you call ""git reset --mixed <paths>"" git will warn that using mixed
with paths is deprecated:

    warning: --mixed option is deprecated with paths.

That doesn't tell the user what he should use instead. Expand on the
warning and tell the user to just omit --mixed:

    warning: --mixed with paths is deprecated; use 'git reset -- <paths>' instead

The exact wording of the warning was suggested by Jonathan Nieder.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2000.diff
https://github.com/git/git/commit/09a0ec58ce57413dcb2b2cfb4b4ece11ad616e7b,20 Aug 2010,"builtin/checkout: Fix message when switching to an existing branch

Fix ""Switched to a new branch <name>"" to read ""Switched to branch
<name>"" when <name> corresponds to an existing branch. This bug was
introduced in 02ac983 while introducing the `-B` switch.

Cc: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2001.diff
https://github.com/git/git/commit/8bd9fd50014424643bddfde51423d42e0fc60800,20 Aug 2010,"xmalloc: include size in the failure message

Out-of-memory errors can either be actual lack of memory, or bugs (like
code trying to call xmalloc(-1) by mistake). A little more information
may help tracking bugs reported by users.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2002.diff
https://github.com/git/git/commit/d18f76dccff1fc56221846926edb4542d88f60e0,18 Aug 2010,"compat/regex: use the regex engine from gawk for compat

Change the regex engine in compat to use the gawk engine from the
gawk-devel module in gawk CVS. This engine supports the REG_STARTEND
flag, which was optionally available in Git since v1.7.2-rc0~77^2~1.

The source was grabbed from cvs.savannah.gnu.org:/sources/gawk, and
these are the upstream versions of the files being included:

    regcomp.c               1.4
    regex.h                 1.3
    regex.h                 1.3
    regex_internal.c        1.3
    regex_internal.h        1.3
    regexec.c               1.3

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Acked-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16285,data/crawl/git/patch_2003.diff
https://github.com/git/git/commit/a1e0ad78b784fd7c47c7bc2847f4813aca4cebaf,18 Aug 2010,"merge-base --independent to print reduced parent list in a merge

While show-branch --independent does not support more than MAX_REVS
revs, git internally supports more with a different algorithm.
Expose that functionality as ""git merge-base --independent"".

This should help scripts to catch up with builtin merge in supporting
dodecapus.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_2004.diff
https://github.com/git/git/commit/aa8f98c1bfcf162e0bd23d20c34857940f2c2256,18 Aug 2010,"merge-base --octopus to mimic show-branch --merge-base

While show-branch --merge-base does not support more than MAX_REVS
revs, git supports more with a different algorithm
(v1.6.0-rc0~51^2~13, Introduce get_octopus_merge_bases() in commit.c,
2008-06-27).  Expose that functionality.

This should help scripts to catch up with builtin merge in supporting
dodecapus.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2005.diff
https://github.com/git/git/commit/314eeb6e483350cc7ef0bee0498ff24a12346495,16 Aug 2010,"cherry-pick/revert: Use advise() for hints

When cherry-pick fails after picking a large series of commits, it can
be hard to pick out the error message and advice.  Prefix the advice
with “hint: ” to help.

Before:

    error: could not apply 7ab78c9... foo
      After resolving the conflicts,
    mark the corrected paths with 'git add <paths>' or 'git rm <paths>'
    and commit the result with:

            git commit -c 7ab78c9a7898b87127365478431289cb98f8d98f

After:

    error: could not apply 7ab78c9... foo
    hint: after resolving the conflicts, mark the corrected paths
    hint: with 'git add <paths>' or 'git rm <paths>'
    hint: and commit the result with 'git commit -c 7ab78c9'

Noticed-by: Thomas Rast <trast@student.ethz.ch>
Encouraged-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_2006.diff
https://github.com/git/git/commit/981ff5c37ae20687c98d98c8689d5e89016026d2,16 Aug 2010,"cherry-pick/revert: Use error() for failure message

When cherry-pick fails after picking a large series of commits, it can
be hard to pick out the error message and advice.  Clarify the error
and prefix it with “error: ” to help.

Before:

	Automatic cherry-pick failed.  [...advice...]

After:

	error: could not apply 7ab78c9... Do something neat.
	[...advice...]

Noticed-by: Thomas Rast <trast@student.ethz.ch>
Encouraged-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2007.diff
https://github.com/git/git/commit/2a41dfb03b93c3e5b7d1deca537276aed063a044,16 Aug 2010,"Introduce advise() to print hints

Like error(), warn(), and die(), advise() prints a short message
with a formulaic prefix to stderr.

It is local to revert.c for now because I am not sure this is
the right API (we may want to take an array of advice lines or a
boolean argument for easy suppression of unwanted advice).

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2008.diff
https://github.com/git/git/commit/130ab8ab9c64b59b367c08a041200b6b75758b91,16 Aug 2010,"Eliminate “Finished cherry-pick/revert” message

When cherry-pick was written (v0.99.6~63, 2005-08-27), “git commit”
was quiet, and the output from cherry-pick provided useful information
about the progress of a rebase.

Now next to the output from “git commit”, the cherry-pick notification
is so much noise (except for the name of the picked commit).

 $ git cherry-pick ..topic
 Finished cherry-pick of 499088b.
 [detached HEAD 17e1ff2] Move glob module to libdpkg
  Author: Guillem Jover <guillem@debian.org>
  8 files changed, 12 insertions(+), 9 deletions(-)
  rename {src => lib/dpkg}/glob.c (98%)
  rename {src => lib/dpkg}/glob.h (93%)
 Finished cherry-pick of ae947e1.
 [detached HEAD 058caa3] libdpkg: Add missing symbols to Versions script
  Author: Guillem Jover <guillem@debian.org>
  1 files changed, 2 insertions(+), 0 deletions(-)
 $

The noise is especially troublesome when sifting through the output of
a rebase or multiple cherry-pick that eventually failed.

With the commit subject, it is already not hard to figure out where
the commit came from.  So drop the “Finished” message.

Cc: Christian Couder <chriscool@tuxfamily.org>
Cc: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_2009.diff
https://github.com/git/git/commit/6117abae569e53485f7a90d2595b135c7beb3c96,15 Aug 2010,"vcs-svn: Avoid %z in format string

In the spirit of v1.6.4-rc0~124 (MinGW: Fix compiler warning in
merge-recursive, 2009-05-23), use a 32-bit integer instead; the
dump file parser does not support any better, anyway.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2010.diff
https://github.com/git/git/commit/21746aa34fc99d2c73634bc9829387c27c109dbe,15 Aug 2010,"SVN dump parser

svndump parses data that is in SVN dumpfile format produced by
`svnadmin dump` with the help of line_buffer and uses repo_tree and
fast_export to emit a git fast-import stream.

Based roughly on com.hydrografix.svndump 0.92 from the SvnToCCase
project at <http://svn2cc.sarovar.org/>, by Stefan Hegny and
others.

[rr: allow input from files other than stdin]
[jn: with test, more error reporting]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",374,data/crawl/git/patch_2011.diff
https://github.com/git/git/commit/c0e6c23dca84227167a6fe1077503ddf32208919,15 Aug 2010,"Infrastructure to write revisions in fast-export format

repo_tree maintains the exporter's state and provides a facility to to
call fast_export, which writes objects to stdout suitable for
consumption by fast-import.

The exported functions roughly correspond to Subversion FS operations.

 . repo_add, repo_modify, repo_copy, repo_replace, and repo_delete
   update the current commit, based roughly on the corresponding
   Subversion FS operation.

 . repo_commit calls out to fast_export to write the current commit to
   the fast-import stream in stdout.

 . repo_diff is used by the fast_export module to write the changes
   for a commit.

 . repo_reset erases the exporter's state, so valgrind can be happy.

[rr: squelched compiler warnings]
[jn: removed support for maintaining state on-disk, though we may
want to add it back later]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",445,data/crawl/git/patch_2012.diff
https://github.com/git/git/commit/3bbaec00a8ffc6ea7e71c3b707851fe663d93a45,15 Aug 2010,"Add stream helper library

This library provides thread-unsafe fgets()- and fread()-like
functions where the caller does not have to supply a buffer.  It
maintains a couple of static buffers and provides an API to use
them.

[rr: allow input from files other than stdin]
[jn: with tests, documentation, and error handling improvements]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",276,data/crawl/git/patch_2013.diff
https://github.com/git/git/commit/1d73b52f5ba4184de6acf474f14668001304a10c,15 Aug 2010,"Add string-specific memory pool

Intern strings so they can be compared by address and stored without
wasting space.

This library uses the macros in the obj_pool.h and trp.h to create a
memory pool for strings and expose an API for handling them.

[rr: added API docs]
[jn: with some API simplifications, new documentation and tests]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",213,data/crawl/git/patch_2014.diff
https://github.com/git/git/commit/951f316470acc7c785c460a4e40735b22822349f,15 Aug 2010,"Add treap implementation

Provide macros to generate a type-specific treap implementation and
various functions to operate on it. It uses obj_pool.h to store memory
nodes in a treap.  Previously committed nodes are never removed from
the pool; after any *_commit operation, it is assumed (correctly, in
the case of svn-fast-export) that someone else must care about them.

Treaps provide a memory-efficient binary search tree structure.
Insertion/deletion/search are about as about as fast in the average
case as red-black trees and the chances of worst-case behavior are
vanishingly small, thanks to (pseudo-)randomness.  The bad worst-case
behavior is a small price to pay, given that treaps are much simpler
to implement.

>From http://www.canonware.com/download/trp/trp_hash/trp.h

[db: Altered to reference nodes by offset from a common base pointer]
[db: Bob Jenkins' hashing implementation dropped for Knuth's]
[db: Methods unnecessary for search and insert dropped]
[rr: Squelched compiler warnings]
[db: Added support for immutable treap nodes]
[jn: Reintroduced treap_nsearch(); with tests]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",433,data/crawl/git/patch_2015.diff
https://github.com/git/git/commit/4709455db3891f6cad9a96a574296b4926f70cbe,15 Aug 2010,"Add memory pool library

Add a memory pool library implemented using C macros. The
obj_pool_gen() macro creates a type-specific memory pool.

The memory pool library is distinguished from the existing specialized
allocators in alloc.c by using a contiguous block for all allocations.
This means that on one hand, long-lived pointers have to be written as
offsets, since the base address changes as the pool grows, but on the
other hand, the entire pool can be easily written to the file system.
This could allow the memory pool to persist between runs of an
application.

For the svn importer, such a facility is useful because each svn
revision can copy trees and files from any previous revision.  The
relevant information for all revisions has to persist somehow to
support incremental runs.

[rr: minor cleanups]
[jn: added tests; removed file system backing for now]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/patch_2016.diff
https://github.com/git/git/commit/e69164ddb9d6092a94915bb984749d48f598cea8,12 Aug 2010,"Add interactive mode to git-shell for user-friendliness

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_2017.diff
https://github.com/git/git/commit/2dbc887eaa6fbd787edfc9472b86b0faeb54e2ae,12 Aug 2010,"Allow creation of arbitrary git-shell commands

This provides a mechanism for the server to expose custom
functionality to clients.  My particular use case is that I would like
a way of discovering all repositories available for cloning.  A
client that clones via

  git clone user@example.com

can invoke a command by

  ssh user@example.com $command

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2018.diff
https://github.com/git/git/commit/e6c111b4c092c0dd24c541b9721f5bc04641dcb0,11 Aug 2010,"unpack_trees: group error messages by type

When an error is encountered, it calls add_rejected_file() which either
- directly displays the error message and stops if in plumbing mode
  (i.e. if show_all_errors is not initialized at 1)
- or stores it so that it will be displayed at the end with display_error_msgs(),

Storing the files by error type permits to have a list of files for
which there is the same error instead of having a serie of almost
identical errors.

As each bind_overlap error combines a file and an old file, a list cannot be
done, therefore, theses errors are not stored but directly displayed.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_2019.diff
https://github.com/git/git/commit/08402b0409bc501deb97cf4388a78ee9f87092c6,11 Aug 2010,"merge-recursive: distinguish ""removed"" and ""overwritten"" messages

To limit the number of possible error messages, the error messages for
the case would_lose_untracked_file and would_lose_orphaned in
unpack_trees_options.msgs were handled with a single string,
parameterized by an action string (""overwritten"" or ""removed"").

Instead, we consider them as two different cases, with unparameterized
string. This will make it easier to make separate lists sorted by error
types later.

Only the bind_overlap case still takes two %s parameters, but that's
unavoidable.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2020.diff
https://github.com/git/git/commit/08353ebbab2dfdee50a6daa616ec8b6483cb07c8,11 Aug 2010,"Turn unpack_trees_options.msgs into an array + enum

The list of error messages was introduced as a structure, but an array
indexed over an enum is more flexible, since it allows one to store a
type of error message (index in the array) in a variable.

This change needs to rename would_lose_untracked ->
would_lose_untracked_file to avoid a clash with the function
would_lose_untracked in merge-recursive.c.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_2021.diff
https://github.com/git/git/commit/ad9ac6db5d58de08d0497b9184e86926377c20dd,11 Aug 2010,"split_cmdline: Allow caller to access error string

This allows the caller to add its own error message to that returned
by split_cmdline.  Thus error output following a failed split_cmdline
can be of the form

fatal: Bad alias.test string: cmdline ends with \

rather than

error: cmdline ends with \
fatal: Bad alias.test string

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2022.diff
https://github.com/git/git/commit/aee9c7d6540fe6f66fbbe7be420caa26ae0fa2d9,09 Aug 2010,"Submodules: Add the new ""ignore"" config option for diff and status

The new ""ignore"" config option controls the default behavior for ""git
status"" and the diff family. It specifies under what circumstances they
consider submodules as modified and can be set separately for each
submodule.

The command line option ""--ignore-submodules="" has been extended to accept
the new parameter ""none"" for both status and diff.

Users that chose submodules to get rid of long work tree scanning times
might want to set the ""dirty"" option for those submodules. This brings
back the pre 1.7.0 behavior, where submodule work trees were never
scanned for modifications. By using ""--ignore-submodules=none"" on the
command line the status and diff commands can be told to do a full scan.

This option can be set to the following values (which have the same name
and meaning as for the ""--ignore-submodules"" option of status and diff):

""all"": All changes to the submodule will be ignored.

""dirty"": Only differences of the commit recorded in the superproject and
	the submodules HEAD will be considered modifications, all changes
	to the work tree of the submodule will be ignored. When using this
	value, the submodule will not be scanned for work tree changes at
	all, leading to a performance benefit on large submodules.

""untracked"": Only untracked files in the submodules work tree are ignored,
	a changed HEAD and/or modified files in the submodule will mark it
	as modified.

""none"" (which is the default): Either untracked or modified files in a
	submodules work tree or a difference between the subdmodules HEAD
	and the commit recorded in the superproject will make it show up
	as changed. This value is added as a new parameter for the
	""--ignore-submodules"" option of the diff family and ""git status""
	so the user can override the settings in the configuration.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",317,data/crawl/git/patch_2023.diff
https://github.com/git/git/commit/cfbe22f03f9be1f3bbbd33240dcb127099d4346e,06 Aug 2010,"check-ref-format: handle subcommands in separate functions

The code for each subcommand should be easier to read and manipulate
this way.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_2024.diff
https://github.com/git/git/commit/1e57208ef0e48d1d852679a72d3128da333d028d,06 Aug 2010,"diff: parse separate options --stat-width n, --stat-name-width n

Part of a campaign for unstuck forms of options.

[jn: with some refactoring]

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2025.diff
https://github.com/git/git/commit/dea007fb4c8170ea007b577698c7b44df6c318b9,06 Aug 2010,"diff: parse separate options like -S foo

Change the option parsing logic in revision.c to accept separate forms
like `-S foo' in addition to `-Sfoo'. The rest of git already accepted
this form, but revision.c still used its own option parsing.

Short options affected are -S<string>, -l<num> and -O<orderfile>, for
which an empty string wouldn't make sense, hence -<option> <arg> isn't
ambiguous.

This patch does not handle --stat-name-width and --stat-width, which are
special-cases where diff_long_opt do not apply. They are handled in a
separate patch to ease review.

Original patch by Matthieu Moy, plus refactoring by Jonathan Nieder.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/patch_2026.diff
https://github.com/git/git/commit/3f8099fce7779631fe8827a8979d7b57629a36de,04 Aug 2010,"Revert ""rehabilitate 'git index-pack' inside the object store""

Now setup_git_directory_gently behaves sanely even from subdirs of
.git, so simplify index-pack by no longer protecting against that.

This reverts commit a672ea6ac5a1b876bc7adfe6534b16fa2a32c94b
(excluding tests).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2027.diff
https://github.com/git/git/commit/8fc0ae80f6938e409e0efa45d6d504c6137744e3,04 Aug 2010,"setup: do not forget working dir from subdir of gitdir

v1.6.1.3~4^2 (Fix gitdir detection when in subdir of gitdir,
2009-01-16) did not go far enough: when a git directory is
an ancestor of the original working directory, not only
should GIT_DIR be set to point to the .git directory, but
the original working directory should be restored before
carrying out the relevant command.

This way, the effect of running a git command from a subdir
of .git will be the same whether or not GIT_DIR is explicitly
set.

Noticed while investigating v1.6.0.3~1 (rehabilitate 'git
index-pack' inside the object store, 2008-10-20).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2028.diff
https://github.com/git/git/commit/9f9aa761305e909aca9a46ccb33a5872b36bcb8e,02 Aug 2010,"upload-pack: Improve error message when bad ref requested

When printing an error message saying a ref was requested that we do not
have, only print that ref, rather than the ref and everything sent to us
on the same packet line (e.g. protocol support specifications).

Signed-off-by: Elijah Newren <newren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2029.diff
https://github.com/git/git/commit/84974217151a66b65ae5b173045483ce5eeb5142,02 Aug 2010,"ls-files: learn a debugging dump format

Teach git-ls-files a new option --debug that just tacks all available
data from the cache onto each file's line.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2030.diff
https://github.com/git/git/commit/46be82dfd0850d7e96b1401a81a396e0cd0e0527,28 Jul 2010,"xsize_t: check whether we lose bits

Attempting to mmap (via git-add or similar) a file larger than 4GB on
32-bit Linux systems results in a repository that has only the file
modulo 4GB stored, because of truncation of the off_t file size to a
size_t for mmap.

When xsize_t was introduced to handle this truncation in dc49cd7 (Cast
64 bit off_t to 32 bit size_t, 2007-03-06), Shawn even pointed out
that it should detect when such a cutoff happens.

Make it so.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2031.diff
https://github.com/git/git/commit/ba9523ea809dc496a14f3644bdc1dd6f486983c0,27 Jul 2010,"Sync with 1.7.2.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_2032.diff
https://github.com/git/git/commit/d3b9dd136ea5735c88a831b5a0f6f2e5dd623701,27 Jul 2010,"Clarify help message when no remote is specified in fetch/pull.

The message is especially confusing when ""git fetch"" is ran from ""git
pull"", for users not aware of ""git fetch"". The new message makes it clear
that ""fetch"" means ""fetch new revisions"", and gives hint on the solution.

We don't add a advice.* configuration option since this message doesn't
appear in normal use, and shouldn't disturb advanced users.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2033.diff
https://github.com/git/git/commit/60c98d1e80a65c9a893733f7bceda463ef3cb6f7,26 Jul 2010,"setup: split off get_device_or_die helper

This does not eliminate any code, but it skims some off of
the main loop of setup_git_directory_gently so that can be
understood more easily.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2034.diff
https://github.com/git/git/commit/f161edebb64f08bfc615fd9c28ebae3333255e2e,26 Jul 2010,"setup: split off a function to handle hitting ceiling in repo search

Perhaps some day, other similar conditions (hitting the mount point,
hitting the root of the file system) will share this code.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2035.diff
https://github.com/git/git/commit/93a00542eaeb40c31b4de2497f5413a2fc0f36f4,26 Jul 2010,"setup: split off a function to checks working dir for .git file

The repository discovery procedure looks something like this:

	while (same filesystem) {
		check .git in working dir
		check .
		chdir(..)
	}

Add a function for the first step to make the actual code look a bit
closer to that pseudocode.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2036.diff
https://github.com/git/git/commit/e4e303479b62e474c52ee1f9edd265d7333117d9,26 Jul 2010,"setup: split off $GIT_DIR-set case from setup_git_directory_gently

If $GIT_DIR is set, setup_git_directory_gently does not have
to do any repository discovery at all.  Split off a function
for the validation it still does do, in the hope that this will
make setup_git_directory_gently proper less daunting to read.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_2037.diff
https://github.com/git/git/commit/fc688759b95e6888bb1dc4c4d00d27dca4e59ddb,26 Jul 2010,"t1501 (rev-parse): clarify

Tweak the style of these tests to make them easier to read.

 - Replace test_rev_parse() which produced multiple mini-tests with a
   simple function that can be used with the test body.

 - Combine multiple mini-tests into larger chunks that are easier
   to read.

 - Do not hard-code object IDs.  We may use a different hash some day.

 - Use test_cmp in preference to the test builtin.  The former
   produces useful output when tests are run with the ""-v"" option.

 - Guard all test code with test_expect_success.  This makes it much
   easier to visually scan through the test and find code of interest.

 - Use subshells to make the current directory easier to track.
   Outside of any subshell, the current directory is always
   $TEST_DIRECTORY now.

Also add a new test demonstrating a possible bug noticed in the
process of cleaning up:  “git rev-parse --show-prefix” leaves out
the trailing newline after an empty prefix when cwd is at the
toplevel of the work tree.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",483,data/crawl/git/patch_2038.diff
https://github.com/git/git/commit/1b0b962d771fb734cbf273f216b487bb58dec7b9,25 Jul 2010,"Check size of path buffer before writing into it

This prevents a buffer overrun that could otherwise be triggered by
creating a file called '.git' with contents

  gitdir: (something really long)

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2039.diff
https://github.com/git/git/commit/49b7120ef1c915439b01f23f30ddfe64565ec9cc,23 Jul 2010,"merge-recursive: use find_commit_subject() instead of custom code

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2040.diff
https://github.com/git/git/commit/56ff37941eb76d3f0097884715ca8b391788a3c9,23 Jul 2010,"bisect: use find_commit_subject() instead of custom code

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2041.diff
https://github.com/git/git/commit/3c9d0414ed2db0167e6c828b547be8fc9f88fccc,20 Jul 2010,"Check size of path buffer before writing into it

This prevents a buffer overrun that could otherwise be triggered by
creating a file called '.git' with contents

  gitdir: (something really long)

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2042.diff
https://github.com/git/git/commit/4087a02e452aafd0e9a6c3471c40fe76d6aafbe4,19 Jul 2010,"fast-export: Fix dropping of files with --import-marks and path limiting

Since fast-export operates by listing file changes since the (first) parent
commit, when using --import-marks and path limiting and using a wider list
of paths than in previous runs, files from the new path(s) will silently be
omitted from the result unless or until a commit which explicitly changes
those files.  The resulting repository in such cases is broken and makes no
sense.

This commit fixes this by having fast-export work with complete trees
instead of incremental changes (when both --import-marks and path limiting
are used).  It works by issuing a 'deleteall' directive with each commit and
then listing the full set of files that make up that commit, rather than
just showing the list of files that have changed since the (first) parent
commit.

Signed-off-by: Elijah Newren <newren@gmail.com>
Acked-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2043.diff
https://github.com/git/git/commit/f29b5e06b3bdbe3c66a01db8ee67e3c87ae55705,16 Jul 2010,"revert: improve success message by adding abbreviated commit sha1

Instead of saying ""Finished one cherry-pick."" or ""Finished one revert."",
we now say ""Finished cherry-pick of commit <abbreviated sha1>."" or
""Finished revert of commit <abbreviated sha1>."" which is more informative,
especially when cherry-picking or reverting many commits.

In case of failure the message is now ""Automatic cherry-pick of commit
<abbreviated sha1> failed."" instead of ""Automatic cherry-pick failed.""

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2044.diff
https://github.com/git/git/commit/3b2c5b6df4be14cac6b36cf0db0468efa1f42916,16 Jul 2010,"revert: don't print ""Finished one cherry-pick."" if commit failed

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2045.diff
https://github.com/git/git/commit/7b53b92fdb22b90d2be558db84c725641c4ad170,16 Jul 2010,"revert: report success when using option --strategy

""git cherry-pick foo"" has always reported success with
""Finished one cherry-pick"" but ""cherry-pick --strategy""
does not print anything. So move the code to write that
message from do_recursive_merge() to do_cherry_pick()
so other strategies can share it.

This patch also refactors the code that prints a message
like ""Automatic cherry-pick failed. <help message>"". This
code was duplicated in both do_recursive_merge() and
do_pick_commit().

To do that, now do_recursive_merge() returns an int to signal
success or failure. And in case of failure we just return 1
from do_pick_commit() instead of doing ""exit(1)"" from either
do_recursive_merge() or do_pick_commit().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_2046.diff
https://github.com/git/git/commit/e605164d1da51087882a468bcf3f5d36d3a9d4ba,16 Jul 2010,"Add a sample user for the svndump library

The svn-fe tool takes a Subversion dump file as input and produces
a fast-import stream as output.  This can be useful as a low-level
tool in building other importers, or for debugging the vcs-svn
library.

 make svn-fe
 make svn-fe.1

to test.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/patch_2047.diff
https://github.com/git/git/commit/7a0e4d7c39083e951625e4c3434d05abfea8f5e6,16 Jul 2010,"diff A...B: do not limit the syntax too narrowly

Earlier we tried to make sure that the trees we get are what A...B
syntax produced, by checking that earlier ones are all marked
uninteresting (which has to be true as they are merge bases),
there are two remaining ones that are interesting, and they are
marked as non-symmetric-left and symmetric-left respectively.

The ""the last two must be interesting"" condition is however wrong when one
is an ancestor of the other between A and B (i.e. fast-forward).  In such
a case, one of them is marked uninteresting.",13,data/crawl/git/patch_2048.diff
https://github.com/git/git/commit/e8b15e6156fc361d3cb0e093747dab840d58fc7e,14 Jul 2010,"sha1_file: Show the the type and path to corrupt objects

Change the error message that's displayed when we encounter corrupt
objects to be more specific. We now print the type (loose or packed)
of corrupted objects, along with the full path to the file in
question.

Before:

    $ git cat-file blob 909ef997367880aaf2133bafa1f1a71aa28e09df
    fatal: object 909ef997367880aaf2133bafa1f1a71aa28e09df is corrupted

After:

    $ git cat-file blob 909ef997367880aaf2133bafa1f1a71aa28e09df
    fatal: loose object 909ef997367880aaf2133bafa1f1a71aa28e09df (stored in .git/objects/90/9ef997367880aaf2133bafa1f1a71aa28e09df) is corrupted

Knowing the path helps to quickly analyze what's wrong:

    $ file .git/objects/90/9ef997367880aaf2133bafa1f1a71aa28e09df
    .git/objects/90/9ef997367880aaf2133bafa1f1a71aa28e09df: empty

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2049.diff
https://github.com/git/git/commit/7d7ff15b39abfa9e73b6475f189006a74dc26376,14 Jul 2010,"rerere: fix overeager gc

'rerere gc' prunes resolutions of conflicted merges that occurred long
time ago, and when doing so it takes the creation time of the
conflicted automerge results into account.  This can cause the loss of
frequently used conflict resolutions (e.g. long-living topic branches
are merged into a regularly rebuilt integration branch (think of git's
pu)) when they become old enough to exceed 'rerere gc's threshold.

To prevent the loss of valuable merge resolutions 'rerere' will (1)
update the timestamp of the recorded conflict resolution (i.e.
'postimage') each time when encountering and resolving the same merge
conflict, and (2) take this timestamp, i.e. the time of the last usage
into account when gc'ing.

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2050.diff
https://github.com/git/git/commit/c008c0ff2087da7b98adfa760247776619b32224,13 Jul 2010,"diff A...B: give one possible diff when there are more than one merge-base

We instead showed a combined diff that explains one of the randomly
chosen merge-base as if it were the result of merging all the other
merge bases and two tips given, which made no sense at all.

An alternative is to simply fail such a request, telling the user that
there are criss-cross merges, but it wouldn't be so helpful.

Noticed by James Pickens.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2051.diff
https://github.com/git/git/commit/108da0db1277fc2f4820d0a47c02b2c63111f7a5,12 Jul 2010,"git add: Add the ""--ignore-missing"" option for the dry run

Sometimes it is useful to know if a file or directory will be ignored
before it is added to the work tree. An example is ""git submodule add"",
where it would be really nice to be able to fail with an appropriate
error message before the submodule is cloned and checked out.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_2052.diff
https://github.com/git/git/commit/bcefed419aee75ff1c358dc0794c55b07d87dbc9,12 Jul 2010,"t3000 (ls-files -o): modernize style

This script is part of the second batch of tests, from the same day
the test infrastructure was added to git.  Update it to use a more
modern style in the spirit of v1.6.4-rc0~45^2~2 (2009-05-22).
In particular:

 - Put setup code inside test assertions, to avoid unexpected
   breakages and avoid stray output without -v (as t/README
   recommends); and

 - Put the test title on the same line as the ""test_expect_success"",
   and end the line with a single-quote to begin the body of the test
   which is one multi-line string.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_2053.diff
https://github.com/git/git/commit/5e5ffa091bc272f5034a8e3f2bf9fbb0bd79086c,09 Jul 2010,"merge-recursive: use ""up-to-date"" instead of ""uptodate"" in error message for consistency

Signed-off-by: Nicolas Sebrecht <nicolas.s.dev@gmx.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2054.diff
https://github.com/git/git/commit/37348937ff391f01981e8af10b2f615268fd2509,09 Jul 2010,"merge-recursive: Fix D/F conflicts

The D/F conflicts that can be automatically resolved (file or directory
unmodified on one side of history), have the nice property that
process_entry() can correctly handle all subpaths of the D/F conflict.  In
the case of D->F conversions, it will correctly delete all non-conflicting
files below the relevant directory and the directory itself (note that both
untracked and conflicting files below the directory will prevent its
removal).  So if we handle D/F conflicts after all other conflicts, they
become fairly simple to handle -- we just need to check for whether or not
a path (file/directory) is in the way of creating the new content.  We do
this by having process_entry() defer handling such entries to a subsequent
process_df_entry() step.

Signed-off-by: Elijah Newren <newren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_2055.diff
https://github.com/git/git/commit/29981380d03ffa63765dbeaea53a7ac9e8d6bc4f,07 Jul 2010,"rev-parse: fix --parse-opt --keep-dashdash --stop-at-non-option

The ?: operator has a lower priority than |, so the implicit associativity
made the 6th argument of parse_options be PARSE_OPT_KEEP_DASHDASH if
keep_dashdash was true discarding PARSE_OPT_STOP_AT_NON_OPTION and
PARSE_OPT_SHELL_EVAL.

Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2056.diff
https://github.com/git/git/commit/68d03e4a6e448aa557f52adef92595ac4d6cd4bd,07 Jul 2010,"Implement automatic fast-forward merge for submodules

This implements a simple merge strategy for submodule hashes. We check
whether one side of the merge candidates is already contained in the
other and then merge automatically.

If both sides contain changes we search for a merge in the submodule.
In case a single one exists we check that out and suggest it as the
merge resolution. A list of candidates is returned when we find multiple
merges that contain both sides of the changes.

This is useful for a workflow in which the developers can publish topic
branches in submodules and a separate maintainer merges them. In case
the developers always wait until their branch gets merged before tracking
them in the superproject all merges of branches that contain submodule
changes will be resolved automatically. If developers choose to track
their feature branch the maintainer might get a conflict but git will
search the submodule for a merge and suggest it/them as a resolution.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",300,data/crawl/git/patch_2057.diff
https://github.com/git/git/commit/765c22588d9e410bf0100c4991b1945134da6959,07 Jul 2010,"fix git branch -m in presence of cross devices

When you have for example a bare repository stored on NFS, and that you
create new workdirs locally (using contrib's git-new-workdir), logs/refs
is a symlink to a different device. Hence when the reflogs are renamed,
all must happen below logs/refs or one gets cross device rename errors
like:

  git branch -m foo
  error: unable to move logfile logs/refs/heads/master to tmp-renamed-log: Invalid cross-device link
  fatal: Branch rename failed

The fix is hence to use logs/refs/.tmp-renamed-log as a temporary log
name, instead of just tmp-renamed-log.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2058.diff
https://github.com/git/git/commit/d5f5d0a9443c3892cdf9665ed8e0f9004706ed65,07 Jul 2010,"do not write out index when status does not have to

Some codepaths, such as ""git status"" and ""git commit --dry-run"",
tried to opportunisticly refresh the index and write the result
out.  But they did so without checking if there was actually any
change that needs to be written out.

Noticed by Jeff King and Daniel at Rutgers.edu

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2059.diff
https://github.com/git/git/commit/334fba656b50c92345586970bc6b100a449e1fc5,05 Jul 2010,"Teach fast-import to import subtrees named by tree id

To simulate the svn cp command, it would be very useful to be
replace an arbitrary file in the current revision by an
arbitrary directory from a previous one.  Modify the filemodify
command to allow that:

 M 040000 <tree id> pathname

This would be most useful in combination with a facility to
print the commit ids for new revisions as they are written.

Cc: Shawn O. Pearce <spearce@spearce.org>
Cc: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",86,data/crawl/git/patch_2060.diff
https://github.com/git/git/commit/6b097788f88a29d6e171af7a9e87117cf992e833,05 Jul 2010,"t0006: test timezone parsing

Previously, test-date simply ignored the parsed timezone and
told show_date() to use UTC. Instead, let's print out what
we actually parsed.

While we're at it, let's make it easy for tests to work in a specific
timezone.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2061.diff
https://github.com/git/git/commit/8a57c6e9437eeebf849f0def03389078a510312e,05 Jul 2010,"Convert the users of for_each_string_list to for_each_string_list_item macro

The rule for selecting the candidates for conversion is: if the callback
function returns only 0 (the condition for for_each_string_list to exit
early), than it can be safely converted to the macro.

A notable exception are the callers in builtin/remote.c. If converted, the
readability in the file will suffer greately. Besides, the code is not very
performance critical (at the moment, at least): it does output formatting of
the list of remotes.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",167,data/crawl/git/patch_2062.diff
https://github.com/git/git/commit/6fd45295ae0abf424c2e8a71118dcd277778abff,05 Jul 2010,"t/README: proposed rewording...

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2063.diff
https://github.com/git/git/commit/20873f45e7fe23a8530e643d2eea9566d57f2fd4,05 Jul 2010,"t/README: Document the do's and don'ts of tests

Add a ""Do's, don'ts & things to keep in mind"" subsection to the
""Writing Tests"" documentation. Much of this is based on Junio C
Hamano's ""Test your stuff"" section in
<7vhbkj2kcr.fsf@alter.siamese.dyndns.org>.

I turned it into a list of do's and don'ts to make it easier to skim
it, and integrated my note that a TAP harness will get confused if you
print ""ok"" or ""not ok"" at the beginning of a line.

Thad had to be fixed in 335f87871fe5aa6b3fd55b2b4e80f16fe9681483 when
TAP support was introduced.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_2064.diff
https://github.com/git/git/commit/331a1838b26c3032bec27b66307a9de9b3b11509,02 Jul 2010,"Try normalizing files to avoid delete/modify conflicts when merging

If a file is modified due to normalization on one branch, and deleted on
another, a merge of the two branches will result in a delete/modify
conflict for that file even if it is otherwise unchanged.

Try to avoid the conflict by normalizing and comparing the ""base"" file
and the modified file when their sha1s differ.  If they compare equal,
the file is considered unmodified and is deleted.

Signed-off-by: Eyvind Bernhardsen <eyvind.bernhardsen@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_2065.diff
https://github.com/git/git/commit/f217f0e86dc7bacc5dc127982eaadca758b558ce,02 Jul 2010,"Avoid conflicts when merging branches with mixed normalization

Currently, merging across changes in line ending normalization is
painful since files containing CRLF will conflict with normalized files,
even if the only difference between the two versions is the line
endings.  Additionally, any ""real"" merge conflicts that exist are
obscured because every line in the file has a conflict.

Assume you start out with a repo that has a lot of text files with CRLF
checked in (A):

      o---C
     /     \
    A---B---D

B: Add ""* text=auto"" to .gitattributes and normalize all files to
   LF-only

C: Modify some of the text files

D: Try to merge C

You will get a ridiculous number of LF/CRLF conflicts when trying to
merge C into D, since the repository contents for C are ""wrong"" wrt the
new .gitattributes file.

Fix ll-merge so that the ""base"", ""theirs"" and ""ours"" stages are passed
through convert_to_worktree() and convert_to_git() before a three-way
merge.  This ensures that all three stages are normalized in the same
way, removing from consideration differences that are only due to
normalization.

This feature is optional for now since it changes a low-level mechanism
and is not necessary for the majority of users.  The ""merge.renormalize""
config variable enables it.

Signed-off-by: Eyvind Bernhardsen <eyvind.bernhardsen@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",145,data/crawl/git/patch_2066.diff
https://github.com/git/git/commit/bbb1b8a35a06203020f7ab6d1ad58bcb4afe8e93,28 Jun 2010,"notes: check number of parameters to ""git notes copy""

Otherwise we may segfault with too few parameters.

Signed-off-by: Jeff King <peff@peff.net>
Tested-by: Bert Wesarg <Bert.Wesarg@googlemail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2067.diff
https://github.com/git/git/commit/46a958b3daa1da336683ec82d7f321d0f51b39c8,25 Jun 2010,"Add the option ""--ignore-submodules"" to ""git status""

In some use cases it is not desirable that ""git status"" considers
submodules that only contain untracked content as dirty. This may happen
e.g. when the submodule is not under the developers control and not all
build generated files have been added to .gitignore by the upstream
developers. Using the ""untracked"" parameter for the ""--ignore-submodules""
option disables checking for untracked content and lets git diff report
them as changed only when they have new commits or modified content.

Sometimes it is not wanted to have submodules show up as changed when they
just contain changes to their work tree (this was the behavior before
1.7.0). An example for that are scripts which just want to check for
submodule commits while ignoring any changes to the work tree. Also users
having large submodules known not to change might want to use this option,
as the - sometimes substantial - time it takes to scan the submodule work
tree(s) is saved when using the ""dirty"" parameter.

And if you want to ignore any changes to submodules, you can now do that
by using this option without parameters or with ""all"" (when the config
option status.submodulesummary is set, using ""all"" will also suppress the
output of the submodule summary).

A new function handle_ignore_submodules_arg() is introduced to parse this
option new to ""git status"" in a single location, as ""git diff"" already
knew it.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",187,data/crawl/git/patch_2068.diff
https://github.com/git/git/commit/02ac98374eefbe4a46d4b53a8a78057ad8ad39b7,25 Jun 2010,"builtin/checkout: learn -B

Internally, --track and --orphan still use the 'safe' -b, not -B.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_2069.diff
https://github.com/git/git/commit/6f426c74a4ba6805d6d30619429507aeb6ffbbea,22 Jun 2010,"Update draft release notes to 1.7.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_2070.diff
https://github.com/git/git/commit/a4c24549acf16f7917ea3ddd811c6c61afc5689c,22 Jun 2010,"Update draft release notes to 1.7.1.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2071.diff
https://github.com/git/git/commit/67a4b5864f9423ccfe8090365029dae918504830,21 Jun 2010,"log --decorate: Colorize commit decorations

This makes the decorations stand out more and easier to distinguish
and spot because they are colored differently depending on their type.

Signed-off-by: Nazri Ramliy <ayiehere@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2072.diff
https://github.com/git/git/commit/a7524128750ebf34fe0639e1e5d7abd03aff0302,21 Jun 2010,"log-tree.c: Use struct name_decoration's type for classifying decoration

The ""tag: "" prefix is no longer prepended to the name of the decoration.
It is now printed conditionally by show_decorations if the decoration
type is DECORATION_REF_TAG.

Signed-off-by: Nazri Ramliy <ayiehere@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2073.diff
https://github.com/git/git/commit/e5fba602e59292c8c383a7a587897b5f7cbd5c78,18 Jun 2010,"textconv: support for cat_file

Make the textconv_object function public, and add --textconv option to cat-file
to perform conversion on blob objects. Using --textconv implies that we are
working on a blob.
As files drivers need to be initialized, a new config is required in addition
to git_default_config. Therefore git_cat_file_config() is introduced

Signed-off-by: Clément Poulain <clement.poulain@ensimag.imag.fr>
Signed-off-by: Diane Gasselin <diane.gasselin@ensimag.imag.fr>
Signed-off-by: Axel Bonnet <axel.bonnet@ensimag.imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2074.diff
https://github.com/git/git/commit/049e98c875682de2f5638b83e91bfbef5cfbf521,18 Jun 2010,"Update draft release notes to 1.7.2

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_2075.diff
https://github.com/git/git/commit/6622d9c7103525bb8673f93df4104ab2a46cb174,16 Jun 2010,"format-patch: Add a signature option (--signature)

By default, git uses the version string as the signature for all
patches output by format-patch. Many employers (mine included)
require the use of a signature on all outgoing mails. In a
format-patch | send-email workflow there isn't an easy way to modify
the signature without breaking the pipe and manually replacing the
version string with the signature required. Instead of doing all that
work, add an option (--signature) and a config variable
(format.signature) to replace the default git version signature when
formatting patches.

This does modify the original behavior of format-patch a bit. First
off the version string is now placed in the cover letter by default.
Secondly, once the configuration variable format.signature is added
to the .config file there is no way to revert back to the default
git version signature. Instead, specifying the --no-signature option
will remove the signature from the patches entirely.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",86,data/crawl/git/patch_2076.diff
https://github.com/git/git/commit/57895105c4ff083d7c9bc59b2b88b9b5176c1915,14 Jun 2010,"Make :/ accept a regex rather than a fixed pattern

This also makes it trigger anywhere in the commit message, rather than
just at the beginning. Which tends to be a lot more useful.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2077.diff
https://github.com/git/git/commit/a45e1a87adc7cd7ace911049829308ae97b2e914,13 Jun 2010,"commit::print_summary(): don't use format_commit_message()

This attempts to fix a regression in git-commit, where non-abbreviated
SHA-1s were printed in the summary.

One possible fix would be to set ctx.abbrev to DEFAULT_ABBREV in the
`if` block, where format_commit_message() is used.

Instead, we do away with the format_commit_message() codeblock
altogether, replacing it with a re-run of log_tree_commit().

We re-run log_tree_commit() with rev.always_show_header set, to force
the invocation of show_log(). The effect of this flag can be seen from
this excerpt from log-tree.c:560, the only area that
rev.always_show_header is checked:

	shown = log_tree_diff(opt, commit, &log);
	if (!shown && opt->loginfo && opt->always_show_header) {
		log.parent = NULL;
		show_log(opt);
		shown = 1;
	}

We also set rev.use_terminator, so that a newline is appended at the end
of the log message. Note that callers in builtin/log.c that also set
rev.always_show_header don't have to set rev.use_terminator, but still
get a newline, because they are wrapped in a pager.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2078.diff
https://github.com/git/git/commit/47e9cd28f8a404a0d6293935252ddca5fc243931,13 Jun 2010,"parseopt: wrap rev-parse --parseopt usage for eval consumption

9c7304e (print the usage string on stdout instead of stderr,
2010-05-17) broke rev-parse --parseopt: when run with -h, the usage
notice on stdout ended up in the shell eval.

Wrap the usage in a cat <<\EOF ... EOF block when printing to stdout.
I do not expect any usage lines to ever start with EOF so this
shouldn't be an undue burden.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2079.diff
https://github.com/git/git/commit/678e484b7d4e6388edeec3470bbbcd206817c148,13 Jun 2010,"grep: Add the option '--open-files-in-pager'

This adds an option to open the matching files in the pager, and if the
pager happens to be ""less"" (or ""vi"") and there is only one grep pattern,
it also jumps to the first match right away.

The short option was chose as '-O' to avoid clashes with GNU grep's
options (as suggested by Junio).

So, 'git grep -O abc' is a short form for 'less +/abc $(grep -l abc)'
except that it works also with spaces in file names, and it does not
start the pager if there was no matching file.

[jn: rebased and added tests; with error handling fix from Junio
squashed in]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",268,data/crawl/git/patch_2080.diff
https://github.com/git/git/commit/685359cf2d1996aed2f1b1e2857528819d27105d,13 Jun 2010,"Unify code paths of threaded greps

There were three awfully similar code paths ending the threaded grep. It
is better to avoid duplicated code, though.

This change might very well prevent a race, where the grep patterns were
free()d before waiting that all threads finished.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2081.diff
https://github.com/git/git/commit/f69c501832ecd6880602c55565508e70c3a013d5,12 Jun 2010,"rev-list: introduce --count option

Add a --count option that, instead of actually listing the commits,
merely counts them.

This is mostly geared towards script use, and to this end it acts
specially when used with --left-right: it outputs the left and right
counts separately.  Previously, scripts would have to run a shell loop
or small inline script over to achieve the same.  (Without
--left-right, a simple |wc -l does the job.)

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_2082.diff
https://github.com/git/git/commit/3e333036ccbb97fddf54bd8fe74b12ba46f1687b,11 Jun 2010,"fast-import: die_nicely() back to vsnprintf (reverts part of ebaa79f)

ebaa79f (Make report() from usage.c public as vreportf() and use it.,
2010-03-06) changed fast-import's die_nicely() to use vreportf().
Unfortunately this is not possible: we need the message again for
write_report(), and vreportf() uses vsnprintf(), which invalidates the
va_list.  As pointed out by Erik Faye-Lund, va_copy is C99 and thus
not an option.

So revert the part of ebaa79f that pertains to die_nicely().

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2083.diff
https://github.com/git/git/commit/dd44d419d30afa52b863efa07aeec738c4531ea9,11 Jun 2010,"Add optional parameters to the diff option ""--ignore-submodules""

In some use cases it is not desirable that the diff family considers
submodules that only contain untracked content as dirty. This may happen
e.g. when the submodule is not under the developers control and not all
build generated files have been added to .gitignore by the upstream
developers. Using the ""untracked"" parameter for the ""--ignore-submodules""
option disables checking for untracked content and lets git diff report
them as changed only when they have new commits or modified content.

Sometimes it is not wanted to have submodules show up as changed when they
just contain changes to their work tree. An example for that are scripts
which just want to check for submodule commits while ignoring any changes
to the work tree. Also users having large submodules known not to change
might want to use this option, as the - sometimes substantial - time it
takes to scan the submodule work tree(s) is saved.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",124,data/crawl/git/patch_2084.diff
https://github.com/git/git/commit/f197ed2fbeb2868c3514ad35bf986a3aa60285f0,11 Jun 2010,"commit: give advice on empty amend

We generally disallow empty commits with ""git commit"". The
output produced by the wt_status functions is generally
sufficient to explain what happened.

With --amend commits, however, things are a little more
confusing. We would create an empty commit not if you
actually have staged changes _now_, but if your staged
changes match HEAD^. In this case, it is not immediately
obvious why ""git commit"" claims no changes, but ""git status""
does not. Furthermore, we should point the user in the
direction of git reset, which would eliminate the empty
commit entirely.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2085.diff
https://github.com/git/git/commit/0e9716e65e40883759082b35e90113d0d0c8f7a6,07 Jun 2010,"branch: don't fail listing branches if one of the commits wasn't found

When listing branches with ref lookups, if one of the known raw refs
doesn't point to a commit then ""git branch"" would return error(),
terminating the whole for_each_rawref() iteration and possibly hiding
any remaining refs.

Signed-off-by: Simo Melenius <simo.melenius@iki.fi>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2086.diff
https://github.com/git/git/commit/1603ade81352a526ccb206f41ff81ecbc855df2d,07 Jun 2010,"branch: exit status now reflects if branch listing finds an error

If some refs could not be read when listing branches, this can now be
observed in the exit status of the ""git branch"" command.

Signed-off-by: Simo Melenius <simo.melenius@iki.fi>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2087.diff
https://github.com/git/git/commit/942e7747678ecf5f118ea5b2d0c763166de21f3a,07 Jun 2010,"Add ""core.eol"" config variable

Introduce a new configuration variable, ""core.eol"", that allows the user
to set which line endings to use for end-of-line-normalized files in the
working directory.  It defaults to ""native"", which means CRLF on Windows
and LF everywhere else.

Note that ""core.autocrlf"" overrides core.eol.  This means that

[core]
	autocrlf = true

puts CRLFs in the working directory even if core.eol is set to ""lf"".

Signed-off-by: Eyvind Bernhardsen <eyvind.bernhardsen@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",239,data/crawl/git/patch_2088.diff
https://github.com/git/git/commit/296c6bb21a6980f6e5b42f0790d6365c1e3f696f,06 Jun 2010,"diff: fix ""git show -C -C"" output when renaming a binary file

A bug was introduced in 3e97c7c6af2901cec63bf35fcd43ae3472e24af8
(No diff -b/-w output for all-whitespace changes, Nov 19 2009)
that made the lines:

  diff --git a/bar b/sub/bar
  similarity index 100%
  rename from bar
  rename to sub/bar

disappear from ""git show -C -C"" output when file bar is a binary
file.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_2089.diff
https://github.com/git/git/commit/97b03c353856602a3c30b01baae1efb8dfe4243e,06 Jun 2010,"revision: Fix typo in --ancestry-path error message

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2090.diff
https://github.com/git/git/commit/efad1a5615e80637dcb38c8eaa1e35c03b24169f,05 Jun 2010,"ls-files: allow relative pathspec

git ls-files used to error out if given paths which point outside the current
working directory, such as '../'. We now allow such paths and the output is
analogous to git grep -l.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_2091.diff
https://github.com/git/git/commit/46077fa5d477a3e96e0bb96042a2a9fdc9c818cb,03 Jun 2010,"Documentation+t5708: document and test status -s -b

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_2092.diff
https://github.com/git/git/commit/3631bf77f75bc34e810216f3ec6abc8203e2d16a,03 Jun 2010,"checkout --orphan: respect -l option always

Added changes to satisfy a corner case: creating reflogs by using -l
when core.logAllRefUpdates is set to false.

Signed-off-by: Erick Mattos <erick.mattos@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/patch_2093.diff
https://github.com/git/git/commit/7e2bfd3f99f8d6e89c7b855675919dd5404e47a2,02 Jun 2010,"revert: allow cherry-picking more than one commit

This makes it possible to pass many commits or ranges of
commits to ""git cherry-pick"" and to ""git revert"" to process
many commits instead of just one.

In fact commits are now enumerated with an equivalent of

	git rev-list --no-walk ""$@""

so all the following are now possible:

	git cherry-pick master~2..master
	git cherry-pick ^master~2 master
	git cherry-pick master^ master

The following should be possible but does not work:

	git cherry-pick -2 master

because ""git rev-list --no-walk -2 master"" only outputs
one commit as ""--no-walk"" seems to take over ""-2"".

And there is currently no way to continue cherry-picking or
reverting if there is a problem with one commit. It's also
not possible to abort the whole process. Some future work
should provide the --continue and --abort options to do
just that.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_2094.diff
https://github.com/git/git/commit/7af46595b2667214e98da55ed2f82ce1ac2b404a,02 Jun 2010,"revert: refactor code into a do_pick_commit() function

This is needed because we are going to make it possible
to cherry-pick many commits instead of just one in the following
commits. And we will be able to do that by just calling
do_pick_commit() once for each commit to cherry-pick.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2095.diff
https://github.com/git/git/commit/831244bd0df6871c618fc8becbb5c0f1fb8f5459,02 Jun 2010,"revert: cleanup code for -x option

There was some dead code and option -x appeared in the short
help message of git revert (when running ""git revert -h"")
which was wrong.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2096.diff
https://github.com/git/git/commit/9c7304e3e39ed397b3cc6566573333e2698a52b4,01 Jun 2010,"print the usage string on stdout instead of stderr

When -h is used, print usage messages on stdout.  If a command is invoked with
wrong arguments then print the usage messages on stderr.

Signed-off-by: Giuseppe Scrivano <gscrivano@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_2097.diff
https://github.com/git/git/commit/4297c0aeb5cc6b9c1c87d770c91e09ac2a837320,01 Jun 2010,"Make --color-words work well with --graph

'--color-words' algorithm can be described as:

  1. collect a the minus/plus lines of a diff hunk, divided into
     minus-lines and plus-lines;

  2. break both minus-lines and plus-lines into words and
     place them into two mmfile_t with one word for each line;

  3. use xdiff to run diff on the two mmfile_t to get the words level diff;

And for the common parts of the both file, we output the plus side text.
diff_words->current_plus is used to trace the current position of the plus file
which printed. diff_words->last_minus is used to trace the last minus word
printed.

For '--graph' to work with '--color-words', we need to output the graph prefix
on each line of color words output. Generally, there are two conditions on
which we should output the prefix.

  1. diff_words->last_minus == 0 &&
     diff_words->current_plus == diff_words->plus.text.ptr

     that is: the plus text must start as a new line, and if there is no minus
     word printed, a graph prefix must be printed.

  2. diff_words->current_plus > diff_words->plus.text.ptr &&
     *(diff_words->current_plus - 1) == '\n'

     that is: a graph prefix must be printed following a '\n'

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/patch_2098.diff
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/patch_2099.diff
https://github.com/git/git/commit/a3c158d4a58b17c1e4a8d3f793344beee21d3a4c,01 Jun 2010,"Add a prefix output callback to diff output

The callback can be used to add some prefix string to each line of
diff output.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_2100.diff
https://github.com/git/git/commit/560fb6a183e1cdbc2948b06cc60bba07f79804a6,25 May 2010,"remove over-eager caching in sha1_file_name

This function takes a sha1 and produces a loose object
filename. It caches the location of the object directory so
that it can fill the sha1 information directly without
allocating a new buffer (and in its original incarnation,
without calling getenv(), though these days we cache that
with the code in environment.c).

This cached base directory can become stale, however, if in
a single process git changes the location of the object
directory (e.g., by running setup_work_tree, which will
chdir to the new worktree).

In most cases this isn't a problem, because we tend to set
up the git repository location and do any chdir()s before
actually looking up any objects, so the first lookup will
cache the correct location. In the case of reset --hard,
however, we do something like:

  1. look up the commit object

  2. notice we are doing --hard, run setup_work_tree

  3. look up the tree object to reset

Step (3) fails because our cache object directory value is
bogus.

This patch simply removes the caching. We use a static
buffer instead of allocating one each time (the original
version treated the malloc'd buffer as a static, so there is
no change in calling semantics).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2101.diff
https://github.com/git/git/commit/64fcec78b5c52a054eab482e91d58f7b41d1dfaf,24 May 2010,"grep: grep: refactor handling of binary mode options

Turn the switch inside-out and add labels for each possible value
of ->binary.  This makes the code easier to read and avoids calling
buffer_is_binary() if the option -a was given.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2102.diff
https://github.com/git/git/commit/a9f2adff802308481f2e638bae0c5b6e205251a3,20 May 2010,"notes: dry-run and verbose options for prune

Introduce -n and -v options for ""git notes prune"" in complete analogy to
""git prune"" so that one can check for dangling notes easily.

The output is a list of names of objects whose notes would be resp.
are removed so that one can check the object (""git show sha1"") as well as
the note (""git notes show sha1"").

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Acked-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_2103.diff
https://github.com/git/git/commit/3d8b69495fd1132d5af6d7f46425cca97a937d97,20 May 2010,"Add git remote set-branches

Add ‘git remote set-branches’ for changing the list of tracked refs
for a remote repository with one ""porcelain-level"" command.  This
complements the longstanding ‘git remote add --track’ option.

The interface is based on the ‘git remote set-url’ subcommand.

   git remote set-branches base --add C
   git remote set-branches base A B D
   git remote set-branches base --delete D; # not implemented

Suggested-by: martin f. krafft <madduck@debian.org>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",203,data/crawl/git/patch_2104.diff
https://github.com/git/git/commit/cefb2a5e39b165146aee3b093872721cc1155a87,12 May 2010,"ls-remote: print URL when no repo is specified

After 9c00de5 (ls-remote: fall-back to default remotes when no remote
specified), when no repository is specified, ls-remote may use
the URL/remote in the config ""branch.<name>.remote"" or the remote
""origin""; it may not be immediately obvious to the user which was used.

In such cases, print a simple ""From <URL>"" line to indicate which
repository was used. This message is similar to git-fetch's, and is
printed to stderr to avoid breaking existing scripts that depend on
ls-remote's output behaviour.

It can also be disabled with -q/--quiet.

Modify tests related to falling back on default remotes to check for
this as well, and add a test to check for suppression of the message.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2105.diff
https://github.com/git/git/commit/403994e83dd3ad2424f0b3084c8dc4fd1ca6374a,10 May 2010,"fmt-merge-msg: refactor merge title formatting

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_2106.diff
https://github.com/git/git/commit/921eabde9d0b9b43b293b37ac701bdfd10a64f54,09 May 2010,"clone: reword messages to match the end-user perception

When cloning into a non-bare repository, e.g. ""git clone $URL mine"",
we used to report that we are cloning into ""mine/.git"".  Reword the
report to say ""Cloning into mine"" instead, as that matches what the
end-user asked for closer.

Make the message for ""git clone --bare $URL mine"" to say ""Cloning
into bare repository mine"" do make the distinction between this case and
the above stand out a bit more prominently.

Suggested-by: Jeff King <peff@peff.net>
Signed-off-by: Pete Harlan <pgit@pcharlan.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2107.diff
https://github.com/git/git/commit/980bde389491e65df3a6f26f755064013b65740c,06 May 2010,"wt-status: take advice.statusHints seriously

Currently, status gives a lot of hints even when advice.statusHints is
false. Change this so that all hints depend on the config variable.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2108.diff
https://github.com/git/git/commit/18f3b5a9d37de606604f00360df55e5a5fe70739,06 May 2010,"t7508: test advice.statusHints

edf563f (status: make ""how to stage"" messages optional, 2009-09-09)
introduced advice.statusHints without tests. Add a few tests to describe
and test the status quo.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2109.diff
https://github.com/git/git/commit/28ba96ab27d0471af101b4796534ad4085019db1,04 May 2010,"clone: quell the progress report from init and report on clone

Currently, a local git clone reports only initializing an empty
git dir, which is potentially confusing.

Instead, report that cloning is in progress and when it is done
(unless -q) is given, and suppress the init report.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2110.diff
https://github.com/git/git/commit/2d7671ef43946cdfce140e6e9c3ca1eeea361676,03 May 2010,"pretty: add infrastructure for commit format aliases

Allow named commit formats to alias one another; find_commit_format() will
recursively dereference aliases when they are specified.  At this point,
there are no aliases specified and there is no way to specify an alias,
but the support is there for any which are added.

If an alias loop is detected, the function die()s.

Signed-off-by: Will Palmer <wmpalmer@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2111.diff
https://github.com/git/git/commit/409578912cb21bdad4a75f34af7c0a815ac9d06b,03 May 2010,"pretty: make it easier to add new formats

As the first step towards creating aliases, we make it easier to add new
formats to the list of builtin formats. To do this, we move the
initialization of the formats array into a new function,
setup_commit_formats(), which we can easily extend later. Then, rather
than looping through only the list of known formats, we make a more
generic find_commit_format function, which will return the commit format
whose name is the shortest which is prefixed with the passed-in sought
format, the same rules which were more-or-less hard-coded in before.

Signed-off-by: Will Palmer <wmpalmer@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_2112.diff
https://github.com/git/git/commit/7a59745710e964f9498f37a3184bf95b9b4a772b,01 May 2010,"gitweb: Add custom error handler using die_error

Change the default message for errors (for fatalsToBrowser) to use
die_error() subroutine.  This way errors (and explicitely calling 'die
MESSAGE') would generate 'Internal Server Error' error message.

Note that call to set_message is intentionally not put in BEGIN block;
we set error handler to use die_error() only after we are sure that we
can use it, after all needed variables are set.

Due to the fact that error handler set via set_message() subroutine
from CGI::Carp (in the fatalsToBrowser case) is called after HTTP
headers were already printed (with exception of MOD_PERL), gitweb
cannot return 'Status: 500 Internal Server Error'.

Thanks to the fact that die_error() no longer uses 'exit', errors
would be logged by CGI::Carp, independent on whether default error
handler is used, or handle_errors_html which uses die_error is used.

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Acked-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2113.diff
https://github.com/git/git/commit/ebdc94f3bec7ec54babb21b1d785af0cd75b21e6,21 Apr 2010,"revision: --ancestry-path

""rev-list A..H"" computes the set of commits that are ancestors of H, but
excludes the ones that are ancestors of A.  This is useful to see what
happened to the history leading to H since A, in the sense that ""what does
H have that did not exist in A"" (e.g. when you have a choice to update to
H from A).

	       x---x---A---B---C  <-- topic
	      /			\
     x---x---x---o---o---o---o---M---D---E---F---G  <-- dev
    /						  \
   x---o---o---o---o---o---o---o---o---o---o---o---N---H  <-- master

The result in the above example would be the commits marked with caps
letters (except for A itself, of course), and the ones marked with 'o'.

When you want to find out what commits in H are contaminated with the bug
introduced by A and need fixing, however, you might want to view only the
subset of ""A..B"" that are actually descendants of A, i.e. excluding the
ones marked with 'o'.  Introduce a new option --ancestry-path to compute
this set with ""rev-list --ancestry-path A..B"".

Note that in practice, you would build a fix immediately on top of A and
""git branch --contains A"" will give the names of branches that you would
need to merge the fix into (i.e. topic, dev and master), so this may not
be worth paying the extra cost of postprocessing.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",159,data/crawl/git/patch_2114.diff
https://github.com/git/git/commit/da3efdb17bef25dedc753131462ee784d822132e,20 Apr 2010,"receive-pack: detect aliased updates which can occur with symrefs

When pushing to a remote repo the sending side filters out aliased
updates (e.g., foo:baz bar:baz). However, it is not possible for the
sender to know if two refs are aliased on the receiving side via
symrefs. Here is one such scenario:

  $ git init origin
  $ (cd origin && touch file && git add file && git commit -a -m intial)
  $ git clone --bare origin origin.git
  $ rm -rf origin

  $ git clone origin.git client

  $ git clone --mirror client backup.git &&
  $ (cd backup.git && git remote set-head origin --auto)

  $ (cd client &&
	git remote add --mirror backup ../backup.git &&
	echo change1 > file && git commit -a -m change1 &&
	git push origin &&
	git push backup
	)

The push to backup fails with:

  Counting objects: 5, done.
  Writing objects: 100% (3/3), 244 bytes, done.
  Total 3 (delta 0), reused 0 (delta 0)
  Unpacking objects: 100% (3/3), done.
  error: Ref refs/remotes/origin/master is at ef3... but expected 262...
  remote: error: failed to lock refs/remotes/origin/master
  To ../backup.git
     262cd57..ef307ff  master -> master
     262cd57..ef307ff  origin/HEAD -> origin/HEAD
   ! [remote rejected] origin/master -> origin/master (failed to lock)
  error: failed to push some refs to '../backup.git'

The reason is that refs/remotes/origin/HEAD is a symref to
refs/remotes/origin/master, but it is not possible for the sending side
to unambiguously know this.

This commit fixes the issue by having receive-pack ignore any update to
a symref whose target is being identically updated. If a symref and its
target are being updated inconsistently, then the update for both fails
with an error message (""refusing inconsistent update..."") to help
diagnose the situation.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_2115.diff
https://github.com/git/git/commit/f62e0a39b69c2752b92f01bb05a6676639f46a65,20 Apr 2010,"t5704 (bundle): add tests for bundle --stdin

As long as no rev-list arguments are supplied on the command line,
git bundle create --stdin currently segfaults.  With added rev-list
arguments, it does not segfault, but the revisions from stdin are
ignored.

Thanks to Joey Hess <joey@kitenet.net> for the report.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2116.diff
https://github.com/git/git/commit/750ef42516bb343a7755f003720e43cd8dd64c3e,20 Apr 2010,"http-fetch: Use temporary files for pack-*.idx until verified

Verify that a downloaded pack-*.idx file is consistent and valid
as an index file before we rename it into its final destination.
This prevents a corrupt index file from later being treated as a
usable file, confusing readers.

Check that we do not have the pack index file before invoking
fetch_pack_index(); that way, we can do without the has_pack_index()
check in fetch_pack_index().

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_2117.diff
https://github.com/git/git/commit/162eb5f838630f75f78f26d28b46b02781724b7d,20 Apr 2010,"http.c: Remove unnecessary strdup of sha1_to_hex result

Most of the time the dumb HTTP transport is run without the verbose
flag set, so we only need the result of sha1_to_hex(sha1) once, to
construct the pack URL.  Don't bother with an unnecessary malloc,
copy, free chain of this buffer.

If verbose is set, we'll format the SHA-1 twice now.  But this
tiny extra CPU time spent is nothing compared to the slowdown that
is usually imposed by the verbose messages being sent to the tty,
and is entirely trivial compared to the latency involved with the
remote HTTP server sending something as big as a pack file.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Acked-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2118.diff
https://github.com/git/git/commit/111fb858654b95355da05772b4dcdf91decc4721,19 Apr 2010,"remote add: add a --[no-]tags option

Add '--[no-]tags' options to 'git remote add' which add the
'remote.REMOTE.tagopt = --[no-]tags' to the configuration file.
This mimics the ""--tags"" and ""--no-tags"" options of ""git fetch"".

Signed-off-by: Samuel Tardieu <sam@rfc1149.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_2119.diff
https://github.com/git/git/commit/636db2c036d0f26bd0b1139b7abe04bdecf3e036,18 Apr 2010,"t3301: add tests to use --format=""%N""

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2120.diff
https://github.com/git/git/commit/0da8b2e7c80a6dd9743e5233cdc5acd836c9a8d3,17 Apr 2010,"http.c: Don't store destination name in request structures

The destination name within the object store is easily computed
on demand, reusing a static buffer held by sha1_file.c.  We don't
need to copy the entire path into the request structure for safe
keeping, when it can be easily reformatted after the download has
been completed.

This reduces the size of the per-request structure, and removes
yet another PATH_MAX based limit.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2121.diff
https://github.com/git/git/commit/0974c117ff4e17e8b6300519cae0fbc67d34adaa,17 Apr 2010,"diff: use large integers for diffstat calculations

The diffstat ""added"" and ""changed"" fields generally store
line counts; however, for binary files, they store file
sizes. Since we store and print these values as ints, a
diffstat on a file larger than 2G can show a negative size.
Instead, let's use uintmax_t, which should be at least 64
bits on modern platforms.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2122.diff
https://github.com/git/git/commit/53b3c47d64b4294ae586d1daa04f9140dadd9ae6,17 Apr 2010,"t1010-mktree: Adjust expected result to code and documentation

The last two tests here were always supposed to fail in the sense
that, according to code and documentation, mktree should read non-recursive
ls-tree output, but not recursive one, and therefore explicitely refuses
to deal with slashes.

Adjust the test (must_fail) so that it succeeds when mktree dies on
slashes.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2123.diff
https://github.com/git/git/commit/882749a04f828fccd795deec4d0bf10ba09ae549,14 Apr 2010,"diff: add --word-diff option that generalizes --color-words

This teaches the --color-words engine a more general interface that
supports two new modes:

* --word-diff=plain, inspired by the 'wdiff' utility (most similar to
  'wdiff -n <old> <new>'): uses delimiters [-removed-] and {+added+}

* --word-diff=porcelain, which generates an ad-hoc machine readable
  format:
  - each diff unit is prefixed by [-+ ] and terminated by newline as
    in unified diff
  - newlines in the input are output as a line consisting only of a
    tilde '~'

Both of these formats still support color if it is enabled, using it
to highlight the differences.  --color-words becomes a synonym for
--word-diff=color, which is the color-only format.  Also adds some
compatibility/convenience options.

Thanks to Junio C Hamano and Miles Bader for good ideas.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/patch_2124.diff
https://github.com/git/git/commit/03e8b541b38d95d1cd7b287963c82617a0469f80,13 Apr 2010,"describe: Break annotated tag ties by tagger date

If more than one annotated tag points at the same commit, use the
tag whose tagger field has a more recent date stamp.  This resolves
non-deterministic cases where the maintainer has done:

  $ git tag -a -m ""2.1-rc1"" v2.1-rc1  deadbeef
  $ git tag -a -m ""2.1""     v2.1      deadbeef

If the tag is an older-style annotated tag with no tagger date, we
assume a date stamp at the UNIX epoch. This will cause us to prefer
an annotated tag that has a valid date.

We could also try to consider the tag object chain, favoring a tag
that ""includes"" another one:

  $ git tag -a -m ""2.1-rc0"" v2.1-rc1  deadbeef
  $ git tag -a -m ""2.1""     v2.1      v2.1-rc1

However traversing the tag's object chain looking for inclusion
is much more complicated.  Its already very likely that even in
these cases the v2.1 tag will have a more recent tagger date than
v2.1-rc1, so with this change describe should still resolve this
by selecting the more recent v2.1.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_2125.diff
https://github.com/git/git/commit/7734d7f2f6e57973bce3d7b2af815ac737f4637c,12 Apr 2010,"index-pack: smarter memory usage when appending objects

In the same spirit as commit 9892bebafe, let's avoid allocating the full
buffer for the deflated data in write_compressed() in order to write it.
Let's deflate and write the data in chunks instead to reduce memory
usage.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2126.diff
https://github.com/git/git/commit/7ce4721ad8c65ab4d9a9e94176001f12bb4b5218,12 Apr 2010,"index-pack: rationalize unpack_entry_data()

Rework the loop to remove duplicated calls to use() and fill(), and
to make the code easier to read.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2127.diff
https://github.com/git/git/commit/776ea3707a0248b9d36d696ee92beeeac5ccf1a1,12 Apr 2010,"index-pack: smarter memory usage when resolving deltas

In the same spirit as commit 9892bebafe, let's avoid allocating the full
buffer for the deflated data in get_data_from_pack() in order to inflate
it.  Let's read and inflate the data in chunks instead to reduce memory
usage.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2128.diff
https://github.com/git/git/commit/f9a2743c3529baab6de650aa3e3eb96de9386fec,11 Apr 2010,"Windows: start_command: Support non-NULL dir in struct child_process

A caller of start_command can set the member 'dir' to a directory to
request that the child process starts with that directory as CWD. The first
user of this feature was added recently in eee49b6 (Teach diff --submodule
and status to handle .git files in submodules).

On Windows, we have been lazy and had not implemented support for this
feature, yet. This fixes the shortcoming.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2129.diff
https://github.com/git/git/commit/eee49b6ce4b7b3fed28794676c67ad3609f658ac,10 Apr 2010,"Teach diff --submodule and status to handle .git files in submodules

The simple test for an existing .git directory gives an incorrect result
if .git is a file that records ""gitdir: overthere"". So for submodules that
use a .git file, ""git status"" and the diff family - when the ""--submodule""
option is given - did assume the submodule was not populated at all when
a .git file was used, thus generating wrong output or no output at all.

This is fixed by using read_gitfile_gently() to get the correct location
of the .git directory. While at it, is_submodule_modified() was cleaned up
to use the ""dir"" member of ""struct child_process"" instead of setting the
GIT_WORK_TREE and GIT_DIR environment variables.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2130.diff
https://github.com/git/git/commit/2381e39e5ff740883b98c5aca019950f9167b67f,10 Apr 2010,"status: --ignored option shows ignored files

There is no stronger reason behind the choice of ""!!"" than just I happened
to have typed them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2131.diff
https://github.com/git/git/commit/1b908b6fb48f4f8009804c097b14106df548247c,10 Apr 2010,"wt-status: rename and restructure status-print-untracked

I will be reusing this to show ignored stuff in the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2132.diff
https://github.com/git/git/commit/9c00de5a3135c8f7273668d4013c225d48d47861,09 Apr 2010,"ls-remote: fall-back to default remotes when no remote specified

Instead of breaking execution when no remote (as specified in the
variable dest) is specified when git-ls-remote is invoked, continue on
and let remote_get() handle it.

This way, we are able to use the default remotes (eg. ""origin"",
branch.<name>.remote), as git-fetch, git-push, and other users of
remote_get(), do.

If no suitable remote is found, exit with a message describing the
issue, instead of just the usage text, as we do previously.

Add several tests to check that git-ls-remote handles the
no-remote-specified situation.

Also add a test that ""git ls-remote <pattern>"" does not work; we are
unable to guess the remote in that situation, as are git-fetch and
git-push.

In that test, we are testing for messages coming from two separate
processes, but we should be OK, because the second message is triggered
by closing the fd which must happen after the first message is printed.
(analysis by Jeff King.)

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_2133.diff
https://github.com/git/git/commit/537f6c7fb40257776a513128043112ea43b5cdb8,06 Apr 2010,"Git 1.7.1-rc0

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2134.diff
https://github.com/git/git/commit/4c926b37c21a088163871bb8e6ccdfc4b4952e34,03 Apr 2010,"t7508: add test for ""git status"" refreshing the index

Signed-off-by: Markus Heidelberg <markus.heidelberg@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2135.diff
https://github.com/git/git/commit/3e3ec2abe0f275dda285e989224e4c3da19e7adb,03 Apr 2010,"whitespace: add tab-in-indent error class

Some projects and languages use coding style where no tab character is used to
indent the lines.

This only adds support and documentation for ""apply --whitespace=warn"" and
""diff --check""; later patches add ""apply --whitespace=fix"" and tests.

Signed-off-by: Chris Webb <chris@arachsys.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2136.diff
https://github.com/git/git/commit/b3373982667dc983b8dacf33861d25b20bafb995,02 Apr 2010,"diff: avoid useless filespec population

builtin_diff calls fill_mmfile fairly early, which in turn
calls diff_populate_filespec, which actually retrieves the
file's blob contents into a buffer. Long ago, this was
sensible as we would need to look at the blobs eventually.

These days, however, we may not ever want those blobs if we
end up using a textconv cache, and for large binary files
(exactly the sort for which you might have a textconv
cache), just retrieving the objects can be costly.

This patch just pushes the fill_mmfile call a bit later, so
we can avoid populating the filespec in some cases.  There
is one thing to note that looks like a bug but isn't. We
push the fill_mmfile down into the first branch of a
conditional. It seems like we would need it on the other
branch, too, but we don't; fill_textconv does it for us (in
fact, before this, we were just writing over the results of
the fill_mmfile on that branch).

Here's a timing sample on a commit with 45 changed jpgs and
avis. The result is fully textconv cached, but we still
wasted a lot of time just pulling the blobs from storage.
The total size of the blobs (source and dest) is about
180M.

  [before]
  $ time git show >/dev/null
  real    0m0.352s
  user    0m0.148s
  sys     0m0.200s

  [after]
  $ time git show >/dev/null
  real    0m0.009s
  user    0m0.004s
  sys     0m0.004s

And that's on a warm cache. On a cold cache, the ""after""
case is not much worse, but the ""before"" case has to do an
extra 180M of I/O.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2137.diff
https://github.com/git/git/commit/840383b2c2bd7179604f5c2595bf95e22a4e0c84,02 Apr 2010,"textconv: refactor calls to run_textconv

This patch adds a fill_textconv wrapper, which centralizes
some minor logic like error checking and handling the case
of no-textconv.

In addition to dropping the number of lines, this will make
it easier in future patches to handle multiple types of
textconv.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_2138.diff
https://github.com/git/git/commit/40d52ff77b093fa48f58a168f4b0c4e65b862e56,02 Apr 2010,"make commit_tree a library function

Until now, this has been part of the commit-tree builtin.
However, it is already used by other builtins (like commit,
merge, and notes), and it would be useful to access it from
library code.

The check_valid helper has to come along, too, but is given
a more library-ish name of ""assert_sha1_type"".

Otherwise, the code is unchanged. There are still a few
rough edges for a library function, like printing the utf8
warning to stderr, but we can address those if and when they
come up as inappropriate.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_2139.diff
https://github.com/git/git/commit/42653c09c85015addc6fa8dd4d49cb250253412e,02 Apr 2010,"Prompt for a username when an HTTP request 401s

When an HTTP request returns a 401, Git will currently fail with a
confusing message saying that it got a 401, which is not very
descriptive.

Currently if a user wants to use Git over HTTP, they have to use one
URL with the username in the URL (e.g. ""http://user@host.com/repo.git"")
for write access and another without the username for unauthenticated
read access (unless they want to be prompted for the password each
time). However, since the HTTP servers will return a 401 if an action
requires authentication, we can prompt for username and password if we
see this, allowing us to use a single URL for both purposes.

This patch changes http_request to prompt for the username and password,
then return HTTP_REAUTH so http_get_strbuf can try again.  If it gets
a 401 even when a user/pass is supplied, http_request will now return
HTTP_NOAUTH which remote_curl can then use to display a more
intelligent error message that is less confusing.

Signed-off-by: Scott Chacon <schacon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_2140.diff
https://github.com/git/git/commit/91e525989665d69ace11b8f39618b1e8004fe19a,01 Apr 2010,"revert: add ""--strategy"" option to choose merge strategy

This patch makes it possible to use a different merge strategy when
cherry-picking. This is usefull mainly for debugging purposes as it
allows to see if some failures are caused by the merge strategy used or
not.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2141.diff
https://github.com/git/git/commit/3f9083cde3b434155c274168f166ffce2bb243e7,01 Apr 2010,"merge: refactor code that calls ""git merge-STRATEGY""

In the try_merge_strategy() function, when the strategy is ""recursive""
or ""subtree"", the merge_recursive() function is called.
Otherwise we launch a ""git merge-STRATEGY"" process.

To make it possible to reuse code that launches a ""git merge-STRATEGY""
process, this patch refactors this code into a new try_merge_command()
function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_2142.diff
https://github.com/git/git/commit/ae8c79fd8fe47bfebf56ae83461cbedb934cff92,01 Apr 2010,"revert: refactor merge recursive code into its own function

The code that is used to do a recursive merge is extracted from
the revert_or_cherry_pick() function and put into a new
do_recursive_merge() function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/patch_2143.diff
https://github.com/git/git/commit/bc84a7fbac4ce85bb93eeb57b5cb39548d286ad0,01 Apr 2010,"revert: use strbuf to refactor the code that writes the merge message

The code in this commit was written by Stephan Beyer for the sequencer
GSoC project:

    git://repo.or.cz/git/sbeyer.git

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_2144.diff
https://github.com/git/git/commit/7aeaa2fc0abbf439534769e15b3a59a5814cc3d1,01 Apr 2010,"remote-helpers: add testgit helper

Currently the remote helper infrastructure is only used by the curl
helper, which does not give a good impression of how remote helpers
can be used to interact with foreign repositories. Since implementing
such a helper is non-trivial it would be good to have at least one
easy-to-follow example demonstrating how to implement a helper that
interacts with a foreign vcs using fast-import/fast-export.

The testgit helper can be used to interact with remote git
repositories by prefixing the url with ""testgit::"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",456,data/crawl/git/patch_2145.diff
https://github.com/git/git/commit/73b49a759216bf33cc366eeac113ce00d8c49cc6,01 Apr 2010,"remote-helpers: add support for an export command

Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_2146.diff
https://github.com/git/git/commit/890a13a45285ad44858add2ce2f74eb478f549c8,31 Mar 2010,"Sync with 1.7.0.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_2147.diff
https://github.com/git/git/commit/da1fbed3fff6ed2d64399ff26d8a9ab3bcf00540,30 Mar 2010,"diff: fix textconv error zombies

To make the code simpler, run_textconv lumps all of its
error checking into one conditional. However, the
short-circuit means that an error in reading will prevent us
from calling finish_command, leaving a zombie child.
Clean up properly after errors.

Based-on-work-by: Jeff King <peff@peff.net>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2148.diff
https://github.com/git/git/commit/4d80fa8f7562766013e0c589f270f74c25448755,30 Mar 2010,"t3301-notes: Test the creation of reflog entries

Test whether the notes code writes reflog entries. It intends to
(setting up the reflog messages) but currently does not.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Acked-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2149.diff
https://github.com/git/git/commit/80d706afed6c6c6fb3ac9c168a6a958244405b45,28 Mar 2010,"Introduce remove_or_warn function

This patch introduces the remove_or_warn function which is a
generalised version of the {unlink,rmdir}_or_warn functions.  It takes
an additional parameter indicating the mode of the file to be removed.

The patch also modifies certain functions to use remove_or_warn
where appropriate, and adds a test case for a bug fixed by the use
of remove_or_warn.

Signed-off-by: Peter Collingbourne <peter@pcc.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_2150.diff
https://github.com/git/git/commit/d1723296af67e6bbadf6e73cd1e921aefafe491f,28 Mar 2010,"Implement the rmdir_or_warn function

This patch implements an rmdir_or_warn function (like unlink_or_warn
but for directories) that uses the generalised warning code in
warn_if_unremovable.

Signed-off-by: Peter Collingbourne <peter@pcc.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2151.diff
https://github.com/git/git/commit/10e13ec8ed36019d131d27cd9fe2e8cc0f99b896,28 Mar 2010,"Generalise the unlink_or_warn function

This patch moves the warning code of the unlink_or_warn function into
a separate function named warn_if_unremovable so that it may be reused.

Signed-off-by: Peter Collingbourne <peter@pcc.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2152.diff
https://github.com/git/git/commit/8b1fa778676ae94f7a6d4113fa90947b548154dd,28 Mar 2010,"Allow passing of configuration parameters in the command line

The values passed this way will override whatever is defined
in the config files.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/patch_2153.diff
https://github.com/git/git/commit/8030e44215fe8f34edd57d711a35f2f0f97a0423,28 Mar 2010,"Add support for GIT_ONE_FILESYSTEM

This patch makes git pay attention to the GIT_ONE_FILESYSTEM environment
variable. When that variable is set, git will stop searching for a
GIT_DIR when it attempts to cross a filesystem boundary.

When working in an environment with too many automount points to make
maintaining a GIT_CEILING_DIRECTORIES list enjoyable, GIT_ONE_FILESYSTEM
gives the option of turning all such attempts off with one setting.

Signed-off-by: Lars R. Damerow <lars@pixar.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2154.diff
https://github.com/git/git/commit/bb6ad28c23f05e1ea04e3f1c6b9b08cc070c5318,28 Mar 2010,"fast-export: don't segfault when marks file cannot be opened

The error function only prints an error message, resulting in a
segfault if we later on try to fprintf to a NULL handle.

Fix this by using die_errno instead.

Signed-off-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2155.diff
https://github.com/git/git/commit/10439d89ebe77a1fb8f05a8ad5d5f4071639bb3e,28 Mar 2010,"imap-send: suppress warning about cleartext password with CRAM-MD5

If a CRAM-MD5 challenge-response is used to authenticate to the IMAP server,
git imap-send shouldn't warn about the password being sent in the clear.

Signed-off-by: Chris Webb <chris@arachsys.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2156.diff
https://github.com/git/git/commit/5856b5f568ba957a0ea094fa676641ab246021fc,24 Mar 2010,"http-backend: Don't infinite loop during die()

If stdout has already been closed by the CGI and die() gets called,
the CGI will fail to write the ""Status: 500 Internal Server Error"" to
the pipe, which results in die() being called again (via safe_write).
This goes on in an infinite loop until the stack overflows and the
process is killed by SIGSEGV.

Instead set a flag on the first die() invocation and if we came back to
the handler, just die silently, as it only means we failed to report the
failure---we cannot report anything anyway in such a case.  This way
failures to write the error messages to the stdout pipe do not result in
an infinite loop.

We also now report on the death to stderr before we report to stdout,
to increase the chances that the cause of the die() invocation will
appear in the server's error log.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>

fixup! http-backend.c: Don't infinite loop

Now die_webcgi() actually can return during a recursive call into it,
causing

    http-backend.c:554: error: 'noreturn' function does return

The only reason we would come back to the die handler is because we
failed during it, so we cannot report anything anyway.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2157.diff
https://github.com/git/git/commit/4503bd5c3732b142667e14d214c21c46e8f3eeaa,22 Mar 2010,"Sync with Git 1.7.0.3

* maint:
  Git 1.7.0.3
  .mailmap: Map the the first submissions of MJG by e-mail
  Documentation/git-clone: Transform description list into item list
  Documentation/urls: Remove spurious example markers
  Documentation/gitdiffcore: Remove misleading date in heading
  Documentation/git-reflog: Fix formatting of command lists",38,data/crawl/git/patch_2158.diff
https://github.com/git/git/commit/9db5ebf4022d8e11ac20e75a3d43af161b752fcd,21 Mar 2010,"git checkout: create unparented branch by --orphan

Similar to -b, --orphan creates a new branch, but it starts without any
commit.  After running ""git checkout --orphan newbranch"", you are on a
new branch ""newbranch"", and the first commit you create from this state
will start a new history without any ancestry.

""git checkout --orphan"" keeps the index and the working tree files
intact in order to make it convenient for creating a new history whose
trees resemble the ones from the original branch.

When creating a branch whose trees have no resemblance to the ones from
the original branch, it may be easier to start work on the new branch by
untracking and removing all working tree files that came from the
original branch, by running a 'git rm -rf .' immediately after running
""checkout --orphan"".

Signed-off-by: Erick Mattos <erick.mattos@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/patch_2159.diff
https://github.com/git/git/commit/dddfb3f1263d20a050890256dcbd5aeb00f221bb,21 Mar 2010,"Documentation/gitdiffcore: Remove misleading date in heading

Ever since the automatic conversion into man form, the heading
contained a misidentified subheading reading ""June 2005"".
Remove this since the documentation is more recent, and the correct
date is in the footer.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2160.diff
https://github.com/git/git/commit/d68565402a69fac3fe0e0653718feca7c80c178b,21 Mar 2010,"revert: clarify label on conflict hunks

When reverting a commit, the commit being merged is not the commit
to revert itself but its parent.  Add “parent of” to the conflict
hunk label to make this more clear.

The conflict hunk labels are all pieces of a single string written in
the new get_message() function.  Avoid some complication by using
mempcpy to advance a pointer as the result is written.

Also free the corresponding temporary buffer (it was leaked before).
This is not important because it is a small one-time allocation.  It
would become a memory leak if unnoticed when libifying revert.

This patch uses calls to strlen() instead of integer constants in some
places.  GCC will compute the length at compile time; I am not sure
about other compilers, but this is not performance-critical anyway.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_2161.diff
https://github.com/git/git/commit/3bfc45047654c7dd38b32033321228e97fc8f60e,14 Mar 2010,"git status: ignoring untracked files must apply to submodules too

Since 1.7.0 submodules are considered dirty when they contain untracked
files. But when git status is called with the ""-uno"" option, the user
asked to ignore untracked files, so they must be ignored in submodules
too. To achieve this, the new flag DIFF_OPT_IGNORE_UNTRACKED_IN_SUBMODULES
is introduced.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2162.diff
https://github.com/git/git/commit/85adbf2f751a91429de6b431c45737ba9d7e9e00,13 Mar 2010,"git status: Fix false positive ""new commits"" output for dirty submodules

Testing if the output ""new commits"" should appear in the long format of
""git status"" is done by comparing the hashes of the diffpair. This always
resulted in printing ""new commits"" for submodules that contained untracked
or modified content, even if they did not contain new commits. The reason
was that match_stat_with_submodule() did set the ""changed"" flag for dirty
submodules, resulting in two->sha1 being set to the null_sha1 at the call
sites, which indicates that new commits are present. This is changed so
that when no new commits are present, the same object names are in the
sha1 field for both sides of the filepair, and the working tree side will
have the ""dirty_submodule"" flag set when appropriate. For a submodule to
be seen as modified even when it just has a dirty work tree, some
conditions had to be extended to also check for the ""dirty_submodule""
flag.

Unfortunately the test case that should have found this bug had been
changed incorrectly too. It is fixed and extended to test for other
combinations too.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_2163.diff
https://github.com/git/git/commit/ae6d5c1b6f78ef48f606e5a267915fa31b37a679,13 Mar 2010,"Refactor dirty submodule detection in diff-lib.c

Moving duplicated code into the new function match_stat_with_submodule().
Replacing the implicit activation of detailed checks for the dirtiness of
submodules when DIFF_FORMAT_PATCH was selected with explicitly setting
the recently added DIFF_OPT_DIRTY_SUBMODULES option in diff_setup_done().

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_2164.diff
https://github.com/git/git/commit/74884b524e7e12b3419264d3180de785a9e39fa5,13 Mar 2010,"notes: rework subcommands and parse options

Running 'git notes copy -h' is not very helfpul right now. It lists
the options for all the git notes subcommands and is rather confusing.
Fix this by splitting cmd_notes() into separate functions for each
subcommand (besides append and edit since they're very similar) and
only providing a usage message for the subcommand.

This has an added benefit of reducing the code complexity while making
it safer and easier to read. The downside is we get some code bloat
from similar setup and teardown needed for notes and options parsing.
We also get a bit stricter in options parsing by only allowing
the ref option to come before the subcommand.

Acked-by: Johan Herland <johan@herland.net>
Cc: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/patch_2165.diff
https://github.com/git/git/commit/eb2151bb8938a8e2af86e3ed34243af7b1c95786,13 Mar 2010,"rebase: support automatic notes copying

Luckily, all the support already happens to be there.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_2166.diff
https://github.com/git/git/commit/6956f858f6237d426fa422949033e3c558104802,13 Mar 2010,"notes: implement helpers needed for note copying during rewrite

Implement helper functions to load the rewriting config, and to
actually copy the notes.  Also document the config.

Secondly, also implement an undocumented --for-rewrite=<cmd> option to
'git notes copy' which is used like --stdin, but also puts the
configuration for <cmd> into effect.  It will be needed to support the
copying in git-rebase.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Acked-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",393,data/crawl/git/patch_2167.diff
https://github.com/git/git/commit/160baa0d9cbdfcdb6251aa5ede77c59c0d53edfd,13 Mar 2010,"notes: implement 'git notes copy --stdin'

This implements a mass-copy command that takes a sequence of lines in
the format

  <from-sha1> SP <to-sha1> [ SP <rest> ] LF

on stdin, and copies each <from-sha1>'s notes to the <to-sha1>.  The
<rest> is ignored.  The intent, of course, is that this can read the
same input that the 'post-rewrite' hook gets.

The copy_note() function is exposed for everyone's and in particular
the next commit's use.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Acked-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/patch_2168.diff
https://github.com/git/git/commit/894a9d333e9e2015cad00d95250b7c5d3acea8b6,13 Mar 2010,"Support showing notes from more than one notes tree

With this patch, you can set notes.displayRef to a glob that points at
your favourite notes refs, e.g.,

[notes]
	displayRef = refs/notes/*

Then git-log and friends will show notes from all trees.

Thanks to Junio C Hamano for lots of feedback, which greatly
influenced the design of the entire series and this commit in
particular.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Acked-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",467,data/crawl/git/patch_2169.diff
https://github.com/git/git/commit/9297f77e6d350f33de961e149dc33c77e7392db4,08 Mar 2010,"git status: Show detailed dirty status of submodules in long format

Since 1.7.0 there are three reasons a submodule is considered modified
against the work tree: It contains new commits, modified content or
untracked content. Lets show all reasons in the long format of git status,
so the user can better asses the nature of the modification. This change
does not affect the short and porcelain formats.

Two new members are added to ""struct wt_status_change_data"" to store the
information gathered by run_diff_files(). wt-status.c uses the new flag
DIFF_OPT_DIRTY_SUBMODULES to tell diff-lib.c it wants to get detailed
dirty information about submodules.

A hint line for submodules is printed in the dirty header when dirty
submodules are present.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_2170.diff
https://github.com/git/git/commit/00588bb5cd4a7ff5e2b1ded97d4459bfe6aad6eb,08 Mar 2010,"grep: Colorize selected, context, and function lines

Colorize non-matching text of selected lines, context lines, and
function name lines.  The default for all three is no color, but they
can be configured using color.grep.<slot>.  The first two are similar
to the corresponding options in GNU grep, except that GNU grep applies
the color to the entire line, not just non-matching text.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2171.diff
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/patch_2172.diff
https://github.com/git/git/commit/0ea1c89ba616397ef7e5f6f601ef7a24d2c27b8e,07 Mar 2010,"Dying in an async procedure should only exit the thread, not the process.

Async procedures are intended as helpers that perform a very restricted
task, and the caller usually has to manage them in a larger context.
Conceptually, the async procedure is not concerned with the ""bigger
picture"" in whose context it is run. When it dies, it is not supposed
to destroy this ""bigger picture"", but rather only its own limit view
of the world. On POSIX, the async procedure is run in its own process,
and exiting this process naturally had only these limited effects.

On Windows (or when ASYNC_AS_THREAD is set), calling die() exited the
whole process, destroying the caller (the ""big picture"") as well.
This fixes it to exit only the thread.

Without ASYNC_AS_THREAD, one particular effect of exiting the async
procedure process is that it automatically closes file descriptors, most
notably the writable end of the pipe that the async procedure writes to.

The async API already requires that the async procedure closes the pipe
ends when it exits normally. But for calls to die() no requirements are
imposed. In the non-threaded case the pipe ends are closed implicitly
by the exiting process, but in the threaded case, the die routine must
take care of closing them.

Now t5530-upload-pack-error.sh passes on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2173.diff
https://github.com/git/git/commit/200a76b74db5c2c75bcf73773cb85c5603ec038e,07 Mar 2010,"Reimplement async procedures using pthreads

On Windows, async procedures have always been run in threads, and the
implementation used Windows specific APIs. Rewrite the code to use pthreads.

A new configuration option is introduced so that the threaded implementation
can also be used on POSIX systems. Since this option is intended only as
playground on POSIX, but is mandatory on Windows, the option is not
documented.

One detail is that on POSIX it is necessary to set FD_CLOEXEC on the pipe
handles. On Windows, this is not needed because pipe handles are not
inherited to child processes, and the new calls to set_cloexec() are
effectively no-ops.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_2174.diff
https://github.com/git/git/commit/ebaa79f462c48e0ed0341d9c8f9c97de557afcfd,07 Mar 2010,"Make report() from usage.c public as vreportf() and use it.

There exist already a number of static functions named 'report', therefore,
the function name was changed.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2175.diff
https://github.com/git/git/commit/c62f6ec341b1a768be7c9adf84d07c5b3b113a81,07 Mar 2010,"revert: add --ff option to allow fast forward when cherry-picking

As ""git merge"" fast forwards if possible, it seems sensible to
have such a feature for ""git cherry-pick"" too, especially as it
could be used in git-rebase--interactive.sh.

Maybe this option could be made the default in the long run, with
another --no-ff option to disable this default behavior, but that
could make some scripts backward incompatible and/or that would
require testing if some GIT_AUTHOR_* environment variables are
set. So we don't do that for now.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2176.diff
https://github.com/git/git/commit/812d2a3d61b1bbb1931aff2ed6d2a17e939f5bf2,07 Mar 2010,"reset: disallow using --keep when there are unmerged entries

The use case for --keep option is to remove previous commits unrelated
to the current changes in the working tree. So in this use case we are
not supposed to have unmerged entries. This is why it seems safer to
just disallow using --keep when there are unmerged entries.

And this patch changes the error message when --keep was disallowed and
there were some unmerged entries from:

    error: Entry 'file1' would be overwritten by merge. Cannot merge.
    fatal: Could not reset index file to revision 'HEAD^'.

to:

    fatal: Cannot do a keep reset in the middle of a merge.

which is nicer.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2177.diff
https://github.com/git/git/commit/c7e1a73641e24340bf93f6f1792220fa9154cda3,05 Mar 2010,"git diff --submodule: Show detailed dirty status of submodules

When encountering a dirty submodule while doing ""git diff --submodule""
print an extra line for new untracked content and another for modified
but already tracked content. And if the HEAD of the submodule is equal
to the ref diffed against in the superproject, drop the output which
would just show the same SHA1s and no commit message headlines.

To achieve that, the dirty_submodule bitfield is expanded to two bits.
The output of ""git status"" inside the submodule is parsed to set the
according bits.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_2178.diff
https://github.com/git/git/commit/f206063b4b201ff48c87b886cbe21a068fcf6d49,05 Mar 2010,"git-core: Support retrieving passwords with GIT_ASKPASS

git tries to read a password from the terminal in imap-send and
when talking to a http server that requires authentication.

When a GUI is driving git, however, the end user is not paying
attention to the terminal (there may not even be a terminal).
GUI would appear to hang forever.

Fix this problem by allowing a password-retrieving command
to be specified in GIT_ASKPASS

Signed-off-by: Frank Li <lznuaa@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2179.diff
https://github.com/git/git/commit/6cbd6e92616773457574f9755910f44b3c34a983,02 Mar 2010,"t554[01]-http-push: refactor, add non-ff tests

Move non-fast forward tests to lib-httpd.sh so that we don't have to
duplicate the tests in both t5540 and t5541.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2180.diff
https://github.com/git/git/commit/8f69f72fca989b3ba080aab1dc24bfd1709ce83a,01 Mar 2010,"bisect: error out when passing bad path parameters

As reported by Mark Lodato, ""git bisect"", when it was started with
path parameters that match no commit was kind of working without
taking account of path parameters and was reporting something like:

Bisecting: -1 revisions left to test after this (roughly 0 steps)

It is more correct and safer to just error out in this case, before
displaying the revisions left, so this patch does just that.

Note that this bug is very old, it exists at least since v1.5.5.
And it is possible to detect that case earlier in the bisect
algorithm, but it is not clear that it would be an improvement to
error out earlier, on the contrary it may change the behavior of
""git rev-list --bisect-all"" for example, which is currently correct.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2181.diff
https://github.com/git/git/commit/60cfeb8e95d859bf250804c7981e8481e297c3b6,28 Feb 2010,"git-push: send ""To <remoteurl>"" messages to the standard output in --porcelain mode

git-push prints the line ""To <remoteurl>"" before above each of the ref status
lines.  In --porcelain mode, these ""To <remoteurl>"" lines go to the standard
error, but the ref status lines go to the standard output.  This makes it
difficult for the process reading standard output to know which ref status lines
correspond to which remote.  This patch sends the ""To <remoteurl>"" lines to the
the standard output instead.

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2182.diff
https://github.com/git/git/commit/011fe9814f7be7df7212229fa4f8393e03829cb7,28 Feb 2010,"git-push: fix an advice message so it goes to stderr

These sort of messages typically go to the standard error.

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2183.diff
https://github.com/git/git/commit/77e8466fb98b95ea07d386d64073d0bc6304b37f,28 Feb 2010,"sha1_name: fix segfault caused by invalid index access

The code to see if user input ""git show :path"" makes sense tried to access
the index without properly checking the array bound.

Signed-off-by: Markus Heidelberg <markus.heidelberg@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_2184.diff
https://github.com/git/git/commit/cbf731ed4ec511f2c32598e03d7865f35881fea2,28 Feb 2010,"prune: honor --expire=never

Previously, prune treated an expiration time of 0 to mean that no
expire argument was supplied, and everything should be pruned.  As a
result, ""prune --expire=never"" would prune all unreachable objects,
regardless of their timestamp.

prune can be called with --expire=never automatically by gc, when the
gc.pruneExpire configuration is set to ""never"".

Signed-off-by: Adam Simpkins <simpkins@facebook.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_2185.diff
https://github.com/git/git/commit/94c8ccaaba4ac8b0225f5adeae4ff29f01951bce,25 Feb 2010,"rev-parse: --local-env-vars option

This prints the list of repo-local environment variables.

Signed-off-by: Giuseppe Bilotta <giuseppe.bilotta@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2186.diff
https://github.com/git/git/commit/3731449591130b2f5ca7257c46721785a6340a18,24 Feb 2010,"shortlog: warn the user when there is no input

A simple ""git shortlog"" outside of a git repository stalls
waiting for an input. Check if that's the case by testing with
isatty() before read_from_stdin(), and warn the user like
""git commit"" does in a similar case.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2187.diff
https://github.com/git/git/commit/e6cc51046f3669332f51a52a7de966d842b9d4e4,24 Feb 2010,"fetch --all/--multiple: keep all the fetched branch information

Since ""git fetch"" learned ""--all"" and ""--multiple"" options, it has become
tempting for users to say ""git pull --all"".  Even though it may fetch from
remotes that do not need to be fetched from for merging with the current
branch, it is handy.

""git fetch"" however clears the list of fetched branches every time it
contacts a different remote.  Unless the current branch is configured to
merge with a branch from a remote that happens to be the last in the list
of remotes that are contacted, ""git pull"" that fetches from multiple
remotes will not be able to find the branch it should be merging with.

Make ""fetch"" clear FETCH_HEAD (unless --append is given) and then append
the list of branches fetched to it (even when --append is not given).  That
way, ""pull"" will be able to find the data for the branch being merged in
FETCH_HEAD no matter where the remote appears in the list of remotes to be
contacted by ""git fetch"".

Reported-by: Michael Lukashov
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2188.diff
https://github.com/git/git/commit/9839018e874d4f15e820e1272f1ac575186c4fdc,24 Feb 2010,"fetch and pull: learn --progress

Note that in the documentation for git-pull, documentation for the
--progress option is displayed under the ""Options related to fetching""
subtitle via fetch-options.txt.

Also, update the documentation of the -q/--quiet option for git-pull to
mention its effect on progress reporting during fetching.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2189.diff
https://github.com/git/git/commit/aa0945701e39cf099ca9c28f79e239359781e4f6,23 Feb 2010,"Print RUNTIME_PREFIX warning only when GIT_TRACE is set

When RUNTIME_PREFIX is enabled, the installation prefix is derived by
trying a limited set of known locations where the git executable can
reside. If none of these is found, a warning is emitted.

When git is built in a directory that matches neither of these known names,
the warning would always be emitted when the uninstalled executable is run.
This is a problem on Windows, where gitk picks the uninstalled git when
invoked from the build directory and gets confused by the warning.

Print the warning only when GIT_TRACE is set.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2190.diff
https://github.com/git/git/commit/f965c525a4d04837b1b7ed43e3fa2dc8c0df4e2b,23 Feb 2010,"move encode_in_pack_object_header() to a better place

Commit 1b22b6c897 made duplicated versions of encode_header() into a
common version called encode_in_pack_object_header(). There is however
a better location that sha1_file.c for such a function though, as
sha1_file.c contains nothing related to the creation of packs, and
it is quite populated already.

Also the comment that was moved to the header file should really remain
near the function as it covers implementation details and provides no
information about the actual function interface.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2191.diff
https://github.com/git/git/commit/b862b61c03797fd00490bb8caf05be840b79c6cb,22 Feb 2010,"git_mkstemp_mode, xmkstemp_mode: variants of gitmkstemps with mode argument.

gitmkstemps emulates the behavior of mkstemps, which is usually used
to create files in a shared directory like /tmp/, hence, it creates
files with permission 0600.

Add git_mkstemps_mode() that allows us to specify the desired mode, and
make git_mkstemps() a wrapper that always uses 0600 to call it. Later we
will use git_mkstemps_mode() when creating pack files.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2192.diff
https://github.com/git/git/commit/00787ed55adbc2350efa911bf0bdebf6ca08c095,22 Feb 2010,"Move gitmkstemps to path.c

This function used to be only a compatibility function, but we're
going to extend it and actually use it, so make it part of Git.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_2193.diff
https://github.com/git/git/commit/748af44c63ea6fec12690f1693f3dddd963e88d5,22 Feb 2010,"sha1_file: be paranoid when creating loose objects

We don't want the data being deflated and stored into loose objects
to be different from what we expect.  While the deflated data is
protected by a CRC which is good enough for safe data retrieval
operations, we still want to be doubly sure that the source data used
at object creation time is still what we expected once that data has
been deflated and its CRC32 computed.

The most plausible data corruption may occur if the source file is
modified while Git is deflating and writing it out in a loose object.
Or Git itself could have a bug causing memory corruption.  Or even bad
RAM could cause trouble.  So it is best to make sure everything is
coherent and checksum protected from beginning to end.

To do so we compute the SHA1 of the data being deflated _after_ the
deflate operation has consumed that data, and make sure it matches
with the expected SHA1.  This way we can rely on the CRC32 checked by
the inflate operation to provide a good indication that the data is still
coherent with its SHA1 hash.  One pathological case we ignore is when
the data is modified before (or during) deflate call, but changed back
before it is hashed.

There is some overhead of course. Using 'git add' on a set of large files:

Before:

	real    0m25.210s
	user    0m23.783s
	sys     0m1.408s

After:

	real    0m26.537s
	user    0m25.175s
	sys     0m1.358s

The overhead is around 5% for full data coherency guarantee.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2194.diff
https://github.com/git/git/commit/ea68b0ce9f8ce8da3e360aed3cbd6720159ffbee,21 Feb 2010,"hash-object: don't use mmap() for small files

Using read() instead of mmap() can be 39% speed up for 1Kb files and is
1% speed up 1Mb files. For larger files, it is better to use mmap(),
because the difference between is not significant, and when there is not
enough memory, mmap() performs much better, because it avoids swapping.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2195.diff
https://github.com/git/git/commit/9892bebafe0865d8f4f3f18d60a1cfa2d1447cd7,21 Feb 2010,"sha1_file: don't malloc the whole compressed result when writing out objects

There is no real advantage to malloc the whole output buffer and
deflate the data in a single pass when writing loose objects. That is
like only 1% faster while using more memory, especially with large
files where memory usage is far more. It is best to deflate and write
the data out in small chunks reusing the same memory instead.

For example, using 'git add' on a few large files averaging 40 MB ...

Before:
21.45user 1.10system 0:22.57elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+828040outputs (0major+142640minor)pagefaults 0swaps

After:
21.50user 1.25system 0:22.76elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
0inputs+828040outputs (0major+104408minor)pagefaults 0swaps

While the runtime stayed relatively the same, the number of minor page
faults went down significantly.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2196.diff
https://github.com/git/git/commit/73e9da019655261e456ed862340880de365111f0,19 Feb 2010,"Add an optional argument for --color options

Make git-branch, git-show-branch, git-grep, and all the diff-based
programs accept an optional argument <when> for --color.  The argument
is a colorbool: ""always"", ""never"", or ""auto"".  If no argument is given,
""always"" is used;  --no-color is an alias for --color=never.  This makes
the command-line interface consistent with other GNU tools, such as `ls'
and `grep', and with the git-config color options.  Note that, without
an argument, --color and --no-color work exactly as before.

To implement this, two internal changes were made:

1. Allow the first argument of git_config_colorbool() to be NULL,
   in which case it returns -1 if the argument isn't ""always"", ""never"",
   or ""auto"".

2. Add OPT_COLOR_FLAG(), OPT__COLOR(), and parse_opt_color_flag_cb()
   to the option parsing library.  The callback uses
   git_config_colorbool(), so color.h is now a dependency
   of parse-options.c.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_2197.diff
https://github.com/git/git/commit/1b22b6c897efa8aec6eeb51f72a73d507d5e336f,17 Feb 2010,"refactor duplicated encode_header in pack-objects and fast-import

The following function is duplicated:

  encode_header

Move this function to sha1_file.c and rename it 'encode_in_pack_object_header',
as suggested by Junio C Hamano

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_2198.diff
https://github.com/git/git/commit/06b65939b083ba1b71043005bf83b4883e98264e,17 Feb 2010,"refactor duplicated fill_mm() in checkout and merge-recursive

The following function is duplicated:

  fill_mm

Move it to xdiff-interface.c and rename it 'read_mmblob', as suggested
by Junio C Hamano.

Also, change parameters order for consistency with read_mmfile().

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_2199.diff
https://github.com/git/git/commit/f1863d0d16b9a5288671e17b7fa2eba8244ead2f,17 Feb 2010,"refactor duplicated code in builtin-send-pack.c and transport.c

The following functions are (almost) identical:

  verify_remote_names
  update_tracking_ref
  refs_pushed
  print_push_status

Move common versions of these functions to transport.c and rename
them, as suggested by Jeff King and Junio C Hamano.

These functions have been removed entirely from builtin-send-pack.c,
since they are only used internally by print_push_status():

  print_ref_status
  status_abbrev
  print_ok_ref_status
  print_one_push_status

Also, move #define SUMMARY_WIDTH to transport.h and rename it
TRANSPORT_SUMMARY_WIDTH as it is used in builtin-fetch.c and
transport.c

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Acked-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",244,data/crawl/git/patch_2200.diff
https://github.com/git/git/commit/8c2ca8dd8a5d6d8beaa0a4abed0c135004eef772,17 Feb 2010,"fast-import: honor pack.indexversion and pack.packsizelimit config vars

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2201.diff
https://github.com/git/git/commit/ae9c606ed228ea6a17ddde3a1e26451d02f51df7,17 Feb 2010,"imap-send: support CRAM-MD5 authentication

CRAM-MD5 authentication ought to be independent from SSL, but NO_OPENSSL
build will not support this because the base64 and md5 code are used from
the OpenSSL library in this implementation.

Signed-off-by: Hitoshi Mitake <mitake@dcl.info.waseda.ac.jp>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",150,data/crawl/git/patch_2202.diff
https://github.com/git/git/commit/81f45e7dc4e930ffc17dce3e377e6adc3eb3d8de,17 Feb 2010,"git add -u: die on unmatched pathspec

If a pathspec is supplied to 'git add -u' and no path matches
the pattern, fail with an approriate error message and exit code.

Tested-by: Chris Packham <judge.packham@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2203.diff
https://github.com/git/git/commit/3719b2fe554adc2f7a34a16b90f6894f299aab3c,16 Feb 2010,"Add test for using Git at root of file system

This kind of test requires a throw-away root filesystem so that it can
play on. If you have such a system, go ahead, ""chmod 777 /"" and run
this test manually. Because this is a dangerous test, you are required
to set an env variable, and not to use root to run it.

Script prepare-root.sh may help you set up a chroot environment with
Git test suite inside. You will need Linux, static linked busybox,
rsync and root permission to use it.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",301,data/crawl/git/patch_2204.diff
https://github.com/git/git/commit/6977c250ac6cacb5ee441bff832fdeab4d0cd8f9,16 Feb 2010,"git diff --quiet -w: check and report the status

The option -w tells the diff machinery to inspect the contents to set the
exit status, instead of checking the blob object level difference alone.
However, --quiet tells the diff machinery not to look at the contents, which
means DIFF_FROM_CONTENTS has no chance to inspect the change.

Work it around by calling diff_flush_patch() with output sent to /dev/null.

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2205.diff
https://github.com/git/git/commit/8324b977aef3d2301f170e23f498b50e11302575,16 Feb 2010,"diff: make sure --output=/bad/path is caught

The return value from fopen wasn't being checked.

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2206.diff
https://github.com/git/git/commit/7283bbc70a55d7364fbeaefc1009c03fcfc8d929,16 Feb 2010,"Remove hyphen from ""git-command"" in two error messages

Signed-off-by: Pete Harlan <pgit@pcharlan.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2207.diff
https://github.com/git/git/commit/5eef828bc03649ba11acc05c983d72823c27f0bb,01 Feb 2010,"fast-import: Stream very large blobs directly to pack

If a blob is larger than the configured big-file-threshold, instead
of reading it into a single buffer obtained from malloc, stream it
onto the end of the current pack file.  Streaming the larger objects
into the pack avoids the 4+ GiB memory footprint that occurs when
fast-import is processing 2+ GiB blobs.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/patch_2208.diff
https://github.com/git/git/commit/a5e10acbb946305ca42f510cdb196d171020238e,27 Jan 2010,"Update @{bogus.timestamp} fix not to die()

The caller will say ""It is not a valid object name"" if it wants to, and
some callers may even try to see if it names an object and otherwise try to
see if it is a path.

Pointed out by Jeff King.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2209.diff
https://github.com/git/git/commit/93cfa7c7a85efbdb00daade4ad0afc11bd2fdf37,26 Jan 2010,"approxidate_careful() reports errorneous date string

For a long time, the time based reflog syntax (e.g. master@{yesterday})
didn't complain when the ""human readable"" timestamp was misspelled, as
the underlying mechanism tried to be as lenient as possible.  The funny
thing was that parsing of ""@{now}"" even relied on the fact that anything
not recognized by the machinery returned the current timestamp.

Introduce approxidate_careful() that takes an optional pointer to an
integer, that gets assigned 1 when the input does not make sense as a
timestamp.

As I am too lazy to fix all the callers that use approxidate(), most of
the callers do not take advantage of the error checking, but convert the
code to parse reflog to use it as a demonstration.

Tests are mostly from Jeff King.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/patch_2210.diff
https://github.com/git/git/commit/5bf9219d01b16444b316fe764b58d15bd9265f74,26 Jan 2010,"Add xmallocz()

Add routine for allocating NUL-terminated memory block without risking
integer overflow in addition of +1 for NUL byte.

[jc: with suggestion from Bill Lear]

Signed-off-by: Ilari Liusvaara <ilari.liusvaara@elisanet.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2211.diff
https://github.com/git/git/commit/19c6a4f8369f37c0df1fb57008a891eb6a6dc4bb,22 Jan 2010,"merge-recursive: do not return NULL only to cause segfault

merge-recursive calls write_tree_from_memory() to come up with a virtual
tree, with possible conflict markers inside the blob contents, while
merging multiple common ancestors down.  It is a bug to call the function
with unmerged entries in the index, even if the merge to come up with the
common ancestor resulted in conflicts.  Otherwise the result won't be
expressible as a tree object.

We _might_ want to suggest the user to set GIT_MERGE_VERBOSITY to 5 and
re-run the merge in the message.  At least we will know which part of
process_renames() or process_entry() functions is not correctly handling
the unmerged paths, and it might help us diagnosing the issue.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2212.diff
https://github.com/git/git/commit/66b2ed09c2f0f212c5cd5c095c1f1052ecbb9491,21 Jan 2010,"Fix ""log"" family not to be too agressive about showing notes

Giving ""Notes"" information in the default output format of ""log"" and
""show"" is a sensible progress (the user has asked for it by having the
notes), but for some commands (e.g. ""format-patch"") spewing notes into the
formatted commit log message without being asked is too aggressive.

Enable notes output only for ""log"", ""show"", ""whatchanged"" by default and
only when the user didn't ask any specific --pretty/--format from the
command line; users can explicitly override this default with --show-notes
and --no-notes option.

Parts of tests are taken from Jeff King's fix.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2213.diff
https://github.com/git/git/commit/ab6854515ee2280f187fbc2ab08f9e9115438f3e,20 Jan 2010,"status: don't require the repository to be writable

We need to update the index before hooks run when actually making a
commit, but we shouldn't have to write the index when running ""status"".
If we can, then we have already spent cycles to refresh the index and
it is a waste not to write it out, but it is not a disaster if we cannot
write it out.  The main reason the user is running ""git status"" is to get
the ""status"", and refreshing the index is a mere side effect that we can
do without.

Discovery and initial attempted fix by Dscho.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2214.diff
https://github.com/git/git/commit/6329bade6632a9df4b37dd3a7f8d641eed74bbf5,19 Jan 2010,"bisect: fix singular/plural grammar nit

Remove the trailing 's' from ""revisions"" and ""steps"" when there is
only one.

Signed-off-by: David Ripton <dripton@ripton.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2215.diff
https://github.com/git/git/commit/8db751a8f953bf1a571e1fd825d1a4219e65b501,15 Jan 2010,"fast-import: tag may point to any object type

If you tried to export the official git repository, and then to import it
back then git-fast-import would die complaining that ""Mark :1 not a commit"".

Accordingly to a generated crash file, Mark 1 is not a commit but a blob,
which is pointed by junio-gpg-pub tag. Because git-tag allows to create such
tags, git-fast-import should import them.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2216.diff
https://github.com/git/git/commit/6e8f993a5a17f71edfd26a026bbc83cbbd3c0638,31 Dec 2009,"branch: die explicitly why when calling ""git branch [-a|-r] branchname"".

The -a and -r options used to be silently ignored in such a command.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_2217.diff
https://github.com/git/git/commit/cd0f0f68e1074e684a014e1714104693097caabc,30 Dec 2009,"reset: unbreak hard resets with GIT_WORK_TREE

Commit 952dfc6 tried to tighten the safety valves for doing
a ""reset --hard"" in a bare repository or outside the work
tree, but accidentally broke the case for GIT_WORK_TREE.
This patch unbreaks it.

Most git commands which need a work tree simply use
NEED_WORK_TREE in git.c to die before they get to their
cmd_* function. Reset, however, only needs a work tree in
some cases, and so must handle the work tree itself. The
error that 952dfc6 made was to simply forbid certain
operations if the work tree was not set up; instead, we need
to do the same thing that NEED_WORK_TREE does, which is to
call setup_work_tree(). We no longer have to worry about dying
in the non-worktree case, as setup_work_tree handles that
for us.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2218.diff
https://github.com/git/git/commit/d5f53d6d6f20bbd1ec5507824eb213463554b36a,30 Dec 2009,"archive: complain about path specs that don't match anything

Verify that all path specs match at least one path in the specified
tree and reject those that don't.

This would have made the bug fixed by 782a0005 easier to find.

This implementation is simple to the point of being stupid.  It walks
the full tree for each path spec until it matches something.  It's short
and seems to be fast enough, though.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2219.diff
https://github.com/git/git/commit/c985ddf318a8c41c6e1abc8bebd058b31c7413c1,30 Dec 2009,"git count-objects: handle packs bigger than 4G

Use off_t to count sizes of packs and objects to avoid overflow after
4Gb.

Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2220.diff
https://github.com/git/git/commit/eca4460eeb18b895cb6ca590490073f75fd010a6,26 Dec 2009,"t4019 ""grep"" portability fix

Input to ""grep"" is supposed to be ""text"", but we deliberately feed output
from ""git diff --color"" to sift it into two sets of lines (ones with
errors, the other without).  Some implementations of ""grep"" only report
matches with the exit status, without showing the matched lines in their
output (e.g. OpenBSD 4.6, which says ""Binary file .. matches"").

Fortunately, ""grep -a"" is often a way to force the command to treat its
input as text.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2221.diff
https://github.com/git/git/commit/8b8e862490bba040299905cc0541560f24a11c41,16 Dec 2009,"ignore unknown color configuration

When parsing the config file, if there is a value that is
syntactically correct but unused, we generally ignore it.
This lets non-core porcelains store arbitrary information in
the config file, and it means that configuration files can
be shared between new and old versions of git (the old
versions might simply ignore certain configuration).

The one exception to this is color configuration; if we
encounter a color.{diff,branch,status}.$slot variable, we
die if it is not one of the recognized slots (presumably as
a safety valve for user misconfiguration). This behavior
has existed since 801235c (diff --color: use
$GIT_DIR/config, 2006-06-24), but hasn't yet caused a
problem. No porcelain has wanted to store extra colors, and
we once a color area (like color.diff) has been introduced,
we've never changed the set of color slots.

However, that changed recently with the addition of
color.diff.func. Now a user with color.diff.func in their
config can no longer freely switch between v1.6.6 and older
versions; the old versions will complain about the existence
of the variable.

This patch loosens the check to match the rest of
git-config; unknown color slots are simply ignored. This
doesn't fix this particular problem, as the older version
(without this patch) is the problem, but it at least
prevents it from happening again in the future.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2222.diff
https://github.com/git/git/commit/4966688e55d543fe93f9ba270c0f8b71a2c2a53e,11 Dec 2009,"Update Release Notes for 1.6.6 to remove old bugfixes

These three have already been backported to 1.6.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2223.diff
https://github.com/git/git/commit/4cb51a65a478ff005630d8806d01cd76a8889faf,11 Dec 2009,"Sync with 1.6.5.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",216,data/crawl/git/patch_2224.diff
https://github.com/git/git/commit/1456b043fc0f0a395c35d6b5e55b0dad1b6e7acc,10 Dec 2009,"Remove post-upload-hook

This hook runs after ""git fetch"" in the repository the objects are
fetched from as the user who fetched, and has security implications.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/patch_2225.diff
https://github.com/git/git/commit/77c29b4acae2f129f71e4856b8d0518982802d83,08 Dec 2009,"Revert recent ""git merge <msg> HEAD <commit>..."" deprecation

This reverts commit c0ecb07048ce2123589a2f077d296e8cf29a9570 ""git-pull.sh:
Fix call to git-merge for new command format"" and

commit b81e00a965c62ca72a4b9db425ee173de147808d ""git-merge: a deprecation
notice of the ancient command line syntax"".

They caused a ""git pull"" (without any arguments, and without any local
commits---only to update to the other side) to warn that commit log
message is ignored because the merge resulted in a fast-forward.

Another possible solution is to add an extra option to ""git merge"" so that
""git pull"" can tell it that the message given is not coming from the end
user (the canned message is passed just in case the merge resulted in a
non-ff and caused commit), but I think it is easier _not_ to deprecate the
old syntax.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2226.diff
https://github.com/git/git/commit/441947f6d7533e7567f8ad02fafbf36c22a5ddf9,07 Dec 2009,"git-add/rm doc: Consistently back-quote

Consistently back-quote commands, options and file names.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2227.diff
https://github.com/git/git/commit/3880c18336a77b1a37ec88e5a515498c73eb5551,05 Dec 2009,"Sync with 1.6.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/patch_2228.diff
https://github.com/git/git/commit/952dfc6944b29582482ff50a85c04879406c06ba,05 Dec 2009,"reset: improve worktree safety valves

The existing code checked to make sure we were not in a bare
repository when doing a hard reset. However, we should take
this one step further, and make sure we are in a worktree.
Otherwise, we can end up munging files inside of '.git'.

Furthermore, we should do the same check for --merge resets,
which have the same properties. Actually, a merge reset of
HEAD^ would already complain, since further down in the code
we want a worktree. However, it is nicer to check up-front;
then we are sure we cover all cases (""git reset --merge""
would run, even though it wasn't doing anything) and we can
give a more specific message.

Add tests to t7103 to cover these cases and some missing ones.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2229.diff
https://github.com/git/git/commit/e5f591720caea0c6645fa9852903a1c43d7c3672,04 Dec 2009,"rerere: don't segfault on failure to open rr-cache

The rr-cache directory should always exist if we are doing
garbage collection (earlier code paths check this
explicitly), but we may not necessarily succeed in opening
it (for example, due to permissions problems). In that case,
we should print an error message rather than simply
segfaulting.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2230.diff
https://github.com/git/git/commit/adf9628ea41bd226dc5ab38daa0bc661097a2127,03 Dec 2009,"Prepare for 1.6.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2231.diff
https://github.com/git/git/commit/488bdf2ebe6e99fb30ad958a710b0b3f737b4d0f,03 Dec 2009,"Fix crasher on encountering SHA1-like non-note in notes tree

When loading a notes tree, the code primarily looks for SHA1-like paths
whose total length (discounting directory separators) are 40 chars
(interpreted as valid note entries) or less (interpreted as subtree
entries that may in turn contain note entries when unpacked).

However, there is an additional condition that must hold for valid
subtree entries: They must be _tree_ objects (duh).

This patch adds an appropriate test for this condition, thereby fixing
the crash that occured when passing a non-tree object to the tree-walk
API.

The patch also adds another selftest verifying correct behaviour of
non-notes in note trees.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/patch_2232.diff
https://github.com/git/git/commit/28044baba6d268d91057398ffa041ee1b931a5e0,02 Dec 2009,"Prepare for 1.6.5.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2233.diff
https://github.com/git/git/commit/c86485dd15d54fc6ff2cd0dda3b2a9faa4f2d66e,01 Dec 2009,"Update draft release notes to 1.6.6 before -rc1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_2234.diff
https://github.com/git/git/commit/b81e00a965c62ca72a4b9db425ee173de147808d,01 Dec 2009,"git-merge: a deprecation notice of the ancient command line syntax

The ancient form of git merge command used in the original sample script
has been copied from Linus and are still found everywhere, I think, and
people may still have it in their scripts, but on the other hand, it is so
unintuitive that even people reasonably familiar with git are surprised by
accidentally triggering the support to parse this ancient form.

Gently nudge people to upgrade their script to more recent and readable
style for eventual removal of the original syntax.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2235.diff
https://github.com/git/git/commit/89cb73a19ac94d15babf77af490fa5db78908234,28 Nov 2009,"Give the hunk comment its own color

Inspired by the coloring of quilt.

Introduce a separate color and paint the hunk comment part, i.e. the name
of the function, in a separate color ""diff.func"" (defaults to plain).

Whitespace between hunk header and hunk comment is printed in plain color.

Signed-off-by: Bert Wesarg <bert.wesarg@googlemail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_2236.diff
https://github.com/git/git/commit/06a4755270b86a2af20a5c1f0d785311472b5223,28 Nov 2009,"emit_line(): don't emit an empty <SET><RESET> followed by a newline

When emit_line() is called with an empty line (but non-zero length, as we
send line terminating LF or CRLF to the function), it used to emit
<SET><RESET> followed by a newline.  Stop the wastefulness.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2237.diff
https://github.com/git/git/commit/e7821d73bd0256bfc15c48945beded063e17c1b6,27 Nov 2009,"Add a notice that only certain functions can print color escape codes

We emulate color escape codes on Windows by overriding printf, fprintf,
and fputs. Warn developers that these are the only functions that can be
used to print them.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2238.diff
https://github.com/git/git/commit/7e93d3b9e58a359a1073460e8f2cb3fef0368bd7,27 Nov 2009,"format-patch: add test for parsing of ""--""

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2239.diff
https://github.com/git/git/commit/79f7ca063d6b74e9d7f3db90c85dfa4a162128e4,25 Nov 2009,"shortlog: respect commit encoding

Don't take the author name information without re-encoding from the raw
commit object buffer.

Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Cc: Jiri Kosina <jkosina@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2240.diff
https://github.com/git/git/commit/38a39647b43ea57c96bd6e4a351d0d5353c805bb,22 Nov 2009,"apply: apply works outside a repository

The documentation for 'git apply' talks about applying a
patch/diff to the index and to the working tree, which seems
to imply that it will not work outside a git repository.

Actually 'git patch' works outside a repository (which can
be useful especially for applying binary or rename patches that
the standard ""patch"" utility cannot handle), so the documentation
should mention it.

Thanks to Junio for suggesting better wording.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2241.diff
https://github.com/git/git/commit/8b3dce565084c89ceb19f7ccf0fe22ffd365f7fd,20 Nov 2009,"Teach --stdin option to ""log"" family

Move the logic to read revs from standard input that rev-list knows about
from it to revision machinery, so that all the users of setup_revisions()
can feed the list of revs from the standard input when ""--stdin"" is used
on the command line.

Allow some users of the revision machinery that want different semantics
from the ""--stdin"" option to disable it by setting an option in the
rev_info structure.

This also cleans up the kludge made to bundle.c via cut and paste.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_2242.diff
https://github.com/git/git/commit/63d564b300274ec71a274f9b672366d07ae5620a,20 Nov 2009,"read_revision_from_stdin(): use strbuf

It is so 2005 (and Linus ;-) to have a fixed 1000-byte buffer that
reads from the user.  Let's use strbuf to unlimit the input length.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2243.diff
https://github.com/git/git/commit/61fdbcf98b4564ee00d5005bb99f871863d457e7,18 Nov 2009,"ls-tree: migrate to parse-options

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_2244.diff
https://github.com/git/git/commit/395de250d9d9762b8ac1ce98b297d60d0b5bd643,18 Nov 2009,"Expand ~ and ~user in core.excludesfile, commit.template

These config variables are parsed to substitute ~ and ~user with getpw
entries.

user_path() refactored into new function expand_user_path(), to allow
dynamically allocating the return buffer.

Original patch by Karl Chen, modified by Matthieu Moy, and further
amended by Junio C Hamano.

Signed-off-by: Karl Chen <quarl@quarl.org>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_2245.diff
https://github.com/git/git/commit/28bea9e53481fddcb12e63d8c049f0ff2917a573,16 Nov 2009,"Check the format of more printf-type functions

We already have these checks in many printf-type functions that have
prototypes which are in header files.  Add these same checks to some
more prototypes in header functions and to static functions in .c
files.

cc: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Tarmigan Casebolt <tarmigan+git@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2246.diff
https://github.com/git/git/commit/7a0ebbf829a327768e6d1c32fe1d092814dce4e8,14 Nov 2009,"gitk: Merge branch 'dev' into master

Signed-off-by: Paul Mackerras <paulus@samba.org>",761,data/crawl/git/patch_2247.diff
https://github.com/git/git/commit/44fcb4977cbae67f4698306ccfe982420ceebcbf,13 Nov 2009,"Teach git var about GIT_EDITOR

Expose the command used by launch_editor() for scripts to use.
This should allow one to avoid searching for a proper editor
separately in each command.

git_editor(void) uses the logic to decide which editor to use
that used to live in launch_editor().  The function returns NULL
if there is no suitable editor; the caller is expected to issue
an error message when appropriate.

launch_editor() uses git_editor() and gives the error message the
same way as before when EDITOR is not set.

""git var GIT_EDITOR"" gives the editor name, or an error message
when there is no appropriate one.

""git var -l"" gives GIT_EDITOR=name only if there is an
appropriate editor.

Originally-submitted-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_2248.diff
https://github.com/git/git/commit/c27b39252ff713db414b8dbbfb263d0468031fab,13 Nov 2009,"Suppress warnings from ""git var -l""

For scripts using ""git var -l"" to read all logical variables at
once, not all per-variable warnings will be relevant.  So suppress
them.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2249.diff
https://github.com/git/git/commit/d33738d7d3ed42a956c74d0125eb2b3abda451b7,13 Nov 2009,"Do not use VISUAL editor on dumb terminals

Refuse to use $VISUAL and fall back to $EDITOR if TERM is unset
or set to ""dumb"".  Traditionally, VISUAL is set to a screen
editor and EDITOR to a line-based editor, which should be more
useful in that situation.

vim, for example, is happy to assume a terminal supports ANSI
sequences even if TERM is dumb (e.g., when running from a text
editor like Acme).  git already refuses to fall back to vi on a
dumb terminal if GIT_EDITOR, core.editor, VISUAL, and EDITOR are
unset, but without this patch, that check is suppressed by
VISUAL=vi.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2250.diff
https://github.com/git/git/commit/b31222cfb7f2fcdc5b3d76ce5fcebf6ff1929826,13 Nov 2009,"Update packfile transfer protocol documentation

The current technical documentation for the packfile protocol is both
sparse and incorrect.  This documents the fetch-pack/upload-pack and
send-pack/ receive-pack protocols much more fully.

Add documentation from Shawn's upcoming http-protocol docs that is
shared by the packfile protocol. protocol-common.txt describes ABNF
notation amendments, refname rules and the packet line format.

Add documentation on the various capabilities supported by the
upload-pack and receive-pack protocols. protocol-capabilities.txt
describes multi-ack, thin-pack, side-band[-64k], shallow, no-progress,
include-tag, ofs-delta, delete-refs and report-status.

Signed-off-by: Scott Chacon <schacon@gmail.com>
Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",818,data/crawl/git/patch_2251.diff
https://github.com/git/git/commit/d74bb308fa9e49e0a5b9a0792e6079bbc0c8aea8,10 Nov 2009,"diff --no-index: make the usage string less scary

Start the diff --no-index usage string with ""usage:"" instead of
""fatal:"".

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2252.diff
https://github.com/git/git/commit/0874f46e711393b61f6375ab9e2cd4a0c2b812e9,10 Nov 2009,"merge-{recursive,subtree}: use usagef() to print usage

Usage messages (for example, from ""git merge-recursive -h"") are
friendlier when not preceded by ""fatal"".

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2253.diff
https://github.com/git/git/commit/64b1cb74f8312c0a43ce32f51097172efc69355a,10 Nov 2009,"Introduce usagef() that takes a printf-style format

Some new callers would want to use printf-like formatting, when issuing
their usage messages.  An option is to change usage() itself also be like
printf(), which would make it similar to die() and warn().

But usage() is typically fixed, as opposed to die() and warn() that gives
diagnostics depending on the situation.  Indeed, the majority of strings
given by existing callsites to usage() are fixed strings.  If we were to
make usage() take printf-style format, they all need to be changed to have
""%s"" as their first argument.

So instead, introduce usagef() so that limited number of callers can use
it.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2254.diff
https://github.com/git/git/commit/99caeed05d3e89176d352104a2b70a77aa7e5d81,10 Nov 2009,"Let 'git <command> -h' show usage without a git dir

There is no need for ""git <command> -h"" to depend on being inside
a repository.

Reported by Gerfried Fuchs through http://bugs.debian.org/462557

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_2255.diff
https://github.com/git/git/commit/02bc5b03f54b51f8b45c81cce74284ced602e6de,10 Nov 2009,"format-patch: Always generate a patch

Jeff King recently reinstated -p to suppress the default diffstat
(as -p used to work before 68daa64, about 14 months ago).

However, -p is also needed in combination with certain options
(e.g. --stat or --numstat) in order to produce any patch at all.
The documentation does not mention this.

Since the purpose of format-patch is to produce a patch that
can be emailed, it does not make sense that certain combination
of options will suppress the generation of the patch itself.

Therefore:

* Update 'git format-patch' to always generate a patch.

* Since the --name-only, --name-status, and --check suppresses
  the generation of the patch, disallow those options,
  and remove the description of them in the documentation.

* Remove the reference to -p in the description of -U.

* Remove the descriptions of the options that are synonyms for -p
  plus another option (--patch-with-raw and --patch-with-stat).

* While at it, slightly tweak the description of -p itself
  to say that it generates ""plain patches"", so that you can
  think of -p as ""plain patch"" as an mnemonic aid.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_2256.diff
https://github.com/git/git/commit/8db355964d89c19eb262ffe38e57e5a610e1cc05,10 Nov 2009,"Re-implement 'git remote update' using 'git fetch'

In order not to duplicate functionality, re-implement 'git remote
update' in terms of 'git fetch'.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_2257.diff
https://github.com/git/git/commit/f360d844de4b752b4cba2343b95592ae4d55d09a,10 Nov 2009,"builtin-fetch: add --prune option

Teach fetch to cull stale remote tracking branches after fetching via --prune.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_2258.diff
https://github.com/git/git/commit/3cf6134ad016712ecb78186d9079b9cff7b25416,10 Nov 2009,"teach warn_dangling_symref to take a FILE argument

Different callers of warn_dangling_symref() may want to control whether its
output goes to stdout or stderr so let it take a FILE argument.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2259.diff
https://github.com/git/git/commit/16679e373fa85a75c85e6e3b4ae5cd58a89a4114,10 Nov 2009,"Teach the --multiple option to 'git fetch'

Add the --multiple option to specify that all arguments are either
groups or remotes. The primary reason for adding this option is
to allow us to re-implement 'git remote update' using fetch.

It would have been nice if this option was not needed, but since
the colon in a refspec is optional, it is in general not possible
to know whether a single, colon-less argument is a remote or a
refspec.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2260.diff
https://github.com/git/git/commit/9c4a036b34acef63ab754f0e27e5e54bd9d9a210,10 Nov 2009,"Teach the --all option to 'git fetch'

'git remote' is meant for managing remotes and 'git fetch' is meant
for actually fetching data from remote repositories. Therefore, it is
not logical that you must use 'git remote update' to fetch from
more than one repository at once.

Add the --all option to 'git fetch', to tell it to attempt to fetch
from all remotes. Also, if --all is not given, the <repository>
argument is allowed to be the name of a group, to allow fetching
from all repositories in the group.

Other options except -v and -q are silently ignored.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",269,data/crawl/git/patch_2261.diff
https://github.com/git/git/commit/34b6cb8bb032bd16f3d1c93a8417beb75e51ed29,10 Nov 2009,"http-backend: Protect GIT_PROJECT_ROOT from /../ requests

Eons ago HPA taught git-daemon how to protect itself from /../
attacks, which Junio brought back into service in d79374c7b58d
(""daemon.c and path.enter_repo(): revamp path validation"").

I did not carry this into git-http-backend as originally we relied
only upon PATH_TRANSLATED, and assumed the HTTP server had done
its access control checks to validate the resolved path was within
a directory permitting access from the remote client.  This would
usually be sufficient to protect a server from requests for its
/etc/passwd file by http://host/smart/../etc/passwd sorts of URLs.

However in 917adc036086 Mark Lodato added GIT_PROJECT_ROOT as an
additional method of configuring the CGI.  When this environment
variable is used the web server does not generate the final access
path and therefore may blindly pass through ""/../etc/passwd""
in PATH_INFO under the assumption that ""/../"" might have special
meaning to the invoked CGI.

Instead of permitting these sorts of malformed path requests, we
now reject them back at the client, with an error message for the
server log.  This matches git-daemon behavior.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",134,data/crawl/git/patch_2262.diff
https://github.com/git/git/commit/1d46f2ea143534e46e6bfee3f34cd90b734bfe80,09 Nov 2009,"format-patch: make ""-p"" suppress diffstat

Once upon a time, format-patch would use its default stat
plus patch format only when no diff format was given on the
command line. This meant that ""format-patch -p"" would
suppress the stat and show just the patch.

Commit 68daa64 changed this to keep the stat format when we
had an ""implicit"" patch format, like ""-U5"". As a side
effect, this meant that an explicit patch format was now
ignored (because cmd_format_patch didn't know the reason
that the format was set way down in diff_opt_parse).

This patch unbreaks what 68daa64 did (while still preserving
what 68daa64 was trying to do), reinstating ""-p"" to suppress
the default behavior. We do this by parsing ""-p"" ourselves
in format-patch, and noting whether it was used explicitly.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2263.diff
https://github.com/git/git/commit/b9f3bde150a1be1e2adfb2834caaf415dd7b72ef,07 Nov 2009,"t1200: further modernize test script style

Instead of using bare ""cmp"", use ""test_cmp"".  Output when the test is run
with a -v option becomes easier to diagnose when something goes wrong
because on saner platforms test_cmp uses ""diff -u"".

There is no need to put an extra backslash to a line that ends with a '|'
(i.e. the upstream of a pipe).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_2264.diff
https://github.com/git/git/commit/7c5858a643724a9a4a67f1290c03d57f483ed261,07 Nov 2009,"t1200: Make documentation and test agree

There were some differences between t1200 and the gitcore-tutorial. Add
missing tests for manually merging two branches, and use the same
commands in both files.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_2265.diff
https://github.com/git/git/commit/1a994dc3d258a1603752e0c472b072acc343a963,07 Nov 2009,"t1200: cleanup and modernize test style

Many parts of the tests in t1200 are run outside the test harness,
circumventing the usefulness of -v and spewing messages to stdout when
-v isn't used. Fix these problems by modernizing the test a bit.

An extra test_done has existed since commit 6a74642 (git-commit --amend:
two fixes., 2006-04-20) leading to the last 6 tests never being run.
Remove it and teach the resolve merge test about fast-forward merges.
Also fix the last test's incorrect find command and prune before
checking for unpacked objects so we remove the unreachable conflict-marked
blob.

Finally, we remove the TODO notes, because fetch, push, and clone have
their own tests since t1200 was introduced and we're not going to add
them here 4 years later.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",134,data/crawl/git/patch_2266.diff
https://github.com/git/git/commit/b8538603a34b13ccb1a3a096f461b8a35d7ea878,05 Nov 2009,"Smart HTTP fetch: gzip requests

The upload-pack requests are mostly plain text and they compress
rather well.  Deflating them with Content-Encoding: gzip can easily
drop the size of the request by 50%, reducing the amount of data
to transfer as we negotiate the common commits.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2267.diff
https://github.com/git/git/commit/249b2004d8c9c58ed1ea1665dfd376af0312ed7e,05 Nov 2009,"Smart fetch over HTTP: client side

The git-remote-curl backend detects if the remote server supports
the git-upload-pack service, and if so, runs git-fetch-pack locally
in a pipe to generate the want/have commands.

The advertisements from the server that were obtained during the
discovery are passed into git-fetch-pack before the POST request
starts, permitting server capability discovery and enablement.

Common objects that are discovered are appended onto the request as
have lines and are sent again on the next request.  This allows the
remote side to reinitialize its in-memory list of common objects
during the next request.

Because all requests are relatively short, below git-remote-curl's
1 MiB buffer limit, requests will use the standard Content-Length
header and be valid HTTP/1.0 POST requests.  This makes the fetch
client more tolerant of proxy servers which don't support HTTP/1.1
or the chunked transfer encoding.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/patch_2268.diff
https://github.com/git/git/commit/de1a2fdd38b138c4e4fed6412783dcb74d63d2da,05 Nov 2009,"Smart push over HTTP: client side

The git-remote-curl backend detects if the remote server supports
the git-receive-pack service, and if so, runs git-send-pack in a
pipe to dump the command and pack data as a single POST request.

The advertisements from the server that were obtained during the
discovery are passed into git-send-pack before the POST request
starts.  This permits git-send-pack to operate largely unmodified.

For smaller packs (those under 1 MiB) a HTTP/1.0 POST with a
Content-Length is used, permitting interaction with any server.
The 1 MiB limit is arbitrary, but is sufficent to fit most deltas
created by human authors against text sources with the occasional
small binary file (e.g. few KiB icon image).  The configuration
option http.postBuffer can be used to increase (or shink) this
buffer if the default is not sufficient.

For larger packs which cannot be spooled entirely into the helper's
memory space (due to http.postBuffer being too small), the POST
request requires HTTP/1.1 and sets ""Transfer-Encoding: chunked"".
This permits the client to upload an unknown amount of data in one
HTTP transaction without needing to pregenerate the entire pack
file locally.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",389,data/crawl/git/patch_2269.diff
https://github.com/git/git/commit/97cc7bc45c2e076184b84749952b216036a6ecd6,05 Nov 2009,"Discover refs via smart HTTP server when available

Instead of loading the cached info/refs, try to use the smart HTTP
version when the server supports it.  Since the smart variant is
actually the pkt-line stream from the start of either upload-pack
or receive-pack we need to parse these through get_remote_heads,
which requires a background thread to feed its pipe.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",148,data/crawl/git/patch_2270.diff
https://github.com/git/git/commit/917adc036086f52b0277ff03d10b7044c9d9d0d2,05 Nov 2009,"http-backend: add GIT_PROJECT_ROOT environment var

Add a new environment variable, GIT_PROJECT_ROOT, to override the
method of using PATH_TRANSLATED to find the git repository on disk.
This makes it much easier to configure the web server, especially when
the web server's DocumentRoot does not contain the git repositories,
which is the usual case.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2271.diff
https://github.com/git/git/commit/556cfa3b6d316074d41cd73c4659402fdb6207c8,05 Nov 2009,"Smart fetch and push over HTTP: server side

Requests for $GIT_URL/git-receive-pack and $GIT_URL/git-upload-pack
are forwarded to the corresponding backend process by directly
executing it and leaving stdin and stdout connected to the invoking
web server.  Prior to starting the backend process the HTTP response
headers are sent, thereby freeing the backend from needing to know
about the HTTP protocol.

Requests that are encoded with Content-Encoding: gzip are
automatically inflated before being streamed into the backend.
This is primarily useful for the git-upload-pack backend, which
receives highly repetitive text data from clients that easily
compresses to 50% of its original size.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/patch_2272.diff
https://github.com/git/git/commit/42526b478e369d7e8c9a95186ad87fae9930eea5,05 Nov 2009,"Add stateless RPC options to upload-pack, receive-pack

When --stateless-rpc is passed as a command line parameter to
upload-pack or receive-pack the programs now assume they may
perform only a single read-write cycle with stdin and stdout.
This fits with the HTTP POST request processing model where a
program may read the request, write a response, and must exit.

When --advertise-refs is passed as a command line parameter only
the initial ref advertisement is output, and the program exits
immediately.  This fits with the HTTP GET request model, where
no request content is received but a response must be produced.

HTTP headers and/or environment are not processed here, but
instead are assumed to be handled by the program invoking
either service backend.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_2273.diff
https://github.com/git/git/commit/2f4038ab337e55017d4ff21ddbae9427544ca02c,05 Nov 2009,"Git-aware CGI to provide dumb HTTP transport

The git-http-backend CGI can be configured into any Apache server
using ScriptAlias, such as with the following configuration:

  LoadModule cgi_module /usr/libexec/apache2/mod_cgi.so
  LoadModule alias_module /usr/libexec/apache2/mod_alias.so
  ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/

Repositories are accessed via the translated PATH_INFO.

The CGI is backwards compatible with the dumb client, allowing all
older HTTP clients to continue to download repositories which are
managed by the CGI.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",396,data/crawl/git/patch_2274.diff
https://github.com/git/git/commit/c51f6ceed6a9a436f16f8b4f17eab1a3d17cffed,05 Nov 2009,"commit -c/-C/--amend: reset timestamp and authorship to committer with --reset-author

When we use -c, -C, or --amend, we are trying one of two things: using the
source as a template or modifying a commit with corrections.

When these options are used, the authorship and timestamp recorded in the
newly created commit are always taken from the original commit.  This is
inconvenient when we just want to borrow the commit log message or when
our change to the code is so significant that we should take over the
authorship (with the blame for bugs we introduce, of course).

The new --reset-author option is meant to solve this need by regenerating
the timestamp and setting the committer as the new author.

Signed-off-by: Erick Mattos <erick.mattos@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_2275.diff
https://github.com/git/git/commit/a45d3d7effdfb4b6b9fe75c9206a79d3cdcb3922,04 Nov 2009,"Allow curl helper to work without a local repository

It's okay to use the curl helper without a local repository, so long
as you don't use ""fetch"". There aren't any git programs that would try
to use it, and it doesn't make sense to try it (since there's nowhere
to write the results), but we may as well be clear.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2276.diff
https://github.com/git/git/commit/c1d45cf7b0c1953eed72a3018b5e557dbcd538e0,04 Nov 2009,"Require a struct remote in transport_get()

cmd_ls_remote() was calling transport_get() with a NULL remote and a
non-NULL url in the case where it was run outside a git
repository. This involved a bunch of ill-tested special
cases. Instead, simply get the struct remote for the URL with
remote_get(), which works fine outside a git repository, and can also
take global options into account.

This fixes a tiny and obscure bug where ""git ls-remote"" without a repo
didn't support global url.*.insteadOf, even though ""git clone"" and
""git ls-remote"" in any repo did.

Also, enforce that all callers provide a struct remote to transport_get().

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2277.diff
https://github.com/git/git/commit/5f809ff50921bee44bbf88c49056e7d145c0c35f,31 Oct 2009,fixup tr/stash-format merge,271,data/crawl/git/patch_2278.diff
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/patch_2279.diff
https://github.com/git/git/commit/ef08ef9ea0a271e5be5844408d2496a946d6e8d9,31 Oct 2009,"remote-helpers: Support custom transport options

Some transports, like the native pack transport implemented by
fetch-pack, support useful features like depth or include tags.
These should be exposed if the underlying helper knows how to
use them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/patch_2280.diff
https://github.com/git/git/commit/292ce46b60e2c12450c5c21044acf9c41bd837df,31 Oct 2009,"remote-helpers: Fetch more than one ref in a batch

Some network protocols (e.g. native git://) are able to fetch more
than one ref at a time and reduce the overall transfer cost by
combining the requests into a single exchange.  Instead of feeding
each fetch request one at a time to the helper, feed all of them
at once so the helper can decide whether or not it should batch them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/patch_2281.diff
https://github.com/git/git/commit/78affc49ded26700450d25168534af02b29a6c61,31 Oct 2009,"Add multi_ack_detailed capability to fetch-pack/upload-pack

When multi_ack_detailed is enabled the ACK continue messages returned
by the remote upload-pack are broken out to describe the different
states within the peer.  This permits the client to better understand
the server's in-memory state.

The fetch-pack/upload-pack protocol now looks like:

NAK
---------------------------------
  Always sent in response to ""done"" if there was no common base
  selected from the ""have"" lines (or no have lines were sent).

  * no multi_ack or multi_ack_detailed:

    Sent when the client has sent a pkt-line flush (""0000"") and
    the server has not yet found a common base object.

  * either multi_ack or multi_ack_detailed:

    Always sent in response to a pkt-line flush.

ACK %s
-----------------------------------
  * no multi_ack or multi_ack_detailed:

    Sent in response to ""have"" when the object exists on the remote
    side and is therefore an object in common between the peers.
    The argument is the SHA-1 of the common object.

  * either multi_ack or multi_ack_detailed:

    Sent in response to ""done"" if there are common objects.
    The argument is the last SHA-1 determined to be common.

ACK %s continue
-----------------------------------
  * multi_ack only:

    Sent in response to ""have"".

    The remote side wants the client to consider this object as
    common, and immediately stop transmitting additional ""have""
    lines for objects that are reachable from it.  The reason
    the client should stop is not given, but is one of the two
    cases below available under multi_ack_detailed.

ACK %s common
-----------------------------------
  * multi_ack_detailed only:

    Sent in response to ""have"".  Both sides have this object.
    Like with ""ACK %s continue"" above the client should stop
    sending have lines reachable for objects from the argument.

ACK %s ready
-----------------------------------
  * multi_ack_detailed only:

    Sent in response to ""have"".

    The client should stop transmitting objects which are reachable
    from the argument, and send ""done"" soon to get the objects.

    If the remote side has the specified object, it should
    first send an ""ACK %s common"" message prior to sending
    ""ACK %s ready"".

    Clients may still submit additional ""have"" lines if there are
    more side branches for the client to explore that might be added
    to the common set and reduce the number of objects to transfer.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_2282.diff
https://github.com/git/git/commit/28754ab5f0ce9b4f6ca1641c3e10e2c68bd9b3fc,31 Oct 2009,"Move ""get_ack()"" back to fetch-pack

In 41cb7488 Linus moved this function to connect.c for reuse inside
of the git-clone-pack command.  That was 2005, but in 2006 Junio
retired git-clone-pack in commit efc7fa53.  Since then the only
caller has been fetch-pack.  Since this ACK/NAK exchange is only
used by the fetch-pack/upload-pack protocol we should move it back
to be a private detail of fetch-pack.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2283.diff
https://github.com/git/git/commit/edace6f02eeae6f4a06ed1e4f6308703523d8535,31 Oct 2009,"fetch-pack: Use a strbuf to compose the want list

This change is being offered as a refactoring to make later
commits in the smart HTTP series easier.

By changing the enabled capabilities to be formatted in a strbuf
it is easier to add a new capability to the set of supported
capabilities.

By formatting the want portion of the request into a strbuf and
writing it as a whole block we can later decide to hold onto
the req_buf (instead of releasing it) to recycle in stateless
communications.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2284.diff
https://github.com/git/git/commit/743c4b7b0fa5422d1bb5dc59c6cb919a881dd98b,31 Oct 2009,"pkt-line: Make packet_read_line easier to debug

When there is an error parsing the 4 byte length component we now
display it as part of the die message, this may hint as to what
data was misunderstood by the application.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2285.diff
https://github.com/git/git/commit/f5615d246770a2796e60b06dd5e17f5e79d5dd0c,31 Oct 2009,"pkt-line: Add strbuf based functions

These routines help to work with pkt-line values inside of a strbuf,
permitting simple formatting of buffered network messages.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_2286.diff
https://github.com/git/git/commit/46e09f310567b680c03151e048bf2b7e847611e2,30 Oct 2009,"t/gitweb-lib.sh: Split gitweb output into headers and body

Save HTTP headers into gitweb.headers, and the body of message into
gitweb.body in gitweb_run()

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2287.diff
https://github.com/git/git/commit/134748353b2a71a34f899c9b1326ccf7ae082412,30 Oct 2009,"Teach 'git merge' and 'git pull' the option --ff-only

For convenience in scripts and aliases, add the option
--ff-only to only allow fast-forwards (and up-to-date,
despite the name).

Disallow combining --ff-only and --no-ff, since they
flatly contradict each other.

Allow all other options to be combined with --ff-only
(i.e. do not add any code to handle them specially),
including the following options:

* --strategy (one or more): As long as the chosen merge
  strategy results in up-to-date or fast-forward, the
  command will succeed.

* --squash: I cannot imagine why anyone would want to
  squash commits only if fast-forward is possible, but I
  also see no reason why it should not be allowed.

* --message: The message will always be ignored, but I see
  no need to explicitly disallow providing a redundant message.

Acknowledgements: I did look at Yuval Kogman's earlier
patch (107768 in gmane), mainly as shortcut to find my
way in the code, but I did not copy anything directly.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2288.diff
https://github.com/git/git/commit/d52dc4b10b2f78dc24ea05e88ddc25ee0f46491e,30 Oct 2009,"clone: detect extra arguments

If git clone is given more than two non-option arguments, it
silently throws away all but the first one.  Complain instead.

Discovered by comparing the new builtin clone to the old
git-clone.sh.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2289.diff
https://github.com/git/git/commit/500348aa6859e436a890f5f5a7e0eeea8ef6c1de,30 Oct 2009,"ls-files: unbreak ""ls-files -i""

Commit b5227d8 changed the behavior of ""ls-files"" with
respect to includes, but accidentally broke the ""-i"" option
The original behavior was:

  1. if no ""-i"" is given, cull all results according to --exclude*
  2. if ""-i"" is given, show the inverse of (1)

The broken behavior was:

  1. if no ""-i"" is given:
     a. for ""-o"", cull results according to --exclude*
     b. for index files, always show all
  2. if ""-i"" is given:
     a. for ""-o"", shows the inverse of (1a)
     b. for index files, always show all

The fixed behavior keeps the new (1b) behavior introduced
by b5227d8, but fixes the (2b) behavior to show only ignored
files, not all files.

This patch also tweaks the documentation. The original text
was somewhat obscure in the first place, but it is also now
inaccurate (the relationship between (1b) and (2b) is not
quite a ""reverse"").

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2290.diff
https://github.com/git/git/commit/4d23660e79dbbb7e2ae37cb7193166d085a78502,28 Oct 2009,"describe: when failing, tell the user about options that work

Users seem to call git-describe without reading the manpage, and then
wonder why it doesn't work with unannotated tags by default.

Make a minimal effort towards seeing if there would have been
unannotated tags, and tell the user.  Specifically, we say that --tags
could work if we found any unannotated tags.  If not, we say that
--always would have given results.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2291.diff
https://github.com/git/git/commit/73cf0822b2a4ffa7ad559d1f0772e39718fc7776,28 Oct 2009,"remote: Make ref_remove_duplicates faster for large numbers of refs

The ref_remove_duplicates function was very slow at dealing with very
large numbers of refs.  This is because it was using a linear search
through all remaining refs to find any duplicates of the current ref.

Rewriting it to use a string list to keep track of which refs have
already been seen and removing duplicates when they are found is much
more efficient.

Signed-off-by: Julian Phillips <julian@quantumfyre.co.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_2292.diff
https://github.com/git/git/commit/a29aa47da79cfd0ef7ee0ef423e7e5a9a3cf07bd,28 Oct 2009,"help -i: properly error out if no info viewer can be found

With this commit, git help -i <cmd> prints an error message and exits
non-zero instead of being silent and exit code 0.

Reported by Trent W. Buck through
 http://bugs.debian.org/537664

Signed-off-by: Gerrit Pape <pape@smarden.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1,data/crawl/git/patch_2293.diff
https://github.com/git/git/commit/9f67d2e8279e1885ef2b4681c19cef8534259783,27 Oct 2009,"Teach ""git describe"" --dirty option

With the --dirty option, git describe works on HEAD but append s""-dirty""
iff the contents of the work tree differs from HEAD.  E.g.

  $ git describe --dirty
  v1.6.5-15-gc274db7
  $ echo >> Makefile
  $ git describe --dirty
  v1.6.5-15-gc274db7-dirty

The --dirty option can also be used to specify what is appended, instead
of the default string ""-dirty"".

  $ git describe --dirty=.mod
  v1.6.5-15-gc274db7.mod

Many build scripts use `git describe` to produce a version number based on
the description of HEAD (on which the work tree is based) + saying that if
the build contains uncommitted changes.  This patch helps the writing of
such scripts since `git describe --dirty` does directly the intended thing.

Three possiblities were considered while discussing this new feature:

1. Describe the work tree by default and describe HEAD only if ""HEAD"" is
   explicitly specified

     Pro: does the right thing by default (both for users and for scripts)
     Pro: other git commands that works on the work tree by default
     Con: breaks existing scripts used by the Linux kernel and other projects

2. Use --worktree instead of --dirty

     Pro: does what it says: ""git describe --worktree"" describes the work tree
     Con: other commands do not require a --worktree option when working
          on the work tree (it often is the default mode for them)
     Con: unusable with an optional value: ""git describe --worktree=.mod""
	  is quite unintuitive.

3. Use --dirty as in this patch

     Pro: makes sense to specify an optional value (what the dirty mark is)
     Pro: does not have any of the big cons of previous alternatives
	  * does not break scripts
	  * is not inconsistent with other git commands

This patch takes the third approach.

Signed-off-by: Jean Privat <jean@pryen.org>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2294.diff
https://github.com/git/git/commit/a75d7b54097ef0d0945cbe673a9940d6c561f95c,25 Oct 2009,"Use 'fast-forward' all over the place

It's a compound word.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_2295.diff
https://github.com/git/git/commit/dad5f89fc568639c43bdbf344411757adf39d636,21 Oct 2009,"gc --auto --quiet: make the notice a bit less verboase

When ""gc --auto --quiet"" decides there is something to do, it tells the
user what it is doing, as it is going to make the user wait for a bit.

But the message was a bit too long.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2296.diff
https://github.com/git/git/commit/752c0c24926aacbceca0d27de6ad22cbb7dd0709,20 Oct 2009,"Add the --submodule option to the diff option family

When you use the option --submodule=log you can see the submodule
summaries inlined in the diff, instead of not-quite-helpful SHA-1 pairs.

The format imitates what ""git submodule summary"" shows.

To do that, <path>/.git/objects/ is added to the alternate object
databases (if that directory exists).

This option was requested by Jens Lehmann at the GitTogether in Berlin.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",151,data/crawl/git/patch_2297.diff
https://github.com/git/git/commit/72b103fec7af967d295410c2fd3899bc6e8386e2,20 Oct 2009,"reflog-walk: refactor the branch@{num} formatting

We'll use the same output in an upcoming commit, so refactor its
formatting (which was duplicated anyway) into a separate function.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_2298.diff
https://github.com/git/git/commit/c94d2dd0807328b1ee4aa8353382caa45bc24055,20 Oct 2009,"imap-send: use run-command API for tunneling

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_2299.diff
https://github.com/git/git/commit/3a7cba95b74dd2460f8b9bf4f7cefa3c21d31fdd,20 Oct 2009,"imap-send: remove useless uid code

The imap-send code is based on code from isync, a program
for syncing imap mailboxes. Because of this, it has
inherited some code that makes sense for isync, but not for
imap-send.

In particular, when storing a message, it does one of:

  - if the server supports it, note the server-assigned
    unique identifier (UID) given to each message

  - otherwise, assigned a random UID and store it in the
    message header as X-TUID

Presumably this is used in isync to be able to synchronize
mailstores multiple times without duplication. But for
imap-send, the values are useless; we never do anything
with them and simply forget them at the end of the program.

This patch removes the useless code. Not only is it nice for
maintainability to get rid of dead code, but the removed
code relied on the existence of /dev/urandom, which made it
a portability problem for non-Unix platforms.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/patch_2300.diff
https://github.com/git/git/commit/a099469bbcf273e76d81573229971956b4ef0700,20 Oct 2009,"Add selftests verifying concatenation of multiple notes for the same commit

Also verify that multiple references to the _same_ note blob are _not_
concatenated.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_2301.diff
https://github.com/git/git/commit/ef8db638cc96abaf166bbafe31752219f3d2cdc2,20 Oct 2009,"Refactor notes code to concatenate multiple notes annotating the same object

Currently, having multiple notes referring to the same commit from various
locations in the notes tree is strongly discouraged, since only one of those
notes will be parsed and shown.

This patch teaches the notes code to _concatenate_ multiple notes that
annotate the same commit. Notes are concatenated by creating a new blob
object containing the concatenation of the notes in question, and
replacing them with the concatenated note in the internal notes tree
structure.

Getting the concatenation right requires being more proactive in unpacking
subtree entries in the internal notes tree structure, so that we don't return
a note prematurely (i.e. before having found all other notes that annotate
the same object). As such, this patch may incur a small performance penalty.

Suggested-by: Sam Vilain <sam@vilain.net>
Re-suggested-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",243,data/crawl/git/patch_2302.diff
https://github.com/git/git/commit/0057c0917d35f9f21e01f2122e7f2b9f169a8b02,20 Oct 2009,"Add selftests verifying that we can parse notes trees with various fanouts

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_2303.diff
https://github.com/git/git/commit/23123aecf8418a6b0ec23378555ed78c438ae894,20 Oct 2009,"Teach the notes lookup code to parse notes trees with various fanout schemes

The semantics used when parsing notes trees (with regards to fanout subtrees)
follow Dscho's proposal fairly closely:
- No concatenation/merging of notes is performed. If there are several notes
  objects referencing a given commit, only one of those objects are used.
- If a notes object for a given commit is present in the ""root"" notes tree,
  no subtrees are consulted; the object in the root tree is used directly.
- If there are more than one subtree that prefix-matches the given commit,
  only the subtree with the longest matching prefix is consulted. This
  means that if the given commit is e.g. ""deadbeef"", and the notes tree have
  subtrees ""de"" and ""dead"", then the following paths in the notes tree are
  searched: ""deadbeef"", ""dead/beef"". Note that ""de/adbeef"" is NOT searched.
- Fanout directories (subtrees) must references a whole number of bytes
  from the SHA1 sum they subdivide. E.g. subtrees ""dead"" and ""de"" are
  acceptable; ""d"" and ""dea"" are not.
- Multiple levels of fanout are allowed. All the above rules apply
  recursively. E.g. ""de/adbeef"" is preferred over ""de/adbe/ef"", etc.

This patch changes the in-memory datastructure for holding parsed notes:
Instead of holding all note (and subtree) entries in a hash table, a
simple 16-tree structure is used instead. The tree structure consists of
16-arrays as internal nodes, and note/subtree entries as leaf nodes. The
tree is traversed by indexing subsequent nibbles of the search key until
a leaf node is encountered. If a subtree entry is encountered while
searching for a note, the subtree is unpacked into the 16-tree structure,
and the search continues into that subtree.

The new algorithm performs significantly better in the cases where only
a fraction of the notes need to be looked up (this is assumed to be the
common case for notes lookup). The new code even performs marginally
better in the worst case (where _all_ the notes are looked up).

In addition to this, comes the massive performance win associated with
organizing the notes tree according to some fanout scheme. Even a simple
2/38 fanout scheme is dramatically quicker to traverse (going from tens of
seconds to sub-second runtimes).

As for memory usage, the new code is marginally better than the old code in
the worst case, but in the case of looking up only some notes from a notes
tree with proper fanout, the new code uses only a small fraction of the
memory needed to hold the entire notes tree.

However, there is one casualty of this patch. The old notes lookup code was
able to parse notes that were associated with non-SHA1s (e.g. refs). The new
code requires the referenced object to be named by a SHA1 sum. Still, this
is not considered a major setback, since the notes infrastructure was not
originally intended to annotate objects outside the Git object database.

Cc: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",317,data/crawl/git/patch_2304.diff
https://github.com/git/git/commit/3ed24b6aaf35d6ca1eef2643cd0b9128eb152cda,20 Oct 2009,"t3302-notes-index-expensive: Speed up create_repo()

Creating repos with 10/100/1000/10000 commits and notes takes a lot of time.
However, using git-fast-import to do the job is a lot more efficient than
using plumbing commands to do the same.

This patch decreases the overall run-time of this test on my machine from
~3 to ~1 minutes.

Signed-off-by: Johan Herland <johan@herland.net>
Acked-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_2305.diff
https://github.com/git/git/commit/a8dd2e7d2bd7472b4e02b07aeef795de9c74f3e7,20 Oct 2009,"fast-import: Add support for importing commit notes

Introduce a 'notemodify' subcommand of the 'commit' command. This subcommand
is similar to 'filemodify', except that no mode is supplied (all notes have
mode 0644), and the path is set to the hex SHA1 of the given ""comittish"".

This enables fast import of note objects along with their associated commits,
since the notes can now be named using the mark references of their
corresponding commits.

The patch also includes a test case of the added functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",299,data/crawl/git/patch_2306.diff
https://github.com/git/git/commit/d9246d4303f441c0e30614cd3a97a80fbe9354b6,20 Oct 2009,"Teach ""-m <msg>"" and ""-F <file>"" to ""git notes edit""

The ""-m"" and ""-F"" options are already the established method
(in both git-commit and git-tag) to specify a commit/tag message
without invoking the editor. This patch teaches ""git notes edit""
to respect the same options for specifying a notes message without
invoking the editor.

Multiple ""-m"" and/or ""-F"" options are concatenated as separate
paragraphs.

The patch also updates the ""git notes"" documentation and adds
selftests for the new functionality. Unfortunately, the added
selftests include a couple of lines with trailing whitespace
(without these the test will fail). This may cause git to warn
about ""whitespace errors"".

This patch has been improved by the following contributions:
- Thomas Rast: fix trailing whitespace in t3301

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_2307.diff
https://github.com/git/git/commit/a5b0c24f3e9a29f8fe496f49db82f2e3f1b687ce,20 Oct 2009,"Add an expensive test for git-notes

git-notes have the potential of being pretty expensive, so test with
a lot of commits.  A lot.  So to make things cheaper, you have to
opt-in explicitely, by setting the environment variable
GIT_NOTES_TIMING_TESTS.

This patch has been improved by the following contributions:
- Junio C Hamano: tests: fix ""export var=val""

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_2308.diff
https://github.com/git/git/commit/fd53c9eb445815696bf84c4701b9af73b5d7f50d,20 Oct 2009,"Speed up git notes lookup

To avoid looking up each and every commit in the notes ref's tree
object, which is very expensive, speed things up by slurping the tree
object's contents into a hash_map.

The idea for the hashmap singleton is from David Reiss, initial
benchmarking by Jeff King.

Note: the implementation allows for arbitrary entries in the notes
tree object, ignoring those that do not reference a valid object.  This
allows you to annotate arbitrary branches, or objects.

This patch has been improved by the following contributions:
- Junio C Hamano: fixed an obvious error in initialize_hash_map()

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/patch_2309.diff
https://github.com/git/git/commit/65d9fb487f36d4a12a169dc18cbbb5225337c085,20 Oct 2009,"Add a script to edit/inspect notes

The script 'git notes' allows you to edit and show commit notes, by
calling either

	git notes show <commit>

or

	git notes edit <commit>

This patch has been improved by the following contributions:
- Tor Arne Vestbø: fix printing of multi-line notes
- Michael J Gruber: test and handle empty notes gracefully
- Thomas Rast:
  - only clean up message file when editing
  - use GIT_EDITOR and core.editor over VISUAL/EDITOR
  - t3301: fix confusing quoting in test for valid notes ref
  - t3301: use test_must_fail instead of !
  - refuse to edit notes outside refs/notes/
- Junio C Hamano: tests: fix ""export var=val""
- Christian Couder: documentation: fix 'linkgit' macro in ""git-notes.txt""
- Johan Herland: minor cleanup and bugfixing in git-notes.sh (v2)

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Tor Arne Vestbø <tavestbo@trolltech.com>
Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",236,data/crawl/git/patch_2310.diff
https://github.com/git/git/commit/fb423da0e5668f3945c5a3e34fe5953cde6985a4,19 Oct 2009,"describe: load refnames before calling describe()

Get rid of the static variable that was used to prevent loading all
the refnames multiple times by moving that code out of describe(),
simply making sure it is only run once that way.

Also change the error message that is shown in case no refnames are
found to not include a hash any more, as the error condition is not
specific to any particular revision.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2311.diff
https://github.com/git/git/commit/c6e8c8005a2b1fc4cff72d279f29178767bd1a47,18 Oct 2009,"check_filename(): make verify_filename() callable without dying

Make it possible to invole the logic of verify_filename() to make sure the
pathname arguments are unambiguous without actually dying.  The caller may
want to do something different.",39,data/crawl/git/patch_2312.diff
https://github.com/git/git/commit/1ba447b8dc2ec4e6c8ebbbdaa449f38edc29ad3f,13 Oct 2009,"check-ref-format: simplify --print implementation

normalize_path_copy() is a complicated function, but most of its
functionality will never apply to a ref name that has been checked
with check_ref_format().

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2313.diff
https://github.com/git/git/commit/38eedc634bc5d30e8a7a2356d9eb3ae95d9b1d75,12 Oct 2009,"git check-ref-format --print

Tolerating empty path components in ref names means each ref does
not have a unique name.  This creates difficulty for porcelains
that want to see if two branches are equal.  Add a helper associating
to each ref a canonical name.

If a user asks a porcelain to create a ref ""refs/heads//master"",
the porcelain can run ""git check-ref-format --print refs/heads//master""
and only deal with ""refs/heads/master"" from then on.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_2314.diff
https://github.com/git/git/commit/b5227d80aee5173bfda6aa43a890d03110b0df26,12 Oct 2009,"ls-files: excludes should not impact tracked files

In all parts of git, .gitignore and other exclude files
impact only how we treat untracked files; they should have
no effect on files listed in the index.

This behavior was originally implemented very early on in
9ff768e, but only for --exclude-from. Later, commit 63d285c
accidentally caused us to trigger the behavior for
--exclude-per-directory.

This patch totally ignores excludes for files found in the
index. This means we are reversing the original intent of
9ff768e, while at the same time fixing the accidental
behavior of 63d285c. This is a good thing, though, as the
way that 9ff768e behaved does not really make sense with the
way exclusions are used in modern git.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2315.diff
https://github.com/git/git/commit/353c5eeb5cad63218ca796352cce9986df7b9c62,11 Oct 2009,"unpack_callback(): use unpack_failed() consistently

When unpack_index_entry() failed, consistently call unpack_failed(),
instead of silently returning -1.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2316.diff
https://github.com/git/git/commit/ac78b009398f8cab1f57d1ef62db21ac95e11ed1,09 Oct 2009,"ls-files: die instead of fprintf/exit in -i error

When ls-files was called with -i but no exclude pattern, it was
calling fprintf(stderr, ""..."", NULL) and then exiting.  On Solaris,
passing NULL into fprintf was causing a segfault.  On glibc systems,
it was simply producing incorrect output (eg: ""(null)"": ...).  The
NULL pointer was a result of argv[0] not being preserved by the option
parser.  Instead of requesting that the option parser preserve
argv[0], use die() with a constant string.

A trigger for this bug was: `git ls-files -i`

Signed-off-by: Ben Walton <bwalton@artsci.utoronto.ca>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2317.diff
https://github.com/git/git/commit/a4f3131c07c1f601be1e24b2143ca7e2deea09b5,01 Oct 2009,"increase portability of NORETURN declarations

Some compilers (including at least MSVC) support NORETURN
on function declarations, but only before the function-name.

This patch makes it possible to define NORETURN to something
meaningful for those compilers.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>",18,data/crawl/git/patch_2318.diff
https://github.com/git/git/commit/fdb0c36e903d13c184f9a465035c75565c5c072a,29 Sep 2009,"gitweb: check given hash before trying to create snapshot

Makes things nicer in cases when you hand craft the snapshot URL but
make a typo in defining the hash variable (e.g. netx instead of next);
you will now get an error message instead of a broken tarball.

Tests for t9501 are included to demonstrate added functionality.

Signed-off-by: Mark Rada <marada@uwaterloo.ca>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",46,data/crawl/git/patch_2319.diff
https://github.com/git/git/commit/1be224ba6e99f0ab34c998d7fa8023b76a15c8b6,29 Sep 2009,"builtin-mailinfo.c: check error status from rewind and ftruncate

A recent ""cut at scissors"" implementation rewinds and truncates
the output file to store the message when it sees a scissors mark,
but it did not check if these library calls succeeded.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
[sp: Use fseek as rewind returns void]
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",6,data/crawl/git/patch_2320.diff
https://github.com/git/git/commit/1b018fd9be290fd6a70ce3093ab1dc1abce74e00,29 Sep 2009,"git branch -D: give a better error message when lockfile creation fails

Previously the old error message just told the user that it was not
possible to delete the ref from the packed-refs file. Give instructions
on how to resolve the problem.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",31,data/crawl/git/patch_2321.diff
https://github.com/git/git/commit/6bbfd1fa98b0c1fa1684bd35e64404799f0cc2b3,29 Sep 2009,"parse-opt: ignore negation of OPT_NONEG for ambiguity checks

parse_long_opt always matches both --opt and --no-opt for any option
""opt"", and only get_value checks whether --no-opt is actually valid.
Since the options for git branch contains both ""no-merged"" and ""merged""
there are two matches for --no-merge, but no exact match.  With this
patch the negation of a NONEG option is rejected earlier, but it changes
the error message from ""option `no-opt' isn't available"" to ""unknown
option `no-opt'"".

[jk: added test]

Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",28,data/crawl/git/patch_2322.diff
https://github.com/git/git/commit/259d87c354954e8ee3b241dce1393c27186e8ee7,19 Sep 2009,"Add scripts to generate projects for other buildsystems (MSVC vcproj, QMake)

These scripts generate projects for the MSVC IDE (.vcproj files) or
QMake (.pro files), based on the output of a 'make -n MSVC=1 V=1' run.

This enables us to simply do the necesarry changes in the Makefile, and you
can update the other buildsystems by regenerating the files. Keeping the
other buildsystems up-to-date with main development.

The generator system is designed to easily drop in pm's for other
buildsystems as well, if someone has an itch. However, the focus has been
Windows development, so the 'engine' might need patches to support any
platform.

Also add some .gitignore entries for MSVC files.

Signed-off-by: Marius Storm-Olsen <mstormo@gmail.com>
Acked-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1504,data/crawl/git/patch_2323.diff
https://github.com/git/git/commit/164a5e3faab931a6c6459b56acae7f91dde6337d,19 Sep 2009,"Add MSVC to Makefile

Enable MSVC builds with GNU Make by simply calling
    make MSVC=1
(Debug build possible by adding DEBUG=1 as well)

Two scripts, clink.pl and lib.pl, are used to convert certain GCC
specific command line options into something MSVC understands.
By building for MSVC with GNU Make, we can ensure that the MSVC
port always follows the latest code, and does not lag behind due
to unmaintained NMake Makefile or IDE projects.

Signed-off-by: Marius Storm-Olsen <mstormo@gmail.com>
Acked-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/patch_2324.diff
https://github.com/git/git/commit/d75f8e61315cc502c34aec6600db00a7c7192ffd,19 Sep 2009,"Add platform files for porting to MSVC

Add msvc.c and msvc.h to build git under MSVC.

Signed-off-by: Frank Li <lznuaa@gmail.com>
Signed-off-by: Marius Storm-Olsen <mstormo@gmail.com>
Acked-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_2325.diff
https://github.com/git/git/commit/7f7ee2ff2dfbb8435a4b46750f573ef0f7d0b853,15 Sep 2009,"diff -B: colour whitespace errors

We used to send the old and new contents more or less straight out to the
output with only the original ""old is red, new is green"" colouring.  Now
all the necessary support routines have been prepared, call them with a
line of data at a time from the output code and have them check and color
whitespace errors in exactly the same way as they are called from the low
level diff callback routines.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2326.diff
https://github.com/git/git/commit/6957eb9a39cc765862e125edeef0dd70f359cff1,15 Sep 2009,"diff.c: shuffling code around

Move function, type, and structure definitions for fill_mmfile(),
count_trailing_blank(), check_blank_at_eof(), emit_line(),
new_blank_line_at_eof(), emit_add_line(), sane_truncate_fn, and
emit_callback up in the file, so that they can be refactored into helper
functions and reused by codepath for emitting rewrite patches.

This only moves the lines around to make the next two patches easier to
read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/patch_2327.diff
https://github.com/git/git/commit/0f4b377c20fb7d93f8bfeec39efb2b9392d6aebc,13 Sep 2009,"git-archive: infer output format from filename when unspecified

A command line

    $ git archive -o my-v2.0.zip v2.0

almost certainly wants the output in zip format, even though it does not
specify any --format option.

When --format is not given, but output filename is, try to infer what
format is requested from the filename extension.  Currently this code only
knows about '.zip'.  When the format is unspecified and the filename does
not tell us, the output will be in 'tar' format as before.

Of course, an explicit --format will not trigger this guesswork.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2328.diff
https://github.com/git/git/commit/59b8d38f6e4f19b93c5dc4493ab11706acd101b5,11 Sep 2009,"http.c: remove verification of remote packs

Make http.c::fetch_pack_index() no longer check for the remote pack
with a HEAD request before fetching the corresponding pack index file.

Not only does sending a HEAD request before we do a GET incur a
performance penalty, it does not offer any significant error-
prevention advantages (pack fetching in the *_http_pack_request()
methods is capable of handling any errors on its own).

This addresses an issue raised elsewhere:

  http://code.google.com/p/msysgit/issues/detail?id=323
  http://support.github.com/discussions/repos/957-cant-clone-over-http-or-git

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2329.diff
https://github.com/git/git/commit/fadd069d036c9d376769692e2726c5a1600d281c,08 Sep 2009,"merge-recursive: give less scary messages when merge did not start

When unpack_trees() three-way merge logic is called from merge-recursive
and finds that local changes are going to be clobbered, its plumbing level
messages were given as errors first, and then the merge driver added even
more scary message ""fatal: merging of trees <a long object name> and
<another long object name> failed"".

This is most often encountered by new CVS/SVN migrants who are used to
start a merge from a dirty work tree.  The saddest part is that the merge
refused to run to prevent _any_ damage from being done to your work tree
when these messages are given, but the messages look a lot more scarier
than the conflicted case where the user needs to resolve them.

Replace the plumbing level messages so that they talk about what it is
protecting the user from, and end the messages with ""Aborting."" so that it
becomes clear that the command did not do any harm.

The final ""merging of trees failed"" message is superfluous, unless you are
interested in debugging the merge-recursive itself.  Squelch the current
die() message by default, but allow it to help people who debug git with
verbosity level 4 or greater.

Unless there is some bug, an inner merge that does not touch working tree
should not trigger any such error, so emit the current die() message when
we see an error return from it while running the inner merge, too.  It
would also help people who debug git.

We could later add instructions on how to recover (i.e. ""stash changes
away or commit on a side branch and retry"") instead of the silent
exit(128) I have in this patch, and then use Peff's advice.* mechanism to
squelch it (e.g. ""advice.mergeindirtytree""), but they are separate topics.

Tested-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2330.diff
https://github.com/git/git/commit/493b7a08d80535def6756b281873e4e0937ba6c2,07 Sep 2009,"grep: accept relative paths outside current working directory

""git grep"" would barf at relative paths pointing outside the current
working directory (or subdirectories thereof). Use quote_path_relative(),
which can handle such cases just fine.

[jc: added tests.]

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2331.diff
https://github.com/git/git/commit/14b772a0d7cb983ab0c13d672ea89192c460d070,06 Sep 2009,"push: re-flow non-fast-forward message

The extreme raggedness of the right edge make this jarring
to read. Let's re-flow the text to fill the lines in a more
even way.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2332.diff
https://github.com/git/git/commit/6523078b96cd39f681e6fa11135049808591fb95,06 Sep 2009,"make shallow repository deepening more network efficient

First of all, I can't find any reason why thin pack generation is
explicitly disabled when dealing with a shallow repository.  The
possible delta base objects are collected from the edge commits which
are always obtained through history walking with the same shallow refs
as the client, Therefore the client is always going to have those base
objects available. So let's remove that restriction.

Then we can make shallow repository deepening much more efficient by
using the remote's unshallowed commits as edge commits to get preferred
base objects for thin pack generation.  On git.git, this makes the data
transfer for the deepening of a shallow repository from depth 1 to depth 2
around 134 KB instead of 3.68 MB.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2333.diff
https://github.com/git/git/commit/467babf8d059caee9587567452fc8b46505b4e67,04 Sep 2009,"diff --whitespace=warn/error: fix blank-at-eof check

The ""diff --check"" logic used to share the same issue as the one fixed for
""git apply"" earlier in this series, in that a patch that adds new blank
lines at end could appear as

    @@ -l,5 +m,7 @@$
    _context$
    _context$
    -deleted$
    +$
    +$
    +$
    _$
    _$

where _ stands for SP and $ shows a end-of-line.  Instead of looking at
each line in the patch in the callback, simply count the blank lines from
the end in two versions, and notice the presence of new ones.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_2334.diff
https://github.com/git/git/commit/5b5061efd88e1d113a4484369dfab654b43364de,04 Sep 2009,"diff --whitespace=warn/error: obey blank-at-eof

The ""diff --check"" code used to conflate trailing-space whitespace error
class with this, but now we have a proper separate error class, we should
check it under blank-at-eof, not trailing-space.

The whitespace error is not about _having_ blank lines at end, but about
adding _new_ blank lines.  To keep the message consistent with what is
given by ""git apply"", call whitespace_error_string() to generate it,
instead of using a hardcoded custom message.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2335.diff
https://github.com/git/git/commit/94ea026b358f9fd5395d9344a80f2d5a50e93e1f,04 Sep 2009,"apply --whitespace: warn blank but not necessarily empty lines at EOF

The whitespace error of adding blank lines at the end of file should
trigger if you added a non-empty line at the end, if the contents of the
line is full of whitespaces.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2336.diff
https://github.com/git/git/commit/77b15bbd88e2f48de093ff0e60de6dbc11e3329e,04 Sep 2009,"apply --whitespace=warn/error: diagnose blank at EOF

""git apply"" strips new blank lines at EOF under --whitespace=fix option,
but neigher --whitespace=warn nor --whitespace=error paid any attention to
these errors.

Introduce a new whitespace error class, blank-at-eof, to make the
whitespace error handling more consistent.

The patch adds a new ""linenr"" field to the struct fragment in order to
record which line the hunk started in the input file, but this is needed
solely for reporting purposes.  The detection of this class of whitespace
errors cannot be done while parsing a patch like we do for all the other
classes of whitespace errors.  It instead has to wait until we find where
to apply the hunk, but at that point, we do not have an access to the
original line number in the input file anymore, hence the new field.

Depending on your point of view, this may be a bugfix that makes warn and
error in line with fix.  Or you could call it a new feature.  The line
between them is somewhat fuzzy in this case.

Strictly speaking, triggering more errors than before is a change in
behaviour that is not backward compatible, even though the reason for the
change is because the code was not checking for an error that it should
have.  People who do not want added blank lines at EOF to trigger an error
can disable the new error class.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2337.diff
https://github.com/git/git/commit/92a1747eeab6bc497db748e79ca4f029b1c1dc10,04 Sep 2009,"apply.c: split check_whitespace() into two

This splits the logic to record the presence of whitespace errors out of
the check_whitespace() function, which checks and then records.  The new
function, record_ws_error(), can be used by the blank-at-eof check that
does not use ws_check() logic to report its findings in the same output
format.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2338.diff
https://github.com/git/git/commit/2b72ccb20a3b758afb9de410a955f01d1b411414,03 Sep 2009,"Add script for importing bits-and-pieces to Git.

Allows the user to import version history that is stored in bits and
pieces in the file system, for instance snapshots of old development
trees, or day-by-day backups. A configuration file is used to
describe the relationship between the different files and allow
describing branches and merges, as well as authorship and commit
messages.

Output is created in a format compatible with git-fast-import.

Full documentation is provided inline in perldoc format.

Signed-off-by: Peter Krefting <peter@softwolves.pp.se>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",416,data/crawl/git/patch_2339.diff
https://github.com/git/git/commit/d2feb01aa580843261c25d8609369d17bcdf6028,03 Sep 2009,"git-cvsserver: no longer use deprecated 'git-subcommand' commands

git-cvsserver still references git commands like 'git-config', which
is depcrecated.  This commit changes git-cvsserver to use the
'git subcommand' form.

Sylvain Beucler reported the problem through
 http://bugs.debian.org/536067

Signed-off-by: Gerrit Pape <pape@smarden.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2340.diff
https://github.com/git/git/commit/4af819d4cad206648b832f4d6103547981ab8004,01 Sep 2009,"gitweb: Incremental blame (using JavaScript)

Add 'blame_incremental' view, which uses ""git blame --incremental""
and JavaScript (Ajax), where 'blame' use ""git blame --porcelain"".

 * gitweb generates initial info by putting file contents (from
   ""git cat-file"") together with line numbers in blame table
 * then gitweb makes web browser JavaScript engine call startBlame()
   function from gitweb.js
 * startBlame() opens XMLHttpRequest connection to 'blame_data' view,
   which in turn calls ""git blame --incremental"" for a file, and
   streams output of git-blame to JavaScript (gitweb.js)
 * XMLHttpRequest event handler updates line info in blame view as soon
   as it gets data from 'blame_data' (from server), and it also updates
   progress info
 * when 'blame_data' ends, and gitweb.js finishes updating line info,
   it fixes colors to match (as far as possible) ordinary 'blame' view,
   and updates information about how long it took to generate page.

Gitweb deals with streamed 'blame_data' server errors by displaying
them in the progress info area (just in case).

The 'blame_incremental' view tries to be equivalent to 'blame' action;
there are however a few differences in output between 'blame' and
'blame_incremental' view:

 * 'blame_incremental' always used query form for this part of link(s)
   which is generated by JavaScript code.  The difference is visible
   if we use path_info link (pass some or all arguments in path_info).
   Changing this would require implementing something akin to href()
   subroutine from gitweb.perl in JavaScript (in gitweb.js).
 * 'blame_incremental' always uses ""rowspan"" attribute, even if
   rowspan=""1"".  This simplifies code, and is not visible to user.
 * The progress bar and progress info are still there even after
   JavaScript part of 'blame_incremental' finishes work.

Note that currently no link generated by gitweb leads to this new view.

This code is based on patch by Petr Baudis <pasky@suse.cz> patch, which
in turn was tweaked up version of Fredrik Kuivinen <frekui@gmail.com>'s
proof of concept patch.

This patch adds GITWEB_JS compile configuration option, and modifies
git-instaweb.sh to take gitweb.js into account.  The code for
git-instaweb.sh was taken from Pasky's patch.

Signed-off-by: Fredrik Kuivinen <frekui@gmail.com>
Signed-off-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1028,data/crawl/git/patch_2341.diff
https://github.com/git/git/commit/4f6552ea4cf2f1fdfd850b17b25864c761d14580,31 Aug 2009,"refactor test-date interface

The test-date program goes back to the early days of git,
where it was presumably used to do manual sanity checks on
changes to the date code. However, it is not actually used
by the test suite to do any sort of automatic of systematic
tests.

This patch refactors the interface to the program to try to
make it more suitable for use by the test suite. There
should be no fallouts to changing the interface since it is
not actually installed and is not internally called by any
other programs.

The changes are:

  - add a ""mode"" parameter so the caller can specify which
    operation to test

  - add a mode to test relative date output from show_date

  - allow faking a fixed time via the TEST_DATE_NOW
    environment variable, which allows consistent automated
    testing

  - drop the use of ctime for showing dates in favor of our
    internal iso8601 printing routines. The ctime output is
    somewhat redundant (because of the day-of-week) which
    makes writing test cases more annoying.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2342.diff
https://github.com/git/git/commit/a8563ec8515d87259590a7aad182922def8e2cf2,29 Aug 2009,"upload-pack: add a trigger for post-upload-pack hook

After upload-pack successfully finishes its operation, post-upload-pack
hook can be called for logging purposes.

The hook is passed various pieces of information, one per line, from its
standard input.  Currently the following items can be fed to the hook, but
more types of information may be added in the future:

    want SHA-1::
        40-byte hexadecimal object name the client asked to include in the
        resulting pack.  Can occur one or more times in the input.

    have SHA-1::
        40-byte hexadecimal object name the client asked to exclude from
        the resulting pack, claiming to have them already.  Can occur zero
        or more times in the input.

    time float::
        Number of seconds spent for creating the packfile.

    size decimal::
        Size of the resulting packfile in bytes.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/patch_2343.diff
https://github.com/git/git/commit/05526071cb5ce2f040514b7f50a4e32b16802ffd,28 Aug 2009,"gitweb: split test suite into library and tests

To accommodate additions to the test cases for gitweb, the preamble
from t9500 is now in its own library so that new sets of tests for
gitweb can use the same setup without copying the code.

Signed-off-by: Mark Rada <marada@uwaterloo.ca>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_2344.diff
https://github.com/git/git/commit/7a4ee28f41270bf032d0dd0bfb17f601b9b3971a,27 Aug 2009,"clone: add --branch option to select a different HEAD

We currently point the HEAD of a newly cloned repo to the
same ref as the parent repo's HEAD. While a user can then
""git checkout -b foo origin/foo"" whichever branch they
choose, it is more convenient and more efficient to tell
clone which branch you want in the first place.

Based on a patch by Kirill A. Korinskiy.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",150,data/crawl/git/patch_2345.diff
https://github.com/git/git/commit/d8526a4c3b31d91b623f698be6ed7552ed4fdc52,26 Aug 2009,"git-log: allow --decorate[=short|full]

Commit de435ac0 changed the behavior of --decorate from printing the
full ref (e.g., ""refs/heads/master"") to a shorter, more human-readable
version (e.g., just ""master""). While this is nice for human readers,
external tools using the output from ""git log"" may prefer the full
version.

This patch introduces an extension to --decorate to allow the caller to
specify either the short or the full versions.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2346.diff
https://github.com/git/git/commit/21d0bc2f9a5bcbee2593e9f2ad05d64d3dcf3a0e,26 Aug 2009,"git-bisect: call the found commit ""*the* first bad commit""

Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2347.diff
https://github.com/git/git/commit/cc580af88507ce02eca1a3a6512044dd19c84d80,25 Aug 2009,"checkout: do not imply ""-f"" on unborn branches

When checkout sees that HEAD points to a non-existent ref,
it currently acts as if ""-f"" was given; this behavior dates
back to 5a03e7f, which enabled checkout from unborn branches
in the shell version of ""git-checkout"". The reasoning given
is to avoid the code path which tries to merge the tree
contents. When checkout was converted to C, this code
remained intact.

The unfortunate side effect of this strategy is that the
""force"" code path will overwrite working tree and index
state that may be precious to the user. Instead of enabling
""force"", this patch uses the normal ""merge"" codepath for an
unborn branch, but substitutes the empty tree for the ""old""
commit.

This means that in the absence of an index, any files in the
working tree will be treated as untracked files, and a
checkout which would overwrite them is aborted. Similarly,
any paths in the index will be merged with an empty entry
as the base, meaning that unless the new branch's content is
identical to what's in the index, there will be a conflict
and the checkout will be aborted.

The user is then free to correct the situation or proceed
with ""-f"" as appropriate.

This patch also removes the ""warning: you are on a branch
yet to be born"" message. Its function was to warn the user
that we were enabling the ""-f"" option. Since we are no
longer doing that, there is no reason for the user to care
whether we are switching away from an unborn branch.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_2348.diff
https://github.com/git/git/commit/3deffc52d88df73af72a80a406eb863880bb4d2a,22 Aug 2009,"reset: make the reminder output consistent with ""checkout""

git reset without argument displays a summary of the local modification,
like this:

    $ git reset
    Makefile: locally modified

Some people have problems with this; they look like an error message.

This patch makes its output mimic how ""git checkout $another_branch""
reports the paths with local modifications.  ""git add --refresh --verbose""
is changed in the same way.

It also adds a header to make it clear that the output is informative,
and not an error.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>",38,data/crawl/git/patch_2349.diff
https://github.com/git/git/commit/33e7018c459e6583b899690cabd21c808ffd3c85,18 Aug 2009,"git-log: allow --decorate[=short|full]

Commit de435ac0 changed the behavior of --decorate from printing the
full ref (e.g., ""refs/heads/master"") to a shorter, more human-readable
version (e.g., just ""master""). While this is nice for human readers,
external tools using the output from ""git log"" may prefer the full
version.

This patch introduces an extension to --decorate to allow the caller to
specify either the short or the full versions.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2350.diff
https://github.com/git/git/commit/db137fe91ea4afda7a2073364c610fe61dc769b8,17 Aug 2009,"read-tree: Fix regression with creation of a new index file.

Reading the index into an empty file has been broken by
5a56da58060e50980fab0f4c38203a25440d1530, since it causes the existing
index to always be loaded first, and dies if it's an empty file:

$ GIT_INDEX_FILE=`mktemp` git read-tree master
fatal: index file smaller than expected

It breaks for instance committing from git.el. This patch reverts to the
previous behavior of only loading the index when merging it.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_2351.diff
https://github.com/git/git/commit/4f353658b9c15e9188530fac5ae79d0aa1538e85,15 Aug 2009,"Implement 'git checkout --patch'

This introduces a --patch mode for git-checkout.  In the index usage

  git checkout --patch -- [files...]

it lets the user discard edits from the <files> at the granularity of
hunks (by selecting hunks from 'git diff' and then reverse applying
them to the worktree).

We also accept a revision argument.  In the case

  git checkout --patch HEAD -- [files...]

we offer hunks from the difference between HEAD and the worktree, and
reverse applies them to both index and worktree, allowing you to
discard staged changes completely.  In the non-HEAD usage

  git checkout --patch <revision> -- [files...]

it offers hunks from the difference between the worktree and
<revision>.  The chosen hunks are then applied to both index and
worktree.

The application to worktree and index is done ""atomically"" in the
sense that we first check if the patch applies to the index (it should
always apply to the worktree).  If it does not, we give the user a
choice to either abort or apply to the worktree anyway.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/patch_2352.diff
https://github.com/git/git/commit/d002ef4d9446b9fe4d0c397131edce58781df2f1,15 Aug 2009,"Implement 'git reset --patch'

This introduces a --patch mode for git-reset.  The basic case is

  git reset --patch -- [files...]

which acts as the opposite of 'git add --patch -- [files...]': it
offers hunks for *un*staging.  Advanced usage is

  git reset --patch <revision> -- [files...]

which offers hunks from the diff between the index and <revision> for
forward application to the index.  (That is, the basic case is just
<revision> = HEAD.)

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",160,data/crawl/git/patch_2353.diff
https://github.com/git/git/commit/6f5748e14cc5bb0a836b649fb8e2d6a5eb166f1d,13 Aug 2009,"svn: allow branches outside of refs/remotes

It may be convenient for some users to store svn remote tracking
branches outside of the refs/remotes/ heirarchy.

To accomplish this feat, this patch includes the entire path to
the ref in $r->{'refname'} in &read_all_remotes and tries to change
references to this entry so the new value makes sense.

[ew: fixed backwards compatibility, long lines]

Signed-off-by: Adam Brewster <adambrewster@gmail.com>
Signed-off-by: Eric Wong <normalperson@yhbt.net>",150,data/crawl/git/patch_2354.diff
https://github.com/git/git/commit/07436e43daf1a97d3d702090d6289f745bd5ad90,12 Aug 2009,"push: point to 'git pull' and 'git push --force' in case of non-fast forward

'git push' failing because of non-fast forward is a very common situation,
and a beginner does not necessarily understand ""fast forward"" immediately.

Add a new section to the git-push documentation and refer them to it.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/patch_2355.diff
https://github.com/git/git/commit/57f6ec029090f64377ec5c0926b6e2e39b0caa4f,12 Aug 2009,"Change mentions of ""git programs"" to ""git commands""

Most of the docs and printouts refer to ""commands"" when discussing what
the end users call via the ""git"" top-level program. We should refer them
as ""git programs"" when we discuss the fact that the commands are
implemented as separate programs, but in other contexts, it is better to
use the term ""git commands"" consistently.

Signed-off-by: Ori Avtalion <ori@avtalion.name>
Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2356.diff
https://github.com/git/git/commit/b932705b457ad191481a871292d71088bb23d244,10 Aug 2009,"git-p4: stream from perforce to speed up clones

Change commit() to stream data from Perforce and into fast-import
rather than reading into memory first, and then writing out. This
hugely reduces the memory requirements when cloning non-incrementally.

Signed-off-by: Luke Diamand <luke@diamand.org>
Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",169,data/crawl/git/patch_2357.diff
https://github.com/git/git/commit/0c4f21e452dca5a705c36ca7e363c1a3b3c2a5b8,10 Aug 2009,"Check return value of ftruncate call in http.c

In new_http_object_request(), check ftruncate() call return value and
handle possible errors.

Signed-off-by: Jeff Lasslett <jeff.lasslett@gmail.com>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2358.diff
https://github.com/git/git/commit/f766b36783c7ceeb0427f5e1af862b9a67ae1c4c,10 Aug 2009,"Make git_status_config() file scope static to builtin-commit.c

Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/patch_2359.diff
https://github.com/git/git/commit/6c4f3ec9b477df534cd376f88618a57353f0f0fe,08 Aug 2009,"verify-pack --stat-only: show histogram without verifying

When this option is given, the command does not verify the pack contents,
but shows the delta chain histogram.  If used with --verbose, the usual
list of objects is also shown.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_2360.diff
https://github.com/git/git/commit/262b04fa8dce84596738fd8c0dbff52994388efa,08 Aug 2009,"verify-pack -v: do not report ""chain length 0""

When making a histogram of delta chain length in the pack, the program
collects number of objects whose delta depth exceeds the MAX_CHAIN limit
in histogram[0], and showed it as the number of items that exceeds the
limit correctly.  HOWEVER, it also showed the same number labeled as
""chain length = 0"".

In fact, we are not showing the number of objects whose chain length is
zero, i.e. the base objects.  Correct this.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2361.diff
https://github.com/git/git/commit/4d590f0607184021c7b52430aa41483e6fd0d044,06 Aug 2009,"git-ls-files.txt: clarify what ""other files"" mean for --other

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2362.diff
https://github.com/git/git/commit/d68dc34cb41c30515e64766c303c2930994e5085,06 Aug 2009,"git-describe: Die early if there are no possible descriptions

If we find no refs that may be used for git-describe with the current
options, then die early instead of pointlessly walking the whole
history.

In git.git with all the tags dropped, this makes ""git describe"" go down
from 0.244 to 0.003 seconds for me. This is especially noticeable with
""git submodule status"" which calls describe with increasing levels of
allowed refs to be matched. For a submodule without tags, this means
that it walks the whole history in the submodule twice (first annotated,
then plain tags), just to find out that it can't describe the commit
anyway.

Signed-off-by: Björn Steinbrink <B.Steinbrink@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2363.diff
https://github.com/git/git/commit/50b7e70f338e54f3534ee1b14c3bdb4c80d0dcf7,06 Aug 2009,"wt-status.c: rework the way changes to the index and work tree are summarized

Introduce a new infrastructure to find and summarize changes in a single
string list, and rewrite wt_status_print_{updated,changed} functions using
it.

The goal of this change is to give more information on conflicted paths in
the status output.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",249,data/crawl/git/patch_2364.diff
https://github.com/git/git/commit/86c91f91794cd6af8e19fbe68ab283d567d2b66f,05 Aug 2009,"git apply: option to ignore whitespace differences

Introduce --ignore-whitespace option and corresponding config bool to
ignore whitespace differences while applying patches, akin to the
'patch' program.

'git am', 'git rebase' and the bash git completion are made aware of
this option.

Signed-off-by: Giuseppe Bilotta <giuseppe.bilotta@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",399,data/crawl/git/patch_2365.diff
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/patch_2366.diff
https://github.com/git/git/commit/6eb996b5707b6d14cf9875a9231f4e909a443665,05 Aug 2009,"Add support for external programs for handling native fetches

transport_get() can call transport_native_helper_init() to have list and
fetch-ref operations handled by running a separate program as:

 git remote-<something> <remote> [<url>]

This program then accepts, on its stdin, ""list"" and ""fetch <hex>
<name>"" commands; the former prints out a list of available refs and
either their hashes or what they are symrefs to, while the latter
fetches them into the local object database and prints a newline when done.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",243,data/crawl/git/patch_2367.diff
https://github.com/git/git/commit/86b5efb2864ca50d86437f94ec4c26042cba193e,31 Jul 2009,"parse-opt: optionally show ""--no-"" option string

It is usually better to have positive options, to avoid confusing double
negations.  However, sometimes it is desirable to show the negative option
in the help.

Introduce the flag PARSE_OPT_NEGHELP to do that.

Signed-off-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2368.diff
https://github.com/git/git/commit/c94736a27f89bfc268aed0de7264deecdc136a58,31 Jul 2009,"merge-recursive: don't segfault while handling rename clashes

When a branch moves A to B while the other branch created B (or moved C to
B), the code tried to rename one of them to B~something to preserve both
versions, and failed to register temporary resolution for the original
path B at stage#0 during virtual ancestor computation.  This left the
index in unmerged state and caused a segfault.

A better solution is to merge these two versions of B's in place and use
the (potentially conflicting) result as the intermediate merge result in
the virtual ancestor.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2369.diff
https://github.com/git/git/commit/f552e51ef9d376c17fa707b7af9582108f4ec81c,28 Jul 2009,"Update the documentation of the raw diff output format

This includes mentioning the initial hash output of diff-tree, and
changes the header to ""raw output format"" which is more descriptive.

Signed-off-by: David Kågedal <davidk@lysator.liu.se>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2370.diff
https://github.com/git/git/commit/53d48885931614a43e414e1272a7f126f8d0c901,25 Jul 2009,"git init: optionally allow a directory argument

When starting a new repository, I see my students often say

    % git init newrepo

and curse git.  They could say

    % mkdir newrepo; cd newrepo; git init

but allowing it as an obvious short-cut may be nicer.

Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/patch_2371.diff
https://github.com/git/git/commit/96d69b554325b6caa323428e64fba62ca033310d,24 Jul 2009,"Fix export_marks() error handling.

- Don't leak one FILE * on error per export_marks() call. Found with
  cppcheck and reported by Martin Ettl.

- Abort the potentially long for(;idnums.size;) loop on write errors.

- Record error if fprintf() fails for reasons not required to set the
  stream error indicator, such as ENOMEM.

- Add a trailing full-stop to error message when fopen() fails.

Signed-off-by: Matthias Andree <matthias.andree@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2372.diff
https://github.com/git/git/commit/191d1ac435c01e2a7acfb93fb9da8378da90214c,24 Jul 2009,"git branch: avoid unnecessary object lookups

They can be expensive in the cold-cache case, so don't bother looking up
the commits for all branches unless we really need them for some reason.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2373.diff
https://github.com/git/git/commit/b810cbbde9232cbe9a3841edccc5b606bbd3a82e,22 Jul 2009,"diff --cc: a lost line at the beginning of the file is shown incorrectly

When combine-diff inspected the diff from one parent to the merge result,
it misinterpreted a header in the form @@ -l,k +0,0 @@.

This hunk header means that K lines were removed from the beginning of the
file, so the lost lines must be queued to the sline that represents the
first line of the merge result, but we incremented our pointer incorrectly
and ended up queuing it to the second line, which in turn made the lossage
appear _after_ the first line.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/patch_2374.diff
https://github.com/git/git/commit/ca4ca9ed069c8ce13e1a38e79fbaea849754de94,19 Jul 2009,"show: suppress extra newline when showing annotated tag

When showing a tag, our header parsing finishes with the
offset pointing to the newline separating the tag header
from the tag body. This means that the printed body will
always start with a newline.

However, we also add an extra newline when printing the
tagger information. This leads to an ugly double-newline:

    $ git show v1.6.3
    tag v1.6.3
    Tagger: Junio C Hamano <gitster@pobox.com>
    Date:   Wed May 6 18:16:47 2009 -0700

    GIT 1.6.3
    -----BEGIN PGP SIGNATURE-----
    ...

This patch removes the extra newline from the end of the
tagger headers. This is a better solution than suppressing
the separator newline, because it retains the behavior for
tags which have no tagger. E.g., ""git show v0.99"" will
continue to look like:

      $ git show v0.99
      tag v0.99

      Test-release for wider distribution.
      ...

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2375.diff
https://github.com/git/git/commit/bba0fd22ad654460a81c4b35462b600d9432a869,19 Jul 2009,"push: do not give big warning when no preference is configured

If the message said ""we will be changing the default in the future, so
this is to warn people who want to keep the current default what to do"",
it would have made some sense, but as it stands, the message is merely an
unsolicited advertisement for a new feature, which it is not helpful at
all.  Squelch it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2376.diff
https://github.com/git/git/commit/a38837341c995773f2adc29ff5971196187b07fb,14 Jul 2009,"Improve on the 'invalid object' error message at commit time

Not that anybody should ever get it, but somebody did (probably because
of a flaky filesystem, but whatever).  And each time I see an error
message that I haven't seen before, I decide that next time it will look
better.

So this makes us write more relevant information about exactly which
file ended up having issues with a missing object.  Which will tell
whether it was a tree object, for example, or just a regular file in the
index (and which one).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2377.diff
https://github.com/git/git/commit/f222abdeec7838891e79abd152c6cb67e532b68d,14 Jul 2009,"Make 'git show' more useful

For some reason, I ended up doing

	git show HEAD~5..

as an odd way of asking for a log. I realize I should just have used ""git
log"", but at the same time it does make perfect conceptual sense. After
all, you _could_ have done

	git show HEAD HEAD~1 HEAD~2 HEAD~3 HEAD~4

and saying ""git show HEAD~5.."" is pretty natural. It's not like ""git show""
only ever showed a single commit (or other object) before either! So
conceptually, giving a commit range is a very sensible operation, even
though you'd traditionally have used ""git log"" for that.

However, doing that currently results in an error

	fatal: object ranges do not make sense when not walking revisions

which admittedly _also_ makes perfect sense - from an internal git
implementation standpoint in 'revision.c'.

However, I think that asking to show a range makes sense to a user, while
saying ""object ranges no not make sense when not walking revisions"" only
makes sense to a git developer.

So on the whole, of the two different ""makes perfect sense"" behaviors, I
think I originally picked the wrong one. And quite frankly, I don't really
see anybody actually _depending_ on that error case. So why not change it?

So rather than error out, just turn that non-walking error case into a
""silently turn on walking"" instead.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2378.diff
https://github.com/git/git/commit/c4593faf2df8f9c5e8ac409e40be991294a73e54,11 Jul 2009,"apply: notice creation/removal patches produced by GNU diff

Unified context patch generated by GNU diff has UNIX epoch timestamp
on the side that does not exist when the patch is about a creation or
a deletion event.  Notice this convention when reading a non-git diff.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_2379.diff
https://github.com/git/git/commit/404d42e5efe05ef8dd40713e00001746a060b66b,11 Jul 2009,"write-tree: migrate to parse-options

A check for extra options has been dropped, it could never be triggered
in the original code as the usage message would be printed instead.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2380.diff
https://github.com/git/git/commit/d9eb0205a217984f3e70bf18ae66c02a22d3d475,11 Jul 2009,"quickfetch(): Prevent overflow of the rev-list command line

quickfetch() calls rev-list to check whether the objects we are about to
fetch are already present in the repo (if so, we can skip the object fetch).
However, when there are many (~1000) refs to be fetched, the rev-list
command line grows larger than the maximum command line size on some systems
(32K in Windows). This causes rev-list to fail, making quickfetch() return
non-zero, which unnecessarily triggers the transport machinery. This somehow
causes fetch to fail with an exit code.

By using the --stdin option to rev-list (and feeding the object list to its
standard input), we prevent the overflow of the rev-list command line,
which causes quickfetch(), and subsequently the overall fetch, to succeed.

However, using rev-list --stdin is not entirely straightforward: rev-list
terminates immediately when encountering an unknown object, which can
trigger SIGPIPE if we are still writing object's to its standard input.
We therefore temporarily ignore SIGPIPE so that the fetch process is not
terminated.

The patch also contains a testcase to verify the fix (note that before
the patch, the testcase would only fail on msysGit).

Signed-off-by: Johan Herland <johan@herland.net>
Improved-by: Johannes Sixt <j6t@kdbg.org>
Improved-by: Alex Riesen <raa.lkml@gmail.com>
Tested-by: Peter Krefting <peter@softwolves.pp.se>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/patch_2381.diff
https://github.com/git/git/commit/90e41a89caa464a84e13cbc9378b0348a61f713b,06 Jul 2009,"receive-pack: remove unnecessary run_status report

The function run_status was used to report failures after a hook was run.
By now, the only thing that the function itself reported was the exit code
of the hook (if it was non-zero). But this is redundant because it can be
expected that the hook itself will have reported a suitable error.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2382.diff
https://github.com/git/git/commit/c024beb56da679839d61f352d088b9a86823233a,06 Jul 2009,"run_command: report failure to execute the program, but optionally don't

In the case where a program was not found, it was still the task of the
caller to report an error to the user. Usually, this is an interesting case
but only few callers actually reported a specific error (though many call
sites report a generic error message regardless of the cause).

With this change the error is reported by run_command, but since there is
one call site in git.c that does not want that, an option is added to
struct child_process, which is used to turn the error off.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_2383.diff
https://github.com/git/git/commit/b99d5f40d6a5cba7d7cd7599063b3cd78aa4d219,06 Jul 2009,"run_command: encode deadly signal number in the return value

We now write the signal number in the error message if the program
terminated by a signal. The negative return value is constructed such that
after truncation to 8 bits it looks like a POSIX shell's $?:

   $ echo 0000 | { git upload-pack .; echo $? >&2; } | :
   error: git-upload-pack died of signal 13
   141

Previously, the exit code was 255 instead of 141.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2384.diff
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_2385.diff
https://github.com/git/git/commit/5709e0363a891b72eb9e9756d7fb121d9bf6a7c7,05 Jul 2009,"run_command: return exit code as positive value

As a general guideline, functions in git's code return zero to indicate
success and negative values to indicate failure. The run_command family of
functions followed this guideline. But there are actually two different
kinds of failure:

- failures of system calls;

- non-zero exit code of the program that was run.

Usually, a non-zero exit code of the program is a failure and means a
failure to the caller. Except that sometimes it does not. For example, the
exit code of merge programs (e.g. external merge drivers) conveys
information about how the merge failed, and not all exit calls are
actually failures.

Furthermore, the return value of run_command is sometimes used as exit
code by the caller.

This change arranges that the exit code of the program is returned as a
positive value, which can now be regarded as the ""result"" of the function.
System call failures continue to be reported as negative values.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_2386.diff
https://github.com/git/git/commit/ed24e401e0e6ab860475b8575e28a2c6ea99cc69,03 Jul 2009,"grep: simplify -p output

It was found a bit too loud to show == separators between the function
headers.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2387.diff
https://github.com/git/git/commit/606475f3178784e5a6b3a01dce1a54314345cf43,02 Jul 2009,"Remove filename from conflict markers

Put filenames into the conflict markers only when they are different.
Otherwise they are redundant information clutter.

Print the filename explicitely when warning about a binary conflict.

Signed-off-by: Martin Renold <martinxyz@gmx.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2388.diff
https://github.com/git/git/commit/2944e4e6145bdfcb1a8730d7da671786d72c86ed,02 Jul 2009,"grep: add option -p/--show-function

The new option -p instructs git grep to print the previous function
definition as a context line, similar to diff -p.  Such context lines
are marked with an equal sign instead of a dash.  This option
complements the existing context options -A, -B, -C.

Function definitions are detected using the same heuristic that diff
uses.  User defined regular expressions are not supported, yet.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/patch_2389.diff
https://github.com/git/git/commit/046802d015b3be2e055ae68f29f76741023bc32d,02 Jul 2009,"grep: print context hunk marks between files

Print a hunk mark before matches from a new file are shown, in addition
to the current behaviour of printing them if lines have been skipped.

The result is easier to read, as (presumably unrelated) matches from
different files are separated by a hunk mark.  GNU grep does the same.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_2390.diff
https://github.com/git/git/commit/5dd06d38795b2f6d05f851b25c814732238f8df1,02 Jul 2009,"grep: move context hunk mark handling into show_line()

Move last_shown into struct grep_opt, to make it available in
show_line(), and then make the function handle the printing of hunk
marks for context lines in a central place.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2391.diff
https://github.com/git/git/commit/1c49a4e1f324dcaa000ce92ed44d0e5b9eb16843,30 Jun 2009,"gitweb: refactor author name insertion

Collect all author display code in appropriate functions, making it
easier to extend these functions on the CGI side.

We also move some of the presentation code from hard-coded HTML to CSS,
for easier customization.

A side effect of the refactoring is that now localtime is always
displayed with the 'at night' warning.

Signed-off-by: Giuseppe Bilotta <giuseppe.bilotta@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_2392.diff
https://github.com/git/git/commit/1965ff744a7e4cdefcc467991182b779f3c9d0e8,28 Jun 2009,"add --porcelain option to git-push

If --porcelain is used git-push will produce machine-readable output.  The
output status line for each ref will be tab-separated and sent to stdout instead
of stderr.  The full symbolic names of the refs will be given.  For example

$ git push --dry-run --porcelain master :foobar 2>/dev/null \
  | perl -pe 's/\t/ TAB /g'

= TAB refs/heads/master:refs/heads/master TAB [up to date]
- TAB :refs/heads/foobar TAB [deleted]

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/patch_2393.diff
https://github.com/git/git/commit/5a56da58060e50980fab0f4c38203a25440d1530,27 Jun 2009,"read-tree: migrate to parse-options

Cleanup the documentation to explicitly state that --exclude-directory
is only meaningful when used with -u. Also make the documentation more
consistent with the usage message printed with read-tree --help-all.

The -m, --prefix, --reset options are performing similar actions
(setting some flags, read_cache_unmerged(), checking for illegal option
combinations). Instead of performing these actions when the options are
parsed, we delay performing them until after parse-opts has finished.

The bit fields in struct unpack_trees_options have been promoted to full
unsigned ints. This is necessary to avoid ""foo ? 1 : 0"" constructs to
set these fields.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",199,data/crawl/git/patch_2394.diff
https://github.com/git/git/commit/a429d2dd76c81cb52fb17463821a457e541637ce,27 Jun 2009,"read-tree: convert unhelpful usage()'s to helpful die()'s

Printing the usage message when encountering bad option combinations is
not very helpful. Instead, die with a message which tells the user
exactly what combination is invalid.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2395.diff
https://github.com/git/git/commit/2d8ad46919213ebbd7bb72eb5b56cca8cc3ae07f,27 Jun 2009,"fast-export: Add a --tag-of-filtered-object option for newly dangling tags

When providing a list of paths to limit what is exported, the object that
a tag points to can be filtered out entirely.  This new switch allows
the user to specify what should happen to the tag in such a case.  The
default action, 'abort' will exit with an error message.  With 'drop', the
tag will simply be omitted from the output.  With 'rewrite', if the object
tagged was a commit, the tag will be modified to tag an alternate commit.
The alternate commit is determined by treating the original commit as the
""parent"" of the tag and then using the parent rewriting algorithm of the
revision traversal machinery (related to the ""--parents"" option of ""git
rev-list"")

Signed-off-by: Elijah Newren <newren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_2396.diff
https://github.com/git/git/commit/02c48cd69b3ebfac3867f0f9ceb1503a5af118fc,27 Jun 2009,"fast-export: Omit tags that tag trees

Commit c0582c53bcf4e83bba70e1ad23abbad31f96ebc8 introduced logic to just
omit tags that point to tree objects.  However, these objects were still
being output and were pointing at ""mark :0"", which caused fast-import to
crash.  This patch makes sure such tags (including deeper nestings such
as tags of tags of trees), are omitted.

Signed-off-by: Elijah Newren <newren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2397.diff
https://github.com/git/git/commit/0721c314a5c8fddc877140ab5a333c42c62f780d,27 Jun 2009,"Use die_errno() instead of die() when checking syscalls

Lots of die() calls did not actually report the kind of error, which
can leave the user confused as to the real problem.  Use die_errno()
where we check a system/library call that sets errno on failure, or
one of the following that wrap such calls:

  Function              Passes on error from
  --------              --------------------
  odb_pack_keep         open
  read_ancestry         fopen
  read_in_full          xread
  strbuf_read           xread
  strbuf_read_file      open or strbuf_read_file
  strbuf_readlink       readlink
  write_in_full         xwrite

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",153,data/crawl/git/patch_2398.diff
https://github.com/git/git/commit/d824cbba02a4061400a0e382f9bd241fbbff34f0,27 Jun 2009,"Convert existing die(..., strerror(errno)) to die_errno()

Change calls to die(..., strerror(errno)) to use the new die_errno().

In the process, also make slight style adjustments: at least state
_something_ about the function that failed (instead of just printing
the pathname), and put paths in single quotes.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/patch_2399.diff
https://github.com/git/git/commit/b875036e5a2ab569a2123abe9ebfe25258227951,27 Jun 2009,"Introduce die_errno() that appends strerror(errno) to die()

There are many calls to die() that do, or should, report
strerror(errno) to indicate how the syscall they guard failed.
Introduce a small helper function for this case.

Note:

- POSIX says vsnprintf can modify errno in some unlikely cases, so we
  have to use errno early.

- We take some care to pass the original format to die_routine(), in
  case someone wants to call die_errno() with custom format
  characters.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2400.diff
https://github.com/git/git/commit/2ff4d1ab9ef6660c88020ddaadc410157e130cdc,22 Jun 2009,"receive-pack: do not send error details to the client

If the objects that a client pushes to the server cannot be processed for
any reason, an error is reported back to the client via the git protocol.
We used to send quite detailed information if a system call failed if
unpack-objects is run. This can be regarded as an information leak. Now we
do not send any error details like we already do in the case where
index-pack failed.

Errors in system calls as well as the exit code of unpack-objects and
index-pack are now reported to stderr; in the case of a local push or via
ssh these messages still go to the client, but that is OK since these forms
of access to the server assume that the client can be trusted. If
receive-pack is run from git-daemon, then the daemon should put the error
messages into the syslog.

With this reasoning a new status report is added for the post-update-hook;
untrusted (i.e. daemon's) clients cannot observe its status anyway, others
may want to know failure details.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_2401.diff
https://github.com/git/git/commit/2af202be3d2f128c6974290cabe13179c6462196,21 Jun 2009,"Fix various sparse warnings in the git source code

There are a few remaining ones, but this fixes the trivial ones. It boils
down to two main issues that sparse complains about:

 - warning: Using plain integer as NULL pointer

   Sparse doesn't like you using '0' instead of 'NULL'. For various good
   reasons, not the least of which is just the visual confusion. A NULL
   pointer is not an integer, and that whole ""0 works as NULL"" is a
   historical accident and not very pretty.

   A few of these remain: zlib is a total mess, and Z_NULL is just a 0.
   I didn't touch those.

 - warning: symbol 'xyz' was not declared. Should it be static?

   Sparse wants to see declarations for any functions you export. A lack
   of a declaration tends to mean that you should either add one, or you
   should mark the function 'static' to show that it's in file scope.

   A few of these remain: I only did the ones that should obviously just
   be made static.

That 'wt_status_submodule_summary' one is debatable. It has a few related
flags (like 'wt_status_use_color') which _are_ declared, and are used by
builtin-commit.c. So maybe we'd like to export it at some point, but it's
not declared now, and not used outside of that file, so 'static' it is in
this patch.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_2402.diff
https://github.com/git/git/commit/5d87dd4fcac808fc0f0b993b470644ba7d2d62a2,18 Jun 2009,"daemon: send stderr of service programs to the syslog

If git-daemon is run with --detach or --inetd, then stderr is explicitly
redirected to /dev/null. But notice that the service programs were spawned
via execl_git_cmd(), in particular, the stderr channel is inherited from
the daemon. This means that errors that the programs wrote to stderr (for
example, via die()), went to /dev/null.

This patch arranges that the daemon does not merely exec the service
program, but forks it and monitors stderr of the child; it writes the
errors that it produces to the daemons log via logerror().

A consequence is that the daemon process remains in memory for the full
duration of the service program, but this cannot be avoided.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2403.diff
https://github.com/git/git/commit/6e0800ef2575751f2e20d11e2cfe305304e5e9b8,14 Jun 2009,"parse-opt: make PARSE_OPT_STOP_AT_NON_OPTION available to git rev-parse

Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2404.diff
https://github.com/git/git/commit/824af25ace464177820fc69c19fc03ae4fc9e4b1,14 Jun 2009,"more tests for git rev-parse --parse-opt

Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2405.diff
https://github.com/git/git/commit/857f8c30d79ce15b6110b0df9d3ad87075ca5153,13 Jun 2009,"builtin-remote: Show push urls as well

Teach builtin remote to show push urls also when asked to
""show"" a specific remote.

This improves upon the standard display mode: multiple specified ""url""s
mean that the first one is for fetching, all are used for pushing. We
make this clearer now by displaying the first one prefixed with ""Fetch
URL"", and all ""url""s (or, if present, all ""pushurl""s) prefixed with
""Push  URL"".

Example with ""one"" having one url, ""two"" two urls, ""three"" one url and
one pushurl (URL part only):

* remote one
  Fetch URL: hostone.com:/somepath/repoone.git
  Push  URL: hostone.com:/somepath/repoone.git
* remote two
  Fetch URL: hosttwo.com:/somepath/repotwo.git
  Push  URL: hosttwo.com:/somepath/repotwo.git
  Push  URL: hosttwobackup.com:/somewheresafe/repotwo.git
* remote three
  Fetch URL: http://hostthree.com/otherpath/repothree.git
  Push  URL: hostthree.com:/pathforpushes/repothree.git

Also, adjust t5505 accordingly and make it test for the new output.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2406.diff
https://github.com/git/git/commit/cb9d398c3506a6354a1c63d265a4228fcec28fda,10 Jun 2009,"parse-options: add parse_options_check to validate option specs.

It only searches for now for the dreaded LASTARG_DEFAULT | OPTARG
combination, but can be extended to check for any other forbidden
combination.

Options are checked each time we call parse_options_start.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2407.diff
https://github.com/git/git/commit/f0cea83f631689331fce73b51f22707e897f7939,10 Jun 2009,"Shift object enumeration out of upload-pack

Offload object enumeration in upload-pack to pack-objects, but fall
back on internal revision walker for shallow interaction.   Aside from
architecturally making more sense, this also leaves the door open for
pack-objects to employ a revision cache mechanism.  Test t5530 updated
in order to explicitly check both enumeration methods.

Signed-off-by: Nick Edelen <sirnot@gmail.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2408.diff
https://github.com/git/git/commit/203462347fce0eab563fe77640648a7e8ae64d3b,10 Jun 2009,"Allow push and fetch urls to be different

This introduces a config setting remote.$remotename.pushurl which is
used for pushes only. If absent remote.$remotename.url is used for
pushes and fetches as before.
This is useful, for example, in order to do passwordless fetches
(remote update) over the git transport but pushes over ssh.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_2409.diff
https://github.com/git/git/commit/4e2715fb9878235cb696f765695eef38078b0b7a,09 Jun 2009,"Simplify some 'fprintf(stderr); return -1;' by using 'return error()'

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2410.diff
https://github.com/git/git/commit/0077138cd9d4f94636184553afd8b33b98d320a1,09 Jun 2009,"Simplify some instances of run_command() by using run_command_v_opt().

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2411.diff
https://github.com/git/git/commit/956d27a872a70f40f98c3f710553ef619959e212,08 Jun 2009,"builtin-remote: Make ""remote show"" display all urls

Currently, ""git remote -v"" lists all urls whereas ""git remote show
$remote"" shows only the first. Make it so that both show all.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2412.diff
https://github.com/git/git/commit/73bb33a94ec67a53e7d805b12ad9264fa25f4f8d,06 Jun 2009,"daemon: Strictly parse the ""extra arg"" part of the command

Since 1.4.4.5 (49ba83fb67 ""Add virtualization support to git-daemon"")
git daemon enters an infinite loop and never terminates if a client
hides any extra arguments in the initial request line which is not
exactly ""\0host=blah\0"".

Since that change, a client must never insert additional extra
arguments, or attempt to use any argument other than ""host="", as
any daemon will get stuck parsing the request line and will never
complete the request.

Since the client can't tell if the daemon is patched or not, it
is not possible to know if additional extra args might actually be
able to be safely requested.

If we ever need to extend the git daemon protocol to support a new
feature, we may have to do something like this to the exchange:

  # If both support git:// v2
  #
  C: 000cgit://v2
  S: 0010ok host user
  C: 0018host git.kernel.org
  C: 0027git-upload-pack /pub/linux-2.6.git
  S: ...git-upload-pack header...

  # If client supports git:// v2, server does not:
  #
  C: 000cgit://v2
  S: <EOF>

  C: 003bgit-upload-pack /pub/linux-2.6.git\0host=git.kernel.org\0
  S: ...git-upload-pack header...

This requires the client to create two TCP connections to talk to
an older git daemon, however all daemons since the introduction of
daemon.c will safely reject the unknown ""git://v2"" command request,
so the client can quite easily determine the server supports an
older protocol.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2413.diff
https://github.com/git/git/commit/34aec9f573af8e6fbe06285d660d9e1a84950e4c,06 Jun 2009,"parse-options: simplify usage argh handling

Simplify the argh printing by simply calling usage_argh() if the option
can take an argument. Update macros defined in parse-options.h to set
the PARSE_OPT_NOARG flag.

The only other user of custom non-argument taking options is git-apply
(in this case OPTION_BOOLEAN for deprecated options). Update it to set
the PARSE_OPT_NOARG flag.

Thanks to Ren辿 Scharfe for the suggestion and starter patch.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewd-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_2414.diff
https://github.com/git/git/commit/e3a0ca878457ecc70d0065802fcb0c6875c6b671,06 Jun 2009,"parse-options: make OPT_INTEGER's argh explicit

OPTION_INTEGER hardcodes its argh member to be ""n"", but the decision is
hidden deep in usage_with_options_internal(). Make ""n"" the default argh
for the OPT_INTEGER macro while leaving it undecided for the OPTION_INTEGER
enum.

This makes it less surprising to users that argh is ""n"" when using the
OPT_INTEGER macro.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewed-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2415.diff
https://github.com/git/git/commit/5424bc557fc6414660830b470dd45774b8f5f281,06 Jun 2009,"http*: add helper methods for fetching objects (loose)

The code handling the fetching of loose objects in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(object_http_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_object_request
 - process_http_object_request
 - finish_http_object_request
 - abort_http_object_request
 - release_http_object_request

and the new struct is http_object_request.

RANGER_HEADER_SIZE and no_pragma_header is no longer made available
outside of http.c, since after the above changes, there are no other
instances of usage outside of http.c.

Remove members of the transfer_request struct in http-push.c and
http-walker.c, including filename, real_sha1 and zret, as they are used
no longer used.

Move the methods append_remote_object_url() and get_remote_object_url()
from http-push.c to http.c. Additionally, get_remote_object_url() is no
longer defined only when USE_CURL_MULTI is defined, since
non-USE_CURL_MULTI code in http.c uses it (namely, in
new_http_object_request()).

Refactor code from http-push.c::start_fetch_loose() and
http-walker.c::start_object_fetch_request() that deals with the details
of coming up with the filename to store the retrieved object, resuming
a previously aborted request, and making a new curl request, into a new
function, new_http_object_request().

Refactor code from http-walker.c::process_object_request() into the
function, process_http_object_request().

Refactor code from http-push.c::finish_request() and
http-walker.c::finish_object_request() into a new function,
finish_http_object_request(). It returns the result of the
move_temp_to_file() invocation.

Add a function, release_http_object_request(), which cleans up object
request data. http-push.c and http-walker.c invoke this function
separately; http-push.c::release_request() and
http-walker.c::release_object_request() do not invoke this function.

Add a function, abort_http_object_request(), which unlink()s the object
file and invokes release_http_object_request(). Update
http-walker.c::abort_object_request() to use this.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",767,data/crawl/git/patch_2416.diff
https://github.com/git/git/commit/2264dfa5c4f11e2b0e2740072208186bee361afd,06 Jun 2009,"http*: add helper methods for fetching packs

The code handling the fetching of packs in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(http_pack_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_pack_request
 - finish_http_pack_request
 - release_http_pack_request

and the new struct is http_pack_request.

Add a function, new_http_pack_request(), that deals with the details of
coming up with the filename to store the retrieved packfile, resuming a
previously aborted request, and making a new curl request. Update
http-push.c::start_fetch_packed() and http-walker.c::fetch_pack() to
use this.

Add a function, finish_http_pack_request(), that deals with renaming
the pack, advancing the pack list, and installing the pack. Update
http-push.c::finish_request() and http-walker.c::fetch_pack to use
this.

Update release_request() in http-push.c and http-walker.c to invoke
release_http_pack_request() to clean up pack request helper data.

The local_stream member of the transfer_request struct in http-push.c
has been removed, as the packfile pointer will be managed in the struct
http_pack_request.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",318,data/crawl/git/patch_2417.diff
https://github.com/git/git/commit/39dc52cf4ff04e9cd4d2562218ad619e23a81efa,06 Jun 2009,"http: use new http API in fetch_index()

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_2418.diff
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/patch_2419.diff
https://github.com/git/git/commit/9af5abd9939585bb588d537085138563922c6abe,06 Jun 2009,"http-push.c::fetch_symref(): use the new http API

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2420.diff
https://github.com/git/git/commit/446b941a57d96e0c02375534b6b3f6816e7364e5,06 Jun 2009,"http-push.c::remote_exists(): use the new http API

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2421.diff
https://github.com/git/git/commit/0d5896e1cc1cb6145526b6786c7720cfe8231709,06 Jun 2009,"http.c::http_fetch_ref(): use the new http API

The error message (""Unable to start request"") has been removed, since
the http API already prints it.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_2422.diff
https://github.com/git/git/commit/28307b99ddb8e7284793d5ec830af10f130fa287,06 Jun 2009,"transport.c::get_refs_via_curl(): use the new http API

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2423.diff
https://github.com/git/git/commit/e929cd20bb3557833765f95fe0e9143a47f806e7,06 Jun 2009,"http.c: new functions for the http API

The new functions added are:
 - http_request() (internal function)
 - http_get_strbuf()
 - http_get_file()
 - http_error()

http_get_strbuf and http_get_file allow respectively to retrieve contents of
an URL to a strbuf or an opened file handle.

http_error prints out an error message containing the URL and the curl error
(in curl_errorstr).

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",134,data/crawl/git/patch_2424.diff
https://github.com/git/git/commit/20cfb3aa710d302829a776d7fbad2b89f71f15b6,06 Jun 2009,"http*: copy string returned by sha1_to_hex

In the fetch_index implementations in http-push.c and http-walker.c,
the string returned by sha1_to_hex is assumed to stay immutable.

This patch ensures that hex stays immutable by copying the string
returned by sha1_to_hex (via xstrdup) and frees it subsequently. It
also refactors free()'s and fclose()'s with labels.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_2425.diff
https://github.com/git/git/commit/48188c259a7e6c87c20121933287b8c8ca721e3a,06 Jun 2009,"http-walker: verify remote packs

In c17fb6e (""Verify remote packs, speed up pending request queue""),
changes were made to index fetching in http-push.c, particularly the
methods fetch_index and setup_index. Since http-walker.c has similar
code for index fetching, these improvements should apply to
http-walker.c's fetch_index and setup_index.

Invocations of free() of string memory are reproduced as well.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_2426.diff
https://github.com/git/git/commit/a9b2d42486ee0b461220bf3895114926d9ddf9be,03 Jun 2009,"blame: correctly handle a path that used to be a directory

When trying to see if the same path exists in the parent, we ran
""diff-tree"" with pathspec set to the path we are interested in with the
parent, and expect either to have exactly one resulting filepair (either
""changed from the parent"", ""created when there was none"") or nothing (when
there is no change from the parent).

If the path used to be a directory, however, we will also see unbounded
number of entries that talk about the files that used to exist underneath
the directory in question.  Correctly pick only the entry that describes
the path we are interested in in such a case (namely, the creation of the
path as a regular file).

Noticed by Ben Willard.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_2427.diff
https://github.com/git/git/commit/c8c562a238071843c64ea0f3a2c85481606da379,02 Jun 2009,"refuse to merge during a merge

The following is an easy mistake to make for users coming from version
control systems with an ""update and commit""-style workflow.

        1. git pull
        2. resolve conflicts
        3. git pull

Step 3 overrides MERGE_HEAD, starting a new merge with dirty index.
IOW, probably not what the user intended. Instead, refuse to merge
again if a merge is in progress.

Reported-by: Dave Olszewski <cxreg@pobox.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2428.diff
https://github.com/git/git/commit/f0ed8226c9c65f2a324610258418258229e77fbe,01 Jun 2009,"Add custom memory allocator to MinGW and MacOS builds

The standard allocator on Windows is pretty bad prior
to Windows Vista, and nedmalloc is better than the
modified dlmalloc provided with newer versions of the
MinGW libc.

NedMalloc stats in Git
----------------------
  All results are the best result out of 3 runs. The
  benchmarks have been done on different hardware, so
  the repack times are not comparable.

  These benchmarks are all based on 'git repack -adf'
  on the Linux kernel.

  XP
  -----------------------------------------------
  MinGW               Threads  Total Time   Speed
  -----------------------------------------------
  3.4.2                  (1T)  00:12:28.422
  3.4.2     + nedmalloc  (1T)  00:07:25.437 1.68x

  3.4.5                  (1T)  00:12:20.718
  3.4.5     + nedmalloc  (1T)  00:07:24.809 1.67x

  4.3.3-tdm              (1T)  00:12:01.843
  4.3.3-tdm + nedmalloc  (1T)  00:07:16.468 1.65x

  4.3.3-tdm              (2T)  00:07:35.062
  4.3.3-tdm + nedmalloc  (2T)  00:04:57.874 1.54x

  Vista
  -----------------------------------------------
  MinGW               Threads  Total Time   Speed
  -----------------------------------------------
  4.3.3-tdm              (1T)  00:07:40.844
  4.3.3-tdm + nedmalloc  (1T)  00:07:17.548 1.05x

  4.3.3-tdm              (2T)  00:05:33.746
  4.3.3-tdm + nedmalloc  (2T)  00:05:27.334 1.02x

  Mac Mini
  -----------------------------------------------
  GCC                 Threads  Total Time   Speed
  -----------------------------------------------
  i686-darwin9-4.0.1     (2T)  00:09:57.346
  i686-darwin9-4.0.1+ned (2T)  00:08:51.072 1.12x

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>
Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7064,data/crawl/git/patch_2429.diff
https://github.com/git/git/commit/d9b26333854ce72a05cd077638c41a332f79c779,01 Jun 2009,"test-chmtime: work around Windows limitation

Windows has problems changing the mtime when the file is write protected,
even by the owner of said file.

Add a Windows-only workaround to change the mode if necessary before
trying to change the mtime.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2430.diff
https://github.com/git/git/commit/0620b39b3b7b1f27bf863d9591fd8146a9a8931d,01 Jun 2009,"compat: add a mkstemps() compatibility function

mkstemps() is a BSD extension so provide an implementation
for cross-platform use.

Signed-off-by: David Aguilar <davvid@gmail.com>
Tested-by: Johannes Sixt <j6t@kdbg.org> (Windows)
Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/patch_2431.diff
https://github.com/git/git/commit/86af2caa5ac322b1ebda8b4f0aceb9dfafe3e5ba,01 Jun 2009,"builtin-replace: use ""usage_msg_opt"" to give better error messages

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2432.diff
https://github.com/git/git/commit/451bb210f81c10b60bf90403c9183be26beaaabf,01 Jun 2009,"parse-options: add new function ""usage_msg_opt""

This function can be used instead of ""usage_with_options"" when you
want to print an error message before the usage string.

It may be useful because:

if (condition)
	usage_msg_opt(""condition is false"", usage, opts);

is shorter than:

if (condition) {
	fprintf(stderr, ""condition is false\n\n"");
	usage_with_options(usage, opts);
}

and may be more consistent.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2433.diff
https://github.com/git/git/commit/bebdd271ff660d603ad75fef346ad1ff19fca0cb,01 Jun 2009,"builtin-replace: teach ""git replace"" to actually replace

Teach the syntax: ""git replace <object> <replacement>"", so that
""git replace"" can now create replace refs. These replace refs
will be used by read_sha1_file to substitute <object> with
<replacement> for most of the commands.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_2434.diff
https://github.com/git/git/commit/54b0c1e041e50cc08b1520b7d557770916d0b7ab,01 Jun 2009,"Add new ""git replace"" command

This command can only be used now to list replace refs in
""refs/replace/"" and to delete them.

The option to list replace refs is ""-l"".
The option to delete replace refs is ""-d"".

The behavior should be consistent with how ""git tag"" and ""git branch""
are working.

The code has been copied from ""builtin-tag.c"" by Kristian Høgsberg
<krh@redhat.com> and Carlos Rica <jasampler@gmail.com> that was itself
based on git-tag.sh and mktag.c by Linus Torvalds.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/patch_2435.diff
https://github.com/git/git/commit/0e87c36763a384d5bf6fae4bda44fd035c0b75ff,01 Jun 2009,"object: call ""check_sha1_signature"" with the replacement sha1

Otherwise we get a ""sha1 mismatch"" error for replaced objects.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2436.diff
https://github.com/git/git/commit/680955702990c1d4bfb3c6feed6ae9c6cb5c3c07,01 Jun 2009,"replace_object: add mechanism to replace objects found in ""refs/replace/""

The code implementing this mechanism has been copied more-or-less
from the commit graft code.

This mechanism is used in ""read_sha1_file"". sha1 passed to this
function that match a ref name in ""refs/replace/"" are replaced by
the sha1 that has been read in the ref.

We ""die"" if the replacement recursion depth is too high or if we
can't read the replacement object.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_2437.diff
https://github.com/git/git/commit/b7dd2d20fad1036ce7da0b635a8bb14cd4230f1a,29 May 2009,"for-each-ref: Do not lookup objects when they will not be used

This makes commands such as `git for-each-ref --format='%(refname)'`,
which are used heavily by the bash_completion code, run about 6 times
faster on an uncached repository (3 s intead of 18 s on my linux-2.6
repository with several remotes).

Signed-off-by: Anders Kaseorg <andersk@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_2438.diff
https://github.com/git/git/commit/94ad2437020038b022ce19b8b8b35f1cc86b16f6,27 May 2009,"imap-send: add support for IPv6

Add IPv6 support by implementing name resolution with the
protocol agnostic getaddrinfo(3) API. The old gethostbyname(3)
code is still available when git is compiled with NO_IPV6.

Signed-off-by: Benjamin Kramer <benny.kra@googlemail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_2439.diff
https://github.com/git/git/commit/3cd7388d57db4f4a29949e8de96493fb77059484,25 May 2009,"convert bare readlink to strbuf_readlink

This particular readlink call never NUL-terminated its
result, making it a potential source of bugs (though there
is no bug now, as it currently always respects the length
field). Let's just switch it to strbuf_readlink which is
shorter and less error-prone.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2440.diff
https://github.com/git/git/commit/df217ed6430efe444a09fffdafd39720ae3f9864,25 May 2009,"parse-opts: add OPT_FILENAME and transition builtins

Commit dbd0f5c (Files given on the command line are relative to $cwd,
2008-08-06) introduced parse_options_fix_filename() as a minimal fix.
OPT_FILENAME is intended to be a more robust fix for the same issue.
OPT_FILENAME and its associated enum OPTION_FILENAME are used to
represent filename options within the parse options API.

This option is similar to OPTION_STRING. If --no is prefixed to the
option the filename is unset. If no argument is given and the default
value is set, the filename is set to the default value. The difference
is that the filename is prefixed with the prefix passed to
parse_options() (or parse_options_start()).

Update git-apply, git-commit, git-fmt-merge-msg, and git-tag to use
OPT_FILENAME with their filename options. Also, rename
parse_options_fix_filename() to fix_filename() as it is no longer
extern.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_2441.diff
https://github.com/git/git/commit/b74d779bd90477f6514d0a9be4a75b4c40ed946c,23 May 2009,"MinGW: Fix compiler warning in merge-recursive

GCC 4.4.0 on Windows does not like the format %zu.  It is quite unlikely,
though, that we need more merge bases than a %d can display, so replace
the %zu by a %d.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2442.diff
https://github.com/git/git/commit/0dbbbc1e26c9979e34031c09c641893123d18450,23 May 2009,"MinGW: Add a simple getpass()

We need getpass() to activate curl on MinGW.  Although the default
Makefile currently has 'NO_CURL = YesPlease', msysgit releases do
provide curl support, so getpass() is used.

[spr: - edited commit message.
      - squashed commit that provides getpass() declaration.]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2443.diff
https://github.com/git/git/commit/57343652a55bdc3e7f3cf8c6def94dac482c72e5,23 May 2009,"show-branch: migrate to parse-options API

Note that ""-g"" no longer uses an equals '=' sign for its optional
arguments, but ""--reflog"" still does. This is normal behavior for parse
options, as arguments to ""-g"" are put immediately after the option with
no space.

For example

    git show-branch -g=4

is now

    git show-branch -g4

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/patch_2444.diff
https://github.com/git/git/commit/29f25d493c1021a53acf41e5763e732217dd75c3,23 May 2009,"parse-options: add PARSE_OPT_LITERAL_ARGHELP for complicated argh's

Usually, the argh element in struct option points at a placeholder value
(e.g. ""val""), and is shown in the usage message as

    --option=<val>

by enclosing the string inside of angle brackets.

When the option is more complex (e.g. optional arguments separated by a
comma), you would want to produce a usage message that looks like

    --option=<val1>[,<val2>]

In such a case, the caller can pass a string to argh with placeholders
already enclosed in necessary angle brackets (e.g.  ""<val1>[,<val2>]"")
and set this flag.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2445.diff
https://github.com/git/git/commit/2d938fc7bcf2c8ce314c44955db5a4dd2e9b6adb,18 May 2009,"bisect: check ancestors without forking a ""git rev-list"" process

We must save the pending commits that will be used during revision
walking and unparse them after, because we want to leave a clean
state for the next revision walking that will try to find the best
bisection point.

As we don't fork a process anymore to call ""git rev-list"", we need
to remove the use of GIT_TRACE to check how ""git rev-list"" is
called from the t6030 test that uses it.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_2446.diff
https://github.com/git/git/commit/fff02ee666021b67b2272ce4445f7c1f5b26b77c,18 May 2009,"format-patch: migrate to parse-options API

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",255,data/crawl/git/patch_2447.diff
https://github.com/git/git/commit/5acb3e5012966cc11e54f50e0592b3639bade02c,17 May 2009,"show-branch: Fix die message in parse_reflog_param()

Commit 76a44c5 (show-branch --reflog: show the reflog message at the
top, 2007-01-19) introduced parse_reflog_param(). The die() call was
incorrectly passed arg + 9, when it should have been passed arg.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2448.diff
https://github.com/git/git/commit/31c8221acb7c7acaea6ce2c680c2985581ce0066,16 May 2009,"mktree: validate entry type in input

Previously mktree would accept tree entries which had a mismatch between
the declared type and the actual type of object.  Check the actual type of
the object when it is available locally.

Signed-off-by: Josh Micich <josh.micich@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2449.diff
https://github.com/git/git/commit/f1cf2d8b1467b5973f249703b31e709eaede97ad,16 May 2009,"mktree --batch: build more than one tree object

This option works in a similar way to the '--batch' option of 'git cat-file'.
It enables creation of many tree objects with a single process.

The change was motivated by performance considerations in applications that
need to create many tree objects. A non-rigorous test showed tree creation
times improved from (roughly) 200ms to 50ms.

Signed-off-by: Josh Micich <josh.micich@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2450.diff
https://github.com/git/git/commit/4577e483648f50dd80faa401dc1d3eb33ffb627b,14 May 2009,"Change prettify_ref to prettify_refname

In preparation to be used when the ref object is not available

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2451.diff
https://github.com/git/git/commit/95405ba6cf7adeaa4a066e8a3a1b76b73f7b9341,13 May 2009,"Quote LF in urls git fetch saves in FETCH_HEAD

The fmt-merge-msg does a strong syntax checking of its input and fails
with if it is incorrect. The LF character is the only character
important for fmt-merge-msg. As the url in FETCH_HEAD plays only
informational role, a quoted representation of the url should be good
and true enough.
The url often comes from either user-editable config or command line,
so it is reasonable to expect all kinds of characters in it, including
the characters which the format of FETCH_HEAD considers special (line
separator in this case).

Noticed and reported by Hugo Mildenberger.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2452.diff
https://github.com/git/git/commit/d937d4aca1f10b9202b620a89dc6a5972e9605eb,10 May 2009,"bisect: add ""check_good_are_ancestors_of_bad"" function

This is a port of the function with the same name that is in
""git-bisect.sh"". The new function is not used yet but will be in
a later patch.

We also implement an helper ""check_ancestors"" function that use
""start_command"" and ""finish_command"" to launch
""git rev-list $good ^$bad"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2453.diff
https://github.com/git/git/commit/c0537662806f4b3d3ba883d05a48fdf9120893f0,10 May 2009,"bisect: implement the ""check_merge_bases"" function

And all functions needed to make it work.

This is a port from the shell function with the same name
""git-bisect.sh"". This function is not used yet but it will be used
later.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",130,data/crawl/git/patch_2454.diff
https://github.com/git/git/commit/2b020695e4db8dbaee7997090aec08760903291b,10 May 2009,"bisect: remove too much function nesting

This patch moves some function calls into ""bisect_next_exit"" so
that functions are nesting less.

The call to ""bisect_rev_setup"" is moved from ""bisect_common"" into
""bisect_next_exit"" and the call to ""read_bisect_refs"" from
""bisect_rev_setup"" into ""bisect_next_exit"".

While at it, ""rev_argv"" is moved into ""bisect_rev_setup"".

This will make it easier and cleaner to implement checking merge
bases.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2455.diff
https://github.com/git/git/commit/fad2d31d62277eced9aa7fc187ae3b97e72895bb,10 May 2009,"bisect: store good revisions in a ""sha1_array""

This will make it easier to use good revisions for checking merge
bases later.

To simplify the code, a new ""sha1_array_push"" function is also
introduced.

And while at it we move the earlier part of the code to fill the
argv that is passed to ""setup_revisions"", so that all this code is
now completely after ""read_bisect_refs"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_2456.diff
https://github.com/git/git/commit/801cfae8fd683761ae268cab8cec08e4b0f5a35b,10 May 2009,"t1010: add mktree test

So far mktree (which has always been a quick hack) had no test.
At least give it a bit of test coverage.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_2457.diff
https://github.com/git/git/commit/fe0bb5f7bce3dbcc32325c74e693a726d0c2808b,10 May 2009,"builtin-mktree.c: use a helper function to handle one line of input

The main() function used to do the whole thing; this moves the handling of
a single input line to a separate function to make it easier to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_2458.diff
https://github.com/git/git/commit/503253771e93fd9f29c9f0773223d456677452c4,10 May 2009,"rev-parse: add --sq-quote to shell quote arguments

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2459.diff
https://github.com/git/git/commit/38ef7507d1dce87d68f177a6209d716339fee854,10 May 2009,"rev-list: remove stringed output flag from ""show_bisect_vars""

Because it was used only by ""git bisect--helper --next-vars"" but
the ""--next-vars"" option has been removed.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_2460.diff
https://github.com/git/git/commit/ef24c7ca055f03c673c2b67a3a7c92bcc32f62f0,10 May 2009,"bisect--helper: add ""--next-exit"" to output bisect results

The goal of this patch is to port more shell code from the ""bisect_next""
function in ""git-bisect.sh"" to C code in ""builtin-bisect--helper.c"".

So we port the code that interprets the bisection result and stops or
continues (by checking out the next revision) the bisection process.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/patch_2461.diff
https://github.com/git/git/commit/2ace9727be2b04ce9fbc5939466da38be7fd8496,10 May 2009,"bisect: move common bisect functionality to ""bisect_common""

So we can easily reuse the code in a later patch.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2462.diff
https://github.com/git/git/commit/280e65cbd83a867437cef3543d445013ecbfe29a,10 May 2009,"rev-list: refactor printing bisect vars

This simplifies the code, and while at it we create the
""print_commit_list"" function that will be reused later.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_2463.diff
https://github.com/git/git/commit/3e230fa1b2ba3aa1a207c4399a1b93e41b103dfb,09 May 2009,"grep: use parseopt

Convert git-grep to parseopt.

The bitfields in struct grep_opt are converted to full ints,
increasing its size.  This shouldn't be a problem as there is only a
single instance in memory.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",434,data/crawl/git/patch_2464.diff
https://github.com/git/git/commit/51a9949eda7421a2dd9cb45b2110d6571ba09bbd,09 May 2009,"parseopt: add PARSE_OPT_NODASH

Add support for options that don't start with a dash.  Initially, they
don't accept arguments and can only be short options, i.e. consist of a
single character.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2465.diff
https://github.com/git/git/commit/e0319ff5ed2b7927302389181449dcd029a26622,09 May 2009,"parseopt: add OPT_NUMBER_CALLBACK

Add a way to recognize numerical options.  The number is passed to
a callback function as a string.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2466.diff
https://github.com/git/git/commit/2f4b97f91071f5060bf2da482cf8b0d70486d808,09 May 2009,"parseopt: add OPT_NEGBIT

Add OPTION_NEGBIT and OPT_NEGBIT, mirroring OPTION_BIT and OPT_BIT.
OPT_NEGBIT can be used together with OPT_BIT to define two options
that cancel each other out.

Note: this patch removes the reminder from the test script because
it adds a test for --no-or4 and there already was one for --or4.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2467.diff
https://github.com/git/git/commit/e88d022af96312e64216bfec31bd6749277c335a,06 May 2009,"improve error message in config.c

Show errno if opening a lockfile fails.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2468.diff
https://github.com/git/git/commit/3536ae331014c68a25c80b3fb530a19c8dee0f11,03 May 2009,Sync with GIT 1.6.2.5,59,data/crawl/git/patch_2469.diff
https://github.com/git/git/commit/f04833ef9f330612a4116401258882b38e95744e,02 May 2009,"honor repack.usedeltabaseoffset when fetching packs

If the local receiving repository has disabled the use of delta base
offset, for example to retain compatibility with older versions of
Git that predate OFS_DELTA, we shouldn't ask for ofs-delta support
when we obtain a pack from the remote server.

[ issue noticed by Shawn Pearce ]

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2470.diff
https://github.com/git/git/commit/4b25d091ba53c758fae0096b8c0662371857b9d9,01 May 2009,"Fix a bunch of pointer declarations (codestyle)

Essentially; s/type* /type */ as per the coding guidelines.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_2471.diff
https://github.com/git/git/commit/d93f1713b0ba57b119f2ba2e2beda2ed9cc7349d,30 Apr 2009,"gitk: Use themed tk widgets

With Tk 8.5+, this uses the themed widgets to improve the appearance
on Windows and MacOSX.  On X11 less difference is apparent, but users
can select alternate themes by setting *TkTheme in the resource
database (eg: *TkTheme: clam).

With Tk 8.6 there is a built-in font selection dialog.  This will make
use of that when available, as on Windows and MacOSX it calls the
native font selection dialog.

[paulus@samba.org - folded in subsequent patch to restore saved
pane sizes for ttk widgets, and trimmed trailing whitespace.]

Signed-off-by: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Paul Mackerras <paulus@samba.org>",607,data/crawl/git/patch_2472.diff
https://github.com/git/git/commit/6ffd567bec439e7809ee0966556bd5e72fb78de4,30 Apr 2009,"improve error message in config.c

Show errno if opening a lockfile fails.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2473.diff
https://github.com/git/git/commit/f6a5f1bb509a3af182fe568135398f1f2be15e5d,30 Apr 2009,"print unlink(2) errno in copy_or_link_directory

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2474.diff
https://github.com/git/git/commit/691f1a28bf57618d8b44a193b1d28013c858aba6,30 Apr 2009,"replace direct calls to unlink(2) with unlink_or_warn

This helps to notice when something's going wrong, especially on
systems which lock open files.

I used the following criteria when selecting the code for replacement:
- it was already printing a warning for the unlink failures
- it is in a function which already printing something or is
  called from such a function
- it is in a static function, returning void and the function is only
  called from a builtin main function (cmd_)
- it is in a function which handles emergency exit (signal handlers)
- it is in a function which is obvously cleaning up the lockfiles

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_2475.diff
https://github.com/git/git/commit/fc71db39e0d75e8a403f36f3fecf4450886cd165,30 Apr 2009,"Introduce an unlink(2) wrapper which gives warning if unlink failed

This seem to be a very common pattern in the current code.

The function prints a generic removal failure message, the file name
which failed and readable errno presentation. The function preserves
errno and always returns the value unlink(2) returned, but prints
no message for ENOENT, as it was the most often filtered out in the
code calling unlink. Besides, removing a file is anyway the purpose of
calling unlink.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2476.diff
https://github.com/git/git/commit/0c44c94309693d0582e91a6744edc2e8eba46ef8,29 Apr 2009,"merge-recursive: do not die on a conflicting submodule

We cannot represent the 3-way conflicted state in the work tree
for these entries, but it is normal not to have commit objects
for them in our repository.  Just update the index and the life
will be good.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2477.diff
https://github.com/git/git/commit/d212ca1724b1a3708a3b4cb72c58b20ef442b24f,29 Apr 2009,"git config: error when editing a repo config and not being in one

Let's throw an error on this specific case. If the user specifies the
config file, he must know what he is doing.

Teemu Likonen pointed this out.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2478.diff
https://github.com/git/git/commit/348df16679cf35b7bba7afea99638e7d81dc3d33,29 Apr 2009,"Rename core.unreliableHardlinks to core.createObject

""Unreliable hardlinks"" is a misleading description for what is happening.
So rename it to something less misleading.

Suggested by Linus Torvalds.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2479.diff
https://github.com/git/git/commit/7dae8b21c2fe39a59661c709f0dc17090dafa5a4,29 Apr 2009,"diff -c -p: do not die on submodules

The combine diff logic knew only about blobs (and their checked-out form
in the work tree, either regular files or symlinks), and barfed when fed
submodules.  This ""externalizes"" gitlinks in the same way as the normal
patch generation codepath does (i.e. ""Subproject commit Xxx\n"") to fix the
issue.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_2480.diff
https://github.com/git/git/commit/c922b01f54c4bebe84daeacf014cfbc8dc68479b,28 Apr 2009,"grep: fix segfault when ""git grep '('"" is given

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2481.diff
https://github.com/git/git/commit/345f6e2cb547007da48ef503f00070cdcca04975,27 Apr 2009,"builtin-merge: fix a typo in an error message

Signed-off-by: Allan Caffee <allan.caffee@gmail.com>
Acked-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2482.diff
https://github.com/git/git/commit/a408e0e649b79ede7422bf837a31d281e4188cef,26 Apr 2009,"diff: do not color --stat output like patch context

The diffstat used the color.diff.plain slot (context text) for coloring
filenames and the whole summary line. This didn't look nice and the
affected text isn't patch context at all.

Signed-off-by: Markus Heidelberg <markus.heidelberg@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2483.diff
https://github.com/git/git/commit/cd294bc3f3a7b1277551a8c6e0682fdfbe794260,24 Apr 2009,"remote.c: do not trigger remote.<name>.<var> codepath for two-level names

If the config file contains a section like this:

    [remote]
            default = foo

(it should be '[remotes]') then commands like

    git status
    git checkout
    git branch -v

fail even though they are not obviously related to remotes. (These
commands write ""ahead, behind"" information and, therefore, access the
per-remote information).

Unknown configuration keys should be ignored, not trigger errors.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2484.diff
https://github.com/git/git/commit/178b513eb78ac8099588c5bed1f1f74f660cf009,24 Apr 2009,"builtin-help: silently tolerate unknown keys

If for some reason the config file contains a key without a subkey like

    [man]
        foo = bar

then even a plain

    git help

produces an error message. With this patch such an entry is ignored.

Additionally, the warning about unknown sub-keys is removed. It could
become annoying if new sub-keys are introduced in the future, and then
the configuration is read by an old version of git that does not know
about it.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2485.diff
https://github.com/git/git/commit/c2318228ab327999520b2e5dbc9edbd619a73105,23 Apr 2009,"test-genrandom: Add newline to usage string

A minor fix to place the terminal input on a new line if test-genrandom
is run with no arguments.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2486.diff
https://github.com/git/git/commit/ab07ba2a2436cc717b872387320297bb806d35d9,23 Apr 2009,"show-branch: color the commit status signs

Make it possible to color the status character ('*' '!' '+' '-') of each
commit corresponding to the branch it's in. This makes it easier to
follow a particular branch, especially if there are larger gaps in the
output.

Add the config option color.showbranch and the command line options
 --color and --no-color to control the colored output.

Signed-off-by: Markus Heidelberg <markus.heidelberg@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_2487.diff
https://github.com/git/git/commit/426193c025eb76125a99b3fe143eea50e849f9ca,19 Apr 2009,"builtin-fast-export.c: fix crash on tagged trees

If a tag object points to a tree (or another unhandled type), the commit-
pointer is left uninitialized and later dereferenced. This patch adds a
default case to the switch that issues a warning and skips the object.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2488.diff
https://github.com/git/git/commit/38124d8f3120b8e189760376b0a93cad6f3c475a,19 Apr 2009,"builtin-fast-export.c: turn error into warning

fast-import doesn't have a syntax to support tree-objects (and some other
object-types), so fast-export shouldn't handle them. However, aborting the
operation is a bit drastic. This patch turns the error into a warning instead.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2489.diff
https://github.com/git/git/commit/1092f6b3f8bcdad89169952f2922e1bfb7b23d33,19 Apr 2009,"test-suite: adding a test for fast-export with tag variants

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2490.diff
https://github.com/git/git/commit/32d1776b1341c17b99da862e80ddf151a5b558fe,18 Apr 2009,"init: Do not segfault on big GIT_TEMPLATE_DIR environment variable

Signed-off-by: Frank Lichtenheld <flichtenheld@astaro.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2491.diff
https://github.com/git/git/commit/4191e80a3e8ee0fa0b8f97f9fba81c3549813fd5,18 Apr 2009,"attr: add GIT_ATTR_INDEX ""direction""

This instructs attr mechanism, not to look into working .gitattributes
at all. Needed by tools that does not handle working directory, such
as ""git archive"".

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2492.diff
https://github.com/git/git/commit/a45d34691ea624e93863e95706eeb1b1909304f3,13 Apr 2009,"rev-parse: --abbrev-ref option to shorten ref name

This applies the shorten_unambiguous_ref function to the object name.
Default mode is controlled by core.warnAmbiguousRefs. Else it is given as
optional argument to --abbrev-ref={strict|loose}.

This should be faster than 'git for-each-ref --format=""%(refname:short)"" <ref>'
for single refs.

Signed-off-by: Bert Wesarg <bert.wesarg@googlemail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2493.diff
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/patch_2494.diff
https://github.com/git/git/commit/8d2dfc49b199c7da6faefd7993630f24bd37fee0,13 Apr 2009,"process_{tree,blob}: show objects without buffering

Here's a less trivial thing, and slightly more dubious one.

I was looking at that ""struct object_array objects"", and wondering why we
do that. I have honestly totally forgotten. Why not just call the ""show()""
function as we encounter the objects? Rather than add the objects to the
object_array, and then at the very end going through the array and doing a
'show' on all, just do things more incrementally.

Now, there are possible downsides to this:

 - the ""buffer using object_array"" _can_ in theory result in at least
   better I-cache usage (two tight loops rather than one more spread out
   one). I don't think this is a real issue, but in theory..

 - this _does_ change the order of the objects printed. Instead of doing a
   ""process_tree(revs, commit->tree, &objects, NULL, """");"" in the loop
   over the commits (which puts all the root trees _first_ in the object
   list, this patch just adds them to the list of pending objects, and
   then we'll traverse them in that order (and thus show each root tree
   object together with the objects we discover under it)

   I _think_ the new ordering actually makes more sense, but the object
   ordering is actually a subtle thing when it comes to packing
   efficiency, so any change in order is going to have implications for
   packing. Good or bad, I dunno.

 - There may be some reason why we did it that odd way with the object
   array, that I have simply forgotten.

Anyway, now that we don't buffer up the objects before showing them
that may actually result in lower memory usage during that whole
traverse_commit_list() phase.

This is seriously not very deeply tested. It makes sense to me, it seems
to pass all the tests, it looks ok, but...

Does anybody remember why we did that ""object_array"" thing? It used to be
an ""object_list"" a long long time ago, but got changed into the array due
to better memory usage patterns (those linked lists of obejcts are
horrible from a memory allocation standpoint). But I wonder why we didn't
do this back then. Maybe there's a reason for it.

Or maybe there _used_ to be a reason, and no longer is.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_2495.diff
https://github.com/git/git/commit/c59cb03a8bfc4b09758b07b23b6fe70a909ff9f4,12 Apr 2009,"git-add: introduce --edit (to edit the diff vs. the index)

With ""git add -e [<files>]"", Git will fire up an editor with the current
diff relative to the index (i.e. what you would get with ""git diff
[<files>]"").

Now you can edit the patch as much as you like, including adding/removing
lines, editing the text, whatever.  Make sure, though, that the first
character of the hunk lines is still a space, a plus or a minus.

After you closed the editor, Git will adjust the line counts of the hunks
if necessary, thanks to the --recount option of apply, and commit the
patch.  Except if you deleted everything, in which case nothing happens
(for obvious reasons).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",179,data/crawl/git/patch_2496.diff
https://github.com/git/git/commit/b6c29915d2efd0d2cb56eca88bd8e6b4999546dc,12 Apr 2009,"Update delta compression message to be less misleading

In the case of a small repository, pack-objects is smart enough to not
start more threads than necessary. However, the output to the user always
reports the value of the pack.threads configuration and not the real
number of threads to be used.

Signed-off-by: Dan McGee <dpmcgee@gmail.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2497.diff
https://github.com/git/git/commit/7c2b3029df45a74d0ebd11afcc94259791cfb90d,08 Apr 2009,"make get_short_ref a public function

Often we want to shorten a full ref name to something ""prettier""
to show a user. For example, ""refs/heads/master"" is often shown
simply as ""master"", or ""refs/remotes/origin/master"" is shown as
""origin/master"".

Many places in the code use a very simple formula: skip common
prefixes like refs/heads, refs/remotes, etc. This is codified in
the prettify_ref function.

for-each-ref has a more correct (but more expensive) approach:
consider the ref lookup rules, and try shortening as much as
possible while remaining unambiguous.

This patch makes the latter strategy globally available as
shorten_unambiguous_ref.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",205,data/crawl/git/patch_2498.diff
https://github.com/git/git/commit/8db9a4b85d6b0d7424c8a19b77a5baa8529ab64c,08 Apr 2009,"for-each-ref: refactor refname handling

This code handles some special magic like *-deref and the
:short formatting specifier. The next patch will add another
field which outputs a ref and wants to use the same code.

This patch splits the ""which ref are we outputting"" from the
actual formatting. There should be no behavioral change.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2499.diff
https://github.com/git/git/commit/714fddf2fc50cd5abb11d75837e6340edb9601f6,08 Apr 2009,"Change double quotes to single quotes in message

Most of the time when we give branch name in the message, we quote it
inside a pair of single-quotes.  git-checkout uses double-quotes; this
patch corrects the inconsistency.

Signed-off-by: Jari Aalto <jari.aalto@cante.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2500.diff
https://github.com/git/git/commit/d797257eb280b67dd1f7153a66b03453c0fb927a,08 Apr 2009,"rev-list: remove last static vars used in ""show_commit""

This patch removes the last static variables that were used in
the ""show_commit"" function.

To do that, we create a new ""rev_list_info"" struct that we will pass
in the ""void *data"" argument to ""show_commit"".

This means that we have to change the first argument to
""show_bisect_vars"" too.

While at it, we also remove a ""struct commit_list *list"" variable
in ""cmd_rev_list"" that is not really needed.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_2501.diff
https://github.com/git/git/commit/11c211fa06fc396e8ee8132ef83e2f2763ff6976,08 Apr 2009,"list-objects: add ""void *data"" parameter to show functions

The goal of this patch is to get rid of the ""static struct rev_info
revs"" static variable in ""builtin-rev-list.c"".

To do that, we need to pass the revs to the ""show_commit"" function
in ""builtin-rev-list.c"" and this in turn means that the
""traverse_commit_list"" function in ""list-objects.c"" must be passed
functions pointers to functions with 2 parameters instead of one.

So we have to change all the callers and all the functions passed
to ""traverse_commit_list"".

Anyway this makes the code more clean and more generic, so it
should be a good thing in the long run.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_2502.diff
https://github.com/git/git/commit/b344e1614b15dfde0ab4dfc175bed1aac39bc264,08 Apr 2009,"git remote update: Fallback to remote if group does not exist

Previously, git remote update <remote> would fail unless there was
a remote group configured with the same name as the remote.
git remote update will now fall back to using the remote if no matching
group can be found.

This enables ""git remote update -p <remote>..."" to fetch and prune one
or more remotes, for example.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2503.diff
https://github.com/git/git/commit/bed5d42163ec2e2ddde3b1d78d303a4fb39bc0d0,08 Apr 2009,"git remote update: Report error for non-existing groups

Previosly, git remote update <non-existing-group> would just silently fail
and do nothing. Now it will report an error saying that the group does
not exist.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_2504.diff
https://github.com/git/git/commit/1a7b1f6b9c9a129236c66c392877e8697825470f,06 Apr 2009,"sha1-lookup: fix up the assertion message

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2505.diff
https://github.com/git/git/commit/1d1876e9300c56f399ea2976c5831674cd9818b1,06 Apr 2009,"Add configuration variable for sign-off to format-patch

If you regularly create patches which require a Signed-off: line you may
want to make it your default to add that line. It also helps you not to forget
to add the -s/--signoff switch.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2506.diff
https://github.com/git/git/commit/b92c5f228a9c07fe339c8fd5406069602b6452f6,05 Apr 2009,"builtin-remote.c: Split out prune_remote as a separate function.

prune_remote will be used in update(), so this function was split
out to avoid code duplication.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2507.diff
https://github.com/git/git/commit/e89aa6d2f546b2d4f2d88c15ce7e343751d6922f,05 Apr 2009,"bisect--helper: string output variables together with ""&&""

When doing:

eval ""git bisect--helper --next-vars"" | {
        while read line
        do
                echo ""$line &&""
        done
        echo ':'
}

the result code comes from the last ""echo ':'"", not from running
""git bisect--helper --next-vars"".

This patch gets rid of the need to string together the line from
the output of ""git bisect--helper"" with ""&&"" in the calling script
by making ""git bisect--helper --next-vars"" return output variables
already in that format.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2508.diff
https://github.com/git/git/commit/3b437b0dabfdff12d5dd78b9bb55a0be4e2da51c,05 Apr 2009,"bisect: implement ""read_bisect_paths"" to read paths in ""$GIT_DIR/BISECT_NAMES""

This is needed because  ""git bisect--helper"" must read bisect paths
in ""$GIT_DIR/BISECT_NAMES"", so that a bisection can be performed only
on commits that touches paths in this file.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_2509.diff
https://github.com/git/git/commit/1bf072e3661eeef8d9721079a332e804b5678c7e,05 Apr 2009,"bisect--helper: implement ""git bisect--helper""

This patch implements a new ""git bisect--helper"" builtin plumbing
command that will be used to migrate ""git-bisect.sh"" to C.

We start by implementing only the ""--next-vars"" option that will
read bisect refs from ""refs/bisect/"", and then compute the next
bisect step, and output shell variables ready to be eval'ed by
the shell.

At this step, ""git bisect--helper"" ignores the paths that may
have been put in ""$GIT_DIR/BISECT_NAMES"". This will be fixed in a
later patch.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_2510.diff
https://github.com/git/git/commit/951886481668b97485640a1b24fc73fccff0d629,05 Apr 2009,"rev-list: call new ""filter_skip"" function

This patch implements a new ""filter_skip"" function in C in
""bisect.c"" that will later replace the existing implementation in
shell in ""git-bisect.sh"".

An array is used to store the skipped commits. But the array is
not yet fed anything.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_2511.diff
https://github.com/git/git/commit/4f6a32f8af9cceaf0c8ccf6d00d2f100dab5a6db,05 Apr 2009,"commit: abort commit if interactive add failed

Previously we ignored the result of calling add_interactive,
which meant that if an error occurred we simply committed
whatever happened to be in the index.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2512.diff
https://github.com/git/git/commit/39d8e271f42e976a61f08a4f7bc2047a682ac532,05 Apr 2009,"simplify output of conflicting merge

This simplifies the code without changing the semantics and removes
the unhelpful ""needs $sha1"" part of the conflicting submodule message.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2513.diff
https://github.com/git/git/commit/5289bae17f24805cc8507129e21d794b0b56264c,05 Apr 2009,"patch-ids: use the new generic ""sha1_pos"" function to lookup sha1

instead of the specific one from which the new one has been copied.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_2514.diff
https://github.com/git/git/commit/96beef8c2efaab06f703991ed7802b8cef4c00e3,05 Apr 2009,"sha1-lookup: add new ""sha1_pos"" function to efficiently lookup sha1

This function has been copied from the ""patch_pos"" function in
""patch-ids.c"" but an additional parameter has been added.

The new parameter is a function pointer, that is used to access the
sha1 of an element in the table.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/patch_2515.diff
https://github.com/git/git/commit/9996983c9c35353f352ef7c1abd9b3d2fbb21114,30 Mar 2009,"rev-list: move code to show bisect vars into its own function

This is a straightforward clean up to make ""cmd_rev_list"" function
smaller.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2516.diff
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/patch_2517.diff
https://github.com/git/git/commit/c0582c53bcf4e83bba70e1ad23abbad31f96ebc8,30 Mar 2009,"builtin-fast-export.c: fix crash on tagged trees

If a tag object points to a tree (or another unhandled type), the commit-
pointer is left uninitialized and later dereferenced. This patch adds a
default case to the switch that issues a warning and skips the object.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2518.diff
https://github.com/git/git/commit/2d07f6d4b728d19d115b89123224268718f34efd,30 Mar 2009,"builtin-fast-export.c: turn error into warning

fast-import doesn't have a syntax to support tree-objects (and some other
object-types), so fast-export shouldn't handle them. However, aborting the
operation is a bit drastic. This patch turns the error into a warning instead.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2519.diff
https://github.com/git/git/commit/41a5c70f2caf5c22859574f0503afbdb3728a89c,30 Mar 2009,"test-suite: adding a test for fast-export with tag variants

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2520.diff
https://github.com/git/git/commit/5a688fe4706462dfa0a7932ef0c82c335c47e9ab,28 Mar 2009,"""core.sharedrepository = 0mode"" should set, not loosen

This fixes the behaviour of octal notation to how it is defined in the
documentation, while keeping the traditional ""loosen only"" semantics
intact for ""group"" and ""everybody"".

Three main points of this patch are:

 - For an explicit octal notation, the internal shared_repository variable
   is set to a negative value, so that we can tell ""group"" (which is to
   ""OR"" in 0660) and 0660 (which is to ""SET"" to 0660);

 - git-init did not set shared_repository variable early enough to affect
   the initial creation of many files, notably copied templates and the
   configuration.  We set it very early when a command-line option
   specifies a custom value.

 - Many codepaths create files inside $GIT_DIR by various ways that all
   involve mkstemp(), and then call move_temp_to_file() to rename it to
   its final destination.  We can add adjust_shared_perm() call here; for
   the traditional ""loosen-only"", this would be a no-op for many codepaths
   because the mode is already loose enough, but with the new behaviour it
   makes a difference.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_2521.diff
https://github.com/git/git/commit/e8bd78c3fcba35b8344ea6bab6218b793e507ea3,24 Mar 2009,"close_sha1_file(): make it easier to diagnose errors

A bug report with ""unable to write sha1 file"" made us realize that we do
not have enough information to guess why close() is failing.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2522.diff
https://github.com/git/git/commit/cbdffe4093be77bbb1408e54eead7865dd3bc33f,24 Mar 2009,"check_ref_format(): tighten refname rules

This changes the rules for refnames to forbid:

 (1) a refname that contains ""@{"" in it.

     Some people and foreign SCM converter may have named their branches
     as frotz@24 and we still want to keep supporting it.

     However, ""git branch frotz@{24}"" is a disaster.  It cannot even
     checked out because ""git checkout frotz@{24}"" will interpret it as
     ""detach the HEAD at twenty-fourth reflog entry of the frotz branch"".

 (2) a refname that ends with a dot.

     We already reject a path component that begins with a dot, primarily
     to avoid ambiguous range interpretation.  If we allowed "".B"" as a
     valid ref, it is unclear if ""A...B"" means ""in dot-B but not in A"" or
     ""either in A or B but not in both"".

     But for this to be complete, we need also to forbid ""A."" to avoid ""in
     B but not in A-dot"".  This was not a problem in the original range
     notation, but we should have added this restriction when three-dot
     notation was introduced.

     Unlike ""no dot at the beginning of any path component"" rule, this
     rule does not have to be ""no dot at the end of any path component"",
     because you cannot abbreviate the tail end away, similar to you can
     say ""dot-B"" to mean ""refs/heads/dot-B"".

For these reasons, it is not likely people created branches with these
names on purpose, but we have allowed such names to be used for quite some
time, and it is possible that people created such branches by mistake or
by accident.

To help people with branches with such unfortunate names to recover,
we still allow ""branch -d 'bad.'"" to delete such branches, and also allow
""branch -m bad. good"" to rename them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_2523.diff
https://github.com/git/git/commit/edbc25c5b377d6fe768cefcc8614cd254a9fc4ff,24 Mar 2009,"refs: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2524.diff
https://github.com/git/git/commit/5620e77e30b72e674a6bec55fd4bfdac2d5a75fd,24 Mar 2009,"builtin-show-ref: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2525.diff
https://github.com/git/git/commit/33fa4d3dfe71dec05da35e187433101486f4eac2,24 Mar 2009,"builtin-show-branch: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2526.diff
https://github.com/git/git/commit/c36d785da022cb7f7860ed85d78add3f102c4969,24 Mar 2009,"builtin-rm: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2527.diff
https://github.com/git/git/commit/2fd8c0a5dbc614a6a7853558e4af8298acefc96a,24 Mar 2009,"builtin-init-db: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2528.diff
https://github.com/git/git/commit/78509d2197ff18d1de02c27a5406328f75b95306,24 Mar 2009,"builtin-fetch-pack: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2529.diff
https://github.com/git/git/commit/f198e218494800787909af0f3985350c3ecc27b2,24 Mar 2009,"builtin-checkout: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2530.diff
https://github.com/git/git/commit/eca2a8f0236a3b5b2c3afca2643d433a51a205fe,24 Mar 2009,"builtin-apply: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_2531.diff
https://github.com/git/git/commit/d5c87cb4ffc411fc12dbc261af3ed29633e49fba,24 Mar 2009,"http-push: using error() and warning() as appropriate

Change three occurences of using inconsistent error/warning reporting by
using the relevant error() / warning() calls to be consitent with the
rest of the code.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2532.diff
https://github.com/git/git/commit/a2fab531bbb00ff64335906e22854365be2eb5c7,23 Mar 2009,"strbuf_check_branch_ref(): a helper to check a refname for a branch

This allows a common calling sequence

	strbuf_branchname(&ref, name);
	strbuf_splice(&ref, 0, 0, ""refs/heads/"", 11);
	if (check_ref_format(ref.buf))
		die(...);

to be refactored into

	if (strbuf_check_branch_ref(&ref, name))
		die(...);

Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2533.diff
https://github.com/git/git/commit/03d3aada5a2a68a7acdb6286fd72155f01626e41,23 Mar 2009,"Fix branch -m @{-1} newname

The command is supposed to rename the branch we were on before switched
from to a new name, but was not aware of the short-hand notation we added
recently.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2534.diff
https://github.com/git/git/commit/a31dca0393fefae894b7a155ae24000107bcc383,23 Mar 2009,"check-ref-format --branch: give Porcelain a way to grok branch shorthand

The command may not be the best place to add this new feature, but

    $ git check-ref-format --branch ""@{-1}""

allows Porcelains to figure out what branch you were on before the last
branch switching.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2535.diff
https://github.com/git/git/commit/cd2ef591c8e753fe5295ac3c6f1dee481f00a185,23 Mar 2009,"format-patch: pass a commit to reopen_stdout()

We use the commit to generate the patch filename in reopen_stdout()
before we redirect stdout. The cover letter codepath creates a dummy
commit with the desired subject line 'cover letter'.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_2536.diff
https://github.com/git/git/commit/26284f9356f4c4d8865db8bb024121311a1f90ff,23 Mar 2009,"Improve error message about fetch into current branch

Otherwise, it is hard to guess why the fetch failed.
Make sure we at least mention that the repository must be bare.
Also the current branch is printed.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2537.diff
https://github.com/git/git/commit/c511549e0c6848f00bd19f152b8ab42261ff5d0c,22 Mar 2009,"Sync with maint

Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_2538.diff
https://github.com/git/git/commit/b60df87a6b39b3e9fc2fe81585a8bc55a502dcd3,22 Mar 2009,"format-patch: --numbered-files and --stdout aren't mutually exclusive

For example:

    git format-patch --numbered-files --stdout --attach HEAD~~

will create two messages with files 1 and 2 attached respectively.
Without --attach/--inline but with --stdout, --numbered-files option
can be simply ignored, because we are not creating any file ourselves.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2539.diff
https://github.com/git/git/commit/76aac715465b7678ca5b834ccbdcb88a3ab8a9f4,22 Mar 2009,"git-branch: display ""was sha1"" on branch deletion rather than just ""sha1""

Make it more pleasant to read about a branch deletion by adding ""was"".
Jeff King suggested this, and I ignored it.  He was right.

Update t3200 test again to match the change in output.

Signed-off-by: Brandon Casey <drafnel@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2540.diff
https://github.com/git/git/commit/e392a852364e375e916c1dd4f87a7584b348410a,20 Mar 2009,"Produce a nicer output in case of sha1_object_info failures in ls-tree -l

An error message is already printed by sha1_object_info itself, and
the failed entries are additionally marked in the listing.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2541.diff
https://github.com/git/git/commit/cd4371208a0e9f882f6fd4b4dd28d6911848ec79,20 Mar 2009,"make oneline reflog dates more consistent with multiline format

The multiline reflog format (e.g., as shown by ""git log -g"")
will show HEAD@{<date>} rather than HEAD@{<count>} in two
situations:

  1. If the user gave branch@{<date>} syntax to specify the
     reflog

  2. If the user gave a --date=<format> specifier

It uses the ""normal"" date format in case 1, and the
user-specified format in case 2.

The oneline reflog format (e.g., ""git reflog show"" or ""git
log -g --oneline"") will show the date in the same two
circumstances. However, it _always_ shows the date as a
relative date, and it always ignores the timezone.

In case 2, it seems ridiculous to trigger the date but use a
format totally different from what the user requested.

For case 1, it is arguable that the user might want to see
the relative date by default; however, the multiline version
shows the normal format.

This patch does three things:

  - refactors the ""relative_date"" parameter to
    show_reflog_message to be an actual date_mode enum,
    since this is how it is used (it is passed to show_date)

  - uses the passed date_mode parameter in the oneline
    format (making it consistent with the multiline format)

  - does not ignore the timezone parameter in oneline mode

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_2542.diff
https://github.com/git/git/commit/7b5201a60d8f00e7026a3fc4cfdd7852caa9882f,19 Mar 2009,"Do not name ""repo"" struct ""remote"" in push_http.c

This patch is a first step in getting http-push to use http authentication
via prompts.  The patch renames remote to repo so that it doesn't get
confusing with the same remote that is passed around when using http.

Signed-off-by: Amos King <amos.l.king@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/patch_2543.diff
https://github.com/git/git/commit/b130a72b274441bb5d687de93efef4d990c40c0a,19 Mar 2009,"MinGW: implement mmap

Add USE_WIN32_MMAP which triggers the use of windows' native
file memory mapping functionality in git_mmap()/git_munmap() functions.

As git functions currently use mmap with MAP_PRIVATE set only, this
implementation supports only that mode for now.

On Windows, offsets for memory mapped files need to match the allocation
granularity. Take this into account when calculating the packed git-
windowsize and file offsets. At the moment, the only function which makes
use of offsets in conjunction with mmap is use_pack() in sha1-file.c.

Git fast-import's code path tries to map a portion of the temporary
packfile that exceeds the current filesize, i.e. offset+length is
greater than the filesize. The NO_MMAP code worked with that since pread()
just reads the file content until EOF and returns gracefully, while
MapViewOfFile() aborts the mapping and returns 'Access Denied'.
Working around that by determining the filesize and adjusting the length
parameter.

Signed-off-by: Janos Laube <janos.dev@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_2544.diff
https://github.com/git/git/commit/ec2956df592338ccd789428e9232fe6b709dc2be,19 Mar 2009,"format-patch: Respect --quiet option

Hide the patch filename output from 'git format-patch' when --quiet
is used.  The man pages suggested that this should have already worked.

Signed-off-by: Nate Case <ncase@xes-inc.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2545.diff
https://github.com/git/git/commit/aa9ea77de4fffd133b3da1d36a19fd0bd11ad368,18 Mar 2009,"blame: read custom grafts given by -S before calling setup_revisions()

setup_revisions() while getting the command line arguments parses the
given commits from the command line, which means their direct parents will
not be rewritten by the custom graft file.

Call read_ancestry() early to work around this issue.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2546.diff
https://github.com/git/git/commit/665d3e8f057b90d7b43d70db75b9ac5506bd204d,17 Mar 2009,"Display warning for default git push with no push.default config

If a git push without any refspecs is attempted, display a warning.
The current default behavior is to push all matching refspecs, which
may come as a surprise to new users, so the warning shows how
push.default can be configured and what the possible values are.

Traditionalists who wish to keep the current behaviour are also told
how to configure this once and never see the warning again.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2547.diff
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/patch_2548.diff
https://github.com/git/git/commit/381b920b8ac1440962f340cba9030e2dc3130c49,17 Mar 2009,"Revert ""lstat_cache(): print a warning if doing ping-pong between cache types""

This reverts commit 7734f04873cfaddd0b148074a633f1f824fd961f.

I guess that the reverted commit, 7734f048, has been in test long
enough, and should now be reverted.  I have not received any info
regarding any debug output of the reverted commit, so lets hope that
the lstat_cache() function do not cause any ping-pong.

Signed-off-by: Kjetil Barvik <barvik@broadpark.no>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2549.diff
https://github.com/git/git/commit/34df8abaf358c83cc1447d0a81bda7848685a1c9,11 Mar 2009,"recv_sideband: Bands #2 and #3 always go to stderr

This removes the last parameter of recv_sideband, by which the callers
told which channel bands #2 and #3 should be written to.

Sayeth Shawn Pearce:

   The definition of the streams in the current sideband protocol
   are rather well defined for the one protocol that uses it,
   fetch-pack/receive-pack:

     stream #1:  pack data
     stream #2:  stderr messages, progress, meant for tty
     stream #3:  abort message, remote is dead, goodbye!

Since both callers of the function passed 2 for the parameter, we hereby
remove it and send bands #2 and #3 to stderr explicitly using fprintf.

This has the nice side-effect that these two streams pass through our
ANSI emulation layer on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2550.diff
https://github.com/git/git/commit/7efaeba2a8006bb52712eb90c6fbc736b9632cab,11 Mar 2009,"rsync transport: allow local paths, and fix tests

Earlier, the rsync tests were disabled by default, as they needed a
running rsyncd daemon.  This was only due to the limitation that our
rsync transport only allowed full URLs of the form

	rsync://<host>/<path>

Relaxing the URLs to allow

	rsync:<path>

permitted the change in the tests to run whenever rsync is available,
without requiring a fully configured and running rsyncd.

While at it, the tests were fixed so that they run in directories with a
space in their name.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_2551.diff
https://github.com/git/git/commit/fa685bdf45cbaa997255cc78a23494b995e9769a,11 Mar 2009,"Give error when no remote is configured

When there's no explicitly-named remote, we use the remote specified
for the current branch, which in turn defaults to ""origin"". But it
this case should require the remote to actually be configured, and not
fall back to the path ""origin"".

Possibly, the config file's ""remote = something"" should require the
something to be a configured remote instead of a bare repository URL,
but we actually test with a bare repository URL.

In fetch, we were giving the sensible error message when coming up
with a URL failed, but this wasn't actually reachable, so move that
error up and use it when appropriate.

In push, we need a new error message, because the old one (formerly
unreachable without a lot of help) used the repo name, which was NULL.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2552.diff
https://github.com/git/git/commit/72f600832f75db626fd9290a21d02d49c92ca9ca,11 Mar 2009,"Improve ""git branch --tracking"" output

An earlier patch always spelled the full name of the ref that we track
(e.g. ""refs/heads/frotz"" instead of just ""frotz"" when we mean the branch
whose name is ""frotz"").  Worse yet, because we now use the true name of
the ref at the original repository when talk about a tracking branch that
copies from a remote, such a full name alone still does not give enough
information.

This reorganizes the verbose codepath to:

 - differentiate ""refs/heads/something"" and everything else; we say that
   the branch tracks ""branch <something>"" if it begins with ""refs/heads/"",
   and otherwise the branch tracks ""ref refs/<someother>/<something>"";

 - report the name of the remote when we talk about a tracking branch, by
   saying ""branch frotz from origin"";

 - not say ""by merging"" at the end; it is the default and is not worth
   reporting.

Signed-off-by: Junio C Hamano <junio@pobox.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2553.diff
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/patch_2554.diff
https://github.com/git/git/commit/0d260f9a09a2febeb86fdada7224d271a76d2e3c,09 Mar 2009,"parseopt: prevent KEEP_UNKNOWN and STOP_AT_NON_OPTION from being used together

As suggested by Junio, disallow the flags PARSE_OPT_KEEP_UNKNOWN and
PARSE_OPT_STOP_AT_NON_OPTION to be turned on at the same time, as a
value of an unknown option could be mistakenly classified as a
non-option, stopping the parser early.  E.g.:

	git cmd --known --unknown value arg0 arg1

The parser should have stopped at ""arg0"", but it already stops at
""value"".

This patch makes parse_options() die if the two flags are used in
combination.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2555.diff
https://github.com/git/git/commit/52e7787609d18af76a8c1befb0a06123fb7ce89e,08 Mar 2009,"archive: use parseopt for local-only options

Replace the hand-rolled parsers that find and remove --remote and --exec
by a parseopt parser that also handles --output.

All three options only have a meaning if no remote server is used or on
the local side.  They must be rejected by upload-archive and should not
be sent to the server by archive.

We can't use a single parser for both remote and local side because the
remote end possibly understands a different set of options than the
local side.  A local parser would then wrongly accuse options valid on
the other side as being incorrect.

This patch implements a very forgiving parser that understands only the
three options mentioned above.  All others are passed to the normal,
complete parser in archive.c (running either locally in archive, or
remotely in upload-archive).  This normal parser definition contains
dummy entries for the three options, in order for them to appear in the
help screen.

The parseopt parser allows multiple occurrences of --remote and --exec
unlike the previous one; the one specified last wins.  This looseness
is acceptable, I think.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/patch_2556.diff
https://github.com/git/git/commit/5ad6b0252b4fff02ac8516b2ea5e3e7330dcc76f,08 Mar 2009,"Adjust js/remote-improvements and db/refspec-wildcard-in-the-middle

The latter topic changes the definition of how refspec's src and dst side
is stored in-core; it used to be that the asterisk for pattern was
omitted, but now it is included.  The former topic handcrafts an old style
refspec to feed the refspec matching machinery that lacks the asterisk and
triggers an error.

This resolves the semantic clash between the two topics early before they
need to be merged to integration branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1142,data/crawl/git/patch_2557.diff
https://github.com/git/git/commit/08fbdb30438fd7087c5abe15840a22fe21094515,07 Mar 2009,"Keep '*' in pattern refspecs

In order to do anything more capable with refspecs, the first step is
to keep the entire input. Additionally, validate patterns by checking
for the ref matching the rules for a pattern as given by
check_ref_format(). This requires a slight change to
check_ref_format() to make it enforce the requirement that the '*'
immediately follow a '/'.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_2558.diff
https://github.com/git/git/commit/e928213fb40c106650dca2632b5e830cfaffb86a,07 Mar 2009,"Use the matching function to generate the match results

This puts all of the interpretation of the pattern representation in a
single function for easy manipulation.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2559.diff
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_2560.diff
https://github.com/git/git/commit/003f69b282f9cc54da771e1b3e9378aa3f5178cd,07 Mar 2009,"t1300: use test_must_fail as appropriate

Some of the tests checked the exit code manually, even going
so far as to run git outside of the test_expect harness.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2561.diff
https://github.com/git/git/commit/05ac6b34e2c2adda5cb85dd0bdacb47fe5db953e,05 Mar 2009,"improve missing repository error message

Certain remote commands, when asked to do something in a
particular directory that was not actually a git repository,
would say ""unable to chdir or not a git archive"". The
""chdir"" bit is an unnecessary detail, and the term ""git
archive"" is much less common these days than ""git repository"".

So let's switch them all to:

  fatal: '%s' does not appear to be a git repository

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2562.diff
https://github.com/git/git/commit/bdfd739dac4c109ce360d38d0572d8717a46e795,05 Mar 2009,"Make the 'lock file' exists error more informative

It looks like someone did 90% of the work, then forgot to actually use
the function in one place.

Also the helper function did not use the correct variable.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2563.diff
https://github.com/git/git/commit/aec0c1bbfb2d42659bb710bd79f8228ac59e1b0c,04 Mar 2009,"git-archive: add --output=<file> to send output to a file

When archiving a repository there is no way to specify a file as output.
This patch adds a new option ""--output"" that redirects the output to a
file instead of stdout.

Signed-off-by: Carlos Manuel Duclos Vergara <carlos.duclos@nokia.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2564.diff
https://github.com/git/git/commit/50dffd4ed577ea50b540bad53950ef2b703b5be8,04 Mar 2009,"Google has renamed the imap folder

Also add a comment that the web interface wraps the lines

Signed-off-by: John Tapsell <johnflux@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2565.diff
https://github.com/git/git/commit/e752f4bba24afe964eb42d6c2b8bf06cc77c9ce4,04 Mar 2009,"Fix neglect of diff_setup()/diff_setup_done() symmetry.

Code that calls diff_setup(), including via init_revisions(), should later call
diff_setup_done(), possibly via setup_revisions(). Failure to do so could cause
errors, especially in the future when we add responsibilities to
diff_setup_done(). This instance causes no known errors with the present code.
But it resulted in an error with an experimental patch.

Signed-off-by: Keith Cascio <keith@cs.ucla.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2566.diff
https://github.com/git/git/commit/a9f2c13685ae9040d52d53cd719a18040f1dd123,04 Mar 2009,"Make git-clone respect branch.autosetuprebase

When git-clone creates an initial branch it was not checking the
branch.autosetuprebase configuration option (which may exist in
~/.gitconfig).  Refactor the code used by ""git branch"" to create
a new branch, and use it instead of the insufficiently duplicated code
in builtin-clone.

Changes are partly, and the test is mostly, based on the previous work by
Pat Notz.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_2567.diff
https://github.com/git/git/commit/03a9683d22eca52bc2b2b9b09258a143e76416f6,28 Feb 2009,"Simplify is_kept_pack()

This removes --unpacked=<packfile> parameter from the revision parser, and
rewrites its use in git-repack to pass a single --kept-pack-only option
instead.

The new --kept-pack-only option means just that.  When this option is
given, is_kept_pack() that used to say ""not on the --unpacked=<packfile>
list"" now says ""the packfile has corresponding .keep file"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_2568.diff
https://github.com/git/git/commit/e5dcbfd9ab7028c464909f26f523b85c1de912a2,27 Feb 2009,"builtin-remote: new show output style for push refspecs

The existing output of ""git remote show <remote>"" with respect to push
ref specs is basically just to show the raw refspec. This patch teaches
the command to interpret the refspecs and show how each branch will be
pushed to the destination. The output gives the user an idea of what
""git push"" should do if it is run w/o any arguments.

Example new output:

1a. Typical output with no push refspec (i.e. matching branches only)

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master pushes to master (up to date)
    next   pushes to next   (local out of date)

1b. Same as above, w/o querying the remote:

$ git remote show origin -n
* remote origin
  [...]
  Local ref configured for 'git push' (status not queried):
    (matching) pushes to (matching)

2a. With a forcing refspec (+), and a new topic
    (something like push = refs/heads/*:refs/heads/*):

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master     pushes to master    (fast forwardable)
    new-topic  pushes to new-topic (create)
    next       pushes to next      (local out of date)
    pu         forces to pu        (up to date)

2b. Same as above, w/o querying the remote

$ git remote show origin -n
* remote origin
  [...]
  Local refs configured for 'git push' (status not queried):
    master     pushes to master
    new-topic  pushes to new-topic
    next       pushes to next
    pu         forces to pu

3. With a remote configured as a mirror:

* remote backup
  [...]
  Local refs will be mirrored by 'git push'

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/patch_2569.diff
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/patch_2570.diff
https://github.com/git/git/commit/fbb074c25352627f650d2ea528ed694e77bece0f,27 Feb 2009,"remote: make guess_remote_head() use exact HEAD lookup if it is available

Our usual method for determining the ref pointed to by HEAD
is to compare HEAD's sha1 to the sha1 of all refs, trying to
find a unique match.

However, some transports actually get to look at HEAD
directly; we should make use of that information when it is
available.  Currently, only http remotes support this
feature.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2571.diff
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_2572.diff
https://github.com/git/git/commit/e61e0cc6b7061d7e791e1c9722b9c4a6d85d629c,27 Feb 2009,"builtin-remote: teach show to display remote HEAD

This is in preparation for teaching remote how to set
refs/remotes/<remote>/HEAD to match what HEAD is set to at <remote>, but
is useful in its own right.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_2573.diff
https://github.com/git/git/commit/6e180cdcecbb3e828aa892925d7ef67abf81ad80,25 Feb 2009,"Make sure objects/pack exists before creating a new pack

In a repository created with git older than f49fb35 (git-init-db: create
""pack"" subdirectory under objects, 2005-06-27), objects/pack/ directory is
not created upon initialization.  It was Ok because subdirectories are
created as needed inside directories init-db creates, and back then,
packfiles were recent invention.

After the said commit, new codepaths started relying on the presense of
objects/pack/ directory in the repository.  This was exacerbated with
8b4eb6b (Do not perform cross-directory renames when creating packs,
2008-09-22) that moved the location temporary pack files are created from
objects/ directory to objects/pack/ directory, because moving temporary to
the final location was done carefully with lazy leading directory creation.

Many packfile related operations in such an old repository can fail
mysteriously because of this.

This commit introduces two helper functions to make things work better.

 - odb_mkstemp() is a specialized version of mkstemp() to refactor the
   code and teach it to create leading directories as needed;

 - odb_pack_keep() refactors the code to create a "".keep"" file while
   create leading directories as needed.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_2574.diff
https://github.com/git/git/commit/a8fdab08e09bf73cbc3159930af41cf3233be853,25 Feb 2009,"trace: Fixed a minor typo in an error message.

Signed-off-by: Allan Caffee <allan.caffee@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2575.diff
https://github.com/git/git/commit/c23873589483eb5dc753190309af8c5821169118,22 Feb 2009,"git config: don't allow --get-color* and variable type

Doing so would be incoherent since --get-color would pick a color slot
and ignore the variable type option (e.g. --bool), and the type would
require a variable name.

Suggested by Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2576.diff
https://github.com/git/git/commit/16c1e939856f6ced97c60beb64936d564d198be3,22 Feb 2009,"git config: don't allow multiple variable types

Only --bool, --int, or --bool-or-int can be used, but not any
combination of them.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_2577.diff
https://github.com/git/git/commit/67052c9dcfb3ab46b18e734ea4a9117eb61fea4e,22 Feb 2009,"git config: don't allow multiple config file locations

Either --global, --system, or --file can be used, but not any
combination.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2578.diff
https://github.com/git/git/commit/d64ec16c2af4ddcf3985d11d5dc28a15db181de5,22 Feb 2009,"git config: reorganize to use parseopt

This patch has benefited from comments by Johannes
Schindelin and Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",349,data/crawl/git/patch_2579.diff
https://github.com/git/git/commit/b408457f2e167aaf8e7a087b374357f4a74e9680,22 Feb 2009,"git config: trivial rename in preparation for parseopt

Essentially this replaces 'file' with 'prefix' in the cases where the
variable is used as a prefix, which is consistent with other git
commands.

When using the --list option general errors where not properly reported,
only errors related with the 'file'. Now they are reported, and 'file'
is irrelevant.

That reduces the rest of 'file' usage to nothing, therefore now only
'prefix' remains.

Suggested by Johannes Schindelin.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_2580.diff
https://github.com/git/git/commit/b079c50e03a812f5c8197b8f38e0a5fe6dd31321,22 Feb 2009,"format-patch: track several references

Currently, format-patch can only track a single reference (the
In-Reply-To:) for each mail.  To ensure proper threading, we should
list all known references for every mail.

Change the rev_info.ref_message_id field to a string_list, so that we
can append references at will, and change the output formatting
routines to print all of them in the References: header.  The last
entry in the list is implicitly assumed to be the In-Reply-To:, which
gives output consistent with RFC 2822:

   The ""References:"" field will contain the contents of the parent's
   ""References:"" field (if any) followed by the contents of the
   parent's ""Message-ID:"" field (if any).

Note that this is just preparatory work; nothing uses it yet, so all
""References:"" fields in the output are still only one deep.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2581.diff
https://github.com/git/git/commit/b26d8d217d8d960cbd9ed1dbf6b3cccfd1a3a4db,20 Feb 2009,"Test git-patch-id

So far, git-patch-id was untested.  Add some simple checks for output
format and patch (in)equality.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2582.diff
https://github.com/git/git/commit/e43a6fd3e94888d76779ad79fb568ed180e5fcdf,20 Feb 2009,"More friendly message when locking the index fails.

Just saying that index.lock exists doesn't tell the user _what_ to do
to fix the problem. We should give an indication that it's normally
safe to delete index.lock after making sure git isn't running here.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2583.diff
https://github.com/git/git/commit/4fcc86b07db26da17f17af0fd777cab78fcaaf4c,20 Feb 2009,"Introduce the function strip_path_suffix()

The function strip_path_suffix() will try to strip a given suffix from
a given path.  The suffix must start at a directory boundary (i.e. ""core""
is not a path suffix of ""libexec/git-core"", but ""git-core"" is).

Arbitrary runs of directory separators (""slashes"") are assumed identical.

Example:

	strip_path_suffix(""C:\\msysgit/\\libexec\\git-core"",
		""libexec///git-core"", &prefix)

will set prefix to ""C:\\msysgit"" and return 0.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Acked-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2584.diff
https://github.com/git/git/commit/ce8e8804068772a24354ee24641ca65ffa417837,18 Feb 2009,"parse-opt: migrate builtin-ls-files.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",255,data/crawl/git/patch_2585.diff
https://github.com/git/git/commit/88a667f0630e8b9c7679127d3b9364447727e587,15 Feb 2009,"builtin-receive-pack.c: fix compiler warnings about format string

While all of the strings passed to warning() are, in fact, literals, the
compiler doesn't recognize them as such because it doesn't see through
the loop used to iterate over them:

   builtin-receive-pack.c: In function 'warn_unconfigured_deny':
   builtin-receive-pack.c:247: warning: format not a string literal and no format arguments
   builtin-receive-pack.c: In function 'warn_unconfigured_deny_delete_current':
   builtin-receive-pack.c:273: warning: format not a string literal and no format arguments

Calm the compiler by adding easily recognizable format string literals.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2586.diff
https://github.com/git/git/commit/3531e2703d8e441bfb4a6765459317b3db3f224c,15 Feb 2009,"send-email: --suppress-cc improvements

Since 6564828 (git-send-email: Generalize auto-cc recipient
mechanism., 2007-12-25) we can suppress automatic Cc generation
separately for each of the possible address sources.  However,
--suppress-cc=sob suppressed both SOB lines and body (but not header)
Cc lines, contrary to the name.

Change --suppress-cc=sob to mean only SOB lines, and add separate
choices 'bodycc' (body Cc lines) and 'body' (both 'sob' and 'bodycc').
The option --no-signed-off-by-cc now acts like --suppress-cc=sob,
which is not backwards compatible but matches the name of the option.

Also update the documentation and add a few tests.

Original patch by me. Revised by Thomas Rast, who contributed the
documentation and test updates.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",205,data/crawl/git/patch_2587.diff
https://github.com/git/git/commit/5012699d9840fe34fe0838ea0d529c2f32f76b82,15 Feb 2009,"send-email: handle multiple Cc addresses when reading mbox message

When git format-patch is given multiple --cc arguments, it generates a
Cc header that looks like:

 Cc: first@example.com,
     second@example.com,
     third@example.com

Before this commit, send-email was unable to handle such a message as it
did not handle folded header lines, nor multiple recipients in a Cc
line.

This patch:

- Unfolds header lines by pre-processing the header before extracting
  any of its fields.

- Handles Cc lines with multiple recipients.

- Adds use of Mail::Address if available for splitting Cc line and
  the ""Who should the emails be sent to?"" prompt"", with fall back to
  existing split_addrs() function.

- Tests the new functionality and adds two tests for detecting whether
  ""From:"" appears correctly in message body when patch author differs
  from patch sender.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",197,data/crawl/git/patch_2588.diff
https://github.com/git/git/commit/58e9d9d472ff4dbc6cfbf7459878778c739395eb,15 Feb 2009,"gc: make --prune useful again by accepting an optional parameter

With this patch, ""git gc --no-prune"" will not prune any loose (and
dangling) object, and ""git gc --prune=5.minutes.ago"" will prune
all loose objects older than 5 minutes.

This patch benefitted from suggestions by Thomas Rast and Jan Krï¿œger.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_2589.diff
https://github.com/git/git/commit/8415d5c7ef63237f6efab0c9aef0b0fdbcbfda25,14 Feb 2009,"Teach the ""@{-1} syntax to ""git branch""

This teaches the new ""@{-1} syntax to refer to the previous branch to ""git
branch"".  After looking at somebody's faulty patch series on a topic
branch too long, if you decide it is not worth merging, you can just say:

    $ git checkout master
    $ git branch -D @{-1}

to get rid of it without having to type the name of the topic you now hate
so much for wasting a lot of your time.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_2590.diff
https://github.com/git/git/commit/e9cc02f0e41fd5d2f51e3c3f2b4f8cfa9e434432,14 Feb 2009,"symbolic-ref: allow refs/<whatever> in HEAD

Commit afe5d3d5 introduced a safety valve to symbolic-ref to
disallow installing an invalid HEAD. It was accompanied by
b229d18a, which changed validate_headref to require that
HEAD contain a pointer to refs/heads/ instead of just refs/.
Therefore, the safety valve also checked for refs/heads/.

As it turns out, topgit is using refs/top-bases/ in HEAD,
leading us to re-loosen (at least temporarily) the
validate_headref check made in b229d18a. This patch does the
corresponding loosening for the symbolic-ref safety valve,
so that the two are in agreement once more.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2591.diff
https://github.com/git/git/commit/dc6ebd4cc5028d59146e02e30f7945ee91974e6e,14 Feb 2009,"Clean up use of ANSI color sequences

Remove the literal ANSI escape sequences and replace them by readable
constants.

Signed-off-by: Arjen Laarhoven <arjen@yaph.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_2592.diff
https://github.com/git/git/commit/7fcda9201e192413c2e63fe35ce6664dbc81705d,14 Feb 2009,"log: do not print ellipses with --abbrev-commit

'git log --abbrev-commit' added an ellipsis to all commit names that
were abbreviated.  This was particularly annoying if you wanted to
cut&paste the sha1 from the terminal, since selecting by word would
pick up '...'  too.

So use find_unique_abbrev() instead of diff_unique_abbrev() in all
log-related commit sha1 printing routines, and also change the
formatting of the 'Merge: parent1 parent2' line output via
pretty_print_commit().

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2593.diff
https://github.com/git/git/commit/209d336ae3923f2c1783a42b12fca50f3bee0802,14 Feb 2009,"builtin-branch: improve output when displaying remote branches

When encountering a symref (typically refs/remotes/<remote>/HEAD),
display the ref target.

When displaying local and remote branches, prefix the remote branch
names with ""remotes/"" to make the remote branches clear from the local
branches. If displaying only the remote branches, the prefix is not
shown since it would be redundant.

Sample output:

$ git branch
  foo -> master
* master
  rather-long-branch-name

$ git branch -v
  foo                     -> master
* master                  51cecb2 initial
  rather-long-branch-name 51cecb2 initial

$ git branch -v --no-abbrev
  foo                     -> master
* master                  51cecb2dbb1a1902bb4df79b543c8f951ee59d83 initial
  rather-long-branch-name 51cecb2dbb1a1902bb4df79b543c8f951ee59d83 initial

$ git branch -r
  frotz/HEAD -> frotz/master
  frotz/master
  origin/HEAD -> origin/master
  origin/UNUSUAL -> refs/heads/master
  origin/master

$ git branch -a
  foo -> master
* master
  rather-long-branch-name
  remotes/frotz/HEAD -> frotz/master
  remotes/frotz/master
  remotes/origin/HEAD -> origin/master
  remotes/origin/UNUSUAL -> refs/heads/master
  remotes/origin/master

$ git branch -rv
  frotz/HEAD     -> frotz/master
  frotz/master   e1d8130 added file2
  origin/HEAD    -> origin/master
  origin/UNUSUAL -> refs/heads/master
  origin/master  e1d8130 added file2

$ git branch -av
  foo                     -> master
* master                  51cecb2 initial
  rather-long-branch-name 51cecb2 initial
  remotes/frotz/HEAD      -> frotz/master
  remotes/frotz/master    e1d8130 added file2
  remotes/origin/HEAD     -> origin/master
  remotes/origin/UNUSUAL  -> refs/heads/master
  remotes/origin/master   e1d8130 added file2

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_2594.diff
https://github.com/git/git/commit/ed62089c1c32a9bfca2ec61d331a70443647344c,11 Feb 2009,"revision traversal and pack: notice and die on missing commit

cc0e6c5 (Handle return code of parse_commit in revision machinery,
2007-05-04) attempted to tighten error checking in the revision machinery,
but it wasn't enough.  When get_revision_1() was asked for the next commit
to return, it tries to read and simplify the parents of the commit to be
returned, but an error while doing so was silently ignored and reported as
a truncated history to the caller instead.

This resulted in an early end of ""git log"" output or a pack that lacks
older commits from ""git pack-objects"", without any error indication in the
exit status from these commands, even though the underlying parse_commit()
issues an error message to the end user.

Note that the codepath in add_parents_list() that paints parents of an
UNINTERESTING commit UNINTERESTING silently ignores the error when
parse_commit() fails; this is deliberate and in line with aeeae1b
(revision traversal: allow UNINTERESTING objects to be missing,
2009-01-27).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2595.diff
https://github.com/git/git/commit/747ca2455a8dd4e255358f5f96773f84259408c3,11 Feb 2009,"receive-pack: receive.denyDeleteCurrent

This is a companion patch to the recent 3d95d92 (receive-pack: explain
what to do when push updates the current branch, 2009-01-31).

Deleting the current branch from a remote will result in the next clone
from it not check out anything, among other things.  It also is one of the
cause that makes remotes/origin/HEAD a dangling symbolic ref.  This patch
still allows the traditional behaviour but with a big warning, and promises
that the default will change to 'refuse' in a future release.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_2596.diff
https://github.com/git/git/commit/057e71384a0eff83236268dcd3ff7ebc7789de74,11 Feb 2009,"Warn use of ""origin"" when remotes/origin/HEAD is dangling

The previous one squelched the diagnositic message we used to issue every
time we enumerated the refs and noticed a dangling ref.  This adds the
warning back to the place where the user actually attempts to use it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2597.diff
https://github.com/git/git/commit/f8948e2fbc7fbd63e81006408965e3e89380bfaa,11 Feb 2009,"remote prune: warn dangling symrefs

If you prune from the remote ""frotz"" that deleted the ref your tracking
branch remotes/frotz/HEAD points at, the symbolic ref will become
dangling.  We used to detect this as an error condition and issued a
message every time refs are enumerated.

This stops the error message, but moves the warning to ""remote prune"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_2598.diff
https://github.com/git/git/commit/954cfb5cfd17d57b9b31b19b73efe73199407e07,11 Feb 2009,"Revert ""Merge branch 'js/notes'""

This reverts commit 7b75b331f6744fbf953fe8913703378ef86a2189, reversing
changes made to 5d680a67d7909c89af96eba4a2d77abed606292b.",506,data/crawl/git/patch_2599.diff
https://github.com/git/git/commit/7734f04873cfaddd0b148074a633f1f824fd961f,10 Feb 2009,"lstat_cache(): print a warning if doing ping-pong between cache types

This is a debug patch which is only to be used while the lstat_cache()
is in the test stage, and should be removed/reverted before the final
relase.

I think it should be useful to catch these warnings, as I it could be
an indication of that the cache would not be very effective if it is
doing ping-pong by switching between different cache types too many
times.

Also, if someone is experimenting with the lstat_cache(), this patch
will maybe be useful while debugging.

If someone is able to trigger the warning, then send a mail to the GIT
mailing list, containing the first 15 lines of the warning, and a
short description of the GIT commands to trigger the warnings.

I hope someone is willing to use this patch for a while, to be able to
catch possible ping-pong's.

Signed-off-by: Kjetil Barvik <barvik@broadpark.no>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2600.diff
https://github.com/git/git/commit/4857c761e35b07c12ff2ef1140e93b071b8ac4e7,10 Feb 2009,"write_entry(): cleanup of some duplicated code

The switch-cases for S_IFREG and S_IFLNK was so similar that it will
be better to do some cleanup and use the common parts of it.

And the entry.c file should now be clean for 'gcc -Wextra' warnings.

Signed-off-by: Kjetil Barvik <barvik@broadpark.no>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2601.diff
https://github.com/git/git/commit/d20d654fe8923a502527547b17fe284d15d6aec9,08 Feb 2009,"Change current mailmap usage to do matching on both name and email of author/committer.

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",237,data/crawl/git/patch_2602.diff
https://github.com/git/git/commit/0925ce4d49ef8352617e8f56231bd36802a2f138,08 Feb 2009,"Add map_user() and clear_mailmap() to mailmap

map_user() allows to lookup and replace both email and
name of a user, based on a new style mailmap file.

The possible mailmap definitions are now:

  proper_name <commit_email>                             # Old style
  <proper_email> <commit_email>                          # New style
  proper_name <proper_email> <commit_email>              # New style
  proper_name <proper_email> commit_name <commit_email>  # New style

map_email() operates the same as before, with the
exception that it also will to try to match on a name
passed in through the name return buffer.

clear_mailmap() is needed to now clear the more complex
mailmap structure.

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",287,data/crawl/git/patch_2603.diff
https://github.com/git/git/commit/2cd85c40a9f396bb24f7861c832acd52e61c4780,07 Feb 2009,"Make test-path-utils more robust against incorrect use

Previously, this test utility happily returned with exit code 0 if garbage
was thrown at it. Now it reports failure if an unknown function name was
given on the command line.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2604.diff
https://github.com/git/git/commit/d3bee161fef7820e83b44b899c531228a5546e87,07 Feb 2009,"tree.c: allow read_tree_recursive() to traverse gitlink entries

When the callback function invoked from read_tree_recursive() returns
the value `READ_TREE_RECURSIVE` for a gitlink entry, the traversal will
now continue into the tree connected to the gitlinked commit. This
functionality can be used to allow inter-repository operations, but
since the current users of read_tree_recursive() does not yet support
such operations, they have been modified where necessary to make sure
that they never return READ_TREE_RECURSIVE for gitlink entries (hence
no change in behaviour should be introduces by this patch alone).

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_2605.diff
https://github.com/git/git/commit/7851386948dce72c739bcdfe08f069afe4f5ea45,07 Feb 2009,"emacs: Remove the no longer maintained vc-git package.

vc-git is distributed with Emacs since version 22.2, and is maintained
in the Emacs CVS tree. This file is obsolete and causes trouble for
people who want to add contrib/emacs to their load-path.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>",218,data/crawl/git/patch_2606.diff
https://github.com/git/git/commit/a7da5c425970372f75d7cc2c194d5646554f8a32,07 Feb 2009,"git.el: Make git-run-command-region display the error if any.

This makes it easier to figure out why a commit has failed.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>",38,data/crawl/git/patch_2607.diff
https://github.com/git/git/commit/ffaf9cc0ff0692a0b60cdf1b62e8375706b7865d,05 Feb 2009,"builtin-blame.c: Use utf8_strwidth for author's names

git blame misaligns output if a author's name has a differing display width and
strlen; for instance, an accented Latin letter that takes two bytes to encode
will cause the rest of the line to be shifted to the left by one. To fix this,
use utf8_strwidth instead of strlen (and compute the padding ourselves, since
printf doesn't know about UTF-8).

Signed-off-by: Geoffrey Thomas <geofft@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2608.diff
https://github.com/git/git/commit/441adf0ccf571a9fe15658fdfcd856d2aabc01cb,04 Feb 2009,"builtin-remote: make rm operation safer in mirrored repository

""git remote rm <repo>"" happily removes non-remote refs and their reflogs.
This may be okay if the repository truely is a mirror, but if the user
had done ""git remote add --mirror <repo>"" by accident and was just
undoing their mistake, then they are left in a situation that is
difficult to recover from.

After this commit, ""git remote rm"" skips over non-remote refs. The user
is advised on how remove branches using ""git branch -d"", which itself
has nice safety checks wrt to branch removal lacking from ""git remote rm"".
Non-remote non-branch refs are skipped silently.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_2609.diff
https://github.com/git/git/commit/268fac6919ef673094e50e2d944d09f017f5ad33,04 Feb 2009,"Add a script to coalesce the valgrind outputs

After running the valgrind tests with GIT_TEST_TREE=t, the test output
is in the test-results/$TEST.out files.

Call ./valgrind/analyze.sh in $GIT_ROOT/t/ to group the valgrind errors
by backtrace.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/patch_2610.diff
https://github.com/git/git/commit/3d95d92b9a75825b2d9c9bd770d85471b18597f8,03 Feb 2009,"receive-pack: explain what to do when push updates the current branch

This makes ""git push"" issue a more detailed instruction when a user pushes
into the current branch of a non-bare repository without having an
explicit configuration set to receive.denycurrentbranch.  In such a case,
it will also tell the user that the default will change to refusal in a
future version of git.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_2611.diff
https://github.com/git/git/commit/afe5d3d516114f08d3c4289682a704f5a7889909,29 Jan 2009,"symbolic ref: refuse non-ref targets in HEAD

When calling ""git symbolic-ref"" it is easy to forget that
the target must be a fully qualified ref. E.g., you might
accidentally do:

  $ git symbolic-ref HEAD master

Unfortunately, this is very difficult to recover from,
because the bogus contents of HEAD make git believe we are
no longer in a git repository (as is_git_dir explicitly
checks for ""^refs/heads/"" in the HEAD target). So
immediately trying to fix the situation doesn't work:

  $ git symbolic-ref HEAD refs/heads/master
  fatal: Not a git repository

and one is left editing the .git/HEAD file manually.

Furthermore, one might be tempted to use symbolic-ref to set
up a detached HEAD:

  $ git symbolic-ref HEAD `git rev-parse HEAD`

which sets up an even more bogus HEAD:

  $ cat .git/HEAD
  ref: 1a9ace4f2ad4176148e61b5a85cd63d5604aac6d

This patch introduces a small safety valve to prevent the
specific case of anything not starting with refs/heads/ to
go into HEAD. The scope of the safety valve is intentionally
very limited, to make sure that we are not preventing any
behavior that would otherwise be valid (like pointing a
different symref than HEAD outside of refs/heads/).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2612.diff
https://github.com/git/git/commit/d8e96fd86d415554a9c2e09ffb929a9e22fdad25,28 Jan 2009,"git: use run_command() to execute dashed externals

We used to simply try calling execvp(); if it succeeded, then we were done
and the new program was running. If it didn't, then we knew that it wasn't
a valid command.

Unfortunately, this interacted badly with the new pager handling. Now that
git remains the parent process and the pager is spawned, git has to hang
around until the pager is finished. We install an atexit handler to do
this, but that handler never gets called if we successfully run execvp.

You could see this behavior by running any dashed external using a pager
(e.g., ""git -p stash list""). The command finishes running, but the pager
is still going. In the case of less, it then gets an error reading from
the terminal and exits, potentially leaving the terminal in a broken state
(and not showing the output).

This patch just uses run_command() to try running the dashed external. The
parent git process then waits for the external process to complete and
then handles the pager cleanup as it would for an internal command.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2613.diff
https://github.com/git/git/commit/45c0961c87884a04517b65c0acc6aedeeae2d0c8,28 Jan 2009,"run_command(): handle missing command errors more gracefully

When run_command() was asked to run a non-existant command, its behavior
varied depending on the platform:

  - on POSIX systems, we would fork, and then after the execvp call
    failed, we could call die(), which prints a message to stderr and
    exits with code 128.

  - on Windows, we do a PATH lookup, realize the program isn't there, and
    then return ERR_RUN_COMMAND_FORK

The goal of this patch is to make it clear to callers that the specific
error was a missing command. To do this, we will return the error code
ERR_RUN_COMMAND_EXEC, which is already defined in run-command.h, checked
for in several places, but never actually gets set.

The new behavior is:

  - on POSIX systems, we exit the forked process with code 127 (the same
    as the shell uses to report missing commands). The parent process
    recognizes this code and returns an EXEC error. The stderr message is
    silenced, since the caller may be speculatively trying to run a
    command. Instead, we use trace_printf so that somebody interested in
    debugging can see the error that occured.

  - on Windows, we check errno, which is already set correctly by
    mingw_spawnvpe, and report an EXEC error instead of a FORK error

Thus it is safe to speculatively run a command:

  int r = run_command_v_opt(argv, 0);
  if (r == -ERR_RUN_COMMAND_EXEC)
	  /* oops, it wasn't found; try something else */
  else
	  /* we failed for some other reason, error is in r */

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2614.diff
https://github.com/git/git/commit/32c35cfb1e9c8523b9d60e5095f1c49ebaef0279,28 Jan 2009,"git-tag: Add --contains option

This functions similarly to ""git branch --contains""; it will show all
tags that contain the specified commit, by sharing the same logic.

The patch also adds documentation and tests for the new option.

Signed-off-by: Jake Goulding <goulding@vivisimo.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/patch_2615.diff
https://github.com/git/git/commit/269defdf30a4beb48f230e36f20d00ee40348ab6,28 Jan 2009,"Make opt_parse_with_commit() non-static

Moving opt_parse_with_commit() from branch to a common location, in
preparation for using it in tag. Rename it to match naming convention
of other option parsing functions.

Signed-off-by: Jake Goulding <goulding@vivisimo.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2616.diff
https://github.com/git/git/commit/35fb0e8633217f602360a9987af51c4b960e7850,26 Jan 2009,"Compute prefix at runtime if RUNTIME_PREFIX is set

This commit adds support for relocatable binaries (called
RUNTIME_PREFIX).  Such binaries can be moved together with the
system configuration files to a different directory, as long as the
relative paths from the binary to the configuration files is
preserved.  This functionality is essential on Windows where we
deliver git binaries with an installer that allows to freely choose
the installation location.

If RUNTIME_PREFIX is unset we use the static prefix.  This will be
the default on Unix.  Thus, the behavior on Unix will remain
identical to the old implementation, which used to add the prefix
in the Makefile.

If RUNTIME_PREFIX is set the prefix is computed from the location
of the executable.  In this case, system_path() tries to strip
known directories that executables can be located in from the path
of the executable.  If the path is successfully stripped it is used
as the prefix.  For example, if the executable is
""/msysgit/bin/git"" and BINDIR is ""bin"", then the prefix computed is
""/msysgit"".

If the runtime prefix computation fails, we fall back to the static
prefix specified in the makefile.  This can be the case if the
executable is not installed at a known location.  Note that our
test system sets GIT_CONFIG_NOSYSTEM to tell git to ignore global
configuration files during testing.  Hence testing does not trigger
the fall back.

Note that RUNTIME_PREFIX only works on Windows, though adding
support on Unix should not be too hard.  The implementation
requires argv0_path to be set to an absolute path.  argv0_path must
point to the directory of the executable.  We use assert() to
verify this in debug builds.  On Windows, the wrapper for main()
(see compat/mingw.h) guarantees that argv0_path is correctly
initialized.  On Unix, further work is required before
RUNTIME_PREFIX can be enabled.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Acked-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2617.diff
https://github.com/git/git/commit/86ac751859033741a120e9e4a91133d075d9d898,23 Jan 2009,"Allow cloning an empty repository

Cloning an empty repository manually (that is, doing 'git init' and
then doing all configuration by hand) can be a lot of work. Save the
user this work by allowing the cloning of empty repositories.

Signed-off-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_2618.diff
https://github.com/git/git/commit/4a16d072723b48699ea162da24eff05eba298834,22 Jan 2009,"chain kill signals for cleanup functions

If a piece of code wanted to do some cleanup before exiting
(e.g., cleaning up a lockfile or a tempfile), our usual
strategy was to install a signal handler that did something
like this:

  do_cleanup(); /* actual work */
  signal(signo, SIG_DFL); /* restore previous behavior */
  raise(signo); /* deliver signal, killing ourselves */

For a single handler, this works fine. However, if we want
to clean up two _different_ things, we run into a problem.
The most recently installed handler will run, but when it
removes itself as a handler, it doesn't put back the first
handler.

This patch introduces sigchain, a tiny library for handling
a stack of signal handlers. You sigchain_push each handler,
and use sigchain_pop to restore whoever was before you in
the stack.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/patch_2619.diff
https://github.com/git/git/commit/479b0ae81c9291a8bb8d7b2347cc58eeaa701304,22 Jan 2009,"diff: refactor tempfile cleanup handling

There are two pieces of code that create tempfiles for diff:
run_external_diff and run_textconv. The former cleans up its
tempfiles in the face of premature death (i.e., by die() or
by signal), but the latter does not. After this patch, they
will both use the same cleanup routines.

To make clear what the change is, let me first explain what
happens now:

  - run_external_diff uses a static global array of 2
    diff_tempfile structs (since it knows it will always
    need exactly 2 tempfiles). It calls prepare_temp_file
    (which doesn't know anything about the global array) on
    each of the structs, creating the tempfiles that need to
    be cleaned up. It then registers atexit and signal
    handlers to look through the global array and remove the
    tempfiles. If it succeeds, it calls the handler manually
    (which marks the tempfile structs as unused).

  - textconv has its own tempfile struct, which it allocates
    using prepare_temp_file and cleans up manually. No
    signal or atexit handlers.

The new code moves the installation of cleanup handlers into
the prepare_temp_file function. Which means that that
function now has to understand that there is static tempfile
storage. So what happens now is:

  - run_external_diff calls prepare_temp_file
  - prepare_temp_file calls claim_diff_tempfile, which
    allocates an unused slot from our global array
  - prepare_temp_file installs (if they have not already
    been installed) atexit and signal handlers for cleanup
  - prepare_temp_file sets up the tempfile as usual
  - prepare_temp_file returns a pointer to the allocated
    tempfile

The advantage being that run_external_diff no longer has to
care about setting up cleanup handlers. Now by virtue of
calling prepare_temp_file, run_textconv gets the same
benefit, as will any future users of prepare_temp_file.

There are also a few side benefits to the specific
implementation:

  - we now install cleanup handlers _before_ allocating the
    tempfile, closing a race which could leave temp cruft

  - when allocating a slot in the global array, we will now
    detect a situation where the old slots were not properly
    vacated (i.e., somebody forgot to call remove upon
    leaving the function). In the old code, such a situation
    would silently overwrite the tempfile names, meaning we
    would forget to clean them up. The new code dies with a
    bug warning.

  - we make sure only to install the signal handler once.
    This isn't a big deal, since we are just overwriting the
    old handler, but will become an issue when a later patch
    converts the code to use sigchain

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",107,data/crawl/git/patch_2620.diff
https://github.com/git/git/commit/c5ee71fdeda21aef8a65366a3f66aa7cbe58cba0,20 Jan 2009,"commit: more compact summary and without extra quotes

Update the report format again to save the screen real estates, while
avoiding from enclosing the one-line summary of the commit log inside
double quotes pair, which looks awkward when the message begins or ends
with a double quote.  The old format looked like this:

    [master]: created d9a5491: ""foo:bar""

Simply removing the double quotes were found to be confusing as a message
often begins with a short-word (area of the system) and a colon.

The new format looks like this:

    [master d9a5491] foo:bar

As discussed in the git mailing list:

    http://thread.gmane.org/gmane.comp.version-control.git/101687/focus=101735

Signed-off-by: Santi Béjar <santi@agolina.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2621.diff
https://github.com/git/git/commit/2c2dc7c82cea66c5030583233c73593e0f5a8fdb,20 Jan 2009,"Optimize color_parse_mem

Commit 5ef8d77a implemented color_parse_mem, a function for
parsing colors from a non-NUL-terminated string, by simply
allocating a new NUL-terminated string and calling
color_parse. This had a small but measurable speed impact on
a user format that used the advanced color parsing. E.g.,

  # uses quick parsing
  $ time ./git log --pretty=tformat:'%Credfoo%Creset' >/dev/null
  real    0m0.673s
  user    0m0.652s
  sys     0m0.016s

  # uses color_parse_mem
  $ time ./git log --pretty=tformat:'%C(red)foo%C(reset)' >/dev/null
  real    0m0.692s
  user    0m0.660s
  sys     0m0.032s

This patch implements color_parse_mem as the primary
function, with color_parse as a wrapper for strings. This
gives comparable timings to the first case above.

Original patch by René. Commit message and debugging by Jeff
King.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2622.diff
https://github.com/git/git/commit/d18ba22154574390dbff2c060f44b9715477e95a,18 Jan 2009,"sha1_name: support @{-N} syntax in get_sha1()

Let get_sha1() parse the @{-N} syntax, with docs and tests.

Note that while @{-1}^2, @{-2}~5 and such are supported, @{-1}@{1} is
currently not allowed.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/patch_2623.diff
https://github.com/git/git/commit/b4285c71bcc43c4cc9939b8d170aaf8ddb25f09f,18 Jan 2009,"Add ctype test

Manipulating the character class table in ctype.c by hand is error prone.
To ensure that typos are found quickly, add a test program and script.

test-ctype checks the output of the character class macros isspace() et.
al. by applying them on all possible char values and consulting a list of
all characters in the particular class.  It doesn't check tolower() and
toupper(); this could be added later.

The test script t0070-fundamental.sh is created because there is no good
place for the ctype test, yet -- except for t0000-basic.sh perhaps, but
it doesn't run well on Windows, yet.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_2624.diff
https://github.com/git/git/commit/5ef8d77a752884f3c5fad9f143ce5cc72ff1340c,18 Jan 2009,"color: make it easier for non-config to parse color specs

We have very featureful color-parsing routines which are
used for color.diff.* and other options. Let's make it
easier to use those routines from other parts of the code.

This patch adds a color_parse_mem() helper function which
takes a length-bounded string instead of a NUL-terminated
one. While the helper is only a few lines long, it is nice
to abstract this out so that:

 - callers don't forget to free() the temporary buffer

 - right now, it is implemented in terms of color_parse().
   But it would be more efficient to reverse this and
   implement color_parse in terms of color_parse_mem.

This also changes the error string for an invalid color not
to mention the word ""config"", since it is not always
appropriate (and when it is, the context is obvious since
the offending config variable is given).

Finally, while we are in the area, we clean up the parameter
names in the declaration of color_parse; the var and value
parameters were reversed from the actual implementation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2625.diff
https://github.com/git/git/commit/14e6298f1215da503f0f65b63e13d674dd781868,18 Jan 2009,"run_hook(): allow more than 9 hook arguments

This is done using the ALLOC_GROW macro.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2626.diff
https://github.com/git/git/commit/ae98a0089ff7f7641ed15ddd595797de56eb49f1,18 Jan 2009,"Move run_hook() from builtin-commit.c into run-command.c (libgit)

A function that runs a hook is used in several Git commands.
builtin-commit.c has the one that is most general for cases without
piping. The one in builtin-gc.c prints some useful warnings.
This patch moves a merged version of these variants into libgit and
lets the other builtins use this libified run_hook().

The run_hook() function used in receive-pack.c feeds the standard
input of the pre-receive or post-receive hooks. This function is
renamed to run_receive_hook() because the libified run_hook() cannot
handle this.

Mentored-by: Daniel Barkalow <barkalow@iabervon.org>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/patch_2627.diff
https://github.com/git/git/commit/2b6a5417d750d086d1da906e46de2b3ad8df6753,17 Jan 2009,"color-words: take an optional regular expression describing words

In some applications, words are not delimited by white space.  To
allow for that, you can specify a regular expression describing
what makes a word with

	git diff --color-words='[A-Za-z0-9]+'

Note that words cannot contain newline characters.

As suggested by Thomas Rast, the words are the exact matches of the
regular expression.

Note that a regular expression beginning with a '^' will match only
a word at the beginning of the hunk, not a word at the beginning of
a line, and is probably not what you want.

This commit contains a quoting fix by Thomas Rast.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/patch_2628.diff
https://github.com/git/git/commit/2e5d2003b28820f88296e47a79eb440ca0295000,17 Jan 2009,"color-words: change algorithm to allow for 0-character word boundaries

Up until now, the color-words code assumed that word boundaries are
identical to white space characters.

Therefore, it could get away with a very simple scheme: it copied the
hunks, substituted newlines for each white space character, called
libxdiff with the processed text, and then identified the text to
output by the offsets (which agreed since the original text had the
same length).

This code was ugly, for a number of reasons:

- it was impossible to introduce 0-character word boundaries,

- we had to print everything word by word, and

- the code needed extra special handling of newlines in the removed part.

Fix all of these issues by processing the text such that

- we build word lists, separated by newlines,

- we remember the original offsets for every word, and

- after calling libxdiff on the wordlists, we parse the hunk headers, and
  find the corresponding offsets, and then

- we print the removed/added parts in one go.

The pre and post samples in the test were provided by Santi Béjar.

Note that there is some strange special handling of hunk headers where
one line range is 0 due to POSIX: in this case, the start is one too
low.  In other words a hunk header '@@ -1,0 +2 @@' actually means that
the line must be added after the _second_ line of the pre text, _not_
the first.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",223,data/crawl/git/patch_2629.diff
https://github.com/git/git/commit/07b57e90f7c852c4fe212ab1d91058f27469a74b,17 Jan 2009,"Add color_fwrite_lines(), a function coloring each line individually

We have to set the color before every line and reset it before every
newline.  Add a function color_fwrite_lines() which does that for us.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2630.diff
https://github.com/git/git/commit/22a3d060937072b0f197a8084af879c753c68fe7,14 Jan 2009,"git-notes: fix printing of multi-line notes

The line length was read from the same position every time,
causing mangled output when printing notes with multiple lines.

Also, adding new-line manually for each line ensures that we
get a new-line between commits, matching git-log for commits
without notes.

Signed-off-by: Tor Arne Vestbø <tavestbo@trolltech.com>
Acked-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2631.diff
https://github.com/git/git/commit/9800a754f931d05c2d26da9c1b188ae2c2b80eb4,13 Jan 2009,"Teach format-patch to handle output directory relative to cwd

Without any explicit -o parameter, we correctly avoided putting the
resulting patch output to the toplevel.  We should do the same when
the user gave a relative pathname to be consistent with this case.

Noticed by Cesar Eduardo Barros.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_2632.diff
https://github.com/git/git/commit/009318b1f1db24588d93bc658ea6c6a5324c9c3c,12 Jan 2009,"Add an expensive test for git-notes

git-notes have the potential of being pretty expensive, so test with
a lot of commits.  A lot.  So to make things cheaper, you have to
opt-in explicitely, by setting the environment variable
GIT_NOTES_TIMING_TESTS.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/patch_2633.diff
https://github.com/git/git/commit/2dd625d022074bb677bdd5caa5146cabaf726123,12 Jan 2009,"Speed up git notes lookup

To avoid looking up each and every commit in the notes ref's tree
object, which is very expensive, speed things up by slurping the tree
object's contents into a hash_map.

The idea fo the hashmap singleton is from David Reiss, initial
benchmarking by Jeff King.

Note: the implementation allows for arbitrary entries in the notes
tree object, ignoring those that do not reference a valid object.  This
allows you to annotate arbitrary branches, or objects.

[jc: fixed an obvious error in initialize_hash_map()]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_2634.diff
https://github.com/git/git/commit/55892d23981917aefdb387ad7d0429f90cbd446a,11 Jan 2009,"Allow cloning to an existing empty directory

The die() message updated accordingly.

The previous behaviour was to only allow cloning when the destination
directory doesn't exist.

[jc: added trivial tests]

Signed-off-by: Alexander Potashev <aspotashev@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_2635.diff
https://github.com/git/git/commit/39c68542fc8d8477f2080c99efedb9dce975abc6,11 Jan 2009,"Wrap inflate and other zlib routines for better error reporting

R. Tyler Ballance reported a mysterious transient repository corruption;
after much digging, it turns out that we were not catching and reporting
memory allocation errors from some calls we make to zlib.

This one _just_ wraps things; it doesn't do the ""retry on low memory
error"" part, at least not yet. It is an independent issue from the
reporting.  Some of the errors are expected and passed back to the caller,
but we die when zlib reports it failed to allocate memory for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_2636.diff
https://github.com/git/git/commit/34292bddb861f3cb52a524fdce67234430a744fe,07 Jan 2009,"Introduce the diff option '--patience'

This commit teaches Git to produce diff output using the patience diff
algorithm with the diff option '--patience'.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",175,data/crawl/git/patch_2637.diff
https://github.com/git/git/commit/d75307084da5f89329de190bb9b4a3196cec1d0e,05 Jan 2009,"remove trailing LF in die() messages

LF at the end of format strings given to die() is redundant because
die already adds one on its own.

Signed-off-by: Alexander Potashev <aspotashev@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_2638.diff
https://github.com/git/git/commit/ea718e65fab17297a8a9dbebf63ae99096e9537a,05 Jan 2009,"show <tag>: reuse pp_user_info() instead of duplicating code

We used to extract the tagger information ""by hand"" in ""git show <tag>"",
but the function pp_user_info() already does that.  Even better:
it respects the commit_format and date_format specified by the user.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_2639.diff
https://github.com/git/git/commit/2ce53f9b77eb36c6d1286f55fba65f8dc66b2564,05 Jan 2009,"git add: do not add files from a submodule

It comes quite as a surprise to an unsuspecting Git user that calling
""git add submodule/file"" (which is a mistake, alright) _removes_
the submodule in the index, and adds the file.  Instead, complain loudly.

While at it, be nice when the user said ""git add submodule/"" which is
most likely the consequence of tab-completion, and stage the submodule,
instead of trying to add the contents of that directory.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_2640.diff
https://github.com/git/git/commit/c9a42c4a12cec17e858b76d6c68aa17c12c0aef1,05 Jan 2009,"bundle: allow rev-list options to exclude annotated tags

With options such as ""--all --since=2.weeks.ago"", annotated tags used to
be included, when they should have been excluded.  The reason is that we
heavily abuse the revision walker to determine what needs to be included
or excluded.  And the revision walker does not show tags at all (and
therefore never marks tags as uninteresting).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_2641.diff
https://github.com/git/git/commit/f29680221124d05581dd2db52a4e7f0fa15fa929,01 Jan 2009,"git-cherry: make <upstream> parameter optional

The upstream branch <upstream> now defaults to the first tracked
remote branch, which is set by the configuration variables
branch.<name>.remote and branch.<name>.merge of the current branch.

Without such a remote branch, the command ""git cherry [-v]"" fails with
usage output as before and an additional message.

Signed-off-by: Markus Heidelberg <markus.heidelberg@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2642.diff
https://github.com/git/git/commit/f26c4940c4c7942a95058d9aaef7b01967085a60,30 Dec 2008,"parse-opt: migrate builtin-apply.

The only incompatible change is that the user how have to use '--'
before a patch file if it is named ""--build-fake-ancestor=something"".

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",285,data/crawl/git/patch_2643.diff
https://github.com/git/git/commit/4deba8b7798aac52e33aa8e1c49a8cdc0940ac36,27 Dec 2008,"merge-file: handle freopen() failure

Report the error if redirection of stderr to /dev/null failed.

This silences a compiler warning about ignoring the return value
of freopen() on Ubuntu 8.10.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2644.diff
https://github.com/git/git/commit/c569b1fee151e467854ca268997f4f3baaf73564,27 Dec 2008,"daemon: handle freopen() failure

Die if stderr couldn't be sent to /dev/null when operating in inetd
mode and report the error message from the OS.

This fixes a compiler warning about the return value of freopen()
being ignored on Ubuntu 8.10.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2645.diff
https://github.com/git/git/commit/f66bc5f928194366ee5eb78ef18a3562fb1bb7cf,22 Dec 2008,"Always show which directory is not a git repository

Unify all

  fatal: Not a git repository

error messages so they include path information.

Signed-off-by: Richard Hartmann <richih@net.in.tum.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2646.diff
https://github.com/git/git/commit/055a5975258f37eecdfcf609a472ab4957a59263,21 Dec 2008,"Add a script to edit/inspect notes

The script 'git notes' allows you to edit and show commit notes, by
calling either

	git notes show <commit>

or

	git notes edit <commit>

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",179,data/crawl/git/patch_2647.diff
https://github.com/git/git/commit/718258e256b74622aa55f5ee0cb9cff4cce6bf9f,20 Dec 2008,"GIT 1.6.0.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_2648.diff
https://github.com/git/git/commit/88fbf67b78c7bbe6c94150e7cd05f9398b571c48,20 Dec 2008,"fast-import: make tagger information optional

Even though newer Porcelain tools always record the tagger information
when creating new tags, export/import pair should be able to faithfully
reproduce ancient tag objects that lack tagger information.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Shawn O. Pearce <spearce@spearce.org>",44,data/crawl/git/patch_2649.diff
https://github.com/git/git/commit/4e46a8d62c551e11e21bd04e059e9ae3cdcfd029,20 Dec 2008,"fast-export: deal with tag objects that do not have a tagger

When no tagger was found (old Git produced tags like this),
no ""tagger"" line is printed (but this is incompatible with the current
git fast-import).

Alternatively, you can pass the option --fake-missing-tagger, forcing
fast-export to fake a tagger

	Unspecified Tagger <no-tagger>

with a tag date of the beginning of (Unix) time in the case of a missing
tagger, so that fast-import is still able to import the result.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2650.diff
https://github.com/git/git/commit/32738edfca29d819939196c65aecc1979ed23aa9,18 Dec 2008,"test overlapping ignore patterns

Add a test which checks that negated patterns such as ""!foo.html"" can
override previous patterns such as ""*.html"". This is documented
behaviour but had not been tested so far.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2651.diff
https://github.com/git/git/commit/737e31af7ae365d6251bb196e06d18afda9c98a8,17 Dec 2008,"make_absolute_path(): check bounds when seeing an overlong symlink

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>",2,data/crawl/git/patch_2652.diff
https://github.com/git/git/commit/dfab6aaecfe9df67123efc778f6aea4e9814715a,17 Dec 2008,"Make 'prepare_temp_file()' ignore st_size for symlinks

The code was already set up to not really need it, so this just massages
it a bit to remove the use entirely.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2653.diff
https://github.com/git/git/commit/b11b7e13f48ee283738e21fea9f775cd40ca0562,17 Dec 2008,"Add generic 'strbuf_readlink()' helper function

It was already what 'git apply' did in read_old_data(), just export it
as a real function, and make it be more generic.

In particular, this handles the case of the lstat() st_size data not
matching the readlink() return value properly (which apparently happens
at least on NTFS under Linux).  But as a result of this you could also
use the new function without even knowing how big the link is going to
be, and it will allocate an appropriately sized buffer.

So we pass in the st_size of the link as just a hint, rather than a
fixed requirement.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2654.diff
https://github.com/git/git/commit/b54dc9fdb993a54bba11df3f247e836158b8c1f0,17 Dec 2008,"gitweb: do not run ""git diff"" that is Porcelain

Jakub says that legacy-style URI to view two blob differences are never
generated since 1.4.3.  This codepath runs ""git diff"" Porcelain from the
gitweb, which is a no-no.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2655.diff
https://github.com/git/git/commit/438d2991eaa17549df67929cd4558d65840c37d7,17 Dec 2008,"GIT 1.5.6.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_2656.diff
https://github.com/git/git/commit/f23ffbe890d36e277f02d4a84c2b52de3a4e3173,17 Dec 2008,"GIT 1.5.5.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_2657.diff
https://github.com/git/git/commit/dfff4b7aa42de7e7d58caeebe2c6128449f09b76,17 Dec 2008,"gitweb: do not run ""git diff"" that is Porcelain

Jakub says that legacy-style URI to view two blob differences are never
generated since 1.4.3.  This codepath runs ""git diff"" Porcelain from the
gitweb, which is a no-no.  It can trigger diff.external command that is
specified in the configuration file of the repository being viewed.

This patch applies to v1.5.4 and later.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2658.diff
https://github.com/git/git/commit/c5ab03f26c992e30f355fba129f70db0f290fcd7,15 Dec 2008,"merge-recursive: do not clobber untracked working tree garbage

When merge-recursive wanted to create a new file in the work tree (either
as the final result, or a hint for reference purposes while delete/modify
conflicts), it unconditionally overwrote an untracked file in the working
tree.  Be careful not to lose whatever the user has that is not tracked.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2659.diff
https://github.com/git/git/commit/d2dadfe890b5da6f65fe061a414b6ec67c5efe9c,15 Dec 2008,"git-show: do not segfault when showing a bad tag

When a tag points at a bad or nonexistent object, we should diagnose the
breakage and exit.  An earlier commit 4f3dcc2 (Fix 'git show' on signed
tag of signed tag of commit, 2008-07-01) lost this check and made it
segfault instead; not good.

This fixes it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2660.diff
https://github.com/git/git/commit/a126ed0a01e265d7f3b2972a34e85636e12e6d34,13 Dec 2008,"git-branch: display sha1 on branch deletion

Make it easier to recover from a mistaken branch deletion by displaying the
sha1 of the branch's tip commit.

Update t3200 test to match the change in output.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2661.diff
https://github.com/git/git/commit/43cc2b4266cc75f1a5a10e1a805d05e419000573,13 Dec 2008,"autodetect number of CPUs by default when using threads

... and display the actual number of threads used when locally
repacking.  A remote server still won't tell you how many threads it
uses during a fetch though.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2662.diff
https://github.com/git/git/commit/3aa1f7ca3779f73164b285c070b71abcdd7397c1,10 Dec 2008,"diff: respect textconv in rewrite diffs

Currently we just skip rewrite diffs for binary files; this
patch makes an exception for files which will be textconv'd,
and actually performs the textconv before generating the
diff.

Conceptually, rewrite diffs should be in the exact same
format as the a non-rewrite diff, except that we refuse to
share any context. Thus it makes very little sense for ""git
diff"" to show a textconv'd diff, but for ""git diff -B"" to
show ""Binary files differ"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_2663.diff
https://github.com/git/git/commit/b96524f83aa6ba7bd08fb59bb0aa07453a984a8d,08 Dec 2008,"builtin-checkout.c: check error return from read_cache()

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2664.diff
https://github.com/git/git/commit/3927bbe9a4d4033551dea39ac1abb9cdc45d822c,07 Dec 2008,"tag: delete TAG_EDITMSG only on successful tag

The user may put some effort into writing an annotated tag
message. When the tagging process later fails (which can
happen fairly easily, since it may be dependent on gpg being
correctly configured and used), there is no record left on
disk of the tag message.

Instead, let's keep the TAG_EDITMSG file around until we are
sure the tag has been created successfully. If we die
because of an error, the user can recover their text from
that file. Leaving the file in place causes no conflicts;
it will be silently overwritten by the next annotated tag
creation.

This matches the behavior of COMMIT_EDITMSG, which stays
around in case of error.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2665.diff
https://github.com/git/git/commit/304dcf262e3f8524c909a13cf73a67522be6353b,05 Dec 2008,"Report symlink failures in merge-recursive

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2666.diff
https://github.com/git/git/commit/7be77de266b5cbcbd28d69a04df6f0b167b87cf6,05 Dec 2008,"Make chdir failures visible

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2667.diff
https://github.com/git/git/commit/47d32af2338418275ab6b53a737952af22289d97,05 Dec 2008,"Make some of fwrite/fclose/write/close failures visible

So that full filesystem conditions or permissions problems won't go
unnoticed.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_2668.diff
https://github.com/git/git/commit/331fcb598ec0127fd89c992361bc573dcd3a4a63,01 Dec 2008,"git add --intent-to-add: do not let an empty blob be committed by accident

Writing a tree out of an index with an ""intent to add"" entry is blocked.
This implies that you cannot ""git commit"" from such a state; however you
can still do ""git commit -a"" or ""git commit $that_path"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2669.diff
https://github.com/git/git/commit/69530cb0c0d5f08dac9bedff56c164b7370f9931,29 Nov 2008,"builtin-rm.c: explain and clarify the ""local change"" logic

Explain the logic to check local modification a bit more in the comment,
especially because the existing comment that talks about ""git rm --cached""
was placed in a part that was not about ""--cached"" at all.

Also clarify ""if .. else if .."" structure.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/patch_2670.diff
https://github.com/git/git/commit/b9e125e07e349275b16d177b8ee6bad140da31ab,25 Nov 2008,"builtin-clone: use strbuf in clone_local() and copy_or_link_directory()

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_2671.diff
https://github.com/git/git/commit/36d2078ff19c849aef94f045bf2b4fb73a5098e8,21 Nov 2008,"git.el: Improve error handling for commits.

Display all errors happening in the various subcommands of the commit
sequence, and abort on any error.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>",46,data/crawl/git/patch_2672.diff
https://github.com/git/git/commit/da3f78a29cafee487c107a81c442213fa41463f7,18 Nov 2008,"builtin-branch: use strbuf in rename_branch()

In case the length of branch name is greather then PATH_MAX-11, we write
to unallocated memory otherwise.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_2673.diff
https://github.com/git/git/commit/8c4021abfd170278d1a3431e2777bedd0c01fbb1,16 Nov 2008,"Fix machine-parseability of 'git log --source'

The space between the commit and the source attribute is not easily
machine-parseable: if we combine --source with --parents and give a SHA1
as a starting point, it's unnecessarily hard to see where the list of
parents ends and the source decoration begins.

Example:
	git show --parents --source $(git rev-list HEAD)

which is admittedly contrived, but can easily happen in scripting.

So use a <tab> instead of a space as the source separator.

The other decorations didn't have this issue, because they were surrounded
by parenthesis, so it's obvious that they aren't parent SHA1's.

It so happens that _visually_ this makes no difference for ""git log
--source"", since ""commit <40-char SHA1>"" is 47 characters, so both a space
and a <tab> will end up showing as a single commit. Of course, with
'--pretty=oneline' or '--parents' or '--abbrev-commit' you'll see the
difference.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2674.diff
https://github.com/git/git/commit/671c9b7e315db89081cc69f83a8f405e4aca37bc,15 Nov 2008,"Add cache preload facility

This can do the lstat() storm in parallel, giving potentially much
improved performance for cold-cache cases or things like NFS that have
weak metadata caching.

Just use ""read_cache_preload()"" instead of ""read_cache()"" to force an
optimistic preload of the index stat data.  The function takes a
pathspec as its argument, allowing us to preload only the relevant
portion of the index.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_2675.diff
https://github.com/git/git/commit/7f87aff22c0232a5ce327ea3d2923776936c97f4,15 Nov 2008,"Teach/Fix pull/fetch -q/-v options

Implement git-pull --quiet and git-pull --verbose by
adding the options to git-pull and fixing verbosity
handling in git-fetch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/patch_2676.diff
https://github.com/git/git/commit/beece9dab8e26c98062351536ce0d871a066790e,12 Nov 2008,"git send-email: ask less questions when --compose is used.

When --compose is used, we can grab the From/Subject/In-Reply-To from the
edited summary, let it be so and don't ask the user silly questions.

The summary templates gets quite revamped, and includes the list of
patches subjects that are going to be sent with this batch.

When having a body full of empty lines, the summary isn't sent. Document
that in the git-send-email manpage fully.

Note: It doesn't deal with To/Cc/Bcc yet.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/patch_2677.diff
https://github.com/git/git/commit/5df9fcf695a0ba85abfeed68efb3b1c5890068d6,12 Nov 2008,"git send-email: interpret unknown files as revision lists

Filter out all the arguments git-send-email doesn't like to a
git format-patch command, that dumps its content to a safe directory.

Barf when a file/revision conflict occurs, allow it to be overriden
--[no-]format-patch.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2678.diff
https://github.com/git/git/commit/1dd1239aa33ddd7f159cd183338ef6f71298e29a,12 Nov 2008,"git-remote rename: migrate from remotes/ and branches/

Remote definition that came from $GIT_DIR/remotes/nick and
$GIT_DIR/branches/nick are migrated to [remotes ""nick""] section in the
configuration file.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_2679.diff
https://github.com/git/git/commit/42fc1139a07b4292d3e5251c591609126664941a,11 Nov 2008,"Fix non-literal format in printf-style calls

These were found using gcc 4.3.2-1ubuntu11 with the warning:

    warning: format not a string literal and no format arguments

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2680.diff
https://github.com/git/git/commit/9db56f71b91153f4076a796c80c61f00edd8b700,11 Nov 2008,"Fix non-literal format in printf-style calls

These were found using gcc 4.3.2-1ubuntu11 with the warning:

    warning: format not a string literal and no format arguments

Incorporated suggestions from Brandon Casey <casey@nrlssc.navy.mil>.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2681.diff
https://github.com/git/git/commit/986e82396ab23b9e5f4eab7183bbf76e7bc756d0,09 Nov 2008,"receive-pack: detect push to current branch of non-bare repo

Pushing into the currently checked out branch of a non-bare
repository can be dangerous; the HEAD then loses sync with
the index and working tree, and it looks in the receiving
repo as if the pushed changes have been reverted in the
index (since they were never there in the first place).

This patch adds a safety valve that checks for this
condition and either generates a warning or denies the
update. We trigger the check only on a non-bare repository,
since a bare repo does not have a working tree (and in fact,
pushing to the HEAD branch is a common workflow for
publishing repositories).

The behavior is configurable via receive.denyCurrentBranch,
defaulting to ""warn"" so as not to break existing setups
(though it may, after a deprecation period, switch to
""refuse"" by default). For users who know what they are doing
and want to silence the warning (e.g., because they have a
post-receive hook that reconciles the HEAD and working
tree), they can turn off the warning by setting it to false
or ""ignore"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/patch_2682.diff
https://github.com/git/git/commit/bf98421a3363696f3b4c8aedc242bfaadc1ce6f6,05 Nov 2008,"Implement git remote rename

The new rename subcommand does the followings:

1) Renames the remote.foo configuration section to remote.bar

2) Updates the remote.bar.fetch refspecs

3) Updates the branch.*.remote settings

4) Renames the tracking branches: renames the normal refs and rewrites
   the symrefs to point to the new refs.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/patch_2683.diff
https://github.com/git/git/commit/6fa8342b12aeb3e3895d3b3d8d34d45fa872ac45,04 Nov 2008,"tag: Check that options are only allowed in the appropriate mode

If ""git tag -d -l -v ..."" is called, only ""-l"" is honored, which is
arbitrary and wrong. Also, unrecognized options are accepted in the
wrong modes, causing for example ""git tag -n 100"" to create a tag
named ""100"" while the user may have wanted to type ""git tag -n100"".

This patch checks that ""git tag"" knows in what mode it operates before
performing any operation and accepts only the related options.

Signed-off-by: Samuel Tardieu <sam@rfc1149.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2684.diff
https://github.com/git/git/commit/0f3a290b89b89bb5375cf5019b067e4a99f02620,04 Nov 2008,"Add a 'source' decorator for commits

We already support decorating commits by tags or branches that point to
them, but especially when we are looking at multiple branches together,
we sometimes want to see _how_ we reached a particular commit.

We can abuse the '->util' field in the commit to keep track of that as
we walk the commit lists, and get a reasonably useful view into which
branch or tag first reaches that commit.

Of course, if the commit is reachable through multiple sources (which is
common), our particular choice of ""first"" reachable is entirely random
and depends on the particular path we happened to follow.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2685.diff
https://github.com/git/git/commit/64bd76b1de75483dea646c39c390113ffc821299,02 Nov 2008,"pack-objects: allow ""fixing"" a corrupted pack without a full repack

When the pack data to be reused is found to be bad, let's fall back to
full object access through the generic path which has its own strategies
to find alternate object sources in that case.  This allows for ""fixing""
a corrupted pack simply by copying either another pack containing the
object(s) found to be bad, or the loose object itself, into the object
store and launch a repack without the need for -f.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2686.diff
https://github.com/git/git/commit/08698b1e32bc414f214b7300b40c30a30d9ecd1c,02 Nov 2008,"make find_pack_revindex() aware of the nasty world

It currently calls die() whenever given offset is not found thinking
that such thing should never happen.  But this offset may come from a
corrupted pack whych _could_ happen and not be found.  Callers should
deal with this possibility gracefully instead.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2687.diff
https://github.com/git/git/commit/03d660150cbc80cd7d2ec90c3c4e6ce563295e3a,02 Nov 2008,"make check_object() resilient to pack corruptions

The check_object() function tries to get away with the least amount of
pack access possible when it already has partial information on given
object rather than calling the more costly packed_object_info().

When things don't look right, it should just give up and fall back to
packed_object_info() directly instead of die()'ing.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2688.diff
https://github.com/git/git/commit/3d77d8774fc18216f18efa5c5907f73b22d61604,02 Nov 2008,"make packed_object_info() resilient to pack corruptions

In the same spirit as commit 8eca0b47ff, let's try to survive a pack
corruption by making packed_object_info() able to fall back to alternate
packs or loose objects.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_2689.diff
https://github.com/git/git/commit/09ded04b7e1f0096bb2fe356b2f5a298296151dd,02 Nov 2008,"make unpack_object_header() non fatal

It is possible to have pack corruption in the object header.  Currently
unpack_object_header() simply die() on them instead of letting the caller
deal with that gracefully.

So let's have unpack_object_header() return an error instead, and find
a better name for unpack_object_header_gently() in that context.  All
callers of unpack_object_header() are ready for it.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_2690.diff
https://github.com/git/git/commit/d8f325563d85abcd9816311b3a84093b2d1cda9f,02 Nov 2008,"better validation on delta base object offsets

In one case, it was possible to have a bad offset equal to 0 effectively
pointing a delta onto itself and crashing git after too many recursions.
In the other cases, a negative offset could result due to off_t being
signed.  Catch those.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2691.diff
https://github.com/git/git/commit/0e8189e2708bc1da08c77c7e1d960f420b6890a5,02 Nov 2008,"close another possibility for propagating pack corruption

Abstract
--------

With index v2 we have a per object CRC to allow quick and safe reuse of
pack data when repacking.  This, however, doesn't currently prevent a
stealth corruption from being propagated into a new pack when _not_
reusing pack data as demonstrated by the modification to t5302 included
here.

The Context
-----------

The Git database is all checksummed with SHA1 hashes.  Any kind of
corruption can be confirmed by verifying this per object hash against
corresponding data.  However this can be costly to perform systematically
and therefore this check is often not performed at run time when
accessing the object database.

First, the loose object format is entirely compressed with zlib which
already provide a CRC verification of its own when inflating data.  Any
disk corruption would be caught already in this case.

Then, packed objects are also compressed with zlib but only for their
actual payload.  The object headers and delta base references are not
deflated for obvious performance reasons, however this leave them
vulnerable to potentially undetected disk corruptions.  Object types
are often validated against the expected type when they're requested,
and deflated size must always match the size recorded in the object header,
so those cases are pretty much covered as well.

Where corruptions could go unnoticed is in the delta base reference.
Of course, in the OBJ_REF_DELTA case,  the odds for a SHA1 reference to
get corrupted so it actually matches the SHA1 of another object with the
same size (the delta header stores the expected size of the base object
to apply against) are virtually zero.  In the OBJ_OFS_DELTA case, the
reference is a pack offset which would have to match the start boundary
of a different base object but still with the same size, and although this
is relatively much more ""probable"" than in the OBJ_REF_DELTA case, the
probability is also about zero in absolute terms.  Still, the possibility
exists as demonstrated in t5302 and is certainly greater than a SHA1
collision, especially in the OBJ_OFS_DELTA case which is now the default
when repacking.

Again, repacking by reusing existing pack data is OK since the per object
CRC provided by index v2 guards against any such corruptions. What t5302
failed to test is a full repack in such case.

The Solution
------------

As unlikely as this kind of stealth corruption can be in practice, it
certainly isn't acceptable to propagate it into a freshly created pack.
But, because this is so unlikely, we don't want to pay the run time cost
associated with extra validation checks all the time either.  Furthermore,
consequences of such corruption in anything but repacking should be rather
visible, and even if it could be quite unpleasant, it still has far less
severe consequences than actively creating bad packs.

So the best compromize is to check packed object CRC when unpacking
objects, and only during the compression/writing phase of a repack, and
only when not streaming the result.  The cost of this is minimal (less
than 1% CPU time), and visible only with a full repack.

Someone with a stats background could provide an objective evaluation of
this, but I suspect that it's bad RAM that has more potential for data
corruptions at this point, even in those cases where this extra check
is not performed.  Still, it is best to prevent a known hole for
corruption when recreating object data into a new pack.

What about the streamed pack case?  Well, any client receiving a pack
must always consider that pack as untrusty and perform full validation
anyway, hence no such stealth corruption could be propagated to remote
repositoryes already.  It is therefore worthless doing local validation
in that case.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2692.diff
https://github.com/git/git/commit/a80732897931c737c01d04289dd1512bd12a4b04,02 Nov 2008,"connect.c: add a way for git-daemon to pass an error back to client

The current behavior of git-daemon is to simply close the connection on
any error condition. This leaves the client without any information as
to the cause of the failed fetch/push/etc.

This patch allows get_remote_heads to accept a line prefixed with ""ERR""
that it can display to the user in an informative fashion. Once clients
can understand this ERR line, git-daemon can be made to properly report
""repository not found"", ""permission denied"", or other errors.

Example

S: ERR No matching repository.
C: fatal: remote error: No matching repository.

Signed-off-by: Tom Preston-Werner <tom@github.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2693.diff
https://github.com/git/git/commit/a240de1137bd63a969c6bd56ab5186d7216e28ca,02 Nov 2008,"Introduce receive.denyDeletes

Occasionally, it may be useful to prevent branches from getting deleted from
a centralized repository, particularly when no administrative access to the
server is available to undo it via reflog. It also makes
receive.denyNonFastForwards more useful if it is used for access control
since it prevents force-updating by deleting and re-creating a ref.

Signed-off-by: Jan Krüger <jk@jk.gs>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2694.diff
https://github.com/git/git/commit/0ea9ca07aa76bef80c066b1a70366cf90caa703d,31 Oct 2008,"Add --verbose|-v to test-chmtime

This allows us replace perl when getting the mtime of a file because
of time zone conversions, though at the moment only one platform which
does this has been identified: Cygwin when used with ActiveState Perl
(as usual).

The output format is:

    <mtime1> TAB <filename1> <LF>
    <mtime2> TAB <filename2> <LF>
    ...

which, if only mtime is needed can be parsed with cut(1):

    test-chmtime -v +0 filename1 | cut -f 1

Also, the change adds a description of programs features, with examples.

Signed-off-by: Alex Riesen <ariesen@harmanbecker.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_2695.diff
https://github.com/git/git/commit/fa58186c9ba50514b36ac5ef192cd7e0bc4d7780,30 Oct 2008,"git branch -m: forbid renaming of a symref

There may be cases where one would really want to rename the symbolic
ref without changing its value, but ""git branch -m"" is not such a
use-case.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_2696.diff
https://github.com/git/git/commit/6e381d3aff89e09d13bd855ed6e18b0aa6f1e441,28 Oct 2008,"Add file delete/create info when we overflow rename_limit

When we refuse to do rename detection due to having too many files
created or deleted, let the user know the numbers.  That way there is a
reasonable starting point for setting the diff.renamelimit option.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2697.diff
https://github.com/git/git/commit/eca35a25a92a1ad725af2a549fc9158488c4cc43,26 Oct 2008,"Fix git branch -m for symrefs.

This had two problems with symrefs. First, it copied the actual sha1
instead of the ""pointer"", second it failed to remove the old ref after a
successful rename.

Given that till now delete_ref() always dereferenced symrefs, a new
parameters has been introduced to delete_ref() to allow deleting refs
without a dereference.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",86,data/crawl/git/patch_2698.diff
https://github.com/git/git/commit/04427ac8483f61dcb01a48c78a821f5042c88195,26 Oct 2008,"refactor userdiff textconv code

The original implementation of textconv put the conversion
into fill_mmfile. This was a bad idea for a number of
reasons:

 - it made the semantics of fill_mmfile unclear. In some
   cases, it was allocating data (if a text conversion
   occurred), and in some cases not (if we could use the
   data directly from the filespec). But the caller had
   no idea which had happened, and so didn't know whether
   the memory should be freed

 - similarly, the caller had no idea if a text conversion
   had occurred, and so didn't know whether the contents
   should be treated as binary or not. This meant that we
   incorrectly guessed that text-converted content was
   binary and didn't actually show it (unless the user
   overrode us with ""diff.foo.binary = false"", which then
   created problems in plumbing where the text conversion
   did _not_ occur)

 - not all callers of fill_mmfile want the text contents. In
   particular, we don't really want diffstat, whitespace
   checks, patch id generation, etc, to look at the
   converted contents.

This patch pulls the conversion code directly into
builtin_diff, so that we only see the conversion when
generating an actual patch. We also then know whether we are
doing a conversion, so we can check the binary-ness and free
the data from the mmfile appropriately (the previous version
leaked quite badly when text conversion was used)

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_2699.diff
https://github.com/git/git/commit/20244ea2d09a3f5c3c83133014ca1e1b7b3d0227,23 Oct 2008,"git-remote: list branches in vertical lists

Previously, branches were listed on a single line in each section. But
if there are many branches, then horizontal, line-wrapped lists are very
inconvenient to scan for a human. This makes the lists vertical, i.e one
branch per line is printed.

Since ""git remote"" is porcelain, we can easily make this
backwards-incompatible change.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2700.diff
https://github.com/git/git/commit/a672ea6ac5a1b876bc7adfe6534b16fa2a32c94b,21 Oct 2008,"rehabilitate 'git index-pack' inside the object store

Before commit d0b92a3f6e it was possible to run 'git index-pack'
directly in the .git/objects/pack/ directory.  Restore that ability.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_2701.diff
https://github.com/git/git/commit/828e32b82e3e2bb10d6d730d3abe505063b481f6,19 Oct 2008,"Fix mismerge at cdb22c4 in builtin-checkout.c

The code to complain when -b is not given but an explicit --track/--no-track
override was given from the command line was unchanged on one branch and
reworked on the other branch.  The merge result incorrectly kept it.

Spotted by Matt McCutchen.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2702.diff
https://github.com/git/git/commit/a6c7db1b1945d656cc0dd559d93c7b2129c65d86,19 Oct 2008,"parse-opt: migrate builtin-checkout-index.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/patch_2703.diff
https://github.com/git/git/commit/d1a43f2aa4bfb5aef29e9e1fe1fb9bb18c0e8b65,18 Oct 2008,"reset --hard/read-tree --reset -u: remove unmerged new paths

When aborting a failed merge that has brought in a new path using ""git
reset --hard"" or ""git read-tree --reset -u"", we used to first forget about
the new path (via read_cache_unmerged) and then matched the working tree
to what is recorded in the index, thus ending up leaving the new path in
the work tree.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_2704.diff
https://github.com/git/git/commit/9cb92c390cefd3bf3f71bbda12eb04893c861361,18 Oct 2008,"diff: add filter for converting binary to text

When diffing binary files, it is sometimes nice to see the
differences of a canonical text form rather than either a
binary patch or simply ""binary files differ.""

Until now, the only option for doing this was to define an
external diff command to perform the diff. This was a lot of
work, since the external command needed to take care of
doing the diff itself (including mode changes), and lost the
benefit of git's colorization and other options.

This patch adds a text conversion option, which converts a
file to its canonical format before performing the diff.
This is less flexible than an arbitrary external diff, but
is much less work to set up. For example:

  $ echo '*.jpg diff=exif' >>.gitattributes
  $ git config diff.exif.textconv exiftool
  $ git config diff.exif.binary false

allows one to see jpg diffs represented by the text output
of exiftool.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",52,data/crawl/git/patch_2705.diff
https://github.com/git/git/commit/51a94af845cb3f797abd638478834721d7295af7,17 Oct 2008,"Fix ""checkout --track -b newbranch"" on detached HEAD

The test to make sure that checkout fails when --track was asked for and
we cannot set up tracking information in t7201 was wrong, and it turns out
that the implementation for that feature itself was buggy.  This fixes it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2706.diff
https://github.com/git/git/commit/98fa473887d0bebd38d568bb07232a336a642dcf,17 Oct 2008,"refactor handling of ""other"" files in ls-files and status

When the ""git status"" display code was originally converted
to C, we copied the code from ls-files to discover whether a
pathname returned by read_directory was an ""other"", or
untracked, file.

Much later, 5698454e updated the code in ls-files to handle
some new cases caused by gitlinks.  This left the code in
wt-status.c broken: it would display submodule directories
as untracked directories. Nobody noticed until now, however,
because unless status.showUntrackedFiles was set to ""all"",
submodule directories were not actually reported by
read_directory. So the bug was only triggered in the
presence of a submodule _and_ this config option.

This patch pulls the ls-files code into a new function,
cache_name_is_other, and uses it in both places. This should
leave the ls-files functionality the same and fix the bug
in status.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_2707.diff
https://github.com/git/git/commit/5782566d7f2847bd94e33fd26c8a961e887ec10a,16 Oct 2008,"git-check-attr(1): add output and example sections

Plumbing tools should document what output can be expected.

Signed-off-by: Jonas Fonseca <fonseca@diku.dk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2708.diff
https://github.com/git/git/commit/c82efafcfa741cdddbc68379c1905953f58ef21d,15 Oct 2008,"remote.c: correct the check for a leading '/' in a remote name

This test is supposed to disallow remote entries in the config file of the
form:

   [remote ""/foobar""]
      ...

The leading slash in '/foobar' is not acceptable.

Instead it was incorrectly testing that the subkey had no leading '/', which
had no effect since the subkey pointer was made to point at a '.' in the
preceding lines.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2709.diff
https://github.com/git/git/commit/8ee5d73137f355c21e8d4db365ae8d301e067395,13 Oct 2008,"Fix fetch/pull when run without --update-head-ok

Some confusing tutorials suggested that it would be a good idea to fetch
into the current branch with something like this:

	git fetch origin master:master

(or even worse: the same command line with ""pull"" instead of ""fetch"").
While it might make sense to store what you want to pull, it typically is
plain wrong when the current branch is ""master"".  This should only be
allowed when (an incorrect) ""git pull origin master:master"" tries to work
around by giving --update-head-ok to underlying ""git fetch"", and otherwise
we should refuse it, but somewhere along the lines we lost that behavior.

The check for the current branch is now _only_ performed in non-bare
repositories, which is an improvement from the original behaviour.

Some newer tests were depending on the broken behaviour of ""git fetch""
this patch fixes, and have been adjusted.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_2710.diff
https://github.com/git/git/commit/b4666852a06af0c969ad8f1c444d0b48c4451e76,12 Oct 2008,"check-attr: Add --stdin option

This allows multiple paths to be specified on stdin.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",100,data/crawl/git/patch_2711.diff
https://github.com/git/git/commit/41038c5e1534a6abef21ec4cfc216d13d0ac2fb5,12 Oct 2008,"check-attr: add an internal check_attr() function

This step is preparation to introducing --stdin-paths option.

I have also added maybe_flush_or_die() at the end of main() to ensure that
we exit with the zero code only when we flushed the output successfully.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",42,data/crawl/git/patch_2712.diff
https://github.com/git/git/commit/06aaaa0bf70fe37d198893f4e25fa73b6516f8a9,12 Oct 2008,"Extend index to save more flags

The on-disk format of index only saves 16 bit flags, nearly all have
been used. The last bit (CE_EXTENDED) is used to for future extension.

This patch extends index entry format to save more flags in future.
The new entry format will be used when CE_EXTENDED bit is 1.

Because older implementation may not understand CE_EXTENDED bit and
misread the new format, if there is any extended entry in index, index
header version will turn 3, which makes it incompatible for older git.
If there is none, header version will return to 2 again.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",109,data/crawl/git/patch_2713.diff
https://github.com/git/git/commit/96e117099c0e4f7d508eb071f60b6275038f6f37,12 Oct 2008,"blame: show ""previous"" information in --porcelain/--incremental format

When the final blame is laid for a line to a <commit, path> pair, it also
gives a ""previous"" information to --porcelain and --incremental output
format.  It gives the parent commit of the blamed commit, _and_ a path in
that parent commit that corresponds to the blamed path --- in short, it is
the origin that would have been blamed (or passed blame through) for the
line _if_ the blamed commit did not change that line.

This unfortunately makes sanity checking of refcount quite complex, so I
ripped it out for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_2714.diff
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_2715.diff
https://github.com/git/git/commit/7e7abea96b8140c592a46293f5e33aae0683c7ac,12 Oct 2008,"print an error message for invalid path

If verification of path failed, it is always better to print an
error message saying this than relying on the caller function to
print a meaningful error message (especially when the callee already
prints error message for another situation).

Because the callers of add_index_entry_with_check() did not print
any error message, it resulted that the user would not notice the
problem when checkout of an invalid path failed.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",8,data/crawl/git/patch_2716.diff
https://github.com/git/git/commit/fb7424363643d6049faf3bda399e5e602782b5b7,08 Oct 2008,"Do not use errno when pread() returns 0

If we use pread() while at the end of the file, it will return 0, which is
not an error from the operating system point of view. In this case, errno
has not been set and must not be used.

Signed-off-by: Samuel Tardieu <sam@rfc1149.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",5,data/crawl/git/patch_2717.diff
https://github.com/git/git/commit/5de70efbd9236e44f122348ec2a1c2967d3bfde8,06 Oct 2008,"Add git-svn branch to allow branch creation in SVN repositories

[ew: fixed a warning to stderr causing t9108 to fail]

Signed-off-by: Florian Ragwitz <rafl@debian.org>
Signed-off-by: Deskin Miller <deskinm@umich.edu>
Acked-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",130,data/crawl/git/patch_2718.diff
https://github.com/git/git/commit/048f2762007d022defceb6850a44bc1bd5ccebf7,06 Oct 2008,"do not segfault if make_cache_entry failed

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",7,data/crawl/git/patch_2719.diff
https://github.com/git/git/commit/d09e2cd5516473753cb067e723293fab180e0b1b,06 Oct 2008,"do not segfault if make_cache_entry failed

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",5,data/crawl/git/patch_2720.diff
https://github.com/git/git/commit/62525ef78e8aec776f44da525030d76b52f14a57,06 Oct 2008,"make prefix_path() never return NULL

There are 9 places where prefix_path is called, and only in one of
them the returned pointer was checked to be non-zero and only to
call exit(128) as it is usually done by die(). In other 8 places,
the returned value was not checked and it caused SIGSEGV when a
path outside of the working tree was used. For instance, running
  git update-index --add /some/path/outside
caused SIGSEGV.

This patch changes prefix_path() to die if the path is outside of
the repository, so it never returns NULL.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",9,data/crawl/git/patch_2721.diff
https://github.com/git/git/commit/cf10f9fdd5e673a163847f0e931ce9731507e03b,03 Oct 2008,"builtin-commit: use reduce_heads() only when appropriate

Since commit 6bb6b034 (builtin-commit: use commit_tree(), 2008-09-10),
builtin-commit performs a reduce_heads() unconditionally.  However,
it's not always needed, and in some cases even harmful.

reduce_heads() is not needed for the initial commit or for an
""ordinary"" commit, because they don't have any or have only one
parent, respectively.

reduce_heads() must be avoided when 'git commit' is run after a 'git
merge --no-ff --no-commit', otherwise it will turn the
non-fast-forward merge into fast-forward.  For the same reason,
reduce_heads() must be avoided when amending such a merge commit.

To resolve this issue, 'git merge' will write info about whether
fast-forward is allowed or not to $GIT_DIR/MERGE_MODE.  Based on this
info, 'git commit' will only perform reduce_heads() when it's
committing a merge and fast-forward is enabled.

Also add test cases to ensure that non-fast-forward merges are
committed and amended properly.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",43,data/crawl/git/patch_2722.diff
https://github.com/git/git/commit/668f26fff610605d112fbedffae79917de948893,03 Oct 2008,"builtin-merge: refresh the index before calling a strategy

In case a file is touched but has no real changes then we just have to
update the index and should not error out.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",19,data/crawl/git/patch_2723.diff
https://github.com/git/git/commit/d249610792c6a42a7d51c2f5790025569f6cb5fd,03 Oct 2008,"parse-opt: migrate builtin-merge-file.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",68,data/crawl/git/patch_2724.diff
https://github.com/git/git/commit/c8ef0383aca38bfedf85a311bbdd30008fcbebcf,03 Oct 2008,"parse-opt: migrate fmt-merge-msg.

Also fix an inefficient printf(""%s"", ...) where we can use write_in_full.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",49,data/crawl/git/patch_2725.diff
https://github.com/git/git/commit/c85db254d9d3309bb330444385dbb3b7be5100d3,03 Oct 2008,"reformat informational commit message

When committing, we print a message like:

  Created [DETACHED commit] <hash> (<subject>) on <branch>

The most useful bit of information there (besides the
detached status, if it is present) is which branch you made
the commit on. However,  it is sometimes hard to see because
the subject dominates the line.

Instead, let's put the most useful information (detached
status and commit branch) on the far left, with the subject
(which is least likely to be interesting) on the far right.

We'll use brackets to offset the branch name so the line is
not mistaken for an error line of the form ""program: some
sort of error"". E.g.,:

  [jk/bikeshed] created bd8098f: ""reformat informational commit message""

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",37,data/crawl/git/patch_2726.diff
https://github.com/git/git/commit/83caecca2f0805d440099d19011fdedc2b3467a5,01 Oct 2008,"git grep: Add ""-z/--null"" option as in GNU's grep.

Here's a trivial patch that adds ""-z"" and ""--null"" options to ""git
grep"". It was discussed on the mailing-list that git's ""-z""
convention should be used instead of GNU grep's ""-Z"".
So things like 'git grep -l -z ""$FOO"" | xargs -0 sed -i ""s/$FOO/$BOO/""'
do work now.

Signed-off-by: Raphael Zimmerer <killekulla@rdrz.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/patch_2727.diff
https://github.com/git/git/commit/72c69ebc035efe08aef03866184aa9b344814d93,30 Sep 2008,"git commit: Reformat output somewhat

Previously, we used to print something along the lines of

	Created commit abc9056 on master: Snib the sprock

but that output was sometimes confusing, as many projects use
the ""subsystem: message"" style of commit subjects (just like
this commit message does). When such improvements are done on
topic-branches, it's not uncommon to name the topic-branch the
same as the subsystem, leading to output like this:

	Created commit abc9056 on i386: i386: Snib the sprock

which doesn't look very nice and can be highly confusing.
This patch alters the format so that the noise-word ""commit""
is dropped except when it makes the output read better and
the commit subject is put inside parentheses. We also
emphasize the detached case so that users do not overlook it
in case the commit subject is long enough to extend to the
next line. The end result looks thusly:

	normal case
	Created abc9056 (i386: Snib the sprock) on i386

	detached head
	Created DETACHED commit abc9056 (i386: Snib the sprock)

While we're at it, we rename ""initial commit"" to ""root-commit""
to align it with the argument to 'git log', producing this:

	initial commit
	Created root-commit abc9056 (i386: Snib the sprock) on i386

Documentation/gittutorial-2.txt is updated accordingly so that
new users recognize what they're looking at.

Signed-off-by: Andreas Ericsson <ae@op5.se>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",25,data/crawl/git/patch_2728.diff
https://github.com/git/git/commit/cbce6c0be30cbaf8c39051f85006d679338a8ddc,29 Sep 2008,"Clarify commit error message for unmerged files

Currently, trying to use git-commit with unmerged files in the index
will show the message ""Error building trees"", which can be a bit
obscure to the end user. This patch makes the error message clearer, and
consistent with what git-write-tree reports in a similar situation.

Signed-off-by: Rafael Garcia-Suarez <rgarciasuarez@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",2,data/crawl/git/patch_2729.diff
https://github.com/git/git/commit/dc4179f9a76473176eb473f6f568b0006c823fba,24 Sep 2008,"maint: check return of split_cmdline to avoid bad config strings

As the testcase demonstrates, it's possible for split_cmdline to return -1 and
deallocate any memory it's allocated, if the config string is missing an end
quote.  In both the cases below, which are the only calling sites, the return
isn't checked, and using the pointer causes a pretty immediate segfault.

Signed-off-by: Deskin Miller <deskinm@umich.edu>
Acked-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",14,data/crawl/git/patch_2730.diff
https://github.com/git/git/commit/db87e3960c5a770db13c9ba9602b5e88848e2d1a,23 Sep 2008,"builtin-prune.c: prune temporary packs in <object_dir>/pack directory

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2731.diff
https://github.com/git/git/commit/79bbc7fb078f8cabe04020c4619be9b571371398,22 Sep 2008,"git-remote: do not use user input in a printf format string

'git remote show' substituted the remote name into a string that was later
used as a printf format string. If a remote name contains a printf format
specifier like this:

   $ git remote add foo%sbar .

then the command

   $ git remote show foo%sbar

would print garbage (if you are lucky) or crash. This fixes it.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2732.diff
https://github.com/git/git/commit/7d20e2189e19f51662353ea853891e00882d29cc,22 Sep 2008,"make ""git remote"" report multiple URLs

This patch makes ""git remote -v"" and ""git remote show"" report multiple URLs
rather than warn about them. Multiple URLs are OK for pushing into
multiple repos simultaneously. Without ""-v"" each repo is shown once only.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2733.diff
https://github.com/git/git/commit/352eadc40024b141e1295693654ec20cc123844f,22 Sep 2008,"Check early that a new branch is new and valid

If you fail to update refs to change branches in checkout, your index
and working tree are left already updated. We don't have an easy way
to undo this, but at least we can check things that would make the
creation of a new branch fail. These checks were in the shell version,
and were lost in the C conversion.

The messages are from the shell version, and should probably be made nicer.

[jc: added test to t7201]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2734.diff
https://github.com/git/git/commit/597faa00fdf69491c331f748fc62453726354629,20 Sep 2008,"Typo ""bogos"" in format-patch error message.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2735.diff
https://github.com/git/git/commit/264e0b9a3c090930eec8dd16ecacf551dc685ac1,20 Sep 2008,"Bust the ghost of long-defunct diffcore-pathspec.

This concept was retired by 77882f6 (Retire diffcore-pathspec.,
2006-04-10), more than 2 years ago.

Signed-off-by: Yann Dirson <ydirson@altern.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2736.diff
https://github.com/git/git/commit/c882c01ef9c5a82c1282fd1cb094bb8f97472d7d,19 Sep 2008,"Clarified gitattributes documentation regarding custom hunk header.

The only part of the hunk header that we can change is the ""TEXT""
portion.  Additionally, a few grammatical errors have been corrected.

Signed-off-by: Garry Dolley <gdolley@ucla.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2737.diff
https://github.com/git/git/commit/f18d244a6356947cf0fb753b43c0d6ac4c7b5637,16 Sep 2008,"Start conforming code to ""git subcmd"" style part 3

User notifications are presented as 'git cmd', and code comments
are presented as '""cmd""' or 'git's cmd', rather than 'git-cmd'.

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2738.diff
https://github.com/git/git/commit/6bb6b0341af26739ba305b20c62a433f15029049,10 Sep 2008,"builtin-commit: use commit_tree()

First, it adds less code than removes, second this allows us to use
recuce_heads() for parents, so that the parents of a merge will be
always the same with or without a conflict.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_2739.diff
https://github.com/git/git/commit/90b4a71c493bf24f11b5edee8a519110624a6bea,09 Sep 2008,"is_directory(): a generic helper function

A simple ""grep -e stat --and -e S_ISDIR"" revealed there are many
open-coded implementations of this function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_2740.diff
https://github.com/git/git/commit/05207a28818623e417b69f337a9e8604d799d09d,09 Sep 2008,"Start conforming code to ""git subcmd"" style part 2

User notifications are presented as 'git cmd', and code comments
are presented as '""cmd""' or 'git's cmd', rather than 'git-cmd'.

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2741.diff
https://github.com/git/git/commit/7d66f21a1bfd2d6ea8b1e234befbcc187111cee6,06 Sep 2008,"for-each-ref: `:short` format for `refname`

Tries to shorten the refname to a non-ambiguous name.

Szeder Gábor noticed that the git bash completion takes a
tremendous amount of time to strip leading components from
heads and tags refs (i.e. refs/heads, refs/tags, ...). He
proposed a new atom called 'refbasename' which removes at
most two leading components from the ref name.

I myself, proposed a more dynamic solution, which strips off
common leading components with the matched pattern.

But the current bash solution and both proposals suffer from
one mayor problem: ambiguous refs.

A ref is ambiguous, if it resolves to more than one full refs.
I.e. given the refs refs/heads/xyzzy and refs/tags/xyzzy. The
(short) ref xyzzy can point to both refs.

( Note: Its irrelevant whether the referenced objects are the
  same or not. )

This proposal solves this by checking for ambiguity of the
shorten ref name.

The shortening is done with the same rules for resolving refs
but in the reverse order. The short name is checked if it
resolves to a different ref.

To continue the above example, the output would be like this:

heads/xyzzy
xyzzy

So, if you want just tags, xyzzy is not ambiguous, because it
will resolve to a tag. If you need the heads you get a also
a non-ambiguous short form of the ref.

To integrate this new format into the bash completion to get
only non-ambiguous refs is beyond the scope of this patch.

Signed-off-by: Bert Wesarg <bert.wesarg@googlemail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",180,data/crawl/git/patch_2742.diff
https://github.com/git/git/commit/c7d849243a4be2c60ff48cc42ea8b0518bb7f27f,05 Sep 2008,"merge-recursive: move the global obuf to struct merge_options

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>",38,data/crawl/git/patch_2743.diff
https://github.com/git/git/commit/44a68fd526a70f0aaf213143e22f1257f296e724,03 Sep 2008,"clone: fix creation of explicitly named target directory

'git clone <repo> path/' (note the trailing slash) fails, because the
entire path is interpreted as leading directories. So when mkdir tries to
create the actual path, it already exists.

This makes sure trailing slashes are removed.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_2744.diff
https://github.com/git/git/commit/6eb1b437933e075bd84c5cdcf5de95ed4db4820f,03 Sep 2008,"cherry-pick/revert: make direct internal call to merge_tree()

Refactored merge-recursive interface may still not be ideal but it already
allows us to make a direct call to merge_tree().

One regression is that the status message is lost as there is no way to
flush them from outside the refactored library code yet.

[jc: initial version by Miklos, with moderate amount of fixup by me]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2745.diff
https://github.com/git/git/commit/85e72830697a23dd6b1af8b6bfb3c1a7be60dfae,31 Aug 2008,"cast pid_t's to uintmax_t to improve portability

Some systems (like e.g. OpenSolaris) define pid_t as long,
therefore all our sprintf that use %i/%d cause a compiler warning
beacuse of the implicit long->int cast. To make sure that
we fit the limits, we display pids as PRIuMAX and cast them explicitly
to uintmax_t.

Signed-off-by: David Soria Parra <dsp@php.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2746.diff
https://github.com/git/git/commit/394258190c76dd7944688a3a28931071ec02087d,31 Aug 2008,"git-add --intent-to-add (-N)

This adds ""--intent-to-add"" option to ""git add"".  This is to let the
system know that you will tell it the final contents to be staged later,
iow, just be aware of the presense of the path with the type of the blob
for now.  It is implemented by staging an empty blob as the content.

With this sequence:

    $ git reset --hard
    $ edit newfile
    $ git add -N newfile
    $ edit newfile oldfile
    $ git diff

the diff will show all changes relative to the current commit.  Then you
can do:

    $ git commit -a ;# commit everything

or

    $ git commit oldfile ;# only oldfile, newfile not yet added

to pretend you are working with an index-free system like CVS.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_2747.diff
https://github.com/git/git/commit/f0e90716d47b429284702b75425a247c9fc41adb,31 Aug 2008,"Add help.autocorrect to enable/disable autocorrecting

It is off(0) by default, to avoid scaring people unless they asked to.
If set to a non-0 value, wait for that amount of deciseconds before
running the corrected command.

Suggested by Junio, so he has a chance to hit Ctrl-C.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2748.diff
https://github.com/git/git/commit/8af84dadb142f7321ff0ce8690385e99da8ede2f,31 Aug 2008,"git wrapper: DWIM mistyped commands

This patch introduces a modified Damerau-Levenshtein algorithm into
Git's code base, and uses it with the following penalties to show some
similar commands when an unknown command was encountered:

	swap = 0, insertion = 1, substitution = 2, deletion = 4

A typical output would now look like this:

	$ git sm
	git: 'sm' is not a git-command. See 'git --help'.

	Did you mean one of these?
		am
		rm

The cut-off is at similarity rating 6, which was empirically determined
to give sensible results.

As a convenience, if there is only one candidate, Git continues under
the assumption that the user mistyped it.  Example:

	$ git reabse
	WARNING: You called a Git program named 'reabse', which does
	not exist.
	Continuing under the assumption that you meant 'rebase'
	[...]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/patch_2749.diff
https://github.com/git/git/commit/7e44c93558e7c0b12624d76cf07753d0480ed96a,31 Aug 2008,"'git foo' program identifies itself without dash in die() messages

This is a mechanical conversion of all '*.c' files with:

	s/((?:die|error|warning)\(""git)-(\S+:)/$1 $2/;

The result was manually inspected and no false positive was found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_2750.diff
https://github.com/git/git/commit/bb528633b34ac9c338a7761f3e1d251e0c560ed6,31 Aug 2008,"setup_git_directory(): fix move to worktree toplevel directory

When setup_git_directory() returns successfully, it is supposed to move
current working directory to worktree toplevel directory.

However, the code recomputing prefix inside setup_git_directory() has
to move cwd back to original working directory, in order to get new
prefix.  After that, it should move cwd back to worktree toplevel
directory as expected.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2751.diff
https://github.com/git/git/commit/146ea068a0434a7423d8b0d77f27ccff0a584ac4,31 Aug 2008,"git commit --author=$name: look $name up in existing commits

This allows ""git commit --author=$name"" to accept a name that is not in
the required ""A U Thor <author@example.xz>"" format, and use that to look
up an author name that matches from existing commits.

When using this feature, it is the user's responsibility to give a name
that uniquely matches the name s/he wants, as the logic returns the name
from the first matching commit.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2752.diff
https://github.com/git/git/commit/18668f5319b079cce29e19817bc352b1413e0908,31 Aug 2008,"builtin-merge: avoid run_command_v_opt() for recursive and subtree

The try_merge_strategy() function always ran the strategy in a separate
process, though this is not always necessary. The recursive and subtree
strategy can be called without a fork(). This patch adds a check, and
calls recursive in the same process without wasting resources.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_2753.diff
https://github.com/git/git/commit/8a2fce1895c058945d8e2dbd8cb7456cc7450ad8,31 Aug 2008,"merge-recursive: introduce merge_options

This makes it possible to avoid passing the labels of branches as
arguments to merge_recursive(), merge_trees() and
merge_recursive_generic().

It also takes care of subtree merge, output buffering, verbosity, and
rename limits - these were global variables till now in
merge-recursive.c.

A new function, named init_merge_options(), is introduced as well, it
clears the struct merge_info, then initializes with default values,
finally updates the default values based on the config and environment
variables.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",361,data/crawl/git/patch_2754.diff
https://github.com/git/git/commit/73118f89b81f5a3ed1bb56e2517627d56e9ebdfb,31 Aug 2008,"merge-recursive.c: Add more generic merge_recursive_generic()

merge_recursive_generic() takes, in comparison to to merge_recursive(),
no commit (""struct commit *"") arguments but SHA ids (""unsigned char *""),
and no commit list of bases but an array of refs (""const char **"").

This makes it more generic in the case that it can also take the SHA
of a tree to merge trees without commits, for the bases, the head
and the remote.

merge_recursive_generic() also handles locking and updating of the
index, which is a common use case of merge_recursive().

This patch also rewrites builtin-merge-recursive.c to make use of
merge_recursive_generic().  By doing this, I stumbled over the
limitation of 20 bases and I've added a warning if this limitation
is exceeded.

This patch qualifies make_virtual_commit() as static again because
this function is not needed anymore outside merge-recursive.c.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/patch_2755.diff
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/patch_2756.diff
https://github.com/git/git/commit/392809702016cde59d50a7b07e8c27f6d0ec3c3f,31 Aug 2008,"diff: Help ""less"" hide ^M from the output

When the tracked contents have CRLF line endings, colored diff output
shows ""^M"" at the end of output lines, which is distracting, even though
the pager we use by default (""less"") knows to hide them.

The problem is that ""less"" hides a carriage-return only at the end of the
line, immediately before a line feed.  The colored diff output does not
take this into account, and emits four element sequence for each line:

   - force this color;
   - the line up to but not including the terminating line feed;
   - reset color
   - line feed.

By including the carriage return at the end of the line in the second
item, we are breaking the smart our pager has in order not to show ""^M"".
This can be fixed by changing the sequence to:

   - force this color;
   - the line up to but not including the terminating end-of-line;
   - reset color
   - end-of-line.

where end-of-line is either a single linefeed or a CRLF pair.  When the
output is not colored, ""force this color"" and ""reset color"" sequences are
both empty, so we won't have this problem with or without this patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_2757.diff
https://github.com/git/git/commit/0cf8581e330e7140c9f5c94a53d441187c0f8ff9,31 Aug 2008,"checkout -m: recreate merge when checking out of unmerged index

This teaches git-checkout to recreate a merge out of unmerged
index entries while resolving conflicts.

With this patch, checking out an unmerged path from the index
now have the following possibilities:

 * Without any option, an attempt to checkout an unmerged path
   will atomically fail (i.e. no other cleanly-merged paths are
   checked out either);

 * With ""-f"", other cleanly-merged paths are checked out, and
   unmerged paths are ignored;

 * With ""--ours"" or ""--theirs, the contents from the specified
   stage is checked out;

 * With ""-m"" (we should add ""--merge"" as synonym), the 3-way merge
   is recreated from the staged object names and checked out.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/patch_2758.diff
https://github.com/git/git/commit/b541248467fa47979a34e3f1c5bbe3308fbdc4d1,31 Aug 2008,"merge.conflictstyle: choose between ""merge"" and ""diff3 -m"" styles

This teaches ""git merge-file"" to honor merge.conflictstyle configuration
variable, whose value can be ""merge"" (default) or ""diff3"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2759.diff
https://github.com/git/git/commit/38901a48375952ab6c02f22bddfa19ac2bec2c36,31 Aug 2008,"checkout --ours/--theirs: allow checking out one side of a conflicting merge

This lets you to check out 'our' (or 'their') version of an
unmerged path out of the index while resolving conflicts.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2760.diff
https://github.com/git/git/commit/db9410990ee41f2b253763621c0023c782ec86e2,31 Aug 2008,"checkout -f: allow ignoring unmerged paths when checking out of the index

Earlier we made ""git checkout $pathspec"" to atomically refuse
the operation of $pathspec matched any path with unmerged
stages.  This patch allows:

    $ git checkout -f a b c

to ignore, instead of error out on, such unmerged paths.  The
fix to prevent checkout of an unmerged path from random stages
is still there.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2761.diff
https://github.com/git/git/commit/8fdcf3125465f70c0cad5be5ab192d46e46307c7,30 Aug 2008,"checkout: do not check out unmerged higher stages randomly

During a conflicted merge when you have unmerged stages for a
path F in the index, if you said:

    $ git checkout F

we rewrote F as many times as we have stages for it, and the
last one (typically ""theirs"") was left in the work tree, without
resolving the conflict.

This fixes it by noticing that a specified pathspec pattern
matches an unmerged path, and by erroring out.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_2762.diff
https://github.com/git/git/commit/34baebcee1d66be4cc096a69ba448cd24dcedf21,30 Aug 2008,"Start conforming code to ""git subcmd"" style

User notifications are presented as 'git cmd', and code comments
are presented as '""cmd""' or 'git's cmd', rather than 'git-cmd'.

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2763.diff
https://github.com/git/git/commit/8522148f79c29ef8f63688e7186e458a22333224,30 Aug 2008,"index-pack: use fixup_pack_header_footer()'s validation mode

When completing a thin pack, a new header has to be written to
the pack and a new SHA1 computed.  Make sure that the SHA1 of what
is being read back matches the SHA1 of what was written for both:
the original pack and the appended objects.

To do so, a couple write_or_die() calls were converted to sha1write()
which has the advantage of doing some buffering as well as handling
SHA1 and CRC32 checksum already.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2764.diff
https://github.com/git/git/commit/abeb40e5aa5b4a39799ae1caad241c8c7708053a,30 Aug 2008,"improve reliability of fixup_pack_header_footer()

Currently, this function has the potential to read corrupted pack data
from disk and give it a valid SHA1 checksum.  Let's add the ability to
validate SHA1 checksum of existing data along the way, including before
and after any arbitrary point in the pack.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_2765.diff
https://github.com/git/git/commit/0cfeed2e1d320cc76c434e0bfc26d90065754e46,29 Aug 2008,"make git-shell paranoid about closed stdin/stdout/stderr

It is in general unsafe to start a program with one or more of file
descriptors 0/1/2 closed.  Karl Chen for example noticed that stat_command
does this in order to rename a pipe file descriptor to 0:

    dup2(from, 0);
    close(from);

... but if stdin was closed (for example) from == 0, so that

    dup2(0, 0);
    close(0);

just ends up closing the pipe.  Another extremely rare but nasty problem
would occur if an ""important"" file ends up in file descriptor 2, and is
corrupted by a call to die().

Fixing this in git was considered to be overkill, so this patch works
around it only for git-shell.  The fix is simply to open all the ""low""
descriptors to /dev/null in main.

Signed-off-by: Paolo Bonzini <bonzini@gnu.org>
Acked-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2766.diff
https://github.com/git/git/commit/1f08e5ce2435f1d5c78a31c0a783d5bb177cd657,29 Aug 2008,"Allow git help work without PATH set

Just because we can

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2767.diff
https://github.com/git/git/commit/68daa64df2363f848d818dda9fc414511d9330da,27 Aug 2008,"format-patch: use default diff format even with patch options

Previously, running ""git format-patch -U5"" would cause the
low-level diff machinery to change the diff output format
from ""not specified"" to ""patch"". This meant that
format-patch thought we explicitly specified a diff output
format, and would not use the default format. The resulting
message lacked both the diffstat and the summary, as well as
the separating ""---"".

Now format-patch explicitly checks for this condition and
uses the default. That means that ""git format-patch -p"" will
now have the ""-p"" ignored.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2768.diff
https://github.com/git/git/commit/d47fb8b099d38cde7d3b27b44cc86cd720284d39,26 Aug 2008,"Fix a warning (on cygwin) to allow -Werror

Signed-off-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2769.diff
https://github.com/git/git/commit/460c201039471d22194ca871290c098bfe6ce6a3,26 Aug 2008,"daemon.c: minor style fixup

* ""else"" on the same line as ""}"" that closes corresponding ""if (...) {"";

 * multi-line comments begin with ""/*\n"";

 * sizeof, even it is not a function, is written as ""sizeof(...)"";

 * no need to check x?alloc() return value -- it would have died;

 * ""if (...) { ... }"" that covers the whole function body can be dedented
   by returning from the function early with ""if (!...) return;"";

 * SP on each side of an operator, i.e. ""a > 0"", not ""a>0"";

Also removes stale comment describing how remove_child() used to do its
thing.

Signed-off-by: Junio C Hamano <gitster@pobox.com>:

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_2770.diff
https://github.com/git/git/commit/446247db78a733f44d2470afb1f1983d28058159,24 Aug 2008,"merge: fix numerus bugs around ""trivial merge"" area

The ""trivial merge"" codepath wants to optimize itself by making an
internal call to the read-tree machinery, but it does not read the index
before doing so, and the codepath is never exercised.  Incidentally, this
failure to read the index upfront means that the safety to refuse doing
anything when the index is unmerged does not kick in, either.

These two problem are fixed by using read_cache_unmerged() that does read
the index before checking if it is unmerged at the beginning of
cmd_merge().

The primary logic of the merge, however, assumes that the process never
reads the index in-core, and the call to write_cache_as_tree() it makes
from write_tree_trivial() will always read from the on-disk index that is
prepared the strategy back-ends.  This assumption is now broken by the
above fix.  To fix this issue, we now call discard_cache() before calling
write_tree_trivial() when it wants to write the on-disk index as a tree.

When multiple strategies are tried, their results are evaluated by reading
the resulting index and inspecting it.  The codepath needs to make a call
to read_cache() for each successful strategy, and for that to work, they
need to discard_cache() the one read by the previous round.

Also the ""trivial merge"" forgot that the current commit is one of the
parents of the resulting commit.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_2771.diff
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/patch_2772.diff
https://github.com/git/git/commit/4be636f42cd75f865204817c307eb1a7b464109c,22 Aug 2008,"provide more errors for the ""merge into empty head"" case

A squash merge into an unborn branch could be implemented by building the
index from the merged-from branch, and doing a single commit, but this is
not supported yet.

A non-fast-forward merge into an unborn branch does not make any sense,
because you cannot make a merge commit if you don't have a commit to use
as the parent.

Signed-off-by: Paolo Bonzini <bonzini@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2773.diff
https://github.com/git/git/commit/131f9a108bba5a8b0bcba072696653ab3199911a,21 Aug 2008,"Fix ""git-merge -s bogo"" help text

It does not make much sense to reuse the output code from ""git help"" to
show the list of commands to the standard output while giving the error
message before that to the standard error stream.  This makes the output
consistent to that of the 1.6.0 version of ""git merge"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2774.diff
https://github.com/git/git/commit/fdb2a2a600969598fd80f01b009fbbb020d596ab,19 Aug 2008,"compat: introduce on_disk_bytes()

Some platforms do not have st_blocks member in ""struct stat""; mingw
already emulates it by rounding it up to closest 512-byte blocks (even
though it could overcount when a file has holes).

The reason to use the member is only to figure out how many kilobytes the
files occupy on-disk, so give a helper function in git-compat-util.h to
compute this value.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Johannes Sixt <johannes.sixt@telecom.at>",26,data/crawl/git/patch_2775.diff
https://github.com/git/git/commit/3bd62c21760f92996569bb9335b399a9545a5c41,18 Aug 2008,"git-daemon: rewrite kindergarden, new option --max-connections

Get rid of the fixed array of children and make max-connections
dynamic and configurable.
Fix the killing code to actually kill the newest connections from
duplicate IP-addresses.
Avoid forking if too busy already.

Signed-off-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",222,data/crawl/git/patch_2776.diff
https://github.com/git/git/commit/695605b5080e1957bd9dab1fed35a7fee9814297,18 Aug 2008,"git-daemon: Simplify dead-children reaping logic

Move almost all code out of the child_handler() into check_dead_children().
The fact that systemcalls get interrupted by signals allows us to
make the SIGCHLD signal handler almost a no-op by simply running
check_dead_children() right before waiting on poll().

In case some systems do not interrupt systemcalls upon signal receipt,
all zombies will eventually be collected before the next poll() cycle.

Signed-off-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_2777.diff
https://github.com/git/git/commit/6a992e9e1da08af3e36ab90d5f5b7ee8077630ce,18 Aug 2008,"git-daemon: use LOG_PID, simplify logging code

Make git-daemon use LOG_PID like most daemons, instead of prepending the
pid to the message ourselves, when using syslog(3).

Simplify the logging code by setting stderr to line buffered, instead of
building a single string and writing it out with a single write(2).

Give an extra log message at the daemon start-up.

Signed-off-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2778.diff
https://github.com/git/git/commit/df0daf8ac0fce4bb98d5aff9295535a1606d2fad,18 Aug 2008,"git-daemon: call logerror() instead of error()

Use logerror(), not error(), so that the messages won't be lost,
especially when running the daemon with its log sent to the syslog
facility.

Signed-off-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2779.diff
https://github.com/git/git/commit/90fb46ec83cd837364592ce4d95055a3b6fe89a4,17 Aug 2008,"builtin-reflog: Allow reflog expire to name partial ref

This allows you to specify 'git reflog expire master' without needing
to give the full refname like 'git reflog expire refs/heads/master'

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2780.diff
https://github.com/git/git/commit/f223824943e23e593b5e9cc647417a4267acc82d,17 Aug 2008,"count-objects: Add total pack size to verbose output

Adds the total pack size (including indexes) the verbose count-objects
output, floored to the nearest kilobyte.

Updates documentation to match this addition.

Signed-off-by: Marcus Griep <marcus@griep.us>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2781.diff
https://github.com/git/git/commit/bfdbee98109c5ad2dbbc392e7eed1ae688acc039,17 Aug 2008,"tests: use $TEST_DIRECTORY to refer to the t/ directory

Many test scripts assumed that they will start in a 'trash' subdirectory
that is a single level down from the t/ directory, and referred to their
test vector files by asking for files like ""../t9999/expect"".  This will
break if we move the 'trash' subdirectory elsewhere.

To solve this, we earlier introduced ""$TEST_DIRECTORY"" so that they can
refer to t/ directory reliably.  This finally makes all the tests use
it to refer to the outside environment.

With this patch, and a one-liner not included here (because it would
contradict with what Dscho really wants to do):

| diff --git a/t/test-lib.sh b/t/test-lib.sh
| index 70ea7e0..60e69e4 100644
| --- a/t/test-lib.sh
| +++ b/t/test-lib.sh
| @@ -485,7 +485,7 @@ fi
|  . ../GIT-BUILD-OPTIONS
|
|  # Test repository
| -test=""trash directory""
| +test=""trash directory/another level/yet another""
|  rm -fr ""$test"" || {
|         trap - exit
|         echo >&5 ""FATAL: Cannot prepare test area""

all the tests still pass, but we would want extra sets of eyeballs on this
type of change to really make sure.

[jc: with help from Stephan Beyer on http-push tests I do not run myself;
 credits for locating silly quoting errors go to Olivier Marin.]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",286,data/crawl/git/patch_2782.diff
https://github.com/git/git/commit/b259f09b181c6650253f2ab60f5375d3ff8e3872,17 Aug 2008,"Make push more verbose about illegal combination of options

It may be unclear that --all, --mirror, --tags and/or explicit refspecs
are illegal combinations for git push.

Git was silently failing in these cases, while we can complaint more
properly about it.

Signed-off-by: Marek Zawirski <marek.zawirski@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2783.diff
https://github.com/git/git/commit/16ce2e4c8f9664f8ec5ae2bffed34d093d83a4d3,17 Aug 2008,"index: future proof for ""extended"" index entries

We do not have any more bits in the on-disk index flags word, but we would
need to have more in the future.  Use the last remaining bits as a signal
to tell us that the index entry we are looking at is an extended one.

Since we do not understand the extended format yet, we will just error out
when we see it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2784.diff
https://github.com/git/git/commit/6d6f9cddbe419710a36e778a50a7712ac4ba016f,12 Aug 2008,"pack-objects: Allow missing base objects when creating thin packs

If we are building a thin pack and one of the base objects we would
consider for deltification is missing its OK, the other side already
has that base object.  We may be able to get a delta from another
object, or we can simply send the new object whole (no delta).

This change allows a shallow clone to store only the objects which
are unique to it, as well as the boundary commit and its trees, but
avoids storing the boundary blobs.  This special form of a shallow
clone is able to represent just the difference between two trees.

Pack objects change suggested by Nicolas Pitre.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_2785.diff
https://github.com/git/git/commit/04c6e9e9ca34226db095bbaa1218030f99f0b7c6,12 Aug 2008,"diff --check: do not unconditionally complain about trailing empty lines

Recently ""git diff --check"" learned to detect new trailing blank lines
just like ""git apply --whitespace"" does.  However this check should not
trigger unconditionally.  This patch makes it honor the whitespace
settings from core.whitespace and gitattributes.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2786.diff
https://github.com/git/git/commit/55beff4f536011e5d7f17ae63911f1bb56308feb,11 Aug 2008,"Fix deleting reflog entries from HEAD reflog

dwim_ref() used to resolve HEAD symbolic ref to its target (i.e. current
branch).  This incorrectly removed the reflog entry from the current
branch when 'git reflog delete HEAD@{1}' was asked for.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2787.diff
https://github.com/git/git/commit/fd35e42683113e367eee0bb8ac956dde3d95edde,07 Aug 2008,"Fail properly when cloning from invalid HTTP URL

Currently, when cloning from invalid HTTP URL, git clone will possibly
return curl error, then a confusing message about remote HEAD and then
return success and leave an empty repository behind, confusing either
the end-user or the automated service calling it (think repo.or.cz).

This patch changes the error() calls in get_refs_via_curl() to die()s,
akin to the other get_refs_*() functions.

Cc: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2788.diff
https://github.com/git/git/commit/611921654ffb854338ab758009a93c70054fab7f,04 Aug 2008,"git-svn: Abort with an error if 'fetch' parameter is invalid.

Previously, if a config entry looked like this:

         svn-remote.svn.fetch=:refs/heads/whatever

git-svn would silently do nothing if you asked it to ""git svn fetch"", and
give a strange error if asked to ""git svn dcommit"".  What it really wants is
a line that looks like this:

	svn-remote.svn.fetch=:refs/remotes/whatever

So we should simply abort if we get the wrong thing.

On the other hand, there's actually no good reason for git-svn to enforce
using the refs/remotes namespace, but the code seems to have hardcoded this
in several places and I'm not brave enough to try to fix it all right now.

Signed-off-by: Avery Pennarun <apenwarr@gmail.com>
Acked-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2789.diff
https://github.com/git/git/commit/7c5b1675a88a52be1822129e4aa915c5531f6700,03 Aug 2008,"git-name-rev: don't use printf without format

printf() without an explicit format string is not a good coding practise,
unless the printed string is guaranteed to not contain percent signs.  While
fixing this, we might as well combine the calls to fwrite() and printf().

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2790.diff
https://github.com/git/git/commit/b003c00b7b5e352569061fec0b1e1bd0d0fa8b6a,02 Aug 2008,"git-name-rev: allow --name-only in combination with --stdin

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2791.diff
https://github.com/git/git/commit/e8b55fab6237b30494aa1905c3209d5bf5494a29,02 Aug 2008,"builtin-name-rev.c: split deeply nested part from the main function

The main function of this command implementation tries to do too many
things.  Split out a handling of single input line into a separate
function to reduce nesting level and clutter.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_2792.diff
https://github.com/git/git/commit/1e5f7add985dbccc0e811dbb6eff5047d8843118,02 Aug 2008,"builtin-revert.c: typofix

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2793.diff
https://github.com/git/git/commit/fdc7c81111a2ca8d97b8b45e260d7a4e737c8766,31 Jul 2008,"Compact commit template message

We recently let the user know explicitly that an empty
commit message will abort the commit. However, this adds yet
another line to the template; let's rephrase and re-wrap so
that this fits back on two lines.

This patch also makes the ""fatal: empty commit message?""
warning a bit less scary, since this is now a ""feature""
instead of an error. However, we retain the non-zero exit
status to indicate to callers that nothing was committed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2794.diff
https://github.com/git/git/commit/c4aca9ccda51badb672ab70099863072d1567267,30 Jul 2008,"Fix test-parse-options ""integer"" test

OPT_INTEGER() works on an integer, not on an unsigned long.  On a big
endian architecture with long larger than int, integer test gives bogus
results because of this bug.

Reported by H.Merijn Brand in HP-UX 64-bit environment.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_2795.diff
https://github.com/git/git/commit/5354a56fe70420c147f930e0f7f1decbae685d19,30 Jul 2008,"Replace uses of ""git-var"" with ""git var""

Signed-off-by: Todd Zullinger <tmz@pobox.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2796.diff
https://github.com/git/git/commit/4fac1d3a98bb86d855b706d7ce6a5069b9f687e8,30 Jul 2008,"archive: allow --exec and --remote without equal sign

Convert git archive to parse_options().  The parameters --remote and --exec
are still handled by their special parser.  Define them anyway in order for
them to show up in the usage notice.

Note: in a command like ""git archive --prefix --remote=a/ HEAD"", the string
""--remote=a/"" will be interpreted as a remote option, not a prefix, because
that special parser sees it first.  If one needs such a strange prefix, it
needs to be specified like this: ""git archive --prefix=--remote=a/ HEAD""
(with an equal sign).

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_2797.diff
https://github.com/git/git/commit/ae7c5dcef92d46cfc8987fde2c264614fe475bd1,30 Jul 2008,"Support copy and rename detection in fast-export.

Although it does not matter for Git itself, tools that
export to systems that explicitly track copies and
renames can benefit from such information.

This patch makes fast-export output correct action
logs when -M or -C are enabled.

Signed-off-by: Alexander Gavrilov <angavrilov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/patch_2798.diff
https://github.com/git/git/commit/df57accb46695b50e2db94424e9d4ebfed0694c8,29 Jul 2008,"merge-base: die with an error message if not passed a commit ref

Before this patch ""git merge-base"" just exited with error code 1
and without an error message in case it was passed a ref to an
object that is not a commit (for example a tree).

This patch makes it ""die"" in this case with an error message.

While at it, this patch also refactors the code to get the
commit reference from an argument into a new
""get_commit_reference"" function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_2799.diff
https://github.com/git/git/commit/c297432d0d245af5505e0f5f99a5267119dd421e,29 Jul 2008,"Documentation: clarify what is shown in ""git-ls-files -s"" output

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2800.diff
https://github.com/git/git/commit/81dc2307d0ad87a4da2e753a9d1b5586d6456eed,27 Jul 2008,"git-mv: Keep moved index entries inact

The rewrite of git-mv from a shell script to a builtin was perhaps
a little too straightforward: the git add and git rm queues were
emulated directly, which resulted in a rather complicated code and
caused an inconsistent behaviour when moving dirty index entries;
git mv would update the entry based on working tree state,
except in case of overwrites, where the new entry would still have
sha1 of the old file.

This patch introduces rename_index_entry_at() into the index toolkit,
which will rename an entry while removing any entries the new entry
might render duplicate. This is then used in git mv instead
of all the file queues, resulting in a major simplification
of the code and an inevitable change in git mv -n output format.

Also the code used to refuse renaming overwriting symlink with a regular
file and vice versa; there is no need for that.

A few new tests have been added to the testsuite to reflect this change.

Signed-off-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/patch_2801.diff
https://github.com/git/git/commit/346d437aab2496872f477bb759db10a43b5dfb5e,27 Jul 2008,"builtin-branch: remove duplicated code

The previous optimization to --[no-]merged ended up with some duplicated
code which this patch removes.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2802.diff
https://github.com/git/git/commit/10c4c881c4d2cb0ece0508e7142e189e68445257,26 Jul 2008,"Allow add_path() to add non-existent directories to the path

This function had used make_absolute_path(); but this function dies if
the directory that contains the entry whose relative path was supplied in
the argument does not exist. This is a problem if the argument is, for
example, ""../libexec/git-core"", and that ""../libexec"" does not exist.

Since the resolution of symbolic links is not required for elements in
PATH, we can fall back to using make_nonrelative_path(), which simply
prepends $PWD to the path.

We have to move make_nonrelative_path() alongside make_absolute_path() in
abspath.c so that git-shell can be linked. See 5b8e6f85f.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/patch_2803.diff
https://github.com/git/git/commit/819b2b58246a7927376930e266b4ef8b43096115,26 Jul 2008,"archive: allow --exec and --remote without equal sign

Allow ""--remote repo"" and ""--exec cmd"" in addition to ""--remote=repo"" and
""--exec=cmd"" to make their usage consistent with parameters handled by
parse_options().

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2804.diff
https://github.com/git/git/commit/7f4d0511af9d6c93656dda5a683632f5ae5b5278,26 Jul 2008,"archive: define MAX_ARGS where it's needed

MAX_EXTRA_ARGS is not used anymore, so remove it.  MAX_ARGS is used only
in builtin-upload-archive.c, so define it there.  Also report the actual
value we're comparing against when the number of args is too big.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2805.diff
https://github.com/git/git/commit/c0885435537e4b93709d2bf39ce36454186057a1,26 Jul 2008,"archive: move parameter parsing code to archive.c

write_archive() in archive.c is the only callsite for the command line
parsing functions located in builtin-archive.c.  Move them to the place
where they are used, un-export them and make them static, as hinted at
by Stephan.

Cc: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",282,data/crawl/git/patch_2806.diff
https://github.com/git/git/commit/7198203ae37c11327c0d01f1e37f3e74381755a9,26 Jul 2008,"editor.c: Libify launch_editor()

This patch removes exit()/die() calls and builtin-specific messages
from launch_editor(), so that it can be used as a general libgit.a
function to launch an editor.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2807.diff
https://github.com/git/git/commit/d82f33e20dcf068e679eff2a16ecf8fe7b10fb31,26 Jul 2008,"Move launch_editor() from builtin-tag.c to editor.c

launch_editor() is declared in strbuf.h but defined in builtin-tag.c.
This patch moves launch_editor() into a new source file editor.c,
but keeps the declaration in strbuf.h.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_2808.diff
https://github.com/git/git/commit/859fdabaede6733c98b1ca8df2fabce000522bf9,25 Jul 2008,"git-checkout: improve error messages, detect ambiguities.

The patch is twofold: it moves the option consistency checks just under
the parse_options call so that it doesn't get in the way of the tree
reference vs. pathspecs desambiguation.

The other part rewrites the way to understand arguments so that when
git-checkout fails it does with an understandable message. Compared to the
previous behavior we now have:

  - a better error message when doing:

        git checkout <blob reference> --

    now complains about the reference not pointing to a tree, instead of
    things like:

        error: pathspec <blob reference> did not match any file(s) known to git.
        error: pathspec '--' did not match any file(s) known to git.

  - a better error message when doing:

        git checkout <path> --

    It now complains about <path> not being a reference instead of the
    completely obscure:

        error: pathspec '--' did not match any file(s) known to git.

  - an error when -- wasn't used, and the first argument is ambiguous
    (i.e. can be interpreted as both ref and as path).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/patch_2809.diff
https://github.com/git/git/commit/0e8316cc16f1a938c36f12f5fcae4a081b6ec6ff,25 Jul 2008,"Teach fsck and prune about the new location of temporary objects

Since 5723fe7e, temporary objects are now created in their final destination
directories, rather than in .git/objects/. Teach fsck to recognize and
ignore the temporary objects it encounters, and teach prune to remove them.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2810.diff
https://github.com/git/git/commit/f9bbefc701e319983bb8e13df8d615293c6f386a,23 Jul 2008,"git daemon: avoid waking up too often

To avoid waking up unnecessarily, a pipe is set up that is only ever
written to by child_handler(), when a child disconnects, as suggested
per Junio.

This avoids waking up the main process every second to see if a child
was disconnected.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2811.diff
https://github.com/git/git/commit/68067ca1efcbb0408b931e08654a5e32de975ced,23 Jul 2008,"builtin-branch.c: optimize --merged and --no-merged

""git branch --no-merged $commit"" used to compute the merge base between
the tip of each and every branch with the named $commit, but this was
wasteful when you have many branches.  Inside append_ref() we literally
ran has_commit() between the tip of the branch and the merge_filter_ref.

Instead, we can let the revision machinery traverse the history as if we
are running:

    $ git rev-list --branches --not $commit

by queueing the tips of branches we encounter as positive refs (this
mimicks the ""--branches"" option in the above command line) and then
appending the merge_filter_ref commit as a negative one, and finally
calling prepare_revision_walk() to limit the list..

After the traversal is done, branch tips that are reachable from $commit
are painted UNINTERESTING; they are already fully contained in $commit
(i.e. --merged).  Tips that are not painted UNINTERESTING still have
commits that are not reachable from $commit, thus ""--no-merged"" will show
them.

With an artificial repository that has ""master"" and 1000 test-$i branches
where they were created by ""git branch test-$i master~$i"":

    (with patch)
    $ /usr/bin/time git-branch --no-merged master >/dev/null
    0.12user 0.02system 0:00.15elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+1588minor)pagefaults 0swaps

    $ /usr/bin/time git-branch --no-merged test-200 >/dev/null
    0.15user 0.03system 0:00.18elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+1711minor)pagefaults 0swaps

    (without patch)
    $ /usr/bin/time git-branch --no-merged master >/dev/null
    0.69user 0.03system 0:00.72elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+2229minor)pagefaults 0swaps

    $ /usr/bin/time git-branch --no-merged test-200 >/dev/null
    0.58user 0.03system 0:00.61elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+2248minor)pagefaults 0swaps

Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_2812.diff
https://github.com/git/git/commit/0dda1d1ec816c613c9c0fd9b55ef0d3b782b84e8,22 Jul 2008,"Fix two leftovers from path_list->string_list

In the documentation, where you cannot get compile errors for using the
wrong member name, there were two mentions of 'path' left.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2813.diff
https://github.com/git/git/commit/1719b5e446f54e4196903ae6ed5f8867a5755bf6,22 Jul 2008,"builtin-merge: give a proper error message for invalid strategies in config

'git merge -s foobar' diagnosed invalid ""foobar"" strategy and errored out
with a message, but foobar in pull.twohead or pull.octopus was just
silently ignored.  This makes invalid strategy both on the command line
and in the configuration file to trigger the same error.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_2814.diff
https://github.com/git/git/commit/ac2e28c0a43ced3837fbbcf66fd693244b6c6693,22 Jul 2008,"tests: do not rely on external ""patch""

Some of our tests assumed a working ""patch"" command to produce expected
results when checking ""git-apply"", but some systems have broken ""patch"".

We can compare our output with expected output that is precomputed
instead to sidestep this issue.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",313,data/crawl/git/patch_2815.diff
https://github.com/git/git/commit/c455c87c5cd42bbbe586b31cea1143132f3a39e4,22 Jul 2008,"Rename path_list to string_list

The name path_list was correct for the first usage of that data structure,
but it really is a general-purpose string list.

$ perl -i -pe 's/path-list/string-list/g' $(git grep -l path-list)
$ perl -i -pe 's/path_list/string_list/g' $(git grep -l path_list)
$ git mv path-list.h string-list.h
$ git mv path-list.c string-list.c
$ perl -i -pe 's/has_path/has_string/g' $(git grep -l has_path)
$ perl -i -pe 's/path/string/g' string-list.[ch]
$ git mv Documentation/technical/api-path-list.txt \
	Documentation/technical/api-string-list.txt
$ perl -i -pe 's/strdup_paths/strdup_strings/g' $(git grep -l strdup_paths)

... and then fix all users of string-list to access the member ""string""
instead of ""path"".

Documentation/technical/api-string-list.txt needed some rewrapping, too.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1109,data/crawl/git/patch_2816.diff
https://github.com/git/git/commit/d14e7407b34b8c11b407358b9677c283c381a71c,21 Jul 2008,"""needs update"" considered harmful

""git update-index --refresh"", ""git reset"" and ""git add --refresh"" have
reported paths that have local modifications as ""needs update"" since the
beginning of git.

Although this is logically correct in that you need to update the index at
that path before you can commit that change, it is now becoming more and
more clear, especially with the continuous push for user friendliness
since 1.5.0 series, that the message is suboptimal.  After all, the change
may be something the user might want to get rid of, and ""updating"" would
be absolutely a wrong thing to do if that is the case.

I prepared two alternatives to solve this.  Both aim to reword the message
to more neutral ""locally modified"".

This patch is a more intrusive variant that changes the message for only
Porcelain commands (""add"" and ""reset"") while keeping the plumbing
""update-index"" intact.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2817.diff
https://github.com/git/git/commit/74f5b7fba420eb6b807db48d0ee7a000202f8225,20 Jul 2008,"builtin-merge.c: Fix option parsing

Now ""git merge -m"" needs a message, and errors out with the usage
text if none is given.
This way, t7600-merge.sh is fixed.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Acked-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2818.diff
https://github.com/git/git/commit/03db4525d38119f7778d6e9117f27c47db8466d4,19 Jul 2008,"Support gitlinks in fast-import.

Currently fast-import/export cannot be used for
repositories with submodules. This patch extends
the relevant programs to make them correctly
process gitlinks.

Links can be represented by two forms of the
Modify command:

M 160000 SHA1 some/path

which sets the link target explicitly, or

M 160000 :mark some/path

where the mark refers to a commit. The latter
form can be used by importing tools to build
all submodules simultaneously in one physical
repository, and then simply fetch them apart.

Signed-off-by: Alexander Gavrilov <angavrilov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",232,data/crawl/git/patch_2819.diff
https://github.com/git/git/commit/c09df8a74e8b5e106ad853cbb1e52f36b3663386,19 Jul 2008,"Add ANSI control code emulation for the Windows console

This adds only the minimum necessary to keep git pull/merge's diffstat from
wrapping. Notably absent is support for the K (erase) operation, and support
for POSIX write.

Signed-off-by: Peter Harris <git@peter.is-a-geek.org>
Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",358,data/crawl/git/patch_2820.diff
https://github.com/git/git/commit/4d2646727997c82c04a82ce38e56d76e7b5d268b,19 Jul 2008,"builtin-rm: fix index lock file path

When hold_locked_index() is called with a relative git_dir and you are
outside the work tree, the lock file become relative to the current
directory. So when later setup_work_tree() change the current directory
it breaks lock file path and commit_locked_index() fails.

This patch move index locking code after setup_work_tree() call to make
lock file relative to the working tree as it should be and add a test
case.

Noticed by Nick Andrew.

Signed-off-by: Olivier Marin <dkr@freesurf.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2821.diff
https://github.com/git/git/commit/b526f8ed4de646bb914da43b60322852febde758,15 Jul 2008,"shortlog: support --pretty=format: option

With this patch, the user can override the default setting, to print
the commit messages using a user format instead of the onelines of the
commits.  Example:

	$ git shortlog --pretty='format:%s (%h)' <commit>..

Note that shortlog will only respect a user format setting, as the other
formats do not make much sense.

Wished for by Andrew Morton.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2822.diff
https://github.com/git/git/commit/489e351ea03e78746bad0c0ad4fcf4a63920256d,15 Jul 2008,"archive: remove extra arguments parsing code

Replace the code that calls backend specific argument parsers by a
simple flag mechanism.  This reduces code size and complexity.

We can add back such a mechanism (based on incremental parse_opt(),
perhaps) when we need it.  The compression level parameter, though,
is going to be shared by future compressing backends like tgz.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2823.diff
https://github.com/git/git/commit/562e25abea9f1f2d443053279c009a88d81a592b,15 Jul 2008,"archive: centralize archive entry writing

Add the exported function write_archive_entries() to archive.c, which uses
the new ability of read_tree_recursive() to pass a context pointer to its
callback in order to centralize previously duplicated code.

The new callback function write_archive_entry() does the work that every
archiver backend needs to do: loading file contents, entering subdirectories,
handling file attributes, constructing the full path of the entry.  All that
done, it calls the backend specific write_archive_entry_fn_t function.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",287,data/crawl/git/patch_2824.diff
https://github.com/git/git/commit/92392b4a4530056918174988200d7c10286a4acd,15 Jul 2008,"index-pack: Honor core.deltaBaseCacheLimit when resolving deltas

If we are trying to resolve deltas for a long delta chain composed
of multi-megabyte objects we can easily run into requiring 500M+
of memory to hold each object in the chain on the call stack while
we recurse into the dependent objects and resolve them.

We now use a simple delta cache that discards objects near the
bottom of the call stack first, as they are the most least recently
used objects in this current delta chain.  If we recurse out of a
chain we may find the base object is no longer available, as it was
free'd to keep memory under the deltaBaseCacheLimit.  In such cases
we must unpack the base object again, which will require recursing
back to the root of the top of the delta chain as we released that
root first.

The astute reader will probably realize that we can still exceed
the delta base cache limit, but this happens only if the most
recent base plus the delta plus the inflated dependent sum up to
more than the base cache limit.  Due to the way patch_delta is
currently implemented we cannot operate in less memory anyway.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_2825.diff
https://github.com/git/git/commit/03993e139cafd04c3783902243328442a5b4aa2c,15 Jul 2008,"index-pack: Track the object_entry that creates each base_data

If we free the data stored within a base_data we need the struct
object_entry to get the data back again for use with another dependent
delta.  Storing the object_entry* in base_data makes it simple to call
get_data_from_pack() to recover the compressed information.

This however means that we must add the missing base object to the end of
our packfile prior to calling resolve_delta() on each of the dependent
deltas.  Adding the base first ensures we can read the base back from the
pack we are indexing, as if it had been included by the remote side.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2826.diff
https://github.com/git/git/commit/ac9391093f54370ff3f06470e24d78b536a12327,15 Jul 2008,"restore legacy behavior for read_sha1_file()

Since commit 8eca0b47ff1598a6d163df9358c0e0c9bd92d4c8, it is possible
for read_sha1_file() to return NULL even with existing objects when they
are corrupted.  Previously a corrupted object would have terminated the
program immediately, effectively making read_sha1_file() return NULL
only when specified object is not found.

Let's restore this behavior for all users of read_sha1_file() and
provide a separate function with the ability to not terminate when
bad objects are encountered.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_2827.diff
https://github.com/git/git/commit/3b6121f69b2a27c3bbff5cc3056c30b15394441b,14 Jul 2008,"git-mailinfo: use strbuf's instead of fixed buffers

Signed-off-by: Lukas Sandström <lukass@etek.chalmers.se>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",757,data/crawl/git/patch_2828.diff
https://github.com/git/git/commit/4804aabcdbffb41dba96825ca2693ea45830a108,13 Jul 2008,"help (Windows): Display HTML in default browser using Windows' shell API

The system's default browser for displaying HTML help pages is now used
directly on Windows, instead of launching git-web--browser, which
requires a Unix shell.  Avoiding MSYS' bash when possible is good
because it avoids potential path translation issues.  In this case it is
not too hard to avoid launching a shell, so let's avoid it.

The Windows-specific code is implemented in compat/mingw.c to avoid
platform-specific code in the main code base.  On Windows, open_html is
provided as a define.  If open_html is not defined, git-web--browse is
used.  This approach avoids platform-specific ifdefs by using
per-function ifdefs.  The ""ifndef open_html"" together with the
introductory comment should sufficiently warn developers, so that they
hopefully will not break this mechanism.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_2829.diff
https://github.com/git/git/commit/868da8d5e329c951f0d0cd049a8f9fecda64d388,13 Jul 2008,"help.c: Add support for htmldir relative to git_exec_path()

If htmldir (in the Makefile) is a relative path, this path will now be
interpreted relative to git_exec_path.  This can be used to create an
installation that can be moved to a different directory without
re-compiling.  The Windows installer (msysgit) is an example for such
a setup.

Note that the Makefile maps htmldir to the define GIT_HTML_PATH.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2830.diff
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/patch_2831.diff
https://github.com/git/git/commit/6b61ec0564993d2e60f7eb56c0f0fd9c313d5e2c,09 Jul 2008,"revisions: refactor handle_revision_opt into parse_revision_opt.

It seems we're using handle_revision_opt the same way each time, have a
wrapper around it that does the 9-liner we copy each time instead.

handle_revision_opt can be static in the module for now, it's always
possible to make it public again if needed.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2832.diff
https://github.com/git/git/commit/14ec9cbdae1991a14aa1cce251e44ea5cfee5ade,09 Jul 2008,"git-shortlog: migrate to parse-options partially.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/patch_2833.diff
https://github.com/git/git/commit/049716b370f2cebdbdeb278eb2a8c4eff8ed0acd,09 Jul 2008,"branch --merged/--no-merged: allow specifying arbitrary commit

""git-branch --merged"" is a handy way to list all the branches that have
already been merged to the current branch, but it did not allow checking
against anything but the current branch.  Having to switch branches only
to list the branches that are merged with another branch made the feature
practically useless.

This updates the option parser so that ""git branch --merged next"" is
accepted when you are on 'master' branch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_2834.diff
https://github.com/git/git/commit/1cc6985ca7dd3aaab0617ec0fd00d4eb0b424465,09 Jul 2008,"parse-options: add PARSE_OPT_LASTARG_DEFAULT flag

If you set this for a given option, and the optoin appears without an
argument on the command line, then the `defval' is used as its argument.

Note that this flag is meaningless in presence of OPTARG or NOARG flags.
(in the current implementation it will be ignored, but don't rely on it).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_2835.diff
https://github.com/git/git/commit/e09c4e753c337d914f4eb7a05cb5e8bbfc362489,09 Jul 2008,"Start preparing release notes for 1.5.6.3

Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_2836.diff
https://github.com/git/git/commit/3f8d5204896a85d9268c579fc3e31b22b33fb803,08 Jul 2008,"git-blame: migrate to incremental parse-option [2/2]

Now use handle_revision_args instead of parse_revisions, and simplify the
handling of old-style arguments a lot thanks to the filtering.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",130,data/crawl/git/patch_2837.diff
https://github.com/git/git/commit/5817da01434a24e693ea4d5ba6680d488f5f543f,08 Jul 2008,"git-blame: migrate to incremental parse-option [1/2]

This step merely moves the parser to an incremental version, still using
parse_revisions.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/patch_2838.diff
https://github.com/git/git/commit/02e542206f26cf06817ec2e9ffecf4f416e8e332,08 Jul 2008,"revisions: split handle_revision_opt() from setup_revisions()

Add two fields to struct rev_info:

 - .def to store --default argument; and
 - .show_merge 1-bit field.

handle_revision_opt() is able to deal with any revision option, and
consumes them, and leaves revision arguments or pseudo arguments
(like --all, --not, ...) in place.

For now setup_revisions() does a pass of handle_revision_opt() again
so that code not using it in a parse-opt parser still work the same.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",552,data/crawl/git/patch_2839.diff
https://github.com/git/git/commit/d1a4489a56e2ceac8e7dc9eb277a9f36fec725c5,08 Jul 2008,"avoid null SHA1 in oldest reflog

When the user specifies a ref by a reflog entry older than
one we have (e.g., ""HEAD@{20 years ago""}), we issue a
warning and give them the ""from"" value of the oldest reflog
entry. That is, we say ""we don't know what happened before
this entry, but before this we know we had some particular
SHA1"".

However, the oldest reflog entry is often a creation event
such as clone or branch creation. In this case, the entry
claims that the ref went from ""00000..."" (the null sha1) to
the new value, and the reflog lookup returns the null sha1.

While this is technically correct (the entry tells us that
the ref didn't exist at the specified time) it is not
terribly useful to the end user. What they probably want
instead is ""the oldest useful sha1 that this ref ever had"".
This patch changes the behavior such that if the oldest ref
would return the null sha1, it instead returns the first
value the ref ever had.

We never discovered this problem in the test scripts because
we created ""fake"" reflogs that had only a specified segment
of history. This patch updates the tests with a creation
event at the beginning of history.

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2840.diff
https://github.com/git/git/commit/0b294c0abf00a9cf7468e0ea62722ae23b0816cc,08 Jul 2008,"make deleting a missing ref more quiet

If git attempts to delete a ref, but the unlink of the ref
file fails, we print a message to stderr. This is usually a
good thing, but if the error is ENOENT, then it indicates
that the ref has _already_ been deleted. And since that's
our goal, it doesn't make sense to complain to the user.

This harmonizes the error reporting behavior for the
unpacked and packed cases; the packed case already printed
nothing on ENOENT, but the unpacked printed unconditionally.

Additionally, send-pack would, when deleting the tracking
ref corresponding to a remote delete, print ""Failed to
delete"" on any failure. This can be a misleading
message, since we actually _did_ delete at the remote side,
but we failed to delete locally. Rather than make the
message more precise, let's just eliminate it entirely; the
delete_ref routine already takes care of printing out a much
more specific message about what went wrong.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2841.diff
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/patch_2842.diff
https://github.com/git/git/commit/7b9c0a69a5f64fffb5de8b49a96f41ac35b4a84f,07 Jul 2008,"git-commit-tree: make it usable from other builtins

Move all functionality (except option parsing) from cmd_commit_tree() to
commit_tree(), so that other builtins can use it without a child
process.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_2843.diff
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/patch_2844.diff
https://github.com/git/git/commit/0989fe9623dc8d98033f6acdcc0c84ec28571b19,01 Jul 2008,"Move split_cmdline() to alias.c

split_cmdline() is currently used for aliases only, but later it can be
useful for other builtins as well. Move it to alias.c for now,
indicating that originally it's for aliases, but we'll have it in libgit
this way.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/patch_2845.diff
https://github.com/git/git/commit/ef98c5cafb3e799b1568bb843fcd45920dc62f16,28 Jun 2008,"commit-tree: lift completely arbitrary limit of 16 parents

There is no really good reason to have a merge with more than 16
parents, but we have a history of giving our users rope.

Combined with the fact that there was no good reason for that
arbitrary limit in the first place, here is an all-too-easy to fix.

Kind of wished-for by Len Brown.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2846.diff
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/patch_2847.diff
https://github.com/git/git/commit/4c2d5d722c4775c1efd5e63f41ba5b303ec8fb65,26 Jun 2008,"Add 'git-p4.allowSubmit' to git-p4

I'm working with a perforce repo using git-p4. There are some config
files which I need to change locally according to my environment. I'm
using a 'local' git branch to park these changes. And I want to avoid
accidentally checking them into p4 just by doing ""git p4 submit""
mindlessly without realizing which branch I'm actually on.

This patch adds a new git config, 'git-p4.allowSubmit', which is a
whitelist of branch names. ""git p4 submit"" will only allow submissions
from local branches on the list. Useful for preventing inadvertently
submitting from a strictly local branch.

For backward compatibility, if this config is not set at all,
submissions from all branches are allowed.

Signed-off-by: Jing Xue <jingxue@digizenstudio.com>
Acked-By: Simon Hausmann <simon@lst.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2848.diff
https://github.com/git/git/commit/2beebd22f4af8788eaf19d811de03191ae6f7c42,25 Jun 2008,"clone: create intermediate directories of destination repo

The shell version used to use ""mkdir -p"" to create the repo
path, but the C version just calls ""mkdir"". Let's replicate
the old behavior. We have to create the git and worktree
leading dirs separately; while most of the time, the
worktree dir contains the git dir (as .git), the user can
override this using GIT_WORK_TREE.

We can reuse safe_create_leading_directories, but we need to
make a copy of our const buffer to do so. Since
merge-recursive uses the same pattern, we can factor this
out into a global function. This has two other cleanup
advantages for merge-recursive:

  1. mkdir_p wasn't a very good name. ""mkdir -p foo/bar"" actually
     creates bar, but this function just creates the leading
     directories.

  2. mkdir_p took a mode argument, but it was completely
     ignored.

Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2849.diff
https://github.com/git/git/commit/c41a4a9468b0c728e77ec5d97da7bfb63776ac3f,25 Jun 2008,"verify-pack: check packed object CRC when using index version 2

To do so, check_pack_crc() moved from builtin-pack-objects.c to
pack-check.c where it is more logical to share.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2850.diff
https://github.com/git/git/commit/77d3ecee85dbf354d2059d7ef65d788d90db3efa,25 Jun 2008,"move show_pack_info() where it belongs

This is called when verify_pack() has its verbose argument set, and
verbose in this context makes sense only for the actual 'git verify-pack'
command.  Therefore let's move show_pack_info() to builtin-verify-pack.c
instead and remove useless verbose argument from verify_pack().

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/patch_2851.diff
https://github.com/git/git/commit/99093238bbf2cd886debf7bdb91478cb405ef66d,25 Jun 2008,"optimize verify-pack a bit

Using find_pack_entry_one() to get object offsets is rather suboptimal
when nth_packed_object_offset() can be used directly.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2852.diff
https://github.com/git/git/commit/8e21d63b02f1b26f7695ca515e51e4622a995af2,25 Jun 2008,"clone: create intermediate directories of destination repo

The shell version used to use ""mkdir -p"" to create the repo
path, but the C version just calls ""mkdir"". Let's replicate
the old behavior. We have to create the git and worktree
leading dirs separately; while most of the time, the
worktree dir contains the git dir (as .git), the user can
override this using GIT_WORK_TREE.

We can reuse safe_create_leading_directories, but we need to
make a copy of our const buffer to do so. Since
merge-recursive uses the same pattern, we can factor this
out into a global function. This has two other cleanup
advantages for merge-recursive:

  1. mkdir_p wasn't a very good name. ""mkdir -p foo/bar"" actually
     creates bar, but this function just creates the leading
     directories.

  2. mkdir_p took a mode argument, but it was completely
     ignored.

Acked-by: Daniel Barkalow <barkalow@iabervon.org>

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_2853.diff
https://github.com/git/git/commit/8eca0b47ff1598a6d163df9358c0e0c9bd92d4c8,24 Jun 2008,"implement some resilience against pack corruptions

We should be able to fall back to loose objects or alternative packs when
a pack becomes corrupted.  This is especially true when an object exists
in one pack only as a delta but its base object is corrupted.  Currently
there is no way to retrieve the former object even if the later is
available in another pack or loose.

This patch allows for a delta to be resolved (with a performance cost)
using a base object from a source other than the pack where that delta
is located.  Same thing for non-delta objects: rather than failing
outright, a search is made in other packs or used loose when the
currently active pack has it but corrupted.

Of course git will become extremely noisy with error messages when that
happens.  However, if the operation succeeds nevertheless, a simple
'git repack -a -f -d' will ""fix"" the corrupted repository given that all
corrupted objects have a good duplicate somewhere in the object store,
possibly manually copied from another source.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/patch_2854.diff
https://github.com/git/git/commit/1f5c74f6cf918d317c73b328dcd4cf6f55c44d8a,24 Jun 2008,"call init_pack_revindex() lazily

This makes life much easier for next patch, as well as being more efficient
when the revindex is actually not used.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2855.diff
https://github.com/git/git/commit/112db553b0db4c4f2b39e5e3e433b2102be10085,23 Jun 2008,"Shrink the git binary a bit by avoiding unnecessary inline functions

So I was looking at the disgusting size of the git binary, and even with
the debugging removed, and using -Os instead of -O2, the size of the text
section was pretty high. In this day and age I guess almost a megabyte of
text isn't really all that surprising, but it still doesn't exactly make
me think ""lean and mean"".

With -Os, a surprising amount of text space is wasted on inline functions
that end up just being replicated multiple times, and where performance
really isn't a valid reason to inline them. In particular, the trivial
wrapper functions like ""xmalloc()"" are used _everywhere_, and making them
inline just duplicates the text (and the string we use to 'die()' on
failure) unnecessarily.

So this just moves them into a ""wrapper.c"" file, getting rid of a tiny bit
of unnecessary bloat. The following numbers are both with ""CFLAGS=-Os"":

Before:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 700460	  15160	 292184	1007804	  f60bc	git

After:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 670540	  15160	 292184	 977884	  eebdc	git

so it saves almost 30k of text-space (it actually saves more than that
with the default -O2, but I don't think that's necessarily a very relevant
number from a ""try to shrink git"" standpoint).

It might conceivably have a performance impact, but none of this should be
_that_ performance critical. The real cost is not generally in the wrapper
anyway, but in the code it wraps (ie the cost of ""xread()"" is all in the
read itself, not in the trivial wrapping of it).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/patch_2856.diff
https://github.com/git/git/commit/010a2dacc1acf3305e399ef1eb2e620110b95d5e,23 Jun 2008,"Extend parse-options test suite

This patch serves two purposes:
 1. test-parse-option.c should be a more complete
    example for the parse-options API, and
 2. there have been no tests for OPT_CALLBACK,
    OPT_DATE, OPT_BIT, OPT_SET_INT and OPT_SET_PTR
    before.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/patch_2857.diff
https://github.com/git/git/commit/6422f633216475939f9a6f317e41a164737cbb02,23 Jun 2008,"parse-options.c: fix documentation syntax of optional arguments

When an argument for an option is optional, short options don't need a
space between the option and the argument, and long options need a ""="".
Otherwise, arguments are misinterpreted.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2858.diff
https://github.com/git/git/commit/cdeaf10f7e2754054c7be5d74227c698d2a71890,21 Jun 2008,"Print errno upon failure to open the COMMIT_EDITMSG file

When the COMMIT_EDITMSG cannot be opened, give more information to the user
by giving the 'errno' information.

Signed-off-by: Cristian Peraferrer <corellian.c@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2859.diff
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/patch_2860.diff
https://github.com/git/git/commit/df6a7ff7ac55d320afa1b8a59393122d6ca0f6c4,19 Jun 2008,"builtin-fast-export: Add importing and exporting of revision marks

This adds the --import-marks and --export-marks to fast-export. These import
and export the marks used to for all revisions exported in a similar fashion
to what fast-import does. The format is the same as fast-import, so you can
create a bidirectional importer / exporter by using the same marks file on
both sides.

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/patch_2861.diff
https://github.com/git/git/commit/9a7bbd1dd1db45b474576ca328aa7056cdd081e0,18 Jun 2008,"clean up error conventions of remote.c:match_explicit

match_explicit is called for each push refspec to try to
fully resolve the source and destination sides of the
refspec.  Currently, we look at each refspec and report
errors on both the source and the dest side before aborting.

It makes sense to report errors for each refspec, since an
error in one is independent of an error in the other.
However, reporting errors on the 'dst' side of a refspec if
there has been an error on the 'src' side does not
necessarily make sense, since the interpretation of the
'dst' side depends on the 'src' side (for example, when
creating a new unqualified remote ref, we use the same type
as the src ref).

This patch lets match_explicit return early when the src
side of the refspec is bogus. We still look at all of the
refspecs before aborting the push, though.

At the same time, we clean up the call signature, which
previously took an extra ""errs"" flag. This was pointless, as
we didn't act on that flag, but rather just passed it back
to the caller. Instead, we now use the more traditional
""return -1"" to signal an error, and the caller aggregates
the error count.

This change fixes two bugs, as well:

  - the early return avoids a segfault when passing a NULL
    matched_src to guess_ref()

  - the check for multiple sources pointing to a single dest
    aborted if the ""err"" flag was set. Presumably the intent
    was not to bother with the check if we had no
    matched_src. However, since the err flag was passed in
    from the caller, we might abort the check just because a
    previous refspec had a problem, which doesn't make
    sense.

    In practice, this didn't matter, since due to the error
    flag we end up aborting the push anyway.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_2862.diff
https://github.com/git/git/commit/1421c5f274a10f93ce5e8b51c0e1351905f84f4e,17 Jun 2008,"write_loose_object: don't bother trying to read an old object

Before even calling this, all callers have done a ""has_sha1_file(sha1)""
or ""has_loose_object(sha1)"" check, so there is no point in doing a
second check.

If something races with us on object creation, we handle that in the
final link() that moves it to the right place.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2863.diff
https://github.com/git/git/commit/328a4750b155df9de29cac007c74e2412d244620,17 Jun 2008,"path-list documentation: document all functions and data structures

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/patch_2864.diff
https://github.com/git/git/commit/4d9b53591f64a11da0af4c2b8f11fd4730ce52dd,14 Jun 2008,"avoid trailing whitespace in zero-change diffstat lines

In some cases, we produce a diffstat line even though no
lines have changed (e.g., because of an exact rename). In
this case, there is no +/- ""graph"" after the number of
changed lines. However, we output the space separator
unconditionally, meaning that these lines contained a
trailing space character.

This isn't a huge problem, but in cleaning up the output we
are able to eliminate some trailing whitespace from a test
vector.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2865.diff
https://github.com/git/git/commit/44d86e910d61dab4f059d86705599bbb2747b10f,14 Jun 2008,"avoid whitespace on empty line in automatic usage message

When outputting a usage message with a blank line in the
header, we would output a line with four spaces. Make this
truly a blank line.

This helps us remove trailing whitespace from a test vector.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_2866.diff
https://github.com/git/git/commit/74f16b0c6fece88f585f9556fa1d3a7406e7a42e,14 Jun 2008,"mask necessary whitespace policy violations in test scripts

All of these violations are necessary parts of the tests
(which are generally checking the behavior of trailing
whitespace, or contain diff fragments with empty lines).

Our solution is two-fold:

  1. Process input with whitespace problems using tr. This
     has the added bonus that it becomes very obvious where
     the bogus whitespace is intended to go.

  2. Move large diff fragments into their own supplemental
     files. This gets rid of the whitespace problem, since
     supplemental files are not checked, and it also makes
     the test script a bit easier to read.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",267,data/crawl/git/patch_2867.diff
https://github.com/git/git/commit/6483925999cde47e5108414ac3f57760394ee2d2,14 Jun 2008,"sha1_file.c: dead code removal

write_sha1_from_fd() and write_sha1_to_fd() were dead code nobody called,
neither the latter's helper repack_object() was.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",145,data/crawl/git/patch_2868.diff
https://github.com/git/git/commit/d8933f013a66cc1deadf83a9c24eccb6fee78a35,13 Jun 2008,"fast-export: Correctly generate initial commits with no parents

If we are exporting a commit which has no parents we may be doing
it to a branch that already exists, causing fast-import to assume
the branch's current revision should be the sole parent of the
new commit.  This can cause `git fast-export | git fast-import`
to produce an incorrect graph for:

   A-------M----o------o  refs/heads/master
          /
       B-+

In this graph A and B are initial commits (no parents) but if A was
output first to refs/heads/master and then B is output fast-import
would assume the graph was this instead:

   A-------M----o------o  refs/heads/master
    \     /
     +-B-+

Which would cause B, M, and all later commits to have a different
SHA-1, and obviously be quite a different graph.

Sending a reset command prior to B informs fast-import to clear
the implied parent of A, allowing B to remain an initial commit.

Reported-by: Ben Lynn <benlynn@gmail.com>
Deemed-obviously-correct-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2869.diff
https://github.com/git/git/commit/8b7d4e738ee5489fecb5c4a55d14884b09e0dc6d,12 Jun 2008,"""remote prune"": be quiet when there is nothing to prune

The previous commit made it always say ""Pruning $remote"" but reported the
URL only when there is something to prune.  Make it consistent by not
saying anything at all when there is nothing to prune.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2870.diff
https://github.com/git/git/commit/8d7679276af861b44e307c9879f6c4774f4944fc,11 Jun 2008,"remote prune: print the list of pruned branches

This command is really too quiet which make it unconfortable to use.

Also implement a --dry-run option, in place of the original -n one, to
list stale tracking branches that will be pruned, but do not actually
prune them.

Add a test case for --dry-run.

Signed-off-by: Olivier Marin <dkr@freesurf.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2871.diff
https://github.com/git/git/commit/67a7e2d07162dc470f7e3ae1889aad146e5b7917,11 Jun 2008,"builtin-remote: split show_or_prune() in two separate functions

This allow us to add different features to each of them and keep the
code simple at the same time. Also create a get_remote_ref_states()
to avoid duplicated code.

Signed-off-by: Olivier Marin <dkr@freesurf.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",101,data/crawl/git/patch_2872.diff
https://github.com/git/git/commit/0ecfcb3b700e7e3097a55f015894ad75f1097090,11 Jun 2008,"remote show: fix the -n option

The perl version accepted a -n flag, to show local informations only
without querying remote heads, that seems to have been lost in the C
revrite.

This restores the older behaviour and add a test case.

Signed-off-by: Olivier Marin <dkr@freesurf.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_2873.diff
https://github.com/git/git/commit/e9039dd35194b7c1cf4ecd479928638166b8458f,11 Jun 2008,"Consolidate SHA1 object file close

This consolidates the common operations for closing the new temporary file
that we have written, before we move it into place with the final name.

There's some common code there (make it read-only and check for errors on
close), but more importantly, this also gives a single place to add an
fsync_or_die() call if we want to add a safe mode.

This was triggered due to Denis Bueno apparently twice being able to
corrupt his git repository on OS X due to an unlucky combination of kernel
crashes and a not-very-robust filesystem.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2874.diff
https://github.com/git/git/commit/d6293d1f2cadcdf45f8ada7847a32b51fa5bf0a6,09 Jun 2008,"Add configuration option for default untracked files mode

By default, the untracked files mode for commit/status is 'normal'

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>",54,data/crawl/git/patch_2875.diff
https://github.com/git/git/commit/6c2ce048bbfc6fbc2bdd86a3e586cb8881eb2dc2,09 Jun 2008,"Add argument 'no' commit/status option -u|--untracked-files

This new argument teaches Git to not look for any untracked files,
saving cycles on slow file systems, or large repos.

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>",40,data/crawl/git/patch_2876.diff
https://github.com/git/git/commit/4bfee30a98783f7987c395e6006a2a6717344c04,09 Jun 2008,"Add an optional <mode> argument to commit/status -u|--untracked-files option

This lets you specify how you want untracked files to be listed.
The possible options are:

    normal - Show untracked files and directories
    all    - Show all untracked files

The 'all' mode is used, if the mode is not specified.

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>",102,data/crawl/git/patch_2877.diff
https://github.com/git/git/commit/3c076dbe3cffee3b5cbf34759d627c47a417c145,09 Jun 2008,"cat-file --batch / --batch-check: do not exit if hashes are missing

Previously, cat-file --batch / --batch-check would silently exit if it
was passed a non-existent SHA1 on stdin.  Now it prints ""<SHA1>
missing"" as in all other cases (and as advertised in the
documentation).

Note that cat-file --batch-check (but not --batch) will still output
""error: unable to find <SHA1>"" on stderr if a non-existent SHA1 is
passed, but this does not affect parsing its stdout.

Also, type <= 0 was previously using the potentially uninitialized
type variable (relying on it being 0); it is now being initialized.

Signed-off-by: Lea Wiemann <LeWiemann@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_2878.diff
https://github.com/git/git/commit/1b9a9467f8b9a8da2fe58d10ae16779492aa7737,06 Jun 2008,"Use nonrelative paths instead of absolute paths for cloned repositories

Particularly for the ""alternates"" file, if one will be created, we
want a path that doesn't depend on the current directory, but we want
to retain any symlinks in the path as given and any in the user's view
of the current directory when the path was given.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_2879.diff
https://github.com/git/git/commit/30eba7bf2caa327b4251d66bf7157dda97512e96,06 Jun 2008,"documentation: convert ""diffcore"" and ""repository-layout"" to man pages

This patch renames the following documents and at the same time converts
them to the man format:

diffcore.txt          -> gitdiffcore.txt		(man section 7)
repository-layout.txt -> gitrepository-layout.txt	(man section 5)

Other documents that reference the above ones are changed accordingly.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_2880.diff
https://github.com/git/git/commit/b7d9681974e61959f10c7b2c1063b7781c5b904e,06 Jun 2008,"Print info about ""git help COMMAND"" on git's main usage pages

Git's main usage pages did not show ""git help"" as a way to get more
information on a specific subcommand. This patch adds an info line after
the list of git commands currently printed by ""git"", ""git help"", ""git
--help"" and ""git help --all"".

Signed-off-by: Teemu Likonen <tlikonen@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2881.diff
https://github.com/git/git/commit/67bfc030d7b27c007853776e8028598bdfa2cae0,03 Jun 2008,"commit: drop duplicated parents

The scripted version of git-commit internally used git-commit-tree which
omitted duplicated parents given from the command line.  This prevented a
nonsensical octopus merge from getting created even when you said ""git
merge A B"" while you are already on branch A.

However, when git-commit was rewritten in C, this sanity check was lost.
This resurrects it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_2882.diff
https://github.com/git/git/commit/973a70ea4d9fc98e9ed20c261c5f6c8f1c1df2b0,03 Jun 2008,"Clean up builtin-update-ref's option parsing

builtin-update-ref's option parsing was somewhat tricky to follow,
especially if the -d option was given. This patch cleans it upp a bit,
at the expense of making it a bit longer.

Signed-off-by: Karl Hasselström <kha@treskal.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_2883.diff
https://github.com/git/git/commit/6241360498eb811d4bb130328b1d13241c5e14b6,02 Jun 2008,"make verify-pack a bit more useful with bad packs

When a pack gets corrupted, its SHA1 checksum will fail.  However, this
is more useful to let the test go on in order to find the actual
problem location than only complain about the SHA1 mismatch and
bail out.

Also, it is more useful to compare the stored pack SHA1 with the one in
the index file instead of the computed SHA1 since the computed SHA1
from a corrupted pack won't match the one stored in the index either.

Finally a few code and message cleanups were thrown in as a bonus.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_2884.diff
https://github.com/git/git/commit/3395908ee481e91bbe3ba054a7419b071b09cdef,01 Jun 2008,"graph API: improve display of merge commits

This change improves the way merge commits are displayed, to eliminate a
few visual artifacts.  Previously, merge commits were displayed as:

| M  \
| |\  |

As pointed out by Teemu Likonen, this didn't look nice if the rightmost
branch line was displayed as '\' on the previous line, as it then
appeared to have an extra space in it:

| |\
| M  \
| |\  |

This change updates the code so that branch lines to the right of merge
commits are printed slightly differently depending on how the previous
line was displayed:

| |\          | | |        | |  /
| M \         | M |        | M |
| |\ \        | |\ \       | |\ \

Signed-off-by: Adam Simpkins <adam@adamsimpkins.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_2885.diff
https://github.com/git/git/commit/4c81b03e30d13dbc93ea7071438ef2da0acd4189,31 May 2008,"Make pack creation always fsync() the result

This means that we can depend on packs always being stable on disk,
simplifying a lot of the object serialization worries.  And unlike loose
objects, serializing pack creation IO isn't going to be a performance
killer.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2886.diff
https://github.com/git/git/commit/c16570c42a748a29031281badd4762dd4e71d3d0,31 May 2008,"Revision walking documentation: document most important functions

Unfortunately the list is not complete, but includes the essential ones.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_2887.diff
https://github.com/git/git/commit/d5350fd2b3a4721885bf1b3353478970caef268c,28 May 2008,"commit --interactive: properly update the index before commiting

When adding files through git commit --interactive, and 'quit'
afterwards, the message in the editor of the commit message indicates
that many (maybe all) files are deleted from the tree.  Dismissing that
and running git commit afterwards does the right thing.  This commit
fixes git commit --interactive to properly update the index before
commiting.

Reported by Jiří Paleček through
 http://bugs.debian.org/480429

Signed-off-by: Gerrit Pape <pape@smarden.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2888.diff
https://github.com/git/git/commit/37b78c25476d752953dc541e46fbb6bd5017edf7,28 May 2008,"clone: make sure we support the transport type

If we use an unsupported transport (e.g., http when curl
support is not compiled in), transport_get reports an error
to the user, but we still get a transport object. We need to
manually check and abort the clone process at that point, or
we end up with a segfault.

Noticed by Thomas Rast.

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_2889.diff
https://github.com/git/git/commit/5070b49e529e2df30ec2e33073267d281450dde6,26 May 2008,"builtin-fast-export: Only output a single parent per line

According to the git-fast-import man-page, you can only put a single
committish per merge: line, like this:

  merge :10
  merge :11

However, git-fast-export puts all parents on a single line, like this:

  merge :10 :11

This changes fast-export to output a single parent per line.  Otherwise
neither git-fast-import nor bzr-fast-import can read its output.

[jc: fix-up to remove excess LF in the output that makes fast-import barf]

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2890.diff
https://github.com/git/git/commit/9aa23094c281d1333eecb6bb1bd84b1599197d68,25 May 2008,"mailinfo: apply the same fix not to lose NULs in BASE64 and QP codepaths

Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/patch_2891.diff
https://github.com/git/git/commit/cce8d6fdb4d7170a73763586daf6ac4f6b8fce2c,25 May 2008,"mailsplit and mailinfo: gracefully handle NUL characters

The function fgets() has a big problem with NUL characters: it reads
them, but nobody will know if the NUL comes from the file stream, or
was appended at the end of the line.

So implement a custom read_line_with_nul() function.

Noticed by Tommy Thorn.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_2892.diff
https://github.com/git/git/commit/6a491a176593a9ab3bd7ff24ef12323371671112,25 May 2008,"http-push: remove remote locks on exit signals

If locks are not cleaned up the repository is inaccessible for 10 minutes.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2893.diff
https://github.com/git/git/commit/0569e9b8cea20d5eedfec66730a9711a0907ab0d,24 May 2008,"""git diff"": do not ignore index without --no-index

Even if ""foo"" and/or ""bar"" does not exist in index, ""git diff foo bar""
should not change behaviour drastically from ""git diff foo bar baz"" or
""git diff foo"".  A feature that ""sometimes works and is handy"" is an
unreliable cute hack.

""git diff foo bar"" outside a git repository continues to work as a more
colourful alternative to ""diff -u"" as before.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",621,data/crawl/git/patch_2894.diff
https://github.com/git/git/commit/3af828634fa5bdbca1b2061a81df8b3fa73b0d34,24 May 2008,"tests: do not use implicit ""git diff --no-index""

As a general principle, we should not use ""git diff"" to validate the
results of what git command that is being tested has done.  We would not
know if we are testing the command in question, or locating a bug in the
cute hack of ""git diff --no-index"".

Rather use test_cmp for that purpose.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",774,data/crawl/git/patch_2895.diff
https://github.com/git/git/commit/205ffa94be8f6492eef4bdaa3315e7fdc7e64e0b,23 May 2008,"Make git add -n and git -u -n output consistent

Output format from ""git add -n $path"" lists path to blobs that are going
to be added on a single line, separated with SP.  On the other hand, the
suggested ""git add -u -n"" shows one path per line, like ""add '<file>'\n"".
Of course, these two are inconsistent.

Plain ""git add -n"" can afford to only say names of paths, as all it does
is to add (update).  However, ""git add -u"" needs to be able to express
""remove"" somehow.  So if we need to have them formatted the same way, we
need to unify with the ""git add -n -u"" format.  Incidentally, this is
consistent with how 'update-index' says it.

This changes the output from ""git add -n $paths"" but as a general
principle, output from Porcelain commands is a fair game for improvements
and not for script consumption.

Signed-off-by: Gustaf Hendeby <hendeby@isy.liu.se>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2896.diff
https://github.com/git/git/commit/15d8e5651948e3914f4b765d7d1dc1bc2f5c4073,23 May 2008,"builtin-cat-file.c: use parse_options()

This simplifies the option parsing.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_2897.diff
https://github.com/git/git/commit/d8ee4832509dd2d7448a49920f5cba2fc979283d,23 May 2008,"git-hash-object: Add --stdin-paths option

This allows multiple paths to be specified on stdin.

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_2898.diff
https://github.com/git/git/commit/fdabc242f465771116e08d1ea3737fdb7453b2f1,21 May 2008,"clone: fall back to copying if hardlinking fails

Note that it stops trying hardlinks if any fail.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_2899.diff
https://github.com/git/git/commit/8ccba008ee3e0b0582e64cb23ae4ebf734b9f75b,20 May 2008,"unpack-trees: allow Porcelain to give different error messages

The plumbing output is sacred as it is an API.  We _could_ change it if it
is broken in such a way that it cannot convey necessary information fully,
but we just do not _reword_ for the sake of rewording.  If somebody does
not like it, s/he is complaining too late.  S/he should have been here in
early May 2005 and make the language used by the API closer to what humans
read.  S/he wasn't here.  Too bad, and it is too late.

And people who complain should look at a bigger picture.  Look at what was
suggested by one of them and think for five seconds:

     $ git checkout mytopic
    -fatal: Entry 'frotz' not uptodate. Cannot merge.
    +fatal: Entry 'frotz' has local changes. Cannot merge.

If you do not see something wrong with this output, your brain has already
been rotten with use of git for too long a time.  Nobody asked us to
""merge"" but why are we talking about ""Cannot merge""?

This patch introduces a mechanism to allow Porcelains to specify messages
that are different from the ones that is given by the underlying plumbing
implementation of read-tree, so that we can reword the message Porcelains give
without disrupting the output from the plumbing.

    $ git-checkout pu
    error: You have local changes to 'Makefile'; cannot switch branches.

There are other places that ask unpack_trees() to n-way merge, detect
issues  and let it issue error message on its own, but I did this as a
demonstration and replaced only one message.

Yes I know about C99 structure initializers.  I'd love to use them but we
try to be nice to compilers without it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/patch_2900.diff
https://github.com/git/git/commit/5c47f4c6e71e6de08348f837f38a446a2f2b0ed7,17 May 2008,"builtin-apply: accept patch to an empty file

A patch from a foreign SCM (or plain ""diff"" output) often have both
preimage and postimage filename on ---/+++ lines even for a patch that
creates a new file.  However, when there is a filename for preimage, we
used to insist the file to exist (either in the work tree and/or in the
index).  When we cannot be sure by parsing the patch that it is not a
creation patch, we shouldn't complain when if there is no such a file.
This commit fixes the logic.

Refactor the code that validates the preimage file into a separate
function while we are at it, as it is getting rather big.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/patch_2901.diff
https://github.com/git/git/commit/90948a42892779734f77d62f20326c868392fd8f,16 May 2008,"git-cvsserver: add ability to guess -kb from contents

If ""gitcvs.allbinary"" is set to ""guess"", then any file that has
not been explicitly marked as binary or text using the ""crlf"" attribute
and the ""gitcvs.usecrlfattr"" config will guess binary based on the contents
of the file.

Signed-off-by: Matthew Ogilvie <mmogilvi_git@miniinfo.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",379,data/crawl/git/patch_2902.diff
https://github.com/git/git/commit/ca11b212eb3e31d6fee12e9974c67dc774c1bc7c,14 May 2008,"let pack-objects do the writing of unreachable objects as loose objects

Commit ccc1297226b184c40459e9d373cc9eebfb7bd898 changed the behavior
of 'git repack -A' so unreachable objects are stored as loose objects.
However it did so in a naive and inn efficient way by making packs
about to be deleted inaccessible and feeding their content through
'git unpack-objects'.  While this works, there are major flaws with
this approach:

- It is unacceptably sloooooooooooooow.

  In the Linux kernel repository with no actual unreachable objects,
  doing 'git repack -A -d' before:

	real    2m33.220s
	user    2m21.675s
	sys     0m3.510s

  And with this change:

	real    0m36.849s
	user    0m24.365s
	sys     0m1.950s

  For reference, here's the timing for 'git repack -a -d':

	real    0m35.816s
	user    0m22.571s
	sys     0m2.011s

  This is explained by the fact that 'git unpack-objects' was used to
  unpack _every_ objects even if (almost) 100% of them were thrown away.

- There is a black out period.

  Between the removal of the .idx file for the redundant pack and the
  completion of its unpacking, the unreachable objects become completely
  unaccessible.  This is not a big issue as we're talking about unreachable
  objects, but some consistency is always good.

- There is no way to easily set a sensible mtime for the newly created
  unreachable loose objects.

So, while having a command called ""pack-objects"" to perform object
unpacking looks really odd, this is probably the best compromize to be
able to solve the above issues in an efficient way.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_2903.diff
https://github.com/git/git/commit/bbac73117ebed9f02ccae3df45f4baa0c793dab7,14 May 2008,"add a force_object_loose() function

This is meant to force the creation of a loose object even if it
already exists packed.  Needed for the next commit.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_2904.diff
https://github.com/git/git/commit/984b83ef23fdcf6a933f635f182e7bc10130094a,13 May 2008,"Add --ignore-errors to git-add to allow it to skip files with read errors

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2905.diff
https://github.com/git/git/commit/7ae02a30e817eda16ea362c6304b6ae28c3a7644,13 May 2008,"Extend interface of add_files_to_cache to allow ignore indexing errors

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_2906.diff
https://github.com/git/git/commit/960b8ad1b1824b1b82c2b09a000c2119f97633a0,13 May 2008,"Make the exit code of add_file_to_index actually useful

Update the programs which used the function (as add_file_to_cache).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_2907.diff
https://github.com/git/git/commit/64c0d71ce91696dfe5beb4b51e3233e56c857290,13 May 2008,"Improve reporting of errors in config file routines

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_2908.diff
https://github.com/git/git/commit/0a02186f924aee1bd69f18ed01f645aa332ce0d1,13 May 2008,"Allow tracking branches to set up rebase by default.

Change cd67e4d4 introduced a new configuration parameter that told
pull to automatically perform a rebase instead of a merge.  This
change provides a configuration option to enable this feature
automatically when creating a new branch.

If the variable branch.autosetuprebase applies for a branch that's
being created, that branch will have branch.<name>.rebase set to true.

Signed-off-by: Dustin Sallings <dustin@spy.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/patch_2909.diff
https://github.com/git/git/commit/921df15f1d276bdecb7c4e134dff97f4e3adf953,11 May 2008,"rev-parse: add test script for ""--verify""

This patch documents the current behavior of ""git rev-parse --verify"".

This command is tested both with and without the ""--quiet"" and
""--default"" options.

This shows some problems with the current behavior that will be fixed
in latter patches:

	- in case of errors, there should be no good rev output on
	stdout,
	- with ""--default"" one test case is broken

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",114,data/crawl/git/patch_2910.diff
https://github.com/git/git/commit/4be403815321976bc2ee4c6677799abb06b153aa,11 May 2008,"Add svn-compatible ""blame"" output format to git-svn

git-svn blame produced output in the format of git blame; in environments
where there are scripts that read the output of svn blame, it's useful
to be able to use them with the output of git-svn. The git-compatible
format is still available using the new ""--git-format"" option.

This also fixes a bug in the initial git-svn blame implementation; it was
bombing out on uncommitted local changes.

Signed-off-by: Steven Grimm <koreth@midwinter.com>
Acked-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_2911.diff
https://github.com/git/git/commit/c998ae9baa1cc5f507646da9850731de634d2ee7,11 May 2008,"Allow tracking branches to set up rebase by default.

Change cd67e4d4 introduced a new configuration parameter that told
pull to automatically perform a rebase instead of a merge.  This
change provides a configuration option to enable this feature
automatically when creating a new branch.

If the variable branch.autosetuprebase applies for a branch that's
being created, that branch will have branch.<name>.rebase set to true.

Signed-off-by: Dustin Sallings <dustin@spy.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/patch_2912.diff
https://github.com/git/git/commit/d177cab0480f9fa172103071203fed1bff95f5c2,11 May 2008,"Avoid some unnecessary lstat() calls

The commit sequence used to do

	if (file_exists(p->path))
		add_file_to_cache(p->path, 0);

where both ""file_exists()"" and ""add_file_to_cache()"" needed to do a
lstat() on the path to do their work.

This cuts down 'lstat()' calls for the partial commit case by two
for each path we know about (because we do this twice per path).

Just move the lstat() to the caller instead (that's all that
""file_exists()"" really does), and pass the stat information down to the
add_to_cache() function.

This essentially makes 'add_to_index()' the core function that adds a path
to the index, getting the index pointer, the pathname and the stat
information as arguments. There are then shorthand helper functions that
use this core function:

 - 'add_to_cache()' is just 'add_to_index()' with the default index

 - 'add_file_to_cache/index()' is the same, but does the lstat() call
   itself, so you can pass just the pathname if you don't already have the
   stat information available.

So old users of the 'add_file_to_xyzzy()' are essentially left unchanged,
and this just exposes the more generic helper function that can take
existing stat information into account.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_2913.diff
https://github.com/git/git/commit/314f5de1a0b91d27cbbb8a400337dd41cf84d511,11 May 2008,"gitk: Allow users to view diffs in external diff viewer

This allows gitk to run an external diff viewer such as meld.

Right-click on a file in the file list view gives ""External diff""
popup menu entry, which launches the selected external diff tool.
The menu entry is only active in ""Patch"" mode, not in ""Tree"" mode.

The program to run to display the diff is configurable through
Edit/Preference/External diff tool.  The program is run with two
arguments, being the names of files containing the two versions to
diff.  Gitk will create temporary directories called
.gitk-tmp.<pid>/<n> to place these files in, and remove them when
it's finished.

If the file doesn't exist in one or other revision, gitk will supply
/dev/null as the name of the file on that side of the diff.  This may
need to be adjusted for Windows or MacOS.

[paulus@samba.org - cleaned up and rewrote some parts of the patch.]

Signed-off-by: Thomas Arcila <thomas.arcila@gmail.com>
Signed-off-by: Paul Mackerras <paulus@samba.org>",147,data/crawl/git/patch_2914.diff
https://github.com/git/git/commit/bb1ae3f6fff19b0a1ab1bb6a815d26d39b9f15e6,06 May 2008,"commit: Show committer if automatic

To warn the user in case he/she might be using an unintended
committer identity.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/patch_2915.diff
https://github.com/git/git/commit/e83dbe802f24e017f2e3889272a70793c064d984,06 May 2008,"commit: Show author if different from committer

That would help reassure anybody while committing other's changes.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2916.diff
https://github.com/git/git/commit/a45d46ba72a8be16eeb30f608620bac7d9296803,06 May 2008,"Preparation to call determine_author_info from prepare_to_commit

Reorder functions definitions such that determine_author_info is
defined before prepare_to_commit. No code changes.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_2917.diff
https://github.com/git/git/commit/a8128ed62858063e29edc066b14b8b0fa6257cc2,06 May 2008,"git-cat-file: Add --batch option

--batch is similar to --batch-check, except that the contents of each object is
also printed. The output's form is:

<sha1> SP <type> SP <size> LF
<contents> LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/patch_2918.diff
https://github.com/git/git/commit/05d5667fec9650b049f47edd8cca23a43b135365,06 May 2008,"git-cat-file: Add --batch-check option

This new option allows multiple objects to be specified on stdin. For each
object specified, a line of the following form is printed:

<sha1> SP <type> SP <size> LF

If the object does not exist in the repository, a line of the following form is
printed:

<object> SP missing LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/patch_2919.diff
https://github.com/git/git/commit/7fefda5cc7a5faf7962092367bedb321a634d54d,06 May 2008,"log and rev-list: add --graph option

This new option causes a text-based representation of the history to be
printed to the left of the normal output.

Signed-off-by: Adam Simpkins <adam@adamsimpkins.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_2920.diff
https://github.com/git/git/commit/c12172d2eab91b79b8181b04ab5a5332a96e34a8,06 May 2008,"Add history graph API

This new API allows the commit history to be displayed as a text-based
graphical representation.

Signed-off-by: Adam Simpkins <adam@adamsimpkins.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1206,data/crawl/git/patch_2921.diff
https://github.com/git/git/commit/8434c2f1afedb936e0ea8c07ce25733013c2f743,05 May 2008,"Build in clone

Thanks to Johannes Schindelin for various comments and improvements,
including supporting cloning full bundles.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",548,data/crawl/git/patch_2922.diff
https://github.com/git/git/commit/f225aeb278eb1c8c028cd2ff1fdfe7a45067b8e1,05 May 2008,"Provide API access to init_db()

The caller first calls set_git_dir() to specify the GIT_DIR, and then
calls init_db() to initialize it. This also cleans up various parts of
the code to account for the fact that everything is done with GIT_DIR
set, so it's unnecessary to pass the specified directory around.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",203,data/crawl/git/patch_2923.diff
https://github.com/git/git/commit/19757d80e522e9f04c125ad5977c3a79db99b192,05 May 2008,"Add a function to set a non-default work tree

This function may only be used before the work tree is used.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2924.diff
https://github.com/git/git/commit/bef70b22ba63d71c1ae2e070e64ff9863ea1ad14,05 May 2008,"Add a library function to add an alternate to the alternates file

This is in the core so that, if the alternates file has already been
read, the addition can be parsed and put into effect for the current
process.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_2925.diff
https://github.com/git/git/commit/ea3cd5c7c63fadacd66c364ae4b8c6d01e5809b1,05 May 2008,"Add a lockfile function to append to a file

This takes care of copying the original contents into the replacement
file after the lock is held, so that concurrent additions can't miss
each other's changes.

[jc: munged to drop mmap in favor of copy_file.]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2926.diff
https://github.com/git/git/commit/c697ad143ba1ff58b29e7efe149d244d4b7010a5,04 May 2008,"Cleanup xread() loops to use read_in_full()

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_2927.diff
https://github.com/git/git/commit/3613f9b4c02c3e3d35f4c6c06e40d5c176e7eb6d,04 May 2008,"pack-objects: small cleanup

Better encapsulate delta creation for writing.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2928.diff
https://github.com/git/git/commit/b8960bbe7bdfc0b232462f916ee8151c83afd16f,03 May 2008,"diff: make ""too many files"" rename warning optional

In many cases, the warning ends up as clutter, because the
diff is being done ""behind the scenes"" from the user (e.g.,
when generating a commit diffstat), and whether we show
renames or not is not particularly interesting to the user.

However, in the case of a merge (which is what motivated the
warning in the first place), it is a useful hint as to why a
merge with renames might have failed.

This patch makes the warning optional based on the code
calling into diffcore. We default to not showing the
warning, but turn it on for merges.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_2929.diff
https://github.com/git/git/commit/028656552bc758b192027c25a1143f1c6ca66d64,03 May 2008,"Remove dead code: show_log() sep argument and diff_options.msg_sep

These variables were made unnecessary by commit
3969cf7db1a13a78f3b7a36d8c1084bbe0a53459.

Signed-off-by: Adam Simpkins <adam@adamsimpkins.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2930.diff
https://github.com/git/git/commit/59b0c24daaac3c2203dd8ac2de4dfcad909481a5,30 Apr 2008,"git-svn: detect and fail gracefully when dcommitting to a void

The command

  git svn clone (URL of an empty SVN repo here)

works, creates an empty git repository. I can perform the initial
commit there, but then, ""git svn dcommit"" says :

Use of uninitialized value in concatenation (.) or string at .../git-svn line 414.
Committing to  ...
Unable to determine upstream SVN information from HEAD history

I guess a correct management of the initial commit in git-svn would be
hard to implement, but at least, the error message can be improved.
First step is something like the patch below, and better would be for
""git svn clone"" to warn that it won't be able to do much with the
cloned repo.

Acked-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_2931.diff
https://github.com/git/git/commit/f0ec47b8e7f46e17e6b6fe1cead728fa24477e43,28 Apr 2008,"Die for an early EOF in a file reading loop

The resulting data is zero terminated after the read loop, but
the subsequent loop that scans for '\n' will overrun the buffer.

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_2932.diff
https://github.com/git/git/commit/e8729f5380788855943c69f749eb5e276c3b8310,28 Apr 2008,"Document functions xmemdupz(), xread() and xwrite()

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2933.diff
https://github.com/git/git/commit/b1b359699a24a89f773cccdf35801bc6fc15ade8,27 Apr 2008,"rev-parse: teach ""--verify"" to be quiet when using ""-q"" or ""--quiet""

Currently ""git rev-parse --verify <something>"" is often used with
its error output redirected to /dev/null. This patch makes it
easier to do that.

The -q|--quiet option is designed to work the same way as it does
for ""git symbolic-ref"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_2934.diff
https://github.com/git/git/commit/3562198b7da7ef6597af27b3a7fcaeee41608999,27 Apr 2008,"gitweb: Use feed link according to current view

Michael G. Noll said in comments to the ""Switching my code repository from
Subversion (SVN) to git"" article (http://tinyurl.com/37v67l) in his ""My
digital moleskine"" blog, that one of the things he is missing in gitweb
from SVN::Web is an RSS feed with news/information of the current view
(including RSS feed for single file or directory).

This is not exactly true, as since refactoring feed generation in af6feeb
(gitweb: Refactor feed generation, make output prettier, add Atom feed,
2006-11-19), gitweb can generate feeds (RSS or Atom) for history of a
given branch, history limited to a given directory, or history of a given
file.  Nevertheless this required handcrafting the URL to get wanted RSS
feed.

This commit makes gitweb select feed links in the HTML header and in
page footer depending on current view (action).  It is more elaborate,
and I guess more correct, than simple patch adding $hash ('h')
parameter to *all* URLs, including feed links, by Jean-Baptiste Quenot

  Subject: [PATCH] gitweb: Add hash parameter in feed URL when a hash
           is specified in the current request
  Message-ID: <ae63f8b50803211138y6355fd11pa64cda50a1f53011@mail.gmail.com>

If $hash ('h') or $hash_base ('hb') parameter is a branch name
(i.e. it starts with 'refs/heads/'; all generated URLs use this form
to discriminate between tags and heads), it is used in feed URLs; if
$file_name ('f') is defined, it is used in feed URLs.  Feed title is
set according to the kind of web feed: it is either 'log' for generic
feed, 'log of <branch>', 'history of <filename>' for generic history
(using implicit or explicit HEAD, i.e. current branch) or 'history of
<filename> on <branch>'.

There are special cases: 'heads' and 'forks' views should use OPML
providing list of available feeds; 'tags' probably also should use
OPML; there is no web feed equivalent to 'search' view.  Currently all
those cases fallback to (show) default feed.  Such feed link uses
""generic"" class, and is shown in slightly lighter color for
distinction.

Currently feed can have but one starting point, and does not support
negative (exclude) commit arguments.  Therefore for now for *diff
views it is chosen that feed follow the ""to"" part: to-name, to-commit
for 'blobdiff', 'treediff' and 'commitdiff' views.

Generating parameters for href() for feed link was separated
(refactored) into get_feed_info() subroutine.

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/patch_2935.diff
https://github.com/git/git/commit/a26a06afed783cb7cf7207c1bcb2d1781d623d1e,26 Apr 2008,"help: use ""man.<tool>.cmd"" as custom man viewer command

Currently ""git help -m GITCMD"" is restricted to a set of man viewers
defined at compile time. You can subvert the ""man.<tool>.path"" to
force ""git help -m"" to use a different man, viewer, but if you have a
man viewer whose invocation syntax does not match one of the current
tools then you would have to write a wrapper script for it.

This patch adds a git config variable ""man.<tool>.cmd"" which allows a
more flexible man viewer choice.

If you run ""git help -m GITCMD"" with the ""man.viewer"" config variable
set to an unrecognized tool then it will query the ""man.<tool>.cmd""
config variable. If this variable exists, then the specified tool will
be treated as a custom man viewer and it will be run in a shell with
the man page name of the GITCMD added as extra parameter.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_2936.diff
https://github.com/git/git/commit/7b15f872f23855de59bd06b0ebdbbc47b27b781b,26 Apr 2008,"help: use man viewer path from ""man.<tool>.path"" config var

This patch implements reading values from ""man.<tool>.path""
configuration variables, and using these values as pathes to
the man viewer <tool>s when lauching them.

This makes it possible to use different version of the tools
than the one on the current PATH, or maybe a custom script.

In this patch we also try to launch ""konqueror"" using
""kfmclient"" even if a path to a konqueror binary is given
in ""man.konqueror.path"".

The ""man_viewer_list"" becomes a simple string list to simplify
things for the following patches.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/patch_2937.diff
https://github.com/git/git/commit/f8aae120345f511e59bb008e8de2a8f6e65cf377,25 Apr 2008,"push: allow unqualified dest refspecs to DWIM

Previously, a push like:

  git push remote src:dst

would go through the following steps:

  1. check for an unambiguous 'dst' on the remote; if it
     exists, then push to that ref
  2. otherwise, check if 'dst' begins with 'refs/'; if it
     does, create a new ref
  3. otherwise, complain because we don't know where in the
     refs hierarchy to put 'dst'

However, in some cases, we can guess about the ref type of
'dst' based on the ref type of 'src'. Specifically, before
complaining we now check:

  2.5. if 'src' resolves to a ref starting with refs/heads
       or refs/tags, then prepend that to 'dst'

So now this creates a new branch on the remote, whereas it
previously failed with an error message:

  git push master:newbranch

Note that, by design, we limit this DWIM behavior only to
source refs which resolve exactly (including symrefs which
resolve to existing refs). We still complain on a partial
destination refspec if the source is a raw sha1, or a ref
expression such as 'master~10'.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_2938.diff
https://github.com/git/git/commit/34b5cd1fe9f9130b747388a1a968a8d4c9906865,23 Apr 2008,"Don't force imap.host to be set when imap.tunnel is set

The documentation for git-imap-send suggests a tunnel setting such as

  Tunnel = ""ssh -q user@server.com /usr/bin/imapd ./Maildir 2> /dev/null""

which works wonderfully and doesn't require a username, password or port
setting.

However, git-imap-send currently requires that the imap.host variable be
set in the config even when it was unused.  This patch changes imap-send
to only require that the imap.host setting is set if imap.tunnel is not
set.  Otherwise, server.host is set to ""tunnel"" for reporting purposes.

Acked-by: Andy Parkins <andyparkins@gmail.com>

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2939.diff
https://github.com/git/git/commit/8b1f6de854ae95eb3f4225a71aad29ca086cfd2e,23 Apr 2008,"copy.c: copy_fd - correctly report write errors

Previously, the errno could have been lost due to an intervening
close() call.

This patch also contains minor cosmetic changes.

Signed-off-by: Ariel Badichi <abadichi@bezeqint.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2940.diff
https://github.com/git/git/commit/84bb2dfd9f4873c9ca19537efe62219b09ec03bf,21 Apr 2008,"Add a remote.*.mirror configuration option

This patch adds a remote.*.mirror configuration option that,
when set, automatically puts git-push in --mirror mode for that
remote.

Furthermore, the option is set automatically by `git remote
add --mirror'.

The code in remote.c to parse remote.*.skipdefaultupdate
had a subtle problem: a comment in the code indicated that
special care was needed for boolean options, but this care was
not used in parsing the option.  Since I was touching related
code, I did this fix too.

[jc: and I further fixed up the ""ignore boolean"" code.]

Signed-off-by: Paolo Bonzini <bonzini@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/patch_2941.diff
https://github.com/git/git/commit/e8b404c27e98a8d1b0e123fe80ce19efbdbf73d7,21 Apr 2008,"git-branch: add support for --merged and --no-merged

These options filter the output from git branch to only include branches
whose tip is either merged or not merged into HEAD.

The use-case for these options is when working with integration of branches
from many remotes: `git branch --no-merged -a` will show a nice list of merge
candidates while `git branch --merged -a` will show the progress of your
integration work.

Also, a plain `git branch --merged` is a quick way to find local branches
which you might want to delete.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_2942.diff
https://github.com/git/git/commit/24b6177e0261efba063c0b83ae0cdc5993945da9,18 Apr 2008,"git-remote: reject adding remotes with invalid names

This can happen if the arguments to git-remote add is switched by the
user, and git would only show an error if fetching was also requested.
Fix it by using the refspec parsing engine to check if the requested
name can be parsed as a remote before add it.

Also cleanup so that the ""remote.<name>.url"" config name buffer is only
initialized once.

Signed-off-by: Jonas Fonseca <fonseca@diku.dk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2943.diff
https://github.com/git/git/commit/06cbe8550324e0fd2290839bf3b9a92aa53b70ab,17 Apr 2008,"Make core.sharedRepository more generic

git init --shared=0xxx, where '0xxx' is an octal number, will create
a repository with file modes set to '0xxx'. Users with a safe umask
value (0077) can use this option to force file modes. For example,
'0640' is a group-readable but not group-writable regardless of
user's umask value. Values compatible with old Git versions are written
as they were before, for compatibility reasons. That is, ""1"" for
""group"" and ""2"" for ""everybody"".

""git config core.sharedRepository 0xxx"" is also handled.

Signed-off-by: Heikki Orsila <heikki.orsila@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",187,data/crawl/git/patch_2944.diff
https://github.com/git/git/commit/1da16439bece6b90e1ce033bc50c5316f2c5dac2,16 Apr 2008,"builtin-apply: Show a more descriptive error on failure when opening a patch

When a patch can't be opened (it doesn't exist, there are permission
problems, etc.) we get the usage text, which is not a proper indication of
failure.

Signed-off-by: Alberto Bertogli <albertito@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2945.diff
https://github.com/git/git/commit/e5e4a7f23d7df0ec04b6423a90c9b858082a74af,13 Apr 2008,"builtin-status: Add tests for submodule summary

Signed-off-by: Ping Yin <pkufranky@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",134,data/crawl/git/patch_2946.diff
https://github.com/git/git/commit/f5a84c372f8f044899dde91f1a415d2bf963377e,13 Apr 2008,"doc: moved merge.* config variables into separate merge-config.txt

Include the new file from config.txt and git-merge.txt.

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_2947.diff
https://github.com/git/git/commit/f59774add488a6c5fb440a4aaa7255f594b1027d,10 Apr 2008,"git-fetch: fix status output when not storing tracking ref

There was code in update_local_ref for handling this case,
but it never actually got called. It assumed that storing in
FETCH_HEAD meant a blank peer_ref name, but we actually have
a NULL peer_ref in this case, so we never even made it to
the update_local_ref function.

On top of that, the display formatting was different from
all of the other cases, probably owing to the fact that
nobody had ever actually seen the output.

This patch harmonizes the output with the other cases and
moves the detection of this case into store_updated_refs,
where we can actually trigger it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_2948.diff
https://github.com/git/git/commit/3f36cbbaaf87b67abafa851e2808735553f92b06,10 Apr 2008,"Fix documentation syntax of optional arguments in short options.

When an argument for an option is optional, like in -n from git-tag,
puting a space between the option and the argument is interpreted
as a missing argument for the option plus an isolated argument.
Documentation now reflects the need to write the parameter following
the option -n, as in ""git tag -nARG"", for instance.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_2949.diff
https://github.com/git/git/commit/bde30540169dd625cbd862ff6f38bc8224ec081c,09 Apr 2008,"git-gc --auto: add pre-auto-gc hook

If such a hook is available and exits with a non-zero status, then
git-gc --auto won't run.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_2950.diff
https://github.com/git/git/commit/628522ec1439f414dcb1e71e300eb84a37ad1af9,09 Apr 2008,"sha1-lookup: more memory efficient search in sorted list of SHA-1

Currently, when looking for a packed object from the pack idx, a
simple binary search is used.

A conventional binary search loop looks like this:

        unsigned lo, hi;
        do {
                unsigned mi = (lo + hi) / 2;
                int cmp = ""entry pointed at by mi"" minus ""target"";
                if (!cmp)
                        return mi; ""mi is the wanted one""
                if (cmp > 0)
                        hi = mi; ""mi is larger than target""
                else
                        lo = mi+1; ""mi is smaller than target""
        } while (lo < hi);
	""did not find what we wanted""

The invariants are:

  - When entering the loop, 'lo' points at a slot that is never
    above the target (it could be at the target), 'hi' points at
    a slot that is guaranteed to be above the target (it can
    never be at the target).

  - We find a point 'mi' between 'lo' and 'hi' ('mi' could be
    the same as 'lo', but never can be as high as 'hi'), and
    check if 'mi' hits the target.  There are three cases:

     - if it is a hit, we have found what we are looking for;

     - if it is strictly higher than the target, we set it to
       'hi', and repeat the search.

     - if it is strictly lower than the target, we update 'lo'
       to one slot after it, because we allow 'lo' to be at the
       target and 'mi' is known to be below the target.

    If the loop exits, there is no matching entry.

When choosing 'mi', we do not have to take the ""middle"" but
anywhere in between 'lo' and 'hi', as long as lo <= mi < hi is
satisfied.  When we somehow know that the distance between the
target and 'lo' is much shorter than the target and 'hi', we
could pick 'mi' that is much closer to 'lo' than (hi+lo)/2,
which a conventional binary search would pick.

This patch takes advantage of the fact that the SHA-1 is a good
hash function, and as long as there are enough entries in the
table, we can expect uniform distribution.  An entry that begins
with for example ""deadbeef..."" is much likely to appear much
later than in the midway of a reasonably populated table.  In
fact, it can be expected to be near 87% (222/256) from the top
of the table.

This is a work-in-progress and has switches to allow easier
experiments and debugging.  Exporting GIT_USE_LOOKUP environment
variable enables this code.

On my admittedly memory starved machine, with a partial KDE
repository (3.0G pack with 95M idx):

    $ GIT_USE_LOOKUP=t git log -800 --stat HEAD >/dev/null
    3.93user 0.16system 0:04.09elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+55588minor)pagefaults 0swaps

Without the patch, the numbers are:

    $ git log -800 --stat HEAD >/dev/null
    4.00user 0.15system 0:04.17elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+60258minor)pagefaults 0swaps

In the same repository:

    $ GIT_USE_LOOKUP=t git log -2000 HEAD >/dev/null
    0.12user 0.00system 0:00.12elapsed 97%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+4241minor)pagefaults 0swaps

Without the patch, the numbers are:

    $ git log -2000 HEAD >/dev/null
    0.05user 0.01system 0:00.07elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+8506minor)pagefaults 0swaps

There isn't much time difference, but the number of minor faults
seems to show that we are touching much smaller number of pages,
which is expected.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",198,data/crawl/git/patch_2951.diff
https://github.com/git/git/commit/b44ebb19e3234c5dffe9869ceac5408bb44c2e20,09 Apr 2008,"Add platform-independent .git ""symlink""

This patch allows .git to be a regular textfile containing the path of
the real git directory (prefixed with ""gitdir: ""), which can be useful on
platforms lacking support for real symlinks.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/patch_2952.diff
https://github.com/git/git/commit/1102952b45dde09d73445aa2284bcb592362fa23,09 Apr 2008,"Make git-add behave more sensibly in a case-insensitive environment

This expands on the previous patch, and allows ""git add"" to sanely handle
a filename that has changed case, keeping the case in the index constant,
and avoiding aliases.

In particular, if you have an index entry called ""File"", but the
checked-out tree is case-corrupted and has an entry called ""file""
instead, doing a

	git add .

(or naming ""file"" explicitly) will automatically notice that we have an
alias, and will replace the name ""file"" with the existing index
capitalization (ie ""File"").

However, if we actually have *both* a file called ""File"" and one called
""file"", and they don't have the same lstat() information (ie we're on a
case-sensitive filesystem but have the ""core.ignorecase"" flag set), we
will error out if we try to add them both.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2953.diff
https://github.com/git/git/commit/f53423b0e09d0de9584f72ac298bdfdc9e886d73,05 Apr 2008,"git-fetch: Don't trigger a bus error when given the refspec ""tag""

When git-fetch encounters the refspec ""tag"" it assumes that the next
argument will be a tag name. If there is no next argument, it should
die gracefully instead of erroring.

Signed-off-by: Kevin Ballard <kevin@sb.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2954.diff
https://github.com/git/git/commit/ba26ab99d4c6c6a8f939f44cf2f2c47f6fd4f0a1,01 Apr 2008,"mktag.c: tweak validation of tagger field and adjust test script

Update the verify_tag() function to remove an unnecessary test, and add
additional check for angle brackets in the name and email field, and
spaces in the email field. The timestamp and timezone sections are made
more straight forward by using strspn().

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/patch_2955.diff
https://github.com/git/git/commit/e0aaf781f656671694a0aa04d8a665bd4d7956e6,31 Mar 2008,"mktag.c: improve verification of tagger field and tests

Since nearly its birth, git's tags have included a ""tagger"" field which
describes the name of tagger, email of tagger, and date and time of tagging.
But, this field was only loosely tested by git-mktag. Provide some thorough
testing for this field and also ensure that the tag header is separated
from the tag body by an empty line to reduce the convenience of creating
a flawed tag.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/patch_2956.diff
https://github.com/git/git/commit/f3e5ae4f06ae968b710d286280a46b38ae3d36e8,28 Mar 2008,"git-p4: Handle Windows EOLs properly after removal of p4 submit template handling.

git-p4s handling of Windows style EOL was broken after the removal
of the p4 submit template handling in commit f2a6059. Fix that, and
make getP4OpenedType() more robust.

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>
Signed-off-by: Simon Hausmann <simon@lst.de>",28,data/crawl/git/patch_2957.diff
https://github.com/git/git/commit/fe308f53730f168be65c57c46e5c573b449b3e32,27 Mar 2008,"builtin-prune: protect objects listed on the command line

Finally, this resurrects the documented behaviour to protect other
objects listed on the command line from getting pruned.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2958.diff
https://github.com/git/git/commit/629de472b67bdb6b1fbdc72a95e1f569e3b8f02d,27 Mar 2008,"builtin-prune.c: use parse_options()

Using the OPT_DATE() introduced earlier, this updates builtin-prune to
use parse_options().

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_2959.diff
https://github.com/git/git/commit/5b67b8e2d4ed8a152694f4555549fcde5dae77f5,26 Mar 2008,"imap-send: properly error out if imap.host is not set in config

If no imap host is specified in the git config, git imap-send used
to try to lookup a null pointer through gethostbyname(), causing a
segfault.  Since setting the imap.host variable is mandatory,
imap-send now properly fails with an explanatory error message.

The problem has been reported by picca through
 http://bugs.debian.org/472632

Signed-off-by: Gerrit Pape <pape@smarden.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2960.diff
https://github.com/git/git/commit/c091b3d415f95d3e4e62acddb084e211af46acbf,26 Mar 2008,"Tighten refspec processing

This changes the pattern matching code to not store the required final
/ before the *, and then to require each side to be a valid ref (or
empty). In particular, any refspec that looks like it should be a
pattern but doesn't quite meet the requirements will be found to be
invalid as a fallback non-pattern.

This was cherry picked from commit ef00d15 (Tighten refspec processing,
2008-03-17), and two fix-up commits 46220ca (remote.c: Fix overtight
refspec validation, 2008-03-20) and 7d19da4 (refspec: allow colon-less
wildcard ""refs/category/*"", 2008-03-25) squashed in.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",256,data/crawl/git/patch_2961.diff
https://github.com/git/git/commit/ec31b0ce983e7e96b8a419dec3c34907b2f8226e,24 Mar 2008,"builtin-remote: Fix missing newline at end of listing of pushed branches

Without this the output of 'git remote show' does not end with a new-line:

bash> git remote show repo
* remote repo
  URL: repo.or.cz:/srv/git/kdbg.git
  Tracked remote branches
    maint master mob
  Local branch pushed with 'git push'
    +master:masterbash>

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2962.diff
https://github.com/git/git/commit/42c8c74c1401352b0f388e47a2c9fcd52171c9d3,23 Mar 2008,"pretty.c: add %x00 format specifier.

This adds a %xXX format which inserts two hexdigits after %x as a byte
value in the resulting string.  This can be used to add a NUL byte or any
other byte that can make machine parsing easier.  It is also necessary to
use fwrite to print out the data since printf will terminate if you feed
it a NUL.

Signed-off-by: Govind Salinas <blix@sophiasuchtig.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_2963.diff
https://github.com/git/git/commit/46220ca100cfbcdd7d80a5ac3326c52a3e98dddb,23 Mar 2008,"remote.c: Fix overtight refspec validation

We tightened the refspec validation code in an earlier commit ef00d15
(Tighten refspec processing, 2008-03-17) per my suggestion, but the
suggestion was misguided to begin with and it broke this usage:

    $ git push origin HEAD~12:master

The syntax of push refspecs and fetch refspecs are similar in that they
are both colon separated LHS and RHS (possibly prefixed with a + to
force), but the similarity ends there.  For example, LHS in a push refspec
can be anything that evaluates to a valid object name at runtime (except
when colon and RHS is missing, or it is a glob), while it must be a
valid-looking refname in a fetch refspec.  To validate them correctly, the
caller needs to be able to say which kind of refspecs they are.  It is
unreasonable to keep a single interface that cannot tell which kind it is
dealing with, and ask it to behave sensibly.

This commit separates the parsing of the two into different functions, and
clarifies the code to implement the parsing proper (i.e. splitting into
two parts, making sure both sides are wildcard or neither side is).

This happens to also allow pushing a commit named with the esoteric ""look
for that string"" syntax:

    $ git push ../test.git ':/remote.c: Fix overtight refspec:master'

Signed-off-by: Junio C Hamano <gitster@pobox.com>",237,data/crawl/git/patch_2964.diff
https://github.com/git/git/commit/ef00d150e4f9959bf083adf92419b5053ba11584,19 Mar 2008,"Tighten refspec processing

This changes the pattern matching code to not store the required final
/ before the *, and then to require each side to be a valid ref (or
empty). In particular, any refspec that looks like it should be a
pattern but doesn't quite meet the requirements will be found to be
invalid as a fallback non-pattern.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_2965.diff
https://github.com/git/git/commit/971f229c50aeace83d6fd30de1de755f419d4cb8,19 Mar 2008,"Fix possible Solaris problem in 'checkout_entry()'

Currently when checking out an entry ""path"", we try to unlink(2) it first
(because there could be stale file), and if there is a directory there,
try to deal with it (typically we run recursive rmdir).  We ignore the
error return from this unlink because there may not even be any file
there.

However if you are root on Solaris, you can unlink(2) a directory
successfully and corrupt your filesystem.

This moves the code around and check the directory first, and then
unlink(2).  Also we check the error code from it.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2966.diff
https://github.com/git/git/commit/81d66500c1e47d19c18d643ef074e0475dc90eb1,16 Mar 2008,"Start draft ReleaseNotes for 1.5.4.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_2967.diff
https://github.com/git/git/commit/4ba0cb27c1c0c3aa65d28e1891c1f3dca3db5f93,14 Mar 2008,"wt-status.c: no need for dup() dance anymore

Now we can generate diff to a file descriptor, we do not have to
dup() the stdout around when writing the status output.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2968.diff
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/patch_2969.diff
https://github.com/git/git/commit/ca885a4fe6444bed840295378848904106c87c85,14 Mar 2008,"read-tree() and unpack_trees(): use consistent limit

read-tree -m can read up to MAX_TREES, which was arbitrarily set to 8 since
August 2007 (4 is needed to deal with 2 merge-base case).

However, the updated unpack_trees() code had an advertised limit of 4
(which it enforced).  In reality the code was prepared to take only 3
trees and giving 4 caused it to stomp on its stack.  Rename the MAX_TREES
constant to MAX_UNPACK_TREES, move it to the unpack-trees.h common header
file, and use it from both places to avoid future confusion.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2970.diff
https://github.com/git/git/commit/f746bae84e4746a861d9ebed29fd9255e5cd929f,14 Mar 2008,"pack-objects: proper pack time stamping with --max-pack-size

Runtime pack access is done in the pack file mtime order since recent
packs are more likely to contain frequently used objects than old packs.
However the --max-pack-size option can produce multiple packs with mtime
in the reversed order as newer objects are always written first.

Let's modify mtime of later pack files (when any) so they appear older
than preceding ones when a repack creates multiple packs.

Signed-off-by: Nicolas Pitre <nico@cam.org>",27,data/crawl/git/patch_2971.diff
https://github.com/git/git/commit/82ebb0b6ec7470cab96a013d3d719c109003ef83,13 Mar 2008,"add test_cmp function for test scripts

Many scripts compare actual and expected output using
""diff -u"". This is nicer than ""cmp"" because the output shows
how the two differ. However, not all versions of diff
understand -u, leading to unnecessary test failure.

This adds a test_cmp function to the test scripts and
switches all ""diff -u"" invocations to use it. The function
uses the contents of ""$GIT_TEST_CMP"" to compare its
arguments; the default is ""diff -u"".

On systems with a less-capable diff, you can do:

  GIT_TEST_CMP=cmp make test

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",248,data/crawl/git/patch_2972.diff
https://github.com/git/git/commit/aadbe44f883859536c5320e0ac1d6ed122c45671,13 Mar 2008,"grep portability fix: don't use ""-e"" or ""-q""

System V versions of grep (such as Solaris /usr/bin/grep)
don't understand either of these options. git's usage of
""grep -e pattern"" fell into one of two categories:

 1. equivalent to ""grep pattern"". -e is only useful here if
    the pattern begins with a ""-"", but all of the patterns
    are hardcoded and do not begin with a dash.

 2. stripping comments and blank lines with

      grep -v -e ""^$"" -e ""^#""

    We can fortunately do this in the affirmative as

      grep '^[^#]'

Uses of ""-q"" can be replaced with redirection to /dev/null.
In many tests, however, ""grep -q"" is used as ""if this string
is in the expected output, we are OK"". In this case, it is
fine to just remove the ""-q"" entirely; it simply makes the
""verbose"" mode of the test slightly more verbose.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/patch_2973.diff
https://github.com/git/git/commit/25ee9731c137d0a24b0f4879eb0b0cce9b77d5b0,13 Mar 2008,"gc: call ""prune --expire 2.weeks.ago"" by default

The only reason we did not call ""prune"" in git-gc was that it is an
inherently dangerous operation: if there is a commit going on, you will
prune loose objects that were just created, and are, in fact, needed by the
commit object just about to be created.

Since it is dangerous, we told users so.  That led to many users not even
daring to run it when it was actually safe. Besides, they are users, and
should not have to remember such details as when to call git-gc with
--prune, or to call git-prune directly.

Of course, the consequence was that ""git gc --auto"" gets triggered much
more often than we would like, since unreferenced loose objects (such as
left-overs from a rebase or a reset --hard) were never pruned.

Alas, git-prune recently learnt the option --expire <minimum-age>, which
makes it a much safer operation.  This allows us to call prune from git-gc,
with a grace period of 2 weeks for the unreferenced loose objects (this
value was determined in a discussion on the git list as a safe one).

If you want to override this grace period, just set the config variable
gc.pruneExpire to a different value; an example would be

	[gc]
		pruneExpire = 6.months.ago

or even ""never"", if you feel really paranoid.

Note that this new behaviour makes ""--prune"" be a no-op.

While adding a test to t5304-prune.sh (since it really tests the implicit
call to ""prune""), also the original test for ""prune --expire"" was moved
there from t1410-reflog.sh, where it did not belong.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>",105,data/crawl/git/patch_2974.diff
https://github.com/git/git/commit/5fb0b3e007d6465af99d08121d46be82c649df5a,13 Mar 2008,"help: warn if specified 'man.viewer' is unsupported, instead of erroring out

When a document viewer that is unknown to the current version of git is
specified in the .git/config file, instead of erroring out the process
entirely, just issue a warning.  It might be that the user usually is
using a newer git that supports it (and the configuration is written for
that version) but is temporarily using an older git that does not know the
viewer.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_2975.diff
https://github.com/git/git/commit/69099d6bedb0217d7c35f7202acd6185551d762f,12 Mar 2008,"help: implement multi-valued ""man.viewer"" config option

This allows multiple viewer candidates to be listed in the configuration
file, like this:

        [man]
                viewer = woman
                viewer = konqueror
                viewer = man

The candidates are tried in the order listed in the configuration file,
and the first suitable one (e.g. konqueror cannot be used outside windowed
environment) is used.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",191,data/crawl/git/patch_2976.diff
https://github.com/git/git/commit/649499845c274dc15809fe3c9162408c334fec57,12 Mar 2008,"help: add ""man.viewer"" config var to use ""woman"" or ""konqueror""

This patch makes it possible to view man pages using other tools
than the ""man"" program. It also implements support for emacs'
""woman"" and konqueror with the man KIO slave to view man pages.

Note that ""emacsclient"" is used with option ""-e"" to launch ""woman""
on emacs and this works only on versions >= 22.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_2977.diff
https://github.com/git/git/commit/3000658f7c15c880f976aac0ade73efd3b1e9790,12 Mar 2008,"""remote update"": print remote name being fetched from

When the other end has dangling symref, ""git fetch"" issues an error
message but that is not grave enough to cause the fetch process to fail.
As the result, the user will see something like this:

    $ git remote update
    error: refs/heads/2.0-uobjects points nowhere!

""remote update"" used to report which remote it is fetching from, like
this:

    $ git remote update
    Updating core
    Updating matthieu
    error: refs/heads/2.0-uobjects points nowhere!
    Updating origin

This reinstates the message ""Updating <name>"" in ""git remote update"".

Signed-off-by: Samuel Tardieu <sam@rfc1149.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1,data/crawl/git/patch_2978.diff
https://github.com/git/git/commit/34110cd4e394e3f92c01a4709689b384c34645d8,09 Mar 2008,"Make 'unpack_trees()' have a separate source and destination index

We will always unpack into our own internal index, but we will take the
source from wherever specified, and we will optionally write the result
to a specified index (optionally, because not everybody even _wants_ any
result: the index diffing really wants to just walk the tree and index
in parallel).

This ends up removing a fair number more lines than it adds, for the
simple reason that we can now skip all the crud that tried to be
oh-so-careful about maintaining our position in the index as we were
traversing and modifying it.  Since we don't actually modify the source
index any more, we can just update the 'o->pos' pointer without worrying
about whether an index entry got removed or replaced or added to.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",255,data/crawl/git/patch_2979.diff
https://github.com/git/git/commit/01904572a5cf869983fab454f552542f16b1fe1f,09 Mar 2008,"Move 'unpack_trees()' over to 'traverse_trees()' interface

This not only deletes more code than it adds, it gets rid of a
singularly hard-to-understand function (unpack_trees_rec()), and
replaces it with a set of smaller and simpler functions that use the
generic tree traversal mechanism to walk over one or more git trees in
parallel.

It's still not the most wonderful interface, and by no means is the new
code easy to understand either, but it's at least a bit less opaque.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",530,data/crawl/git/patch_2980.diff
https://github.com/git/git/commit/1fb328947c8e3ace9df7d2d5374e26e2510a4e93,08 Mar 2008,"git-clean: correct printing relative path

When the given path contains '..' then git-clean incorrectly printed names
of files. This patch changes cmd_clean to use quote_path_relative().
Also, ""failed to remove ..."" message used absolutely path, but not it is
corrected to use relative path.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_2981.diff
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_2982.diff
https://github.com/git/git/commit/348e390b17e7a2b0618fbbfe8cdefa3d73ecbea2,05 Mar 2008,"Teach fetch-pack/upload-pack about --include-tag

The new protocol extension ""include-tag"" allows the client side
of the connection (fetch-pack) to request that the server side of the
native git protocol (upload-pack / pack-objects) use --include-tag
as it prepares the packfile, thus ensuring that an annotated tag object
will be included in the resulting packfile if the object it refers to
was also included into the packfile.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_2983.diff
https://github.com/git/git/commit/c95b3ad9ea310ec89e31a21edecaaf2c374e2c46,04 Mar 2008,"Revert ""unpack-objects: prevent writing of inconsistent objects""

This reverts commit d5ef408b9afb5b4417f4e7e1593a96302d666650.",113,data/crawl/git/patch_2984.diff
https://github.com/git/git/commit/f9e0b6fb60581120b62376ca408dcd45d4bf916f,04 Mar 2008,"gitk: Correct a few strings and comments to say ""git log""

... instead of ""git rev-list"", since we now use git log for
generating the list of commits.

Signed-off-by: Paul Mackerras <paulus@samba.org>",10,data/crawl/git/patch_2985.diff
https://github.com/git/git/commit/30b5940bcd3ed7392795f6a27563013f6f806de4,04 Mar 2008,"git-p4: Fix import of changesets with file deletions

Commit 3a70cdfa42199e16d2d047c286431c4274d65b1a made readP4Files abort quickly
when the changeset only contains files that are marked for deletion with an empty return
value, which caused the commit to not do anything.

This commit changes readP4Files to distinguish between files that need to be passed to p4
print and files that have no content (""deleted"") and merge them in the returned
list.

Signed-off-by: Simon Hausmann <simon@lst.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_2986.diff
https://github.com/git/git/commit/f23d1f76273a59b030ea1028016e6a9fc9679d2c,03 Mar 2008,"Fix random crashes in http_cleanup()

For some reason, http_cleanup was running all active slots, which could
lead in situations where a freed slot would be accessed in
fill_active_slots. OTOH, we are cleaning up, which means the caller
doesn't care about pending requests. Just forget about them instead
or running them.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2987.diff
https://github.com/git/git/commit/870cf7d69872ebc925989b400fb4e7031870db5f,03 Mar 2008,"describe: fix --long output

An error while hand-merging broke the new ""--long"" option.

This should fix it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_2988.diff
https://github.com/git/git/commit/f3ec549481827b10609a43bf504517a0e8063a12,03 Mar 2008,"fetch-pack: check parse_commit/object results

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_2989.diff
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_2990.diff
https://github.com/git/git/commit/0f2d4476c12c15106be20d53c507035e157b66f1,03 Mar 2008,"revert: actually check for a dirty index

The previous code mistakenly used wt_status_prepare to check whether the
index had anything commitable in it; however, that function is just an
init function, and will never report a dirty index.

The correct way with wt_status_* would be to call wt_status_print with the
output pointing to /dev/null or similar. However, that does extra work by
both examining the working tree and spewing status information to nowhere.

Instead, let's just implement the useful subset of wt_status_print as an
""is_index_dirty"" function.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_2991.diff
https://github.com/git/git/commit/859c4fbef589841585f8f21cc567b7016681df7a,02 Mar 2008,"format-patch: wrap cover-letter's shortlog sensibly

Earlier, overly-long onelines would not be wrapped at all, and indented
with 6 spaces.

Instead, we now wrap around at 72 characters, with a first-line indent
of 2 spaces, and the rest with 4 spaces.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_2992.diff
https://github.com/git/git/commit/580d5bffdea56dfae1e745dbda94f326bb161274,02 Mar 2008,"parse-options: new option type to treat an option-like parameter as an argument.

This is meant to be used to keep --not and --all during revision parsing.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/patch_2993.diff
https://github.com/git/git/commit/2efb3b061709bd204f11d54c177dae89e4af0f67,02 Mar 2008,"Clean up find_unique_abbrev() callers

Now find_unique_abbrev() never returns NULL, there is no need for callers
to prepare for seeing NULL and fall back to giving the full 40-hexdigits.

While we are at it, drop ""..."" in the ""git reset"" output that reports the
location of the new HEAD, between the abbreviated commit object name and
the one line commit summary.  Because we are always showing the HEAD
(which cannot be missing!), we never had a case where we show the full 40
hexdigits that is not followed by three dots, and these three dots were
stealing 3 columns from the precious horizontal screen real estate out of
80 that can better be used for the one line commit summary.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2994.diff
https://github.com/git/git/commit/211c89682eeef310f39022b91e88d07cd5784953,01 Mar 2008,"Make git-remote a builtin

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/patch_2995.diff
https://github.com/git/git/commit/5f4347bba39ddb147b06913ac263fc46954d2d0b,01 Mar 2008,"add storage size output to 'git verify-pack -v'

This can possibly break external scripts that depend on the previous
output, but those script can't possibly be critical to Git usage, and
fixing them should be trivial.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_2996.diff
https://github.com/git/git/commit/3449f8c4cb93a0ec445db22ee7549d0b051446d6,01 Mar 2008,"factorize revindex code out of builtin-pack-objects.c

No functional change. This is needed to fix verify-pack in a later patch.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",319,data/crawl/git/patch_2997.diff
https://github.com/git/git/commit/ee542ee3fc309fa95622b274c09eefbe394cd108,01 Mar 2008,"rename: warn user when we have turned off rename detection

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_2998.diff
https://github.com/git/git/commit/301e42edc3fa277059be97b3be5b97d86ddc9d9f,29 Feb 2008,"Fix builtin checkout crashing when given an invalid path

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_2999.diff
https://github.com/git/git/commit/75336878c795b746b1c67b736c96f5ef8a2b3f02,29 Feb 2008,"Write index file on any checkout of files

We need to rewrite the index file when we check out files, even if we
haven't modified the blob info by reading from another tree, so that
we get the stat cache to include the fact that we just modified the
file so it doesn't need to be refreshed.

While we're at it, move everything that needs to be done to check out
some paths from a tree (or the current index) into checkout_paths().

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/patch_3000.diff
https://github.com/git/git/commit/0153be05ae332b8df9bb21d8d249881323e30725,29 Feb 2008,"index-pack: introduce checking mode

Adds strict option, which bails out if the pack would
introduces broken object or links in the repository.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_3001.diff
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_3002.diff
https://github.com/git/git/commit/212945d4a85dfa172ea55ec73b1d830ef2d8582f,28 Feb 2008,"Teach git-describe to verify annotated tag names before output

If an annotated tag describes a commit we want to favor the name
listed in the body of the tag, rather than whatever name it has
been stored under locally.  By doing so it is easier to converse
about tags with others, even if the tags happen to be fetched to
a different name than it was given by its creator.

To avoid confusion when a tag is stored under a different name
(and thus is not readable via git-rev-parse --verify, etc.) we show
a warning message if the name of the tag does not match the ref
we found it under and if that tag was also selected for output.
For example:

  $ git tag -a -m ""i am a test"" testtag
  $ mv .git/refs/tags/testtag .git/refs/tags/bobbytag

  $ ./git-describe HEAD
  warning: tag 'testtag' is really 'bobbytag' here
  testtag

  $ git tag -d testtag
  error: tag 'testtag' not found.
  $ git tag -d bobbytag
  Deleted tag 'bobbytag'

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3003.diff
https://github.com/git/git/commit/42be5cc61202014d4f1df61f9791067191f9393d,28 Feb 2008,"format-patch: remove a leftover debugging message

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1,data/crawl/git/patch_3004.diff
https://github.com/git/git/commit/faa4bc35a05ddb1822f3770cd8c51859e3b929ee,27 Feb 2008,"http-push: add regression tests

http-push tests require a web server with WebDAV support.

This commit introduces a HTTPD test library, which can be configured using
the following environment variables.

GIT_TEST_HTTPD		enable HTTPD tests
LIB_HTTPD_PATH		web server path
LIB_HTTPD_MODULE_PATH	web server modules path
LIB_HTTPD_PORT		listening port
LIB_HTTPD_DAV		enable DAV
LIB_HTTPD_SVN		enable SVN
LIB_HTTPD_SSL		enable SSL

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/patch_3005.diff
https://github.com/git/git/commit/6eaf40608dfe0c23aa990a8c7d4a135df1af3cab,27 Feb 2008,"http-push: push <remote> :<branch> deletes remote branch

This mirrors current ssh/git push syntax.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_3006.diff
https://github.com/git/git/commit/20632071560ad4915f4e620d3c053e5ee3af80f3,27 Feb 2008,"daemon: ensure that base-path is an existing directory

Any request to the daemon would fail if base-path (if specified) is not
a directory. We now check for this condition early.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_3007.diff
https://github.com/git/git/commit/4c750c0d8bfd7e75b86d660def012bff17d2bf8e,27 Feb 2008,"git-p4: git-p4 submit cleanups.

Removed storing the list of commits in a configuration file. We only need the list
of commits at run-time.

Signed-off-by: Simon Hausmann <simon@lst.de>",51,data/crawl/git/patch_3008.diff
https://github.com/git/git/commit/392b78ca42b6b1a68a77966acab38554c6edab3e,27 Feb 2008,"Revert ""pack-objects: Print a message describing the number of threads for packing""

This reverts commit 6c723f5e6bc579e06a904874f1ceeb8ff2b5a17c.
The additional message may be interesting for git developers,
but not useful for the end users, and clutters the output.",3,data/crawl/git/patch_3009.diff
https://github.com/git/git/commit/d6ffc8d784d41977397a49ce5333cfe7db1e9c2c,26 Feb 2008,"add common fsck error printing function

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_3010.diff
https://github.com/git/git/commit/ba002f3b28ab9febea432d4c415dbe581836d9a0,26 Feb 2008,"builtin-fsck: move common object checking code to fsck.c

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",492,data/crawl/git/patch_3011.diff
https://github.com/git/git/commit/45163382437c3862d3beb88134b7a975a3a26443,26 Feb 2008,"builtin-fsck: reports missing parent commits

parse_commit ignores parent commits with certain errors
(eg. a non commit object is already loaded under the sha1 of
the parent). To make fsck reports such errors, it has to compare
the nummer of parent commits returned by parse commit with the
number of parent commits in the object or in the graft/shallow file.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_3012.diff
https://github.com/git/git/commit/7914053ba9901be1f1530f46e8e2e6ee6f4ae5b1,26 Feb 2008,"Remove unused object-ref code

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",167,data/crawl/git/patch_3013.diff
https://github.com/git/git/commit/271b8d25b25e49b367087440e093e755e5f35aa9,26 Feb 2008,"builtin-fsck: move away from object-refs to fsck_walk

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_3014.diff
https://github.com/git/git/commit/355885d531568e144ce5c9a2f65792a3aa8b5528,26 Feb 2008,"add generic, type aware object chain walker

The requirements are:
* it may not crash on NULL pointers
* a callback function is needed, as index-pack/unpack-objects
  need to do different things
* the type information is needed to check the expected <-> real type
  and print better error messages

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_3015.diff
https://github.com/git/git/commit/2bda2cf4f966ae50d08a32a3839f930c1daac907,26 Feb 2008,"Improve collection of information for format-patch --cover-letter

Use the ""boundary"" feature to find the origin (or find that there are
multiple origins), and use the actual list of commits to pass to
shortlog.

This makes all cover letter include shortlogs, and all cover letters
for series with a single boundary commit include diffstats (if there
are multiple boundary commits it's unclear what would be meaningful as
a diffstat). Note that the single boundary test is empirical, not
theoretical; even a -2 limiting condition will give a diffstat if there's
only one boundary commit in this particular case.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",52,data/crawl/git/patch_3016.diff
https://github.com/git/git/commit/552bcac3f9f34833cf546f8c197da4c1985a0b84,26 Feb 2008,"Add API access to shortlog

Shortlog is gives a pretty simple API for cases where you're already
identifying all of the individual commits. Make this available to
other code instead of requiring them to use the revision API and
command line.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",174,data/crawl/git/patch_3017.diff
https://github.com/git/git/commit/518120e3487a00148f8001454f1e76e484442a22,26 Feb 2008,"git-describe: --long shows the object name even for a tagged commit

This is useful when you want to see parts of the commit object name
in ""describe"" output, even when the commit in question happens to be
a tagged version.  Instead of just emitting the tag name, it will
describe such a commit as v1.2-0-deadbeef (0th commit since tag v1.2
that points at object deadbeef....).

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_3018.diff
https://github.com/git/git/commit/1468bd47833c6ec3c85620d6af1d910e9378f714,25 Feb 2008,"Use a single implementation and API for copy_file()

Originally by Kristian Hï¿œgsberg; I fixed the conversion of rerere, which
had a different API.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_3019.diff
https://github.com/git/git/commit/ce4a7bff41c6bb4dc2d578264a429b5e13e89bdc,25 Feb 2008,"Correct fast-export file mode strings to match fast-import standard

The fast-import file format does not expect leading '0' in front
of a file mode; that is we want '100644' and '0100644'.

Thanks to Ian Clatworthy of the Bazaar project for noticing the
difference in output/input.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3020.diff
https://github.com/git/git/commit/8e0fbe671f6a63b885702917bf4e7d7a85c59ab4,25 Feb 2008,"builtin-for-each-ref.c: fix typo in error message

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3021.diff
https://github.com/git/git/commit/2156435ff22437909cda825f1901dceb198fef19,25 Feb 2008,"help: respect aliases

If we have an alias ""foo"" defined, then the help text for
""foo"" (via ""git help foo"" or ""git foo --help"") now shows the
definition of the alias.

Before showing an alias definition, we make sure that there
is no git command which would override the alias (so that
even though you may have a ""log"" alias, even though it will
not work, we don't want to it supersede ""git help log"").

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_3022.diff
https://github.com/git/git/commit/41eb33bd0cbecf1b441ada91ab186ee49fb086cc,25 Feb 2008,"help: use parseopt

This patch converts cmd_help to use parseopt, along with a
few style cleanups, including:

  - enum constants are now ALL_CAPS

  - parse_help_format returns an enum value rather than
    setting a global as a side effect

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/patch_3023.diff
https://github.com/git/git/commit/2c33f7575452f53382dcf77fdc88a2ea5d46f09d,24 Feb 2008,"Teach git-describe --exact-match to avoid expensive tag searches

Sometimes scripts want (or need) the annotated tag name that exactly
matches a specific commit, or no tag at all.  In such cases it can be
difficult to determine if the output of `git describe $commit` is a
real tag name or a tag+abbreviated commit.  A common idiom is to run
git-describe twice:

  if test $(git describe $commit) = $(git describe --abbrev=0 $commit)
  ...

but this is a huge waste of time if the caller is just going to pick a
different method to describe $commit or abort because it is not exactly
an annotated tag.

Setting the maximum number of candidates to 0 allows the caller to ask
for only a tag that directly points at the supplied commit, or to have
git-describe abort if no such item exists.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3024.diff
https://github.com/git/git/commit/04c9e11f2cffaf84dd20602f811bf377f6033cb6,24 Feb 2008,"checkout: error out when index is unmerged even with -m

Even when -m is given to allow fallilng back to 3-way merge
while switching branches, we should refuse if the original index
is unmerged.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>",35,data/crawl/git/patch_3025.diff
https://github.com/git/git/commit/6c723f5e6bc579e06a904874f1ceeb8ff2b5a17c,23 Feb 2008,"pack-objects: Print a message describing the number of threads for packing

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_3026.diff
https://github.com/git/git/commit/55f105653715356fe0b2392445a6f394b891402c,23 Feb 2008,"git-reflog: add option --updateref to write the last reflog sha1 into the ref

Certain sanity checks on the reflog assume that the sha1 of the top reflog
entry will be equal to the sha1 stored in the ref.

When reflog entries are deleted, this assumption may not hold. This patch
adds a new option to git-reflog which causes the subcommands ""expire"" and
""delete"" to update the ref with the sha1 of the top-most reflog entry.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_3027.diff
https://github.com/git/git/commit/3c386aa3380b698396d522f1132343ced482ff42,23 Feb 2008,"reflog-delete: parse standard reflog options

Add support for some standard reflog options such as --dry-run and
--verbose to the reflog delete subcommand.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_3028.diff
https://github.com/git/git/commit/8a2f5e5b032ca73e19ad1425b75c63234eb166fa,22 Feb 2008,"hash-object: cleanup handling of command line options

git hash-object used to process the --stdin command line argument
before reading subsequent arguments.  This caused 'git hash-object
--stdin -w' to fail to actually write the object into the
database, while '-w --stdin' properly did.  Now git hash-object
first reads all arguments, and then processes them.

This regresses one insane use case.  git hash-object used to allow
multiple --stdin arguments on the command line:

   $ git hash-object --stdin --stdin
     foo
     ^D
     bar
     ^D

Now git hash-object errors out if --stdin is given more than once.

Reported by Josh Triplett through
 http://bugs.debian.org/464432

Signed-off-by: Gerrit Pape <pape@smarden.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_3029.diff
https://github.com/git/git/commit/fd74cb0874126876227a958f6250323a4a4478a5,22 Feb 2008,"builtin-tag.c: remove cruft

After changing builtin-tag.c to use strbuf in fd17f5b (Replace all
read_fd use with strbuf_read, and get rid of it.), the last condition
in do_sign() will always be false, as it's checked already right
above.  So let's remove the cruft.

Signed-off-by: Gerrit Pape <pape@smarden.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_3030.diff
https://github.com/git/git/commit/b56fca07d2bac20339d59218ab98de38a9363e77,21 Feb 2008,"checkout: updates to tracking report

Ask branch_get() for the new branch explicitly instead of
letting it return a potentially stale information.

Tighten the logic to find the tracking branch to deal better
with misconfigured repositories (i.e. branch.*.merge can exist
but it may not have a refspec that fetches to .it)

Also fixes grammar in a message, as pointed out by Jeff King.

The function is about reporting and not automatically
fast-forwarding to the upstream, so stop calling it
""adjust-to"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>",10,data/crawl/git/patch_3031.diff
https://github.com/git/git/commit/c1867cea90f8e7ee8e1be3fc07a402dde1b2666d,21 Feb 2008,"git_config_*: don't assume we are parsing a config file

These functions get called by other code, including parsing
config options from the command line. In that case,
config_file_name is NULL, leading to an ugly message or even
a segfault on some implementations of printf.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3032.diff
https://github.com/git/git/commit/aa9c83c2197cafb884face711ab7235790f9f265,21 Feb 2008,"git-clean: handle errors if removing files fails

git-clean simply ignored errors if removing a file or directory failed. This
patch makes it raise a warning and the exit code also greater than zero if
there are remaining files.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_3033.diff
https://github.com/git/git/commit/b0030db331141bedfaf02f34a83f18712c0ae011,20 Feb 2008,"checkout: tone down the ""forked status"" diagnostic messages

When checking out a branch that is behind or forked from a
branch you are building on top of, we used to show full
left-right log but if you already _know_ you have long history
since you forked, it is a bit too much.

This tones down the message quite a bit, by only showing the
number of commits each side has since they diverged.  Also the
message is not shown at all under --quiet.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_3034.diff
https://github.com/git/git/commit/9f0ea7e8283da126c8e1d5e0c3b39c39200258ad,20 Feb 2008,"Resolve value supplied for no-colon push refspecs

When pushing a refspec like ""HEAD"", we used to treat it as
""HEAD:HEAD"", which didn't work without rewriting. Instead, we should
resolve the ref. If it's a symref, further require it to point to a
branch, to avoid doing anything especially unexpected. Also remove the
rewriting previously added in builtin-push.

Since the code for ""HEAD"" uses the regular refspec parsing, it
automatically handles ""+HEAD"" without anything special.

[jc: added a further test to make sure that ""remote.*.push = HEAD"" works]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_3035.diff
https://github.com/git/git/commit/a5a27c79b7e77e28462b6d089e827391b67d3e5f,20 Feb 2008,"Add a --cover-letter option to format-patch

If --cover-letter is provided, generate a cover letter message before
the patches, numbered 0.

Original patch thanks to Johannes Schindelin

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",379,data/crawl/git/patch_3036.diff
https://github.com/git/git/commit/9ed36cfa35cfbd09c454f12194a91cd50ba284d1,20 Feb 2008,"branch: optionally setup branch.*.merge from upstream local branches

""git branch"" and ""git checkout -b"" now honor --track option even when
the upstream branch is local.  Previously --track was silently ignored
when forking from a local branch.  Also the command did not error out
when --track was explicitly asked for but the forked point specified
was not an existing branch (i.e. when there is no way to set up the
tracking configuration), but now it correctly does.

The configuration setting branch.autosetupmerge can now be set to
""always"", which is equivalent to using --track from the command line.
Setting branch.autosetupmerge to ""true"" will retain the former behavior
of only setting up branch.*.merge for remote upstream branches.

Includes test cases for the new functionality.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/patch_3037.diff
https://github.com/git/git/commit/066a5268db8bff70ebd31d7887e060d1463fe57c,20 Feb 2008,"push: document the status output

The output was meant to be a balance of self-explanatory and
terse. In case we have erred too far on the terse side, it
doesn't hurt to explain in more detail what each line means.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_3038.diff
https://github.com/git/git/commit/2b8130c338715936fcda82e734e76e86a33316aa,20 Feb 2008,"push: indicate partialness of error message

The existing message indicates that an error occured during
push, but it is unclear whether _any_ refs were actually
pushed (even though the status table above shows which were
pushed successfully and which were not, the message ""failed
to push"" implies a total failure). By indicating that ""some
refs"" failed, we hopefully indicate to the user that the
table above contains the details.

We could also put in an explicit ""see above for details""
message, but it seemed to clutter the output quite a bit
(both on a line of its own, or at the end of the error line,
which inevitably wraps).

This could also be made more fancy if the transport
mechanism passed back more details on how many refs
succeeded and failed:

  error: failed to push %d out of %d refs to '%s'

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3039.diff
https://github.com/git/git/commit/b02bd65f679024ce25afeddf7e96d6d7aea5fca6,19 Feb 2008,"Export some email and pretty-printing functions

These will be used for generating the cover letter in addition to the
patch emails.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/patch_3040.diff
https://github.com/git/git/commit/569012bf91ddb25220483e8912e079ce8a501525,19 Feb 2008,"Clean up reporting differences on branch switch

This also changes it such that:

$ git checkout

will give the same information without changing branches. This is good
for finding out if the fetch you did recently had anything to say
about the branch you've been on, whose name you don't remember at the
moment.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_3041.diff
https://github.com/git/git/commit/dec38c81657f02624752a65c24d72613316713f5,19 Feb 2008,"check return value from parse_commit() in various functions

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_3042.diff
https://github.com/git/git/commit/9684afd967f61047bbf1b3a8039adf7d41916b31,19 Feb 2008,"revision.c: handle tag->tagged == NULL

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3043.diff
https://github.com/git/git/commit/f7de5a56b75109e1d6651ee2b5bf7f496a5eb18b,19 Feb 2008,"reachable.c::process_tree/blob: check for NULL

As these functions are directly called with the result
from lookup_tree/blob, they must handle NULL.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3044.diff
https://github.com/git/git/commit/a301b0c8f2627f0c0f4c6fd1015c6140a875d0b4,19 Feb 2008,"list-objects.c::process_tree/blob: check for NULL

As these functions are directly called with the result
from lookup_tree/blob, they must handle NULL.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3045.diff
https://github.com/git/git/commit/8177631547e4d10ae071def07eff83e056092bfa,18 Feb 2008,"expose a helper function peel_to_type().

This helper function is the core of ""$object^{type}"" parser.
Now it is made available to callers outside sha1_name.c",60,data/crawl/git/patch_3046.diff
https://github.com/git/git/commit/525ab63950e324823dd45423104cdcf5e46e2610,18 Feb 2008,"merge-recursive: split low-level merge functions out.

This moves low-level merge functions out of merge-recursive.c and
places them in a new separate file, ll-merge.c

Signed-off-by: Junio C Hamano <gitster@pobox.com>",777,data/crawl/git/patch_3047.diff
https://github.com/git/git/commit/3d51e1b5b84bde24f9a19e3cee603f0b57f62001,18 Feb 2008,"check return code of prepare_revision_walk

A failure in prepare_revision_walk can be caused by
a not parseable object.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_3048.diff
https://github.com/git/git/commit/affeef12fb2d10317fbcc7a866fbc3603cf16119,18 Feb 2008,"deref_tag: handle return value NULL

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3049.diff
https://github.com/git/git/commit/79a1e6b432d7d7ffaf2079d4cf895583502ca923,17 Feb 2008,"checkout: notice when the switched branch is behind or forked

When you are switching to a branch that is marked to merge from
somewhere else, e.g. when you have:

    [branch ""next""]
            remote = upstream
            merge = refs/heads/next
    [remote ""upstream""]
            url = ...
            fetch = refs/heads/*:refs/remotes/linus/*

and you say ""git checkout next"", the branch you checked out
may be behind, and you may want to update from the upstream
before continuing to work.

This patch makes the command to check the upstream (in this
example, ""refs/remotes/linus/next"") and our branch ""next"", and:

    (1) if they match, nothing happens;

    (2) if you are ahead (i.e. the upstream is a strict ancestor
        of you), one line message tells you so;

    (3) otherwise, you are either behind or you and the upstream
        have forked.  One line message will tell you which and
        then you will see a ""log --pretty=oneline --left-right"".

We could enhance this with an option that tells the command to
check if there is no local change, and automatically fast
forward when you are truly behind.  But I ripped out that change
because I was unsure what the right way should be to allow users
to control it (issues include that checkout should not become
automatically interactive).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",136,data/crawl/git/patch_3050.diff
https://github.com/git/git/commit/782c2d65c24066a5d83453efb52763bc34c10f81,16 Feb 2008,"Build in checkout

The only differences in behavior should be:

 - git checkout -m with non-trivial merging won't print out
   merge-recursive messages (see the change in t7201-co.sh)

 - git checkout -- paths... will give a sensible error message if
   HEAD is invalid as a commit.

 - some intermediate states which were written to disk in the shell
   version (in particular, index states) are only kept in memory in
   this version, and therefore these can no longer be revealed by
   later write operations becoming impossible.

 - when we change branches, we discard MERGE_MSG, SQUASH_MSG, and
   rr-cache/MERGE_RR, like reset always has.

I'm not 100% sure I got the merge recursive setup exactly right; the
base for a non-trivial merge in the shell code doesn't seem
theoretically justified to me, but I tried to match it anyway, and the
tests all pass this way.

Other than these items, the results should be identical to the shell
version, so far as I can tell.

[jc: squashed lock-file fix from Dscho in]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",489,data/crawl/git/patch_3051.diff
https://github.com/git/git/commit/18bc76164dbf4f6d54b8fa9c9c29db9ca66c7877,16 Feb 2008,"add--interactive: handle initial commit better

There were several points where we looked at the HEAD
commit; for initial commits, this is meaningless. So instead
we:

  - show staged status data as a diff against the empty tree
    instead of HEAD
  - show file diffs as creation events
  - use ""git rm --cached"" to revert instead of going back to
    the HEAD commit

We magically reference the empty tree to implement this.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",124,data/crawl/git/patch_3052.diff
https://github.com/git/git/commit/3b08e5b8c9130f57a38e51557dbb173b9edda5ba,16 Feb 2008,"Include the fast-import marks table in crash reports

If fast-import was not run with --export-marks but we are crashing
the frontend application developer may still benefit from having
that information available to them.  We now include the marks table
as part of the crash report if --export-marks was not supplied on
the command line.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3053.diff
https://github.com/git/git/commit/fbc63ea69487e688a1293227b976b378834550a1,16 Feb 2008,"Include annotated tags in fast-import crash reports

If annotated tags were created they exist in a different namespace
within the fast-import process' internal memory tables so we did
not export them in the inactive branch table.  Now they are written
out after the branches, in the order that they were defined by the
frontend process.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3054.diff
https://github.com/git/git/commit/959ba670ad7173bcb73afaca69625a5635f63b8b,16 Feb 2008,"commit: discard index after setting up partial commit

There may still be some entries from the original index that
should be discarded before we show the status. In
particular, if a file was added in the index but not
included in the partial commit, it would still show up in
the status listing as staged for commit.

Ultimately the correct fix is to keep the two states in
separate index_state variables. Then we can avoid having
to reload the cache from the temporary file altogether, and
just point wt_status_print at the correct index.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_3055.diff
https://github.com/git/git/commit/e8b32e061006d1a62e464e7c2a5385ddd0cb4290,16 Feb 2008,"fast-import: check return value from unpack_entry()

If the tree object we have asked for is deltafied in the packfile and
the delta did not apply correctly or was not able to be decompressed
from the packfile then we can get back NULL instead of the tree data.
This is (part of) the reason why read_sha1_file() can return NULL, so
we need to also handle it the same way.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3056.diff
https://github.com/git/git/commit/588071112c7ca14a04d674e4f019572f0bb77326,15 Feb 2008,"diff.c: fixup garding of config parser from value=NULL

Christian Couder noticed that there still were a handcrafted error()
call that we should have converted to config_error_nonbool() where
parse_lldiff_command() parses the configuration file.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3057.diff
https://github.com/git/git/commit/ff58b9aaf8bf4ce7471a21baa502cb9ddaa9873a,13 Feb 2008,"status: suggest ""git rm --cached"" to unstage for initial commit

It makes no sense to suggest ""git reset HEAD"" since we have
no HEAD commit. This actually used to work but regressed in
f26a0012.

wt_status_print_cached_header was updated to take the whole
wt_status struct rather than just the reference field.
Previously the various code paths were sometimes sending in
s->reference and sometimes sending in NULL, making the
decision on whether this was an initial commit before we
even got to this function. Now we must check the initial
flag here.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3058.diff
https://github.com/git/git/commit/7df7c019c2a46672c12a11a45600cdc698e03029,12 Feb 2008,"Add ""--dirstat"" for some directory statistics

This adds a new form of overview diffstat output, doing something that I
have occasionally ended up doing manually (and badly, because it's
actually pretty nasty to do), and that I think is very useful for an
project like the kernel that has a fairly deep and well-separated
directory structure with semantic meaning.

What I mean by that is that it's often interesting to see exactly which
sub-directories are impacted by a patch, and to what degree - even if you
don't perhaps care so much about the individual files themselves.

What makes the concept more interesting is that the ""impact"" is often
hierarchical: in the kernel, for example, something could either have a
very localized impact to ""fs/ext3/"" and then it's interesting to see that
such a patch changes mostly that subdirectory, but you could have another
patch that changes some generic VFS-layer issue which affects _many_
subdirectories that are all under ""fs/"", but none - or perhaps just a
couple of them - of the individual filesystems are interesting in
themselves.

So what commonly happens is that you may have big changes in a specific
sub-subdirectory, but still also significant separate changes to the
subdirectory leading up to that - maybe you have significant VFS-level
changes, but *also* changes under that VFS layer in the NFS-specific
directories, for example. In that case, you do want the low-level parts
that are significant to show up, but then the insignificant ones should
show up as under the more generic top-level directory.

This patch shows all of that with ""--dirstat"". The output can be either
something simple like

        commit 81772fe...
        Author: Thomas Gleixner <tglx@linutronix.de>
        Date:   Sun Feb 10 23:57:36 2008 +0100

            x86: remove over noisy debug printk

            pageattr-test.c contains a noisy debug printk that people reported.
            The condition under which it prints (randomly tapping into a mem_map[]
            hole and not being able to c_p_a() there) is valid behavior and not
            interesting to report.

            Remove it.

            Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
            Acked-by: Ingo Molnar <mingo@elte.hu>
            Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

         100.0% arch/x86/mm/

or something much more complex like

        commit e231c2e...
        Author: David Howells <dhowells@redhat.com>
        Date:   Thu Feb 7 00:15:26 2008 -0800

            Convert ERR_PTR(PTR_ERR(p)) instances to ERR_CAST(p)

	  20.5% crypto/
	   7.6% fs/afs/
	   7.6% fs/fuse/
	   7.6% fs/gfs2/
	   5.1% fs/jffs2/
	   5.1% fs/nfs/
	   5.1% fs/nfsd/
	   7.6% fs/reiserfs/
	  15.3% fs/
	   7.6% net/rxrpc/
	  10.2% security/keys/

where that latter example is an example of significant work in some
individual fs/*/ subdirectories (like the patches to reiserfs accounting
for 7.6% of the whole), but then discounting those individual filesystems,
there's also 15.3% other ""random"" things that weren't worth reporting on
their oen left over under fs/ in general (either in that directory itself,
or in subdirectories of fs/ that didn't have enough changes to be reported
individually).

I'd like to stress that the ""15.3% fs/"" mentioned above is the stuff that
is under fs/ but that was _not_ significant enough to report on its own.
So the above does _not_ mean that 15.3% of the work was under fs/ per se,
because that 15.3% does *not* include the already-reported 7.6% of afs,
7.6% of fuse etc.

If you want to enable ""cumulative"" directory statistics, you can use the
""--cumulative"" flag, which adds up percentages recursively even when
they have been already reported for a sub-directory.  That cumulative
output is disabled if *all* of the changes in one subdirectory come from
a deeper subdirectory, to avoid repeating subdirectories all the way to
the root.

For an example of the cumulative reporting, the above commit becomes

	commit e231c2e...
	Author: David Howells <dhowells@redhat.com>
	Date:   Thu Feb 7 00:15:26 2008 -0800

	    Convert ERR_PTR(PTR_ERR(p)) instances to ERR_CAST(p)

	  20.5% crypto/
	   7.6% fs/afs/
	   7.6% fs/fuse/
	   7.6% fs/gfs2/
	   5.1% fs/jffs2/
	   5.1% fs/nfs/
	   5.1% fs/nfsd/
	   7.6% fs/reiserfs/
	  61.5% fs/
	   7.6% net/rxrpc/
	  10.2% security/keys/

in which the commit percentages now obviously add up to much more than
100%: now the changes that were already reported for the sub-directories
under fs/ are then cumulatively included in the whole percentage of fs/
(ie now shows 61.5% as opposed to the 15.3% without the cumulative
reporting).

The default reporting limit has been arbitrarily set at 3%, which seems
to be a pretty good cut-off, but you can specify the cut-off manually by
giving it as an option parameter (eg ""--dirstat=5"" makes the cut-off be
at 5% instead)

NOTE! The percentages are purely about the total lines added and removed,
not anything smarter (or dumber) than that. Also note that you should not
generally expect things to add up to 100%: not only does it round down, we
don't report leftover scraps (they add up to the top-level change count,
but we don't even bother reporting that, it only reports subdirectories).

Quite frankly, as a top-level manager this is really convenient for me,
but it's going to be very boring for git itself since there are few
subdirectories. Also, don't expect things to make tons of sense if you
combine this with ""-M"" and there are cross-directory renames etc.

But even for git itself, you can get some fun statistics. Try out

        git log --dirstat

and see the occasional mentions of things like Documentation/, git-gui/,
gitweb/ and gitk-git/. Or try out something like

        git diff --dirstat v1.5.0..v1.5.4

which does kind of git an overview that shows *something*. But in general,
the output is more exciting for big projects with deeper structure, and
doing a

        git diff --dirstat v2.6.24..v2.6.25-rc1

on the kernel is what I actually wrote this for!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_3059.diff
https://github.com/git/git/commit/6c47d0e8f3983cff5bf633cb8e6f7ecfecf48db7,11 Feb 2008,"config.c: guard config parser from value=NULL

user.{name,email}, core.{pager,editor,excludesfile,whitespace} and
i18n.{commit,logoutput}encoding all expect string values.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_3060.diff
https://github.com/git/git/commit/90f5c1864caf40ac2a0fef6bc771eab3ecc561b6,11 Feb 2008,"builtin-log.c: guard config parser from value=NULL

format.suffix expects a string value.  format.numbered is bool plus ""auto""

Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_3061.diff
https://github.com/git/git/commit/e098368b5b990eb05cbc60a271ab6d731820e0c2,11 Feb 2008,"merge-recursive.c: guard config parser from value=NULL

merge.default, merge.*.{name,driver} expect a string value

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3062.diff
https://github.com/git/git/commit/a7269e5cb703083efb084ba19bc703ebc915aa5c,11 Feb 2008,"convert.c: guard config parser from value=NULL

filter.*.smudge and filter.*.clean configuration variables expect a
string value.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3063.diff
https://github.com/git/git/commit/406d95f2d013bd17d79bbcf9438a2f03bd70a78a,11 Feb 2008,"builtin-tag.c: guard config parser from value=NULL

user.signingkey configuration expects a string value.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3064.diff
https://github.com/git/git/commit/995c45279e270811f53b7ff8bf44a07ed3457ddc,11 Feb 2008,"builtin-log.c: guard config parser from value=NULL

format.subjectprefix configuration expects a string value.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3065.diff
https://github.com/git/git/commit/40ea4ed9032a80c9dba706d6030bd11b08c35f4d,11 Feb 2008,"Add config_error_nonbool() helper function

This is used to report misconfigured configuration file that does not
give any value to a non-boolean variable, e.g.

	[section]
		var

It is perfectly fine to say it if the section.var is a boolean (it means
true), but if a variable expects a string value it should be flagged as
a configuration error.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3066.diff
https://github.com/git/git/commit/8464010f974245b1e392d34ddbfb914fcf3d8c23,11 Feb 2008,"Make git prune remove temporary packs that look like write failures

Write errors when repacking (eg, due to out-of-space conditions)
can leave temporary packs (and possibly other files beginning
with ""tmp_"") lying around which no existing
codepath removes and which aren't obvious to the casual user.
These can also be multi-megabyte files wasting noticeable space.
Unfortunately there's no way to definitely tell in builtin-prune
that a tmp_ file is not being used by a concurrent process,
such as a fetch. However, it is documented that pruning should
only be done on a quiet repository and --expire is honoured
(using code from Johannes Schindelin, along with a test case
he wrote) so that its safety is the same as that of loose
object pruning.

Since they might be signs of a problem (unlike orphaned loose
objects) the names of any removed files are printed.

Signed-off-by: David Tweed (david.tweed@gmail.com)
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_3067.diff
https://github.com/git/git/commit/e496c00348140e73bdd202443df52192f6928541,10 Feb 2008,"Move create_branch into a library file

You can also create branches, in exactly the same way, with checkout -b.

This introduces branch.{c,h} library files for doing porcelain-level
operations on branches (such as creating them with their appropriate
default configuration).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",288,data/crawl/git/patch_3068.diff
https://github.com/git/git/commit/b05c6dff8aa8af5a03717e8d863b911cede213a0,10 Feb 2008,"Send unpack-trees debugging output to stderr

This is to keep git-stash from getting confused if you're debugging
unpack-trees.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",14,data/crawl/git/patch_3069.diff
https://github.com/git/git/commit/17e464266701bc1453f60a80cd71d8ba55b528e6,10 Feb 2008,"Add flag to make unpack_trees() not print errors.

(This applies only to errors where a plausible operation is impossible due
to the particular data, not to errors resulting from misuse of the merge
functions.)

This will allow builtin-checkout to suppress merge errors if it's
going to try more merging methods.

Additionally, if unpack_trees() returns with an error, but without
printing anything, it will roll back any changes to the index (by
rereading the index, currently). This obviously could be done by the
caller, but chances are that the caller would forget and debugging
this is difficult. Also, future implementations may give unpack_trees() a
more efficient way of undoing its changes than the caller could.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",44,data/crawl/git/patch_3070.diff
https://github.com/git/git/commit/203a2fe117070964a5bf7cc940a742cad7a19fca,10 Feb 2008,"Allow callers of unpack_trees() to handle failure

Return an error from unpack_trees() instead of calling die(), and exit
with an error in read-tree, builtin-commit, and diff-lib. merge-recursive
already expected an error return from unpack_trees, so it doesn't need to
be changed. The merge function can return negative to abort.

This will be used in builtin-checkout -m.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",97,data/crawl/git/patch_3071.diff
https://github.com/git/git/commit/0520e2154fb6a7418663bdee839c3448d51b9ae4,08 Feb 2008,"git.el: Better handling of subprocess errors.

Where possible, capture the output of the git command and display it
if the command fails.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/patch_3072.diff
https://github.com/git/git/commit/21e5ad50fc5e7277c74cfbb3cf6502468e840f86,06 Feb 2008,"safecrlf: Add mechanism to warn about irreversible crlf conversions

CRLF conversion bears a slight chance of corrupting data.
autocrlf=true will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.

If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
git that this file is binary and git will handle the file
appropriately.

Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.

This patch adds a mechanism that can either warn the user about
an irreversible conversion or can even refuse to convert.  The
mechanism is controlled by the variable core.safecrlf, with the
following values:

 - false: disable safecrlf mechanism
 - warn: warn about irreversible conversions
 - true: refuse irreversible conversions

The default is to warn.  Users are only affected by this default
if core.autocrlf is set.  But the current default of git is to
leave core.autocrlf unset, so users will not see warnings unless
they deliberately chose to activate the autocrlf mechanism.

The safecrlf mechanism's details depend on the git command.  The
general principles when safecrlf is active (not false) are:

 - we warn/error out if files in the work tree can modified in an
   irreversible way without giving the user a chance to backup the
   original file.

 - for read-only operations that do not modify files in the work tree
   we do not not print annoying warnings.

There are exceptions.  Even though...

 - ""git add"" itself does not touch the files in the work tree, the
   next checkout would, so the safety triggers;

 - ""git apply"" to update a text file with a patch does touch the files
   in the work tree, but the operation is about text files and CRLF
   conversion is about fixing the line ending inconsistencies, so the
   safety does not trigger;

 - ""git diff"" itself does not touch the files in the work tree, it is
   often run to inspect the changes you intend to next ""git add"".  To
   catch potential problems early, safety triggers.

The concept of a safety check was originally proposed in a similar
way by Linus Torvalds.  Thanks to Dimitry Potapov for insisting
on getting the naked LF/autocrlf=true case right.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>",200,data/crawl/git/patch_3073.diff
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/patch_3074.diff
https://github.com/git/git/commit/3473f3035d04957ca24d3ccc232f4263b26d6bb8,06 Feb 2008,"git-commit: support variable number of hook arguments

This is a preparatory patch to allow using run_hook for the
prepare-commit-msg hook.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_3075.diff
https://github.com/git/git/commit/482cce820554809c02bc639bb33462f9905e4342,05 Feb 2008,"help: make 'git-help--browse' usable outside 'git-help'.

""git-help--browse"" helper is to launch a browser of the user's choice
to view the HTML version of git documentation for a given command.  It
used to take the name of a command, convert it to the path of the
documentation by prefixing the directory name and appending the
"".html"" suffix, and start the browser on the path.

This updates the division of labor between the caller in help.c and
git-help--browser helper.  The helper is now responsible for launching
a browser of the user's choice on given URLs, and it is the caller's
responsibility to tell it the paths to documentation files.

This is in preparation to reuse the logic to choose user's preferred
browser in instaweb.

The helper had a provision for running it without any command name, in
which case it showed the toplevel ""git(7)"" documentation, but the
caller in help.c never makes such a call.  The helper now exits with a
usage message when no path is given.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_3076.diff
https://github.com/git/git/commit/d6b8fc303b389b026f2bf9918f6f83041488989b,05 Feb 2008,"gitignore(5): Allow ""foo/"" in ignore list to match directory ""foo""

A pattern ""foo/"" in the exclude list did not match directory
""foo"", but a pattern ""foo"" did.  This attempts to extend the
exclude mechanism so that it would while not matching a regular
file or a symbolic link ""foo"".  In order to differentiate a
directory and non directory, this passes down the type of path
being checked to excluded() function.

A downside is that the recursive directory walk may need to run
lstat(2) more often on systems whose ""struct dirent"" do not give
the type of the entry; earlier it did not have to do so for an
excluded path, but we now need to figure out if a path is a
directory before deciding to exclude it.  This is especially bad
because an idea similar to the earlier CE_UPTODATE optimization
to reduce number of lstat(2) calls would by definition not apply
to the codepaths involved, as (1) directories will not be
registered in the index, and (2) excluded paths will not be in
the index anyway.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/patch_3077.diff
https://github.com/git/git/commit/d089ebaad5315325d67db30176df1bbd7754fda9,05 Feb 2008,"setup: sanitize absolute and funny paths in get_pathspec()

The prefix_path() function called from get_pathspec() is
responsible for translating list of user-supplied pathspecs to
list of pathspecs that is relative to the root of the work
tree.  When working inside a subdirectory, the user-supplied
pathspecs are taken to be relative to the current subdirectory.

Among special path components in pathspecs, we used to accept
and interpret only ""."" (""the directory"", meaning a no-op) and
""..""  (""up one level"") at the beginning.  Everything else was
passed through as-is.

For example, if you are in Documentation/ directory of the
project, you can name Documentation/howto/maintain-git.txt as:

    howto/maintain-git.txt
    ../Documentation/howto/maitain-git.txt
    ../././Documentation/howto/maitain-git.txt

but not as:

    howto/./maintain-git.txt
    $(pwd)/howto/maintain-git.txt

This patch updates prefix_path() in several ways:

 - If the pathspec is not absolute, prefix (i.e. the current
   subdirectory relative to the root of the work tree, with
   terminating slash, if not empty) and the pathspec is
   concatenated first and used in the next step.  Otherwise,
   that absolute pathspec is used in the next step.

 - Then special path components ""."" (no-op) and "".."" (up one
   level) are interpreted to simplify the path.  It is an error
   to have too many "".."" to cause the intermediate result to
   step outside of the input to this step.

 - If the original pathspec was not absolute, the result from
   the previous step is the resulting ""sanitized"" pathspec.
   Otherwise, the result from the previous step is still
   absolute, and it is an error if it does not begin with the
   directory that corresponds to the root of the work tree.  The
   directory is stripped away from the result and is returned.

 - In any case, the resulting pathspec in the array
   get_pathspec() returns omit the ones that caused errors.

With this patch, the last two examples also behave as expected.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/patch_3078.diff
https://github.com/git/git/commit/ba227857d24029917f1e939647d826037f026205,05 Feb 2008,"Reduce the number of connects when fetching

This shares the connection between getting the remote ref list and
getting objects in the first batch. (A second connection is still used
to follow tags).

When we do not fetch objects (i.e. either ls-remote disconnects after
getting list of refs, or we decide we are already up-to-date), we
clean up the connection properly; otherwise the connection is left
open in need of cleaning up to avoid getting an error message from
the remote end when ssh is used.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/patch_3079.diff
https://github.com/git/git/commit/45525bd022dda75ec935c9c579e452577dcfd31f,05 Feb 2008,"Make error messages from cherry-pick/revert more sensible

The original ""rewrite in C"" did somewhat a sloppy job while
stealing code from git-write-tree.

The caller pretends as if the write_tree() function would return
an error code and being able to issue a sensible error message
itself, but write_tree() function just calls die() and never
returns an error.  Worse yet, the function claims that it was
running git-write-tree (which is no longer true after
cherry-pick stole it).

Tested-by: Björn Steinbrink <B.Steinbrink@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/patch_3080.diff
https://github.com/git/git/commit/b2979ff599a6bcf9dbf5e2ef1e32b81a1b88e115,05 Feb 2008,"core.whitespace: cr-at-eol

This new error mode allows a line to have a carriage return at the
end of the line when checking and fixing trailing whitespace errors.

Some people like to keep CRLF line ending recorded in the repository,
and still want to take advantage of the automated trailing whitespace
stripping.  We still show ^M in the diff output piped to ""less"" to
remind them that they do have the CR at the end, but these carriage
return characters at the end are no longer flagged as errors.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/patch_3081.diff
https://github.com/git/git/commit/c1beba5b479a39143ebef96ba10103bbd9a70089,05 Feb 2008,"git-apply --whitespace=fix: fix whitespace fuzz introduced by previous run

When you have more than one patch series, an earlier one of which
tries to introduce whitespace breakages and a later one of which
has such a new line in its context, ""git-apply --whitespace=fix""
will apply and fix the whitespace breakages in the earlier one,
making the resulting file not to match the context of the later
patch.

A short demonstration is in the new test, t4125.

For example, suppose the first patch is:

    diff a/hello.txt b/hello.txt
    --- a/hello.txt
    +++ b/hello.txt
    @@ -20,3 +20,3 @@
     Hello world.$
    -How Are you$
    -Today?$
    +How are you $
    +today? $

to fix broken case in the string, but it introduces unwanted
trailing whitespaces to the result (pretend you are looking at
""cat -e"" output of the patch --- '$' signs are not in the patch
but are shown to make the EOL stand out).  And the second patch
is to change the wording of the greeting further:

    diff a/hello.txt b/hello.txt
    --- a/hello.txt
    +++ b/hello.txt
    @@ -18,5 +18,5 @@
     Greetings $

    -Hello world.$
    +Hello, everybody. $
     How are you $
    -today? $
    +these days? $

If you apply the first one with --whitespace=fix, you will get
this as the result:

    Hello world.$
    How are you$
    today?$

and this does not match the preimage of the second patch, which
demands extra whitespace after ""How are you"" and ""today?"".

This series is about teaching ""git apply --whitespace=fix"" to
cope with this situation better.  If the patch does not apply,
it rewrites the second patch like this and retries:

    diff a/hello.txt b/hello.txt
    --- a/hello.txt
    +++ b/hello.txt
    @@ -18,5 +18,5 @@
     Greetings$

    -Hello world.$
    +Hello, everybody.$
     How are you$
    -today?$
    +these days?$

This is done by rewriting the preimage lines in the hunk
(i.e. the lines that begin with ' ' or '-'), using the same
whitespace fixing rules as it is using to apply the patches, so
that it can notice what it did to the previous ones in the
series.

A careful reader may notice that the first patch in the example
did not touch the ""Greetings"" line, so the trailing whitespace
that is in the original preimage of the second patch is not from
the series.  Is rewriting this context line a problem?

If you think about it, you will realize that the reason for the
difference is because the submitter's tree was based on an
earlier version of the file that had whitespaces wrong on that
""Greetings"" line, and the change that introduced the ""Greetings""
line was added independently of this two-patch series to our
tree already with an earlier ""git apply --whitespace=fix"".

So it may appear this logic is rewriting too much, it is not
so.  It is just rewriting what we would have rewritten in the
past.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",236,data/crawl/git/patch_3082.diff
https://github.com/git/git/commit/61e08ccacbfdc6046ccabdfdb01f7755ed5ad8b1,05 Feb 2008,"builtin-apply.c: clean-up apply_one_fragment()

We had two pointer variables pointing to the same buffer and an
integer variable used to index into its tail part that was
active (old, oldlines and oldsize for the preimage, and their
'new' counterparts for the postimage).

To help readability, use 'oldlines' as the allocated pointer,
and use 'old' as the pointer to the tail that advances while the
code builds up the contents in the buffer.  The size 'oldsize'
can be computed as (old-oldines).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_3083.diff
https://github.com/git/git/commit/b94f2eda99646fea71f84ccd895d94b0001d0db6,05 Feb 2008,"builtin-apply.c: make it more line oriented

This changes the way git-apply internally works to be more line
oriented.  The logic to find where the patch applies with offset
used to count line numbers by always counting LF from the
beginning of the buffer, but it is simplified because we count
the line length of the target file and the preimage snippet
upfront now.

The ultimate motivation is to allow applying patches
whose preimage context has whitespace corruption that has
already been corrected in the local copy.  For that purpose, we
introduce a table of line-hash that allows us to match lines
that differ only in whitespaces.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",403,data/crawl/git/patch_3084.diff
https://github.com/git/git/commit/d4fe07f14975b87fa26776792a95f411473cfb46,04 Feb 2008,"git-fsck: report missing author/commit line in a commit as an error

A zero commit date could be caused by:
* a missing author line
* a missing commiter line
* a malformed email address in the commiter line
* a malformed commit date

Simply reporting it as zero commit date is missleading.

Additionally, it upgrades the message to an error (instead of an printf).

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3085.diff
https://github.com/git/git/commit/36ee4ee40e1851442b0b075870cd5de5df6ee2b6,03 Feb 2008,"git-p4: Ensure the working directory and the index are clean before ""git-p4 rebase""

Signed-off-by: Simon Hausmann <simon@lst.de>",5,data/crawl/git/patch_3086.diff
https://github.com/git/git/commit/3a9f0f41db87e197708f84aeb2487bc983f99c9c,26 Jan 2008,"parse-options: catch likely typo in presense of aggregated options.

If options are aggregated, and that the whole token is an exact
prefix of a long option that is longer than 2 letters, reject
it.  This is to prevent a common typo:

	$ git commit -amend

to get interpreted as ""commit all with message 'end'"".

The typo check isn't performed if there is no aggregation,
because the stuck form is the recommended one.  If we have `-o`
being a valid short option that takes an argument, and --option
a long one, then we _MUST_ accept -option as ""'o' option with
argument 'ption'"", which is our official recommended form.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_3087.diff
https://github.com/git/git/commit/5a9dd3998fb4c3ddc048cbcab74a8df72bff91b7,23 Jan 2008,"git-commit: exit non-zero if we fail to commit the index

In certain rare cases, the creation of the commit object
and update of HEAD can succeed, but then installing the
updated index will fail. This is most likely caused by a
full disk or exceeded disk quota. When this happens the
new index file will be removed, and the repository will
be left with the original now-out-of-sync index. The
user can recover with a ""git reset HEAD"" once the disk
space issue is resolved.

We should detect this failure and offer the user some
helpful guidance.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3088.diff
https://github.com/git/git/commit/204ce979a5ed6f182e56bea5282c7b4a2d91208a,21 Jan 2008,"Also use unpack_trees() in do_diff_cache()

As in run_diff_index(), we call unpack_trees() with the oneway_diff()
function in do_diff_cache() now.  This makes the function diff_cache()
obsolete.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",92,data/crawl/git/patch_3089.diff
https://github.com/git/git/commit/d1f2d7e8ca65504722108e2db710788f66c34c6c,21 Jan 2008,"Make run_diff_index() use unpack_trees(), not read_tree()

A plain ""git commit"" would still run lstat() a lot more than necessary,
because wt_status_print() would cause the index to be repeatedly flushed
and re-read by wt_read_cache(), and that would cause the CE_UPTODATE bit
to be lost, resulting in the files in the index being lstat'ed three
times each.

The reason why wt-status.c ended up invalidating and re-reading the
cache multiple times was that it uses ""run_diff_index()"", which in turn
uses ""read_tree()"" to populate the index with *both* the old index and
the tree we want to compare against.

So this patch re-writes run_diff_index() to not use read_tree(), but
instead use ""unpack_trees()"" to diff the index to a tree.  That, in
turn, means that we don't need to modify the index itself, which then
means that we don't need to invalidate it and re-read it!

This, together with the lstat() optimizations, means that ""git commit""
on the kernel tree really only needs to lstat() the index entries once.
That noticeably cuts down on the cached timings.

Best time before:

	[torvalds@woody linux]$ time git commit > /dev/null
	real    0m0.399s
	user    0m0.232s
	sys     0m0.164s

Best time after:

	[torvalds@woody linux]$ time git commit > /dev/null
	real    0m0.254s
	user    0m0.140s
	sys     0m0.112s

so it's a noticeable improvement in addition to being a nice conceptual
cleanup (it's really not that pretty that ""run_diff_index()"" dirties the
index!)

Doing an ""strace -c"" on it also shows that as it cuts the number of
lstat() calls by two thirds, it goes from being lstat()-limited to being
limited by getdents() (which is the readdir system call):

Before:
	% time     seconds  usecs/call     calls    errors syscall
	------ ----------- ----------- --------- --------- ----------------
	 60.69    0.000704           0     69230        31 lstat
	 23.62    0.000274           0      5522           getdents
	  8.36    0.000097           0      5508      2638 open
	  2.59    0.000030           0      2869           close
	  2.50    0.000029           0       274           write
	  1.47    0.000017           0      2844           fstat

After:
	% time     seconds  usecs/call     calls    errors syscall
	------ ----------- ----------- --------- --------- ----------------
	 45.17    0.000276           0      5522           getdents
	 26.51    0.000162           0     23112        31 lstat
	 19.80    0.000121           0      5503      2638 open
	  4.91    0.000030           0      2864           close
	  1.48    0.000020           0       274           write
	  1.34    0.000018           0      2844           fstat
	...

It passes the test-suite for me, but this is another of one of those
really core functions, and certainly pretty subtle, so..

NOTE! The Linux lstat() system call is really quite cheap when everything
is cached, so the fact that this is quite noticeable on Linux is likely to
mean that it is *much* more noticeable on other operating systems. I bet
you'll see a much bigger performance improvement from this on Windows in
particular.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",162,data/crawl/git/patch_3090.diff
https://github.com/git/git/commit/7a51ed66f653c248993b3c4a61932e47933d835e,21 Jan 2008,"Make on-disk index representation separate from in-core one

This converts the index explicitly on read and write to its on-disk
format, allowing the in-core format to contain more flags, and be
simpler.

In particular, the in-core format is now host-endian (as opposed to the
on-disk one that is network endian in order to be able to be shared
across machines) and as a result we can dispense with all the
htonl/ntohl on accesses to the cache_entry fields.

This will make it easier to make use of various temporary flags that do
not exist in the on-disk format.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",386,data/crawl/git/patch_3091.diff
https://github.com/git/git/commit/bb23fdfa6c13b7f9cd5e1dbe0ca2fea31a627c5c,21 Jan 2008,"Teach fast-import to honor pack.compression and pack.depth

We now use the configured pack.compression and pack.depth values
within fast-import, as like builtin-pack-objects fast-import is
generating a packfile for consumption by the Git tools.

We use the same behavior as builtin-pack-objects does for these
options, allowing core.compression to supply the default value
for pack.compression.

The default setting for pack.depth within fast-import is still 10
as users will generally repack fast-import generated packfiles by
`repack -f`.  A large delta depth within the fast-import packfile
can significantly slow down such a later repack.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/patch_3092.diff
https://github.com/git/git/commit/325ce3959ccee623eb973136f41741ca4e0ca56e,20 Jan 2008,"http-push: clarify the reason of error from the initial PROPFIND request

The first thing http-push does is a PROPFIND to see if the other
end supports locking.  The failure message we give is always
reported as ""no DAV locking support at the remote repository"",
regardless of the reason why we ended up not finding the locking
support on the other end.

This moves the code to report ""no DAV locking support"" down the
codepath so that the message is issued only when we successfully
get a response to PROPFIND and the other end say it does not
support locking.  Other failures, such as connectivity glitches
and credential mismatches, have their own error message issued
and we will not issue ""no DAV locking"" error (we do not even
know if the remote end supports it).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3093.diff
https://github.com/git/git/commit/9bdbabade4303bb76d8115cb12470d229d7249e2,20 Jan 2008,"http-push: fail when info/refs exists and is already locked

Failing instead of silently not updating remote refs makes the things
clearer for the user when trying to push on a repository while another
person do (or while a dandling locks are waiting for a 10 minutes
timeout).

When silently not updating remote refs, the user does not even know
that git has pushed the objects but leaved the refs as they were
before (e.g. a new bunch of commits on branch ""master"" is uploaded,
however the branch by itsel still points on the previous head commit).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_3094.diff
https://github.com/git/git/commit/f854824bc50c3a05d7773dce81052f9eb8670d5f,18 Jan 2008,"http-push: disable http-push without USE_CURL_MULTI

Make http-push always fail when not compiled with USE_CURL_MULTI, since
otherwise it corrupts the remote repository (and then fails anyway).

Signed-off-by: Grégoire Barbier <gb@gbarbier.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3095.diff
https://github.com/git/git/commit/c9ced051c3afa6f3da7f59b0dcb92787b2b5c702,18 Jan 2008,"Fix random fast-import errors when compiled with NO_MMAP

fast-import was relying on the fact that on most systems mmap() and
write() are synchronized by the filesystem's buffer cache.  We were
relying on the ability to mmap() 20 bytes beyond the current end
of the file, then later fill in those bytes with a future write()
call, then read them through the previously obtained mmap() address.

This isn't always true with some implementations of NFS, but it is
especially not true with our NO_MMAP=YesPlease build time option used
on some platforms.  If fast-import was built with NO_MMAP=YesPlease
we used the malloc()+pread() emulation and the subsequent write()
call does not update the trailing 20 bytes of a previously obtained
""mmap()"" (aka malloc'd) address.

Under NO_MMAP that behavior causes unpack_entry() in sha1_file.c to
be unable to read an object header (or data) that has been unlucky
enough to be written to the packfile at a location such that it
is in the trailing 20 bytes of a window previously opened on that
same packfile.

This bug has gone unnoticed for a very long time as it is highly data
dependent.  Not only does the object have to be placed at the right
position, but it also needs to be positioned behind some other object
that has been accessed due to a branch cache invalidation.  In other
words the stars had to align just right, and if you did run into
this bug you probably should also have purchased a lottery ticket.

Fortunately the workaround is a lot easier than the bug explanation.

Before we allow unpack_entry() to read data from a pack window
that has also (possibly) been modified through write() we force
all existing windows on that packfile to be closed.  By closing
the windows we ensure that any new access via the emulated mmap()
will reread the packfile, updating to the current file content.

This comes at a slight performance degredation as we cannot reuse
previously cached windows when we update the packfile.  But it
is a fairly minor difference as the window closes happen at only
two points:

 - When the packfile is finalized and its .idx is generated:

   At this stage we are getting ready to update the refs and any
   data access into the packfile is going to be random, and is
   going after only the branch tips (to ensure they are valid).
   Our existing windows (if any) are not likely to be positioned
   at useful locations to access those final tip commits so we
   probably were closing them before anyway.

 - When the branch cache missed and we need to reload:

   At this point fast-import is getting change commands for the next
   commit and it needs to go re-read a tree object it previously
   had written out to the packfile.  What windows we had (if any)
   are not likely to cover the tree in question so we probably were
   closing them before anyway.

We do try to avoid unnecessarily closing windows in the second case
by checking to see if the packfile size has increased since the
last time we called unpack_entry() on that packfile.  If the size
has not changed then we have not written additional data, and any
existing window is still vaild.  This nicely handles the cases where
fast-import is going through a branch cache reload and needs to read
many trees at once.  During such an event we are not likely to be
updating the packfile so we do not cycle the windows between reads.

With this change in place t9301-fast-export.sh (which was broken
by c3b0dec509fe136c5417422f31898b5a4e2d5e02) finally works again.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_3096.diff
https://github.com/git/git/commit/fb54abd604080dc2a719934a0a72964a7caf8ff7,18 Jan 2008,"fast-import.c: don't try to commit marks file if write failed

We also move the assignment of -1 to the lock file descriptor
up, so that rollback_lock_file() can be called safely after a
possible attempt to fclose(). This matches the contents of
the 'if' statement just above testing success of fdopen().

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_3097.diff
https://github.com/git/git/commit/4ed7cd3ab07f7c721daf4241fe1dac306fefd1fb,16 Jan 2008,"Improve use of lockfile API

Remove remaining double close(2)'s.  i.e. close() before
commit_locked_index() or commit_lock_file().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_3098.diff
https://github.com/git/git/commit/0c0478cac87991bd555e81715e9332d11eecd881,16 Jan 2008,"Document lockfile API

We have nice set of placeholders, but nobody stepped in to fill
the gap in the API documentation, so I am doing it myself.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/patch_3099.diff
https://github.com/git/git/commit/c3b0dec509fe136c5417422f31898b5a4e2d5e02,16 Jan 2008,"Be more careful about updating refs

This makes write_ref_sha1() more careful: it actually checks the SHA1 of
the ref it is updating, and refuses to update a ref with an object that it
cannot find.

Perhaps more importantly, it also refuses to update a branch head with a
non-commit object. I don't quite know *how* the stable series maintainers
were able to corrupt their repository to have a HEAD that pointed to a tag
rather than a commit object, but they did. Which results in a totally
broken repository that cannot be cloned or committed on.

So make it harder for people to shoot themselves in the foot like that.

The test t1400-update-ref.sh is fixed at the same time, as it
assumed that the commands involved in the particular test would
not care about corrupted repositories whose refs point at
nonexistant bogus objects.  That assumption does not hold true
anymore.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3100.diff
https://github.com/git/git/commit/6232f62bc77ba9fc57fa97c61a7678a9f243c3bd,16 Jan 2008,"Make 'git fsck' complain about non-commit branches

Since having non-commits in branches is a no-no, and just means you cannot
commit on them, let's make fsck tell you when a branch is bad.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3101.diff
https://github.com/git/git/commit/7c3fd25dcf2a23ed43bae2ba23a46edab4644a9f,16 Jan 2008,"Make builtin-commit.c more careful about parenthood

When creating the commit object, be a whole lot more careful about making
sure that the parent lines really are valid parent lines. Check things
like MERGE_HEAD having proper SHA1 lines in it, and double-check that all
the parents exist and are actually commits.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_3102.diff
https://github.com/git/git/commit/fa9dcf80e1048ea996349891a885ac325019fcac,13 Jan 2008,"Fix performance regression for partial commits

When running ""git commit paths"" to create a partial commit, we
used to carefully build the temporary index so that we do not
lose the cached stat information.  The rewrite of the command in
C lost it by carelessly using read_tree().

This resurrects the earlier behaviour to keep the cached stat
information as much as possible by using one-tree merge logic.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_3103.diff
https://github.com/git/git/commit/95693d45ee1c1d4b76cac672636cf31229186a18,10 Jan 2008,"bundle, fast-import: detect write failure

I noticed some unchecked writes.  This fixes them.

* bundle.c (create_bundle): Die upon write failure.
* fast-import.c (keep_pack): Die upon write or close failure.

Signed-off-by: Jim Meyering <meyering@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3104.diff
https://github.com/git/git/commit/7ec43959f779fa75278c204a71acd4572acc9a1e,07 Jan 2008,"slightly better auto gc message

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3105.diff
https://github.com/git/git/commit/b2e62a7dc6ba20a354d7590bf6a1d9264de7efe3,07 Jan 2008,"Update draft release notes for 1.5.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3106.diff
https://github.com/git/git/commit/64cc1c0909949fa2866ad71ad2d1ab7ccaa673d9,07 Jan 2008,"tree-walk: don't parse incorrect entries

The current code can access memory outside of the tree buffer in the
case of malformed tree entries.

This patch prevents this by:

 * The rest of the buffer must be at least 24 bytes (at least 1 byte
   mode, 1 blank, at least one byte path name, 1 NUL, 20 bytes sha1).

 * Check that the last NUL (21 bytes before the end) is present.
   This ensures that strlen() and get_mode() calls stay within the
   buffer.

 * The mode may not be empty. We have only to reject a blank at the
   begin, as the rest is handled by if (c < '0' || c > '7').

 * The blank is ensured by get_mode().

 * The path must contain at least one character.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3107.diff
https://github.com/git/git/commit/a6d97d49e23382027efff8a8e90e69e0572620c6,07 Jan 2008,"git-rev-parse --symbolic-full-name

The plumbing level can understand that the user meant
""refs/heads/master"" when the user says ""master"" or
""heads/master"", but there is no easy way for the scripts to
figure it out without duplicating the dwim_ref() logic.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_3108.diff
https://github.com/git/git/commit/cb97cc9fef60ea2ff1ce51cf575314c04488dbfd,05 Jan 2008,"builtin-reflog.c: fix typo that accesses an unset variable

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3109.diff
https://github.com/git/git/commit/95bf4bd4f7280312571e642339f3571310d0d660,04 Jan 2008,"git-clean: make ""Would remove ..."" path relative to cwd again

The rewrite changed the output to use the path relative to the
top of the work tree without a good reason.  This fixes it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_3110.diff
https://github.com/git/git/commit/eab827072d1e197eb6ccb6f75e7fe86143735f1e,02 Jan 2008,"receive-pack: check object type of sha1 before using them as commits

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_3111.diff
https://github.com/git/git/commit/49b9362fd35d45dc94ea15006c4bb88671b8da7d,02 Jan 2008,"git-reset: refuse to do hard reset in a bare repository

It makes no sense since there is no working tree. A soft
reset should be fine, though.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_3112.diff
https://github.com/git/git/commit/d56250911f4ec074048f4edb34551eaf384172cc,27 Dec 2007,"Fix rewrite_diff() name quoting.

This moves the logic to quote two paths (prefix + path) in
C-style introduced in the previous commit from the
dump_quoted_path() in combine-diff.c to quote.c, and uses it to
fix rewrite_diff() that never C-quoted the pathnames correctly.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_3113.diff
https://github.com/git/git/commit/462a15bc82e6adbcb8db5fcc4791ec70a026aa4b,27 Dec 2007,"combine-diff: Fix path quoting

Earlier when showing combined diff, the filenames on the ---/+++
header lines were quoted incorrectly.  a/ (or b/) prefix was
output literally and then the path was output, with c-quoting.

This fixes the quoting logic, and while at it, adjusts the code
to use the customizable prefix (a_prefix and b_prefix)
introduced recently.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_3114.diff
https://github.com/git/git/commit/a2cf9f445e9074df1a45f5179cef0d4bb8647dd8,26 Dec 2007,"git-name-rev: add a --(no-)undefined option.

Rework get_rev_name to return NULL rather than ""undefined"" when a
reference is undefined. If --undefined is passed (default), git-name-rev
prints ""undefined"" for the name, else it die()s.

Make git-describe use --no-undefined when calling git-name-rev so
that --contains behavior matches the standard git-describe one.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_3115.diff
https://github.com/git/git/commit/c8deb5a14686c9c2d0ca1e8f42aec8ed44d16954,26 Dec 2007,"Improve error messages when int/long cannot be parsed from config

If a config file has become mildly corrupted due to a missing LF
we may discover some other option joined up against the end of a
numeric value.  For example:

	[section]
	number = 1auto

where the ""auto"" flag was meant to occur on the next line, below
""number"", but the missing LF has caused it to no longer be its
own option.  Instead the word ""auto"" is parsed as a 'unit factor'
for the value of ""number"".

Before this change we got the confusing error message:

  fatal: unknown unit: 'auto'

which told us nothing about where the problem appeared.  Now we get:

  fatal: bad config value for 'aninvalid.unit'

which at least points the user in the right direction of where to
search for the incorrectly formatted configuration file.

Noticed by erikh on #git, which received the original error from
a simple `git checkout -b` due to a midly corrupted config.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/patch_3116.diff
https://github.com/git/git/commit/5f0657374344a5d8cf5ce5a9920a08c0be422194,23 Dec 2007,"Allow selection of different cleanup modes for commit messages

Although we traditionally stripped away excess blank lines, trailing
whitespaces and lines that begin with ""#"" from the commit log message,
sometimes the message just has to be the way user wants it.

For instance, a commit message template can contain lines that begin with
""#"", the message must be kept as close to its original source as possible
if you are converting from a foreign SCM, or maybe the message has a shell
script including its comments for future reference.

The cleanup modes are default, verbatim, whitespace and strip. The
default mode depends on if the message is being edited and will either
strip whitespace and comments (if editor active) or just strip the
whitespace (for where the message is given explicitely).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/patch_3117.diff
https://github.com/git/git/commit/eab9a40b6dd5c1c571b1deb264133db47bb4794d,20 Dec 2007,"Teach diff machinery to display other prefixes than ""a/"" and ""b/""

With the new options ""--src-prefix=<prefix>"", ""--dst-prefix=<prefix>""
and ""--no-prefix"", you can now control the path prefixes of the diff
machinery.  These used to by hardwired to ""a/"" for the source prefix
and ""b/"" for the destination prefix.

Initial patch by Pascal Obry.  Sane option names suggested by Linus.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/patch_3118.diff
https://github.com/git/git/commit/20b178de7b20a0ebf02b8da3b4791c06fc8e3a63,20 Dec 2007,"Improved submodule merge support

When merging conflicting submodule changes from a supermodule, generate
a conflict message saying what went wrong. Also leave the tree in a state
where git status shows the conflict, and git submodule status gives the user
enough information to do the merge manally. Previously this would just fail.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_3119.diff
https://github.com/git/git/commit/56122ed87af181c88e3121795c292689ac574f01,19 Dec 2007,"git show <tag>: show the tagger

For commit objects, the Author is shown, so do the equivalent for
tag objects, too.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3120.diff
https://github.com/git/git/commit/5f48741a5a47643bf1b46ba1d23688f2ef8b1216,18 Dec 2007,"Clarify error response from 'git fetch' for bad responses

This error message prints the reponse from the server at this point.
Label it as such in the output.

Signed-off-by: Sam Vilain <sam@vilain.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3121.diff
https://github.com/git/git/commit/50f22ada523f448986dd6273da14a477cea5a646,17 Dec 2007,"threaded pack-objects: Use condition variables for thread communication.

In the threaded pack-objects code the main thread and the worker threads
must mutually signal that they have assigned a new pack of work or have
completed their work, respectively. Previously, the code used mutexes that
were locked in one thread and unlocked from a different thread, which is
bogus (and happens to work on Linux).

Here we rectify the implementation by using condition variables: There is
one condition variable on which the main thread waits until a thread
requests new work; and each worker thread has its own condition variable
on which it waits until it is assigned new work or signaled to terminate.

As a cleanup, the worker threads are spawned only after the initial work
packages have been assigned.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/patch_3122.diff
https://github.com/git/git/commit/127f72e6897d6671725dc13db42ab5ee1d086721,16 Dec 2007,"whitespace: fix config.txt description of indent-with-non-tab

Fix garbled description.

Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3123.diff
https://github.com/git/git/commit/ffe568859ba89b4283afc36251561a9be3173bf8,16 Dec 2007,"whitespace: more accurate initial-indent highlighting

Instead of highlighting the entire initial indent, highlight only the
problematic spaces.

In the case of an indent like ' \t \t' there may be multiple problematic
ranges, so it's easiest to emit the highlighting as we go instead of
trying rember disjoint ranges and do it all at the end.

Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_3124.diff
https://github.com/git/git/commit/fa4701601a62664a9246a211c5d26f238820737e,15 Dec 2007,"Retire git-runstatus for real.

The command was removed from the builtin command list and there was no
way to invoke it, but the code was still there.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/patch_3125.diff
https://github.com/git/git/commit/70087cdbd3671f5929689a9b77f414b8297641c2,15 Dec 2007,"git-help: add ""help.format"" config variable.

This config variable makes it possible to choose the default format
used to display help. This format will be used only if no option
like -a|--all|-i|--info|-m|--man|-w|--web is passed to ""git-help"".

The following values are possible for this variable:

	- ""man""  --> ""man"" program is used
	- ""info"" --> ""info"" program is used
	- ""web""  --> ""git-browse-help"" is used

By default we still show help using ""man"".

This patch also adds -m|--man command line option to use ""man""
to allow overriding the ""help.format"" configuration variable.

Note that this patch also revert some recent changes in
""git-browse-help"" because they prevented to look for config
variables in the global configuration file.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/patch_3126.diff
https://github.com/git/git/commit/d7e92806cdc5ca78c4db879c68f91c70ff9e1ade,15 Dec 2007,"Move fetch_ref from http-push.c and http-walker.c to http.c

Make the necessary changes to be ok with their difference, and rename the
function http_fetch_ref.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/patch_3127.diff
https://github.com/git/git/commit/3a462bc9ba8cc46dcd5e49ae884968e1921c265f,15 Dec 2007,"Fix various memory leaks in http-push.c and http-walker.c

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_3128.diff
https://github.com/git/git/commit/028c2976389f70e7349bbfeeef0ed0a000d5e447,15 Dec 2007,"Use strbuf in http code

Also, replace whitespaces with tabs in some places

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/patch_3129.diff
https://github.com/git/git/commit/45e2a4b2b0a07cda05dda08b47906100c4711e4e,14 Dec 2007,"Make ""diff --check"" output match ""git apply""

For consistency, make the two tools report whitespace errors in the
same way (the output of ""diff --check"" has been tweaked to match
that of ""git apply"").

Note that although the textual content is basically the same only
""git diff --check"" provides a colorized version of the problematic
lines; making ""git apply"" do colorization will require more extensive
changes (figuring out the diff colorization preferences of the user)
and so that will be a subject for another commit.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_3130.diff
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/patch_3131.diff
https://github.com/git/git/commit/da31b358fb39b32622c14343ffe157a765f3948b,14 Dec 2007,"diff --check: minor fixups

There is no reason --exit-code and --check-diff must be mutually
exclusive, so assign different bits to different results and allow them
to be returned from the command.  Introduce diff_result_code() to factor
out the common code to decide final status code based on diffopt
settings and use it everywhere.

Update tests to match the above fix.

Turning pager off when ""diff --check"" is used is a regression.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_3132.diff
https://github.com/git/git/commit/62c64895cfcf3bbf34969a69fa96a631f7d5b14e,14 Dec 2007,"""diff --check"" should affect exit status

""git diff"" has a --check option that can be used to check for whitespace
problems but it only reported by printing warnings to the
console.

Now when the --check option is used we give a non-zero exit status,
making ""git diff --check"" nicer to use in scripts and hooks.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",189,data/crawl/git/patch_3133.diff
https://github.com/git/git/commit/f604652e05073aaef6d83e83b5d6499b55bb6dfd,12 Dec 2007,"git-diff --numstat -z: make it machine readable

The ""-z"" format is all about machine parsability, but showing renamed
paths as ""common/{a => b}/suffix"" makes it impossible.  The scripts would
never have successfully parsed ""--numstat -z -M"" in the old format.

This fixes the output format in a (hopefully minimally) backward
incompatible way.

 * The output without -z is not changed.  This has given a good way for
   humans to view added and deleted lines separately, and showing the
   path in combined, shorter way would preserve readability.

 * The output with -z is unchanged for paths that do not involve renames.
   Existing scripts that do not pass -M/-C are not affected at all.

 * The output with -z for a renamed path is shown in a format that can
   easily be distinguished from an unrenamed path.

This is based on Jakub Narebski's patch.  Bugs and documentation typos
are mine.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",161,data/crawl/git/patch_3134.diff
https://github.com/git/git/commit/0ac7903ee3c7c93d2426a4aa4f3732bee73e0365,12 Dec 2007,"Use ""whitespace"" consistently

For consistency, change ""white space"" and ""whitespaces"" to
""whitespace"", fixing a couple of adjacent grammar problems in the
docs.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_3135.diff
https://github.com/git/git/commit/3384a2dfc12f0fecd25ecfd6bfa9ee0d82517bf2,12 Dec 2007,"shortlog: default to HEAD when the standard input is a tty

Instead of warning the user that it is expecting git log output from
the standard input (and waiting for the user to type the log from
the keyboard, which is a silly thing to do), default to traverse from
HEAD when there is no rev parameter given and the standard input is
a tty.

This factors out a useful helper ""add_head()"" from builtin-diff.c to a
more appropriate place revision.c while renaming it to more descriptive
name add_head_to_pending(), as that is what the function is about.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3136.diff
https://github.com/git/git/commit/97566ea72ea460576ccaea7b51dd32ab33e1c46c,11 Dec 2007,"Invert numbers and names in the git-shortlog summary mode.

Also make it `cut` friendly using a tab to separate the numbers and names.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3137.diff
https://github.com/git/git/commit/ff72af00f86cbbaaab57c886c70f9799715ca02f,11 Dec 2007,"Support a merge with conflicting gitlink change

merge-recursive did not support merging trees that have conflicting
changes in submodules they contain, and died.  Support it exactly the
same way as how it handles conflicting symbolic link changes --- mark it
as a conflict, take the tentative result from the current side, and
letting the caller resolve the conflict, without dying in merge_file()
function.

Also reword the error message issued when merge_file() has to die
because it sees a tree entry of type it does not support yet.

[jc: fixed up initial draft by Finn Arne Gangstad]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_3138.diff
https://github.com/git/git/commit/bf82a15095ed374496c2e98b6b672aa8c8c4d034,11 Dec 2007,"commit: do not add extra LF at the end of the summary.

The scripted version relied on the nice ""auto-strip the terminating LF""
behaviour shell gives to ""var=$(cmd)"" construct, but we have to roll
that ourselves.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3139.diff
https://github.com/git/git/commit/be15f50538afa4bfb912a86fa9d9f141010ad691,11 Dec 2007,"""git tag -u keyname"" broken

Commit 396865859918e9c7bf8ce74aae137c57da134610 broke signed tags using
the ""-u"" flag when it made builtin-tag.c use parse_options() to parse its
arguments (but it quite possibly was broken even before that, by the
builtin rewrite).

It used to be that passing the signing ID with the -u parameter also
(obviously!) implied that you wanted to sign and annotate the tag, but
that logic got dropped. It also totally ignored the actual key ID that was
passed in.

This reinstates it all.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_3140.diff
https://github.com/git/git/commit/060610c572b21d00bb09ebbab664c0452c7eac9d,11 Dec 2007,"git-svn: replace .rev_db with a more space-efficient .rev_map format

Migrations are done automatically on an as-needed basis when new
revisions are to be fetched.  Stale remote branches do not get
migrated, yet.

However, unless you set noMetadata or useSvkProps it's safe to
just do:

  find $GIT_DIR/svn -name '.rev_db*' -print0 | xargs rm -f

to purge all the old .rev_db files.

The new format is a one-way migration and is NOT compatible with
old versions of git-svn.

This is the replacement for the rev_db format, which was too big
and inefficient for large repositories with a lot of sparse history
(mainly tags).

The format is this:

  - 24 bytes for every record,
    * 4 bytes for the integer representing an SVN revision number
    * 20 bytes representing the sha1 of a git commit

  - No empty padding records like the old format

  - new records are written append-only since SVN revision numbers
    increase monotonically

  - lookups on SVN revision number are done via a binary search

  - Piping the file to xxd(1) -c24 is a good way of dumping it for
    viewing or editing, should the need ever arise.

As with .rev_db, these files are disposable unless noMetadata or
useSvmProps is set.

Signed-off-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/patch_3141.diff
https://github.com/git/git/commit/3d3c4f5d767b33cdaa7557ab009ab1194ff4a8a3,09 Dec 2007,"Re-fix ls-remote

An earlier attempt in 2ea7fe0 (ls-remote: resurrect pattern limit support) forgot
that the user string can also be a glob.  This should finally fix it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/patch_3142.diff
https://github.com/git/git/commit/774751a8bc594a5b56039bbdc43c45e3882dd804,09 Dec 2007,"Re-fix ""builtin-commit: fix --signoff""

An earlier fix to the said commit was incomplete; it mixed up the
meaning of the flag parameter passed to the internal fmt_ident()
function, so this corrects it.

git_author_info() and git_committer_info() can be told to issue a
warning when no usable user information is found, and optionally can be
told to error out.  Operations that actually use the information to
record a new commit or a tag will still error out, but the caller to
leave reflog record will just silently use bogus user information.

Not warning on misconfigured user information while writing a reflog
entry is somewhat debatable, but it is probably nicer to the users to
silently let it pass, because the only information you are losing is who
checked out the branch.

 * git_author_info() and git_committer_info() used to take 1 (positive
   int) to error out with a warning on misconfiguration; this is now
   signalled with a symbolic constant IDENT_ERROR_ON_NO_NAME.

 * These functions used to take -1 (negative int) to warn but continue;
   this is now signalled with a symbolic constant IDENT_WARN_ON_NO_NAME.

 * fmt_ident() function implements the above error reporting behaviour
   common to git_author_info() and git_committer_info().  A symbolic
   constant IDENT_NO_DATE can be or'ed in to the flag parameter to make
   it return only the ""Name <email@address.xz>"".

 * fmt_name() is a thin wrapper around fmt_ident() that always passes
   IDENT_ERROR_ON_NO_NAME and IDENT_NO_DATE.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_3143.diff
https://github.com/git/git/commit/740001a5780a12972c83c99f25c49c8d8cebdb43,09 Dec 2007,"Fix commit-msg hook to allow editing

The old git-commit.sh script allowed the commit-msg hook to not only
prevent a commit from proceding, but also to edit the commit message
on the fly and allow it to proceed. So here we teach builtin-commit
to do the same.

This is based on Wincent's patch, but redone with a clarified logic.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3144.diff
https://github.com/git/git/commit/2ea7fe0d2c15a88e7e3131ad5e7e83c7320d8d0c,09 Dec 2007,"ls-remote: resurrect pattern limit support

""git ls-remote $remote $name1 $name2..."" used to limit the output to
refs that end with one of the $name given from the command line, but
recent rewrite to C forgot to implement that support.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_3145.diff
https://github.com/git/git/commit/1e931cb4d197e30504b6d2cc77b0b045b0167df6,08 Dec 2007,"shortlog: code restructuring and clean-up

The code tried to parse and clean-up the author name and the one line
information in three places (two callers of insert_author_oneline() and
the called function itself), which was a mess.

This renames the callee to insert_one_record() and make it responsible
for cleaning up the author name and one line information.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",165,data/crawl/git/patch_3146.diff
https://github.com/git/git/commit/46f721c8fee9f1c027f96e2bf987ce6e7d05ab94,08 Dec 2007,"add status.relativePaths config variable

The output of git-status was recently changed to output relative
paths. Setting this variable to false restores the old behavior for
any old-timers that prefer it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/patch_3147.diff
https://github.com/git/git/commit/c9ecf4f12aecabfad87507ebd133476ea99fe4cb,06 Dec 2007,"for-each-ref: Fix quoting style constants.

for-each-ref can accept only one quoting style. For this reason it uses
OPT_BIT for the quoting style switches so that it is easy to check for
more than one bit being set. However, not all symbolic constants were
actually single bit values. In particular:

    $ git for-each-ref --python
    error: more than one quoting style ?

This fixes it.

While we are here, let's also remove the space before the question mark.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_3148.diff
https://github.com/git/git/commit/cf1b7869f0c571bbd4f72a4355d9aca558baa0da,06 Dec 2007,"Use gitattributes to define per-path whitespace rule

The `core.whitespace` configuration variable allows you to define what
`diff` and `apply` should consider whitespace errors for all paths in
the project (See gitlink:git-config[1]).  This attribute gives you finer
control per path.

For example, if you have these in the .gitattributes:

    frotz   whitespace
    nitfol  -whitespace
    xyzzy   whitespace=-trailing

all types of whitespace problems known to git are noticed in path 'frotz'
(i.e. diff shows them in diff.whitespace color, and apply warns about
them), no whitespace problem is noticed in path 'nitfol', and the
default types of whitespace problems except ""trailing whitespace"" are
noticed for path 'xyzzy'.  A project with mixed Python and C might want
to have:

    *.c    whitespace
    *.py   whitespace=-indent-with-non-tab

in its toplevel .gitattributes file.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",307,data/crawl/git/patch_3149.diff
https://github.com/git/git/commit/0f6f5a4022de5904926cd528c681468e3f635256,06 Dec 2007,"git config --get-colorbool

This adds an option to help scripts find out color settings from
the configuration file.

    git config --get-colorbool color.diff

inspects color.diff variable, and exits with status 0 (i.e. success) if
color is to be used.  It exits with status 1 otherwise.

If a script wants ""true""/""false"" answer to the standard output of the
command, it can pass an additional boolean parameter to its command
line, telling if its standard output is a terminal, like this:

    git config --get-colorbool color.diff true

When called like this, the command outputs ""true"" to its standard output
if color is to be used (i.e. ""color.diff"" says ""always"", ""auto"", or
""true""), and ""false"" otherwise.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/patch_3150.diff
https://github.com/git/git/commit/9459aa77a032621a29d53605542844641cca843a,05 Dec 2007,"Do check_repository_format() early (re-fix)

This pushes check_repository_format() (actually _gently() version)
to setup_git_directory_gently() in order to prevent from
using unsupported repositories.

New setup_git_directory_gently()'s behaviour is stop searching
for a valid gitdir and return as if there is no gitdir if a
unsupported repository is found. Warning will be thrown in these
cases.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/patch_3151.diff
https://github.com/git/git/commit/364d3e65a5da76ac51217e68b55504cd2cd154aa,04 Dec 2007,"Allow ':/<oneline-prefix>' syntax to work with save_commit_buffer == 0

Earlier, ':/<oneline-prefix>' would not work (i.e. die) with commands that
set save_commit_buffer = 0, such as blame, describe, pack-objects, reflog
and bundle.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_3152.diff
https://github.com/git/git/commit/9663c3bc6a04b9b4f63a54b820d3edb16aa95e6d,03 Dec 2007,"git-commit: Allow to amend a merge commit that does not change the tree

Normally, it should not be allowed to generate an empty commit. A merge
commit generated with git 'merge -s ours' does not change the tree (along
the first parent), but merges are not ""empty"" even if they do not change
the tree. Hence, we should be careful not to forbid this case.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3153.diff
https://github.com/git/git/commit/f2dc849e9c5fe363ad089f6c3f2b7b3d79fd6a6f,03 Dec 2007,"Add 'git fast-export', the sister of 'git fast-import'

This program dumps (parts of) a git repository in the format that
fast-import understands.

For clarity's sake, it does not use the 'inline' method of specifying
blobs in the commits, but builds the blobs before building the commits.

Since signed tags' signatures will not necessarily be valid (think
transformations after the export, or excluding revisions, changing
the history), there are 4 modes to handle them: abort (default),
ignore, warn and strip.  The latter just turns the tags into
unsigned ones.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",616,data/crawl/git/patch_3154.diff
https://github.com/git/git/commit/b5b644a93adb41bca590a3cdfd9b64ccf3614f50,02 Dec 2007,"git-commit: clean up die messages

These are three types of cleanups here:

  1. remove newline from die message (die/report adds it
     already)
  2. typo: s/merger/merge/
  3. the old ""* no commit message?  aborting commit."" is now
     prepended with ""fatal: "", making the asterisk look a
     little funny. Let's just remove it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_3155.diff
https://github.com/git/git/commit/f01913e4190bed98f918ec575229943a0ee47d83,30 Nov 2007,"Add ""--expire <time>"" option to 'git prune'

Earlier, 'git prune' would prune all loose unreachable objects.
This could be quite dangerous, as the objects could be used in
an ongoing operation.

This patch adds a mode to expire only loose, unreachable objects
which are older than a certain time.  For example, by

	git prune --expire 14.days

you can prune only those objects which are loose, unreachable
and older than 14 days (and thus probably outdated).

The implementation uses st.st_mtime rather than st.st_ctime,
because it can be tested better, using 'touch -d <time>' (and
omitting the test when the platform does not support that
command line switch).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_3156.diff
https://github.com/git/git/commit/28391a80a94d2b59d1d21f8264fe5dab91d77249,30 Nov 2007,"receive-pack: allow deletion of corrupt refs

Occasionally, in some setups (*cough* forks on repo.or.cz *cough*) some
refs go stale, e.g. when the forkee rebased and lost some objects needed
by the fork.  The quick & dirty way to deal with those refs is to delete
them and push them again.

However, git-push first would first fetch the current commit name for the
ref, would receive a null sha1 since the ref does not point to a valid
object, then tell receive-pack that it should delete the ref with this
commit name.  delete_ref() would be subsequently be called, and check that
resolve_ref() (which does _not_ check for validity of the object) returns
the same commit name.  Which would fail.

The proper fix is to avoid corrupting repositories, but in the meantime
this is a good fix in any case.

Incidentally, some instances of ""cd .."" in the test cases were fixed, so
that subsequent test cases run in t/trash/ irrespective of the outcome of
the previous test cases.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/patch_3157.diff
https://github.com/git/git/commit/804c7174c9d7c81b5215bcd9002f3bd600ecb6e4,30 Nov 2007,"revert/cherry-pick: Allow overriding the help text by the calling Porcelain

A Porcelain command that uses cherry-pick or revert may make a commit
out of resolved index itself, in which case telling the user to commit
the result is not appropriate at all.  This allows GIT_CHERRY_PICK_HELP
environment variable to be set by the calling Porcelain in order to
override the built-in help text.

[jc: this is heavily modified from the original but should be equivalent
 in spirit]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3158.diff
https://github.com/git/git/commit/d6617c7cdebc20fe007e983f70b44a223dd52c28,30 Nov 2007,"Error out when user doesn't have access permission to the repository

Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>",31,data/crawl/git/patch_3159.diff
https://github.com/git/git/commit/63d285c8494d03a08600bb4453fcce077ecdd517,29 Nov 2007,"per-directory-exclude: lazily read .gitignore files

Operations that walk directories or trees, which potentially need to
consult the .gitignore files, used to always try to open the .gitignore
file every time they entered a new directory, even when they ended up
not needing to call excluded() function to see if a path in the
directory is ignored.  This was done by push/pop exclude_per_directory()
functions that managed the data in a stack.

This changes the directory walking API to remove the need to call these
two functions.  Instead, the directory walk data structure caches the
data used by excluded() function the last time, and lazily reuses it as
much as possible.  Among the data the last check used, the ones from
deeper directories that the path we are checking is outside are
discarded, data from the common leading directories are reused, and then
the directories between the common directory and the directory the path
being checked is in are checked for .gitignore file.  This is very
similar to the way gitattributes are handled.

This API change also fixes ""ls-files -c -i"", which called excluded()
without setting up the gitignore data via the old push/pop functions.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/patch_3160.diff
https://github.com/git/git/commit/9ce0352258a421b654b5db145a42d07cbaef416c,29 Nov 2007,"git-config --get-color: get configured color

This new option allows scripts to grab color setting from the user
configuration, translated to ANSI color escape sequence.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_3161.diff
https://github.com/git/git/commit/7168624c3530d8c7ee32f930f8fb2ba302b9801f,28 Nov 2007,"Do not generate full commit log message if it is not going to be used

Like when it is already specified through -C, -F or -m to git-commit.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_3162.diff
https://github.com/git/git/commit/84ef033832af9e0be886214c70b2006b08630072,26 Nov 2007,"Print the real filename that we failed to open.

When we fail to open a temporary file to be renamed to something else,
we reported the final filename, not the temporary file we failed to
open.

Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3163.diff
https://github.com/git/git/commit/91af7ae54f2a0af453c3a5ac612ed613b38b4fdf,25 Nov 2007,"core.whitespace: documentation updates.

This adds description of core.whitespace to the manual page of git-config,
and updates the stale description of whitespace handling in the manual
page of git-apply.

Also demote ""strip"" to a synonym status for ""fix"" as the value of --whitespace
option given to git-apply.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_3164.diff
https://github.com/git/git/commit/694a577519a762d12b8a53e76b6f1dd3ccf25e7d,23 Nov 2007,"git-branch --contains=commit

This teaches git-branch to limit its listing to branches that
are descendants to the named commit.

When you are using many topic branches, you often would want to
see which branch already includes a commit, so that you know
which can and cannot be rewound without disrupting other people.

One thing that sometimes happens to me is:

 * Somebody sends a patch that is a good maint material.  I
   apply it to 'maint':

     $ git checkout maint
     $ git am -3 -s obvious-fix.patch

 * Then somebody else sends another patch that is possibly a
   good maint material, but I'd want to cook it in 'next' to be
   extra sure.  I fork a topic from 'maint' and apply the patch:

     $ git checkout -b xx/maint-fix-foo
     $ git am -3 -s ,xx-maint-fix-foo.patch

 * A minor typo is found in the ""obvious-fix.patch"".

The above happens without pushing the results out, so I can
freely recover from it by amending 'maint', as long as I do not
forget to rebase the topics that were forked previously.

With this patch, I can do this to find out which topic
branches already contain the faulty commit:

    $ git branch --contains=maint^
      xx/maint-fix-foo

so I can rebase the xx/maint-fix-foo branch before merging it
to 'next'.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_3165.diff
https://github.com/git/git/commit/99a12694582e2148fcd492f1eedaddcfe2a21621,23 Nov 2007,"builtin-commit: Include the diff in the commit message when verbose.

run_diff_index() and the entire diff machinery is hard coded to output
to stdout, so just redirect that and restore it when done.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_3166.diff
https://github.com/git/git/commit/2888605c649ccd423232161186d72c0e6c458a48,23 Nov 2007,"builtin-commit: fix partial-commit support

When making a partial-commit, we need to prepare two index
files, one to be used to write out the tree to be committed
(temporary index) and the other to be used as the index file
after the commit is made.

The temporary index needs to be initialized to HEAD and then all
the named paths on the command line need to be staged on top of
the index.  For this, running add_files_to_cache() that compares
what is in the index and the paths given from the command line
is not enough -- the comparison will miss the paths that the
user previously ran ""git add"" to the index since the HEAD
because the index reset to the HEAD would not know about them.
The index file needs to get the same modification done when
preparing the temporary index as described above.

This implementation mimics the behaviour of the scripted
version of git-commit.  It first runs overlay_tree_on_cache(),
which was stolen from ls-files with the earlier change, to get
the list of paths that the user can potentially mean, and then
uses pathspec_match() to find which ones the user meant.  This
list of paths is used to update both the temporary and the real
index file.

Additional fixes are:

 - read the index file after pre-commit hook returns, as the
   hook can modify it to affect the contents of the commit.

 - remove the temporary index file .git/next-index-* after
   commit is done or aborted.

 - run post-commit hook with the real index file to be used
   after the commit (previously it gave the temporary commit if
   a partial commit was made).

 - resurrect the safety mechanism to refuse partial commits
   during a merge to match the scripted version.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",242,data/crawl/git/patch_3167.diff
https://github.com/git/git/commit/ee425e4643aa2d7be72cb4586d7554cecce44d6e,23 Nov 2007,"Export three helper functions from ls-files

This exports three helper functions from ls-files.

 * pathspec_match() checks if a given path matches a set of pathspecs
   and optionally records which pathspec was used.  This function used
   to be called ""match()"" but renamed to be a bit less vague.

 * report_path_error() takes a set of pathspecs and the record
   pathspec_match() above leaves, and gives error message.  This
   was split out of the main function of ls-files.

 * overlay_tree_on_cache() takes a tree-ish (typically ""HEAD"")
   and overlays it on the current in-core index.  By iterating
   over the resulting index, the caller can find out the paths
   in either the index or the HEAD.  This function used to be
   called ""overlay_tree()"" but renamed to be a bit more
   descriptive.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_3168.diff
https://github.com/git/git/commit/637efc3456576d548ed5b42e70deffca42e7428e,23 Nov 2007,"Replace ""runstatus"" with ""status"" in the tests

We no longer have ""runstatus"", but running ""status"" is no longer that
expensive anyway; it is a builtin.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3169.diff
https://github.com/git/git/commit/18abc2dba4973c3c2cff286fac3340e95e0ee474,23 Nov 2007,"builtin-commit: Clean up an unused variable and a debug fprintf().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_3170.diff
https://github.com/git/git/commit/129fa606365c172d07a5d98bea9345277f221363,23 Nov 2007,"builtin-commit: Add newline when showing which commit was created

The function log_tree_commit() does not break the line, so we have to
do it ourselves.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1,data/crawl/git/patch_3171.diff
https://github.com/git/git/commit/13208572fbe8838fd8835548d7502202d1f7b21d,23 Nov 2007,"builtin-commit: fix --signoff

The Signed-off-by: line contained a spurious timestamp.  The reason was
a call to git_committer_info(1), which automatically added the
timestamp.

Instead, fmt_ident() was taught to interpret an empty string for the
date (as opposed to NULL, which still triggers the default behavior)
as ""do not bother with the timestamp"", and builtin-commit.c uses it.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3172.diff
https://github.com/git/git/commit/367c98866c340bc9cf5cfa88c3b69f027165fc44,23 Nov 2007,"git status: show relative paths when run in a subdirectory

To show the relative paths, the function formerly called quote_crlf()
(now called quote_path()) takes the prefix as an additional argument.

While at it, the static buffers were replaced by strbufs.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",175,data/crawl/git/patch_3173.diff
https://github.com/git/git/commit/e97c9ad96b60d51b0b3852aaaff146015d01cb62,23 Nov 2007,"launch_editor(): read the file, even when EDITOR=:

Earlier we just returned in case EDITOR=: but the message stored
in the file was not read back.  Fix this, at the same time
simplifying the code as suggested by Johannes Sixt.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_3174.diff
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/patch_3175.diff
https://github.com/git/git/commit/7c0ab4458994aa895855abc4a504cf693ecc0cf1,22 Nov 2007,"Teach builtin-add to pass multiple paths to git-add--interactive

Instead of just accepting a single file parameter, git-add now accepts
any number of path parameters, fowarding them to git-add--interactive.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_3176.diff
https://github.com/git/git/commit/f8b6809d52992ad14d035bcf7c8d8cfe00ef45a0,22 Nov 2007,"Fix ""quote"" misconversion for rewrite diff output.

663af3422a648e87945e4d8c0cc3e13671f2bbde (Full rework of
quote_c_style and write_name_quoted.) mistakenly used puts()
when writing out a fixed string when it did not want to add a
terminating LF.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_3177.diff
https://github.com/git/git/commit/07f507155d01af0fdc8aa179b6a779301168b1eb,21 Nov 2007,"send-pack: cluster ref status reporting

Instead of intermingling success and failure, we now print:

  1. all uptodate refs (if args.verbose is enabled)
  2. successfully pushed refs
  3. failed refs

with the assumption that the user is most likely to see the
ones at the end, and therefore we order them from ""least
interesting"" to ""most interesting.""

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_3178.diff
https://github.com/git/git/commit/fce0499fad13815d936c1068b7a064030f543b3d,20 Nov 2007,"Bisect reset: do nothing when not bisecting.

Before this patch, using ""git bisect reset"" when not bisecting
did a ""git checkout master"" for no good reason.

This also happened using ""git bisect replay"" when not bisecting
because ""bisect_replay"" starts by calling ""bisect_reset"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_3179.diff
https://github.com/git/git/commit/396865859918e9c7bf8ce74aae137c57da134610,19 Nov 2007,"Make builtin-tag.c use parse_options.

Also, this removes those tests ensuring that repeated
-m options don't allocate memory more than once, because now
this is done after parsing options, using the last one
when more are given. The same for -F.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/patch_3180.diff
https://github.com/git/git/commit/625db1b7530b621f32b0ef1ef502a09a05872f5d,19 Nov 2007,"git-clean: Fix error message if clean.requireForce is not set.

It was distracting to see this error message:

     clean.requireForce set and -n or -f not given; refusing to clean

even though clean.requireForce was not set at all. This patch distinguishes
the cases and gives a different message depending on whether the
configuration variable is not set or set to true.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_3181.diff
https://github.com/git/git/commit/113f10f22f4b3b599e44e192e241e0bace9cc39e,19 Nov 2007,"Make git-clean a builtin

This replaces git-clean.sh with builtin-clean.c, and moves
git-clean.sh to the examples.

This also introduces a change in behavior when removing directories
explicitly specified as a path.  For example currently:

1. When dir has only untracked files, these two behave differently:

    $ git clean -n dir
    $ git clean -n dir/

the former says ""Would not remove dir/"", while the latter would say
""Would remove dir/untracked"" for all paths under it, but not the
directory itself.

With -d, the former would stop refusing, however since the user
explicitly asked to remove the directory the -d is no longer required.

2. When there are more parameters:

    $ git clean -n dir foo
    $ git clean -n dir/ foo

both cases refuse to remove dir/ unless -d is specified.  Once again
since both cases requested to remove dir the -d is no longer required.

Thanks to Johannes Schindelin for the conversion to using the
parse-options API.

Signed-off-by: Shawn Bohrer <shawn.bohrer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",159,data/crawl/git/patch_3182.diff
https://github.com/git/git/commit/47d996a20c3347bb9efbb44e8ed2d615cfdffba3,19 Nov 2007,"push: support pushing HEAD to real branch name

This teaches ""push <remote> HEAD"" to resolve HEAD on the local
side to its real branch name, e.g. master, and then act as if
the real branch name was specified. So we have a shorthand for
pushing the current branch. Besides HEAD, no other symbolic ref
is resolved.

Thanks to Daniel Barkalow <barkalow@iabervon.org> for suggesting
this implementation, which is much simpler than the
implementation proposed before.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_3183.diff
https://github.com/git/git/commit/2a0fe89a976331cb2163d4f299e38e2cb5010632,18 Nov 2007,"send-pack: tighten remote error reporting

Previously, we set all ref pushes to 'OK', and then marked
them as errors if the remote reported so. This has the
problem that if the remote dies or fails to report a ref, we
just assume it was OK.

Instead, we use a new non-OK state to indicate that we are
expecting status (if the remote doesn't support the
report-status feature, we fall back on the old behavior).
Thus we can flag refs for which we expected a status, but
got none (conversely, we now also print a warning for refs
for which we get a status, but weren't expecting one).

This also allows us to simplify the receive_status exit
code, since each ref is individually marked with failure
until we get a success response. We can just print the usual
status table, so the user still gets a sense of what we were
trying to do when the failure happened.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",97,data/crawl/git/patch_3184.diff
https://github.com/git/git/commit/1f759eeede0597580be8ce26305550350e3c017a,18 Nov 2007,"fetch-pack: Prepare for a side-band demultiplexer in a thread.

get_pack() receives a pair of file descriptors that communicate with
upload-pack at the remote end. In order to support the case where the
side-band demultiplexer runs in a thread, and, hence, in the same process
as the main routine, we must not close the readable file descriptor early.

The handling of the readable fd is changed in the case where upload-pack
supports side-band communication: The old code closed the fd after it was
inherited to the side-band demultiplexer process. Now we do not close it.
The caller (do_fetch_pack) will close it later anyway. The demultiplexer
is the only reader, it does not matter that the fd remains open in the
main process as well as in unpack-objects/index-pack, which inherits it.

The writable fd is not needed in get_pack(), hence, the old code closed
the fd. For symmetry with the readable fd, we now do not close it; the
caller (do_fetch_pack) will close it later anyway. Therefore, the new
behavior is that the channel now remains open during the entire
conversation, but this has no ill effects because upload-pack does not read
from it once it has begun to send the pack data. For the same reason it
does not matter that the writable fd is now inherited to the demultiplexer
and unpack-objects/index-pack processes.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_3185.diff
https://github.com/git/git/commit/ca74c458a3908314cf29b96f1c43fe2b2597de76,17 Nov 2007,"send-pack: assign remote errors to each ref

This lets us show remote errors (e.g., a denied hook) along
with the usual push output.

There is a slightly clever optimization in receive_status
that bears explanation. We need to correlate the returned
status and our ref objects, which naively could be an O(m*n)
operation. However, since the current implementation of
receive-pack returns the errors to us in the same order that
we sent them, we optimistically look for the next ref to be
looked up to come after the last one we have found. So it
should be an O(m+n) merge if the receive-pack behavior
holds, but we fall back to a correct but slower behavior if
it should change.

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_3186.diff
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/patch_3187.diff
https://github.com/git/git/commit/dcf0c16ef1a8c2e468afe686a27a5549fea59798,17 Nov 2007,"core.excludesfile clean-up

There are inconsistencies in the way commands currently handle
the core.excludesfile configuration variable.  The problem is
the variable is too new to be noticed by anything other than
git-add and git-status.

 * git-ls-files does not notice any of the ""ignore"" files by
   default, as it predates the standardized set of ignore files.
   The calling scripts established the convention to use
   .git/info/exclude, .gitignore, and later core.excludesfile.

 * git-add and git-status know about it because they call
   add_excludes_from_file() directly with their own notion of
   which standard set of ignore files to use.  This is just a
   stupid duplication of code that need to be updated every time
   the definition of the standard set of ignore files is
   changed.

 * git-read-tree takes --exclude-per-directory=<gitignore>,
   not because the flexibility was needed.  Again, this was
   because the option predates the standardization of the ignore
   files.

 * git-merge-recursive uses hardcoded per-directory .gitignore
   and nothing else.  git-clean (scripted version) does not
   honor core.* because its call to underlying ls-files does not
   know about it.  git-clean in C (parked in 'pu') doesn't either.

We probably could change git-ls-files to use the standard set
when no excludes are specified on the command line and ignore
processing was asked, or something like that, but that will be a
change in semantics and might break people's scripts in a subtle
way.  I am somewhat reluctant to make such a change.

On the other hand, I think it makes perfect sense to fix
git-read-tree, git-merge-recursive and git-clean to follow the
same rule as other commands.  I do not think of a valid use case
to give an exclude-per-directory that is nonstandard to
read-tree command, outside a ""negative"" test in the t1004 test
script.

This patch is the first step to untangle this mess.

The next step would be to teach read-tree, merge-recursive and
clean (in C) to use setup_standard_excludes().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_3188.diff
https://github.com/git/git/commit/039bc64e886716593d59910694a6c8ed5b72c515,14 Nov 2007,"core.excludesfile clean-up

There are inconsistencies in the way commands currently handle
the core.excludesfile configuration variable.  The problem is
the variable is too new to be noticed by anything other than
git-add and git-status.

 * git-ls-files does not notice any of the ""ignore"" files by
   default, as it predates the standardized set of ignore files.
   The calling scripts established the convention to use
   .git/info/exclude, .gitignore, and later core.excludesfile.

 * git-add and git-status know about it because they call
   add_excludes_from_file() directly with their own notion of
   which standard set of ignore files to use.  This is just a
   stupid duplication of code that need to be updated every time
   the definition of the standard set of ignore files is
   changed.

 * git-read-tree takes --exclude-per-directory=<gitignore>,
   not because the flexibility was needed.  Again, this was
   because the option predates the standardization of the ignore
   files.

 * git-merge-recursive uses hardcoded per-directory .gitignore
   and nothing else.  git-clean (scripted version) does not
   honor core.* because its call to underlying ls-files does not
   know about it.  git-clean in C (parked in 'pu') doesn't either.

We probably could change git-ls-files to use the standard set
when no excludes are specified on the command line and ignore
processing was asked, or something like that, but that will be a
change in semantics and might break people's scripts in a subtle
way.  I am somewhat reluctant to make such a change.

On the other hand, I think it makes perfect sense to fix
git-read-tree, git-merge-recursive and git-clean to follow the
same rule as other commands.  I do not think of a valid use case
to give an exclude-per-directory that is nonstandard to
read-tree command, outside a ""negative"" test in the t1004 test
script.

This patch is the first step to untangle this mess.

The next step would be to teach read-tree, merge-recursive and
clean (in C) to use setup_standard_excludes().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/patch_3189.diff
https://github.com/git/git/commit/f141bd804d2cba4500769934f9d9e7f0f7bcf282,14 Nov 2007,"Handle broken vsnprintf implementations in strbuf

Solaris 9's vsnprintf implementation returns -1 if we pass it a
buffer of length 0.  The only way to get it to give us the actual
length necessary for the formatted string is to grow the buffer
out to have at least 1 byte available in the strbuf and then ask
it to compute the length.

If the available space is 0 I'm growing it out by 64 to ensure
we will get an accurate length estimate from all implementations.
Some callers may need to grow the strbuf again but 64 should be a
reasonable enough initial growth.

We also no longer silently fail to append to the string when we are
faced with a broken vsnprintf implementation.  On Solaris 9 this
silent failure caused me to no longer be able to execute ""git clone""
as we tried to exec the empty string rather than ""git-clone"".

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3190.diff
https://github.com/git/git/commit/c05ef93879696638406cad5be54be577a2666d04,14 Nov 2007,"Grammar fixes for gitattributes documentation

Tweak the ""filter"" section of the gitattributes documentation to add
some
missing articles and improve some word choices without changing the
semantics of the section.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_3191.diff
https://github.com/git/git/commit/436e7a74c638bc9de2e585ce3eb0fd4bd6e06115,14 Nov 2007,"Don't allow fast-import tree delta chains to exceed maximum depth

Brian Downing noticed fast-import can produce tree depths of up
to 6,035 objects and even deeper.  Long delta chains can create
very small packfiles but cause problems during repacking as git
needs to unpack each tree to count the reachable blobs.

What's happening here is the active branch cache isn't big enough.
We're swapping out the branch and thus recycling the tree information
(struct tree_content) back into the free pool.  When we later reload
the tree we set the delta_depth to 0 but we kept the tree we just
reloaded as a delta base.

So if the tree we reloaded was already at the maximum depth we
wouldn't know it and make the new tree a delta.  Multiply the
number of times the branch cache has to swap out the tree times
max_depth (10) and you get the maximum delta depth of a tree created
by fast-import.  In Brian's case above the active branch cache had
to swap the branch out 603/604 times during this import to produce
a tree with a delta depth of 6035.

Acked-by: Brian Downing <bdowning@lavos.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_3192.diff
https://github.com/git/git/commit/27350891de59608d4db689cf0851f7e49158a6e3,12 Nov 2007,"rev-list: Introduce --quiet to avoid /dev/null redirects

Some uses of git-rev-list are to run it with --objects to see if
a range of objects between two or more commits is fully connected
or not.  In such a case the caller doesn't care about the actual
object names or hash hints so formatting this data only for it to
be dumped to /dev/null by a redirect is a waste of CPU time.  If
all the caller needs is the exit status then --quiet can be used
to bypass the commit and object formatting.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",35,data/crawl/git/patch_3193.diff
https://github.com/git/git/commit/8f67f8aefb1b751073f8b36fae8be8f72eb93f4a,12 Nov 2007,"Make the diff_options bitfields be an unsigned with explicit masks.

reverse_diff was a bit-value in disguise, it's merged in the flags now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",304,data/crawl/git/patch_3194.diff
https://github.com/git/git/commit/db7244bd5be12e389badb9cec621dbbcfa11f59a,12 Nov 2007,"parse-options new features.

options flags:
~~~~~~~~~~~~~
  PARSE_OPT_NONEG allow the caller to disallow the negated option to exists.

option types:
~~~~~~~~~~~~
  OPTION_BIT: ORs (or NANDs) a mask.
  OPTION_SET_INT: force the value to be set to this integer.
  OPTION_SET_PTR: force the value to be set to this pointer.

helper:
~~~~~~
  HAS_MULTI_BITS (in git-compat-util.h) is a bit-hack to check if an
  unsigned integer has more than one bit set, useful to check if conflicting
  options have been used.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_3195.diff
https://github.com/git/git/commit/d048a96ee9bec968be0bdc9c43ffce61169545be,10 Nov 2007,"print warning/error/fatal messages in one shot

Not doing so is likely to create a messed up display when sent over the
sideband protocol.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3196.diff
https://github.com/git/git/commit/94c89ba662e964c544fdb171dc8dd33f95b97942,10 Nov 2007,"git-push: plumb in --mirror mode

Plumb in the --mirror mode for git-push.

Signed-off-by: Andy Whitcroft <apw@shadowen.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_3197.diff
https://github.com/git/git/commit/cde75e59e1b2d8dd3ba49bc9034692dd06ee3907,09 Nov 2007,"--pretty=format: on-demand format expansion

Some of the --pretty=format placeholders expansions are expensive to
calculate.  This is made worse by the current code's use of
interpolate(), which requires _all_ placeholders are to be prepared
up front.

One way to speed this up is to check which placeholders are present
in the format string and to prepare only the expansions that are
needed.  That still leaves the allocation overhead of interpolate().

Another way is to use a callback based approach together with the
strbuf library to keep allocations to a minimum and avoid string
copies.  That's what this patch does.  It introduces a new strbuf
function, strbuf_expand().

The function takes a format string, list of placeholder strings,
a user supplied function 'fn', and an opaque pointer 'context'
to tell 'fn' what thingy to operate on.

The function 'fn' is expected to accept a strbuf, a parsed
placeholder string and the 'context' pointer, and append the
interpolated value for the 'context' thingy, according to the
format specified by the placeholder.

Thanks to Pierre Habouzit for his suggestion to use strchrnul() and
the code surrounding its callsite.  And thanks to Junio for most of
this commit message. :)

Here my measurements of most of Paul Mackerras' test cases that
highlighted the performance problem (best of three runs):

(master)
$ time git log --pretty=oneline >/dev/null

real    0m0.390s
user    0m0.340s
sys     0m0.040s

(master)
$ time git log --pretty=raw >/dev/null

real    0m0.434s
user    0m0.408s
sys     0m0.016s

(master)
$ time git log --pretty=""format:%H {%P} %ct"" >/dev/null

real    0m1.347s
user    0m0.080s
sys     0m1.256s

(interp_find_active -- Dscho)
$ time ./git log --pretty=""format:%H {%P} %ct"" >/dev/null

real    0m0.694s
user    0m0.020s
sys     0m0.672s

(strbuf_expand -- this patch)
$ time ./git log --pretty=""format:%H {%P} %ct"" >/dev/null

real    0m0.395s
user    0m0.352s
sys     0m0.028s

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/patch_3198.diff
https://github.com/git/git/commit/a984a06a07cdd0a843eb6107ad56e346d99ac840,08 Nov 2007,"nicer display of thin pack completion

In the same spirit of prettifying Git's output display for mere mortals,
here's a simple extension to the progress API allowing for a final
message to be provided when terminating a progress line, and use it for
the display of the number of objects needed to complete a thin pack,
saving yet one more line of screen display.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_3199.diff
https://github.com/git/git/commit/d50a4bc4e91f03cecc337e5e95dc4c0e0a4054f0,08 Nov 2007,"git-mailsplit: with maildirs not only process cur/, but also new/

When saving patches to a maildir with e.g. mutt, the files are put into
the new/ subdirectory of the maildir, not cur/.  This makes git-am state
""Nothing to do."".  This patch lets git-mailsplit additional check new/
after reading cur/.

This was reported by Joey Hess through
 http://bugs.debian.org/447396

Signed-off-by: Gerrit Pape <pape@smarden.org>
Acked-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Fernando J. Pereda <ferdy@gentoo.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3200.diff
https://github.com/git/git/commit/6b945b9beee4cd01a58d875c0f83d018b4830ca0,08 Nov 2007,"test format-patch -s: make sure MIME content type is shown as needed

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_3201.diff
https://github.com/git/git/commit/7c2c6ee7e0259d591acb3d9841cf5417e6b7a8eb,07 Nov 2007,"Reteach builtin-ls-remote to understand remotes

Prior to being made a builtin git-ls-remote understood that when
it was given a remote name we wanted it to resolve that to the
pre-configured URL and connect to that location.  That changed when
it was converted to a builtin and many of my automation tools broke.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_3202.diff
https://github.com/git/git/commit/21d4783538662143ef52ed6967c948ab27586232,06 Nov 2007,"Add a parseopt mode to git-rev-parse to bring parse-options to shell scripts.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",202,data/crawl/git/patch_3203.diff
https://github.com/git/git/commit/7d8ae93292e2cd862359f02879a0c954faf8afa8,06 Nov 2007,"Use setup_work_tree() in builtin-ls-files.c

Signed-off-by: Mike Hommey <mh@glandium.org>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_3204.diff
https://github.com/git/git/commit/59f0f2f33a420e9a14bb8cef20d38f508f0d098e,06 Nov 2007,"Refactor working tree setup

Create a setup_work_tree() that can be used from any command requiring
a working tree conditionally.

Signed-off-by: Mike Hommey <mh@glandium.org>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_3205.diff
https://github.com/git/git/commit/4c324c00501c2da41987498f8c966b022306b244,06 Nov 2007,"upload-pack: Use finish_{command,async}() instead of waitpid().

upload-pack spawns two processes, rev-list and pack-objects, and carefully
monitors their status so that it can report failure to the remote end.
This change removes the complicated procedures on the grounds of the
following observations:

- If everything is OK, rev-list closes its output pipe end, upon which
  pack-objects (which reads from the pipe) sees EOF and terminates itself,
  closing its output (and error) pipes. upload-pack reads from both until
  it sees EOF in both. It collects the exit codes of the child processes
  (which indicate success) and terminates successfully.

- If rev-list sees an error, it closes its output and terminates with
  failure. pack-objects sees EOF in its input and terminates successfully.
  Again upload-pack reads its inputs until EOF. When it now collects
  the exit codes of its child processes, it notices the failure of rev-list
  and signals failure to the remote end.

- If pack-objects sees an error, it terminates with failure. Since this
  breaks the pipe to rev-list, rev-list is killed with SIGPIPE.
  upload-pack reads its input until EOF, then collects the exit codes of
  the child processes, notices their failures, and signals failure to the
  remote end.

- If upload-pack itself dies unexpectedly, pack-objects is killed with
  SIGPIPE, and subsequently also rev-list.

The upshot of this is that precise monitoring of child processes is not
required because both terminate if either one of them dies unexpectedly.
This allows us to use finish_command() and finish_async() instead of
an explicit waitpid(2) call.

The change is smaller than it looks because most of it only reduces the
indentation of a large part of the inner loop.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",267,data/crawl/git/patch_3206.diff
https://github.com/git/git/commit/620a6cd42ed5ea94684b22714181bf03871733dd,06 Nov 2007,"builtin-reset: avoid forking ""update-index --refresh""

Instead of forking update-index, call refresh_cache() directly.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_3207.diff
https://github.com/git/git/commit/cdf4a751fa728273030651a769f9f45212ff50c9,06 Nov 2007,"builtin-reset: do not call ""ls-files --unmerged""

Since reset is a builtin now, it can use the full power of libgit.a
and check for unmerged entries itself.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_3208.diff
https://github.com/git/git/commit/243e0614e0f8783599b20106b50eee56d0a17332,06 Nov 2007,"parse-options: abbreviation engine fix.

When an option could be an ambiguous abbreviation of two options, the code
used to error out.  Even if an exact match would have occured later.

Test and original patch by Pierre Habouzit.

Signed-off-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_3209.diff
https://github.com/git/git/commit/252a7c02354a3e2825cfde3c5053a04acc07be9c,05 Nov 2007,"Enhance --early-output format

This makes --early-output a bit more advanced, and actually makes it
generate multiple ""Final output:"" headers as it updates things
asynchronously. I realize that the ""Final output:"" line is now illogical,
since it's not really final until it also says ""done"", but

It now _always_ generates a ""Final output:"" header in front of any commit
list, and that output header gives you a *guess* at the maximum number of
commits available. However, it should be noted that the guess can be
completely off: I do a reasonable job estimating it, but it is not meant
to be exact.

So what happens is that you may get output like this:

 - at 0.1 seconds:

	Final output: 2 incomplete
	.. 2 commits listed ..

 - half a second later:

	Final output: 33 incomplete
	.. 33 commits listed ..

 - another half a second after that:

	Final output: 71 incomplete
	.. 71 commits listed ..

 - another half second later:

	Final output: 136 incomplete
	.. 100 commits listed: we hit the --early-output limit, and
	.. will only output 100 commits, and after this you'll not
	.. see an ""incomplete"" report any more since you got as much
	.. early output as you asked for!

 - .. and then finally:

	Final output: 73106 done
	.. all the commits ..

The above is a real-life scenario on my current kernel tree after having
flushed all the caches.

Tested with the experimental gitk patch that Paul sent out, and by looking
at the actual log output (and verifying that my commit count guesses
actually match real life fairly well).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",159,data/crawl/git/patch_3210.diff
https://github.com/git/git/commit/b50fa2bd061c3bb21f2918849ece43ac9ca2c504,05 Nov 2007,"send-pack: require --verbose to show update of tracking refs

This is really an uninteresting detail, and it just takes
attention away from the actual push updates and posssible
errors.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/patch_3211.diff
https://github.com/git/git/commit/3b70da2b17dc5b7df644701a96a141d8f7c5ea15,05 Nov 2007,"receive-pack: don't mention successful updates

The proposed updates are already shown to the user by
send-pack, so there's no point. We continue to show errors,
since they are unexpected.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3212.diff
https://github.com/git/git/commit/f76734902bba47afff622068524a0c38f642d769,05 Nov 2007,"more terse push output

This changes the output of send-pack to match the new,
more terse fetch output. It looks like this:

To git://host.tld/path/to/repo
 + f3325dc...3b91d1c hasforce -> mirror/hasforce (forced update)
   f3325dc..bb022dc  master -> mirror/master
 ! [rejected]        needsforce -> mirror/needsforce (non-fast forward)
 * [new branch]      newbranch -> mirror/newbranch
 * [new tag]         v1.0 -> v1.0

instead of:

updating 'refs/heads/mirror/hasforce' using 'refs/heads/hasforce'
  from f3325dca9c4a34d74012c0e159254f454930cec7
  to   3b91d1c310ca9d7b547b85466dd876e143498304
updating 'refs/heads/mirror/master' using 'refs/heads/master'
  from f3325dca9c4a34d74012c0e159254f454930cec7
  to   bb022dc363d5c2aa9aa3026beb9706d44fbe1328
error: remote 'refs/heads/mirror/needsforce' is not an ancestor of
 local  'refs/heads/needsforce'.
 Maybe you are not up-to-date and need to pull first?
updating 'refs/heads/mirror/newbranch' using 'refs/heads/newbranch'
  from 0000000000000000000000000000000000000000
  to   3b91d1c310ca9d7b547b85466dd876e143498304
updating 'refs/tags/v1.0'
  from 0000000000000000000000000000000000000000
  to   bb022dc363d5c2aa9aa3026beb9706d44fbe1328

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_3213.diff
https://github.com/git/git/commit/ec640ed1cf1d62730555705ec18b785c43e81f62,05 Nov 2007,"remove dead code from the csum-file interface

The provided name argument is always constant and valid in every
caller's context, so no need to have an array of PATH_MAX chars to copy
it into when a simple pointer will do.  Unfortunately that means getting
rid of wascally wabbits too.

The 'error' field is also unused.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_3214.diff
https://github.com/git/git/commit/93fc05eb9ef505a05d9ce9415177697449afc8ad,05 Nov 2007,"Split off the pretty print stuff into its own file

The file commit.c got quite large, but it does not have to be: the
code concerning pretty printing is pretty well contained.  In fact,
this commit just splits it off into pretty.c, leaving commit.c with
just 672 lines.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1443,data/crawl/git/patch_3215.diff
https://github.com/git/git/commit/cdcefbc971d8fcdd293750af7571d4c715f86964,04 Nov 2007,"Add ""--early-output"" log flag for interactive GUI use

This adds support for ""--early-output[=n]"" as a flag to the ""git log""
family of commands.  This allows GUI programs to state that they want to
get some output early, in order to be able to show at least something
quickly, even if the full output may take longer to generate.

If no count is specified, a default count of a hundred commits will be
used, although the actual numbr of commits output may be smaller
depending on how many commits were actually found in the first tenth of
a second (or if *everything* was found before that, in which case no
early output will be provided, and only the final list is made
available).

When the full list is generated, there will be a ""Final output:"" string
prepended to it, regardless of whether any early commits were shown or
not, so that the consumer can always know the difference between early
output and the final list.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/patch_3216.diff
https://github.com/git/git/commit/00ae82895e7f30e52ff12edc1076409c7c53d99e,04 Nov 2007,"errors: ""strict subset"" -> ""ancestor""

The term ""ancestor"" is a bit more intuitive (and more consistent with
the documentation) than the term ""strict subset"".

Also, remove superfluous ""ref"", capitalize, and add some carriage
returns, changing:

    error: remote 'refs/heads/master' is not a strict subset of local ref 'refs/heads/master'. maybe you are not up-to-date and need to pull first?
    error: failed to push to 'ssh://linux-nfs.org/~bfields/exports/git.git'

to:

    error: remote 'refs/heads/master' is not an ancestor of
    local 'refs/heads/master'.
    Maybe you are not up-to-date and need to pull first?
    error: failed to push to 'ssh://linux-nfs.org/~bfields/exports/git.git'

Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_3217.diff
https://github.com/git/git/commit/40cb4fab720807f8525fb125e6c4ddc802ee8ed1,03 Nov 2007,"Use built-in send-pack.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_3218.diff
https://github.com/git/git/commit/18f7c51cf921f7db021e012499456120f3f095a9,03 Nov 2007,"Build-in peek-remote, using transport infrastructure.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/patch_3219.diff
https://github.com/git/git/commit/165f390250874b32ed8158150fe49d574297c9f9,03 Nov 2007,"git-fetch: more terse fetch output

This makes the fetch output much more terse and prettier on a 80 column
display, based on a consensus reached on the mailing list.  Here's an
example output:

Receiving objects: 100% (5439/5439), 1.60 MiB | 636 KiB/s, done.
Resolving deltas: 100% (4604/4604), done.
From git://git.kernel.org/pub/scm/git/git
 ! [rejected]        html -> origin/html  (non fast forward)
   136e631..f45e867  maint -> origin/maint  (fast forward)
   9850e2e..44dd7e0  man -> origin/man  (fast forward)
   3e4bb08..e3d6d56  master -> origin/master  (fast forward)
   fa3665c..536f64a  next -> origin/next  (fast forward)
 + 4f6d9d6...768326f pu -> origin/pu  (forced update)
 * [new branch]      todo -> origin/todo

Some portions of this patch have been extracted from earlier proposals
by Jeff King and Shawn Pearce.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",114,data/crawl/git/patch_3220.diff
https://github.com/git/git/commit/49e703afda0e4e67050fcc8e05b175987c83391c,03 Nov 2007,"core.whitespace: add test for diff whitespace error highlighting

This tests seletive enabling/disabling of whitespace error
highlighting done by colored diff output.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/patch_3221.diff
https://github.com/git/git/commit/aacb8f10a70c07dfe1461684f098313f0edb371f,03 Nov 2007,"test format-patch -s: make sure MIME content type is shown as needed

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/patch_3222.diff
https://github.com/git/git/commit/c65b670e858a0fc010c8b8bb3cbf064bb22e1839,02 Nov 2007,"git-p4: Detect changes to executable bit and include them in p4 submit.

This changeset takes advantage of the new parseDiffTreeEntry(...) function to
detect changes to the execute bit in the git repository.  During submit, git-p4
now looks for changes to the executable bit and if it finds them it ""reopens""
the file in perforce, which allows it to change the file type.

The logic for adding the executable bit in perforce is straightforward: the +x
modifier can be used. Removing the executable bit in perforce requires that the
entire filetype be redefined (there is no way to join remove the bit with a -x
modifier, for example). This changeset includes logic to remove the executable
bit from the full file type while preserving the base file type and other
modifiers.

Signed-off-by: Chris Pettitt <cpettitt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/patch_3223.diff
https://github.com/git/git/commit/4d00bda2aa9dd8cd6ec4015832b80eb1273d46d7,02 Nov 2007,"make the pack index version configurable

It is a good idea to use pack index version 2 all the time since it has
proper protection against propagation of certain pack corruptions when
repacking which is not possible with index version 1, as demonstrated
in test t5302.

Hence this config option.

The default is still pack index version 1.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/patch_3224.diff
https://github.com/git/git/commit/cf84d51c43fa05cce416bfa3f5db3ad70773abdf,30 Oct 2007,"add throughput to progress display

This adds the ability for the progress code to also display transfer
throughput when that makes sense.

The math was inspired by commit c548cf4ee0737a321ffe94f6a97c65baf87281be
from Linus.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/patch_3225.diff
https://github.com/git/git/commit/dc6a0757c4f966dd124bd85be2adad5a0b7b2167,30 Oct 2007,"make struct progress an opaque type

This allows for better management of progress ""object"" existence,
as well as making the progress display implementation more independent
from its callers.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/patch_3226.diff
https://github.com/git/git/commit/0cec6db5cfbb109eebb3a50b6213cab2dc68f0c8,30 Oct 2007,"gitweb: Fix and simplify ""split patch"" detection

There are some cases when one line from ""raw"" git-diff output (raw
format) corresponds to more than one patch in the patchset git-diff
output; we call this situation ""split patch"". Old code misdetected
subsequent patches (for different files) with the same pre-image and
post-image as fragments of ""split patch"", leading to mislabeled
from-file/to-file diff header etc.

Old code used pre-image and post-image SHA-1 identifier ('from_id' and
'to_id') to check if current patch corresponds to old raw diff format
line, to find if one difftree raw line coresponds to more than one
patch in the patch format.  Now we use post-image filename for that.
This assumes that post-image filename alone can be used to identify
difftree raw line.  In the case this changes (which is unlikely
considering current diff engine) we can add 'from_id' and 'to_id'
to detect ""patch splitting"" together with 'to_file'.

Because old code got pre-image and post-image SHA-1 identifier for the
patch from the ""index"" line in extended diff header, diff header had
to be buffered.  New code takes post-image filename from ""git diff""
header, which is first line of a patch; this allows to simplify
git_patchset_body code.  A side effect of resigning diff header
buffering is that there is always ""diff extended_header"" div, even
if extended diff header is empty.

Alternate solution would be to check when git splits patches, and do
not check if parsed info from current patch corresponds to current or
next raw diff format output line.  Git splits patches only for 'T'
(typechange) status filepair, and there always two patches
corresponding to one raw diff line.  It was not used because it would
tie gitweb code to minute details of git diff output.

While at it, use newly introduced parsed_difftree_line wrapper
subroutine in git_difftree_body.

Noticed-by: Yann Dirson <ydirson@altern.org>
Diagnosed-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/patch_3227.diff
https://github.com/git/git/commit/edefb1a23755505cc9b4e750c292cd236b1e8655,30 Oct 2007,"Make builtin-name-rev.c use parse_options.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",64,data/crawl/git/patch_3228.diff
https://github.com/git/git/commit/c3428da87f625d22b7f0ea1e1fb7028264943da3,30 Oct 2007,"Make builtin-for-each-ref.c use parse-opts.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",138,data/crawl/git/patch_3229.diff
https://github.com/git/git/commit/785586142a5ed083b97b7be472c08982ae88fd8f,30 Oct 2007,"Make builtin-symbolic-ref.c use parse_options.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",52,data/crawl/git/patch_3230.diff
https://github.com/git/git/commit/89942be6a13f69a34e5e824977b45204c36cf9e8,30 Oct 2007,"Make builtin-update-ref.c use parse_options

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",65,data/crawl/git/patch_3231.diff
https://github.com/git/git/commit/f481e22a145ed17e85b68bf8ce2de4b80dfa4323,30 Oct 2007,"parse-options: allow callbacks to take no arguments at all.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",11,data/crawl/git/patch_3232.diff
https://github.com/git/git/commit/7f275b91520d31bfbe43ec5a9bbaf8ac6e663ce0,30 Oct 2007,"parse-options: Allow abbreviated options when unambiguous

When there is an option ""--amend"", the option parser now recognizes
""--am"" for that option, provided that there is no other option beginning
with ""--am"".

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",60,data/crawl/git/patch_3233.diff
https://github.com/git/git/commit/0ce865b134f8ccd60f6e584744144b0978a9fdf2,30 Oct 2007,"Add shortcuts for very often used options.

It helps with consistency of the help strings, for example.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",32,data/crawl/git/patch_3234.diff
https://github.com/git/git/commit/ffe659f94d793375fca97dd296422fc10c155016,30 Oct 2007,"parse-options: make some arguments optional, add callbacks.

* add the possibility to use callbacks to parse some options, this can
  help implementing new options kinds with great flexibility. struct option
  gains a callback pointer and a `defval' where callbacks user can put
  either integers or pointers. callbacks also can use the `value' pointer
  for anything, preferably to the pointer to the final storage for the value
  though.

* add a `flag' member to struct option to make explicit that this option may
  have an optional argument. The semantics depends on the option type. For
  INTEGERS, it means that if the switch is not used in its
  --long-form=<value> form, and that there is no token after it or that the
  token does not starts with a digit, then it's assumed that the switch has
  no argument. For STRING or CALLBACK it works the same, except that the
  condition is that the next atom starts with a dash. This is needed to
  implement backward compatible behaviour with existing ways to parse the
  command line. Its use for new options is discouraged.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/patch_3235.diff
https://github.com/git/git/commit/f389c808b6774fb0a1fc54cf2563a7b3038dd1d4,30 Oct 2007,"Rework make_usage to print the usage message immediately

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",47,data/crawl/git/patch_3236.diff
https://github.com/git/git/commit/beb474379315654566e78eea8a0e39c66ebcbb8a,30 Oct 2007,"Add tests for parse-options.c

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",108,data/crawl/git/patch_3237.diff
https://github.com/git/git/commit/4a59fd131229968b08af9bdf221c341f54c52983,30 Oct 2007,"Add a simple option parser.

The option parser takes argc, argv, an array of struct option
and a usage string.  Each of the struct option elements in the array
describes a valid option, its type and a pointer to the location where the
value is written.  The entry point is parse_options(), which scans through
the given argv, and matches each option there against the list of valid
options.  During the scan, argv is rewritten to only contain the
non-option command line arguments and the number of these is returned.

Aggregation of single switches is allowed:
  -rC0 is the same as -r -C 0 (supposing that -C wants an arg).

Every long option automatically support the option with the same name,
prefixed with 'no-' to unset the switch. It assumes that initial value for
strings are ""NULL"" and for integers is ""0"".

Long options are supported either with '=' or without:
  --some-option=foo is the same as --some-option foo

Acked-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",206,data/crawl/git/patch_3238.diff
https://github.com/git/git/commit/1eb056905a2956ca9fabd2edcce05c0a29ce64b1,30 Oct 2007,"include $PATH in generating list of commands for ""help -a""

Git had previously been using the $PATH for scripts--a previous
patch moved exec'ed commands to also use the $PATH. For consistency
""help -a"" should also list commands in the $PATH.

The main commands are still listed from the git_exec_path(), but
the $PATH is walked and other git commands (probably extensions) are
listed.

Signed-off-by: Scott R Parish <srp@srparish.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",157,data/crawl/git/patch_3239.diff
https://github.com/git/git/commit/511707d42b3b3e57d9623493092590546ffeae80,30 Oct 2007,"use only the $PATH for exec'ing git commands

We need to correctly set up $PATH for non-c based git commands.
Since we already do this, we can just use that $PATH and execvp,
instead of looping over the paths with execve.

This patch adds a setup_path() function to exec_cmd.c, which sets
the $PATH order correctly for our search order. execv_git_cmd() is
stripped down to setting up argv and calling execvp(). git.c's
main() only only needs to call setup_path().

Signed-off-by: Scott R Parish <srp@srparish.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",166,data/crawl/git/patch_3240.diff
https://github.com/git/git/commit/0966003c8e8d1528912b10667b903cd981e3a7f6,30 Oct 2007,"list_commands(): simplify code by using chdir()

The current code builds absolute path strings for each file to
stat(), this can easily be avoided by chdir()ing into the directory.

Signed-off-by: Scott R Parish <srp@srparish.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_3241.diff
https://github.com/git/git/commit/3d7e2d857a570b1d6368285f95b67994fc95629e,30 Oct 2007,"""git"" returns 1; ""git help"" and ""git help -a"" return 0

Signed-off-by: Scott R Parish <srp@srparish.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_3242.diff
https://github.com/git/git/commit/7109c889f11b39a2c5a5122e3726be7ffce09faf,29 Oct 2007,"sha1_file.c: avoid gcc signed overflow warnings

With the recent gcc, we get:

sha1_file.c: In check_packed_git_:
sha1_file.c:527: warning: assuming signed overflow does not
occur when assuming that (X + c) < X is always false
sha1_file.c:527: warning: assuming signed overflow does not
occur when assuming that (X + c) < X is always false

for a piece of code that tries to make sure that off_t is large
enough to hold more than 2^32 offset.  The test tried to make
sure these do not wrap-around:

    /* make sure we can deal with large pack offsets */
    off_t x = 0x7fffffffUL, y = 0xffffffffUL;
    if (x > (x + 1) || y > (y + 1)) {

but gcc assumes it can do whatever optimization it wants for a
signed overflow (undefined behaviour) and warns about this
construct.

Follow Linus's suggestion to check sizeof(off_t) instead to work
around the problem.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_3243.diff
https://github.com/git/git/commit/9ad7c5ae8ae4625bfe32d910b0b480cfea9819e0,28 Oct 2007,"git-fetch: do not fail when remote branch disappears

When the branch named with branch.$name.merge is not covered by
the fetch configuration for the remote repository named with
branch.$name.remote, we automatically add that branch to the set
of branches to be fetched.  However, if the remote repository
does not have that branch (e.g. it used to exist, but got
removed), this is not a reason to fail the git-fetch itself.

The situation however will be noticed if git-fetch was called by
git-pull, as the resulting FETCH_HEAD would not have any entry
that is marked for merging.

Acked-By: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_3244.diff
https://github.com/git/git/commit/7791ecbc62b792b3eaa6d722b6dadcea4d0f322d,27 Oct 2007,"revert/cherry-pick: work on merge commits as well

Usually you cannot revert a merge because you do not know which
side of the merge should be considered the mainline (iow, what
change to reverse).

With this patch, cherry-pick and revert learn -m (--mainline)
option that lets you specify the parent number (starting from 1)
of the mainline, so that you can:

	git revert -m 1 $merge

to reverse the changes introduced by the $merge commit relative
to its first parent, and:

	git cherry-pick -m 2 $merge

to replay the changes introduced by the $merge commit relative
to its second parent.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_3245.diff
https://github.com/git/git/commit/50e62a8e703b78fbe59d5f98b1bb36464570a815,27 Oct 2007,"rev-list: implement --bisect-all

This is Junio's patch with some stuff to make --bisect-all
compatible with --bisect-vars.

This option makes it possible to see all the potential
bisection points. The best ones are displayed first.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",103,data/crawl/git/patch_3246.diff
https://github.com/git/git/commit/a238917ba48c44de8a00e3aee7898d9beb5afcd8,27 Oct 2007,"help: remove extra blank line after ""See 'git --help'"" message

The double LF were there only because we gave a list of common
commands.  WIth the list gone, there is no reason to have the
extra blank line.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3247.diff
https://github.com/git/git/commit/644797119d7a3b7a043a51a9cccd8758f8451f91,27 Oct 2007,"copy vs rename detection: avoid unnecessary O(n*m) loops

The core rename detection had some rather stupid code to check if a
pathname was used by a later modification or rename, which basically
walked the whole pathname space for all renames for each rename, in
order to tell whether it was a pure rename (no remaining users) or
should be considered a copy (other users of the source file remaining).

That's really silly, since we can just keep a count of users around, and
replace all those complex and expensive loops with just testing that
simple counter (but this all depends on the previous commit that shared
the diff_filespec data structure by using a separate reference count).

Note that the reference count is not the same as the rename count: they
behave otherwise rather similarly, but the reference count is tied to
the allocation (and decremented at de-allocation, so that when it turns
zero we can get rid of the memory), while the rename count is tied to
the renames and is decremented when we find a rename (so that when it
turns zero we know that it was a rename, not a copy).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_3248.diff
https://github.com/git/git/commit/55db1df0c86b0fded61731647a8f1cd6e7dc9b04,25 Oct 2007,"Add some fancy colors in the test library when terminal supports it.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/patch_3249.diff
https://github.com/git/git/commit/b5d21a4b68aa69c7a2b4d2239aaa9ee5a51058a7,22 Oct 2007,"On error, do not list all commands, but point to --help option

- Remove out call to list_common_cmds_help()
- Send error message to stderr, not stdout.

Signed-off-by: Jari Aalto <jari.aalto@cante.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",3,data/crawl/git/patch_3250.diff
https://github.com/git/git/commit/5be507fc955bd14643cac1162cfaa592d0e236ba,21 Oct 2007,"Use PRIuMAX instead of 'unsigned long long' in show-index

Elsewhere in Git we already use PRIuMAX and cast to uintmax_t when
we need to display a value that is 'very big' and we're not exactly
sure what the largest display size is for this platform.

This particular fix is needed so we can do the incredibly crazy
temporary hack of:

    diff --git a/cache.h b/cache.h
    index e0abcd6..6637fd8 100644
    --- a/cache.h
    +++ b/cache.h
    @@ -6,6 +6,7 @@

     #include SHA1_HEADER
     #include <zlib.h>
    +#define long long long

     #if ZLIB_VERNUM < 0x1200
     #define deflateBound(c,s)  ((s) + (((s) + 7) >> 3) + (((s) + 63) >> 6) + 11)

allowing us to more easily look for locations where we are passing
a pointer to an 8 byte value to a function that expects a 4 byte
value.  This can occur on some platforms where sizeof(long) == 8
and sizeof(size_t) == 4.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",2,data/crawl/git/patch_3251.diff
https://github.com/git/git/commit/546bb5823249678bc6ad11e65661d896ed83448a,21 Oct 2007,"Use the asyncronous function infrastructure to run the content filter.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/patch_3252.diff
https://github.com/git/git/commit/21edd3f197df80e9493233a3b9849b61764ebf46,21 Oct 2007,"upload-pack: Run rev-list in an asynchronous function.

This gets rid of an explicit fork().

Since upload-pack has to coordinate two processes (rev-list and
pack-objects), we cannot use the normal finish_async(), but have to monitor
the process explicitly. Hence, there are no changes at this front.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",46,data/crawl/git/patch_3253.diff
https://github.com/git/git/commit/088fab5fc48ebb8b476c3b32dd25df3aa4236f94,21 Oct 2007,"Use the asyncronous function infrastructure in builtin-fetch-pack.c.

We run the sideband demultiplexer in an asynchronous function.

Note that earlier there was a check in the child process that closed
xd[1] only if it was different from xd[0]; this test is no longer needed
because git_connect() always returns two different file descriptors
(see ec587fde0a76780931c7ac32474c8c000aa45134).

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",39,data/crawl/git/patch_3254.diff
https://github.com/git/git/commit/2d22c208304156892fd6674e0055a3212c1e2d2e,21 Oct 2007,"Add infrastructure to run a function asynchronously.

This adds start_async() and finish_async(), which runs a function
asynchronously. Communication with the caller happens only via pipes.
For this reason, this implementation forks off a child process that runs
the function.

[sp: Style nit fixed by removing unnecessary block on if condition
     inside of start_async()]

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",73,data/crawl/git/patch_3255.diff
https://github.com/git/git/commit/cc41fa8da9b9e9d23221d3be47a80409a89732d4,21 Oct 2007,"upload-pack: Use start_command() to run pack-objects in create_pack_file().

This gets rid of an explicit fork/exec.

Since upload-pack has to coordinate two processes (rev-list and
pack-objects), we cannot use the normal finish_command(), but have to
monitor the processes explicitly. Hence, the waitpid() call remains.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",105,data/crawl/git/patch_3256.diff
https://github.com/git/git/commit/477822c35dbf3d5f16fce1425638e761e60ede3d,21 Oct 2007,"Use start_comand() in builtin-fetch-pack.c instead of explicit fork/exec.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",56,data/crawl/git/patch_3257.diff
https://github.com/git/git/commit/d5535ec75ce1cdf57ef52b57c58c548121ce99ba,21 Oct 2007,"Use run_command() to spawn external diff programs instead of fork/exec.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",38,data/crawl/git/patch_3258.diff
https://github.com/git/git/commit/dc1bfdcd1a8af81885f1831c5e6dcfe5cf61372e,21 Oct 2007,"Use start_command() to run content filters instead of explicit fork/exec.

The previous code already used finish_command() to wait for the process
to terminate, but did not use start_command() to run it.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",30,data/crawl/git/patch_3259.diff
https://github.com/git/git/commit/f364cb88238bbb468b0e076c53a055bcb8603b60,21 Oct 2007,"Use start_command() in git_connect() instead of explicit fork/exec.

The child process handling is delegated to start_command() and
finish_command().

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",103,data/crawl/git/patch_3260.diff
https://github.com/git/git/commit/98158e9cfd2808613f305bf587ce697762c884bb,21 Oct 2007,"Change git_connect() to return a struct child_process instead of a pid_t.

This prepares the API of git_connect() and finish_connect() to operate on
a struct child_process. Currently, we just use that object as a placeholder
for the pid that we used to return. A follow-up patch will change the
implementation of git_connect() and finish_connect() to make full use
of the object.

Old code had early-return-on-error checks at the calling sites of
git_connect(), but since git_connect() dies on errors anyway, these checks
were removed.

[sp: Corrected style nit of ""conn == NULL"" to ""!conn""]

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",76,data/crawl/git/patch_3261.diff
https://github.com/git/git/commit/0b8293f6776a7fc600c924ca71e4bba81d396409,21 Oct 2007,"Improve receive-pack error message about funny ref creation

receive-pack is only executed remotely so when
reporting errors, say so.

Signed-off-by: Joakim Tjernlund <Joakim.Tjernlund@transmode.se>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",2,data/crawl/git/patch_3262.diff
https://github.com/git/git/commit/bbaf63f2f18242484868d6c03d5df9bd071d6deb,19 Oct 2007,"Further 1.5.3.5 fixes described in release notes

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",16,data/crawl/git/patch_3263.diff
https://github.com/git/git/commit/b5d72f0a4cd3cce945ca0d37e4fa0ebbfcdcdb52,19 Oct 2007,"Teach prune-packed to use the standard progress meter

Rather than reimplementing the progress meter logic and always
showing 100 lines of output while pruning already packed objects
we now use a delayed progress meter and only show it if there are
enough objects to make us take a little while.

Most users won't see the message anymore as it usually doesn't take
very long to delete the already packed loose objects.  This neatens
the output of a git-gc or git-repack execution, which is especially
important for a `git gc --auto` triggered from within another
command.

We perform the display_progress() call from within the very innermost
loop in case we spend more than 1 second within any single object
directory.  This ensures that a progress_update event from the
timer will still trigger in a timely fashion and allow the user to
see the progress meter.

While I'm in here I changed the message to be more descriptive of
its actual task.  ""Removing unused objects"" is a little scary for
new users as they wonder where these unused objects came from and
how they should avoid them.  Truth is these objects aren't unused
in the sense of what git-prune would call a dangling object, these
are used but are just duplicates of things we have already stored
in a packfile.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",15,data/crawl/git/patch_3264.diff
https://github.com/git/git/commit/334f4831e5a779d42e521b770a26eae1ecb27e86,18 Oct 2007,"send-pack: don't update tracking refs on error

Previously, we updated the tracking refs (which match refs we
are pushing) while generating the list of refs to send.
However, at that point we don't know whether the refs were
accepted.

Instead, we now wait until we get a response code from the
server. If an error was indicated, we don't update any local
tracking refs. Technically some refs could have been updated
on the remote, but since the local ref update is just an
optimization to avoid an extra fetch, we are better off
erring on the side of correctness.

The user-visible message is now generated much later in the
program, and has been tweaked to make more sense.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",50,data/crawl/git/patch_3265.diff
https://github.com/git/git/commit/93a56c2cf7c8b29ca4c5e0740fe1e487324ffc73,18 Oct 2007,"git-config: print error message if the config file cannot be read

Instead of simply exiting with 255, print an error message including
the reason why a config file specified through --file cannot be opened
or read.

The problem was noticed by Joey Hess, reported through
 http://bugs.debian.org/445208

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",5,data/crawl/git/patch_3266.diff
https://github.com/git/git/commit/130faabe48fd988c1eb078ef467a44e124a00a40,18 Oct 2007,"Add a message explaining that automatic GC is about to start

Signed-off-by: Steven Grimm <koreth@midwinter.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",4,data/crawl/git/patch_3267.diff
https://github.com/git/git/commit/7ba502c47bda21d060844863991083f4c319d436,17 Oct 2007,"pack-objects.c: fix some global variable abuse and memory leaks

To keep things well layered, sha1close() now returns the file descriptor
when it doesn't close the file.

An ugly cast was added to the return of write_idx_file() to avoid a
warning.  A proper fix will come separately.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",52,data/crawl/git/patch_3268.diff
https://github.com/git/git/commit/42e18fbf5f94dd6bd303bf702e030a29fa39d6c4,17 Oct 2007,"more compact progress display

Each progress can be on a single line instead of two.

[sp: Changed ""Checking files out"" to ""Checking out files"" at
     Johannes Sixt's suggestion as it better explains the
	 action that is taking place]

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",89,data/crawl/git/patch_3269.diff
https://github.com/git/git/commit/552cecc21447efe9d5f9a86d55b5e428d56a0c53,17 Oct 2007,"Teach ""git reflog"" a subcommand to delete single entries

This commit implements the ""delete"" subcommand:

	git reflog delete master@{2}

will delete the second reflog entry of the ""master"" branch.

With this, it should be easy to implement ""git stash pop"" everybody
seems to want these days.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",90,data/crawl/git/patch_3270.diff
https://github.com/git/git/commit/7e23b06d5972ebf6377380b2dba97aeea9b7c02d,17 Oct 2007,"helpful error message when send-pack finds no refs in common.

Signed-off-by: Andrew Clausen <clausen@econ.upenn.edu>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",3,data/crawl/git/patch_3271.diff
https://github.com/git/git/commit/dd5c8af176bb935a0b01a7dc2d5e022565c3aac3,17 Oct 2007,"Fix setup_git_directory_gently() with relative GIT_DIR & GIT_WORK_TREE

There are a few programs, such as config and diff, which allow running
without a git repository.  Therefore, they have to call
setup_git_directory_gently().

However, when GIT_DIR and GIT_WORK_TREE were set, and the current
directory was a subdirectory of the work tree,
setup_git_directory_gently() would return a bogus NULL prefix.

This patch fixes that.

Noticed by REPLeffect on IRC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",22,data/crawl/git/patch_3272.diff
https://github.com/git/git/commit/a63103ae4f02f8890d381de352dbfc6cba0b646f,16 Oct 2007,"Add a --dry-run option to git-send-pack.

Implement support for --dry-run, so that it can be used
in calls from git-push. With this flag set, git-send-pack
will not send any updates to the server.

Signed-off-by: Brian Ewins <brian.ewins@gmail.com>
Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",36,data/crawl/git/patch_3273.diff
https://github.com/git/git/commit/ccfc02a30057a5fa7376e1fc8e8c3fe5478556f4,16 Oct 2007,"Fix compilation when NO_CURL is defined

There were a few places which did not cope well without curl.  This
fixes all of them.  We still need to link against the walker.o part
of the library as some parts of transport.o still call into there
even though we don't have HTTP support enabled.

If compiled with NO_CURL=1 we now get the following useful error
message:

  $ git-fetch http://www.example.com/git
  error: git was compiled without libcurl support.
  fatal: Don't know how to fetch from http://www.example.com/git

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/patch_3274.diff
https://github.com/git/git/commit/90d16ec032b20f9f1146f3aceca12165aba3b6d6,16 Oct 2007,"Fix in-place editing functions in convert.c

* crlf_to_git and ident_to_git:

  Don't grow the buffer if there is enough space in the first place.
  As a side effect, when the editing is done ""in place"", we don't grow, so
  the buffer pointer doesn't changes, and `src' isn't invalidated anymore.

  Thanks to Bernt Hansen for the bug report.

* apply_filter:

  Fix memory leak due to fake in-place editing that didn't collected the
  old buffer when the filter succeeds. Also a cosmetic fix.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",17,data/crawl/git/patch_3275.diff
https://github.com/git/git/commit/0c696fe7f490fd3a85e405becf6323993dfb471d,16 Oct 2007,"Support cvs via git-shell

This adds cvs support to the git-shell; You can now give new users
a restricted git-shell and they still can commit via git's cvs
emulator.

Note that either the gecos information must be accurate, or you must
provide a $HOME/.gitconfig with the appropriate user credentials.
Since the git-shell is too restricted to allow the user to do it
(on purpose!), it is up to the administrator to take care of that.

Based on an idea by Jan Wielemaker.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",27,data/crawl/git/patch_3276.diff
https://github.com/git/git/commit/2467a4fa03ff849fcf2f6a93b89057aebd49c62b,16 Oct 2007,"Remove duplicate ref matches in fetch

If multiple refspecs matched the same ref, the update would be
processed multiple times. Now having the same destination for the same
source has no additional effect, and having the same destination for
different sources is an error.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",33,data/crawl/git/patch_3277.diff
https://github.com/git/git/commit/fed276e7524d6a80ae5dec037d586bd28543fc79,03 Oct 2007,"Sync with GIT 1.5.3.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/patch_3278.diff
https://github.com/git/git/commit/96b2d4fa927c5055adc5b1d08f10a5d7352e2989,03 Oct 2007,"Add a test script for for-each-ref, including test of date formatting

Signed-off-by: Andy Parkins <andyparkins@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",151,data/crawl/git/patch_3279.diff
https://github.com/git/git/commit/54e1abce90ed44d0674772a735ac387ce3e264f2,03 Oct 2007,"Add test case for ls-files --with-tree

This tests basic functionality and also exercises a bug noticed
by Keith Packard, (prune_cache followed by add_index_entry can
trigger an attempt to realloc a pointer into the middle of an
allocated buffer).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_3280.diff
https://github.com/git/git/commit/cd547b4886c5338a70eb8a674bfc40eac5cab3d9,01 Oct 2007,"fetch/push: readd rsync support

We lost rsync support when transitioning from shell to C.  Support it
again (even if the transport is technically deprecated, some people just
do not have any chance to use anything else).

Also, add a test to t5510.  Since rsync transport is not configured by
default on most machines, and especially not such that you can write to
rsync://127.0.0.1$(pwd)/, it is disabled by default; you can enable it by
setting the environment variable TEST_RSYNC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/patch_3281.diff
https://github.com/git/git/commit/387e7e19d7eb5444be8da8e99ed7491989dc1cbb,30 Sep 2007,"strbuf_read_file enhancement, and use it.

* make strbuf_read_file take a size hint (works like strbuf_read)
* use it in a couple of places.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_3282.diff
https://github.com/git/git/commit/856665f827c31ace3f19e672f8911f7f15f2a0e2,30 Sep 2007,"parse_date_format(): convert a format name to an enum date_mode

Factor out the code to parse --date=<format> parameter to revision
walkers into a separate function, parse_date_format().  This function
is passed a string and converts it to an enum date_format:

 - ""relative""         => DATE_RELATIVE
 - ""iso8601"" or ""iso"" => DATE_ISO8601
 - ""rfc2822""          => DATE_RFC2822
 - ""short""            => DATE_SHORT
 - ""local""            => DATE_LOCAL
 - ""default""          => DATE_NORMAL

In the event that none of these strings is found, the function die()s.

Signed-off-by: Andy Parkins <andyparkins@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/patch_3283.diff
https://github.com/git/git/commit/586801650824f0f7b62c34a206b6a60ffbcd8be0,27 Sep 2007,"Introduce entry point add_interactive and add_files_to_cache

This refactors builtin-add.c a little to provide a unique entry point
for launching git add --interactive, which will be used by
builtin-commit too.  If we later want to make add --interactive a
builtin or change how it is launched, we just start from this function.

It also exports the private function update() which is used to
add all modified paths to the index as add_files_to_cache().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_3284.diff
https://github.com/git/git/commit/a9390b9fcefb18c4ccdb521086a051bc9112e03d,27 Sep 2007,"Add strbuf_read_file().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_3285.diff
https://github.com/git/git/commit/26b28007689d27a921ea90e5a29fc8eb74b0d297,26 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3286.diff
https://github.com/git/git/commit/55246aac6717e86c14f31391ac903ed810d1a9a0,26 Sep 2007,"Don't use ""<unknown>"" for placeholders and suppress printing of empty user formats.

This changes the interporate() to replace entries with NULL values
by the empty string, and uses it to interpolate missing fields in
custom format output used in git-log and friends.  It is most useful
to avoid <unknown> output from %b format for a commit log message
that lack any body text.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/patch_3287.diff
https://github.com/git/git/commit/5166810b1e16b22e342f2181a3535e70c6e7a119,26 Sep 2007,"rebase -i: create .dotest-merge after validating options.

Creating .dotest-merge before validating the options prevents both
--continue and --interactive from working if the options are invalid,
so only create it after validating the options.

[jc: however, just moving the creation of DOTEST breaks output]

Signed-off-by: Matt Kraai <kraai@ftbfs.org>
Acked-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_3288.diff
https://github.com/git/git/commit/7dfee372b08f653c2709c90bea986e4ed608f410,25 Sep 2007,"Cleanup unnecessary break in remote.c

This simple change makes the body of ""case 0"" easier to read; no
matter what the value of matched_src is we want to break out of
the switch and not fall through.  We only want to display an error
if matched_src is NULL, as this indicates there is no local branch
matching the input.

Also modified the default case's error message so it uses one less
line of text.  Even at 8 column per tab indentation we still don't
break 80 columns with this new formatting.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_3289.diff
https://github.com/git/git/commit/7a33bcbe802080f3a926e93d66b65ff7c5e8c5ed,21 Sep 2007,"sq_quote_argv and add_to_string rework with strbuf's.

* sq_quote_buf is made public, and works on a strbuf.
* sq_quote_argv also works on a strbuf.
* make sq_quote_argv take a ""maxlen"" argument to check the buffer won't grow
  too big.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",223,data/crawl/git/patch_3290.diff
https://github.com/git/git/commit/663af3422a648e87945e4d8c0cc3e13671f2bbde,21 Sep 2007,"Full rework of quote_c_style and write_name_quoted.

* quote_c_style works on a strbuf instead of a wild buffer.
* quote_c_style is now clever enough to not add double quotes if not needed.

* write_name_quoted inherits those advantages, but also take a different
  set of arguments. Now instead of asking for quotes or not, you pass a
  ""terminator"". If it's \0 then we assume you don't want to escape, else C
  escaping is performed. In any case, the terminator is also appended to the
  stream. It also no longer takes the prefix/prefix_len arguments, as it's
  seldomly used, and makes some optimizations harder.

* write_name_quotedpfx is created to work like write_name_quoted and take
  the prefix/prefix_len arguments.

Thanks to those API changes, diff.c has somehow lost weight, thanks to the
removal of functions that were wrappers around the old write_name_quoted
trying to give it a semantics like the new one, but performing a lot of
allocations for this goal. Now we always write directly to the stream, no
intermediate allocation is performed.

As a side effect of the refactor in builtin-apply.c, the length of the bar
graphs in diffstats are not affected anymore by the fact that the path was
clipped.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",641,data/crawl/git/patch_3291.diff
https://github.com/git/git/commit/7fb1011e610a28518959b1d2d48cea17ecc32048,21 Sep 2007,"Rework unquote_c_style to work on a strbuf.

If the gain is not obvious in the diffstat, the resulting code is more
readable, _and_ in checkout-index/update-index we now reuse the same buffer
to unquote strings instead of always freeing/mallocing.

This also is more coherent with the next patch that reworks quoting
functions.

The quoting function is also made more efficient scanning for backslashes
and treating portions of strings without a backslash at once.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",379,data/crawl/git/patch_3292.diff
https://github.com/git/git/commit/c76689df6c64a1e987bd779bd71a2042b5131fb9,21 Sep 2007,"strbuf API additions and enhancements.

Add strbuf_remove, change strbuf_insert:
  As both are special cases of strbuf_splice, implement them as such.
  gcc is able to do the math and generate almost optimal code this way.

Add strbuf_swap:
  Exchange the values of its arguments.
  Use it in fast-import.c

Also fix spacing issues in strbuf.h

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",43,data/crawl/git/patch_3293.diff
https://github.com/git/git/commit/19247e5510279f018f8358a72b38cc5aa62fac8a,21 Sep 2007,"nfv?asprintf are broken without va_copy, workaround them.

* drop nfasprintf.
* move nfvasprintf into imap-send.c back, and let it work on a 8k buffer,
  and die() in case of overflow. It should be enough for imap commands, if
  someone cares about imap-send, he's welcomed to fix it properly.
* replace nfvasprintf use in merge-recursive with a copy of the strbuf_addf
  logic, it's one place, we'll live with it.
  To ease the change, output_buffer string list is replaced with a strbuf ;)
* rework trace.c to call vsnprintf itself.  It's used to format strerror()s
  and git command names, it should never be more than a few octets long, let
  it work on a 8k static buffer with vsnprintf or die loudly.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",180,data/crawl/git/patch_3294.diff
https://github.com/git/git/commit/f26a0012262106e0c7e92d8d07f00611112d3a8d,19 Sep 2007,"Enable wt-status output to a given FILE pointer.

Still defaults to stdout, but you can now override wt_status.fp after
calling wt_status_prepare().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/patch_3295.diff
https://github.com/git/git/commit/fa74052922cf39e5a39ad7178d1b13c2da9b4519,19 Sep 2007,"Always obtain fetch-pack arguments from struct fetch_pack_args

Copying the arguments from a fetch_pack_args into static globals
within the builtin-fetch-pack module is error-prone and may lead
rise to cases where arguments supplied via the struct from the
new fetch_pack() API may not be honored by the implementation.

Here we reorganize all of the static globals into a single static
struct fetch_pack_args instance and use memcpy() to move the data
from the caller supplied structure into the globals before we
execute our pack fetching implementation.  This strategy is more
robust to additions and deletions of properties.

As keep_pack is a single bit we have also introduced lock_pack to
mean not only download and store the packfile via index-pack but
also to lock it against repacking by creating a .keep file when
the packfile itself is stored.  The caller must remove the .keep
file when it is safe to do so.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/patch_3296.diff
https://github.com/git/git/commit/28b91f8ad9e4791b5c35ca6bffbb78725b4e5bbf,19 Sep 2007,"Rename remote.uri to remote.url within remote handling internals

Anyplace we talk about the address of a remote repository we always
refer to it as a URL, especially in the configuration file and
.git/remotes where we call it ""remote.$n.url"" or start the first
line with ""URL:"".  Calling this value a uri within the internal C
code just doesn't jive well with our commonly accepted terms.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3297.diff
https://github.com/git/git/commit/ab865e6eec1f40938604b1c28a32525c1fdc7227,19 Sep 2007,"Avoid printing unnecessary warnings during fetch and push

If a transport doesn't support an option we already are telling
the higher level application (fetch or push) that the option is not
valid by sending back a >0 return value from transport_set_option
so there's not a strong motivation to have the function perform the
output itself.  Instead we should let the higher level application
do the output if it is necessary.  This avoids always telling the
user that depth isn't supported on HTTP urls even when they did
not pass a --depth option to git-fetch.

If the user passes an option and the option value is invalid we now
properly die in git-fetch instead of just spitting out a message
and running anyway.  This mimics prior behavior better where
incorrect/malformed options are not accepted by the process.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/patch_3298.diff
https://github.com/git/git/commit/f38395905b3d49bd68e0c01ca2310bf3387e1063,19 Sep 2007,"Remove more debugging from builtin-fetch

Older git-fetch.sh doesn't print ""ref: X"" when invoked as
`git fetch $url X"" so we shouldn't do that now in the new
builtin version.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3299.diff
https://github.com/git/git/commit/e5f4e214636f9c9bd36c2897634108d5ad5587a1,19 Sep 2007,"Remove unnecessary 'fetch' argument from transport_get API

We don't actually need to know at the time of transport_get if the
caller wants to fetch, push, or do both on the returned object.
It is easier to just delay the initialization of the HTTP walker
until we know we will need it by providing a CURL specific fetch
function in the curl_transport that makes sure the walker instance
is initialized before use.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_3300.diff
https://github.com/git/git/commit/1788c39cd0742439b9bedc28bc10bc4d105b6c0f,19 Sep 2007,"Remove pack.keep after ref updates in git-fetch

If we are using a native packfile to perform a git-fetch invocation
and the received packfile contained more than the configured limits
of fetch.unpackLimit/transfer.unpackLimit then index-pack will output
a single line saying ""keep\t$sha1\n"" to stdout.  This line needs to
be captured and retained so we can delete the corresponding .keep
file (""$GIT_DIR/objects/pack/pack-$sha1.keep"") once all refs have
been safely updated.

This trick has long been in use with git-fetch.sh and its lower level
helper git-fetch--tool as a way to allow index-pack to save the new
packfile before the refs have been updated and yet avoid a race with
any concurrently running git-repack process.  It was unfortunately
lost when git-fetch.sh was converted to pure C and fetch--tool was
no longer being invoked.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/patch_3301.diff
https://github.com/git/git/commit/106764e6515dd0fb9fda8bb8cab523932ae903b3,19 Sep 2007,"Refactor index-pack ""keep $sha1"" handling for reuse

There is a subtle (but important) linkage between receive-pack and
index-pack that allows index-pack to create a packfile but protect
it from being deleted by a concurrent `git repack -a -d` operation.
The linkage works by having index-pack mark the newly created pack
with a "".keep"" file and then it passes the SHA-1 name of that new
packfile to receive-pack along its stdout channel.

The receive-pack process must unkeep the packfile by deleting the
.keep file, but can it can only do so after all elgible refs have
been updated in the receiving repository.  This ensures that the
packfile is either kept or its objects are reachable, preventing
a concurrent repacker from deleting the packfile before it can
determine that its objects are actually needed by the repository.

The new builtin-fetch code needs to perform the same actions if
it choose to run index-pack rather than unpack-objects, so I am
moving this code out to its own function where both receive-pack
and fetch-pack are able to invoke it when necessary.  The caller
is responsible for deleting the returned "".keep"" and freeing the
path if the returned path is not NULL.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/patch_3302.diff
https://github.com/git/git/commit/133296f00cd441b5525ccc3e82ee13cbfc62d246,19 Sep 2007,"Remove unnecessary debugging from builtin-fetch

The older git-fetch client did not produce all of this debugging
information to stdout.  Most end-users and Porcelain (e.g. StGIT,
git-gui, qgit) do not want to see these low-level details on the
console so they should be removed.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3303.diff
https://github.com/git/git/commit/b888d61c8308027433df9c243fa551f42db1c76a,19 Sep 2007,"Make fetch a builtin

Thanks to Johannes Schindelin for review and fixes, and Julian
Phillips for the original C translation.

This changes a few small bits of behavior:

branch.<name>.merge is parsed as if it were the lhs of a fetch
refspec, and does not have to exactly match the actual lhs of a
refspec, so long as it is a valid abbreviation for the same ref.

branch.<name>.merge is no longer ignored if the remote is configured
with a branches/* file. Neither behavior is useful, because there can
only be one ref that gets fetched, but this is more consistant.

Also, fetch prints different information to standard out.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",586,data/crawl/git/patch_3304.diff
https://github.com/git/git/commit/c7a8a16239c6bdbb4041dd8a8773ae055d3cccf8,19 Sep 2007,"Add bundle transport

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3305.diff
https://github.com/git/git/commit/30415d50cccef0ec22bb4a6d58138760b142758d,19 Sep 2007,"Move bundle specific stuff into bundle.[ch]

The transport specific stuff was moved into libgit.a, and the
bundle specific stuff will not be left behind.

This is a big code move, with one exception: the function
unbundle() no longer outputs the list of refs.  You have to call
list_bundle_refs() yourself for that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",735,data/crawl/git/patch_3306.diff
https://github.com/git/git/commit/c29727d5241be0fee2265fbbe65d1b275b01dc1c,19 Sep 2007,"Add fetch methods to transport library.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",305,data/crawl/git/patch_3307.diff
https://github.com/git/git/commit/d71ab17470ab2011c7cb398b75385bb0d0c4bdb4,19 Sep 2007,"Add matching and parsing for fetch-side refspec rules

Also exports parse_ref_spec().

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/patch_3308.diff
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/patch_3309.diff
https://github.com/git/git/commit/2d4177c01c238071777db5b1fbd8a14efb62ce02,19 Sep 2007,"Make fetch-pack a builtin with an internal API

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/patch_3310.diff
https://github.com/git/git/commit/0012ba2108aa42947dedf19f3db2de73a67cc4f5,19 Sep 2007,"Add uploadpack configuration info to remote.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3311.diff
https://github.com/git/git/commit/30ae764b1e11f10b5fca723a876a0f3de3ca11ab,19 Sep 2007,"Modularize commit-walker

This turns the extern functions to be provided by the backend into a
struct of pointers, renames the functions to be more
namespace-friendly, and updates http-fetch to this interface. It
removes the unused include from http-push.c. It makes git-http-fetch a
builtin (with the implementation a separate file, accessible
directly).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",501,data/crawl/git/patch_3312.diff
https://github.com/git/git/commit/fbdeef948bbc085124f9634d5108940dce5fc688,19 Sep 2007,"Remove obsolete commit-walkers

Removes the commit-walkers that are no longer useful, as well as
library code that was only used by ssh-fetch/push.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",681,data/crawl/git/patch_3313.diff
https://github.com/git/git/commit/7a98869935a3682b5ff9679c92bf9bc12f87d8c5,19 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3314.diff
https://github.com/git/git/commit/64586e75af3c84844b80652575a8b63a9612b24a,18 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_3315.diff
https://github.com/git/git/commit/a087cc9819d5790a0aeb42c2bd74f781c555e8d6,18 Sep 2007,"git-gc --auto: protect ourselves from accumulated cruft

Deciding to run ""repack -d -l"" when there are too many
loose objects would backfire when there are too many loose
objects that are unreachable, because repacking that way would
never improve the situation.  Detect that case by checking the
number of loose objects again after automatic garbage collection
runs, and issue an warning to run ""prune"" manually.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_3316.diff
https://github.com/git/git/commit/08cdfb13374f31b0c1c47444f55042e7b72c3190,17 Sep 2007,"pack-objects --keep-unreachable

This new option is meant to be used in conjunction with the
options ""git repack -a -d"" usually invokes the underlying
pack-objects with.  When this option is given, objects unreachable
from the refs in packs named with --unpacked= option are added
to the resulting pack, in addition to the reachable objects that
are not in packs marked with *.keep files.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/patch_3317.diff
https://github.com/git/git/commit/ece7b74903007cee8d280573647243d46a6f3a95,17 Sep 2007,"apply --index-info: fall back to current index for mode changes

""git diff"" does not record index lines for pure mode changes (i.e. no
lines changed).  Therefore, apply --index-info would call out a bogus
error.

Instead, fall back to reading the info from the current index.

Incidentally, this fixes an error where git-rebase would not rebase a
commit including a pure mode change, and changes requiring a threeway
merge.

Noticed and later tested by Chris Shoemaker.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_3318.diff
https://github.com/git/git/commit/c7f9cb14286fff23bfe65033d4ec63f84c77f554,17 Sep 2007,"builtin-apply: use strbuf's instead of buffer_desc's.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",212,data/crawl/git/patch_3319.diff
https://github.com/git/git/commit/5ecd293d1420bf641a927a015877950f4d79c067,17 Sep 2007,"Rewrite convert_to_{git,working_tree} to use strbuf's.

* Now, those functions take an ""out"" strbuf argument, where they store their
  result if any. In that case, it also returns 1, else it returns 0.
* those functions support ""in place"" editing, in the sense that it's OK to
  call them this way:
    convert_to_git(path, sb->buf, sb->len, sb);
  When doable, conversions are done in place for real, else the strbuf
  content is just replaced with the new one, transparentely for the caller.

If you want to create a new filter working this way, being the accumulation
of filter1, filter2, ... filtern, then your meta_filter would be:

    int meta_filter(..., const char *src, size_t len, struct strbuf *sb)
    {
        int ret = 0;
        ret |= filter1(...., src, len, sb);
        if (ret) {
            src = sb->buf;
            len = sb->len;
        }
        ret |= filter2(...., src, len, sb);
        if (ret) {
            src = sb->buf;
            len = sb->len;
        }
        ....
        return ret | filtern(..., src, len, sb);
    }

That's why subfilters the convert_to_* functions called were also rewritten
to work this way.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",557,data/crawl/git/patch_3320.diff
https://github.com/git/git/commit/917c9a713397b16671ed5b1f1c159515bcfa389e,17 Sep 2007,"New strbuf APIs: splice and attach.

* strbuf_splice replace a portion of the buffer with another.
* strbuf_attach replace a strbuf buffer with the given one, that should be
  malloc'ed. Then it enforces strbuf's invariants. If alloc > len, then this
  function has negligible cost, else it will perform a realloc, possibly
  with a cost.

Also some style issues are fixed now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/patch_3321.diff
https://github.com/git/git/commit/d99ebf081797dbb43ff618ff59f4c607b0acf045,14 Sep 2007,"Split grep arguments in a way that does not requires to add /dev/null.

In order to (almost) always show the name of the file without
relying on ""-H"" option of GNU grep, we used to add /dev/null to
the argument list unless we are doing -l or -L.  This caused
""/dev/null:0"" to show up when -c is given in the output.

It is not enough to add -c to the set of options we do not pass
/dev/null for.  When we have too many files, we invoke grep
multiple times and we need to avoid giving a widow filename to
the last invocation -- otherwise we will not see the name.

This keeps two filenames when the argv[] buffer is about to
overflow and we have not finished iterating over the index, so
that the last round will always have at least two paths to work
with (and not require /dev/null).

An obvious and the only exception is when there is only 1 file
that is given to the underlying grep, and in that case we avoid
passing /dev/null and let the external ""grep -c"" report only the
number of matches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/patch_3322.diff
https://github.com/git/git/commit/43b98acc23306fd7fff888477937063361a09593,14 Sep 2007,"Add test to check recent fix to ""git add -u""

An earlier commit fixed type-change case in ""git add -u"".
This adds a test to make sure we do not introduce regression.

At the same time, it fixes a stupid typo in the error message.

Signed-off-by: Benoit Sigoure <tsuna@lrde.epita.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3323.diff
https://github.com/git/git/commit/b78281f7215c0236da6bd5c04ec5e500c83fd101,14 Sep 2007,"diff --no-index: do not forget to run diff_setup_done()

Code inspection by Linus found this.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3324.diff
https://github.com/git/git/commit/8419d2ee9ba8b375186a5c1019df8dfbce610aba,14 Sep 2007,"git-format-patch --in-reply-to: accept <message@id> with angle brackets

This will allow RFC-literate users to say:

	format-patch --in-reply-to='<message.id@site.name>'

without forcing them to strip the surrounding angle brackets
like this:

	format-patch --in-reply-to='message.id@site.name'

We accept both forms, and the latter gets necessary < and >
around it as before.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/patch_3325.diff
https://github.com/git/git/commit/80bffaf7fbe09ef62ecb9a6ffea70ac0171b456c,12 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_3326.diff
https://github.com/git/git/commit/0e5a7faa3a903cf7a0a66c81e20a76b91f17faab,12 Sep 2007,"Make ""git reset"" a builtin.

This replaces the script ""git-reset.sh"" with ""builtin-reset.c"".

A few git commands used in the script are called from the builtin also:
""ls-files"" to check for unmerged files, ""read-tree"" for resetting
the index file in ""mixed"" and ""hard"" resets, and ""update-index"" to
refresh at the end in the ""mixed"" reset and also for the option that
gets selected paths into the index.

The reset option with paths was implemented by Johannes Schindelin.

Since the option that gets selected paths into the index is not
a ""reset"" like the others because it does not change the HEAD at all,
now the command is showing a warning when the ""--mixed"" option
is supplied for that purpose.

The following table shows the behaviour of ""git reset"" for
the different supported options, where X means ""changing""
the HEAD, index or working tree:

reset:  --soft  --mixed  --hard  -- <paths>
HEAD       X       X        X        -
index      -       X        X        X
files      -       -        X        -

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",284,data/crawl/git/patch_3327.diff
https://github.com/git/git/commit/fd17f5b5f77716bf90098c6e49e3cf7fd9f56306,10 Sep 2007,"Replace all read_fd use with strbuf_read, and get rid of it.

  This brings builtin-stripspace, builtin-tag and mktag to use strbufs.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",176,data/crawl/git/patch_3328.diff
https://github.com/git/git/commit/b655d46bb2d8aa12f3203f93c323b41df161fd26,10 Sep 2007,"Use strbuf_read in builtin-fetch-tool.c.

  xrealloc.use --;

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_3329.diff
https://github.com/git/git/commit/674d1727305211f7ade4ade70440220f74f55162,10 Sep 2007,"Rework pretty_print_commit to use strbufs instead of custom buffers.

  Also remove the ""len"" parameter, as:
  (1) it was used as a max boundary, and every caller used ~0u
  (2) we check for final NUL no matter what, so it doesn't help for speed.

  As a result most of the pp_* function takes 3 arguments less, and we need
a lot less local variables, this makes the code way more readable, and
easier to extend if needed.

  This patch also fixes some spacing and cosmetic issues.

  This patch also fixes (as a side effect) a memory leak intoruced in
builtin-archive.c at commit df4a394f (fmt was xmalloc'ed and not free'd)

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",490,data/crawl/git/patch_3330.diff
https://github.com/git/git/commit/693b86fffb4271dece49f439b133595924a75cbb,10 Sep 2007,"threaded delta search: add pack.threads config variable

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_3331.diff
https://github.com/git/git/commit/367f4a4343d467ac76641362b102bc86da5cb584,10 Sep 2007,"threaded delta search: specify number of threads at run time

This adds a --threads=<n> parameter to 'git pack-objects' with
documentation.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/patch_3332.diff
https://github.com/git/git/commit/aba91192ae39cd1a2f79e7ed91e966df3cfe10b7,10 Sep 2007,"git-tag -s must fail if gpg cannot sign the tag.

Most of this patch code and message was written by Shawn O. Pearce.
I made some tests to know what the problem was, and then I changed
the code related with the SIGPIPE signal.

If the user has misconfigured `user.signingkey` in their .git/config
or just doesn't have any secret keys on their keyring and they ask
for a signed tag with `git tag -s` we better make sure the resulting
tag was actually signed by gpg.

Prior versions of builtin git-tag allowed this failure to slip
by without error as they were not checking the return value of
the finish_command() so they did not notice when gpg exited with
an error exit status.  They also did not fail if gpg produced an
empty output or if read_in_full received an error from the read
system call while trying to read the pipe back from gpg.

Finally, we did not actually honor any return value from the do_sign
function as it returns ssize_t but was being stored into an unsigned
long.  This caused the compiler to optimize out the die condition,
allowing git-tag to continue along and create the tag object.

However, when gpg gets a wrong username, it exits before any read was done
and then the writing process receives SIGPIPE and program is terminated.
By ignoring this signal, anyway, the function write_or_die gets EPIPE from
write_in_full and exits returning 0 to the system without a message.
Here we better call to write_in_full directly so we can fail
printing a message and return safely to the caller.

With these issues fixed `git-tag -s` will now fail to create the
tag and will report a non-zero exit status to its caller, thereby
allowing automated helper scripts to detect (and recover from)
failure if gpg is not working properly.

Proposed-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/patch_3333.diff
https://github.com/git/git/commit/af6eb82262e35687aa8f00d688e327cb845973fa,07 Sep 2007,"Use strbuf API in apply, blame, commit-tree and diff

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/patch_3334.diff
https://github.com/git/git/commit/b449f4cfc972929b638b90d375b8960c37790618,07 Sep 2007,"Rework strbuf API and semantics.

  The gory details are explained in strbuf.h. The change of semantics this
patch enforces is that the embeded buffer has always a '\0' character after
its last byte, to always make it a C-string. The offs-by-one changes are all
related to that very change.

  A strbuf can be used to store byte arrays, or as an extended string
library. The `buf' member can be passed to any C legacy string function,
because strbuf operations always ensure there is a terminating \0 at the end
of the buffer, not accounted in the `len' field of the structure.

  A strbuf can be used to generate a string/buffer whose final size is not
really known, and then ""strbuf_detach"" can be used to get the built buffer,
and keep the wrapping ""strbuf"" structure usable for further work again.

  Other interesting feature: strbuf_grow(sb, size) ensure that there is
enough allocated space in `sb' to put `size' new octets of data in the
buffer. It helps avoiding reallocating data for nothing when the problem the
strbuf helps to solve has a known typical size.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",208,data/crawl/git/patch_3335.diff
https://github.com/git/git/commit/2c3c4399477533329579ca6b84824ef0b125914f,06 Sep 2007,"Implement git gc --auto

This implements a new option ""git gc --auto"".  When gc.auto is
set to a positive value, and the object database has accumulated
roughly that many number of loose objects, this runs a
lightweight version of ""git gc"".  The primary difference from
the full ""git gc"" is that it does not pass ""-a"" option to ""git
repack"", which means we do not try to repack _everything_, but
only repack incrementally.  We still do ""git prune-packed"".  The
default threshold is arbitrarily set by yours truly to:

 - not trigger it for fully unpacked git v0.99 history;

 - do trigger it for fully unpacked git v1.0.0 history;

 - not trigger it for incremental update to git v1.0.0 starting
   from fully packed git v0.99 history.

This patch does not add invocation of the ""auto repacking"".  It
is left to key Porcelain commands that could produce tons of
loose objects to add a call to ""git gc --auto"" after they are
done their work.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/patch_3336.diff
https://github.com/git/git/commit/8ecce684a38f7cea084abe9eef80bda04d7c77be,06 Sep 2007,"basic threaded delta search

this is still rough, hence it is disabled by default.  You need to compile
with ""make THREADED_DELTA_SEARCH=1 ..."" at the moment.

Threading is done on different portions of the object list to be
deltified. This is currently done by spliting the list into n parts and
then a thread is spawned for each of them.  A better method would consist
of spliting the list into more smaller parts and have the n threads
pick the next part available.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/patch_3337.diff
https://github.com/git/git/commit/e334977dfad575cd8ac1a9e5f8e73fe4d018cec0,06 Sep 2007,"rearrange delta search progress reporting

This is to help threadification of the delta search code, with a bonus
consistency check.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/patch_3338.diff
https://github.com/git/git/commit/3d9f037c60ceae1bd60ee3c861564812a89b05b1,05 Sep 2007,"Function for updating refs.

A function intended to be called from builtins updating refs
by locking them before write, specially those that came from
scripts using ""git update-ref"".

[jc: with minor fixups]

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/patch_3339.diff
https://github.com/git/git/commit/2631a81b901fc7baa274f98530a0d9cc05cecd17,02 Sep 2007,"git-gui po/README: Guide to translators

This short note is to help a translation contributor to help us
localizing git-gui message files by covering the basics.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",205,data/crawl/git/patch_3340.diff
https://github.com/git/git/commit/aecbf914c43ab76e055fa8a25b12456ae74d91bc,01 Sep 2007,"git-diff: resurrect the traditional empty ""diff --git"" behaviour

The warning message to suggest ""Consider running git-status"" from
""git-diff"" that we experimented with during the 1.5.3 cycle turns
out to be a bad idea.  It robbed cache-dirty information from people
who valued it, while still asking users to run ""update-index --refresh"".
It was hoped that the new behaviour would at least have some educational
value, but not showing the cache-dirty paths like before meant that the
user would not even know easily which paths were cache-dirty, and it
made the need to refresh the index look like even more unnecessary chore.

This commit reinstates the traditional behaviour, but with a twist.

By default, the empty ""diff --git"" output is totally squelched out
from ""git diff"" output.  At the end of the command, it automatically
runs ""update-index --refresh"" as needed, without even bothering the
user.  In other words, people who do not care about the cache-dirtyness
do not even have to see the warning.

The traditional behaviour to see the stat-dirty output and to bypassing
the overhead of content comparison can be specified by setting the
configuration variable diff.autorefreshindex to false.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3341.diff
https://github.com/git/git/commit/b39c53e662b97108ee1bda72076630d9d0e56211,29 Aug 2007,"git-add: Make the ""tried to add ignored file"" error message less confusing

Currently the error message seems to imply (at least to me) that only
the listed files were withheld and the rest of the files was added to the
index, even though that's obviously not the case.

Signed-off-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3342.diff
https://github.com/git/git/commit/6adcca3fe84e6859fc62df6c4ab916192ca02795,28 Aug 2007,"Fix initialization of a bare repository

Here is my attempt to fix this with a minimally intrusive patch.

 * As ""git --bare init"" cannot tell if it was called with --bare or
   just ""GIT_DIR=. git init"", I added an explicit assignment of
   is_bare_repository_cfg on the codepath for ""git --bare"".

 * GIT_WORK_TREE alone without GIT_DIR does not make any sense,
   nor GIT_WORK_TREE with an explicit ""git --bare"".  Catch that
   mistake.  It might make sense to move this check to ""git.c""
   side as well, but I tried to shoot for the minimum change for
   now.

 * Some scripts, especially from the olden days, rely on
   traditional GIT_DIR behaviour in ""git init"".  Namely, these
   are some notable patterns:

   (create a bare repository)
   - mkdir some.git && cd some.git && GIT_DIR=. git init
   - mkdir some.git && cd some.git && git --bare init

   (create a non-bare repository)
   - mkdir .git && GIT_DIR=.git git init
   - mkdir .git && GIT_DIR=`pwd`/.git git init

This comes with a new test script and also passes the existing
test suite, but there may be cases that are still broken with
the current tip of master and this patch does not yet fix.  I'd
appreciate help in straightening this mess out.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/patch_3343.diff
https://github.com/git/git/commit/9064d87b06f3d0b4ca0aabb45770eefb84fc3ca2,25 Aug 2007,"Don't segfault if we failed to inflate a packed delta

Under some types of packfile corruption the zlib stream holding the
data for a delta within a packfile may fail to inflate, due to say
a CRC failure within the compressed data itself.  When this occurs
the unpack_compressed_entry function will return NULL as a signal to
the caller that the data is not available.  Unfortunately we then
tried to use that NULL as though it referenced a memory location
where a delta was stored and tried to apply it to the delta base.
Loading a byte from the NULL address typically causes a SIGSEGV.

cate on #git noticed this failure in `git fsck --full` where the
call to verify_pack() first noticed that the packfile was corrupt
by finding that the packfile's SHA-1 did not match the raw data of
the file.  After finding this fsck went ahead and tried to verify
every object within the packfile, even though the packfile was
already known to be bad.  If we are going to shovel bad data at
the delta unpacking code, we better handle it correctly.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3344.diff
https://github.com/git/git/commit/2e3404c3245e1e0031ef0a6574f25e8c35d5aac3,25 Aug 2007,"pack-objects: check return value from read_sha1_file()

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3345.diff
https://github.com/git/git/commit/ab43e495dd095547c3ada9ae13b72f9741a7f0d2,25 Aug 2007,"blame: check return value from read_sha1_file()

Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3346.diff
https://github.com/git/git/commit/027830755d2972ab2201c53922ce402862a2bd80,25 Aug 2007,"Documentation: Correct various misspellings and typos.

Fix minor typos throughout the documentation.

Signed-off-by: Brian Hetro <whee@smaertness.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/patch_3347.diff
https://github.com/git/git/commit/4bf53833dbca666f61b5177977e96d453527db20,21 Aug 2007,"Avoid using va_copy in fast-import: it seems to be unportable.

[sp: minor change to use fputs, thus reducing the patch size]

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3348.diff
https://github.com/git/git/commit/d56651c0ef1c81c1d0509ea4464451d5724e4036,20 Aug 2007,"Don't allow combination of -g and --reverse as it doesn't work

The --walk-reflogs logic and the --reverse logic are completely
incompatible with one another.  Attempting to use both at the same
time leads to confusing results that sometimes violates the user's
formatting options or ignores the user's request to see the reflog
message and timestamp.

Unfortunately the implementation of both of these features is glued
onto the side of the revision walking machinary in such a way that
they are probably not going to be easy to make them compatible with
each other.  Rather than offering the user confusing results we are
better off bailing out with an error message until such a time as
the implementations can be refactored to be compatible.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/patch_3349.diff
https://github.com/git/git/commit/904b1941514e78543bd636b4db71fbcf57898388,19 Aug 2007,"Include recent command history in fast-import crash reports

When we crash the frontend developer (or end-user) may need to know
roughly around what part of the input stream we had a problem with
and aborted on.  Because line numbers aren't very useful in this
sort of application we instead just keep the last 100 commands in
a FIFO queue and print them as part of the crash report.

Currently one problem with this design is a commit that has
more than 100 modified files in it will flood the FIFO and any
context regarding branch/from/committer/mark/comments will be lost.
We really should save only the last few (10?) file changes for the
current commit, ensuring we have some prior higher level commands
in the FIFO when we crash on a file M/D/C/R command.

Another issue with this approach is the FIFO only includes the
commands, it does not include the commit messages.  Yet having a
commit message may be useful to help locate the relevant change in
the source material.  In practice I don't think this is going to be a
major concern as the frontend can always embed its own source change
set identifier as a comment (which will appear in the crash report)
and the commit message(s) for the most recent commits of any given
branch should be obtainable from the (packed) commit objects.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",62,data/crawl/git/patch_3350.diff
https://github.com/git/git/commit/8acb3297f34fd04bb8f3a35ace3667b59236286e,19 Aug 2007,"Generate crash reports on die in fast-import

As fast-import is quite strict about its input and die()'s anytime
something goes wrong it can be difficult for a frontend developer
to troubleshoot why fast-import rejected their input, or to even
determine what input command it rejected.

This change introduces a custom handler for Git's die() routine.
When we receive a die() for any reason (fast-import or a lower level
core Git routine we called) the error is first dumped onto stderr
and then a more extensive crash report file is prepared in GIT_DIR.
Finally we exit the process with status 128, just like the stock
builtin die handler.

An internal flag is set to prevent any further die()'s that may be
invoked during the crash report generator from causing us to enter
into an infinite loop.  We shouldn't die() from our crash report
handler, but just in case someone makes a future code change we are
prepared to gaurd against small mistakes turning into huge problems
for the end-user.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",93,data/crawl/git/patch_3351.diff
https://github.com/git/git/commit/1fdb649c6ac4cfc536983077b4851a1959cbc1c4,19 Aug 2007,"Make trailing LF optional for all fast-import commands

For the same reasons as the prior change we want to allow frontends
to omit the trailing LF that usually delimits commands.  In some
cases these just make the input stream more verbose looking than
it needs to be, and its just simpler for the frontend developer to
get started if our parser is slightly more lenient about where an
LF is required and where it isn't.

To make this optional LF feature work we now have to buffer up to one
line of input in command_buf.  This buffering can happen if we look
at the current input command but don't recognize it at this point
in the code.  In such a case we need to ""unget"" the entire line,
but we cannot depend upon the stdio library to let us do ungetc()
for that many characters at once.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",91,data/crawl/git/patch_3352.diff
https://github.com/git/git/commit/2c570cde98cfde704ee67ea29031493c633f971e,19 Aug 2007,"Make trailing LF following fast-import `data` commands optional

A few fast-import frontend developers have found it odd that we
require the LF following a `data` command, especially in the exact
byte count format.  Technically we don't need this LF to parse
the stream properly, but having it here does make the stream more
readable to humans.  We can easily make the LF optional by peeking
at the next byte available from the stream and pushing it back into
the buffer if its not LF.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",44,data/crawl/git/patch_3353.diff
https://github.com/git/git/commit/324a8bd0cfb696458bc651d3713d7523fd0d7479,18 Aug 2007,"git-send-email --cc-cmd

This new option allows an arbitrary ""cmd"" to generate per patch
file specific ""Cc:""s.

Signed-off-by: Joe Perches <joe@perches.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/patch_3354.diff
https://github.com/git/git/commit/a9ab2009dbbf769aadd52957950c1bad60a0c8fd,17 Aug 2007,"Clean-up read-tree error condition.

This is a follow-up to f34f2b0b; list_tree() function is where it
first notices that the command line fed too many trees for us to
handle, so move the error exit message to there, and raise the
MAX_TREES to 8 (not that it matters very much in practice).

Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_3355.diff
https://github.com/git/git/commit/e06c5a6c7bdaa8c96b72e29f7fb49a331f1e0cc2,16 Aug 2007,"git-apply: apply submodule changes

Apply ""Subproject commit HEX"" changes produced by git-diff.
As usual in the current git, only the superproject itself is actually
modified (possibly creating empty directories for new submodules).
Any checked-out submodule is left untouched and is not required to
be up-to-date.

With clean-ups from Junio C Hamano.

Signed-off-by: Sven Verdoolaege <skimo@kotnet.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/patch_3356.diff
https://github.com/git/git/commit/f34f2b0b384b42f7a0d0d92966c145b05fe55217,16 Aug 2007,"Fix read-tree merging more than 3 trees using 3-way merge

For multi-base merges, we allowed read-tree -m to take more than
three trees (the last two are our and their branches, and all the
earlier ones, typically one but potentially more, are used as the
merge base).  Unfortunately, the conversion done by commit 933bf40
broke this.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_3357.diff
https://github.com/git/git/commit/6b06d518caa6ef98cc0efb796713d0a0693895bf,15 Aug 2007,"Add read_cache to builtin-check-attr

We can now read .gitattributes files out of the index, but the index
must be loaded for this to work.

Signed-off-by: Brian Downing <bdowning@lavos.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_3358.diff
https://github.com/git/git/commit/7647b17f1d7a98362f8bdbe48b30d94ed655229c,15 Aug 2007,"Use xmkstemp() instead of mkstemp()

xmkstemp() performs error checking and prints a standard error message when
an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/patch_3359.diff
https://github.com/git/git/commit/f21a47b27ceef8ff2f6f218d5b7266d5fd9e2e93,15 Aug 2007,"Introduces xmkstemp()

This is a wrapper for mkstemp() that performs error checking and
calls die() when an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3360.diff
https://github.com/git/git/commit/eef427a09ce7fcbdc54c73ae363cbab331eccd88,15 Aug 2007,"Avoid ambiguous error message if pack.idx header is wrong

Print the index version when an error occurs so the user
knows what type of header (and size) we thought the index
should have had.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3361.diff
https://github.com/git/git/commit/b798671fa935492ce511766bc99fb26b2892499b,15 Aug 2007,"merge-recursive: do not rudely die on binary merge

When you try to merge a path that involves binary file-level
merge, merge-recursive died rudely without cleaning up its own
mess.  A files added by the merge were left in the working tree,
but the index was not written out (because it just punted and
died), so it was cumbersome for the user to retry it by first
running ""git reset --hard"".

This changes merge-recursive to still warn but do the ""binary""
merge for such a path; leave the ""our"" version in the working
tree, but still keep the path unmerged so that the user can sort
it out.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/patch_3362.diff
https://github.com/git/git/commit/9fa3465d6be83c08ed24762c82eb33cb005729f3,14 Aug 2007,"Add --log-size to git log to print message size

With this option git-log prints log message size
just before the corresponding message.

Porcelain tools could use this to speedup parsing
of git-log output.

Note that size refers to log message only. If also
patch content is shown its size is not included.

In case it is not possible to know the size upfront
size value is set to zero.

Signed-off-by: Marco Costalba <mcostalba@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3363.diff
https://github.com/git/git/commit/fb13227e089f22dc31a3b1624559153821056848,14 Aug 2007,"git-diff: squelch ""empty"" diffs

After starting to edit a working tree file but later when your edit ends
up identical to the original (this can also happen when you ran a
wholesale regexp replace with something like ""perl -i"" that does not
actually modify many of the paths), ""git diff"" between the index and the
working tree outputs many ""empty"" diffs that show ""diff --git"" headers
and nothing else, because these paths are stat-dirty.  While it was a
way to warn the user that the earlier action of the user made the index
ineffective as an optimization mechanism, it was felt too loud for the
purpose of warning even to experienced users, and also resulted in
confusing people new to git.

This replaces the ""empty"" diffs with a single warning message at the
end.  Having many such paths hurts performance, and you can run
""git-update-index --refresh"" to update the lstat(2) information recorded
in the index in such a case.  ""git-status"" does so as a side effect, and
that is more familiar to the end-user, so we recommend it to them.

The change affects only ""git diff"" that outputs patch text, because that
is where the annoyance of too many ""empty"" diff is most strongly felt,
and because the warning message can be safely ignored by downstream
tools without getting mistaken as part of the patch.  For the low-level
""git diff-files"" and ""git diff-index"", the traditional behaviour is
retained.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_3364.diff
https://github.com/git/git/commit/4b37666ccbab015e75fda745c29a2f5d58a54482,13 Aug 2007,"builtin-bundle create - use lock_file

""git bundle create"" left an invalid, partially written bundle if
an error occured during creation.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_3365.diff
https://github.com/git/git/commit/d616813d75b888b7c29bbad19808fe5cffa5380c,13 Aug 2007,"git-add: Add support for --refresh option.

This allows to refresh only a subset of the project files, based on
the specified pathspecs.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_3366.diff
https://github.com/git/git/commit/21a02980f9025c3a338fb897796542ddef8707d1,11 Aug 2007,"builtin-bundle - use buffered reads for bundle header

This eliminates all use of byte-at-a-time reading of data in this
function: as Junio noted, a bundle file is seekable so we can
reset the file position to the first part of the pack-file using lseek
after reading the header.

Signed-off-by: Mark Levedahl <mdl123@verizon.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/patch_3367.diff
https://github.com/git/git/commit/7efeb8f09866ddd09485c0e6f371a6cbba3d2a0a,10 Aug 2007,"Reinstate the old behaviour when GIT_DIR is set and GIT_WORK_TREE is unset

The old behaviour was to unilaterally default to the cwd is the work tree
when GIT_DIR was set, but GIT_WORK_TREE wasn't, no matter if we are inside
the GIT_DIR, or if GIT_DIR is actually something like ../../../.git.

Signed-off-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/patch_3368.diff
https://github.com/git/git/commit/6490a3383f1d0d96c122069e510ef1af1d019fbb,03 Aug 2007,"Fix work-tree related breakages

In set_work_tree(), variable rel needs to be reinitialized to
NULL on every call (it should not be static).

Make sure the incoming dir variable is not too long before
copying to the temporary buffer, and make sure chdir to the
resulting directory succeeds.

This was spotted and fixed by Alex and Johannes in a handful
patch exchanges.  Here is the final version.

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>",22,data/crawl/git/patch_3369.diff
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/patch_3370.diff
https://github.com/git/git/commit/d7ac12b25d375d32372b13f74e90425ca21d5dc1,01 Aug 2007,"Add set_git_dir() function

With the function set_git_dir() you can reset the path that will
be used for git_path(), git_dir() and friends.

The responsibility to close files and throw away information from the
old git_dir lies with the caller.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_3371.diff
https://github.com/git/git/commit/e663674722d8a64a208d8c176d5bfc340c04b964,01 Aug 2007,"Add functions get_relative_cwd() and is_inside_dir()

The function get_relative_cwd() works just as getcwd(), only that it
takes an absolute path as additional parameter, returning the prefix
of the current working directory relative to the given path.  If the
cwd is no subdirectory of the given path, it returns NULL.

is_inside_dir() is just a trivial wrapper over get_relative_cwd().

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/patch_3372.diff
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/patch_3373.diff
https://github.com/git/git/commit/d7f6bae28142e07e544efdab73260cf9f60ca899,30 Jul 2007,"rebase: try not to munge commit log message

This makes rebase/am keep the original commit log message
better, even when it does not conform to ""single line paragraph
to say what it does, then explain and defend why it is a good
change in later paragraphs"" convention.

This change is a two-edged sword.  While the earlier behaviour
would make such commit log messages more friendly to readers who
expect to get the birds-eye view with oneline summary formats,
users who primarily use git as a way to interact with foreign
SCM systems would not care much about the convenience of oneline
git log tools, but care more about preserving their own
convention.  This changes their commits less useful to readers
who read them with git tools while keeping them more consistent
with the foreign SCM systems they interact with.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/patch_3374.diff
https://github.com/git/git/commit/283884422f35594db9eab491d3f8c91e49f9d62f,30 Jul 2007,"symbolic-ref, update-ref: do not refuse reflog message with LF

Earlier these tools refused to create a reflog entry when the
message given by the calling Porcelain had a LF in it, partially
to keep the file format integrity of reflog file, which is
one-entry-per-line.  These tools should not be dictating such a
policy.

Instead, let the codepath to write out the reflog entry worry
about the format integrity and allow messages with LF in them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3375.diff
https://github.com/git/git/commit/12075103ddc9a061cf6f3b04feb206123bb78e2f,29 Jul 2007,"gitweb: Simplify 'opt' parameter validation, add ""no merges"" feeds

Simplify and make more readable validation of 'opt' (extra options)
parameter, using exists($hash{key}) instead of grepping keys of a hash
for value.

Move 'opt' parameter to be the last (for now) in the URL.

Make use of '--no-merges' extra option ('opt') by adding ""no merges""
RSS and Atom feeds to the HTML header.  Note that alternate format
links in the RSS and Atom views do not use '--no-merges' option yet!

Adds tests for the 'opt' parameter to t9500-gitweb-standalone-no-errors.sh

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/patch_3376.diff
https://github.com/git/git/commit/6cbf973c9a6f06e9c45b3f6a76f0ceae8e7fd291,27 Jul 2007,"use lockfile.c routines in git_commit_set_multivar()

Changed git_commit_set_multivar() to use the routines provided by
lockfile.c to reduce code duplication and ensure consistent behavior.

Signed-off-by: Bradford C. Smith <bradford.carl.smith@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/patch_3377.diff
https://github.com/git/git/commit/5d5a7a67384ad03007eea1f365ee255c02a40fa3,27 Jul 2007,"fully resolve symlinks when creating lockfiles

Make the code for resolving symlinks in lockfile.c more robust as
follows:

1. Handle relative symlinks
2. recursively resolve symlink chains up to 5

[jc: removed lstat/stat calls to do things stupid way]

Signed-off-by: Bradford C. Smith <bradford.carl.smith@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/patch_3378.diff
https://github.com/git/git/commit/2ae68fcb785a617793813abcea19893e13e436b0,27 Jul 2007,"Make verify-tag a builtin.

This replaces ""git-verify-tag.sh"" with ""builtin-verify-tag.c"".

Testing relies on the ""git tag -v"" tests calling this command.

A temporary file is needed when calling to gpg, because git is
already creating detached signatures (gpg option -b) to sign tags
(instead of leaving gpg to add the signature to the file by itself),
and those signatures need to be supplied in a separate file to be
verified by gpg.

The program uses git_mkstemp to create that temporary file needed by
gpg, instead of the previously used ""$GIT_DIR/.tmp-vtag"", in order to
allow the command to be used in read-only repositories, and also
prevent other instances of git to read or remove the same file.

Signal SIGPIPE is ignored because the program sometimes was
terminated because that signal when writing the input for gpg.

The command now can receive many tag names to be verified.
Documentation is also updated here to reflect this new behaviour.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/patch_3379.diff
https://github.com/git/git/commit/654a7ccc56f5dee3d11fbf6e928c14402c7495de,26 Jul 2007,"Update description of -z option.

The NUL you see in ""git log"" (without diff) output are between records,
not at the end of each record.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3380.diff
https://github.com/git/git/commit/91e1ee776283a238cc135fbbfc3f812492bcbd86,26 Jul 2007,"rebase -i: fix overzealous output redirection

When squashing, you no longer saw what the editor had to say to you
after commit 'Shut ""git rebase -i"" up when no --verbose was given'
(if you used a console based editor, at least).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/patch_3381.diff
https://github.com/git/git/commit/b87841e1645f900fbec0a937a45f98b70b5684ca,26 Jul 2007,"git-write-tree should not crash if prefix does not exist

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3382.diff
https://github.com/git/git/commit/e7a7be8831b159b9a7331b34c3ec6915d4a72190,26 Jul 2007,"git_mkstemp(): be careful not to overflow the path buffer.

If user's TMPDIR is insanely long, return negative after
setting errno to ENAMETOOLONG, pretending that the underlying
mkstemp() choked on a temporary file path that is too long.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/patch_3383.diff
https://github.com/git/git/commit/d58e8d34b019d435b424811c6f972910dfac6f55,25 Jul 2007,"When locking in a symlinked repository, try to lock the original.

In a working tree prepared in new-workdir (in contrib/), some files in .git/
directory are symbolic links to the original repository.  The usual sequence of
lock-write-rename would break the symbolic link.

Ideally we should resolve relative symbolic link with maxdepth, but I do not
want to risk too elaborate patch before 1.5.3 release, so this is a minimum
and trivially obvious fix.  new-workdir creates its symbolic links absolute,
and does not link from a symlinked workdir, so this fix should suffice for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/patch_3384.diff
https://github.com/git/git/commit/7b69b873faf3cfd592bb64a496c6982a540aa7ea,25 Jul 2007,"git log -g: Complain, but do not fail, when no reflogs are there

When asking ""git log -g --all"", clearly you want to see only those refs
that do have reflogs, but you do not want it to fail, either.

So instead of die()ing, complain about it, but move on to the other refs.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/patch_3385.diff
https://github.com/git/git/commit/dfd05e38f07f76505158399cc433b0b1870a769a,24 Jul 2007,"filter-branch: Big syntax change; support rewriting multiple refs

We used to take the first non-option argument as the name for the new
branch.  This syntax is not extensible to support rewriting more than just
HEAD.

Instead, we now have the following syntax:

	git filter-branch [<filter options>...] [<rev-list options>]

All positive refs given in <rev-list options> are rewritten.  Yes,
in-place.  If a ref was changed, the original head is stored in
refs/original/$ref now, for your inspecting pleasure, in addition to the
reflogs (since it is easier to inspect ""git show-ref | grep original"" than
to inspect all the reflogs).

This commit also adds the --force option to remove .git-rewrite/ and all
refs from refs/original/ before filtering.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",242,data/crawl/git/patch_3386.diff
https://github.com/git/git/commit/dfa49f33489dbb142bcc796a4e932863f9dcce1f,24 Jul 2007,"Shut ""git rebase -i"" up when no --verbose was given

Up to now, git rebase -i was quite chatty, showing through all the
nice core programs it called.

Now it only shows a progress meter by default.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_3387.diff
https://github.com/git/git/commit/16a7fcfe5e568b50ddebe2369600e71da67d1405,22 Jul 2007,"fsck --lost-found: write blob's contents, not their SHA-1

When looking for a lost blob, it is much nicer to be able to grep
through .git/lost-found/other/* than to write an inefficient loop
over the file names.  So write the contents of the dangling blobs,
not their object names.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_3388.diff
https://github.com/git/git/commit/e317cfafd247b279055e9ee64a6a982043bd06e7,21 Jul 2007,"builtin-tag.c: Fix two memory leaks and minor notation changes.

A repeated call to read_sha1_file was not freing memory
when the buffer was allocated but returned size was zero.

Also, now the program does not allow many -F or -m options,
which was a bug too because it was not freing the memory
allocated for any previous -F or -m options.

Tests are provided for ensuring that only one option
-F or -m is given. Also, another test is shipped here,
to check that ""git tag"" fails when a non-existing file
is passed to the -F option, something that git-tag.sh
allowed creating the tag with an empty message.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/patch_3389.diff
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/patch_3390.diff
https://github.com/git/git/commit/788001908c8960daa162c32baf3dc0f9ad1c16f8,17 Jul 2007,"git-p4: input to ""p4 files"" by stdin instead of arguments

This approach, suggested by Alex Riesen, bypasses the need for xargs-style
argument list handling. The handling in question looks broken in a corner
case with SC_ARG_MAX=4096 and final argument over 96 characters.

Signed-off-by: Scott Lamb <slamb@slamb.org>
Signed-off-by: Simon Hausmann <simon@lst.de>",28,data/crawl/git/patch_3391.diff
https://github.com/git/git/commit/a5e407988b35b7353bd03c770afc647670c25981,15 Jul 2007,"git-cvsserver: detect/diagnose write failure, etc.

There were many operations that did not notice and report errors
to the CVS client, which would have resulted in corrupt working
tree.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/patch_3392.diff
https://github.com/git/git/commit/bdecd9d41b3528e17aea2290344c584412e2424e,14 Jul 2007,"More permissive ""git-rm --cached"" behavior without -f.

In the previous behavior, ""git-rm --cached"" (without -f) had the same
restriction as ""git-rm"". This forced the user to use the -f flag in
situations which weren't actually dangerous, like:

$ git add foo           # oops, I didn't want this
$ git rm --cached foo   # back to initial situation

Previously, the index had to match the file *and* the HEAD. With
--cached, the index must now match the file *or* the HEAD. The behavior
without --cached is unchanged, but provides better error messages.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_3393.diff
https://github.com/git/git/commit/dbddb714b0e69ef15fba64e74f34244ab95f0610,13 Jul 2007,"Update git-merge documentation.

Add ""Configuration"" section to describe merge.summary
configuration variable (which is mentioned in git-fmt-merge-msg(1)
man page, but it is a plumbing command), and merge.verbosity
configuration variable (so there is a place to make reference
from ""Environment Variables"" section of git(7) man page) to the
git-merge(1) man page.  Also describe GIT_MERGE_VERBOSITY
environment.

The configuration variable merge.verbosity and environment variable
GIT_MERGE_VERBOSITY were introduced in commit 8c3275ab, which also
documented configuration variable but not environment variable.

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_3394.diff
https://github.com/git/git/commit/0b87b6e081e75170ffa40e92aebde1e22ad3161e,12 Jul 2007,"Add functions for parsing integers with size suffixes

Split out the nnn{k,m,g} parsing code from git_config_int into
git_parse_long, so command-line parameters can enjoy the same
functionality.  Also add get_parse_ulong for unsigned values.

Make git_config_int use git_parse_long, and add get_config_ulong
as well.

Signed-off-by: Brian Downing <bdowning@lavos.net>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/patch_3395.diff
https://github.com/git/git/commit/975e0daf5edba09060147d643e628b8c89e1d467,12 Jul 2007,"Function stripspace now gets a buffer instead file descriptors.

An implementation easier to call from builtins. It is designed
to be used from the upcoming builtin-tag.c and builtin-commit.c,
because both need to remove unwanted spaces from messages.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_3396.diff
https://github.com/git/git/commit/73f893605050c291dd8c4d8f3f50b8fec47dcf51,12 Jul 2007,"Pack information tool

This tool will print vaguely pretty information about a pack.  It
expects the output of ""git-verify-pack -v"" as input on stdin.

$ git-verify-pack -v | packinfo.pl

See the documentation in the script (contrib/stats/packinfo.pl)
for more information.

Signed-off-by: Brian Downing <bdowning@lavos.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",212,data/crawl/git/patch_3397.diff
https://github.com/git/git/commit/6f084a56fcb3543d88d252bb49c1d2bbf2bd0cf3,11 Jul 2007,"branch --track: code cleanup and saner handling of local branches

This patch cleans up some complicated code, and replaces it with a
cleaner version, using code from remote.[ch], which got extended a
little in the process.  This also enables us to fix two cases:

The earlier ""fix"" to setup tracking only when the original ref started
with ""refs/remotes"" is wrong.  You are absolutely allowed to use a
separate layout for your tracking branches.  The correct fix, of course,
is to set up tracking information only when there is a matching
remote.<nick>.fetch line containing a colon.

Another corner case was not handled properly.  If two remotes write to
the original ref, just warn the user and do not set up tracking.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",201,data/crawl/git/patch_3398.diff
https://github.com/git/git/commit/b42f69273bf5ae2d5bb0c7479bfa9827e7b351ac,11 Jul 2007,"Add for_each_remote() function, and extend remote_find_tracking()

The function for_each_remote() does exactly what the name
suggests.

The function remote_find_tracking() was extended to be able to
search remote refs for a given local ref.  The caller sets
either src or dst (but not both) in the refspec parameter, and
remote_find_tracking() will fill in the other and return 0.

Both changes are required for the next step: simplification of
git-branch's --track functionality.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/patch_3399.diff
https://github.com/git/git/commit/f39a946a1fb0fa4856cd0027b9da3603a1b06fdc,10 Jul 2007,"Support wholesale directory renames in fast-import

Some source material (e.g. Subversion dump files) perform directory
renames without telling us exactly which files in that subdirectory
were moved.  This makes it hard for a frontend to convert such data
formats to a fast-import stream, as all the frontend has on hand
is ""Rename a/ to b/"" with no details about what files are in a/,
unless the frontend also kept track of all files.

The new 'R' subcommand within a commit allows the frontend to
rename either a file or an entire subdirectory, without needing to
know the object's SHA-1 or the specific files contained within it.
The rename is performed as efficiently as possible internally,
making it cheaper than a 'D'/'M' pair for a file rename.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",187,data/crawl/git/patch_3400.diff
https://github.com/git/git/commit/1ed84157a21a3e868228b15588e4aadfbe5a030b,09 Jul 2007,"Revert 88494423 (removal of duplicate parents in the output codepath)

Now this is not needed, as we rewrite the parent list in the commit
object itself.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_3401.diff
https://github.com/git/git/commit/ae7aa49914072b9007ba62245e68b8bbd24f964a,09 Jul 2007,"Document custom hunk header selection

Since the external interface seems to have stabilized for this
new feature, let's document it properly.

Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/patch_3402.diff
https://github.com/git/git/commit/8e4a91bd780b89c7337f281a8601f2e0cae108fc,09 Jul 2007,"rebase -i: remember the settings of -v, -s and -p when interrupted

After interruption, be that an edit, or a conflicting commit, reset
the variables VERBOSE, STRATEGY and PRESERVE_MERGES, so that the
user does not have to respecify them with ""rebase --continue"".

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_3403.diff
https://github.com/git/git/commit/5fda48d67c82e07950e0b0c21cd8c97daefd7be0,07 Jul 2007,"Fix ""apply --reverse"" with regard to whitespace

""git apply"" used to take check the whitespace in the wrong
direction.

Noticed by Daniel Barkalow.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/patch_3404.diff
https://github.com/git/git/commit/b4372ef136b0a5a2c1dbd88a11dd72b478d0e0a5,07 Jul 2007,"Enable ""git rerere"" by the config variable rerere.enabled

Earlier, ""git rerere"" was enabled by creating the directory
.git/rr-cache.  That is definitely not in line with most other
features, which are enabled by a config variable.

So, check the config variable ""rerere.enabled"". If it is set
to ""false"" explicitely, do not activate rerere, even if
.git/rr-cache exists. This should help when you want to disable
rerere temporarily.

If ""rerere.enabled"" is not set at all, fall back to detection
of the directory .git/rr-cache.

[jc: with minimum tweaks]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/patch_3405.diff
https://github.com/git/git/commit/f258475a6ede3617ae768b69e33f78cbab8312de,06 Jul 2007,"Per-path attribute based hunk header selection.

This makes""diff -p"" hunk headers customizable via gitattributes mechanism.
It is based on Johannes's earlier patch that allowed to define a single
regexp to be used for everything.

The mechanism to arrive at the regexp that is used to define hunk header
is the same as other use of gitattributes.  You assign an attribute, funcname
(because ""diff -p"" typically uses the name of the function the patch is about
as the hunk header), a simple string value.  This can be one of the names of
built-in pattern (currently, ""java"" is defined) or a custom pattern name, to
be looked up from the configuration file.

  (in .gitattributes)
  *.java   funcname=java
  *.perl   funcname=perl

  (in .git/config)
  [funcname]
    java = ... # ugly and complicated regexp to override the built-in one.
    perl = ... # another ugly and complicated regexp to define a new one.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",271,data/crawl/git/patch_3406.diff
https://github.com/git/git/commit/46f74f007b86452c4b4135f5145f94eefc994ea2,06 Jul 2007,"Prefer EMAIL to username@hostname.

The environment variable $EMAIL gives a better default of user's
preferred e-mail address than the hardcoded ""username@hostname"",
as it is understood by many existing programs.

We still honor GIT_*_EMAIL environment variables and user.email
configuration variable give them higher precedence, so that the
user can override $EMAIL or ""username@hostname"", as they are
likely to be more specific to the context of working on a
particular project.

Signed-off-by: Matt Kraai <kraai@ftbfs.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/patch_3407.diff
https://github.com/git/git/commit/8c1ce0f46b85d40f215084eed7313896300082df,06 Jul 2007,"filter-branch: fail gracefully when a filter fails

A common mistake is to provide a filter which fails unwantedly. For
example, this will stop in the middle:

	git filter-branch --env-filter '
		test $GIT_COMMITTER_EMAIL = xyz &&
		export GIT_COMMITTER_EMAIL = abc' rewritten

When $GIT_COMMITTER_EMAIL is not ""xyz"", the test fails, and consequently
the whole filter has a non-zero exit status. However, as demonstrated
in this example, filter-branch would just stop, and the user would be
none the wiser.

Also, a failing msg-filter would not have been caught, as was the
case with one of the tests.

This patch fixes both issues, by paying attention to the exit status
of msg-filter, and by saying what failed before exiting.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_3408.diff
https://github.com/git/git/commit/ef6f0af2b6975e6568542123d015aa7e39bea0c3,04 Jul 2007,"git-init: set core.worktree if GIT_WORK_TREE is specified

Now you can do the following to create a repository which
has a separate working tree:

    /tmp/foo$ export GIT_DIR=/tmp/bar
    /tmp/foo$ git --work-tree . init
    Initialized empty Git repository in /tmp/bar/
    /tmp/foo$ git config core.worktree
    /tmp/foo

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/patch_3409.diff
https://github.com/git/git/commit/d54276f207081e35174c5d742e378cfff6e9843f,04 Jul 2007,"Handle format.subjectprefix for every command which accepts --pretty

Because the --pretty can be given as --pretty=email which historically produced
mails with patches. IOW, exactly what git-format-patch does.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3410.diff
https://github.com/git/git/commit/c401b33c349beaf4c218c6441c3e2b58a958de6f,04 Jul 2007,"Document git-filter-branch

This moves the documentation in git-filter-branch.sh to its own
man page, with a few touch ups (incorporating comments by Frank
Lichtenheld).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",450,data/crawl/git/patch_3411.diff
https://github.com/git/git/commit/3cb567386d5d0349bfb5e3aaf85e973faf685dda,03 Jul 2007,"diff --no-index: fix --name-status with added files

Without this patch, an added file would be reported as /dev/null.

Noticed by David Kastrup.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/patch_3412.diff
https://github.com/git/git/commit/5be60078c935ed08ee8eb5a32680bdfb6bb5bdf3,03 Jul 2007,"Rewrite ""git-frotz"" to ""git frotz""

This uses the remove-dashes target to replace ""git-frotz"" to ""git frotz"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4188,data/crawl/git/patch_3413.diff
https://github.com/git/git/commit/68f6c019fd8d49fbaa72f1aeeb21eb921b6a16bf,03 Jul 2007,"git-fsck: add --lost-found option

With this option, dangling objects are not only reported, but also
written to .git/lost-found/commit/ or .git/lost-found/other/. This
option implies '--full' and '--no-reflogs'.

'git fsck --lost-found' is meant as a replacement for git-lost-found.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/patch_3414.diff
https://github.com/git/git/commit/dbd21447361364d646f3972738a475a92f711513,03 Jul 2007,"format-patch: Add format.subjectprefix config option

This change lets you use the format.subjectprefix config option to override the
default subject prefix.

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/patch_3415.diff
https://github.com/git/git/commit/a2f8028d3d661b314d5a784764f2f5f9e4c2dde0,02 Jul 2007,"Make '!' aliases more useful

When an alias starts with an exclamation mark, the rest is interpreted
as a shell command. However, all arguments passed to git used to be
ignored.

Now you can have an alias like

	$ git config alias.e '!echo'

and

	$ git e Hello World

does what you expect it to do.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3416.diff
https://github.com/git/git/commit/06f59e9f5daa06fc4bd51cf4c508b3edd3ed514a,01 Jul 2007,"Don't fflush(stdout) when it's not helpful

This patch arose from a discussion started by Jim Meyering's patch
whose intention was to provide better diagnostics for failed writes.
Linus proposed a better way to do things, which also had the added
benefit that adding a fflush() to git-log-* operations and incremental
git-blame operations could improve interactive respose time feel, at
the cost of making things a bit slower when we aren't piping the
output to a downstream program.

This patch skips the fflush() calls when stdout is a regular file, or
if the environment variable GIT_FLUSH is set to ""0"".  This latter can
speed up a command such as:

GIT_FLUSH=0 strace -c -f -e write time git-rev-list HEAD | wc -l

a tiny amount.

Signed-off-by: ""Theodore Ts'o"" <tytso@mit.edu>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/patch_3417.diff
https://github.com/git/git/commit/0227f9887bcc158dcd22ac4f60e5e428b259dd2d,30 Jun 2007,"git: Try a bit harder not to lose errno in stdio

This switches the checks around upon the exit codepath of the
git wrapper, so that we may recover at least non-transient errors.

It's still not perfect. As I've been harping on, stdio simply isn't very
good for error reporting. For example, if an IO error happened, you'd want
to see EIO, wouldn't you? And yes, that's what the kernel would return.
However, with buffered stdio (and flushing outside of our control), what
would likely happen is that some intermediate error return _does_ return
EIO, but then the kernel might decide to re-mount the filesystem read-only
due to the error, and the actual *report* for us might be

	""write failure on standard output: read-only filesystem""

which lost the EIO.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/patch_3418.diff
https://github.com/git/git/commit/4576518dd7459f44583f33375dbd8799792fc1f3,28 Jun 2007,"Add an option to quiet git-init.

git-init lacks an option to suppress non-error and non-warning output -
this patch adds one.

Signed-off-by: Jeffrey C. Ollie <jeff@ocjtech.us>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_3419.diff
https://github.com/git/git/commit/f57882505efe05990102a0d96b37c09baadae03d,28 Jun 2007,"git-log: detect dup and fdopen failure

This defines xdup() and xfdopen() in git-compat-util.h to give
us error-catching variants of them without cluttering the code
too much.

Signed-off-by: Jim Meyering <jim@meyering.net>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/patch_3420.diff
https://github.com/git/git/commit/384f122b7c6dd2b52cc6029afee16560c38850ae,27 Jun 2007,"Don't ignore a pack-refs write failure

Without this, if the size of refs_file at that point is ever an exact
multiple of BUFSIZ, then an EIO or ENOSPC error on the final write would
not be diagnosed.

It's not worth worrying about EPIPE here.
Although theoretically possible that someone kill this process
with a manual SIGPIPE, it's not at all likely.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/patch_3421.diff
https://github.com/git/git/commit/91c8d5905c33e9d7c9014a1c6c7cec8eb86584df,27 Jun 2007,"detect close failure on just-written file handles

I audited git for potential undetected write failures.
In the cases fixed below, the diagnostics I add mimic the diagnostics
used in surrounding code, even when that means not reporting
the precise strerror(errno) cause of the error.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/patch_3422.diff
https://github.com/git/git/commit/2275d502114c71045af991697048191fed88aac4,27 Jun 2007,"config: Add --null/-z option for null-delimted output

Use \n as delimiter between key and value and \0 as
delimiter after each key/value pair. This should be
easily parsable output.

Signed-off-by: Frank Lichtenheld <frank@lichtenheld.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/patch_3423.diff
https://github.com/git/git/commit/b69ba460bb0710b2af8a20b4b0d62233f29401ec,27 Jun 2007,"config: Change output of --get-regexp for valueless keys

Print no space after the name of a key without value.
Otherwise keys without values are printed exactly the
same as keys with empty values.

Signed-off-by: Frank Lichtenheld <frank@lichtenheld.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/patch_3424.diff
https://github.com/git/git/commit/125b7630521918b75c136bd95309054d3f6d9da5,25 Jun 2007,"diff: round down similarity index

Rounding down the printed (dis)similarity index allows us to use
""100%"" as a special value that indicates complete rewrites and
fully equal file contents, respectively.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/patch_3425.diff
https://github.com/git/git/commit/0f157315a1020fce76fe2c5a703e40684b9b1699,25 Jun 2007,"Check for IO errors after running a command

This is trying to implement the strict IO error checks that Jim Meyering
suggested, but explicitly limits it to just regular files. If a pipe gets
closed on us, we shouldn't complain about it.

If the subcommand already returned an error, that takes precedence (and we
assume that the subcommand already printed out any relevant messages
relating to it)

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/patch_3426.diff
https://github.com/git/git/commit/47d0b4ff57f391786ed050f38c0de51462eda97a,25 Jun 2007,"Clean up internal command handling

This should change no code at all, it just moves the definition of ""struct
cmd_struct"" out, and then splits out the running of the right command into
the ""run_command()"" function.

It also removes the long-unused 'envp' pointer passing.

This is just preparation for adding some more error checking.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/patch_3427.diff
https://github.com/git/git/commit/7eb3cb9c683624681541972910328054e9431b43,23 Jun 2007,"gitk: Implement a simple scheduler for the compute-intensive stuff

This allows us to do compute-intensive processing, such as laying out
the graph, relatively efficiently while also having the GUI be
reasonably responsive.  The problem previously was that file events
were serviced before X events, so reading from another process which
supplies data quickly (hi git rev-list :) could mean that X events
didn't get processed for a long time.

With this, gitk finishes laying out the graph slightly sooner and
still responds to the GUI while doing so.

Signed-off-by: Paul Mackerras <paulus@samba.org>",563,data/crawl/git/patch_3428.diff
https://github.com/git/git/commit/750f7b668f33c9e8decbdd8141115328992d6fea,23 Jun 2007,"Finally implement ""git log --follow""

Ok, I've really held off doing this too damn long, because I'm lazy, and I
was always hoping that somebody else would do it.

But no, people keep asking for it, but nobody actually did anything, so I
decided I might as well bite the bullet, and instead of telling people
they could add a ""--follow"" flag to ""git log"" to do what they want to do,
I decided that it looks like I just have to do it for them..

The code wasn't actually that complicated, in that the diffstat for this
patch literally says ""70 insertions(+), 1 deletions(-)"", but I will have
to admit that in order to get to this fairly simple patch, you did have to
know and understand the internal git diff generation machinery pretty
well, and had to really be able to follow how commit generation interacts
with generating patches and generating the log.

So I suspect that while I was right that it wasn't that hard, I might have
been expecting too much of random people - this patch does seem to be
firmly in the core ""Linus or Junio"" territory.

To make a long story short: I'm sorry for it taking so long until I just
did it.

I'm not going to guarantee that this works for everybody, but you really
can just look at the patch, and after the appropriate appreciative noises
(""Ooh, aah"") over how clever I am, you can then just notice that the code
itself isn't really that complicated.

All the real new code is in the new ""try_to_follow_renames()"" function. It
really isn't rocket science: we notice that the pathname we were looking
at went away, so we start a full tree diff and try to see if we can
instead make that pathname be a rename or a copy from some other previous
pathname. And if we can, we just continue, except we show *that*
particular diff, and ever after we use the _previous_ pathname.

One thing to look out for: the ""rename detection"" is considered to be a
singular event in the _linear_ ""git log"" output! That's what people want
to do, but I just wanted to point out that this patch is *not* carrying
around a ""commit,pathname"" kind of pair and it's *not* going to be able to
notice the file coming from multiple *different* files in earlier history.

IOW, if you use ""git log --follow"", then you get the stupid CVS/SVN kind
of ""files have single identities"" kind of semantics, and git log will just
pick the identity based on the normal move/copy heuristics _as_if_ the
history could be linearized.

Put another way: I think the model is broken, but given the broken model,
I think this patch does just about as well as you can do. If you have
merges with the same ""file"" having different filenames over the two
branches, git will just end up picking _one_ of the pathnames at the point
where the newer one goes away. It never looks at multiple pathnames in
parallel.

And if you understood all that, you probably didn't need it explained, and
if you didn't understand the above blathering, it doesn't really mtter to
you. What matters to you is that you can now do

	git log -p --follow builtin-rev-list.c

and it will find the point where the old ""rev-list.c"" got renamed to
""builtin-rev-list.c"" and show it as such.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/patch_3429.diff
https://github.com/git/git/commit/610f043bb378d12f399f4e5692fb874e0a043b23,22 Jun 2007,"Import branch 'git-p4' of git://repo.or.cz/fast-export

Simon has asked that the git.git project include the git-p4 project
as at least a contrib/fast-import within git.git.  I think it makes
a lot of sense, as git-p4 nicely complements the only other in-tree
fast-import user: import-tars.perl.

git-p4 is offered under the MIT license by its authors.",1737,data/crawl/git/patch_3430.diff
https://github.com/git/git/commit/da4a660161cfe9d04c0849d77fa460c6ffc6503c,16 Jun 2007,"git-p4 fails when cloning a p4 depo.

A perforce command with all the files in the repo is generated to get
all the file content.
Here is a patch to break it into multiple successive perforce command
who uses 4K of parameter max, and collect the output for later.

It works, but not for big depos, because the whole perforce depo
content is stored in memory in P4Sync.run(), and it looks like mine is
bigger than 2 Gigs, so I had to kill the process.

[Simon: I added the bit about using SC_ARG_MAX, as suggested by Han-Wen]

Signed-off-by: Benjamin Sergeant <bsergean@gmail.com>
Signed-off-by: Simon Hausmann <simon@lst.de>",20,data/crawl/git/patch_3431.diff
https://github.com/git/git/commit/7cbf2f24ee8430fbf48a2c6f106f22adf9df62e1,16 Jun 2007,"Do not use h_errno after connect(2): the function does not set it

Randal L. Schwartz noticed compilation problems on SunOS, which made
me look at the code again. The thing is, h_errno is not used by
connect(2), it is only for functions from netdb.h, like gethostbyname.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/patch_3432.diff
https://github.com/git/git/commit/fadf488f9b8c4fc709f0b083d2769ecc1e0e1119,16 Jun 2007,"merge-recursive: refuse to merge binary files

[jc: cherry-picked 9f30855 from 'master']

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_3433.diff
https://github.com/git/git/commit/4175e9e3a8734be1e96e385b0fa2428b86ed5809,13 Jun 2007,"More static

There still are quite a few symbols that ought to be static.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/patch_3434.diff
https://github.com/git/git/commit/e96980ef8164f266308ea5fec536863a629866dc,13 Jun 2007,"builtin-add: simplify (and increase accuracy of) exclude handling

Previously, the code would always set up the excludes, and then manually
pick through the pathspec we were given, assuming that non-added but
existing paths were just ignored. This was mostly correct, but would
erroneously mark a totally empty directory as 'ignored'.

Instead, we now use the collect_ignored option of dir_struct, which
unambiguously tells us whether a path was ignored. This simplifies the
code, and means empty directories are now just not mentioned at all.

Furthermore, we now conditionally ask dir_struct to respect excludes,
depending on whether the '-f' flag has been set. This means we don't have
to pick through the result, checking for an 'ignored' flag; ignored entries
were either added or not in the first place.

We can safely get rid of the special 'ignored' flags to dir_entry, which
were not used anywhere else.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Jonas Fonseca <fonseca@diku.dk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/patch_3435.diff
https://github.com/git/git/commit/4234a76167b12a7669dae0e6386c62e712b9dcf5,13 Jun 2007,"Extend --pretty=oneline to cover the first paragraph,

so that an ugly commit message like this can be
handled sanely.

Currently, --pretty=oneline and --pretty=email (hence
format-patch) take and use only the first line of the commit log
message.  This changes them to:

 - Take the first paragraph, where the definition of the first
   paragraph is ""skip all blank lines from the beginning, and
   then grab everything up to the next empty line"".

 - Replace all line breaks with a whitespace.

This change would not affect a well-behaved commit message that
adheres to the convention of ""single line summary, a blank line,
and then body of message"", as its first paragraph always
consists of a single line.  Commit messages from different
culture, such as the ones imported from CVS/SVN, can however get
chomped with the existing behaviour at the first linebreak in
the middle of sentence right now, which would become much easier
to see with this change.

The Subject: and --pretty=oneline output would become very long
and unsightly for non-conforming commits, but their messages are
already ugly anyway, and thischange at least avoids the loss of
information.

The Subject: line from a multi-line paragraph is folded using
RFC2822 line folding rules at the places where line breaks were
in the original.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",393,data/crawl/git/patch_3436.diff
https://github.com/git/git/commit/80583c0ef61cc966c7eee79cf3623a83197e19b8,13 Jun 2007,"Lift 16kB limit of log message output

Traditionally we had 16kB limit when formatting log messages for
output, because it was easier to arrange for the caller to have
a reasonably big buffer and pass it down without ever worrying
about reallocating.

This changes the calling convention of pretty_print_commit() to
lift this limit.  Instead of the buffer and remaining length, it
now takes a pointer to the pointer that points at the allocated
buffer, and another pointer to the location that stores the
allocated length, and reallocates the buffer as necessary.

To support the user format, the error return of interpolate()
needed to be changed.  It used to return a bool telling ""Ok the
result fits"", or ""Sorry, I had to truncate it"".  Now it returns
0 on success, and returns the size of the buffer it wants in
order to fit the whole result.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",198,data/crawl/git/patch_3437.diff
https://github.com/git/git/commit/4394efecfa9f94ad14fe49bc9f499c5806aa83af,13 Jun 2007,"make git barf when an alias changes environment variables

Aliases changing environment variables (GIT_DIR or
GIT_WORK_TREE) can cause problems:
git has to use GIT_DIR to read the aliases from the config.
After running handle_options for the alias the options of the
alias may have changed environment variables.  Depending on
the implementation of setenv the memory location obtained
through getenv earlier may contain the old value or the new
value (or even be used for something else?).  To avoid these
problems git errors out if an alias uses any option which
changes environment variables.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/patch_3438.diff
https://github.com/git/git/commit/d7e3868cdfdc73c3de15296ecf32138a8308c07e,12 Jun 2007,"Fix git-p4 rebase to detect the correct upstream branch instead of unconditionally
always rebasing on top of remotes/p4/master

Signed-off-by: Simon Hausmann <shausman@trolltech.com>",12,data/crawl/git/patch_3439.diff
https://github.com/git/git/commit/f1eccbab638df66a7d8ec881f6f695514b26f44f,09 Jun 2007,"git-branch: cleanup config file when deleting branches

When deleting branches, remove the sections referring to these branches
from the config file.

Signed-off-by: Gerrit Pape <pape@smarden.org>",18,data/crawl/git/patch_3440.diff
https://github.com/git/git/commit/54a8ad925cfac90bb4141c9904b1f97f0c5b83d4,09 Jun 2007,"remote.c: refactor match_explicit_refs()

This does not change functionality; just splits one block that
is deeply nested and indented out of a huge loop into a separate
function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",159,data/crawl/git/patch_3441.diff
https://github.com/git/git/commit/a6080a0a44d5ead84db3dabbbc80e82df838533d,07 Jun 2007,"War on whitespace

This uses ""git-apply --whitespace=strip"" to fix whitespace errors that have
crept in to our source files over time.  There are a few files that need
to have trailing whitespaces (most notably, test vectors).  The results
still passes the test, and build result in Documentation/ area is unchanged.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1497,data/crawl/git/patch_3442.diff
https://github.com/git/git/commit/f4f51add2712293b7bc9e7aaebf6a589bb37c7c7,06 Jun 2007,"setup_git_directory: fix segfault if repository is found in cwd

Additionally there was a similar part calling setenv and getenv
in the same way which missed a check if getenv succeeded.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/patch_3443.diff
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/patch_3444.diff
https://github.com/git/git/commit/493c774e58a05bbbac06e4ae1654ca3d24e4e5cf,06 Jun 2007,"rev-parse: introduce --is-bare-repository

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/patch_3445.diff
https://github.com/git/git/commit/3af51928ab7cefa35048e3a5a9e78a127749d405,06 Jun 2007,"pack-check: Sort entries by pack offset before unpacking them.

Because of the way objects are sorted in a pack, unpacking them in
disk order is much more efficient than random access. Tests on the
Wine repository show a gain in pack validation time of about 35%.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_3446.diff
https://github.com/git/git/commit/e2ac7cb5fbcf1407003aa07cdcd14141527ea2e3,06 Jun 2007,"Don't assume tree entries that are not dirs are blobs

When scanning the trees in track_tree_refs() there is a ""lazy"" test
that assumes that entries are either directories or files.  Don't do
that.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/patch_3447.diff
https://github.com/git/git/commit/e6ff0f42bb0c63515c8489c1992f37d1d1e8b2f4,06 Jun 2007,"Add the --numbered-files option to git-format-patch.

With this option, git-format-patch will generate simple
numbered files as output instead of the default using
with the first commit line appended.

This simplifies the ability to generate an MH-style
drafts folder with each message to be sent.

Signed-off-by: Jon Loeliger <jdl@freescale.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/patch_3448.diff
https://github.com/git/git/commit/5771907a5745799c559ff21ccfcabfd21cc23b36,05 Jun 2007,"git-merge-file: refuse to merge binary files

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/patch_3449.diff
https://github.com/git/git/commit/9f30855d0ff5206e85e45f0307be9d18ffda41d3,05 Jun 2007,"merge-recursive: refuse to merge binary files

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/patch_3450.diff
https://github.com/git/git/commit/20f1eb6b46645115695329a371d412eb3e714865,05 Jun 2007,"git-fsck: learn about --verbose

With --verbose, it gets really chatty now.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/patch_3451.diff
https://github.com/git/git/commit/6f6826c52bb751450e2bfa28f07c817dfa5802d6,03 Jun 2007,"Add git-filter-branch

This script is derived from Pasky's cg-admin-rewritehist.

In fact, it _is_ the same script, minimally adapted to work without cogito.
It _should_ be able to perform the same tasks, even if only relying on
core-git programs.

All the work is Pasky's, just the adaption is mine.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Hopefully-signed-off-by: Petr ""cogito master"" Baudis <pasky@suse.cz>
Signed-off-by: Junio C Hamano <junkio@cox.net>",480,data/crawl/git/patch_3452.diff
https://github.com/git/git/commit/c94bf41c9a78dc1c084f2a2895f95b6b6d8f79b1,03 Jun 2007,"git-apply: what is detected and fixed is not just trailing spaces.

But we kept saying ""trailing whitespace"" all the same.  Reword the
error messages a bit.

Signed-off-by: Junio C Hamano <junkio@cox.net>",17,data/crawl/git/patch_3453.diff
https://github.com/git/git/commit/41cf68a85ca2a9199b32eb3932582b234fa474b4,02 Jun 2007,"GIT 1.5.2.1

Signed-off-by: Junio C Hamano <junkio@cox.net>",57,data/crawl/git/patch_3454.diff
https://github.com/git/git/commit/aa7e44bf571717aeb4435e6605391d51f3117047,02 Jun 2007,"Unify write_index_file functions

This patch unifies the write_index_file functions in
builtin-pack-objects.c and index-pack.c.  As the name
""index"" is overloaded in git, move in the direction of
using ""idx"" and ""pack idx"" when refering to the pack index.
There should be no change in functionality.

Signed-off-by: Geert Bosch <bosch@gnat.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",586,data/crawl/git/patch_3455.diff
https://github.com/git/git/commit/86dff6b6762149d5f3d4b44bb57f58a8399a33ee,31 May 2007,"Cleanups & import into p4/master for local import

- import into master/local if --import-local is set

- use Die() for exiting

- if --verbose is set, raise Exception()

- use joined strings iso. `list` for progress printing

Signed-off-by: Han-Wen Nienhuys <hanwen@google.com>",54,data/crawl/git/patch_3456.diff
https://github.com/git/git/commit/5476a8adcc29985e5496dac7a340dfd178f43a17,31 May 2007,"fix repack with --max-pack-size

Two issues here:

1) git-repack -a --max-pack-size=10 on the GIT repo dies pretty quick.
   There is a lot of confusion about deltas that were suposed to be
   reused from another pack but that get stored undeltified due to pack
   limit and object size doesn't match entry->size anymore.  This test
   is not really worth the complexity for determining when it is valid
   so get rid of it.

2) If pack limit is reached, the object buffer is freed, including when
   it comes from a cached delta data.  In practice the object will be
   stored in a subsequent pack undeltified, but let's make sure no
   pointer to freed data subsists by clearing entry->delta_data.

I also reorganized that code a bit to make it more readable.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",29,data/crawl/git/patch_3457.diff
https://github.com/git/git/commit/86d14e1b1d1063fc943c71edc8b05e1ce32c1602,30 May 2007,"decode_85(): fix missing return.

When the function detected an invalid base85 sequence, it issued
an error message but forgot to return error status at that point
and kept going.

Signed-off-by: Jerald Fitzjerald <jfj@freemail.gr>
Signed-off-by: Junio C Hamano <junkio@cox.net>",2,data/crawl/git/patch_3458.diff
https://github.com/git/git/commit/b86f73782eafd1c61bb706ec5ca3d1ec548d82f5,30 May 2007,"remove global .gitdir

Signed-off-by: Han-Wen Nienhuys <hanwen@google.com>",53,data/crawl/git/patch_3459.diff
https://github.com/git/git/commit/bb6e09b27afeaae780dabfda7a07d59fc7efc4cf,30 May 2007,"Diverse cleanups

- print commands with \n

- extractDepotPathsAndChangeFromGitLog -> extractSettings, returning
dict.

- store keepRepoPath in [git-p4: ] line

- create a main() function, so git-p4 can be pychecked

- use --destination for clone destination. This simplifies logic
for --keep-path

Signed-off-by: Han-Wen Nienhuys <hanwen@google.com>",224,data/crawl/git/patch_3460.diff
https://github.com/git/git/commit/074b2eea296886e179ef73e1c364f370a223618a,29 May 2007,"git-pack-objects: cache small deltas between big objects

Creating deltas between big blobs is a CPU and memory intensive task.
In the writing phase, all (not reused) deltas are redone.

This patch adds support for caching deltas from the deltifing phase, so
that that the writing phase is faster.

The caching is limited to small deltas to avoid increasing memory usage very much.
The implemented limit is (memory needed to create the delta)/1024.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <junkio@cox.net>",74,data/crawl/git/patch_3461.diff
https://github.com/git/git/commit/a588d88aaff312f3afd5713ffcb4e4b1829fb5a6,29 May 2007,"builtin-pack-objects: don't fail, if delta is not possible

If builtin-pack-objects runs out of memory while finding
the best deltas, it bails out with an error.

If the delta index creation fails (because there is not enough memory),
we can downgrade the error message to a warning and continue with the
next object.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <junkio@cox.net>",8,data/crawl/git/patch_3462.diff
https://github.com/git/git/commit/dfab71cb923d031715ebc3cf9f920d801250c552,29 May 2007,"Add test case for $Id$ expanded in the repository

This test case would have caught the bug fixed by revision
c23290d5.

It puts various forms of $Id$ into a file in the repository,
without allowing git to collapse them to uniformity.  Then enables the
$Id$ expansion on checkout, and checks that what is checked out has
coped with the various forms.

Signed-off-by: Andy Parkins <andyparkins@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",36,data/crawl/git/patch_3463.diff
https://github.com/git/git/commit/eb09626b94fb21c67f47f71f8bada0d4aed306f5,28 May 2007,"Fix stupid typo in lookup_tag()

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <junkio@cox.net>",2,data/crawl/git/patch_3464.diff
https://github.com/git/git/commit/6754a299d8d977326e396d641106cc5db4d29db1,28 May 2007,"minor cleanups

Signed-off-by: Han-Wen Nienhuys <hanwen@google.com>",30,data/crawl/git/patch_3465.diff
https://github.com/git/git/commit/cebdf5af319ce638862fe2e2cd2797840962ddbb,28 May 2007,"reformatting: break long lines.

Signed-off-by: Han-Wen Nienhuys <hanwen@google.com>",48,data/crawl/git/patch_3466.diff
https://github.com/git/git/commit/d079837eeeadc37d266113a1fd2deb0a01aaee91,27 May 2007,"Lazily open pack index files on demand

In some repository configurations the user may have many packfiles,
but all of the recent commits/trees/tags/blobs are likely to
be in the most recent packfile (the one with the newest mtime).
It is therefore common to be able to complete an entire operation
by accessing only one packfile, even if there are 25 packfiles
available to the repository.

Rather than opening and mmaping the corresponding .idx file for
every pack found, we now only open and map the .idx when we suspect
there might be an object of interest in there.

Of course we cannot known in advance which packfile contains an
object, so we still need to scan the entire packed_git list to
locate anything.  But odds are users want to access objects in the
most recently created packfiles first, and that may be all they
ever need for the current operation.

Junio observed in b867092f that placing recent packfiles before
older ones can slightly improve access times for recent objects,
without degrading it for historical object access.

This change improves upon Junio's observations by trying even harder
to avoid the .idx files that we won't need.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",55,data/crawl/git/patch_3467.diff
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/patch_3468.diff
https://github.com/git/git/commit/8558fd9ece4c8250a037a6d5482a8040d600ef47,26 May 2007,"Move refspec pattern matching to match_refs().

This means that send-pack and http-push will support pattern refspecs,
so builtin-push.c doesn't have to expand them, and also git push can
just turn --tags into ""refs/tags/*"", further simplifying
builtin-push.c

check_ref_format() gets a third ""conditionally okay"" result for
something that's valid as a pattern but not as a particular ref.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",192,data/crawl/git/patch_3469.diff
https://github.com/git/git/commit/ddcf786fd7d5755711439371dcfd9a7ba1dfa7a5,26 May 2007,"fixes to output of git-verify-pack -v

Now that the default delta depth is 50, it is a good idea to also bump
MAX_CHAIN to 50.

While at it, make the display a bit prettier by making the MAX_CHAIN
limit inclusive, and display the number of deltas that are above that
limit at the end instead of the beginning.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",19,data/crawl/git/patch_3470.diff
https://github.com/git/git/commit/ba505322a4f0ac052f059e7381b55c4ab8bfeacd,25 May 2007,"Verbose connect messages to show the IP addresses used

Also, the patch makes the error messages more verbose. Helps when
diagnosing connect problems on weird systems.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",38,data/crawl/git/patch_3471.diff
https://github.com/git/git/commit/59c8e2cb2aee2e4eb75007602b264bc4e7928bc0,25 May 2007,"Remove git-applypatch

The previous one removed git-applymbox, which was the sole user
of this tool.

Signed-off-by: Junio C Hamano <junkio@cox.net>",290,data/crawl/git/patch_3472.diff
https://github.com/git/git/commit/d63bd9a217c0f9284e4195495dc0d078f5e6577e,25 May 2007,"Teach mailsplit about Maildir's

Signed-off-by: Fernando J. Pereda <ferdy@gentoo.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",163,data/crawl/git/patch_3473.diff
https://github.com/git/git/commit/1568fea01eb25a293f8dae570a31ca34d41b5442,24 May 2007,"Add run_command_v_opt_cd: chdir into a directory before exec

It can make code simplier (no need to preserve cwd) and safer
(no chance the cwd of the current process is accidentally forgotten).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",29,data/crawl/git/patch_3474.diff
https://github.com/git/git/commit/654aaa37ab5c70650bdd16d57b56c2d0f9aa43cf,24 May 2007,"Refactor fast-import branch creation from existing commit

To resolve a corner case uncovered by Simon Hausmann I need to
reuse the logic for the SHA-1 expression version of the 'from '
command within the mark version of the 'from ' command.  This change
doesn't alter any functionality, but is merely breaking the common
code out to a function that I can reuse.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",58,data/crawl/git/patch_3475.diff
https://github.com/git/git/commit/66a2f523958129e9b697d30ed44a5174010cb42a,23 May 2007,"Catch p4 errors in rollback early enough (before deleting refs!)

Signed-off-by: Simon Hausmann <shausman@trolltech.com>",3,data/crawl/git/patch_3476.diff
https://github.com/git/git/commit/01c12a23121780b7b1d84943fe310cf8773f8745,23 May 2007,"pack-objects: clarification & option checks for --max-pack-size

Explain the special code for detecting a corner-case error,
and complain about --stdout & --max-pack-size being used together.

Signed-off-by: Dana L. How <danahow@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",9,data/crawl/git/patch_3477.diff
https://github.com/git/git/commit/23615708e2abef5c293ddee9335950161a038133,22 May 2007,"Teach git-describe how to run name-rev

Often users want to know not which tagged version a commit came
after, but which tagged version a commit is contained within.
This latter task is the job of git-name-rev, but most users are
looking to git-describe to do the job.

Junio suggested we make `git describe --contains` run the correct
tool, `git name-rev`, and that's exactly what we do here.  The output
of name-rev was adjusted slightly through the new --name-only option,
allowing describe to execv into name-rev and maintain its current
output format.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",51,data/crawl/git/patch_3478.diff
https://github.com/git/git/commit/0ba956d331e4c14fb1600a62044492c6c27af71a,22 May 2007,"git-status: respect core.excludesFile

git-add reads this variable, and honours the contents of that file if that
exists. Match this behaviour in git-status, too.

Noticed by Evan Carroll on IRC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <junkio@cox.net>",39,data/crawl/git/patch_3479.diff
https://github.com/git/git/commit/bc4e7d035840539eb5aa13ab3d51ab43cc2c1b50,22 May 2007,"git-daemon: don't ignore pid-file write failure

Note: since the consequence of failure is to call die,
I don't bother to close ""f"".

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <junkio@cox.net>",4,data/crawl/git/patch_3480.diff
https://github.com/git/git/commit/ebe27b137c971d6d436c8d2125296ee526f6d02b,21 May 2007,"git-repack --max-pack-size: split packs as asked by write_{object,one}()

Rewrite write_pack_file() to break to a new packfile
whenever write_object/write_one request it,  and
correct the header's object count in the previous packfile.
Change write_index_file() to write an index
for just the objects in the most recent packfile.

Signed-off-by: Dana L. How <danahow@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",120,data/crawl/git/patch_3481.diff
https://github.com/git/git/commit/d01fb92f8d27cf8f0a843f4e9c0f8f022856b34d,21 May 2007,"git-repack --max-pack-size: new file statics and code restructuring

Add ""pack_size_limit"", the limit specified by --max-pack-size,
""written_list"", the list of objects written to the current pack,
and ""nr_written"", the number of objects in written_list.
Put ""base_name"" at file scope again and add forward declarations.
Move write_index_file() call from cnd_pack_objects() to
write_pack_file() since only the latter will know how
many times to call write_index_file().

Signed-off-by: Dana L. How <danahow@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",68,data/crawl/git/patch_3482.diff
https://github.com/git/git/commit/a5bbda8b7b7f25f6caaa9f940e455e702f39766e,21 May 2007,"Add an option to git-ls-tree to display also the size of blob

Add -l/--long option to git-ls-tree command, which displays
object size of a blob entry.  Object size is placed after
object id (left-justified with minimum width of 7 characters).
For non-blob entries `-' is used.

Rationale: for non-blob entries size of an object has no much
meaning, and is not very interesting.  Moreover, in planned
pack v4 tree objects would be constructed on demand, so tree
size would need to be calculated.

Signed-off-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Junio C Hamano <junkio@cox.net>",47,data/crawl/git/patch_3483.diff
https://github.com/git/git/commit/b516968ff62ec153e008d033c153affd7ba9ddc6,21 May 2007,"Update local tracking refs when pushing

This also adds a --remote option to send-pack, which specifies the
configured remote being used. It is provided automatically by
git-push, and must match the url (which is still needed, since there
could be multiple urls).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",64,data/crawl/git/patch_3484.diff
https://github.com/git/git/commit/6b62816cb12e621c5952f088542bec6dfc7ec5d6,21 May 2007,"Move refspec parser from connect.c and cache.h to remote.{c,h}

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",502,data/crawl/git/patch_3485.diff
https://github.com/git/git/commit/5751f49010ec54164b93529e31165e71f5996856,21 May 2007,"Move remote parsing into a library file out of builtin-push.

The new parser is different from the one in builtin-push in two ways:
the default is to use the current branch's remote, if there is one,
before ""origin""; and config is used in preference to remotes.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",436,data/crawl/git/patch_3486.diff
https://github.com/git/git/commit/29bdbac1cd5fc4126b62c9a030403d56ae43c204,19 May 2007,"More work on the incremental importing of multiple branches.
Improved error detection by checking the exit code of git-fast-import.

Signed-off-by: Simon Hausmann <shausman@trolltech.com>",90,data/crawl/git/patch_3487.diff
https://github.com/git/git/commit/c3c46244518178bac49caf21d6ba3a782292bb10,16 May 2007,"Give a better hint if git-p4 submit fails

Signed-off-by: Simon Hausmann <shausman@trolltech.com>",2,data/crawl/git/patch_3488.diff
https://github.com/git/git/commit/51a2640afdd12475642728dc3576966abe0dba6d,15 Apr 2007,"Handle patch errors in git-p4 submit better.

Signed-off-by: Simon Hausmann <simon@lst.de>",38,data/crawl/git/patch_3489.diff
https://github.com/git/git/commit/c9b50e6307aa9931e18b6cd4d00de817b8e4a4c2,29 Mar 2007,"Fix the docs for git-p4 submit and turn git-p4 submit --master=foo into
simply git-p4 submit mytopicbranch.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",41,data/crawl/git/patch_3490.diff
https://github.com/git/git/commit/8910ac0e888daeefdbe6f7391bece150b12b1ad0,26 Mar 2007,"git-p4 debug doesn't need a git repository

Signed-off-by: Simon Hausmann <hausmann@kde.org>",29,data/crawl/git/patch_3491.diff
https://github.com/git/git/commit/c5fdcbcc20ebf0716fd17e3ac4f73baacf38a699,20 Mar 2007,"Removed p4-fast-export and p4-git-sync as they've been integrated into git-p4 now.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",928,data/crawl/git/patch_3492.diff
https://github.com/git/git/commit/05140f342e1df7319dd3da2ef8157bfd5760fee6,20 Mar 2007,"sync-to-perforce is now called submit and fixed the gitdir check a little bit

Signed-off-by: Simon Hausmann <hausmann@kde.org>",4,data/crawl/git/patch_3493.diff
https://github.com/git/git/commit/4f5cf76a55ecb3252b0924d0c4a16f3b037908cd,19 Mar 2007,"First (untested) attempt at migrating p4-git-sync into the final git-p4 script

Signed-off-by: Simon Hausmann <hausmann@kde.org>",243,data/crawl/git/patch_3494.diff
https://github.com/git/git/commit/86949eef4088d7b57fe7433568d573a926816f5c,19 Mar 2007,"Start moving the git-p4 tools into one single script.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",183,data/crawl/git/patch_3495.diff
https://github.com/git/git/commit/09e16455e028ae264347067a8c86a7b9a1e5889c,19 Mar 2007,"Improved the git dir detection.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",13,data/crawl/git/patch_3496.diff
https://github.com/git/git/commit/d566209e7fecffb61a3209766cc937bf027e2c6c,14 Mar 2007,"Auto-detect the current git branch before submitting back to perforce.

Signed-off-by: Simon Hausmann <simon@lst.de>",15,data/crawl/git/patch_3497.diff
https://github.com/git/git/commit/0bcff6121d68d8733e9b572eba357bcd8e91e23e,12 Mar 2007,"First version of a new script to submit changes back to perforce from git repositories.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",208,data/crawl/git/patch_3498.diff
