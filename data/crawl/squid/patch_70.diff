----++++src/security/PeerOptions.cc
@@ -192,7 +192,36 @@ Security::PeerOptions::updateTlsVersionLimits()
     }
 }
 
-// XXX: make a GnuTLS variant
+Security::ContextPtr
+Security::PeerOptions::createBlankContext() const
+{
+    Security::ContextPtr t = nullptr;
+
+#if USE_OPENSSL
+#if (OPENSSL_VERSION_NUMBER &gt;= 0x10100000L)
+    t = SSL_CTX_new(TLS_client_method());
+#else
+    t = SSL_CTX_new(SSLv23_client_method());
+#endif
+    if (!t) {
+        const auto x = ERR_error_string(ERR_get_error(), nullptr);
+        fatalf(&quot;Failed to allocate TLS client context: %s\n&quot;, x);
+    }
+
+#elif USE_GNUTLS
+    // Initialize for X.509 certificate exchange
+    if (const int x = gnutls_certificate_allocate_credentials(&amp;t)) {
+        fatalf(&quot;Failed to allocate TLS client context: error=%d\n&quot;, x);
+    }
+
+#else
+    fatal(&quot;Failed to allocate TLS client context: No TLS library\n&quot;);
+
+#endif
+
+    return t;
+}
+
 Security::ContextPtr
 Security::PeerOptions::createClientContext(bool setOptions)
 {
@@ -204,6 +233,10 @@ Security::PeerOptions::createClientContext(bool setOptions)
     // XXX: temporary performance regression. c_str() data copies and prevents this being a const method
     t = sslCreateClientContext(certFile.c_str(), privateKeyFile.c_str(), sslCipher.c_str(),
                                (setOptions ? parsedOptions : 0), parsedFlags);
+
+#elif USE_GNUTLS &amp;&amp; WHEN_READY_FOR_GNUTLS
+    t = createBlankContext();
+
 #endif
 
     if (t) {
----++++src/security/PeerOptions.h
@@ -32,6 +32,9 @@ class PeerOptions
     /// reset the configuration details to default
     virtual void clear() {*this = PeerOptions();}
 
+    /// generate an unset security context object
+    virtual Security::ContextPtr createBlankContext() const;
+
     /// generate a security client-context from these configured options
     Security::ContextPtr createClientContext(bool setOptions);
 
----++++src/security/ServerOptions.cc
@@ -90,6 +90,36 @@ Security::ServerOptions::dumpCfg(Packable *p, const char *pfx) const
         p-&gt;appendf(&quot; %sdh=&quot; SQUIDSBUFPH, pfx, SQUIDSBUFPRINT(dh));
 }
 
+Security::ContextPtr
+Security::ServerOptions::createBlankContext() const
+{
+    Security::ContextPtr t = nullptr;
+
+#if USE_OPENSSL
+#if (OPENSSL_VERSION_NUMBER &gt;= 0x10100000L)
+    t = SSL_CTX_new(TLS_server_method());
+#else
+    t = SSL_CTX_new(SSLv23_server_method());
+#endif
+    if (!t) {
+        const auto x = ERR_error_string(ERR_get_error(), nullptr);
+        debugs(83, DBG_CRITICAL, &quot;ERROR: Failed to allocate TLS server context: &quot; &lt;&lt; x);
+    }
+
+#elif USE_GNUTLS
+    // Initialize for X.509 certificate exchange
+    if (const int x = gnutls_certificate_allocate_credentials(&amp;t)) {
+        debugs(83, DBG_CRITICAL, &quot;ERROR: Failed to allocate TLS server context: error=&quot; &lt;&lt; x);
+    }
+
+#else
+    debugs(83, DBG_CRITICAL, &quot;ERROR: Failed to allocate TLS server context: No TLS library&quot;);
+
+#endif
+
+    return t;
+}
+
 void
 Security::ServerOptions::loadDhParams()
 {
----++++src/security/ServerOptions.h
@@ -25,6 +25,7 @@ class ServerOptions : public PeerOptions
     /* Security::PeerOptions API */
     virtual void parse(const char *);
     virtual void clear() {*this = ServerOptions();}
+    virtual Security::ContextPtr createBlankContext() const;
     virtual void dumpCfg(Packable *, const char *pfx) const;
 
     /// update the context with DH, EDH, EECDH settings
----++++src/ssl/support.cc
@@ -562,17 +562,9 @@ sslCreateServerContext(AnyP::PortCfg &amp;port)
 {
     ssl_initialize();
 
-#if (OPENSSL_VERSION_NUMBER &gt;= 0x10100000L)
-    Security::ContextPtr sslContext(SSL_CTX_new(TLS_server_method()));
-#else
-    Security::ContextPtr sslContext(SSL_CTX_new(SSLv23_server_method()));
-#endif
-
-    if (sslContext == NULL) {
-        const int ssl_error = ERR_get_error();
-        debugs(83, DBG_CRITICAL, &quot;ERROR: Failed to allocate SSL context: &quot; &lt;&lt; ERR_error_string(ssl_error, NULL));
-        return NULL;
-    }
+    Security::ContextPtr sslContext(port.secure.createBlankContext());
+    if (!sslContext)
+        return nullptr;
 
     if (!SSL_CTX_use_certificate(sslContext, port.signingCert.get())) {
         const int ssl_error = ERR_get_error();
----++++GitHub