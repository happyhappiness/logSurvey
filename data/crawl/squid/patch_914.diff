@@ -55,6 +55,8 @@ class HttpMsg
     virtual HttpMsg *_lock();	// please use HTTPMSGLOCK()
     virtual void _unlock();	// please use HTTPMSGUNLOCK()
 
+	virtual HttpMsg *clone() const = 0;
+
 public:
     HttpVersion http_ver;
 
@@ -552,6 +552,7 @@ HttpReply::calcMaxBodySize(HttpRequest& request)
     }
 }
 
+// XXX: check that this is sufficient for eCAP cloning
 HttpReply *
 HttpReply::clone() const
 {
@@ -140,6 +140,58 @@ HttpRequest::reset()
     init();
 }
 
+HttpRequest *
+HttpRequest::clone() const
+{
+    HttpRequest *copy = new HttpRequest(method, protocol, urlpath.buf());
+    // TODO: move common cloning clone to Msg::copyTo() or copy ctor
+    copy->header.append(&header);
+    copy->hdrCacheInit();
+    copy->hdr_sz = hdr_sz;
+    copy->http_ver = http_ver;
+    copy->pstate = pstate; // TODO: should we assert a specific state here?
+
+    strncpy(copy->login, login, sizeof(login)); // MAX_LOGIN_SZ
+    strncpy(copy->host, host, sizeof(host)); // SQUIDHOSTNAMELEN
+    copy->host_addr = host_addr;
+
+    if (auth_user_request) {
+        copy->auth_user_request = auth_user_request;
+        AUTHUSERREQUESTLOCK(copy->auth_user_request, "HttpRequest::clone");
+	}
+
+    copy->port = port;
+    // urlPath handled in ctor
+	copy->canonical = canonical ? xstrdup(canonical) : NULL;
+    
+    // This may be too conservative for the 204 No Content case
+    // may eventually need cloneNullAdaptationImmune() for that.
+    copy->flags = flags.cloneAdaptationImmune();
+
+	copy->range = range ? new HttpHdrRange(*range) : NULL;
+	copy->ims = ims;
+	copy->imslen = imslen;
+	copy->max_forwards = max_forwards;
+    copy->client_addr = client_addr;
+    copy->my_addr = my_addr;
+    copy->hier = hier; // Is it safe to copy? Should we?
+
+    copy->errType = errType;
+
+    // XXX: what to do with copy->peer_login?
+
+	copy->lastmod = lastmod;
+    copy->vary_headers = vary_headers ? xstrdup(vary_headers) : NULL;
+    // XXX: what to do with copy->peer_domain?
+
+    copy->tag = tag;
+    copy->extacl_user = extacl_user;
+    copy->extacl_passwd = extacl_passwd;
+    copy->extacl_log = extacl_log;
+
+    return copy;
+}
+
 bool
 HttpRequest::sanityCheckStartLine(MemBuf *buf, http_status *error)
 {
@@ -65,6 +65,8 @@ class HttpRequest: public HttpMsg
 
     void initHTTP(const HttpRequestMethod& aMethod, protocol_t aProtocol, const char *aUrlpath);
 
+    virtual HttpRequest *clone() const;
+
     /* are responses to this request potentially cachable */
     bool cacheable() const;
 
@@ -110,11 +110,6 @@ bool ICAPServiceRep::up() const
     return self != NULL && !isSuspended && hasOptions();
 }
 
-bool ICAPServiceRep::broken() const
-{
-    return probed() && !up();
-}
-
 bool ICAPServiceRep::wantsUrl(const String &urlPath) const
 {
     Must(hasOptions());
@@ -89,7 +89,6 @@ class ICAPServiceRep : public RefCountable, public Adaptation::Service,
     void invalidate(); // call when the service is no longer needed or valid
 
     bool probed() const; // see comments above
-    bool broken() const; // see comments above
     bool up() const; // see comments above
 
     virtual Adaptation::Initiate *makeXactLauncher(Adaptation::Initiator *, HttpMsg *virginHeader, HttpRequest *virginCause);
@@ -21,5 +21,5 @@ LoadableModulesConfigure(const wordlist *names)
     int count = 0;
     for (const wordlist *i = names; i; i = i->next, ++count)
         LoadModule(i->key);
-    debugs(1, 1, "loaded " << count << " Squid modules");
+    debugs(1, 1, "Squid modules loaded: " << count);
 }
@@ -719,8 +719,7 @@ squid_DEPENDENCIES = $(top_builddir)/lib/libmiscutil.a \
 	@DISK_LINKOBJS@ \
 	@REPL_OBJS@ \
 	@AUTH_LINKOBJS@ \
-	@AUTH_OBJS@ \
-	${ADAPTATION_LIBS}
+	@AUTH_OBJS@
 
 if USE_LOADABLE_MODULES
 squid_SOURCES += $(LOADABLE_MODULES_SOURCES)
@@ -954,8 +953,7 @@ ufsdump_DEPENDENCIES = $(top_builddir)/lib/libmiscutil.a \
 	@DISK_LINKOBJS@ \
 	@REPL_OBJS@ \
 	@AUTH_LINKOBJS@ \
-	@AUTH_OBJS@ \
-	${ADAPTATION_LIBS}
+	@AUTH_OBJS@
 
 nodist_ufsdump_SOURCES = \
 	repl_modules.cc \
@@ -1496,8 +1494,7 @@ tests_testCacheManager_LDADD = \
 tests_testCacheManager_LDFLAGS = $(LIBADD_DL)
 tests_testCacheManager_DEPENDENCIES =  $(top_builddir)/lib/libmiscutil.a \
 	@REPL_OBJS@ \
-	@SQUID_CPPUNIT_LA@ \
-	${ADAPTATION_LIBS}
+	@SQUID_CPPUNIT_LA@
 
 tests_testDiskIO_SOURCES= \
 	$(SWAP_TEST_SOURCES) \
@@ -1666,8 +1663,7 @@ tests_testEvent_LDADD = \
 tests_testEvent_LDFLAGS = $(LIBADD_DL)
 tests_testEvent_DEPENDENCIES =  $(top_builddir)/lib/libmiscutil.a \
 	@REPL_OBJS@ \
-	@SQUID_CPPUNIT_LA@ \
-	${ADAPTATION_LIBS}
+	@SQUID_CPPUNIT_LA@
 
 ## Tests of the EventLoop module.
 tests_testEventLoop_SOURCES = \
@@ -1822,8 +1818,7 @@ tests_testEventLoop_LDADD = \
 tests_testEventLoop_LDFLAGS = $(LIBADD_DL)
 tests_testEventLoop_DEPENDENCIES =  $(top_builddir)/lib/libmiscutil.a \
 	@REPL_OBJS@ \
-	@SQUID_CPPUNIT_LA@ \
-	${ADAPTATION_LIBS}
+	@SQUID_CPPUNIT_LA@
 
 tests_test_http_range_SOURCES = \
 	tests/test_http_range.cc \
@@ -2129,8 +2124,7 @@ tests_testHttpRequest_LDADD = \
 tests_testHttpRequest_LDFLAGS = $(LIBADD_DL)
 tests_testHttpRequest_DEPENDENCIES =  $(top_builddir)/lib/libmiscutil.a \
 	@REPL_OBJS@ \
-	@SQUID_CPPUNIT_LA@ \
-	${ADAPTATION_LIBS}
+	@SQUID_CPPUNIT_LA@
 
 ## Tests of the ICMP base module.
 # Its used by pinger so SHOULD NOT require more dependancies! :-(
@@ -2487,5 +2481,4 @@ tests_testURL_LDADD = \
 tests_testURL_LDFLAGS = $(LIBADD_DL)
 tests_testURL_DEPENDENCIES =  $(top_builddir)/lib/libmiscutil.a \
 	@REPL_OBJS@ \
-	@SQUID_CPPUNIT_LA@ \
-	${ADAPTATION_LIBS}
+	@SQUID_CPPUNIT_LA@
@@ -81,6 +81,12 @@ Adaptation::Config::finalize()
     const Vector<ServiceConfig*> &configs = serviceConfigs;
     debugs(93,3, "Found " << configs.size() << " service configs.");
     for (VISCI i = configs.begin(); i != configs.end(); ++i) {
+		const ServiceConfig &cfg = **i;
+		if (FindService(cfg.key) != NULL) {
+			debugs(93,0, "ERROR: Duplicate adaptation service name: " <<
+                cfg.key);
+			continue; // TODO: make fatal
+		}
         ServicePointer s = createService(**i);
         if (s != NULL)
             AllServices().push_back(s);
@@ -57,7 +57,7 @@ class Config
     ServicePointer findService(const String&);
     Class * findClass(const String& key);
 
-    void finalize();
+    virtual void finalize();
 
 private:
     Config(const Config &); // unsupported
@@ -22,6 +22,8 @@ libadaptation_la_SOURCES = \
 	Initiate.h \
 	Initiator.cc \
 	Initiator.h \
+	Message.cc \
+	Message.h \
 	Service.cc \
 	Service.h \
 	ServiceConfig.cc \
@@ -0,0 +1,58 @@
+/*
+ * DEBUG: section XXX
+ */
+
+#include "squid.h"
+#include "HttpMsg.h"
+#include "TextException.h"
+#include "adaptation/Message.h"
+
+Adaptation::Message::Message(): header(NULL)
+{
+}
+
+Adaptation::Message::Message(Header *aHeader): header(NULL)
+{
+    set(aHeader);
+}
+
+Adaptation::Message::~Message()
+{
+    clear();
+}
+
+void
+Adaptation::Message::clear()
+{
+    HTTPMSGUNLOCK(header);
+    body_pipe = NULL;
+}
+
+void
+Adaptation::Message::set(Header *aHeader)
+{
+    clear();
+    if (aHeader) {
+        header = HTTPMSGLOCK(aHeader);
+        body_pipe = header->body_pipe;
+    }
+}
+
+void
+Adaptation::Message::copyTo(Message &dest)
+{
+	Must(!dest.body_pipe); // can relax if needed, but need !body_pipe->used()
+    dest.clear();
+    if (header) {
+		if (header->body_pipe != NULL) {
+			// check that it would not be too late to clone the pipe
+			Must(!header->body_pipe->consumedSize());
+			header->body_pipe->clearConsumer(); // if any
+			// note: current header->body_pipe producer may later become
+			// dest.body_pipe consumer and consume its own data
+			// TODO: consumer should detect and short-circuit no-op adaptation
+		}
+		Header *copy = header->clone();
+		dest.set(copy);
+    }
+}
@@ -0,0 +1,50 @@
+
+/*
+ * $Id$
+ */
+
+#ifndef SQUID__ADAPTATION__MESSAGE_H
+#define SQUID__ADAPTATION__MESSAGE_H
+
+class HttpMsg;
+class BodyPipe;
+template <class C>
+class RefCount;
+typedef RefCount<BodyPipe> BodyPipePointer;
+
+namespace Adaptation {
+
+// Manages the header and the body of an HTTP message being worked on.
+// Adaptation transactions use this class for virgin and adapted HTTP messages.
+class Message
+{
+
+public:
+    typedef HttpMsg Header;
+
+    Message();
+    Message(Header *aHeader);
+    ~Message();
+
+    void clear();
+    void set(Header *aHeader);
+
+	void copyTo(Message &dest);
+
+public:
+    // virgin or adapted message being worked on
+    Header *header;   // parsed HTTP status/request line and headers
+
+	// Copy of header->body_pipe, in case somebody moves the original.
+	BodyPipePointer body_pipe;
+
+private:
+    Message(const Message &); // not implemented
+    Message &operator =(const Message &); // not implemented
+};
+
+} // namespace Adaptation;
+
+// TODO: replace ICAPInOut with Adaptation::Message (adding one for "cause")
+
+#endif /* SQUID__ADAPTATION__MESSAGE_H */
@@ -18,6 +18,11 @@ Adaptation::Service::finalize()
 {
 }
 
+bool Adaptation::Service::broken() const
+{
+    return probed() && !up();
+}
+
 Adaptation::Services &
 Adaptation::AllServices()
 {
@@ -30,7 +30,7 @@ class Service: public RefCountable
     virtual void invalidate() = 0;
 
     virtual bool probed() const = 0; // see comments above
-    virtual bool broken() const = 0; // see comments above
+    virtual bool broken() const;
     virtual bool up() const = 0; // see comments above
 
     virtual Initiate *makeXactLauncher(Initiator *, HttpMsg *virginHeader, HttpRequest *virginCause) = 0;
@@ -21,6 +21,7 @@ class Initiator;
 class AccessCheck;
 class AccessRule;
 class ServiceGroup;
+class Message;
 
 typedef RefCount<Service> ServicePointer;
 
@@ -64,16 +64,15 @@
 #include "adaptation/Config.h"
 
 static void parse_adaptation_service_set_type();
-
 static void parse_adaptation_access_type();
-static void dump_adaptation_access_type(StoreEntry *, const char *);
-static void free_adaptation_access_type();
 
 #endif
 
 #if ICAP_CLIENT
 #include "ICAP/ICAPConfig.h"
 
+static void free_adaptation_access_type(const char *);
+
 static void parse_icap_service_type(ICAPConfig *);
 static void dump_icap_service_type(StoreEntry *, const char *, const ICAPConfig &);
 static void free_icap_service_type(ICAPConfig *);
@@ -86,6 +85,13 @@ static void free_icap_access_type(ICAPConfig *);
 
 #endif
 
+#if USE_ECAP
+#include "eCAP/Config.h"
+static void parse_ecap_service_type(Ecap::Config *);
+static void dump_ecap_service_type(StoreEntry *, const char *, const Ecap::Config &);
+static void free_ecap_service_type(Ecap::Config *);
+#endif
+
 CBDATA_TYPE(peer);
 
 static const char *const T_SECOND_STR = "second";
@@ -3446,18 +3452,6 @@ parse_adaptation_access_type()
     Adaptation::Config::ParseAccess(LegacyParser);
 }
 
-static void
-free_adaptation_access_type()
-{
-    Adaptation::Config::FreeAccess();
-}
-
-static void
-dump_adaptation_access_type(StoreEntry * entry, const char *name)
-{
-    Adaptation::Config::DumpAccess(entry, name);
-}
-
 #endif /* USE_ADAPTATION */
 
 
@@ -3506,19 +3500,43 @@ parse_icap_access_type(ICAPConfig *)
 {
     debugs(93, 0, "WARNING: 'icap_access' is depricated. " <<
         "Use 'adaptation_access' instead");
-    parse_adaptation_access_type();
+    Adaptation::Config::ParseAccess(LegacyParser);
 }
 
+
 static void
 free_icap_access_type(ICAPConfig *)
 {
-    free_adaptation_access_type();
+    Adaptation::Config::FreeAccess();
 }
 
 static void
 dump_icap_access_type(StoreEntry * entry, const char *name, const ICAPConfig &)
 {
-    dump_adaptation_access_type(entry, name);
+    Adaptation::Config::DumpAccess(entry, name);
 }
 
 #endif
+
+
+#if USE_ECAP
+
+static void
+parse_ecap_service_type(Ecap::Config * cfg)
+{
+    cfg->parseService();
+}
+
+static void
+free_ecap_service_type(Ecap::Config * cfg)
+{
+    cfg->freeService();
+}
+
+static void
+dump_ecap_service_type(StoreEntry * entry, const char *name, const Ecap::Config &cfg)
+{
+    cfg.dumpService(entry, name);
+}
+
+#endif /* USE_ECAP */
@@ -30,6 +30,7 @@ adaptation_service_set_type	icap_service
 icap_access_type	icap_class acl
 icap_class_type		icap_service
 icap_service_type
+ecap_service_type
 int
 kb_int64_t
 kb_size_t
@@ -5004,7 +5004,7 @@ DOC_END
 NAME: icap_class
 TYPE: icap_class_type
 IFDEF: ICAP_CLIENT
-LOC: TheICAPConfig
+LOC: none
 DEFAULT: none
 DOC_START
 	This depricated option was documented to define an ICAP service
@@ -5021,7 +5021,7 @@ DOC_END
 NAME: icap_access
 TYPE: icap_access_type
 IFDEF: ICAP_CLIENT
-LOC: TheICAPConfig
+LOC: none
 DEFAULT: none
 DOC_START
         This option is depricated. Please use adaptation_access, which
@@ -5034,6 +5034,45 @@ COMMENT_START
  -----------------------------------------------------------------------------
 COMMENT_END
 
+NAME: ecap_enable
+TYPE: onoff
+IFDEF: USE_ECAP
+COMMENT: on|off
+LOC: Ecap::TheConfig.onoff
+DEFAULT: off
+DOC_START
+	Controls whether eCAP support is enabled.
+DOC_END
+
+NAME: ecap_service
+TYPE: ecap_service_type
+IFDEF: USE_ECAP
+LOC: Ecap::TheConfig
+DEFAULT: none
+DOC_START
+	Defines a single eCAP service
+
+	ecap_service servicename vectoring_point bypass service_url
+
+	vectoring_point = reqmod_precache|reqmod_postcache|respmod_precache|respmod_postcache
+		This specifies at which point of transaction processing the
+		eCAP service should be activated. *_postcache vectoring points
+		are not yet supported.
+	bypass = 1|0
+		If set to 1, the eCAP service is treated as optional. If the
+		service cannot be reached or malfunctions, Squid will try to
+		ignore any errors and process the message as if the service
+		was not enabled. No all eCAP errors can be bypassed.
+		If set to 0, the eCAP service is treated as essential and all
+		eCAP errors will result in an error page returned to the
+		HTTP client.
+	service_url = ecap://vendor/service_name?custom&cgi=style&parameters=optional
+
+Example:
+ecap_service service_1 reqmod_precache 0 ecap://filters-R-us/leakDetector?on_error=block
+ecap_service service_2 respmod_precache 1 icap://filters-R-us/virusFilter?config=/etc/vf.cfg
+DOC_END
+
 NAME: loadable_modules
 TYPE: wordlist
 IFDEF: USE_LOADABLE_MODULES
@@ -0,0 +1,36 @@
+
+/*
+ * $Id$
+ */
+
+#include "squid.h"
+
+#include <libecap/common/registry.h>
+#include "eCAP/Host.h"
+#include "eCAP/ServiceRep.h"
+#include "eCAP/Config.h"
+
+Ecap::Config Ecap::TheConfig;
+
+Ecap::Config::Config()
+{
+}
+
+Ecap::Config::~Config()
+{
+}
+
+void
+Ecap::Config::finalize() {
+	Adaptation::Config::finalize();
+	static Ecap::Host *TheHost = new Ecap::Host;
+	libecap::RegisterHost(TheHost);
+}
+
+Adaptation::ServicePointer
+Ecap::Config::createService(const Adaptation::ServiceConfig &cfg)
+{
+    Adaptation::ServicePointer s = new Ecap::ServiceRep(cfg);
+    return s.getRaw();
+}
+
@@ -0,0 +1,34 @@
+
+/*
+ * $Id$
+ *
+ */
+
+#ifndef SQUID_ECAP_CONFIG_H
+#define SQUID_ECAP_CONFIG_H
+
+#include "adaptation/Config.h"
+
+namespace Ecap {
+
+class Config: public Adaptation::Config
+{
+
+public:
+    Config();
+    ~Config();
+
+	virtual void finalize();
+
+private:
+    Config(const Config &); // not implemented
+    Config &operator =(const Config &); // not implemented
+
+    virtual Adaptation::ServicePointer createService(const Adaptation::ServiceConfig &cfg);
+};
+
+extern Config TheConfig;
+
+} // namespace Ecap
+
+#endif /* SQUID_ECAP_CONFIG_H */
@@ -0,0 +1,79 @@
+#include "squid.h"
+#include <libecap/adapter/service.h>
+#include "TextException.h"
+#include "eCAP/ServiceRep.h"
+#include "eCAP/Host.h"
+
+
+std::string
+Ecap::Host::uri() const
+{
+    return "ecap://squid-cache.org/ecap/hosts/squid";
+}
+
+void
+Ecap::Host::describe(std::ostream &os) const
+{
+    os << PACKAGE_NAME << " v" << PACKAGE_VERSION;
+}
+
+void
+Ecap::Host::noteService(const libecap::weak_ptr<libecap::adapter::Service> &weak)
+{
+    // Many ecap_service lines may use the same service URI. Find each 
+    // matching service rep, make sure it is an eCAP rep,
+	// and update it with the actual eCAP service.
+    int found = 0;
+
+	libecap::shared_ptr<libecap::adapter::Service> shared(weak);
+    typedef Adaptation::Services::iterator SI;
+    for (SI i = Adaptation::AllServices().begin(); i != Adaptation::AllServices().end(); ++i) {
+        if ((*i)->cfg().uri == shared->uri().c_str()) {
+            ServiceRep *rep = dynamic_cast<ServiceRep*>(i->getRaw());
+			Must(rep);
+			rep->noteService(shared);
+            ++found;
+		}
+	}
+
+	debugs(93,5, "Found " << found << " ecap_service configs for " <<
+        shared->uri());
+    if (!found) {
+		debugs(93,1, "Warning: ignoring loaded eCAP module service without " <<
+            "a matching ecap_service configuration: " << shared->uri());
+	}
+}
+
+static int
+SquidLogLevel(libecap::LogVerbosity lv)
+{
+	if (lv.critical())
+		return DBG_CRITICAL; // is it a good idea to ignore other flags?
+
+	if (lv.large())
+		return DBG_DATA; // is it a good idea to ignore other flags?
+
+	if (lv.application())
+		return DBG_DATA; // is it a good idea to ignore other flags?
+
+	return 2 + 2*lv.debugging() + 3*lv.operation() + 2*lv.xaction();
+}
+
+std::ostream *
+Ecap::Host::openDebug(libecap::LogVerbosity lv)
+{
+    const int squidLevel = SquidLogLevel(lv);
+    const int squidSection = 93; // XXX: this should be a global constant
+    // XXX: Debug.h should provide this to us
+	if ((Debug::level = squidLevel) <= Debug::Levels[squidSection])
+		return &Debug::getDebugOut();
+	else
+		return NULL;
+}
+
+void
+Ecap::Host::closeDebug(std::ostream *debug)
+{
+	if (debug)
+		Debug::finishDebug();
+}
@@ -0,0 +1,31 @@
+
+/*
+ * $Id$
+ */
+
+#ifndef SQUID_ECAP_HOST_H
+#define SQUID_ECAP_HOST_H
+
+#include <libecap/host/host.h>
+
+namespace Ecap {
+
+// Squid wrapper, providing host application functionality to eCAP services.
+class Host : public libecap::host::Host
+{
+public:
+		// About
+		virtual std::string uri() const; // unique across all vendors
+		virtual void describe(std::ostream &os) const; // free-format info
+
+		// Service management
+		virtual void noteService(const libecap::weak_ptr<libecap::adapter::Service> &s);
+
+		// Logging
+		virtual std::ostream *openDebug(libecap::LogVerbosity lv);
+		virtual void closeDebug(std::ostream *debug);
+};
+
+} // namespace Ecap
+
+#endif /* SQUID_ECAP_HOST_H */
@@ -9,18 +9,18 @@ AM_CXXFLAGS = @SQUID_CXXFLAGS@
 noinst_LTLIBRARIES = libeCAP.la
 
 libeCAP_la_SOURCES = \
+	Config.h \
+	Config.cc \
+	Host.h \
+	Host.cc \
+	MessageTranslator.h \
+	MessageTranslator.cc \
+	ServiceRep.h \
+	ServiceRep.cc \
+	XactionRep.h \
+	XactionRep.cc \
+	\
 	Registry.h
 
 INCLUDES = -I. -I$(top_builddir)/include -I$(top_srcdir)/include \
         -I$(top_srcdir)/src
-
-
-# Sample adapter section.
-
-EXTRA_DIST = \
-	MinimalAdapter.cc
-        
-lib_LTLIBRARIES = MinimalAdapter.la
-MinimalAdapter_la_SOURCES = MinimalAdapter.cc
-MinimalAdapter_la_LDFLAGS = -module -avoid-version
-MinimalAdapter_la_LIBADD = ./libeCAP.la
@@ -0,0 +1,8 @@
+/*
+ * DEBUG: section XXX
+ */
+
+#include "squid.h"
+#include "adaptation/Message.h"
+#include "eCAP/MessageTranslator.h"
+
@@ -0,0 +1,27 @@
+
+/*
+ * $Id$
+ */
+
+#ifndef SQUID__ECAP__MESSAGE_TRANSLATOR_H
+#define SQUID__ECAP__MESSAGE_TRANSLATOR_H
+
+#include "adaptation/forward.h"
+#include <libecap/common/message.h>
+
+namespace Ecap {
+
+// Translates Squid Adaptation::Message into libecap::Message.
+class MessageTranslator: public libecap::Message
+{
+
+public:
+    MessageTranslator(Adaptation::Message &aMessage): theMessage(aMessage) {}
+
+private:
+    Adaptation::Message &theMessage; // the message being translated to libecap
+};
+
+} // namespace Ecap;
+
+#endif /* SQUID__E_CAP__MESSAGE_TRANSLATOR_H */
@@ -0,0 +1,76 @@
+#include "squid.h"
+#include <libecap/adapter/service.h>
+#include "TextException.h"
+#include "assert.h"
+#include "eCAP/ServiceRep.h"
+#include "eCAP/XactionRep.h"
+
+Ecap::ServiceRep::ServiceRep(const Adaptation::ServiceConfig &cfg):
+    /*AsyncJob("Ecap::ServiceRep"),*/ Adaptation::Service(cfg)
+{
+}
+
+Ecap::ServiceRep::~ServiceRep()
+{
+}
+
+void Ecap::ServiceRep::noteService(const AdapterService &s) {
+    Must(s != NULL);
+	theService = s;
+	debugs(93,7, "Matched loaded and configured eCAP services: " <<
+		s->uri() << ' ' << cfg().key << "\n");
+}
+
+void Ecap::ServiceRep::invalidate() {
+	theService->retire();
+	theService.reset();
+}
+
+void Ecap::ServiceRep::noteFailure() {
+	assert(false); // XXX: should this be ICAP-specific?
+}
+
+void
+Ecap::ServiceRep::finalize()
+{
+	Adaptation::Service::finalize();
+    if (!theService) {
+		debugs(93,1, "Warning: configured ecap_service was not loaded: " <<
+            cfg().uri);
+	}
+}
+
+bool Ecap::ServiceRep::probed() const
+{
+    return true; // we "probe" the adapter in finalize().
+}
+
+bool Ecap::ServiceRep::up() const
+{
+    return theService != NULL;
+}
+
+bool Ecap::ServiceRep::wantsUrl(const String &urlPath) const
+{
+    Must(up());
+    return theService->wantsUrl(urlPath.buf());
+}
+
+Adaptation::Initiate *
+Ecap::ServiceRep::makeXactLauncher(Adaptation::Initiator *initiator,
+    HttpMsg *virgin, HttpRequest *cause)
+{
+	Must(up());
+	XactionRep *rep = new XactionRep(initiator, virgin, cause, Pointer(this));
+	XactionRep::AdapterXaction x(theService->makeXaction(rep));
+    rep->master(x);
+    return rep;
+}
+
+// returns a temporary string depicting service status, for debugging
+const char *Ecap::ServiceRep::status() const
+{
+    assert(false); // move generic stuff from ICAP to Adaptation
+    // add theService->status()?
+	return NULL;
+}
@@ -0,0 +1,53 @@
+
+/*
+ * $Id$
+ */
+
+#ifndef SQUID_ECAP_SERVICE_REP_H
+#define SQUID_ECAP_SERVICE_REP_H
+
+#include "adaptation/Service.h"
+#include "adaptation/forward.h"
+#include <libecap/common/forward.h>
+#include <libecap/common/memory.h>
+
+namespace Ecap {
+
+/* The eCAP service representative maintains information about a single eCAP
+   service that Squid communicates with. One eCAP module may register many 
+   eCAP services. */
+
+class ServiceRep : public Adaptation::Service
+{
+public:
+    ServiceRep(const Adaptation::ServiceConfig &config);
+    virtual ~ServiceRep();
+
+	typedef libecap::shared_ptr<libecap::adapter::Service> AdapterService;
+	void noteService(const AdapterService &s);
+
+    virtual void finalize();
+
+    // call when the service is no longer needed or valid
+    virtual void invalidate();
+
+    virtual bool probed() const;
+    virtual bool up() const;
+
+    Adaptation::Initiate *makeXactLauncher(Adaptation::Initiator *, HttpMsg *virginHeader, HttpRequest *virginCause);
+
+    // the methods below can only be called on an up() service
+    virtual bool wantsUrl(const String &urlPath) const;
+
+    // called by transactions to report service failure
+    virtual void noteFailure();
+
+	virtual const char *status() const;
+
+private:
+	AdapterService theService; // the actual adaptation service we represent
+};
+
+} // namespace Ecap
+
+#endif /* SQUID_ECAP_SERVICE_REP_H */
@@ -0,0 +1,164 @@
+#include "squid.h"
+#include <libecap/adapter/xaction.h>
+#include "TextException.h"
+#include "assert.h"
+#include "HttpRequest.h"
+#include "HttpReply.h"
+#include "eCAP/XactionRep.h"
+
+// CBDATA_CLASS_INIT(Ecap::XactionRep);
+// TODO: add CBDATA_NAMESPACED_CLASS_INIT(namespace, classname)
+cbdata_type Ecap::XactionRep::CBDATA_XactionRep = CBDATA_UNKNOWN;
+
+
+Ecap::XactionRep::XactionRep(Adaptation::Initiator *anInitiator,
+    HttpMsg *virginHeader, HttpRequest *virginCause,
+    const Adaptation::ServicePointer &aService):
+    AsyncJob("Ecap::XactionRep"),
+    Adaptation::Initiate("Ecap::XactionRep", anInitiator, aService),
+    theVirgin(virginHeader), theCause(virginCause),
+    theVirginTranslator(theVirgin), theCauseTranslator(theCause),
+    theAnswerTranslator(theAnswer)
+{
+}
+
+Ecap::XactionRep::~XactionRep()
+{
+    assert(!theMaster);
+}
+
+void
+Ecap::XactionRep::master(const AdapterXaction &x)
+{
+    Must(!theMaster);
+    Must(x != NULL);
+    theMaster = x;
+}
+
+void
+Ecap::XactionRep::start()
+{
+    Must(theMaster);
+    theMaster->start();
+}
+
+void
+Ecap::XactionRep::swangSong()
+{
+    terminateMaster();
+    Adaptation::Initiate::swanSong();
+}
+
+void
+Ecap::XactionRep::terminateMaster()
+{
+    if (theMaster) {
+        AdapterXaction x = theMaster;
+        theMaster.reset();
+        x->stop();
+	}
+}
+
+libecap::Message &
+Ecap::XactionRep::virginMessage()
+{
+    return theVirginTranslator;
+}
+
+libecap::Message &
+Ecap::XactionRep::virginCause()
+{
+    return theCauseTranslator;
+}
+
+void 
+Ecap::XactionRep::useVirgin()
+{
+    theMaster.reset();
+    theVirgin.copyTo(theAnswer);
+    sendAnswer(theAnswer.header);
+}
+
+void 
+Ecap::XactionRep::cloneVirgin()
+{
+    theVirgin.copyTo(theAnswer);
+}
+
+void 
+Ecap::XactionRep::makeAdaptedRequest()
+{
+    theAnswer.set(new HttpRequest);
+}
+
+void 
+Ecap::XactionRep::makeAdaptedResponse()
+{
+    theAnswer.set(new HttpReply);
+}
+
+libecap::Message &
+Ecap::XactionRep::adaptedMessage()
+{
+    return theAnswerTranslator;
+}
+
+void 
+Ecap::XactionRep::useAdapted()
+{
+    theMaster.reset();
+    sendAnswer(theAnswer.header);
+}
+
+void 
+Ecap::XactionRep::useNone()
+{
+    theMaster.reset();
+    tellQueryAborted(true); // should eCAP support retries?
+}
+
+void 
+Ecap::XactionRep::noteMoreBodySpaceAvailable(RefCount<BodyPipe> bp)
+{
+    Must(theMaster);
+    theMaster->noteAdaptedSpaceAvailable();
+}
+
+void 
+Ecap::XactionRep::noteBodyConsumerAborted(RefCount<BodyPipe> bp)
+{
+    Must(theMaster);
+    theMaster->noteAdaptedAborted();
+}
+
+void
+Ecap::XactionRep::noteMoreBodyDataAvailable(RefCount<BodyPipe> bp)
+{
+    Must(theMaster);
+    theMaster->noteVirginDataAvailable();
+}
+
+void
+Ecap::XactionRep::noteBodyProductionEnded(RefCount<BodyPipe> bp)
+{
+    Must(theMaster);
+    theMaster->noteVirginDataEnded();
+}
+
+void
+Ecap::XactionRep::noteBodyProducerAborted(RefCount<BodyPipe> bp)
+{
+    Must(theMaster);
+    theMaster->noteVirginAborted();
+}
+
+void
+Ecap::XactionRep::noteInitiatorAborted()
+{
+    mustStop("initiator aborted");
+}
+
+const char *Ecap::XactionRep::status() const
+{
+	return Adaptation::Initiate::status();
+}
@@ -0,0 +1,80 @@
+
+/*
+ * $Id$
+ */
+
+#ifndef SQUID_ECAP_XACTION_REP_H
+#define SQUID_ECAP_XACTION_REP_H
+
+#include "BodyPipe.h"
+#include "adaptation/Initiate.h"
+#include "adaptation/Service.h"
+#include "adaptation/Message.h"
+#include "eCAP/MessageTranslator.h"
+#include <libecap/common/forward.h>
+#include <libecap/common/memory.h>
+#include <libecap/host/xaction.h>
+#include <libecap/adapter/xaction.h>
+
+namespace Ecap {
+
+/* The eCAP xaction representative maintains information about a single eCAP
+   xaction that Squid communicates with. One eCAP module may register many 
+   eCAP xactions. */
+class XactionRep : public Adaptation::Initiate, public libecap::host::Xaction,
+    public BodyProducer, public BodyConsumer
+{
+public:
+    XactionRep(Adaptation::Initiator *anInitiator, HttpMsg *virginHeader, HttpRequest *virginCause, const Adaptation::ServicePointer &service);
+    virtual ~XactionRep();
+
+	typedef libecap::shared_ptr<libecap::adapter::Xaction> AdapterXaction;
+	void master(const AdapterXaction &aMaster); // establish a link
+
+    // libecap::host::Xaction API
+    virtual libecap::Message &virginMessage() ; // request or response
+    virtual libecap::Message &virginCause() ; // request for the above response
+    virtual void useVirgin() ;  // final answer: no adaptation
+    virtual void cloneVirgin() ; // adapted message starts as virgin
+    virtual void makeAdaptedRequest() ; // make fresh adapted request
+    virtual void makeAdaptedResponse() ; // make fresh adapted response
+    virtual libecap::Message &adaptedMessage() ; // request or response
+    virtual void useAdapted() ; // final answer: adapted msg is ready
+    virtual void useNone() ; // final answer: no answer
+
+    // BodyProducer API
+    virtual void noteMoreBodySpaceAvailable(RefCount<BodyPipe> bp);
+    virtual void noteBodyConsumerAborted(RefCount<BodyPipe> bp);
+
+    // BodyConsumer API
+    virtual void noteMoreBodyDataAvailable(RefCount<BodyPipe> bp);
+    virtual void noteBodyProductionEnded(RefCount<BodyPipe> bp);
+    virtual void noteBodyProducerAborted(RefCount<BodyPipe> bp);
+
+    //  Initiate API
+    virtual void noteInitiatorAborted();
+
+    // AsyncJob API (via Initiate)
+    virtual void start();
+    virtual void swangSong();
+    virtual const char *status() const;
+
+protected:
+    void terminateMaster();
+
+private:
+	AdapterXaction theMaster; // the actual adaptation xaction we represent
+
+	Adaptation::Message theVirgin;
+	Adaptation::Message theCause;
+	Adaptation::Message theAnswer;
+	MessageTranslator theVirginTranslator;
+	MessageTranslator theCauseTranslator;
+	MessageTranslator theAnswerTranslator;
+
+	CBDATA_CLASS2(XactionRep);
+};
+
+} // namespace Ecap
+
+#endif /* SQUID_ECAP_XACTION_REP_H */
@@ -69,6 +69,7 @@
 #include "forward.h"
 #include "MemPool.h"
 #include "ICMPSquid.h"
+#include "TextException.h"
 
 #if USE_LOADABLE_MODULES
 #include "LoadableModules.h"
@@ -77,6 +78,9 @@
 #if ICAP_CLIENT
 #include "ICAP/ICAPConfig.h"
 #endif
+#if USE_ECAP
+#include "eCAP/Config.h"
+#endif
 #if USE_ADAPTATION
 #include "adaptation/Config.h"
 #endif
@@ -1099,11 +1103,13 @@ mainInitialize(void)
     // We can remove this dependency on specific adaptation mechanisms
     // if we create a generic Registry of such mechanisms. Should we?
 #if ICAP_CLIENT
-    TheICAPConfig.finalize(); // must be after we load modules
-    enableAdaptation = TheICAPConfig.onoff;
+    TheICAPConfig.finalize();
+    enableAdaptation = TheICAPConfig.onoff || enableAdaptation;
+#endif
+#if USE_ECAP
+    Ecap::TheConfig.finalize(); // must be after we load modules
+    enableAdaptation = Ecap::TheConfig.onoff || enableAdaptation;
 #endif
-    // same for eCAP
-
     // must be the last adaptation-related finalize
     Adaptation::Config::Finalize(enableAdaptation);
 #endif
@@ -1135,20 +1141,39 @@ mainInitialize(void)
     configured_once = 1;
 }
 
+static int SquidMain(int argc, char **argv);
+static int SquidMainSafe(int argc, char **argv);
+
 #if USE_WIN32_SERVICE
 /* When USE_WIN32_SERVICE is defined, the main function is placed in win32.cc */
 extern "C" void WINAPI
     SquidWinSvcMain(int argc, char **argv)
-{
-    SquidMain(argc, argv);
-}
-
-int
-SquidMain(int argc, char **argv)
 #else
 int
 main(int argc, char **argv)
 #endif
+{
+    SquidMainSafe(argc, argv);
+}
+
+static int
+SquidMainSafe(int argc, char **argv)
+{
+    try {
+        return SquidMain(argc, argv);
+	}
+    catch (const TextException &e) {
+		// XXX: add TextException::print
+        std::cerr << "dying from unhandled exception: " << e.message << std::endl;
+	}
+    catch (...) {
+        std::cerr << "dying from unhandled exception." << std::endl;
+	}
+	return -1;
+}
+
+static int
+SquidMain(int argc, char **argv)
 {
     mode_t oldmask;
 #ifdef _SQUID_WIN32_