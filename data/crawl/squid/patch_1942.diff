@@ -1,6 +1,6 @@
 
 /*
- * $Id: cachemgr.cc,v 1.31 1996/10/07 14:59:30 wessels Exp $
+ * $Id: cachemgr.cc,v 1.32 1996/10/07 15:04:46 wessels Exp $
  *
  * DEBUG: Section 0     CGI Cache Manager
  * AUTHOR: Harvest Derived
@@ -207,8 +207,10 @@
 #define TRUE 1
 #endif
 
+#if 0
 #define LF 10
 #define CR 13
+#endif
 
 #ifndef INADDR_NONE
 #define INADDR_NONE -1
@@ -256,17 +258,37 @@ static char *op_cmds[] =
     "stats/reply_headers",
     "stats/filedescriptors",
     "shutdown",
-    "<refresh>",
+    "refresh",
 #ifdef REMOVE_OBJECT
-    "<remove>",
+    "remove",
 #endif
-    "<maxop>"
+    "unknown"
 };
 
-typedef struct {
-    char *name;
-    char *val;
-} entry;
+static char *op_cmds_descr[] =
+{
+    "Cache Information",
+    "Cache Configuration File",
+    "Cache Server List",
+    "Cache Log",
+    "Cache Parameters",
+    "IP Cache Contents",
+    "FQDN Cache Contents",
+    "DNS Server Statistics",
+    "Redirector Statistics",
+    "Objects",
+    "VM Objects",
+    "Utilization",
+    "I/O",
+    "HTTP Reply Headers",
+    "Filedescriptor Usage",
+    "Shutdown Cache (password required)",
+    "Refresh Object (URL required)",
+#ifdef REMOVE_OBJECT
+    "Remove Object (URL required)",
+#endif
+    "Unknown Operation"
+};
 
 int hasTables = FALSE;
 
@@ -292,49 +314,61 @@ print_trailer(void)
     printf("</ADDRESS></BODY></HTML>\n");
 }
 
+
+static void
+print_option(op_t current_opt, op_t opt_nr)
+{
+    printf("<OPTION%sVALUE=\"%s\">%s\n",
+	current_opt == opt_nr ? " SELECTED " : " ",
+	op_cmds[opt_nr],
+	op_cmds_descr[opt_nr]);
+}
+
+
 void
-noargs_html(char *host, int port)
+noargs_html(char *host, int port, char *url)
 {
+    op_t op = INFO;
+
     printf("\r\n\r\n");
     printf("<HTML><HEAD><TITLE>Cache Manager Interface</TITLE></HEAD>\n");
     printf("<BODY><H1>Cache Manager Interface</H1>\n");
-    printf("<p>This is a WWW interface to the instrumentation interface\n");
-    printf("for the Squid object cache.</p>\n");
+    printf("<P>This is a WWW interface to the instrumentation interface\n");
+    printf("for the Squid object cache.</P>\n");
     printf("<HR>\n");
     printf("<PRE>\n");
-    printf("<FORM METHOD=\"POST\" ACTION=\"%s?%s:%d\">\n",
-	script_name, host, port);
+    printf("<FORM METHOD=\"POST\" ACTION=\"%s\">\n", script_name);
     printf("<STRONG>Cache Host:</STRONG><INPUT NAME=\"host\" ");
-    printf("SIZE=30 VALUE=\"%s\"><BR>\n", CACHEMGR_HOSTNAME);
+    printf("SIZE=30 VALUE=\"%s\"><BR>\n", host);
     printf("<STRONG>Cache Port:</STRONG><INPUT NAME=\"port\" ");
-    printf("SIZE=30 VALUE=\"%d\"><BR>\n", CACHE_HTTP_PORT);
+    printf("SIZE=30 VALUE=\"%d\"><BR>\n", port);
     printf("<STRONG>Password  :</STRONG><INPUT TYPE=\"password\" ");
     printf("NAME=\"password\" SIZE=30 VALUE=\"\"><BR>\n");
     printf("<STRONG>URL       :</STRONG><INPUT NAME=\"url\" ");
-    printf("SIZE=30 VALUE=\"\"><BR>\n");
+    printf("SIZE=30 VALUE=\"%s\"><BR>\n", url);
     printf("<STRONG>Operation :</STRONG>");
     printf("<SELECT NAME=\"operation\">\n");
-    printf("<OPTION SELECTED VALUE=\"info\">Cache Information\n");
-    printf("<OPTION VALUE=\"squid.conf\">Cache Configuration File\n");
-    printf("<OPTION VALUE=\"parameter\">Cache Parameters\n");
+    print_option(op, INFO);
+    print_option(op, CACHED);
+    print_option(op, PARAM);
 #ifdef MENU_SHOW_LOG
-    printf("<OPTION VALUE=\"log\">Cache Log\n");
-#endif
-    printf("<OPTION VALUE=\"stats/utilization\">Utilization\n");
-    printf("<OPTION VALUE=\"stats/io\">I/O\n");
-    printf("<OPTION VALUE=\"stats/reply_headers\">HTTP Reply Headers\n");
-    printf("<OPTION VALUE=\"stats/filedescriptors\">Filedescriptor Usage\n");
-    printf("<OPTION VALUE=\"stats/objects\">Objects\n");
-    printf("<OPTION VALUE=\"stats/vm_objects\">VM_Objects\n");
-    printf("<OPTION VALUE=\"server_list\">Cache Server List\n");
-    printf("<OPTION VALUE=\"stats/ipcache\">IP Cache Contents\n");
-    printf("<OPTION VALUE=\"stats/fqdncache\">FQDN Cache Contents\n");
-    printf("<OPTION VALUE=\"stats/dns\">DNS Server Statistics\n");
-    printf("<OPTION VALUE=\"stats/redirector\">Redirector Statistics\n");
-    printf("<OPTION VALUE=\"shutdown\">Shutdown Cache (password required)\n");
-    printf("<OPTION VALUE=\"refresh\">Refresh Object (URL required)\n");
+    print_option(op, LOG);
+#endif
+    print_option(op, STATS_U);
+    print_option(op, STATS_IO);
+    print_option(op, STATS_HDRS);
+    print_option(op, STATS_FDS);
+    print_option(op, STATS_O);
+    print_option(op, STATS_VM);
+    print_option(op, SERVER);
+    print_option(op, STATS_I);
+    print_option(op, STATS_F);
+    print_option(op, STATS_D);
+    print_option(op, STATS_R);
+    print_option(op, SHUTDOWN);
+    print_option(op, REFRESH);
 #ifdef REMOVE_OBJECT
-    printf("<OPTION VALUE=\"remove\">Remove Object (URL required)\n");
+    print_option(op, REMOVE);
 #endif
     printf("</SELECT><BR>\n");
     printf("<HR>\n");
@@ -343,6 +377,7 @@ noargs_html(char *host, int port)
     print_trailer();
 }
 
+#if 0
 /* A utility function from the NCSA httpd cgi-src utils.c */
 char *
 makeword(char *line, char stop)
@@ -389,6 +424,7 @@ fmakeword(FILE * f, char stop, int *cl)
     }
     /* NOTREACHED */
 }
+#endif
 
 /* A utility function from the NCSA httpd cgi-src utils.c */
 char
@@ -509,29 +545,24 @@ parse_object(char *string)
 int
 main(int argc, char *argv[])
 {
-    static char hostname[256];
-    static char operation[256];
-    static char password[256];
-    static char url[4096];
+    static char hostname[256] = "";
+    static char operation[256] = "";
+    static char password[256] = "";
+    static char url[4096] = "";
     static char msg[1024];
     static char buf[4096];
     static char reserve[4096];
     static char s1[255];
     static char s2[255];
+    char *buffer = NULL;
     char *time_string = NULL;
     char *agent = NULL;
     char *s = NULL;
-    char *qs = NULL;
-    char query_host[256];
-    int query_port;
-    int got_data = 0;
-    int x;
-    int cl;
     int conn;
     int len;
     int bytesWritten;
     int portnum = CACHE_HTTP_PORT;
-    int op = 0;
+    op_t op;
     int p_state;
     int n_loops;
     int cpy_ind;
@@ -542,140 +573,102 @@ main(int argc, char *argv[])
     int single = TRUE;
     float f1;
     time_t time_val;
-    entry entries[MAX_ENTRIES];
 
     if ((s = strrchr(argv[0], '/')))
 	progname = strdup(s + 1);
     else
 	progname = strdup(argv[0]);
-
-    if ((qs = getenv("QUERY_STRING")) != NULL) {
-	s = strchr(qs, ':');	/* A colon separates the port from the host */
-	if (s != NULL)
-	    query_port = atoi(s + 1);	/* port */
-	else {
-	    query_port = CACHE_HTTP_PORT;	/* Assume the default */
-	    s = qs + strlen(qs);
-	}
-	strncpy(query_host, qs, (s - qs));	/* host */
-	query_host[s - qs] = '\0';
-    } else {			/* Use the defaults */
-	strcpy(query_host, CACHEMGR_HOSTNAME);
-	query_port = CACHE_HTTP_PORT;
-    }
-
     if ((s = getenv("SCRIPT_NAME")) != NULL) {
 	script_name = strdup(s);
     }
+    strcpy(hostname, CACHEMGR_HOSTNAME);
+
+    /* a POST request */
+    if ((s = getenv("REQUEST_METHOD")) && !strcasecmp(s, "POST") &&
+	(s = getenv("CONTENT_LENGTH")) && (len = atoi(s)) > 0) {
+	buffer = xmalloc(len + 1);
+	fread(buffer, len, 1, stdin);
+	buffer[len] = '\0';
+	/* a GET request */
+    } else if ((s = getenv("QUERY_STRING"))) {
+	/* convert hostname:portnum to host=hostname&port=portnum */
+	if (*s && !strchr(s, '=') && !strchr(s, '&')) {
+	    char *p;
+	    buffer = xmalloc(strlen(s) + sizeof "host=&port=");
+	    if ((p = strchr(s, ':')))
+		if (p != s) {
+		    *p = '\0';
+		    sprintf(buffer, "host=%s&port=%s", s, p + 1);
+		} else {
+		    sprintf(buffer, "port=%s", p + 1);
+	    } else
+		sprintf(buffer, "host=%s", s);
+	} else {
+	    buffer = xstrdup(s);
+	}
+	/* no CGI parameters */
+    } else {
+	buffer = xstrdup("");
+    }
+
     printf("Content-type: text/html\r\n\r\n");
+
+    for (s = strtok(buffer, "&"); s; s = strtok(0, "&")) {
+	char *v;
+
+	plustospace(s);
+	unescape_url(s);
+	if (v = strchr(s, '='))
+	    *v++ = '\0';
+	else
+	    v = s;
+
+	if (!strcmp(s, "host")) {
+	    strncpy(hostname, v, sizeof hostname);
+	    hostname[sizeof hostname - 1] = '\0';
+	} else if (!strcmp(s, "operation")) {
+	    strncpy(operation, v, sizeof operation);
+	    operation[sizeof operation - 1] = '\0';
+	} else if (!strcmp(s, "password")) {
+	    strncpy(password, v, sizeof password);
+	    password[sizeof password - 1] = '\0';
+	} else if (!strcmp(s, "url")) {
+	    strncpy(url, v, sizeof url);
+	    url[sizeof url - 1] = '\0';
+	} else if (!strcmp(s, "port")) {
+	    portnum = atoi(v);
+	} else {
+	    printf("<P><STRONG>Unknown CGI parameter: %s</STRONG></P>\n",
+		s);
+	    noargs_html(hostname, portnum, url);
+	    exit(0);
+	}
+    }
+    xfree(buffer);
+
     if ((agent = getenv("HTTP_USER_AGENT")) != NULL) {
 	if (!strncasecmp(agent, "Mozilla", 7) ||
 	    !strncasecmp(agent, "OmniWeb/2", 9) ||
 	    !strncasecmp(agent, "Netscape", 8)) {
 	    hasTables = TRUE;
 	}
     }
-    hostname[0] = '\0';
-    if ((s = getenv("CONTENT_LENGTH")) == NULL) {
-	noargs_html(query_host, query_port);
-	exit(0);
-    }
-    cl = atoi(s);
-    password[0] = url[0] = '\0';
-    for (x = 0; cl && (!feof(stdin)); x++) {
-	got_data = 1;
-	entries[x].val = fmakeword(stdin, '&', &cl);
-	plustospace(entries[x].val);
-	unescape_url(entries[x].val);
-	entries[x].name = makeword(entries[x].val, '=');
-	if (!strncmp(entries[x].name, "host", 4))
-	    strncpy(hostname, entries[x].val, 256);
-	else if (!strncmp(entries[x].name, "operation", 7))
-	    strncpy(operation, entries[x].val, 256);
-	else if (!strncmp(entries[x].name, "password", 8))
-	    strncpy(password, entries[x].val, 256);
-	else if (!strncmp(entries[x].name, "url", 3))
-	    strncpy(url, entries[x].val, 4096);
-	else if (!strncmp(entries[x].name, "port", 4))
-	    portnum = atoi(entries[x].val);
-	else {
-	    printf("<P><STRONG>Unknown CGI parameter: %s</STRONG></P>\n",
-		entries[x].name);
-	    noargs_html(query_host, query_port);
-	    exit(0);
-	}
-    }
-    if (!got_data) {		/* prints HTML form if no args */
-	noargs_html(query_host, query_port);
+    if (!operation[0] || !strcmp(operation, "empty")) {		/* prints HTML form if no args */
+	noargs_html(hostname, portnum, url);
 	exit(0);
     }
     if (hostname[0] == '\0') {
 	printf("<H1>ERROR</H1>\n");
 	printf("<P><STRONG>You must provide a hostname!\n</STRONG></P><HR>");
-	noargs_html(query_host, query_port);
+	noargs_html(hostname, portnum, url);
 	exit(0);
     }
     close(0);
 
-    if (!strcmp(operation, "info") ||
-	!strcmp(operation, "Cache Information")) {
-	op = INFO;
-    } else if (!strcmp(operation, "squid.conf") ||
-	!strcmp(operation, "Cache Configuration File")) {
-	op = CACHED;
-    } else if (!strcmp(operation, "server_list") ||
-	!strcmp(operation, "Cache Server List")) {
-	op = SERVER;
-#ifdef MENU_SHOW_LOG
-    } else if (!strcmp(operation, "log") ||
-	!strcmp(operation, "Cache Log")) {
-	op = LOG;
-#endif
-    } else if (!strcmp(operation, "parameter") ||
-	!strcmp(operation, "Cache Parameters")) {
-	op = PARAM;
-    } else if (!strcmp(operation, "stats/ipcache") ||
-	!strcmp(operation, "IP Cache")) {
-	op = STATS_I;
-    } else if (!strcmp(operation, "stats/fqdncache") ||
-	!strcmp(operation, "FQDN Cache")) {
-	op = STATS_F;
-    } else if (!strcmp(operation, "stats/dns") ||
-	!strcmp(operation, "DNS Server Stats")) {
-	op = STATS_D;
-    } else if (!strcmp(operation, "stats/redirector") ||
-	!strcmp(operation, "Redirection Server Stats")) {
-	op = STATS_R;
-    } else if (!strcmp(operation, "stats/vm_objects") ||
-	!strcmp(operation, "VM_Objects")) {
-	op = STATS_VM;
-    } else if (!strcmp(operation, "stats/objects") ||
-	!strcmp(operation, "Objects")) {
-	op = STATS_O;
-    } else if (!strcmp(operation, "stats/utilization") ||
-	!strcmp(operation, "Utilization")) {
-	op = STATS_U;
-    } else if (!strcmp(operation, "stats/io") ||
-	!strcmp(operation, "I/O")) {
-	op = STATS_IO;
-    } else if (!strcmp(operation, "stats/reply_headers") ||
-	!strcmp(operation, "Reply Headers")) {
-	op = STATS_HDRS;
-    } else if (!strcmp(operation, "stats/filedescriptors") ||
-	!strcmp(operation, "Filedescriptor")) {
-	op = STATS_FDS;
-    } else if (!strcmp(operation, "shutdown")) {
-	op = SHUTDOWN;
-    } else if (!strcmp(operation, "refresh")) {
-	op = REFRESH;
-#ifdef REMOVE_OBJECT
-    } else if (!strcmp(operation, "remove")) {
-	op = REMOVE;
-#endif
-    } else {
-	printf("Unknown operation: %s\n", operation);
-	exit(0);
-    }
+    for (op = INFO; op != MAXOP; op = (op_t) (op + 1))
+	if (!strcmp(operation, op_cmds[op]) ||
+	    !strcmp(operation, op_cmds_descr[op]))
+	    break;
 
     switch (op) {
     case INFO:
@@ -721,40 +714,37 @@ main(int argc, char *argv[])
 
     printf("<HTML><HEAD><TITLE>Cache Manager: %s:%s:%d</TITLE></HEAD>\n",
 	operation, hostname, portnum);
-    printf("<BODY><FORM METHOD=\"POST\" ACTION=\"%s?%s:%d\">\n",
-	script_name, query_host, query_port);
+    printf("<BODY><FORM METHOD=\"POST\" ACTION=\"%s\">\n", script_name);
     printf("<INPUT TYPE=\"submit\" VALUE=\"Refresh\">\n");
     printf("<SELECT NAME=\"operation\">\n");
-    printf("<OPTION SELECTED VALUE=\"%s\">Current\n", operation);
-    printf("<OPTION VALUE=\"info\">Cache Information\n");
-    printf("<OPTION VALUE=\"squid.conf\">Cache Configuration File\n");
-    printf("<OPTION VALUE=\"parameter\">Cache Parameters\n");
+    printf("<OPTION VALUE=\"empty\">Empty Form\n");
+    print_option(op, INFO);
+    print_option(op, CACHED);
+    print_option(op, PARAM);
 #ifdef MENU_SHOW_LOG
-    printf("<OPTION VALUE=\"log\">Cache Log\n");
-#endif
-    printf("<OPTION VALUE=\"stats/utilization\">Utilization\n");
-    printf("<OPTION VALUE=\"stats/io\">I/O\n");
-    printf("<OPTION VALUE=\"stats/reply_headers\">HTTP Reply Headers\n");
-    printf("<OPTION VALUE=\"stats/filedescriptors\">Filedescriptor Usage\n");
-    printf("<OPTION VALUE=\"stats/objects\">Objects\n");
-    printf("<OPTION VALUE=\"stats/vm_objects\">VM_Objects\n");
-    printf("<OPTION VALUE=\"server_list\">Cache Server List\n");
-    printf("<OPTION VALUE=\"stats/ipcache\">IP Cache Contents\n");
-    printf("<OPTION VALUE=\"stats/fqdncache\">FQDN Cache Contents\n");
-    printf("<OPTION VALUE=\"stats/dns\">DNS Server Statistics\n");
-    printf("<OPTION VALUE=\"stats/redirector\">Redirector Statistics\n");
-    printf("</SELECT>");
+    print_option(op, LOG);
+#endif
+    print_option(op, STATS_U);
+    print_option(op, STATS_IO);
+    print_option(op, STATS_HDRS);
+    print_option(op, STATS_FDS);
+    print_option(op, STATS_O);
+    print_option(op, STATS_VM);
+    print_option(op, SERVER);
+    print_option(op, STATS_I);
+    print_option(op, STATS_F);
+    print_option(op, STATS_D);
+    print_option(op, STATS_R);
+    printf("</SELECT>\n");
     printf("<INPUT TYPE=\"hidden\" NAME=\"host\" VALUE=\"%s\">\n", hostname);
     printf("<INPUT TYPE=\"hidden\" NAME=\"port\" VALUE=\"%d\">\n", portnum);
     printf("<INPUT TYPE=\"hidden\" NAME=\"password\" VALUE=\"NOT_PERMITTED\">\n");
-    printf("</FORM>");
-    printf("<p><em><A HREF=\"%s?%s:%d\">Empty form</A></em></p>\n", script_name,
-	query_host, query_port);
+    printf("<INPUT TYPE=\"hidden\" NAME=\"url\" VALUE=\"%s\">\n", url);
+    printf("</FORM>\n");
     printf("<HR>\n");
 
-    printf("<H1>%s:  %s:%d</H1>\n", operation,
-	hostname, portnum);
-    printf("<p>dated %s</p>\n", time_string);
+    printf("<H1>%s:  %s:%d</H1>\n", operation, hostname, portnum);
+    printf("<P>dated %s</P>\n", time_string);
     printf("<PRE>\n");
 
     /* Connect to the server */