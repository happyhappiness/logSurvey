@@ -109,13 +109,6 @@ MemStore::maxObjectSize() const
     return Ipc::Mem::PageSize();
 }
 
-void
-MemStore::updateSize(int64_t eSize, int sign)
-{
-    // XXX: irrelevant, but Store parent forces us to implement this
-    fatal("MemStore::updateSize should not be called");
-}
-
 void
 MemStore::reference(StoreEntry &)
 {
@@ -41,7 +41,6 @@ class MemStore: public Store, public Ipc::StoreMapCleaner {
     virtual void reference(StoreEntry &);
     virtual void dereference(StoreEntry &);
     virtual void maintain();
-    virtual void updateSize(int64_t size, int sign);
 
     static int64_t EntryLimit();
 
@@ -336,9 +336,6 @@ class Store : public RefCountable
     /// called when the entry is no longer needed by any transaction
     virtual void handleIdleEntry(StoreEntry &e) {}
 
-    /* These should really be private */
-    virtual void updateSize(int64_t size, int sign) = 0;
-
 private:
     static RefCount<Store> CurrentRoot;
 };
@@ -81,8 +81,6 @@ class StoreHashIndex : public Store
 
     virtual void maintain();
 
-    virtual void updateSize(int64_t, int);
-
     virtual StoreSearch *search(String const url, HttpRequest *);
 
 private:
@@ -85,8 +85,6 @@ class StoreController : public Store
 
     virtual void dereference(StoreEntry &);	/* Unreference this object */
 
-    virtual void updateSize(int64_t size, int sign);
-
     /* the number of store dirs being rebuilt. */
     static int store_dirs_rebuilding;
 
@@ -163,6 +161,9 @@ class SwapDir : public Store
     /// called when the entry is about to forget its association with cache_dir
     virtual void disconnect(StoreEntry &) {}
 
+    /// called when entry swap out is complete
+    virtual void swappedOut(const StoreEntry &e) = 0;
+
 protected:
     void parseOptions(int reconfiguring);
     void dumpOptions(StoreEntry * e) const;
@@ -49,6 +49,7 @@ class CossSwapDir : public SwapDir, public IORequestor
     virtual void logEntry(const StoreEntry & e, int op) const;
     virtual void parse (int index, char *path);
     virtual void reconfigure (int, char *);
+    virtual void swappedOut(const StoreEntry &e);
     /* internals */
     virtual off_t storeCossFilenoToDiskOffset(sfileno);
     virtual sfileno storeCossDiskOffsetToFileno(off_t);
@@ -539,6 +539,7 @@ storeCossAddDiskRestore(CossSwapDir * SD, const cache_key * key,
     EBIT_CLR(e->flags, KEY_PRIVATE);
     e->ping_status = PING_NONE;
     EBIT_CLR(e->flags, ENTRY_VALIDATED);
+    SD->updateSize(e->swap_file_sz, 1);
     e->hashInsert(key);	/* do it after we clear KEY_PRIVATE */
     storeCossAdd(SD, e);
     assert(e->swap_filen >= 0);
@@ -1079,6 +1080,12 @@ CossSwapDir::reconfigure(int index, char *path)
         fatal("COSS requires max-size to be set to something other than -1!\n");
 }
 
+void
+CossSwapDir::swappedOut(const StoreEntry &e)
+{
+    updateSize(e.swap_file_sz, 1);
+}
+
 void
 CossSwapDir::dump(StoreEntry &entry)const
 {
@@ -134,6 +134,8 @@ void
 CossSwapDir::unlink(StoreEntry & e)
 {
     debugs(79, 3, "storeCossUnlink: offset " << e.swap_filen);
+    if (e.swap_status == SWAPOUT_DONE && EBIT_TEST(e.flags, ENTRY_VALIDATED))
+        updateSize(e.swap_file_sz, -1);
     StoreFScoss::GetInstance().stats.unlink.ops++;
     StoreFScoss::GetInstance().stats.unlink.success++;
     storeCossRemove(this, &e);
@@ -117,6 +117,12 @@ Rock::SwapDir::doReportStat() const
     return ::SwapDir::doReportStat() && (!UsingSmp() || IamDiskProcess());
 }
 
+void
+Rock::SwapDir::swappedOut(const StoreEntry &)
+{
+    // stats are not stored but computed when needed
+}
+
 int64_t
 Rock::SwapDir::entryLimitAllowed() const
 {
@@ -535,12 +541,6 @@ Rock::SwapDir::full() const
     return map && map->full();
 }
 
-void
-Rock::SwapDir::updateSize(int64_t size, int sign)
-{
-    // stats are not stored but computed when needed
-}
-
 // storeSwapOutFileClosed calls this nethod on DISK_NO_SPACE_LEFT,
 // but it should not happen for us
 void
@@ -30,6 +30,7 @@ class SwapDir: public ::SwapDir, public IORequestor
     virtual uint64_t currentSize() const;
     virtual uint64_t currentCount() const;
     virtual bool doReportStat() const;
+    virtual void swappedOut(const StoreEntry &e);
 
     int64_t entryLimitHigh() const { return 0xFFFFFF; } /// Core sfileno maximum
     int64_t entryLimitAllowed() const;
@@ -48,7 +49,6 @@ class SwapDir: public ::SwapDir, public IORequestor
     virtual StoreIOState::Pointer createStoreIO(StoreEntry &, StoreIOState::STFNCB *, StoreIOState::STIOCB *, void *);
     virtual StoreIOState::Pointer openStoreIO(StoreEntry &, StoreIOState::STFNCB *, StoreIOState::STIOCB *, void *);
     virtual void maintain();
-    virtual void updateSize(int64_t size, int sign);
     virtual void diskFull();
     virtual void reference(StoreEntry &e);
     virtual void dereference(StoreEntry &e);
@@ -718,6 +718,7 @@ UFSSwapDir::addDiskRestore(const cache_key * key,
     e->ping_status = PING_NONE;
     EBIT_CLR(e->flags, ENTRY_VALIDATED);
     mapBitSet(e->swap_filen);
+    updateSize(e->swap_file_sz, 1);
     e->hashInsert(key);	/* do it after we clear KEY_PRIVATE */
     replacementAdd (e);
     return e;
@@ -1289,6 +1290,8 @@ UFSSwapDir::unlink(StoreEntry & e)
 {
     debugs(79, 3, "storeUfsUnlink: dirno " << index  << ", fileno "<<
            std::setfill('0') << std::hex << std::uppercase << std::setw(8) << e.swap_filen);
+    if (e.swap_status == SWAPOUT_DONE && EBIT_TEST(e.flags, ENTRY_VALIDATED))
+        updateSize(e.swap_file_sz, -1);
     replacementRemove(&e);
     mapBitReset(e.swap_filen);
     UFSSwapDir::unlinkFile(e.swap_filen);
@@ -1364,6 +1367,12 @@ UFSSwapDir::sync()
     IO->sync();
 }
 
+void
+UFSSwapDir::swappedOut(const StoreEntry &e)
+{
+    updateSize(e.swap_file_sz, 1);
+}
+
 StoreSearch *
 UFSSwapDir::search(String const url, HttpRequest *request)
 {
@@ -76,6 +76,7 @@ class UFSSwapDir : public SwapDir
     virtual void reconfigure(int, char *);
     virtual int callback();
     virtual void sync();
+    virtual void swappedOut(const StoreEntry &e);
 
     void unlinkFile(sfileno f);
     // move down when unlink is a virtual method
@@ -1288,13 +1288,6 @@ StoreEntry::release()
     storeLog(STORE_LOG_RELEASE, this);
 
     if (swap_filen > -1) {
-
-        // update size before unlink() below clears swap_status
-        // TODO: the store/SwapDir::unlink should update the size!
-        if (swap_status == SWAPOUT_DONE)
-            if (EBIT_TEST(flags, ENTRY_VALIDATED))
-                store()->updateSize(swap_file_sz, -1);
-
         // log before unlink() below clears swap_filen
         if (!EBIT_TEST(flags, KEY_PRIVATE))
             storeDirSwapLog(this, SWAP_LOG_DEL);
@@ -323,12 +323,6 @@ storeDirSwapLog(const StoreEntry * e, int op)
     dynamic_cast<SwapDir *>(INDEXSD(e->swap_dirn))->logEntry(*e, op);
 }
 
-void
-StoreController::updateSize(int64_t size, int sign)
-{
-    fatal("StoreController has no independent size\n");
-}
-
 void
 SwapDir::updateSize(int64_t size, int sign)
 {
@@ -1014,10 +1008,6 @@ StoreHashIndex::maintain()
     }
 }
 
-void
-StoreHashIndex::updateSize(int64_t, int)
-{}
-
 void
 StoreHashIndex::sync()
 {
@@ -99,10 +99,6 @@ storeCleanup(void *datanotused)
          * otherwise, set it in the validation procedure
          */
 
-
-        if (e->swap_status == SWAPOUT_DONE)
-            e->store()->updateSize(e->swap_file_sz, 1);
-
         if ((++validated & 0x3FFFF) == 0)
             /* TODO format the int with with a stream operator */
             debugs(20, 1, "  " << validated << " Entries Validated so far.");
@@ -354,7 +354,7 @@ storeSwapOutFileClosed(void *data, int errflag, StoreIOState::Pointer self)
         assert(e->objectLen() >= 0); // we checked that above
         e->swap_file_sz = e->objectLen() + mem->swap_hdr_sz;
         e->swap_status = SWAPOUT_DONE;
-        e->store()->updateSize(e->swap_file_sz, 1);
+        e->store()->swappedOut(*e);
 
         // XXX: For some Stores, it is pointless to re-check cachability here
         // and it leads to double counts in store_check_cachable_hist. We need
@@ -65,8 +65,6 @@ class TestStore : public Store
 
     virtual void dereference(StoreEntry &) {}	/* Unreference this object */
 
-    virtual void updateSize(int64_t size, int sign) {}
-
     virtual StoreSearch *search(String const url, HttpRequest *);
 };
 