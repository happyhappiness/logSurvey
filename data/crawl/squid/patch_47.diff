----++++src/tests/stub_cbdata.cc
@@ -13,9 +13,14 @@
 #include &quot;tests/STUB.h&quot;
 
 void cbdataRegisterWithCacheManager(void) STUB
-
-void *cbdataInternalAlloc(cbdata_type type, const char *, int) STUB_RETVAL(NULL)
-void *cbdataInternalFree(void *p, const char *, int) STUB_RETVAL(NULL)
+void *cbdataInternalAlloc(cbdata_type type, const char *, int sz) {
+//STUB_RETVAL(NULL)
+    return xcalloc(1, sz);
+}
+void *cbdataInternalFree(void *p, const char *, int) {
+    xfree(p);
+    return nullptr;
+}
 #if USE_CBDATA_DEBUG
 void cbdataInternalLockDbg(const void *p, const char *, int) STUB
 void cbdataInternalUnlockDbg(const void *p, const char *, int) STUB
----++++tools/Makefile.am
@@ -34,9 +34,15 @@ test_tools.cc: $(top_srcdir)/test-suite/test_tools.cc
 stub_debug.cc: $(top_srcdir)/src/tests/stub_debug.cc
 	cp $(top_srcdir)/src/tests/stub_debug.cc $@
 
+MemBuf.cc: $(top_srcdir)/src/MemBuf.cc
+	cp $(top_srcdir)/src/MemBuf.cc $@
+
 time.cc: $(top_srcdir)/src/time.cc
 	cp $(top_srcdir)/src/time.cc $@
 
+stub_cbdata.cc: $(top_srcdir)/src/tests/stub_cbdata.cc
+	cp $(top_srcdir)/src/tests/stub_cbdata.cc $@
+
 stub_libmem.cc: $(top_srcdir)/src/tests/stub_libmem.cc STUB.h
 	cp $(top_srcdir)/src/tests/stub_libmem.cc $@
 	
@@ -48,7 +54,7 @@ STUB.h: $(top_srcdir)/src/tests/STUB.h
 # globals.cc is needed by test_tools.cc.
 # Neither of these should be disted from here.
 TESTSOURCES= test_tools.cc
-CLEANFILES += test_tools.cc stub_debug.cc time.cc stub_libmem.cc STUB.h
+CLEANFILES += test_tools.cc MemBuf.cc stub_debug.cc time.cc stub_cbdata.cc stub_libmem.cc STUB.h
 
 ## Test Scripts
 EXTRA_DIST += helper-ok-dying.pl helper-ok.pl
@@ -60,6 +66,8 @@ DEFAULT_CACHEMGR_CONFIG = $(sysconfdir)/cachemgr.conf
 libexec_PROGRAMS = cachemgr$(CGIEXT)
 
 cachemgr__CGIEXT__SOURCES = cachemgr.cc \
+	MemBuf.cc \
+	stub_cbdata.cc \
 	stub_debug.cc \
 	stub_libmem.cc \
 	test_tools.cc \
----++++tools/cachemgr.cc
@@ -11,6 +11,7 @@
 #include &quot;getfullhostname.h&quot;
 #include &quot;html_quote.h&quot;
 #include &quot;ip/Address.h&quot;
+#include &quot;MemBuf.h&quot;
 #include &quot;rfc1123.h&quot;
 #include &quot;rfc1738.h&quot;
 #include &quot;util.h&quot;
@@ -423,24 +424,23 @@ menu_url(cachemgr_request * req, const char *action)
     return url;
 }
 
-static const char *
-munge_menu_line(const char *buf, cachemgr_request * req)
+static void
+munge_menu_line(MemBuf &amp;out, const char *buf, cachemgr_request * req)
 {
     char *x;
     const char *a;
     const char *d;
     const char *p;
     char *a_url;
     char *buf_copy;
-    static char html[2 * 1024];
 
-    if (strlen(buf) &lt; 1)
-        return buf;
-
-    if (*buf != ' ')
-        return buf;
+    const char bufLen = strlen(buf);
+    if (bufLen &lt; 1 || *buf != ' ') {
+        out.append(buf, bufLen);
+        return;
+    }
 
-    buf_copy = x = xstrdup(buf);
+    buf_copy = x = xstrndup(buf, bufLen);
 
     a = xstrtok(&amp;x, &#39;\t&#39;);
 
@@ -452,59 +452,56 @@ munge_menu_line(const char *buf, cachemgr_request * req)
 
     /* no reason to give a url for a disabled action */
     if (!strcmp(p, &quot;disabled&quot;))
-        snprintf(html, sizeof(html), "&lt;LI type=\"circle\"&gt;%s (disabled)&lt;A HREF=\"%s\"&gt;.&lt;/A&gt;\n", d, a_url);
+        out.appendf("&lt;LI type=\"circle\"&gt;%s (disabled)&lt;A HREF=\"%s\"&gt;.&lt;/A&gt;\n", d, a_url);
     else
         /* disable a hidden action (requires a password, but password is not in squid.conf) */
         if (!strcmp(p, &quot;hidden&quot;))
-            snprintf(html, sizeof(html), "&lt;LI type=\"circle\"&gt;%s (hidden)&lt;A HREF=\"%s\"&gt;.&lt;/A&gt;\n", d, a_url);
+            out.appendf("&lt;LI type=\"circle\"&gt;%s (hidden)&lt;A HREF=\"%s\"&gt;.&lt;/A&gt;\n", d, a_url);
         else
             /* disable link if authentication is required and we have no password */
             if (!strcmp(p, &quot;protected&quot;) &amp;&amp; !req-&gt;passwd)
-                snprintf(html, sizeof(html), "&lt;LI type=\"circle\"&gt;%s (requires &lt;a href=\"%s\"&gt;authentication&lt;/a&gt;)&lt;A HREF=\"%s\"&gt;.&lt;/A&gt;\n",
-                         d, menu_url(req, "authenticate"), a_url);
+                out.appendf("&lt;LI type=\"circle\"&gt;%s (requires &lt;a href=\"%s\"&gt;authentication&lt;/a&gt;)&lt;A HREF=\"%s\"&gt;.&lt;/A&gt;\n",
+                            d, menu_url(req, "authenticate"), a_url);
             else
                 /* highlight protected but probably available entries */
                 if (!strcmp(p, &quot;protected&quot;))
-                    snprintf(html, sizeof(html), "&lt;LI type=\"square\"&gt;&lt;A HREF=\"%s\"&gt;&lt;font color=\"#FF0000\"&gt;%s&lt;/font&gt;&lt;/A&gt;\n",
-                             a_url, d);
+                    out.appendf("&lt;LI type=\"square\"&gt;&lt;A HREF=\"%s\"&gt;&lt;font color=\"#FF0000\"&gt;%s&lt;/font&gt;&lt;/A&gt;\n",
+                                a_url, d);
 
     /* public entry or unknown type of protection */
                 else
-                    snprintf(html, sizeof(html), "&lt;LI type=\"disk\"&gt;&lt;A HREF=\"%s\"&gt;%s&lt;/A&gt;\n", a_url, d);
+                    out.appendf("&lt;LI type=\"disk\"&gt;&lt;A HREF=\"%s\"&gt;%s&lt;/A&gt;\n", a_url, d);
 
     xfree(a_url);
 
     xfree(buf_copy);
-
-    return html;
 }
 
-static const char *
-munge_other_line(const char *buf, cachemgr_request *)
+static void
+munge_other_line(MemBuf &amp;out, const char *buf, cachemgr_request *)
 {
     static const char *ttags[] = {&quot;td&quot;, &quot;th&quot;};
 
-    static char html[4096];
     static int table_line_num = 0;
     static int next_is_header = 0;
     int is_header = 0;
     const char *ttag;
     char *buf_copy;
     char *x, *p;
-    int l = 0;
     /* does it look like a table? */
 
     if (!strchr(buf, &#39;\t&#39;) || *buf == &#39;\t&#39;) {
         /* nope, just text */
-        snprintf(html, sizeof(html), &quot;%s%s&quot;,
-                 table_line_num ? &quot;&lt;/table&gt;\n&lt;pre&gt;&quot; : &quot;&quot;, html_quote(buf));
+        if (table_line_num)
+            out.append(&quot;&lt;/table&gt;\n&lt;pre&gt;&quot;, 14);
+        out.appendf(&quot;%s&quot;, html_quote(buf));
         table_line_num = 0;
-        return html;
+        return;
     }
 
     /* start html table */
     if (!table_line_num) {
-        l += snprintf(html + l, sizeof(html) - l, "&lt;/pre&gt;&lt;table cellpadding=\"2\" cellspacing=\"1\"&gt;\n");
+        out.append("&lt;/pre&gt;&lt;table cellpadding=\"2\" cellspacing=\"1\"&gt;\n", 46);
         next_is_header = 0;
     }
 
@@ -514,7 +511,7 @@ munge_other_line(const char *buf, cachemgr_request *)
     ttag = ttags[is_header];
 
     /* record starts */
-    l += snprintf(html + l, sizeof(html) - l, "&lt;tr&gt;");
+    out.append("&lt;tr&gt;", 4);
 
     /* substitute &#39;\t&#39; */
     buf_copy = x = xstrdup(buf);
@@ -531,18 +528,17 @@ munge_other_line(const char *buf, cachemgr_request *)
             ++x;
         }
 
-        l += snprintf(html + l, sizeof(html) - l, "&lt;%s colspan=\"%d\" align=\"%s\"&gt;%s&lt;/%s&gt;",
-                      ttag, column_span,
-                      is_header ? "center" : is_number(cell) ? "right" : "left",
-                      html_quote(cell), ttag);
+        out.appendf("&lt;%s colspan=\"%d\" align=\"%s\"&gt;%s&lt;/%s&gt;",
+                    ttag, column_span,
+                    is_header ? "center" : is_number(cell) ? "right" : "left",
+                    html_quote(cell), ttag);
     }
 
     xfree(buf_copy);
     /* record ends */
-    snprintf(html + l, sizeof(html) - l, "&lt;/tr&gt;\n");
+    out.append("&lt;/tr&gt;\n", 6);
     next_is_header = is_header &amp;&amp; strstr(buf, &quot;\t\t&quot;);
     ++table_line_num;
-    return html;
 }
 
 static const char *
@@ -699,14 +695,18 @@ read_reply(int s, cachemgr_request * req)
         /* yes, fall through, we do not want to loose the first line */
 
         case isBody:
+        {
             /* interpret [and reformat] cache response */
-
+            MemBuf out;
+            out.init();
             if (parse_menu)
-                fputs(munge_menu_line(buf, req), stdout);
+                munge_menu_line(out, buf, req);
             else
-                fputs(munge_other_line(buf, req), stdout);
+                munge_other_line(out, buf, req);
 
-            break;
+            fputs(out.buf, stdout);
+        }
+        break;
 
         case isForward:
             /* forward: no modifications allowed */
----++++GitHub