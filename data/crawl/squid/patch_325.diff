@@ -749,7 +749,6 @@ ufsdump_LDADD = \
 	acl/libacls.la \
 	eui/libeui.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	acl/libapi.la \
 	base/libbase.la \
 	libsquid.la \
@@ -772,7 +771,6 @@ ufsdump_DEPENDENCIES = \
 	acl/libacls.la \
 	eui/libeui.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	acl/libapi.la \
 	base/libbase.la \
 	libsquid.la \
@@ -1170,6 +1168,7 @@ tests_testHttpReply_SOURCES=\
 	tests/stub_errorpage.cc \
 	tests/stub_HelperChildConfig.cc \
 	tests/stub_libformat.cc \
+	tests/stub_libauth.cc \
 	StatCounters.h \
 	StatCounters.cc \
 	StatHist.h \
@@ -1196,7 +1195,6 @@ tests_testHttpReply_LDADD=\
 	acl/libacls.la \
 	acl/libapi.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	anyp/libanyp.la \
 	ip/libip.la \
 	base/libbase.la \
@@ -1291,6 +1289,7 @@ tests_testACLMaxUserIP_SOURCES= \
 	tests/stub_HttpRequest.cc \
 	tests/stub_HttpReply.cc \
 	tests/stub_ipc_TypedMsgHdr.cc \
+	tests/stub_libauth.cc \
 	tests/stub_libcomm.cc \
 	tests/stub_libformat.cc \
 	tests/stub_libsslsquid.cc \
@@ -1332,7 +1331,6 @@ tests_testACLMaxUserIP_LDADD= \
 	acl/libacls.la \
 	eui/libeui.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	acl/libapi.la \
 	anyp/libanyp.la \
 	base/libbase.la \
@@ -1527,6 +1525,7 @@ tests_testCacheManager_SOURCES = \
 	StatHist.h \
 	StrList.h \
 	StrList.cc \
+	tests/stub_libauth.cc \
 	tests/stub_StatHist.cc \
 	stmem.cc \
 	repl_modules.h \
@@ -1584,7 +1583,6 @@ tests_testCacheManager_LDADD = \
 	ident/libident.la \
 	acl/libacls.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	acl/libapi.la \
 	base/libbase.la \
 	libsquid.la \
@@ -1727,6 +1725,7 @@ tests_testDiskIO_SOURCES = \
 	tests/stub_internal.cc \
 	tests/stub_ipc.cc \
 	tests/stub_ipcache.cc \
+    tests/stub_libauth.cc \
 	tests/stub_libeui.cc \
 	tests/stub_libformat.cc \
 	tests/stub_libicmp.cc \
@@ -1769,7 +1768,6 @@ tests_testDiskIO_LDADD = \
 	ident/libident.la \
 	acl/libacls.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	libsquid.la \
 	comm/libcomm.la \
 	anyp/libanyp.la \
@@ -1986,6 +1984,7 @@ tests_testEvent_SOURCES = \
 	tests/testMain.cc \
 	tests/stub_main_cc.cc \
 	tests/stub_ipc_Forwarder.cc \
+    tests/stub_libauth.cc \
 	tests/stub_libeui.cc \
 	tests/stub_store_stats.cc \
 	time.cc \
@@ -2014,7 +2013,6 @@ tests_testEvent_LDADD = \
 	ident/libident.la \
 	acl/libacls.la \
 	acl/libstate.la \
-	$(AUTH_LIBS) \
 	acl/libapi.la \
 	base/libbase.la \
 	libsquid.la \
@@ -44,10 +44,6 @@
 #include "SquidTime.h"
 #include "Store.h"
 
-#if !_USE_INLINE_
-#include "auth/User.cci"
-#endif
-
 // This should be converted into a pooled type. Does not need to be cbdata
 CBDATA_TYPE(AuthUserIP);
 
@@ -31,19 +31,3 @@
  * Copyright (c) 2003, Robert Collins <robertc@squid-cache.org>
  */
 
-char const *
-Auth::User::username () const
-{
-    return username_;
-}
-
-void
-Auth::User::username(char const *aString)
-{
-    if (aString) {
-        assert(!username_);
-        username_ = xstrdup(aString);
-    } else {
-        safe_free(username_);
-    }
-}
@@ -81,8 +81,15 @@ class User : public RefCountable
 
     void absorb(Auth::User::Pointer from);
     virtual ~User();
-    _SQUID_INLINE_ char const *username() const;
-    _SQUID_INLINE_ void username(char const *);
+    char const *username() const { return username_; }
+    void username(char const * u) {
+        if (u) {
+            assert(!username_);
+            username_ = xstrdup(u);
+        } else {
+            safe_free(username_);
+        }
+    }
 
     /**
      * How long these credentials are still valid for.
@@ -135,9 +142,5 @@ class User : public RefCountable
 
 } // namespace Auth
 
-#if _USE_INLINE_
-#include "auth/User.cci"
-#endif
-
 #endif /* USE_AUTH */
 #endif /* SQUID_AUTH_USER_H */
@@ -0,0 +1,64 @@
+#define STUB_API "auth/libauth.la"
+
+#include "STUB.h"
+#include "squid.h"
+
+#include "auth/Config.h"
+Auth::UserRequest::Pointer Auth::Config::CreateAuthUser(const char *) STUB
+Auth::Config * Auth::Config::Find(const char *) STUB
+void Auth::Config::registerWithCacheManager(void) STUB_NOP
+
+#include "auth/Gadgets.h"
+int authenticateActiveSchemeCount(void) STUB
+int authenticateSchemeCount(void) STUB
+void authenticateInit(Auth::ConfigVector *) STUB
+void authenticateRotate(void) STUB
+void authenticateReset(void) STUB
+
+AuthUserHashPointer::AuthUserHashPointer(Auth::User::Pointer anAuth_user) STUB
+Auth::User::Pointer AuthUserHashPointer::user() const STUB
+
+#include "auth/Scheme.h"
+/* TODO: Fill in */
+
+#include "auth/User.h"
+Auth::User::User(Auth::Config *) STUB
+Auth::CredentialState Auth::User::credentials() const STUB
+void Auth::User::credentials(CredentialState) STUB
+void Auth::User::absorb(Auth::User::Pointer) STUB
+Auth::User::~User() STUB_NOP
+void Auth::User::cacheInit(void) STUB
+void Auth::User::CachedACLsReset() STUB
+void Auth::User::cacheCleanup(void *) STUB
+void Auth::User::clearIp() STUB
+void Auth::User::removeIp(Ip::Address) STUB
+void Auth::User::addIp(Ip::Address) STUB
+void Auth::User::addToNameCache() STUB
+void Auth::User::UsernameCacheStats(StoreEntry *) STUB
+
+#include "auth/UserRequest.h"
+void Auth::UserRequest::start(AUTHCB *, void *) STUB
+bool Auth::UserRequest::valid() const STUB
+void * Auth::UserRequest::operator new (size_t) STUB
+void Auth::UserRequest::operator delete (void *) STUB
+Auth::UserRequest::UserRequest() STUB
+Auth::UserRequest::~UserRequest() STUB
+void Auth::UserRequest::setDenyMessage(char const *) STUB
+char const * Auth::UserRequest::getDenyMessage() STUB_RETVAL("stub")
+char const * Auth::UserRequest::denyMessage(char const * const) STUB_RETVAL("stub")
+void authenticateAuthUserRequestRemoveIp(Auth::UserRequest::Pointer, Ip::Address const &) STUB
+void authenticateAuthUserRequestClearIp(Auth::UserRequest::Pointer) STUB
+int authenticateAuthUserRequestIPCount(Auth::UserRequest::Pointer) STUB
+int authenticateUserAuthenticated(Auth::UserRequest::Pointer) STUB
+Auth::Direction Auth::UserRequest::direction() STUB
+void Auth::UserRequest::addAuthenticationInfoHeader(HttpReply *, int) STUB
+void Auth::UserRequest::addAuthenticationInfoTrailer(HttpReply *, int) STUB
+void Auth::UserRequest::releaseAuthServer() STUB
+const char * Auth::UserRequest::connLastHeader() STUB
+AuthAclState Auth::UserRequest::authenticate(Auth::UserRequest::Pointer *, http_hdr_type, HttpRequest *, ConnStateData *, Ip::Address &) STUB
+AuthAclState Auth::UserRequest::tryToAuthenticateAndSetAuthUser(Auth::UserRequest::Pointer *, http_hdr_type, HttpRequest *, ConnStateData *, Ip::Address &) STUB
+void Auth::UserRequest::addReplyAuthHeader(HttpReply *, Auth::UserRequest::Pointer, HttpRequest *, int, int) STUB
+void authenticateFixHeader(HttpReply *, Auth::UserRequest::Pointer, HttpRequest *, int, int) STUB
+void authenticateAddTrailer(HttpReply *, Auth::UserRequest::Pointer, HttpRequest *, int) STUB
+Auth::Scheme::Pointer Auth::UserRequest::scheme() const STUB
+