@@ -1,5 +1,5 @@
 /*
- * $Id: Array.h,v 1.2 1998/07/20 17:18:46 wessels Exp $
+ * $Id: Array.h,v 1.3 2001/01/07 09:55:21 hno Exp $
  *
  * AUTHOR: Alex Rousskov
  *
@@ -42,8 +42,8 @@ typedef struct {
 extern Array *arrayCreate();
 extern void arrayInit(Array * s);
 extern void arrayClean(Array * s);
-extern void arrayDestroy(Array *s);
-extern void arrayAppend(Array *s, void *obj);
+extern void arrayDestroy(Array * s);
+extern void arrayAppend(Array * s, void *obj);
 extern void arrayPreAppend(Array * s, int app_count);
 
 
@@ -1,5 +1,5 @@
 /*
- * $Id: Stack.h,v 1.8 1998/07/20 17:18:48 wessels Exp $
+ * $Id: Stack.h,v 1.9 2001/01/07 09:55:21 hno Exp $
  *
  * AUTHOR: Alex Rousskov
  *
@@ -38,9 +38,9 @@ typedef Array Stack;
 #define stackInit arrayInit
 #define stackClean arrayClean
 #define stackDestroy arrayDestroy
-extern void *stackPop(Stack *s);
+extern void *stackPop(Stack * s);
 #define stackPush arrayAppend
 #define stackPrePush arrayPreAppend
-extern void *stackTop(Stack *s);
+extern void *stackTop(Stack * s);
 
 #endif /* ndef _STACK_H_ */
@@ -28,7 +28,7 @@
  * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
  * SOFTWARE.
  * 
- * $Id: asn1.h,v 1.10 1998/04/08 00:33:45 wessels Exp $
+ * $Id: asn1.h,v 1.11 2001/01/07 09:55:21 hno Exp $
  * 
  **********************************************************************/
 
@@ -96,6 +96,6 @@ extern "C" {
 
 #ifdef __cplusplus
 }
-#endif
 
+#endif
 #endif				/* _SNMP_ASN1_H_ */
@@ -1,5 +1,5 @@
 /*
- * $Id: radix.h,v 1.7 1998/09/23 17:20:00 wessels Exp $
+ * $Id: radix.h,v 1.8 2001/01/07 09:55:21 hno Exp $
  */
 
 /*
@@ -52,14 +52,14 @@ struct radix_node {
     struct radix_node *rn_p;	/* parent */
     short rn_b;			/* bit offset; -1-index(netmask) */
     char rn_bmask;		/* node: mask for bit test */
-    unsigned char rn_flags;		/* enumerated next */
+    unsigned char rn_flags;	/* enumerated next */
 #define RNF_NORMAL	1	/* leaf contains normal route */
 #define RNF_ROOT	2	/* leaf is root leaf for tree */
 #define RNF_ACTIVE	4	/* This node is alive (for rtfree) */
     union {
 	struct {		/* leaf only data: */
-	    char * rn_Key;	/* object of search */
-	    char * rn_Mask;	/* netmask, if present */
+	    char *rn_Key;	/* object of search */
+	    char *rn_Mask;	/* netmask, if present */
 	    struct radix_node *rn_Dupedkey;
 	} rn_leaf;
 	struct {		/* node only data: */
@@ -89,10 +89,10 @@ struct radix_node {
 extern struct radix_mask {
     short rm_b;			/* bit offset; -1-index(netmask) */
     char rm_unused;		/* cf. rn_bmask */
-    unsigned char rm_flags;		/* cf. rn_flags */
+    unsigned char rm_flags;	/* cf. rn_flags */
     struct radix_mask *rm_mklist;	/* more masks to try */
     union {
-	char * rmu_mask;	/* the mask */
+	char *rmu_mask;		/* the mask */
 	struct radix_node *rmu_leaf;	/* for normal routes */
     } rm_rmu;
     int rm_refs;		/* # of references to this struct */
@@ -1,5 +1,5 @@
 /*
- * $Id: snmp_client.h,v 1.6 1998/09/23 17:20:02 wessels Exp $
+ * $Id: snmp_client.h,v 1.7 2001/01/07 09:55:22 hno Exp $
  */
 
 #ifndef _SNMP_CLIENT_H_
@@ -30,7 +30,7 @@ ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 SOFTWARE.
 ******************************************************************/
 struct synch_state {
-    int	waiting;
+    int waiting;
     int status;
 /* status codes */
 #define STAT_SUCCESS	0
@@ -44,22 +44,21 @@ struct synch_state {
 extern "C" {
 #endif
 
-extern struct synch_state snmp_synch_state;
+    extern struct synch_state snmp_synch_state;
 
 /* Synchronize Input with Agent */
-int  snmp_synch_input(int, struct snmp_session *, int,
-		     struct snmp_pdu *, void *);
+    int snmp_synch_input(int, struct snmp_session *, int,
+	struct snmp_pdu *, void *);
 
 /* Synchronize Response with Agent */
-int  snmp_synch_response(struct snmp_session *, struct snmp_pdu *, 
-			struct snmp_pdu **);
+    int snmp_synch_response(struct snmp_session *, struct snmp_pdu *,
+	struct snmp_pdu **);
 
 /* Synchronize Setup */
-void snmp_synch_setup(struct snmp_session *);
+    void snmp_synch_setup(struct snmp_session *);
 
 #ifdef __cplusplus
 }
-#endif
-
-#endif /* _SNMP_CLIENT_H_ */
 
+#endif
+#endif				/* _SNMP_CLIENT_H_ */
@@ -27,7 +27,7 @@
  * 
  * Author: Ryan Troll <ryan+@andrew.cmu.edu>
  * 
- * $Id: snmp_pdu.h,v 1.2 1998/04/04 01:43:49 kostas Exp $
+ * $Id: snmp_pdu.h,v 1.3 2001/01/07 09:55:22 hno Exp $
  * 
  **********************************************************************/
 
@@ -79,11 +79,11 @@ extern "C" {
 }
 
 #endif				/*
-				 * * RFC 1905: Protocol Operations for SNMPv2
-				 * *
-				 * * RFC 1157: A Simple Network Management Protocol (SNMP)
-				 * *
-				 * * PDU Types
+				 * * * RFC 1905: Protocol Operations for SNMPv2
+				 * * *
+				 * * * RFC 1157: A Simple Network Management Protocol (SNMP)
+				 * * *
+				 * * * PDU Types
 				 */
 #define SNMP_PDU_GET	    (ASN_CONTEXT | ASN_CONSTRUCTOR | 0x0)
 #define SNMP_PDU_GETNEXT    (ASN_CONTEXT | ASN_CONSTRUCTOR | 0x1)
@@ -99,11 +99,11 @@ extern "C" {
 #define SNMP_DEFAULT_ERRINDEX	    -1
 #define SNMP_DEFAULT_ADDRESS	    0
 #define SNMP_DEFAULT_REQID	    0	/*
-					 * * RFC 1907: Management Information Base for SNMPv2
-					 * *
-					 * * RFC 1157: A Simple Network Management Protocol (SNMP)
-					 * *
-					 * * Trap Types
+					 * * * RFC 1907: Management Information Base for SNMPv2
+					 * * *
+					 * * * RFC 1157: A Simple Network Management Protocol (SNMP)
+					 * * *
+					 * * * Trap Types
 					 */
 #define SNMP_TRAP_COLDSTART             (0x0)
 #define SNMP_TRAP_WARMSTART             (0x1)
@@ -26,7 +26,7 @@
  * 
  * Author: Ryan Troll <ryan+@andrew.cmu.edu>
  * 
- * $Id: snmp_vars.h,v 1.8 1999/06/17 22:20:35 wessels Exp $
+ * $Id: snmp_vars.h,v 1.9 2001/01/07 09:55:22 hno Exp $
  * 
  **********************************************************************/
 
@@ -59,8 +59,7 @@ extern "C" {
 }
 
 #endif
-#define MAX_NAME_LEN	64	/* number of subid's in a objid *//*      *RFC 1902:Structure of Management Information for SNMPv2      *
-      *Defined Types
+#define MAX_NAME_LEN	64	/* number of subid's in a objid *//*      *RFC 1902:Structure of Management Information for SNMPv2      *      *Defined Types
 *
       */
 #define SMI_INTEGER     ASN_INTEGER
@@ -1,5 +1,5 @@
 /*
- * $Id: GNUregex.c,v 1.11 1998/09/23 17:14:20 wessels Exp $
+ * $Id: GNUregex.c,v 1.12 2001/01/07 09:55:22 hno Exp $
  */
 
 /* Extended regular expression matching and search library,
@@ -1576,7 +1576,6 @@ regex_compile(pattern, size, syntax, bufp)
 		    else
 			return REG_ERPAREN;
 		}
-
 	      handle_close:
 		if (fixup_alt_jump) {	/* Push a dummy failure point at the end of the
 					 * alternative for a possible future
@@ -1595,7 +1594,6 @@ regex_compile(pattern, size, syntax, bufp)
 		    else
 			return REG_ERPAREN;
 		}
-
 		/* Since we just checked for an empty stack above, this
 		 * ``can't happen''.  */
 		assert(compile_stack.avail != 0);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: util.c,v 1.74 2000/11/25 16:02:14 adrian Exp $
+ * $Id: util.c,v 1.75 2001/01/07 09:55:22 hno Exp $
  *
  * DEBUG: 
  * AUTHOR: Harvest Derived
@@ -78,7 +78,7 @@ static char msg[128];
 #if !defined(__CYGWIN__)
 extern int sys_nerr;
 #else
-  #define sys_nerr _sys_nerr
+#define sys_nerr _sys_nerr
 #endif
 
 
@@ -124,9 +124,9 @@ DBG_INDEX(int sz)
 	return DBG_MAXINDEX;
 
     if (sz <= DBG_SPLIT)
-	return (sz+DBG_GRAIN_SM-1)/DBG_GRAIN_SM;
+	return (sz + DBG_GRAIN_SM - 1) / DBG_GRAIN_SM;
 
-    return (sz+DBG_GRAIN-1)/DBG_GRAIN + DBG_OFFSET;
+    return (sz + DBG_GRAIN - 1) / DBG_GRAIN + DBG_OFFSET;
 }
 
 static void
@@ -475,7 +475,7 @@ xfree(void *s)
 
 #if XMALLOC_DEBUG
     if (s != NULL)
-        check_free(s);
+	check_free(s);
 #endif
     if (s != NULL)
 	free(s);
@@ -632,7 +632,7 @@ xstrerror(void)
     if (errno < 0 || errno >= sys_nerr)
 	snprintf(xstrerror_buf, BUFSIZ, "(%d) Unknown", errno);
     else
-        snprintf(xstrerror_buf, BUFSIZ, "(%d) %s", errno, strerror(errno));
+	snprintf(xstrerror_buf, BUFSIZ, "(%d) %s", errno, strerror(errno));
     return xstrerror_buf;
 }
 
@@ -749,10 +749,10 @@ xitoa(int num)
 }
 
 /* A default failure notifier when the main program hasn't installed any */
-void default_failure_notify(const char *msg)
+void 
+default_failure_notify(const char *msg)
 {
     write(2, msg, strlen(msg));
     write(2, "\n", 1);
     abort();
 }
-
@@ -100,7 +100,7 @@
  * valid V1 responses.  (I think. XXXXX)
  *
  */
-int 
+int
 snmp_coexist_V2toV1(struct snmp_pdu *PDU)
 {
     /* Per 3.1.1:
@@ -114,7 +114,7 @@ uptimeString(timeticks, buf)
     return buf;
 }
 
-static void 
+static void
 sprint_hexstring(buf, cp, len)
      char *buf;
      u_char *cp;
@@ -136,7 +136,7 @@ sprint_hexstring(buf, cp, len)
     *buf = '\0';
 }
 
-static void 
+static void
 sprint_asciistring(buf, cp, len)
      char *buf;
      u_char *cp;
@@ -531,7 +531,7 @@ set_functions(subtree)
 }
 #endif
 
-void 
+void
 init_mib(char *file)
 {
     if (Mib != NULL)
@@ -674,7 +674,7 @@ parse_subtree(subtree, input, output, out_len)
     return (++*out_len);
 }
 
-int 
+int
 read_objid(input, output, out_len)
      char *input;
      oid *output;
@@ -709,7 +709,7 @@ read_objid(input, output, out_len)
     return (1);
 }
 
-void 
+void
 print_objid(objid, objidlen)
      oid *objid;
      int objidlen;		/* number of subidentifiers */
@@ -723,7 +723,7 @@ print_objid(objid, objidlen)
 
 }
 
-void 
+void
 sprint_objid(buf, objid, objidlen)
      char *buf;
      oid *objid;
@@ -736,7 +736,7 @@ sprint_objid(buf, objid, objidlen)
 }
 
 #if 0
-void 
+void
 print_variable(objid, objidlen, pvariable)
      oid *objid;
      int objidlen;
@@ -763,7 +763,7 @@ print_variable(objid, objidlen, pvariable)
 }
 
 
-void 
+void
 sprint_variable(buf, objid, objidlen, pvariable)
      char *buf;
      oid *objid;
@@ -790,7 +790,7 @@ sprint_variable(buf, objid, objidlen, pvariable)
     strcat(buf, "\n");
 }
 
-void 
+void
 sprint_value(buf, objid, objidlen, pvariable)
      char *buf;
      oid *objid;
@@ -808,7 +808,7 @@ sprint_value(buf, objid, objidlen, pvariable)
     }
 }
 
-void 
+void
 print_value(objid, objidlen, pvariable)
      oid *objid;
      int objidlen;
@@ -870,13 +870,13 @@ get_symbol(objid, objidlen, subtree, buf)
 
 
 #if 0
-void 
+void
 print_variable_list(variable_list * V)
 {
     print_variable(V->name, V->name_length, V);
 }
 
-void 
+void
 print_variable_list_value(variable_list * pvariable)
 {
     char buf[512];
@@ -895,7 +895,7 @@ print_variable_list_value(variable_list * pvariable)
 }
 #endif
 
-void 
+void
 print_type(variable_list * var)
 {
     switch (var->type) {
@@ -932,7 +932,7 @@ print_type(variable_list * var)
     }
 }
 
-void 
+void
 print_oid_nums(oid * O, int len)
 {
     int x;
@@ -128,7 +128,7 @@ struct session_list *Sessions = NULL;
  */
 static int Reqid = 0;
 
-static void 
+static void
 init_snmp(void)
 {
     struct timeval tv;
@@ -142,7 +142,7 @@ init_snmp(void)
 /*
  * Free each element in the input request list.
  */
-static void 
+static void
 free_request_list(rp)
      struct request_list *rp;
 {
@@ -344,7 +344,7 @@ snmp_open(struct snmp_session *session)
  * dequeues any pending requests, and closes any sockets allocated for
  * the session.  Returns 0 on error, 1 otherwise.
  */
-int 
+int
 snmp_close(struct snmp_session *session)
 {
     struct session_list *slp = NULL, *oslp = NULL;
@@ -451,7 +451,7 @@ snmp_parse(struct snmp_session * session,
  * The pdu is freed by snmp_send() unless a failure occured.
  */
 #if 0
-int 
+int
 snmp_send(struct snmp_session *session, struct snmp_pdu *pdu)
 {
     struct session_list *slp;
@@ -763,7 +763,7 @@ snmp_select_info(numfds, fdset, timeout, block)
  * from the pdu and is resent.  If there are no more retries available, the 
  * callback for the session is used to alert the user of the timeout.
  */
-void 
+void
 snmp_timeout(void)
 {
     struct session_list *slp;
@@ -846,7 +846,7 @@ snmp_timeout(void)
 
 
 /* Print some API stats */
-void 
+void
 snmp_api_stats(void *outP)
 {
     struct session_list *slp;
@@ -69,7 +69,7 @@ static char *api_errors[17] =
     "Unknown Error"
 };
 
-void 
+void
 snmp_set_api_error(int x)
 {
     snmp_errno = x;
@@ -86,7 +86,7 @@ snmp_api_error(int err)
     return (api_errors[foo]);
 }
 
-int 
+int
 snmp_api_errno(void)
 {
     return (snmp_errno);
@@ -128,7 +128,7 @@ u_char *
 snmp_msg_Encode(u_char * Buffer, int *BufLenP,
     u_char * Community, int CommLen,
     int Version,
-    struct snmp_pdu * PDU)
+    struct snmp_pdu *PDU)
 {
     u_char *bufp, *tmp;
     u_char *PDUHeaderPtr, *VARHeaderPtr;
@@ -270,7 +270,7 @@ snmp_fix_pdu(struct snmp_pdu *pdu, int command)
 
 /**********************************************************************/
 
-void 
+void
 snmp_pdu_free(struct snmp_pdu *pdu)
 {
     snmp_free_pdu(pdu);
@@ -279,7 +279,7 @@ snmp_pdu_free(struct snmp_pdu *pdu)
 /*
  * Frees the pdu and any xmalloc'd data associated with it.
  */
-void 
+void
 snmp_free_pdu(struct snmp_pdu *pdu)
 {
     struct variable_list *vp, *ovp;
@@ -670,7 +670,7 @@ snmp_pdu_type(struct snmp_pdu *PDU)
  * Add a null variable with the requested name to the end of the list of
  * variables for this pdu.
  */
-void 
+void
 snmp_add_null_var(struct snmp_pdu *pdu, oid * name, int name_length)
 {
     struct variable_list *vars;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store_repl_lru.cc,v 1.4 2001/01/05 09:52:11 adrian Exp $
+ * $Id: store_repl_lru.cc,v 1.5 2001/01/07 09:55:24 hno Exp $
  *
  * DEBUG: section ?     LRU Removal policy
  * AUTHOR: Henrik Nordstrom
@@ -162,7 +162,7 @@ lru_walkInit(RemovalPolicy * policy)
     RemovalPolicyWalker *walker;
     LruWalkData *lru_walk;
     lru->nwalkers += 1;
-    walker=CBDATA_ALLOC(RemovalPolicyWalker, NULL);
+    walker = CBDATA_ALLOC(RemovalPolicyWalker, NULL);
     lru_walk = xcalloc(1, sizeof(*lru_walk));
     walker->_policy = policy;
     walker->_data = lru_walk;
@@ -231,7 +231,7 @@ lru_purgeInit(RemovalPolicy * policy, int max_scan)
     RemovalPurgeWalker *walker;
     LruPurgeData *lru_walk;
     lru->nwalkers += 1;
-    walker=CBDATA_ALLOC(RemovalPurgeWalker, NULL);
+    walker = CBDATA_ALLOC(RemovalPurgeWalker, NULL);
     lru_walk = xcalloc(1, sizeof(*lru_walk));
     walker->_policy = policy;
     walker->_data = lru_walk;
@@ -268,7 +268,7 @@ createRemovalPolicy_lru(wordlist * args)
 	lru_node_pool = memPoolCreate("LRU policy node", sizeof(LruNode));
     /* Allocate the needed structures */
     lru_data = xcalloc(1, sizeof(*lru_data));
-    policy=CBDATA_ALLOC(RemovalPolicy, NULL);
+    policy = CBDATA_ALLOC(RemovalPolicy, NULL);
     /* Initialize the URL data */
     lru_data->policy = policy;
     /* Populate the policy structure */
@@ -1,6 +1,6 @@
 
 /*
- * $Id: hash.c,v 1.5 1998/07/22 20:38:08 wessels Exp $
+ * $Id: hash.c,v 1.6 2001/01/07 09:55:24 hno Exp $
  *
  * DEBUG: section 0     Hash Tables
  * AUTHOR: Harvest Derived
@@ -39,7 +39,7 @@
 #include <assert.h>
 #include "hash.h"
 #undef free
-extern void my_free(char *, int , void *);
+extern void my_free(char *, int, void *);
 
 #define free(a) my_free(__FILE__, __LINE__, a)
 
@@ -176,7 +176,7 @@ hash_insert(hash_table * hid, const char *k, void *item)
     /* Add to the given hash table 'hid' */
     new = calloc(1, sizeof(hash_link));
     if (!new) {
-	fprintf(stderr,"calloc failed!\n");
+	fprintf(stderr, "calloc failed!\n");
 	print_stats();
 	exit(1);
     }
@@ -298,7 +298,7 @@ hash_unlink(hash_table * hid, hash_link * hl, int FreeLink)
 		hid->current_ptr = walker->next;
 	    if (FreeLink) {
 		if (walker) {
-		free(walker);
+		    free(walker);
 		}
 	    }
 	    return 0;
@@ -337,10 +337,10 @@ hash_get_bucket(hash_table * hid, unsigned int bucket)
 void
 hashFreeMemory(hash_table * hid)
 {
-	if (hid->buckets);
+    if (hid->buckets);
     free(hid->buckets);
-	if (hid)
-    free(hid);
+    if (hid)
+	free(hid);
 }
 
 
@@ -402,4 +402,3 @@ main(void)
     exit(0);
 }
 #endif
-
@@ -1,6 +1,6 @@
-#define  DEFAULT_HASH_SIZE 7951     
+#define  DEFAULT_HASH_SIZE 7951
 typedef unsigned int HASHHASH(const void *, unsigned int);
-struct _hash_link {  
+struct _hash_link {
     char *key;
     struct _hash_link *next;
     void *item;
@@ -17,17 +17,17 @@ struct _hash_table {
     unsigned int size;
     unsigned int current_slot;
     hash_link *current_ptr;
-};  
+};
 typedef struct _hash_table hash_table;
 
 extern int hash_links_allocated;
-extern int store_hash_buckets;        /* 0 */
-extern hash_table *store_table;       /* NULL */
+extern int store_hash_buckets;	/* 0 */
+extern hash_table *store_table;	/* NULL */
 extern hash_table *hash_create(HASHCMP *, int, HASHHASH *);
 extern void hash_insert(hash_table *, const char *, void *);
 extern int hash_delete(hash_table *, const char *);
 int hash_delete_link(hash_table *, hash_link *);
-int hash_unlink(hash_table *,hash_link *, int);
+int hash_unlink(hash_table *, hash_link *, int);
 void hash_join(hash_table *, hash_link *);
 int hash_remove_link(hash_table *, hash_link *);
 hash_link *hash_lookup(hash_table *, const void *);
@@ -39,7 +39,7 @@ int amt;
 
 int i;
 int a;
-int run_stats=0;
+int run_stats = 0;
 void *my_xmalloc(size_t);
 void *my_xcalloc(int, size_t);
 int my_xfree(void *);
@@ -49,163 +49,172 @@ int my_xfree(void *);
 #define xfree my_xfree
 
 int *size2id_array[2];
-int size2id_len=0;
-int size2id_alloc=0;
+int size2id_len = 0;
+int size2id_alloc = 0;
 
 typedef struct {
-	char orig_ptr[32];
-	void *my_ptr;
+    char orig_ptr[32];
+    void *my_ptr;
 #ifdef WITH_LIB
-	MemPool *pool;
+    MemPool *pool;
 #endif
-	int size;
+    int size;
 } memitem;
 
 struct {
-	int mallocs,frees,callocs,reallocs;
+    int mallocs, frees, callocs, reallocs;
 } mstat;
 
 memitem *mi;
 void size2id(size_t, memitem *);
 void badformat();
 void init_stats(), print_stats();
-void my_hash_insert(hash_table *h, const char *k, memitem *item);
-static void *xmemAlloc(memitem *item);
-static void xmemFree(memitem *item);
+void my_hash_insert(hash_table * h, const char *k, memitem * item);
+static void *xmemAlloc(memitem * item);
+static void xmemFree(memitem * item);
 
-int 
-ptrcmp(const void *a,const void *b) 
+int
+ptrcmp(const void *a, const void *b)
 {
-	return (strcmp(a,b));
+    return (strcmp(a, b));
 }
 
-main(int argc,char **argv)
+main(int argc, char **argv)
 {
     char c;
-    extern char *optarg; 
+    extern char *optarg;
     malloc_options = "A";
-    a=0;
+    a = 0;
     while ((c = getopt(argc, argv, "f:i:M:l:m:r:N")) != -1) {
-      switch (c) {
+	switch (c) {
 	case 'N':
-	   mem_pools_on=0;
-	   break;
+	    mem_pools_on = 0;
+	    break;
 	case 'r':
-	  run_stats=atoi(optarg);
-	  break;
+	    run_stats = atoi(optarg);
+	    break;
 	case 'f':
-	  fn=strdup(optarg);
-	  fp=fopen(fn,"r");
-	  break;
+	    fn = strdup(optarg);
+	    fp = fopen(fn, "r");
+	    break;
 	case 'i':
-	  initsiz=atoi(optarg);
-	  break;
+	    initsiz = atoi(optarg);
+	    break;
 	case 'l':
-	  mem_max_size = atoi(optarg)*1024*1024;
-	  break;
+	    mem_max_size = atoi(optarg) * 1024 * 1024;
+	    break;
 	case 'M':
-	  maxsiz=atoi(optarg);
-	  break;
+	    maxsiz = atoi(optarg);
+	    break;
 	case 'm':
-	  minchunk=atoi(optarg);
-	  break;
+	    minchunk = atoi(optarg);
+	    break;
 	default:
-  	  fprintf(stderr,
-		"Usage: %s -f file -M maxsiz -i initsiz -m minchunk",argv[0]);
-	  exit(1);
-      }
-	
+	    fprintf(stderr,
+		"Usage: %s -f file -M maxsiz -i initsiz -m minchunk", argv[0]);
+	    exit(1);
+	}
+
     }
     if (!fp) {
 	fprintf(stderr,
-		"%s pummels %s\n%s . o O ( You't supply a valid tracefile.)\n",
-			argv[0], getenv("USER"), argv[0]);
+	    "%s pummels %s\n%s . o O ( You't supply a valid tracefile.)\n",
+	    argv[0], getenv("USER"), argv[0]);
 	exit(1);
     }
 #ifdef WITH_LIB
     sizeToPoolInit();
 #endif
-    mem_table = hash_create(ptrcmp, 229, hash4);         /* small hash table */
+    mem_table = hash_create(ptrcmp, 229, hash4);	/* small hash table */
     init_stats();
-    while (fgets(mbuf, 256, fp)!=NULL) {
-	if (run_stats>0 && (++a)%run_stats==0) print_stats();
-	p=NULL;
-	switch(mbuf[0]) {
-	case 'm': /* malloc */
-	   p=strtok(&mbuf[2],":");
-	   if (!p) badformat();
-	   size=atoi(p);
-	   p=strtok(NULL,"\n");
-	   if (!p) badformat();
-	   mi=malloc(sizeof(memitem)); 
-	   strcpy(mi->orig_ptr,p);
-	   mi->size=size;
-	   size2id(size,mi);
-	   mi->my_ptr = xmemAlloc(mi); /* (void *)xmalloc(size); */
-	   assert(mi->my_ptr);
-	   my_hash_insert(mem_table, mi->orig_ptr, mi);
-	   mstat.mallocs++;
-	   break;
-	case 'c': /* calloc */
-	   p=strtok(&mbuf[2],":");
-	   if (!p) badformat();
-	   amt=atoi(p);
-	   p=strtok(NULL,":");
-	   if (!p) badformat();
-	   size=atoi(p);
-	   p=strtok(NULL,"\n");
-	   if (!p) badformat();
-           mi=malloc(sizeof(memitem));
-	   strcpy(mi->orig_ptr,p);
-	   size2id(size,mi);
-           mi->size=amt*size;
-           mi->my_ptr= xmemAlloc(mi); /*(void *)xmalloc(amt*size);*/
-	   assert(mi->my_ptr);
-	   my_hash_insert(mem_table, mi->orig_ptr, mi);
-	   mstat.callocs++;
-	   break;
+    while (fgets(mbuf, 256, fp) != NULL) {
+	if (run_stats > 0 && (++a) % run_stats == 0)
+	    print_stats();
+	p = NULL;
+	switch (mbuf[0]) {
+	case 'm':		/* malloc */
+	    p = strtok(&mbuf[2], ":");
+	    if (!p)
+		badformat();
+	    size = atoi(p);
+	    p = strtok(NULL, "\n");
+	    if (!p)
+		badformat();
+	    mi = malloc(sizeof(memitem));
+	    strcpy(mi->orig_ptr, p);
+	    mi->size = size;
+	    size2id(size, mi);
+	    mi->my_ptr = xmemAlloc(mi);		/* (void *)xmalloc(size); */
+	    assert(mi->my_ptr);
+	    my_hash_insert(mem_table, mi->orig_ptr, mi);
+	    mstat.mallocs++;
+	    break;
+	case 'c':		/* calloc */
+	    p = strtok(&mbuf[2], ":");
+	    if (!p)
+		badformat();
+	    amt = atoi(p);
+	    p = strtok(NULL, ":");
+	    if (!p)
+		badformat();
+	    size = atoi(p);
+	    p = strtok(NULL, "\n");
+	    if (!p)
+		badformat();
+	    mi = malloc(sizeof(memitem));
+	    strcpy(mi->orig_ptr, p);
+	    size2id(size, mi);
+	    mi->size = amt * size;
+	    mi->my_ptr = xmemAlloc(mi);		/*(void *)xmalloc(amt*size); */
+	    assert(mi->my_ptr);
+	    my_hash_insert(mem_table, mi->orig_ptr, mi);
+	    mstat.callocs++;
+	    break;
 	case 'r':
-           p=strtok(&mbuf[2],":");
-	   if (!p) badformat();
-	   strcpy(abuf,p);
-           p=strtok(NULL,":");
-	   if (!p) badformat();
-	   mem_entry=hash_lookup(mem_table, p);
-           if (mem_entry==NULL) {
-                fprintf(stderr,"invalid realloc (%s)!\n",p);
+	    p = strtok(&mbuf[2], ":");
+	    if (!p)
+		badformat();
+	    strcpy(abuf, p);
+	    p = strtok(NULL, ":");
+	    if (!p)
+		badformat();
+	    mem_entry = hash_lookup(mem_table, p);
+	    if (mem_entry == NULL) {
+		fprintf(stderr, "invalid realloc (%s)!\n", p);
 		break;
-           }
-	   mi=(memitem *)(mem_entry->item);
-	   assert(mi->pool);
-	   assert(mi->my_ptr);
-	   xmemFree(mi); /* xfree(mi->my_ptr); */
-	   size2id(atoi(p),mi);   /* we don't need it here I guess? */
-           strcpy(mi->orig_ptr,abuf);
-	   p=strtok(NULL,"\n");
-	   if (!p) badformat();
-	   mi->my_ptr= xmemAlloc(mi); /* (char *)xmalloc(atoi(p)); */
-	   assert(mi->my_ptr);
-	   mstat.reallocs++;
-	   break;
+	    }
+	    mi = (memitem *) (mem_entry->item);
+	    assert(mi->pool);
+	    assert(mi->my_ptr);
+	    xmemFree(mi);	/* xfree(mi->my_ptr); */
+	    size2id(atoi(p), mi);	/* we don't need it here I guess? */
+	    strcpy(mi->orig_ptr, abuf);
+	    p = strtok(NULL, "\n");
+	    if (!p)
+		badformat();
+	    mi->my_ptr = xmemAlloc(mi);		/* (char *)xmalloc(atoi(p)); */
+	    assert(mi->my_ptr);
+	    mstat.reallocs++;
+	    break;
 	case 'f':
-	   p=strtok(&mbuf[2],"\n");
-	   mem_entry=hash_lookup(mem_table, p);		
-	   if (mem_entry==NULL) {
-		if (p[0]!='0')
-		fprintf(stderr,"invalid free (%s) at line %d!\n",p,a);
+	    p = strtok(&mbuf[2], "\n");
+	    mem_entry = hash_lookup(mem_table, p);
+	    if (mem_entry == NULL) {
+		if (p[0] != '0')
+		    fprintf(stderr, "invalid free (%s) at line %d!\n", p, a);
 		break;
-	   }
-	   mi=(memitem *)(mem_entry->item);
-	   assert(mi->pool);
-	   assert(mi->my_ptr);
-	   xmemFree(mi); /* xfree(mi->my_ptr); */ 
-	   hash_unlink(mem_table, mem_entry, 1);
-	   free(mi);
-	   mstat.frees++;
-	   break;
+	    }
+	    mi = (memitem *) (mem_entry->item);
+	    assert(mi->pool);
+	    assert(mi->my_ptr);
+	    xmemFree(mi);	/* xfree(mi->my_ptr); */
+	    hash_unlink(mem_table, mem_entry, 1);
+	    free(mi);
+	    mstat.frees++;
+	    break;
 	default:
-		fprintf(stderr,"%s pummels %s.bad.format\n", argv[0],fn);
-		exit(1);
+	    fprintf(stderr, "%s pummels %s.bad.format\n", argv[0], fn);
+	    exit(1);
 	}
 
     }
@@ -216,19 +225,19 @@ main(int argc,char **argv)
 void *
 my_xmalloc(size_t a)
 {
-	return NULL;
+    return NULL;
 }
 
 void *
 my_xcalloc(int a, size_t b)
 {
-	return NULL;
+    return NULL;
 }
 
 int
 my_xfree(void *p)
 {
-	return 0;
+    return 0;
 }
 void
 init_stats()
@@ -240,59 +249,59 @@ void
 print_stats()
 {
 #ifdef WITH_LIB
-        memReport(stdout); 
+    memReport(stdout);
 #endif
-	getrusage(RUSAGE_SELF, &myusage);
-	printf("m/c/f/r=%d/%d/%d/%d\n",mstat.mallocs,mstat.callocs,
-					mstat.frees, mstat.reallocs);
+    getrusage(RUSAGE_SELF, &myusage);
+    printf("m/c/f/r=%d/%d/%d/%d\n", mstat.mallocs, mstat.callocs,
+	mstat.frees, mstat.reallocs);
 #if 0
-	printf("types                 : %d\n",size2id_len);
+    printf("types                 : %d\n", size2id_len);
 #endif
-	printf("user time used        : %d.%d\n", (int)myusage.ru_utime.tv_sec,
-						(int)myusage.ru_utime.tv_usec);
-	printf("system time used      : %d.%d\n", (int)myusage.ru_stime.tv_sec,
-                                                (int)myusage.ru_stime.tv_usec);
-	printf("max resident set size : %d\n",(int)myusage.ru_maxrss);
-	printf("page faults           : %d\n", (int)myusage.ru_majflt);
+    printf("user time used        : %d.%d\n", (int) myusage.ru_utime.tv_sec,
+	(int) myusage.ru_utime.tv_usec);
+    printf("system time used      : %d.%d\n", (int) myusage.ru_stime.tv_sec,
+	(int) myusage.ru_stime.tv_usec);
+    printf("max resident set size : %d\n", (int) myusage.ru_maxrss);
+    printf("page faults           : %d\n", (int) myusage.ru_majflt);
 }
 
 void
-size2id(size_t sz,memitem *mi)
+size2id(size_t sz, memitem * mi)
 {
 #ifdef WITH_LIB
-	mi->pool = sizeToPool(sz);
-	assert(mi->pool);
+    mi->pool = sizeToPool(sz);
+    assert(mi->pool);
 #endif
-	return;
+    return;
 }
 
 void
 badformat()
 {
-    fprintf(stderr,"pummel.bad.format\n");
+    fprintf(stderr, "pummel.bad.format\n");
     exit(1);
 }
 
 /* unused code, saved for parts */
 const char *
 make_nam(int id, int size)
 {
-    const char *buf = malloc(30); /* argh */
-    sprintf((char *)buf, "pl:%d/%d", id, size);
+    const char *buf = malloc(30);	/* argh */
+    sprintf((char *) buf, "pl:%d/%d", id, size);
     return buf;
 }
 
 void
-my_hash_insert(hash_table *h, const char *k, memitem *item)
-{	
-	memitem *l;
-	assert( item->pool);
-	assert( item->my_ptr);	
-	hash_insert(h,k,item);
+my_hash_insert(hash_table * h, const char *k, memitem * item)
+{
+    memitem *l;
+    assert(item->pool);
+    assert(item->my_ptr);
+    hash_insert(h, k, item);
 }
 
 static void *
-xmemAlloc(memitem *item)
+xmemAlloc(memitem * item)
 {
     extern MemPool *StringPool;
     assert(item && item->pool);
@@ -303,23 +312,24 @@ xmemAlloc(memitem *item)
 }
 
 static void
-xmemFree(memitem *item)
+xmemFree(memitem * item)
 {
     extern MemPool *StringPool;
     assert(item && item->pool);
     if (StringPool == item->pool)
-        return memStringFree(item->pool, item->my_ptr, item->size);
+	return memStringFree(item->pool, item->my_ptr, item->size);
     else
-        return memFree(item->pool, item->my_ptr);
+	return memFree(item->pool, item->my_ptr);
 }
 
-void my_free(char *file, int line, void *ptr)
+void 
+my_free(char *file, int line, void *ptr)
 {
 #if 0
-fprintf(stderr,"{%s:%d:%p",file,line,ptr);
+    fprintf(stderr, "{%s:%d:%p", file, line, ptr);
 #endif
-free(ptr);
-#if 0 
-fprintf(stderr,"}\n");
+    free(ptr);
+#if 0
+    fprintf(stderr, "}\n");
 #endif
 }
@@ -167,7 +167,6 @@ sig_intr(int sig)
 }
 
 int
-
 open_http_socket(void)
 {
     int s;
@@ -191,7 +190,7 @@ open_http_socket(void)
 int
 send_request(int fd, const char *data)
 {
-    char msg[4096],buf[4096];
+    char msg[4096], buf[4096];
     int len;
     time_t w;
     struct _r *r;
@@ -200,24 +199,24 @@ send_request(int fd, const char *data)
     char *tmp = strdup(data);
     struct stat st;
     int file_fd = -1;
-    method=strtok(tmp, " ");
-    url=strtok(NULL, " ");
-    file=strtok(NULL, " ");
-    size=strtok(NULL, " ");
-    checksum=strtok(NULL, " ");
+    method = strtok(tmp, " ");
+    url = strtok(NULL, " ");
+    file = strtok(NULL, " ");
+    size = strtok(NULL, " ");
+    checksum = strtok(NULL, " ");
     if (!url) {
-      url=method;
-      method="GET";
+	url = method;
+	method = "GET";
     }
-    if (file && strcmp(file,"-")==0)
-	file=NULL;
-    if (size && strcmp(size,"-")==0)
-	size=NULL;
-    if (checksum && strcmp(checksum,"-")==0)
-	checksum=NULL;
+    if (file && strcmp(file, "-") == 0)
+	file = NULL;
+    if (size && strcmp(size, "-") == 0)
+	size = NULL;
+    if (checksum && strcmp(checksum, "-") == 0)
+	checksum = NULL;
     msg[0] = '\0';
     sprintf(buf, "%s %s HTTP/1.0\r\n", method, url);
-    strcat(msg,buf);
+    strcat(msg, buf);
     strcat(msg, "Accept: */*\r\n");
     strcat(msg, "Proxy-Connection: Keep-Alive\r\n");
     if (opt_ims && (lrand48() & 0x03) == 0) {
@@ -226,11 +225,11 @@ send_request(int fd, const char *data)
 	strcat(msg, buf);
     }
     if (file) {
-	if ( (file_fd = open(file,O_RDONLY)) < 0) {
+	if ((file_fd = open(file, O_RDONLY)) < 0) {
 	    perror("open");
 	    return -1;
 	}
-	if ( fstat(file_fd, &st) ) {
+	if (fstat(file_fd, &st)) {
 	    perror("fstat");
 	    close(file_fd);
 	    return -1;
@@ -247,7 +246,7 @@ send_request(int fd, const char *data)
 	return -1;
     }
     if (file) {
-	while((len=read(file_fd, buf, sizeof buf)) > 0) {
+	while ((len = read(file_fd, buf, sizeof buf)) > 0) {
 	    if (write(fd, buf, len) < 0) {
 		close(fd);
 		perror("body write");
@@ -302,8 +301,8 @@ get_header_string_value(const char *hdr, const char *buf, const char *end)
 	    t += strlen(hdr);
 	    while (isspace(*t))
 		t++;
-	    strcpy(result,"");
-	    strncat(result,t,strcspn(t, crlf));
+	    strcpy(result, "");
+	    strncat(result, t, strcspn(t, crlf));
 	    return result;
 	}
     }
@@ -315,20 +314,20 @@ request_done(struct _r *r)
 {
 #if 0
     fprintf(stderr, "DONE: %s, (%d+%d)\n",
-	    r->url,
-	    r->hdr_length,
-	    r->content_length);
+	r->url,
+	r->hdr_length,
+	r->content_length);
 #endif
     if (r->content_length != r->bytes_read)
 	fprintf(stderr, "ERROR! Short reply, expected %d bytes got %d\n",
 	    r->content_length, r->bytes_read);
     else if (r->validsize >= 0) {
 	if (r->validsize != r->bytes_read)
 	    fprintf(stderr, "WARNING: %s Object size mismatch, expected %d got %d\n",
-		    r->url, r->validsize, r->bytes_read);
+		r->url, r->validsize, r->bytes_read);
 	else if (opt_checksum && r->sum != r->validsum)
 	    fprintf(stderr, "WARNING: %s Checksum error. Expected %d got %d\n",
-		    r->url, r->validsum, r->sum);
+		r->url, r->validsum, r->sum);
     }
 }
 int
@@ -338,19 +337,19 @@ handle_read(char *inbuf, int len)
     const char *end;
     const char *url;
     static char buf[READ_BUF_SZ];
-    int hlen,blen;
-    if (len < 0 ) {
+    int hlen, blen;
+    if (len < 0) {
 	perror("read");
 	Requests = r->next;
 	request_done(r);
 	free(r);
 	noutstanding--;
 	if (trace_fd >= 0)
-	    write(trace_fd,"\n[CLOSED]\n",10);
+	    write(trace_fd, "\n[CLOSED]\n", 10);
 	return -1;
     }
     total_bytes_read += len;
-    xmemcpy(buf,inbuf,len);
+    xmemcpy(buf, inbuf, len);
     if (len == 0) {
 	fprintf(stderr, "WARNING: %s, server closed socket after %d+%d bytes\n", r->url, r->hdr_offset, r->bytes_read);
 	/* XXX, If no data was received and it isn't the first request on this
@@ -379,11 +378,12 @@ handle_read(char *inbuf, int len)
 	/* Process headers */
 	if (r->hdr_length == 0 && (end = mime_headers_end(r->reply_hdrs)) != NULL) {
 #if 0
-	    fprintf(stderr, "FOUND EOH FOR %s\n", r->url); */
+	    fprintf(stderr, "FOUND EOH FOR %s\n", r->url);
+	    */
 #endif
-	    r->hdr_length = end - r->reply_hdrs;
+		r->hdr_length = end - r->reply_hdrs;
 #if 0
- 	    fprintf(stderr, "HDR_LENGTH = %d\n", r->hdr_length);
+	    fprintf(stderr, "HDR_LENGTH = %d\n", r->hdr_length);
 #endif
 	    /* "unread" any body contents received */
 	    blen = r->hdr_offset - r->hdr_length;
@@ -393,20 +393,20 @@ handle_read(char *inbuf, int len)
 		xmemcpy(buf, r->reply_hdrs + r->hdr_length, blen);
 		len += blen;
 	    }
-	    r->reply_hdrs[r->hdr_length]='\0'; /* Null terminate headers */
+	    r->reply_hdrs[r->hdr_length] = '\0';	/* Null terminate headers */
 	    /* Parse headers */
 	    r->content_length = get_header_int_value("content-length:", r->reply_hdrs, end);
-/*	    fprintf(stderr, "CONTENT_LENGTH = %d\n", r->content_length); */
+/*          fprintf(stderr, "CONTENT_LENGTH = %d\n", r->content_length); */
 	    url = get_header_string_value("X-Request-URI:", r->reply_hdrs, end);
 	    if (url != NULL && strcmp(r->url, url) != 0)
 		fprintf(stderr, "WARNING: %s got reply %s\n", r->url, url);
 #if XREQUESTURI || 0
-	    fprintf(stderr, "LOCATION = %s\n", get_header_string_value("X-Request-URI:", r->reply_hdrs, end));  
+	    fprintf(stderr, "LOCATION = %s\n", get_header_string_value("X-Request-URI:", r->reply_hdrs, end));
 #endif
 	}
-	if ( !(len==0 || r->hdr_length > 0) ) {
+	if (!(len == 0 || r->hdr_length > 0)) {
 	    fprintf(stderr, "ERROR!!!\n");
-	    assert((len==0 || r->hdr_length > 0));
+	    assert((len == 0 || r->hdr_length > 0));
 	}
 	/* Process body */
 	if (r->hdr_length != 0) {
@@ -415,14 +415,14 @@ handle_read(char *inbuf, int len)
 	    if (r->content_length >= 0) {
 		bytes_left = r->content_length - r->bytes_read;
 		assert(bytes_left >= 0);
-	    	bytes_used = len < bytes_left ? len : bytes_left;
+		bytes_used = len < bytes_left ? len : bytes_left;
 	    } else {
-		bytes_left = len + 1; /* Unknown end... */
+		bytes_left = len + 1;	/* Unknown end... */
 		bytes_used = len;
 	    }
 	    if (opt_checksum) {
-		for(i=0; i<bytes_used; i++)
-		    r->sum += (int)buf[i] & 0xFF;
+		for (i = 0; i < bytes_used; i++)
+		    r->sum += (int) buf[i] & 0xFF;
 	    }
 	    r->bytes_read += bytes_used;
 	    len -= bytes_used;
@@ -462,7 +462,7 @@ main_loop(void)
     static int pconn_fd = -1;
     static char buf[8192];
     struct timeval to;
-    struct timeval now,last,start;
+    struct timeval now, last, start;
     fd_set R;
     struct _r *r;
     struct _r *nextr;
@@ -480,25 +480,25 @@ main_loop(void)
     }
     while (!done_reading_urls || noutstanding) {
 	if (!opt_reopen && pconn_fd < 0) {
-	    fprintf(stderr,"TERMINATED: Connection closed\n");
+	    fprintf(stderr, "TERMINATED: Connection closed\n");
 	    break;
 	}
-	if (pconn_fd<0) {
+	if (pconn_fd < 0) {
 	    pconn_fd = open_http_socket();
 	    if (pconn_fd < 0) {
 		perror("socket");
 		exit(1);
 	    }
 	    nextr = Requests;
 	    Requests = NULL;
-	    noutstanding=0;
+	    noutstanding = 0;
 	    while ((r = nextr) != NULL) {
 		nextr = r->next;
 		if (send_request(pconn_fd, r->url) != 0) {
 		    close(pconn_fd);
-		    pconn_fd=-1;
+		    pconn_fd = -1;
 		    nextr = r;
-		    for (r = Requests; r!=NULL && r->next; r=r->next);
+		    for (r = Requests; r != NULL && r->next; r = r->next);
 		    if (r != NULL)
 			r->next = nextr;
 		    else
@@ -508,7 +508,7 @@ main_loop(void)
 		free(r);
 	    }
 	    timeouts = 0;
-	    if (pconn_fd <0)
+	    if (pconn_fd < 0)
 		continue;
 	}
 	if (timeouts == 200) {
@@ -520,7 +520,7 @@ main_loop(void)
 	    free(r);
 	    noutstanding--;
 	}
-	if (pconn_fd>=0 && noutstanding < max_outstanding && !done_reading_urls) {
+	if (pconn_fd >= 0 && noutstanding < max_outstanding && !done_reading_urls) {
 	    char *t;
 	    if (fgets(buf, 8191, stdin) == NULL) {
 		fprintf(stderr, "Done Reading URLS\n");
@@ -532,7 +532,7 @@ main_loop(void)
 		*t = '\0';
 	    if (send_request(pconn_fd, buf) != 0) {
 		close(pconn_fd);
-		pconn_fd=-1;
+		pconn_fd = -1;
 		continue;
 	    }
 	    nrequests++;
@@ -560,21 +560,22 @@ main_loop(void)
 		pconn_fd = -1;
 	}
 	gettimeofday(&now, NULL);
-        if (now.tv_sec > last.tv_sec) {
+	if (now.tv_sec > last.tv_sec) {
 	    int dt;
 	    int nreq;
 	    last = now;
 	    dt = (int) (now.tv_sec - start.tv_sec);
-	    nreq=0;
-	    for (r=Requests; r ; r=r->next) nreq++;
+	    nreq = 0;
+	    for (r = Requests; r; r = r->next)
+		nreq++;
 	    printf("T+ %6d: %9d req (%+4d), %4d pend, %3d/sec avg, %dmb, %dkb/sec avg\n",
-		    dt,
-		    nrequests,
-		    reqpersec,
-		    nreq,
-		    (int) (nrequests / dt),
-		    (int)total_bytes_read / 1024 / 1024,
-		    (int)total_bytes_read / 1024 / dt);
+		dt,
+		nrequests,
+		reqpersec,
+		nreq,
+		(int) (nrequests / dt),
+		(int) total_bytes_read / 1024 / 1024,
+		(int) total_bytes_read / 1024 / dt);
 	    reqpersec = 0;
 	}
     }
@@ -616,7 +617,7 @@ main(argc, argv)
 	    lifetime = (time_t) atoi(optarg);
 	    break;
 	case 't':
-	    trace_fd = open(optarg,O_WRONLY|O_CREAT|O_TRUNC,0666);
+	    trace_fd = open(optarg, O_WRONLY | O_CREAT | O_TRUNC, 0666);
 	    break;
 	case 'r':
 	    opt_reopen = !opt_reopen;
@@ -382,7 +382,7 @@ main(int argc, char *argv[])
     signal(SIGCHLD, sig_child);
     create_children(argv);
     parent_main_loop();
-    for (i=3;i<=maxfd; i++)
+    for (i = 3; i <= maxfd; i++)
 	close(i);
     sleep(1);
 }
@@ -4,21 +4,21 @@
 int
 main(int argc, char *argv[])
 {
-	int i;
-	struct timeval now;
-	struct timeval alarm;
-	struct timeval to;
-	assert(argc == 2);
-	i = atoi(argv[1]);
-	gettimeofday(&now, NULL);
-	alarm.tv_sec = now.tv_sec + i + (now.tv_sec % i);
-	alarm.tv_usec = 0;
-	to.tv_sec = alarm.tv_sec - now.tv_sec;
-	to.tv_usec = alarm.tv_usec - now.tv_usec;
-	if (to.tv_usec < 0) {
-		to.tv_usec += 1000000;
-		to.tv_sec -= 1;
-	}
-	select(1, NULL, NULL, NULL, &to);
-	return 0;
+    int i;
+    struct timeval now;
+    struct timeval alarm;
+    struct timeval to;
+    assert(argc == 2);
+    i = atoi(argv[1]);
+    gettimeofday(&now, NULL);
+    alarm.tv_sec = now.tv_sec + i + (now.tv_sec % i);
+    alarm.tv_usec = 0;
+    to.tv_sec = alarm.tv_sec - now.tv_sec;
+    to.tv_usec = alarm.tv_usec - now.tv_usec;
+    if (to.tv_usec < 0) {
+	to.tv_usec += 1000000;
+	to.tv_sec -= 1;
+    }
+    select(1, NULL, NULL, NULL, &to);
+    return 0;
 }