----++++src/cache_cf.cc
@@ -2291,17 +2291,14 @@ free_peer(CachePeer ** P)
 static void
 dump_cachemgrpasswd(StoreEntry * entry, const char *name, Mgr::ActionPasswordList * list)
 {
-    wordlist *w;
-
-    while (list != NULL) {
+    while (list) {
         if (strcmp(list-&gt;passwd, &quot;none&quot;) &amp;&amp; strcmp(list-&gt;passwd, &quot;disable&quot;))
             storeAppendPrintf(entry, &quot;%s XXXXXXXXXX&quot;, name);
         else
             storeAppendPrintf(entry, &quot;%s %s&quot;, name, list-&gt;passwd);
 
-        for (w = list-&gt;actions; w != NULL; w = w-&gt;next) {
-            storeAppendPrintf(entry, &quot; %s&quot;, w-&gt;key);
-        }
+        for (auto w : list-&gt;actions)
+            entry-&gt;appendf(&quot; &quot; SQUIDSBUFPH, SQUIDSBUFPRINT(w));
 
         storeAppendPrintf(entry, &quot;\n&quot;);
         list = list-&gt;next;
@@ -2311,16 +2308,16 @@ dump_cachemgrpasswd(StoreEntry * entry, const char *name, Mgr::ActionPasswordLis
 static void
 parse_cachemgrpasswd(Mgr::ActionPasswordList ** head)
 {
-    char *passwd = NULL;
-    wordlist *actions = NULL;
-    Mgr::ActionPasswordList *p;
-    Mgr::ActionPasswordList **P;
+    char *passwd = nullptr;
     parse_string(&amp;passwd);
-    parse_wordlist(&amp;actions);
-    p = new Mgr::ActionPasswordList;
+
+    Mgr::ActionPasswordList *p = new Mgr::ActionPasswordList;
     p-&gt;passwd = passwd;
-    p-&gt;actions = actions;
 
+    while (char *token = ConfigParser::NextQuotedToken())
+        p-&gt;actions.push_back(SBuf(token));
+
+    Mgr::ActionPasswordList **P;
     for (P = head; *P; P = &amp;(*P)-&gt;next) {
         /*
          * See if any of the actions from this line already have a
@@ -2330,15 +2327,12 @@ parse_cachemgrpasswd(Mgr::ActionPasswordList ** head)
          * requested action.  Thus, we should warn users who might
          * think they can have two passwords for the same action.
          */
-        wordlist *w;
-        wordlist *u;
-
-        for (w = (*P)-&gt;actions; w; w = w-&gt;next) {
-            for (u = actions; u; u = u-&gt;next) {
-                if (strcmp(w-&gt;key, u-&gt;key))
+        for (const auto &amp;w : (*P)-&gt;actions) {
+            for (const auto &amp;u : p-&gt;actions) {
+                if (w != u)
                     continue;
 
-                debugs(0, DBG_CRITICAL, "WARNING: action '" &lt;&lt; u-&gt;key &lt;&lt; "' (line " &lt;&lt; config_lineno &lt;&lt; ") already has a password");
+                debugs(0, DBG_PARSE_NOTE(1), "ERROR: action '" &lt;&lt; u &lt;&lt; "' (line " &lt;&lt; config_lineno &lt;&lt; ") already has a password");
             }
         }
     }
@@ -2349,14 +2343,8 @@ parse_cachemgrpasswd(Mgr::ActionPasswordList ** head)
 static void
 free_cachemgrpasswd(Mgr::ActionPasswordList ** head)
 {
-    Mgr::ActionPasswordList *p;
-
-    while ((p = *head) != NULL) {
-        *head = p-&gt;next;
-        xfree(p-&gt;passwd);
-        wordlistDestroy(&amp;p-&gt;actions);
-        xfree(p);
-    }
+    delete *head;
+    *head = nullptr;
 }
 
 static void
----++++src/cache_manager.cc
@@ -445,14 +445,13 @@ CacheManager::ActionProtection(const Mgr::ActionProfile::Pointer &amp;profile)
 char *
 CacheManager::PasswdGet(Mgr::ActionPasswordList * a, const char *action)
 {
-    wordlist *w;
-
-    while (a != NULL) {
-        for (w = a-&gt;actions; w != NULL; w = w-&gt;next) {
-            if (0 == strcmp(w-&gt;key, action))
+    while (a) {
+        for (auto &amp;w : a-&gt;actions) {
+            if (w.cmp(action) == 0)
                 return a-&gt;passwd;
 
-            if (0 == strcmp(w-&gt;key, &quot;all&quot;))
+            static const SBuf allAction(&quot;all&quot;);
+            if (w == allAction)
                 return a-&gt;passwd;
         }
 
----++++src/mgr/ActionPasswordList.cc
@@ -8,12 +8,11 @@
 
 #include &quot;squid.h&quot;
 #include &quot;mgr/ActionPasswordList.h&quot;
-#include "wordlist.h"
+#include "sbuf/List.h"
 
 Mgr::ActionPasswordList::~ActionPasswordList()
 {
-    safe_free(passwd);
-    wordlistDestroy(&amp;actions);
-    delete next;
+    xfree(passwd);
+    delete next; // recurse, these lists are usually not long
 }
 
----++++src/mgr/ActionPasswordList.h
@@ -9,7 +9,7 @@
 #ifndef SQUID_MGR_CACHEMGRPASSWD_H_
 #define SQUID_MGR_CACHEMGRPASSWD_H_
 
-class wordlist;
+#include "sbuf/forward.h"
 
 namespace Mgr
 {
@@ -18,12 +18,11 @@ namespace Mgr
 class ActionPasswordList
 {
 public:
-    ActionPasswordList() : passwd(NULL), actions(NULL), next(NULL) {}
     ~ActionPasswordList();
 
-    char *passwd;
-    wordlist *actions;
-    ActionPasswordList *next;
+    char *passwd = nullptr;
+    SBufList actions;
+    ActionPasswordList *next = nullptr;
 };
 
 } //namespace Mgr
----++++GitHub