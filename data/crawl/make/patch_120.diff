diff --git a/w32/compat/dirent.c b/w32/compat/dirent.c
index 0664a16..6e88933 100644
--- a/w32/compat/dirent.c
+++ b/w32/compat/dirent.c
@@ -1,206 +1,206 @@
-/* Directory entry code for Window platforms.
-Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006, 2007 Free Software Foundation, Inc.
-This file is part of GNU Make.
-
-GNU Make is free software; you can redistribute it and/or modify it under the
-terms of the GNU General Public License as published by the Free Software
-Foundation; either version 3 of the License, or (at your option) any later
-version.
-
-GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with
-this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <errno.h>
-#include <string.h>
-#include <stdlib.h>
-#include "dirent.h"
-
-
-DIR*
-opendir(const char* pDirName)
-{
-	struct stat sb;
-	DIR*	pDir;
-	char*	pEndDirName;
-	int	nBufferLen;
-
-	/* sanity checks */
-	if (!pDirName) {
-		errno = EINVAL;
-		return NULL;
-	}
-	if (stat(pDirName, &sb) != 0) {
-		errno = ENOENT;
-		return NULL;
-	}
-	if ((sb.st_mode & S_IFMT) != S_IFDIR) {
-		errno = ENOTDIR;
-		return NULL;
-	}
-
-	/* allocate a DIR structure to return */
-	pDir = (DIR *) malloc(sizeof (DIR));
-
-	if (!pDir)
-		return NULL;
-
-	/* input directory name length */
-	nBufferLen = strlen(pDirName);
-
-	/* copy input directory name to DIR buffer */
-	strcpy(pDir->dir_pDirectoryName, pDirName);
-
-	/* point to end of the copied directory name */
-	pEndDirName = &pDir->dir_pDirectoryName[nBufferLen - 1];
-
-	/* if directory name did not end in '/' or '\', add '/' */
-	if ((*pEndDirName != '/') && (*pEndDirName != '\\')) {
-		pEndDirName++;
-		*pEndDirName = '/';
-	}
-
-	/* now append the wildcard character to the buffer */
-	pEndDirName++;
-	*pEndDirName = '*';
-	pEndDirName++;
-	*pEndDirName = '\0';
-
-	/* other values defaulted */
-	pDir->dir_nNumFiles = 0;
-	pDir->dir_hDirHandle = INVALID_HANDLE_VALUE;
-	pDir->dir_ulCookie = __DIRENT_COOKIE;
-
-	return pDir;
-}
-
-void
-closedir(DIR *pDir)
-{
-	/* got a valid pointer? */
-	if (!pDir) {
-		errno = EINVAL;
-		return;
-	}
-
-	/* sanity check that this is a DIR pointer */
-	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
-		errno = EINVAL;
-		return;
-	}
-
-	/* close the WINDOWS32 directory handle */
-	if (pDir->dir_hDirHandle != INVALID_HANDLE_VALUE)
-		FindClose(pDir->dir_hDirHandle);
-
-	free(pDir);
-
-	return;
-}
-
-struct dirent *
-readdir(DIR* pDir)
-{
-	WIN32_FIND_DATA wfdFindData;
-
-	if (!pDir) {
-		errno = EINVAL;
-		return NULL;
-	}
-
-	/* sanity check that this is a DIR pointer */
-	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
-		errno = EINVAL;
-		return NULL;
-	}
-
-	if (pDir->dir_nNumFiles == 0) {
-		pDir->dir_hDirHandle = FindFirstFile(pDir->dir_pDirectoryName, &wfdFindData);
-		if (pDir->dir_hDirHandle == INVALID_HANDLE_VALUE)
-			return NULL;
-	} else if (!FindNextFile(pDir->dir_hDirHandle, &wfdFindData))
-			return NULL;
-
-	/* bump count for next call to readdir() or telldir() */
-	pDir->dir_nNumFiles++;
-
-	/* fill in struct dirent values */
-	pDir->dir_sdReturn.d_ino = -1;
-	strcpy(pDir->dir_sdReturn.d_name, wfdFindData.cFileName);
-
-	return &pDir->dir_sdReturn;
-}
-
-void
-rewinddir(DIR* pDir)
-{
-	if (!pDir) {
-		errno = EINVAL;
-		return;
-	}
-
-	/* sanity check that this is a DIR pointer */
-	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
-		errno = EINVAL;
-		return;
-	}
-
-	/* close the WINDOWS32 directory handle */
-	if (pDir->dir_hDirHandle != INVALID_HANDLE_VALUE)
-		if (!FindClose(pDir->dir_hDirHandle))
-			errno = EBADF;
-
-	/* reset members which control readdir() */
-	pDir->dir_hDirHandle = INVALID_HANDLE_VALUE;
-	pDir->dir_nNumFiles = 0;
-
-	return;
-}
-
-int
-telldir(DIR* pDir)
-{
-	if (!pDir) {
-		errno = EINVAL;
-		return -1;
-	}
-
-	/* sanity check that this is a DIR pointer */
-	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
-		errno = EINVAL;
-		return -1;
-	}
-
-	/* return number of times readdir() called */
-	return pDir->dir_nNumFiles;
-}
-
-void
-seekdir(DIR* pDir, long nPosition)
-{
-	if (!pDir)
-		return;
-
-	/* sanity check that this is a DIR pointer */
-	if (pDir->dir_ulCookie != __DIRENT_COOKIE)
-		return;
-
-	/* go back to beginning of directory */
-	rewinddir(pDir);
-
-	/* loop until we have found position we care about */
-	for (--nPosition; nPosition && readdir(pDir); nPosition--);
-
-	/* flag invalid nPosition value */
-	if (nPosition)
-		errno = EINVAL;
-
-	return;
-}
+/* Directory entry code for Window platforms.
+Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+2006, 2007 Free Software Foundation, Inc.
+This file is part of GNU Make.
+
+GNU Make is free software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the Free Software
+Foundation; either version 3 of the License, or (at your option) any later
+version.
+
+GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with
+this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <errno.h>
+#include <string.h>
+#include <stdlib.h>
+#include "dirent.h"
+
+
+DIR*
+opendir(const char* pDirName)
+{
+	struct stat sb;
+	DIR*	pDir;
+	char*	pEndDirName;
+	int	nBufferLen;
+
+	/* sanity checks */
+	if (!pDirName) {
+		errno = EINVAL;
+		return NULL;
+	}
+	if (stat(pDirName, &sb) != 0) {
+		errno = ENOENT;
+		return NULL;
+	}
+	if ((sb.st_mode & S_IFMT) != S_IFDIR) {
+		errno = ENOTDIR;
+		return NULL;
+	}
+
+	/* allocate a DIR structure to return */
+	pDir = (DIR *) malloc(sizeof (DIR));
+
+	if (!pDir)
+		return NULL;
+
+	/* input directory name length */
+	nBufferLen = strlen(pDirName);
+
+	/* copy input directory name to DIR buffer */
+	strcpy(pDir->dir_pDirectoryName, pDirName);
+
+	/* point to end of the copied directory name */
+	pEndDirName = &pDir->dir_pDirectoryName[nBufferLen - 1];
+
+	/* if directory name did not end in '/' or '\', add '/' */
+	if ((*pEndDirName != '/') && (*pEndDirName != '\\')) {
+		pEndDirName++;
+		*pEndDirName = '/';
+	}
+
+	/* now append the wildcard character to the buffer */
+	pEndDirName++;
+	*pEndDirName = '*';
+	pEndDirName++;
+	*pEndDirName = '\0';
+
+	/* other values defaulted */
+	pDir->dir_nNumFiles = 0;
+	pDir->dir_hDirHandle = INVALID_HANDLE_VALUE;
+	pDir->dir_ulCookie = __DIRENT_COOKIE;
+
+	return pDir;
+}
+
+void
+closedir(DIR *pDir)
+{
+	/* got a valid pointer? */
+	if (!pDir) {
+		errno = EINVAL;
+		return;
+	}
+
+	/* sanity check that this is a DIR pointer */
+	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
+		errno = EINVAL;
+		return;
+	}
+
+	/* close the WINDOWS32 directory handle */
+	if (pDir->dir_hDirHandle != INVALID_HANDLE_VALUE)
+		FindClose(pDir->dir_hDirHandle);
+
+	free(pDir);
+
+	return;
+}
+
+struct dirent *
+readdir(DIR* pDir)
+{
+	WIN32_FIND_DATA wfdFindData;
+
+	if (!pDir) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	/* sanity check that this is a DIR pointer */
+	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
+		errno = EINVAL;
+		return NULL;
+	}
+
+	if (pDir->dir_nNumFiles == 0) {
+		pDir->dir_hDirHandle = FindFirstFile(pDir->dir_pDirectoryName, &wfdFindData);
+		if (pDir->dir_hDirHandle == INVALID_HANDLE_VALUE)
+			return NULL;
+	} else if (!FindNextFile(pDir->dir_hDirHandle, &wfdFindData))
+			return NULL;
+
+	/* bump count for next call to readdir() or telldir() */
+	pDir->dir_nNumFiles++;
+
+	/* fill in struct dirent values */
+	pDir->dir_sdReturn.d_ino = -1;
+	strcpy(pDir->dir_sdReturn.d_name, wfdFindData.cFileName);
+
+	return &pDir->dir_sdReturn;
+}
+
+void
+rewinddir(DIR* pDir)
+{
+	if (!pDir) {
+		errno = EINVAL;
+		return;
+	}
+
+	/* sanity check that this is a DIR pointer */
+	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
+		errno = EINVAL;
+		return;
+	}
+
+	/* close the WINDOWS32 directory handle */
+	if (pDir->dir_hDirHandle != INVALID_HANDLE_VALUE)
+		if (!FindClose(pDir->dir_hDirHandle))
+			errno = EBADF;
+
+	/* reset members which control readdir() */
+	pDir->dir_hDirHandle = INVALID_HANDLE_VALUE;
+	pDir->dir_nNumFiles = 0;
+
+	return;
+}
+
+int
+telldir(DIR* pDir)
+{
+	if (!pDir) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	/* sanity check that this is a DIR pointer */
+	if (pDir->dir_ulCookie != __DIRENT_COOKIE) {
+		errno = EINVAL;
+		return -1;
+	}
+
+	/* return number of times readdir() called */
+	return pDir->dir_nNumFiles;
+}
+
+void
+seekdir(DIR* pDir, long nPosition)
+{
+	if (!pDir)
+		return;
+
+	/* sanity check that this is a DIR pointer */
+	if (pDir->dir_ulCookie != __DIRENT_COOKIE)
+		return;
+
+	/* go back to beginning of directory */
+	rewinddir(pDir);
+
+	/* loop until we have found position we care about */
+	for (--nPosition; nPosition && readdir(pDir); nPosition--);
+
+	/* flag invalid nPosition value */
+	if (nPosition)
+		errno = EINVAL;
+
+	return;
+}
diff --git a/w32/include/sub_proc.h b/w32/include/sub_proc.h
index 38889c5..64f71b3 100644
--- a/w32/include/sub_proc.h
+++ b/w32/include/sub_proc.h
@@ -1,60 +1,60 @@
-/* Definitions for Windows process invocation.
-Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006, 2007 Free Software Foundation, Inc.
-This file is part of GNU Make.
-
-GNU Make is free software; you can redistribute it and/or modify it under the
-terms of the GNU General Public License as published by the Free Software
-Foundation; either version 3 of the License, or (at your option) any later
-version.
-
-GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with
-this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#ifndef SUB_PROC_H
-#define SUB_PROC_H
-
-/*
- * Component Name:
- *
- * $Date$
- *
- * $Source$
- *
- * $Id$
- */
-
-#define EXTERN_DECL(entry, args) extern entry args
-#define VOID_DECL void
-
-EXTERN_DECL(HANDLE process_init, (VOID_DECL));
-EXTERN_DECL(HANDLE process_init_fd, (HANDLE stdinh, HANDLE stdouth,
-	HANDLE stderrh));
-EXTERN_DECL(long process_begin, (HANDLE proc, char **argv, char **envp,
-	char *exec_path, char *as_user));
-EXTERN_DECL(long process_pipe_io, (HANDLE proc, char *stdin_data,
-	int stdin_data_len));
-EXTERN_DECL(long process_file_io, (HANDLE proc));
-EXTERN_DECL(void process_cleanup, (HANDLE proc));
-EXTERN_DECL(HANDLE process_wait_for_any, (VOID_DECL));
-EXTERN_DECL(void process_register, (HANDLE proc));
-EXTERN_DECL(HANDLE process_easy, (char** argv, char** env));
-EXTERN_DECL(BOOL process_kill, (HANDLE proc, int signal));
-EXTERN_DECL(int process_used_slots, (VOID_DECL));
-
-/* support routines */
-EXTERN_DECL(long process_errno, (HANDLE proc));
-EXTERN_DECL(long process_last_err, (HANDLE proc));
-EXTERN_DECL(long process_exit_code, (HANDLE proc));
-EXTERN_DECL(long process_signal, (HANDLE proc));
-EXTERN_DECL(char * process_outbuf, (HANDLE proc));
-EXTERN_DECL(char * process_errbuf, (HANDLE proc));
-EXTERN_DECL(int process_outcnt, (HANDLE proc));
-EXTERN_DECL(int process_errcnt, (HANDLE proc));
-EXTERN_DECL(void process_pipes, (HANDLE proc, int pipes[3]));
-
-#endif
+/* Definitions for Windows process invocation.
+Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+2006, 2007 Free Software Foundation, Inc.
+This file is part of GNU Make.
+
+GNU Make is free software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the Free Software
+Foundation; either version 3 of the License, or (at your option) any later
+version.
+
+GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with
+this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#ifndef SUB_PROC_H
+#define SUB_PROC_H
+
+/*
+ * Component Name:
+ *
+ * $Date$
+ *
+ * $Source$
+ *
+ * $Id$
+ */
+
+#define EXTERN_DECL(entry, args) extern entry args
+#define VOID_DECL void
+
+EXTERN_DECL(HANDLE process_init, (VOID_DECL));
+EXTERN_DECL(HANDLE process_init_fd, (HANDLE stdinh, HANDLE stdouth,
+	HANDLE stderrh));
+EXTERN_DECL(long process_begin, (HANDLE proc, char **argv, char **envp,
+	char *exec_path, char *as_user));
+EXTERN_DECL(long process_pipe_io, (HANDLE proc, char *stdin_data,
+	int stdin_data_len));
+EXTERN_DECL(long process_file_io, (HANDLE proc));
+EXTERN_DECL(void process_cleanup, (HANDLE proc));
+EXTERN_DECL(HANDLE process_wait_for_any, (VOID_DECL));
+EXTERN_DECL(void process_register, (HANDLE proc));
+EXTERN_DECL(HANDLE process_easy, (char** argv, char** env));
+EXTERN_DECL(BOOL process_kill, (HANDLE proc, int signal));
+EXTERN_DECL(int process_used_slots, (VOID_DECL));
+
+/* support routines */
+EXTERN_DECL(long process_errno, (HANDLE proc));
+EXTERN_DECL(long process_last_err, (HANDLE proc));
+EXTERN_DECL(long process_exit_code, (HANDLE proc));
+EXTERN_DECL(long process_signal, (HANDLE proc));
+EXTERN_DECL(char * process_outbuf, (HANDLE proc));
+EXTERN_DECL(char * process_errbuf, (HANDLE proc));
+EXTERN_DECL(int process_outcnt, (HANDLE proc));
+EXTERN_DECL(int process_errcnt, (HANDLE proc));
+EXTERN_DECL(void process_pipes, (HANDLE proc, int pipes[3]));
+
+#endif
diff --git a/w32/include/w32err.h b/w32/include/w32err.h
index 0a27fce..7a66713 100644
--- a/w32/include/w32err.h
+++ b/w32/include/w32err.h
@@ -1,27 +1,27 @@
-/* Definitions for Windows error handling.
-Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006, 2007 Free Software Foundation, Inc.
-This file is part of GNU Make.
-
-GNU Make is free software; you can redistribute it and/or modify it under the
-terms of the GNU General Public License as published by the Free Software
-Foundation; either version 3 of the License, or (at your option) any later
-version.
-
-GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with
-this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#ifndef _W32ERR_H_
-#define _W32ERR_H_
-
-#ifndef EXTERN_DECL
-#define EXTERN_DECL(entry, args) entry args
-#endif
-
-EXTERN_DECL(char * map_windows32_error_to_string, (DWORD error));
-
-#endif /* !_W32ERR_H */
+/* Definitions for Windows error handling.
+Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+2006, 2007 Free Software Foundation, Inc.
+This file is part of GNU Make.
+
+GNU Make is free software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the Free Software
+Foundation; either version 3 of the License, or (at your option) any later
+version.
+
+GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with
+this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#ifndef _W32ERR_H_
+#define _W32ERR_H_
+
+#ifndef EXTERN_DECL
+#define EXTERN_DECL(entry, args) entry args
+#endif
+
+EXTERN_DECL(char * map_windows32_error_to_string, (DWORD error));
+
+#endif /* !_W32ERR_H */
diff --git a/w32/subproc/misc.c b/w32/subproc/misc.c
index 4d5aab5..3e1981a 100644
--- a/w32/subproc/misc.c
+++ b/w32/subproc/misc.c
@@ -1,82 +1,82 @@
-/* Process handling for Windows
-Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006, 2007 Free Software Foundation, Inc.
-This file is part of GNU Make.
-
-GNU Make is free software; you can redistribute it and/or modify it under the
-terms of the GNU General Public License as published by the Free Software
-Foundation; either version 3 of the License, or (at your option) any later
-version.
-
-GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with
-this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#include <stddef.h>
-#include <stdlib.h>
-#include <string.h>
-#include <windows.h>
-#include "proc.h"
-
-
-/*
- * Description:  Convert a NULL string terminated UNIX environment block to
- *		an environment block suitable for a windows32 system call
- *
- * Returns:  TRUE= success, FALSE=fail
- *
- * Notes/Dependencies:  the environment block is sorted in case-insensitive
- *	order, is double-null terminated, and is a char *, not a char **
- */
-int _cdecl compare(const void *a1, const void *a2)
-{
-	return _stricoll(*((char**)a1),*((char**)a2));
-}
-bool_t
-arr2envblk(char **arr, char **envblk_out)
-{
-	char **tmp;
-	int size_needed;
-	int arrcnt;
-	char *ptr;
-
-	arrcnt = 0;
-	while (arr[arrcnt]) {
-		arrcnt++;
-	}
-
-	tmp = (char**) calloc(arrcnt + 1, sizeof(char *));
-	if (!tmp) {
-		return FALSE;
-	}
-
-	arrcnt = 0;
-	size_needed = 0;
-	while (arr[arrcnt]) {
-		tmp[arrcnt] = arr[arrcnt];
-		size_needed += strlen(arr[arrcnt]) + 1;
-		arrcnt++;
-	}
-	size_needed++;
-
-	qsort((void *) tmp, (size_t) arrcnt, sizeof (char*), compare);
-
-	ptr = *envblk_out = calloc(size_needed, 1);
-	if (!ptr) {
-		free(tmp);
-		return FALSE;
-	}
-
-	arrcnt = 0;
-	while (tmp[arrcnt]) {
-		strcpy(ptr, tmp[arrcnt]);
-		ptr += strlen(tmp[arrcnt]) + 1;
-		arrcnt++;
-	}
-
-        free(tmp);
-	return TRUE;
-}
+/* Process handling for Windows
+Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+2006, 2007 Free Software Foundation, Inc.
+This file is part of GNU Make.
+
+GNU Make is free software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the Free Software
+Foundation; either version 3 of the License, or (at your option) any later
+version.
+
+GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with
+this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include <stddef.h>
+#include <stdlib.h>
+#include <string.h>
+#include <windows.h>
+#include "proc.h"
+
+
+/*
+ * Description:  Convert a NULL string terminated UNIX environment block to
+ *		an environment block suitable for a windows32 system call
+ *
+ * Returns:  TRUE= success, FALSE=fail
+ *
+ * Notes/Dependencies:  the environment block is sorted in case-insensitive
+ *	order, is double-null terminated, and is a char *, not a char **
+ */
+int _cdecl compare(const void *a1, const void *a2)
+{
+	return _stricoll(*((char**)a1),*((char**)a2));
+}
+bool_t
+arr2envblk(char **arr, char **envblk_out)
+{
+	char **tmp;
+	int size_needed;
+	int arrcnt;
+	char *ptr;
+
+	arrcnt = 0;
+	while (arr[arrcnt]) {
+		arrcnt++;
+	}
+
+	tmp = (char**) calloc(arrcnt + 1, sizeof(char *));
+	if (!tmp) {
+		return FALSE;
+	}
+
+	arrcnt = 0;
+	size_needed = 0;
+	while (arr[arrcnt]) {
+		tmp[arrcnt] = arr[arrcnt];
+		size_needed += strlen(arr[arrcnt]) + 1;
+		arrcnt++;
+	}
+	size_needed++;
+
+	qsort((void *) tmp, (size_t) arrcnt, sizeof (char*), compare);
+
+	ptr = *envblk_out = calloc(size_needed, 1);
+	if (!ptr) {
+		free(tmp);
+		return FALSE;
+	}
+
+	arrcnt = 0;
+	while (tmp[arrcnt]) {
+		strcpy(ptr, tmp[arrcnt]);
+		ptr += strlen(tmp[arrcnt]) + 1;
+		arrcnt++;
+	}
+
+        free(tmp);
+	return TRUE;
+}
diff --git a/w32/subproc/proc.h b/w32/subproc/proc.h
index 270232b..393f570 100644
--- a/w32/subproc/proc.h
+++ b/w32/subproc/proc.h
@@ -1,30 +1,30 @@
-/* Definitions for Windows
-Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006, 2007 Free Software Foundation, Inc.
-This file is part of GNU Make.
-
-GNU Make is free software; you can redistribute it and/or modify it under the
-terms of the GNU General Public License as published by the Free Software
-Foundation; either version 3 of the License, or (at your option) any later
-version.
-
-GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with
-this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#ifndef  _PROC_H
-#define _PROC_H
-
-typedef int bool_t;
-
-#define E_SCALL		101
-#define E_IO		102
-#define E_NO_MEM	103
-#define E_FORK		104
-
-extern bool_t arr2envblk(char **arr, char **envblk_out);
-
-#endif
+/* Definitions for Windows
+Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+2006, 2007 Free Software Foundation, Inc.
+This file is part of GNU Make.
+
+GNU Make is free software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the Free Software
+Foundation; either version 3 of the License, or (at your option) any later
+version.
+
+GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with
+this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#ifndef  _PROC_H
+#define _PROC_H
+
+typedef int bool_t;
+
+#define E_SCALL		101
+#define E_IO		102
+#define E_NO_MEM	103
+#define E_FORK		104
+
+extern bool_t arr2envblk(char **arr, char **envblk_out);
+
+#endif
diff --git a/w32/subproc/w32err.c b/w32/subproc/w32err.c
index 43f8d14..163a0d7 100644
--- a/w32/subproc/w32err.c
+++ b/w32/subproc/w32err.c
@@ -1,70 +1,70 @@
-/* Error handling for Windows
-Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
-2006, 2007 Free Software Foundation, Inc.
-This file is part of GNU Make.
-
-GNU Make is free software; you can redistribute it and/or modify it under the
-terms of the GNU General Public License as published by the Free Software
-Foundation; either version 3 of the License, or (at your option) any later
-version.
-
-GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
-WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
-A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with
-this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#include <windows.h>
-#include "w32err.h"
-
-/*
- * Description: the windows32 version of perror()
- *
- * Returns:  a pointer to a static error
- *
- * Notes/Dependencies:  I got this from
- *      comp.os.ms-windows.programmer.win32
- */
-char *
-map_windows32_error_to_string (DWORD ercode) {
-/* __declspec (thread) necessary if you will use multiple threads on MSVC */
-#ifdef _MSC_VER
-__declspec (thread) static char szMessageBuffer[128];
-#else
-static char szMessageBuffer[128];
-#endif
-	/* Fill message buffer with a default message in
-	 * case FormatMessage fails
-	 */
-    wsprintf (szMessageBuffer, "Error %ld\n", ercode);
-
-	/*
-	 *  Special code for winsock error handling.
-	 */
-	if (ercode > WSABASEERR) {
-		HMODULE hModule = GetModuleHandle("wsock32");
-		if (hModule != NULL) {
-			FormatMessage(FORMAT_MESSAGE_FROM_HMODULE,
-				hModule,
-				ercode,
-				LANG_NEUTRAL,
-				szMessageBuffer,
-				sizeof(szMessageBuffer),
-				NULL);
-			FreeLibrary(hModule);
-		}
-	} else {
-		/*
-		 *  Default system message handling
-		 */
-    	FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
-                  NULL,
-                  ercode,
-                  LANG_NEUTRAL,
-                  szMessageBuffer,
-                  sizeof(szMessageBuffer),
-                  NULL);
-	}
-    return szMessageBuffer;
-}
+/* Error handling for Windows
+Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
+2006, 2007 Free Software Foundation, Inc.
+This file is part of GNU Make.
+
+GNU Make is free software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the Free Software
+Foundation; either version 3 of the License, or (at your option) any later
+version.
+
+GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
+A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with
+this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include <windows.h>
+#include "w32err.h"
+
+/*
+ * Description: the windows32 version of perror()
+ *
+ * Returns:  a pointer to a static error
+ *
+ * Notes/Dependencies:  I got this from
+ *      comp.os.ms-windows.programmer.win32
+ */
+char *
+map_windows32_error_to_string (DWORD ercode) {
+/* __declspec (thread) necessary if you will use multiple threads on MSVC */
+#ifdef _MSC_VER
+__declspec (thread) static char szMessageBuffer[128];
+#else
+static char szMessageBuffer[128];
+#endif
+	/* Fill message buffer with a default message in
+	 * case FormatMessage fails
+	 */
+    wsprintf (szMessageBuffer, "Error %ld\n", ercode);
+
+	/*
+	 *  Special code for winsock error handling.
+	 */
+	if (ercode > WSABASEERR) {
+		HMODULE hModule = GetModuleHandle("wsock32");
+		if (hModule != NULL) {
+			FormatMessage(FORMAT_MESSAGE_FROM_HMODULE,
+				hModule,
+				ercode,
+				LANG_NEUTRAL,
+				szMessageBuffer,
+				sizeof(szMessageBuffer),
+				NULL);
+			FreeLibrary(hModule);
+		}
+	} else {
+		/*
+		 *  Default system message handling
+		 */
+    	FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
+                  NULL,
+                  ercode,
+                  LANG_NEUTRAL,
+                  szMessageBuffer,
+                  sizeof(szMessageBuffer),
+                  NULL);
+	}
+    return szMessageBuffer;
+}
-- 
cgit v1.0-41-gc330

