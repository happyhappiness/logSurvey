@@ -1,7 +1,7 @@
 #
 #  Makefile for the Squid Object Cache server
 #
-#  $Id: Makefile.in,v 1.50 1996/10/22 03:36:47 wessels Exp $
+#  $Id: Makefile.in,v 1.51 1996/10/27 07:11:50 wessels Exp $
 #
 #  Uncomment and customize the following to suit your needs:
 #
@@ -66,9 +66,10 @@ OBJS	 	= \
 		fdstat.o filemap.o fqdncache.o ftp.o gopher.o hash.o \
 		http.o icmp.o icp.o ident.o ipcache.o main.o mime.o \
 		neighbors.o net_db.o objcache.o proto.o redirect.o \
+		refresh.o \
 		send-announce.o ssl.o stack.o stat.o stmem.o store.o \
-		store_clean.o storetoString.o tools.o ttl.o url.o \
-		wais.o $(XTRA_OBJS)
+		store_clean.o storetoString.o tools.o timestamps.o \
+		url.o wais.o $(XTRA_OBJS)
 
 DEFAULTS        = \
 	-DDEFAULT_CONFIG_FILE=\"$(DEFAULT_CONFIG_FILE)\" \
@@ -1,5 +1,5 @@
 /*
- * $Id: cache_cf.cc,v 1.117 1996/10/25 16:51:02 wessels Exp $
+ * $Id: cache_cf.cc,v 1.118 1996/10/27 07:11:51 wessels Exp $
  *
  * DEBUG: section 3     Configuration File Parsing
  * AUTHOR: Harvest Derived
@@ -125,7 +125,6 @@ struct SquidConfig Config;
 #define DefaultWaisRelayHost	(char *)NULL
 #define DefaultWaisRelayPort	0
 
-#define DefaultExpireAge	(86400 * 7)	/* 1 week */
 #define DefaultReferenceAge	0	/* disabled */
 #define DefaultNegativeTtl	(5 * 60)	/* 5 min */
 #define DefaultNegativeDnsTtl	(2 * 60)	/* 2 min */
@@ -254,7 +253,7 @@ static void parsePidFilenameLine _PARAMS((void));
 static void parseRequestSizeLine _PARAMS((void));
 static void parseStoreLogLine _PARAMS((void));
 static void parseSwapLine _PARAMS((void));
-static void parseTTLPattern _PARAMS((int icase, int force));
+static void parseRefreshPattern _PARAMS((int icase));
 static void parseVisibleHostnameLine _PARAMS((void));
 static void parseWAISRelayLine _PARAMS((void));
 static void parseMinutesLine _PARAMS((int *));
@@ -601,36 +600,25 @@ parseFtpLine(void)
 }
 
 static void
-parseTTLPattern(int icase, int force)
+parseRefreshPattern(int icase)
 {
     char *token;
     char *pattern;
-    time_t abs_ttl = 0;
-    int pct_age = 0;
-    time_t age_max = Config.ageMaxDefault;
+    time_t min = 0;
+    int pct = 0;
+    time_t max = 0;
     int i;
-
     token = strtok(NULL, w_space);	/* token: regex pattern */
     if (token == NULL)
 	self_destruct();
     pattern = xstrdup(token);
-
-    GetInteger(i);		/* token: abs_ttl */
-    abs_ttl = (time_t) (i * 60);	/* convert minutes to seconds */
-
-    token = strtok(NULL, w_space);	/* token: pct_age */
-    if (token != (char *) NULL) {	/* pct_age is optional */
-	if (sscanf(token, "%d", &pct_age) != 1)
-	    self_destruct();
-
-	token = strtok(NULL, w_space);	/* token: age_max */
-	if (token != (char *) NULL) {	/* age_max is optional */
-	    if (sscanf(token, "%d", &i) != 1)
-		self_destruct();
-	    age_max = (time_t) (i * 60);	/* convert minutes to seconds */
-	}
-    }
-    ttlAddToList(pattern, icase, force, abs_ttl, pct_age, age_max);
+    GetInteger(i);		/* token: min */
+    min = (time_t) (i * 60);	/* convert minutes to seconds */
+    GetInteger(i);		/* token: pct */
+    pct = i;
+    GetInteger(i);		/* token: max */
+    max = (time_t) (i * 60);	/* convert minutes to seconds */
+    refreshAddToList(pattern, icase, min, pct, max);
     safe_free(pattern);
 }
 
@@ -1212,14 +1200,10 @@ parseConfigFile(char *file_name)
 	else if (!strcmp(token, "ftp"))
 	    parseFtpLine();
 
-	else if (!strcmp(token, "ttl_pattern"))
-	    parseTTLPattern(0, 0);
-	else if (!strcmp(token, "ttl_pattern/i"))
-	    parseTTLPattern(1, 0);
-	else if (!strcmp(token, "ttl_force_pattern"))
-	    parseTTLPattern(0, 1);
-	else if (!strcmp(token, "ttl_force_pattern/i"))
-	    parseTTLPattern(1, 1);
+	else if (!strcmp(token, "refresh_pattern"))
+	    parseRefreshPattern(0);
+	else if (!strcmp(token, "refresh_pattern/i"))
+	    parseRefreshPattern(1);
 
 	else if (!strcmp(token, "quick_abort"))
 	    parseQuickAbort();
@@ -1236,8 +1220,6 @@ parseConfigFile(char *file_name)
 	    parseMinutesLine(&Config.cleanRate);
 	else if (!strcmp(token, "client_lifetime"))
 	    parseMinutesLine(&Config.lifetimeDefault);
-	else if (!strcmp(token, "expire_age"))
-	    parseMinutesLine(&Config.expireAge);
 	else if (!strcmp(token, "reference_age"))
 	    parseMinutesLine(&Config.referenceAge);
 
@@ -1392,6 +1374,11 @@ parseConfigFile(char *file_name)
 	else if (!strcmp(token, "minimum_direct_hops"))
 	    parseIntegerValue(&Config.minDirectHops);
 
+	else if (!strcmp(token, "store_objects_per_bucket"))
+	    parseIntegerValue(&Config.storeHash.objectsPerBucket);
+	else if (!strcmp(token, "store_avg_object_size"))
+	    parseIntegerValue(&Config.storeHash.avgObjectSize);
+
 	/* If unknown, treat as a comment line */
 	else {
 	    debug(3, 0, "parseConfigFile: line %d unrecognized: '%s'\n",
@@ -1500,7 +1487,7 @@ configFreeMemory(void)
     wordlistDestroy(&Config.dns_testname_list);
     ip_acl_destroy(&Config.local_ip_list);
     ip_acl_destroy(&Config.firewall_ip_list);
-    ttlFreeList();
+    refreshFreeMemory();
 }
 
 
@@ -1526,7 +1513,6 @@ configSetFactoryDefaults(void)
     Config.Wais.relayHost = safe_xstrdup(DefaultWaisRelayHost);
     Config.Wais.relayPort = DefaultWaisRelayPort;
 
-    Config.expireAge = DefaultExpireAge;
     Config.referenceAge = DefaultReferenceAge;
     Config.negativeTtl = DefaultNegativeTtl;
     Config.negativeDnsTtl = DefaultNegativeDnsTtl;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.51 1996/10/24 20:57:03 wessels Exp $
+ * $Id: client_side.cc,v 1.52 1996/10/27 07:11:52 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -449,7 +449,7 @@ icpHandleIMSReply(int fd, StoreEntry * entry, void *data)
 	entry->timestamp = squid_curtime;
 	if (mime_headers_end(hbuf)) {
 	    httpParseHeaders(hbuf, entry->mem_obj->reply);
-	    ttlSet(entry);
+	    timestampsSet(entry);
 	} else {
 	    debug(33, 1, "icpHandleIMSReply: No end-of-headers, len=%d\n", len);
 	    debug(33, 1, "  --> '%s'\n", entry->url);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ftp.cc,v 1.69 1996/10/24 23:36:51 wessels Exp $
+ * $Id: ftp.cc,v 1.70 1996/10/27 07:11:53 wessels Exp $
  *
  * DEBUG: section 9     File Transfer Protocol (FTP)
  * AUTHOR: Harvest Derived
@@ -236,6 +236,7 @@ ftpProcessReplyHeader(FtpStateData * data, char *buf, int size)
 	    data->reply_hdr);
 	/* Parse headers into reply structure */
 	httpParseHeaders(data->reply_hdr, reply);
+	timestampsSet(entry);
 	/* Check if object is cacheable or not based on reply code */
 	if (reply->code)
 	    debug(11, 3, "ftpProcessReplyHeader: HTTP CODE: %d\n", reply->code);
@@ -246,7 +247,6 @@ ftpProcessReplyHeader(FtpStateData * data, char *buf, int size)
 	case 301:		/* Moved Permanently */
 	case 410:		/* Gone */
 	    /* These can be cached for a long time, make the key public */
-	    ttlSet(entry);
 	    if (BIT_TEST(entry->flag, ENTRY_CACHABLE))
 		storeSetPublicKey(entry);
 	    break;
@@ -358,7 +358,7 @@ ftpReadReply(int fd, FtpStateData * data)
 	    BIT_RESET(entry->flag, ENTRY_CACHABLE);
 	    storeReleaseRequest(entry);
 	} else if (!(entry->flag & DELETE_BEHIND)) {
-	    ttlSet(entry);
+	    timestampsSet(entry);
 	}
 	/* update fdstat and fdtable */
 	storeComplete(entry);
@@ -1,5 +1,5 @@
 /*
- * $Id: gopher.cc,v 1.55 1996/10/25 02:15:17 wessels Exp $
+ * $Id: gopher.cc,v 1.56 1996/10/27 07:11:55 wessels Exp $
  *
  * DEBUG: section 10    Gopher
  * AUTHOR: Harvest Derived
@@ -800,7 +800,7 @@ gopherReadReply(int fd, GopherStateData * data)
 	if (data->conversion != NORMAL)
 	    gopherEndHTML(data);
 	if (!(entry->flag & DELETE_BEHIND))
-	    ttlSet(entry);
+	    timestampsSet(entry);
 	BIT_RESET(entry->flag, DELAY_SENDING);
 	storeComplete(entry);
 	comm_close(fd);
@@ -1,5 +1,5 @@
 /*
- * $Id: http.cc,v 1.87 1996/10/25 02:15:18 wessels Exp $
+ * $Id: http.cc,v 1.88 1996/10/27 07:11:55 wessels Exp $
  *
  * DEBUG: section 11    Hypertext Transfer Protocol (HTTP)
  * AUTHOR: Harvest Derived
@@ -186,7 +186,6 @@ httpLifetimeExpire(int fd, void *data)
 static void
 httpMakePublic(StoreEntry * entry)
 {
-    ttlSet(entry);
     if (BIT_TEST(entry->flag, ENTRY_CACHABLE))
 	storeSetPublicKey(entry);
 }
@@ -328,6 +327,7 @@ httpProcessReplyHeader(HttpStateData * httpState, char *buf, int size)
 	    httpState->reply_hdr);
 	/* Parse headers into reply structure */
 	httpParseHeaders(httpState->reply_hdr, reply);
+        timestampsSet(entry);
 	/* Check if object is cacheable or not based on reply code */
 	if (reply->code)
 	    debug(11, 3, "httpProcessReplyHeader: HTTP CODE: %d\n", reply->code);
@@ -1,5 +1,5 @@
 /*
- * $Id: ipcache.cc,v 1.78 1996/10/25 00:24:21 wessels Exp $
+ * $Id: ipcache.cc,v 1.79 1996/10/27 07:11:57 wessels Exp $
  *
  * DEBUG: section 14    IP Cache
  * AUTHOR: Harvest Derived
@@ -159,6 +159,7 @@ static ipcache_addrs *ipcacheCheckNumeric _PARAMS((char *name));
 static void ipcacheStatPrint _PARAMS((ipcache_entry *, StoreEntry *));
 static void ipcacheUnlockEntry _PARAMS((ipcache_entry *));
 static void ipcacheLockEntry _PARAMS((ipcache_entry *));
+static void ipcacheNudgeQueue _PARAMS((void));
 
 static ipcache_addrs static_addrs;
 static HashID ip_table = 0;
@@ -543,6 +544,15 @@ ipcache_parsebuffer(char *inbuf, dnsserver_t * dnsData)
     return &i;
 }
 
+static void
+ipcacheNudgeQueue()
+{
+    dnsserver_t *dnsData;
+    ipcache_entry *i = NULL;
+    while ((dnsData = dnsGetFirstAvailable()) && (i = ipcacheDequeue()))
+	ipcache_dnsDispatch(dnsData, i);
+}
+
 static int
 ipcache_dnsHandleRead(int fd, dnsserver_t * dnsData)
 {
@@ -605,8 +615,7 @@ ipcache_dnsHandleRead(int fd, dnsserver_t * dnsData)
 	COMM_SELECT_READ,
 	(PF) ipcache_dnsHandleRead,
 	dnsData, 0);
-    while ((dnsData = dnsGetFirstAvailable()) && (i = ipcacheDequeue()))
-	ipcache_dnsDispatch(dnsData, i);
+    ipcacheNudgeQueue();
     return 0;
 }
 
@@ -621,6 +630,8 @@ ipcacheAddPending(ipcache_entry * i, int fd, IPH handler, void *handlerData)
     pending->handlerData = handlerData;
     for (I = &(i->pending_head); *I; I = &((*I)->next));
     *I = pending;
+    if (i->status == IP_PENDING)
+	ipcacheNudgeQueue();
 }
 
 void
@@ -968,12 +979,9 @@ ipcacheCheckNumeric(char *name)
 int
 ipcacheQueueDrain(void)
 {
-    ipcache_entry *i;
-    dnsserver_t *dnsData;
     if (!ipcacheQueueHead)
 	return 0;
-    while ((dnsData = dnsGetFirstAvailable()) && (i = ipcacheDequeue()))
-	ipcache_dnsDispatch(dnsData, i);
+    ipcacheNudgeQueue();
     return 1;
 }
 
@@ -1,5 +1,5 @@
 /*
- * $Id: neighbors.cc,v 1.72 1996/10/24 06:12:46 wessels Exp $
+ * $Id: neighbors.cc,v 1.73 1996/10/27 07:11:58 wessels Exp $
  *
  * DEBUG: section 15    Neighbor Routines
  * AUTHOR: Harvest Derived
@@ -109,6 +109,7 @@ static int edgeWouldBePinged _PARAMS((edge *, request_t *));
 static void neighborRemove _PARAMS((edge *));
 static edge *whichEdge _PARAMS((struct sockaddr_in * from));
 static void neighborAlive _PARAMS((edge *, MemObject *, icp_common_t *));
+static void neighborCountIgnored _PARAMS((edge * e, icp_opcode op_unused));
 
 static neighbors *friends = NULL;
 static struct neighbor_cf *Neighbor_cf = NULL;
@@ -550,6 +551,14 @@ neighborAlive(edge * e, MemObject * mem, icp_common_t * header)
     }
 }
 
+static void 
+neighborCountIgnored(edge * e, icp_opcode op_unused)
+{
+    if (e == NULL)
+	return;
+    e->stats.ignored_replies++;
+}
+
 /* I should attach these records to the entry.  We take the first
  * hit we get our wait until everyone misses.  The timeout handler
  * call needs to nip this shopping list or call one of the misses.
@@ -565,40 +574,45 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
     HttpStateData *httpState = NULL;
     neighbor_t ntype = EDGE_NONE;
     char *opcode_d;
+    icp_opcode opcode = (icp_opcode) header->opcode;
 
-    debug(15, 6, "neighborsUdpAck: opcode %d '%s'\n",
-	(int) header->opcode, url);
+    debug(15, 6, "neighborsUdpAck: opcode %d '%s'\n", (int) opcode, url);
     if ((e = whichEdge(from)))
 	neighborAlive(e, mem, header);
-    if ((icp_opcode) header->opcode > ICP_OP_END)
+    if (opcode > ICP_OP_END)
 	return;
-    opcode_d = IcpOpcodeStr[header->opcode];
+    opcode_d = IcpOpcodeStr[opcode];
     if (mem == NULL) {
 	debug(15, 1, "Ignoring %s for missing mem_obj: %s\n", opcode_d, url);
+	neighborCountIgnored(e, opcode);
 	return;
     }
     /* check if someone is already fetching it */
     if (BIT_TEST(entry->flag, ENTRY_DISPATCHED)) {
 	debug(15, 5, "neighborsUdpAck: '%s' already being fetched.\n", url);
+	neighborCountIgnored(e, opcode);
 	return;
     }
     if (entry->ping_status != PING_WAITING) {
 	debug(15, 5, "neighborsUdpAck: Unexpected %s for %s\n", opcode_d, url);
+	neighborCountIgnored(e, opcode);
 	return;
     }
     if (entry->lock_count == 0) {
 	debug(12, 3, "neighborsUdpAck: '%s' has no locks\n", url);
+	neighborCountIgnored(e, opcode);
 	return;
     }
     debug(15, 3, "neighborsUdpAck: %s for '%s' from %s \n",
 	opcode_d, url, e ? e->host : "source");
     mem->e_pings_n_acks++;
     if (e)
 	ntype = neighborType(e, mem->request);
-    if (header->opcode == ICP_OP_SECHO) {
+    if (opcode == ICP_OP_SECHO) {
 	/* Received source-ping reply */
 	if (e) {
 	    debug(15, 1, "Ignoring SECHO from neighbor %s\n", e->host);
+	    neighborCountIgnored(e, opcode);
 	} else {
 	    /* if we reach here, source-ping reply is the first 'parent',
 	     * so fetch directly from the source */
@@ -611,7 +625,7 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
 	    protoStart(0, entry, NULL, entry->mem_obj->request);
 	    return;
 	}
-    } else if (header->opcode == ICP_OP_HIT_OBJ) {
+    } else if (opcode == ICP_OP_HIT_OBJ) {
 	if (e == NULL) {
 	    debug(15, 0, "Ignoring ICP_OP_HIT_OBJ from non-neighbor %s\n",
 		inet_ntoa(from->sin_addr));
@@ -636,7 +650,7 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
 	    safe_free(httpState);
 	    return;
 	}
-    } else if (header->opcode == ICP_OP_HIT) {
+    } else if (opcode == ICP_OP_HIT) {
 	if (e == NULL) {
 	    debug(15, 1, "Ignoring HIT from non-neighbor %s\n",
 		inet_ntoa(from->sin_addr));
@@ -649,7 +663,7 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
 	    protoStart(0, entry, e, entry->mem_obj->request);
 	    return;
 	}
-    } else if (header->opcode == ICP_OP_DECHO) {
+    } else if (opcode == ICP_OP_DECHO) {
 	if (e == NULL) {
 	    debug(15, 1, "Ignoring DECHO from non-neighbor %s\n",
 		inet_ntoa(from->sin_addr));
@@ -663,7 +677,7 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
 		mem->w_rtt = w_rtt;
 	    }
 	}
-    } else if (header->opcode == ICP_OP_MISS) {
+    } else if (opcode == ICP_OP_MISS) {
 	if (e == NULL) {
 	    debug(15, 1, "Ignoring MISS from non-neighbor %s\n",
 		inet_ntoa(from->sin_addr));
@@ -674,7 +688,7 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
 		mem->w_rtt = w_rtt;
 	    }
 	}
-    } else if (header->opcode == ICP_OP_DENIED) {
+    } else if (opcode == ICP_OP_DENIED) {
 	if (e == NULL) {
 	    debug(15, 1, "Ignoring DENIED from non-neighbor %s\n",
 		inet_ntoa(from->sin_addr));
@@ -684,8 +698,9 @@ neighborsUdpAck(int fd, char *url, icp_common_t * header, struct sockaddr_in *fr
 		debug(15, 0, "Disabling '%s', please check your configuration.\n", e->host);
 		neighborRemove(e);
 	    }
+	    neighborCountIgnored(e, opcode);
 	}
-    } else if (header->opcode == ICP_OP_RELOADING) {
+    } else if (opcode == ICP_OP_RELOADING) {
 	if (e)
 	    debug(15, 3, "neighborsUdpAck: %s is RELOADING\n", e->host);
     } else {
@@ -1,6 +1,6 @@
 
 /*
- * $Id: squid.h,v 1.62 1996/10/24 23:29:40 wessels Exp $
+ * $Id: squid.h,v 1.63 1996/10/27 07:12:00 wessels Exp $
  *
  * AUTHOR: Duane Wessels
  *
@@ -256,6 +256,7 @@ typedef int (*QS) (const void *, const void *);
 #include "icmp.h"
 #include "net_db.h"
 #include "client_db.h"
+#include "refresh.h"
 
 #if !HAVE_TEMPNAM
 #include "tempnam.h"
@@ -300,10 +301,7 @@ extern int objcacheStart _PARAMS((int, char *, StoreEntry *));
 extern void send_announce _PARAMS((void));
 extern int sslStart _PARAMS((int fd, char *, request_t *, char *, int *sz));
 extern char *storeToString _PARAMS((StoreEntry *));
-extern void ttlSet _PARAMS((StoreEntry *));
-extern void ttlFreeList _PARAMS((void));
-extern void ttlAddToList _PARAMS((char *, int, int, time_t, int, time_t));
-extern void ttlAddToForceList _PARAMS((char *, time_t, time_t));
+extern void timestampsSet _PARAMS((StoreEntry *));
 extern int waisStart _PARAMS((int, char *, method_t, char *, StoreEntry *));
 extern void storeDirClean _PARAMS((void));
 extern char dash_str[];
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stat.cc,v 1.93 1996/10/25 02:15:20 wessels Exp $
+ * $Id: stat.cc,v 1.94 1996/10/27 07:12:00 wessels Exp $
  *
  * DEBUG: section 18    Cache Manager Statistics
  * AUTHOR: Harvest Derived
@@ -575,6 +575,9 @@ server_list(cacheinfo * obj, StoreEntry * sentry)
 	storeAppendPrintf(sentry, "{PINGS ACKED: %8d %3d%%}\n",
 	    e->stats.pings_acked,
 	    percent(e->stats.pings_acked, e->stats.pings_sent));
+	storeAppendPrintf(sentry, "{IGNORED    : %8d %3d%%}\n",
+	    e->stats.ignored_replies,
+	    percent(e->stats.ignored_replies, e->stats.pings_acked));
 	storeAppendPrintf(sentry, "{Histogram of PINGS ACKED:}\n");
 	for (op = ICP_OP_INVALID; op < ICP_OP_END; op++) {
 	    if (e->stats.counts[op] == 0)
@@ -1260,6 +1263,7 @@ proto_count(cacheinfo * obj, protocol_t proto_id, log_type type)
     case LOG_TCP_HIT:
     case LOG_TCP_IMS_HIT:
     case LOG_TCP_EXPIRED_HIT:
+    case LOG_TCP_EXPIRED_FAIL_HIT:
     case LOG_UDP_HIT:
     case LOG_UDP_HIT_OBJ:
 	obj->proto_stat_data[proto_id].hit++;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store.cc,v 1.140 1996/10/25 17:34:55 wessels Exp $
+ * $Id: store.cc,v 1.141 1996/10/27 07:12:01 wessels Exp $
  *
  * DEBUG: section 20    Storeage Manager
  * AUTHOR: Harvest Derived
@@ -138,9 +138,6 @@
 #define WITH_MEMOBJ	1
 #define WITHOUT_MEMOBJ	0
 
-/* rate of checking expired objects in main loop */
-#define STORE_MAINTAIN_RATE	(10)
-
 #define STORE_IN_MEM_BUCKETS		(143)
 
 #define STORE_LOG_CREATE	0
@@ -469,13 +466,14 @@ static void
 storeLog(int tag, StoreEntry * e)
 {
     LOCAL_ARRAY(char, logmsg, MAX_URL << 1);
-    time_t t;
+    time_t t = -1;
     int expect_len = 0;
     int actual_len = 0;
     int code = 0;
     if (storelog_fd < 0)
 	return;
-    t = e->expires - squid_curtime;
+    if (-1 < e->expires)
+         t = e->expires - squid_curtime;
     if (e->mem_obj) {
 	code = e->mem_obj->reply->code;
 	expect_len = (int) e->mem_obj->reply->content_length;
@@ -792,7 +790,7 @@ storeCreateEntry(char *url,
     mem->data = new_MemObjectData();
     e->refcount = 0;
     e->lastref = squid_curtime;
-    e->timestamp = 0;		/* set in ttlSet() */
+    e->timestamp = 0;		/* set in timestampsSet() */
     e->ping_status = PING_NONE;
 
     /* allocate pending list */
@@ -1464,16 +1462,9 @@ storeDoRebuildFromDisk(struct storeRebuild_data *data)
 
 	if (store_rebuilding != STORE_REBUILDING_FAST) {
 	    if (stat(swapfile, &sb) < 0) {
-		if (squid_curtime - expires > Config.expireAge) {
-		    debug(20, 3, "storeRebuildFromDisk: Expired: <URL:%s>\n", url);
-		    if (opt_unlink_on_reload)
-			safeunlink(swapfile, 1);
-		    data->expcount++;
-		} else {
 		    debug(20, 3, "storeRebuildFromDisk: Swap file missing: <URL:%s>: %s: %s.\n", url, swapfile, xstrerror());
 		    if (opt_unlink_on_reload)
 			safeunlink(swapfile, 1);
-		}
 		continue;
 	    }
 	    /* Empty swap file? */
@@ -1517,13 +1508,6 @@ storeDoRebuildFromDisk(struct storeRebuild_data *data)
 	    data->objcount--;
 	    data->dupcount++;
 	}
-	if (squid_curtime - expires > Config.expireAge) {
-	    debug(20, 3, "storeRebuildFromDisk: Expired: <URL:%s>\n", url);
-	    if (opt_unlink_on_reload)
-		safeunlink(swapfile, 1);
-	    data->expcount++;
-	    continue;
-	}
 	/* Is the swap file number already taken? */
 	if (file_map_bit_test(sfileno)) {
 	    /* Yes it is, we can't use this swapfile */
@@ -1669,9 +1653,7 @@ storeGetSwapSize(void)
 static int
 storeCheckSwapable(StoreEntry * e)
 {
-    if (squid_curtime - e->expires > Config.expireAge) {
-	debug(20, 2, "storeCheckSwapable: NO: expires now\n");
-    } else if (e->method != METHOD_GET) {
+    if (e->method != METHOD_GET) {
 	debug(20, 2, "storeCheckSwapable: NO: non-GET method\n");
     } else if (!BIT_TEST(e->flag, ENTRY_CACHABLE)) {
 	debug(20, 2, "storeCheckSwapable: NO: not cachable\n");
@@ -2347,21 +2329,6 @@ storeClientCopy(StoreEntry * e, int stateoffset, int maxSize, char *buf, int *si
     return *size;
 }
 
-
-int
-storeEntryValidToSend(StoreEntry * e)
-{
-    if (squid_curtime < e->expires)
-	return 1;
-    if (e->expires != 0)
-	return 0;		/* Expired! */
-    if (e->store_status != STORE_PENDING)
-	return 0;
-    if (e->mem_status != IN_MEMORY)
-	return 0;
-    return 1;			/* STORE_PENDING, IN_MEMORY, exp=0 */
-}
-
 static int
 storeEntryValidLength(StoreEntry * e)
 {
@@ -2483,17 +2450,12 @@ static void
 storeInitHashValues(void)
 {
     int i;
-#define	AVG_OBJECT_SIZE	20
-#define	OBJECTS_PER_BUCKET	10
-
-    /* Calculate size of hash table.  Target is an arbitrary 10
-     * objects per bucket (maximum currently 64k buckets).  */
-    i = Config.Swap.maxSize / AVG_OBJECT_SIZE;
+    /* Calculate size of hash table (maximum currently 64k buckets).  */
+    i = Config.Swap.maxSize / Config.storeHash.avgObjectSize;
     debug(20, 1, "Swap maxSize %d, estimated %d objects\n",
 	Config.Swap.maxSize, i);
-    i /= OBJECTS_PER_BUCKET;
+    i /= Config.storeHash.objectsPerBucket;
     debug(20, 1, "Target number of buckets: %d\n", i);
-
     /* ideally the full scan period should be configurable, for the
      * moment it remains at approximately 24 hours.  */
     if (i < 8192)
@@ -2507,7 +2469,6 @@ storeInitHashValues(void)
     else
 	store_buckets = 65357, store_maintain_rate = 1;
     store_maintain_buckets = 1;
-
     debug(20, 1, "Using %d Store buckets, maintain %d bucket%s every %d second%s\n",
 	store_buckets,
 	store_maintain_buckets,
@@ -2855,8 +2816,6 @@ storeCheckExpired(StoreEntry * e)
 	return 0;
     if (Config.referenceAge && squid_curtime - e->lastref > Config.referenceAge)
 	return 1;
-    if (squid_curtime - e->expires > Config.expireAge)
-	return 1;
     return 0;
 }
 
@@ -2907,3 +2866,11 @@ storeFreeMemory(void)
     xfree(list);
     hashFreeMemory(store_table);
 }
+
+int
+expiresMoreThan(time_t expires, time_t when)
+{
+    if (expires < 0)
+	return 0;
+    return (expires > squid_curtime + when);
+}