----++++src/auth/UserRequest.cc
@@ -19,6 +19,8 @@
 #include &quot;comm/Connection.h&quot;
 #include &quot;fatal.h&quot;
 #include &quot;format/Format.h&quot;
+#include &quot;helper.h&quot;
+#include &quot;helper/Reply.h&quot;
 #include &quot;http/Stream.h&quot;
 #include &quot;HttpReply.h&quot;
 #include &quot;HttpRequest.h&quot;
@@ -116,13 +118,13 @@ Auth::UserRequest::setDenyMessage(char const *aString)
 }
 
 char const *
-Auth::UserRequest::getDenyMessage()
+Auth::UserRequest::getDenyMessage() const
 {
     return message;
 }
 
 char const *
-Auth::UserRequest::denyMessage(char const * const default_message)
+Auth::UserRequest::denyMessage(char const * const default_message) const
 {
     if (getDenyMessage() == NULL)
         return default_message;
@@ -574,3 +576,14 @@ Auth::UserRequest::helperRequestKeyExtras(HttpRequest *request, AccessLogEntry::
     return NULL;
 }
 
+void
+Auth::UserRequest::denyMessageFromHelper(const char *proto, const Helper::Reply &amp;reply)
+{
+    static SBuf messageNote;
+    if (!reply.notes.find(messageNote, &quot;message&quot;)) {
+        messageNote.append(proto);
+        messageNote.append(&quot; Authentication denied with no reason given&quot;);
+    }
+    setDenyMessage(messageNote.c_str());
+}
+
----++++src/auth/UserRequest.h
@@ -179,13 +179,13 @@ class UserRequest : public RefCountable
      */
     void start(HttpRequest *request, AccessLogEntry::Pointer &amp;al, AUTHCB *handler, void *data);
 
-    char const * denyMessage(char const * const default_message = NULL);
+    char const * denyMessage(char const * const default_message = NULL) const;
 
     /** Possibly overrideable in future */
     void setDenyMessage(char const *);
 
     /** Possibly overrideable in future */
-    char const * getDenyMessage();
+    char const * getDenyMessage() const;
 
     /**
      * Squid does not make assumptions about where the username is stored.
@@ -208,6 +208,9 @@ class UserRequest : public RefCountable
 
     const char *helperRequestKeyExtras(HttpRequest *, AccessLogEntry::Pointer &amp;al);
 
+    /// Sets the reason of &#39;authentication denied&#39; helper response.
+    void denyMessageFromHelper(char const *proto, const Helper::Reply &amp;reply);
+
 protected:
     /**
      * The scheme-specific actions to be performed when sending helper lookup.
----++++src/auth/negotiate/UserRequest.cc
@@ -307,11 +307,11 @@ Auth::Negotiate::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply
             const char *tokenNote = reply.notes.findFirst(&quot;token&quot;);
             lm_request-&gt;server_blob = xstrdup(tokenNote);
             auth_user_request-&gt;user()-&gt;credentials(Auth::Handshake);
-            auth_user_request-&gt;denyMessage("Authentication in progress");
+            auth_user_request-&gt;setDenyMessage("Authentication in progress");
             debugs(29, 4, HERE &lt;&lt; &quot;Need to challenge the client with a server token: &#39;&quot; &lt;&lt; tokenNote &lt;&lt; &quot;&#39;&quot;);
         } else {
             auth_user_request-&gt;user()-&gt;credentials(Auth::Failed);
-            auth_user_request-&gt;denyMessage("Negotiate authentication requires a persistent connection");
+            auth_user_request-&gt;setDenyMessage("Negotiate authentication requires a persistent connection");
         }
         break;
 
@@ -327,7 +327,7 @@ Auth::Negotiate::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply
 
         /* we&#39;re finished, release the helper */
         auth_user_request-&gt;user()-&gt;username(userNote);
-        auth_user_request-&gt;denyMessage("Login successful");
+        auth_user_request-&gt;setDenyMessage("Login successful");
         safe_free(lm_request-&gt;server_blob);
         lm_request-&gt;server_blob = xstrdup(tokenNote);
         lm_request-&gt;releaseAuthServer();
@@ -357,17 +357,11 @@ Auth::Negotiate::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply
     break;
 
     case Helper::Error: {
-        const char *tokenNote = reply.notes.findFirst(&quot;token&quot;);
-
-        SBuf messageNote;
         /* authentication failure (wrong password, etc.) */
-        if (reply.notes.find(messageNote, &quot;message&quot;))
-            auth_user_request-&gt;denyMessage(messageNote.c_str());
-        else
-            auth_user_request-&gt;denyMessage(&quot;Negotiate Authentication denied with no reason given&quot;);
+        auth_user_request-&gt;denyMessageFromHelper(&quot;Negotiate&quot;, reply);
         auth_user_request-&gt;user()-&gt;credentials(Auth::Failed);
         safe_free(lm_request-&gt;server_blob);
-        if (tokenNote != NULL)
+        if (const char *tokenNote = reply.notes.findFirst("token"))
             lm_request-&gt;server_blob = xstrdup(tokenNote);
         lm_request-&gt;releaseAuthServer();
         debugs(29, 4, &quot;Failed validating user via Negotiate. Result: &quot; &lt;&lt; reply);
@@ -387,11 +381,9 @@ Auth::Negotiate::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply
          * Needing YR. */
         SBuf errNote;
         if (reply.result == Helper::Unknown)
-            auth_user_request-&gt;denyMessage(&quot;Internal Error&quot;);
-        else if (reply.notes.find(errNote, &quot;message&quot;))
-            auth_user_request-&gt;denyMessage(errNote.c_str());
+            auth_user_request-&gt;setDenyMessage(&quot;Internal Error&quot;);
         else
-            auth_user_request-&gt;denyMessage("Negotiate Authentication failed with no reason given");
+            auth_user_request-&gt;denyMessageFromHelper("Negotiate", reply);
         auth_user_request-&gt;user()-&gt;credentials(Auth::Failed);
         safe_free(lm_request-&gt;server_blob);
         lm_request-&gt;releaseAuthServer();
----++++src/auth/ntlm/UserRequest.cc
@@ -302,11 +302,11 @@ Auth::Ntlm::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply)
             const char *serverBlob = reply.notes.findFirst(&quot;token&quot;);
             lm_request-&gt;server_blob = xstrdup(serverBlob);
             auth_user_request-&gt;user()-&gt;credentials(Auth::Handshake);
-            auth_user_request-&gt;denyMessage("Authentication in progress");
+            auth_user_request-&gt;setDenyMessage("Authentication in progress");
             debugs(29, 4, HERE &lt;&lt; &quot;Need to challenge the client with a server token: &#39;&quot; &lt;&lt; serverBlob &lt;&lt; &quot;&#39;&quot;);
         } else {
             auth_user_request-&gt;user()-&gt;credentials(Auth::Failed);
-            auth_user_request-&gt;denyMessage("NTLM authentication requires a persistent connection");
+            auth_user_request-&gt;setDenyMessage("NTLM authentication requires a persistent connection");
         }
         break;
 
@@ -321,7 +321,7 @@ Auth::Ntlm::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply)
             break;
         }
         auth_user_request-&gt;user()-&gt;username(userLabel);
-        auth_user_request-&gt;denyMessage("Login successful");
+        auth_user_request-&gt;setDenyMessage("Login successful");
         safe_free(lm_request-&gt;server_blob);
         lm_request-&gt;releaseAuthServer();
 
@@ -353,11 +353,7 @@ Auth::Ntlm::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply)
 
     case Helper::Error: {
         /* authentication failure (wrong password, etc.) */
-        SBuf errNote;
-        if (reply.notes.find(errNote, &quot;message&quot;))
-            auth_user_request-&gt;denyMessage(errNote.c_str());
-        else
-            auth_user_request-&gt;denyMessage(&quot;NTLM Authentication denied with no reason given&quot;);
+        auth_user_request-&gt;denyMessageFromHelper(&quot;NTLM&quot;, reply);
         auth_user_request-&gt;user()-&gt;credentials(Auth::Failed);
         safe_free(lm_request-&gt;server_blob);
         lm_request-&gt;releaseAuthServer();
@@ -376,13 +372,10 @@ Auth::Ntlm::UserRequest::HandleReply(void *data, const Helper::Reply &amp;reply)
          * Authenticate NTLM start.
          * If after a KK deny the user&#39;s request w/ 407 and mark the helper as
          * Needing YR. */
-        SBuf errNote;
         if (reply.result == Helper::Unknown)
-            auth_user_request-&gt;denyMessage(&quot;Internal Error&quot;);
-        else if (reply.notes.find(errNote, &quot;message&quot;))
-            auth_user_request-&gt;denyMessage(errNote.c_str());
+            auth_user_request-&gt;setDenyMessage(&quot;Internal Error&quot;);
         else
-            auth_user_request-&gt;denyMessage("NTLM Authentication failed with no reason given");
+            auth_user_request-&gt;denyMessageFromHelper("NTLM", reply);
         auth_user_request-&gt;user()-&gt;credentials(Auth::Failed);
         safe_free(lm_request-&gt;server_blob);
         lm_request-&gt;releaseAuthServer();
----++++src/tests/stub_libauth.cc
@@ -59,8 +59,8 @@ void Auth::UserRequest::operator delete (void *) STUB
 Auth::UserRequest::UserRequest() STUB
 Auth::UserRequest::~UserRequest() STUB
 void Auth::UserRequest::setDenyMessage(char const *) STUB
-char const * Auth::UserRequest::getDenyMessage() STUB_RETVAL("stub")
-char const * Auth::UserRequest::denyMessage(char const * const) STUB_RETVAL("stub")
+char const * Auth::UserRequest::getDenyMessage() const STUB_RETVAL("stub")
+char const * Auth::UserRequest::denyMessage(char const * const) const STUB_RETVAL("stub")
 void authenticateAuthUserRequestRemoveIp(Auth::UserRequest::Pointer, Ip::Address const &amp;) STUB
 void authenticateAuthUserRequestClearIp(Auth::UserRequest::Pointer) STUB
 int authenticateAuthUserRequestIPCount(Auth::UserRequest::Pointer) STUB_RETVAL(0)
----++++GitHub