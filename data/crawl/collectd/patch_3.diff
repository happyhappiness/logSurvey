----++++src/liboconfig/parser.y
@@ -31,7 +31,7 @@
 #include &quot;aux_types.h&quot;
 
 static char *unquote (const char *orig);
-static int yyerror (const char *s);
+static void yyerror(const char *s);
 
 /* Lexer variables */
 extern int yylineno;
@@ -159,8 +159,8 @@ block:
 	 if (strcmp ($1.key, $3) != 0)
 	 {
 		printf (&quot;block_begin = %s; block_end = %s;\n&quot;, $1.key, $3);
-	 	yyerror ("Block not closed..\n");
-		exit (1);
+		yyerror("block not closed");
+		YYERROR;
 	 }
 	 free ($3); $3 = NULL;
 	 $$ = $1;
@@ -172,8 +172,8 @@ block:
 	 if (strcmp ($1.key, $2) != 0)
 	 {
 		printf (&quot;block_begin = %s; block_end = %s;\n&quot;, $1.key, $2);
-		yyerror ("Block not closed..\n");
-		exit (1);
+		yyerror("block not closed");
+		YYERROR;
 	 }
 	 free ($2); $2 = NULL;
 	 $$ = $1;
@@ -247,18 +247,19 @@ entire_file:
 	;
 
 %%
-static int yyerror (const char *s)
+static void yyerror(const char *s)
 {
 	const char *text;
 
-	if (*yytext == &#39;\n&#39;)
+	if (yytext == NULL)
+		text = &quot;&lt;empty&gt;&quot;;
+	else if (*yytext == &#39;\n&#39;)
 		text = &quot;&lt;newline&gt;&quot;;
 	else
 		text = yytext;
 
-	fprintf (stderr, "Parse error in file `%s', line %i near `%s': %s\n",
+	fprintf(stderr, "Parse error in file `%s', line %i near `%s': %s\n",
 		c_file, yylineno, text, s);
-	return (-1);
 } /* int yyerror */
 
 static char *unquote (const char *orig)
----++++GitHub