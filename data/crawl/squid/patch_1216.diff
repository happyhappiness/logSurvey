@@ -1,6 +1,6 @@
 
 /*
- * $Id: ACLChecklist.h,v 1.10 2003/05/19 09:11:31 robertc Exp $
+ * $Id: ACLChecklist.h,v 1.11 2003/05/20 12:17:38 robertc Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -36,6 +36,8 @@
 
 #include "typedefs.h"
 
+class ExternalACLEntry;
+
 class ACLChecklist
 {
 
@@ -126,7 +128,7 @@ class NullState : public AsyncState
 
     PF *callback;
     void *callback_data;
-    external_acl_entry *extacl_entry;
+    ExternalACLEntry *extacl_entry;
     bool destinationDomainChecked() const;
     void markDestinationDomainChecked();
     bool sourceDomainChecked() const;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: CompositePoolNode.h,v 1.3 2003/03/04 01:40:25 robertc Exp $
+ * $Id: CompositePoolNode.h,v 1.4 2003/05/20 12:17:38 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -67,9 +67,21 @@ class CompositePoolNode : public RefCountable, public Updateable
     virtual void update(int incr) =0;
     virtual void parse() = 0;
 
-    virtual DelayIdComposite::Pointer id(struct in_addr &src_addr, AuthUserRequest *) = 0;
+    class CompositeSelectionDetails;
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &) = 0;
     void delayRead(DeferredRead const &);
 
+    class CompositeSelectionDetails
+    {
+
+    public:
+        CompositeSelectionDetails() {}
+
+        struct in_addr src_addr;
+        AuthUserRequest *user;
+        String tag;
+    };
+
 protected:
     void kickReads();
     DeferredReadManager deferredReads;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayConfig.cc,v 1.5 2003/03/08 09:43:49 robertc Exp $
+ * $Id: DelayConfig.cc,v 1.6 2003/05/20 12:17:38 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -71,8 +71,8 @@ DelayConfig::parsePoolClass()
     ushort delay_class_;
     ConfigParser::ParseUShort(&delay_class_);
 
-    if (delay_class_ < 1 || delay_class_ > 4) {
-        debug(3, 0) ("parse_delay_pool_class: Ignoring pool %d class %d not in 1 .. 4\n", pool, delay_class_);
+    if (delay_class_ < 1 || delay_class_ > 5) {
+        debug(3, 0) ("parse_delay_pool_class: Ignoring pool %d class %d not in 1 .. 5\n", pool, delay_class_);
         return;
     }
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayId.cc,v 1.9 2003/05/17 22:54:29 robertc Exp $
+ * $Id: DelayId.cc,v 1.10 2003/05/20 12:17:38 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -117,7 +117,11 @@ DelayId::DelayClient(clientHttpRequest * http)
         if (DelayPools::delay_data[pool].theComposite().getRaw() &&
                 aclCheckFast(DelayPools::delay_data[pool].access, &ch)) {
             DelayId result (pool + 1);
-            result.compositePosition(DelayPools::delay_data[pool].theComposite()->id(ch.src_addr, r->auth_user_request));
+            CompositePoolNode::CompositeSelectionDetails details;
+            details.src_addr = ch.src_addr;
+            details.user = r->auth_user_request;
+            details.tag = r->tag;
+            result.compositePosition(DelayPools::delay_data[pool].theComposite()->id(details));
             return result;
         }
     }
@@ -0,0 +1,245 @@
+
+/*
+ * $Id: DelayTagged.cc,v 1.1 2003/05/20 12:17:38 robertc Exp $
+ *
+ * DEBUG: section 77    Delay Pools
+ * AUTHOR: Robert Collins <robertc@squid-cache.org>
+ *
+ * SQUID Web Proxy Cache          http://www.squid-cache.org/
+ * ----------------------------------------------------------
+ *
+ *  Squid is the result of efforts by numerous individuals from
+ *  the Internet community; see the CONTRIBUTORS file for full
+ *  details.   Many organizations have provided support for Squid's
+ *  development; see the SPONSORS file for full details.  Squid is
+ *  Copyrighted (C) 2001 by the Regents of the University of
+ *  California; see the COPYRIGHT file for full details.  Squid
+ *  incorporates software developed and/or copyrighted by other
+ *  sources; see the CREDITS file for full details.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
+ *
+ *
+ * Copyright (c) 2003, Robert Collins <robertc@squid-cache.org>
+ */
+
+#include "config.h"
+
+#if DELAY_POOLS
+#include "squid.h"
+#include "DelayTagged.h"
+#include "authenticate.h"
+#include "NullDelayId.h"
+#include "Store.h"
+
+void *
+DelayTagged::operator new(size_t size)
+{
+    DelayPools::MemoryUsed += sizeof (DelayTagged);
+    return ::operator new (size);
+}
+
+void
+DelayTagged::operator delete (void *address)
+{
+    DelayPools::MemoryUsed -= sizeof (DelayTagged);
+    ::operator delete (address);
+}
+
+void
+DelayTagged::deleteSelf() const
+{
+    delete this;
+}
+
+DelayTagged::DelayTagged()
+{
+    DelayPools::registerForUpdates (this);
+}
+
+static SplayNode<DelayTaggedBucket::Pointer>::SPLAYFREE DelayTaggedFree;
+
+DelayTagged::~DelayTagged()
+{
+    DelayPools::deregisterForUpdates (this);
+    buckets.head->destroy (DelayTaggedFree);
+}
+
+static SplayNode<DelayTaggedBucket::Pointer>::SPLAYCMP DelayTaggedCmp;
+
+int
+DelayTaggedCmp(DelayTaggedBucket::Pointer const &left, DelayTaggedBucket::Pointer const &right)
+{
+    /* for rate limiting, case insensitive */
+    return left->tag.caseCmp(right->tag.buf());
+}
+
+void
+DelayTaggedFree(DelayTaggedBucket::Pointer &)
+{}
+
+void
+DelayTaggedStatsWalkee(DelayTaggedBucket::Pointer const &current, void *state)
+{
+    current->stats ((StoreEntry *)state);
+}
+
+void
+DelayTagged::stats(StoreEntry * sentry)
+{
+    spec.stats (sentry, "Per Tag");
+
+    if (spec.restore_bps == -1)
+        return;
+
+    storeAppendPrintf(sentry, "\t\tCurrent: ");
+
+    if (!buckets.head) {
+        storeAppendPrintf (sentry, "Not used yet.\n\n");
+        return;
+    }
+
+    buckets.head->walk(DelayTaggedStatsWalkee, sentry);
+    storeAppendPrintf(sentry, "\n\n");
+}
+
+void
+DelayTagged::dump(StoreEntry *entry) const
+{
+    spec.dump(entry);
+}
+
+struct DelayTaggedUpdater
+{
+    DelayTaggedUpdater (DelaySpec &_spec, int _incr):spec(_spec),incr(_incr){};
+
+    DelaySpec spec;
+    int incr;
+};
+
+void
+DelayTaggedUpdateWalkee(DelayTaggedBucket::Pointer const &current, void *state)
+{
+    DelayTaggedUpdater *t = (DelayTaggedUpdater *)state;
+    /* This doesn't change the value of the DelayTaggedBucket, so is safe */
+    const_cast<DelayTaggedBucket *>(current.getRaw())->theBucket.update(t->spec, t->incr);
+}
+
+void
+DelayTagged::update(int incr)
+{
+    DelayTaggedUpdater updater(spec, incr);
+    buckets.head->walk (DelayTaggedUpdateWalkee, &updater);
+}
+
+void
+DelayTagged::parse()
+{
+    spec.parse();
+}
+
+DelayIdComposite::Pointer
+
+DelayTagged::id(CompositePoolNode::CompositeSelectionDetails &details)
+{
+    if (!details.tag.size())
+        return new NullDelayId;
+
+    return new Id(this, details.tag);
+}
+
+void *
+DelayTagged::Id::operator new(size_t size)
+{
+    DelayPools::MemoryUsed += sizeof (Id);
+    return ::operator new (size);
+}
+
+void
+DelayTagged::Id::operator delete (void *address)
+{
+    DelayPools::MemoryUsed -= sizeof (Id);
+    ::operator delete (address);
+}
+
+void
+DelayTagged::Id::deleteSelf() const
+{
+    delete this;
+}
+
+void *
+DelayTaggedBucket::operator new(size_t size)
+{
+    DelayPools::MemoryUsed += sizeof (DelayTaggedBucket);
+    return ::operator new (size);
+}
+
+void
+DelayTaggedBucket::operator delete (void *address)
+{
+    DelayPools::MemoryUsed -= sizeof (DelayTaggedBucket);
+    ::operator delete (address);
+}
+
+DelayTaggedBucket::DelayTaggedBucket(String &aTag) : tag (aTag)
+{
+    debug (77,3) ("DelayTaggedBucket::DelayTaggedBucket\n");
+}
+
+DelayTaggedBucket::~DelayTaggedBucket()
+{
+    debug (77,3) ("DelayTaggedBucket::~DelayTaggedBucket\n");
+}
+
+void
+DelayTaggedBucket::stats (StoreEntry *entry) const
+{
+    storeAppendPrintf(entry, " %s:", tag.buf());
+    theBucket.stats (entry);
+}
+
+DelayTagged::Id::Id(DelayTagged::Pointer aDelayTagged, String &aTag) : theTagged(aDelayTagged)
+{
+    theBucket = new DelayTaggedBucket(aTag);
+    DelayTaggedBucket::Pointer const *existing = theTagged->buckets.find(theBucket, DelayTaggedCmp);
+
+    if (existing) {
+        theBucket = *existing;
+        return;
+    }
+
+    theBucket->theBucket.init(theTagged->spec);
+    theTagged->buckets.head = theTagged->buckets.head->insert (theBucket, DelayTaggedCmp);
+}
+
+DelayTagged::Id::~Id()
+{
+    debug (77,3) ("DelayTagged::Id::~Id\n");
+}
+
+int
+DelayTagged::Id::bytesWanted (int min, int max) const
+{
+    return theBucket->theBucket.bytesWanted(min,max);
+}
+
+void
+DelayTagged::Id::bytesIn(int qty)
+{
+    theBucket->theBucket.bytesIn(qty);
+}
+
+#endif
@@ -0,0 +1,110 @@
+
+/*
+ * $Id: DelayTagged.h,v 1.1 2003/05/20 12:17:38 robertc Exp $
+ *
+ * DEBUG: section 77    Delay Pools
+ * AUTHOR: Robert Collins <robertc@squid-cache.org>
+ *
+ * SQUID Web Proxy Cache          http://www.squid-cache.org/
+ * ----------------------------------------------------------
+ *
+ *  Squid is the result of efforts by numerous individuals from
+ *  the Internet community; see the CONTRIBUTORS file for full
+ *  details.   Many organizations have provided support for Squid's
+ *  development; see the SPONSORS file for full details.  Squid is
+ *  Copyrighted (C) 2001 by the Regents of the University of
+ *  California; see the COPYRIGHT file for full details.  Squid
+ *  incorporates software developed and/or copyrighted by other
+ *  sources; see the CREDITS file for full details.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
+ *
+ *
+ * Copyright (c) 2003, Robert Collins <robertc@squid-cache.org>
+ */
+
+#include "config.h"
+
+#ifndef DELAYTAGGED_H
+#define DELAYTAGGED_H
+
+#include "squid.h"
+#include "authenticate.h"
+#include "CompositePoolNode.h"
+#include "DelayIdComposite.h"
+#include "DelayBucket.h"
+#include "DelaySpec.h"
+#include "Array.h"
+#include "splay.h"
+
+class DelayTaggedBucket : public RefCountable
+{
+
+public:
+    typedef RefCount<DelayTaggedBucket> Pointer;
+    void *operator new(size_t);
+    void operator delete (void *);
+    virtual void deleteSelf() const {delete this;}
+
+    void stats(StoreEntry *)const;
+    DelayTaggedBucket(String &aTag);
+    ~DelayTaggedBucket();
+    DelayBucket theBucket;
+    String tag;
+};
+
+class DelayTagged : public CompositePoolNode
+{
+
+public:
+    typedef RefCount<DelayTagged> Pointer;
+    void *operator new(size_t);
+    void operator delete (void *);
+    virtual void deleteSelf() const;
+    DelayTagged();
+    virtual ~DelayTagged();
+    virtual void stats(StoreEntry * sentry);
+    virtual void dump(StoreEntry *entry) const;
+    virtual void update(int incr);
+    virtual void parse();
+
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &);
+
+private:
+
+class Id:public DelayIdComposite
+    {
+
+    public:
+        void *operator new(size_t);
+        void operator delete (void *);
+        virtual void deleteSelf() const;
+        Id (DelayTagged::Pointer, String &);
+        ~Id();
+        virtual int bytesWanted (int min, int max) const;
+        virtual void bytesIn(int qty);
+
+    private:
+        DelayTagged::Pointer theTagged;
+        DelayTaggedBucket::Pointer theBucket;
+    };
+
+    friend class Id;
+
+    DelaySpec spec;
+    Splay<DelayTaggedBucket::Pointer> buckets;
+};
+
+#endif /* DELAYTAGGED_H */
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayUser.cc,v 1.4 2003/02/21 22:50:05 robertc Exp $
+ * $Id: DelayUser.cc,v 1.5 2003/05/20 12:17:38 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -151,13 +151,12 @@ DelayUser::parse()
 }
 
 DelayIdComposite::Pointer
-
-DelayUser::id(struct in_addr &src_addr, AuthUserRequest *authRequest)
+DelayUser::id(CompositePoolNode::CompositeSelectionDetails &details)
 {
-    if (!authRequest)
+    if (!details.user)
         return new NullDelayId;
 
-    return new Id(this, authRequest->auth_user);
+    return new Id(this, details.user->auth_user);
 }
 
 void *
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayUser.h,v 1.4 2003/03/06 11:51:55 robertc Exp $
+ * $Id: DelayUser.h,v 1.5 2003/05/20 12:17:38 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -80,7 +80,7 @@ class DelayUser : public CompositePoolNode
     virtual void update(int incr);
     virtual void parse();
 
-    virtual DelayIdComposite::Pointer id(struct in_addr &src_addr, AuthUserRequest *);
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &);
 
 private:
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayVector.cc,v 1.7 2003/05/19 09:11:30 robertc Exp $
+ * $Id: DelayVector.cc,v 1.8 2003/05/20 12:17:38 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -119,10 +119,9 @@ DelayVector::parse()
 }
 
 DelayIdComposite::Pointer
-
-DelayVector::id(struct in_addr &src_addr, AuthUserRequest *authUser)
+DelayVector::id(CompositeSelectionDetails &details)
 {
-    return new Id(this, src_addr, authUser);
+    return new Id(this, details);
 }
 
 void
@@ -151,14 +150,13 @@ DelayVector::Id::deleteSelf() const
     delete this;
 }
 
-DelayVector::Id::Id(DelayVector::Pointer aDelayVector,struct in_addr &src_addr, AuthUserRequest *authUser) : theVector(aDelayVector)
+DelayVector::Id::Id(DelayVector::Pointer aDelayVector, CompositeSelectionDetails &details) : theVector(aDelayVector)
 {
     debug(77,3)("DelayVector::Id::Id\n");
     DelayVector::iterator pos = theVector->pools.begin();
 
-    while (pos != theVector->pools.end())
-    {
-        ids.push_back ((*pos)->id (src_addr, authUser));
+    while (pos != theVector->pools.end()) {
+        ids.push_back ((*pos)->id (details));
         ++pos;
     }
 }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayVector.h,v 1.6 2003/05/15 07:06:24 robertc Exp $
+ * $Id: DelayVector.h,v 1.7 2003/05/20 12:17:38 robertc Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -53,7 +53,7 @@ class DelayVector : public CompositePoolNode
     virtual void update(int incr);
     virtual void parse();
 
-    virtual DelayIdComposite::Pointer id(struct in_addr &src_addr, AuthUserRequest *);
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &);
     void push_back (CompositePoolNode::Pointer);
 
 private:
@@ -66,7 +66,7 @@ class Id:public DelayIdComposite
         void operator delete (void *);
         virtual void deleteSelf() const;
 
-        Id (DelayVector::Pointer,struct in_addr &src_addr, AuthUserRequest *);
+        Id (DelayVector::Pointer,CompositeSelectionDetails &);
         ~Id();
         virtual int bytesWanted (int min, int max) const;
         virtual void bytesIn(int qty);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ExternalACL.h,v 1.3 2003/02/25 12:22:34 robertc Exp $
+ * $Id: ExternalACL.h,v 1.4 2003/05/20 12:17:38 robertc Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -38,6 +38,8 @@
 #include "ACL.h"
 #include "ACLChecklist.h"
 
+class external_acl;
+
 class ExternalACLLookup : public ACLChecklist::AsyncState
 {
 
@@ -0,0 +1,106 @@
+
+/*
+ * $Id: ExternalACLEntry.cc,v 1.1 2003/05/20 12:17:38 robertc Exp $
+ *
+ * DEBUG: section 82    External ACL
+ * AUTHOR: Henrik Nordstrom, MARA Systems AB
+ *
+ * SQUID Web Proxy Cache          http://www.squid-cache.org/
+ * ----------------------------------------------------------
+ *
+ *  The contents of this file is Copyright (C) 2002 by MARA Systems AB,
+ *  Sweden, unless otherwise is indicated in the specific function. The
+ *  author gives his full permission to include this file into the Squid
+ *  software product under the terms of the GNU General Public License as
+ *  published by the Free Software Foundation; either version 2 of the
+ *  License, or (at your option) any later version.
+ *
+ *  Squid is the result of efforts by numerous individuals from
+ *  the Internet community; see the CONTRIBUTORS file for full
+ *  details.   Many organizations have provided support for Squid's
+ *  development; see the SPONSORS file for full details.  Squid is
+ *  Copyrighted (C) 2001 by the Regents of the University of
+ *  California; see the COPYRIGHT file for full details.  Squid
+ *  incorporates software developed and/or copyrighted by other
+ *  sources; see the CREDITS file for full details.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
+ *
+ * Copyright (c) 2003, Robert Collins <robertc@squid-cache.org>
+ */
+
+#include "squid.h"
+#include "ExternalACLEntry.h"
+
+/******************************************************************
+ * external_acl cache
+ */
+
+CBDATA_CLASS_INIT(ExternalACLEntry);
+
+void *
+ExternalACLEntry::operator new (size_t byteCount)
+{
+    /* derived classes with different sizes must implement their own new */
+    assert (byteCount == sizeof (ExternalACLEntry));
+    CBDATA_INIT_TYPE(ExternalACLEntry);
+    return cbdataAlloc(ExternalACLEntry);
+}
+
+void
+ExternalACLEntry::operator delete (void *address)
+{
+    cbdataFree (address);
+}
+
+void
+ExternalACLEntry::deleteSelf() const
+{
+    delete this;
+}
+
+ExternalACLEntry::ExternalACLEntry()
+{
+    lru.next = lru.prev = NULL;
+    result = 0;
+    date = 0;
+    user = NULL;
+    error = NULL;
+    def = NULL;
+}
+
+ExternalACLEntry::~ExternalACLEntry()
+{
+    safe_free(key);
+    safe_free(user);
+    safe_free(error);
+}
+
+void
+ExternalACLEntry::update(ExternalACLEntryData const &someData)
+{
+    date = squid_curtime;
+    result = someData.result;
+    safe_free(user);
+    safe_free(error);
+
+    if (someData.user)
+        user = xstrdup(someData.user);
+
+    if (someData.error)
+        error = xstrdup(someData.error);
+
+    tag = someData.tag;
+}
@@ -0,0 +1,99 @@
+
+/*
+ * $Id: ExternalACLEntry.h,v 1.1 2003/05/20 12:17:38 robertc Exp $
+ *
+ * DEBUG: section 82    External ACL
+ * AUTHOR: Henrik Nordstrom, MARA Systems AB
+ *
+ * SQUID Web Proxy Cache          http://www.squid-cache.org/
+ * ----------------------------------------------------------
+ *
+ *  The contents of this file is Copyright (C) 2002 by MARA Systems AB,
+ *  Sweden, unless otherwise is indicated in the specific function. The
+ *  author gives his full permission to include this file into the Squid
+ *  software product under the terms of the GNU General Public License as
+ *  published by the Free Software Foundation; either version 2 of the
+ *  License, or (at your option) any later version.
+ *
+ *  Squid is the result of efforts by numerous individuals from
+ *  the Internet community; see the CONTRIBUTORS file for full
+ *  details.   Many organizations have provided support for Squid's
+ *  development; see the SPONSORS file for full details.  Squid is
+ *  Copyrighted (C) 2001 by the Regents of the University of
+ *  California; see the COPYRIGHT file for full details.  Squid
+ *  incorporates software developed and/or copyrighted by other
+ *  sources; see the CREDITS file for full details.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
+ *
+ * Copyright (c) 2003, Robert Collins <robertc@squid-cache.org>
+ */
+
+#ifndef SQUID_EXTERNALACLENTRY_H
+#define SQUID_EXTERNALACLENTRY_H
+
+/******************************************************************
+ * ExternalACLEntryData
+ * Core data that ExternalACLEntry manages.
+ * Not meant to be used as remote storage at any point:
+ * stack or static or composition use only.
+ */
+
+class ExternalACLEntryData
+{
+
+public:
+    ExternalACLEntryData() : result (-1) , user(NULL) , error (NULL){}
+
+    //    ExternalACLEntryData(int anInt, char const *aUser, char const *anError) : result (anInt), user(aUser),error(anError) {}
+    int result;
+    char const *user;
+    char const *error;
+    String tag;
+};
+
+
+/*******************************************************************
+ * external_acl cache entry
+ * Used opaqueue in the interface
+ */
+
+class ExternalACLEntry: public hash_link
+{
+
+public:
+    void *operator new (size_t bytesToAllocate);
+    void operator delete (void *address);
+    void deleteSelf() const;
+
+    ExternalACLEntry();
+    ~ExternalACLEntry();
+
+    void update(ExternalACLEntryData const &);
+    dlink_node lru;
+    int result;
+    time_t date;
+    char *user;
+    char *error;
+    String tag;
+    external_acl *def;
+
+private:
+    CBDATA_CLASS(ExternalACLEntry);
+};
+
+typedef class ExternalACLEntry external_acl_entry;
+
+#endif
@@ -1,6 +1,6 @@
 
 /*
- * $Id: delay_pools.cc,v 1.38 2003/03/08 09:43:50 robertc Exp $
+ * $Id: delay_pools.cc,v 1.39 2003/05/20 12:17:39 robertc Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -58,21 +58,7 @@
 #include "NullDelayId.h"
 #include "DelayBucket.h"
 #include "DelayUser.h"
-
-/*
- * class 1		Everything is limited by a single aggregate
- * 			bucket.
- * 			
- * class 2		Everything is limited by a single aggregate
- * 			bucket as well as an "individual" bucket chosen
- * 			from bits 25 through 32 of the IP address.
- * 			
- * class 3		Everything is limited by a single aggregate
- * 			bucket as well as a "network" bucket chosen
- * 			from bits 17 through 24 of the IP address and a
- * 			"individual" bucket chosen from bits 17 through
- * 			32 of the IP address.
- */
+#include "DelayTagged.h"
 
 long DelayPools::MemoryUsed = 0;
 
@@ -95,7 +81,7 @@ class Aggregate : public CompositePoolNode
     virtual void update(int incr);
     virtual void parse();
 
-    virtual DelayIdComposite::Pointer id(struct in_addr &src_addr, AuthUserRequest *);
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &);
 
 private:
 
@@ -152,7 +138,7 @@ class VectorPool : public CompositePoolNode
     virtual void update(int incr);
     virtual void stats(StoreEntry * sentry);
 
-    virtual DelayIdComposite::Pointer id(struct in_addr &src_addr, AuthUserRequest *);
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &);
     VectorMap<unsigned char, DelayBucket> buckets;
     VectorPool();
     ~VectorPool();
@@ -243,7 +229,7 @@ class ClassCHostPool : public CompositePoolNode
     virtual void update(int incr);
     virtual void stats(StoreEntry * sentry);
 
-    virtual DelayIdComposite::Pointer id(struct in_addr &src_addr, AuthUserRequest *);
+    virtual DelayIdComposite::Pointer id(CompositeSelectionDetails &);
     ClassCHostPool();
     ~ClassCHostPool();
 
@@ -361,6 +347,11 @@ CommonPool::Factory(unsigned char _class, CompositePoolNode::Pointer& compositeC
 
         break;
 
+    case 5:
+        result->typeLabel = "5";
+        compositeCopy = new DelayTagged;
+        break;
+
     default:
         fatal ("unknown delay pool class");
         return NULL;
@@ -523,7 +514,7 @@ Aggregate::parse()
 
 DelayIdComposite::Pointer
 
-Aggregate::id(struct in_addr &src_addr, AuthUserRequest *)
+Aggregate::id(CompositeSelectionDetails &details)
 {
     if (rate()->restore_bps != -1)
         return new AggregateId (this);
@@ -834,12 +825,12 @@ VectorMap<Key,Value>::findKeyIndex (Key const key) const
 
 DelayIdComposite::Pointer
 
-VectorPool::id(struct in_addr &src_addr, AuthUserRequest *)
+VectorPool::id(CompositeSelectionDetails &details)
 {
     if (rate()->restore_bps == -1)
         return new NullDelayId;
 
-    unsigned int key = makeKey (src_addr);
+    unsigned int key = makeKey (details.src_addr);
 
     if (keyAllocated (key))
         return new Id (this, buckets.findKeyIndex(key));
@@ -1006,14 +997,14 @@ ClassCHostPool::makeKey (struct in_addr &src_addr) const
 
 DelayIdComposite::Pointer
 
-ClassCHostPool::id(struct in_addr &src_addr, AuthUserRequest *)
+ClassCHostPool::id(CompositeSelectionDetails &details)
 {
     if (rate()->restore_bps == -1)
         return new NullDelayId;
 
-    unsigned int key = makeKey (src_addr);
+    unsigned int key = makeKey (details.src_addr);
 
-    unsigned char host = makeHostKey (src_addr);
+    unsigned char host = makeHostKey (details.src_addr);
 
     unsigned char hostIndex;
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: external_acl.cc,v 1.40 2003/05/17 19:02:15 hno Exp $
+ * $Id: external_acl.cc,v 1.41 2003/05/20 12:17:39 robertc Exp $
  *
  * DEBUG: section 82    External ACL
  * AUTHOR: Henrik Nordstrom, MARA Systems AB
@@ -42,6 +42,7 @@
 
 #include "squid.h"
 #include "ExternalACL.h"
+#include "ExternalACLEntry.h"
 #include "authenticate.h"
 #include "Store.h"
 #include "fde.h"
@@ -65,41 +66,47 @@ static char *makeExternalAclKey(ACLChecklist * ch, external_acl_data * acl_data)
 static void external_acl_cache_delete(external_acl * def, external_acl_entry * entry);
 static int external_acl_entry_expired(external_acl * def, external_acl_entry * entry);
 static void external_acl_cache_touch(external_acl * def, external_acl_entry * entry);
-
-/*******************************************************************
- * external_acl cache entry
- * Used opaqueue in the interface
- */
-
-struct _external_acl_entry: public hash_link
-{
-    dlink_node lru;
-    int result;
-    time_t date;
-    char *user;
-    char *error;
-    external_acl *def;
-};
+static external_acl_entry *external_acl_cache_add(external_acl * def, const char *key, ExternalACLEntryData const &data);
 
 /******************************************************************
  * external_acl directive
  */
 
-struct _external_acl
+class external_acl
 {
+
+public:
     external_acl *next;
+
+    void add
+        (ExternalACLEntry *);
+
+    void trimCache();
+
     int ttl;
+
     int negative_ttl;
+
     char *name;
+
     external_acl_format *format;
+
     wordlist *cmdline;
+
     int children;
+
     helper *theHelper;
+
     hash_table *cache;
+
     dlink_list lru_list;
+
     int cache_size;
+
     int cache_entries;
+
     dlink_list queue;
+
     int require_auth;
 };
 
@@ -433,6 +440,26 @@ find_externalAclHelper(const char *name)
     return NULL;
 }
 
+void
+
+external_acl::add
+    (ExternalACLEntry *anEntry)
+{
+    trimCache();
+    assert (anEntry->def == NULL);
+    anEntry->def = this;
+    hash_join(cache, anEntry);
+    dlinkAdd(anEntry, &anEntry->lru, &lru_list);
+    cache_entries++;
+}
+
+void
+external_acl::trimCache()
+{
+    if (cache_size && cache_entries >= cache_size)
+        external_acl_cache_delete(this, static_cast<external_acl_entry *>(lru_list.tail->data));
+}
+
 
 /******************************************************************
  * external acl type
@@ -553,6 +580,9 @@ aclMatchExternal(external_acl_data *acl, ACLChecklist * ch)
     if (entry->user && cbdataReferenceValid(ch->conn()) && !ch->conn()->rfc931[0])
         xstrncpy(ch->conn()->rfc931, entry->user, USER_IDENT_SZ);
 
+    if (ch->request && !ch->request->tag.size())
+        ch->request->tag = entry->tag;
+
     return result;
 }
 
@@ -585,8 +615,6 @@ ACLExternal::dump() const
  * external_acl cache
  */
 
-CBDATA_TYPE(external_acl_entry);
-
 static void
 external_acl_cache_touch(external_acl * def, external_acl_entry * entry)
 {
@@ -741,66 +769,38 @@ external_acl_entry_expired(external_acl * def, external_acl_entry * entry)
         return 0;
 }
 
-static void
-free_external_acl_entry(void *data)
-{
-    external_acl_entry *entry = static_cast<external_acl_entry *>(data);
-    safe_free(entry->key);
-    safe_free(entry->user);
-    safe_free(entry->error);
-}
-
 static external_acl_entry *
-external_acl_cache_add(external_acl * def, const char *key, int result, char *user, char *error)
+external_acl_cache_add(external_acl * def, const char *key, ExternalACLEntryData const & data)
 {
-    external_acl_entry *entry = static_cast<external_acl_entry *>(hash_lookup(def->cache, key));
-    debug(82, 2) ("external_acl_cache_add: Adding '%s' = %d\n", key, result);
+    ExternalACLEntry *entry = static_cast<ExternalACLEntry *>(hash_lookup(def->cache, key));
+    debug(82, 2) ("external_acl_cache_add: Adding '%s' = %d\n", key, data.result);
 
     if (entry) {
-        debug(82, 3) ("external_acl_cache_add: updating existing entry\n");
-        entry->date = squid_curtime;
-        entry->result = result;
-        safe_free(entry->user);
-        safe_free(entry->error);
-
-        if (user)
-            entry->user = xstrdup(user);
-
-        if (error)
-            entry->error = xstrdup(error);
-
+        debug(82, 3) ("ExternalACLEntry::update: updating existing entry\n");
+        entry->update (data);
         external_acl_cache_touch(def, entry);
 
         return entry;
     }
 
-    CBDATA_INIT_TYPE_FREECB(external_acl_entry, free_external_acl_entry);
-    /* Maintain cache size */
-
-    if (def->cache_size && def->cache_entries >= def->cache_size)
-        external_acl_cache_delete(def, static_cast<external_acl_entry *>(def->lru_list.tail->data));
-    entry = cbdataAlloc(external_acl_entry);
+    entry = new ExternalACLEntry;
     entry->key = xstrdup(key);
-    entry->date = squid_curtime;
-    entry->result = result;
-    if (user)
-        entry->user = xstrdup(user);
-    if (error)
-        entry->error = xstrdup(error);
-    entry->def = def;
-    hash_join(def->cache, entry);
-    dlinkAdd(entry, &entry->lru, &def->lru_list);
-    def->cache_entries += 1;
+    entry->update (data);
+
+    def->add
+    (entry);
+
     return entry;
 }
 
 static void
 external_acl_cache_delete(external_acl * def, external_acl_entry * entry)
 {
+    assert (entry->def == def);
     hash_remove_link(def->cache, entry);
     dlinkDelete(&entry->lru, &def->lru_list);
     def->cache_entries -= 1;
-    cbdataFree(entry);
+    entry->deleteSelf();
 }
 
 /******************************************************************
@@ -845,6 +845,9 @@ free_externalAclState(void *data)
  *
  *   user=        The users name (login)
  *   error=       Error description (only defined for ERR results)
+ *   tag= 	  A string tag to be applied to the request that triggered the acl match.
+ *   			applies to both OK and ERR responses.
+ *   			Won't override existing request tags.
  *
  * Other keywords may be added to the protocol later
  *
@@ -858,13 +861,12 @@ externalAclHandleReply(void *data, char *reply)
 {
     externalAclState *state = static_cast<externalAclState *>(data);
     externalAclState *next;
-    int result = 0;
     char *status;
     char *token;
     char *value;
     char *t;
-    char *user = NULL;
-    char *error = NULL;
+    ExternalACLEntryData entryData;
+    entryData.result = 0;
     external_acl_entry *entry = NULL;
 
     debug(82, 2) ("externalAclHandleReply: reply=\"%s\"\n", reply);
@@ -873,18 +875,21 @@ externalAclHandleReply(void *data, char *reply)
         status = strwordtok(reply, &t);
 
         if (status && strcmp(status, "OK") == 0)
-            result = 1;
+            entryData.result = 1;
 
         while ((token = strwordtok(NULL, &t))) {
             value = strchr(token, '=');
 
             if (value) {
                 *value++ = '\0';	/* terminate the token, and move up to the value */
 
+                if (strcmp(token, "tag") == 0)
+                    entryData.tag = value;
+
                 if (strcmp(token, "user") == 0)
-                    user = value;
+                    entryData.user = value;
                 else if (strcmp(token, "error") == 0)
-                    error = value;
+                    entryData.error = value;
             }
         }
     }
@@ -893,7 +898,7 @@ externalAclHandleReply(void *data, char *reply)
 
     if (cbdataReferenceValid(state->def)) {
         if (reply)
-            entry = external_acl_cache_add(state->def, state->key, result, user, error);
+            entry = external_acl_cache_add(state->def, state->key, entryData);
         else {
             if (reply)
                 entry = (external_acl_entry *)hash_lookup(state->def->cache, state->key);
@@ -1003,7 +1008,7 @@ ACLExternal::ExternalAclLookup(ACLChecklist * ch, ACLExternal * me, EAH * callba
 
     helperSubmit(def->theHelper, buf.buf, externalAclHandleReply, state);
 
-    external_acl_cache_add(def, key, -1, NULL, NULL);
+    external_acl_cache_add(def, key, ExternalACLEntryData());
 
     dlinkAdd(state, &state->list, &def->queue);
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: structs.h,v 1.463 2003/05/17 17:35:06 hno Exp $
+ * $Id: structs.h,v 1.464 2003/05/20 12:17:39 robertc Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -226,6 +226,8 @@ struct _RemovalPolicySettings
     wordlist *args;
 };
 
+class external_acl;
+
 struct _SquidConfig
 {
 
@@ -1699,6 +1701,7 @@ class request_t
     time_t lastmod;		/* Used on refreshes */
     const char *vary_headers;	/* Used when varying entities are detected. Changes how the store key is calculated */
     char *peer_domain;		/* Configured peer forceddomain */
+    String tag;			/* Internal tag for this request */
 };
 
 #endif
@@ -1,6 +1,6 @@
 
 /*
- * $Id: typedefs.h,v 1.161 2003/05/17 17:35:06 hno Exp $
+ * $Id: typedefs.h,v 1.162 2003/05/20 12:17:39 robertc Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -370,9 +370,4 @@ typedef struct _htcpReplyData htcpReplyData;
 typedef RemovalPolicy *REMOVALPOLICYCREATE(wordlist * args);
 
 typedef int STDIRSELECT(const StoreEntry *);
-
-typedef struct _external_acl external_acl;
-
-typedef struct _external_acl_entry external_acl_entry;
-
 #endif /* SQUID_TYPEDEFS_H */