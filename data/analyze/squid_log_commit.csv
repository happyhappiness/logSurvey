url,date,title,changes,file_name
https://github.com/squid-cache/squid/commit/9a03c44bb897241473997e57d33656add9f8ee71,"Mar 1, 2018","Use va_copy() on all platforms; fixed a dangerous low-level bug (#160)

To improve cross-compilation support and to simplify code, rely on C++11
cstdarg header instead of ./configure-time va_copy() detection.

Using ./configure-time detection for va_copy() is dangerous because when
it does not work (e.g., during a poorly configured cross-compilation
attempt), Squid may crash if va_copy() was needed but was not detected.

See also: Bug 4821 and bug 753.

Also found and fixed a low-level bug: StoreEntry::vappendf() was not
using va_copy() because store.cc lacked VA_COPY #defines. The affected
code (900+ callers!) is used for cache manager responses and Gopher
gateway response compilation. If any of those calls required a buffer
larger than 4KB, the lack of those va_copy() calls could lead to crashes
and/or data corruption issues on platforms where va_copy() is required."">",114,data/crawl/squid/patch_0.diff
https://github.com/squid-cache/squid/commit/4d27d0ab7be057352a6a5d552f85a4181f1153a5,"Nov 17, 2017","Relay peer CONNECT error status line and headers to users (#80)

Automated agents and human users (or their support staff!) often benefit
from knowing what went wrong. Dropping such details is a bad default.
For example, automation may rely on receiving the original status code.

Our CVE-2015-5400 fix (74f35ca) was too aggressive -- it hid all peer
errors behind a generic 502 (Bad Gateway) response. Pass-through peer
authentication errors were later (971003b) exposed again, but our CVE
fix intent was _not_ to hide _any_ peer errors in the first place! The
intent was to close the connection after delivering the error response.
Hiding peer errors was an (unfortunate) implementation choice.

It could be argued that some peer errors should not be relayed, but
since Squid successfully relayed all peer errors prior to 74f35ca and
continues to relay all non-CONNECT peer errors today, discriminating
peer errors is a separate (and possibly unnecessary) feature.

Ideally, Squid should mangle and relay the whole error message (instead
of sending small original headers). Squid should also relay 1xx control
messages while waiting for the final response. Unfortunately, doing so
properly, without reopening CVE-2015-5400 or duplicating a lot of
complex code, is a huge project. This small change fixes the most acute
manifestation of the ""hiding errors from users"" problem. The rest is a
long-term TODO.'>",12,data/crawl/squid/patch_1.diff
https://github.com/squid-cache/squid/commit/cf487124163a9a460ad78f5a482a5fd90fcf9cce,"Nov 2, 2017","Move TLS/SSL http_port config values to libsecurity (#51)

These are most of the minor shuffling prerequisite for the proposal to allow generate-host-certificates to set a CA filename. These are required in libsecurity in order to prevent circular dependencies between libsecurity, libssl and libanyp.

Also contains some improvements to how configuration errors are displayed for these affected settings and some bugs fixed where the configured values were handled incorrectly."">",608,data/crawl/squid/patch_2.diff
https://github.com/squid-cache/squid/commit/4ec218d55249c6edd2a4fe4511212a721c98394b,"Jul 22, 2017","Cleaned up net_db structures. Made Coverity happier? (#27)

Fixes false positive by Coverity Scan. Issue 1415048 (RESOURCE_LEAK)?

No runtime testing."">",22,data/crawl/squid/patch_3.diff
https://github.com/squid-cache/squid/commit/621f4299cbf34e3daf591d314cf1c14496d5f0d1,"Jul 10, 2017","TLS: move X509_NAME_STACK_Pointer to Security::ServerOptions

This Pointer is only used by the Server port options.

No GnuTLS support added in this patch, just a straight shuffle
of the OpenSSL code."">",182,data/crawl/squid/patch_4.diff
https://github.com/squid-cache/squid/commit/72ed59794689bb3006d1ea6f20e060ed8259e3d3,"Jul 8, 2017","Cleanup: remove many unused-parameter warnings from tests and stubs"">",194,data/crawl/squid/patch_5.diff
https://github.com/squid-cache/squid/commit/37cb257b0ca7224c1b556c205f2a9c25a2acc1a3,"Jul 8, 2017","Validate mime icon URL before allocating store entries"">",10,data/crawl/squid/patch_6.diff
https://github.com/squid-cache/squid/commit/9e167fa2396d9469017d2ff4c5a3ded5a5b58317,"Jun 18, 2017","Cleanup: remove many whitespace typos

... caught by astyle 2.06 but ignored by 2.04"">",158,data/crawl/squid/patch_7.diff
https://github.com/squid-cache/squid/commit/52af54dd4e55d9241339d3851c92191463ef4524,"Jun 17, 2017","SourceFormat Enforcement"">",160,data/crawl/squid/patch_8.diff
https://github.com/squid-cache/squid/commit/89d897e150e431e130d6e9710834b4e475411068,"Jun 7, 2017","Improve config parsing of logformat definitions

Squid has for some time ignored custom definitions using the same name
as internally defined formats. And overwritten custom formats when there
was a repeated definition.

* Detect logformat duplicates and produce ERROR message indicating the
  format name, config line and action taken.

* Add some missing FATAL labels on parse abort when access_log has
  multiple logformat= options configured.

* Add missing FATAL error message when logformat lines has no name
  parameter (and thus no tokens either).

* Omit the default &quot;logformat=squid&quot; option from cachemgr config dumps."">",26,data/crawl/squid/patch_9.diff
https://github.com/squid-cache/squid/commit/dcaa51f413ef42f3bad0504c91c15baa358f107d,"May 29, 2017","Add OpenSSL library details to -v output

This is partially to meet the OpenSSL copyright requirement that binaries
mention when they are using the library, and partially for admin to see
which library their Squid is using when multiple are present in the system."">",4,data/crawl/squid/patch_10.diff
https://github.com/squid-cache/squid/commit/e99fa721fc2a16026d284336fabe66db4518c3e5,"May 23, 2017","Make PID file check/creation atomic to avoid associated race conditions.

After this change, if N Squid instances are concurrently started shortly
after time TS, then exactly one Squid instance (X) will run (and have
the corresponding PID file). If another Squid instance has already been
running (with the corresponding PID file) at TS, then X will be that
&quot;old&quot; Squid instance. If no Squid instances were running at TS, then X
will be one of those new N Squids started after TS.

Lack of atomic PID file operations caused unexpected Squid behavior:
* Mismatch between started Squid instance and stored PID file.
* Unexpected crashes due to failed allocation of shared resources,
  such as listening TCP ports or shared memory segments.

A new File class guarantees atomic PID file operations using locks. We
tried to generalize/reuse Ssl::Lock from the certificate generation
helper, but that was a bad idea: Helpers cannot use a lot of Squid code
(e.g., debugs(), TextException, SBuf, and enter_suid()), and the old
Ssl::Lock class cannot support shared locking without a major rewrite.

File locks on Solaris cannot work well (see bug #4212 comment #14), but
those problems do not affect PID file management code. Solaris- and
Windows-specific File code has not been tested and may not build.

Failure to write a PID file is now fatal. It used to be fatal only when
Squid was started with the -C command line option. In the increasingly
SMP world, running without a PID file leads to difficult-to-triage
errors. An admin who does not care about PID files should disable them.

Squid now exits with a non-zero error code if another Squid is running.


Also removed PID file rewriting during reconfiguration in non-daemon
mode. Squid daemons do not support PID file reconfiguration since trunk
r13867, but that revision (accidentally?) left behind half-broken
reconfiguration code for non-daemon mode. Fixing that code is difficult,
and supporting PID reconfigure in non-daemons is probably unnecessary.

Also fixed &quot;is Squid running?&quot; check when kill(0) does not have
permissions to signal the other instance. This does happen when Squid is
started (e.g., on the command line) by a different user than the user
Squid normally runs as or, perhaps, when the other Squid instance enters
a privileged section at the time of the check (untested). The bug could
result in undelivered signals or multiple running Squid instances.

These changes do not alter partially broken enter/leave_suid() behavior
of main.cc. That old code will need to be fixed separately!

PID file-related cache.log messages have changed slightly to improve
consistency with other DBG_IMPORTANT messages and to simplify code.
Squid no longer lies about creating a non-configured PID file. TODO:
Consider lowering the importance of these benign/boring messages.


* Terminal errors should throw instead of calling exit()

Squid used to call exit() in many PID-related error cases. Using exit()
as an error handling mechanism creates several problems:

1. exit() does not unwind the stack, possibly executing atexit()
   handlers in the wrong (e.g., privileged) context, possibly leaving
   some RAII-controller resources in bad state, and complicating triage;
2. Using exit() complicates code by adding a yet another error handling
   mechanism to the (appropriate) exceptions and assertions.
3. Spreading exit() calls around the code obscures unreachable code
   areas, complicates unifying exit codes, and confuses code checkers.

Long-term, it is best to use exceptions for nearly all error handling.
Reaching that goal will take time, but we can and should move in that
direction: The adjusted SquidMainSafe() treats exceptions as fatal
errors, without dumping core or assuming that no exception can reach
SquidMainSafe() on purpose. This trivial-looking change significantly
simplified (and otherwise improved) PID-file handling code!

The fatal()-related code suffers from similar (and other) problems, but
we did not need to touch it.

TODO: Audit catch(...) and exit() cases [in main.cc] to take advantage
of the new SquidMainSafe() code supporting the throw-on-errors approach."">",1038,data/crawl/squid/patch_11.diff
https://github.com/squid-cache/squid/commit/0ce8e93bd91ba176e1f27087a9e5ed6481e7d24a,"Apr 12, 2017","Count failures and use peer-specific connect timeouts when tunneling.

Fixed two bugs with tunneling CONNECT requests (or equivalent traffic)
through a cache_peer:

1. Not detecting dead cache_peers due to missing code to count peer
   connect failures. TLS/SSL-level failures were detected (for &quot;tls&quot;
   cache_peers) but TCP/IP connect(2) failures were not (for all peers).

2. Origin server connect_timeout used instead of peer_connect_timeout or
   a peer-specific connect-timeout=N (where configured).

The regular forwarding code path does not have the above bugs. This
change reduces code duplication across the two code paths (that
duplication probably caused these bugs in the first place), but a lot
more work is needed in that direction.

The 5-second forwarding timeout hack has been in Squid since
forward_timeout inception (r6733). It is not without problems (now
marked with an XXX), but I left it as is to avoid opening another
Pandora box. The hack now applies to the tunneling code path as well."">",194,data/crawl/squid/patch_12.diff
https://github.com/squid-cache/squid/commit/90be6ff518647d4980ad6b725b1279da082cc7ee,"Mar 23, 2017","Fix appending Http::HdrType::VIA code duplication

... resolving Via header truncation at 1024 bytes.

Also fixes the generated Via values for non-HTTP protocols."">",63,data/crawl/squid/patch_13.diff
https://github.com/squid-cache/squid/commit/b27668ec6cfce0b56ca6d8ef4b887207f4ecc6b7,"Feb 19, 2017","Add response delay pools feature for Squid-to-client speed limiting.

The feature restricts Squid-to-client bandwidth only.  It applies to
both cache hits and misses.

  * Rationale *

  This may be useful for specific response(s) bandwidth limiting.
  There are situations when doing this is hardly possible
  (or impossible) by means of netfilter/iptables operating with
  TCP/IP packets and IP addresses information for filtering. In other
  words, sometimes it is problematic to &#39;extract&#39; a single response from
  TCP/IP data flow at system level. For example, a single Squid-to-client
  TCP connection can transmit multiple responses (persistent connections,
  pipelining or HTTP/2 connection multiplexing) or be encrypted
  (HTTPS proxy mode).

  * Description *

  When Squid starts delivering the final HTTP response to a client,
  Squid checks response_delay_pool_access rules (supporting fast ACLs
  only), in the order they were declared. The first rule with a
  matching ACL wins.  If (and only if) an &quot;allow&quot; rule won, Squid
  assigns the response to the corresponding named delay pool.

  If a response is assigned to a delay pool, the response becomes
  subject to the configured bucket and aggregate bandwidth limits of
  that pool, similar to the current &quot;class 2&quot; server-side delay pools,
  but with a brand new, dedicated &quot;individual&quot; filled bucket assigned to
  the matched response.

  The new feature serves the same purpose as the existing client-side
  pools: both features limit Squid-to-client bandwidth. Their common
  interface was placed into a new base BandwidthBucket class.  The
  difference is that client-side pools do not aggregate clients and
  always use one bucket per client IP. It is possible that a response
  becomes a subject of both these pools. In such situations only matched
  response delay pool will be used for Squid-to-client speed limiting.

  * Limitations *

  The accurate SMP support (with the aggregate bucket shared among
  workers) is outside this patch scope. In SMP configurations,
  Squid should automatically divide the aggregate_speed_limit and
  max_aggregate_size values among the configured number of Squid
  workers. 

  * Also: *

  Fixed ClientDelayConfig which did not perform cleanup on
  destruction, causing memory problems detected by Valgrind. It was not
  possible to fix this with minimal changes because of linker problems
  with SquidConfig while checking with test-builds.sh. So I had
  to refactor ClientDelayConfig module, separating configuration code
  (old ClientDelayConfig class) from configured data (a new
  ClientDelayPools class) and minimizing dependencies with SquidConfig."">",1109,data/crawl/squid/patch_14.diff
https://github.com/squid-cache/squid/commit/b5db97e7aa415bd1630a7d47d59d7ea88aa0d17b,"Feb 14, 2017","Fix memory leak and parse handling error introduced by r15024.

* Do not leak Note::Value::Value::valueFormat.
* Throw if annotation value parsing failures.

Detected by Coverity Scan:
 * CID 1399758:  Error handling issues (CHECKED_RETURN)
 * CID 1399759:  Resource leaks (CTOR_DTOR_LEAK)"">",8,data/crawl/squid/patch_15.diff
https://github.com/squid-cache/squid/commit/46e791c629e44630fe6e1df32bb0d73f10b1299d,"Feb 8, 2017","digest_ldap_auth: Add -r option to clamp the realm to a fixed value

Some historic Digest Auth implementations do not include the realm in the
digest password attribute. The password is effectively stored as &quot;HA1&quot;
instead of &quot;REALM:HA1&quot;.

The realm cannot simply be ignored due to:
 1) the realm is both the salting value used within the hash and the
scope limitation on what inputs from HTTP are used to compare against
the A1, and
 2) Squid does not itself verify the realm received was the one offered
and leaves the comparison to the backend system. There is some
possibility the authentication system is using multiple security realms
and Squids realm string is just an offer.


Not having realm tied to the credentials in the backend storage leaves
this particular helper with no other option but to trust the realm sent
(probably) over clear-text by any client/attacker actually matches the
salting. That allows remote senders to manipulate the realm string they
send to perform a collision attack against the stored password.
 They no longer have to find and prove knowledge of the password. But
just find a collision for its hash vs arbitrary realm strings.

Old Digest systems are not the safest things to begin with. They also
tend to use MD5 hashing which was the only one available for many years
and relatively easy to find collisions for.


To resolve all these problems allow the -l parameter to accept an empty
string (&#39;-l &quot;&quot; &#39;) when the -r option provides a fixed realm.

Also, fix several typos in the help text."">",25,data/crawl/squid/patch_16.diff
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,"Jan 30, 2017","Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such &#39;misuse&#39;.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc."">",69,data/crawl/squid/patch_17.diff
https://github.com/squid-cache/squid/commit/194ccc9c4c16a5a2f282aa47ed8b4b6060ebb0f8,"Jan 11, 2017","External ACL helpers error handling &amp; caching

The helper protocol for external ACLs [1] defines three possible return values:
   OK - Success. ACL test matches.
   ERR - Success. ACL test fails to match.
   BH - Failure. The helper encountered a problem.

The external acl helpers distributed with squid currently doesn&#39;t follow this
definition. For example, upon connection error, ERR is returned:

   $ ext_ldap_group_acl ... -d
   ext_ldap_group_acl: WARNING: could not bind to binddn &#39;Can&#39;t contact LDAP server&#39;
   ERR

 This is does not allow to distinguish &quot;no match&quot; and &quot;error&quot; either and
therefore negative caches &quot;ERR&quot;, also in the case of an error.

Moreover there are multiple problems inside squid when trying to handle BH
responses:
  - Squid-5 and squid-4 retries requests for BH responses but crashes after the
    maximum retry number (currently 2) is reached.
  - If an external acl helper return always BH (eg because the LDAP server is
    down) squid sends infinitely new request to the helper.

This is a Measurement Factory project"">",173,data/crawl/squid/patch_18.diff
https://github.com/squid-cache/squid/commit/9d52ba1165dfa797b4fe688b49f0c10dc98e25a5,"Jan 11, 2017","Reduce crashes due to unexpected ClientHttpRequest termination.

The underlying problem has been known since r13480: If a
ClientHttpRequest job ends without Http::Stream (and ConnStateData)
knowledge, then Squid is likely to segfault or assert. This patch does
not resolve the underlying issue (a proper fix would require
architectural changes in a consensus-lacking area) but makes an
unexpected ClientHttpRequest job destruction less likely.

BodyPipe and Adaptation-related exceptions are the major causes of
unexpected ClientHttpRequest job destruction. This patch handles them by
closing the client connection. Connection closure should trigger an
orderly top-down cleanup, including Http::Stream, ConnStateData, and
ClientHttpRequest destruction.

If there is no connection to close, then the exception is essentially
ignored with a level-1 error message disclosing the problem. The side
effects of ignoring such exceptions are unknown, but without a client
connection, it is our hope that they would be relatively benign.

This is a Measurement Factory project."">",16,data/crawl/squid/patch_19.diff
https://github.com/squid-cache/squid/commit/11e14d639b6979de936aad35a04be4cf82c6519b,"Jan 3, 2017","Tests: shuffle libmem Pool unit test to src/

Refactor for cppunit framework instead of custom code.

Duplicate the basic create-free-realloc cycle test for both Pool and MemProxy
but do not add missing tests for other API calls at this time."">",190,data/crawl/squid/patch_20.diff
https://github.com/squid-cache/squid/commit/cc488ec94560163ed6ee80f11077ee234cad657c,"Dec 24, 2016","GnuTLS support for options= parameters

Use new Pointer to store PeerOptions::parsedOptions.

Migrate OpenSSL options= logic into libsecurity

Also, some API polishing for PeerOptions API."">",166,data/crawl/squid/patch_21.diff
https://github.com/squid-cache/squid/commit/50ad1e256824307b27dae0fbb078d65df8e2f816,"Dec 21, 2016","Cleanup: Refactor libauth Config object(s)

Refactoring the Auth::Config objects to get v5 building again.

The object storing auth_param settings is renamed to SchemeConfig.

A new Auth::Config object is added. The objects holding auth_param,
auth_schemes and other authenticate_* directives settings are stored
there instead of just auth_params.

Lots of outdated doxygen docs that have more up to date copies elsewhere
are removed. The &quot;\ingroup AuthAPI&quot; are left for now since some auth
things are not yet in the Auth:: namespace, but other auth related
groups are dropped completely.

Code parsing and dumping auth_param lines has been de-duplicated. Along
with the keep_alive and utf8 settings, which are shared by multiple
schemes. This allows dropping several virtual methods from NTLM and
Negotiate scheme objects.

An auth/forward.h file is added for predefines. Some initial Auth::
symbols are listed there. It is not complete, but others can be added as
needed later.

Some unnecessary includes have been removed. There are probably more. I
just did the obvious ones related to the new auth/forward.h and
auth/Config.h files at this time."">",1335,data/crawl/squid/patch_22.diff
https://github.com/squid-cache/squid/commit/644b0587cc6495cfabfcba76243a71dca0e1a20c,"Dec 20, 2016","Fix shadowing of member &#39;type&#39; in SchemeConfig"">",14,data/crawl/squid/patch_23.diff
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,"Dec 20, 2016","De-duplicate shared auth parameters keep_alive and utf8"">",144,data/crawl/squid/patch_24.diff
https://github.com/squid-cache/squid/commit/5bfc3dbd3b2f44d27b807a36ae94e063778e018a,"Dec 10, 2016","Added auth_schemes to control schemes presence and order in 401s/407s.

The new squid.conf directive may be used to customize authentication
schemes presence and order in Squid&#39;s HTTP 401 (Unauthorized) and 407
(Proxy Authentication Required) responses. The defaults remain the same."">",235,data/crawl/squid/patch_25.diff
https://github.com/squid-cache/squid/commit/ba6fffba7bbad6c0efcb9613b16aa97573ee7ef0,"Dec 8, 2016","Cleanup: Refactor custom ACL-controlled actions configuration code.

* Reduced parsing code duplication by adding ParseAclWithAction().

* Used functors for generic action-to-string conversions. It is possible
  now to perform such conversions providing lambda expressions.

* Used vectors of strings instead of C-style arrays for storing
  conversion tables and check against bounds with vector::at()."">",159,data/crawl/squid/patch_26.diff
https://github.com/squid-cache/squid/commit/ea5746353c1e72f8f59c0d08906a3d90400b0dac,"Nov 18, 2016","TLS: Add ErrorString() function to libsecurity API

To convert library error codes to strings in a library agnostic way."">",108,data/crawl/squid/patch_27.diff
https://github.com/squid-cache/squid/commit/ef143ddc67151d2f8e7b466bbf091fc837701027,"Nov 11, 2016","Segfault via Ftp::Client::readControlReply.

Added nil dereference checks for Ftp::Client::ctrl.conn, including:
- Ftp::Client::handlePasvReply() and handleEpsvReply() that dereference
  ctrl.conn in DBG_IMPORTANT messages.
- Many functions inside FtpClient.cc and FtpGateway.cc files.

TODO: We need to find a better way to handle nil ctrl.conn. It is only
a matter of time when we forget to add another dereference check or
discover a place we missed during this change.

Also disabled forwarding of EPRT and PORT commands to origin servers.
Squid support for those commands is broken and their forwarding may
cause segfaults (bug #4004). Active FTP is still supported, of course.

This is a Measurement Factory project"">",53,data/crawl/squid/patch_28.diff
https://github.com/squid-cache/squid/commit/28e1d824b2709692b463f590f8e3fd4d6b944652,"Nov 8, 2016","Make key= before cert= a fatal error instead of quietly hiding the issue"">",2,data/crawl/squid/patch_29.diff
https://github.com/squid-cache/squid/commit/a5f27c62b2b25ba7e492f0148e199d91984a8861,"Nov 1, 2016","Cleanup: replace cachemgr_passwd with SBufList

Remove one more use of wordlist in favour of SBufList

Also, updates the debug warning during config parse to
use the quieter PARSE_NOTE macro."">",71,data/crawl/squid/patch_30.diff
https://github.com/squid-cache/squid/commit/65308288f0c865498ea5c729b2137bc2216faca9,"Oct 30, 2016","Bug 4627: fix generate-host-certificates and dynamic_cert_mem_cache_size defaults

For Squid-4 and later make these options actually do what has been documented.
Which is to generate by default with a 4MB cache."">",12,data/crawl/squid/patch_31.diff
https://github.com/squid-cache/squid/commit/83f8d8f97118e1cae98c2c434e6643e04d1be113,"Sep 11, 2016","Move Ssl::Errors to libsecurity

Convert to an STL set instead of CBDATA list:
* The list is not passed as a callback parameter, so CBDATA overheads are
  unnecessary.
* STL set has built-in unique entry protection, so special
  push_back_unique handling is not required. Just emplace() entries.
* STL unorderd_set is used for fast lookup property. This should operate
  faster on medium or larger sized ACL lists than CbDataList type could."">",110,data/crawl/squid/patch_32.diff
https://github.com/squid-cache/squid/commit/fc10bc7dfd9d86e25804dbe9c90146054465b218,"Aug 19, 2016","Do not log error:transaction-end-before-headers after invalid requests.

Squid was not consuming read leftovers after failing to parse a request.
Starting with r14752, those leftovers were misinterpreted as another
unparsed request, creating an extra error:transaction-end-before-headers
access.log line after every error:invalid-request line (and probably
after every error:request-too-large line).

To stop Squid from accidentally reading new bytes and misinterpreting
them as another request, I was tempted to also clear flags.readMore
after consuming unparsable leftovers. In my tests, the flag is cleared
in ConnStateData::quitAfterError() called from clientTunnelOnError(),
but that logic looks rather fragile. I resisted the temptation to
improve it because controlling reads is a complicated matter (especially
in on_unsupported_protocol context) outside this logging fix scope."">",12,data/crawl/squid/patch_33.diff
https://github.com/squid-cache/squid/commit/d31d59d80a8ef8a2b85058fe6504188e43cee5ce,"Aug 17, 2016","Better support for unknown URL schemes

Squid already contains AnyP::PROTO_UNKNOWN support for unknown protocols
but currently does not preserve the actual string value received for them.

This adds a textual representation (&#39;image&#39;) to the UriScheme object to
fill that gap and ensure that all URL representations (ie cache keys,
logs and outgoing messages) are generated with the scheme string as it
was received rather than implicitly via a registered protocol type.

Future work:
* add ACL support for arbitrary scheme names
* support for comparisons of unknown schemes"">",194,data/crawl/squid/patch_34.diff
https://github.com/squid-cache/squid/commit/6f9f8f9d10ce1fedbd52f4362c6982d5308a9c4d,"Aug 1, 2016","Fetch missing certificates

Many web servers do not have complete certificate chains. Many browsers use
certificate extensions of the server certificate and download the missing
intermediate certificates automatically from the Internet.
This patch add this feature to Squid.

The information for missing issuer certificates provided by the Authority
Information Access X509 extension. This describes the format and the location
of additional information provided by the issuer of the certificate.

This patch:
  - Implements a class Downloader as an independet AsyncJob class. This new
    class can be used by internal squid subsystems to download objects from
    the network.
  - Modify Ssl::PeerConnector class to use new Downloader class to
    retrieve missing certificates from the net. The URIs of missing
    certificates from the Authority Information Access X509 extension.
  - Implements a new basic certificates parser based on openSSL for the
    TLS handshake messages parser.
  - Modify the Ssl::ServerBio class to:
     * Buffer the Server Hello message and not pass it to the openSSL library
       until downloading missing certificates, if any, is finished.
     * Extract server certificates from server hello message.
       This is required to check if there are missing certificates, and if yes
       give the chance to squid to download missing certificates and complete
       certificate chains before pass them for processing to openSSL

TODO:
  - Add support for certs-only CMS message.
    From  RFC 4325:
    &quot;Where the information is available via HTTP or FTP, accessLocation
    MUST be a uniformResourceIdentifier and the URI MUST point to either
    a single DER encoded certificate as specified in [RFC2585] or a
    collection of certificates in a BER or DER encoded &quot;certs-only&quot; CMS
    message as specified in [RFC2797]. &quot;
    ...
    &quot;Conforming applications that support HTTP or FTP for accessing
    certificates MUST be able to accept individual DER encoded
    certificates and SHOULD be able to accept &quot;certs-only&quot; CMS messages.&quot;

This is a Measurement Factory project"">",808,data/crawl/squid/patch_35.diff
https://github.com/squid-cache/squid/commit/ae3ac744d5c7682da3cae796ba2f0fa204cc494d,"Jul 27, 2016","TLS: do not hang when &#39;connector&#39; fails"">",2,data/crawl/squid/patch_36.diff
https://github.com/squid-cache/squid/commit/7b2b7ef6c34410187888add4f9cb1cb0b530d001,"Jul 22, 2016","Add stub for log/liblog symbols"">",94,data/crawl/squid/patch_37.diff
https://github.com/squid-cache/squid/commit/831e953c433124a8e8313e3fc585fee186f742bd,"Jul 12, 2016","Bug 4534: assertion failure in xcalloc when using many cache_dir"">",183,data/crawl/squid/patch_38.diff
https://github.com/squid-cache/squid/commit/e054c12658b290b2983db7551ae9a2ea1046460b,"Jul 7, 2016","Merged from trunk rev.14734"">",291,data/crawl/squid/patch_39.diff
https://github.com/squid-cache/squid/commit/942b1c39a7fa75d6d440d2550c00ea0213f54f25,"Jul 2, 2016","Bug 4540: revert r14720 buffer update"">",58,data/crawl/squid/patch_40.diff
https://github.com/squid-cache/squid/commit/49b3227bb88a0860f1589322cc5f8c05256a6015,"Jun 26, 2016","Merged from trunk rev.14721"">",202,data/crawl/squid/patch_41.diff
https://github.com/squid-cache/squid/commit/4dc4090b6f49b4f85f9edb27c550f7341f1f966e,"Jun 24, 2016","Convert Http::Stream::reqbuf to a MemBlob, making it configurable at runtime.

This also makes many other auxilary changes:

 * Increases the size of Http::Stream::requestBuffer to match that of
   read_ahead_gap. Previously this was a 4kb fixed size buffer. As a result,
   the overhead for a single client connection has been increased by 12 KB in
   the default configuration, but Squid will no longer artifically slow down
   client responses in this situation by fragmenting the read(2)/write(2)
   calls.

 * Improves the performance of large uncacheable replies. This was achieved by
   increasing the buffer size to 16 KB as mentioned above, but it is worth
   mentioning separately. Specifically, for a server, client and proxy all
   running on my local machine, this patch increases throughput on a 5 GB file
   from ~110 MB/s to ~340 MB/s.

 * Documents the influence that read_ahead_gap had on the size of read(2) calls
   for HTTP, and now the size of write(2) calls.

 * Prevent read_ahead_gap from being set to 0. Previously this would result in
   hung requests.

This work is submitted on behalf of Bloomberg L.P."">",58,data/crawl/squid/patch_42.diff
https://github.com/squid-cache/squid/commit/c75aba0236b968dc5d4c60597f3351b0704a2b69,"Jun 2, 2016","CryptoNG: cleanup TLS/SSL context initialization sequence

The libsecurity ServerOptions and PeerOptions class methods are now
supposed to be the API for creating SSL contexts for https_port,
cache_peer and outgoing connections.

Continue the API transition by making the callers of sslCreate*Context()
functions use the libsecurity API instead and repurpose the now obsolete
functions into the Ssl:: namespace to initialize the keying material and
other not-yet-converted OpenSSL state details of an existing context.

A side effect of this is that GnuTLS contexts are now actually created
and initialized as far as they can be.

SSL-Bump context initialization is not altered by this."">",83,data/crawl/squid/patch_43.diff
https://github.com/squid-cache/squid/commit/014adac1c52c2f7dabee4cf6361dec4f4207f41a,"May 20, 2016","Do not allow low-level debugging to hide important/critical messages.

Removed debugs() side effects that inadvertently resulted in some
important/critical messages logged at the wrong debugging level and,
hence, becoming invisible to the admin. The removed side effects set the
&quot;current&quot; debugging level when a debugs() parameter called a function
that also called debugs(). The last nested debugs() called affected the
level of all debugs() still in progress!

Related changes:

* Reentrant debugging messages no longer clobber parent messages. Each
  debugging message is logged separately, in the natural order of
  debugs() calls that would have happened if debugs() were a function
  (that gets already evaluated arguments) and not a macro (that
  evaluates its arguments in the middle of the call). This order is
  &quot;natural&quot; because good macros work like functions from the caller
  point of view.

* Assertions hit while evaluating debugs() parameters are now logged
  instead of being lost with the being-built debugs() log line.

* 10-20% faster debugs() performance because we no longer allocate a new
  std::ostringstream buffer for the vast majority of debugs() calls.
  Only reentrant calls get a new buffer.

* Removed old_debug(), addressing an old &quot;needs to die&quot; to-do.

* Removed do_debug() that changed debugging level while testing whether
  debugging is needed. Use side-effect-free Debug::Enabled() instead.

Also removed the OutStream wrapper class. The wrapper was added in trunk
revision 13767 that promised to (but did not?) MemPool the debug output
buffers. We no longer &quot;new&quot; the buffer stream so a custom new() method
would be unused. Besides, the r13767 explanation implied that providing
a Child::new() method would somehow overwrite Parent::allocator_type,
which did not compute for me. Finally, Squid &quot;new&quot;s other allocator-
enabled STL objects without overriding their new methods so either the
same problem is still there or it did not exist (or was different?).

Also removed Debug::xassert() because the debugs() assertions now work
OK without that hack."">",321,data/crawl/squid/patch_44.diff
https://github.com/squid-cache/squid/commit/b35bf4e58ca28895b4783eb950abc02f31e51db4,"May 2, 2016","HTTP/1.1: normalize Host header

When absolute-URI is provided Host header should be ignored. However some
code still uses Host directly so normalize it using the previously
sanitized URL authority value before doing any further request processing.

For now preserve the case where Host is completely absent. That matters
to the CVE-2009-0801 protection.

This also has the desirable side effect of removing multiple or duplicate
Host header entries."">",10,data/crawl/squid/patch_45.diff
https://github.com/squid-cache/squid/commit/793b1bfb48e5bd84205414497c7680c22ce0087b,"Apr 30, 2016","Stop parsing SSL records after a fatal SSL Alert. 

The fatal alert sender should close the connection. Waiting for the next
record is pointless and will obscure the problem when we eventually read
the EOF on the socket."">",4,data/crawl/squid/patch_46.diff
https://github.com/squid-cache/squid/commit/1f1eee3f84f3874ea982b10c6186c20d373ac6fc,"Apr 16, 2016","cachemgr.cgi: use dynamic MemBuf for internal content generation

Using a fixed size buffer limits how big content lines can be. Modern
HTTP is fast reaching the point where such limits are problematic.
Also fixes incorrect uses of snprintf() by removing them."">",95,data/crawl/squid/patch_47.diff
https://github.com/squid-cache/squid/commit/b69e9ffa9e2a148e2abc08511ebc5378697a7b6c,"Apr 3, 2016","Cleanup: remove xstrerror()"">",1093,data/crawl/squid/patch_48.diff
https://github.com/squid-cache/squid/commit/8f7dbf74048f3950f8931e5ea38480b5d35b641e,"Mar 30, 2016","Bug 4312: Support disabling collapsed forwarding SMP cooperation"">",46,data/crawl/squid/patch_49.diff
https://github.com/squid-cache/squid/commit/f57ae909fef52f5088b8304a4eb21d0c3978f533,"Mar 25, 2016","Fix memory leak of AccessLogentry::url

 ... created by ACLFilledChecklist::syncAle().

::syncAle() is the only place in the codebase that assigns a URL that
AccessLogEntry is expected to free(), which AccessLogEntry doesn&#39;t do.
This results in a memory leak.

  This is submitted on behalf of Bloomberg L.P."">",44,data/crawl/squid/patch_50.diff
https://github.com/squid-cache/squid/commit/c756d517bc402e8a228f8ff38088d055943677f3,"Mar 24, 2016","Added shared_memory_locking configuration directive to control mlock(2).

Locking shared memory at startup avoids SIGBUS crashes when kernel runs
out of RAM during runtime. Why not enable it by default? Unfortunately,
locking requires privileges and/or much-higher-than-default
RLIMIT_MEMLOCK limits. Thus, requiring locked memory by default is
likely to cause too many complaints, especially since Squid has not
required that before. The default is off, at least for now.

As we gain more experience, we may try to enable locking by default
while making default locking failures non-fatal and warning about
significant [accumulated] locking delays."">",72,data/crawl/squid/patch_51.diff
https://github.com/squid-cache/squid/commit/7b1607c2eb702800c00e7aeb51439424b866ef8f,"Mar 11, 2016","Documented some of the Packable API problems."">",9,data/crawl/squid/patch_52.diff
https://github.com/squid-cache/squid/commit/96dac49d0f40683999851e7b6ac68729e4f84580,"Mar 1, 2016","Merged from trunk"">",48,data/crawl/squid/patch_53.diff
https://github.com/squid-cache/squid/commit/398bc06602eb8e7ab32170d6216aa6ddd32e33c4,"Feb 29, 2016","Bug 4447:FwdState.cc:447 &quot;serverConnection() == conn&quot; assertion

After certain failures, FwdState::retryOrBail() may be called twice,
once from FwdState::unregisterdServerEnd() [called from
HttpStateData::swanSong()] and once from the FwdState&#39;s own connection
close handler. This may result in two concurrent connections to the
remote server, followed by an assertion upon a connection closure.

This patch:

 - After HttpStateData failures, instead of closing the squid-to-peer
   connection directly (and, hence, triggering closure handlers), calls
   HttpStateData::closeServer() and mustStop() for a cleaner exit with
   fewer wasteful side effects and better debugging.

 - Creates and remembers a FwdState close handler AsyncCall so that
   comm_remove_close_handler() can cancel an already scheduled callback.
   The conversion to the AsyncCall was necessary because legacy [close
   handler callbacks] cannot be canceled once scheduled.

This is a Measurement Factory project."">",41,data/crawl/squid/patch_54.diff
https://github.com/squid-cache/squid/commit/70df76e30151bb5fd2070a275e2489ee6bdaaea9,"Feb 19, 2016","Throw instead of asserting on some String overflows.

Note that Client-caught exceptions result in HTTP 500 (Internal Server
Error) responses with X-Squid-Error set to &quot;ERR_CANNOT_FORWARD 0&quot;.


Also avoid stuck Client jobs on exceptions. See trunk r8266 for a
similar fix with a detailed discussion. Here, I added doneWithFwd
instead of setting fwd to NULL because we dereference fwd (and store
pointers to things stored in fwd!) in many places. I think it is too
risky to just clear refcounted FwdState pointer (except in the
destructor where doing so is pointless).

Using doneWithFwd correctly is difficult because there are many ways we
can be &quot;done&quot; with FwdState, including:

    * calling fwd-&gt;complete(),
    * calling fwd-&gt;handleUnregisteredServerEnd(), and
    * closing the connection that FwdState monitors for closures.

The latter is especially tricky case because the closing is initiated in
many places, the process is asynchronous, and not all control
connections are monitored by FwdState.

For example, the updated control connection closure handler assumes that
it is being used for either external closures or internal closures
incorrectly used instead of mustStop()/abortAll(). In both cases, either
FwdState is still monitoring the connection (OK) or we forgot to call
one of its &quot;done&quot; methods listed above before closing. The latter would
be a bug, but I did not find any signs of it and fixing it would be
outside this change scope anyway.


Also unified String size limit checks [that I could find]."">",70,data/crawl/squid/patch_55.diff
https://github.com/squid-cache/squid/commit/989393f2f64c36cb3ef2e0872604e952067d5a08,"Feb 18, 2016","Bug 4111: leave_suid() does not properly handle error codes returned by setuid

... this will cause privilege escalation in the rare case that setuid fails.
So far there are no known cases of this happening when downgrading from root.

Also fixes several incorrect uses of errno which may have been obscuring
error message details if it did happen."">",27,data/crawl/squid/patch_56.diff
https://github.com/squid-cache/squid/commit/2266451a8ff6a6f61ad012a6d38b78474d94674a,"Feb 5, 2016","Cleanup: remove several C-style casts from libcompat"">",45,data/crawl/squid/patch_57.diff
https://github.com/squid-cache/squid/commit/03901cf8c887266fcb6ff9604ea09da1db0857fc,"Jan 30, 2016","SourceLayout: move Basic auth helpers to src/auth/basic/"">",233,data/crawl/squid/patch_58.diff
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,"Jan 25, 2016","Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends &quot;150 Opening...&quot; to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends &quot;451 Forbidden&quot; to the FTP client.
 * The FTP server sends &quot;500 OOPS: setsockopt: linger&quot; to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project."">",221,data/crawl/squid/patch_59.diff
https://github.com/squid-cache/squid/commit/435c72b07c5b7ebf782049cd2b50abe79a6f7db5,"Jan 15, 2016","Bug 4005: Dynamic certificate cache exceeds dynamic_cert_mem_cache_size

* disable the use of system CA by default to verify client connection
  certificates. Since the use of client certificates is rare.

* no change to verification of upstream server or peer certificates.
  Since the use of system CA to sign server certificates is common.

* the new &quot;default-ca&quot; configuration option and its documentation are
  updated to make the situation more obvious amongst the other TLS options
  changes in Squid-4.

* the action of the sslflags=NO_DEFAULT_CA is already deprecated, so no
  change when it is used. On port lines it now merely sets the default.

It may be a good idea to also disable system CA use for cache_peer and
ICAPS connections. For now they are left unchanged."">",75,data/crawl/squid/patch_60.diff
https://github.com/squid-cache/squid/commit/88df846be1405a88271bb2d29bd33708438ddac8,"Jan 13, 2016","Add connections_encrypted ACL

The new connections_encrypted ACL matches transactions where all HTTP
messages were received over TLS transport connections, including messages
received from ICAP servers.

Some ICAP/eCAP services receive data from unencrypted sources. Some ICAP/eCAP
services are &quot;secure&quot;. By default we assume that all eCAP services and all
ICAP services on TLS transport connections  are &quot;secure&quot; unless the user
uses the &quot;connection_encryption&quot; option in service configuration line.

This is a Measurement Factory project."">",148,data/crawl/squid/patch_61.diff
https://github.com/squid-cache/squid/commit/9e61d113cda196ee868fc29e03be35cca36b8f11,"Jan 9, 2016","update client_side.h stub file"">",67,data/crawl/squid/patch_62.diff
https://github.com/squid-cache/squid/commit/d75ae82cb49639ca397bd23e4c8e368c52973604,"Dec 28, 2015","Migrate basic_ncsa_auth from squid has to std:: containers"">",70,data/crawl/squid/patch_63.diff
https://github.com/squid-cache/squid/commit/40bc593b55982402f8bc4a0dbab53d16d9de108b,"Dec 21, 2015","Fix typo in rev.14350"">",26,data/crawl/squid/patch_64.diff
https://github.com/squid-cache/squid/commit/900809ea458a449aec1b18387addc2f82d41b444,"Dec 21, 2015","C++-ify basic_fake_auth"">",60,data/crawl/squid/patch_65.diff
https://github.com/squid-cache/squid/commit/332c979d0522f7d4aa68b952188d4249a2c10dc7,"Dec 18, 2015","Fix segfault after rev.14439"">",50,data/crawl/squid/patch_66.diff
https://github.com/squid-cache/squid/commit/21cd322727eaea02c573b2f5727e2e6ee6aba614,"Dec 8, 2015","Refactor ClientSocketContext write(2) using Server:: write methods

Writing to the client connection is scoped as an action for class Server
and its child classes. There is no need for ClientSocketContext to be
providing the callback handlers and performing I/O error handling.

With Server providing the current write handler we can move from
CBDATA callbacks to AsyncCall. Initial testing indicates this has some
minor performance benefit."">",127,data/crawl/squid/patch_67.diff
https://github.com/squid-cache/squid/commit/42a5dae8b02fdd0925abfe982d5345110463275d,"Dec 7, 2015","Cleanup: pass PeerOptions to sslCreateClientContext()

... to reduce context creation code and simplify upcoming libsecurity
migration steps."">",24,data/crawl/squid/patch_68.diff
https://github.com/squid-cache/squid/commit/0a28c16ad4e23e382f74090134e19c72be7e02da,"Dec 6, 2015","Cleanup: Expose SSL initialization function to libsecurity

SSL initialize needs to be performed before any security context
objects are generated. Expose the function so that the new blank
context methods can use it."">",30,data/crawl/squid/patch_69.diff
https://github.com/squid-cache/squid/commit/885f0ecf9b7d028ee78a680b25ecd73712ffe53c,"Dec 5, 2015","Cleanup TLS: shuffle context creation to libsecurity"">",83,data/crawl/squid/patch_70.diff
https://github.com/squid-cache/squid/commit/80b5995a4c0f4b51bace0cc6f3343177348dfbdf,"Dec 4, 2015","Cleanup TLS: shuffle AnyP::PortCfg::staticSslContext into libsecurity

There are no logic changes in this patch. Only symbol moves and debugs
documentation polish."">",38,data/crawl/squid/patch_71.diff
https://github.com/squid-cache/squid/commit/94c86ca4ced2078f739c0c74a31f5bad9fa8f858,"Nov 18, 2015","ext_unix_group_acl: Add support via -r flag to strip @REALM from usernames"">",13,data/crawl/squid/patch_72.diff
https://github.com/squid-cache/squid/commit/3a0ace1d91cd018400f0c3bf48f6488397f08b6e,"Nov 18, 2015","Use &quot;standard&quot; STUB macros/API. Also marked the file as unused."">",12,data/crawl/squid/patch_73.diff
https://github.com/squid-cache/squid/commit/434fe01480e773c9439314f0c96368d4ed0e3f91,"Nov 17, 2015","Docs: Update ConnStateData and ClientServerContext descriptions"">",67,data/crawl/squid/patch_74.diff
https://github.com/squid-cache/squid/commit/4a4fbcef8ac37505a571b2b3a6c17d39ced5a801,"Nov 17, 2015","Use connIsFinished() when a transaction is complet