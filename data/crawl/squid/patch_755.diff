@@ -391,8 +391,9 @@ lib/libTrie/*:
 include/IPAddress.h lib/IPAddress.cc:
 include/rfc3596.h lib/rfc3596.cc:
 src/ICMPv6.h src/ICMPv6.cc:
+helpers/url_rewrite/fake/ fake.h, fake.cc, url_fake_rewrite.sh:
 
- This code is copyright (C) 2007 by Treehouse Networks Ltd
+ This code is copyright (C) 2007-2009 by Treehouse Networks Ltd
  of New Zealand. It is published and Licensed as an extension of
  squid under the same conditions as the main squid application.
 
@@ -15,6 +15,7 @@ libcompat_la_SOURCES = \
 	assert.h \
 	compat.h \
 	compat_shared.h \
+	debug.h \
 	fdsetsize.h \
 	osdetect.h \
 	stdvarargs.h \
@@ -37,6 +38,7 @@ libcompat_la_SOURCES = \
 	\
 	assert.cc \
 	compat.cc \
+	debug.cc \
 	GnuRegex.h \
 	GnuRegex.c
 
@@ -74,10 +74,14 @@
 #include "compat/stdvarargs.h"
 #include "compat/assert.h"
 
+
 /*****************************************************/
 /* component-specific portabilities                  */
 /*****************************************************/
 
+/* helper debugging requires some hacks to be clean */
+#include "compat/debug.h"
+
 /* Valgrind API macros changed between two versions squid supports */
 #include "compat/valgrind.h"
 
@@ -0,0 +1,4 @@
+#include "config.h"
+
+/* default off */
+int debug_enabled = 0;
@@ -0,0 +1,45 @@
+#ifndef SQUID_CONFIG_H
+#include "config.h"
+#endif
+
+#ifndef COMPAT_DEBUG_H
+#define COMPAT_DEBUG_H
+
+/*
+ * A debug method for use of external helpers and tools.
+ * It shunts the debug messages down stderr for logging by Squid
+ * or display to the user instead of corrupting the stdout data stream.
+ */
+
+#if HAVE_STDIO_H
+#include <stdio.h>
+#endif
+#if HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+/* Debugging stuff */
+
+/* the macro overload style is really a gcc-ism */
+#ifdef __GNUC__
+
+SQUIDCEXTERN int debug_enabled;
+
+#define debug(X...) \
+                     if (debug_enabled) { \
+                         fprintf(stderr, "%s(%d): pid=%ld :", __FILE__, __LINE__, (long)getpid() ); \
+                         fprintf(stderr,X); \
+                     }
+
+#else /* __GNUC__ */
+
+/* TODO: non-GCC compilers can't do the above macro define yet. */
+inline void
+debug(char *format,...)
+{
+    ; // nothing to do.
+}
+#endif
+
+
+#endif /* COMPAT_DEBUG_H */
@@ -2050,6 +2050,48 @@ if test -n "$EXTERNAL_ACL_HELPERS"; then
 fi
 AC_SUBST(EXTERNAL_ACL_HELPERS)
 
+dnl Select url_rewrite helpers to build
+URL_REWRITE_HELPERS=all
+AC_ARG_ENABLE(url-rewrite-helpers,
+  AC_HELP_STRING([--enable-url-rewrite-helpers="list of helpers"],
+                 [This option selects which url_rewrite helpers to
+                  build and install as part of the normal build
+                  process. For a list of available helpers see the
+                  helpers/url_rewrite directory.]),
+[ case "$enableval" in
+  yes)
+	URL_REWRITE_HELPERS=all
+	;;
+  no)
+	URL_REWRITE_HELPERS=""
+	;;
+  *)
+ 	URL_REWRITE_HELPERS="`echo $enableval| sed -e 's/,/ /g;s/  */ /g'`"
+	;;
+  esac
+])
+if test "$URL_REWRITE_HELPERS" = "all" ; then
+	URL_REWRITE_HELPERS=""
+	for dir in $srcdir/helpers/url_rewrite/*; do
+	    helper="`basename $dir`"
+	    if test -f $dir/config.test && sh $dir/config.test "$@"; then
+		URL_REWRITE_HELPERS="$URL_REWRITE_HELPERS $helper"
+	    fi
+	done
+fi
+if test -n "$URL_REWRITE_HELPERS"; then
+    for helper in $URL_REWRITE_HELPERS; do
+	if test -f $srcdir/helpers/url_rewrite/$helper/Makefile.in; then
+		:
+	else
+		AC_MSG_ERROR(url_rewrite helper $helper does not exist)
+	fi
+    done
+    AC_MSG_NOTICE([url_rewrite helpers built: $URL_REWRITE_HELPERS])
+fi
+AC_SUBST(URL_REWRITE_HELPERS)
+
+
 AC_ARG_WITH(valgrind-debug,
   AS_HELP_STRING([--with-valgrind-debug],[Include debug instrumentation for use with valgrind]),
 [ case $withval in
@@ -4072,6 +4114,8 @@ AC_CONFIG_FILES([\
 	helpers/external_acl/wbinfo_group/Makefile \
 	helpers/external_acl/mswin_ad_group/Makefile \
 	helpers/external_acl/mswin_lm_group/Makefile \
+	helpers/url_rewrite/Makefile \
+	helpers/url_rewrite/fake/Makefile \
 	tools/Makefile
 ])
 
@@ -306,9 +306,12 @@ This section gives an account of those changes in three categories:
 <sect1>New options<label id="newoptions">
 <p>
 <descrip>
-
-	<tag>???alphabetical list within group ordered: enable, disable, with, without) ???</tag>
-	<p> ???explain??
+	<tag>--enable-url-rewrite-helpers</tag>
+	<p>Build helpers for some basic URL-rewrite actions. For use by url_rewrite_program.
+	   If omitted or set to =all then all bundled helpers that are able to build will be built.
+	   If set to a specific list of helpers then only those helpers will build.
+	   Currently one demo helper <em>fake</em> is provided in shell and C++ forms to demonstrate
+	   the helper protocol usage and provide exemplar code.
 
 </descrip>
 
@@ -1 +1 @@
-SUBDIRS = basic_auth ntlm_auth digest_auth negotiate_auth external_acl
+SUBDIRS = basic_auth ntlm_auth digest_auth negotiate_auth external_acl url_rewrite
@@ -34,7 +34,7 @@
 use vars qw/ %opt /;
 
 # Disable output buffering
-$|=1;           
+$|=1;
 
 sub debug {
 	print STDERR "@_\n" if $opt{d};
@@ -86,7 +86,7 @@ ()
 #
 while (<STDIN>) {
         chop;
-	&debug ("Got $_ from squid");
+	&debug("Got $_ from squid");
         ($user, @groups) = split(/\s+/);
 	$user =~ s/%([0-9a-fA-F][0-9a-fA-F])/pack("c",hex($1))/eg;
  	# test for each group squid send in it's request
@@ -95,7 +95,7 @@ ()
  		$ans = &check($user, $group);
  		last if $ans eq "OK";
  	}
-	&debug ("Sending $ans to squid");
+	&debug("Sending $ans to squid");
 	print "$ans\n";
 }
 
@@ -260,7 +260,7 @@ ntlm_check_auth(ntlm_authenticate * auth, int auth_length)
     pass[min(MAX_PASSWD_LEN,tmp.l)] = '\0';
 
 #if 1
-    debug ("Empty LM pass detection: user: '%s', ours:'%s', his: '%s'"
+    debug("Empty LM pass detection: user: '%s', ours:'%s', his: '%s'"
            "(length: %d)\n",
            user,lmencoded_empty_pass,tmp.str,tmp.l);
     if (memcmp(tmp.str,lmencoded_empty_pass,ENCODED_PASS_LEN)==0) {
@@ -272,7 +272,7 @@ ntlm_check_auth(ntlm_authenticate * auth, int auth_length)
 
     tmp = ntlm_fetch_string ((char *) auth, auth_length, &auth->ntresponse);
     if (tmp.str != NULL && tmp.l != 0) {
-        debug ("Empty NT pass detection: user: '%s', ours:'%s', his: '%s'"
+        debug("Empty NT pass detection: user: '%s', ours:'%s', his: '%s'"
                "(length: %d)\n",
                user,ntencoded_empty_pass,tmp.str,tmp.l);
         if (memcmp(tmp.str,lmencoded_empty_pass,ENCODED_PASS_LEN)==0) {
@@ -155,7 +155,7 @@ usage()
             my_program_name, my_program_name);
 }
 
-char debug_enabled=0;
+int debug_enabled=0;
 
 void
 process_options(int argc, char *argv[])
@@ -41,33 +41,6 @@
 
 /************* END CONFIGURATION ***************/
 
-#include <sys/types.h>
-
-
-/* Debugging stuff */
-
-#ifdef __GNUC__			/* this is really a gcc-ism */
-#ifdef DEBUG
-#include <stdio.h>
-#include <unistd.h>
-static const char *__foo;
-extern char debug_enabled;
-#define debug(X...) if (debug_enabled) { \
-                    fprintf(stderr,"ntlm-auth[%ld](%s:%d): ", (long)getpid(), \
-                    ((__foo=strrchr(__FILE__,'/'))==NULL?__FILE__:__foo+1),\
-                    __LINE__);\
-                    fprintf(stderr,X); }
-#else /* DEBUG */
-#define debug(X...)		/* */
-#endif /* DEBUG */
-#else /* __GNUC__ */
-static void
-debug(char *format,...)
-{
-}
-
-#endif
-
 
 /* A couple of harmless helper macros */
 #define SEND(X) debug("sending '%s' to squid\n",X); printf(X "\n");
@@ -0,0 +1,3 @@
+
+DIST_SUBDIRS	= fake
+SUBDIRS		= @URL_REWRITE_HELPERS@
@@ -0,0 +1,10 @@
+include $(top_srcdir)/src/Common.am
+ 
+libexec_PROGRAMS = url_fake_rewrite
+url_fake_rewrite_SOURCES = fake.cc
+
+url_fake_rewrite_LDADD = $(COMPAT_LIB)
+
+libexec_SCRIPTS = url_fake_rewrite.sh
+
+EXTRA_DIST = url_fake_rewrite.sh
@@ -0,0 +1,2 @@
+#!/bin/sh
+exit 0
@@ -0,0 +1,100 @@
+/*
+ * AUTHOR: Amos Jeffries <squid3@treenet.co.nz>
+ *
+ * Example url re-writer program for Squid.
+ *
+ * This code gets the url and returns it. No re-writing is done.
+ * It is intended for testing use and as a base for further implementation.
+ *
+ *
+ * This code is copyright (C) 2009 by Treehouse Networks Ltd
+ * of New Zealand. It is published and Licensed as an extension of
+ * squid under the same conditions as the main squid application.
+ */
+
+#include "config.h"
+
+#if HAVE_CSTRING
+#include <cstring>
+#endif
+
+#define BUFFER_SIZE 10240
+
+/**
+ * options:
+ * -d enable debugging.
+ * -h interface help.
+ */
+char *my_program_name = NULL;
+int debug_enabled = 0;
+
+static void
+usage(void)
+{
+    fprintf(stderr,
+            "Usage: %s [-d] [-v] [-h]\n"
+            " -d  enable debugging.\n"
+            " -h  this message\n\n",
+            my_program_name);
+}
+
+static void
+process_options(int argc, char *argv[])
+{
+    int opt, had_error = 0;
+
+    opterr = 0;
+    while (-1 != (opt = getopt(argc, argv, "hd"))) {
+        switch (opt) {
+        case 'd':
+            debug_enabled = 1;
+            break;
+        case 'h':
+            usage();
+            exit(0);
+        case '?':
+            opt = optopt;
+            /* fall thru to default */
+        default:
+            fprintf(stderr, "unknown option: -%c. Exiting\n", opt);
+            usage();
+            had_error = 1;
+        }
+    }
+    if (had_error)
+        exit(1);
+}
+
+int
+main(int argc, char *argv[])
+{
+    char buf[BUFFER_SIZE];
+    int buflen = 0;
+
+    setbuf(stdout, NULL);
+    setbuf(stderr, NULL);
+
+    my_program_name = argv[0];
+
+    process_options(argc, argv);
+
+    debug("%s build " __DATE__ ", " __TIME__ " starting up...\n", my_program_name);
+
+    while (fgets(buf, BUFFER_SIZE, stdin) != NULL) {
+        char *p;
+
+        if ((p = strchr(buf, '\n')) != NULL) {
+            *p = '\0';		/* strip \n */
+            buflen = p - buf;   /* length is known already */
+        }
+        else
+            buflen = strlen(buf);   /* keep this so we only scan the buffer for \0 once per loop */
+
+        debug("Got %d bytes '%s' from Squid\n", buflen, buf);
+
+        /* send 'no-change' result back to Squid */
+        fprintf(stdout,"\n");
+    }
+    debug("%s build " __DATE__ ", " __TIME__ " shutting down...\n", my_program_name);
+    exit(0);
+}
@@ -0,0 +1,48 @@
+#!/bin/sh
+#
+# Author: Amos Jeffries <squid3@treenet.co.nz>
+#
+# This code is copyright (C) 2009 by Treehouse Networks Ltd
+# of New Zealand. It is published and Licensed as an extension of
+# squid under the same conditions as the main squid application.
+#
+
+if test "${1}" = "-h" ; then
+	echo "Usage: $0 [-h] [-c] [-d logfile]"
+	echo "  -h           Help: this help text"
+	echo "  -c           Accept concurrent request format"
+	echo "  -d logfile   Debug: log all data received to the named file"
+	exit 1
+fi
+
+concurrent=0
+if test "${1}" = "-c" ; then
+	concurrent=1
+	shift
+fi
+
+DEBUG=0
+if test "${1}" = "-d" ; then
+	DEBUG=1
+	LOG="${2}"
+fi
+
+if test "$concurrent" = "1"; then
+	# read concurrent input format
+	while read id url rest; do
+		if test "${DEBUG}" = "1" ; then
+			echo "ID:$id URL:$url EXTRAS:$rest" >>${LOG}
+		fi
+		# blank URL for no change, or replace with another URL.
+		echo "${id} "
+	done
+else
+	# read old non-concurrent input format
+	while read url rest; do
+		if test "${DEBUG}" = "1" ; then
+			echo "URL:$url EXTRAS:$rest" >>${LOG}
+		fi
+		# blank line/URL for no change, or replace with another URL.
+		echo
+	done
+fi
@@ -24,7 +24,6 @@ INCLUDES = \
 ## XXX: Do we really need this? Does auto-dependency tracking work?
 $(OBJS): $(top_srcdir)/include/version.h $(top_builddir)/include/autoconf.h
 
-
 ## Because compatibility is almost universal. And the link order is important.
 COMPAT_LIB = \
 	-L$(top_builddir)/lib -lmiscutil \
@@ -137,9 +137,10 @@ inline std::ostream& operator <<(std::ostream &os, const uint8_t d)
 }
 
 /* Legacy debug style. Still used in some places. needs to die... */
-#define do_debug(SECTION, LEVEL) ((Debug::level = (LEVEL)) > Debug::Levels[SECTION])
-#define old_debug(SECTION, LEVEL) \
-        do_debug(SECTION, LEVEL) ? (void) 0 : _db_print
+#define do_debug(SECTION, LEVEL)   ((Debug::level = (LEVEL)) > Debug::Levels[SECTION])
+#define old_debug(SECTION, LEVEL)  if( (Debug::level=(LEVEL)) <= Debug::Levels[SECTION] ) _db_print
 
+/* Legacy debug function definitions */
+SQUIDCEXTERN void _db_print(const char *,...) PRINTF_FORMAT_ARG1;
 
 #endif /* SQUID_DEBUG_H */
@@ -106,8 +106,6 @@ SQUIDCEXTERN void _db_set_syslog(const char *facility);
 SQUIDCEXTERN void _db_init(const char *logfile, const char *options);
 SQUIDCEXTERN void _db_rotate_log(void);
 
-SQUIDCEXTERN void _db_print(const char *,...) PRINTF_FORMAT_ARG1;
-
 /* packs, then prints an object using debugs() */
 SQUIDCEXTERN void debugObj(int section, int level, const char *label, void *obj, ObjPackMethod pm);
 
@@ -76,6 +76,7 @@ OPTS=" \
 	--disable-digest-auth-helpers \
 	--disable-ntlm-fail-open \
 	--disable-external-acl-helpers \
+	--disable-url-rewrite-helpers \
 	--disable-mempools \
 	--disable-win32-service \
 	--disable-unlinkd \
@@ -86,6 +86,7 @@ OPTS=" \
 	--enable-digest-auth-helpers=all \
 	--enable-ntlm-fail-open \
 	--enable-external-acl-helpers=all \
+	--enable-url-rewrite-helpers=all \
 	--enable-mempools \
 	--enable-unlinkd \
 	--enable-stacktraces \
@@ -146,17 +146,6 @@ typedef struct {
     char *pub_auth;
 } cachemgr_request;
 
-/*
- * Debugging macros (info goes to error_log on your web server)
- * Note: do not run cache manager with non zero debugging level
- *       if you do not debug, it may write a lot of [sensitive]
- *       information to your error log.
- */
-
-/* debugging level 0 (disabled) - 3 (max) */
-#define DEBUG_LEVEL 0
-#define debug(level) if ((level) <= DEBUG_LEVEL && DEBUG_LEVEL > 0)
-
 /*
  * Static variables and constants
  */
@@ -871,9 +860,9 @@ process_request(cachemgr_request * req)
                  req->action,
                  make_auth_header(req));
     if (write(s, buf, l) < 0) {
-        debug(1) fprintf(stderr, "ERROR: (%d) writing request: '%s'\n", errno, buf);
+        fprintf(stderr,"ERROR: (%d) writing request: '%s'\n", errno, buf);
     } else {
-        debug(1) fprintf(stderr, "wrote request: '%s'\n", buf);
+        debug("wrote request: '%s'\n", buf);
     }
     return read_reply(s, req);
 }
@@ -906,6 +895,31 @@ main(int argc, char *argv[])
     if ((s = getenv("SCRIPT_NAME")) != NULL)
         script_name = xstrdup(s);
 
+   char **args = argv;
+   while (argc > 1 && args[1][0] == '-') {
+//        const char *value = "";
+        char option = args[1][1];
+        switch (option) {
+        case 'd':
+            debug_enabled = 1;
+            break;
+        default:
+#if 0 // unused for now.
+            if (strlen(args[1]) > 2) {
+                value = args[1] + 2;
+            } else if (argc > 2) {
+                value = args[2];
+                args++;
+                argc--;
+            } else
+                value = "";
+#endif
+            break;
+        }
+        args++;
+        argc--;
+    }
+
     req = read_request();
 
     return process_request(req);
@@ -1019,7 +1033,7 @@ read_request(void)
     }
 
     make_pub_auth(req);
-    debug(1) fprintf(stderr, "cmgr: got req: host: '%s' port: %d uname: '%s' passwd: '%s' auth: '%s' oper: '%s'\n",
+    debug("cmgr: got req: host: '%s' port: %d uname: '%s' passwd: '%s' auth: '%s' oper: '%s'\n",
                      safe_str(req->hostname), req->port, safe_str(req->user_name), safe_str(req->passwd), safe_str(req->pub_auth), safe_str(req->action));
     return req;
 }
@@ -1036,7 +1050,7 @@ make_pub_auth(cachemgr_request * req)
 {
     static char buf[1024];
     safe_free(req->pub_auth);
-    debug(3) fprintf(stderr, "cmgr: encoding for pub...\n");
+    debug("cmgr: encoding for pub...\n");
 
     if (!req->passwd || !strlen(req->passwd))
         return;
@@ -1048,9 +1062,8 @@ make_pub_auth(cachemgr_request * req)
              req->user_name ? req->user_name : "",
              req->passwd);
 
-    debug(3) fprintf(stderr, "cmgr: pre-encoded for pub: %s\n", buf);
-
-    debug(3) fprintf(stderr, "cmgr: encoded: '%s'\n", base64_encode(buf));
+    debug("cmgr: pre-encoded for pub: %s\n", buf);
+    debug("cmgr: encoded: '%s'\n", base64_encode(buf));
 
     req->pub_auth = xstrdup(base64_encode(buf));
 }
@@ -1064,36 +1077,36 @@ decode_pub_auth(cachemgr_request * req)
     const char *user_name;
     const char *passwd;
 
-    debug(2) fprintf(stderr, "cmgr: decoding pub: '%s'\n", safe_str(req->pub_auth));
+    debug("cmgr: decoding pub: '%s'\n", safe_str(req->pub_auth));
     safe_free(req->passwd);
 
     if (!req->pub_auth || strlen(req->pub_auth) < 4 + strlen(safe_str(req->hostname)))
         return;
 
     buf = xstrdup(base64_decode(req->pub_auth));
 
-    debug(3) fprintf(stderr, "cmgr: length ok\n");
+    debug("cmgr: length ok\n");
 
     /* parse ( a lot of memory leaks, but that is cachemgr style :) */
     if ((host_name = strtok(buf, "|")) == NULL)
         return;
 
-    debug(3) fprintf(stderr, "cmgr: decoded host: '%s'\n", host_name);
+    debug("cmgr: decoded host: '%s'\n", host_name);
 
     if ((time_str = strtok(NULL, "|")) == NULL)
         return;
 
-    debug(3) fprintf(stderr, "cmgr: decoded time: '%s' (now: %d)\n", time_str, (int) now);
+    debug("cmgr: decoded time: '%s' (now: %d)\n", time_str, (int) now);
 
     if ((user_name = strtok(NULL, "|")) == NULL)
         return;
 
-    debug(3) fprintf(stderr, "cmgr: decoded uname: '%s'\n", user_name);
+    debug("cmgr: decoded uname: '%s'\n", user_name);
 
     if ((passwd = strtok(NULL, "|")) == NULL)
         return;
 
-    debug(2) fprintf(stderr, "cmgr: decoded passwd: '%s'\n", passwd);
+    debug("cmgr: decoded passwd: '%s'\n", passwd);
 
     /* verify freshness and validity */
     if (atoi(time_str) + passwd_ttl < now)
@@ -1102,7 +1115,7 @@ decode_pub_auth(cachemgr_request * req)
     if (strcasecmp(host_name, req->hostname))
         return;
 
-    debug(1) fprintf(stderr, "cmgr: verified auth. info.\n");
+    debug("cmgr: verified auth. info.\n");
 
     /* ok, accept */
     xfree(req->user_name);