@@ -38,4 +38,4 @@ void MD5Final(unsigned char[16], MD5_CTX *);
 
 #define MD5_DIGEST_CHARS         16
 
-#endif	/* MD5_H */
+#endif /* MD5_H */
@@ -135,7 +135,7 @@ void sync_with_agent();
 int parse_app_community_string();
 void snmp_synch_setup();
 int snmp_synch_response();
-void md5Digest(u_char *msg, int length, u_char *key, u_char *digest);
+void md5Digest(u_char * msg, int length, u_char * key, u_char * digest);
 
 #if NO_PRINTFS
 static char *
@@ -1,6 +1,7 @@
 
+
 /*
- * $Id: access_log.cc,v 1.14 1997/12/03 01:28:17 wessels Exp $
+ * $Id: access_log.cc,v 1.15 1998/01/02 02:06:01 wessels Exp $
  *
  * DEBUG: section 46    Access Log
  * AUTHOR: Duane Wessels
@@ -108,7 +108,7 @@ asnMatchIp(void *data, struct in_addr addr)
     lh = ntohl(addr.s_addr);
     debug(53, 4) ("asnMatchIp: Called for %s.\n", inet_ntoa(addr));
 
-    if (AS_tree_head == 0 || &addr==&no_addr)
+    if (AS_tree_head == 0 || &addr == &no_addr)
 	return 0;
     store_m_int(lh, m_addr);
     rn = rn_match(m_addr, AS_tree_head);
@@ -1,8 +1,9 @@
 
 
 
+
 /*
- * $Id: client.cc,v 1.46 1997/12/30 02:47:38 wessels Exp $
+ * $Id: client.cc,v 1.47 1998/01/02 02:06:03 wessels Exp $
  *
  * DEBUG: section 0     WWW Client
  * AUTHOR: Harvest Derived
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.185 1998/01/01 19:29:17 wessels Exp $
+ * $Id: client_side.cc,v 1.186 1998/01/02 02:06:03 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -1026,7 +1026,7 @@ clientWriteComplete(int fd, char *bufnotused, size_t size, int errflag, void *da
 		 * Set the timeout BEFORE calling clientReadRequest().
 		 */
 		commSetTimeout(fd, 15, requestTimeout, conn);
-		clientReadRequest(fd, conn); /* Read next request */
+		clientReadRequest(fd, conn);	/* Read next request */
 		/*
 		 * Note, the FD may be closed at this point.
 		 */
@@ -1580,12 +1580,12 @@ clientReadRequest(int fd, void *data)
 	    debug(50, 2) ("clientReadRequest: FD %d: %s\n", fd, xstrerror());
 	    comm_close(fd);
 	    return;
-	} else if(conn->in.offset == 0) {
+	} else if (conn->in.offset == 0) {
 	    debug(50, 2) ("clientReadRequest: FD %d: no data to process\n");
 	    return;
 	}
 	/* Continue to process previously read data */
-	size=0;
+	size = 0;
     }
     conn->in.offset += size;
     conn->in.buf[conn->in.offset] = '\0';	/* Terminate the string */
@@ -1596,7 +1596,7 @@ clientReadRequest(int fd, void *data)
 	if (nrequests >= 2) {
 	    debug(12, 2) ("clientReadRequest: FD %d max concurrent requests reached\n", fd);
 	    debug(12, 5) ("clientReadRequest: FD %d defering new request until one is done\n", fd);
-	    conn->defer.until = squid_curtime + 100; /* Reset when a request is complete */
+	    conn->defer.until = squid_curtime + 100;	/* Reset when a request is complete */
 	    break;
 	}
 	/* Process request */
@@ -1614,7 +1614,7 @@ clientReadRequest(int fd, void *data)
 	     * data to the beginning
 	     */
 	    if (conn->in.offset > 0)
-	        memmove(conn->in.buf, conn->in.buf + http->req_sz, conn->in.size);
+		memmove(conn->in.buf, conn->in.buf + http->req_sz, conn->in.size);
 	    /* add to the client request queue */
 	    for (H = &conn->chr; *H; H = &(*H)->next);
 	    *H = http;
@@ -373,7 +373,7 @@ snmp_agent_parse(sn_data, length, out_sn_data, out_length, sourceip, ireqid)
 	    create_toobig(out_auth, *out_length, reqid, pi);
 	    break;
 	}			/* else FALLTHRU */
-#endif
+#lendif
     case SNMP_ERR_NOACCESS:
     case SNMP_ERR_WRONGTYPE:
     case SNMP_ERR_WRONGLENGTH:
@@ -1,6 +1,7 @@
 
 
 
+
 struct _acl_ip_data {
     struct in_addr addr1;	/* if addr2 non-zero then its a range */
     struct in_addr addr2;
@@ -1,3 +1,4 @@
+
 #include "config.h"
 
 /*
@@ -292,7 +292,7 @@ main(argc, argv)
 	    FD_SET(i, &R);
 	}
 	if (select(maxfd + 1, &R, NULL, NULL, &to) < 0) {
-    	    printf("maxfd=%d\n", maxfd);
+	    printf("maxfd=%d\n", maxfd);
 	    if (errno != EINTR)
 		perror("select");
 	    continue;