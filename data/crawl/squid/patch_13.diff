----++++src/HttpHeader.cc
@@ -25,6 +25,7 @@
 #include &quot;mime_header.h&quot;
 #include &quot;profiler/Profiler.h&quot;
 #include &quot;rfc1123.h&quot;
+#include &quot;sbuf/StringConvert.h&quot;
 #include &quot;SquidConfig.h&quot;
 #include &quot;StatHist.h&quot;
 #include &quot;Store.h&quot;
@@ -1005,6 +1006,32 @@ HttpHeader::has(Http::HdrType id) const
     return CBIT_TEST(mask, id);
 }
 
+void
+HttpHeader::addVia(const AnyP::ProtocolVersion &amp;ver, const HttpHeader *from)
+{
+    // TODO: do not add Via header for messages where Squid itself
+    // generated the message (i.e., Downloader or ESI) there should be no Via header added at all.
+
+    if (Config.onoff.via) {
+        SBuf buf;
+        // RFC 7230 section 5.7.1.: protocol-name is omitted when
+        // the received protocol is HTTP.
+        if (ver.protocol &gt; AnyP::PROTO_NONE &amp;&amp; ver.protocol &lt; AnyP::PROTO_UNKNOWN &amp;&amp;
+                ver.protocol != AnyP::PROTO_HTTP &amp;&amp; ver.protocol != AnyP::PROTO_HTTPS)
+            buf.appendf(&quot;%s/&quot;, AnyP::ProtocolType_str[ver.protocol]);
+        buf.appendf(&quot;%d.%d %s&quot;, ver.major, ver.minor, ThisCache);
+        const HttpHeader *hdr = from ? from : this;
+        SBuf strVia = StringToSBuf(hdr-&gt;getList(Http::HdrType::VIA));
+        if (!strVia.isEmpty())
+            strVia.append(&quot;, &quot;, 2);
+        strVia.append(buf);
+        // XXX: putStr() still suffers from String size limits
+        Must(strVia.length() &lt; String::SizeMaxXXX());
+        delById(Http::HdrType::VIA);
+        putStr(Http::HdrType::VIA, strVia.c_str());
+    }
+}
+
 void
 HttpHeader::putInt(Http::HdrType id, int number)
 {
----++++src/HttpHeader.h
@@ -9,6 +9,7 @@
 #ifndef SQUID_HTTPHEADER_H
 #define SQUID_HTTPHEADER_H
 
+#include &quot;anyp/ProtocolVersion.h&quot;
 #include &quot;base/LookupTable.h&quot;
 #include &quot;http/RegisteredHeaders.h&quot;
 /* because we pass a spec by value */
@@ -115,6 +116,9 @@ class HttpHeader
     String getByNameListMember(const char *name, const char *member, const char separator) const;
     String getListMember(Http::HdrType id, const char *member, const char separator) const;
     int has(Http::HdrType id) const;
+    /// Appends &quot;this cache&quot; information to VIA header field.
+    /// Takes the initial VIA value from &quot;from&quot; parameter, if provided.
+    void addVia(const AnyP::ProtocolVersion &amp;ver, const HttpHeader *from = 0);
     void putInt(Http::HdrType id, int number);
     void putInt64(Http::HdrType id, int64_t number);
     void putTime(Http::HdrType id, time_t htime);
----++++src/SquidString.h
@@ -47,6 +47,11 @@ class String
         return buf_[aPos];
     }
 
+    /// The absolute size limit on data held in a String.
+    /// Since Strings can be nil-terminated implicitly it is best to ensure
+    /// the useful content length is strictly less than this limit.
+    static const size_type SizeMaxXXX() { return SizeMax_; }
+
     size_type size() const { return len_; }
 
     /// variant of size() suited to be used for printf-alikes.
----++++src/client_side_reply.cc
@@ -1595,19 +1595,8 @@ clientReplyContext::buildReplyHeader()
         hdr-&gt;putStr(Http::HdrType::TRANSFER_ENCODING, &quot;chunked&quot;);
     }
 
-    /* Append VIA */
-    if (Config.onoff.via) {
-        LOCAL_ARRAY(char, bbuf, MAX_URL + 32);
-        String strVia;
-        hdr-&gt;getList(Http::HdrType::VIA, &amp;strVia);
-        snprintf(bbuf, MAX_URL + 32, &quot;%d.%d %s&quot;,
-                 reply-&gt;sline.version.major,
-                 reply-&gt;sline.version.minor,
-                 ThisCache);
-        strListAdd(&amp;strVia, bbuf, &#39;,&#39;);
-        hdr-&gt;delById(Http::HdrType::VIA);
-        hdr-&gt;putStr(Http::HdrType::VIA, strVia.termedBuf());
-    }
+    hdr-&gt;addVia(reply-&gt;sline.version);
+
     /* Signal keep-alive or close explicitly */
     hdr-&gt;putStr(Http::HdrType::CONNECTION, request-&gt;flags.proxyKeepalive ? &quot;keep-alive&quot; : &quot;close&quot;);
 
----++++src/http.cc
@@ -1795,17 +1795,7 @@ HttpStateData::httpBuildRequestHeader(HttpRequest * request,
         request-&gt;flags.isRanged = false;
     }
 
-    /* append Via */
-    if (Config.onoff.via) {
-        String strVia;
-        strVia = hdr_in-&gt;getList(Http::HdrType::VIA);
-        snprintf(bbuf, BBUF_SZ, &quot;%d.%d %s&quot;,
-                 request-&gt;http_ver.major,
-                 request-&gt;http_ver.minor, ThisCache);
-        strListAdd(&amp;strVia, bbuf, &#39;,&#39;);
-        hdr_out-&gt;putStr(Http::HdrType::VIA, strVia.termedBuf());
-        strVia.clean();
-    }
+    hdr_out-&gt;addVia(request-&gt;http_ver, hdr_in);
 
     if (request-&gt;flags.accelerated) {
         /* Append Surrogate-Capabilities */
----++++GitHub