@@ -2250,21 +2250,21 @@ parse_peer(peer ** head)
             p->options.carp_key.set=1;
             char *nextkey=token+strlen("carp-key="), *key=nextkey;
             for (; key; key = nextkey) {
-            	nextkey=strchr(key,',');
-            	if (nextkey) ++nextkey; // skip the comma, any
-            	if (0==strncasecmp(key,"scheme",6)) {
-            		p->options.carp_key.scheme=1;
-            	} else if (0==strncasecmp(key,"host",4)) {
-            		p->options.carp_key.host=1;
-            	} else if (0==strncasecmp(key,"port",4)) {
-            		p->options.carp_key.port=1;
-            	} else if (0==strncasecmp(key,"path",4)) {
-            		p->options.carp_key.path=1;
-            	} else if (0==strncasecmp(key,"params",6)) {
-            		p->options.carp_key.params=1;
-            	} else {
-            		fatalf("invalid carp-key '%s'",key);
-            	}
+                nextkey=strchr(key,',');
+                if (nextkey) ++nextkey; // skip the comma, any
+                if (0==strncasecmp(key,"scheme",6)) {
+                    p->options.carp_key.scheme=1;
+                } else if (0==strncasecmp(key,"host",4)) {
+                    p->options.carp_key.host=1;
+                } else if (0==strncasecmp(key,"port",4)) {
+                    p->options.carp_key.port=1;
+                } else if (0==strncasecmp(key,"path",4)) {
+                    p->options.carp_key.path=1;
+                } else if (0==strncasecmp(key,"params",6)) {
+                    p->options.carp_key.params=1;
+                } else {
+                    fatalf("invalid carp-key '%s'",key);
+                }
             }
         } else if (!strcasecmp(token, "userhash")) {
 #if USE_AUTH
@@ -181,7 +181,7 @@ carpSelectParent(HttpRequest * request)
 
     /* select peer */
     for (k = 0; k < n_carp_peers; k++) {
-    	String key;
+        String key;
         tp = carp_peers[k];
         if (tp->options.carp_key.set) {
             //this code follows urlCanonical's pattern.
@@ -213,7 +213,7 @@ carpSelectParent(HttpRequest * request)
                 if ((pos=request->urlpath.find('?'))!=String::npos)
                     key.append(request->urlpath.substr(pos,request->urlpath.size()));
             }
-    	}
+        }
         // if the url-based key is empty, e.g. because the user is
         // asking to balance on the path but the request doesn't supply any,
         // then fall back to canonical URL
@@ -856,12 +856,12 @@ struct peer {
         unsigned int allow_miss:1;
         unsigned int carp:1;
         struct {
-        	unsigned int set:1; //If false, whole url is to be used. Overrides others
-        	unsigned int scheme:1;
-        	unsigned int host:1;
-        	unsigned int port:1;
-        	unsigned int path:1;
-        	unsigned int params:1;
+            unsigned int set:1; //If false, whole url is to be used. Overrides others
+            unsigned int scheme:1;
+            unsigned int host:1;
+            unsigned int port:1;
+            unsigned int path:1;
+            unsigned int params:1;
         } carp_key;
 #if USE_AUTH
         unsigned int userhash:1;