@@ -686,10 +686,11 @@ test_expect_success 'status while reverting commit (conflicts)' '
 	test_commit old to-revert.txt &&
 	echo new >to-revert.txt &&
 	test_commit new to-revert.txt &&
-	test_must_fail git revert HEAD^ &&
+	TO_REVERT=$(git rev-parse --short HEAD^) &&
+	test_must_fail git revert $TO_REVERT &&
 	cat >expected <<-EOF
 	# On branch master
-	# You are currently reverting a commit.
+	# You are currently reverting commit $TO_REVERT.
 	#   (fix conflicts and run "git revert --continue")
 	#   (use "git revert --abort" to cancel the revert operation)
 	#
@@ -710,7 +711,7 @@ test_expect_success 'status while reverting commit (conflicts resolved)' '
 	git add to-revert.txt &&
 	cat >expected <<-EOF
 	# On branch master
-	# You are currently reverting a commit.
+	# You are currently reverting commit $TO_REVERT.
 	#   (all conflicts fixed: run "git revert --continue")
 	#   (use "git revert --abort" to cancel the revert operation)
 	#
@@ -969,7 +969,8 @@ static void show_revert_in_progress(struct wt_status *s,
 					struct wt_status_state *state,
 					const char *color)
 {
-	status_printf_ln(s, color, _("You are currently reverting a commit."));
+	status_printf_ln(s, color, _("You are currently reverting commit %s."),
+			 find_unique_abbrev(state->revert_head_sha1, DEFAULT_ABBREV));
 	if (advice_status_hints) {
 		if (has_unmerged(s))
 			status_printf_ln(s, color,
@@ -1104,6 +1105,7 @@ void wt_status_get_state(struct wt_status_state *state,
 			 int get_detached_from)
 {
 	struct stat st;
+	unsigned char sha1[20];
 
 	if (!stat(git_path("MERGE_HEAD"), &st)) {
 		state->merge_in_progress = 1;
@@ -1131,8 +1133,10 @@ void wt_status_get_state(struct wt_status_state *state,
 		state->bisect_in_progress = 1;
 		state->branch = read_and_strip_branch("BISECT_START");
 	}
-	if (!stat(git_path("REVERT_HEAD"), &st)) {
+	if (!stat(git_path("REVERT_HEAD"), &st) &&
+	    !get_sha1("REVERT_HEAD", sha1)) {
 		state->revert_in_progress = 1;
+		hashcpy(state->revert_head_sha1, sha1);
 	}
 
 	if (get_detached_from)
@@ -85,6 +85,7 @@ struct wt_status_state {
 	char *onto;
 	char *detached_from;
 	unsigned char detached_sha1[20];
+	unsigned char revert_head_sha1[20];
 };
 
 void wt_status_prepare(struct wt_status *s);