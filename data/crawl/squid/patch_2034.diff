@@ -1,4 +1,4 @@
-/* $Id: cache_cf.cc,v 1.15 1996/04/04 18:39:55 wessels Exp $ */
+/* $Id: cache_cf.cc,v 1.16 1996/04/04 18:41:22 wessels Exp $ */
 
 /* DEBUG: Section 3             cache_cf: Configuration file parsing */
 
@@ -177,7 +177,8 @@ ip_access_type ip_access_check(address, list)
      struct in_addr address;
      ip_acl *list;
 {
-    static struct in_addr localhost = {0};
+    static struct in_addr localhost =
+    {0};
     ip_acl *p = NULL;
     struct in_addr naddr;	/* network byte-order IP addr */
     static char buf[100];
@@ -1,4 +1,4 @@
-/* $Id: errorpage.cc,v 1.12 1996/04/04 17:46:39 wessels Exp $ */
+/* $Id: errorpage.cc,v 1.13 1996/04/04 18:41:23 wessels Exp $ */
 
 /* DEBUG: Section 4             cached_error: Error printing routines */
 
@@ -130,7 +130,7 @@ void cached_error_entry(entry, type, msg)
     strcat(tmp_error_buf, tbuf);
     entry->mem_obj->abort_code = type;
     if (entry->mem_obj->http_code == 0)
-        entry->mem_obj->http_code = 400;
+	entry->mem_obj->http_code = 400;
     storeAbort(entry, tmp_error_buf);
 }
 
@@ -1,4 +1,4 @@
-/* $Id: ftp.cc,v 1.20 1996/04/04 05:19:48 wessels Exp $ */
+/* $Id: ftp.cc,v 1.21 1996/04/04 18:41:24 wessels Exp $ */
 
 /*
  * DEBUG: Section 9           ftp: FTP
@@ -124,7 +124,7 @@ void ftpLifetimeExpire(fd, data)
     entry = data->entry;
     debug(9, 4, "ftpLifeTimeExpire: FD %d: <URL:%s>\n", fd, entry->url);
     if (data->icp_page_ptr) {
-	put_free_8k_page(data->icp_page_ptr);
+	put_free_8k_page(data->icp_page_ptr, __FILE__, __LINE__);
 	data->icp_page_ptr = NULL;
     }
     safe_free(data->icp_rwd_ptr);
@@ -263,7 +263,7 @@ void ftpSendComplete(fd, buf, size, errflag, data)
 	fd, size, errflag);
 
     if (buf) {
-	put_free_8k_page(buf);	/* Allocated by ftpSendRequest. */
+	put_free_8k_page(buf, __FILE__, __LINE__);	/* Allocated by ftpSendRequest. */
 	buf = NULL;
     }
     data->icp_page_ptr = NULL;	/* So lifetime expire doesn't re-free */
@@ -306,7 +306,7 @@ void ftpSendRequest(fd, data)
     debug(9, 5, "ftpSendRequest: FD %d\n", fd);
 
     buflen = strlen(data->request) + 256;
-    buf = (char *) get_free_8k_page();
+    buf = (char *) get_free_8k_page(__FILE__, __LINE__);
     data->icp_page_ptr = buf;
     memset(buf, '\0', buflen);
 
@@ -1,4 +1,4 @@
-/* $Id: gopher.cc,v 1.14 1996/04/04 01:30:44 wessels Exp $ */
+/* $Id: gopher.cc,v 1.15 1996/04/04 18:41:25 wessels Exp $ */
 
 /*
  * DEBUG: Section 10          gopher: GOPHER
@@ -75,7 +75,7 @@ static void gopherCloseAndFree(fd, data)
 {
     if (fd > 0)
 	comm_close(fd);
-    put_free_4k_page(data->buf);
+    put_free_4k_page(data->buf, __FILE__, __LINE__);
     xfree(data);
 }
 
@@ -575,7 +575,7 @@ int gopherReadReplyTimeout(fd, data)
     debug(10, 4, "GopherReadReplyTimeout: Timeout on %d\n url: %s\n", fd, entry->url);
     cached_error_entry(entry, ERR_READ_TIMEOUT, NULL);
     if (data->icp_page_ptr)
-	put_free_4k_page(data->icp_page_ptr);
+	put_free_4k_page(data->icp_page_ptr, __FILE__, __LINE__);
     if (data->icp_rwd_ptr)
 	safe_free(data->icp_rwd_ptr);
     gopherCloseAndFree(fd, data);
@@ -592,7 +592,7 @@ void gopherLifetimeExpire(fd, data)
     debug(10, 4, "gopherLifeTimeExpire: FD %d: <URL:%s>\n", fd, entry->url);
     cached_error_entry(entry, ERR_LIFETIME_EXP, NULL);
     if (data->icp_page_ptr)
-	put_free_4k_page(data->icp_page_ptr);
+	put_free_4k_page(data->icp_page_ptr, __FILE__, __LINE__);
     if (data->icp_rwd_ptr)
 	safe_free(data->icp_rwd_ptr);
     comm_set_select_handler(fd,
@@ -658,7 +658,7 @@ int gopherReadReply(fd, data)
 	    return 0;
 	}
     }
-    buf = get_free_4k_page();
+    buf = get_free_4k_page(__FILE__, __LINE__);
     errno = 0;
     len = read(fd, buf, TEMP_BUF_SIZE - 1);	/* leave one space for \0 in gopherToHTML */
     debug(10, 5, "gopherReadReply: FD %d read len=%d\n", fd, len);
@@ -740,7 +740,7 @@ int gopherReadReply(fd, data)
 	    (caddr_t) data,
 	    getReadTimeout());
     }
-    put_free_4k_page(buf);
+    put_free_4k_page(buf, __FILE__, __LINE__);
     return 0;
 }
 
@@ -761,7 +761,7 @@ void gopherSendComplete(fd, buf, size, errflag, data)
 	cached_error_entry(entry, ERR_CONNECT_FAIL, xstrerror());
 	gopherCloseAndFree(fd, data);
 	if (buf)
-	    put_free_4k_page(buf);	/* Allocated by gopherSendRequest. */
+	    put_free_4k_page(buf, __FILE__, __LINE__);	/* Allocated by gopherSendRequest. */
 	return;
     }
     /* 
@@ -814,7 +814,7 @@ void gopherSendComplete(fd, buf, size, errflag, data)
     comm_set_fd_lifetime(fd, -1);	/* disable */
 
     if (buf)
-	put_free_4k_page(buf);	/* Allocated by gopherSendRequest. */
+	put_free_4k_page(buf, __FILE__, __LINE__);	/* Allocated by gopherSendRequest. */
     data->icp_page_ptr = NULL;
     data->icp_rwd_ptr = NULL;
 }
@@ -828,7 +828,7 @@ int gopherSendRequest(fd, data)
 #define LF '\012'
     int len;
     static char query[MAX_URL];
-    char *buf = get_free_4k_page();
+    char *buf = get_free_4k_page(__FILE__, __LINE__);
 
     data->icp_page_ptr = buf;
 
@@ -945,6 +945,6 @@ int gopherStart(unusedfd, url, entry)
 GopherData *CreateGopherData()
 {
     GopherData *gd = (GopherData *) xcalloc(1, sizeof(GopherData));
-    gd->buf = get_free_4k_page();
+    gd->buf = get_free_4k_page(__FILE__, __LINE__);
     return (gd);
 }
@@ -1,4 +1,4 @@
-/* $Id: http.cc,v 1.25 1996/04/04 01:30:45 wessels Exp $ */
+/* $Id: http.cc,v 1.26 1996/04/04 18:41:25 wessels Exp $ */
 
 /*
  * DEBUG: Section 11          http: HTTP
@@ -50,7 +50,13 @@ static void httpCloseAndFree(fd, data)
 	comm_close(fd);
     if (data) {
 	if (data->reply_hdr)
-	    xfree(data->reply_hdr);
+	    put_free_8k_page(data->reply_hdr, __FILE__, __LINE__);
+	if (data->icp_page_ptr) {
+	    put_free_8k_page(data->icp_page_ptr, __FILE__, __LINE__);
+	    data->icp_page_ptr = NULL;
+	}
+	if (data->icp_rwd_ptr)
+	    safe_free(data->icp_rwd_ptr);
 	xfree(data);
     }
 }
@@ -111,12 +117,14 @@ static void httpReadReplyTimeout(fd, data)
     entry = data->entry;
     debug(11, 4, "httpReadReplyTimeout: FD %d: <URL:%s>\n", fd, entry->url);
     cached_error_entry(entry, ERR_READ_TIMEOUT, NULL);
+#ifdef NOW_DONE_IN_CLOSE_AND_FREE
     if (data->icp_rwd_ptr)
 	safe_free(data->icp_rwd_ptr);
     if (data->icp_page_ptr) {
-	put_free_8k_page(data->icp_page_ptr);
+	put_free_8k_page(data->icp_page_ptr, __FILE__, __LINE__);
 	data->icp_page_ptr = NULL;
     }
+#endif
     comm_set_select_handler(fd, COMM_SELECT_READ, 0, 0);
     httpCloseAndFree(fd, data);
 }
@@ -132,12 +140,14 @@ static void httpLifetimeExpire(fd, data)
     debug(11, 4, "httpLifeTimeExpire: FD %d: <URL:%s>\n", fd, entry->url);
 
     cached_error_entry(entry, ERR_LIFETIME_EXP, NULL);
+#ifdef NOW_DONE_IN_CLOSE_AND_FREE
     if (data->icp_page_ptr) {
-	put_free_8k_page(data->icp_page_ptr);
+	put_free_8k_page(data->icp_page_ptr, __FILE__, __LINE__);
 	data->icp_page_ptr = NULL;
     }
     if (data->icp_rwd_ptr)
 	safe_free(data->icp_rwd_ptr);
+#endif
     comm_set_select_handler(fd, COMM_SELECT_READ | COMM_SELECT_WRITE, 0, 0);
     httpCloseAndFree(fd, data);
 }
@@ -153,7 +163,7 @@ static void httpProcessReplyHeader(data, buf)
     char *headers = NULL;
 
     if (data->reply_hdr == NULL) {
-	data->reply_hdr = get_free_8k_page();
+	data->reply_hdr = get_free_8k_page(__FILE__, __LINE__);
 	memset(data->reply_hdr, '\0', 8192);
     }
     if (data->reply_hdr_state == 0) {
@@ -365,7 +375,7 @@ static void httpSendComplete(fd, buf, size, errflag, data)
 	fd, size, errflag);
 
     if (buf) {
-	put_free_8k_page(buf);	/* Allocated by httpSendRequest. */
+	put_free_8k_page(buf, __FILE__, __LINE__);	/* Allocated by httpSendRequest. */
 	buf = NULL;
     }
     data->icp_page_ptr = NULL;	/* So lifetime expire doesn't re-free */
@@ -419,7 +429,7 @@ static void httpSendRequest(fd, data)
     }
     /* Since we limit the URL read to a 4K page, I doubt that the
      * mime header could be longer than an 8K page */
-    buf = (char *) get_free_8k_page();
+    buf = (char *) get_free_8k_page(__FILE__, __LINE__);
     data->icp_page_ptr = buf;
     if (buflen > DISK_PAGE_SIZE) {
 	debug(11, 0, "Mime header length %d is breaking ICP code\n", buflen);
@@ -432,7 +442,7 @@ static void httpSendRequest(fd, data)
 	xbuf = xstrdup(data->req_hdr);
 	for (t = strtok(xbuf, crlf); t; t = strtok(NULL, crlf)) {
 	    if (strncasecmp(t, "User-Agent:", 11) == 0) {
-		ybuf = (char *) get_free_4k_page();
+		ybuf = (char *) get_free_4k_page(__FILE__, __LINE__);
 		memset(ybuf, '\0', SM_PAGE_SIZE);
 		sprintf(ybuf, "%s %s %s", t, HARVEST_PROXY_TEXT, SQUID_VERSION);
 		t = ybuf;
@@ -445,7 +455,7 @@ static void httpSendRequest(fd, data)
 	}
 	xfree(xbuf);
 	if (ybuf) {
-	    put_free_4k_page(ybuf);
+	    put_free_4k_page(ybuf, __FILE__, __LINE__);
 	    ybuf = NULL;
 	}
     }
@@ -1,4 +1,4 @@
-/* $Id: stat.cc,v 1.15 1996/04/04 01:30:51 wessels Exp $ */
+/* $Id: stat.cc,v 1.16 1996/04/04 18:41:27 wessels Exp $ */
 
 /*
  * DEBUG: Section 18          stat
@@ -626,32 +626,48 @@ void info_get(obj, sentry)
     storeAppend(sentry, line, strlen(line));
     sprintf(line, "{Meta Data:}\n");
     storeAppend(sentry, line, strlen(line));
-    sprintf(line, "{\t\tStoreEntry %d x %d}\n", (int) sizeof(StoreEntry),
-	meta_data.store_entries);
+
+    sprintf(line, "{\t\tStoreEntry %d x %d bytes = %d KB}\n",
+	meta_data.store_entries,
+	(int) sizeof(StoreEntry),
+	(int) meta_data.store_entries * sizeof(StoreEntry) >> 10);
     storeAppend(sentry, line, strlen(line));
-    sprintf(line, "{\t\tStoreMemObject %d x %d}\n", (int) sizeof(MemObject),
-	meta_data.store_in_mem_objects);
+
+    sprintf(line, "{\t\tStoreMemObject %d x %d bytes = %d KB}\n",
+	meta_data.store_in_mem_objects,
+	(int) sizeof(MemObject),
+	(int) meta_data.store_in_mem_objects * sizeof(MemObject) >> 10);
     storeAppend(sentry, line, strlen(line));
-    sprintf(line, "{\t\tIPCacheEntry %d x %d}\n", (int) sizeof(ipcache_entry),
-	meta_data.ipcache_count);
+
+    sprintf(line, "{\t\tIPCacheEntry %d x %d bytes = %d KB}\n",
+	meta_data.ipcache_count,
+	(int) sizeof(ipcache_entry),
+	(int) meta_data.ipcache_count * sizeof(ipcache_entry) >> 10);
     storeAppend(sentry, line, strlen(line));
-    sprintf(line, "{\t\tHash link  %d x %d}\n", (int) sizeof(hash_link),
-	meta_data.hash_links = hash_links_allocated);
+
+    sprintf(line, "{\t\tHash link  %d x %d bytes = %d KB}\n",
+	meta_data.hash_links = hash_links_allocated,
+	(int) sizeof(hash_link),
+	(int) meta_data.hash_links * sizeof(hash_link) >> 10);
     storeAppend(sentry, line, strlen(line));
-    sprintf(line, "{\t\tURL strings %d}\n", meta_data.url_strings);
+
+    sprintf(line, "{\t\tURL strings %d KB}\n",
+	meta_data.url_strings >> 10);
     storeAppend(sentry, line, strlen(line));
+
     sprintf(line, "{\t\tHot Object Cache Items %d}\n", meta_data.hot_vm);
     storeAppend(sentry, line, strlen(line));
+
     sprintf(line, "{\t\tPool for disk I/O %d KB (Free %d KB)}\n",
-	(disk_stats.total_pages_allocated * disk_stats.page_size) / (1 << 10),
-	((disk_stats.total_pages_allocated - disk_stats.n_pages_in_use) * disk_stats.page_size) /
-	(1 << 10)
-	);
+	disk_stats.total_pages_allocated * disk_stats.page_size >> 10,
+	(disk_stats.total_pages_allocated - disk_stats.n_pages_in_use) * disk_stats.page_size >> 10);
     storeAppend(sentry, line, strlen(line));
+
     sprintf(line, "{\t\tPool for in-memory objects %d KB (Free %d KB)}\n",
-	(sm_stats.total_pages_allocated * sm_stats.page_size) / (1 << 10),
-	((sm_stats.total_pages_allocated - sm_stats.n_pages_in_use) * sm_stats.page_size) / (1 << 10));
+	sm_stats.total_pages_allocated * sm_stats.page_size >> 10,
+	(sm_stats.total_pages_allocated - sm_stats.n_pages_in_use) * sm_stats.page_size >> 10);
     storeAppend(sentry, line, strlen(line));
+
     sprintf(line, "{\tTotal Accounted %d KB}\n",
 	(int) (meta_data.store_entries * sizeof(StoreEntry) +
 	    meta_data.store_in_mem_objects * sizeof(MemObject) +
@@ -1,4 +1,4 @@
-/* $Id: stmem.cc,v 1.5 1996/03/29 21:19:26 wessels Exp $ */
+/* $Id: stmem.cc,v 1.6 1996/04/04 18:41:27 wessels Exp $ */
 
 /* 
  * DEBUG: Section 19          stmem:
@@ -23,13 +23,13 @@ void memFree(mem)
 	    lastp = p;
 	    p = p->next;
 	    if (lastp) {
-		put_free_4k_page(lastp->data);
+		put_free_4k_page(lastp->data, __FILE__, __LINE__);
 		safe_free(lastp);
 	    }
 	}
 
 	if (p) {
-	    put_free_4k_page(p->data);
+	    put_free_4k_page(p->data, __FILE__, __LINE__);
 	    safe_free(p);
 	}
     }
@@ -45,12 +45,12 @@ void memFreeData(mem)
     while (p != mem->tail) {
 	lastp = p;
 	p = p->next;
-	put_free_4k_page(lastp->data);
+	put_free_4k_page(lastp->data, __FILE__, __LINE__);
 	safe_free(lastp);
     }
 
     if (p != NULL) {
-	put_free_4k_page(p->data);
+	put_free_4k_page(p->data, __FILE__, __LINE__);
 	safe_free(p);
 	p = NULL;
     }
@@ -75,7 +75,7 @@ int memFreeDataUpto(mem, target_offset)
 	    lastp = p;
 	    p = p->next;
 	    current_offset += lastp->len;
-	    put_free_4k_page(lastp->data);
+	    put_free_4k_page(lastp->data, __FILE__, __LINE__);
 	    safe_free(lastp);
 	}
     }
@@ -126,7 +126,7 @@ int memAppend(mem, data, len)
 	p = (mem_node) xcalloc(1, sizeof(Mem_Node));
 	p->next = NULL;
 	p->len = len_to_copy;
-	p->data = get_free_4k_page();
+	p->data = get_free_4k_page(__FILE__, __LINE__);
 	memcpy(p->data, data, len_to_copy);
 
 	if (!mem->head) {
@@ -271,8 +271,9 @@ mem_ptr memInit()
 
 /* PBD 12/95: Memory allocator routines for saving and reallocating fixed 
  * size blocks rather than mallocing and freeing them */
-char *
-     get_free_4k_page()
+char *get_free_4k_page(file, line)
+     char *file;
+     int line;
 {
     char *page = NULL;
 
@@ -289,23 +290,23 @@ char *
 	sm_stats.total_pages_allocated++;
     }
     sm_stats.n_pages_in_use++;
-    if (page == NULL) {
-	debug(19, 0, "Null page pointer?");
-	fatal_dump(NULL);
-    }
+    debug(19, 5, "get_free_4k_page: Giving out %p, count=%d  %s:%d\n",
+	page, sm_stats.n_pages_in_use, file, line);
+    if (page == NULL)
+	fatal_dump("get_free_4k_page: Null page pointer?");
     return (page);
 }
 
-void put_free_4k_page(page)
+void put_free_4k_page(page, file, line)
      char *page;
+     char *file;
+     int line;
 {
     static stack_overflow_warning_toggle;
 
 #if USE_MEMALIGN
-    if ((int) page % SM_PAGE_SIZE) {
-	debug(19, 0, "Someone tossed a string into the 4k page pool\n");
-	fatal_dump(NULL);
-    }
+    if ((int) page % SM_PAGE_SIZE)
+	fatal_dump("Someone tossed a string into the 4k page pool");
 #endif
     if (full_stack(&sm_stats.free_page_stack)) {
 	sm_stats.total_pages_allocated--;
@@ -315,12 +316,15 @@ void put_free_4k_page(page)
 	}
     }
     sm_stats.n_pages_in_use--;
+    debug(19, 5, "put_free_4k_page: Putting back %p, count=%d  %s:%d\n", page, sm_stats.n_pages_in_use, file, line);
     /* Call push regardless if it's full, cause it's just going to release the
      * page if stack is full */
     push(&sm_stats.free_page_stack, page);
 }
 
-char *get_free_8k_page()
+char *get_free_8k_page(file, line)
+     char *file;
+     int line;
 {
     char *page = NULL;
 
@@ -337,23 +341,23 @@ char *get_free_8k_page()
 	disk_stats.total_pages_allocated++;
     }
     disk_stats.n_pages_in_use++;
-    if (page == NULL) {
-	debug(19, 0, "Null page pointer?");
-	fatal_dump(NULL);
-    }
+    debug(19, 5, "get_free_8k_page: Giving out %p, count=%d  %s:%d\n",
+	page, disk_stats.n_pages_in_use, file, line);
+    if (page == NULL)
+	fatal_dump("get_free_8k_page: Null page pointer?");
     return (page);
 }
 
-void put_free_8k_page(page)
+void put_free_8k_page(page, file, line)
      char *page;
+     char *file;
+     int line;
 {
     static stack_overflow_warning_toggle;
 
 #if USE_MEMALIGN
-    if ((int) page % DISK_PAGE_SIZE) {
-	debug(19, 0, "Someone tossed a string into the 8k page pool\n");
-	fatal_dump(NULL);
-    }
+    if ((int) page % DISK_PAGE_SIZE)
+	fatal_dump("Someone tossed a string into the 8k page pool");
 #endif
 
     if (full_stack(&disk_stats.free_page_stack)) {
@@ -364,6 +368,7 @@ void put_free_8k_page(page)
 	}
     }
     disk_stats.n_pages_in_use--;
+    debug(19, 5, "put_free_8k_page: Putting back %p, count=%d  %s:%d\n", page, disk_stats.n_pages_in_use, file, line);
     /* Call push regardless if it's full, cause it's just going to release the
      * page if stack is full */
     push(&disk_stats.free_page_stack, page);
@@ -1,5 +1,5 @@
 
-/* $Id: store.cc,v 1.25 1996/04/04 05:19:50 wessels Exp $ */
+/* $Id: store.cc,v 1.26 1996/04/04 18:41:29 wessels Exp $ */
 
 /*
  * DEBUG: Section 20          store
@@ -890,7 +890,7 @@ int storeSwapInHandle(fd_notused, buf, len, flag, e, offset_notused)
 
     if ((flag < 0) && (flag != DISK_EOF)) {
 	debug(20, 0, "storeSwapInHandle: SwapIn failure (err code = %d).\n", flag);
-	put_free_8k_page(e->mem_obj->e_swap_buf);
+	put_free_8k_page(e->mem_obj->e_swap_buf, __FILE__, __LINE__);
 	storeSetMemStatus(e, NOT_IN_MEMORY);
 	file_close(e->mem_obj->swap_fd);
 	swapInError(-1, e);	/* Invokes storeAbort() and completes the I/O */
@@ -920,7 +920,7 @@ int storeSwapInHandle(fd_notused, buf, len, flag, e, offset_notused)
     } else {
 	/* complete swapping in */
 	storeSetMemStatus(e, IN_MEMORY);
-	put_free_8k_page(e->mem_obj->e_swap_buf);
+	put_free_8k_page(e->mem_obj->e_swap_buf, __FILE__, __LINE__);
 	file_close(e->mem_obj->swap_fd);
 	debug(20, 5, "storeSwapInHandle: SwapIn complete: <URL:%s> from %s.\n",
 	    e->url, storeSwapFullPath(e->swap_file_number, NULL));
@@ -973,7 +973,7 @@ int storeSwapInStart(e)
     storeSetMemStatus(e, SWAPPING_IN);
     e->mem_obj->data = new_MemObjectData();
     e->mem_obj->swap_offset = 0;
-    e->mem_obj->e_swap_buf = get_free_8k_page();
+    e->mem_obj->e_swap_buf = get_free_8k_page(__FILE__, __LINE__);
 
     /* start swapping daemon */
     file_read(fd,
@@ -1004,7 +1004,7 @@ void storeSwapOutHandle(fd, flag, e)
 	debug(20, 1, "storeSwapOutHandle: SwapOut failure (err code = %d).\n",
 	    flag);
 	e->swap_status = NO_SWAP;
-	put_free_8k_page(page_ptr);
+	put_free_8k_page(page_ptr, __FILE__, __LINE__);
 	file_close(fd);
 	BIT_SET(e->flag, RELEASE_REQUEST);
 	if (e->swap_file_number != -1) {
@@ -1040,7 +1040,7 @@ void storeSwapOutHandle(fd, flag, e)
 	file_close(e->mem_obj->swap_fd);
 	debug(20, 5, "storeSwapOutHandle: SwapOut complete: <URL:%s> to %s.\n",
 	    e->url, storeSwapFullPath(e->swap_file_number, NULL));
-	put_free_8k_page(page_ptr);
+	put_free_8k_page(page_ptr, __FILE__, __LINE__);
 	sprintf(logmsg, "%s %s %d %d %d\n",
 	    filename,
 	    e->url,
@@ -1105,7 +1105,7 @@ int storeSwapOutStart(e)
     }
     e->swap_status = SWAPPING_OUT;
     e->mem_obj->swap_offset = 0;
-    e->mem_obj->e_swap_buf = get_free_8k_page();
+    e->mem_obj->e_swap_buf = get_free_8k_page(__FILE__, __LINE__);
     e->mem_obj->e_swap_buf_len = 0;
 
     storeCopy(e, 0, SWAP_BUF, e->mem_obj->e_swap_buf,
@@ -2347,8 +2347,8 @@ void storeSanityCheck()
 	     * errno indicates that the directory doesn't exist */
 	    if (errno != ENOENT)
 		continue;
-	    debug(20,0, "WARNING: Cannot write to '%s' for storage swap area.\n", name);
-	    debug(20,0, "Forcing a *full restart* (e.g., cached -z)...");
+	    debug(20, 0, "WARNING: Cannot write to '%s' for storage swap area.\n", name);
+	    debug(20, 0, "Forcing a *full restart* (e.g., cached -z)...");
 	    zap_disk_store = 1;
 	    return;
 	}