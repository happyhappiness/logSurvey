----++++Makefile.am
@@ -516,6 +516,7 @@ liboconfig_la_SOURCES = \
 	src/liboconfig/aux_types.h \
 	src/liboconfig/scanner.l \
 	src/liboconfig/parser.y
+liboconfig_la_CPPFLAGS = -I$(srcdir)/src/liboconfig $(AM_CPPFLAGS)
 liboconfig_la_LDFLAGS = -avoid-version $(LEXLIB)
 
 
----++++src/email.c
@@ -297,22 +297,21 @@ static void *collect(void *arg) {
       }
 
       if (line[0] == &#39;e&#39;) { /* e:&lt;type&gt;:&lt;bytes&gt; */
-        char *ptr = NULL;
-        char *type = strtok_r(line + 2, &quot;:&quot;, &amp;ptr);
-        char *tmp = strtok_r(NULL, &quot;:&quot;, &amp;ptr);
-        int bytes = 0;
-
-        if (tmp == NULL) {
+        char *type = line + 2;
+        char *bytes_str = strchr(type, &#39;:&#39;);
+        if (bytes_str == NULL) {
           log_err(&quot;collect: syntax error in line &#39;%s&#39;&quot;, line);
           continue;
         }
 
-        bytes = atoi(tmp);
+        *bytes_str = 0;
+        bytes_str++;
 
         pthread_mutex_lock(&amp;count_mutex);
         type_list_incr(&amp;list_count, type, /* increment = */ 1);
         pthread_mutex_unlock(&amp;count_mutex);
 
+        int bytes = atoi(bytes_str);
         if (bytes &gt; 0) {
           pthread_mutex_lock(&amp;size_mutex);
           type_list_incr(&amp;list_size, type, /* increment = */ bytes);
@@ -370,7 +369,9 @@ static void *open_connection(void __attribute__((unused)) * arg) {
     pthread_exit((void *)1);
   }
 
-  struct sockaddr_un addr = {.sun_family = AF_UNIX};
+  struct sockaddr_un addr = {
+      .sun_family = AF_UNIX,
+  };
   sstrncpy(addr.sun_path, path, (size_t)(UNIX_PATH_MAX - 1));
 
   errno = 0;
----++++src/liboconfig/parser.y
@@ -31,7 +31,7 @@
 #include &quot;aux_types.h&quot;
 
 static char *unquote (const char *orig);
-static int yyerror (const char *s);
+static void yyerror(const char *s);
 
 /* Lexer variables */
 extern int yylineno;
@@ -94,13 +94,23 @@ argument_list:
 	argument_list argument
 	{
 	 $$ = $1;
+	 oconfig_value_t *tmp = realloc($$.argument,
+	                                ($$.argument_num+1) * sizeof(*$$.argument));
+	 if (tmp == NULL) {
+	   yyerror(&quot;realloc failed&quot;);
+	   YYERROR;
+	 }
+	 $$.argument = tmp;
+	 $$.argument[$$.argument_num] = $2;
 	 $$.argument_num++;
-	 $$.argument = realloc ($$.argument, $$.argument_num * sizeof (oconfig_value_t));
-	 $$.argument[$$.argument_num-1] = $2;
 	}
 	| argument
 	{
-	 $$.argument = malloc (sizeof (oconfig_value_t));
+	 $$.argument = calloc(1, sizeof(*$$.argument));
+	 if ($$.argument == NULL) {
+	   yyerror(&quot;calloc failed&quot;);
+	   YYERROR;
+	 }
 	 $$.argument[0] = $1;
 	 $$.argument_num = 1;
 	}
@@ -113,7 +123,7 @@ identifier:
 option:
 	identifier argument_list EOL
 	{
-	 memset (&amp;$$, '\0', sizeof ($$));
+	 memset(&amp;$$, 0, sizeof($$));
 	 $$.key = $1;
 	 $$.values = $2.argument;
 	 $$.values_num = $2.argument_num;
@@ -123,13 +133,13 @@ option:
 block_begin:
 	OPENBRAC identifier CLOSEBRAC EOL
 	{
-	 memset (&amp;$$, '\0', sizeof ($$));
+	 memset(&amp;$$, 0, sizeof($$));
 	 $$.key = $2;
 	}
 	|
 	OPENBRAC identifier argument_list CLOSEBRAC EOL
 	{
-	 memset (&amp;$$, '\0', sizeof ($$));
+	 memset(&amp;$$, 0, sizeof($$));
 	 $$.key = $2;
 	 $$.values = $3.argument;
 	 $$.values_num = $3.argument_num;
@@ -146,11 +156,11 @@ block_end:
 block:
 	block_begin statement_list block_end
 	{
-	 if (strcmp ($1.key, $3) != 0)
+	 if (strcmp($1.key, $3) != 0)
 	 {
-		printf ("block_begin = %s; block_end = %s;\n", $1.key, $3);
-	 	yyerror ("Block not closed..\n");
-		exit (1);
+		printf("block_begin = %s; block_end = %s;\n", $1.key, $3);
+		yyerror("block not closed");
+		YYERROR;
 	 }
 	 free ($3); $3 = NULL;
 	 $$ = $1;
@@ -159,11 +169,11 @@ block:
 	}
 	| block_begin block_end
 	{
-	 if (strcmp ($1.key, $2) != 0)
+	 if (strcmp($1.key, $2) != 0)
 	 {
-		printf ("block_begin = %s; block_end = %s;\n", $1.key, $2);
-		yyerror ("Block not closed..\n");
-		exit (1);
+		printf("block_begin = %s; block_end = %s;\n", $1.key, $2);
+		yyerror("block not closed");
+		YYERROR;
 	 }
 	 free ($2); $2 = NULL;
 	 $$ = $1;
@@ -184,16 +194,26 @@ statement_list:
 	 $$ = $1;
 	 if (($2.values_num &gt; 0) || ($2.children_num &gt; 0))
 	 {
+		 oconfig_item_t *tmp = realloc($$.statement,
+		                               ($$.statement_num+1) * sizeof(*tmp));
+		 if (tmp == NULL) {
+		   yyerror(&quot;realloc failed&quot;);
+		   YYERROR;
+		 }
+		 $$.statement = tmp;
+		 $$.statement[$$.statement_num] = $2;
 		 $$.statement_num++;
-		 $$.statement = realloc ($$.statement, $$.statement_num * sizeof (oconfig_item_t));
-		 $$.statement[$$.statement_num-1] = $2;
 	 }
 	}
 	| statement
 	{
 	 if (($1.values_num &gt; 0) || ($1.children_num &gt; 0))
 	 {
-		 $$.statement = malloc (sizeof (oconfig_item_t));
+		 $$.statement = calloc(1, sizeof(*$$.statement));
+		 if ($$.statement == NULL) {
+		   yyerror(&quot;calloc failed&quot;);
+		   YYERROR;
+		 }
 		 $$.statement[0] = $1;
 		 $$.statement_num = 1;
 	 }
@@ -208,31 +228,38 @@ statement_list:
 entire_file:
 	statement_list
 	{
-	 ci_root = calloc (1, sizeof (*ci_root));
+	 ci_root = calloc(1, sizeof(*ci_root));
+	 if (ci_root == NULL) {
+	   yyerror(&quot;calloc failed&quot;);
+	   YYERROR;
+	 }
 	 ci_root-&gt;children = $1.statement;
 	 ci_root-&gt;children_num = $1.statement_num;
 	}
 	| /* epsilon */
 	{
-	 ci_root = calloc (1, sizeof (*ci_root));
-	 ci_root-&gt;children = NULL;
-	 ci_root-&gt;children_num = 0;
+	 ci_root = calloc(1, sizeof(*ci_root));
+	 if (ci_root == NULL) {
+	   yyerror(&quot;calloc failed&quot;);
+	   YYERROR;
+	 }
 	}
 	;
 
 %%
-static int yyerror (const char *s)
+static void yyerror(const char *s)
 {
 	const char *text;
 
-	if (*yytext == &#39;\n&#39;)
+	if (yytext == NULL)
+		text = &quot;&lt;empty&gt;&quot;;
+	else if (*yytext == &#39;\n&#39;)
 		text = &quot;&lt;newline&gt;&quot;;
 	else
 		text = yytext;
 
-	fprintf (stderr, "Parse error in file `%s', line %i near `%s': %s\n",
+	fprintf(stderr, "Parse error in file `%s', line %i near `%s': %s\n",
 		c_file, yylineno, text, s);
-	return (-1);
 } /* int yyerror */
 
 static char *unquote (const char *orig)
@@ -250,7 +277,7 @@ static char *unquote (const char *orig)
 
 	len -= 2;
 	memmove (ret, ret + 1, len);
-	ret[len] = '\0';
+	ret[len] = 0;
 
 	for (int i = 0; i &lt; len; i++)
 	{
----++++GitHub