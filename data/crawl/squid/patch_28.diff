----++++src/clients/FtpClient.cc
@@ -442,6 +442,11 @@ Ftp::Client::handlePasvReply(Ip::Address &amp;srvAddr)
     char *buf;
     debugs(9, 3, status());
 
+    if (!Comm::IsConnOpen(ctrl.conn)) {
+        debugs(9, 5, &quot;The control connection to the remote end is closed&quot;);
+        return false;
+    }
+
     if (code != 227) {
         debugs(9, 2, &quot;PASV not supported by remote end&quot;);
         return false;
@@ -473,6 +478,11 @@ Ftp::Client::handleEpsvReply(Ip::Address &amp;remoteAddr)
     char *buf;
     debugs(9, 3, status());
 
+    if (!Comm::IsConnOpen(ctrl.conn)) {
+        debugs(9, 5, &quot;The control connection to the remote end is closed&quot;);
+        return false;
+    }
+
     if (code != 229 &amp;&amp; code != 522) {
         if (code == 200) {
             /* handle broken servers (RFC 2428 says OK code for EPSV MUST be 229 not 200) */
@@ -735,6 +745,11 @@ Ftp::Client::sendPassive()
 void
 Ftp::Client::connectDataChannel()
 {
+    if (!Comm::IsConnOpen(ctrl.conn)) {
+        debugs(9, 5, &quot;The control connection to the remote end is closed&quot;);
+        return;
+    }
+
     safe_free(ctrl.last_command);
 
     safe_free(ctrl.last_reply);
----++++src/clients/FtpGateway.cc
@@ -443,6 +443,11 @@ Ftp::Gateway::loginParser(const SBuf &amp;login, bool escaped)
 void
 Ftp::Gateway::listenForDataChannel(const Comm::ConnectionPointer &amp;conn)
 {
+    if (!Comm::IsConnOpen(ctrl.conn)) {
+        debugs(9, 5, &quot;The control connection to the remote end is closed&quot;);
+        return;
+    }
+
     assert(!Comm::IsConnOpen(data.conn));
 
     typedef CommCbMemFunT&lt;Gateway, CommAcceptCbParams&gt; AcceptDialer;
@@ -1164,7 +1169,7 @@ Ftp::Gateway::start()
 
     checkUrlpath();
     buildTitleUrl();
-    debugs(9, 5, "FD " &lt;&lt; ctrl.conn-&gt;fd &lt;&lt; " : host=" &lt;&lt; request-&gt;url.host() &lt;&lt;
+    debugs(9, 5, "FD " &lt;&lt; (ctrl.conn ? ctrl.conn-&gt;fd : -1) &lt;&lt; " : host=" &lt;&lt; request-&gt;url.host() &lt;&lt;
            &quot;, path=&quot; &lt;&lt; request-&gt;url.path() &lt;&lt; &quot;, user=&quot; &lt;&lt; user &lt;&lt; &quot;, passwd=&quot; &lt;&lt; password);
     state = BEGIN;
     Ftp::Client::start();
@@ -1719,7 +1724,9 @@ ftpReadPasv(Ftp::Gateway * ftpState)
     if (ftpState-&gt;handlePasvReply(srvAddr))
         ftpState-&gt;connectDataChannel();
     else {
-        ftpSendEPRT(ftpState);
+        ftpFail(ftpState);
+        // Currently disabled, does not work correctly:
+        // ftpSendEPRT(ftpState);
         return;
     }
 }
@@ -1759,6 +1766,11 @@ ftpOpenListenSocket(Ftp::Gateway * ftpState, int fallback)
     }
     safe_free(ftpState-&gt;data.host);
 
+    if (!Comm::IsConnOpen(ftpState-&gt;ctrl.conn)) {
+        debugs(9, 5, &quot;The control connection to the remote end is closed&quot;);
+        return;
+    }
+
     /*
      * Set up a listen socket on the same local address as the
      * control connection.
@@ -1853,6 +1865,10 @@ ftpReadPORT(Ftp::Gateway * ftpState)
 static void
 ftpSendEPRT(Ftp::Gateway * ftpState)
 {
+    /* check the server control channel is still available */
+    if (!ftpState || !ftpState-&gt;haveControlChannel(&quot;ftpSendEPRT&quot;))
+        return;
+
     if (Config.Ftp.epsv_all &amp;&amp; ftpState-&gt;flags.epsv_all_sent) {
         debugs(9, DBG_IMPORTANT, &quot;FTP does not allow EPRT method after &#39;EPSV ALL&#39; has been sent.&quot;);
         return;
@@ -1914,10 +1930,8 @@ Ftp::Gateway::ftpAcceptDataConnection(const CommAcceptCbParams &amp;io)
 {
     debugs(9, 3, HERE);
 
-    if (EBIT_TEST(entry-&gt;flags, ENTRY_ABORTED)) {
-        abortAll(&quot;entry aborted when accepting data conn&quot;);
-        data.listenConn-&gt;close();
-        data.listenConn = NULL;
+    if (!Comm::IsConnOpen(ctrl.conn)) { /*Close handlers will cleanup*/
+        debugs(9, 5, &quot;The control connection to the remote end is closed&quot;);
         return;
     }
 
@@ -1930,6 +1944,14 @@ Ftp::Gateway::ftpAcceptDataConnection(const CommAcceptCbParams &amp;io)
         return;
     }
 
+    if (EBIT_TEST(entry-&gt;flags, ENTRY_ABORTED)) {
+        abortAll(&quot;entry aborted when accepting data conn&quot;);
+        data.listenConn-&gt;close();
+        data.listenConn = NULL;
+        io.conn-&gt;close();
+        return;
+    }
+
     /* data listening conn is no longer even open. abort. */
     if (!Comm::IsConnOpen(data.listenConn)) {
         data.listenConn = NULL; // ensure that it&#39;s cleared and not just closed.
@@ -2682,8 +2704,8 @@ void
 Ftp::Gateway::completeForwarding()
 {
     if (fwd == NULL || flags.completed_forwarding) {
-        debugs(9, 3, HERE &lt;&lt; "completeForwarding avoids " &lt;&lt;
-               "double-complete on FD " &lt;&lt; ctrl.conn-&gt;fd &lt;&lt; ", Data FD " &lt;&lt; data.conn-&gt;fd &lt;&lt;
+        debugs(9, 3, "avoid double-complete on FD " &lt;&lt;
+               (ctrl.conn ? ctrl.conn-&gt;fd : -1) &lt;&lt; ", Data FD " &lt;&lt; data.conn-&gt;fd &lt;&lt;
                &quot;, this &quot; &lt;&lt; this &lt;&lt; &quot;, fwd &quot; &lt;&lt; fwd);
         return;
     }
----++++GitHub