@@ -717,12 +717,10 @@ AC_SUBST(REPL_LIBS)
 
 AM_CONDITIONAL(ENABLE_PINGER, false)
 AC_ARG_ENABLE(icmp,
-[  --enable-icmp           Enable ICMP pinging],
+	AC_HELP_STRING([--enable-icmp],[Enable ICMP pinging and Network Measurement]),
 [ if test "$enableval" = "yes" ; then
     echo "ICMP enabled"
-    AC_DEFINE(USE_ICMP,1,
-    [ Defined this to use Squid's ICMP features (highly recommended!)
-      When USE_ICMP is defined, Squid will send ICMP pings to origin server sites.])
+    AC_DEFINE(USE_ICMP,1,[Define to use Squid's ICMP and Network Measurement features (highly recommended!)])
     AM_CONDITIONAL(ENABLE_PINGER, true)
   fi
 ])
@@ -3736,6 +3734,7 @@ AC_CONFIG_FILES([\
 	src/auth/Makefile \
 	src/adaptation/Makefile \
 	src/ICAP/Makefile \
+	src/icmp/Makefile \
 	src/eCAP/Makefile \
 	contrib/Makefile \
 	snmplib/Makefile \
@@ -34,7 +34,7 @@ LOADABLE_MODULES_SOURCES = \
 TESTS=$(check_PROGRAMS)
 check_PROGRAMS=
 
-SUBDIRS		= fs repl auth
+SUBDIRS		= fs repl auth icmp
 
 if USE_ADAPTATION
 SUBDIRS += adaptation
@@ -141,20 +141,6 @@ UNLINKDSOURCE =
 UNLINKD = 
 endif
 
-if ENABLE_PINGER
-PINGER = pinger
-else
-PINGER = 
-endif
-
-# Squid Internal ICMP sources
-ICMPSOURCE = \
-	ICMP.h \
-	icmp.cc \
-	ICMPConfig.h \
-	ICMPSquid.h \
-	ICMPSquid.cc
-
 SSL_ALL_SOURCE = \
 	ACLCertificateData.cc \
 	ACLCertificateData.h  \
@@ -233,7 +219,7 @@ INCLUDES	+= @SQUID_CPPUNIT_INC@
 EXTRA_PROGRAMS = \
 	DiskIO/DiskDaemon/diskd \
 	unlinkd \
-	pinger \
+	icmp/pinger \
 	dnsserver \
 	recv-announce \
 	tests/testUfs \
@@ -254,7 +240,6 @@ bin_PROGRAMS =
 
 
 libexec_PROGRAMS = \
-	$(PINGER) \
 	$(DNSSERVER) \
 	@DISK_PROGRAMS@ \
 	$(UNLINKD)
@@ -563,7 +548,6 @@ squid_SOURCES = \
 	HttpRequestMethod.cc \
 	HttpRequestMethod.h \
 	HttpVersion.h \
-	$(ICMPSOURCE) \
 	ICP.h \
 	icp_v2.cc \
 	icp_v3.cc \
@@ -586,7 +570,6 @@ squid_SOURCES = \
 	mime.cc \
 	multicast.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Packer.h \
 	Parsing.cc \
@@ -700,6 +683,7 @@ nodist_squid_SOURCES = \
 squid_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	-L../lib \
 	@XTRA_OBJS@ \
 	@DISK_LINKOBJS@ \
@@ -742,22 +726,6 @@ endif
 
 unlinkd_SOURCES = unlinkd_daemon.cc SquidNew.cc
 
-## NP: the pinger contains the squid-external helper code
-##     $(ICMPSOURCE) contains the interface bit to go inside squid
-pinger_SOURCES = \
-	ICMP.h \
-	icmp.cc \
-	ICMPPinger.h \
-	ICMPPinger.cc \
-	ICMPv4.h \
-	ICMPv4.cc \
-	ICMPv6.h \
-	ICMPv6.cc \
-	pinger.cc \
-	debug.cc \
-	time.cc \
-	SquidNew.cc 
-
 dnsserver_SOURCES = dnsserver.cc SquidNew.cc
 recv_announce_SOURCES = recv-announce.cc SquidNew.cc
 
@@ -869,7 +837,6 @@ ufsdump_SOURCES = \
 	HttpReply.cc \
 	HttpRequest.cc \
 	HttpRequestMethod.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -888,7 +855,6 @@ ufsdump_SOURCES = \
 	mime.cc \
 	multicast.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Parsing.cc \
 	$(XPROF_STATS_SOURCE) \
@@ -940,6 +906,7 @@ ufsdump_SOURCES = \
 ufsdump_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	-L../lib \
 	@XTRA_OBJS@ \
 	@REPL_OBJS@ \
@@ -969,9 +936,6 @@ nodist_ufsdump_SOURCES = \
 	globals.cc \
 	string_arrays.c
 
-nodist_pinger_SOURCES = \
-	globals.cc
-
 BUILT_SOURCES = \
 	cf_gen_defines.h \
 	cf_parser.h \
@@ -1158,19 +1122,6 @@ uninstall-local:
 DISTCLEANFILES = cf_gen_defines.h cf.data cf_parser.h squid.conf.default squid.conf.documented \
 	globals.cc string_arrays.c repl_modules.cc 
 
-##install-pinger:
-##	@f=$(PINGER_EXE); \
-##	if test -f $(libexecdir)/$$f; then \
-##		echo $(MV) $(libexecdir)/$$f $(libexecdir)/-$$f; \
-##		$(MV) $(libexecdir)/$$f $(libexecdir)/-$$f; \
-##	fi; \
-##	echo $(INSTALL_SUID) $$f $(libexecdir); \
-##	$(INSTALL_SUID) $$f $(libexecdir) || exit 1; \
-##	if test -f $(libexecdir)/-$$f; then \
-##		echo $(RM) -f $(libexecdir)/-$$f; \
-##		$(RM) -f $(libexecdir)/-$$f; \
-##	fi
-
 # stock tools for unit tests - library independent versions of dlink_list 
 # etc.
 # globals.cc is needed by test_tools.cc
@@ -1194,7 +1145,6 @@ check_PROGRAMS+= tests/testAuth \
 	tests/testEventLoop \
 	tests/test_http_range \
 	tests/testHttpRequest \
-	tests/testICMP \
 	tests/testStore \
 	tests/testString \
 	tests/testURL \
@@ -1428,7 +1378,6 @@ tests_testCacheManager_SOURCES = \
 	HttpMsg.cc \
 	HttpReply.cc \
 	HttpStatusLine.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -1444,7 +1393,6 @@ tests_testCacheManager_SOURCES = \
 	MemObject.cc \
 	mime.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Parsing.cc \
 	pconn.cc \
@@ -1501,6 +1449,7 @@ nodist_tests_testCacheManager_SOURCES = \
 tests_testCacheManager_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	@REPL_OBJS@ \
 	${ADAPTATION_LIBS} \
 	@REGEXLIB@ \
@@ -1602,7 +1551,6 @@ tests_testEvent_SOURCES = \
 	HttpMsg.cc \
 	HttpReply.cc \
 	HttpStatusLine.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -1618,7 +1566,6 @@ tests_testEvent_SOURCES = \
 	MemObject.cc \
 	mime.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Parsing.cc \
 	pconn.cc \
@@ -1674,6 +1621,7 @@ nodist_tests_testEvent_SOURCES = \
 tests_testEvent_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	@REPL_OBJS@ \
 	${ADAPTATION_LIBS} \
 	@REGEXLIB@ \
@@ -1759,7 +1707,6 @@ tests_testEventLoop_SOURCES = \
 	HttpMsg.cc \
 	HttpReply.cc \
 	HttpStatusLine.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -1775,7 +1722,6 @@ tests_testEventLoop_SOURCES = \
 	MemObject.cc \
 	mime.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Parsing.cc \
 	pconn.cc \
@@ -1831,6 +1777,7 @@ nodist_tests_testEventLoop_SOURCES = \
 tests_testEventLoop_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	@REPL_OBJS@ \
 	${ADAPTATION_LIBS} \
 	@REGEXLIB@ \
@@ -1907,7 +1854,6 @@ tests_test_http_range_SOURCES = \
 	HttpRequest.cc \
 	HttpRequestMethod.cc \
 	HttpStatusLine.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -1923,7 +1869,6 @@ tests_test_http_range_SOURCES = \
 	mime.cc \
 	multicast.cc \
 	neighbors.cc \
-	net_db.cc \
 	Parsing.cc \
 	peer_digest.cc \
 	peer_select.cc \
@@ -1983,6 +1928,7 @@ nodist_tests_test_http_range_SOURCES = \
 tests_test_http_range_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	@REPL_OBJS@ \
 	@STORE_OBJS@ \
 	${ADAPTATION_LIBS} \
@@ -2068,7 +2014,6 @@ tests_testHttpRequest_SOURCES = \
 	HttpMsg.cc \
 	HttpReply.cc \
 	HttpStatusLine.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -2084,7 +2029,6 @@ tests_testHttpRequest_SOURCES = \
 	MemObject.cc \
 	mime.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Parsing.cc \
 	pconn.cc \
@@ -2141,6 +2085,7 @@ nodist_tests_testHttpRequest_SOURCES = \
 tests_testHttpRequest_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	@REPL_OBJS@ \
 	${ADAPTATION_LIBS} \
 	@REGEXLIB@ \
@@ -2155,25 +2100,6 @@ tests_testHttpRequest_DEPENDENCIES =  $(top_builddir)/lib/libmiscutil.a \
 	@REPL_OBJS@ \
 	@SQUID_CPPUNIT_LA@
 
-## Tests of the ICMP base module.
-# Its used by pinger so SHOULD NOT require more dependancies! :-(
-tests_testICMP_SOURCES=\
-	ICMP.h \
-	icmp.cc \
-	tests/testICMP.h \
-	tests/testICMP.cc \
-	tests/testMain.cc \
-	SquidTime.h \
-	time.cc \
-	$(TESTSOURCES)
-tests_testICMP_LDFLAGS = $(LIBADD_DL)
-tests_testICMP_LDADD=\
-	@SQUID_CPPUNIT_LIBS@ \
-	@SQUID_CPPUNIT_LA@ \
-	-L../lib -lmiscutil
-tests_testICMP_DEPENDENCIES= @SQUID_CPPUNIT_LA@ \
-	$(top_builddir)/lib/libmiscutil.a
-
 # TODO:mime.cc drags in HttpReply.cc
 # delay pools need client_side_request.cc
 # store_key_md5 wants the method.
@@ -2435,7 +2361,6 @@ tests_testURL_SOURCES = \
 	HttpMsg.cc \
 	HttpReply.cc \
 	HttpStatusLine.cc \
-	$(ICMPSOURCE) \
 	icp_v2.cc \
 	icp_v3.cc \
 	$(IDENT_SOURCE) \
@@ -2451,7 +2376,6 @@ tests_testURL_SOURCES = \
 	MemObject.cc \
 	mime.cc \
 	neighbors.cc \
-	net_db.cc \
 	Packer.cc \
 	Parsing.cc \
 	pconn.cc \
@@ -2505,6 +2429,7 @@ nodist_tests_testURL_SOURCES = \
 tests_testURL_LDADD = \
 	libsquid.la \
 	libauth.la \
+	icmp/libicmp.la icmp/libicmp-core.la \
 	@REGEXLIB@ \
 	@REPL_OBJS@ \
 	${ADAPTATION_LIBS} \
@@ -50,6 +50,7 @@
 #include "IPAddress.h"
 #include "IPInterception.h"
 #include "DescriptorSet.h"
+#include "icmp/net_db.h"
 
 #if defined(_SQUID_CYGWIN_)
 #include <sys/ioctl.h>
@@ -1113,8 +1114,10 @@ ConnectStateData::connect()
         tries++;
         ipcacheMarkBadAddr(host, S);
 
+#if USE_ICMP
         if (Config.onoff.test_reachability)
             netdbDeleteAddrNetwork(S);
+#endif
 
         if (commRetryConnect()) {
             eventAdd("commReconnect", commReconnect, this, this->addrcount == 1 ? 0.05 : 0.0, 0);
@@ -48,8 +48,7 @@
 #include "pconn.h"
 #include "SquidTime.h"
 #include "Store.h"
-
-/* for IPInterceptor API */
+#include "icmp/net_db.h"
 #include "IPInterception.h"
 
 static PSC fwdStartCompleteWrapper;
@@ -50,7 +50,7 @@ extern "C"
 {
 #endif
 
-    extern FILE *debug_log;		/* NULL */
+//MOVED:Debug.h    extern FILE *debug_log;		/* NULL */
 //MOVED:structs.h    extern SquidConfig Config;
 //MOVED:structs.h    extern SquidConfig2 Config2;
     extern char *ConfigFile;	/* NULL */
@@ -44,6 +44,7 @@
 #include "comm.h"
 #include "MemBuf.h"
 #include "http.h"
+#include "icmp/net_db.h"
 
 typedef struct _Countstr Countstr;
 
@@ -857,7 +858,6 @@ htcpAccessCheck(acl_access * acl, htcpSpecifier * s, IPAddress &from)
 }
 
 static void
-
 htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, IPAddress &from)
 {
     htcpStuff stuff;
@@ -867,9 +867,6 @@ htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, IPAddr
     Packer p;
     ssize_t pktlen;
     char *host;
-    int rtt = 0;
-    int hops = 0;
-    int samp = 0;
     char cto_buf[128];
     memset(&stuff, '\0', sizeof(stuff));
     stuff.op = HTCP_TST;
@@ -911,7 +908,11 @@ htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, IPAddr
 
         hdr.reset();
 
+#if USE_ICMP
         if ((host = urlHostname(spec->uri))) {
+	    int rtt = 0;
+	    int hops = 0;
+            int samp = 0;
             netdbHostData(host, &samp, &rtt, &hops);
 
             if (rtt || hops) {
@@ -920,6 +921,7 @@ htcpTstReply(htcpDataHeader * dhdr, StoreEntry * e, htcpSpecifier * spec, IPAddr
                 hdr.putExt("Cache-to-Origin", cto_buf);
             }
         }
+#endif /* USE_ICMP */
 
         hdr.packInto(&p);
         stuff.D.cache_hdrs = xstrdup(mb.buf);
@@ -32,11 +32,11 @@
  *
  */
 #include "squid.h"
-#include "ICMP.h"
+#include "Icmp.h"
 #include "SquidTime.h"
 #include "Debug.h"
 
-ICMP::ICMP()
+Icmp::Icmp()
 {
 #if USE_ICMP
     icmp_sock = -1;
@@ -45,7 +45,7 @@ ICMP::ICMP()
 }
 
 void
-ICMP::Close()
+Icmp::Close()
 {
 #if USE_ICMP
     if (icmp_sock > 0)
@@ -58,7 +58,7 @@ ICMP::Close()
 #if USE_ICMP
 
 int
-ICMP::CheckSum(unsigned short *ptr, int size)
+Icmp::CheckSum(unsigned short *ptr, int size)
 {
     long sum;
     unsigned short oddbyte;
@@ -86,7 +86,7 @@ ICMP::CheckSum(unsigned short *ptr, int size)
 }
 
 int
-ICMP::ipHops(int ttl)
+Icmp::ipHops(int ttl)
 {
     if (ttl < 33)
         return 33 - ttl;
@@ -107,7 +107,7 @@ ICMP::ipHops(int ttl)
 }
 
 void
-ICMP::Log(const IPAddress &addr, const u_int8_t type, const char* pkt_str, const int rtt, const int hops)
+Icmp::Log(const IPAddress &addr, const u_int8_t type, const char* pkt_str, const int rtt, const int hops)
 {
     debugs(42, 2, "pingerLog: " << std::setw(9) << current_time.tv_sec  <<
            "." << std::setfill('0') << std::setw(6) <<
@@ -83,16 +83,16 @@ SQUIDCEXTERN int icmp_pkts_sent;
  * Child implementations define specific parts of these operations
  * using these methods as a naming and parameter template.
  *
- * ICMPSquid - implements the squid side of squid-pinger interface
- * ICMPPinger - implements the pinger side of the squid-pinger interface
- * ICMPv4 - implements pinger helper for ICMPv4
- * ICMPv6 - implements pinger helper for ICMPv6
+ * IcmpSquid - implements the squid side of squid-pinger interface
+ * IcmpPinger - implements the pinger side of the squid-pinger interface
+ * Icmpv4 - implements pinger helper for Icmpv4
+ * Icmpv6 - implements pinger helper for Icmpv6
  */
-class ICMP
+class Icmp
 {
 public:
-    ICMP();
-    virtual ~ICMP() {};
+    Icmp();
+    virtual ~Icmp() {};
 
     /// Start pinger helper and initiate control channel
     virtual int Open() =0;
@@ -38,8 +38,8 @@
 #if USE_ICMP
 
 #include "SquidTime.h"
-#include "ICMPv4.h"
-#include "ICMPPinger.h"
+#include "Icmp4.h"
+#include "IcmpPinger.h"
 #include "Debug.h"
 
 const char *icmpPktStr[] = {
@@ -63,18 +63,18 @@ const char *icmpPktStr[] = {
     "Out of Range Type"
 };
 
-ICMPv4::ICMPv4() : ICMP()
+Icmp4::Icmp4() : Icmp()
 {
     ;
 }
 
-ICMPv4::~ICMPv4()
+Icmp4::~Icmp4()
 {
     Close();
 }
 
 int
-ICMPv4::Open(void)
+Icmp4::Open(void)
 {
     icmp_sock = socket(PF_INET, SOCK_RAW, IPPROTO_ICMP);
 
@@ -90,7 +90,7 @@ ICMPv4::Open(void)
 }
 
 void
-ICMPv4::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
+Icmp4::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 {
     int x;
     LOCAL_ARRAY(char, pkt, MAX_PKT4_SZ);
@@ -158,7 +158,7 @@ ICMPv4::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 }
 
 void
-ICMPv4::Recv(void)
+Icmp4::Recv(void)
 {
     int n;
     struct addrinfo *from = NULL;
@@ -35,7 +35,7 @@
 #define _INCLUDE_ICMPV4_H
 
 #include "config.h"
-#include "ICMP.h"
+#include "Icmp.h"
 #include "IPAddress.h"
 
 #if HAVE_NETINET_IN_SYSTM_H
@@ -162,11 +162,11 @@ typedef struct icmphdr {
  * Class partially implementing RFC 792 - ICMP for IP version 4.
  * Provides ECHO-REQUEST, ECHO-REPLY (secion 4.1)
  */
-class ICMPv4 : public ICMP
+class Icmp4 : public Icmp
 {
 public:
-    ICMPv4();
-    virtual ~ICMPv4();
+    Icmp4();
+    virtual ~Icmp4();
 
     virtual int Open();
 
@@ -179,7 +179,7 @@ class ICMPv4 : public ICMP
 #if USE_ICMP
 
 /// pinger helper contains one of these as a global object.
-SQUIDCEXTERN ICMPv4 icmp4;
+SQUIDCEXTERN Icmp4 icmp4;
 
 #endif /* USE_ICMP && SQUID_HELPER */
 
@@ -39,8 +39,8 @@
 
 #include "SquidTime.h"
 #include "Debug.h"
-#include "ICMPv6.h"
-#include "ICMPPinger.h"
+#include "Icmp6.h"
+#include "IcmpPinger.h"
 
 // Some system headers are only neeed internally here.
 // They should not be included via the header.
@@ -49,7 +49,7 @@
 #include <netinet/ip6.h>
 #endif
 
-// ICMPv6 OP-Codes
+// Icmp6 OP-Codes
 // see http://www.iana.org/assignments/icmpv6-parameters
 // NP: LowPktStr is for codes 0-127
 static const char *icmp6LowPktStr[] = {
@@ -103,18 +103,18 @@ static const char *icmp6HighPktStr[] = {
     "ICMP 160"
 };
 
-ICMPv6::ICMPv6() : ICMP()
+Icmp6::Icmp6() : Icmp()
 {
     ; // nothing new.
 }
 
-ICMPv6::~ICMPv6()
+Icmp6::~Icmp6()
 {
     Close();
 }
 
 int
-ICMPv6::Open(void)
+Icmp6::Open(void)
 {
     icmp_sock = socket(PF_INET6, SOCK_RAW, IPPROTO_ICMPV6);
 
@@ -124,16 +124,16 @@ ICMPv6::Open(void)
     }
 
     icmp_ident = getpid() & 0xffff;
-    debugs(42, 1, "pinger: ICMPv6 socket opened");
+    debugs(42, 1, "pinger: Icmp6 socket opened");
 
     return icmp_sock;
 }
 
 /**
- * Generates an RFC 4443 ICMPv6 ECHO Packet and sends into the network.
+ * Generates an RFC 4443 Icmp6 ECHO Packet and sends into the network.
  */
 void
-ICMPv6::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
+Icmp6::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 {
     int x;
     LOCAL_ARRAY(char, pkt, MAX_PKT6_SZ);
@@ -153,7 +153,7 @@ ICMPv6::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
         len = 0;
     }
 
-    // Construct ICMPv6 ECHO header
+    // Construct Icmp6 ECHO header
     icmp->icmp6_type = ICMP6_ECHO_REQUEST;
     icmp->icmp6_code = 0;
     icmp->icmp6_cksum = 0;
@@ -163,7 +163,7 @@ ICMPv6::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
     icmp6_pktsize = sizeof(struct icmp6_hdr);
 
 
-    // Fill ICMPv6 ECHO data content
+    // Fill Icmp6 ECHO data content
     echo = (icmpEchoData *) (pkt + sizeof(icmp6_hdr));
     echo->opcode = (unsigned char) opcode;
     memcpy(&echo->tv, &current_time, sizeof(struct timeval));
@@ -186,7 +186,7 @@ ICMPv6::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 
     assert(icmp6_pktsize <= MAX_PKT6_SZ);
 
-    debugs(42, 5, HERE << "Send ICMPv6 packet to " << to << ".");
+    debugs(42, 5, HERE << "Send Icmp6 packet to " << to << ".");
 
     x = sendto(icmp_sock,
                (const void *) pkt,
@@ -204,10 +204,10 @@ ICMPv6::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 }
 
 /**
- * Reads an RFC 4443 ICMPv6 ECHO-REPLY Packet from the network.
+ * Reads an RFC 4443 Icmp6 ECHO-REPLY Packet from the network.
  */
 void
-ICMPv6::Recv(void)
+Icmp6::Recv(void)
 {
     int n;
     struct addrinfo *from = NULL;
@@ -299,7 +299,7 @@ ICMPv6::Recv(void)
     }
 
     if (icmp6->icmp6_id != icmp_ident) {
-        debugs(42, 8, HERE << "dropping ICMPv6 read. IDENT check failed. ident=='" << icmp_ident << "'=='" << icmp6->icmp6_id << "'");
+        debugs(42, 8, HERE << "dropping Icmp6 read. IDENT check failed. ident=='" << icmp_ident << "'=='" << icmp6->icmp6_id << "'");
         return;
     }
 
@@ -38,7 +38,7 @@
 
 #if USE_IPV6
 
-#include "ICMP.h"
+#include "Icmp.h"
 #include "IPAddress.h"
 
 #if HAVE_NETINET_IN_H
@@ -70,11 +70,11 @@
  * Class partially implementing RFC 4443 - ICMPv6 for IP version 6.
  * Provides ECHO-REQUEST, ECHO-REPLY (secion 4)
  */
-class ICMPv6 : public ICMP
+class Icmp6 : public Icmp
 {
 public:
-    ICMPv6();
-    virtual ~ICMPv6();
+    Icmp6();
+    virtual ~Icmp6();
 
     virtual int Open();
 
@@ -87,10 +87,8 @@ class ICMPv6 : public ICMP
 #if USE_ICMP
 
 /// pinger helper contains one of these as a global object.
-SQUIDCEXTERN ICMPv6 icmp6;
+SQUIDCEXTERN Icmp6 icmp6;
 
 #endif /* USE_ICMP && SQUID_HELPER */
-
 #endif /* USE_IPV6 */
-
 #endif /* _INCLUDE_ICMPV6_H */
@@ -50,16 +50,16 @@
  * This structure is included as a child field of the global Config
  * such that if ICMP is built it can be accessed as Config.pinger.*
  */
-class ICMPConfig
+class IcmpConfig
 {
 
 public:
 
     /** \todo These methods should really be defined in an ICMPConfig.cc file
      * alongside any custom parsing routines needed for this component.
      * First though, the whole global Config dependancy tree needs fixing */
-    ICMPConfig() : program(NULL), enable(0) {};
-    ~ICMPConfig() { if (program) delete program; program = NULL; };
+    IcmpConfig() : program(NULL), enable(0) {};
+    ~IcmpConfig() { if (program) delete program; program = NULL; };
 
     /* variables */
 
@@ -39,19 +39,19 @@
 #if USE_ICMP
 
 #include "SquidTime.h"
-#include "ICMPPinger.h"
-#include "ICMPv4.h"
-#include "ICMPv6.h"
+#include "IcmpPinger.h"
+#include "Icmp4.h"
+#include "Icmp6.h"
 #include "Debug.h"
 
-ICMPPinger::ICMPPinger() : ICMP()
+IcmpPinger::IcmpPinger() : Icmp()
 {
     // these start invalid. Setup properly in Open()
     socket_from_squid = -1;
     socket_to_squid = -1;
 }
 
-ICMPPinger::~ICMPPinger()
+IcmpPinger::~IcmpPinger()
 {
     Close();
 }
@@ -66,7 +66,7 @@ Win32SockCleanup(void)
 #endif
 
 int
-ICMPPinger::Open(void)
+IcmpPinger::Open(void)
 {
 #ifdef _SQUID_MSWIN_
 
@@ -160,7 +160,7 @@ ICMPPinger::Open(void)
 }
 
 void
-ICMPPinger::Close(void)
+IcmpPinger::Close(void)
 {
 #ifdef _SQUID_MSWIN_
 
@@ -177,7 +177,7 @@ ICMPPinger::Close(void)
 }
 
 void
-ICMPPinger::Recv(void)
+IcmpPinger::Recv(void)
 {
     static pingerEchoData pecho;
     int n;
@@ -232,7 +232,7 @@ ICMPPinger::Recv(void)
 }
 
 void
-ICMPPinger::SendResult(pingerReplyData &preply, int len)
+IcmpPinger::SendResult(pingerReplyData &preply, int len)
 {
     debugs(42, 2, HERE << "return result to squid. len=" << len);
 
@@ -35,16 +35,16 @@
 #define _INCLUDE_ICMPPINGER_H
 
 #include "config.h"
-#include "ICMP.h"
+#include "Icmp.h"
 
 /**
  * Implements the interface to squid for ICMP operations
  */
-class ICMPPinger : public ICMP
+class IcmpPinger : public Icmp
 {
 public:
-    ICMPPinger();
-    virtual ~ICMPPinger();
+    IcmpPinger();
+    virtual ~IcmpPinger();
 
     /// Start and initiate control channel to squid
     virtual int Open();
@@ -61,7 +61,7 @@ class ICMPPinger : public ICMP
     virtual void Recv(void);
 
 private:
-    // unused in ICMPPinger
+    // unused in IcmpPinger
     virtual void SendEcho(IPAddress &to, int opcode, const char *payload, int len) {};
 
     /**
@@ -76,7 +76,7 @@ class ICMPPinger : public ICMP
 #if USE_ICMP
 
 /// pinger helper contains one of these as a global object.
-SQUIDCEXTERN ICMPPinger control;
+SQUIDCEXTERN IcmpPinger control;
 
 #endif
 
@@ -33,12 +33,13 @@
  */
 
 #include "squid.h"
-#include "ICMPSquid.h"
+#include "icmp/IcmpSquid.h"
+#include "icmp/net_db.h"
 #include "comm.h"
 #include "SquidTime.h"
 
 // Instance global to be available in main() and elsewhere.
-ICMPSquid icmpEngine;
+IcmpSquid icmpEngine;
 
 #if USE_ICMP
 
@@ -54,12 +55,12 @@ static pid_t pid;
 #endif /* USE_ICMP */
 
 
-ICMPSquid::ICMPSquid() : ICMP()
+IcmpSquid::IcmpSquid() : Icmp()
 {
     ; // nothing new.
 }
 
-ICMPSquid::~ICMPSquid()
+IcmpSquid::~IcmpSquid()
 {
     Close();
 }
@@ -68,7 +69,7 @@ ICMPSquid::~ICMPSquid()
 #if USE_ICMP
 
 void
-ICMPSquid::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
+IcmpSquid::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 {
     static pingerEchoData pecho;
     int x, slen;
@@ -127,15 +128,15 @@ ICMPSquid::SendEcho(IPAddress &to, int opcode, const char *payload, int len)
 }
 
 // static Callback to wrap the squid-side ICMP handler.
-// the ICMPSquid::Recv cannot be declared both static and virtual.
+// the IcmpSquid::Recv cannot be declared both static and virtual.
 static void
 icmpSquidRecv(int unused1, void *unused2)
 {
     icmpEngine.Recv();
 }
 
 void
-ICMPSquid::Recv()
+IcmpSquid::Recv()
 {
     int n;
     static int fail_count = 0;
@@ -195,7 +196,7 @@ ICMPSquid::Recv()
 #endif /* USE_ICMP */
 
 void
-ICMPSquid::DomainPing(IPAddress &to, const char *domain)
+IcmpSquid::DomainPing(IPAddress &to, const char *domain)
 {
 #if USE_ICMP
     debugs(37, 4, HERE << "'" << domain << "' (" << to << ")");
@@ -204,7 +205,7 @@ ICMPSquid::DomainPing(IPAddress &to, const char *domain)
 }
 
 int
-ICMPSquid::Open(void)
+IcmpSquid::Open(void)
 {
 #if USE_ICMP
     const char *args[2];
@@ -270,7 +271,7 @@ ICMPSquid::Open(void)
 }
 
 void
-ICMPSquid::Close(void)
+IcmpSquid::Close(void)
 {
 #if USE_ICMP
 
@@ -35,7 +35,7 @@
 #define _INCLUDE_ICMPSQUID_H
 
 #include "config.h"
-#include "ICMP.h"
+#include "Icmp.h"
 #include "IPAddress.h"
 
 /**
@@ -46,11 +46,11 @@
  *
  * Provides ECHO-REQUEST, ECHO-REPLY in a protocol-neutral manner.
  */
-class ICMPSquid : public ICMP
+class IcmpSquid : public Icmp
 {
 public:
-    ICMPSquid();
-    virtual ~ICMPSquid();
+    IcmpSquid();
+    virtual ~IcmpSquid();
 
     virtual int Open();
     virtual void Close();
@@ -64,6 +64,6 @@ class ICMPSquid : public ICMP
 };
 
 // global engine within squid.
-SQUIDCEXTERN ICMPSquid icmpEngine;
+SQUIDCEXTERN IcmpSquid icmpEngine;
 
 #endif /* _INCLUDE_ICMPSQUID_H */
@@ -41,6 +41,7 @@
  */
 
 #include "squid.h"
+#include "icmp/net_db.h"
 #include "cbdata.h"
 #include "event.h"
 #include "CacheManager.h"
@@ -56,7 +57,7 @@
 #include "IPAddress.h"
 
 #if USE_ICMP
-#include "ICMPSquid.h"
+#include "icmp/IcmpSquid.h"
 #include "StoreClient.h"
 
 #define	NETDB_REQBUF_SZ	4096
@@ -1059,8 +1060,7 @@ netdbDump(StoreEntry * sentry)
     xfree(list);
 #else
 
-    storeAppendPrintf(sentry,
-                      "NETDB support not compiled into this Squid cache.\n");
+    storeAppendPrintf(sentry,"NETDB support not compiled into this Squid cache.\n");
 #endif
 }
 
@@ -1193,7 +1193,6 @@ netdbExchangeUpdatePeer(IPAddress &addr, peer * e, double rtt, double hops)
 }
 
 void
-
 netdbDeleteAddrNetwork(IPAddress &addr)
 {
 #if USE_ICMP
@@ -1205,10 +1204,10 @@ netdbDeleteAddrNetwork(IPAddress &addr)
     debugs(38, 3, "netdbDeleteAddrNetwork: " << n->network);
 
     netdbRelease(n);
-
 #endif
 }
 
+
 void
 netdbBinaryExchange(StoreEntry * s)
 {
@@ -0,0 +1,37 @@
+#ifndef ICMP_NET_DB_H
+#define ICMP_NET_DB_H
+
+#include "config.h"
+
+class IPAddress;
+class StoreEntry;
+class HttpRequest;
+
+/* for struct peer */
+#include "structs.h"
+
+
+SQUIDCEXTERN void netdbInit(void);
+
+SQUIDCEXTERN void netdbHandlePingReply(const IPAddress &from, int hops, int rtt);
+SQUIDCEXTERN void netdbPingSite(const char *hostname);
+SQUIDCEXTERN void netdbDump(StoreEntry *);
+
+#if 0 // AYJ: Looks to be unused now.
+SQUIDCEXTERN int netdbHops(IPAddress &);
+#endif
+
+SQUIDCEXTERN void netdbFreeMemory(void);
+SQUIDCEXTERN int netdbHostHops(const char *host);
+SQUIDCEXTERN int netdbHostRtt(const char *host);
+SQUIDCEXTERN void netdbUpdatePeer(HttpRequest *, peer * e, int rtt, int hops);
+
+SQUIDCEXTERN void netdbDeleteAddrNetwork(IPAddress &addr);
+SQUIDCEXTERN void netdbBinaryExchange(StoreEntry *);
+SQUIDCEXTERN void netdbExchangeStart(void *);
+
+SQUIDCEXTERN void netdbExchangeUpdatePeer(IPAddress &, peer *, double, double);
+SQUIDCEXTERN peer *netdbClosestParent(HttpRequest *);
+SQUIDCEXTERN void netdbHostData(const char *host, int *samp, int *rtt, int *hops);
+
+#endif /* ICMP_NET_DB_H */
@@ -68,9 +68,9 @@
 
 #if USE_ICMP
 
-#include "ICMPv4.h"
-#include "ICMPv6.h"
-#include "ICMPPinger.h"
+#include "Icmp4.h"
+#include "Icmp6.h"
+#include "IcmpPinger.h"
 
 #ifdef _SQUID_MSWIN_
 
@@ -107,10 +107,10 @@ Win32__WSAFDIsSet(int fd, fd_set FAR * set)
 #endif	/* _SQUID_MSWIN_ */
 
 // ICMP Engines are declared global here so they can call each other easily.
-ICMPPinger control;
-ICMPv4 icmp4;
+IcmpPinger control;
+Icmp4 icmp4;
 #if USE_IPV6
-ICMPv6 icmp6;
+Icmp6 icmp6;
 #endif
 
 int icmp_pkts_sent = 0;
@@ -5,16 +5,16 @@
 
 #include <cppunit/TestAssert.h>
 
-#include "testICMP.h"
+#include "testIcmp.h"
 
-CPPUNIT_TEST_SUITE_REGISTRATION( testICMP );
+CPPUNIT_TEST_SUITE_REGISTRATION( testIcmp );
 
 #if USE_ICMP
 
 void
-testICMP::testChecksum()
+testIcmp::testChecksum()
 {
-    stubICMP icmp;
+    stubIcmp icmp;
     short unsigned int buf[10] = {1,2,3,4,5,6,7,8,9};
 
     // NULL data
@@ -40,9 +40,9 @@ testICMP::testChecksum()
 }
 
 void
-testICMP::testHops()
+testIcmp::testHops()
 {
-    stubICMP icmp;
+    stubIcmp icmp;
 
     /* test invalid -(under values) */
     // negative     : n > 33
@@ -3,15 +3,15 @@
 
 #include <cppunit/extensions/HelperMacros.h>
 
-#include "ICMP.h"
+#include "Icmp.h"
 
 #if USE_ICMP
 
-class stubICMP : public ICMP
+class stubIcmp : public Icmp
 {
 public:
-    stubICMP() {};
-    virtual ~stubICMP() {};
+    stubIcmp() {};
+    virtual ~stubIcmp() {};
     virtual int Open() { return 0; };
     virtual void Close() {};
 
@@ -31,9 +31,9 @@ class stubICMP : public ICMP
 /**
  * test the ICMP base class.
  */
-class testICMP : public CPPUNIT_NS::TestFixture
+class testIcmp : public CPPUNIT_NS::TestFixture
 {
-    CPPUNIT_TEST_SUITE( testICMP );
+    CPPUNIT_TEST_SUITE( testIcmp );
 #if USE_ICMP
     CPPUNIT_TEST( testChecksum );
     CPPUNIT_TEST( testHops );
@@ -49,6 +49,7 @@
 #include "SquidTime.h"
 #include "SwapDir.h"
 #include "IPAddress.h"
+#include "icmp/net_db.h"
 
 /// \ingroup ServerProtocolICPInternal2
 static void icpLogIcp(const IPAddress &, log_type, int, const char *, int);
@@ -151,10 +152,12 @@ ICP2State::created(StoreEntry *newEntry)
     if (icpCheckUdpHit(entry, request)) {
         codeToSend = ICP_HIT;
     } else {
+#if USE_ICMP
         if (Config.onoff.test_reachability && rtt == 0) {
             if ((rtt = netdbHostRtt(request->GetHost())) == 0)
                 netdbPingSite(request->GetHost());
         }
+#endif /* USE_ICMP */
 
         if (icpGetCommonOpcode() != ICP_ERR)
             codeToSend = icpGetCommonOpcode();
@@ -461,7 +464,7 @@ doV2Query(int fd, IPAddress &from, char *buf, icp_common_t header)
         HTTPMSGUNLOCK(icp_request);
         return;
     }
-
+#if USE_ICMP
     if (header.flags & ICP_FLAG_SRC_RTT) {
         rtt = netdbHostRtt(icp_request->GetHost());
         int hops = netdbHostHops(icp_request->GetHost());
@@ -470,6 +473,7 @@ doV2Query(int fd, IPAddress &from, char *buf, icp_common_t header)
         if (rtt)
             flags |= ICP_FLAG_SRC_RTT;
     }
+#endif /* USE_ICMP */
 
     /* The peer is allowed to use this cache */
     ICP2State *state = new ICP2State (header, icp_request);
@@ -41,6 +41,7 @@
 #include "MemBuf.h"
 #include "SquidTime.h"
 #include "wordlist.h"
+#include "icmp/net_db.h"
 
 /* called when we "miss" on an internal object;
  * generate known dynamic objects,
@@ -60,7 +61,7 @@ internalStart(HttpRequest * request, StoreEntry * entry)
         const char *msgbuf = "This cache is currently building its digest.\n";
 #else
 
-        const char *msgbuf = "This cache does not suport Cache Digests.\n";
+        const char *msgbuf = "This cache does not support Cache Digests.\n";
 #endif
 
         HttpVersion version(1, 0);
@@ -68,7 +68,8 @@
 #include "SwapDir.h"
 #include "forward.h"
 #include "MemPool.h"
-#include "ICMPSquid.h"
+#include "icmp/IcmpSquid.h"
+#include "icmp/net_db.h"
 #include "TextException.h"
 
 #if USE_LOADABLE_MODULES
@@ -47,6 +47,7 @@
 #include "SquidTime.h"
 #include "Store.h"
 #include "IPAddress.h"
+#include "icmp/net_db.h"
 
 /* count mcast group peers every 15 minutes */
 #define MCAST_COUNT_RATE 900
@@ -1278,9 +1279,12 @@ peerDNSConfigure(const ipcache_addrs * ia, void *data)
     if (p->type == PEER_MULTICAST)
         peerCountMcastPeersSchedule(p, 10);
 
+#if USE_ICMP
     if (p->type != PEER_MULTICAST)
         if (!p->options.no_netdb_exchange)
             eventAddIsh("netdbExchangeStart", netdbExchangeStart, p, 30.0, 1);
+#endif
+
 }
 
 static void
@@ -42,6 +42,7 @@
 #include "htcp.h"
 #include "forward.h"
 #include "SquidTime.h"
+#include "icmp/net_db.h"
 
 const char *hier_strings[] = {
     "NONE",
@@ -241,19 +242,21 @@ peerSelectCallback(ps_state * psstate)
 static int
 peerCheckNetdbDirect(ps_state * psstate)
 {
+#if USE_ICMP
     peer *p;
     int myrtt;
     int myhops;
 
     if (psstate->direct == DIRECT_NO)
         return 0;
 
+    /* base lookup on RTT and Hops if ICMP NetDB is enabled. */
+
     myrtt = netdbHostRtt(psstate->request->GetHost());
 
     debugs(44, 3, "peerCheckNetdbDirect: MY RTT = " << myrtt << " msec");
     debugs(44, 3, "peerCheckNetdbDirect: minimum_direct_rtt = " << Config.minDirectRtt << " msec");
 
-
     if (myrtt && myrtt <= Config.minDirectRtt)
         return 1;
 
@@ -262,7 +265,6 @@ peerCheckNetdbDirect(ps_state * psstate)
     debugs(44, 3, "peerCheckNetdbDirect: MY hops = " << myhops);
     debugs(44, 3, "peerCheckNetdbDirect: minimum_direct_hops = " << Config.minDirectHops);
 
-
     if (myhops && myhops <= Config.minDirectHops)
         return 1;
 
@@ -276,6 +278,8 @@ peerCheckNetdbDirect(ps_state * psstate)
     if (myrtt && myrtt <= psstate->ping.p_rtt)
         return 1;
 
+#endif /* USE_ICMP */
+
     return 0;
 }
 
@@ -396,7 +400,7 @@ peerSelectPinned(ps_state * ps)
  * following methods:
  *      Cache Digests
  *      CARP
- *      Netdb RTT estimates
+ *      ICMP Netdb RTT estimates
  *      ICP/HTCP queries
  */
 static void
@@ -621,12 +625,12 @@ static void
 peerIcpParentMiss(peer * p, icp_common_t * header, ps_state * ps)
 {
     int rtt;
-    int hops;
 
+#if USE_ICMP
     if (Config.onoff.query_icmp) {
         if (header->flags & ICP_FLAG_SRC_RTT) {
             rtt = header->pad & 0xFFFF;
-            hops = (header->pad >> 16) & 0xFFFF;
+            int hops = (header->pad >> 16) & 0xFFFF;
 
             if (rtt > 0 && rtt < 0xFFFF)
                 netdbUpdatePeer(ps->request, p, rtt, hops);
@@ -637,6 +641,7 @@ peerIcpParentMiss(peer * p, icp_common_t * header, ps_state * ps)
             }
         }
     }
+#endif /* USE_ICMP */
 
     /* if closest-only is set, then don't allow FIRST_PARENT_MISS */
     if (p->options.closest_only)
@@ -720,12 +725,12 @@ static void
 peerHtcpParentMiss(peer * p, htcpReplyData * htcp, ps_state * ps)
 {
     int rtt;
-    int hops;
 
+#if USE_ICMP
     if (Config.onoff.query_icmp) {
         if (htcp->cto.rtt > 0) {
             rtt = (int) htcp->cto.rtt * 1000;
-            hops = (int) htcp->cto.hops * 1000;
+            int hops = (int) htcp->cto.hops * 1000;
             netdbUpdatePeer(ps->request, p, rtt, hops);
 
             if (rtt && (ps->ping.p_rtt == 0 || rtt < ps->ping.p_rtt)) {
@@ -734,6 +739,7 @@ peerHtcpParentMiss(peer * p, htcpReplyData * htcp, ps_state * ps)
             }
         }
     }
+#endif /* USE_ICMP */
 
     /* if closest-only is set, then don't allow FIRST_PARENT_MISS */
     if (p->options.closest_only)
@@ -413,28 +413,6 @@ SQUIDCEXTERN int peerHTTPOkay(const peer *, HttpRequest *);
 
 SQUIDCEXTERN peer *whichPeer(const IPAddress &from);
 
-SQUIDCEXTERN void netdbInit(void);
-
-SQUIDCEXTERN void netdbHandlePingReply(const IPAddress &from, int hops, int rtt);
-SQUIDCEXTERN void netdbPingSite(const char *hostname);
-SQUIDCEXTERN void netdbDump(StoreEntry *);
-
-#if 0 // AYJ: Looks to be unused now.
-SQUIDCEXTERN int netdbHops(IPAddress &);
-#endif
-SQUIDCEXTERN void netdbFreeMemory(void);
-SQUIDCEXTERN int netdbHostHops(const char *host);
-SQUIDCEXTERN int netdbHostRtt(const char *host);
-SQUIDCEXTERN void netdbUpdatePeer(HttpRequest *, peer * e, int rtt, int hops);
-
-SQUIDCEXTERN void netdbDeleteAddrNetwork(IPAddress &addr);
-SQUIDCEXTERN void netdbBinaryExchange(StoreEntry *);
-SQUIDCEXTERN void netdbExchangeStart(void *);
-
-SQUIDCEXTERN void netdbExchangeUpdatePeer(IPAddress &, peer *, double, double);
-SQUIDCEXTERN peer *netdbClosestParent(HttpRequest *);
-SQUIDCEXTERN void netdbHostData(const char *host, int *samp, int *rtt, int *hops);
-
 SQUIDCEXTERN void peerSelect(HttpRequest *, StoreEntry *, PSC *, void *data);
 SQUIDCEXTERN void peerSelectInit(void);
 
@@ -130,7 +130,7 @@ struct relist
 #endif
 
 #if USE_ICMP
-#include "ICMPConfig.h"
+#include "icmp/IcmpConfig.h"
 #endif
 
 /* forward decl for SquidConfig, see RemovalPolicy.h */
@@ -259,7 +259,7 @@ struct SquidConfig
 #endif
 
 #if USE_ICMP
-    ICMPConfig pinger;
+    IcmpConfig pinger;
 #endif
 
     char *as_whois_server;
@@ -42,6 +42,7 @@
 #include "MemBuf.h"
 #include "forward.h"
 #include "SquidTime.h"
+#include "icmp/net_db.h"
 
 #define	URN_REQBUF_SZ	4096
 
@@ -471,7 +472,6 @@ urnParseReply(const char *inbuf, const HttpRequestMethod& m)
     char *token;
     char *url;
     char *host;
-    int rtt;
     url_entry *list;
     url_entry *old;
     int n = 32;
@@ -496,16 +496,19 @@ urnParseReply(const char *inbuf, const HttpRequestMethod& m)
         if (NULL == host)
             continue;
 
-        rtt = netdbHostRtt(host);
+#if USE_ICMP
+        list[i].rtt = netdbHostRtt(host);
 
-        if (0 == rtt) {
+        if (0 == list[i].rtt) {
             debugs(52, 3, "urnParseReply: Pinging " << host);
             netdbPingSite(host);
         }
+#else
+        list[i].rtt = 0;
+#endif
 
         list[i].url = url;
         list[i].host = xstrdup(host);
-        list[i].rtt = rtt;
         list[i].flags.cached = storeGetPublic(url, m) ? 1 : 0;
         i++;
     }