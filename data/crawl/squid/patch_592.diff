@@ -372,10 +372,10 @@ httpHeaderStatInit(HttpHeaderStat * hs, const char *label)
     assert(label);
     memset(hs, 0, sizeof(HttpHeaderStat));
     hs->label = label;
-    statHistEnumInit(&hs->hdrUCountDistr, 32);	/* not a real enum */
-    statHistEnumInit(&hs->fieldTypeDistr, HDR_ENUM_END);
-    statHistEnumInit(&hs->ccTypeDistr, CC_ENUM_END);
-    statHistEnumInit(&hs->scTypeDistr, SC_ENUM_END);
+    hs->hdrUCountDistr.enumInit(32);	/* not a real enum */
+    hs->fieldTypeDistr.enumInit(HDR_ENUM_END);
+    hs->ccTypeDistr.enumInit(CC_ENUM_END);
+    hs->scTypeDistr.enumInit(SC_ENUM_END);
 }
 
 /*
@@ -1087,6 +1087,7 @@ tests_testHttpReply_SOURCES=\
 	StatCounters.h \
 	StatCounters.cc \
 	StatHist.h \
+	StatHist.cc \
 	tests/stub_StatHist.cc \
 	tests/stub_store.cc \
 	tests/stub_store_stats.cc \
@@ -274,13 +274,6 @@ StatHist::enumInit(int last_enum)
     init(last_enum + 3, Math::Null, Math::Null, (double) -1, (double) (last_enum + 1 + 1));
 }
 
-void
-statHistEnumInit(StatHist * H, int last_enum)
-{
-    H->enumInit(last_enum);
-}
-
-
 void
 statHistEnumDumper(StoreEntry * sentry, int idx, double val, double size, int count)
 {
@@ -289,12 +282,6 @@ statHistEnumDumper(StoreEntry * sentry, int idx, double val, double size, int co
                           idx, (int) val, count);
 }
 
-void
-statHistIntInit(StatHist * H, int n)
-{
-    H->init(n, Math::Null, Math::Null, (double) 0, (double) n - 1);
-}
-
 void
 statHistIntDumper(StoreEntry * sentry, int idx, double val, double size, int count)
 {
@@ -31,7 +31,6 @@
 #ifndef STATHIST_H_
 #define STATHIST_H_
 
-#include "config.h"
 #include "typedefs.h"
 
 /*
@@ -68,8 +67,7 @@ class StatHist {
 void statHistCount(StatHist * H, double val);
 double statHistDeltaMedian(const StatHist & A, const StatHist & B);
 double statHistDeltaPctile(const StatHist & A, const StatHist & B, double pctile);
-void statHistEnumInit(StatHist * H, int last_enum);
-void statHistIntInit(StatHist * H, int n);
+//void statHistIntInit(StatHist * H, int n);
 StatHistBinDumper statHistEnumDumper;
 StatHistBinDumper statHistIntDumper;
 
@@ -1503,11 +1503,11 @@ statCountersInitSpecial(StatCounters * C)
     /*
      * Cache Digest Stuff
      */
-    statHistEnumInit(&C->cd.on_xition_count, CacheDigestHashFuncCount);
-    statHistEnumInit(&C->comm_icp_incoming, INCOMING_ICP_MAX);
-    statHistEnumInit(&C->comm_dns_incoming, INCOMING_DNS_MAX);
-    statHistEnumInit(&C->comm_http_incoming, INCOMING_HTTP_MAX);
-    statHistIntInit(&C->select_fds_hist, 256);	/* was SQUID_MAXFD, but it is way too much. It is OK to crop this statistics */
+    C->cd.on_xition_count.enumInit(CacheDigestHashFuncCount);
+    C->comm_icp_incoming.enumInit(INCOMING_ICP_MAX);
+    C->comm_dns_incoming.enumInit(INCOMING_DNS_MAX);
+    C->comm_http_incoming.enumInit(INCOMING_HTTP_MAX);
+    C->select_fds_hist.enumInit(256);	/* was SQUID_MAXFD, but it is way too much. It is OK to crop this statistics */
 }
 
 /* add special cases here as they arrive */
@@ -3,20 +3,8 @@
 // for StatHist definitions
 #include "StatHist.h"
 
-void
-StatHist::count(double val)
-{
-    fatal("statHistCount: Not implemented");
-}
-
 void
 statHistEnumInit(StatHist * H, int last_enum)
 {
 //NO-OP    fatal("statHistEnumInit: Not implemented");
 }
-
-void
-StatHist::dump(StoreEntry * sentry, StatHistBinDumper * bd) const
-{
-    // noop
-}