@@ -4017,14 +4017,14 @@ DOC_END
 NAME: wccp2_forwarding_method
 TYPE: wccp2_method
 LOC: Config.Wccp2.forwarding_method
-DEFAULT: gre_hash
+DEFAULT: gre
 IFDEF: USE_WCCPv2
 DOC_START
 	WCCP2 allows the setting of forwarding methods between the
 	router/switch and the cache.  Valid values are as follows:
 
-	gre_hash - GRE encapsulation (forward the packet in a GRE/WCCP tunnel)
-	l2_mask  - L2 redirect (forward the packet using Layer 2/MAC rewriting)
+	gre - GRE encapsulation (forward the packet in a GRE/WCCP tunnel)
+	l2  - L2 redirect (forward the packet using Layer 2/MAC rewriting)
 
 	Currently (as of IOS 12.4) cisco routers only support GRE.
 	Cisco switches only support the L2 redirect assignment method.
@@ -4033,15 +4033,15 @@ DOC_END
 NAME: wccp2_return_method
 TYPE: wccp2_method
 LOC: Config.Wccp2.return_method
-DEFAULT: gre_hash
+DEFAULT: gre
 IFDEF: USE_WCCPv2
 DOC_START
 	WCCP2 allows the setting of return methods between the
 	router/switch and the cache for packets that the cache
 	decides not to handle.  Valid values are as follows:
 
-	gre_hash - GRE encapsulation (forward the packet in a GRE/WCCP tunnel)
-	l2_mask  - L2 redirect (forward the packet using Layer 2/MAC rewriting)
+	gre - GRE encapsulation (forward the packet in a GRE/WCCP tunnel)
+	l2  - L2 redirect (forward the packet using Layer 2/MAC rewriting)
 
 	Currently (as of IOS 12.4) cisco routers only support GRE.
 	Cisco switches only support the L2 redirect assignment.
@@ -4053,16 +4053,16 @@ DOC_START
 DOC_END
 
 NAME: wccp2_assignment_method
-TYPE: wccp2_method
+TYPE: wccp2_amethod
 LOC: Config.Wccp2.assignment_method
-DEFAULT: gre_hash
+DEFAULT: hash
 IFDEF: USE_WCCPv2
 DOC_START
 	WCCP2 allows the setting of methods to assign the WCCP hash
 	Valid values are as follows:
 
-	gre_hash - Hash assignment
-	l2_mask  - Mask assignment
+	hash - Hash assignment
+	mask  - Mask assignment
 
 	As a general rule, cisco routers support the hash assignment method
 	and cisco switches support the mask assignment method.
@@ -817,6 +817,9 @@ SQUIDCEXTERN char *strtokFile(void);
 SQUIDCEXTERN void parse_wccp2_method(int *v);
 SQUIDCEXTERN void free_wccp2_method(int *v);
 SQUIDCEXTERN void dump_wccp2_method(StoreEntry * e, const char *label, int v);
+SQUIDCEXTERN void parse_wccp2_amethod(int *v);
+SQUIDCEXTERN void free_wccp2_amethod(int *v);
+SQUIDCEXTERN void dump_wccp2_amethod(StoreEntry * e, const char *label, int v);
 
 SQUIDCEXTERN void parse_wccp2_service(void *v);
 SQUIDCEXTERN void free_wccp2_service(void *v);
@@ -115,8 +115,8 @@ static EVH wccp2AssignBuckets;
 #define WCCP2_FORWARDING_METHOD_GRE	WCCP2_METHOD_GRE
 #define WCCP2_FORWARDING_METHOD_L2	WCCP2_METHOD_L2
 
-#define WCCP2_ASSIGNMENT_METHOD_HASH	WCCP2_METHOD_GRE
-#define WCCP2_ASSIGNMENT_METHOD_MASK	WCCP2_METHOD_L2
+#define WCCP2_ASSIGNMENT_METHOD_HASH	0x00000001
+#define WCCP2_ASSIGNMENT_METHOD_MASK	0x00000002
 
 #define WCCP2_PACKET_RETURN_METHOD_GRE	WCCP2_METHOD_GRE
 #define WCCP2_PACKET_RETURN_METHOD_L2	WCCP2_METHOD_L2
@@ -2009,9 +2009,9 @@ parse_wccp2_method(int *method)
     }
 
     /* update configuration if its valid */
-    if (strcmp(t, "gre_hash") == 0 || strcmp(t, "1") == 0) {
+    if (strcmp(t, "gre") == 0 || strcmp(t, "1") == 0) {
         *method = WCCP2_METHOD_GRE;
-    } else if (strcmp(t, "l2_mask") == 0 || strcmp(t, "2") == 0) {
+    } else if (strcmp(t, "l2") == 0 || strcmp(t, "2") == 0) {
         *method = WCCP2_METHOD_L2;
     } else {
         debugs(80, DBG_CRITICAL, "wccp2_*_method: unknown setting, got " << t );
@@ -2024,11 +2024,11 @@ dump_wccp2_method(StoreEntry * e, const char *label, int v)
 {
     switch(v)
     {
-    case 1:
-        storeAppendPrintf(e, "%s gre_hash\n", label);
+    case WCCP2_METHOD_GRE:
+        storeAppendPrintf(e, "%s gre\n", label);
         break;
-    case 2:
-        storeAppendPrintf(e, "%s l2_mask\n", label);
+    case WCCP2_METHOD_L2:
+        storeAppendPrintf(e, "%s l2\n", label);
         break;
     default:
         debugs(80, DBG_CRITICAL, "FATAL: WCCPv2 configured method (" << v << ") is not valid.");
@@ -2040,6 +2040,54 @@ void
 free_wccp2_method(int *v)
 { }
 
+/**
+ * Parse wccp2_assignment_method option
+ * they can be '1' aka 'hash' or  '2' aka 'mask'
+ * repesenting the integer numeric of the same.
+ */
+void
+parse_wccp2_method(int *method)
+{
+    char *t;
+
+    /* Snarf the method */
+    if ((t = strtok(NULL, w_space)) == NULL) {
+        debugs(80, DBG_CRITICAL, "wccp2_assignment_method: missing setting.");
+        self_destruct();
+    }
+
+    /* update configuration if its valid */
+    if (strcmp(t, "hash") == 0 || strcmp(t, "1") == 0) {
+        *method = WCCP2_ASSIGNMENT_METHOD_HASH;
+    } else if (strcmp(t, "mask") == 0 || strcmp(t, "2") == 0) {
+        *method = WCCP2_ASSIGNMENT_METHOD_MASK;
+    } else {
+        debugs(80, DBG_CRITICAL, "wccp2_assignment_method: unknown setting, got " << t );
+        self_destruct();
+    }
+}
+
+void
+dump_wccp2_amethod(StoreEntry * e, const char *label, int v)
+{
+    switch(v)
+    {
+    case WCCP2_ASSIGNMENT_METHOD_HASH:
+        storeAppendPrintf(e, "%s hash\n", label);
+        break;
+    case WCCP2_ASSIGNMENT_METHOD_MASK:
+        storeAppendPrintf(e, "%s mask\n", label);
+        break;
+    default:
+        debugs(80, DBG_CRITICAL, "FATAL: WCCPv2 configured " << label << " (" << v << ") is not valid.");
+        self_destruct();
+    }
+}
+
+void
+free_wccp2_amethod(int *v)
+{ }
+
 /*
  * Format:
  *