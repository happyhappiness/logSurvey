@@ -152,10 +152,10 @@ HttpRequestMethod::AddExtension(const char *mstr)
 }
 
 void
-HttpRequestMethod::Configure(SquidConfig &Config)
+HttpRequestMethod::Configure(SquidConfig &cfg)
 {
 #if 0 /* extension methods obsolete now that we have METHOD_OTHER always enabled */
-    wordlist *w = Config.ext_methods;
+    wordlist *w = cfg.ext_methods;
 
     while (w) {
         char *s;
@@ -1375,17 +1375,17 @@ AuthDigestUserRequest::module_start(RH * handler, void *data)
     r->auth_user_request = this;
     AUTHUSERREQUESTLOCK(r->auth_user_request, "r");
     if (digestConfig.utf8) {
-        char user[1024];
-        latin1_to_utf8(user, sizeof(user), digest_user->username());
-        snprintf(buf, 8192, "\"%s\":\"%s\"\n", user, realm);
+        char userstr[1024];
+        latin1_to_utf8(userstr, sizeof(userstr), digest_user->username());
+        snprintf(buf, 8192, "\"%s\":\"%s\"\n", userstr, realm);
     } else {
         snprintf(buf, 8192, "\"%s\":\"%s\"\n", digest_user->username(), realm);
     }
 
     helperSubmit(digestauthenticators, buf, authenticateDigestHandleReply, r);
 }
 
-DigestUser::DigestUser (AuthConfig *config) : AuthUser (config), HA1created (0)
+DigestUser::DigestUser (AuthConfig *aConfig) : AuthUser (aConfig), HA1created (0)
 {}
 
 AuthUser *
@@ -301,7 +301,7 @@ AuthNegotiateUserRequest::addHeader(HttpReply * rep, int accel)
 }
 
 void
-AuthNegotiateConfig::fixHeader(AuthUserRequest *auth_user_request, HttpReply *rep, http_hdr_type type, HttpRequest * request)
+AuthNegotiateConfig::fixHeader(AuthUserRequest *auth_user_request, HttpReply *rep, http_hdr_type reqType, HttpRequest * request)
 {
     AuthNegotiateUserRequest *negotiate_request;
 
@@ -314,8 +314,8 @@ AuthNegotiateConfig::fixHeader(AuthUserRequest *auth_user_request, HttpReply *re
 
     /* New request, no user details */
     if (auth_user_request == NULL) {
-        debugs(29, 9, "AuthNegotiateConfig::fixHeader: Sending type:" << type << " header: 'Negotiate'");
-        httpHeaderPutStrf(&rep->header, type, "Negotiate");
+        debugs(29, 9, "AuthNegotiateConfig::fixHeader: Sending type:" << reqType << " header: 'Negotiate'");
+        httpHeaderPutStrf(&rep->header, reqType, "Negotiate");
 
         if (!keep_alive) {
             /* drop the connection */
@@ -342,27 +342,27 @@ AuthNegotiateConfig::fixHeader(AuthUserRequest *auth_user_request, HttpReply *re
              */
 
             if (negotiate_request->server_blob) {
-                debugs(29, 9, "authenticateNegotiateFixErrorHeader: Sending type:" << type << " header: 'Negotiate " << negotiate_request->server_blob << "'");
-                httpHeaderPutStrf(&rep->header, type, "Negotiate %s", negotiate_request->server_blob);
+                debugs(29, 9, "authenticateNegotiateFixErrorHeader: Sending type:" << reqType << " header: 'Negotiate " << negotiate_request->server_blob << "'");
+                httpHeaderPutStrf(&rep->header, reqType, "Negotiate %s", negotiate_request->server_blob);
                 safe_free(negotiate_request->server_blob);
             } else {
                 debugs(29, 9, "authenticateNegotiateFixErrorHeader: Connection authenticated");
-                httpHeaderPutStrf(&rep->header, type, "Negotiate");
+                httpHeaderPutStrf(&rep->header, reqType, "Negotiate");
             }
 
             break;
 
         case AUTHENTICATE_STATE_NONE:
             /* semantic change: do not drop the connection.
              * 2.5 implementation used to keep it open - Kinkie */
-            debugs(29, 9, "AuthNegotiateConfig::fixHeader: Sending type:" << type << " header: 'Negotiate'");
-            httpHeaderPutStrf(&rep->header, type, "Negotiate");
+            debugs(29, 9, "AuthNegotiateConfig::fixHeader: Sending type:" << reqType << " header: 'Negotiate'");
+            httpHeaderPutStrf(&rep->header, reqType, "Negotiate");
             break;
 
         case AUTHENTICATE_STATE_IN_PROGRESS:
             /* we're waiting for a response from the client. Pass it the blob */
-            debugs(29, 9, "AuthNegotiateConfig::fixHeader: Sending type:" << type << " header: 'Negotiate " << negotiate_request->server_blob << "'");
-            httpHeaderPutStrf(&rep->header, type, "Negotiate %s", negotiate_request->server_blob);
+            debugs(29, 9, "AuthNegotiateConfig::fixHeader: Sending type:" << reqType << " header: 'Negotiate " << negotiate_request->server_blob << "'");
+            httpHeaderPutStrf(&rep->header, reqType, "Negotiate %s", negotiate_request->server_blob);
             safe_free(negotiate_request->server_blob);
             break;
 
@@ -801,7 +801,7 @@ NegotiateUser::deleteSelf() const
     delete this;
 }
 
-NegotiateUser::NegotiateUser (AuthConfig *config) : AuthUser (config)
+NegotiateUser::NegotiateUser (AuthConfig *aConfig) : AuthUser (aConfig)
 {
     proxy_auth_list.head = proxy_auth_list.tail = NULL;
 }
@@ -288,9 +288,9 @@ CacheManager::Start(int fd, HttpRequest * request, StoreEntry * entry)
 
     if (CheckPassword(mgr) != 0) {
         /* build error message */
-        ErrorState *err;
+        ErrorState *errState;
         HttpReply *rep;
-        err = errorCon(ERR_CACHE_MGR_ACCESS_DENIED, HTTP_UNAUTHORIZED, request);
+        errState = errorCon(ERR_CACHE_MGR_ACCESS_DENIED, HTTP_UNAUTHORIZED, request);
         /* warn if user specified incorrect password */
 
         if (mgr->passwd)
@@ -304,9 +304,9 @@ CacheManager::Start(int fd, HttpRequest * request, StoreEntry * entry)
                    fd_table[fd].ipaddr << ": password needed for '" <<
                    mgr->action << "'" );
 
-        rep = err->BuildHttpReply();
+        rep = errState->BuildHttpReply();
 
-        errorStateFree(err);
+        errorStateFree(errState);
 
         /*
          * add Authenticate header, use 'action' as a realm because
@@ -947,13 +947,13 @@ clientReplyContext::purgeDoPurgeHead(StoreEntry *newEntry)
 void
 clientReplyContext::traceReply(clientStreamNode * node)
 {
-    clientStreamNode *next = (clientStreamNode *)node->node.next->data;
+    clientStreamNode *nextNode = (clientStreamNode *)node->node.next->data;
     StoreIOBuffer localTempBuffer;
     assert(http->request->max_forwards == 0);
     createStoreEntry(http->request->method, request_flags());
-    localTempBuffer.offset = next->readBuffer.offset + headers_sz;
-    localTempBuffer.length = next->readBuffer.length;
-    localTempBuffer.data = next->readBuffer.data;
+    localTempBuffer.offset = nextNode->readBuffer.offset + headers_sz;
+    localTempBuffer.length = nextNode->readBuffer.length;
+    localTempBuffer.data = nextNode->readBuffer.data;
     storeClientCopy(sc, http->storeEntry(),
                     localTempBuffer, SendMoreData, this);
     http->storeEntry()->releaseRequest();