@@ -179,3 +179,29 @@ void fixup_pack_header_footer(int pack_fd,
 	SHA1_Final(pack_file_sha1, &c);
 	write_or_die(pack_fd, pack_file_sha1, 20);
 }
+
+char *index_pack_lockfile(int ip_out)
+{
+	int len, s;
+	char packname[46];
+
+	/*
+	 * The first thing we expects from index-pack's output
+	 * is "pack\t%40s\n" or "keep\t%40s\n" (46 bytes) where
+	 * %40s is the newly created pack SHA1 name.  In the "keep"
+	 * case, we need it to remove the corresponding .keep file
+	 * later on.  If we don't get that then tough luck with it.
+	 */
+	for (len = 0;
+		 len < 46 && (s = xread(ip_out, packname+len, 46-len)) > 0;
+		 len += s);
+	if (len == 46 && packname[45] == '\n' &&
+		memcmp(packname, "keep\t", 5) == 0) {
+		char path[PATH_MAX];
+		packname[45] = 0;
+		snprintf(path, sizeof(path), "%s/pack/pack-%s.keep",
+			 get_object_directory(), packname + 5);
+		return xstrdup(path);
+	}
+	return NULL;
+}
@@ -59,6 +59,7 @@ extern const char *write_idx_file(const char *index_name, struct pack_idx_entry
 
 extern int verify_pack(struct packed_git *, int);
 extern void fixup_pack_header_footer(int, unsigned char *, const char *, uint32_t);
+extern char *index_pack_lockfile(int fd);
 
 #define PH_ERROR_EOF		(-1)
 #define PH_ERROR_PACK_SIGNATURE	(-2)
@@ -382,9 +382,8 @@ static const char *unpack(void)
 		}
 	} else {
 		const char *keeper[6];
-		int s, len, status;
+		int s, status;
 		char keep_arg[256];
-		char packname[46];
 		struct child_process ip;
 
 		s = sprintf(keep_arg, "--keep=receive-pack %i on ", getpid());
@@ -403,26 +402,7 @@ static const char *unpack(void)
 		ip.git_cmd = 1;
 		if (start_command(&ip))
 			return "index-pack fork failed";
-
-		/*
-		 * The first thing we expects from index-pack's output
-		 * is "pack\t%40s\n" or "keep\t%40s\n" (46 bytes) where
-		 * %40s is the newly created pack SHA1 name.  In the "keep"
-		 * case, we need it to remove the corresponding .keep file
-		 * later on.  If we don't get that then tough luck with it.
-		 */
-		for (len = 0;
-		     len < 46 && (s = xread(ip.out, packname+len, 46-len)) > 0;
-		     len += s);
-		if (len == 46 && packname[45] == '\n' &&
-		    memcmp(packname, "keep\t", 5) == 0) {
-			char path[PATH_MAX];
-			packname[45] = 0;
-			snprintf(path, sizeof(path), "%s/pack/pack-%s.keep",
-				 get_object_directory(), packname + 5);
-			pack_lockfile = xstrdup(path);
-		}
-
+		pack_lockfile = index_pack_lockfile(ip.out);
 		status = finish_command(&ip);
 		if (!status) {
 			reprepare_packed_git();