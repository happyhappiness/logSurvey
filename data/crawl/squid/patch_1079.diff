@@ -1,7 +1,7 @@
 #
 #  Makefile for the Squid Object Cache server
 #
-#  $Id: Makefile.am,v 1.135 2006/04/24 21:45:24 serassio Exp $
+#  $Id: Makefile.am,v 1.136 2006/04/25 07:13:33 robertc Exp $
 #
 #  Uncomment and customize the following to suit your needs:
 #
@@ -1086,10 +1086,15 @@ tests_testACLMaxUserIP_SOURCES= \
 	HttpHdrCc.cc \
 	HttpHdrSc.cc \
 	HttpHdrScTarget.cc \
+	mem_node.cc \
 	Packer.cc \
 	StatHist.cc \
+	stmem.cc \
 	String.cc \
 	tests/stub_cache_manager.cc \
+	tests/stub_comm.cc \
+	tests/stub_DelayId.cc \
+	tests/stub_MemObject.cc \
 	tests/stub_store.cc \
 	tests/testACLMaxUserIP.cc \
 	tests/testACLMaxUserIP.h \
@@ -1127,6 +1132,7 @@ tests_testBoilerplate_DEPENDENCIES = \
 HEADERS_TO_TEST = \
 	tests/testHeader_ACL.cc \
 	tests/testHeader_ConfigParser.cc \
+	tests/testHeader_client_side_request.cc \
 	tests/testHeader_dlink.cc \
 	tests/testHeader_HttpHeader.cc \
 	tests/testHeader_HttpHeaderRange.cc \
@@ -1142,6 +1148,7 @@ tests_testHeaders_DEPENDENCIES = \
 
 
 # TODO:mime.cc drags in HttpReply.cc
+# delay pools need client_side_request.cc
 STORE_TEST_SOURCES=\
 	$(TESTSOURCES) \
 	$(DELAY_POOL_SOURCE) \
@@ -1159,35 +1166,38 @@ STORE_TEST_SOURCES=\
 	tests/stub_acl.cc tests/stub_cache_cf.cc \
 	tests/stub_helper.cc cbdata.cc String.cc tests/stub_cache_manager.cc \
 	tests/stub_comm.cc \
+	tests/stub_client_side_request.cc \
 	tests/stub_http.cc \
 	mem_node.cc \
 	stmem.cc \
 	tests/stub_mime.cc \
-	tests/stub_store_client.cc \
-	tests/stub_tools.cc \
 	HttpHeaderTools.cc HttpHeader.cc acl.cc event.cc mem.cc \
 	acl_noncore.cc \
 	MemBuf.cc HttpHdrContRange.cc Packer.cc ACLChecklist.cc HttpHdrCc.cc HttpHdrSc.cc \
 	HttpHdrScTarget.cc url.cc ACLProxyAuth.cc ACLRegexData.cc ACLUserData.cc \
 	StatHist.cc HttpHdrRange.cc ETag.cc tests/stub_errorpage.cc \
 	tests/stub_HttpRequest.cc tests/stub_access_log.cc \
+	refresh.cc \
+	tests/stub_store_client.cc \
+	tests/stub_tools.cc \
 	wordlist.cc
 
 ## why so many sources? well httpHeaderTools requites ACLChecklist & friends.
 ## first line - what we are testing.
-tests_testStore_SOURCES= tests/testStore.cc \
-	tests/testStoreController.cc \
-	tests/testStoreHashIndex.cc \
+tests_testStore_SOURCES= \
+	tests/stub_store_swapout.cc \
 	tests/testMain.cc \
+	tests/stub_MemObject.cc \
+	tests/testStore.cc \
 	tests/testStore.h \
+	tests/testStoreController.cc \
 	tests/testStoreController.h \
+	tests/testStoreHashIndex.cc \
 	tests/testStoreHashIndex.h \
 	tests/TestSwapDir.cc \
 	tests/TestSwapDir.h \
-	tests/stub_store_swapout.cc \
 	tests/stub_fd.cc \
 	tests/stub_HttpReply.cc \
-	tests/stub_MemObject.cc \
 	$(STORE_TEST_SOURCES)
 
 tests_testStore_LDADD= \
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side_request.h,v 1.24 2006/03/02 22:47:07 wessels Exp $
+ * $Id: client_side_request.h,v 1.25 2006/04/25 07:13:33 robertc Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -31,13 +31,16 @@
  *
  */
 
+
 #ifndef SQUID_CLIENTSIDEREQUEST_H
 #define SQUID_CLIENTSIDEREQUEST_H
 
+#include "squid.h"
 #include "HttpHeader.h"
 #include "clientStream.h"
 #include "client_side.h"
 #include "AccessLogEntry.h"
+#include "dlink.h"
 
 #if ICAP_CLIENT
 #include "ICAP/ICAPServiceRep.h"
@@ -1,5 +1,5 @@
 /*
- * $Id: stub_MemObject.cc,v 1.3 2006/04/18 12:46:13 robertc Exp $
+ * $Id: stub_MemObject.cc,v 1.4 2006/04/25 07:13:33 robertc Exp $
  *
  * DEBUG: section 84    Helper process maintenance
  * AUTHOR: Robert Collins
@@ -151,3 +151,16 @@ MemObject::replaceHttpReply(HttpReply *newrep)
 {
     fatal ("Not implemented");
 }
+
+off_t
+MemObject::lowestMemReaderOffset() const
+{
+    fatal ("Not implemented");
+    return 0;
+}
+
+void
+MemObject::kickReads()
+{
+    fatal ("Not implemented");
+}
@@ -0,0 +1,40 @@
+/*
+ * $Id: stub_client_side_request.cc,v 1.1 2006/04/25 07:13:34 robertc Exp $
+ *
+ * AUTHOR: Robert Collins
+ *
+ * SQUID Web Proxy Cache          http://www.squid-cache.org/
+ * ----------------------------------------------------------
+ *
+ *  Squid is the result of efforts by numerous individuals from
+ *  the Internet community; see the CONTRIBUTORS file for full
+ *  details.   Many organizations have provided support for Squid's
+ *  development; see the SPONSORS file for full details.  Squid is
+ *  Copyrighted (C) 2001 by the Regents of the University of
+ *  California; see the COPYRIGHT file for full details.  Squid
+ *  incorporates software developed and/or copyrighted by other
+ *  sources; see the CREDITS file for full details.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
+ *
+ */
+
+#include "client_side_request.h"
+#include "Store.h"
+
+#ifndef _USE_INLINE_
+#include "client_side_request.cci"
+#endif
+
@@ -1,5 +1,5 @@
 /*
- * $Id: stub_errorpage.cc,v 1.1 2004/08/30 03:29:02 robertc Exp $
+ * $Id: stub_errorpage.cc,v 1.2 2006/04/25 07:13:34 robertc Exp $
  *
  * DEBUG: section 28    Access Control
  * AUTHOR: Robert Collins
@@ -41,6 +41,12 @@ errorReservePageId(const char *page_name)
     return err_type();
 }
 
+void
+errorAppendEntry(StoreEntry * entry, ErrorState * err)
+{
+    fatal("Not implemented");
+}
+
 /*
  * DO NOT MODIFY:
  * arch-tag: e4c72cfd-0b31-4497-90e6-0e3cda3b92b4
@@ -1,5 +1,5 @@
 /*
- * $Id: stub_store.cc,v 1.1 2004/08/30 03:29:02 robertc Exp $
+ * $Id: stub_store.cc,v 1.2 2006/04/25 07:13:34 robertc Exp $
  *
  * DEBUG: section 20    Storage Manager
  * AUTHOR: Robert Collins
@@ -33,6 +33,9 @@
  */
 
 #include "squid.h"
+#include "Store.h"
+
+StorePointer Store::CurrentRoot = NULL;
 
 extern "C" void
 #if STDC_HEADERS
@@ -69,7 +72,6 @@ extern "C" void
     fatal("Not implemented");
 }
 
-/*
- * DO NOT MODIFY:
- * arch-tag: f6d5bdd6-882b-4988-80d2-de26b759f4b9
- */
+#ifndef _USE_INLINE_
+#include "Store.cci"
+#endif
@@ -1,5 +1,5 @@
 /*
- * $Id: stub_store_swapout.cc,v 1.1 2005/01/03 16:08:27 robertc Exp $
+ * $Id: stub_store_swapout.cc,v 1.2 2006/04/25 07:13:34 robertc Exp $
  *
  * DEBUG: section 84    Helper process maintenance
  * AUTHOR: Robert Collins
@@ -47,6 +47,12 @@ storeSwapOutAble(const StoreEntry * e)
     return -1;
 }
 
+void
+storeSwapOut(StoreEntry * e)
+{
+    fatal ("Not implemented");
+}
+
 /* wrong stub file... */
 void
 storeUnlink(StoreEntry * e)
@@ -0,0 +1,4 @@
+/* This test tests that the header below can be processed on its own with
+ * no other #includes. Dont add any!
+ */
+#include "client_side_request.h"
@@ -4,6 +4,10 @@
 
 CPPUNIT_TEST_SUITE_REGISTRATION( testStore );
 
+/* subclass of Store to allow testing of methods without having all the
+ * other components live
+ */
+
 class TestStore : public Store
 {
 