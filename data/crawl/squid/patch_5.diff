----++++include/unitTestMain.h
@@ -22,7 +22,7 @@
 #include &lt;cppunit/TestRunner.h&gt;
 
 int
-main( int argc, char* argv[] )
+main(int, char *[])
 {
 #if ENABLE_DEBUG_SECTION
     Debug::Levels[ENABLE_DEBUG_SECTION] = 99;
----++++src/tests/stub_MemBuf.cc
@@ -14,18 +14,18 @@
 
 mb_size_t MemBuf::spaceSize() const STUB_RETVAL(0)
 mb_size_t MemBuf::potentialSpaceSize() const STUB_RETVAL(0)
-void MemBuf::consume(mb_size_t sz) STUB
-void MemBuf::appended(mb_size_t sz) STUB
-void MemBuf::truncate(mb_size_t sz) STUB
+void MemBuf::consume(mb_size_t) STUB
+void MemBuf::appended(mb_size_t) STUB
+void MemBuf::truncate(mb_size_t) STUB
 void MemBuf::terminate() STUB
-void MemBuf::init(mb_size_t szInit, mb_size_t szMax) STUB
+void MemBuf::init(mb_size_t, mb_size_t) STUB
 void MemBuf::init() STUB
 void MemBuf::clean() STUB
 void MemBuf::reset() STUB
 int MemBuf::isNull() const STUB_RETVAL(1)
 FREE *MemBuf::freeFunc() STUB_RETVAL(NULL)
 void MemBuf::append(const char *, int) STUB
-void MemBuf::vappendf(const char *fmt, va_list ap) STUB
+void MemBuf::vappendf(const char *, va_list) STUB
 
-void memBufReport(MemBuf * mb) STUB
+void memBufReport(MemBuf *) STUB
 
----++++src/tests/stub_SBuf.cc
@@ -23,45 +23,45 @@ std::ostream&amp; SBufStats::dump(std::ostream &amp;os) const STUB_RETVAL(os)
 SBufStats&amp; SBufStats::operator +=(const SBufStats&amp;) STUB_RETVAL(*this)
 
 SBuf::SBuf() {}
-SBuf::SBuf(const SBuf &amp;S) {}
-SBuf::SBuf(const char *S, size_type n) {}
-SBuf::SBuf(const char *S) {}
-SBuf::SBuf(const std::string &amp;s) {}
+SBuf::SBuf(const SBuf &amp;) {}
+SBuf::SBuf(const char *, size_type) {}
+SBuf::SBuf(const char *) {}
+SBuf::SBuf(const std::string &amp;) {}
 SBuf::~SBuf() {}
-SBuf&amp; SBuf::assign(const SBuf &amp;S) STUB_RETVAL(*this)
-SBuf&amp; SBuf::assign(const char *S, size_type n) STUB_RETVAL(*this)
+SBuf&amp; SBuf::assign(const SBuf &amp;) STUB_RETVAL(*this)
+SBuf&amp; SBuf::assign(const char *, size_type) STUB_RETVAL(*this)
 void clear() STUB
-SBuf&amp; SBuf::append(const SBuf &amp; S) STUB_RETVAL(*this)
-SBuf&amp; SBuf::append(const char * S, size_type Ssize) STUB_RETVAL(*this)
-SBuf&amp; Printf(const char *fmt, ...);
-SBuf&amp; SBuf::appendf(const char *fmt, ...) STUB_RETVAL(*this)
-SBuf&amp; SBuf::vappendf(const char *fmt, va_list vargs) STUB_RETVAL(*this)
+SBuf&amp; SBuf::append(const SBuf &amp;) STUB_RETVAL(*this)
+SBuf&amp; SBuf::append(const char *, size_type) STUB_RETVAL(*this)
+SBuf&amp; Printf(const char *, ...);
+SBuf&amp; SBuf::appendf(const char *, ...) STUB_RETVAL(*this)
+SBuf&amp; SBuf::vappendf(const char *, va_list) STUB_RETVAL(*this)
 std::ostream&amp; SBuf::print(std::ostream &amp;os) const STUB_RETVAL(os)
 std::ostream&amp; SBuf::dump(std::ostream &amp;os) const STUB_RETVAL(os)
-void SBuf::setAt(size_type pos, char toset) STUB
-int SBuf::compare(const SBuf &amp;S, const SBufCaseSensitive isCaseSensitive, const size_type n) const STUB_RETVAL(-1)
-int SBuf::compare(const char *s, const SBufCaseSensitive isCaseSensitive, const size_type n) const STUB_RETVAL(-1)
-bool SBuf::startsWith(const SBuf &amp;S, const SBufCaseSensitive isCaseSensitive) const STUB_RETVAL(false)
-bool SBuf::operator ==(const SBuf &amp; S) const STUB_RETVAL(false)
-bool SBuf::operator !=(const SBuf &amp; S) const STUB_RETVAL(false)
-SBuf SBuf::consume(size_type n) STUB_RETVAL(*this)
+void SBuf::setAt(size_type, char) STUB
+int SBuf::compare(const SBuf &amp;, const SBufCaseSensitive, const size_type) const STUB_RETVAL(-1)
+int SBuf::compare(const char *, const SBufCaseSensitive, const size_type) const STUB_RETVAL(-1)
+bool SBuf::startsWith(const SBuf &amp;, const SBufCaseSensitive) const STUB_RETVAL(false)
+bool SBuf::operator ==(const SBuf &amp;) const STUB_RETVAL(false)
+bool SBuf::operator !=(const SBuf &amp;) const STUB_RETVAL(false)
+SBuf SBuf::consume(size_type) STUB_RETVAL(*this)
 const SBufStats&amp; SBuf::GetStats() STUB_RETVAL(SBuf::stats)
-SBuf::size_type SBuf::copy(char *dest, size_type n) const STUB_RETVAL(0)
+SBuf::size_type SBuf::copy(char *, size_type) const STUB_RETVAL(0)
 const char* SBuf::rawContent() const STUB_RETVAL(NULL)
-char *SBuf::rawSpace(size_type minSize) STUB_RETVAL(NULL)
-void SBuf::forceSize(size_type newSize) STUB
+char *SBuf::rawSpace(size_type) STUB_RETVAL(NULL)
+void SBuf::forceSize(size_type) STUB
 const char* SBuf::c_str() STUB_RETVAL(&quot;&quot;)
-void SBuf::reserveCapacity(size_type minCapacity) STUB
+void SBuf::reserveCapacity(size_type) STUB
 SBuf::size_type SBuf::reserve(const SBufReservationRequirements &amp;) STUB_RETVAL(0)
-SBuf&amp; SBuf::chop(size_type pos, size_type n) STUB_RETVAL(*this)
-SBuf&amp; SBuf::trim(const SBuf &amp;toRemove, bool atBeginning, bool atEnd) STUB_RETVAL(*this)
-SBuf SBuf::substr(size_type pos, size_type n) const STUB_RETVAL(*this)
-SBuf::size_type SBuf::find(char c, size_type startPos) const STUB_RETVAL(SBuf::npos)
-SBuf::size_type SBuf::find(const SBuf &amp; str, size_type startPos) const STUB_RETVAL(SBuf::npos)
-SBuf::size_type SBuf::rfind(char c, size_type endPos) const STUB_RETVAL(SBuf::npos)
-SBuf::size_type SBuf::rfind(const SBuf &amp;str, size_type endPos) const STUB_RETVAL(SBuf::npos)
-SBuf::size_type SBuf::findFirstOf(const CharacterSet &amp;set, size_type startPos) const STUB_RETVAL(SBuf::npos)
-SBuf::size_type SBuf::findFirstNotOf(const CharacterSet &amp;set, size_type startPos) const STUB_RETVAL(SBuf::npos)
+SBuf&amp; SBuf::chop(size_type, size_type) STUB_RETVAL(*this)
+SBuf&amp; SBuf::trim(const SBuf &amp;, bool, bool) STUB_RETVAL(*this)
+SBuf SBuf::substr(size_type, size_type) const STUB_RETVAL(*this)
+SBuf::size_type SBuf::find(char, size_type) const STUB_RETVAL(SBuf::npos)
+SBuf::size_type SBuf::find(const SBuf &amp;, size_type) const STUB_RETVAL(SBuf::npos)
+SBuf::size_type SBuf::rfind(char, size_type) const STUB_RETVAL(SBuf::npos)
+SBuf::size_type SBuf::rfind(const SBuf &amp;, size_type) const STUB_RETVAL(SBuf::npos)
+SBuf::size_type SBuf::findFirstOf(const CharacterSet &amp;, size_type) const STUB_RETVAL(SBuf::npos)
+SBuf::size_type SBuf::findFirstNotOf(const CharacterSet &amp;, size_type) const STUB_RETVAL(SBuf::npos)
 void SBuf::toLower() STUB
 void SBuf::toUpper() STUB
 
----++++src/tests/stub_cbdata.cc
@@ -13,24 +13,23 @@
 #include &quot;tests/STUB.h&quot;
 
 void cbdataRegisterWithCacheManager(void) STUB
-void *cbdataInternalAlloc(cbdata_type type, const char *, int sz) {
-//STUB_RETVAL(NULL)
+void *cbdataInternalAlloc(cbdata_type, const char *, int sz) {
     return xcalloc(1, sz);
 }
 void *cbdataInternalFree(void *p, const char *, int) {
     xfree(p);
     return nullptr;
 }
 #if USE_CBDATA_DEBUG
-void cbdataInternalLockDbg(const void *p, const char *, int) STUB
-void cbdataInternalUnlockDbg(const void *p, const char *, int) STUB
-int cbdataInternalReferenceDoneValidDbg(void **p, void **tp, const char *, int) STUB_RETVAL(0)
+void cbdataInternalLockDbg(const void *, const char *, int) STUB
+void cbdataInternalUnlockDbg(const void *, const char *, int) STUB
+int cbdataInternalReferenceDoneValidDbg(void **, void **, const char *, int) STUB_RETVAL(0)
 #else
-void cbdataInternalLock(const void *p) STUB
-void cbdataInternalUnlock(const void *p) STUB
-int cbdataInternalReferenceDoneValid(void **p, void **tp) STUB_RETVAL(0)
+void cbdataInternalLock(const void *) STUB
+void cbdataInternalUnlock(const void *) STUB
+int cbdataInternalReferenceDoneValid(void **, void **) STUB_RETVAL(0)
 #endif
 
-int cbdataReferenceValid(const void *p) STUB_RETVAL(0)
+int cbdataReferenceValid(const void *) STUB_RETVAL(0)
 cbdata_type cbdataInternalAddType(cbdata_type, const char *, int) STUB_RETVAL(CBDATA_UNKNOWN)
 
----++++src/tests/stub_fatal.cc
@@ -11,9 +11,9 @@
 #define STUB_API &quot;fatal.cc&quot;
 #include &quot;tests/STUB.h&quot;
 
-void fatal(const char *message) STUB
-void fatal_common(const char *message) STUB
-void fatalf(const char *fmt,...) STUB
-void fatalvf(const char *fmt, va_list args) STUB
-void fatal_dump(const char *message) STUB
+void fatal(const char *) STUB
+void fatal_common(const char *) STUB
+void fatalf(const char *, ...) STUB
+void fatalvf(const char *, va_list) STUB
+void fatal_dump(const char *) STUB
 
----++++src/tests/stub_libmem.cc
@@ -17,7 +17,7 @@ void Mem::AllocatorProxy::freeOne(void *address) {xfree(address);}
 int Mem::AllocatorProxy::inUseCount() const {return 0;}
 //static MemPoolMeter tmpMemPoolMeter;
 //MemPoolMeter const &amp;Mem::AllocatorProxy::getMeter() const STUB_RETVAL(tmpMemPoolMeter)
-int Mem::AllocatorProxy::getStats(MemPoolStats * stats) STUB_RETVAL(0)
+int Mem::AllocatorProxy::getStats(MemPoolStats *) STUB_RETVAL(0)
 
 #include &quot;mem/forward.h&quot;
 void Mem::Init() STUB_NOP
@@ -32,7 +32,7 @@ void memInitModule(void) STUB
 void memCleanModule(void) STUB
 void memConfigure(void) STUB
 
-void * memAllocate(mem_type type)
+void * memAllocate(mem_type)
 {
     // let&#39;s waste plenty of memory. This should cover any possible need
     return xmalloc(64*1024);
@@ -81,29 +81,29 @@ MemPools::MemPools() :
     defaultIsChunked(false)
 {}
 void MemPools::flushMeters() STUB
-MemImplementingAllocator * MemPools::create(const char *label, size_t obj_size) STUB_RETVAL(NULL);
-void MemPools::setIdleLimit(ssize_t new_idle_limit) STUB
+MemImplementingAllocator * MemPools::create(const char *, size_t) STUB_RETVAL(nullptr);
+void MemPools::setIdleLimit(ssize_t) STUB
 ssize_t MemPools::idleLimit() const STUB_RETVAL(0)
-void MemPools::clean(time_t maxage) STUB
+void MemPools::clean(time_t) STUB
 void MemPools::setDefaultPoolChunking(bool const &amp;) STUB
 
 //MemAllocator::MemAllocator(char const *aLabel);
-char const *MemAllocator::objectType() const STUB_RETVAL(NULL)
+char const *MemAllocator::objectType() const STUB_RETVAL(nullptr)
 int MemAllocator::inUseCount() STUB_RETVAL(0)
 size_t MemAllocator::RoundedSize(size_t minSize) STUB_RETVAL(minSize)
 
-//MemImplementingAllocator::MemImplementingAllocator(char const *aLabel, size_t aSize) STUB_NOP
+//MemImplementingAllocator::MemImplementingAllocator(char const *, size_t) STUB_NOP
 //MemImplementingAllocator::~MemImplementingAllocator();
 MemPoolMeter const &amp;MemImplementingAllocator::getMeter() const STUB_RETSTATREF(MemPoolMeter)
 MemPoolMeter &amp;MemImplementingAllocator::getMeter() STUB_RETSTATREF(MemPoolMeter)
 void MemImplementingAllocator::flushMetersFull() STUB
 void MemImplementingAllocator::flushMeters() STUB
-void *MemImplementingAllocator::alloc() STUB_RETVAL(NULL)
+void *MemImplementingAllocator::alloc() STUB_RETVAL(nullptr)
 void MemImplementingAllocator::freeOne(void *) STUB
 
-MemPoolIterator * memPoolIterate(void) STUB_RETVAL(NULL)
-MemImplementingAllocator * memPoolIterateNext(MemPoolIterator * iter) STUB_RETVAL(NULL)
-void memPoolIterateDone(MemPoolIterator ** iter) STUB
-int memPoolGetGlobalStats(MemPoolGlobalStats * stats) STUB_RETVAL(0)
+MemPoolIterator * memPoolIterate(void) STUB_RETVAL(nullptr)
+MemImplementingAllocator * memPoolIterateNext(MemPoolIterator *) STUB_RETVAL(nullptr)
+void memPoolIterateDone(MemPoolIterator **) STUB
+int memPoolGetGlobalStats(MemPoolGlobalStats *) STUB_RETVAL(0)
 int memPoolsTotalAllocated(void) STUB_RETVAL(0)
 
----++++src/tests/stub_tools.cc
@@ -19,16 +19,16 @@ void releaseServerSockets(void) STUB_NOP
 char * dead_msg(void) STUB_RETVAL(NULL)
 void mail_warranty(void) STUB
 void dumpMallocStats(void) STUB
-void squid_getrusage(struct rusage *r) STUB
-double rusage_cputime(struct rusage *r) STUB_RETVAL(0)
-int rusage_maxrss(struct rusage *r) STUB_RETVAL(0)
-int rusage_pagefaults(struct rusage *r) STUB_RETVAL(0)
+void squid_getrusage(struct rusage *) STUB
+double rusage_cputime(struct rusage *) STUB_RETVAL(0)
+int rusage_maxrss(struct rusage *) STUB_RETVAL(0)
+int rusage_pagefaults(struct rusage *) STUB_RETVAL(0)
 void PrintRusage(void) STUB
-void death(int sig) STUB
-void BroadcastSignalIfAny(int&amp; sig) STUB
-void sigusr2_handle(int sig) STUB
-void debug_trap(const char *message) STUB
-void sig_child(int sig) STUB
+void death(int) STUB
+void BroadcastSignalIfAny(int &amp;) STUB
+void sigusr2_handle(int) STUB
+void debug_trap(const char *) STUB
+void sig_child(int) STUB
 const char * getMyHostname(void) STUB_RETVAL(NULL)
 const char * uniqueHostname(void) STUB_RETVAL(NULL)
 void leave_suid(void) STUB_NOP
@@ -63,16 +63,16 @@ int NumberOfKids() STUB_RETVAL(0)
 //SBuf ProcessRoles() STUB_RETVAL(SBuf())
 void setMaxFD(void) STUB
 void setSystemLimits(void) STUB
-void squid_signal(int sig, SIGHDLR * func, int flags) STUB
+void squid_signal(int, SIGHDLR *, int) STUB
 void logsFlush(void) STUB
-void debugObj(int section, int level, const char *label, void *obj, ObjPackMethod pm) STUB
+void debugObj(int, int, const char *, void *, ObjPackMethod) STUB
 void parseEtcHosts(void) STUB
 int getMyPort(void) STUB_RETVAL(0)
-void setUmask(mode_t mask) STUB
-void strwordquote(MemBuf * mb, const char *str) STUB
+void setUmask(mode_t) STUB
+void strwordquote(MemBuf *, const char *) STUB
 void keepCapabilities(void) STUB
-void restoreCapabilities(bool keep) STUB
-pid_t WaitForOnePid(pid_t pid, PidStatus &amp;status, int flags) STUB_RETVAL(0)
+void restoreCapabilities(bool) STUB
+pid_t WaitForOnePid(pid_t, PidStatus &amp;, int) STUB_RETVAL(0)
 
 #if _SQUID_WINDOWS_
 SBuf WindowsErrorMessage(DWORD) STUB_RETVAL(SBuf())
----++++test-suite/VirtualDeleteOperator.cc
@@ -91,7 +91,7 @@ ChildVirtual::operator delete(void *address)
 ChildVirtual::~ChildVirtual() {}
 
 int
-main(int argc, char **argv)
+main(int, char *[])
 {
     assert (BaseVirtual::Calls.news() == 0);
     assert (BaseVirtual::Calls.deletes() == 0);
@@ -107,8 +107,8 @@ main(int argc, char **argv)
     assert (BaseVirtual::Calls.deletes() == 0);
     assert (ChildVirtual::Calls.news() == 1);
     assert (ChildVirtual::Calls.deletes() == 1);
-    // deleting NULL works.
-    BaseVirtual::DeleteABase(NULL);
+    // deleting nullptr works.
+    BaseVirtual::DeleteABase(nullptr);
     assert (BaseVirtual::Calls.news() == 0);
     assert (BaseVirtual::Calls.deletes() == 0);
     assert (ChildVirtual::Calls.news() == 1);
----++++test-suite/debug.cc
@@ -46,7 +46,7 @@ StreamTest::getACString() const
 }
 
 int
-main(int argc, char **argv)
+main(int, char *[])
 {
     Debug::Levels[1] = 8;
     debugs (1,1,&quot;test&quot; &lt;&lt; &quot;string&quot;);
----++++test-suite/mem_hdr_test.cc
@@ -17,8 +17,9 @@
 #include &lt;iostream&gt;
 #include &lt;sstream&gt;
 
-/*For  a reason required on some platforms */
-unsigned int TextException::FileNameHash(const char *fname)
+// required on some platforms
+unsigned int
+TextException::FileNameHash(const char *)
 {
     return 0;
 }
@@ -99,7 +100,7 @@ testHdrVisit()
 }
 
 int
-main(int argc, char **argv)
+main(int, char *[])
 {
     assert (mem_node::InUseCount() == 0);
     testLowAndHigh();
----++++test-suite/mem_node_test.cc
@@ -13,18 +13,8 @@
 
 #include &lt;iostream&gt;
 
-#if 0
-/* TODO: put this in a libTest */
-void
-xassert(const char *msg, const char *file, int line)
-{
-    std::cout &lt;&lt; &quot;Assertion failed: (&quot; &lt;&lt; msg &lt;&lt; &quot;) at &quot; &lt;&lt; file &lt;&lt; &quot;:&quot; &lt;&lt; line &lt;&lt; std::endl;
-    exit(EXIT_FAILURE);
-}
-#endif
-
 int
-main(int argc, char **argv)
+main(int, char *[])
 {
     mem_node *aNode = new mem_node(0);
     assert (aNode);
----++++test-suite/splay.cc
@@ -69,7 +69,7 @@ SplayCheck::BeginWalk()
 }
 
 void
-SplayCheck::WalkVoid(void *const &amp;node, void *state)
+SplayCheck::WalkVoid(void *const &amp;node, void *)
 {
     intnode *A = (intnode *)node;
     CheckNode(*A);
@@ -92,13 +92,13 @@ SplayCheck::CheckNode(intnode const &amp;A)
 }
 
 void
-SplayCheck::WalkNode (intnode *const &amp;a, void *state)
+SplayCheck::WalkNode (intnode *const &amp;a, void *)
 {
     CheckNode (*a);
 }
 
 void
-SplayCheck::WalkNodeRef (intnode const &amp;a, void *state)
+SplayCheck::WalkNodeRef (intnode const &amp;a, void *)
 {
     CheckNode (a);
 }
@@ -127,7 +127,7 @@ destintref (intnode &amp;)
 {}
 
 int
-main(int argc, char *argv[])
+main(int, char *[])
 {
     std::mt19937 generator;
     xuniform_int_distribution&lt;int&gt; distribution;
----++++test-suite/syntheticoperators.cc
@@ -151,7 +151,7 @@ CheckSyntheticWorks()
 }
 
 int
-main(int argc, char **argv)
+main(int, char *[])
 {
     CheckHasExplicitWorks();
     CheckSyntheticWorks();
----++++GitHub