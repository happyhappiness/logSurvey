url,date,title,changes,file_name
https://github.com/squid-cache/squid/commit/9a03c44bb897241473997e57d33656add9f8ee71,01 Mar 2018,"Use va_copy() on all platforms; fixed a dangerous low-level bug (#160)

To improve cross-compilation support and to simplify code, rely on C++11
cstdarg header instead of ./configure-time va_copy() detection.

Using ./configure-time detection for va_copy() is dangerous because when
it does not work (e.g., during a poorly configured cross-compilation
attempt), Squid may crash if va_copy() was needed but was not detected.

See also: Bug 4821 and bug 753.

Also found and fixed a low-level bug: StoreEntry::vappendf() was not
using va_copy() because store.cc lacked VA_COPY #defines. The affected
code (900+ callers!) is used for cache manager responses and Gopher
gateway response compilation. If any of those calls required a buffer
larger than 4KB, the lack of those va_copy() calls could lead to crashes
and/or data corruption issues on platforms where va_copy() is required.",114,data/crawl/squid/patch_0.diff
https://github.com/squid-cache/squid/commit/51e09c08a5e6c582e7d93af99a8f2cfcb14ea9e6,01 Feb 2018,"TLS: GnuTLS implementation for listening ports and client connections (#81)

Move the http_port cert= and key= options logic to libsecurity and add GnuTLS implementation for PEM file loading. Also adds some extra debugging to clarify listening port initialization problems with the PEM files.

Enable most of the http(s)_port listening socket logic to always build except where OpenSSL-specific dependency still exists. It may seem reasonable to leave it optionally excluded for minimal builds, however a minimal proxy that does not support HTTPS in any way is increasingly useless in the modern web so preference is given to building the generic TLS related code. This also simplifies the required testing to detect code portability issues.

GnuTLS implementation is added for https_port configured with static cert=/key= parameters and the resulting TLS handshake behaviour. Squid built with GnuTLS can now act as useful parent proxies behind a SSL-Bump'ing frontend or for other clients which require a TLS explicit proxy.

Also fixes the definitions for the CertPointer and PrivateKeyPointer.",769,data/crawl/squid/patch_1.diff
https://github.com/squid-cache/squid/commit/799b66d1964c2ad925f9e6cb71b1c287da3e16d7,18 Jan 2018,"ESI: remove custom parser (#128)


Alex Rousskov:
  let's consider removing the custom ESI parser from Squid. It is of
terrible quality and ""nobody"" is testing ESI code when things change. Is
the CVE risk worth supporting few platforms that do not have the right
parser libraries?

* Fixed configure.ac tests for ESI libraries",491,data/crawl/squid/patch_2.diff
https://github.com/squid-cache/squid/commit/4d27d0ab7be057352a6a5d552f85a4181f1153a5,17 Nov 2017,"Relay peer CONNECT error status line and headers to users (#80)

Automated agents and human users (or their support staff!) often benefit
from knowing what went wrong. Dropping such details is a bad default.
For example, automation may rely on receiving the original status code.

Our CVE-2015-5400 fix (74f35ca) was too aggressive -- it hid all peer
errors behind a generic 502 (Bad Gateway) response. Pass-through peer
authentication errors were later (971003b) exposed again, but our CVE
fix intent was _not_ to hide _any_ peer errors in the first place! The
intent was to close the connection after delivering the error response.
Hiding peer errors was an (unfortunate) implementation choice.

It could be argued that some peer errors should not be relayed, but
since Squid successfully relayed all peer errors prior to 74f35ca and
continues to relay all non-CONNECT peer errors today, discriminating
peer errors is a separate (and possibly unnecessary) feature.

Ideally, Squid should mangle and relay the whole error message (instead
of sending small original headers). Squid should also relay 1xx control
messages while waiting for the final response. Unfortunately, doing so
properly, without reopening CVE-2015-5400 or duplicating a lot of
complex code, is a huge project. This small change fixes the most acute
manifestation of the ""hiding errors from users"" problem. The rest is a
long-term TODO.",12,data/crawl/squid/patch_3.diff
https://github.com/squid-cache/squid/commit/cf487124163a9a460ad78f5a482a5fd90fcf9cce,02 Nov 2017,"Move TLS/SSL http_port config values to libsecurity (#51)

These are most of the minor shuffling prerequisite for the proposal to allow generate-host-certificates to set a CA filename. These are required in libsecurity in order to prevent circular dependencies between libsecurity, libssl and libanyp.

Also contains some improvements to how configuration errors are displayed for these affected settings and some bugs fixed where the configured values were handled incorrectly.",608,data/crawl/squid/patch_4.diff
https://github.com/squid-cache/squid/commit/4ec218d55249c6edd2a4fe4511212a721c98394b,22 Jul 2017,"Cleaned up net_db structures. Made Coverity happier? (#27)

Fixes false positive by Coverity Scan. Issue 1415048 (RESOURCE_LEAK)?

No runtime testing.",22,data/crawl/squid/patch_5.diff
https://github.com/squid-cache/squid/commit/fd9c47d1075b4b01e9a283c2fd67c5958b5060c5,12 Jul 2017,"Happy Eyeballs: Deliver DNS resolution results to peer selection ASAP.

To make eyeballs happy, DNS code must deliver each lookup result to the
IP cache and, ultimately, to upper layers of ipcache_nbgethostbyname()
callers. This requires changing two interfaces:

1. between the DNS and the IP cache (the IDNSCB callback);
2. between the IP cache and peer selection code (the IPH callback).

The IDNSCB callback is now called after every usable A and AAAA lookup
instead of waiting for both answers. The IPH callback now has a sister
API for incremental delivery: The Dns::IpReceiver class.

To safely handle incremental delivery of IP addresses to the IP cache, I
upgraded ipcache_addrs from an equivalent of a C POD to a C++ CachedIps
container. The encapsulation allowed me to clearly separate the two IP
cache iteration APIs:

* All IPs (used by, e.g., ACL matching and host verification code) and
* just the ""good"" IPs (used only for peer selection for now).

CachedIps stores IPs together with their good/bad status in a single
std::vector. Eventually, the CachedIp element may be extended to store
TTL. The following implementation alternatives were considered and
rejected (at least for now) while optimizing for the ""a few (and usually
just one), usually good IPs"" case:

* Using std::list or std::deque storage would consume more RAM[1] for
  the common case of one (or few) IPs per name and slowed down IPs
  iteration code.
  [1] http://info.prelert.com/blog/stl-container-memory-usage
* Separating IP from its status, like the old code did, would make it
  easier to mismatch IP and its status, make it harder to add more
  metadata like per-IP TTL, and only save memory when storing many IPs
  per name.

The drawback of the selected ""all IP-related info in one place"" approach
is that we need smart iterators (e.g., the added GoodIpsIterator) or a
visitor API.

I added a new interface class for the incremental notification about
newly found IP addresses (Dns::IpReceiver) instead of adding second
IPH-like function pointer because we cannot safely call cbdata-protected
functions multiple times for the same cbdata object -- only
cbdataReferenceValidDone() dereferences the opaque pointer properly, and
that function cannot be called repeatedly. CbcPointer solves that
problem (but requires a class). Class methods also allow for more
precise notifications, with fewer ifs in the recipient code.

The new IpCacheLookupForwarder class hides the differences between the
old C-style IPH callbacks and the new Dns::IpReceiver. Eventually, we
may be able to move all lookup-specific data/methods into
IpCacheLookupForwarder, away from the IP cache entries where that info
is useless at best.

mgr:ipcache no longer reports ""IPcache Entries In Use"" but that info is
now available as ""cbdata ipcache_entry"" row in mgr:mem.

Do not cache IPv6 /etc/hosts addresses when IPv6 support is disabled.
This change simplified code, made it more consistent (we did not cache
AAAA records), and fixed ipcacheCycleAddr() and ipcacheMarkAllGood()
that were clearing supposed-to-be-permanent ""bad (IPv6 disabled)"" marks.

Also fixed two DNS TTL bugs. Squid now uses minimum TTL among all used
DNS records[2]. Old ipcacheParse() was trying to do the same but:
* could overwrite a zero TTL with a positive value
* took into account TTLs from unused record types (e.g., CNAME).
[2] Subject to *_dns_ttl limits in squid.conf, as before.

Also fixed ""delete xstrdup"" (i.e., malloc()ed) pointer in bracketed IP
parsing code (now moved to Ip::Address::FromHost()).

Also prohibited duplicate addresses from entering the IP cache. Allowing
duplicates may be useful for various hacks, but the IP cache code
assumes that cached IPs are unique and fails to mark bad repeated IPs.

Also fixed sending Squid Announcements to unsupported/disabled IPv6
addresses discovered via /etc/hosts.

Also slightly optimized dstdomain when dealing with IP-based host names:
The code now skips unnecessary Ip::Address to ipcache_addrs conversion.
This simplification may also help remove the ipcacheCheckNumeric() hack.
The bracketed IP parsing code was moved to Ip::Address::fromHost(). It
still needs a lot of love.",1298,data/crawl/squid/patch_6.diff
https://github.com/squid-cache/squid/commit/621f4299cbf34e3daf591d314cf1c14496d5f0d1,10 Jul 2017,"TLS: move X509_NAME_STACK_Pointer to Security::ServerOptions

This Pointer is only used by the Server port options.

No GnuTLS support added in this patch, just a straight shuffle
of the OpenSSL code.",182,data/crawl/squid/patch_7.diff
https://github.com/squid-cache/squid/commit/72ed59794689bb3006d1ea6f20e060ed8259e3d3,08 Jul 2017,Cleanup: remove many unused-parameter warnings from tests and stubs,194,data/crawl/squid/patch_8.diff
https://github.com/squid-cache/squid/commit/37cb257b0ca7224c1b556c205f2a9c25a2acc1a3,08 Jul 2017,Validate mime icon URL before allocating store entries,10,data/crawl/squid/patch_9.diff
https://github.com/squid-cache/squid/commit/9e167fa2396d9469017d2ff4c5a3ded5a5b58317,18 Jun 2017,"Cleanup: remove many whitespace typos

... caught by astyle 2.06 but ignored by 2.04",158,data/crawl/squid/patch_10.diff
https://github.com/squid-cache/squid/commit/52af54dd4e55d9241339d3851c92191463ef4524,17 Jun 2017,SourceFormat Enforcement,160,data/crawl/squid/patch_11.diff
https://github.com/squid-cache/squid/commit/4eac3407573794dec7f40816dc1f1f3139c2e63e,12 Jun 2017,"Support for --long-acl-options

The old single-letter ACL ""flags"" code was refactored to support long option
names (with option-specific value types) without significant
per-ACL-object performance/RAM overheads and without creating a global
registry for all possible options. This refactoring (unexpectedly)
resulted in removal of a lot of unreliable static initialization code.

Refactoring fixed ACL flags parsing code that was dangerously misinterpreting
-i and +i flags in several contexts. For example, each of the three cases
below was misinterpreted as if three domains were configured (e.g., ""+i"",
""-z"", and ""example.com"") on each line instead of one domain (""example.com""):

        acl parsedAsThreeDomains dstdomain +i -i .example.com
        acl parsedAsThreeDomains dstdomain -i +i .example.com
        acl parsedAsThreeDomains dstdomain +i -z .example.com

TODO: Finish ACL::clone() removal. Then consider removing any unused
ACLData::clone() and associated ACL/ACLData copying methods.

This is a Measurement Factory project.",2858,data/crawl/squid/patch_12.diff
https://github.com/squid-cache/squid/commit/89d897e150e431e130d6e9710834b4e475411068,07 Jun 2017,"Improve config parsing of logformat definitions

Squid has for some time ignored custom definitions using the same name
as internally defined formats. And overwritten custom formats when there
was a repeated definition.

* Detect logformat duplicates and produce ERROR message indicating the
  format name, config line and action taken.

* Add some missing FATAL labels on parse abort when access_log has
  multiple logformat= options configured.

* Add missing FATAL error message when logformat lines has no name
  parameter (and thus no tokens either).

* Omit the default ""logformat=squid"" option from cachemgr config dumps.",26,data/crawl/squid/patch_13.diff
https://github.com/squid-cache/squid/commit/dcaa51f413ef42f3bad0504c91c15baa358f107d,29 May 2017,"Add OpenSSL library details to -v output

This is partially to meet the OpenSSL copyright requirement that binaries
mention when they are using the library, and partially for admin to see
which library their Squid is using when multiple are present in the system.",4,data/crawl/squid/patch_14.diff
https://github.com/squid-cache/squid/commit/e99fa721fc2a16026d284336fabe66db4518c3e5,23 May 2017,"Make PID file check/creation atomic to avoid associated race conditions.

After this change, if N Squid instances are concurrently started shortly
after time TS, then exactly one Squid instance (X) will run (and have
the corresponding PID file). If another Squid instance has already been
running (with the corresponding PID file) at TS, then X will be that
""old"" Squid instance. If no Squid instances were running at TS, then X
will be one of those new N Squids started after TS.

Lack of atomic PID file operations caused unexpected Squid behavior:
* Mismatch between started Squid instance and stored PID file.
* Unexpected crashes due to failed allocation of shared resources,
  such as listening TCP ports or shared memory segments.

A new File class guarantees atomic PID file operations using locks. We
tried to generalize/reuse Ssl::Lock from the certificate generation
helper, but that was a bad idea: Helpers cannot use a lot of Squid code
(e.g., debugs(), TextException, SBuf, and enter_suid()), and the old
Ssl::Lock class cannot support shared locking without a major rewrite.

File locks on Solaris cannot work well (see bug #4212 comment #14), but
those problems do not affect PID file management code. Solaris- and
Windows-specific File code has not been tested and may not build.

Failure to write a PID file is now fatal. It used to be fatal only when
Squid was started with the -C command line option. In the increasingly
SMP world, running without a PID file leads to difficult-to-triage
errors. An admin who does not care about PID files should disable them.

Squid now exits with a non-zero error code if another Squid is running.


Also removed PID file rewriting during reconfiguration in non-daemon
mode. Squid daemons do not support PID file reconfiguration since trunk
r13867, but that revision (accidentally?) left behind half-broken
reconfiguration code for non-daemon mode. Fixing that code is difficult,
and supporting PID reconfigure in non-daemons is probably unnecessary.

Also fixed ""is Squid running?"" check when kill(0) does not have
permissions to signal the other instance. This does happen when Squid is
started (e.g., on the command line) by a different user than the user
Squid normally runs as or, perhaps, when the other Squid instance enters
a privileged section at the time of the check (untested). The bug could
result in undelivered signals or multiple running Squid instances.

These changes do not alter partially broken enter/leave_suid() behavior
of main.cc. That old code will need to be fixed separately!

PID file-related cache.log messages have changed slightly to improve
consistency with other DBG_IMPORTANT messages and to simplify code.
Squid no longer lies about creating a non-configured PID file. TODO:
Consider lowering the importance of these benign/boring messages.


* Terminal errors should throw instead of calling exit()

Squid used to call exit() in many PID-related error cases. Using exit()
as an error handling mechanism creates several problems:

1. exit() does not unwind the stack, possibly executing atexit()
   handlers in the wrong (e.g., privileged) context, possibly leaving
   some RAII-controller resources in bad state, and complicating triage;
2. Using exit() complicates code by adding a yet another error handling
   mechanism to the (appropriate) exceptions and assertions.
3. Spreading exit() calls around the code obscures unreachable code
   areas, complicates unifying exit codes, and confuses code checkers.

Long-term, it is best to use exceptions for nearly all error handling.
Reaching that goal will take time, but we can and should move in that
direction: The adjusted SquidMainSafe() treats exceptions as fatal
errors, without dumping core or assuming that no exception can reach
SquidMainSafe() on purpose. This trivial-looking change significantly
simplified (and otherwise improved) PID-file handling code!

The fatal()-related code suffers from similar (and other) problems, but
we did not need to touch it.

TODO: Audit catch(...) and exit() cases [in main.cc] to take advantage
of the new SquidMainSafe() code supporting the throw-on-errors approach.",1038,data/crawl/squid/patch_15.diff
https://github.com/squid-cache/squid/commit/0ce8e93bd91ba176e1f27087a9e5ed6481e7d24a,12 Apr 2017,"Count failures and use peer-specific connect timeouts when tunneling.

Fixed two bugs with tunneling CONNECT requests (or equivalent traffic)
through a cache_peer:

1. Not detecting dead cache_peers due to missing code to count peer
   connect failures. TLS/SSL-level failures were detected (for ""tls""
   cache_peers) but TCP/IP connect(2) failures were not (for all peers).

2. Origin server connect_timeout used instead of peer_connect_timeout or
   a peer-specific connect-timeout=N (where configured).

The regular forwarding code path does not have the above bugs. This
change reduces code duplication across the two code paths (that
duplication probably caused these bugs in the first place), but a lot
more work is needed in that direction.

The 5-second forwarding timeout hack has been in Squid since
forward_timeout inception (r6733). It is not without problems (now
marked with an XXX), but I left it as is to avoid opening another
Pandora box. The hack now applies to the tunneling code path as well.",194,data/crawl/squid/patch_16.diff
https://github.com/squid-cache/squid/commit/90be6ff518647d4980ad6b725b1279da082cc7ee,23 Mar 2017,"Fix appending Http::HdrType::VIA code duplication

... resolving Via header truncation at 1024 bytes.

Also fixes the generated Via values for non-HTTP protocols.",63,data/crawl/squid/patch_17.diff
https://github.com/squid-cache/squid/commit/5d3aafbed3edd9d4cc50d9f276010c51c6b942fe,20 Feb 2017,Sync with v5 rev.15058,1995,data/crawl/squid/patch_18.diff
https://github.com/squid-cache/squid/commit/b27668ec6cfce0b56ca6d8ef4b887207f4ecc6b7,19 Feb 2017,"Add response delay pools feature for Squid-to-client speed limiting.

The feature restricts Squid-to-client bandwidth only.  It applies to
both cache hits and misses.

  * Rationale *

  This may be useful for specific response(s) bandwidth limiting.
  There are situations when doing this is hardly possible
  (or impossible) by means of netfilter/iptables operating with
  TCP/IP packets and IP addresses information for filtering. In other
  words, sometimes it is problematic to 'extract' a single response from
  TCP/IP data flow at system level. For example, a single Squid-to-client
  TCP connection can transmit multiple responses (persistent connections,
  pipelining or HTTP/2 connection multiplexing) or be encrypted
  (HTTPS proxy mode).

  * Description *

  When Squid starts delivering the final HTTP response to a client,
  Squid checks response_delay_pool_access rules (supporting fast ACLs
  only), in the order they were declared. The first rule with a
  matching ACL wins.  If (and only if) an ""allow"" rule won, Squid
  assigns the response to the corresponding named delay pool.

  If a response is assigned to a delay pool, the response becomes
  subject to the configured bucket and aggregate bandwidth limits of
  that pool, similar to the current ""class 2"" server-side delay pools,
  but with a brand new, dedicated ""individual"" filled bucket assigned to
  the matched response.

  The new feature serves the same purpose as the existing client-side
  pools: both features limit Squid-to-client bandwidth. Their common
  interface was placed into a new base BandwidthBucket class.  The
  difference is that client-side pools do not aggregate clients and
  always use one bucket per client IP. It is possible that a response
  becomes a subject of both these pools. In such situations only matched
  response delay pool will be used for Squid-to-client speed limiting.

  * Limitations *

  The accurate SMP support (with the aggregate bucket shared among
  workers) is outside this patch scope. In SMP configurations,
  Squid should automatically divide the aggregate_speed_limit and
  max_aggregate_size values among the configured number of Squid
  workers. 

  * Also: *

  Fixed ClientDelayConfig which did not perform cleanup on
  destruction, causing memory problems detected by Valgrind. It was not
  possible to fix this with minimal changes because of linker problems
  with SquidConfig while checking with test-builds.sh. So I had
  to refactor ClientDelayConfig module, separating configuration code
  (old ClientDelayConfig class) from configured data (a new
  ClientDelayPools class) and minimizing dependencies with SquidConfig.",1109,data/crawl/squid/patch_19.diff
https://github.com/squid-cache/squid/commit/b5db97e7aa415bd1630a7d47d59d7ea88aa0d17b,14 Feb 2017,"Fix memory leak and parse handling error introduced by r15024.

* Do not leak Note::Value::Value::valueFormat.
* Throw if annotation value parsing failures.

Detected by Coverity Scan:
 * CID 1399758:  Error handling issues (CHECKED_RETURN)
 * CID 1399759:  Resource leaks (CTOR_DTOR_LEAK)",8,data/crawl/squid/patch_20.diff
https://github.com/squid-cache/squid/commit/46e791c629e44630fe6e1df32bb0d73f10b1299d,08 Feb 2017,"digest_ldap_auth: Add -r option to clamp the realm to a fixed value

Some historic Digest Auth implementations do not include the realm in the
digest password attribute. The password is effectively stored as ""HA1""
instead of ""REALM:HA1"".

The realm cannot simply be ignored due to:
 1) the realm is both the salting value used within the hash and the
scope limitation on what inputs from HTTP are used to compare against
the A1, and
 2) Squid does not itself verify the realm received was the one offered
and leaves the comparison to the backend system. There is some
possibility the authentication system is using multiple security realms
and Squids realm string is just an offer.


Not having realm tied to the credentials in the backend storage leaves
this particular helper with no other option but to trust the realm sent
(probably) over clear-text by any client/attacker actually matches the
salting. That allows remote senders to manipulate the realm string they
send to perform a collision attack against the stored password.
 They no longer have to find and prove knowledge of the password. But
just find a collision for its hash vs arbitrary realm strings.

Old Digest systems are not the safest things to begin with. They also
tend to use MD5 hashing which was the only one available for many years
and relatively easy to find collisions for.


To resolve all these problems allow the -l parameter to accept an empty
string ('-l """" ') when the -r option provides a fixed realm.

Also, fix several typos in the help text.",25,data/crawl/squid/patch_21.diff
https://github.com/squid-cache/squid/commit/40fc161851f5809741ddb4774e7c366d23323a97,05 Feb 2017,Sync from v5 r15034,2231,data/crawl/squid/patch_22.diff
https://github.com/squid-cache/squid/commit/3f5b28fe18637452647d7000a0ac21103f8b660e,05 Feb 2017,"Crypto-NG: initial GnuTLS support for encrypted server connections

Make significant changes to how the options= config settings are
handled internally since GnuTLS does not expose the priority_t
implementation details like OpenSSL. They are also applied to the
session object instead of to the context.

The Security::SessionPointer is converted to std::shared_ptr. This is
required because GnuTLS does not expose the locking like OpenSSL. Since
we store the SessionPointer to fde::Table::ssl we can always access it
from there one way or another and there is actually no need for OpenSSL
locking sessions now.

Most of the remaining session lifecycle logic is moved to
security/Session.* and given a generic API. Only some client-connection
and SSL-Bump related setup remains in ssl/.

A fair amount more debug is added along with some text changes doing
s/SSL/TLS/ in code comments and debug outputs.",780,data/crawl/squid/patch_23.diff
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/patch_24.diff
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/patch_25.diff
https://github.com/squid-cache/squid/commit/b58d2a22b31ec12c7070dfca849359bb726a1f12,24 Jan 2017,Cleanup: convert Delay Pool classes to MEMPROXY,328,data/crawl/squid/patch_26.diff
https://github.com/squid-cache/squid/commit/194ccc9c4c16a5a2f282aa47ed8b4b6060ebb0f8,11 Jan 2017,"External ACL helpers error handling & caching

The helper protocol for external ACLs [1] defines three possible return values:
   OK - Success. ACL test matches.
   ERR - Success. ACL test fails to match.
   BH - Failure. The helper encountered a problem.

The external acl helpers distributed with squid currently doesn't follow this
definition. For example, upon connection error, ERR is returned:

   $ ext_ldap_group_acl ... -d
   ext_ldap_group_acl: WARNING: could not bind to binddn 'Can't contact LDAP server'
   ERR

 This is does not allow to distinguish ""no match"" and ""error"" either and
therefore negative caches ""ERR"", also in the case of an error.

Moreover there are multiple problems inside squid when trying to handle BH
responses:
  - Squid-5 and squid-4 retries requests for BH responses but crashes after the
    maximum retry number (currently 2) is reached.
  - If an external acl helper return always BH (eg because the LDAP server is
    down) squid sends infinitely new request to the helper.

This is a Measurement Factory project",173,data/crawl/squid/patch_27.diff
https://github.com/squid-cache/squid/commit/9d52ba1165dfa797b4fe688b49f0c10dc98e25a5,11 Jan 2017,"Reduce crashes due to unexpected ClientHttpRequest termination.

The underlying problem has been known since r13480: If a
ClientHttpRequest job ends without Http::Stream (and ConnStateData)
knowledge, then Squid is likely to segfault or assert. This patch does
not resolve the underlying issue (a proper fix would require
architectural changes in a consensus-lacking area) but makes an
unexpected ClientHttpRequest job destruction less likely.

BodyPipe and Adaptation-related exceptions are the major causes of
unexpected ClientHttpRequest job destruction. This patch handles them by
closing the client connection. Connection closure should trigger an
orderly top-down cleanup, including Http::Stream, ConnStateData, and
ClientHttpRequest destruction.

If there is no connection to close, then the exception is essentially
ignored with a level-1 error message disclosing the problem. The side
effects of ignoring such exceptions are unknown, but without a client
connection, it is our hope that they would be relatively benign.

This is a Measurement Factory project.",16,data/crawl/squid/patch_28.diff
https://github.com/squid-cache/squid/commit/912864c28eac63534ad0d0615cac8f665f219b94,08 Jan 2017,"Cleanup: remove ip/Qos.cci file

... moving its content to ip/QosConfig.cc

Also, move the stub file to src/tests/stub_libip.cc and update to use
tests/STUB.h interface.",404,data/crawl/squid/patch_29.diff
https://github.com/squid-cache/squid/commit/11e14d639b6979de936aad35a04be4cf82c6519b,03 Jan 2017,"Tests: shuffle libmem Pool unit test to src/

Refactor for cppunit framework instead of custom code.

Duplicate the basic create-free-realloc cycle test for both Pool and MemProxy
but do not add missing tests for other API calls at this time.",190,data/crawl/squid/patch_30.diff
https://github.com/squid-cache/squid/commit/cc488ec94560163ed6ee80f11077ee234cad657c,24 Dec 2016,"GnuTLS support for options= parameters

Use new Pointer to store PeerOptions::parsedOptions.

Migrate OpenSSL options= logic into libsecurity

Also, some API polishing for PeerOptions API.",166,data/crawl/squid/patch_31.diff
https://github.com/squid-cache/squid/commit/50ad1e256824307b27dae0fbb078d65df8e2f816,21 Dec 2016,"Cleanup: Refactor libauth Config object(s)

Refactoring the Auth::Config objects to get v5 building again.

The object storing auth_param settings is renamed to SchemeConfig.

A new Auth::Config object is added. The objects holding auth_param,
auth_schemes and other authenticate_* directives settings are stored
there instead of just auth_params.

Lots of outdated doxygen docs that have more up to date copies elsewhere
are removed. The ""\ingroup AuthAPI"" are left for now since some auth
things are not yet in the Auth:: namespace, but other auth related
groups are dropped completely.

Code parsing and dumping auth_param lines has been de-duplicated. Along
with the keep_alive and utf8 settings, which are shared by multiple
schemes. This allows dropping several virtual methods from NTLM and
Negotiate scheme objects.

An auth/forward.h file is added for predefines. Some initial Auth::
symbols are listed there. It is not complete, but others can be added as
needed later.

Some unnecessary includes have been removed. There are probably more. I
just did the obvious ones related to the new auth/forward.h and
auth/Config.h files at this time.",1335,data/crawl/squid/patch_32.diff
https://github.com/squid-cache/squid/commit/644b0587cc6495cfabfcba76243a71dca0e1a20c,20 Dec 2016,Fix shadowing of member 'type' in SchemeConfig,14,data/crawl/squid/patch_33.diff
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/patch_34.diff
https://github.com/squid-cache/squid/commit/5bfc3dbd3b2f44d27b807a36ae94e063778e018a,10 Dec 2016,"Added auth_schemes to control schemes presence and order in 401s/407s.

The new squid.conf directive may be used to customize authentication
schemes presence and order in Squid's HTTP 401 (Unauthorized) and 407
(Proxy Authentication Required) responses. The defaults remain the same.",235,data/crawl/squid/patch_35.diff
https://github.com/squid-cache/squid/commit/ba6fffba7bbad6c0efcb9613b16aa97573ee7ef0,08 Dec 2016,"Cleanup: Refactor custom ACL-controlled actions configuration code.

* Reduced parsing code duplication by adding ParseAclWithAction().

* Used functors for generic action-to-string conversions. It is possible
  now to perform such conversions providing lambda expressions.

* Used vectors of strings instead of C-style arrays for storing
  conversion tables and check against bounds with vector::at().",159,data/crawl/squid/patch_36.diff
https://github.com/squid-cache/squid/commit/c2afddd8f98c17c7a9e03d504b97847065d744e1,30 Nov 2016,"Revert C++11 std::regex changes

CentOS 7 (and thus probably also RHEL 7) still have difficulty using
GCC 5+ compiler necessary for this C++11 code to be used reliably.

see http://lists.squid-cache.org/pipermail/squid-dev/2015-July/002884.html",5399,data/crawl/squid/patch_37.diff
https://github.com/squid-cache/squid/commit/c438bcf10742e773a8e602a398c884ea54080336,20 Nov 2016,"C++11: Remove GnuRegex and all -lregex related code

Squid is now exclusively using the STL std::regex API provided on all
operating systems in a portable manner.

We no longer have any need of detecting if the system is providing a
libregex, or user has configured one, or if it actually works, or how
to call it, or use the GnuRegex code as a backup when one of those
complex details goes wrong.",5393,data/crawl/squid/patch_38.diff
https://github.com/squid-cache/squid/commit/ea5746353c1e72f8f59c0d08906a3d90400b0dac,18 Nov 2016,"TLS: Add ErrorString() function to libsecurity API

To convert library error codes to strings in a library agnostic way.",108,data/crawl/squid/patch_39.diff
https://github.com/squid-cache/squid/commit/ef143ddc67151d2f8e7b466bbf091fc837701027,11 Nov 2016,"Segfault via Ftp::Client::readControlReply.

Added nil dereference checks for Ftp::Client::ctrl.conn, including:
- Ftp::Client::handlePasvReply() and handleEpsvReply() that dereference
  ctrl.conn in DBG_IMPORTANT messages.
- Many functions inside FtpClient.cc and FtpGateway.cc files.

TODO: We need to find a better way to handle nil ctrl.conn. It is only
a matter of time when we forget to add another dereference check or
discover a place we missed during this change.

Also disabled forwarding of EPRT and PORT commands to origin servers.
Squid support for those commands is broken and their forwarding may
cause segfaults (bug #4004). Active FTP is still supported, of course.

This is a Measurement Factory project",53,data/crawl/squid/patch_40.diff
https://github.com/squid-cache/squid/commit/28e1d824b2709692b463f590f8e3fd4d6b944652,08 Nov 2016,Make key= before cert= a fatal error instead of quietly hiding the issue,2,data/crawl/squid/patch_41.diff
https://github.com/squid-cache/squid/commit/6b2b6cfe1e9e1f1fbf2b310f9c28532f1c70e00c,04 Nov 2016,"Support tunneling of bumped non-HTTP traffic. Other SslBump fixes.

Use case: Skype groups appear to use TLS-encrypted MSNP protocol instead
of HTTPS. This change allows Squid admins using SslBump to tunnel Skype
groups and similar non-HTTP traffic bytes via ""on_unsupported_protocol
tunnel all"". Previously, the combination resulted in encrypted HTTP 400
(Bad Request) messages sent to the client (that does not speak HTTP).

Also this patch:
 * fixes bug 4529: !EBIT_TEST(entry->flags, ENTRY_FWD_HDR_WAIT)
   assertion in FwdState.cc.

 * when splicing transparent connections during SslBump step1, avoid
   access-logging an extra record and log %ssl::bump_mode as the expected
   ""splice"" not ""none"".

 * handles an XXX comment inside clientTunnelOnError for possible memory
   leak of client streams related objects

 * fixes TunnelStateData logging in the case of splicing after peek.

This is a Measurement Factory project.",574,data/crawl/squid/patch_42.diff
https://github.com/squid-cache/squid/commit/a5f27c62b2b25ba7e492f0148e199d91984a8861,01 Nov 2016,"Cleanup: replace cachemgr_passwd with SBufList

Remove one more use of wordlist in favour of SBufList

Also, updates the debug warning during config parse to
use the quieter PARSE_NOTE macro.",71,data/crawl/squid/patch_43.diff
https://github.com/squid-cache/squid/commit/65308288f0c865498ea5c729b2137bc2216faca9,30 Oct 2016,"Bug 4627: fix generate-host-certificates and dynamic_cert_mem_cache_size defaults

For Squid-4 and later make these options actually do what has been documented.
Which is to generate by default with a 4MB cache.",12,data/crawl/squid/patch_44.diff
https://github.com/squid-cache/squid/commit/83f8d8f97118e1cae98c2c434e6643e04d1be113,11 Sep 2016,"Move Ssl::Errors to libsecurity

Convert to an STL set instead of CBDATA list:
* The list is not passed as a callback parameter, so CBDATA overheads are
  unnecessary.
* STL set has built-in unique entry protection, so special
  push_back_unique handling is not required. Just emplace() entries.
* STL unorderd_set is used for fast lookup property. This should operate
  faster on medium or larger sized ACL lists than CbDataList type could.",110,data/crawl/squid/patch_45.diff
https://github.com/squid-cache/squid/commit/fc10bc7dfd9d86e25804dbe9c90146054465b218,19 Aug 2016,"Do not log error:transaction-end-before-headers after invalid requests.

Squid was not consuming read leftovers after failing to parse a request.
Starting with r14752, those leftovers were misinterpreted as another
unparsed request, creating an extra error:transaction-end-before-headers
access.log line after every error:invalid-request line (and probably
after every error:request-too-large line).

To stop Squid from accidentally reading new bytes and misinterpreting
them as another request, I was tempted to also clear flags.readMore
after consuming unparsable leftovers. In my tests, the flag is cleared
in ConnStateData::quitAfterError() called from clientTunnelOnError(),
but that logic looks rather fragile. I resisted the temptation to
improve it because controlling reads is a complicated matter (especially
in on_unsupported_protocol context) outside this logging fix scope.",12,data/crawl/squid/patch_46.diff
https://github.com/squid-cache/squid/commit/d31d59d80a8ef8a2b85058fe6504188e43cee5ce,17 Aug 2016,"Better support for unknown URL schemes

Squid already contains AnyP::PROTO_UNKNOWN support for unknown protocols
but currently does not preserve the actual string value received for them.

This adds a textual representation ('image') to the UriScheme object to
fill that gap and ensure that all URL representations (ie cache keys,
logs and outgoing messages) are generated with the scheme string as it
was received rather than implicitly via a registered protocol type.

Future work:
* add ACL support for arbitrary scheme names
* support for comparisons of unknown schemes",194,data/crawl/squid/patch_47.diff
https://github.com/squid-cache/squid/commit/6082a0e2e301e4d4a731fe82948eb196585499b2,13 Aug 2016,"Make Squid death due to overloaded helpers optional.

Added on-persistent-overload=action option to helpers. Helper overload
is defined as running with an overflowing queue. Persistent helper
overload is [still] defined as being overloaded for more than 3 minutes.

The default behavior is unchanged(*) -- Squid worker dies with a fatal
error at the attempt to submit a new request to a persistenly overloaded
helper. This default behavior can also be configured explicitly using
on-persistent-overload=die.

With on-persistent-overload=ERR, when dealing with a persistently
overloaded helper, Squid immediately skips the helper request and sends
an ERR response to the caller. Squid informs the admin when it starts
and when it stops skipping helper requests due to persistent overload.

The code had conflicting notions of an ""overloaded helper"". The external
ACL helper, the URL rewriter, and the store ID code used queueFull() to
test whether the new request would overflow the queue (and, hence,
overload the helper), but queueFull() itself did not check whether the
queue was full! It checked whether the queue was already overflowing.
This confusion resulted in that code scheduling one extra helper request
before enabling bypass. The code and its documentation are now more
consistent (and better match the ""overload"" terminology used by the new
configuration option, which also feels better than calling the helper
""full"").

(*) Resolving the above confusion resulted in minor (one request)
differences in the number of helper requests queued by Squid for
external ACL, URL rewriting, and store ID helpers, with the adjusted
behavior [better] matching the documentation.",327,data/crawl/squid/patch_48.diff
https://github.com/squid-cache/squid/commit/6f9f8f9d10ce1fedbd52f4362c6982d5308a9c4d,01 Aug 2016,"Fetch missing certificates

Many web servers do not have complete certificate chains. Many browsers use
certificate extensions of the server certificate and download the missing
intermediate certificates automatically from the Internet.
This patch add this feature to Squid.

The information for missing issuer certificates provided by the Authority
Information Access X509 extension. This describes the format and the location
of additional information provided by the issuer of the certificate.

This patch:
  - Implements a class Downloader as an independet AsyncJob class. This new
    class can be used by internal squid subsystems to download objects from
    the network.
  - Modify Ssl::PeerConnector class to use new Downloader class to
    retrieve missing certificates from the net. The URIs of missing
    certificates from the Authority Information Access X509 extension.
  - Implements a new basic certificates parser based on openSSL for the
    TLS handshake messages parser.
  - Modify the Ssl::ServerBio class to:
     * Buffer the Server Hello message and not pass it to the openSSL library
       until downloading missing certificates, if any, is finished.
     * Extract server certificates from server hello message.
       This is required to check if there are missing certificates, and if yes
       give the chance to squid to download missing certificates and complete
       certificate chains before pass them for processing to openSSL

TODO:
  - Add support for certs-only CMS message.
    From  RFC 4325:
    ""Where the information is available via HTTP or FTP, accessLocation
    MUST be a uniformResourceIdentifier and the URI MUST point to either
    a single DER encoded certificate as specified in [RFC2585] or a
    collection of certificates in a BER or DER encoded ""certs-only"" CMS
    message as specified in [RFC2797]. ""
    ...
    ""Conforming applications that support HTTP or FTP for accessing
    certificates MUST be able to accept individual DER encoded
    certificates and SHOULD be able to accept ""certs-only"" CMS messages.""

This is a Measurement Factory project",808,data/crawl/squid/patch_49.diff
https://github.com/squid-cache/squid/commit/212e5aee4a29820cbdb0cab6dc98ba4e8b4ba3c4,01 Aug 2016,merge from trunk-r14768,3260,data/crawl/squid/patch_50.diff
https://github.com/squid-cache/squid/commit/ae3ac744d5c7682da3cae796ba2f0fa204cc494d,27 Jul 2016,TLS: do not hang when 'connector' fails,2,data/crawl/squid/patch_51.diff
https://github.com/squid-cache/squid/commit/1a210de4cfe348c315f1334f4303ee73a45ef7cf,23 Jul 2016,"Collapse internal revalidation requests (SMP-unaware caches).

... also address Bug 4311 and partially address Bug 2833 and Bug 4471.

Extend collapsed_forwarding functionality to internal revalidation
requests. This implementation does not support Vary-controlled cache
objects and is limited to SMP-unaware caching environments, where each
Squid worker knows nothing about requests and caches handled by other
workers. However, it also lays critical groundwork for future SMP-aware
collapsed revalidation support.

Prior to these changes, multiple concurrent HTTP requests for the same
stale cached object always resulted in multiple internal revalidation
requests sent by Squid to the origin server. Those internal requests
were likely to result in multiple competing Squid cache updates, causing
cache misses and/or more internal revalidation requests, negating
collapsed forwarding savings.

Internal cache revalidation requests are collapsed if and only if
collapsed_forwarding is enabled. There is no option to control just
revalidation collapsing because there is no known use case for it.

* Public revalidation keys

Each Store entry has a unique key. Keys are used to find entries in the
Store (both already cached/swapped_out entries and not). Public keys are
normally tied to the request method and target URI. Same request
properties normally lead to the same public key, making cache hits
possible. If we were to calculate a public key for an internal
revalidation request, it would have been the same as the public key of
the stale cache entry being revalidated. Adding a revalidation response
to Store would have purged that being-revalidated cached entry, even if
the revalidation response itself was not cachable.

To avoid purging being-revalidated cached entries, the old code used
private keys for internal revalidation requests. Private keys are always
unique and cannot accidentally purge a public entry. On the other hand,
for concurrent [revalidation] requests to find the store entry to
collapse on, that store entry has to have a public key!

We resolved this conflict by adding ""scope"" to public keys:

* Regular/old public keys have default empty scope (that does not affect
  key generation). The code not dealing with collapsed revalidation
  continues to work as before. All entries stored in caches continue to
  have the same keys (with an empty scope).

* When collapsed forwarding is enabled, collapsable internal
  revalidation requests get public keys with a ""revalidation"" scope
  (that is fed to the MD5 hash when the key is generated). Such a
  revalidation request can find a matching store entry created by
  another revalidation request (and collapse on it), but cannot clash
  with the entry being revalidated (because that entry key is using a
  different [empty] scope).

This change not only enables collapsing of internal revalidation
requests within one worker, but opens the way for SMP-aware workers to
share information about collapsed revalidation requests, similar to how
those workers already share information about being-swapped-out cache
entries.


After receiving the revalidation response, each collapsed revalidation
request may call updateOnNotModified() to update the stale entry [with
the same revalidation response!]. Concurrent entry updates would have
wasted many resources, especially for disk-cached entries that support
header updates, and may have purged being-revalidated entries due to
locking conflicts among updating transactions. To minimize these
problems, we adjusted header and entry metadata updating logic to skip
the update if nothing have changed since the last update.


Also fixed Bug 4311: Collapsed forwarding deadlocks for SMP Squids using
SMP-unaware caches. Collapsed transactions stalled without getting a
response because they were waiting for the shared ""transients"" table
updates. The table was created by Store::Controller but then abandoned (not
updated) by SMP-unaware caches. Now, the transients table is not created
at all unless SMP-aware caches are present. This fix should also address
complaints about shared memory being used for Squid instances without
SMP-aware caches.

A combination of SMP-aware and SMP-unaware caches is still not supported
and is likely to stall collapsed transactions if they are enabled. Note
that, by default, the memory cache is SMP-aware in SMP environments.",437,data/crawl/squid/patch_52.diff
https://github.com/squid-cache/squid/commit/7b2b7ef6c34410187888add4f9cb1cb0b530d001,22 Jul 2016,Add stub for log/liblog symbols,94,data/crawl/squid/patch_53.diff
https://github.com/squid-cache/squid/commit/831e953c433124a8e8313e3fc585fee186f742bd,12 Jul 2016,Bug 4534: assertion failure in xcalloc when using many cache_dir,183,data/crawl/squid/patch_54.diff
https://github.com/squid-cache/squid/commit/6041eef8b5ce201e1e4795834f364953198642a0,07 Jul 2016,Sync with trunk r14734,1405,data/crawl/squid/patch_55.diff
https://github.com/squid-cache/squid/commit/942b1c39a7fa75d6d440d2550c00ea0213f54f25,02 Jul 2016,Bug 4540: revert r14720 buffer update,58,data/crawl/squid/patch_56.diff
https://github.com/squid-cache/squid/commit/4dc4090b6f49b4f85f9edb27c550f7341f1f966e,24 Jun 2016,"Convert Http::Stream::reqbuf to a MemBlob, making it configurable at runtime.

This also makes many other auxilary changes:

 * Increases the size of Http::Stream::requestBuffer to match that of
   read_ahead_gap. Previously this was a 4kb fixed size buffer. As a result,
   the overhead for a single client connection has been increased by 12 KB in
   the default configuration, but Squid will no longer artifically slow down
   client responses in this situation by fragmenting the read(2)/write(2)
   calls.

 * Improves the performance of large uncacheable replies. This was achieved by
   increasing the buffer size to 16 KB as mentioned above, but it is worth
   mentioning separately. Specifically, for a server, client and proxy all
   running on my local machine, this patch increases throughput on a 5 GB file
   from ~110 MB/s to ~340 MB/s.

 * Documents the influence that read_ahead_gap had on the size of read(2) calls
   for HTTP, and now the size of write(2) calls.

 * Prevent read_ahead_gap from being set to 0. Previously this would result in
   hung requests.

This work is submitted on behalf of Bloomberg L.P.",58,data/crawl/squid/patch_57.diff
https://github.com/squid-cache/squid/commit/35e4c35ab49740eb5500336e2146ed9be3f69e93,23 Jun 2016,Sync with trunk rev.14719,1054,data/crawl/squid/patch_58.diff
https://github.com/squid-cache/squid/commit/c75aba0236b968dc5d4c60597f3351b0704a2b69,02 Jun 2016,"CryptoNG: cleanup TLS/SSL context initialization sequence

The libsecurity ServerOptions and PeerOptions class methods are now
supposed to be the API for creating SSL contexts for https_port,
cache_peer and outgoing connections.

Continue the API transition by making the callers of sslCreate*Context()
functions use the libsecurity API instead and repurpose the now obsolete
functions into the Ssl:: namespace to initialize the keying material and
other not-yet-converted OpenSSL state details of an existing context.

A side effect of this is that GnuTLS contexts are now actually created
and initialized as far as they can be.

SSL-Bump context initialization is not altered by this.",83,data/crawl/squid/patch_59.diff
https://github.com/squid-cache/squid/commit/0bffe3cec1400f4d69724552e77e77878defd8a3,23 May 2016,"Sync with trunk-r14686

- Replaces with newer versions of BinaryTokenizer and HandshakeParser classes
- Modifications to use latest Handshake parser from trunk.
- Get HandshakeParser::serverCertificates, HandshakeParser::parseServerCertificates and HandshakeParser::ParseCertificate implementation from lp:fast-sni branch",6170,data/crawl/squid/patch_60.diff
https://github.com/squid-cache/squid/commit/014adac1c52c2f7dabee4cf6361dec4f4207f41a,20 May 2016,"Do not allow low-level debugging to hide important/critical messages.

Removed debugs() side effects that inadvertently resulted in some
important/critical messages logged at the wrong debugging level and,
hence, becoming invisible to the admin. The removed side effects set the
""current"" debugging level when a debugs() parameter called a function
that also called debugs(). The last nested debugs() called affected the
level of all debugs() still in progress!

Related changes:

* Reentrant debugging messages no longer clobber parent messages. Each
  debugging message is logged separately, in the natural order of
  debugs() calls that would have happened if debugs() were a function
  (that gets already evaluated arguments) and not a macro (that
  evaluates its arguments in the middle of the call). This order is
  ""natural"" because good macros work like functions from the caller
  point of view.

* Assertions hit while evaluating debugs() parameters are now logged
  instead of being lost with the being-built debugs() log line.

* 10-20% faster debugs() performance because we no longer allocate a new
  std::ostringstream buffer for the vast majority of debugs() calls.
  Only reentrant calls get a new buffer.

* Removed old_debug(), addressing an old ""needs to die"" to-do.

* Removed do_debug() that changed debugging level while testing whether
  debugging is needed. Use side-effect-free Debug::Enabled() instead.

Also removed the OutStream wrapper class. The wrapper was added in trunk
revision 13767 that promised to (but did not?) MemPool the debug output
buffers. We no longer ""new"" the buffer stream so a custom new() method
would be unused. Besides, the r13767 explanation implied that providing
a Child::new() method would somehow overwrite Parent::allocator_type,
which did not compute for me. Finally, Squid ""new""s other allocator-
enabled STL objects without overriding their new methods so either the
same problem is still there or it did not exist (or was different?).

Also removed Debug::xassert() because the debugs() assertions now work
OK without that hack.",321,data/crawl/squid/patch_61.diff
https://github.com/squid-cache/squid/commit/bea1ea3533abec08dee56cddf204a6da62052c48,18 May 2016,"Fast SNI peek

Currently, bumping peek mode at step2 and splice at step2, after the SNI is 
received is slow.
The most of the performance overhead comes from openSSL. However Squid does not
need openSSL to peek at SNI. It needs only to get client TLS Hello message
analyze it to retrieve SNI and then splice at step2.

This patch:
  - Postpone creation of the OpenSSL connection (i.e. SSL) object for the
    accepted TCP connection until after we peek at SNI (after step2).
  - Implements the Parser::BinaryTokenizer parser for extracting byte-oriented
    fields from raw input
  - Reimplement a new SSL/TLS handshake messages parser using the
    BinaryTokenizer, and remove old buggy parsing code from ssl/bio.cc
  - Adjust ConnStateData, Ssl::Bio, Ssl::PeerConnector classes to use the
    new parsers and parsing results.

This is a Measurement Factory project",2623,data/crawl/squid/patch_62.diff
https://github.com/squid-cache/squid/commit/39f6946553d9da5d2ee174448b05b8603c57006a,13 May 2016,merge from trunk-r14667,3158,data/crawl/squid/patch_63.diff
https://github.com/squid-cache/squid/commit/a804b6fe5d810d415289226ad10ef80289e83062,02 May 2016,"Finalized BinaryTokenizer context handling. Polished.

No more funny context fields inside TLS structures. Context is handled
by the parsing code without needlessly storing it long-term.

Hid TLS structures/parsers used exclusively by
Security::HandshakeParser inside security/Handshake.cc to simplify API.

Also skipped unused ServerHello.random (instead of storing it in
TlsDetails::clientRandom) and replaced SQUID_TLS_RANDOM_SIZE macro
with a regular C++ constant.",420,data/crawl/squid/patch_64.diff
https://github.com/squid-cache/squid/commit/b35bf4e58ca28895b4783eb950abc02f31e51db4,02 May 2016,"HTTP/1.1: normalize Host header

When absolute-URI is provided Host header should be ignored. However some
code still uses Host directly so normalize it using the previously
sanitized URL authority value before doing any further request processing.

For now preserve the case where Host is completely absent. That matters
to the CVE-2009-0801 protection.

This also has the desirable side effect of removing multiple or duplicate
Host header entries.",10,data/crawl/squid/patch_65.diff
https://github.com/squid-cache/squid/commit/793b1bfb48e5bd84205414497c7680c22ce0087b,30 Apr 2016,"Stop parsing SSL records after a fatal SSL Alert. 

The fatal alert sender should close the connection. Waiting for the next
record is pointless and will obscure the problem when we eventually read
the EOF on the socket.",4,data/crawl/squid/patch_66.diff
https://github.com/squid-cache/squid/commit/c3149111e45340cb60a8f3c28a418ae96e9b67e8,30 Apr 2016,"Separated BinaryTokenizer commits from context debugging. Polished.

Commits are relatively rare events specific to incremental parsing. Most
parsers are not incremental and do not commit/rollback. However, all
parsers need to debug what they parse. Thus, it was wrong to combine
commits with context debugging.

BinaryTokenizer single-context debugging did not support nested contexts
(such as Hello.version.major) and reported wrong FieldGroup sizes for
some parsed structures. The new BinaryTokenizerContext does not have
these problems and is more general (but still needs more polishing
work).

Also polished many field names, comments, debug messages, and some code.",293,data/crawl/squid/patch_67.diff
https://github.com/squid-cache/squid/commit/1f1eee3f84f3874ea982b10c6186c20d373ac6fc,16 Apr 2016,"cachemgr.cgi: use dynamic MemBuf for internal content generation

Using a fixed size buffer limits how big content lines can be. Modern
HTTP is fast reaching the point where such limits are problematic.
Also fixes incorrect uses of snprintf() by removing them.",95,data/crawl/squid/patch_68.diff
https://github.com/squid-cache/squid/commit/b69e9ffa9e2a148e2abc08511ebc5378697a7b6c,03 Apr 2016,Cleanup: remove xstrerror(),1093,data/crawl/squid/patch_69.diff
https://github.com/squid-cache/squid/commit/8f7dbf74048f3950f8931e5ea38480b5d35b641e,30 Mar 2016,Bug 4312: Support disabling collapsed forwarding SMP cooperation,46,data/crawl/squid/patch_70.diff
https://github.com/squid-cache/squid/commit/f57ae909fef52f5088b8304a4eb21d0c3978f533,25 Mar 2016,"Fix memory leak of AccessLogentry::url

 ... created by ACLFilledChecklist::syncAle().

::syncAle() is the only place in the codebase that assigns a URL that
AccessLogEntry is expected to free(), which AccessLogEntry doesn't do.
This results in a memory leak.

  This is submitted on behalf of Bloomberg L.P.",44,data/crawl/squid/patch_71.diff
https://github.com/squid-cache/squid/commit/c756d517bc402e8a228f8ff38088d055943677f3,24 Mar 2016,"Added shared_memory_locking configuration directive to control mlock(2).

Locking shared memory at startup avoids SIGBUS crashes when kernel runs
out of RAM during runtime. Why not enable it by default? Unfortunately,
locking requires privileges and/or much-higher-than-default
RLIMIT_MEMLOCK limits. Thus, requiring locked memory by default is
likely to cause too many complaints, especially since Squid has not
required that before. The default is off, at least for now.

As we gain more experience, we may try to enable locking by default
while making default locking failures non-fatal and warning about
significant [accumulated] locking delays.",72,data/crawl/squid/patch_72.diff
https://github.com/squid-cache/squid/commit/6821c276c85dae4a3872501898ab31b675569280,19 Mar 2016,merge new SSL messages parser from lp:fetch-cert branch,996,data/crawl/squid/patch_73.diff
https://github.com/squid-cache/squid/commit/9210f5ec6219282bfea46e56f9003d9cff4f1622,19 Mar 2016,"add forgotten Handshake.{cc,h} files",405,data/crawl/squid/patch_74.diff
https://github.com/squid-cache/squid/commit/7c8ee6885f9702ff30dfdfe3edce25c7dd3b3fd6,19 Mar 2016,"Move BinaryTokenizer, Ssl::HandshakeParser and Ssl::Rfc5246::* classes to
their own *.cc,*.h files

-Move the BinaryTokenizer from ssl/bio.* files to parser/BinaryTokenizer.{cc,h}
-Move the Ssl::Handshake and related structures and declarations from ssl/bio.*
 to security/Handshake.{c,h}, and under the   Security namespace
 (Security::Handshake)
-Move the Ssl::Rfc5246::* classes from ssl/bio.* to security/Handshake.{c,h},
 under the Security namespace.",852,data/crawl/squid/patch_75.diff
https://github.com/squid-cache/squid/commit/54fb1cbf85fff8de784dd1fb2aa6f3c274664590,18 Mar 2016,merge from trunk r14590,16178,data/crawl/squid/patch_76.diff
https://github.com/squid-cache/squid/commit/abf396ecb7fcdc3e156c73d3eb221c5576627689,11 Mar 2016,"Bug 7: Update cached entries on 304 responses.

New Store API to update entry metadata and headers on 304s.
Support entry updates in shared memory cache and rock cache_dirs.
No changes to ufs-based cache_dirs: Their entries are still not updated.

* Atomic StoreEntry metadata updating

   StoreEntry metadata (swap_file_sz, timestamps, etc.) is used
   throughout Squid code. Metadata cannot be updated atomically because
   it has many fields, but a partial update to those fields causes
   assertions. Still, we must update metadata when updating HTTP
   headers. Locking the entire entry for a rewrite does not work well
   because concurrent requests will attempt to download a new entry
   copy, defeating the very HTTP 304 optimization we want to support.

   Ipc::StoreMap index now uses an extra level of indirection (the
   StoreMap::fileNos index) which allows StoreMap control which
   anchor/fileno is associated with a given StoreEntry key. The entry
   updating code creates a disassociated (i.e., entry/key-less) anchor,
   writes new metadata and headers using that new anchor, and then
   _atomically_ switches the map to use that new anchor. This allows old
   readers to continue reading using the stale anchor/fileno as if
   nothing happened while a new reader gets the new anchor/fileno.

   Shared memory usage increase: 8 additional bytes per cache entry: 4
   for the extra level of indirection (StoreMapFileNos) plus 4 for
   splicing fresh chain prefix with the stale chain suffix
   (StoreMapAnchor::splicingPoint). However, if the updated headers are
   larger than the stale ones, Squid will allocate shared memory pages
   to accommodate for the increase, leading to shared memory
   fragmentation/waste for small increases.

* Revamped rock index rebuild process

   The index rebuild process had to be completely revamped because
   splicing fresh and stale entry slot chain segments implies tolerating
   multiple entry versions in a single chain and the old code was based
   on the assumption that different slot versions are incompatible. We
   were also uncomfortable with the old cavalier approach to accessing
   two differently indexed layers of information (entry vs. slot) using
   the same set of class fields, making it trivial to accidentally
   access entry data while using slot index.

   During the rewrite of the index rebuilding code, we also discovered a
   way to significantly reduce RAM usage for the index build map (a
   temporary object that is allocated in the beginning and freed at the
   end of the index build process). The savings depend on the cache
   size: A small cache saves about 30% (17 vs 24 bytes per entry/slot)
   while a 1TB cache_dir with 32KB slots (which implies uneven
   entry/slot indexes) saves more than 50% (~370MB vs. ~800MB).

   Adjusted how invalid slots are counted. The code was sometimes
   counting invalid entries and sometimes invalid entry slots. We should
   always count _slots_ now because progress is measured in the number
   of slots scanned, not entries loaded. This accounting change may
   surprise users with much higher ""Invalid entries"" count in cache.log
   upon startup, but at least the new reports are meaningful.

   This rewrite does not attempt to solve all rock index build problems.
   For example, the code still assumes that StoreEntry metadata fits a
   single slot which is not always true for very small slots.",1838,data/crawl/squid/patch_77.diff
https://github.com/squid-cache/squid/commit/7b1607c2eb702800c00e7aeb51439424b866ef8f,11 Mar 2016,Documented some of the Packable API problems.,9,data/crawl/squid/patch_78.diff
https://github.com/squid-cache/squid/commit/398bc06602eb8e7ab32170d6216aa6ddd32e33c4,29 Feb 2016,"Bug 4447:FwdState.cc:447 ""serverConnection() == conn"" assertion

After certain failures, FwdState::retryOrBail() may be called twice,
once from FwdState::unregisterdServerEnd() [called from
HttpStateData::swanSong()] and once from the FwdState's own connection
close handler. This may result in two concurrent connections to the
remote server, followed by an assertion upon a connection closure.

This patch:

 - After HttpStateData failures, instead of closing the squid-to-peer
   connection directly (and, hence, triggering closure handlers), calls
   HttpStateData::closeServer() and mustStop() for a cleaner exit with
   fewer wasteful side effects and better debugging.

 - Creates and remembers a FwdState close handler AsyncCall so that
   comm_remove_close_handler() can cancel an already scheduled callback.
   The conversion to the AsyncCall was necessary because legacy [close
   handler callbacks] cannot be canceled once scheduled.

This is a Measurement Factory project.",41,data/crawl/squid/patch_79.diff
https://github.com/squid-cache/squid/commit/70df76e30151bb5fd2070a275e2489ee6bdaaea9,19 Feb 2016,"Throw instead of asserting on some String overflows.

Note that Client-caught exceptions result in HTTP 500 (Internal Server
Error) responses with X-Squid-Error set to ""ERR_CANNOT_FORWARD 0"".


Also avoid stuck Client jobs on exceptions. See trunk r8266 for a
similar fix with a detailed discussion. Here, I added doneWithFwd
instead of setting fwd to NULL because we dereference fwd (and store
pointers to things stored in fwd!) in many places. I think it is too
risky to just clear refcounted FwdState pointer (except in the
destructor where doing so is pointless).

Using doneWithFwd correctly is difficult because there are many ways we
can be ""done"" with FwdState, including:

    * calling fwd->complete(),
    * calling fwd->handleUnregisteredServerEnd(), and
    * closing the connection that FwdState monitors for closures.

The latter is especially tricky case because the closing is initiated in
many places, the process is asynchronous, and not all control
connections are monitored by FwdState.

For example, the updated control connection closure handler assumes that
it is being used for either external closures or internal closures
incorrectly used instead of mustStop()/abortAll(). In both cases, either
FwdState is still monitoring the connection (OK) or we forgot to call
one of its ""done"" methods listed above before closing. The latter would
be a bug, but I did not find any signs of it and fixing it would be
outside this change scope anyway.


Also unified String size limit checks [that I could find].",70,data/crawl/squid/patch_80.diff
https://github.com/squid-cache/squid/commit/989393f2f64c36cb3ef2e0872604e952067d5a08,18 Feb 2016,"Bug 4111: leave_suid() does not properly handle error codes returned by setuid

... this will cause privilege escalation in the rare case that setuid fails.
So far there are no known cases of this happening when downgrading from root.

Also fixes several incorrect uses of errno which may have been obscuring
error message details if it did happen.",27,data/crawl/squid/patch_81.diff
https://github.com/squid-cache/squid/commit/2266451a8ff6a6f61ad012a6d38b78474d94674a,05 Feb 2016,Cleanup: remove several C-style casts from libcompat,45,data/crawl/squid/patch_82.diff
https://github.com/squid-cache/squid/commit/898d1a09e1d9e8f39de5d34df6793197c0fc8dc4,31 Jan 2016,"SourceLayout: rename ClientSocketContext to Http::Stream

 ... and provided through http/libsquid-http.la.

The name is chosen to match the RFC7540 HTTP/2 ""stream"" terminology.
Which defines a stream as a bi-directional transaction, including request,
reply and all related 1xx informational and/or control messages.

That same word ""stream"" is also used in RFC7230 briefly to describe the
same ""transaction"" scope and details. But not formalized until RFC7540.

Http::Stream's may be initiated by a client HTTP request, Squid internally,
or in HTTP/2 a server PUSH_PROMISE frame.

There are no logic changes in this. Just symbol renaming and move.",1958,data/crawl/squid/patch_83.diff
https://github.com/squid-cache/squid/commit/48c5f8e9d92304dad9caa0322c0b583408b346a3,30 Jan 2016,"SourceLayout: merge helpers/ into src/

* Move helpers/basic_auth/ into src/auth/basic/

* Move helpers/digest_auth/ into src/auth/digest/

* Move helpers/external_acl/ into src/acl/external/

* Move helpers/log_daemon/ into src/log/

* Move helpers/negotiate_auth/ into src/auth/negotiate/

* Move helpers/ntlm_auth/ into src/auth/ntlm/

* Move helpers/storeid_rewrite/ into src/store/id_rewriters/

* Move helpers/url_rewrite/ into src/http/url_rewriters/

* Rename helpers/defines.h to src/helper/protocol_defines.h",2256,data/crawl/squid/patch_84.diff
https://github.com/squid-cache/squid/commit/03901cf8c887266fcb6ff9604ea09da1db0857fc,30 Jan 2016,SourceLayout: move Basic auth helpers to src/auth/basic/,233,data/crawl/squid/patch_85.diff
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,25 Jan 2016,"Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends ""150 Opening..."" to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends ""451 Forbidden"" to the FTP client.
 * The FTP server sends ""500 OOPS: setsockopt: linger"" to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project.",221,data/crawl/squid/patch_86.diff
https://github.com/squid-cache/squid/commit/d3dddfb5729fe221bd0fc81ba7fd6dea3a5f2f1c,24 Jan 2016,Rename Http::StreamContext to Http::Stream,334,data/crawl/squid/patch_87.diff
https://github.com/squid-cache/squid/commit/435c72b07c5b7ebf782049cd2b50abe79a6f7db5,15 Jan 2016,"Bug 4005: Dynamic certificate cache exceeds dynamic_cert_mem_cache_size

* disable the use of system CA by default to verify client connection
  certificates. Since the use of client certificates is rare.

* no change to verification of upstream server or peer certificates.
  Since the use of system CA to sign server certificates is common.

* the new ""default-ca"" configuration option and its documentation are
  updated to make the situation more obvious amongst the other TLS options
  changes in Squid-4.

* the action of the sslflags=NO_DEFAULT_CA is already deprecated, so no
  change when it is used. On port lines it now merely sets the default.

It may be a good idea to also disable system CA use for cache_peer and
ICAPS connections. For now they are left unchanged.",75,data/crawl/squid/patch_88.diff
https://github.com/squid-cache/squid/commit/88df846be1405a88271bb2d29bd33708438ddac8,13 Jan 2016,"Add connections_encrypted ACL

The new connections_encrypted ACL matches transactions where all HTTP
messages were received over TLS transport connections, including messages
received from ICAP servers.

Some ICAP/eCAP services receive data from unencrypted sources. Some ICAP/eCAP
services are ""secure"". By default we assume that all eCAP services and all
ICAP services on TLS transport connections  are ""secure"" unless the user
uses the ""connection_encryption"" option in service configuration line.

This is a Measurement Factory project.",148,data/crawl/squid/patch_89.diff
https://github.com/squid-cache/squid/commit/9e61d113cda196ee868fc29e03be35cca36b8f11,09 Jan 2016,update client_side.h stub file,67,data/crawl/squid/patch_90.diff
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/patch_91.diff
https://github.com/squid-cache/squid/commit/8d664cb0f2b9e74117395fe8323c584afd92c99e,07 Jan 2016,Shuffle ClientSocketContext to Http::StreamContext,580,data/crawl/squid/patch_92.diff
https://github.com/squid-cache/squid/commit/d75ae82cb49639ca397bd23e4c8e368c52973604,28 Dec 2015,Migrate basic_ncsa_auth from squid has to std:: containers,70,data/crawl/squid/patch_93.diff
https://github.com/squid-cache/squid/commit/40bc593b55982402f8bc4a0dbab53d16d9de108b,21 Dec 2015,Fix typo in rev.14350,26,data/crawl/squid/patch_94.diff
https://github.com/squid-cache/squid/commit/900809ea458a449aec1b18387addc2f82d41b444,21 Dec 2015,C++-ify basic_fake_auth,60,data/crawl/squid/patch_95.diff
https://github.com/squid-cache/squid/commit/332c979d0522f7d4aa68b952188d4249a2c10dc7,18 Dec 2015,Fix segfault after rev.14439,50,data/crawl/squid/patch_96.diff
https://github.com/squid-cache/squid/commit/d3b1bee6fff7792f482ff280e8400c6a3e83560f,14 Dec 2015,merge from trunk r14444,9318,data/crawl/squid/patch_97.diff
https://github.com/squid-cache/squid/commit/21cd322727eaea02c573b2f5727e2e6ee6aba614,08 Dec 2015,"Refactor ClientSocketContext write(2) using Server:: write methods

Writing to the client connection is scoped as an action for class Server
and its child classes. There is no need for ClientSocketContext to be
providing the callback handlers and performing I/O error handling.

With Server providing the current write handler we can move from
CBDATA callbacks to AsyncCall. Initial testing indicates this has some
minor performance benefit.",127,data/crawl/squid/patch_98.diff
https://github.com/squid-cache/squid/commit/42a5dae8b02fdd0925abfe982d5345110463275d,07 Dec 2015,"Cleanup: pass PeerOptions to sslCreateClientContext()

... to reduce context creation code and simplify upcoming libsecurity
migration steps.",24,data/crawl/squid/patch_99.diff
https://github.com/squid-cache/squid/commit/0a28c16ad4e23e382f74090134e19c72be7e02da,06 Dec 2015,"Cleanup: Expose SSL initialization function to libsecurity

SSL initialize needs to be performed before any security context
objects are generated. Expose the function so that the new blank
context methods can use it.",30,data/crawl/squid/patch_100.diff
https://github.com/squid-cache/squid/commit/885f0ecf9b7d028ee78a680b25ecd73712ffe53c,05 Dec 2015,Cleanup TLS: shuffle context creation to libsecurity,83,data/crawl/squid/patch_101.diff
https://github.com/squid-cache/squid/commit/80b5995a4c0f4b51bace0cc6f3343177348dfbdf,04 Dec 2015,"Cleanup TLS: shuffle AnyP::PortCfg::staticSslContext into libsecurity

There are no logic changes in this patch. Only symbol moves and debugs
documentation polish.",38,data/crawl/squid/patch_102.diff
https://github.com/squid-cache/squid/commit/83b40f50d8bd32363c7c43d0260b23e3206fbdc1,25 Nov 2015,"Cleanup: Refactor ConnStateData pipeline handling

This refactors the request pipeline management API to use std::list
instead of a custom linked-list with accessors spread over both
ConnStateData and ClientSocketContext.

To do this a new class Pipeline is created with methods wrapping
std::list API and extending it slightly to meet the HTTP/1.1 pipeline
behaviours and perform basic stats gathering. The pipeline management
methods and state variables are moved inside this class.

ClientSocketContext was performing several layering violations in
relation to ConnStateData when one transaction ended and the next needed
starting. Treating the pipeline properly as a std::list forced removal
of that violation.

* actions for starting or resuming a transaction on the connection are
now moved to ConnStateData::kick(). Which gets called after each
transaction completes.
 - with some further cleanup it can be called at any point the
ConnStateData needs to resume processing. However, that is left out of
scope for this patch.

* the ClientSocketContext scope now ends when the finished() method is
used to mark completion of these contexts transactions. Which will mark
itself done and de-register from the Pipeline queue. The ConnStateData
kick() method still needs to be called to resume other transactions
processing.

* the queue is now holding RefCounted Pointers. So that the
ClientSocketContext destructor no longer needs to be careful of
registrations, and the queue entries are guaranteed to still exist while
queued.

* The old freeAllContexts() and notifyAllContexts(int) members of
ConnStateData have been combined into Pipeline::terminateAll(int).



The ClientSocketContext and ConnStateData documentation is updated to
describe what they do in regards to connection and transaction processing.


Initial testing revealed CONNECT tunnels always being logged as ABORTED.
This turns out to be techincally correct, since the only way a tunnel
can finish is for client or server to just close the connection.
However, it is not right to log these as abnormal aborts. Instead, I
have now made the context be finished() just prior to the
TunnelStateData being destroyed. That way normal closure should show up
only as TUNNEL, but timeouts and I/O errors should still be recorded as
abnormal.


Two potential bugs have been highlighted:

* The on_unsupported_protocol handling function appears to be a bit
broken. It pop()'s contexts off the pipeline directly without going
through the proper finished() process to release their state data. I
have highlighted that with an XXX and comment.

* The ssl-bump handling logic switching to TLS begins with a terminateAll(0)
run on all active contexts. It does not check whether there is any existing
pipeline of requests waiting to be processed. And the action prematurely
purges the bumped CONNECT message context, which should be closed properly
and logged as successful.",582,data/crawl/squid/patch_103.diff
https://github.com/squid-cache/squid/commit/dc12e84bcedce7d225212499ed6299bc74132b78,19 Nov 2015,"Store API and layout polishing. No functionality changes intended.

Fixes ""any Store is a Root"" API that forced us to bloat the base
Store class with methods needed only in Store::Root() Controller.
Unblocks bug #7 (cached headers update) fixes.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

Please see merged branch commits for details.",4808,data/crawl/squid/patch_104.diff
https://github.com/squid-cache/squid/commit/e02f963ce8082f66bc3656e16112f91d5b937d06,18 Nov 2015,"Bug 4368: A simpler and more robust HTTP request line parser.

The primary changes are: Removed incremental parsing and revised parsing
sequence to accept virtually any URI (by default and also configurable
as before).

Also doubled hard-coded 16-character method length limit.

No changes to parsing HTTP header fields (a.k.a. the MIME block) were
intended.

Known side effects:

* Drastically simpler code.
* Some unit test case adjustments.
* The new parser no longer treats some request lines ending with
  ""HTTP/1.1"" as HTTP/0.9 requests for URIs that end with ""HTTP/1.1"".
* The new parser no longer re-allocates character sets while parsing
  each request.

Intentional Changes:

* Removal of incremental request line parsing.

Squid parsed the request line incrementally. That optimization was
unnecessary:
  - most request lines are short enough to fit into one network I/O,
  - the long lines contain only a single long field (the URI), and
  - the user code must not use incomplete parsing results anyway.

Incremental parsing made code much more complex and possibly slower than
necessary.

The only place where incremental parsing of request lines potentially
makes sense is the URI field itself, and only if we want to accept URIs
exceeding request buffer capacity. Neither the old code, nor the
simplified one do that right now.


* Accept virtually any request-target (when allowed).

1. relaxed_header_parser allows whitespace in request-target.
2. relaxed_header_parser combined with USE_HTTP_VIOLATIONS now allows
   any characters except non-whitespace CTL characters (see RFC 5234
   appendix B.1) in the message request-target (aka URI).

#2 being the default build and configuration situation allows virtually
any URI that Squid can isolate by stripping method (prefix) and
HTTP/version (suffix) off the request line. This approach allows Squid to
forward slightly malformed (in numerous ways) URIs instead of misplacing
on the Squid admin the burden of explaining why something does not work
going through Squid but works fine when going directly or through another
popular proxy (or through an older version of Squid!).

URIs in what Squid considers an HTTP/0.9 request obey the same rules.
Whether the rules should differ for HTTP/0 is debatable, but the current
implementation is the simplest possible one, and the code makes it easy
to add complex rules.


* Code simplification.

RequestParser::parseRequestFirstLine() is now a simple sequence of
sequential if statements. There is no longer a path dedicated for the
strict parser. The decisions about parsing individual fields and
delimiters are mostly isolated to the corresponding methods.


* Unit test cases adjustments.

Removal of incremental request line parsing means that we should not
check parsed fields when parsing fails or has not completed yet.

Some test cases made arguably weird decisions apparently to accommodate
the old parser. The expectations of those test cases are more natural now.

Also, added optional (and disabled by default) debugging, to help pin-point
failures to test sub-cases that CPPUNIT cannot see.

Changing request methods to ""none"" in test sub-cases with invalid input
was not technically necessary because the new code ignores the method
when parsing fails, but it may help whoever would decide to reduce test
code duplication (by replacing hand-written expected outcomes for failed
test cases with a constant assignment or function call).",687,data/crawl/squid/patch_105.diff
https://github.com/squid-cache/squid/commit/94c86ca4ced2078f739c0c74a31f5bad9fa8f858,18 Nov 2015,ext_unix_group_acl: Add support via -r flag to strip @REALM from usernames,13,data/crawl/squid/patch_106.diff
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/patch_107.diff
https://github.com/squid-cache/squid/commit/3a0ace1d91cd018400f0c3bf48f6488397f08b6e,18 Nov 2015,"Use ""standard"" STUB macros/API. Also marked the file as unused.",12,data/crawl/squid/patch_108.diff
https://github.com/squid-cache/squid/commit/434fe01480e773c9439314f0c96368d4ed0e3f91,17 Nov 2015,Docs: Update ConnStateData and ClientServerContext descriptions,67,data/crawl/squid/patch_109.diff
https://github.com/squid-cache/squid/commit/4a4fbcef8ac37505a571b2b3a6c17d39ced5a801,17 Nov 2015,"Use connIsFinished() when a transaction is completed successfully

initiateClose() may sound okay, but it actually is the error handling logic.
It will terminate the ConnStateData with an erro rmessage, leaving the completed
request in the pipeline which in turn will result in *_ABORTED being logged for
all requests with Connection:close headers even if they are cleanly finished.

connIsFinished() is (now) the clean way to finish ClientSocketContext objects
lifetime regardless of whether keep-alive is needed. The ConnStateData::kick()
will now handle that so we do not even need to call keepaliveNextRequest().

Remove the now unused ClientSocketContext::keepaliveNextRequest().",31,data/crawl/squid/patch_110.diff
https://github.com/squid-cache/squid/commit/9dde3c2a8c8d0ebc8a4065814d68ab1534534a35,15 Nov 2015,Use pipeline stats in cachemgr reports,3,data/crawl/squid/patch_111.diff
https://github.com/squid-cache/squid/commit/fcc444e3db9ac978f7ab74d77f56dfe2c499652b,07 Nov 2015,"Split core Server operations from ConnStateData

This improves the servers/libserver.la class hierarchy in
preparation for HTTP/2 and other non-HTTP/1.1 protocol support.

The basic I/O functionality of ConnStateData is moved to Server
class and a set of virtual methods designed to allow for child
class implementation of data processing operations.

No logic is changed in this patch, just symbol renaming and
moving of method logics as-is into libservers.la",647,data/crawl/squid/patch_112.diff
https://github.com/squid-cache/squid/commit/37c7518a41d2426542b3bda94d32986c79c03837,06 Nov 2015,"Allow unlimited LDAP search filter for ext_ldap_group_acl helper.

The LDAP search filter in ext_ldap_group_acl is limited to 256 characters.
In some environments the user DN or group filter can be larger than this
limitation.
This patch uses dynamic allocated buffers for LDAP search filters.

This is a Measurement Factory project",225,data/crawl/squid/patch_113.diff
https://github.com/squid-cache/squid/commit/39441513efc377f3db64e763667a93c1a6d12862,30 Oct 2015,"Add Locker friend class to SBuf for protection against memory issues

When appending or otherwise modifying an SBuf based on a SBuf& or char*
the parameter used may be pointing at the MemBlob memory buffer
indirectly without holding a separate ref-count lock to it.

If 'this' SBuf then requires reallocation for any reason the char* or
buffer pointer taken from the SBuf&, which is being manipulated may in
fact be left pointing at invalid memory.

Utilize a private Locker class to create relatively cheap ref-count locks
on the store_ MemBlob when this problem MAY occur. This Locker needs to
be used on all non-const SBuf methods accepting char* or SBuf& argument.",35,data/crawl/squid/patch_114.diff
https://github.com/squid-cache/squid/commit/eaa5d9b367f44861a9fb55799c960ad4be74ca38,29 Oct 2015,Audit updates,37,data/crawl/squid/patch_115.diff
https://github.com/squid-cache/squid/commit/4a0fcd9b61eb72639e3f72dc4b3a0b4b977ff995,29 Oct 2015,"Add Locker friend class to SBuf for protection against memory issues

When appending or otherwise modifying an SBuf based on a SBuf& or char*
the parameter used may be pointing at the MemBlob memory buffer
indirectly without holding a separate ref-count lock to it.

If 'this' SBuf then requires reallocation for any reason the char* or
buffer pointer taken from the SBuf&, which is being manipulated may in
fact be left pointing at invalid memory.

Utilize a private Locker class to create relatively cheap ref-count locks
on the store_ MemBlob when this problem MAY occur. This Locker needs to
be used on all non-const SBuf methods accepting char* or SBuf& argument.",24,data/crawl/squid/patch_116.diff
https://github.com/squid-cache/squid/commit/2e198b84671ea61455bf48c266a8c1742ce46dcf,29 Oct 2015,"Rewrote ServerHello parsing using a [binary] tokenizer approach.

Added nearly-protocol-agnostic BinaryTokenizer that can extract numbers
(in the commonplace network byte order or big-endian format) and opaque
fixed-size areas. The new tokenizer supports incremental parsing via
commit points and rollbacks. It is meant to be ""safe"" and provide
helpful debugging of parsed [packet] fields.

Declare a few RFC 5246 structures (that we need to parse) as C++ structs
in a new Rfc5246 namespace. These structures know how to ""load""
themselves atomically using a BinaryTokenizer object.

Fixed SSL server parsing by separating record and ""higher-level"" layers.
Each layer has to be parsed using a dedicated tokenizer because
higher-level messages may be split across multiple record layer frames.

Parse and accumulate server certificates as we receive Certificate
messages.

This code is not fully polished and has several important XXXs and
TODOs.  Eventually, all SSL parsing code (at least) should be converted
to use BinaryTokenizer or equivalent.",788,data/crawl/squid/patch_117.diff
https://github.com/squid-cache/squid/commit/55369ae649646901d3038c63217386174d01eb7b,22 Oct 2015,"Fetch missing certificates.

Many web servers do not have complete certificate chains. Many browsers
use certificate extensions of the server certificate and download the
missing intermediate certificates automatically from the Internet.

This patch adds a similar feature to Squid:
   - Parse Server Hello messages and extract certificates chain.
   - Check whether the issuers of each certificate exist in the chain.
   - If not, retrieve the issuer certificate URI from Authority Info
     extension of the certificate (if it is provided) and download the
     certificate.
   - Store downloaded certificates in Squid object cache, just like any
     other HTTP object.

Implementation highlights:
  - A new Downloader class allows Squid subsystems to download objects
    via HTTP. These downloads are not backed by a proxy user.
  - Add support for an internal database of intermediate pre-loaded
    certificates to be used to complete incomplete chains.
  - Ssl::HandshakeParser parses TLS records and TLS Handshake messages.
  - Ssl::PeerConnector now uses the Downloader objects to download
    missing certificates.",1181,data/crawl/squid/patch_118.diff
https://github.com/squid-cache/squid/commit/cd6b1fd1bd9fc68574035857d649b85ba8713e3f,11 Oct 2015,"Support logformat %macros in external_acl_type format

Update the external_acl_type helper interface to use libformat and thus
make any logformat token valid in its format parameter field.

As a result much of the logic surrounding format code parsing, display
and helper query generation has been completely dropped. What remains is
a basic parse loop handling backward compatibility for the unusual
%CERT_* token syntax, space delimiter and field default encodings.


Extensions to logformat resulting from the merger:

* adds \-escape encoding of output fields

* allows {arg} field to be placed before or after the format code.

* extended to accept the old external_acl_type %macros. But not
  documented, these are deprecated and only for backward compatibility.

* extended to support outputting formats without a format-name prefix
  as was required by the original logformat config lines.


The major side effect of this change is that these ACLs now require
AccessLogEntry to be filled out with state data, rather than just the
ACLChecklist object members.

The requires*() mechanism of ACLChecklist has been extended to catch
some cases resulting from missing the ALE entirely. But it cannot catch
the more subtle problem of data members inside the ALE being unset.
To try and catch those a syncAle() mechanism has been added that fills
out missing ALE members and prints out debug warnings about the action.",993,data/crawl/squid/patch_119.diff
https://github.com/squid-cache/squid/commit/a87b56f3c1acc2ffdd35d60a82abf64ccfc30e7b,11 Oct 2015,"TLS: shuffle EECDH configuration to libsecurity

* add class ServerOptions to libsecurity to manage server specific
  configuration options. Based on class PeerOptions.

* shuffle the DH config parse and dump logics to ServerOptions

* shuffle the DH params pre-loading logic to ServerOptions

* add configuration warning when tls-dh= is used and overrides
  dhparams= logacy configuration. Also, auto-upgrade the config
  settings when dhparams= is dumped in mgr:config report.",357,data/crawl/squid/patch_120.diff
https://github.com/squid-cache/squid/commit/474f076ef246eb4c9acab986180d82dcafd3e583,10 Oct 2015,"Shuffle tls-dh= options to libsecurity

* create class ServerOptions derived from class PeerOptions to hold
  server-specific configuration settings.

* split DH, ECDH, and DH params settings during configuration instead of
  on every context initialization.",258,data/crawl/squid/patch_121.diff
https://github.com/squid-cache/squid/commit/fbdf945d33765c02929795b8354c6cdd55d67ba4,02 Oct 2015,Cleanup various spelling errors,22,data/crawl/squid/patch_122.diff
https://github.com/squid-cache/squid/commit/d1c95ddadcd9ee36e53af7edd6099a8c078ba2cf,01 Oct 2015,"Bug 4190: assertion 'hash_remove_link' from Auth::User::cacheCleanup

The hash_link based cache depends on raw-ptr key comparisons to store
hash entries. This does not work at all well with SBuf as the key,
since the backing MemBlob behind SBuf can change its memory location.

* replace the implementation of User credentials caching with an STL
  based container class that can handle SBuf.

* revert the global Auth::User cache design to per-scheme caches
  which get combined only when reporting statistics.

* add a RunnersRegistry helper class to control Squid startup,
  reconfigure, and shutdown events activity in regards to the caches.

* suppress useless cache garbage collection events when auth has no
  credentials to cleanup.

* make the cache key dynamic at the caller codes discretion.",670,data/crawl/squid/patch_123.diff
https://github.com/squid-cache/squid/commit/971003b0b122cfb0b48c21202e7b3cdd8374c785,26 Sep 2015,"Fix cache_peer login=PASS(THRU) after CVE-2015-5400

The patch for CVE-2015-5400 converts all non-200 peer responses
into 502 Bad Gateway responses when relaying a CONNECT to a peer.

This happens to break login=PASS and login=PASSTHRU behaviour
which relies on the 401 and 407 status being relayed transparently.

We need to relay the auth server responses as-is when login= is
set to PASS or PASSTHRU but then unconditionally close the
connections to prevent CVE-2015-5400 from occuring.",42,data/crawl/squid/patch_124.diff
https://github.com/squid-cache/squid/commit/342e1833d765f62dc4db17c8be4245477a9afd2c,25 Sep 2015,Bug 4208: more than one port in wccp2_service_info line causes error,9,data/crawl/squid/patch_125.diff
https://github.com/squid-cache/squid/commit/0caa282007102ca0fd2ee97178e222fadc1b3f8c,25 Sep 2015,Display username cache key in cache manager report,9,data/crawl/squid/patch_126.diff
https://github.com/squid-cache/squid/commit/53ae090f2fea326f8e1bd43dde79a45fddfc6d86,17 Sep 2015,ntlm_smb_lm_auth: ignore empty NTresponse field,37,data/crawl/squid/patch_127.diff
https://github.com/squid-cache/squid/commit/af845cee67e3dc2a58f93a9ac7d9ce091ea4fa00,11 Sep 2015,"Bug 4292: negotiate_wrapper: Unreleased Resources

FILE* handles need to be closed on exit. Shuffle the processing loop logics
to a static function to avoid code duplication from all the requires close
points.

Also, use the available global flag debug_enabled instead of local variable
to avoid having to pass it down explicitly.",337,data/crawl/squid/patch_128.diff
https://github.com/squid-cache/squid/commit/47567b73f7a2f951a1834bcb47cd72664374d8a5,07 Sep 2015,Bug 3618: ntlm_smb_lm_auth rejects correct passwords,40,data/crawl/squid/patch_129.diff
https://github.com/squid-cache/squid/commit/d21237557c861059520981bb99b42f54bc9d7ff7,03 Sep 2015,Migrate cachemgr action to UserNameCache,46,data/crawl/squid/patch_130.diff
https://github.com/squid-cache/squid/commit/9663db1c5b4d55566b19f220004aad2b0ee6c594,27 Aug 2015,"SourceLayout: shuffle MemMeter into libmem and Mem:: namespace

* move the memMeter.h file to src/mem/Meter.h

* move the helper #define macros logic to class members

* provide accessors to make all class members private

There are no logic changes in this patch.",265,data/crawl/squid/patch_131.diff
https://github.com/squid-cache/squid/commit/7224ca5ac5a4eda002c30089f9a461069aeb122d,24 Aug 2015,"When a RESPMOD service aborts, mark the body it produced as truncated.

Without these changes, the recipient of the truncated body often
cannot tell that the body was actually truncated (e.g., when Squid
uses chunked encoding for body delivery). Lying about truncation
may result in rather serious user-level problems.",61,data/crawl/squid/patch_132.diff
https://github.com/squid-cache/squid/commit/79ff80236e09df13be0d12a375704c753c313e85,22 Aug 2015,"TLS: failure of https:// context non-fatal for non-OpenSSL builds

Only OpenSSL library is 'guaranteed' to produce a TLS context at this point
in the conversion to library-agnostic security. Any others may produce
nothing.

Match the DBG_IMPORTANT used for debug level of the 'initializing' message.",7,data/crawl/squid/patch_133.diff
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/patch_134.diff
https://github.com/squid-cache/squid/commit/3d8ac9df111fc10164f436048aea85845eca80d1,31 Jul 2015,"Removed HeadersAttrs table, moved header statistics to headerStatsTable.",184,data/crawl/squid/patch_135.diff
https://github.com/squid-cache/squid/commit/fda6d769ab8fe2cc3dc01a5d52138428e5e1504f,31 Jul 2015,Migrate Http Header Fields stats to headerStatsTable,23,data/crawl/squid/patch_136.diff
https://github.com/squid-cache/squid/commit/597504bff07370f493d7150333cde579c9ee8b27,27 Jul 2015,"purge: convert metadata matching to std::regex

* converting the REList class to inline methods.
 - constructor now throws as a side effect of rexp member construction.

NOTE: uses std::regex_match for matching, which will only succeed if the
  pattern(s) given are designed to match the entire URL TLV data field.
  If this causes problems, move to regex_search which does not require
  prefix or suffix to match.",99,data/crawl/squid/patch_137.diff
https://github.com/squid-cache/squid/commit/2056c6a6b3b59f54afb222f73bcf9486ab6051ff,27 Jul 2015,purge: Convert squid.conf parser to std::regex,140,data/crawl/squid/patch_138.diff
https://github.com/squid-cache/squid/commit/cfd861ab1795a49dd64b715af3f92642fec68c32,25 Jul 2015,"Cleanup: refactor to remove various dead code

... detected by or confusing Coverity Scan.

These have been marked False Positive / Intentional earlier.
But long term the best fix is to simply clean out the dead code.",111,data/crawl/squid/patch_139.diff
https://github.com/squid-cache/squid/commit/858c5afb99c9594aaf3169f905da635ef8d74f96,13 Jul 2015,"Cleanup: Shuffle Squid result codes (aka log tags) into class LogTags

This begins the migration of result codes from enumeration to a
set of flags whih can combine into much more flexible logging of
transation activity than hard-coded labels enumerating every
individual code path.

The existing ABORTED and TIMEDOUT state flags are also moved into
the new class as an example of how such flags would operate.",284,data/crawl/squid/patch_140.diff
https://github.com/squid-cache/squid/commit/a981b36082d0a0da4ac819c3cc4430c137250ae3,12 Jul 2015,Shuffle _TIMEOUT and _ABORTED flags into class LogTags,66,data/crawl/squid/patch_141.diff
https://github.com/squid-cache/squid/commit/eaba9273ca0d18a75d12c1055b7ed12b8eb2e3df,10 Jul 2015,"Crypto-NG: Use Security::PeerOptions for listening port TLS settings

The bulk of this patch is symbol shuffling to de-duplicate the TLS
settings storage and parsing code.

* Shuffle relevant AnyP::PortCfg settings into a Security::PeerOptions
  member object.
 - removes a lot of duplicate config parsing code.

* Remove the now obsolete and unused Ssl::OpenSSLtoSquidSSLVersion()


The actual logic changes are relatively small:

* Shuffle flags= and options= parsing code from Ssl:: to
  Security::PeerOptions and update to use Tokenizer,
 - fixes performance regression using c_str() on the stored SBuf,
 - fixes performance issue with xstrdup() for option tokens,
 - removes several calls to c-string manipulation.

* Add cachemgr 'config' report dumper of Security::PeerOptions for use
  by all directives using it to dump tls-* parameter names. The old
  parameter names are still accepted, and deprecation will follow in a
  separate patch.
 - fixes bug where cache_peer was not dumping out its SSL/TLS config
  settings at all.

* Change the tls_outgoing_options default value from ""disable"" to setting
  TLS/1.0 minimum version.
  - fixes squid.conf parsing error on default value ""disable"".

* Fix tls-min-version=1.N handling not to alter stored options= config
  string. Now updates the binary representation in parsedOptions directly.

* Expose the TLS context creation and configuration to non-OpenSSL builds.
 - fixes bug where context creation by OpenSSL failed silently.",1036,data/crawl/squid/patch_142.diff
https://github.com/squid-cache/squid/commit/ee74db84d2cf476c8f4a1d4942eae9f94c677678,09 Jul 2015,c++-ize unlinkd,22,data/crawl/squid/patch_143.diff
https://github.com/squid-cache/squid/commit/4ac1880a33a31144592a93d95fff715d67a6bf05,09 Jul 2015,make dump_peer_options clearer (and address CID 740350),26,data/crawl/squid/patch_144.diff
https://github.com/squid-cache/squid/commit/c62717bdac6c981fd58c07ed38b49cd3852613f0,30 Jun 2015,"Move tls-options= parser into Security::PeerOptions

It no longer needs to be called by the SSL code, so can be a private
member without OpenSSL library dependency.

Also, remove c_str() performance regression by upgrading to use
::Parser::Tokenizer.",93,data/crawl/squid/patch_145.diff
https://github.com/squid-cache/squid/commit/8250ca31a53cf976d81e79834bbab85b76358398,30 Jun 2015,"Fix cachemgr 'config' report output for TLS options

Adds Security::PeerOptions::dumpCfg() method to output config
details for the peer TLS settings stored. Takes an optional
prefix string for the option parameters.
- uses prefix """" for tls_outgoing_options
- uses prefix ""tls-"" for https_port, http_port, and cache_peer
- displays ""tls-disable"" for directives without TLS settings.

Fixes missing cache_peer config output for TLS settings.

Fixes display of http(s)_port TLS settings 'ssl' prefix.

Fixes tls-min-version= internal operation to avoid polluting
tls-options= config settings.

Also, updates documentation mentions of ""SSL"" in debugs().",91,data/crawl/squid/patch_146.diff
https://github.com/squid-cache/squid/commit/74f35ca845c00f3b7a5bf97b23f19ce363fede25,28 Jun 2015,"Do not blindly forward cache peer CONNECT responses.

Squid blindly forwards cache peer CONNECT responses to clients. This
may break things if the peer responds with something like HTTP 403
(Forbidden) and keeps the connection with Squid open:
  -  The client application issues a CONNECT request.
  -  Squid forwards this request to a cache peer.
  -  Cache peer correctly responds back with a ""403 Forbidden"".
  -  Squid does not parse cache peer response and
     just forwards it as if it was a Squid response to the client.
  -  The TCP connections are not closed.

At this stage, Squid is unaware that the CONNECT request has failed. All
subsequent requests on the user agent TCP connection are treated as
tunnelled traffic. Squid is forwarding these requests to the peer on the
TCP connection previously used for the 403-ed CONNECT request, without
proper processing. The additional headers which should have been applied
by Squid to these requests are not applied, and the requests are being
forwarded to the cache peer even though the Squid configuration may
state that these requests must go directly to the origin server.

This fixes Squid to parse cache peer responses, and if an error response
found, respond with ""502 Bad Gateway"" to the client and close the
connections.",101,data/crawl/squid/patch_147.diff
https://github.com/squid-cache/squid/commit/ddd4edb743d82be97fc651d529e04bf55329a50d,22 Jun 2015,"Replace GNU atomics and related hacks with C++11 std::atomic

With C++11 atomic support by the stdlib is not optional. This
resolves issues determining whether GNU atomics are available,
operational 32-bit vs 64-bit, or cross-compiling (bug 4224).",283,data/crawl/squid/patch_148.diff
https://github.com/squid-cache/squid/commit/064679ea374d2f58ae4660d9a2af213b9be24bba,19 Jun 2015,"Bug 4269: ignore-must-revalidate broken

ignore-must-revalidate appears to prevent revalidation by disabling
storage of objects with must-revalidate/proxy-revalidate header.

However it was also preventing revalidation of objects cached due to
ignore-private, or the presence of no-cache, s-maxage, and use of auth
credentials.

Remove the violation option entirely.

Also cleanup the documentation of ignore-auth which was removed earlier.",58,data/crawl/squid/patch_149.diff
https://github.com/squid-cache/squid/commit/54fbe371a5e2b1ab6a78ea60b72581842817c969,19 Jun 2015,"Support Ephemeral Elliptic Curve Diffie-Hellman (EECDH) key exchange

Which allows for forward secrecy with better performance than traditional
ephemeral DH.

Also replaces http(s)_port dhparams= option with tls-dh= that takes a
curve name as well as filename for curve parameters.",109,data/crawl/squid/patch_150.diff
https://github.com/squid-cache/squid/commit/9136993377e9decfef076b4fa8b14ee03f4c8a09,11 Jun 2015,"Convert enum LogTags into class LogTags

- enum sequence re-typed to LogTags_ot
- logTagsIsATcpHit() function converted to method LogTags::isTcpHit()
- strings array lookup converted to method LogTags::c_str()
- constructors and assignment assure valid values, no more need for
  external asserts before logging.",173,data/crawl/squid/patch_151.diff
https://github.com/squid-cache/squid/commit/5c51bffba7a4fba9ef7b39f381d991e4e02ee490,09 Jun 2015,"Bug 1961 partial: Move HttpRequest host:port to class URL

Moves the host:port authority details into class URL for more
modular URI management. Add URL::authority() member to generate
authority-form URIs from the class URL stored details.

Also, shuffle urlDefaultPort() to AnyP::UriScheme::defaultPort()",626,data/crawl/squid/patch_152.diff
https://github.com/squid-cache/squid/commit/bf3e8d5a0de0f6f59996d1a8fb88402ba2273ede,05 Jun 2015,"SourceLayout: convert helper stats display to Packable API

Requires unifying the classes Helper::Request queues which incidentally
also brings stateful helpers closer to concurrency support",192,data/crawl/squid/patch_153.diff
https://github.com/squid-cache/squid/commit/9671c6b15fa50b5acb24c63c80c29eac88b347bd,02 Jun 2015,"Bug 3875: bad mimeLoadIconFile error handling

Improve the MimeIcon reliability when filesystem I/O errors or others
cause the icon data to not be loadable.

The loading process is re-worked to guarantee that once the
MimeIon::created callback occurs it will result in a valid StoreEntry in
the cache representing the wanted icon.

* If the image can be loaded without any issues it will be placed in
the cache as a 200 response.

* If errors prevent the image being loaded or necessary parameters
(size and mtime) being known a 204 object will be placed into the cache.


NP: There is no clear agreement on 204 being 'the best' status for this
case. 500 Internal Error is also appropriate. I have use 204 since:

* the bug is not in the clients request (eliminating 400, 404, etc),
* a 500 would be revealing details about server internals unnecessarily
   often and incur extra complexity creating the error page.
* 204 also avoids needing to send Content-Length, Cache-Control header
  and body object (bandwidth saving over 500 status).


NP: This started with just correcting the errno usage, but other bugs
promptly started appearing once I got to seriously testing this load
process. So far it fixes:
* several assertions resulting from StoreEntry being left invalid in
  cache limbo beween created hash entries and valid mem_obj data.
* repeated attempts on startup to load absent icons files which dont
  exist in the filesystem.
* buffer overfow on misconfigured or corrupt mime.conf file entries
* incorrect debugs messages about file I/O errors
* large error pages delivered when icons not installed (when it does
  not assert from the StoreEntry)",68,data/crawl/squid/patch_154.diff
https://github.com/squid-cache/squid/commit/75777642f21a186519599a5f62c4dae3df984c00,02 Jun 2015,Remove unused Atomic::Word and GNU atomics,171,data/crawl/squid/patch_155.diff
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/patch_156.diff
https://github.com/squid-cache/squid/commit/721dcff0234670725c0d081aae71fa333d463006,29 May 2015,Fix eCAP issues after rev.14093,6,data/crawl/squid/patch_157.diff
https://github.com/squid-cache/squid/commit/1071ffed56172406d771265af76d8273ffcdb89e,26 May 2015,"Replace Packer object API with Packable API

Majority of thost patch is symbol renaming to unify the
class method names to the Packable API names.

There is effectively no logical change in this patch
despite appearances because it replaces the Packer object
which provides methods which are just wrappers pointing
to static functions which are in turn wrappers pointing
to storage buffer object methods. With direct calls to
those storage object methods (renamed).

We can now interchangebly use MemBuf or StoreEntry objects
with the packInto(Packable *) functions. Or any other
object which inherits and implements the Packable API.

We also gain 0.1% in performance (+2 RPS) by avoiding the
layers of wrapper funcions and Packer object allocate / 
deallocate cycles.",1141,data/crawl/squid/patch_158.diff
https://github.com/squid-cache/squid/commit/0a647ffb7aae884369aeba0f1701a3b67a9b028c,26 May 2015,"Cleanu: Remove dead Packer API

Also includes some Packable API polishing. No logical changes.",164,data/crawl/squid/patch_159.diff
https://github.com/squid-cache/squid/commit/1cc44095e2effe69bd74291090c1b7b16cc33426,22 May 2015,"Replacement of sslversion=N by tls-min-version=1.N

Overall the default behaviour is changed from enumerating the protocols
wanted. To enumerating and eliminating the unwanted.


* sslversion= / version= parameter is removed from documentation.

* sslversion= code logics is converted from setting the SSL_*_method()
  function to setting the ssloptions= masking parameters.

Yes this will open a hole for future libraries use of TLSv1.3. However
that is kind of desirable and if it becomes a problem the
ssloptions=NO_TLSv1_3 should be made available.


* The SSL_*_method() logic is all converted to using the flexible
  TLS_*_Method() API when available (OpenSSL 1.1.0) otherwise the
  equivalent SSLv23_*_method() API is used.

That API follows the latest specification behaviour: to send a protocol
frame type that any recipient should be able to parse (library decides
which), while only negotiating the protocol type permitted.


* A new option tls-min-version=1.N is added to server connection
  directives. It controls *only* the TLS version range.

 - http(s)_port directives are not (yet) implemented using
   Security::PeerOptions. For now they are left with options= masking to
   select protocol support.

 - bug in http(s)_port directives version= parameter is fixed. The new
   backward compatibility code accepts version=4|5|6 where the existing
   code did not despite documentation saying it did.

 - SSLv3 is left at the library default unless ssloptions=NO_SSLv3 is used.


* ssloptions= is left alone so anyone can still set the library options
  masks to control SSLv3 enable/disable or specific TLS versions higher
  than the configured minimum.",390,data/crawl/squid/patch_160.diff
https://github.com/squid-cache/squid/commit/1fab834457cac20a8dd64038d0d5aa97dcff0ac9,18 May 2015,Fix build errors in rev.14057 and rev.14058,6,data/crawl/squid/patch_161.diff
https://github.com/squid-cache/squid/commit/154df539359ad4bd9bb3f0e32bb7ef90e9c68543,08 May 2015,"CacheMgr: display 'client_db off' instead of 0 clients accessing cache

... to clarify why there is no record of even the mgr request happening.
The cleint_db mechanism needs to be enabled and measuring traffci for
any useful client counter value to exist.",6,data/crawl/squid/patch_162.diff
https://github.com/squid-cache/squid/commit/bd74680720ec985b36a531a2a1cad2fd5fe26f1f,27 Apr 2015,Add vsnprintf() protection for vargs,15,data/crawl/squid/patch_163.diff
https://github.com/squid-cache/squid/commit/0f33a01dca1796a4d73eff791a911bb1fb709cc0,27 Apr 2015,"Make StoreEntry provide Packable interface

Preparation for removal of C-style storeAppendPrintf()
functions and Packer wrapper class.",57,data/crawl/squid/patch_164.diff
https://github.com/squid-cache/squid/commit/07e6d76ea0db1d2376afa03d7c487aacf08a4354,27 Apr 2015,Update libsquidssl.la MemBuf use,8,data/crawl/squid/patch_165.diff
https://github.com/squid-cache/squid/commit/07721490c3ad87e49ef952c07c6bbb0aa323b09b,27 Apr 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/patch_166.diff
https://github.com/squid-cache/squid/commit/f0be997f655ca85aac6aa4952d3d9fb15426a180,27 Apr 2015,"MemBuf implements Packable interface

... detatch it from Packer wrapper class",191,data/crawl/squid/patch_167.diff
https://github.com/squid-cache/squid/commit/7bf7db6d64ed65e25cd9ad5fd6014af05a59f7d7,27 Apr 2015,"Rename MemBuf::vPrintf to MemBuf::vappendf

... inline with the Packable API method name",16,data/crawl/squid/patch_168.diff
https://github.com/squid-cache/squid/commit/98ded0a1a8dc138cb83601afcbc8afd3090c42a2,27 Apr 2015,"Update Packable API to implement vappendf() method

The backend classes actually implement the vappendf()
base function receiving va_list args object.

The Printf() implementations are all duplicate code. So
provide that function in terms of a virtual vappendf().

vappendf() is incidentally the name used by SBuf API for
this operation and avoids the global vprintf() libc
definition.",23,data/crawl/squid/patch_169.diff
https://github.com/squid-cache/squid/commit/52d2fdc0183bf6f26b146e965c1e5f3b543a641c,26 Apr 2015,"Create Packable interface class

Packer class model used C-style function pointers and a standalone
object to perform C-style trampoline for function/method calls.

C++ virtual methods offer to inline all that directly in the data store
objects and enforces type safety on the child object methods instead of
forcing manual type casting on developers.

Re-implement Packer as a wrapper class providing the Packable interface
for backward compatibility with Packer* code. Future code should inherit
objects directly from Packable and implement the interface.",109,data/crawl/squid/patch_170.diff
https://github.com/squid-cache/squid/commit/47429c5a7a28ea74a659a6e37f4f174728b4a857,26 Apr 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/patch_171.diff
https://github.com/squid-cache/squid/commit/20148bf2fb019708e44acd7f0670818eb6535ede,22 Apr 2015,Revert rev.14029,44,data/crawl/squid/patch_172.diff
https://github.com/squid-cache/squid/commit/a9423eea589bc093dfb0e32deb5f34d2c635b89f,21 Apr 2015,CBDATA: use class Lock for reference counting,44,data/crawl/squid/patch_173.diff
https://github.com/squid-cache/squid/commit/b97421d24bb568febfcd9f7d78909e3fc435f131,28 Mar 2015,"Parser-NG: Convert the ICAP read buffer to an SBuf.

* Remove the double-buffering hack used to comm_read() ICAP responses as
  c-string then convert to MemBuf for parsing.

* Revert the HttpMsg parser API from MemBuf to c-string parameters.
  The internals did not make much use of the MemBuf abilities and it is
  simpler to retrieve c-string values directly from an SBuf than to go
  via a MemBuf conversion.",256,data/crawl/squid/patch_174.diff
https://github.com/squid-cache/squid/commit/9a622f3eb79658cde733cdecf2aa6419a64fcf86,27 Mar 2015,Use Security::PeerOptions in AnyP::PortCfg for basic TLS config,207,data/crawl/squid/patch_175.diff
https://github.com/squid-cache/squid/commit/b24e9ae70856a19ae8b79c764d456518ae0cf4fb,26 Mar 2015,"Move Ssl::parse_flags to Security::ParseFlags

... in preparation for making PeerOptions used by both server and client
configuation.",153,data/crawl/squid/patch_176.diff
https://github.com/squid-cache/squid/commit/52ba2948d72109726b47c34470a4334151766aa1,26 Mar 2015,"Fix Squid crash while an error page generated

When squid generated an error page which contains the ""%m"" formating code
but the authentication information is not available squid dies with
segfault.

This is a Measurement Factory project",5,data/crawl/squid/patch_177.diff
https://github.com/squid-cache/squid/commit/6bd62757606d944e54904bfc8555fcbece9958a6,21 Mar 2015,"Shuffle Ssl::parse_options to Security::ParseOptions

The function itself is generic, the options array entries are all
conditional so library agnostic.

Adjust the context creation functions to receive pre-parsed options
instead of the string to avoid circular dependency between libsquidssl
and libsecurity.",444,data/crawl/squid/patch_178.diff
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/patch_179.diff
https://github.com/squid-cache/squid/commit/10201568d9c80bb89cbe628c07dd043d72d20b50,04 Mar 2015,"MemBuf implements Packable interface

... detatch it from Packer wrapper class",191,data/crawl/squid/patch_180.diff
https://github.com/squid-cache/squid/commit/8ed3716ac1fe69ffcb051ff0972daa4ac2aba954,03 Mar 2015,"Rename MemBuf::vPrintf to MemBuf::vappendf

... inline with the Packable API method name",16,data/crawl/squid/patch_181.diff
https://github.com/squid-cache/squid/commit/7ea88f0a88ed01623e2ef6ce608adc6701d590c4,03 Mar 2015,"Update Packable API to implement vappendf() method

The backend classes actually implement the vappendf()
base function receiving va_list args object.

The Printf() implementations are all duplicate code. So
provide that function in terms of a virtual vappendf().

vappendf() is incidentally the name used by SBuf API for
this operation and avoids the global vprintf() libc
definition.",23,data/crawl/squid/patch_182.diff
https://github.com/squid-cache/squid/commit/d570dc5327a14de7349facb96f0b3217ee98b4ac,03 Mar 2015,"Create Packable interface class

Packer class model used C-style function pointers and a standalone
object to perform C-style trampoline for function/method calls.

C++ virtual methods offer to inline all that directly in the data store
objects and enforces type safety on the child object methods instead of
forcing manual type casting on developers.

Re-implement Packer as a wrapper class providing the Packable interface
for backward compatibility with Packer* code. Future code should inherit
objects directly from Packable and implement the interface.",109,data/crawl/squid/patch_183.diff
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/patch_184.diff
https://github.com/squid-cache/squid/commit/f1a5d07184dcb26486e83590f9993d16b5de05fa,23 Feb 2015,"Remove cache_peer_domain directive

Identical functionality is provided through cache_peer_access.

While this check appears at face value to be simpler than ACLs, the
reality is that:
* the difference is simply the time it takes to initialize and destruct
  an on-stack Checklist,
* processing the checks may take longer than ACLs (linked-list of string
  comparisons vs single tree lookup),
* ACLs are the common case due to their extra flexibility, and
* extra work is being done per-transaction just to check which of the
  two features is in use.

By removing we gain less code and configuration directives to work
around in the long term.",163,data/crawl/squid/patch_185.diff
https://github.com/squid-cache/squid/commit/03714d23847ca8af08fa88c8f342b56269f0ca0f,19 Feb 2015,Implemented selective debugs() output for unit tests,44,data/crawl/squid/patch_186.diff
https://github.com/squid-cache/squid/commit/1ea677a6251194950bf0d82901fc87e1be5e6a38,19 Feb 2015,"basic_nis_auth: fail authentication on crypt() failures

... instead of crashing the helper.

""
Starting with glibc 2.17 (eglibc 2.17), crypt() fails with EINVAL (w/
NULL return) if the salt violates specifications. Additionally, on
FIPS-140 enabled Linux systems, DES or MD5 encrypted passwords passed to
crypt() fail with EPERM (w/ NULL return).
""",14,data/crawl/squid/patch_187.diff
https://github.com/squid-cache/squid/commit/d94cbaa8133459501d384c03f2fdc266704a4b34,12 Feb 2015,"HTTP/1.1: Remove refresh_pattern ignore-auth violation

The original intent for this option was to improve caching. However
HTTP/1.1 permits caching of authenticated messages under conditions
which Squid does check for and obey already.

The legacy popularity of this option from old Squid without the HTTP/1.1
compliant behaviour is now just forming a security and privacy abuse.",30,data/crawl/squid/patch_188.diff
https://github.com/squid-cache/squid/commit/0203ae29639d7be6eae2a316131174019c6fcfee,08 Feb 2015,Bug 4176: Digest auth too many helper lookups,15,data/crawl/squid/patch_189.diff
https://github.com/squid-cache/squid/commit/719815a0a35087094f0254e9c5b77fc1ca6ac297,01 Feb 2015,"Cleanup: migrate CachePeer to CBDATA_CLASS API

Replace the alloc/free for CachePeer with new/delete from
the CBDATA_CLASS API.

Shuffle class member default values to constructor.

Shuffle class cleanup code from the (3!) different mechanisms
where it was being done to the class destructor. Also
releasing some memory which was previously leaked on
reconfigure.

Drop the now unused CBDUNL type definition and peerDestroy()
cleanup handler for CachePeer.",222,data/crawl/squid/patch_190.diff
https://github.com/squid-cache/squid/commit/a5ea775169885e224f977702e8a759c4044b868a,31 Jan 2015,"Per-rule refresh_pattern matching statistics

.. to make it blindingly obvious from the cachemgr report which rules
are completely useless. Such as when the global dot pattern (.) is
placed ahead of custom rules, or one rules pattern is always a subset
of an earlier pattern.

This also allows sysadmin to tune refresh_pattern ordering so most
commonly matching rules are first.",26,data/crawl/squid/patch_191.diff
https://github.com/squid-cache/squid/commit/e8fd04de7b757db01f11b2ba8aa7d091e287b7b0,31 Jan 2015,"Stop emitting (Proxy-)Authentication-Info for Negotiate

This header is not defined for use by RFC 4559, and there seem to
be no clients actually using it.

The syntax Squid was using to emit the details was also clashing
with the syntax defined for use in Digest which is becoming the
standardized ABNF syntax for the header in general.",22,data/crawl/squid/patch_192.diff
https://github.com/squid-cache/squid/commit/84ae6223b79d41ce4918928b6374baccc72c4e80,25 Jan 2015,"Revert HttpMsg::parse API from MemBuf to c-string

It is simpler and more performant to incrementally convert the I/O
buffers to SBuf using c-string export to legacy code than MemBuf.

HttpMsg::parse API did not really make much use of MemBuf, so we can
remove that and avoid performance regressions later in ICAP I/O buffer
conversion.",263,data/crawl/squid/patch_193.diff
https://github.com/squid-cache/squid/commit/dbf55289570fd9d516da2324993e4bceea73eeaa,21 Jan 2015,"Moved PID file management from Coordinator to Master.

This move is the first step necessary to avoid the following race condition
among PID file deletion and shared segment creation/destruction in SMP Squid:

  O1) The old Squid Coordinator removes its PID file and quits.
  N1) The system script notices Coordinator death and starts the new Squid.
  N2) Shared segments are created by the new Master process.
  O2) Shared segments are removed by the old Master process.
  N3) New worker/disker processes fail due to missing segments.

TODO: The second step (not a part of this change) is to delete shared memory
segments before PID file is deleted (all in the Master process after this
change).


Now the Master process receives signals and is responsible for forwarding them
to the kids.

The kids does not install default signal handler for shudown signals (SIGINT,
SIGTERM) after a signal received. If a second shutdown signal is received then
squid imediatelly terminates the event loop and exits.

When the ""kill-parent-hack"" is enabled the kids are sending the kill signal
to master process and master process forward it to other kids too.

Also a small regression added: The PID file can no longer be renamed using
hot reconfiguration. A full Squid restart is now required for that.

This is a Measurement Factory project.",424,data/crawl/squid/patch_194.diff
https://github.com/squid-cache/squid/commit/6b634dc323fdfd75bac737a38faeb171fce705df,20 Jan 2015,Bug 4066: Digest auth nonce indefinite rollover,19,data/crawl/squid/patch_195.diff
https://github.com/squid-cache/squid/commit/32d3025c499ae188ac8cc3e67175356b1c5aee54,19 Jan 2015,Portability: Make strict compilers happier with rev.13860,2,data/crawl/squid/patch_196.diff
https://github.com/squid-cache/squid/commit/efc238716eb68db2888faac60423184a894f5483,18 Jan 2015,"Support rotate=N option on access_log

Add a rotate=N option to access_log directive to set per-log what the
retained log count will be. At present it is only used by the stdio:
logging module, which is also the only one to use logfile_rotate
directive.

If this option is absent (as will be the common case) the log rotation
defaults to using the value of logfile_rotate directive.

Also, add missing dump output of other access_log options if they differ
from the defaults.

The use-cases for this are:

1) Unix fifo logging requires all the stdio: module operations except
that the normal rotate/rename operation is NOT performed on the fifo
socket. It makes more sense to add this option which can also meet case
#2 than to create a whole new module just for fifo.

2) managing only some access_log files with a third-party log manager.
Those specific logs need rotate=0, but the Squid managed logs may
require non-0 values.",88,data/crawl/squid/patch_197.diff
https://github.com/squid-cache/squid/commit/3248e962c06e59482489d3b903064ab9ff732ad4,16 Jan 2015,"Non-HTTP bypass

Intercepting proxies often receive non-HTTP connections. Squid cannot currently
deal with such connections well because it assumes that a given port receives
HTTP, FTP, or HTTPS traffic exclusively. This patch allows Squid to tunnel
unexpected connections instead of terminating them with an error.

In this project, we define an unexpected connection as a connection that
resulted in a Squid error during first request parsing. Which errors trigger
tunneling behavior is configurable by the admin using ACLs.

Here is a configuration sketch:

  # define what Squid errors indicate receiving non-HTTP traffic:
  acl foreignProtocol squid_error ERR_PROTOCOL_UNKNOWN ERR_TOO_BIG

  # define what Squid errors indicate receiving nothing:
  acl serverTalksFirstProtocol squid_error ERR_REQUEST_START_TIMEOUT

  # tunnel everything that does not look like HTTP:
  on_first_request_error tunnel foreignProtocol

  # tunnel if we think the client waits for the server to talk first:
  on_first_request_error tunnel serverTalksFirstProtocol

  # in all other error cases, just send an HTTP ""error page"" response:
  on_first_request_error respond all

  # Configure how long to wait for the first byte on the incoming
  # connection before raising an ERR_REQUEST_START_TIMEOUT error.
  request_start_timeout 5 seconds

The overall intent of this TCP tunnel is to get Squid out of the communication
loop to the extent possible. Once the decision to tunnel is made, no Squid
errors are going to be sent to the client and tunneled traffic is not going to
be sent to Squid adaptation services or logged to access.log (except for a
single summary line at the end of the transaction). Connection closure at the
server (or client) end of the tunnel is propagated to the other end by closing
the corresponding connection.

This patch also:

 Add ""on_first_request_error"", a new ACL-driven squid.conf directive that can
be used to establish a blind TCP tunnel which relays all bytes from/to the
intercepted connection to/from the intended destination address. See the sketch
above.
The on_first_request_error directive supports fast ACLs only.

 Add ""squid_error"", a new ACL type to match transactions that triggered a given
Squid error. Squid error IDs are used to configure one or more errors to match.
This is similar to the existing ssl_error ACL type but works with
Squid-generated errors rather than SSL library errors.

 Add ""ERR_PROTOCOL_UNKNOWN"", a Squid error triggered for http_port connections
that start with something that lacks even basic HTTP request structure. This
error is triggered by the HTTP request parser, and probably only when/after the
current parsing code detects an error. That is, we do not want to introduce
new error conditions, but we want to treat some of the currently triggered
parsing errors as a ""wrong protocol"" error, possibly after checking the parsing
state or the input buffer for some clues. There is no known way to reliably
distinguish malformed HTTP requests from non-HTTP traffic so the parser has
to use some imprecise heuristics to make a decision in some cases.
In the future, it would be possible to add code to reliably detect some popular
non-HTTP protocols, but adding such code is outside this project scope.

 Add ""request_start_timeout"", a new squid.conf directive to trigger a new
Squid ERR_REQUEST_START_TIMEOUT error if no bytes are received from the
client on a newly established http_port connection during the configured
time period. Applies to all http_ports (for now).

No support for tunneling through cache_peers is included. Configurations
that direct outgoing traffic through a peer may break Squid.

This is a Measurement Factory project",819,data/crawl/squid/patch_198.diff
https://github.com/squid-cache/squid/commit/ced8def38409d2e3f76af4428a823678e46d24eb,01 Jan 2015,"Cleanup: fix most 'unused parameter' warnings

... and several bugs hidden by lack of this check:

* url_rewrite_timeout parser/dumper using wrong cf.data.pre
  parameter definition.

* url_rewrite_timeout parser/dumper using wrong object for
  state data.
  Global a Config object instead of parameter object.
  Preventing future use of multiple Config objects. There is
  more to be done as the Timeout value itself is not stored
  as part of the object apparently detailing the timeout.

* request_header_add directive dump() omitting directive
  name in mgr:config output.

* dead code as HTCP packet handlers for NOP, MON, SET

* mime icons download operation incorrectly initialized.
  was using the 'view' access parameter to set download
  access permission.

* peerCountHandleIcpReply() assertions testing validity
  after pointers already used. This would lead to segfault
  on errors, now leading to assertion logging.


Only the default built code was checked and updated at this
time. There are 62 known warnings still appearing due to
parameters being only used inside conditional code, possibly
more issues in code not enabled in this build and certainly
a lot more in the stubs and unit tests which were not checked.",786,data/crawl/squid/patch_199.diff
https://github.com/squid-cache/squid/commit/836a7ffc27f7934243c8f54aaf95f157d99b1898,31 Dec 2014,ntlm_sspi_auth: convert to new base64 API,40,data/crawl/squid/patch_200.diff
https://github.com/squid-cache/squid/commit/24804af2c9929f4bda4281d36dfdfacfd20cbb6b,31 Dec 2014,"negotiate_sspi_auth: fix various build errors

* fix convenience library dependency detection

* convert to new base64 coding API

* remove goto's",81,data/crawl/squid/patch_201.diff
https://github.com/squid-cache/squid/commit/bb64d87960915b8f4e5ba159049d5c9d5e545e01,30 Dec 2014,Fix 'field precision specifier '.*' expects argument of type 'int',20,data/crawl/squid/patch_202.diff
https://github.com/squid-cache/squid/commit/af31a408c4a907380323bc81b31790fbdebb4f6b,30 Dec 2014,ntlm_fake_auth: fix compile errors after rev.13785,6,data/crawl/squid/patch_203.diff
https://github.com/squid-cache/squid/commit/aadbbd7d080ef1662bfd7ea568edbb29f25fdd72,30 Dec 2014,"Crypto-NG: Base64 crypto replacement

The existing Squid base64 code had ambiguous copyright licensing. In
particular it only referenced a dead URL for source copyright
ownership details. In all likelihood this was for an Open Source
implementation, but we dont have sufficient record of the original
license terms to be certain without a long investigation.

It has also been heavily modified and customized over the decades
since importing whih complicates the issue a lot.

It also does not match any of the common industry context-based API
patterns for encoders/decoders.


This patch replaces that logic with GPLv2 licensed code from the
Nettle crypto library. Either linking the library dynamically or in
its absence embedding the logic via our libmiscencoding library.

It also updates all code to the new API, and as a byproduct removes
several layers of deprecated wrapper functions which have grown in
over the years.",839,data/crawl/squid/patch_204.diff
https://github.com/squid-cache/squid/commit/44ad873e32fc005ee66dbc96828dc5e4301f449a,30 Dec 2014,Simplified MSNT basic auth helper,1113,data/crawl/squid/patch_205.diff
https://github.com/squid-cache/squid/commit/f53969cc1ff3aecd36eeb25487e8f668862ed49e,20 Dec 2014,SourceFormat Enforcement,14329,data/crawl/squid/patch_206.diff
https://github.com/squid-cache/squid/commit/1de9145cbe289e2883c184ca6799be8be097207a,20 Dec 2014,Rip out most of the configuration file logic,230,data/crawl/squid/patch_207.diff
https://github.com/squid-cache/squid/commit/685277d8fcb4ba6b1f1a66a634937764c31744d4,19 Dec 2014,"negotiate_kerberos_auth: MEMORY keytab and replay cache support

1) Checks for MEMORY: keytab support and reads the keytab from disk into
   MEMORY to improve performance (i.e. read keytab only at startup and
   nerver again)

2) Add option for replay cache type. Allows to set replay cache to none
   to improve performance ( may reduce security a bit )

3) Add option for replay cache directory.  If /var/tmp is not the best
   location you can choose a different location.",492,data/crawl/squid/patch_208.diff
https://github.com/squid-cache/squid/commit/98340a7b8aeafac88486185909cb35d8e12830f8,16 Dec 2014,"Bug 4164: SEGFAULT when %W formating code used in errorpages

Squid will crash inside ErrorState::Dump if not authentication configured for 
squid. In this case ErrorState::auth_user_request is NULL and trying to access
a method of this object will cause segfault to squid.",2,data/crawl/squid/patch_209.diff
https://github.com/squid-cache/squid/commit/5de5c2d0686b91fabccbdab4a612a7db2e325037,05 Dec 2014,"HTTP/2: handle 'PRI' method found in HTTP/1.x traffic

draft-ietf-httpbis-http2-16 section 11.6 registers the method PRI.
""
  This method is never used by an actual client.
  This method will appear to be used when an HTTP/1.1 server or
  intermediary attempts to parse an HTTP/2 connection preface.
""

If seen with a non-2.0 version number it means some client or proxy has
mishandled an HTTP/2.0 connection preface and corrupted the traffic.",11,data/crawl/squid/patch_210.diff
https://github.com/squid-cache/squid/commit/32fd6d8a226663eb89ddd797ab6c5f3dc2e2d9dd,04 Dec 2014,"url_rewrite_timeout directive

This patch adds the url_rewrite_timeout directive.

When configured, Squid keeps track of active requests and treats timed out
requests to redirector as failed requests. 

url_rewrite_timeout format:

  url_rewrite_timeout timeout time-units on_timeout=<fail|bypass|retry|use_configured_response> [response=<quoted-string>]

The url_rewrite_timeout directive can accept the on_timeout argument to allow
user configure the action when the helper request times out.
The available actions are:

     fail: squid return a ERR_GATEWAY_FAILURE error page
     bypass: the url is not rewritten.
     retry: retry the request to helper
     use_configured_response: use a response which can be configured using the
         the response= option

Example usage:
    url_rewrite_timeout 30 seconds \
        on_timeout=use_configured_response \
        response=""OK url=http://example.com/support""

This is a Measurement Factory project",535,data/crawl/squid/patch_211.diff
https://github.com/squid-cache/squid/commit/f0174f5b12ac8b7f51baefffac9bea21e2a6196a,01 Dec 2014,"FTP FEAT error handling

Some FTP severs respond to a FEAT command with 5xx status code. Squid sends 
an invalid response in these cases which can confuse the client.

This patch fixes Squid to always send a valid 211 reply to client which
lists at least the EPSV and EPRT ftp commands which supported by Squid
regardless of the origin server support.

This patch also fixes a memory leak when FEAT replies processed.

This is a Measurement Factory project",84,data/crawl/squid/patch_212.diff
https://github.com/squid-cache/squid/commit/d48fa91ca3ac6e2fecbdf0aaabac1bfc5a29722e,01 Dec 2014,Add statistics couting for missing mem_obj (bug 4131),5,data/crawl/squid/patch_213.diff
https://github.com/squid-cache/squid/commit/01bd87d861361032aeb9f8bfda938581bfa43101,20 Nov 2014,"Logging fast things

In many cases HITs logged with zero response times. The logging entries are
correct, those transaction took less than a millisecond. However, to better
monitor Squid performance and to optimize things further, a user may want to
see more precise response time measurements logged.

Squid already computes response times with microsecond resolution
(timeval::tv_usec), which would be enough for any modern measurement, but
Squid loses that precision due to tvSubMs conversion.

This patch add configurable ""precision"" for time-related fields such as %tr,
using a .n syntax similar to the syntax used by the well-known printf(3) API
to mean ""maximum field width"".

Examples:
  %tr   -- 0 -- millisecond precision (no change compared to today)
  %.3tr -- 0.123 -- microsecond precision (after this project)
  %.6tr -- 0.123456 -- nanosecond precision (year 2050 trading platform??)

This is a Measurement Factory project",238,data/crawl/squid/patch_214.diff
https://github.com/squid-cache/squid/commit/6825b101b1773a3f5abcdc00010cdbce03cb5d63,09 Nov 2014,"Make helper queue size configurable, with consistent defaults and better overflow handling.

This patch adds a queue-size=N option to helpers configuration. This
option allows users to configure the maximum number of queued requests
to busy helpers. We also adjusted the default queue size limits to be
more consistent across all helpers and made Squid more robust on some
queue overflows:

- external_acl helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows, then the ACL returns ACCESS_DUNNO.

    Unpatched code uses the number of running children as the maximum
    queue size. If the queue is overloaded, then the ACL returns ACCESS_DUNNO.

-redirector/storeID helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows and redirector_bypass configuration option
    is set, then redirector is bypassed. Otherwise, if overloading
    persists for more than 3 minutes squid quits with a FATAL message.
    If the redirector_bypass/storeID_bypass is set then the default queue_size
    is set to 0 for backward compatibility.

    Unpatched code uses 2*number-of-running-children as the maximum queue size.
    If the redirector_bypass/storeID_bypass is set then helper bypassed if all
    of the children are busy.
    If the queue is overloaded and redirector_bypass/storeID_bypass is not set
    then squid quits with a FATAL message.

- ssl_crtd/ssl_crtd_validator helpers.
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows, then helpers are bypassed. If overloading persists
    for more than 3 minutes squid quits with a FATAL message.

    The default size limit and overflow behavior has not changed.

- Authentication helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows and overloading persists for more than 3 minutes,
    then squid quits with a FATAL message.

    The default size limit and overflow behavior has not changed.

This is a Measurement Factory project",321,data/crawl/squid/patch_215.diff
https://github.com/squid-cache/squid/commit/c7a9b22c5af49f4f398d3924d0842d59c886790b,07 Nov 2014,"Parser-NG: HTTP Parser structural redesign

This update is to lay the groundwork for several planned future projects
implementing protocol specific parsers, seperating the currently
intertwinned client connection management and HTTP protocol parsing
logics, and for zero-copy processing of transactions using SBuf.


This patch renames the HttpParser class as RequestParser and moves it
into the Http::One:: namespace as child of an Http::Parser class with
generic API accessors for shared use by other HTTP message parsers.

The class API
 - is updated to process both the request-line and HTTP mime headers,
returning an incomplete parse result until the entire headers parts of
the message have been received.
 - now contains accessor methods for retrieving the method, URI,
protocol, mime headers block (as an SBuf) and some metrics about those.
 - the old request_offsets structure and similar offset details are no
longer exposed.
 - now emits 414 and 431 HTTP status codes as appropriate.

The parser is made partially incremental and some use of Tokenizer is
added for faster parsing. There is more that can be done to further
speed up parsing of slow or very large requests.

Much of the code from client_side.cc parseHttpRequest() and also the
header-field code from mime_headers.cc has been moved into the parser
class. The client_side.cc code now simply runs the main
Http1::RequestParser::parse() method then uses accessors to retrieve
and process the parse results.

A unit test for incremental parsing has been added to testHttpParser.

Also, the HttpRequestMethod class is moved into the Http:: namespace and
library to reduce dependencies on the parser class outside the library.


The gains made so far from incremental parse, reducing parser passes and
zero-copy SBuf are offset by several temporary performance regressions
added converting SBuf for legacy code use. These are marked for later
removal.",4803,data/crawl/squid/patch_216.diff
https://github.com/squid-cache/squid/commit/92d6986ddb6efce85370f6bcf446cdfc53046e9f,04 Nov 2014,"Bug 1961 part 2: redesign of URL handling.

Move the HttpRequest::login detail into class URL. Renaming to userInfo
as per the RFC 3986 defined name for this URI piece.

Convert the details to SBuf gaining several minor str*() removals in
the process and a simpler FTP login parser based on SBuf capabilities.

Also, updated the base64 encoder API used for converting between URI
userInfo and Basic authentication header token. Gaining better control
over the length of maximum token size and a small speedup from pre-known
input length.",188,data/crawl/squid/patch_217.diff
https://github.com/squid-cache/squid/commit/7451e5ad6ac9da02c6325c81faaaa7a0d2e4d6a7,29 Oct 2014,"ext_kerberos_ldap_group_acl: -n option to disable automated SASL/GSSAPI

The -n option disables the automated Kerberos authentication
(SASL/GSSAPI) to AD and requires username/password (SASL/SIMPLE)
instead.

Also, improvements in caching Kerberos credentials for setup with low
Squid cache TTL.",670,data/crawl/squid/patch_218.diff
https://github.com/squid-cache/squid/commit/2eb6054faf2503474cb500cdc4cb87aed073744b,29 Oct 2014,"negotiate_kerberos_auth: output group= kv-pair

Output group= if negotiate_kerberos_auth can retrieve AD groups from
Kerberos ticket for further processing by squid to external helpers.",24,data/crawl/squid/patch_219.diff
https://github.com/squid-cache/squid/commit/3c26b00aa3a2d8b515af363d289113d5f4726049,07 Oct 2014,"sslproxy_cert_sign_hash configuration option

Browser vendors will get rid of SSL certificates that use SHA-1 to generate
the hash that is then signed by the CA. For example, Google Chrome will start
to show an ""insecure"" sign for certificates that are valid after 1.1.2016 and
will generate a warning page for certificates that are valid after 1.1.2017 [1],
[2],[4]. Microsoft will block certificates with SHA-1 after 1.1.2017 [3].

This patch:
  1) Add a new configuration option to select the signing hash for
     generated certificates: sslproxy_cert_sign_hash.

  2) If sslproxy_cert_sign_hash is not set, then use the sha256 hash.

[1] https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/2-R4XziFc7A/YO0ZSrX_X4wJ
[2] https://code.google.com/p/chromium/issues/detail?id=401365
[3] http://blogs.technet.com/b/pki/archive/2013/11/12/sha1-deprecation-policy.aspx
[4] http://googleonlinesecurity.blogspot.ch/2014/09/gradually-sunsetting-sha-1.html 

This is a Measurement Factory project",68,data/crawl/squid/patch_220.diff
https://github.com/squid-cache/squid/commit/a74922b5dae83c00ec62fa9b3fafad4af432f4f4,03 Oct 2014,"Windows: remove alternative main()

As a side effect this causes Windows builds to use the wrapper function
for handling exceptions.",63,data/crawl/squid/patch_221.diff
https://github.com/squid-cache/squid/commit/fccd4a86cb1e76445cac533fe0ef10aa55273189,22 Sep 2014,"Cleanup: rename ServerStateData to Client

* rename class

* move Server.* to clients/Client.*",194,data/crawl/squid/patch_222.diff
https://github.com/squid-cache/squid/commit/bbc27441269e19c5308f829a7656d52ee6b7cfef,13 Sep 2014,Boilerplate: update copyright blurbs on src/,23490,data/crawl/squid/patch_223.diff
https://github.com/squid-cache/squid/commit/6e96d41538a60ced489d2d3e226117768d0ceaba,02 Sep 2014,"Support receiving PROXY protocol version 1 and 2.

PROXY protocol has been developed by Willy Tarreau of HAProxy for
communicating original src and dst IP:port details between proxies and
load balancers in a protocol-agnostic way.

stunnel, HAProxy and some other HTTP proxying software are already
enabled and by adding support to Squid we can effectively chain these
proxies without having to rely on X-Forwarded-For headers.

This patch adds http_port mode flag (require-proxy-header) to signal the
protocol is in use, parsing and processing logics for the PROXY protocol
headers on new connections, and the proxy_protocol_access control to
manage inbound connections.
 The indirect client security/trust model remains unchanged. As do all
HTTP related logics on the connection once PROXY protocol header has
been received.


Furture Work:
 * support sending PROXY protocol to cache_peers
 * support receiving PROXY protocol on https_port
 * rework the PROXY parse logics as a Parser-NG child parser.",1337,data/crawl/squid/patch_224.diff
https://github.com/squid-cache/squid/commit/091c880dd2237fd4f0bc7f549736bd1caf0a580b,27 Aug 2014,"SSL Peek and Splice

The goal of this patch is to make SSL bumping decision after the origin server
name is known.

Peek and Splice peeks at the SSL client Hello message and SNI info if any 
(bumping step 1), sends identical or a similar Hello message to the SSL server
 and peeks at the SSL server Hello message (bumping step 2), and finally
decides to proceed with splicing or bumping the connection (bumping step 3).

After the step 1 bumping step completes the SNI information is available and
after the step 2 bumping step completes the server certificate is available.

The ssl_bump access list evaluated on every bumping step to select the bumping
mode to use. The new acl ""at_step"" can be used to match the current bumping
step.

In most cases:
 - if the user select ""peek"" bumping mode at step2 then at step3 can select
   one of the ""splice"" or ""terminate"" modes.
 - If the user select ""stare"" bumping mode at step2 then at step 3 can select
   one of the ""bump"" or ""terminate"" modes.

If the squid built with the SQUID_USE_OPENSSL_HELLO_OVERWRITE_HACK and the 
client uses openSSL library similar to the library used by squid then bumping 
is possible after ""peek"" bumping mode selection and ""splice"" after ""stare""
bumping mode selection.

The bump, terminate and splice are final decisions.

Example configurations:

acl step1 at_step  SslBump1
acl step2 at_step  SslBump2
acl step3 at_step  SslBump3

ssl_bump peek step1 all
ssl_bump splice step2 BANKS
ssl_bump peek step2 all
ssl_bump terminate step3 BLACKLIST
ssl_bump splice step3 all

This is a Measurement Factory project",2317,data/crawl/squid/patch_225.diff
https://github.com/squid-cache/squid/commit/c6649f6c62f90053f0bf0f162918a94f1d763b3d,26 Aug 2014,merge from trunk,14018,data/crawl/squid/patch_226.diff
https://github.com/squid-cache/squid/commit/22473932f193f6b98c0fff16f1d24159c844275d,23 Aug 2014,Cleanup: remove goto from logformat token parser,197,data/crawl/squid/patch_227.diff
https://github.com/squid-cache/squid/commit/3ac5bd881bf4eda91a239a9db7734be91d360822,23 Aug 2014,Sync with trunk rev.13542,101061,data/crawl/squid/patch_228.diff
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/patch_229.diff
https://github.com/squid-cache/squid/commit/154ea56667e82cf7217580817f9088397a86a694,13 Aug 2014,"Rearrange PROXY/1.0 parser

Add a first pass to confirm LF line terminator and wait for more bytes if
missing.",46,data/crawl/squid/patch_230.diff
https://github.com/squid-cache/squid/commit/1689cdbc1355cd1281cd3bdc791c1b13cec462fe,12 Aug 2014,Performance optimizations and polish,92,data/crawl/squid/patch_231.diff
https://github.com/squid-cache/squid/commit/8cb327e93a064e9886ccb57a4a85088976fe86c2,11 Aug 2014,"Fixed reporting of malformed -n values on the command line.

Test case: $ squid -n ' '
FATAL: Expected alphanumeric service name for the -n option but got: squid",6,data/crawl/squid/patch_232.diff
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/patch_233.diff
https://github.com/squid-cache/squid/commit/8f5ad4487a052db1dddea37d5867b8844e69dce4,10 Aug 2014,"Changes in response to Amos' squid-dev review dated 2014/08/08.

See inner commit messages for details.",312,data/crawl/squid/patch_234.diff
https://github.com/squid-cache/squid/commit/3cc0f4e721ce7550b008a4a9c410883eaa600c2a,10 Aug 2014,"Polishing in response to Amos' squid-dev review dated 2014/08/08.

The PASS value masking code in HttpHeader::packInto() is currently unused
because Squid does not (and cannot) use errorpages for native FTP errors.

It is [still] possible to configure ftp_port with transport=HTTP but it is
not clear what the exact effects of that configuration are, if any.

The ftp_port ftp-track-dirs option no longer accepts on|off values. Off is
still the default. Turn on using a valueless ""ftp-track-dirs"" option.

Other minor polishing touches.",249,data/crawl/squid/patch_235.diff
https://github.com/squid-cache/squid/commit/ecb19f1a0380320db5b2e82505f4c9cfdc3625b3,09 Aug 2014,"Centralized and documented FTP protocol ""version"" (1.1) definition.

Moved AnyP::PortCfg::setTransport() to the cache_cf.cc parsing code where it
currently belongs. AnyP code should not have protocol-specific pieces as it is
code shared among (or used by) many (ideally, all transfer) protocols.

TODO: Convert Http::ProtocolVersion from class into a function.",83,data/crawl/squid/patch_236.diff
https://github.com/squid-cache/squid/commit/43446566e3092dc7969e72f22b6c1362a4701784,07 Aug 2014,"Fixed HttpHdr::Private/NoCache(v) implementations and optimized their API.

These calls now avoid assertions and extra trailing commas when called with
empty names. The API now allows calling with a String() object, but still
needs more polishing work.


Moved common code from Ftp::Server::setReply and Ftp::Relay::createHttpReply()
into Ftp::HttpReplyWrapper().


Also removed the last non-job callbak from Ftp::Client, polished and synced
new FTP comments with the modern client/server/gateway/relay terminology, as
well as minimized changes compared to trunk.",152,data/crawl/squid/patch_237.diff
https://github.com/squid-cache/squid/commit/1ab04517e705e2aaa2afc9d45bb3dcb45e6030da,07 Aug 2014,"Converted some of the new FTP code to use SBuf and Tokenizer
instead of MemBuf, String, and c-string manipulations.",496,data/crawl/squid/patch_238.diff
https://github.com/squid-cache/squid/commit/d1f3d8f885784c89a822c35ddf6537aab3a3b925,06 Aug 2014,merge from trunk r13526,34418,data/crawl/squid/patch_239.diff
https://github.com/squid-cache/squid/commit/e7ce227f301a8f1ab73487d19da899fde7c18858,05 Aug 2014,"Polished for the official review, addressing several TODOs.

Use 1.1 version for FTP ports because FTP commands are sent on a
""persistent by default"" connection, just like HTTP/1.1.

Cleaned up Ftp::CtrlChannel, Ftp::DataChannel, and Ftp::Client object
construction and destruction.

Do not insist on USER command when intercepting FTP. Interception support
may still not work for other reasons, but USER does not seem to be required
since Squid gets request destination from the intercepted connection info.",695,data/crawl/squid/patch_240.diff
https://github.com/squid-cache/squid/commit/d3d92daafd6ebda0b0969b0f715af49e6b399d92,05 Aug 2014,"Updated configuration options

* Replace proxy-surrogate fag with require-proxy-header

* Revert follow_x_forwarded_for linkage with PROXY protocol.
  Add proxy_protocol_access directive for PROXY ACLs instead.

* set fast default for proxy_protocol_access when none configured.",102,data/crawl/squid/patch_241.diff
https://github.com/squid-cache/squid/commit/5517260ac271f3b217a1d7f8e955221ba4c1156a,05 Aug 2014,"Done moving FTP code around. Polished moved code to match new locations.

src/clients/FtpNative is now src/clients/FtpRelay. It was awkward to use a
non-noun ""Native"" as a class name, and the class was already described as
""relaying FTP"".",687,data/crawl/squid/patch_242.diff
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/patch_243.diff
https://github.com/squid-cache/squid/commit/3c082dbe95e628bdd403e9c9c7cdee189e88b019,25 Jul 2014,Log PROXY errors to cache.log,6,data/crawl/squid/patch_244.diff
https://github.com/squid-cache/squid/commit/36378e1216aff1897c3a186c3383087858a13b49,22 Jul 2014,"Fix unit test linker issues in testHttpReply and testStore

Also, update STUB files for comm.cc, event.cc, and libssl-squid.la",147,data/crawl/squid/patch_245.diff
https://github.com/squid-cache/squid/commit/8b505ba9bf9270634f5d414b54ee472fbc3d3ff8,18 Jul 2014,"Fix unit test issue after rev.1498

Moves service_name global definition to tools.h where it can be
accessible to more unit tests, in particular tests outside of
src/Makefile.am

Adds stub_SBuf.cc for use by unit tests not actually needing SBuf.",81,data/crawl/squid/patch_246.diff
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/patch_247.diff
https://github.com/squid-cache/squid/commit/6ad1457463368c12a610b2399a8356b0564d0e7a,13 Jul 2014,"ntlm_sspi_auth: fix various build errors

* Fix MinGW portability build errors

* Upgrade to current helper protocol.

Also, add SEND_TT helper macro for NTLM helpers",138,data/crawl/squid/patch_248.diff
https://github.com/squid-cache/squid/commit/3bd97e7e4fa0fe45ef229aa9abb552d51c0bd4f2,12 Jul 2014,Split PROXY protocol parse into v1 and v2 methods,337,data/crawl/squid/patch_249.diff
https://github.com/squid-cache/squid/commit/6658cc16628b3811614185218b1a6511945db69e,12 Jul 2014,"Add AsyncJob::start functionality to ConnStateData for safe initialization

Unfortunately this means that PROXY protocol will no longer be able to
be used on https_port due to the sequencing of our SSL/TLS negotiation
code. That will need to be fixed later.",50,data/crawl/squid/patch_250.diff
https://github.com/squid-cache/squid/commit/7d341c2c9eb7ec506645fdcce6f94d656ea5413c,27 Jun 2014,Cleanup: simplify libTrie,288,data/crawl/squid/patch_251.diff
https://github.com/squid-cache/squid/commit/2da4bfe6a014dd29a0e00458b1c0cdbeb4d960c6,25 Jun 2014,SourceFormat Enforcement,69,data/crawl/squid/patch_252.diff
https://github.com/squid-cache/squid/commit/579b60e6eb80b629d8820e98f8bd4a5cb72f2350,24 Jun 2014,"Rock and shared memory caches fixes/improvements.

* Bug fixes:

Avoid ""FATAL: Squid has attempted to read data from memory that is not
present"" crashes. Improve related code.

Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Caches larger than 256GB (assuming default 16KB cache_dir slot-size) require
this fix to use disk space beyond 256GB.  Also fixed rock disk space waste
warning.

Restored Squid ability to cache (in memory) when no disk caches are configured
which was lost during r12662 ""Bug 3686: cache_dir max-size default fails"" but
other bugs hid this problem.

Allow HITs on entries backed by a shared memory cache only.

Avoid store_client.cc ""entry->swap_filen > -1 || entry->swappingOut()"" asserts.

Make sure Squid dumps core and not just promises one when memory management
goes wrong.


* Significant RAM usage reduction:

Significantly reduced Large Rock (and slightly shared memory) RAM requirements
by not allocating 40 (and 12) bytes of unused RAM per cache slot.

Stop wasting 96 RAM bytes per slot for high-offset slots in large shared
caches with more than 16777216 slots. For example, a StoreMap for a 1TB shared
cache with default 16KB slot sizes (67108864 slots) occupied about 6.5GB of
RAM. After this change, the same information is stored in about 2.0GB because
unused anchors are not stored.


* Other improvements:

Document counter-intuitive round-robin cache_dir selection; decrease its bias.

Report IpcIo file name with errors and warnings to inform admin which
cache_dir needs troubleshooting or tuning.",923,data/crawl/squid/patch_253.diff
https://github.com/squid-cache/squid/commit/cfb88efb1e75015ac6c38fd975eb5c565f1c36b1,24 Jun 2014,"Prep for merge from trunk: undo branch r13313, r13312, and r13311 that were
temporary undoing trunk r13266, r13269, and r13270 (std::vector migration).",1311,data/crawl/squid/patch_254.diff
https://github.com/squid-cache/squid/commit/cbae7ab934f3ef47708417006498aae458f15283,21 Jun 2014,Support PROXY protocol version 2,100,data/crawl/squid/patch_255.diff
https://github.com/squid-cache/squid/commit/00d0ce87e4fb95bde86ebb57dc394554b06b169e,21 Jun 2014,"Support for PROXY protocol version 1

This protocol enables other proxies to easily relay indirect client IP
and port details without altering the HTTP (or other) protocol within the
connection.",234,data/crawl/squid/patch_256.diff
https://github.com/squid-cache/squid/commit/56a35ad1f0c66cdad042e28cfd1a1f41521d4d5d,02 Jun 2014,"Do not leak ex_data for SSL state that survived reconfigure.

SSL_get_ex_new_index() allocates a new index on every call, even if its
parameters remain unchanged. It should be called once per process
lifetime.

Besides leaking, this 12 year-old(!) bug could probably make some SSL
code misbehave during reconfigure because reconfigure would change the
supposedly constant ex_data indexes.",42,data/crawl/squid/patch_257.diff
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/patch_258.diff
https://github.com/squid-cache/squid/commit/ec980001a1ef8e8c98b57557835c10a223433942,31 May 2014,"Cleanup: de-duplicate auth_param realm configuration

Move realm parse and config dump logics to Auth::Config base object.
This de-duplicates Basic, Digest (and future schemes ie Bearer) config
processing code.  Also makes realm available to NTLM and Negotiate
schemes, although at present it remains unused by those schemes.

Also, convert the realm parameter string to an SBuf. Removing the need
for some memory maintenance code.",63,data/crawl/squid/patch_259.diff
https://github.com/squid-cache/squid/commit/ba1b862c8e2fb4ac6002432c2f16041119c02758,29 May 2014,merge from trunk r13423,5144,data/crawl/squid/patch_260.diff
https://github.com/squid-cache/squid/commit/a303dd529164316d5501b9bd367abfeea154db63,29 May 2014,merge from trunk r13423,32,data/crawl/squid/patch_261.diff
https://github.com/squid-cache/squid/commit/e621268f3b76ef70b4c721efe60948a0ee983f5c,29 May 2014,merge from trunk,5112,data/crawl/squid/patch_262.diff
https://github.com/squid-cache/squid/commit/0309fc406832ea1103fb4172cadab9f6d6abe8cb,28 May 2014,Cleanup: de-duplicate handling of auth_param 'children',30,data/crawl/squid/patch_263.diff
https://github.com/squid-cache/squid/commit/20b79af2dab9e030c07ddb122c54ce705d2a140e,22 May 2014,merge from trunk r13421,2308,data/crawl/squid/patch_264.diff
https://github.com/squid-cache/squid/commit/7a4fa6a090dccd464b3cc0b360d2913e552a1668,15 May 2014,"Fix outstanding build issues and parser audit results

* Give SBuf I/O buffer directly to Http1::RequestParser

* Redesign parser state engine to represent the current state
  being parsed instead of previous completed. This allows much
  more incremental resume of a parse and reliable consume() of
  the input buffer as sections complete instead of complex byte
  accounting outide the parser.

* Maintain an internal counter of bytes parsed and consumed by
  the parser instead of a buffer offset. This allows much more
  reliable positioning of the state/section boundaries.

* Remove erroneous fprintf debug left in previous commit.

* Redesign HttpRequestMethod constructor to drop end parameter.

* Redesign all parser unit tests. Marking RFC non-compliance
  for future fixing.",2297,data/crawl/squid/patch_265.diff
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/patch_266.diff
https://github.com/squid-cache/squid/commit/5aca9cf2e5a7c901386831bca92d0339c6e5e60e,07 May 2014,"Cleanup: Refactor external_acl_type format codes representation

Removes enum_external_acl_format::format_type from external_acl.cc
by replacing it with enum Format::ByteCode_t.

Several missing logformat codes related to URL display have been added
to the logformat token set for general use.

Several of the external ACL format codes have been added to
Format::ByteCode_t without equivalent logformat TokenTableEntry's at
this stage as both desirable token naming and access to the data to
produce them generically is unclear.

The external_acl_type parser is updated to accept logformat tokens
wherever an equivalent exists and map directly to the ByteCode_t values.

The mgr:config report dumper is also updated to output the logformat
tokens. But as yet the official deprecation has not been done in
squid.conf.",409,data/crawl/squid/patch_267.diff
https://github.com/squid-cache/squid/commit/fb93aaa47625d637f9523ea77f29b2871c1b8817,05 May 2014,url_fake_rewrite: concurrency channel support,13,data/crawl/squid/patch_268.diff
https://github.com/squid-cache/squid/commit/6cb2818da50678f522eef8ad482e04bbebeb1ac3,05 May 2014,"Support concurrency channels in Digest authentication helpers

All bundled digest helpers will now automatically detect the existence
of a concurrecy channel-ID and adjust responses appropriately.

The auth_param children concurrency= parameter can now be set to any
valid value without needing to alter the helper binary. This resolves
issues upgrading to default-on concurrency on the digest auth interface.",44,data/crawl/squid/patch_269.diff
https://github.com/squid-cache/squid/commit/31855516f574fe5bea7e2f9b33147adbaf854c5a,02 May 2014,merge from trunk,78970,data/crawl/squid/patch_270.diff
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/patch_271.diff
https://github.com/squid-cache/squid/commit/a23223bf7fb54242ade248d5be8376f7527cc881,25 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Ssl::PeerConnector class

This patch investigates the new Ssl::PeerConnector class. This class connects
Squid client-side to a SSL cache_peer or SSL server. It is used by 
TunnelStateData and FwdState to initiate and establish the SSL connection.
This class handles peer certificate validation.

The caller receives a call back with PeerConnectorAnswer. In the SSL connection
is not established because of an error, an error object suitable for error
response generation is attached to PeerConnectorAnser

The Ssl::PeerConnector class includes the old SSL initialization code from
FwdState class.

This is a Measurement Factory project",1239,data/crawl/squid/patch_272.diff
https://github.com/squid-cache/squid/commit/7f06a3d8d7e9569685ac575db1a0f6cf5681024a,22 Apr 2014,"SBuf: convert HttpMethod internals

Update the internal string/image representation of an HTTP
method to be an SBuf string. Including the global registered
methods index.

Also,
 * remove RequestMethodStr() wrapper functions
 * remove remainders of obsolete extension_methods feature
 * remove remainders of obsolete RequestMethodStr[] array
 * fix potential cache key error from http/MethodType.h
   enum ordering.
 * polished many debugs involving method",289,data/crawl/squid/patch_273.diff
https://github.com/squid-cache/squid/commit/4795daa2059af1e226cea497a3612a900af9afc5,12 Apr 2014,Use SBufList instead of wordlist to collect data for mgr:config,529,data/crawl/squid/patch_274.diff
https://github.com/squid-cache/squid/commit/fbe0f9525b22f226c996b26c331517fbbba3630d,12 Apr 2014,Fix broken acl_access dumper,4,data/crawl/squid/patch_275.diff
https://github.com/squid-cache/squid/commit/dfad5100f30862632628277b0860e8c7f57f33b3,12 Apr 2014,More conversions; now builds,87,data/crawl/squid/patch_276.diff
https://github.com/squid-cache/squid/commit/9b859d6f6217cd95f114d184facebc4015b0ea19,12 Apr 2014,"Interim. Remove useless wordlist.h and SBufList.h includes, more SBufList conversions",122,data/crawl/squid/patch_277.diff
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/patch_278.diff
https://github.com/squid-cache/squid/commit/47ba817c8a77eebfc7661efc36578f14895970cb,10 Apr 2014,Implement custom formatting for SBuf size distribution cachemgr report,12,data/crawl/squid/patch_279.diff
https://github.com/squid-cache/squid/commit/36c84e199a995f639a720362195bda49368c6a53,06 Apr 2014,"Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Also fixed rock disk space waste warning.

Rock store and shared memory cache code used entry and slot limit as if
the two were the same. In large caches, the number of entry slots may exceed
the number of entries supported by Squid (16777216 entries per store). This
is especially likely with large caches storing large entries (many slots
per entry with maximum number of entries) or large caches using small slot
sizes.

AFAICT, the bug led to the ""tail"" of cache storage being unused and cache
entries being purged even though there was still space to store them. Also,
Squid was allocating smaller shared memory tables (and temporary cache index
build tables) than actually needed for the configured cache sizes.

Note that this change does not remove the per-store 16777216 entry limit.


The old [small] rock warning about wasted disk space assumed that a cache
entry occupies exactly one slot. The updated warnings do not.


Also fixed and simplified db scanning condition during cache index build.",333,data/crawl/squid/patch_280.diff
https://github.com/squid-cache/squid/commit/cbcd99df7bc872c89683411c56ee8a32249ff72c,03 Apr 2014,"Restructure parser state management

Old parser tracked completed states. Which led to several bugs in
resuming parse of a 'block' of data, end of block detection.
Instead track the state/block currently being processed.

Thanks to Alex Rousskov for identifying this as the source of several
bugs.",177,data/crawl/squid/patch_281.diff
https://github.com/squid-cache/squid/commit/0e2f538320899fc48509259cd045bb6febc8c5f7,24 Mar 2014,"Parser-NG: Convert the ConnStateData input buffer to SBuf

Prepare the way to efficiently parse client requests using SBuf based
parser-ng.

IoCallback stores a raw-pointer to the ConnStateData::In::buf member
object rather than an SBuf reference to the backing MemBlob or char*
store so that only the short (blocking) FD_READ_METHOD() call needs to
provide any synchronous guarantees. We also particularly need a direct
(raw) pointer to the ConnStateData member to prevent the possible
read/consume collisions causing problems with the ConnStateData callback
and avoid having to merge two separate SBuf.",212,data/crawl/squid/patch_282.diff
https://github.com/squid-cache/squid/commit/3997074984ecdb73b6848e25ec04671777404143,22 Mar 2014,Fix if-else mismatch in rev.13319,6,data/crawl/squid/patch_283.diff
https://github.com/squid-cache/squid/commit/11978f8425d2316cb681daae48d530d6fcf6439e,22 Mar 2014,"Portability: Basic auth NIS helper depends on crypt()

Detect crypt.h before permitting the helper to build.

Also, if crypt() function is missing build the helper to output BH code
with an error message instead of failing to build.",8,data/crawl/squid/patch_284.diff
https://github.com/squid-cache/squid/commit/903d27daf52f98a660ca9559faae9545672f6bf9,19 Mar 2014,"xmalloc cleanup: remove code relying on XMALLOC_TRACE, XMALLOC_DEBUG, and mallinfo(3).",545,data/crawl/squid/patch_285.diff
https://github.com/squid-cache/squid/commit/24fe24be38427ccba2471cea3d1e7813eeb48e08,18 Mar 2014,"Make sure Squid dumps core and not just promises one
when memory management goes wrong.",4,data/crawl/squid/patch_286.diff
https://github.com/squid-cache/squid/commit/4e4c52effcd62c2fdcce4703dd9e839a80864d1a,17 Mar 2014,"Undo trunk r13270: ""Refactor Vector and Stack to STL counterparts""
to avoid stability issues related to std::vector migration.",824,data/crawl/squid/patch_287.diff
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/patch_288.diff
https://github.com/squid-cache/squid/commit/b005403744308d3ed83d709a3688e03c08965dbe,17 Mar 2014,Removed MEM_GEN_TRACE,86,data/crawl/squid/patch_289.diff
https://github.com/squid-cache/squid/commit/ae61f2a70b4839175e1896fb984276ec9b122686,17 Mar 2014,Remove XMALLOC_TRACE and references to sbrk(2),348,data/crawl/squid/patch_290.diff
https://github.com/squid-cache/squid/commit/95ba9ef030988980219c23e3f95abdf30563df99,16 Mar 2014,Remove XMALLOC_TRACE and all references to sbrk(2),348,data/crawl/squid/patch_291.diff
https://github.com/squid-cache/squid/commit/e72876256bfa7ef6d4060947ce08b31cd505a369,07 Mar 2014,Convert ConnStateData::In::buf to an SBuf,126,data/crawl/squid/patch_292.diff
https://github.com/squid-cache/squid/commit/e237d339173256649fed0041d9f1accbd05a1cb9,04 Mar 2014,"Fix helper ID number assignment

Since helpers are now dynamically started the old method of allocating
an ID number based on the current start sequence can result in many
helpers being assigned overlapping ID numbers.

Use InstanceID template instead to assure a unique incremental ID is
assigned to each helper no matter when it is started.",77,data/crawl/squid/patch_293.diff
https://github.com/squid-cache/squid/commit/074d6a40c66faa228e8863e791655f9502028501,21 Feb 2014,"Cleanup: un-wrap C++ header includes

Coding guideline is now that standard C++ headers are not to be
wrapped in HAVE_ macros.

* Remove HAVE_ macros for currently wrapped C++ headers.
  Includes removing autoconf checks.

* Replace C includes with C++ includes where possible

Also, <cstdio> / <stdio.h> has issues on 64-bit systems and a
portable fixed version is provided by libcompat via squid.h
It should not be included anywhere in the Squid sources.",1304,data/crawl/squid/patch_294.diff
https://github.com/squid-cache/squid/commit/572d2e31eb73a7db23f4b00f14ac45bc2667ac29,21 Feb 2014,"Bug 3186, Bug 3628: Digest authentication always sending stale=false for nonce",100,data/crawl/squid/patch_295.diff
https://github.com/squid-cache/squid/commit/d4018dfbb63f3abf209b7d579fe22b8fa518dd44,19 Feb 2014,"dynamic_cert_mem_cache_size option related fixes part2: ""make check"" fails",4,data/crawl/squid/patch_296.diff
https://github.com/squid-cache/squid/commit/bf989d30dc66242addf34024040a1720a6c975cb,16 Feb 2014,squidclient: polish and documentation,43,data/crawl/squid/patch_297.diff
https://github.com/squid-cache/squid/commit/95c25f6682acfdbb45b3056bc8aa247e3fc4c88e,16 Feb 2014,"squidclient: support verbosity levels

This makes the -v option repeatable. By default no debug is displayed.
Each time -v is repeated the level of debug message verbosity is raised.

Three levels of verbosity are currently defined:
 0 - no output except ERROR messages.
 1 - display HTTP request sent
 2 - display actions taken connecting to server",105,data/crawl/squid/patch_298.diff
https://github.com/squid-cache/squid/commit/cf6e492ba533f7d0b528e0f0f86b93de5b4c1716,16 Feb 2014,squidclient: polish and update help display,73,data/crawl/squid/patch_299.diff
https://github.com/squid-cache/squid/commit/5a429fae7f03095c8cc7d75f37905674014e3358,13 Feb 2014,"Bug 4001: remove use of strsep()

The strsep() function is not defined by POSIX. Additionally
auto-tools has been having some obscure issues detecting
or linking the provided implementation into libcompat on
Windows and Solaris respectively. Which are the two known
OS requiring it.

Investigation of its use in Squid revealed that it can be
replaced with strcspan() which is both portable and more
efficient since it also removes the need for several
strdup()/free() operations used to protect Squid from
strsep() memory fiddling.",222,data/crawl/squid/patch_300.diff
https://github.com/squid-cache/squid/commit/af3adcbafb6a6e5b6f554261cf5873991c000861,13 Feb 2014,Revert rev.13271,207,data/crawl/squid/patch_301.diff
https://github.com/squid-cache/squid/commit/06260232598e33ad77118fcdeda33717173fc441,13 Feb 2014,Bug 4026: SSL and adaptation_access does not handle aborted connections,207,data/crawl/squid/patch_302.diff
https://github.com/squid-cache/squid/commit/328d863501af0d417ea130aef47a86f450d77987,12 Feb 2014,Refactor Vector and Stack to STL counterparts,825,data/crawl/squid/patch_303.diff
https://github.com/squid-cache/squid/commit/3cf8f5c1d8e2de4843abae4b59025e9f683d653d,11 Feb 2014,"Remove Vector, Stack and related unit tests",716,data/crawl/squid/patch_304.diff
https://github.com/squid-cache/squid/commit/85b067e359c24a0f643b44293992829ca7a1eb44,11 Feb 2014,Reworked cbdata to use std::vector to be able to have a random access iterator,23,data/crawl/squid/patch_305.diff
https://github.com/squid-cache/squid/commit/1ca54a54f6b63bb389dc7a5a0270f771cf9b82d6,07 Feb 2014,"SourceLayout: shuffle URLScheme to AnyP::UriScheme

This class holds a generic protocol agnostic Scheme representation.

* rename const_str() member to c_str() since it produces a const C-string
 (char*) representation.

* Remove some unecessary dependencies.

* Cleanup the coding style to match guidelines.",390,data/crawl/squid/patch_306.diff
https://github.com/squid-cache/squid/commit/a77f476578dd97df51953ab1825e834b831b193a,06 Feb 2014,Fix r13257 commit,40,data/crawl/squid/patch_307.diff
https://github.com/squid-cache/squid/commit/cf2155f28a0333dc57adb63c537c3ea30cbf0344,24 Jan 2014,"Enable -n command line option for non-Windows Squid builds

This command line option is used on Windows to name the service instance
of Squid being run and/or managed. At this point it still only has
useful effect on Windows, but can now be used by components on other
systems as well.

Show the running instance service name in cacehmgr and -v output.

Also remove _WIN_SQUID_DEFAULT_SERVICE_NAME macro which duplicated the
APP_SHORTNAME macro. This changes the Windows service name from Squid to
squid (lower case) on future Squid-3 for Windows.",112,data/crawl/squid/patch_308.diff
https://github.com/squid-cache/squid/commit/cb03c661889952a82565097fc8e585c5dd629892,23 Jan 2014,"FEAT response with excessive whitespace

Some broken Microsoft FTP servers seem to be sending the following
response to the FEAT command:

211-FEAT
....SIZE
....MDTM
211 END

A single dot above represents a single space character, so instead of
one space character they send 4 (four) space characters at the beginning
of the internal FEAT lines.

When this happens, the FTP client who sent the FEAT request to Squid
gets nothing; its connection hangs.

The problem is inside FtpHandleFeatReply function while parses the commands 
list. Arguments corresponding to an emty string passes to String::substr call
(e->value.substr(beg-raw, end-raw) call) causing failure to a Must clause.

This patch: 
 - fixes and adds checks to avoid processing lines which does not include a
   command.
 - try to detect extra spaces before commands
 - try to add the same number of spaces before commands inserted by squid 
   to FEAT commands list (EPSV and EPRT commands)",20,data/crawl/squid/patch_309.diff
https://github.com/squid-cache/squid/commit/a37ec7fa9e6d67647727e3e459cadf5aa5fcecb3,20 Jan 2014,"Avoid comm.cc:170: ""Comm::IsConnOpen(conn)"" assertions
by being more careful with the client data connection state.

Do not forward a 125/150 response to the client until the client data
connection is ready. Do not forward it at all if the data connection was
already closed by the time we got a server 125/150 response. If we have to
wait, we do not really forward the original 125/150 response but generate our
own 150. That may change.",57,data/crawl/squid/patch_310.diff
https://github.com/squid-cache/squid/commit/4fb971a08a878052187adc4ad3cc22df25580b39,20 Jan 2014,"Cleanup refreshCountsStats() cache manager code

* Replace a #define macro with local static function.

* Replace pointer parameter with reference

* suppress display of histograms where there are no records and so no
  meaningful content to be displayed.",77,data/crawl/squid/patch_311.diff
https://github.com/squid-cache/squid/commit/04ebce5515f51ee9b8e81a6c70f3abc3aeb38302,03 Jan 2014,Got rid of Store.cci,104,data/crawl/squid/patch_312.diff
https://github.com/squid-cache/squid/commit/fa2301d26b90cbd1298eb7740e8827c7746cd9d2,01 Jan 2014,"Initial Large Rock and Collapsed Forwarding support.

Large Rock: Support disk (and shared memory) caching of responses exceeding
one db slot (or one shared memory page) in size. A single db slot/page size is
still limited to 32KB (smaller values can be configured for disk caches using
the newly added cache_dir slot-size option). Removal of old rock cache dir
(followed by squid-z) is required -- the on-disk db structure has changed.

Collapsed Forwarding: Optionally merge concurrent cachable requests for the
same URI earlier: After the request headers have been parsed (as before), but
now _before_ the response headers have been received. Merging of requests
received by different SMP workers is supported. Controlled by the new
collapsed_forwarding directive in squid.conf. Disabled by default because all
but one of the merged requests have to be delayed (until the response headers
are received) for the merging to work, which may be worse than forwarding all
concurrent requests immediately. The overall feature idea and request
eligibility conditions are based on Collapsed Forwarding in Squid2.


Summary of other important changes (merged branch log contains the details):

* Tightened StoreEntry locking. Split StoreEntry::lock() into ""just lock"" and
  ""update entry reference time"" interfaces, addressing an old XXX.  Improved
  entry lock/unlock debugging. Needs more work.

* Adjusted StoreIOState::write() API to allow callers detect write errors.

* Simplified MemObject::write() API to remove an essentially unused callback.

* Mark client streams that sent everything as STREAM_COMPLETE. The old code
  used STREAM_UNPLANNED_COMPLETE if the completed stream was associated with a
  non-persistent connection, which did not make sense to me and, IIRC, led to
  store entry aborts even though the entries were not damaged in any way.

* mem_hdr::hasContigousContentRange() now returns true for empty ranges.

* Support ""appending"" ReadWriteLock state that can be shared by readers and
  the writer. The writer promises not to update key metadata (except growing
  object size and next pointers) and readers promise to be careful when
  reading growing slices.

* Fixed StoreEntry::mayStartSwapOut() logic to handle terminated swapouts.

* Improved STORE_MEM_CLIENT detection and documented known (and mostly old)
  StoreEntry::storeClientType() problems.

* Removed StoreEntry::hidden_mem_obj hack.

* Polished StoreEntry debugging to report more info, less noise. Use e: prefix.

* Added a script to extract store entry(ies) debugging from cache.log.",6196,data/crawl/squid/patch_313.diff
https://github.com/squid-cache/squid/commit/9d4e9cfbacb7de44098f09fa2c2e6c1801dfe1ba,31 Dec 2013,SourceFormat Enforcement,265,data/crawl/squid/patch_314.diff
https://github.com/squid-cache/squid/commit/d4806c91642a65454c9dc6f65e7ed03e50a76313,06 Dec 2013,"Add key_extras to proxy authentication schemes.

The key_extras value is a ""quoted string"" with logformat %macro support. It is
appended to request line for the authentication helper.

Example usage:
   auth_param basic key_extras ""thePort:%>lp""
   auth_param digest key_extras ""LocalIP=%>la:%lp""

This is a Measurement Factory project.",513,data/crawl/squid/patch_315.diff
https://github.com/squid-cache/squid/commit/0a720258ebe0806d0ee7953ab35df886f867a899,29 Nov 2013,"Support libecap v1.0, allowing asynchronous adapters and eCAP version checks.

After these changes, Squid can support eCAP adapters built with libecap v1.0,
but stops supporting adapters built with earlier libecap versions (due to API
changes). The new libecap version allows Squid to better check the version of
the eCAP adapter being loaded as well as the version of the eCAP library being
used. This should help with migration to libecap v1.0.


Expose [running] main event loop as a global so that modules can add engines.",269,data/crawl/squid/patch_316.diff
https://github.com/squid-cache/squid/commit/c9dbe80fad1d56d5f186dd49f97401016ba88daf,21 Nov 2013,Bug 3782: Digest authentication not obeying nonce_max_count,14,data/crawl/squid/patch_317.diff
https://github.com/squid-cache/squid/commit/896f0b9b08b52e2cbbd9bb61afc41a725830437e,13 Nov 2013,"Add EPRT and EPSV commands to FTP FEAT response if not already there
because Squid FTP gw supports both even if the FTP origin server does not.",21,data/crawl/squid/patch_318.diff
https://github.com/squid-cache/squid/commit/89b1d7a2c87a4a12cedbf9a302a223fcdd6faefe,13 Nov 2013,"Propagate FTP server connection closures to idle FTP gw clients but
carefully close the FTP server connection upon receiving an FTP 221 response.

FTP gateway code pins server connections; when there is no traffic, the
client-side code holds on to the server connection. The old code did not
notice pinned server connection closure until it was time to write the next
FTP request to that connection. Squid now monitors the idle pinned server
connection and closes the client connection if the server connection closes
(or, to be more precise, if the server connection gets marked as ready for
reading).

Client-side monitoring of an idle pinned connection ends when the server side
starts using the pinned connection again (because the server side becomes
responsible for monitoring EOF conditions then). Added
borrowPinnedConnection() and related methods to distinguish validation of
pinned connection and responsibility transfer.

Careful closure of the FTP server connection upon receiving an FTP 221
response is necessary to avoid the client-side idle server connection
monitoring code closing the client connection upon detecting server-side EOF
_before_ the client side had enough time to forward that 221 response to the
not-yet-idle client. The latter may take some time because, in part, the
response may have to go through an ICAP RESPMOD service first.",138,data/crawl/squid/patch_319.diff
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/patch_320.diff
https://github.com/squid-cache/squid/commit/b6a7fc859fe563a1c6b66914bc83b5081d94d7bb,01 Nov 2013,"Make Http parser incremental

This makes the parser track the start of the un-parsed buffer region and
resume parsing at that point instead of reset to the beginning.

- add state to mark completion of the first line (request-line)
- add unit test for incremental parse states including BWS
- make the state tracking member of HttpParser private",97,data/crawl/squid/patch_321.diff
https://github.com/squid-cache/squid/commit/e87619bc9ef4a77a952bac8b54e7d6ee7f2c2356,30 Oct 2013,"CacheMgr: normalize pconn report output

- table rows start with TAB
- table cell delimiter is TAB
- table header cells start with TAB SP",9,data/crawl/squid/patch_322.diff
https://github.com/squid-cache/squid/commit/46445347f9c3f7e11cd1626599cfe7c9a18b0367,31 Oct 2013,"Implement stubs for external_acl, auth/libauth, auth/libacls, time",248,data/crawl/squid/patch_323.diff
https://github.com/squid-cache/squid/commit/9d870886ca9593d370ab493f0d85a61e88c6325d,28 Oct 2013,"End ""227 Entering Passive Mode (...)"" response with CRLF as required by FTP.",2,data/crawl/squid/patch_324.diff
https://github.com/squid-cache/squid/commit/4e3760b17d0b13ce648e48760b495fdd225a2836,27 Oct 2013,Broken: define and use stub_libauth.cc,111,data/crawl/squid/patch_325.diff
https://github.com/squid-cache/squid/commit/77f6d1d2986563d71ab09a413bdca3a61dc81422,18 Oct 2013,"Append ""Connection: close"" to OPTIONS requests when icap_persistent_connections
is off.

This brings OPTIONS requests behavior inline with REQMOD and RESPMOD.",4,data/crawl/squid/patch_326.diff
https://github.com/squid-cache/squid/commit/17852883df926d74fb04fe5d2bbfa281090574a8,01 Oct 2013,"Remove dnsserver and external DNS helper API

The external DNS helper API places limits on Squid DNS lookups per second
low enough to noticably affect the HTTP requests per second which can be
served.

Request for comments about proposed removal 2 years ago produced feedback
stating that the helper was needed for local name resolution. This is
now available since 3.4 mDNS extensions.

A more recent request for reasons for keeping the helper API have
produced only two responses over the period of several months. Both
indicating that the API is no longer necessary for the business cases of
a year or so ago.

As such and because the helper fails to operate sufficiently on several
major operating systems and the API is difficult to maintain it is being
removed as of Squid-3.5.",1269,data/crawl/squid/patch_327.diff
https://github.com/squid-cache/squid/commit/73656056cdcface25c015c755e9a3688acd404fc,30 Sep 2013,"Remove COSS

This storage type has been superceded by Rock storage since 3.2.",3034,data/crawl/squid/patch_328.diff
,,,,
https://github.com/squid-cache/squid/commit/4ebcf1ceefe28d5320166e5bad97a72ef7944c5c,27 Sep 2013,"negotiate_kerberos_auth: upgrade to present group= keys

Use the new kv-pair protocol extensions for emitting group details
directly at the time of authentication. group=X key-value pair is
used to emit the Kerberos SIDS values presented by MS Active
Directory environments.

Also, update the Hiemdal library support for recent library versions.

Also, polish the Kerberos and LDAP Group related code to avoid memory
leaks and improve C++ coding style.",1392,data/crawl/squid/patch_329.diff
https://github.com/squid-cache/squid/commit/397d2d61cf76167934616514a037bd4730319eb0,09 Aug 2013,"Display Build-Info in cache manager info report

This info can be quite useful for tracking which patched build of Squid
is being used to produce the report.",2,data/crawl/squid/patch_330.diff
https://github.com/squid-cache/squid/commit/bce61b006f1ea12de90966ae6b7ff88372d905cf,01 Aug 2013,"Add dns_multicast_local to control mDNS operation

Enable admin control over whether mDNS operates or not. Set the default
to OFF due to .arpa reverse-DNS requests causing a rise in traffic from
this feature even on networks without mDNS responders setup.

Also, polish cachemgr idns report to show for queued queries which
resolver type and query the entry is involving. mDNS can cause a queue
to exist as some lookups timeout on the mDNS resolvers.",52,data/crawl/squid/patch_331.diff
https://github.com/squid-cache/squid/commit/0ad3ff513e423e6d05f4a50995166d6440975cc6,27 Jul 2013,"Handle infinite certificate validation loops caused by OpenSSL bug #3090.

If OpenSSL is stuck in a validation loop, Squid breaks the loop and triggers a
new custom SQUID_X509_V_ERR_INFINITE_VALIDATION SSL validation error. That
error cannot be bypassed using sslproxy_cert_error because to break the loop
Squid has to tell OpenSSL that the certificate is invalid, which terminates
the SSL connection.

Validation loops exceeding SQUID_CERT_VALIDATION_ITERATION_MAX iterations
are deemed infinite. That macro is defined to be 16384, but that default can
be overwritten using CPPFLAGS.

This is a Measurement Factory project",96,data/crawl/squid/patch_332.diff
https://github.com/squid-cache/squid/commit/eb6ac8089e8b4157aad32f3e4616569746ffe6f3,26 Jul 2013,"Update the http(s)_port directives protocol= parameter

... to use AnyP::ProtocolVersion for internal storage instead of opaque
string text.

This both limits the possible parameter values to one of HTTP, HTTP/1.1,
HTTPS or HTTPS/1.1 and ensures that URLs generated from that protocol
parameter value are http:// and https:// URL. 
Other values will cause Squid to abort.",107,data/crawl/squid/patch_333.diff
,,,,
https://github.com/squid-cache/squid/commit/2eceb328ef857482d29d0b170856bf6213015c1c,21 Jul 2013,"Quoted values in squid.conf

This patch :
  - adds support for quoted values in the entire squid.conf
  - warn about or prohibit values that can no longer be interpreted as 
    either quoted strings or simple tokens
  - support parameters(""/path/to/file.name"") syntax to load external
    configuration files
  - Checks if macros allowed in ""double quoted"" values. 
  - replaces the strtok() calls with calls to the new ConfigParser::NextToken()
  - modify strtokFile to use new ConfigParser::NextToken()
  - Add the new configuration_includes_quoted_values configuration option, to
    control the squid parser behaviour. If set to on Squid will recognize each
    ""quoted string"" after a configuration directive as a single parameter

This is a Measurement Factory project",810,data/crawl/squid/patch_334.diff
https://github.com/squid-cache/squid/commit/dd0cbc6432f5abf6be86d4bcdd239cd86cd69b9f,05 Jun 2013,"Redo r12887 (bug 2066 fix) which introduced several related bugs:

  - fatal() if chroot is given
  - no chdir to / after chroot if coredump_dir is given
  - wrong detection of ""none"" coredump_dir
  - chdir to uninitialized pathbuf if no chroot is given

This emergency fix helps Squid start better but may need more testing/work.",36,data/crawl/squid/patch_335.diff
https://github.com/squid-cache/squid/commit/827eb0ac434b48a48954f2338258663a05231367,05 Jun 2013,SourceFormat Enforcement,2,data/crawl/squid/patch_336.diff
https://github.com/squid-cache/squid/commit/133906f560762d68bc2c8eb677584dcd4ccae8f2,04 Jun 2013,"Bug 2066: squid does not do chdir() after chroot()

The earlier workaround applied only fixed 1 of the 3 places performing
chroot().
 This makes chroot and chdir integral parts of setting up Squids running
directory and alters teh chroot() calls to be mainSetCwnd() calls. Which
fixes several potential problems with core dumps from squid -z or -k
executions ending up in unexpected locations, regardless of whether
chroot() and coredump_dir are configured.

 Detected by Coverity Scan. Issue 740335.",44,data/crawl/squid/patch_337.diff
https://github.com/squid-cache/squid/commit/4dd643d505fb6bc13be7d440e2aa5707036a138e,03 Jun 2013,"Polish: update Ip::Address to follow Squid coding guidelines

* lower-case initial word for camelCase method names
* _ suffix for private variables.
* upper-case for static methods
* InitAddrInfo() and FreeAddrInfo() are static, do not use as methods

Not all methods are camelCased due to meaning irregularities and there
are other guidelines not being followed which also need to be fixed.",1969,data/crawl/squid/patch_338.diff
https://github.com/squid-cache/squid/commit/a079e38bc38f15150ec323e67ff463bfe011316f,02 Jun 2013,"Support multicast DNS

Resolve .local domain names using mDNS one-shot queries ahead of regular
recursive DNS qeuries.

* adds the mDNS multicast group IPs as always-present entries in the
  nameservers list.

* filters each request. "".local"" lookups are permitted to both the mDNS
  resolvers and the recursive resolvers, other requests are only
  permitted to the regular recursive resolvers.",4022,data/crawl/squid/patch_339.diff
https://github.com/squid-cache/squid/commit/b65ab6e8ca0ba61733e2e2964ba4d4e80fb8317b,31 May 2013,Polish: more debug info from squidclient,5,data/crawl/squid/patch_340.diff
https://github.com/squid-cache/squid/commit/61017a886b4884845571007b5745664e3d346ebc,28 May 2013,"Improve ACL handling. Support all-of and any-of ACL types.

This commit encapsulated many significant ACL changes, including:

* Expressiveness: Two new boolean ACLs (all-of and any-of) that allow
admins to group ACLs as needed, to express complex conditions more
naturally, with fewer squid.conf lines. Conditions such as ""(a or b) and
(c or d)"" are easily expressed now. Explicit groups of ACLs of different
types can now be configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended
checks to wait for an async lookup) is ready to resume checking, Squid
resumes checking from that ACL, instead of rechecking all ACLs for the
same action (or the same squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree,
streamlining the code and clearing the way for future math-style/natural
ACL conditions support. The usual boolean operators (and, or, and not)
form intermediate nodes while good old configurable ACLs become tree
leaves. The new all-of and any-of ACLs use the boolean operators (and
also become intermediate nodes, of course).",1943,data/crawl/squid/patch_341.diff
https://github.com/squid-cache/squid/commit/78b06ec59454b9f893ca5a9747b1a237b8bb6eb0,19 May 2013,Bug 3851: Delay Pool class 5 tag:levels displayed incorrectly in cache manager,6,data/crawl/squid/patch_342.diff
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/patch_343.diff
https://github.com/squid-cache/squid/commit/fb0c2f1700b650d40c64d77f2bd17e29809216e5,11 May 2013,"Bug 3389: Auto-reconnect for tcp access_log.

Major changes:

1. Squid reconnects to TCP logger as needed. Squid keeps trying to connect
forever, using a hard-coded 0.5 second delay between attempts.

2. Squid buffers log records while there is no connectivity. The buffering
limit is configurable.

3. On buffer overflows, Squid worker either dies or starts dropping log
records. The choice is configurable.

4. The tcp logging module honors buffered_logs setting. Old code was flushing
each record.

5. Squid reports changes in logging state to cache.log. Except for every 100th
consecutive connection failures, routine connection retries are not reported
at level 1, to reduce noise level.

6. A new access_log configuration format/style has been added. It allows us to
easily add named options such as buffer-size or on-error. The same format can
be used to add module-specific options in the future, but doing so would
require changes to the high-level logging code. All old configuration
formats/styles are still supported.

7. squid.conf buffered_log option documentation now reflects reality. It used
to talk about cache.log but I do not think Squid uses that option for
cache.log maintenance.


Known minor side-effects of these changes:

i) All access_log logs can now be configured to bypass errors because the old
""fatal"" flag is now configurable via log-specific on-error option in
squid.conf. The default is still ""die"". I have not checked whether modules
other than TCP logger honor that flag.

ii) All access_log logs now use 8*MAX_URL (64KB) instead of a 4*MAX_URL (32KB)
or smaller buffer size by default. The ICAP logger was using 2*MAX_URL buffer
size. The TCP logger was using 64KB buffer size before so no change for TCP. I
decided that it is better to raise the default buffering level for some logs
rather than decrease it for other logs, but it is not clear what the best
default is. The buffer size is now configurable via buffer-size so admins can
control it on individual log basis.

iii) Some access_log configuration styles overlap. To resolve ambiguities,
Squid may need to assume that the first logging ACL name (if any) does not
contain '=' and is not equal to an existing logformat name. It is possible to
use 'all' as the first ACL name if these heuristics cause problems.


TODO: We have attempted to solve more TCP logging problems, but it turns out
that correct solutions would require fixing higher-level logging code, not
specific to TCP logger or Bug 3389 scope. Those unsolved problems include:

A. During reconfiguration, all logs are closed and reopened, even if there
have been no changes to their configuration that necessitate such a drastic
action (or no changes at all!). For TCP logger, this means that the old
connection is used to flush remaining buffered records (if any), and the new
connection is used to log new records, possibly at the same time. Nathan wrote
clever code that keeps logging going using the same job/connection. However,
we had to yank that code out because it clashed with higher-level logging
state in subtle ways.

B. During shutdown, all connections are put in the closing state before logs
are told to flush remaining records. For TCP logger, this means that the
remaining buffered records (if any) are lost. The correct fix may require
rearranging shutdown sequence AND letting EventLoop run during shutdown (among
other things).

C. When logger connectivity is lost, Squid does not notice the problem until
the second TCP socket write (or later). This results in lost records. This is
due to TCP-level buffering. I suspect the only cure for this is adding
logger-to-Squid ""I got your records"" feedback, which requires changes in the
logging protocol (currently there is no logger-to-Squid communication at all).",1037,data/crawl/squid/patch_344.diff
https://github.com/squid-cache/squid/commit/41b43e709e9b7e1a0781913a9cc1a412c467e8e8,06 May 2013,Bug 3780: cachemgr.cgi: output problem in HTTP Header Statistics,2,data/crawl/squid/patch_345.diff
https://github.com/squid-cache/squid/commit/cf9f0261d2588344038a89f764325b80179a7e0d,29 Apr 2013,"HttpRequest::helperNotes to NotePairs

This patch try to fix current current Notes interface and usage.
The changes done having in mind that we need:

  1) to add multiple notes with the same key
  2) to support 3 different note types: adaptation meta headers, helper notes
    and custom notes added by the system administrator
  3) to log notes using the %note formating code
  4) to use the %note formating code everywhere the formating API is used. For
    example use the %note with the request_header_add configuration parameter.
  5) to use notes with ACLs.

Details:
 - The NotePairs class is not a kid of HttpHeader class anymore. It is
   implemented from scratch to cover Helper/adaptation and custom notes needs.
     * The new class stores key:value pairs in list. It allow multiple entries
       with the same key.
     * Includes a find method which return a coma separated list of values
       for a given key
 - The HttpRequest::helperNotes is now a Refcount of a HttpPairs object
 - The HelperReply::notes is now a HttpPairs object
 - The AccessLogEntry::notes now is a RefCount of a HttpPairs object, and
   stores only the custom notes add by the ""note"" configuration parameter
 - Add the AccessLogEntry::helperNotes which is a RefCount of a HttpPairs object
   to store notes added by helpers.
   Now the notes added by adaptation or helpers are accessible to format/* code
   imediatelly after added. Before this patch are accessible only for logging.

Future work:
 - Posible merge AccessLogEntry::notes and AccessLogEntry::helperNotes
 - Performance fixes

This is a Measurement Factory project",488,data/crawl/squid/patch_346.diff
https://github.com/squid-cache/squid/commit/ff1177602b8369dd8438fadfc8b4b3bf190ef1d4,23 Apr 2013,CacheMgr: fix missing column separator in helper stats,2,data/crawl/squid/patch_347.diff
https://github.com/squid-cache/squid/commit/cc1e110a93d34fad100bd92ec4740df0a19641a3,04 Apr 2013,"Bug 3643: NTLM helpers stuck in reserved state by Safari

NTLM failures are not always cleaning up connection-auth credentials
properly. In particular they are not releasing the NTLM helpers when
the connection is closed between challenge and handshake completion.
Resulting in permanently reserved helpers locking up all access
through the proxy.

This change redesigns the connection authentication state management
to move the auth link/unlink operations into the connection state
manager objects instead of being managed by NTLM auth components.
As a result we are able to manage credentials from any auth scheme
consistently and terminate the connection properly on several
error conditions which the auth components are not easily aware of.

 Fix sponsored by Netbox Blue Pty (http://netboxblue.com/)",330,data/crawl/squid/patch_348.diff
https://github.com/squid-cache/squid/commit/e412456e61e8500e8537da20253a2371c81a9cd3,18 Mar 2013,Polish: drop a bunch of dead code,136,data/crawl/squid/patch_349.diff
https://github.com/squid-cache/squid/commit/8219a52ef2077f0c96ed5f4adb3426e37d94dfb5,17 Mar 2013,"basic_pam_auth: Add -r option to strip NTLM/Negotiate domain from username

This option helps reduce end-user confusion accessing Squid using Basic
auth PAM helper as a backup to NTLM and/or Negotiate authentication.

The user can enter their NTLM/Negotiate user+domain details in the popup
which may occur without needing to know which auth scheme is in play.",19,data/crawl/squid/patch_350.diff
https://github.com/squid-cache/squid/commit/4a0f677af794500629b57c10697f964af83cd6aa,11 Mar 2013,Polish: fix several spelling errors,17,data/crawl/squid/patch_351.diff
https://github.com/squid-cache/squid/commit/14e9491b4913f476c7a1f56e3a2ebcebfb5323f8,11 Mar 2013,Many typos fixed,17,data/crawl/squid/patch_352.diff
https://github.com/squid-cache/squid/commit/723fd4c11ce252c602e4e362ea37bbadb8ee9181,14 Feb 2013,"Fix Negotiate auth NA response handling

Handle the blurb presented on NA responses as an error message.

Negotiate auth was also treating token as a mandatory field, although it is
optional along with an optional message.",23,data/crawl/squid/patch_353.diff
https://github.com/squid-cache/squid/commit/02c8dde5cc20d7594afac26284c0119167d19721,11 Feb 2013,"SourceLayout: Shuffle and collate the log result codes symbols

This collates all the small definitions spread around Squid for defining
and handling the TCP_* and UDP_* result code tags logged by Squid.

* log_type enumeration shuffled from enums.h
* log_type increment operator shuffled from client_db
* log_type strings shuffled from Format:: and built automatically
* is-HIT lookup test shuffled from ICP

Due to LogTags.cc being automatically built from the enum list we define
the shuffled functions as inline. This is not a problem due to their small
size. When the LogTags type is converted to a class thay can be de-inlined.",251,data/crawl/squid/patch_354.diff
https://github.com/squid-cache/squid/commit/a8a0b1c2ae84779983a9e27f24e0f16811dcd52c,08 Feb 2013,"Add custom Store ID code support

This is a port of the StoreURL feature from Squid-2.7 rewritten to avoid
the unfortunate link that 2.7 feature had with URL-rewriting.

The feature uses a helper to retrieve custom ID values for use in the
cache storage ID key. The default ID used is the requested URL.

Differences since 2.7:
* storeurl_* directive names are now called store_id_*

* The helper response now expects 'OK store-id=""...""\n'
  However the squid-2.7 response syntax is still accepted.

* the ID value presented need not be a URL. Although URL syntax
  is recommended to simplify store log interpretation and
  refresh pattern matching.

* refresh_pattern applies to the store ID, not the request URL.


TODO: support store ID lookups on ICP and HTCP queries.",510,data/crawl/squid/patch_355.diff
https://github.com/squid-cache/squid/commit/814f9a2eab3f8f5c78c7ea654700cd7dc1bc5046,03 Feb 2013,"Fix several uninitialized object members in unit tests

 Detected by Coverity Scan. Issues 740581, 740582, 740583, 740584",30,data/crawl/squid/patch_356.diff
https://github.com/squid-cache/squid/commit/31ecec74bce9aef1f15b3634ba2d25674ed51daa,01 Feb 2013,Fix typos in Ident.cc,4,data/crawl/squid/patch_357.diff
https://github.com/squid-cache/squid/commit/173b722945fd707034d2e17c4e1d7af9451b3456,01 Feb 2013,Bug 3749: IDENT lookup using wrong ports to identify the user,12,data/crawl/squid/patch_358.diff
https://github.com/squid-cache/squid/commit/923b75ce684aa3f136f5826b2e0ca5802c9d0065,01 Feb 2013,"Fixed several ConnOpener problems 
by relying on AsyncJob protections and comm_close(), while maintaining a
tighter grip on various I/O and sleep states.

Problems addressed:

* Connection descriptor was not closed when attempting to reconnect after
  failures. We now properly close on failures, sleep with descriptor closed,
  and then reopen.

* Timeout handler was not cleaned up properly in some cases, causing memory
  leaks (for the handler Pointer) and possibly timeouts that were fired (for
  then-active handler) after the connection was passed to the initiator.

* Comm close handler was not cleaned up properly.

* statCounter.syscalls.sock.closes counter was not updated on FD closure.

* Waiting pending accepts were not kicked on FD closure.

* Connection timeout was enforced for each connection attempt instead of 
  applying to all attempts taken together.

and possibly other problems. The full extent of all side-effects of mishandled
race conditions and state conflicts is probably unknown.",320,data/crawl/squid/patch_359.diff
https://github.com/squid-cache/squid/commit/33810b1da0e66536755dd31ad95a0aabf2167858,27 Jan 2013,"No-lookup DNS ACLs

Currently, dst, dstdom, dstdom_regex (and other?) DNS-related ACLs do DNS
lookups if such a lookup is needed to convert an IP address into a domain name
or vice versa. This creates two kinds of problems:

 - It is difficult to identify requests that use raw IP addresses in Request-URI
   or Host headers. One would have to use something like url_regex and possibly
   req_header to identify those before using dst ACLs to match the request
   destination against a known IP subnet. IPv6 would only make this harder.

 - It is difficult to use dst* ACLs in options that support fast ACLs only.
   If an async lookup is required, the answer will be unpredictable (now)
   or DUNNO (when the ACL bugs are fixed), possibly with warnings and other
   complications.


This patch adds a -n option to dst, dstdom, dstdom_regex and other DNS-related
ACLs. The option disable lookups and address type conversions. If lookup or
conversion is required because the parameter type (IP or domain name) does not
match the message address type (domain name or IP), then the ACL with a -n
option would immediately declare a mismatch without any warnings or lookups.

The ""--"" option can be used to stop processing all options, in the case the
first acl value has '-' character as first character (for example the '-' is
a valid domain name)

For example:

    # Matches requests with full URI host set to localhost
    # but not requests with full URI host set to 127.0.0.1
    acl toLocalRawName dstdom -n localhost
    http_access allow toLocalRawName

    # Use -- option to stop processing flags
    acl AnACL dst_domain -n -- -cream-and-sugar.tumblr.com

    # Matches requests with full URI host set to 127.0.0.1
    # but not requests with full URI host set to localhost
    acl toLocalRawIp dst -n 127.0.0.1/32
    cache_peer_access peer1 allow toLocalRawIp

Please note that -n prohibits lookups in Squid's DNS caches as well.

This is a Measurement Factory project",303,data/crawl/squid/patch_360.diff
https://github.com/squid-cache/squid/commit/9dca980df1365aa3d56909dd485d72e786268fd3,21 Jan 2013,"Bug 3676: Fix Shadowed variables

This resolves a number more shadowed variables by renaming.
There should be no logic changes in this patch.",278,data/crawl/squid/patch_361.diff
https://github.com/squid-cache/squid/commit/052aecef0b2b5b67207cecc3410cca1231f30a90,20 Jan 2013,"squidpurge: polish debug -d option handling

Parsing of the -d option parameter was severaly broken with an inverted
NULL check resulting in segfaul whenever a level was supplied.

Also, add validation that out-of-range values cannot be supplied and
document in the help that this is a mask value, not just a number.

 Detected by Coverity Scan. Issue 740378.",10,data/crawl/squid/patch_362.diff
https://github.com/squid-cache/squid/commit/b2d7d4beac04fd6d0ec2e5bd5ba03cb68943d6ed,16 Jan 2013,"squidpurge: display friendly errors on missing command line options

Currently the tool will crash with a segmentation fault if any one of
several command switches which are expected to have a mandatory argument
are in fact followed by nothing.
 Detect these cases and display a message about what is missing.

 Detected by Coverity Scan. Issue 740378",31,data/crawl/squid/patch_363.diff
https://github.com/squid-cache/squid/commit/90d881c4fa0fc6d3a480be6fd9b701d1068dfaeb,12 Jan 2013,Bug 3736: Floating point exception due to divide by zero,6,data/crawl/squid/patch_364.diff
https://github.com/squid-cache/squid/commit/3efeeda272a15497d732b87fcc00b3a78d8a025f,05 Jan 2013,"squidpurge: ensure PURGE repsonse buffer is terminated

 Detected by Coverity Scan. Issue 965807.

Also, additional validation check for issue 740488",8,data/crawl/squid/patch_365.diff
https://github.com/squid-cache/squid/commit/5f621cd093274c38b37c50fce889756c34a1f073,02 Jan 2013,"Bug 3676: Fix various shadowed variables

Also, fixes logformat dumper to output 'logformat' instead of 'format'.
'format' directive is the planned future name but is not yet parsed.

 Detected by GCC 4.7 with -Wshadow",28,data/crawl/squid/patch_366.diff
https://github.com/squid-cache/squid/commit/e65cf8d57ef7e00f37e1f85ad0f377932c3bc277,31 Dec 2012,"squidpurge: fix META TLV parsing issues

* current Squid may stoe objects with up to 64KB URLs and 64KB headers
  in the disk cache. Increas the tool buffer to 128KB to prevent
  truncating the loaded meta data.

* check for and report when meta data overruns the end of loaded buffer
  content. Ignore the truncated TLV entry and produce a WARNING.

* validate the TLV size field loaded from disk to prevent buffer overrun
  errors from corrupted files on disk.

 Detected by Coverity Scan. Issues 740381, 740488.",20,data/crawl/squid/patch_367.diff
https://github.com/squid-cache/squid/commit/9e5075dc1cc61178028a770f433e5edf9db7e1b0,29 Dec 2012,Typo in rev.12550,4,data/crawl/squid/patch_368.diff
https://github.com/squid-cache/squid/commit/e19994df12fc0810cd371afe83310d8a5c137853,29 Dec 2012,"Fix various Disk I/O issues in all modules

* Uninitialized class members.

* Handle NULL potential after several dynamic_cast.

* Better error result handling from several system functions
  lseek(), fcntl() can report errors which need handling.

* diskd explicit NULL dereference on broken input.
  Extremely unlikely, but worth protecting against.

 Detected by Coverity Scan. Issues 740510, 740358, 740359,
  740511, 740317, 740360, 740513, 740318, 740514",46,data/crawl/squid/patch_369.diff
https://github.com/squid-cache/squid/commit/a0b3b22c8938bbd358f6e3c47b8c69d4a21fba37,27 Dec 2012,"Fix various issues in unit tests

* Define MemObject stub constructor to initialize teh stub object properly
  apparently store unit tests needs one defined. Best to make it work and
  set base values than leave garbage in the object fields.

* Buffer overrun on config parser if test is ever given a too-long
  string input.

* Memory leak in HttpRequest testing. One instance of a short array.

* Range: header testing may thor exceptions which were not caught by the
  test binary. Could lead to difficulty debugging exception errors.

 Detected by Coverity Scan. Issues 740523, 740482, 740440, 740498",55,data/crawl/squid/patch_370.diff
https://github.com/squid-cache/squid/commit/14798e73bd28260d30e4512e2376c3a7dbf51164,13 Dec 2012,"cert validation cache

This patch add cache to cert validation helper. The following new options
added to ""sslcrtvalidator_program"" configuration parameter to control cache
behaviour:
   ttl=n         TTL in seconds for cached results.The default is 60 secs
   cache=n       limit the result cache size. The default value is 2048

To implement the cert validation cache a new template class investigated,
the LruMap which implements a simple lru cache.

The LruMap templete class also used to replace the old Ssl::LocalContextStorage
class which implements a SSL contexts cache.

This is a Measurement Factory project",577,data/crawl/squid/patch_371.diff
https://github.com/squid-cache/squid/commit/25f563833326aeffe0e6fb77e439eea6017dcf2b,10 Dec 2012,Bug 3712: Rotating logs overwrites the previous log,4,data/crawl/squid/patch_372.diff
https://github.com/squid-cache/squid/commit/fc6df0c3a619d283bcd0f755409d5f3ec9554007,04 Dec 2012,merge from parent SslServerCertValidator r12337,2116,data/crawl/squid/patch_373.diff
https://github.com/squid-cache/squid/commit/d2dd8e4f45d627e672d33edaffa9fe7770060498,04 Dec 2012,"SSL server certificate validator implementation

This patch implements the certificate validation helper interface described at:
  http://wiki.squid-cache.org/Features/SslServerCertValidator

The helper consulted after the internal OpenSSL validation, regardless of the
validation results. The helper will receive:
   1) the origin server certificate [chain],
   2) the intended domain name, and
   3) a list of OpenSSL validation errors (if any).

If the helper decides to honor an OpenSSL error or report another validation 
error(s), the helper will return: 
   1) A list of certificates.
   2) A list of items consists the the validation error name (see %err_name
      error page macro and %err_details logformat code), error reason
      (%ssl_lib_error macro), and the offending certificate.


The returned information mimics what the internal OpenSSL-based validation code
collects now. Returned errors, if any, fed to sslproxy_cert_error, triggering
the existing SSL error processing code.

The helper invocation controlled by the ""sslcrtvalidator_program"" and
""sslcrtvalidator_children"" configurations options which are similar to the
ssl_crtd related options. 

A simple testing cert validation helper developed in perl included in this
patch. This helper just echo back the certificate errors.

This is a Measurement Factory Project",997,data/crawl/squid/patch_374.diff
https://github.com/squid-cache/squid/commit/bcb9f68855ed476199bcfb749641bfdc0c065eec,04 Dec 2012,merge from trunk r12500,2102,data/crawl/squid/patch_375.diff
https://github.com/squid-cache/squid/commit/d471b08ae0a97908f9c3eac88a3fee438e8acefe,01 Dec 2012,Bug 3688: Lots of Orphan Comm:Connections to ICAP server,21,data/crawl/squid/patch_376.diff
https://github.com/squid-cache/squid/commit/f087640fc902bdbfdd2d8591f5e57277e05904f9,30 Nov 2012,"Polish: Improve the messages output by UFS swap log management.

It also includes a small local variable symbol change from ""new_path"" to
""tmp_path"" to prevent future developer mistakes like the one seen in
bug 3663 mistaking ""new_path"" for the new destination path of xrename().",23,data/crawl/squid/patch_377.diff
https://github.com/squid-cache/squid/commit/49b76711eb061f751a766c289a778caaf6086797,27 Nov 2012,"Helper protocol upgrade: add optional kv-pair field to responses

This adds an optional kv-pair field immediately following the result field
on all helper interface responses. This field contains a list of key=value
pairs where the value is a RFC1738 (URL) encoded token or a quoted string.
Quoted-string MAY contain whitespace and shell escaping.

The response syntax for all helpers becomes:
  [channel-ID SP] result [SP key-pair ...] [SP other] EOL


The parser for HelperReply is also updated to map the old AF and NA
NTLM/Negotiate response fields into the HelperReply notes:
 * ""token="" is added to supply the NTLM and Negotiate server blob/token.
 * ""user="" is added to supply the user label field.
The relevant callback handlers are updated for these helpers to make use
of these new keys.


The bundled Digest authentication helpers are all upgraded to send the new
format responses. They now use ERR for failed lookup, BH for internal
errors, and OK with ""ha1="" key added to supply a HA1 response. The handler
for Digest authentication is updated to process the new HelperReply fields
with failover the old format on Unknown result codes.

The external ACL handler is updated to pull its key=value pairs out of the
Notes list. The old parser loop becomes useless with this and is removed.
Taking with it support for several long deprecated keys ""login="", ""passwd="",
and ""error="" which are now ignored.


Any other keys MAY be sent on any response. However at this stage 2 patch
they are ignored. As are repeated / secondary values for the expected key
names, only the first instance sent in the response is used.",727,data/crawl/squid/patch_378.diff
https://github.com/squid-cache/squid/commit/fd7f26eaf8b41da6b4131ee33d2c898a888b2044,27 Nov 2012,"Audit Review updates

* guarantee that note values output by the HelperReply parser are """"
  nil-terminated string and not undefined String.
* rename HelperReply::responseKeys to 'notes'
* rename Notes::findByName() to find()
* add Note::firstValue() to locate first value provided for a given key
  and present it as a char* terminated string
* various documentation updates",141,data/crawl/squid/patch_379.diff
https://github.com/squid-cache/squid/commit/62f1035b7153a9ffa5c0981cb13d7f8afcbe7419,24 Nov 2012,merge from parent,266,data/crawl/squid/patch_380.diff
https://github.com/squid-cache/squid/commit/4a77bb4e0e2b3d9da201a01e843467f57cb88b08,24 Nov 2012,Amos requested changes,256,data/crawl/squid/patch_381.diff
https://github.com/squid-cache/squid/commit/d96a5ab4cc2865be3bde9876d2681e3831495902,18 Nov 2012,"log_file_daemon: better error reporting

* report rotation errors and log file removal errors instead of silently
  ignoring them.

 Detected by Coverity Scan. Issue 740316",18,data/crawl/squid/patch_382.diff
https://github.com/squid-cache/squid/commit/be05c1858335550066ee6706166c491e9ab3ca01,16 Nov 2012,"squidclient: Better error checking

* detect and report fstat() errors which could lead to invalid
  Content-Length being sent.

* remove some useless checks which were causing false positives by Coverity.

 Detected by Coverity Scan. Issues 740334, 740379",16,data/crawl/squid/patch_383.diff
https://github.com/squid-cache/squid/commit/2b506a23dbea86eb6c6e9f5fc1fee44aa1965ac1,15 Nov 2012,"ntlm_fake_auth: Fix nesting error

Broken macro wrapping leads to the fake authenticator sending bad
responses to Squid. This can ead to users being rejected by the fake
helper whose purpose is to accept everything.

 Detected by Coverity Scan. Issue 740394",10,data/crawl/squid/patch_384.diff
https://github.com/squid-cache/squid/commit/665e9b5bd4e9a9e3cadcd8f6735ab75f512c2e96,15 Nov 2012,Type in squid-3-12447,2,data/crawl/squid/patch_385.diff
https://github.com/squid-cache/squid/commit/03f581b09946b8c0b8c383c58e4c2d42bd413ea3,14 Nov 2012,"ext_time_quota_acl: Polish and handle bad input better

* Send BH response code when username field is missing or empty on the
  input line received from Squid (or manually typed)

* Display error message on broken config file lines and skip instead of
  crashing.

* Polish out some unused assignments.

 Detected by Coverity Scan. Issues 740404, 740405, 740591",30,data/crawl/squid/patch_386.diff
https://github.com/squid-cache/squid/commit/ed7f08683a186453fe6ed3249b0bda0a85b092fd,14 Nov 2012,"ext_file_userip_acl: Polish and missing file handling

* Display error when dictionary file is unaccessible instead of crashing.

* Polish several useless assignments out of the code.

 Detected by Coverity Scan. Issues 740402, 740403, 740589, 740590.",26,data/crawl/squid/patch_387.diff
https://github.com/squid-cache/squid/commit/85b0d7b862f0a2dc34f97be23bbbd17566e32c81,14 Nov 2012,"digest_file_auth: Improved error handling

Adds missing error handling when pasword file fails to open for any
reason.

Skips records with missing username in password file.Displays an error
message instead of crashing.

 Detected by Coverity Scan. Issues 740400, 740401",15,data/crawl/squid/patch_388.diff
https://github.com/squid-cache/squid/commit/69c954eb754f8a939e82948ce67916ff0dc850f3,14 Nov 2012,"basic_radius_auth: Fix several issues

* abort on failed fcntl() non-blocking socket setup

* retry send() on failure. Up to retry attempt count.
  Display send() errors to cache.log.

* prevent buffer overflow on long command line arguments.

* make compiler buffer overflow checks happier with RADIUS packet 
  creation code.

 Detected by Coverity Scan. Issues 740314, 740315, 740410, 740474",23,data/crawl/squid/patch_389.diff
https://github.com/squid-cache/squid/commit/3c18a6773e7d3011ba323e4ae3f1927b9aeab494,13 Nov 2012,"basic_ncsa_auth: Fix NULL-dereference crash

When reading corrupt or broken user passwd files with missing username
data this helper can crash.

 Detected by Coverity Scan. Issue 740398",11,data/crawl/squid/patch_390.diff
https://github.com/squid-cache/squid/commit/637c35b2073582f30a4601f98b19fc5fc9c6e976,13 Nov 2012,merge from SslServerCertValidator r12332,16798,data/crawl/squid/patch_391.diff
https://github.com/squid-cache/squid/commit/53251bc3a57a1321e2bf7b8bbc0f26ca5bfc734f,13 Nov 2012,merge from trunk r12441,16792,data/crawl/squid/patch_392.diff
https://github.com/squid-cache/squid/commit/05e5285440fcf3537422a5282ebd0d35898ef9fd,10 Nov 2012,"Fix URL-decode logics consistency

* always perform URL-decode on only token form of values
  (\-escaping always removed on all values prior to URL-decode)

* document change in URL-encoding for external_acl_type config

* deprecate external_acl type quote= and protocol= options

* remove unneeded 'urlQuoting' parameter from HelperReply parser",65,data/crawl/squid/patch_393.diff
https://github.com/squid-cache/squid/commit/c69199bb22ce6d16080bc84c613823830c22c0d3,09 Nov 2012,"Upgrade Digest authentication to use key=value parameters

* Update the Digest auth code in Squid to process the HelperReply key-pair
  notes list for data
+ output upgrade WARNING messages when old format responses are identified
+ handle TT result code (as an error with critical level ERROR message)
+ handle BH result code (as an error)

* Adds a ha1="""" key to Digest auth response protocol to pass the HA1.

* Upgrade the Digest helpers to use OK/ERR/BH result codes and key=value
  parameters.",82,data/crawl/squid/patch_394.diff
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/patch_395.diff
https://github.com/squid-cache/squid/commit/f073f56cd9245475e12263e27bded8dd1745aa9d,02 Nov 2012,Add SEND_BH macro to helper API definitions,3,data/crawl/squid/patch_396.diff
https://github.com/squid-cache/squid/commit/e35d7a779c709e19a2608bfefec75074b435333d,01 Nov 2012,"Portability: Move testRefCount to src/

It seems the automake dependencies on stub_*.o are still not working well
and ICC requires several stubs in order to link libbase.la.

This also adds new stubs for MemBuf.h and cbdata.h APIs.",81,data/crawl/squid/patch_397.diff
https://github.com/squid-cache/squid/commit/e166785ad679d33acc445d2d96facc065bc63a35,29 Oct 2012,"Support OK/ERR/BH response codes from any helper

Updates the helper reponse callback API from using char* buffer to a
HelperReply object storing teh response code, a blob buffer, and 
pointer to the responding helper 'server' (if stateful).

* the helper I/O read handler is updated to parse the result code off
the start of the helper response as is currently done for channel-ID.
The callback handlers are altered to use the HelperReply::status instead
of parsing it off themselves individually.

* the remaining I/O read buffer is stored in a MemBuf and callbacks are
updated to use it via the method other().

* the responding helper-server is stored into the HelperReply object and
stateful helper callbacks are combined into the same API as stateless.
The callback handlers are updated to use HelperReply::lastserver instead
of function parameter.

After this patch the helper response format is:
  [channel-ID] SP [result] [ [SP] blob] <terminator>

'SP' being one octet \0x20 character.

The behavour changes expected from this is that all helpers are now able
to send OK/ERR/BH states. Although the handlers for some helpers will
deal with the new states as unknown response. None of the bundled
helpers have yet been altered to make use of this changed potential.

TODO:
* implement key=value parser for the blob area of the format, and update
handlers to use the HelperReply API to retrieve them.
* upgrade helpers to make use of new response format",558,data/crawl/squid/patch_398.diff
https://github.com/squid-cache/squid/commit/45bb03812cb68af775325092731082b5485e9dce,29 Oct 2012,Bug 3189: AIO thread race on pipe() initialization,18,data/crawl/squid/patch_399.diff
https://github.com/squid-cache/squid/commit/b3404bc5f559ff3d73960357e6b94f20e6ac6a31,26 Oct 2012,"note option

Add forgotten Notes.cc and Notes.h file",234,data/crawl/squid/patch_400.diff
https://github.com/squid-cache/squid/commit/d7f4a0b73b11fade7274e344c0293af319696459,26 Oct 2012,"note option

This patch adds note option to squid.conf. It is similar to 
adaptation_meta but is applied after all adaptation and before logging.
Values of key/value pair notes can be logged using %{key}note macros.

    note key value acl ...
    logformat myFormat ... %{key}note ...

This option may be initially used to log custom information about the master
transaction. For example, an admin may configure Squid to log which ""user group""
the transaction belongs to, where ""user group"" will be determined based on a
set of ACLs and not [just] authentication information.

From user point of view, adaptation_header sets/implies meta (i.e.,
setting adaptation_meta is sufficient to be able to log it using
%note) but the note option itself (if any) is evaluated later,
so it has no effect on ICAP headers.

This is a Measurement Factory project",350,data/crawl/squid/patch_401.diff
https://github.com/squid-cache/squid/commit/7ed5335a75259ae22fa4b9e4e2893b3b9b92c15d,20 Oct 2012,"Remove the refresh_pattern ignore-no-cache option

With the HTTP/1.1 Cache-Control:no-cache compliance upgrade this option became
obsolete. Its main use-case was to force caching of responses which contained this
control. Revalidation is now happening and no-cache objects are cached by default.

The one remaining effect of ignoring no-cache is to prevent no-cache from allowing
authenticated responses being cached. Which is the opposite of its usually expected
result and allowing that change of behaviour would be counter productive.",30,data/crawl/squid/patch_402.diff
https://github.com/squid-cache/squid/commit/4629f000085591c9200fb70a3e46ed2b212e6fb3,05 Oct 2012,Move fatal family of functions to own implementation and stub files.,344,data/crawl/squid/patch_403.diff
https://github.com/squid-cache/squid/commit/1f0a1fe79cb4246172ce3db07dbec257b7b4cb80,05 Oct 2012,"Shuffled fatal family of functions into own implementation.
Created stub for fatal.cc.
Move all files to src/ due to their dependencies.",84,data/crawl/squid/patch_404.diff
https://github.com/squid-cache/squid/commit/1b32d93c7506a07285526e5b3028523c96db8c45,05 Oct 2012,"SourceFormat merge: removed CVS-Id tags, removed unnecessary extern and SQUIDCEXTERN declarations",641,data/crawl/squid/patch_405.diff
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/patch_406.diff
https://github.com/squid-cache/squid/commit/6d7a7410b325ea18b86ed906c1e2b810779c93f2,04 Oct 2012,Removed leftover CVS-Id markers,340,data/crawl/squid/patch_407.diff
https://github.com/squid-cache/squid/commit/82afb1254b4126bf16706b9215a80bf43266c723,04 Oct 2012,"Removed unnecessary extern declarations.
Changed mismatching class/struct declaration in fde.h 
Created default constructor for _fde_disk and moved there proper initialization
Removed some dead function declarations",172,data/crawl/squid/patch_408.diff
https://github.com/squid-cache/squid/commit/2d612ae7ecf98d658053f9e43a4893424cf59646,03 Oct 2012,"sourceformat: split protos.h into more specific headers, change many functions' likage to c++.",6626,data/crawl/squid/patch_409.diff
https://github.com/squid-cache/squid/commit/72e820efb8128e5249fbc41b4d9e11c1affc06ae,02 Oct 2012,"Bug 3130: helpers are crashing too rapidly

As discussed quite many months ago. This reduces the FATAL when helpers
crash/exit to a critical level ERROR have responded with useful reply to
at least one lookup.

The result is that Squid can now cope with helpers written in languages
which cannot loop infinitely. For example; PHP helpers often exit after
a timeout, broken scripts written to respond and exit immediately,
and helpers which encounter some permissions error and respond only with
""ERR"" or ""BH"" results before aborting.",16,data/crawl/squid/patch_410.diff
https://github.com/squid-cache/squid/commit/1f7ba0b4867d6b5a5c42e7925eb6df51fa89f08f,02 Oct 2012,"Polish: de-duplicate helper statistics objects

* Combine the stats structure on per-helper server classes. For more
  consistent statistic gathering.

* Add initStats() method to initialize statistics variables correctly.
  Previously only done for some counters on stateless helper objects.

* Add missing accounting of pending lookups in stateful helper code.

* Add counter for replies received from the helper.

* Add reporting of replies received back from each helper.

There are no logic or decision making logics affected by these changes.
The new increment/decrement and stats are purely affecting statistical
report outputs.


FUTURE TODO:
* replace the 'busy' flag on stateful helpers with pending>0 check
  as used by stateless helpers to indicate queue count.",52,data/crawl/squid/patch_411.diff
https://github.com/squid-cache/squid/commit/d850d8eeefd035925cca584a136b4b646de93b2a,22 Sep 2012,Update NTLM and Negotiate TT result code handlers to use token=,14,data/crawl/squid/patch_412.diff
https://github.com/squid-cache/squid/commit/8a648e8d11c5191a8bc49238ec69e22f2b680b5d,21 Sep 2012,"Removed ""extern"" and SQUIDCEXTERN keyword from regular functions (they have extern linkage by default)",1042,data/crawl/squid/patch_413.diff
https://github.com/squid-cache/squid/commit/001d55dc4fd8caab03411a51337d147001db5771,21 Sep 2012,"Added some class documentation.
Removed explicit ""extern"" markers from some functions",259,data/crawl/squid/patch_414.diff
https://github.com/squid-cache/squid/commit/71b673d4d02a34b4d250212d067234aaab328708,20 Sep 2012,"Reworked a few includes, changed some linkages.",104,data/crawl/squid/patch_415.diff
https://github.com/squid-cache/squid/commit/450fe1cb6394694a53d3c55f4bf7aa03b7785c68,19 Sep 2012,Improved documentation and standardized names for RequestFlags,395,data/crawl/squid/patch_416.diff
https://github.com/squid-cache/squid/commit/0272dd08f2be7f000c031ddc1a3c720efc4696aa,19 Sep 2012,Convert helper char* response to class,562,data/crawl/squid/patch_417.diff
https://github.com/squid-cache/squid/commit/45e5102dcbea7ddf2f6094db16502aa8d1837079,18 Sep 2012,Reverted most RequestFlags getters/setters,663,data/crawl/squid/patch_418.diff
https://github.com/squid-cache/squid/commit/2cef0ca6fdbc43e495f2b33be1ec0205bf173ba1,14 Sep 2012,"Initial SSL server certificate validator implementation
http://wiki.squid-cache.org/Features/SslServerCertValidator",361,data/crawl/squid/patch_419.diff
https://github.com/squid-cache/squid/commit/d60a166f39212bbc756544dea5e95ff5391a7645,13 Sep 2012,more RequestFlags getters/setters,128,data/crawl/squid/patch_420.diff
https://github.com/squid-cache/squid/commit/3aefe2bb7f5a4ea226e622dfe0a30e095bcf0c1f,13 Sep 2012,"Completed protos.h split and code refactoring

Complete the task of splitting protos.h into more specific files
Remove inclusion of protos.h from most files
Clean CVS and arch file-tags up
Rework some module initialization code so that it is the callee's task and not the callers' to do feature-enabling
Added ssl-crtd option to the maximus build test
Changed many functions' linkage type from C to C++",3766,data/crawl/squid/patch_421.diff
https://github.com/squid-cache/squid/commit/86660d64fb95f949de9820e44233a273e97ebf91,06 Sep 2012,"Bug fix: TLS/SSL Options does not apply to the dynamically generated certificates

The TLS/SSL options configured with http_port configuration parameter does not
used to generate SSL_CTX context objects used to establish SSL connections.
This is means that certificate based authentication, or SSL version selection
and other SSL/TLS http_port options does not work for ssl-bumped connection.
This patch fixes this problem.

This is a Measurement Factory project",526,data/crawl/squid/patch_422.diff
https://github.com/squid-cache/squid/commit/5bed43d622661d7302e7a0a740730129fecb3022,30 Aug 2012,Moved some prototypes to tools.h,145,data/crawl/squid/patch_423.diff
https://github.com/squid-cache/squid/commit/fc54b8d21cac0631578f3e382f68fa9e996210ae,28 Aug 2012,"protos.h refactoring, part one.

Refactor many function prototypes from protos.h to more specific header files.
Change linkage for moved prototypes to c++.",2367,data/crawl/squid/patch_424.diff
https://github.com/squid-cache/squid/commit/a5bac1d2c727c558b8af4c13d3c5a84137435596,22 Aug 2012,moved HttpHeaderTools.cc-related headers to HttpHeaderTools.h,64,data/crawl/squid/patch_425.diff
https://github.com/squid-cache/squid/commit/58373ff8b8ac94bf427cc47c65dbb9c21f560a36,10 Aug 2012,"SourceLayout: introduce Fs::Ufs namespace, split ufscommon, store_dir_ufs and store_io_ufs",2913,data/crawl/squid/patch_426.diff
https://github.com/squid-cache/squid/commit/b632b875fc726b9eb4e57535e93c4ae1f038818c,09 Aug 2012,Convert all yet-unconverted stub files to the STUB API.,226,data/crawl/squid/patch_427.diff
https://github.com/squid-cache/squid/commit/9375050a3140f45d06b6b55fc666efc6518ba16f,08 Aug 2012,Fixed formatting of stub_libcomm.cc,65,data/crawl/squid/patch_428.diff
https://github.com/squid-cache/squid/commit/54311b7026f3f5af011cd808127103d4ed4e6795,08 Aug 2012,"Moved to STUB API stubs for DelayId.cc, HelperChildconfig.cc, debug.cc",23,data/crawl/squid/patch_429.diff
https://github.com/squid-cache/squid/commit/5fe1f1c4311d7511d66d1168f7d105aa436fc635,02 Aug 2012,SourceFormat Enforcement,4,data/crawl/squid/patch_430.diff
https://github.com/squid-cache/squid/commit/0bf57f33e5b7001cc680e9d978a027f6264faa60,01 Aug 2012,More GCC 4.2 dependency fixes,48,data/crawl/squid/patch_431.diff
,,,,
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/patch_432.diff
https://github.com/squid-cache/squid/commit/14942eddc4ada4eea1bf57b9dcbe396545812258,19 Jul 2012,Changed increment operators from postfix to prefix form.,178,data/crawl/squid/patch_433.diff
https://github.com/squid-cache/squid/commit/8621b1ac6e2d63a83a41bd808bd3783dee06e416,18 Jul 2012,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
SslBump: Support bump-ssl-server-first and mimic SSL server certificates.

Summary: These changes allow Squid working in SslBump mode to peek at
the origin server certificate and mimic peeked server certificate
properties in the generated fake certificate, all prior to establishing
a secure connection with the client:
http://wiki.squid-cache.org/Features/BumpSslServerFirst
http://wiki.squid-cache.org/Features/MimicSslServerCert

The changes are required to bump intercepted SSL connections without
excessive browser warnings. The changes allow to disable bumping of some
intercepted SSL connections, forcing Squid to go into a TCP tunnel mode
for those connections.

The changes also empower end user to examine and either honor or bypass
most origin SSL server certificate errors. Prior to these changes, the
responsibility for ignoring certificate validation errors belonged
exclusively to Squid, necessarily leaving users in the dark if errors
are ignored/bypassed.

Squid can still be configured to emulate old bump-ssl-client-first
behavior.  However, a manual revision of ssl_bump options is required
during upgrade because ssl_bump no longer supports an implicit ""negate
the last one"" rule (and it is risky to let Squid guess what the admin
true intent was or mix old- and new-style rules).

Finally, fake certificate generation has been significantly improved.
The new code guarantees that all identically configured Squids receiving
identical origin server certificates will generate identical fake
certificates, even if those Squid instances are running on different
hosts, at different times, and do not communicate with each other. Such
stable, reproducible certificates are required for distributed,
scalable, or fail-safe Squid deployment.

Overall, the changes are meant to make SslBump more powerful and safer.
The code has been tested in several independent labs.


Specific major changes are highlighted below:

Make bumping algorithm selectable using ACLs. Even though
bump-server-first is an overall better method, bumping the client first
is useful for backward compatibility and possibly for serving internal
Squid objects (such as icons inside Squid error pages).  The following
example bumps special and most other requests only, using the old
bump-client-first approach for the special requests only:

    ssl_bump client-first specialOnes
    ssl_bump server-first mostOthers
    ssl_bump none all

It allow use the old ssl_bump syntax:
   ssl_bump allow/deny acl ...
but warns the user to update squid configuration.

Added sslproxy_cert_adapt squid.conf option to overwrite default mimicking
behavior when generating SSL certificates. See squid.conf.documented.

Added sslproxy_cert_sign squid.conf option to control how generated SSL
certificates are signed. See squid.conf.documented.

Added ssl::certHasExpired, ssl::certNotYetValid, ssl::certDomainMismatch,
ssl::certUntrusted, and ssl::certSelfSign predefined ACLs to squid.conf.

Do not require http[s]_port's key option to be set if cert option is given.
The fixed behavior for bumped connections now matches squid.conf docs.

Generate stable fake certificates by using signing and true certificate
hashes as the serial number and by using the configured CA private key
for all fake certificates.

Use minimal, trusted certificate for serving SSL errors to the client
instead of trying to mimic the broken true certificate (which results
in double error for the user: browser error dialog plus Squid error page).

To mimic ""untrusted"" true certificates, generate an untrusted CA certificate
from the configured trusted CA certificate. This both reduces configuration
effort (compared to a configuration option) and results in identical
untrusted fake certificates given identical Squid configurations.

Intelligent handling of CONNECT denials: Do not connect to origin
servers unless CONNECT is successfully authenticated. Delay errors.Added sslproxy_cert_sign squid.conf option to control how generated SSL
certificates are signed. See squid.conf.documented.

Provide '%I' error page formatting code with enough information to avoid
displaying '[unknown]' on SQUID_X509_V_ERR_DOMAIN_MISMATCH errors.

Set logged status code (%<Hs) to 200 when establishing a bumped tunnel.

Improved error detailing and logging: Forget most retried errors.
During SslBump errors, the error details are now logged with both the
initial CONNECT transaction and the first tunneled HTTP transaction.
Do not report system errors as custom Squid errors. Do not report
system errors that did not necessarily happen during the transaction
being logged.

Check SSL server certificate when reconnecting to the origin server for
bumped requests. Despite pinning, Squid maintains two separate connections
and the server may disconnect while the client is still sending requests. To
minimize deployment problems, we reconnect to the origin server but check
that its certificate (which we mimicked for the client) has not changed
much.

Forward bumped server connection-close signal to the bumped client to
improve the ""dumb tunnel"" appearance of the bumped SSL tunnel.

Allow bumping of CONNECT requests without allow-direct set on http_port.
Previously, that flag was required to allow bumped requests to go direct
because they were (and, sometimes, still are) considered ""accelerated"".

Send SNI information to the server when server-first bumping a non-IP
CONNECT request.

Better helper-to-Squid buffer size management to support large certificates.

Bypass rare OpenSSL certificate serialization failures when composing an
ssl_crtd request by generating the certificate in the Squid process.

When generating certificate CN names, strip [] surrounding host names,
assuming they are for IPv6 addresses. Bracketed CNs confuse browsers.

Disable persistent connections after client-side-detected errors. They cause
""abandoning such and such connection"" warnings, stuck ConnStateData jobs, and
other problems.

HttpRequest::SetHost() must invalidate HttpRequest::canonical ""cache"".

Implement ssl::bump_mode logformat code to log SslBump decisions: prints ""none"",
""client-first"", ""server-first"" or ""-"" for no ssl-bump enabled ports

Synced with trunk (trunk r12216, v3.2.0.18+)

This is a Measurement Factory project.",3561,data/crawl/squid/patch_434.diff
https://github.com/squid-cache/squid/commit/2f6fcab1f37182a2b52350efb42a63c9cf949568,18 Jul 2012,"Bug 3551: store_rebuild.cc:116: ""store_errors == 0"" assertion

Fail with an explanation instead of asserting. The assertion fails when a ufs
cache_dir's swap.state has inconsistencies AND the user starts Squid with a -S
command line option. Normally, such inconsistencies are ignored and many of
them are benign.  For example, a missing cache file with an ADD record in
swap.state is such an inconsistency.

The -S option was meant to help developers troubleshoot inconsistencies by
analyzing core dumps, but (a) admins treat assertions as Squid bugs and file
bug reports and (b) in most cases, it is really difficult to find the
inconsistency when Squid asserts after detecting all of them (and leaving the
detection context).

We now explicitly tell the admin what their options are and quit instead of
asserting.

TODO: Consider adding a ufs cache_dir option that checks for and removes
inconsistencies instead of not checking at all (default) or checking and
quitting (-S). This is difficult because some valid cache entries may look
inconsistent while they are being updated and some invalid cache entries
are not visible to Squid without a full directory scan.",8,data/crawl/squid/patch_435.diff
https://github.com/squid-cache/squid/commit/71cae3894fd0c52dd4b4bfedb3ac1323eb619a73,18 Jul 2012,merge from trunk (r12216 v3.2.0.18+),2062,data/crawl/squid/patch_436.diff
https://github.com/squid-cache/squid/commit/5db6bf73931d8c426d81085d757c8b1206b02c9b,18 Jul 2012,Changed increment operators from postfix to prefix form.,469,data/crawl/squid/patch_437.diff
https://github.com/squid-cache/squid/commit/95dc7ff44bb6598cf09020f2ac9b66f0cb28f8e5,17 Jul 2012,Changed increment operators from postfix to prefix form.,541,data/crawl/squid/patch_438.diff
https://github.com/squid-cache/squid/commit/f4698e0b79fa14c3ae1758eb36561aaa39344cd7,17 Jul 2012,"Add request_header_add option

This patch:

- Add request_header_add, a new ACL-driven squid.conf option that         
  allow addition of HTTP request header fields before the request is sent to
  the next HTTP hop (a peer proxy or an origin server):
     request_header_add <field-name> <field-value> acl1 [acl2]
  where:
     * Field-name is a token specifying an HTTP header name.
     
     * Field-value is either a constant token or a quoted string containing
       %macros. In theory, all of the logformat codes can be used as %macros.
       However, unlike logging the transaction may not yet have enough
       information to expand a macro when the new header value is needed.
       The macro will be expanded into a single dash ('-') in such cases.
       Not all macros have been tested.

     * One or more Squid ACLs may be specified to restrict header insertion to
       matching requests. The request_header_add option supports fast ACLs only.

- Add the %ssl::>cert_subject and %ssl::>cert_issuer logformating codes which
  prints the Subject field and Issuer field of the received client SSL
  certificate or a dash ('-').

This is a Measurement Factory project.",328,data/crawl/squid/patch_439.diff
https://github.com/squid-cache/squid/commit/6dd9a2e497684ead9334c48ae450c02f2b3f3775,10 Jul 2012,"Bug 3577: File Descriptors not properly closed in trunk r12185.
Bug 3583: Server connection stuck after TCP_REFRESH_UNMODIFIED.

These changes fix FD leaks and stuck connections under two conditions:

1) Client aborts while Squid's server-side establishes a connection

Bug 3577: When a client quits while ConnOpener is trying to open the
connection to the next hop, FwdState cancels its ConnOpener callback.
ConnOpener notices that when trying to connect again and quits before
establishing a connection. The ConnOpener cleanup code did not close the
temporary FD used for establishing the connection. It did call fd_close(),
but fd_close() does not close the FD, naturally.

ConnOpener was probably leaking the temporary FD in other error handling
cases as well. It was never closed unless the connection was successful.


2) Client aborts after Squid's server-side established a connection:

Bug 3583: When a client aborts the store entry after receiving an HTTP 304 Not
Modified reply in response to a cache refreshing IMS request, HttpStateData
notices an aborted Store entry (after writing the reply to store), but does
virtually nothing, often resulting in a stuck server connection, leaking a
descriptor.  Now we abort the server-side transaction in this case.

Bug 3577: Similarly, when a client disconnects after Squid started talking to
the origin server but before Squid received a [complete] server response,
HttpStateData notices an aborted Store entry (during the next read from the
origin server), but does virtually nothing, often resulting in a stuck server
connection, leaking a descriptor. Now we abort the server-side transaction in
this case.

FwdState now also closes the server-side connection, if any, when the client
aborts the store entry and FwdState::abort() callback is called. This helps
reduce the number of concurrent server-side connections when clients abort
connections rapidly as Squid no longer has to wait for the server-side I/O to
notice that the entry is gone. The code to close the connection was temporary
removed in trunk r10057.1.51.",18,data/crawl/squid/patch_440.diff
,,,,
,,,,
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/patch_441.diff
https://github.com/squid-cache/squid/commit/14942eddc4ada4eea1bf57b9dcbe396545812258,19 Jul 2012,Changed increment operators from postfix to prefix form.,178,data/crawl/squid/patch_442.diff
https://github.com/squid-cache/squid/commit/8621b1ac6e2d63a83a41bd808bd3783dee06e416,18 Jul 2012,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
SslBump: Support bump-ssl-server-first and mimic SSL server certificates.

Summary: These changes allow Squid working in SslBump mode to peek at
the origin server certificate and mimic peeked server certificate
properties in the generated fake certificate, all prior to establishing
a secure connection with the client:
http://wiki.squid-cache.org/Features/BumpSslServerFirst
http://wiki.squid-cache.org/Features/MimicSslServerCert

The changes are required to bump intercepted SSL connections without
excessive browser warnings. The changes allow to disable bumping of some
intercepted SSL connections, forcing Squid to go into a TCP tunnel mode
for those connections.

The changes also empower end user to examine and either honor or bypass
most origin SSL server certificate errors. Prior to these changes, the
responsibility for ignoring certificate validation errors belonged
exclusively to Squid, necessarily leaving users in the dark if errors
are ignored/bypassed.

Squid can still be configured to emulate old bump-ssl-client-first
behavior.  However, a manual revision of ssl_bump options is required
during upgrade because ssl_bump no longer supports an implicit ""negate
the last one"" rule (and it is risky to let Squid guess what the admin
true intent was or mix old- and new-style rules).

Finally, fake certificate generation has been significantly improved.
The new code guarantees that all identically configured Squids receiving
identical origin server certificates will generate identical fake
certificates, even if those Squid instances are running on different
hosts, at different times, and do not communicate with each other. Such
stable, reproducible certificates are required for distributed,
scalable, or fail-safe Squid deployment.

Overall, the changes are meant to make SslBump more powerful and safer.
The code has been tested in several independent labs.


Specific major changes are highlighted below:

Make bumping algorithm selectable using ACLs. Even though
bump-server-first is an overall better method, bumping the client first
is useful for backward compatibility and possibly for serving internal
Squid objects (such as icons inside Squid error pages).  The following
example bumps special and most other requests only, using the old
bump-client-first approach for the special requests only:

    ssl_bump client-first specialOnes
    ssl_bump server-first mostOthers
    ssl_bump none all

It allow use the old ssl_bump syntax:
   ssl_bump allow/deny acl ...
but warns the user to update squid configuration.

Added sslproxy_cert_adapt squid.conf option to overwrite default mimicking
behavior when generating SSL certificates. See squid.conf.documented.

Added sslproxy_cert_sign squid.conf option to control how generated SSL
certificates are signed. See squid.conf.documented.

Added ssl::certHasExpired, ssl::certNotYetValid, ssl::certDomainMismatch,
ssl::certUntrusted, and ssl::certSelfSign predefined ACLs to squid.conf.

Do not require http[s]_port's key option to be set if cert option is given.
The fixed behavior for bumped connections now matches squid.conf docs.

Generate stable fake certificates by using signing and true certificate
hashes as the serial number and by using the configured CA private key
for all fake certificates.

Use minimal, trusted certificate for serving SSL errors to the client
instead of trying to mimic the broken true certificate (which results
in double error for the user: browser error dialog plus Squid error page).

To mimic ""untrusted"" true certificates, generate an untrusted CA certificate
from the configured trusted CA certificate. This both reduces configuration
effort (compared to a configuration option) and results in identical
untrusted fake certificates given identical Squid configurations.

Intelligent handling of CONNECT denials: Do not connect to origin
servers unless CONNECT is successfully authenticated. Delay errors.Added sslproxy_cert_sign squid.conf option to control how generated SSL
certificates are signed. See squid.conf.documented.

Provide '%I' error page formatting code with enough information to avoid
displaying '[unknown]' on SQUID_X509_V_ERR_DOMAIN_MISMATCH errors.

Set logged status code (%<Hs) to 200 when establishing a bumped tunnel.

Improved error detailing and logging: Forget most retried errors.
During SslBump errors, the error details are now logged with both the
initial CONNECT transaction and the first tunneled HTTP transaction.
Do not report system errors as custom Squid errors. Do not report
system errors that did not necessarily happen during the transaction
being logged.

Check SSL server certificate when reconnecting to the origin server for
bumped requests. Despite pinning, Squid maintains two separate connections
and the server may disconnect while the client is still sending requests. To
minimize deployment problems, we reconnect to the origin server but check
that its certificate (which we mimicked for the client) has not changed
much.

Forward bumped server connection-close signal to the bumped client to
improve the ""dumb tunnel"" appearance of the bumped SSL tunnel.

Allow bumping of CONNECT requests without allow-direct set on http_port.
Previously, that flag was required to allow bumped requests to go direct
because they were (and, sometimes, still are) considered ""accelerated"".

Send SNI information to the server when server-first bumping a non-IP
CONNECT request.

Better helper-to-Squid buffer size management to support large certificates.

Bypass rare OpenSSL certificate serialization failures when composing an
ssl_crtd request by generating the certificate in the Squid process.

When generating certificate CN names, strip [] surrounding host names,
assuming they are for IPv6 addresses. Bracketed CNs confuse browsers.

Disable persistent connections after client-side-detected errors. They cause
""abandoning such and such connection"" warnings, stuck ConnStateData jobs, and
other problems.

HttpRequest::SetHost() must invalidate HttpRequest::canonical ""cache"".

Implement ssl::bump_mode logformat code to log SslBump decisions: prints ""none"",
""client-first"", ""server-first"" or ""-"" for no ssl-bump enabled ports

Synced with trunk (trunk r12216, v3.2.0.18+)

This is a Measurement Factory project.",3561,data/crawl/squid/patch_443.diff
https://github.com/squid-cache/squid/commit/2f6fcab1f37182a2b52350efb42a63c9cf949568,18 Jul 2012,"Bug 3551: store_rebuild.cc:116: ""store_errors == 0"" assertion

Fail with an explanation instead of asserting. The assertion fails when a ufs
cache_dir's swap.state has inconsistencies AND the user starts Squid with a -S
command line option. Normally, such inconsistencies are ignored and many of
them are benign.  For example, a missing cache file with an ADD record in
swap.state is such an inconsistency.

The -S option was meant to help developers troubleshoot inconsistencies by
analyzing core dumps, but (a) admins treat assertions as Squid bugs and file
bug reports and (b) in most cases, it is really difficult to find the
inconsistency when Squid asserts after detecting all of them (and leaving the
detection context).

We now explicitly tell the admin what their options are and quit instead of
asserting.

TODO: Consider adding a ufs cache_dir option that checks for and removes
inconsistencies instead of not checking at all (default) or checking and
quitting (-S). This is difficult because some valid cache entries may look
inconsistent while they are being updated and some invalid cache entries
are not visible to Squid without a full directory scan.",8,data/crawl/squid/patch_444.diff
https://github.com/squid-cache/squid/commit/71cae3894fd0c52dd4b4bfedb3ac1323eb619a73,18 Jul 2012,merge from trunk (r12216 v3.2.0.18+),2062,data/crawl/squid/patch_445.diff
https://github.com/squid-cache/squid/commit/5db6bf73931d8c426d81085d757c8b1206b02c9b,18 Jul 2012,Changed increment operators from postfix to prefix form.,469,data/crawl/squid/patch_446.diff
https://github.com/squid-cache/squid/commit/95dc7ff44bb6598cf09020f2ac9b66f0cb28f8e5,17 Jul 2012,Changed increment operators from postfix to prefix form.,541,data/crawl/squid/patch_447.diff
https://github.com/squid-cache/squid/commit/f4698e0b79fa14c3ae1758eb36561aaa39344cd7,17 Jul 2012,"Add request_header_add option

This patch:

- Add request_header_add, a new ACL-driven squid.conf option that         
  allow addition of HTTP request header fields before the request is sent to
  the next HTTP hop (a peer proxy or an origin server):
     request_header_add <field-name> <field-value> acl1 [acl2]
  where:
     * Field-name is a token specifying an HTTP header name.
     
     * Field-value is either a constant token or a quoted string containing
       %macros. In theory, all of the logformat codes can be used as %macros.
       However, unlike logging the transaction may not yet have enough
       information to expand a macro when the new header value is needed.
       The macro will be expanded into a single dash ('-') in such cases.
       Not all macros have been tested.

     * One or more Squid ACLs may be specified to restrict header insertion to
       matching requests. The request_header_add option supports fast ACLs only.

- Add the %ssl::>cert_subject and %ssl::>cert_issuer logformating codes which
  prints the Subject field and Issuer field of the received client SSL
  certificate or a dash ('-').

This is a Measurement Factory project.",328,data/crawl/squid/patch_448.diff
https://github.com/squid-cache/squid/commit/6dd9a2e497684ead9334c48ae450c02f2b3f3775,10 Jul 2012,"Bug 3577: File Descriptors not properly closed in trunk r12185.
Bug 3583: Server connection stuck after TCP_REFRESH_UNMODIFIED.

These changes fix FD leaks and stuck connections under two conditions:

1) Client aborts while Squid's server-side establishes a connection

Bug 3577: When a client quits while ConnOpener is trying to open the
connection to the next hop, FwdState cancels its ConnOpener callback.
ConnOpener notices that when trying to connect again and quits before
establishing a connection. The ConnOpener cleanup code did not close the
temporary FD used for establishing the connection. It did call fd_close(),
but fd_close() does not close the FD, naturally.

ConnOpener was probably leaking the temporary FD in other error handling
cases as well. It was never closed unless the connection was successful.


2) Client aborts after Squid's server-side established a connection:

Bug 3583: When a client aborts the store entry after receiving an HTTP 304 Not
Modified reply in response to a cache refreshing IMS request, HttpStateData
notices an aborted Store entry (after writing the reply to store), but does
virtually nothing, often resulting in a stuck server connection, leaking a
descriptor.  Now we abort the server-side transaction in this case.

Bug 3577: Similarly, when a client disconnects after Squid started talking to
the origin server but before Squid received a [complete] server response,
HttpStateData notices an aborted Store entry (during the next read from the
origin server), but does virtually nothing, often resulting in a stuck server
connection, leaking a descriptor. Now we abort the server-side transaction in
this case.

FwdState now also closes the server-side connection, if any, when the client
aborts the store entry and FwdState::abort() callback is called. This helps
reduce the number of concurrent server-side connections when clients abort
connections rapidly as Squid no longer has to wait for the server-side I/O to
notice that the entry is gone. The code to close the connection was temporary
removed in trunk r10057.1.51.",18,data/crawl/squid/patch_449.diff
https://github.com/squid-cache/squid/commit/3b07476b752e45322023212915a52f586cf56c1c,05 Jul 2012,"Author: Alex Rousskov <rousskov@measurement-factory.com>
[request|reply]_header_* manglers fixes to handle custom headers

This patch fix the [request|reply]_header_[access|replace] configuration
parameters to support custom headers. Before this patch the user was able 
to remove/replace/allow all custom headers using the ""Other"" as header name.


This is a Measurement Factory project.",439,data/crawl/squid/patch_450.diff
https://github.com/squid-cache/squid/commit/c91ca3cec34cae248147cec7d710c3d6f46bdb46,22 Jun 2012,"Fix build with GCC 4.7 (and probably other C++11 compilers).

User-defined literals introduced by C++11 break some previously valid
code, resulting in errors when building with GCC v4.7. For example:

  error: unable to find string literal operator 'operator"""" PRIu64'

In particular, whitespace is now needed after a string literal and
before something that could be a valid user-defined literal.  See
""User-defined literals and whitespace"" section at [1] for more details.

The patch adds spaces between string literals and macros.

[1] http://gcc.gnu.org/gcc-4.7/porting_to.html",90,data/crawl/squid/patch_451.diff
https://github.com/squid-cache/squid/commit/4c535e8712b5b4008e78c60ccda9a464d8eee4b9,19 Jun 2012,"Cleanup: disconnect Authentication and URL-rewrite callback handlers

The authentication handlers were for some reason using RH (rewrite helper)
callback typedef. But specifying it as a fatal error if the char*
parameter was used in auth.

Assign a new callback typedef AUTHCB for use by authentication callers.

This allows auth callers to use different parameters (none) and to avoid
possibly fatal mistakes when coding new auth modules.",60,data/crawl/squid/patch_452.diff
https://github.com/squid-cache/squid/commit/e0f7153c051220e63a512fb4e20271e505ec2c52,16 Jun 2012,"Fix several ACL-related bugs including broken default rules and ACCESS_DUNNO.

For example:

    # broken when ""goodGuys"" matches (denies good guys)
    acl_driven_option deny !goodGuys

and

    # broken if badGuys fails to match or mismatch (allows bad guys)
    acl_driven_option allow !badGuys


Fixing the above resulted in significant changes (and more fixes!)
detailed below.

 * Revised ACLChecklist::fastCheck() and nonBlockingCheck() APIs to
   clarify all possible outcomes and to specify that exceptional ACL
   check outcomes (not ALLOW or DENIED) are not ignored/skipped but
   result in the same exceptional final answer. I believe this is the
   right behavior even if it is going to break some [already broken
   IMHO] existing configurations. Skipping failed ACLs is insecure and
   may lead to confusing results.

 * Correctly handle cases where no rules were matched and, hence, the
   keyword/action of the last seen rule (if any) has to be ""reversed"".

 * Do not ignore non-allow/deny outcomes of rules in fastCheck().

 * Move away from setting the ""default"" (and usually wrong) ""current""
   answer and then sometimes adjusting it. Set the answer only when we
   know what it is. This is done using markFinished() call which now
   accepts the [final] answer value and debugging reason for selecting
   that answer.

 * Streamline and better document ACLChecklist::matchAclList()
   interface.  Use it in a more consistent fashion.

 * Rewrote ACLChecklist::matchAclList() implementation when it comes to
   handling ACLList::matches() outcomes. Better document and restrict
   supported outcomes. Assert on unsupported outcomes (for now).

 * Removed ACLChecklist::lastACLResult(). It was doing nothing but
   duplicating nodeMatched value as far as I could tell.

 * Removed ProxyAuthNeeded class. It is an async state that does not
   perform async operations and, hence, is not needed.

 * Move IdentLookup::checkForAsync() connection check into
   ACLIdent::match() to avoid creating an async state that is not
   needed.

 * Polished aclMatchExternal() and greatly simplified
   ACLExternal::ExternalAclLookup() to avoid creating async state under
   non-async conditions, to avoid checking for the same conditions
   twice, to fix wrong debugging messages, and to simplify (and possibly
   fix) the overall algorithm.

   The aclMatchExternal() call now checks most of the corner cases,
   discards stale cached entries, and schedules either a background
   cache update or a regular external lookup as needed.

   ACLExternal::ExternalAclLookup() code is now
   ExternalACLLookup::Start().  It initiates an external lookup. It does
   not deal with the cached entry at all. It relies on
   aclMatchExternal() to check various preconditions.

   Some of the old code made little sense to me, and this is the biggest
   ACL-specific change in this project, with the highest probability of
   new bugs or unintended side-effects.

   My goal here was to prevent aclMatchExternal() from creating an async
   state where none was needed because new ACLChecklist::matchAclList()
   code prohibited such self-contradictory outcomes. However, I later
   discovered that it is not possible to prohibit them without rewriting
   how Squid DNS cache lookups are working -- ipcache_nbgethostbyname()
   and similar code may call back immediately if the item is in the
   cache. Since I did not want to rewrite DNS code as well, I ended up
   relaxing the ACLChecklist::matchAclList() code requirements, going a
   step back to where we sometimes call ACLList::matches() twice for the
   same ACL node.

   Thus, it is probably possible to undo most of the external_acl.cc
   changes.  I left them in because I think they improve the quality of
   the code and possibly fix a bug or two.

 * Adjusted ACLMaxUserIP::match(), ACLProxyAuth::match(), and
   ACLExternal::match() to explicitly stop ACL processing when an
   exceptional state is discovered instead of just setting the current
   answer and proceeding as if more ACLs could be checked. On the other
   hand, we now do not set the answer if the corresponding internal
   matching code (e.g., AuthenticateAcl()) needs an async operation
   because we do not know the answer yet.

 * Fixed HttpStateData::handle1xx() and
   HttpStateData::finishingBrokenPost() to correctly handle
   fastCheck(void) return values. They were assuming that there are only
   two possible return values (ACCESS_DENIED/ALLOWED), potentially
   subjecting more messages to invasive adaptations than necessary.

TODO: 

 * Rename currentAnswer() to finalAnswer(). We probably never change the
   ""current"" answer any more.",614,data/crawl/squid/patch_453.diff
https://github.com/squid-cache/squid/commit/8c730caeff365546089fec4a81b4d26d60e25778,13 Jun 2012,"Fix testHttpParser compile error 'variable tracking size limit exceeded'

This can occur due to long lists of unit tests needing a lot of local
variable state tracking. Essentially 'function too long' after CPPUNIT
macros have been expanded.

Break the large set of request-line unit tests into groups related to
sub-parts of the request-line.",653,data/crawl/squid/patch_454.diff
https://github.com/squid-cache/squid/commit/dcb1e4bbf8c0f051401d00ac7b6bc671c4274e3d,01 Jun 2012,"Fixed several ACL-related bugs, including:

    # broken when ""goodGuys"" matches (denies good guys)
    acl_driven_option deny !goodGuys

and

    # broken if badGuys fails to match or mismatch (allows bad guys)
    acl_driven_option allow !badGuys

Fixing the above resulted in significant changes (and more fixes!)
detailed below.

 * Revised ACLChecklist::fastCheck() and nonBlockingCheck() APIs to
   clarify all possible outcomes and to specify that exceptional ACL
   check outcomes (not ALLOW or DENIED) are not ignored/skipped but
   result in the same exceptional final answer. I believe this is the
   right behavior even if it is going to break some [already broken
   IMHO] existing configurations. Skipping failed ACLs is insecure and
   may lead to confusing results.

 * Correctly handle cases where no rules were matched and, hence, the
   keyword/action of the last seen rule (if any) has to be ""reversed"".

 * Do not ignore non-allow/deny outcomes of rules in fastCheck().

 * Move away from setting the ""default"" (and usually wrong) ""current""
   answer and then sometimes adjusting it. Set the answer only when we
   know what it is. This is done using markFinished() call which now
   accepts the [final] answer value and debugging reason for selecting
   that answer.

 * Streamline and better document ACLChecklist::matchAclList()
   interface.  Use it in a more consistent fashion.

 * Rewrote ACLChecklist::matchAclList() implementation when it comes to
   handling ACLList::matches() outcomes. Better document and restrict
   supported outcomes. Assert on unsupported outcomes (for now).

 * Removed ACLChecklist::lastACLResult(). It was doing nothing but
   duplicating nodeMatched value as far as I could tell.

 * Removed ProxyAuthNeeded class. It is an async state that does not
   perform async operations and, hence, is not needed.

 * Move IdentLookup::checkForAsync() connection check into
   ACLIdent::match() to avoid creating an async state that is not
   needed.

 * Polished aclMatchExternal() and greatly simplified
   ACLExternal::ExternalAclLookup() to avoid creating async state under
   non-async conditions, to avoid checking for the same conditions
   twice, to fix wrong debugging messages, and to simplify (and possibly
   fix) the overall algorithm.

   The aclMatchExternal() call now checks most of the corner cases,
   discards stale cached entries, and schedules either a background
   cache update or a regular external lookup as needed.

   ACLExternal::ExternalAclLookup() code is now
   ExternalACLLookup::Start().  It initiates an external lookup. It does
   not deal with the cached entry at all. It relies on
   aclMatchExternal() to check various preconditions.

   Some of the old code made little sense to me, and this is the biggest
   ACL-specific change in this project, with the highest probability of
   new bugs or unintended side-effects.

   My goal here was to prevent aclMatchExternal() from creating an async
   state where none was needed because new ACLChecklist::matchAclList()
   code prohibited such self-contradictory outcomes. However, I later
   discovered that it is not possible to prohibit them without rewriting
   how Squid DNS cache lookups are working -- ipcache_nbgethostbyname()
   and similar code may call back immediately if the item is in the
   cache. Since I did not want to rewrite DNS code as well, I ended up
   relaxing the ACLChecklist::matchAclList() code requirements, going a
   step back to where we sometimes call ACLList::matches() twice for the
   same ACL node.

   Thus, it is probably possible to undo most of the external_acl.cc
   changes.  I left them in because I think they improve the quality of
   the code and possibly fix a bug or two.

 * Adjusted ACLMaxUserIP::match(), ACLProxyAuth::match(), and
   ACLExternal::match() to explicitly stop ACL processing when an
   exceptional state is discovered instead of just setting the current
   answer and proceeding as if more ACLs could be checked. On the other
   hand, we now do not set the answer if the corresponding internal
   matching code (e.g., AuthenticateAcl()) needs an async operation
   because we do not know the answer yet.

 * Fixed HttpStateData::handle1xx() and
   HttpStateData::finishingBrokenPost() to correctly handle
   fastCheck(void) return values. They were assuming that there are only
   two possible return values (ACCESS_DENIED/ALLOWED), potentially
   subjecting more messages to invasive adaptations than necessary.",618,data/crawl/squid/patch_455.diff
https://github.com/squid-cache/squid/commit/8661a1d0b52a98b649854bfc3f73eccfbae77f7f,31 May 2012,Bootstrapped,12,data/crawl/squid/patch_456.diff
https://github.com/squid-cache/squid/commit/cb72cd25104b546900baa3dafda7525d9d60f392,29 May 2012,"Author: Dan Searle <dan.searle@censornet.com>
External credentials to ICAP

Pass user credentials obtained from external ACLs to the ICAP service
using Proxy-Authorization and X-Client-Username ICAP headers.",16,data/crawl/squid/patch_457.diff
https://github.com/squid-cache/squid/commit/fe1e5c91cd987b5bf3b780736c9ba266ed621234,28 May 2012,"Define PRIuSIZE for displaying size_t

This allows us to avoid casting size_t to long long for printf.

./configure script auto-detects the supposedly standard %zu macro in case
it is missing and compat/types.h defines some alternatives for systems
which do not define it.",46,data/crawl/squid/patch_458.diff
https://github.com/squid-cache/squid/commit/caf3666d1f57f270e2ba21ea4974b44f863c5cf2,04 May 2012,"Re-enabled support for bump-client-first mode using enhanced ssl_bump option.

Even though bump-server-first is an overall better method, bumping the client
first is useful for backward compatibility and possibly for serving internal
Squid objects such as icons.

The code path implementing bump-client-first approach was preserved during the
bump-server-first changes, so we just needed to add a configuration option to
allow the admin to pick between two modes. We did that by using custom ""mode""
keywords with the existing ssl_bump option. The old allow/deny pair of
standard keywords could not be used to select one of the two modes for an
""allowed"" connection.",222,data/crawl/squid/patch_459.diff
https://github.com/squid-cache/squid/commit/65d448bc848526838ea2d5cea65d72a341896f08,25 Apr 2012,"SourceLayout: port config and select-loop priority polishing

- renames http_port_list to AnyP::PortCfg
- de-duplicate https_port_list into AnyP::PortCfg
- shuffles related globals and defines into anyp/PortCfg.*
- renames MAXHTTPPORTS to MAXTCPLISTENPORTS to suit its actual coverage of HTTP and HTTPS ports.
- shuffled config port clone function into a method.
- rename ICP/HTCP/SNMP API functions to consistent *OpenPorts() and *ClosePorts()


  NP:following applies to incoming_* and *_poll_cnt directives.
- renames *_icp_* to *_udp_*
- renames *_http_* to *_tcp_*
- shuffles duplicated struct SquidConf options into a shared structure
- shuffles related defines into comm/Loops.h
- documents options better

- various other cosmetic syntax tweaks and polish

One bug fix:
  comm_dns_incoming was not being propigated in StatsHist copy/clone.
  Now is. I seem to remember mention of something similar being zero before,
  but can't find the bug report.",1098,data/crawl/squid/patch_460.diff
https://github.com/squid-cache/squid/commit/31e19066e7ee2c4f9660855092bb828c9f69f5d7,23 Mar 2012,"Bug 3193: NTLM decoder truncating strings

* Also ntlm_unpack_auth using reversed arguments for memcpy()
* Also improved packet structure debug display",40,data/crawl/squid/patch_461.diff
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/patch_462.diff
https://github.com/squid-cache/squid/commit/aebe6888b2d7870965f2e7877e562004e4d91bf9,27 Jan 2012,"sslproxy_cert_sign squid.conf option

This option control how generated fake SSL certificates are signed.

Syntax:
  sslproxy_cert_sign <signing algorithm> acl ...

where <signing algorithm> can be one of the signTrusted, signUntrusted or
signSelf

Default signing algorithm if the sslproxy_cert_sign is not configured is 
signSelf, if the server certificate is self signed, signUntrusted if the server
certificate is untrusted (ERR_INVALID_CA, ERR_SELF_SIGNED_CERT_IN_CHAIN,
ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE, ERR_UNABLE_TO_GET_ISSUER_CERT,
ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY and ERR_CERT_UNTRUSTED errors) and
signTrusted if the server certificate is trusted.


Notes:
  - The signing algorithm passed as parameter to the ssl_crtd daemon

  - A self signed certificate generated on squid startup to be used as
    signing certificate for untrusted certificates, with CN = 
    ""Squid CA for Untrusted Certificates""

  - The configured certificates with http(s)_port squid.conf option chained to
    the client SSL connection only when signTrusted signing algorithm selected.
    When the signing algorithm is signSelf or signUntrusted no other certificate
    send to the client browser.

  - A small bug fixed which did not allow the sslproxy_cert_adapt option
    to be enabled in squid if the icap client is not enabled",618,data/crawl/squid/patch_463.diff
https://github.com/squid-cache/squid/commit/fb2178bb51a9028bbb9d848e669fd02f380134d4,21 Jan 2012,"sslproxy_cert_adapt squid.conf option

This patch add the sslproxy_cert_adapt option to squid.conf which gives to
squid administrators the required functionality to ""fix"" a known broken 
certificate using acls.
Currently only the ""Not After"", ""Not Before"" and ""Common Name"" fields of a
certificate can be modified/fixed.

The sslproxy_cert_adapt option has the form:
   sslproxy_cert_adapt <adaptation algorithm> acl ...
where <adaptation algorithm> is one of the setValidAfter, setValidBefore and 
setCommonName.

    setValidAfter: sets the ""Not After"" property to the signing cert's 
                   ""Not After"" property.
    setValidBefore: sets the ""Not Before"" property to the signing cert's 
                   ""Not After"" property.
    setCommonName: sets certificate Subject.CN property to the host name
                   from specified as a CN parameter (setCommonName{CN}) or, 
                   if no explicit CN parameter was specified, extracted from 
                   the CONNECT request

When the acl(s) match, the corresponding adaptation algorithm is applied to 
the fake/generated certificate. Otherwise, the default mimicking action takes 
place.",451,data/crawl/squid/patch_464.diff
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/patch_465.diff
https://github.com/squid-cache/squid/commit/f64091a7feba6201f19f6b311449225fd0e515e7,03 Jan 2012,"SourceLayout: DNS component code style changes

- removes ""dnsserver"" terminology from all the Squid internals and
  ./configure docs. Replacing it with ""helper"" to avoid confusion.

- updates the automake conditional to ENABLE_DNSHELPER and code define
  to USE_DNSHELPER inline with coding guidelines.

- shuffles the DNS API definitions to their own header, SquidDns.h, and
  de-duplicates the init/shutdown API calls to remove some #if",206,data/crawl/squid/patch_466.diff
https://github.com/squid-cache/squid/commit/b073fc4bde37d3b0dd2f820f90c801d7dada1338,30 Dec 2011,"Cache Manager migration support

 * Add a little bit of XHR script to the CGI cachemgr front page which
probes each of the managed proxies for http:// and https:// capabilities
and produces web links to their internal managers.

 * Reserve the template name MGR_INDEX for use by cachemgr scripts.
But do not distribute any preset template. This allows manager apps to
provide their own static template with linked scripts and objects.

 * The error page system is updated to create a blanket message
indicating missing template instead of aborting Squid if a template is
not even installed.",122,data/crawl/squid/patch_467.diff
https://github.com/squid-cache/squid/commit/c7baff405558ef38ca6f0b2e5568621ad120004a,30 Dec 2011,"SourceLayout: shuffel UserRequest into Auth:: namespace

No logic changes, symbols and debug only.

* shuffle AuthUserRequest to Auth::UserRequest
* shuffle AuthBasicUserRequest to Auth::Basic::UserRequest
* shuffle AuthDigestUserRequest to Auth::Digest::UserRequest
* shuffle AuthNegotiateUserRequest to Auth::Negotiate::UserRequest
* shuffle AuthNTLMUserRequest to Auth::NTLM::UserRequest

* polish and add documentation for several parts of the hierarchy

* replace obsolete debugs() location texts",547,data/crawl/squid/patch_468.diff
https://github.com/squid-cache/squid/commit/e8baef82c96df1a4fa39e842cc9e91ad2cf4d2f4,15 Dec 2011,Renamed some fields to CamelCase.,255,data/crawl/squid/patch_469.diff
https://github.com/squid-cache/squid/commit/8284fb70f5afd51035f5fcd03ef6483f88c2044b,15 Dec 2011,Updated (and made use of) stub_StatHist,30,data/crawl/squid/patch_470.diff
https://github.com/squid-cache/squid/commit/151ce8610ba28c0a4904554c3a612063c82992e3,15 Dec 2011,Updated (and made use of) stub_StatHist,30,data/crawl/squid/patch_471.diff
https://github.com/squid-cache/squid/commit/e161cb088036c4637e106939e93af3c0ffca548e,12 Dec 2011,Refactored statHistIntInit,48,data/crawl/squid/patch_472.diff
https://github.com/squid-cache/squid/commit/82146cc800aa12d238a4bf3343303598fe2cc267,10 Dec 2011,Fixed some more dead references to stats.,30,data/crawl/squid/patch_473.diff
https://github.com/squid-cache/squid/commit/cf6eb29ef384e73a2a00839bc215dcc555e39691,06 Dec 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Bug 3420: Request body consumption races and !theConsumer exception.

Also fixes endless waiting for HTTP client to send req body we no longer need.

Before these changes, the client side used a single ""closing"" state to
handle two different error conditions:

  1. We stopped receiving request body because of some error.
  2. We stopped sending response because of some error.

When a ""directional"" error occurred, we try to keep the transaction going in
the other direction (e.g., to give ICAP the entire request or to give HTTP
client the entire response). However, because there was just one ""closing""
state, the code failed to correctly detect or process many corner cases,
resulting in stuck transactions and !theConsumer assertions/exceptions due to
races between enableAutoConsumption() and expectNoConsumption() calls.

This patch replaces the ""closing"" state with two direction-specific ""we
stopped sending/receiving"" flags.

Now, when the response sending code is done, it now checks whether the
receiving code stopped and closes the connection as needed. This is done both
when we encounter a sending error (ClientSocketContext::initiateClose) and
when we successfully sent the entire response to the client
(ClientSocketContext::keepaliveNextRequest).

Similarly, when the request body reading code is done, it now checks whether
the receiving code stopped and closes the connection as needed. This is done
both when we encounter a receiving error
(ConnStateData::noteBodyConsumerAborted) and when we successfully receive the
entire request body from the client (ClientSocketContext::writeComplete).

TODO: This patch focuses on various error cases. We might still have problems
when there is an early HTTP response and no errors of any kind. I marked the
corresponding old code with an XXX.",139,data/crawl/squid/patch_474.diff
https://github.com/squid-cache/squid/commit/c031952f278d7a8cf2d7043aa8f32ad004af980e,03 Dec 2011,Fix arguments to swaplog renaming calls,4,data/crawl/squid/patch_475.diff
https://github.com/squid-cache/squid/commit/2066f5a150c149ffbd900cf07bc1439a1801e9c7,03 Dec 2011,Polish debug messages on swap.state rename failure,7,data/crawl/squid/patch_476.diff
https://github.com/squid-cache/squid/commit/a636cbbf7cfc3f4ab63042b1d3aef538e5140911,27 Nov 2011,Bug 3432: Crash logging FTP errors,2,data/crawl/squid/patch_477.diff
https://github.com/squid-cache/squid/commit/0ad2b63bf4586b507e351b853424ac13f81d3404,18 Nov 2011,"author: Martin Huter <mhuter@barracuda.com>, Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2619: Excessive RAM growth due to unlimited adapted body data consumption

If the client does not read from the open connection (i.e. the user does not
confirm the browsers download-message-box in microsofts IE), squid keeps on
reading data from the ICAP server into the store entry, while no more data
can be delivered to the client. 
Thus the store entry in memory is growing and squid may - in worst case - 
consume memory up to the size of the users download.

This patch add API to StoreEntry to call the producer back when released 
memory/space from the StoreEntry and add code to the ICAP client code to not
consume body data comes from the ICAP server when there is not available space
in the store entry.",188,data/crawl/squid/patch_478.diff
https://github.com/squid-cache/squid/commit/2c87d96a00ae5e6f7dd0928f33c2b55f45b985dc,03 Nov 2011,Bug 3406: SSL Log Error in debug,4,data/crawl/squid/patch_479.diff
https://github.com/squid-cache/squid/commit/71ee08359b9bb8426cc9a017b204b10e038e7c29,29 Oct 2011,SourceFormat Enforcement,73,data/crawl/squid/patch_480.diff
https://github.com/squid-cache/squid/commit/3511674faaf401c138195134a953e0c600136662,28 Oct 2011,"adaptation_meta option

add missing src/tests/testConfigParser[.h,.cc] files",109,data/crawl/squid/patch_481.diff
https://github.com/squid-cache/squid/commit/71be37e0d265e4e1931361e1b46336ac9eae6714,28 Oct 2011,"adaptation_meta option

This option allows Squid administrator to add custom ICAP request
headers or eCAP options to Squid ICAP requests or eCAP transactions.
Use it to pass custom authentication tokens and other
transaction-state related meta information to an ICAP/eCAP service.

The addition of a meta header is ACL-driven:
        adaptation_meta name value [!]aclname ...

Processing for a given header name stops after the first ACL list match.
Thus, it is impossible to add two headers with the same name. If no ACL
lists match for a given header name, no such header is added. For example:

        # do not debug transactions except for those that need debugging
        adaptation_meta X-Debug 1 needs_debugging

        # log all transactions except for those that must remain secret
        adaptation_meta X-Log 1 !keep_secret

        # mark transactions from users in the ""G 1"" group
        adaptation_meta X-Authenticated-Groups ""G 1"" authed_as_G1

The ""value"" parameter may be a regular squid.conf token or a ""double
quoted string"". Within the quoted string, use backslash (\) to escape
any character, which is currently only useful for escaping backslashes
and double quotes. For example,
    ""this string has one backslash (\\) and two \""quotes\""""

This is a Measurement Factory project",385,data/crawl/squid/patch_482.diff
https://github.com/squid-cache/squid/commit/9e8f57e04f3ff39428f2adec9d0584fe5290767e,23 Oct 2011,"ext_session_acl: version 1.2

This patch makes the following changes to the session helper:

- Removes support for Berkeley DB 1.85
- Adds support for the current Berkeley DB (db.h)
- Adds support for a DB environment (if a directory is specified as
  the path then an environment is created). This gives better
  synchronisation within multiple processes
- Fixes a bug with active mode where LOGIN/LOGOUT did not write to the DB",109,data/crawl/squid/patch_483.diff
https://github.com/squid-cache/squid/commit/b46ae5259f2c1a194bf35e1ab76f039deafc10b9,21 Oct 2011,Polished more fatal messages.,23,data/crawl/squid/patch_484.diff
https://github.com/squid-cache/squid/commit/77915f065e93d6218259a8703a2fa912e37f95a6,21 Oct 2011,Made fatal shm_open() errors more detailed to triage failing tests/testRock.,8,data/crawl/squid/patch_485.diff
https://github.com/squid-cache/squid/commit/796282997ecc51055382954c4db91f737f577d26,21 Oct 2011,"Delete server-side deleteThis()

This patch finishes the conversion of ServerStateData into AsyncJob by properly
implementing the doneAll() method and by removing calls to deleteThis() or
replacing with mustStop() calls as appropriate.

The Adaptation::AccessCheck modified to schedule an AsyncJobCall when
access check finishes.

The ServerStateData and ClientHttpRequest classes modified to work with the new
Adaptation::AccessCheck.

This is a Measurement Factory project",158,data/crawl/squid/patch_486.diff
https://github.com/squid-cache/squid/commit/93bc1434c57ba45489e997fffb3e215592fff273,14 Oct 2011,"SMP shared memory cache stats were not collected.

""Hot Object"" stats were not reported for shared memory cache.

Mean disk object size stats were aggregated inaccurately for SMP.

Moved Store-related stats into a dedicated StoreStats class,
encapsulating memory cache-related (mem), disk cache-related (swap), and
global store (number of objects) stats. Used consistent naming scheme 
and a common parent class to make memory and disk stats more alike.

Moved Store stats collection into corresponding Store classes rather
than forcing GetInfo() in stat.cc to know how to deal with all Store stats.",323,data/crawl/squid/patch_487.diff
https://github.com/squid-cache/squid/commit/9bb016119a1ac45a31f638fd275a0adf8b2fc844,14 Oct 2011,"Add basic ""make check"" tests for Rock Store, based on UFS and COSS tests.",496,data/crawl/squid/patch_488.diff
https://github.com/squid-cache/squid/commit/8846a2b47415f92c15b9ab3727b6ebcd31233329,13 Oct 2011,"Log field width polishing

This patch:
 - converts type of the Token::[width|precision]  members from ""unsigned int"" to ""int""
 - renames the Token::[width|precision] members to Token::[widthMin/widthMax]
 - removes unneeded typecastings

This is a Measurement Factory project",40,data/crawl/squid/patch_489.diff
https://github.com/squid-cache/squid/commit/b3a4ba82b557dbacc409928bbdb732237f413da5,06 Oct 2011,"Polished SMP caching code, primarily to stay out of the way in non-SMP mode.

Do not start useless diskers. Do not assume Rock cache_dirs are present.
Do not require IpcIo DiskIO module to build Rock store.
Check IPC I/O pages limits in Rock store only when using a disker.
Warn about Rock cache_dir disk space waste.
Warn if shared memory cache is enabled in non-SMP mode.
Fake shared memory segments if needed (e.g., we are using Rock cache_dirs with
  no POSIX shared memory support) and possible (e.g., no SMP).",357,data/crawl/squid/patch_490.diff
https://github.com/squid-cache/squid/commit/32b28f499200e7636380cf067e08bd943a6753e3,06 Oct 2011,"Added max-swap-rate=swaps/sec option to Rock cache_dir.

The option limits the rate of Rock disk access to smooth out OS disk commit
activity and to avoid blocking Rock diskers (or even other processes) on I/O.
Should be used when swap demand exceeds disk performance limits but the
underlying file system does not slow down incoming I/Os until the situation
gets out of control.

Warn if Rock disker delays are significant.",216,data/crawl/squid/patch_491.diff
https://github.com/squid-cache/squid/commit/f5480a9e690773150236ab3f001d9a5c6d946b74,04 Oct 2011,"Add base class for registered runners that work with shared memory.

Shared memory runners do two main things:

* create shared memory segments
* open shared memory segments created earlier

Each runner has to decide whether it needs to create and/or open
shared memory segments.  Common runners share (some) logic in making
this decisions.  The purpose of this patch is to implement this logic
in a single place to allow easy reuse and avoid duplication.",44,data/crawl/squid/patch_492.diff
https://github.com/squid-cache/squid/commit/be9cb908306a7cf14033aafb63fcea168600eaab,04 Oct 2011,"Add ""fake"" shared memory segment implementation.

""Fake"" shared memory segments are enabled #if a system does not
support POSIX shared memory.  Such segments use regular new to
allocate memory, it is not shared among multiple processes.  The
purpose of the change is to allow code that uses Ipc::Mem::Segment to
run in non-SMP mode (that is when only a single process, except for
master, is running) on systems without POSIX shared memory support.

Note: running SHM-using features in SMP mode still requires POSIX
shared memory support, the patch does not change that.",128,data/crawl/squid/patch_493.diff
https://github.com/squid-cache/squid/commit/4b4686c911f1917b70cf2d0d37f75a04296181ce,22 Sep 2011,"Bug 3351: FTP timeout causing ""store_status == STORE_PENDING"" assertion

If the entry was aborted while we were timing out, do not attempt to
write the timeout error message to it.

TODO: Other FTP code should call abortOnBadEntry() instead of testing for
ENTRY_ABORTED and calling abortTransaction().",3,data/crawl/squid/patch_494.diff
https://github.com/squid-cache/squid/commit/2be46d6709526a1c4454c0f5fa8716efe354b617,21 Sep 2011,"ext_session_acl: version 1.1

 * Add fixed period session support with -T

 * Fix synchronization between multiple helpers accessing the database

 * Fix crash when configured with non-concurrent settings.",80,data/crawl/squid/patch_495.diff
https://github.com/squid-cache/squid/commit/df881a0f9a049b3853ff8d6d0bbc67666cecd6c6,15 Sep 2011,"Added max-swap-rate=swaps/sec option to Rock cache_dir.

The option limits disk access to smooth out OS disk commit activity and to
avoid blocking Rock diskers (or even other processes) on I/O. Should be used
when swap demand exceeds disk performance limits but the underlying file
system does not slow down incoming I/Os until the situation gets out of
control.

TODO: Account for the I/O rate limit when estimating whether a future I/O
will complete in time (for swap-timeout).

TODO: Consider allowing the next swap in (i.e., read) through regardless of
the limit because, unlike writes, reads do not usually accumulate in OS
buffers.",215,data/crawl/squid/patch_496.diff
https://github.com/squid-cache/squid/commit/35a1b223314eddb67b631cb0224d6e03a2360c77,13 Sep 2011,"SMP Caching: Core changes, IPC primitives, Shared memory cache, and Rock Store

Core changes
------------

* Added MemObject::expectedReplySize() and used it instead of object_sz.

When deciding whether an object with a known content length can be
swapped out, do not wait until the object is completely received and its
size (mem_obj->object_sz) becomes known (while asking the store to
recheck in vain with every incoming chunk). Instead, use the known
content length, if any, to make the decision.

This optimizes the common case where the complete object is eventually
received and swapped out, preventing accumulating potentially large
objects in RAM while waiting for the end of the response. Should not
affect objects with unknown content length.

Side-effect1: probably fixes several cases of unknowingly using negative
(unknown) mem_obj->object_sz in calculations. I added a few assertions
to double check some of the remaining object_sz/objectLen() uses.

Side-effect2: When expectedReplySize() is stored on disk as StoreEntry
metadata, it may help to detect truncated entries when the writer
process dies before completing the swapout.


* Removed mem->swapout.memnode in favor of mem->swapout.queue_offset.

The code used swapout.memnode pointer to keep track of the last page
that was swapped out. The code was semi-buggy because it could reset the
pointer to NULL if no new data came in before the call to doPages().
Perhaps the code relied on the assumption that the caller will never
doPages if there is no new data, but I am not sure that assumption was
correct in all cases (it could be that I broke the calling code, of course).

Moreover, the page pointer was kept without any protection from page
disappearing during asynchronous swapout. There were ""Evil hack time""
comments discussing how the page might disappear.

Fortunately, we already have mem->swapout.queue_offset that can be fed
to getBlockContainingLocation to find the page that needs to be swapped
out. There is no need to keep the page pointer around. The
queue_offset-based math is the same so we are not adding any overheads
by using that offset (in fact, we are removing some minor computations).


* Added ""close how?"" parameter to storeClose() and friends.

The old code would follow the same path when closing swapout activity
for an aborted entry and when completing a perfectly healthy swapout. In
non-shared case, that could have been OK because the abort code would
then release the entry, removing any half-written entry from the index
and the disk (but I am not sure that release happened fast enough in
100% of cases).

When the index and disk storage is shared among workers, such
""temporary"" inconsistencies result in truncated responses being
delivered by other workers to the user because once the swapout activity
is closed, other workers can start using the entry.

By adding the ""close how?"" parameter to closing methods we allow the
core and SwapDir-specific code to handle aborted swapouts appropriately.

Since swapin code is ""read only"", we do not currently distinguish
between aborted and fully satisfied readers: The readerGone enum value
applies to both cases. If needed, the SwapDir reading code can make that
distinction by analyzing how much was actually swapped in.


* Moved ""can you store this entry?"" code to virtual SwapDir::canStore().

The old code had some of the tests in SwapDir-specific canStore()
methods and some in storeDirSelect*() methods. This resulted in
inconsistencies, code duplication, and extra calculation overheads.
Making this call virtual allows individual cache_dir types to do custom
access controls.

The same method is used for cache_dir load reporting (if it returns
true). Load management needs more work, but the current code is no worse
than the old one in this aspect, and further improvements are outside
this change scope.


* Minimized from-disk StoreEntry loading/unpacking code duplication.

Moved common (and often rather complex!) code from store modules into
storeRebuildLoadEntry, storeRebuildParseEntry, and storeRebuildKeepEntry.


* Do not set object_sz when the entry is aborted because the true object
size (HTTP reply headers + body) is not known in this case. Setting
object_sz may fool client-side code into believing that the object is
complete.

This addresses an old RBC's complaint.


* When swapout initiation fails, mark swapout decision as
MemObject::SwapOut::swImpossible. This prevents the caller code from trying to
swap out again and again because swap_status becomes SWAPOUT_NONE.

TODO: Consider add SWAPOUT_ERROR, STORE_ERROR, and similar states. It
may solve several problems where the code sees _NONE or _OK and thinks
everything is peachy when in fact there was an error.


* Call haveParsedReplyHeaders() before entry->replaceHttpReply().

HaveParsedReplyHeaders() sets the entry public key and various flags (at 
least). ReplaceHttpReply() packs reply headers, starting swapout process.
It feels natural to adjust the entry _before_ we pack/swap it, but I may be
missing some side-effects here.

The change was necessary because we started calling checkCachable() from
swapoutPossible(). If haveParsedReplyHeaders() is not called before we swap
out checks, the entry will still have the private key and will be declared
impossible to cache.


* Extracted the write-to-store step from StoreEntry::replaceHttpReply().

This allows the caller to set the reply for the entry and then update the
entry and the reply before writing them to store. For example, the server-side
haveParsedReplyHeaders() code needs to set the entry timestamps and make the
entry key public before the entry starts swapping out, but the same code also
needs access to entry->getReply() and such for timestampsSet() and similar
code to work correctly.

TODO: Calls to StoreEntry::replaceHttpReply() do not have to be modified
because replaceHttpReply() does write by default. However, it is likely that
callers other than ServerStateData::setFinalReply() should take advantage of
the new split interface because they call timestampsSet() and such after
replaceHttpReply().


* Moved SwapDir::cur_size and n_disk_objects to specific SwapDirs. Removed
updateSize().  Some cache_dirs maintain their own maps and size statistics,
making the one-size-fits-all SwapDir members inappropriate.

* A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.

* Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.

Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.

Store Config.Store.avgObjectSize in bytes to avoid repeated and error-prone
KB<->bytes conversions.


* Change Config.cacheSwap.swapDirs and StoreEntry::store() type to SwapDir.

This allows using SwapDir API without dynamic_cast.


* Always call StoreEntry::abort() instead of setting ENTRY_ABORTED manually.

* Rely on entry->abort() side-effects if ENTRY_ABORTED was set.

* Added or updated comments to better document current code.

* Added operator << for dumping StoreEntry summary into the debugging
log. Needs more work to report more info (and not report yet-unknown info).

* Fixed blocking reads that were sometimes reading from random file offsets.

Core ""disk file"" reading code assumed that if the globally stored disk.offset
matches the desired offset, there is no reason to seek. This was probably done
to reduce seek overhead between consecutive reads. Unfortunately, the disk
writing code did not know about that optimization and left F->disk.offset
unchanged after writing.

This may have worked OK for UFS if it never writes to the file it reads from,
but it does not work for store modules that do both kinds of I/O at different
offsets of the same disk file.

Eventually, implement this optimization correctly or remove disk.offset.


IPC primitives
--------------

To make SMP disk and memory caching non-blocking and correct, worker and
disker processes must asynchronously communicate with each other. We are
adding a collection of classes that support such communication.

At the base of the collection is the AtomicWordT template that uses GCC atomic
primitives such as __sync_add_and_fetch() to perform atomic operations on
integral values in memory shared by multiple Squid kids. AtomicWordT is used
to implement non-blocking shared locks, queues, store tables, and page pools.

To avoid blocking or very long searches, many operations are ""optimistic"" in
nature. For example, it is possible that an atomic store map will refuse to
allocate an entry for two processes even though a blocking implementation
would have allowed one of the processes to get the map slot. We speculate that
such conflict resolution is better than blocking locks when it comes to
caching, especially if the conflicts are rare due to large number of cache
entries, fast operations, and relatively small number of kids.


TODO: Eventually, consider breaking locks left by dead kids.



Shared Memory Cache
-------------------

* Added initial shared memory cache implementation (MemStore).

The shared memory cache keeps its own compact index of cached entries using
extended Ipc::StoreMap class (MemStoreMap). The cache also strives to keep its
Root.get() results out of the store_table except during transit.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.

Allow the user to explicitly disable shared memory caching in SMP mode via
memory_cache_shared to squid.conf. Report whether mem_cache is shared.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

TODO: Better limits/separation for cache and I/O shared memory pages.
Eventually, support shared memory caching of multi-page entries.


Rock Store
----------

Rock Store uses a single [large] database-style file per cache_dir to store
cached responses and metadata. This part of the design is similar to COSS.
Rock Store does not maintain or rely on swap.state ""log"" for recovery.
Instead, the database is scanned in the background to load entries when Squid
starts. Rock Store maintains its own index of cached entries and avoids global
store_table. All entries must be max-size or smaller.

In SMP mode, each Rock cache_dir is given a dedicated Kid processes called
""disker"". All SMP workers communicate with diskers to store misses and load
hits, using shared memory pages and atomic shared memory queues. Disker blocks
when doing disk I/O but workers do not. Any Diskers:Workers ratio is supported
so that the user can find and configure the optimal number of workers and
diskers for a given number of disks and CPU cores.

In non-SMP mode, should use good old blocking disk I/O, without any diskers,
but this has not been tested recently and probably needs more work.

Feature page: http://wiki.squid-cache.org/Features/RockStore

TODO: Disk rate limit to protect Squid from disk overload. More stats.
Multiple readers? Seek optimization? Remove known max-size requirement?",8765,data/crawl/squid/patch_497.diff
https://github.com/squid-cache/squid/commit/ce394734b05fc40fa2b54ab081d7fd3560979fc4,12 Sep 2011,"Renamed work-files to their original names.
Added some documentation.
Implemented HttpHdrCc::clear()",579,data/crawl/squid/patch_498.diff
https://github.com/squid-cache/squid/commit/43ebbac3285cd00b3f01ebd3b4c0d9867c98913f,10 Sep 2011,"Moved squid.conf global disk_io_timeout to cache_dir-local swap-timeout.

The I/O timeout option belongs to cache_dir because not all cache_dir types
support it and because different cache_dirs may need different timeout values,
especially if some of them handle very large or otherwise unusual files.

To propagate the knowledge of the option down to DiskIO/IpcIoFile I decided
to add a DiskFile::Config class and DiskFile::configure() method. At first
glance that API does not belong to DiskFile because only IpcIoFile supports
it. However, DiskFile may be a better location for it because

  * Other specific DiskIO files may want to support the same configuration
    API.

  * Placing API in IpcIoFile would require either making Rock Store dependent
    on IpcIoFile (in terms of linking and in terms of availability) or more
    complex API with multiple inheritance, dynamic casting and such. We can
    introduce the ""more complex API"" mentioned above later if needed.

Renamed ""disk_io"" to ""swap"" timeout because the option is about the whole swap
out/in delay (something an admin may care about) and not individual I/O
(something only low-level code should know about).",110,data/crawl/squid/patch_499.diff
https://github.com/squid-cache/squid/commit/8658767a73d77891ca79eb1a5b87fa4e7147a963,09 Sep 2011,Document STUB.h macros and usage,36,data/crawl/squid/patch_500.diff
https://github.com/squid-cache/squid/commit/72e4bea18f6be9e61f6bcbc7a64d0ed2901274a8,07 Sep 2011,"%I shows hostname on SSL error page

The %I must print the server ip address, but currently displays the host name of
the server on squid error pages. This patch fixes %I to print the server ip 
address in the server or ""[unknown]"" otherwise.

This is a Measurement Factory project",4,data/crawl/squid/patch_501.diff
https://github.com/squid-cache/squid/commit/51618c6abd19131aabcd04399765e5563e2fee15,06 Sep 2011,"Polished debugging messages to use DBG_IMPORTANT, WARNING, etc.",39,data/crawl/squid/patch_502.diff
https://github.com/squid-cache/squid/commit/c32c6db7e28a12379ccb01aa07261d233137ac47,06 Sep 2011,"Support maximum field width for string access.log fields.

Some standard command-line and some log processing tools have trouble
handling URLs or other logged fields exceeding 8KB in length. Moreover,
Squid violates its own log line format and truncates the entire log line
if, for example, the URL is 8KB long. By supporting .precision format
argument, we allow the administrator to specify logged URL size and
avoid these problems.

Limiting logged field width has no effect on traffic on the wire, with
the exception of log records if they are sent over the network, of course.

TODO: The name comes from the printf(3) ""precision"" format part. It may
be a good idea to rename our ""precision"" into max_width or similar,
especially if we do not support floating point precision logging.

TODO: Old code used chars to store user-configured field width and
precision. That does not work for URLs, headers, and other entries
longer than 256 characters. This patch changes the storage type to int.
The code should probably be polished further to remove unsigned->signed
conversions.",25,data/crawl/squid/patch_503.diff
https://github.com/squid-cache/squid/commit/a8d8f7510feda5b32a6a2e9cd3496b9426287aff,06 Sep 2011,Removed an accidently added file.,834,data/crawl/squid/patch_504.diff
https://github.com/squid-cache/squid/commit/0abdd70d7e3c0e65ee926b22f9e781427d578e62,02 Sep 2011,"Refactor HttpHdrCc: C++-ify, proper mempooling.
Also define String::operator < for std::container-ability of SquidString

Status: run-tested, working",461,data/crawl/squid/patch_505.diff
https://github.com/squid-cache/squid/commit/c975f53276eb34b4ea0e9db626d98bbd605531d5,28 Aug 2011,"Disable Rock store and shared memory cache if shared memory is not available.

The patch adds support for building on systems without POSIX shared
memory (e.g. OpenBSD).  IpcIo DiskIO module and Rock store is not
enabled by default if shared memory support is not available.  If IpcIo
or Rock store is explicitly enabled, but no shared memory support is
available, fail with error during configure.  Fail with error at
runtime if shared memory cache is enabled but no shared memory support
is detected.",87,data/crawl/squid/patch_506.diff
https://github.com/squid-cache/squid/commit/aa99e35edd3d7c0ebaa09a3a1a257ba5a405a970,25 Aug 2011,"Bug 3310: regression: %<pt translates as %<p

Separate the format tags into sub-groups for size-oriented checks.

Taking the opportunity, separate the section along the namespace borders.",146,data/crawl/squid/patch_507.diff
https://github.com/squid-cache/squid/commit/738d369fef9c690f2042b6dd20949dbd025844ba,23 Aug 2011,"negotiate_wrapper_auth: fix warnings on MacOSX by simplification

 * fold several if statements down to avoid compiler warnings
   about potential use-before-set of 'length'.

 * remove static err variable as unused once its cases are
   folded down to one if statement.",11,data/crawl/squid/patch_508.diff
https://github.com/squid-cache/squid/commit/d8b258a9511014ad813b9f70440b952bee50d48b,12 Aug 2011,Fix compile errors detected by clang++,28,data/crawl/squid/patch_509.diff
https://github.com/squid-cache/squid/commit/7ff7a211c25688d2d6742acc7bc271f700c9dbe9,08 Aug 2011,Migrate cf_gen.cc from C-style stdio to C++ iostreams.,300,data/crawl/squid/patch_510.diff
https://github.com/squid-cache/squid/commit/38e16f927fb0ac854e8a6bfec90f49af5ef1f6eb,04 Aug 2011,"SourceLayout: format namespace for custom tag-based formats

Part 1 of enabling non-logging components to support custom formats in strings

Shuffle the log custom format code into its own library separate from the
logging functionality.

One minor logic change removing redundant LogFileEnabled flag.

TODO:
 - use MemBuf instead or as well as StoreEntry as the output buffer
 - separate from AccessLogEntry confusion
 - upgrade deny_info URL generation format
 - upgrade external_acl_type format
 - add custom helper formats",3483,data/crawl/squid/patch_511.diff
https://github.com/squid-cache/squid/commit/96f6f33b443412f7e8075d18c800ee7b560d5134,03 Aug 2011,SourceFormat Enforcement,46,data/crawl/squid/patch_512.diff
https://github.com/squid-cache/squid/commit/de03b59646490546d76c65df0c5ca48a5c5cdaa6,02 Aug 2011,"Add support for using custom keys in CARP parents

Add a new carp-key option to CARP parents, specifying what parts of an URL
to use in the parent selection algorithm.",94,data/crawl/squid/patch_513.diff
https://github.com/squid-cache/squid/commit/fe0a0419ef9d7034005134abdcbec3fa567608be,30 Jul 2011,"SourceLayout: Basic auth: shuffle helper request functions

helper lookup functions are AuthBasicUserRequest members. Should be in
that classes .cc file.

Also merge submit and queue functions. no need to be separate.",205,data/crawl/squid/patch_514.diff
https://github.com/squid-cache/squid/commit/c9fd01b4b829bc16d2691a84cdc103ac5dd15333,29 Jul 2011,"SourceLayout: generic AnyP::ProtocolVersion tag class

Protocol agnostic class to store the request-line version details.
HTTP/1.0, HTTP/1.1, ICY/1.0, WebSockets/1.0 etc

For patch reduction leaves HttpVersion as a child class for HTTP/*.* tags",169,data/crawl/squid/patch_515.diff
https://github.com/squid-cache/squid/commit/d83197e365de79617ae95a38d12421816f1c513a,25 Jul 2011,"correct printf formatting. purge debugFlag is an unsigned int, not a short",2,data/crawl/squid/patch_516.diff
https://github.com/squid-cache/squid/commit/63f03f790981f8411a7a5ffd6c91ff3c5f988ea8,20 Jul 2011,Bug 3248: login=NEGOTIATE sends wrong auth header to origin peers,10,data/crawl/squid/patch_517.diff
https://github.com/squid-cache/squid/commit/af5ebaf4fd73cde584ed5455acf576789799c492,15 Jul 2011,"Use forward-proxy port for internal URLs.

Alter the getMyPort() function to skip ports flagged for special mode
handling (intercept, tproxy, accel) when generating internal URLs.

This allows us to lock down security on these special mode ports and
still have an optional position for the forward-proxy port. Prior to
this only the first port was used, forcing an unnecessary configuration
order.

Since it is now possible to have no port available for these URLs the
fatal()/crash has been reduced to an annoying cache.log message. Port 0
will be inserted into the URLs making them invalid.

For now this is only done on http_port entries. https_port has an
incomplete merge of https_port_list/http_port_list which needs to be
completed before it is easily done there.",17,data/crawl/squid/patch_518.diff
https://github.com/squid-cache/squid/commit/e24f13cdd75215b6b297ef81b44b93daf94b5f20,30 Jun 2011,"Remove the HttpStateData::orig_request member

When FwdServer::_peer is set, HttpStateData constructor creates a new special
HttpRequest, overwriting the request pointer set in the parent (ServerStateData) 
constructor to fwd->request.

This special HttpRequest sets the proper urlpath (which maybe different from
the original HttpRequest), the host (HttpRequest::SetHost/GetHost) to be the
peer hostname and inherits flags, protocol, method. Also sets the
HttpRequest::flags.proxying.

Probably this is originaly done to handle only the differences in urlpath and
the host. But this is has  as result to have two HttpRequests object in
HttpStateData, but their difference is not clear.

This patch removes the HttpStateData::orig_request member and uses only the 
HttpStateData::request member

Bugs fixed with this patch:

- Debugs() and error pages sometimes display the cache_peer hostname as the URL   requested domain name when going to an origin. Regardless of what the virtual
  host name actually is.

- The request_header_access configuration parameter does not work when
  sending requests to parent proxies.

- Squid may cache replies to requests with no-store in headers when uses a
  parent cache.

- parent caches which have been configured as ""sibling"" for specific domains
  using the neighbor_type_domain parameter are not counted.

- Probably many other


This is a Measurement Factory project",271,data/crawl/squid/patch_519.diff
https://github.com/squid-cache/squid/commit/a171b5f02981cbd19fde655a2ed8620f70de0fff,23 Jun 2011,"Removed pointless call to maybeReadVirginBody() for aborted entries.
No runtime changes expected.

Setting flags.do_next_read to zero and then calling maybeReadVirginBody() is
pointless because maybeReadVirginBody() does nothing but wasting cycles when
the flag is zero. Also, even if we do manage to read the virgin response body
somehow, we cannot write it to the aborted store entry anyway.",2,data/crawl/squid/patch_520.diff
https://github.com/squid-cache/squid/commit/7d553ad9091a61a0e6b6c6c13348f7132ff45d43,22 Jun 2011,Fix BSD build issues,36,data/crawl/squid/patch_521.diff
https://github.com/squid-cache/squid/commit/d5d5493b580fb565ede89e4f5b9ef727403b7e40,21 Jun 2011,"Fix make check and make distcheck.

Mostly makefile changes.  New stub code added and some unneeded
stub code removed.  Fixed for UFS and COSS tests related to
object destruction order.",411,data/crawl/squid/patch_522.diff
https://github.com/squid-cache/squid/commit/f38142df99faa496b798865f491196de25e07583,17 Jun 2011,"1st try to fix ""make check"" linking errors after ""Configurable SSL error details messages"" patch

The make check fails on 3.HEAD-amd64-CentOS-5.3 platform",26,data/crawl/squid/patch_523.diff
https://github.com/squid-cache/squid/commit/1c8f25bbb056368c4405473ff7304156608e92cc,17 Jun 2011,"Upgrade comm layer Connection handling

The premise underlying this large patch is that instead of copying and
re-copying and re-lookups for the FD related data we can take the
ConnectionDetail class which is generated to store a few bits of IP
information about newly accept()'d connections and make it persist across
the whole of Squid.

It has been renamed from ConnectionDetails to Comm::Connection and has
absorbed a few FD data fields from other classes long the code paths.
Its scope is to hold an FD (or potential FD) plus meta data.

Comm::Connection are valid before, during and after the period when their
particular FD is open. The meta data may be used beforehand to setup the
FD (in the case of peer selection or other TcpAcceptor usage), and it may
remain in use after FD closure until logging or all linked job and call
objects have detected the closure and terminated. A global function
Comm::IsConnOpen() may be used on the pointer objects to detect whether
they point at an active connection.

Most of the patch is simple parameter changes to functions and methods to
pass a ""cont Comm::ConnectionPointer &"" instead of an ""int FD"". Along with
class FD fields being converted to these object pointers.


In order to support this alteration there have been behavioral changes to:

The socket accept() Job
  Comm::TcpAcceptor altered to spawn Comm::Connection objects and to
  operate with one controlling their active/closed state.

FTP data channel handling Calls.
  efficiency improvements making use of Comm::Connection as a feedback
  channel between TcpAcceptor and FtpStateData to cancel the listening
  Job. Most of the underlying logic change is already in trunk to use
  the Subscription API. This just streamlines and fixes some race bugs.

Peer selection
  updated to spawn a set of Comm::Connection objects. To do this it is
  updated to determine *all* peers including DIRECT ones. Doing the DNS
  lookup instead of leaving it to comm_connect() on the other side of
  FwdState. It also absorbs the outgoing address selection from FwdState
  and can now specify details of local+remote ends of an outgoing TCP link.

Forwarding
  updated to handle the new outputs from peer selection and to open sequentially.

pconn handling
  updated to use destination IP/port and hold a Comm::Connection instead
  of domain name indexing an FD. This allows us to maintain idle pools
  and re-use FD more efficiently with virtual-hosted servers. Along
  with maintaining certainty that the pconn selected actually goes to
  the exact destination IP:port needed by forwarding.

comm layer outgoing connections
  now have a control job Comm::ConnOpener to do this. Due to the peer
  selection and forwarding changes this is a much simpler operation.

HTTP / CONNECT tunnel / gopher / whois / FTP
  updated to receive a server and client Comm::Connection object from
  forwarding. To operate on those until they close or are finished with.

SNMP / ICP / HTCP / DNS port listeners
  updated to work with Comm::Connection holding their listening socket
  meta data. This is a side-effect of the ICP and Comm read/write/timeout
  changes.",8518,data/crawl/squid/patch_524.diff
https://github.com/squid-cache/squid/commit/02259ff8a34ba3740c13c4e38e81af79d6ea849b,17 Jun 2011,"Configurable SSL error details messages

This project adds support for a translatable and customisable error detail file
(errors/templates/error_details.txt). The file is stored like we store error
page templates today. Inside the file, an HTTP-like format used that can be
later extended to other error details (and beyond):

name: value
details: ""value""
descr: ""value""

or

name: value
details: ""multi
     line
     value""
descr: ""value with a \""quoted string\"" inside""

The code supports future translations, just like Squid already support error
page translations.

This is a Measurement Factory project
----

Some Technical details:
 - The errorpage code which is related to loading and parsing error templates
   moved to TemplateFile class. This class is used as base class for
   ErrorPageFile class which used to load error page templates.
 - The HttpHeader parser used to parse error details
 - The  error details for various languages cached to memory
 - The ErrorDetailsList  used to store a list of error details for a
   language/locale
 - The ErrorDetailsManager is a class used to load and manage multiple error
   details list (ErrorDetailsList objects) for many languages. It also
   implements a simple cache.",1350,data/crawl/squid/patch_525.diff
https://github.com/squid-cache/squid/commit/1733bbba72f915941d250a7a02abe668f71dc8ec,13 Jun 2011,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <christos@chtsanti.net>
Bug 3153 fix: Prevent ICAP RESPMOD transactions getting stuck with the adapted body.

Part 1.

Server is expected to receive adapted response headers and then consume the
adapted response body, if any. If the server receives the headers and then
aborts, it must notify the ICAP side that nobody will consume the body. 
Otherwise, the ICAP transaction will fill the BodyPipe buffer and get stuck 
waiting for the consumer to free some space.

Part 2:

This fix still leaves one potential race condition unhandled: The ICAP
Initiatee disappears right after sending the adapted headers to the Server
(because there is nothing else for that initiatee to do). After the
noteAdaptationAnswer() call is scheduled by ICAP and before it is received by
the Server job, there is no usable link between Server and ICAP.  There is no
way for the Server to notify the ICAP transaction that the Server job is
aborting during that time (and there is no Server job at all after it aborts,
naturally).

The solutions is to develop a custom AsyncCall which will call the
expectNoConsumption() on the message pipe if the call cannot be dialed (i.e.,
the message cannot be delivered to Server).",39,data/crawl/squid/patch_526.diff
https://github.com/squid-cache/squid/commit/983983ce5ef0d6785a1f6a65b1685e07ea68a9af,04 Jun 2011,Sync with trunk,6637,data/crawl/squid/patch_527.diff
https://github.com/squid-cache/squid/commit/306bfbb2d6ad357bd0540adc4ca8c8f0eb07a418,02 Jun 2011,"Optimization: revert WCCP setup to using sockaddr_in

Replaces a some malloc/free with local stack variables and a memset",21,data/crawl/squid/patch_528.diff
https://github.com/squid-cache/squid/commit/74f478f8336c29280c574a60b332bc5ca6299f9f,29 May 2011,"Parser: shuffle request-line offsets into a sub-struct

Preparation for parsing other segments such as mime headers and reply
status-line we need the segments data offsets to be kept separate.",1198,data/crawl/squid/patch_529.diff
https://github.com/squid-cache/squid/commit/4c14658ec381949d64870f812a7c990ba73892e8,27 May 2011,"SourceLayout: separate HttpParser from HttpMsg and HttpRequest files

Paving the way for the parser to be used on replies or outside of HttpRequest.

There are no logic changes in this.

Also adds a stub file for event.cc",2634,data/crawl/squid/patch_530.diff
https://github.com/squid-cache/squid/commit/3876fdac3ca81a03b7e3665661a72270d98b1014,27 May 2011,SourceFormat Enforcement,4,data/crawl/squid/patch_531.diff
https://github.com/squid-cache/squid/commit/6152c8d8fe0dd2e874e4141ef751ad65dc7bf1c3,26 May 2011,Portability fix for OpenBSD in time quota external acl helper.,3,data/crawl/squid/patch_532.diff
https://github.com/squid-cache/squid/commit/65b81b2712ba00ea3b47ecd0d4b730a63681550f,25 May 2011,"Detect support for __sync_add_and_fetch() and friends,
setting HAVE_ATOMIC_OPS accordingly.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

Needs more testing.",77,data/crawl/squid/patch_533.diff
https://github.com/squid-cache/squid/commit/e4a8468d7c0a09e6c8284111c82a7940d3477754,13 May 2011,"Separate SSL error detail name and message

Currently, SSL error detail in Squid-generated error pages (%D) contains
both the error name and the explanation text. Some folks using this feature
want to render the two pieces of information differently because the error
name is not something most end-users should read or focus on.

This patch adds the ""%x"" error page formating code which prints the error name,
and removes the error name (%err_name) from SSL error detail messages.

This is a Measurement Factory project",77,data/crawl/squid/patch_534.diff
https://github.com/squid-cache/squid/commit/2dba5b8e71663816703bf9297e1184ab6bea3990,13 May 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Author: Alexey Veselovsky <alexey.veselovsky@eykontech.com>
Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2055: Honor ICAP Max-Connections

This patch implements the phase 1 of the ICAP Max-Connections feature as it is
described in squid wiki:
  http://wiki.squid-cache.org/Features/ServiceOverload

The behaviour of the patch  can be configured using on_overload and max_conn
options of the icap_service configuration parameter. Squid can be configured
to do one of the following:
  - Block: send and HTTP error response to the subscriber
  - Bypass: ignore the ""over-connected"" ICAP service
  - Wait: wait (in a FIFO queue) for an ICAP connection slot
  - Force: proceed, ignoring the Max-Connections limit 

Squid warns the first time the service become overloaded

For more information please visit the feature wiki page given above.


Technical informations:

The patch starts count a connections to the ICAP server as active when the
ModXact class receives an FD even if the fd is not really connected to the
server yet, and decrease the active connections to the server when the ModXact
object releases its fd connection.

If the Max-Connection limit is reached squid puts the request to a waiters list.
When one or more connections released squid schedules one or more waiters for
execution and remove them from waiters list.
To handle cases where a waiter gone/canceled before its execution the custom
dialer ConnWaiterDialer used.

The Options connections counted as active connections but are not limited by
the Max-Connections limit. An Option request will be executed even if the
maximum connections number is reached.


This is a Measurement Factory project",543,data/crawl/squid/patch_535.diff
https://github.com/squid-cache/squid/commit/9938b57f9793f45dab38ee1ba6332618bf8c2052,09 May 2011,"Add ext_time_quota_acl helper

Allows an administrator to define time budgets for the users of squid
to limit the time using squid.

This is useful for corporate lunch time allocations, wifi portal
pay-per-minute installations or for parental control of children. The
administrator can define a time budget (e.g. 1 hour per day) which is
enforced through this helper.",762,data/crawl/squid/patch_536.diff
https://github.com/squid-cache/squid/commit/7afc3bf21fb00bef3e0cdc93145bcb4d2bf5a29f,08 May 2011,"Cleanup: sync NTLM and Negotiate UserRequest code

Minor tweaks to reduce diff between the files. No logic changes.

Renames the addHeader() to addAuthentiocationInfoHeader(),
Renames the addTrailer() to addAuthentiocationInfoTrailer() and
document that they add additional *-Info header to the HTTP reply.",315,data/crawl/squid/patch_537.diff
https://github.com/squid-cache/squid/commit/7c8931a1f908c09a8ab797e7354e8d57718d766d,04 May 2011,"Compile fixes for binutils-gold and gcc-4.6 support

These two tools are much stricter about dependency linkages. We have already
had to drop testAuth due to major dependency loops they dislike.
This makes the remainder of the dependency changes needed.

Also adds:
 - tests/STUB.h with macros for simpler stub file creation
 - stub_libmgr.cc for unit-test stub replacment of mgr/libmgr.la library.
   many API functions commented out, but sufficient for the current needs.",479,data/crawl/squid/patch_538.diff
https://github.com/squid-cache/squid/commit/23ad9b9e2b5269f53fb3ec9aa59e73cbd8f924f2,03 May 2011,SourceFormat Enforcement,58,data/crawl/squid/patch_539.diff
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/patch_540.diff
https://github.com/squid-cache/squid/commit/da9d3191b043c07215fbb771c69acc4a835d7b96,27 Apr 2011,"Remove updateSize() from Store and make it protected in SwapDir.

A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.",77,data/crawl/squid/patch_541.diff
https://github.com/squid-cache/squid/commit/8765bc8cba81d5776992f8b243447e01860d8892,27 Apr 2011,"Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.",40,data/crawl/squid/patch_542.diff
https://github.com/squid-cache/squid/commit/57f583f131ec99afa44e7a72df51538d03f970a7,27 Apr 2011,Make Store::currentSize() return size in bytes.,42,data/crawl/squid/patch_543.diff
https://github.com/squid-cache/squid/commit/88d1e459293cf476300bba80d1fe6da05c862647,20 Apr 2011,"Add errpages option %b for proxy listening port

Use getMyPort() to insert the forward-proxy listening port into error
pages and deny_info redirect URLs. This fixes the current port
hard-coding assumption in ERR_AGENT_CONFIGURE.

The %b option is added for this purpose as a temporary measure until the
codes are merged with the more flexible log formatting set.

This currently depends on squid.conf having a particular http_port
ordering with the forward-proxy port listed first.",11,data/crawl/squid/patch_544.diff
https://github.com/squid-cache/squid/commit/bc9b2391964dc68213923191ec5d33b69c7bde32,19 Apr 2011,Fixed compiler warnings about wrong printf() format for currentSize().,2,data/crawl/squid/patch_545.diff
https://github.com/squid-cache/squid/commit/3a2e025344bbe7244960ee5878be960b113c95a9,19 Apr 2011,negotiate_wrapper_auth: fix strict compiler warnings,25,data/crawl/squid/patch_546.diff
https://github.com/squid-cache/squid/commit/fa61cefe6486fe4f7ff291af66f2d182fcebf88a,19 Apr 2011,"Optimized the number of ""queue is no longer empty"" IpcIo notifications.

The original code relied on the writer (pusher) knowledge to decide when a
notification is needed. That code was simpler but it resulted in many
pointless notifications because the reader could have been busy processing the
last popped item and would have checked the queue after that processing
anyway. This would become especially wasteful when the reader pops multiple
requests before processing them (e.g. to do ""elevator"" seek optimization).

The intermediate implementation (not comitted) placed the reader state in
each queue. That was still fairly simple and worked OK, but it was not
addressing the needs of the disker readers. Diskers have many incoming
queues. If at least one incoming queue has requests, the disker is not
blocked and does not need a notification.

The last implementation allows all incoming queues of a single disker to share
the reader/disker state. The reader state is disassociated from the single
queue.  There is still some wasteful state updates when multiple queues are
iterated in FewToOneBiQueue::pop(), but their overheads should be very minor.
We need to figure out whether a single shared reader state can also be used
for workers though (each worker also has many incoming queues...).

Also added debugging and a few XXXs/TODOs to mark future work items.",357,data/crawl/squid/patch_547.diff
https://github.com/squid-cache/squid/commit/39c1e1d9d66a7a610e2afa2775698d5541f3d16e,18 Apr 2011,"Improve statistic reporting for shared Rock caches.

Rock cache is shared between multiple processes.  We need to make sure
cache related stats are not counted twice by different processes.  The
patch makes Rock store statistics to be reported by the disker process
only.

Some global variables for cache related stats are replaced with Store
class methods.  This is needed because it may be difficult or
impossible to correctly update these variables for shared caches.

The patch also fixes cache manager output for some requests like
mgr:storedir: Before the change stats from disker processes were not
surrounded with ""by kidN"".",204,data/crawl/squid/patch_548.diff
https://github.com/squid-cache/squid/commit/a86a4d3c4e116d50890aa7f8fad12a44db2ea162,16 Apr 2011,negotiate_wrapper_auth: various portability fixes,14,data/crawl/squid/patch_549.diff
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/patch_550.diff
https://github.com/squid-cache/squid/commit/e08b0f778791043501c04a4a0a4b1dd5c97f8bc6,14 Apr 2011,"Use off_t instead of int and size_t for segment sizes
to be able to allocated larger than 4GB segments on some platforms.

Double check the newly created segment size using fstat().",54,data/crawl/squid/patch_551.diff
https://github.com/squid-cache/squid/commit/c4e688b7b851b9accc082a210fd0efb131cc696f,12 Apr 2011,Added basic stats reporting.,23,data/crawl/squid/patch_552.diff
https://github.com/squid-cache/squid/commit/9487bae9c1514d66499a7015e44648dd9f231d73,12 Apr 2011,"Added initial shared memory cache implementation (MemStore) and integrated it.

Like Rock Store, shared memory cache keeps its own compact index of cached
entries using extended Ipc::StoreMap class (MemStoreMap). Like Rock Store, the
cache also struggles to keep its Root.get() results out of the store_table
except during transit.

There are several XXXs and TODOs that still need to be addressed for a more
polished implementation.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.",624,data/crawl/squid/patch_553.diff
https://github.com/squid-cache/squid/commit/d87154ee577dd41876875ac8ec5273a2e3def960,11 Apr 2011,"SourceLayout: namespace for Auth::User

No logic changes.",356,data/crawl/squid/patch_554.diff
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/patch_555.diff
https://github.com/squid-cache/squid/commit/a32a190bb7dbce4b7ae2756609662557e87f8853,05 Apr 2011,"Display ERROR in cache.log for invalid configured paths

The validator that checks system paths for files and directories in the
configuration file sends error messages to stderr. It should send them to
cache.log for the admin to see easily.

Also, this makes the error display as FATAL ERROR when using -k parse to
indicate that it is fatal to the startup. Other management signals where
it is not necessarily fatal will only display as an ERROR.",7,data/crawl/squid/patch_556.diff
https://github.com/squid-cache/squid/commit/d8a82533a7ef59f757d60645c04dfdb4eb5553d1,31 Mar 2011,"Moved ipc/SharedMemory to ipc/mem/ and renamed it to Ipc::Mem::Segment.

All IPC things are ""shared"" by default. 

The new name is also more specific because there are other shared memory
structures such as queues and stacks (all using shared memory segments
internally though).",82,data/crawl/squid/patch_557.diff
https://github.com/squid-cache/squid/commit/8030a2a099a7a50dc05fab1190682741feb02ac6,25 Mar 2011,"Fix stdio: log module segfaults on rotate

The stdio module was still assuming old format for the parameter.

 * update the parser to detect old format and upgrade-warn.       
 * update the stdio module to ignore the stdio: prefix on its parameter",28,data/crawl/squid/patch_558.diff
https://github.com/squid-cache/squid/commit/5cde6e7f53eb77db6d868ff88bbb6f9e5d622323,25 Mar 2011,basic_ldap_auth: error message for missing credentials,10,data/crawl/squid/patch_559.diff
https://github.com/squid-cache/squid/commit/fd0f51c4480a19a03d30d0f3fcecd69f5257c293,15 Mar 2011,"Convert dns_timeout and dns_retransmit_interval configuration options to use millisecond resolution.

One second resolution is too coarse for small timeouts in delay-sensitive
environments, especially when a retransmit, bypass, or another corrective
action is available and is likely to produce a positive outcome. In DNS world
specifically, most timeouts are measured in milliseconds.

This is a Measurement Factory project",89,data/crawl/squid/patch_560.diff
https://github.com/squid-cache/squid/commit/f602c423b782d0c1b4233e70a01b337dcbb824a9,14 Mar 2011,ext_kerberos_ldap_group_acl version 1.3.0sq,337,data/crawl/squid/patch_561.diff
https://github.com/squid-cache/squid/commit/ec4d1a1d75e6b319bf612aa577215917719a0a6c,10 Mar 2011,SourceFormat Enforcement,40,data/crawl/squid/patch_562.diff
https://github.com/squid-cache/squid/commit/ffce5f58438c9a15c0351c7b038fd300228cbcb2,09 Mar 2011,"Support libecap v0.2.0; fixed eCAP body handling and logging.

Summary of changes:

libecap v0.2.0 support: accept/update/log eCAP transaction meta-info.
libecap v0.2.0 support: supply client IP and username to eCAP adapter.
libecap v0.1.0 support: Support blockVirgin() API with ERR_ACCESS_DENIED.

Use pkg-config's PKG_CHECK_MODULES to check for and link with libecap.

Support adapter-specific parameters as a part of ecap_service configuration.
Allow uri=value parameter when specifying adaptation service URIs.

Fixed virgin body handling in our eCAP transaction wrapper (Ecap::XactionRep).
Fixed BodyPipe.cc:144 ""!theConsumer"" assertion.

Log ""important"" messages from eCAP adapters with DBG_IMPORTANT not DBG_DATA!

Added XXXs to identify old unrelated problems to be fixed separately.",1302,data/crawl/squid/patch_563.diff
https://github.com/squid-cache/squid/commit/96e9c799d793b401a9aee746e42294e8d8c2805d,03 Mar 2011,Add some stubs and undo some problematic make optimizations,256,data/crawl/squid/patch_564.diff
https://github.com/squid-cache/squid/commit/80f629d79e830cd60da2efa2d7c7edd93e3fbaa4,02 Mar 2011,"Add support for parameterized Cache Manager queries.

Currently, one sends mgr queries to the ""whole"" Squid. Kids responses may get
aggregated by Coordinator, and we, in general, want to aggregate all responses
that can be aggregated.

This patch allow us to aggregate stats for a subset of kids. For example,
the following query aggregates stats for just the first and the third workers:

    mgr:info?workers=1,3

When query response information cannot be aggregated (or at least is not
aggregated right now), then a parameterized query will result in several
matching ""byKid { ..."" blocks.

This patch support the following scope variants:

    * raw interface with access to any kid process or groups of kids; similar
      to ${process_number} macro we already support in squid.conf:
          mgr:foo?processes=id,id,id...
    * higher-level interface to isolate workers by their numbers, starting
      with 1 for the first worker:
          mgr:foo?workers=num,num,num...

Currently, all kids except Coordinator are workers, but that will change in 
the future as we get more kinds of kids.Currently, one sends mgr queries 
to the ""whole"" Squid. Kids responses may get aggregated by Coordinator, 
and we, in general, want to aggregate all responses that can be aggregated.

This is a Measurement Factory project",512,data/crawl/squid/patch_565.diff
https://github.com/squid-cache/squid/commit/995eb827aaa64d9bcd4110b756e04051ef9d03e9,02 Mar 2011,merge from trunk,12916,data/crawl/squid/patch_566.diff
https://github.com/squid-cache/squid/commit/431aae42efb204149e3ba82e8b314e1756292b01,15 Feb 2011,"Bug 3105: malformed Proxy-Authorization leaks memory

This simplifies the header parser for basic auth. Working towards a more
generalized model of AuthUser children. Removing two memory allocations, two
leaks and several unnecessary functions.",228,data/crawl/squid/patch_567.diff
https://github.com/squid-cache/squid/commit/c728b6f9fff43c9e8a2c4af5bf4916dcb4c36fa9,15 Feb 2011,"* Removed old Rock Store hack to update swap_file_sz before it is packed into
store entry disk ""header"". Prepend our own disk to each db cell. Eventually,
the same header may be used to store ""next page"" or other info.

Modern Squid code should not use packed swap_file_sz or object_sz because
neither can be unknown at the packing time.  The storage code should either
record its own size information (Rock Store does that now) or rely on
3rd-party metadata (UFS uses fstat(2) system call).


* Do not promise to read a being-written entry. Use peekAtReader() to check
that we can read the presumably locked (by us) entry.

It is probably possible to queue a reader somehow and wait for the entry to
become readable or even to read initial pages as we write (when we start doing
incremental writing) but it would be rather complex and expensive to
synchronize such shared read/write access across workers.


* Fixed ::StoreIOState::offset_ Rock maintenance. The old code probably
misinterpret offset_ meaning and kept the disk offset there. It should have
been just the distance from the beginning of the db cell (not db file)
instead. It probably worked because we write everything at once and the
offset_ values were usually big enough to pass ""wrote everything"" checks.


* Extracted storeRebuildParseEntry from storeRebuildLoadEntry.

This allows Rock Store to analyze and skip disk cell header before giving
the packed store entry info to the common core code.


* Report more disk stats. Needs more work, especially in SMP reporting case.
Map stats are only reported for tiny maps because scanning the entire map may
be too expensive for bigger maps (is it worth the overhead to maintain these
stats all the time instead of computing them from scratch on-demand?).


* Moved StoreEntryBasics into Rock namespace.


* Be more consistent in setting Rock::IoState's swap_filen, swap_dirn,
diskOffset, and payloadEnd.


* Renamed vague (and confusing after the header was added to the db cell)
entrySize to more specific payloadEnd.


* Synced with r11228 changes (making Store work with SMP-shared max-size
cache_dirs).",356,data/crawl/squid/patch_568.diff
https://github.com/squid-cache/squid/commit/078274f6c5d9547ffc6cfb2fcde9cf04ba3d8e14,07 Feb 2011,"Made Rock::Rebuild an AsyncJob because it is.

Increment StoreController::store_dirs_rebuilding early, when SwapDir is
created and before the disk db file is opened and the actual rebuild starts.
Otherwise, if one SwapDir finishes rebuild before others start,
storeRebuildComplete() will see StoreController::store_dirs_rebuilding equal
to one, and think the rebuild is over.

This was not a problem for cache_dirs using blocking I/O because they either
did not try to open some file at SwapDir::init() time or did so synchronously,
resulting in ""immediate"" StoreController::store_dirs_rebuilding increment from
Store init loop point of view.",63,data/crawl/squid/patch_569.diff
https://github.com/squid-cache/squid/commit/2f1431eab290a090f81695dcbe97821693992f55,07 Feb 2011,"Bug 2870: --disable-auth does not work

This patch attempts to make it work by removing libauth.la and all component
functionality which depends on it. So far this reduces the minimal squid
binary by a further 900 KB on disk.

It also means anything which requires an authentication process wont work.
They get wrapped in USE_AUTH or if its a specific type with the relevant
HAVE_AUTH_MODULE_* wrappers.

So far this does:
 * FTP and CacheMgr dependency on --disable-auth-basic is already committed
 * cache_peer login= functionality is greatly reduced under various
   combinations of --disable-auth, --disable-auth-basic and
   --disable-auth-negotiate
 * peering userhash algorithm is removed
 * delay pools class 4 is removed
 * ACLs testing username are dropped.

Additionally since external ACL user= field is used interchangeably in
several places with a full login and with the right helper can be
considered a full side-band authentication I have disabled the
ExtUser/ext_user components as well.

NP: pinning is not strictly dependent on NTLM, we may use it for other
    things without involving auth so left most of it in. Just the logics
    which use auth to set the pinning flag are now removable.

IDENT not being an authentication mechanism is also left in.",419,data/crawl/squid/patch_570.diff
https://github.com/squid-cache/squid/commit/1d470d8857c8302388486711a8925d18e82f501d,07 Feb 2011,"Author: Phil Oester <kernel@linuxace.com>
Bug 3115: stdio: log module segfaults if access_log is set to a directory",2,data/crawl/squid/patch_571.diff
https://github.com/squid-cache/squid/commit/714a769f772fe5732068bd7a4f2f5d29d4ec54f9,03 Feb 2011,Avoid assertions when mgr:storedir is requested before cache_dir has a map.,10,data/crawl/squid/patch_572.diff
https://github.com/squid-cache/squid/commit/08723f8a014d62c38c4fac205f42068c0df7823a,03 Feb 2011,"SMP SNMP

The attached patch implements aggregation of SNMP responses, similar to how 
we aggregate some cache manager stats. 

The code contains changes that allow us to share some of the classes between 
Cache Manager and SNMP code:

  * implement the following base classes under the ipc directory/module:
    - Ipc::Forwarder (ipc/Forwarder{.cc,.h} files)
    - Ipc::Inquirer (ipc/Inquirer{.cc,.h} files)
    - Ipc::Request (ipc/Request{.cc,.h} files)
    - Ipc::Response (ipc/Response{.cc,.h} files)

  * fix the Mgr::Forwarder, Mgr::Inquirer, Mgr::Request and Mgr::Response 
    classes to be implemented as kid classes of the equivalent Icp::* classes.

Also implements for the SNMP the same mechanism used for cache manager: 
The SNMP requests forwarder to coordinator which collects the statistics from 
kids and aggregate them.

This is a Measurement Factory project",3051,data/crawl/squid/patch_573.diff
https://github.com/squid-cache/squid/commit/e8a8885340de51b1c6f860c02e9e13870f56797e,02 Feb 2011,merge from trunk,1599,data/crawl/squid/patch_574.diff
https://github.com/squid-cache/squid/commit/95be26ed834fa89ac6da8e0e85559614e846364c,01 Feb 2011,"Removed ""multiple of page size"" restriction on cache_dir rock max-size.

The restriction came from mmap writing days and was meant to prevent forcing
mmap to read and merge the unchanged tail of a page we were updating.",9,data/crawl/squid/patch_575.diff
https://github.com/squid-cache/squid/commit/c03c2bade2631aa8548db2b1aab1d9bd9667bdf5,01 Feb 2011,"Use Blocking DiskIO module when runnining in a no-daemon mode.

We cannot use IpcIo module in no-daemon mode because there are no diskers
to communicate with. If our implementation is correct, IpcIo module should
contain no shared map or other rock-specific manipulations and, hence,
should not be required for Rock Store to work.",18,data/crawl/squid/patch_576.diff
https://github.com/squid-cache/squid/commit/fd23a2ca8e404419f3114678828ca87bc310f27d,01 Feb 2011,"Removed restriction on cache_dir max-size to be a multiple of pagesize.
It was specific to Mmapped DiskIO module which we no longer use.",20,data/crawl/squid/patch_577.diff
https://github.com/squid-cache/squid/commit/f1eaa2540453dccde688d900e75f900c67f0dd7e,31 Jan 2011,Shared Rock::DirMap version 5.,283,data/crawl/squid/patch_578.diff
https://github.com/squid-cache/squid/commit/f5eef98cd5550fbd9887b1fd72e8a1be2ddefc5a,30 Jan 2011,Shared Rock::DirMap version 1.,396,data/crawl/squid/patch_579.diff
https://github.com/squid-cache/squid/commit/344d132f84e7f4b502b7c98fdf9dac605106710d,29 Jan 2011,"Added a configuration check to prevent IoState::startWriting() assertions.

Rock::IoState::startWriting() asserts that [padded] write request size does
not exceed the slot size. Padded request size always exceeds the slot size for
slots smaller than the page.

This check may also help avoid using unallocated buffer for padding, but that
part may need more work.",9,data/crawl/squid/patch_580.diff
https://github.com/squid-cache/squid/commit/8c4f6de533ac4a399385239ebfd538514a6fb643,28 Jan 2011,Try to return a template error page. Also return 404 error code,24,data/crawl/squid/patch_581.diff
https://github.com/squid-cache/squid/commit/f5f9e44c983193ed18d7af76dea168173a0cc35e,27 Jan 2011,Miscellaneous useful changes from 3p1-rock (r9630) unrelated to Rock Store.,84,data/crawl/squid/patch_582.diff
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/patch_583.diff
https://github.com/squid-cache/squid/commit/83af6fa2d157bff23080c87724c71c147d420395,27 Jan 2011,"Author: Steven Lawrance <squid@moonlightdesign.org>
Bug: 2968: Show the Vary: headers information in cachemgr objects report",4,data/crawl/squid/patch_584.diff
https://github.com/squid-cache/squid/commit/ac49890a255f5cfbf2242434c98b74da81b90dd4,27 Jan 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Fix IP/FQDN cache accounting to avoid idle caches on busy servers.

When maintaining the IP/FQDN cache size, use the number of entries in the cache
rather than the number of allocated and not freed MEM_IPCACHE_ENTRY and
MEM_FQDNCACHE_ENTRY objects. These objects are used outside the cache
for DNS queries. If queries leak (or perhaps when there are just a lot of them),
the memory-pool-based count overestimates the cache size, sometimes to
such a degree that the cache remains nearly empty despite lots of misses.

Use memory-pool-based counter to estimate cache size also violates IP/FQDN cache
encapsulation boundaries because it effectively prevents others from using
the same memory pool.",23,data/crawl/squid/patch_585.diff
https://github.com/squid-cache/squid/commit/cbff89ba6b249941fe47ad28d4ac2ed50e286b94,26 Jan 2011,"Bug 2581, Bug 3081, Bug 2948: various TCP socket connection problems

Bug 3081:
  During conversion of listening socket handlers to AsyncCalls a violation
of the AsyncCall API was introduced. Resulting in occasional crashes from
invalid re-use of call objects.


This implements a TcpAcceptor async job which receives a listening socket
and a CallSubscription. For every connection attempt on the listener socket
a new AsyncCall is spawned from the subscription template.

Initial users are the HTTP and HTTPS listening sockets and FTP data channel.

In order to implement this job in FTP the logics surrounding data channel
handling had to be extended and reworked. Fixing bug 2948 and 2581 in the
process.",914,data/crawl/squid/patch_586.diff
https://github.com/squid-cache/squid/commit/079c2dd49d857e04fcc51d122865bbe7e972459e,25 Jan 2011,Fixed bug in NTLM auth helper which would show up on non-gcc compilers,2,data/crawl/squid/patch_587.diff
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/patch_588.diff
https://github.com/squid-cache/squid/commit/f931485ad46b26cb67d4f982ac671372227c85f4,11 Jan 2011,Portability fix: removed unused code from smblib,34,data/crawl/squid/patch_589.diff
https://github.com/squid-cache/squid/commit/570d3f7565f28594ee6fa7feebf493562215b317,08 Jan 2011,"Author: Henrik Nordstrom <hno@squid-cache.org>
Port from 2.7: maximum staleness limits

The default behaviour of Squid is to provide a stale copy (with Warnigng:
header) until an actove response from the origin server causes the object
to be updated or garbage collection causes its removal.

The max_stale direcive and refresh_pattern max-stale=N option allow admin
to set an upper limit on the objects age when serving stale responses.",49,data/crawl/squid/patch_590.diff
https://github.com/squid-cache/squid/commit/e1e90d26a3ffc69ba87262a25d23e6fa08bd5a0e,18 Dec 2010,"eCAP: (A) Support optional adapter parameters and (B) fix virgin body handling.

(A): Optional adapter-specific eCAP service parameters can be specified after
the Squid-recognized ones:

    ecap_service s1 respmod_precache ecap://...  name1=value1 name2=...

These extra parameters are passed as (name, opaque value) pairs to the
adapter, using the newly added libecap::Config API. Adapters should throw if
they cannot understand the parameters to protect users from typos in optional
Squid-recognized parameters.

Squid-recognized service parameters can also be passed to adapters. Adapters
can distinguish them from custom ones or typos because their names have host
IDs set. We currently only pass one Squid recognized service parameter called
""bypassable"", with a boolean values of ""1"" or ""0"". This tells Adapter whether
Squid can try to bypass the adapter in case of problems. In our experience,
many real adapters benefit from such knowledge because they can be less strict
and more forgiving if Squid might ignore their decisions anyway.

To support optional adapter parameters for eCAP without bothering ICAP,
we now allow ICAP and eCAP to create protocol-specific configuration objects.
ICAP code uses old defaults. eCAP implements parsing of optional adapter
parameters and sharing them with adapters

As a side effect, service configuration objects are now refcounted and each
service (once created) is responsible for its config. The global collection of
configs is emptied once the services are created.


(B) eCAP transaction wrapper code (Ecap::XactionRep) failed to pass a few test
cases when dealing with virgin bodies. The code used complex state and
mishandled several proxyingVb, nil body_pipe, and stillConsuming value
combinations. proxyingVb was especially troubling because it was not clear
whether it refers to us receiving vb from Squid core or sending vb to the
adapter. The two states are related but different because we could be
receiving vb from core but not sending it to the adapter and vice versa.

I have removed proxyingVb completely as the body pipe state alone is
sufficient to understand our dealings with Squid core. I added makingVb to
track adapter vb needs.

Also improved Ecap::XactionRep status debugging.",353,data/crawl/squid/patch_591.diff
https://github.com/squid-cache/squid/commit/d0bbf50ec0e45df6040d8f1d07da439eb8ec0087,17 Dec 2010,Use the right printf args for client_request_buffer_max warning,4,data/crawl/squid/patch_592.diff
https://github.com/squid-cache/squid/commit/1f771fedfcbf32cddeb83fe51bb698c8c0d7b4bc,17 Dec 2010,Add docs and prevent parse loops on client_request_buffer_max,12,data/crawl/squid/patch_593.diff
https://github.com/squid-cache/squid/commit/3af10ac07bfc86881f6e7437faca4ff5fbb550ec,15 Dec 2010,"Support libecap::host::xaction::blockVirgin() API, serving ERR_ACCESS_DENIED.

deny_info logic is supported for these blocked responses, with the ACL name
replaced by the adaptation service name. This allows eCAP adapters to focus on
adaptation and blocking logic while letting Squid to serve a configurable
block message, with language negotiation and such.


Merged noteAdaptationAnswer(msg) and noteAdaptationQueryAbort(bool) into
noteAdaptationAnswer(answer). The Adaptation::Answer class manages all
currently supported adaptation decisions: forward the adapted message, block
user access to the virgin response, and bypassable or fatal error.

This ""single answer hook"" design allows us to add more information to adaption
answers without rewriting all the code that forwards those answers to the
adaptation initiator. We still often use multiple methods to handle multiple
answer categories, but that ""forking"" is optional and the decision to fork is
made locally, inside each answer recepient, reducing the overall code
complexity.


Also fixed a few virgin body handling corner cases that led to unnecessary
exceptions in Adaptation::Ecap::XactionRep despite correct adapter behavior.",365,data/crawl/squid/patch_594.diff
https://github.com/squid-cache/squid/commit/6ca34f6f914c36bca43713622cc8cb297ad86a3b,14 Dec 2010,"Various source format cleanups

undo damage done by earlier astyle versions and adjust some
imported code to follow reasonable style. no functional change.",1804,data/crawl/squid/patch_595.diff
https://github.com/squid-cache/squid/commit/4d16918eadf2b696b160599b3a013310da420ea7,13 Dec 2010,"Report ERR_SECURE_CONNECT_FAIL details to the user via a new error detail API.

Currently, the ERR_SECURE_CONNECT_FAIL response contains no usable error
information. Moreover, there is no interface to pass SSL error information
to the response generation code.

This patch adds an interface to allow Squid error responses to contain detailed
information about SSL certificate verification failure. For example, the error
message may contain the following text:
 ""Server Certificate Verification Failed: Certificate Common Name
  (www.lufthansa.com) does not match the host name you are connecting to
  (www.lufthansa.de).""

This is a Measurement Factory project.

Change details:
--------------------

- errorpage.cc/.h: The error page now supports the '%D'  formating code to 
  display the detail string passed by modules. The detail strings passed by 
  modules can contain error page formating codes. Currently only SSL detail
  errors messages are supported.

- A new class Ssl::ErrorDetail defined in ssl/ErrorDetail.[cc,h]
  The Ssl::ErrorDetail objects passed to the SSL verification callback functions
  (sl_verify_cb callback function defined in support.cc) and filled with error
  detail data (error_no and a pointer to the X509 Certificate) in the case of
  an error and passed back to the forward.cc code.

- The Ssl::ErrorDetail class internally uses (hard coded) templates and 
  formating codes to allow supporting multiple languages and adding easily
   new features

Other changes:
-------------------

- errorpage.cc/.h: The BuildContent method split to BuildContent and ConvertText
  method. The second method does the real conversion from a given text template
  to output. It is used now to allow formating the detail strings passed with 
  %D.

 - sslparseErrorString moved to ssl/ErrorDetail.cc file and renamed to 
   Ssl::parseErrorString

 - sslFindErrorString moved to ssl/ErrorDetail.cc file and renamed to 
   Ssl::getErrorName

 - The ssl_error_t typedef definition moved from ssl/support.h to 
   ssl/ErrorDetail.h and renamed to Ssl::error_t",652,data/crawl/squid/patch_596.diff
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/patch_597.diff
https://github.com/squid-cache/squid/commit/7a545fdbaab654b2d02b0c645f860fa4539d2d6f,09 Dec 2010,"Author: Chad Naugle <chad.naugle@travimp.com>
Bug 2905: ext_edirectory_userip_acl: buffer handling updates",655,data/crawl/squid/patch_598.diff
https://github.com/squid-cache/squid/commit/a8a33c466c764bfe3f710353aeef6e22db52b783,07 Dec 2010,Bootstrapped,56,data/crawl/squid/patch_599.diff
https://github.com/squid-cache/squid/commit/daacd51f6f3f823f02bfb3bba004968bac41b276,04 Dec 2010,Fix many C/C++ ABI warnings,80,data/crawl/squid/patch_600.diff
https://github.com/squid-cache/squid/commit/12e11a5c0e2d896840e65b724f7afa47b5d575ad,04 Dec 2010,"Bug 3068: Actually make SwapDir capacity fields 64-bit.

This one uses uint64_t instead of size_t. It's a bit wider reaching than
the earlier commit since much of the existing code used size_t.",82,data/crawl/squid/patch_601.diff
https://github.com/squid-cache/squid/commit/81dd2d0482a4891bbf608b7e7895dc278d8ab37b,03 Dec 2010,Fixes instance hides CacheManager::instance errors,10,data/crawl/squid/patch_602.diff
https://github.com/squid-cache/squid/commit/9a0a18dedf70390ae43a9302d4096663475c8ff6,27 Nov 2010,"Policy: use USE_* from code wrappers and ENABLE_* for conditionals.

Makes a few more of the build conditionals match our naming policy.
http://wiki.squid-cache.org/Squid3CodingGuidelines

Updates two code wrapper macros:
* CBDATA_DEBUG becomes USE_CBDATA_DEBUG
* DELAY_POOLS becomes USE_DELAY_POOLS

Updates USE_DELAY_POOLS automake conditional to ENABLE_DELAY_POOLS

TODO: There are more of these wrappers to be updated.",381,data/crawl/squid/patch_603.diff
https://github.com/squid-cache/squid/commit/25b481e63ad59b3f96889bb7e08d844729b229fa,26 Nov 2010,Build issues,34,data/crawl/squid/patch_604.diff
https://github.com/squid-cache/squid/commit/c3e8e4e9e2885cfc152a0c405a641510cde0fa93,26 Nov 2010,Roll Comm::Connection into new mgr/ code,169,data/crawl/squid/patch_605.diff
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/patch_606.diff
https://github.com/squid-cache/squid/commit/df1b20e405c3c5bd0e8de9b58a683f599d6a62da,19 Nov 2010,Fix cachemgr http_port config report hiding options,45,data/crawl/squid/patch_607.diff
https://github.com/squid-cache/squid/commit/95d2589c9c45dcbb5c405a4fbaed53675eeb5a2e,18 Nov 2010,"Author: Alex Rousskov, Andrew Balabohin, Christos Tsantilas
Dynamic SSL certificate generartion

This patch implements dynamic SSL certificate generartion in Squid.When
used with SSL Bump, the feature allows Squid to dynamically
generate (using a configurable CA certificate) and cache SSL
certificates for the proxied hosts.

A description for this feature can be found at:
   http://wiki.squid-cache.org/Features/DynamicSslCert

A first version of the patch posted by Alex, some months before:
  http://www.squid-cache.org/mail-archive/squid-dev/201003/0201.html

Some words about the patch:

  * ssl related source files moved under the src/ssl directory

  * Introduce the TidyPointer class similar to std::auto_ptr, which implements
    a  pointer that deletes the object it points to when the pointer's owner 
    or context is gone. It  is designed to avoid memory leaks  in the presence
    of exceptions and processing short cuts.

  * Implements ssl context cache to use with generated ssl contexts. The 
    Ssl::LocalContextStorage class stores the hostname/ssl context pairs for 
    a local listening address/port. The  Ssl::GlobalContextStorage class used 
    to store Ssl::LocalContextStorages per local listening address and handles
    squid shutdown/configure/reconfigure

  * Ssl::Helper class implements the squid part of the ssl_crtd helpers.

  * The ssl_crtd helper implemented in ssl_crtd.cc and certificate_db.* files

  * The Ssl::CertificateDb class (certificate_db.* files)  implements  a
    database of certificates on disk files. It is used by ssl_crtd helper to
    manipulate generated certificates.

  * The ssl related files included in the libraries libsslutil.a which
    contains common classes and functions and the libsquidssl.a which has
    squid related ssl objects and functions

  * Use the Ssl namespace for new ssl code

This is a Measurement Factory Project.",2858,data/crawl/squid/patch_608.diff
https://github.com/squid-cache/squid/commit/be3641799529a2939471e6d8798258d6706acd5b,04 Nov 2010,Some polish replacing me/peer with local/remote,278,data/crawl/squid/patch_609.diff
https://github.com/squid-cache/squid/commit/25f983407b3c3df95d9f81edf1bd917316f2dfda,01 Nov 2010,"Bug 3038: Detatch libmisc from libcompat

* Migrates many of the remaining libmisc portability wrappers into
  libcompat.

* Splits libmisc into:
   libprofiler - Squid internal profiler (developer-only)
   libmiscencoding - Various binary encoding / crypto algorithms
   libmisccontainers - Various data container algorithms

* Makes all binaries which need to link the libmisc* pieces directly instead
  of via $(COMPAT_LIB) which now only links the libcompat and internal
  profiler due to profiling being used on some libcompat functions.

* Adds a stub_debug for binaries needing the Debug.h API without squid
  timers and globals.

Some effort has been made to identify binaries whose dependencies can be
reduced. More of this dependency removal can be done in future.",2111,data/crawl/squid/patch_610.diff
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/patch_611.diff
https://github.com/squid-cache/squid/commit/14a7bbc7fd0b81068366bf35af54c08831be7b59,25 Oct 2010,"Alex Rousskov <rousskov@measurement-factory.com>
Client-side bandwidth limit (a.k.a., quota or delay pool) implementation.

Add forgoten ClientDelayConfig.h and ClientDelayConfig.cc files. These
files should be submitted with the  r10980 patch",148,data/crawl/squid/patch_612.diff
https://github.com/squid-cache/squid/commit/76f4448105619e1cefe1af8437604d2ea9a8e886,23 Oct 2010,"Upgrade process for obsolete options

One problem we currently have with upgrades is leaving the parser able
to avoid its bungled/unknown option message for directives which have
been fully removed or massively syntax altered.

We are able to handle this for flags and option syntax easily but the
parser has been particularly dense and strict on the directives (first
word of each line).

This patch updates the cf_* and cfgman code to allow a special directive
type ""obsolete"" which causes these directives to be handled specially
without causing the directives to remain in the publicly visible
squid.conf documentation.

It allows DOC_START / DOC_END comments to be written in cf.data.pre
describing the upgrade actions that need to be taken. This text is
dumped to cache.log verbatim when the configuration option is sighted.

If ""-k parse"" is used the text is displayed at debug level 0, otherwise
displayed at debug level 1. One line indicating a generic ""directive X
is obsolete"" is always displayed at level 0 for backwards compatibility
with admin expectations of a high level ""bungled"" message.

After all this text display, parse_obsolete(char*) is called with the
directive name. This function exists in cache_cf.cc and can be coded to
selectivey do more complex handling of the directive. ie for upgrade
actions deeper than removal.

 * cf.data.pre has entries added for all the 2.6-3.1 directives I could
   find that were removed up to 3.HEAD",118,data/crawl/squid/patch_613.diff
https://github.com/squid-cache/squid/commit/fee1faa526deb7150d2dbb62d9fa802ce0aca9c6,17 Oct 2010,real fix: printf portability issue in EDNS display,2,data/crawl/squid/patch_614.diff
https://github.com/squid-cache/squid/commit/a42d5df7e621392bacd2370538a3f8aca17e3f44,17 Oct 2010,printf portability issue in EDNS display,2,data/crawl/squid/patch_615.diff
https://github.com/squid-cache/squid/commit/a1ad2f9b4fc8d5540bd531dad4bf1b70bf6e34f9,17 Oct 2010,"Author: Adrian Chadd <adri@squid-cache.org>
Author: Peter Payne
Bug 2356: Solaris /dev/poll event ports support.

Original code by Adrian Chadd.
Ported from Squid-2 by Peter Payne, Pirosa Limited UK.

With sponsorship of development and testing from:
  BBC (UK)
  Siemens IT Solutions and Services (UK)",546,data/crawl/squid/patch_616.diff
https://github.com/squid-cache/squid/commit/e210930bd797caf3c79c65f995aabd10b15332a1,17 Oct 2010,"Bug 2785: DNS needs to set EDNS options advertising Squid capabilities

... allowing Squid to advertise a larger UDP reply size than 512 bytes.

Internally Squid has a buffer allocated on demand so there is no
practicable limit on individual packets. Network topology and external
software places stricter boundaries on what works and what does not.

Squid does not parse the additional section of replies so for now the
full auto-negotiation EDNS allows is not used. Instead a configuration
option is provided for admin to configure a desirable packet size in
bytes. EDNS defaults to ""none"" (disabled) until tested in a wider
environment.

Testing so far has brought to light problems with EDNS adverts on A and
IPv4-PTR queries. So support is limited to AAAA and IPv6-PTR queries only.
EDNS compliant resolvers have the option of caching the info between
requests for a short while so this will hopefully leak over to improve
IPv4 responses as well.",457,data/crawl/squid/patch_617.diff
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/patch_618.diff
https://github.com/squid-cache/squid/commit/ab745b44b29428f549a7262957bde38c9c328b96,13 Oct 2010,SourceFormat Enforcement,321,data/crawl/squid/patch_619.diff
https://github.com/squid-cache/squid/commit/6ca7324f4760764b0597e7779dcffccd07e058ab,12 Oct 2010,"Author: Chad Naugle <chad.naugle@travimp.com>
eDirectory user-IP ACl string safety updates",400,data/crawl/squid/patch_620.diff
https://github.com/squid-cache/squid/commit/425de4c8495f778cb43fc61df608575cedf8b60c,06 Oct 2010,"Author: Andrew Beverley <andy@andybev.com>
Netfilter MARK support for QoS",1502,data/crawl/squid/patch_621.diff
https://github.com/squid-cache/squid/commit/bcfba8bd89bfb643ccc0e1d4a7b0e610648d884a,04 Oct 2010,"HTTP Compliance: add appropriate Warnings if serving a stale hit.

Per RFC 2616, we MUST add ""110 Response is stale"" Warning if serving a
stale reply for any reason, including configured overrides. We MUST add
""111 Revalidation failed"" Warning if serving a stale reply because an
attempt to revalidate the response failed, due to an inability to reach
the server.

The patch adds a new stale_if_hit request flag, which is set in
refreshCheckHTTP() when entry freshness is calculated. refreshCheckHTTP()
is now called in offline mode, to set stale_if_hit properly. We check for
the offline mode before returning from refreshCheckHTTP() to preserve the
original logic.

refreshCheckHTTP() is no longer called for internal requests, to avoid
setting of stale_if_hit flag. It did not do anything important for
internal requests anyway.

Co-Advisor test cases:
    test_case/rfc2616/noSrv-hit-stale-max-age-req
    test_case/rfc2616/ccReqDirMsg-max-stale-warning",38,data/crawl/squid/patch_622.diff
https://github.com/squid-cache/squid/commit/52ed047a82bb543fda92591d359d17840de4412d,04 Oct 2010,"Use InstanceId for async job and calls identification.

Side-effect: removes inconsistent prefixes for job debugging: ecapxN, icapxN,
asyncN are now all jobN, simplifying searching and processing debugging logs.",39,data/crawl/squid/patch_623.diff
https://github.com/squid-cache/squid/commit/c3bf70cd902349e35211ca342878151462bed6ea,04 Oct 2010,Revert r10909,616,data/crawl/squid/patch_624.diff
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/patch_625.diff
https://github.com/squid-cache/squid/commit/e0d2850571389010de240b82172cae5ee78c9da4,02 Oct 2010,Transition comm_write*() from FD to Comm::Connection,1777,data/crawl/squid/patch_626.diff
https://github.com/squid-cache/squid/commit/6da430a4640e07dfae7ef7a4451acc2854817014,01 Oct 2010,"Bug 3068: cache_dir capacity and usage overflows

Makes usage calculations use size_t instead of int and updates the
relevant fields storing the cache_dir capacity and usage fields as well.

This fixes Squid filling cache_dir with files >2GB in size.
Also allows Squid to store more than 2TB of data total in one dir.",55,data/crawl/squid/patch_627.diff
https://github.com/squid-cache/squid/commit/c58a4b535be1d6a8d7585c51b19261b49bd31eea,30 Sep 2010,"Documentation: display default-if-none instead of 'none' defaults.

Updates the parser to accept DEFAULT_IF_NONE: as a valid default value
instead of requiring ""DEFAULT: none"" to be explicitly configured.

This removes several cases from the docs where 'none' is displayed but
means 'no default' rather than the text value of ""none"" being possible.",34,data/crawl/squid/patch_628.diff
https://github.com/squid-cache/squid/commit/333afb82210526fa9d1de750e48cd420ddf041cc,29 Sep 2010,"More unit-tests for HTTP request first in parser.

Catches strange integer values for the version.",44,data/crawl/squid/patch_629.diff
https://github.com/squid-cache/squid/commit/ac5de05bed05906909d7ccc894f940438b8a9967,29 Sep 2010,"Bug 3051: integer display overflow

This alters the cachemgr display formatting to use 64-bit integers
instead of 32-bit. Revealing overflows hiding behind display overflows.",302,data/crawl/squid/patch_630.diff
https://github.com/squid-cache/squid/commit/96c2bb6111d80f82ca3c2c2435bc15e81754430c,23 Sep 2010,"Added cpu_affinity_map configuration option to bind workers to CPU cores.

Allows the admin to place all workers on individual cores without writing a
lot of if-statements. For example,

    cpu_affinity_map process_numbers=1,2,3,4 cores=1,3,5,7

will have an effect for kids 1 through 4 only and will place them on even
cores starting with core #1.

If there are conflicts for a given process, the latest option wins and a
warning is printed. If the number of specified processes do not match the
number of specified cores, Squid quits with an error. Multiple
cpu_affinity_map options are merged.

Squid builds on systems without Linux CPU affinity calls, but setting affinity
only works if there are sched_getaffinity(2) and sched_setaffinity(2)
available. If there is no OS support but cpu_affinity options are configured,
Squid quits with an error. If there is OS support but calls fail, Squid prints
an error but does not quit.",532,data/crawl/squid/patch_631.diff
https://github.com/squid-cache/squid/commit/5d9acded366badca957fcd9b793c4ff8e17de774,23 Sep 2010,squidclient: Display IP(s) connected to in verbose display.,14,data/crawl/squid/patch_632.diff
https://github.com/squid-cache/squid/commit/49991b926ed09df0cb7df3e8cfd87fc72a0f5797,19 Sep 2010,"Bug 3053: cache version 1 LFS support detection broken

Alter the upgrade detection to only be used if needed, and to load the
correct on-disk sizes for the fields being converted.

Lock the sfileno type down to 32-bits.

This also adds two new upgrade parsers:
 Fix 64-bit builds previously using sfileno as full 64-bit int
 Migrates swap.state from 32-bit to 64-bit time_t (old squid 2.4/2.5)
 64-bit->32-bit system time_t migration remains broken.

Per-file meta data is not altered by these changes, so problems may
remain there.",194,data/crawl/squid/patch_633.diff
https://github.com/squid-cache/squid/commit/f86504f1cb4c3d6f8b576ef2cff1b6323f2a4c1f,19 Sep 2010,"Author: Chad Naugle <chad.naugle@travimp.com>
ext_edirectory_userip_acl - add omitted new file",2082,data/crawl/squid/patch_634.diff
https://github.com/squid-cache/squid/commit/d94a2ce5ea26e644273483181e8ff536d5645dbe,19 Sep 2010,"Author: Chad Naugle <Chad.Naugle@travimp.com>
ext_edirectory_userip_acl build fixes

... and compiled into a single file.",2315,data/crawl/squid/patch_635.diff
https://github.com/squid-cache/squid/commit/3f832a997cd9187b362eec136bb160355908be3c,12 Sep 2010,"Handle ICAP persistent connection races better.

When an ICAP transaction loses a persistent connection race with an ICAP
server (i.e., Squid sends the ICAP request on a persistent connection just
closed by the ICAP server), the transaction throws and the exception is
treated as a regular error. Even though the transaction may be retried, the
negative side-effects may include ICAP service suspension due to transaction
failures.

This patch logs ICAP transactions that fail due to pconn races with
ERR_ICAP_RACE status and does _not_ blame the ICAP service for the failure.

The following problem was exposed by the pconn races but its fix is
useful in other scopes as well:

When the ICAP connection times out, we now close the connection before
throwing because an exception may be bypassed, and we will throw again (during
peaceful bypass) if Comm tells us that the connection is ready after we timed
out (yes, that can happen because Comm timeouts do not auto-close the
connection).

Based on lp 3p1-rock branch, r9623.",22,data/crawl/squid/patch_636.diff
https://github.com/squid-cache/squid/commit/d958d14fc6968bb6e55c78a523364cf1f5700fb1,11 Sep 2010,"Fixed printf format(%llX)/parameter(mb_size_t==ssize_t) mismatch.

Detected by GCC v4.4.1.",2,data/crawl/squid/patch_637.diff
https://github.com/squid-cache/squid/commit/5b67dfa47e67e77ee787da66416981932523ded9,11 Sep 2010,comm Acceptor/Opener audit fallout.,326,data/crawl/squid/patch_638.diff
https://github.com/squid-cache/squid/commit/655daa0610ed6c5ee86a5978c9a7c23a4adf0034,10 Sep 2010,"Compliance: Forward 1xx control messages to clients that support them.

Forward 1xx control messages to all HTTP/1.1 clients and to HTTP/1.0
clients that sent an Expect: 100-continue header unless the 1xx message
fails the optional http_reply_access check described below.

RFC 2616 requires clients to accept 1xx control messages, even if they
did not send Expect headers. However, 1xx control messages prohibited by
http_reply_access are ignored and not forwarded. This can be used to
protect broken HTTP/1.1 clients or naive HTTP/1.0 clients that
unknowingly forward 100-continue headers, for example. Only fast checks
are supported at this time.

The patch removes ignore_expect_100 squid.conf option and the
corresponding code because

  - the reasons to treat 100-continue specially have changed since we
    can now forward 1xx responses;

  - rejection of 100-continue request can still be done using a
    combination of the existing http_access and deny_info options;

  - hiding of 100-continue header from next hops can still be done using
    an existing request_header_access option;

  - 100 (Continue) responses can be hidden from clients using
    http_reply_access check described above.


We still respond with 417 Expectation Failed to requests with
expectations other than 100-continue.

Implementation notes: 

We forward control messages one-at-a-time and stop processing the server
response while the 1xx message is being written to client, to avoid
server-driven DoS attacks with large number of 1xx messages.

1xx forwarding is done via async calls from HttpStateData to
ConnStateData/ClientSocketContext. The latter then calls back to notify
HttpStateData that the message was written out to client. If any one of
the two async messages is not fired, HttpStateData will get stuck unless
it is destroyed due to an external event/error. The code assumes such
event/error will always happen because when
ConnStateData/ClientSocketContext is gone, HttpStateData job should be
terminated. This requires more testing/thought, but should still be
better than not forwarding 1xx messages at all.",240,data/crawl/squid/patch_639.diff
https://github.com/squid-cache/squid/commit/39cb8c410f289ee24ac34e9bdc622404bb0c0dd7,10 Sep 2010,"Dechunk incoming requests as they come in and chunk outgoing requests.

The server side always chunks the request if and only if the original request
was chunked. No next hop version checks are performed.


* Client-side changes:

Removed clientIsRequestBodyValid() as unused. It was called with a
content-length>0 precondition that made the function always return true.

Removed old dechunking hack that was trying to buffering the entire request
body, pretending that we are still reading the headers. Adjusted related
code. More work may be needed to identify client-side code that assumes
the request size is always known.

Removed ConnStateData::bodySizeLeft() because we do not always know how much
body is left to read -- chunked requests do not have known sizes until we read
the last-chunk. Moreover, it was possibly used wrong because sometimes we want
to know whether we want to comm_read more body bytes and sometimes we want to
know whether we want to ""produce"" more body bytes (i.e., copy already read
bytes into the BodyPipe buffer, which can get full).

Added ConnStateData::mayNeedToReadMoreBody() to replace conn->bodySizeLeft()
with something more usable and precise.

XXX: If there is a chunks parsing error, the new code just resets the
connection. I tried to find a way to send an error page to the client, but
failed to do so. It is easy to do when the headers and the body prefix is
parsed, but if the error is send later, the server-side may start sending us
its response, and the two responses would clash, causing assertions.  I do not
know how to fully avoid that. Perhaps we need to unregister from Store before
responding with an error? Search for WE_KNOW_HOW_TO_SEND_ERRORS.

Tried to break deep recursion/iteration around clientParseRequest. When
chunked parser fails during the message prefix parsing, the rest of the code
may decide that the connection is no longer used (and that there is no pending
transaction, even though the currentobject member is not NULL!) and start
parsing the second request. If that second parse fails (for example), there
will be two concurrent errors to be sent to the client and the client-side
code cannot handle that. However, due to the XXX above, we never send an error
when chunking parser fails, making most of the related code polishing useless,
at least for now.

Removed my wrong XXX related to closing after initiateClose.

Removed my(?) XXX related to endless chunked requests. There is nothing special
about them, I guess, as a non-chunked request can be virtually endless as
well if it has a huge Content-Length value.

Use commIsHalfClosed() instead of fd_table[fd].flags.socket_eof for
consistency with other client-side code and to improve readability. I think
these should return the same value in our context but I am not sure.

Correctly handle identity encoding. TODO: HTTPbis dropped it. Should we?

Polished request_header_max_size handling code, converting old
connKeepReadingIncompleteRequest and connCancelIncompleteRequests functions
into a new ConnStateData::checkHeaderLimits() method.


* Server-side changes:

Separated ""received whole request body"" state from ""sent whole request
body"". When we chunk requests, we need to add last-chunk. Thus, we may
receive (and written) the whole raw body but still need to write
last-chunk. This is not trivial because we should not write last-chunk
if the body producer aborted. XXX: check all pipe->exhausted() callers
to make sure all code has been adjusted.

Added getMoreRequestBody() virtual method that Server uses to get
encoded body bytes from its kids. FTP does not encode and uses default
implementation.

Fixed HTTP/FTP doneSendingRequestBody() to call its parent. I am not sure
it helps with correctly processing transactions, but the parent method was
designed to be called, and calling it make the transaction state more clear.

Moved ""broken POSTS"" handling code into its own method and polished it
(HttpStateData::finishingBrokenPost). We now skip the ""broken POSTS"" fix
if the request is chunked.

Resolved old XXX: HttpStateData::handleRequestBodyProducerAborted() was
indeed doing nothing useful despite all the pretense. Now it aborts the
transaction.",719,data/crawl/squid/patch_640.diff
https://github.com/squid-cache/squid/commit/4fe7547341a8257747de6a6b3899e6e527f58bc7,08 Sep 2010,Implemented --enable-build-info configure option.,85,data/crawl/squid/patch_641.diff
https://github.com/squid-cache/squid/commit/ee82b46c3b08cf2222ff705abf0f5bf96a9aedf2,02 Sep 2010,Unit-tests for the new HTTP request-line parser,844,data/crawl/squid/patch_642.diff
https://github.com/squid-cache/squid/commit/823d23e449a741d022a9728b228a76ae394d28ae,25 Aug 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
Support Kerberos authentication in squidclient",238,data/crawl/squid/patch_643.diff
https://github.com/squid-cache/squid/commit/18191440e92905de717a542b41e303cd73c119ce,24 Aug 2010,"Author: Henrik Nordstrom <henrik@nordstrom.net>
Author: Amos Jeffries <squid3@treenet.co.nz>
Collapse HTCP cache_peer options into one setting.

The list of HTCP mode options had grown a bit too large. Collapse them
all into a single htcp= option taking a list of mode flags.",93,data/crawl/squid/patch_644.diff
https://github.com/squid-cache/squid/commit/59a09b98f631cb154487ce5cd65b09fafd4a07a3,24 Aug 2010,Solaris compatiblity enhancements.,138,data/crawl/squid/patch_645.diff
https://github.com/squid-cache/squid/commit/4ad606098377d311d430be87556c6fd52f0ab8e1,24 Aug 2010,"Send chunked responses if body size is unknown.

Apply HTTP chunked transfer encoding to the response body sent to client
if all of the following conditions are met:

* client claims HTTP version 1.1 or later support
* response does not have a Content-Length header already
* response does not use multipart/byteranges encoding
* connection is persistent

If we decide to send chunked reply, chunked_reply flag is set. Chunked
encoding is done in ClientSocketContext::packChunk(). The last-chunk
is sent only when clientReplyContext complete flag is set.

This change helps keep client-side connections persistent.",77,data/crawl/squid/patch_646.diff
https://github.com/squid-cache/squid/commit/4299f876344efc8a8446f2bc0c940fadad2bff09,23 Aug 2010,"Bug #2583 fix: pure virtual method called

When a cbdata-protected class holds its own cbdata and has virtual
toCbdata(), there is a catch22 problem: we need cbdata to know whether
the pointer to the class object is valid, and we need to dereference
that pointer to get cbdata.

Added CbcPointer class to hold both a pointer to a potentially freed
class object and the cbdata pointer protecting that object. Keeping the
cbdata pointer allows us to test whether the object is still there
without dereferencing the object pointer.

Use the CbcPointer class to hold safe pointers to AsyncJobs. This
prevents ""pure virtual method called"" failures because we no longer
dereference freed job pointers.

Removed Initiator parameter from many initiatee constructors. The
Adaptation::Initiator::initiateAdaptation method now sets the initiator
of the job. This makes the constructor profile simpler and removes the
need to propagate Initiator changes through all the [nested]
constructors.

Renamed AsyncJob::AsyncStart() to AsyncJob::Start(). I had to change the
callers code anyway and it was a good opportunity to remove the
redundant ""Async"".


Special thanks to Stefan Fritsch for updating and testing an earlier
version of this patch.",1078,data/crawl/squid/patch_647.diff
https://github.com/squid-cache/squid/commit/8978bd9db7b66165c2b059be0eb17f5e047d9122,21 Aug 2010,SourceFormat Enforcement,22,data/crawl/squid/patch_648.diff
https://github.com/squid-cache/squid/commit/ec3c3187987682b6b4c87f53ad10dc5e44577ddc,20 Aug 2010,Fixed some build errors in purge tool.,14,data/crawl/squid/patch_649.diff
https://github.com/squid-cache/squid/commit/ae919b541678674f5ff5fbc22cdf35a99d33b264,20 Aug 2010,"Kill redundant hexd program from purge.

There is too many other tools for producing a readable hexdump of a file.",151,data/crawl/squid/patch_650.diff
https://github.com/squid-cache/squid/commit/2ccf2eb2159f0ee9847669c101f9ed4143e0b01d,19 Aug 2010,"Bundle the purge and hexd tools with Squid sources.

Fixes the remaining known errors with purge tool building within
Squid source tree.


This adds the auto-tools changes necessary to bundle the tool.",564,data/crawl/squid/patch_651.diff
https://github.com/squid-cache/squid/commit/c060699c240d3619640c333ef1e760a72d780030,19 Aug 2010,revert unwanted changes slipped into rev10756.,496,data/crawl/squid/patch_652.diff
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/patch_653.diff
https://github.com/squid-cache/squid/commit/2e881a6fe555b4e1ab23c9a16684a1591af0cbe2,14 Aug 2010,SourceFormat Enforcement,4279,data/crawl/squid/patch_654.diff
https://github.com/squid-cache/squid/commit/0383747d92754ae56b7fcf091950b4db518a3d1c,13 Aug 2010,"Permit rotate logs from cachemgr

Given that reconfigure, shutdown and offline already have password-protected
remote actions available it makes sense to permit the less critical rotate
as well.",22,data/crawl/squid/patch_655.diff
https://github.com/squid-cache/squid/commit/b1218840b92df2ac65c8da509fae0ec7e63a632d,13 Aug 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
Helper: ext_kerberos_ldap_group_acl: Lookup Kerberos/NTLM group via LDAP",5482,data/crawl/squid/patch_656.diff
https://github.com/squid-cache/squid/commit/95e785008cfde3ae4a0f830437dd768ce7afdb2e,13 Aug 2010,"HTTP/1.1 compliance: Stop using Proxy-Connection header

The Proxy-Connection header is not part of any HTTP standard. It was added
by Netscape to differentiate persistent connections to intermediary proxies
but that duty has been formally superceded by the Connection: header.

This compliance update makes Squid stop sending Proxy-Connection on outbound
requests. Starts consistently using Connection: header instead.

The Proxy-Connection header is also ignored on HTTP-strict builds.
For compatibility we must do a small violation and drop it as a hop-by-hop
header despite strct-mode technically being required to pass it through.

For origin server connections the non-strict builds will retain the
status-quo: interpret it, but treat it as an HTTP/0.9 thing to be
upgraded to HTTP/1.1 Connection:.

squidclient is also fixed not to send it.",46,data/crawl/squid/patch_657.diff
https://github.com/squid-cache/squid/commit/c19d13200ad1ca00d61fa046232faa83ef263c6f,09 Aug 2010,Bug 2997: visible_hostname directive no longer matches docs,57,data/crawl/squid/patch_658.diff
https://github.com/squid-cache/squid/commit/c599b3e8688e2aed823c127e17f529c2922b4fbc,04 Aug 2010,Push-merge,3303,data/crawl/squid/patch_659.diff
https://github.com/squid-cache/squid/commit/8e0acaf57f867bc623754ece934eedec91c4d407,30 Jul 2010,Shuffled buffer detection tests into os-deps.m4,403,data/crawl/squid/patch_660.diff
https://github.com/squid-cache/squid/commit/e0f8b7097291fc129f5090eb975832a8f16ca401,30 Jul 2010,"Bug 2994: pt 1: Open *_port directives correctly in IPv4-only mode.

Was opening snmp_port, icp_port, htcp_port under the v4-mapping assumption.
This forces the ports both listening and outgoing to IPv4-only unless
v4-mapping is actually available in the system.",30,data/crawl/squid/patch_661.diff
https://github.com/squid-cache/squid/commit/f467f57845e8aff73a8c82896e5d0bd1392a5fd7,29 Jul 2010,Refactored filedescriptors number detection.,262,data/crawl/squid/patch_662.diff
https://github.com/squid-cache/squid/commit/1ca3e305eee25fe77d04ca211cd50c75970d4a04,29 Jul 2010,Shuffled FD_SETSIZE detection into os-deps.m4,78,data/crawl/squid/patch_663.diff
https://github.com/squid-cache/squid/commit/055421eeda16d87706ea792c494c66a6b0f994e2,25 Jul 2010,"Replace most USE_IPV6 with run-time support probing

This unifies the code built for IPv4-only, dual-stack and split-stack.

 * --disable-ipv6 option remains, however it now prevents the run-time probe

 * Probing previously done in ./configure at build time is now merged and
performed run-time on every startup. IPv6 is enabled or disabled based on
the underlying OS support for sockets and setsockopt operations required.

 * Parsing and other operations which can be performed without specific IPv6
connectivity are enabled.

 * Some DNS logic alterations have had to be made to merge the split-stack
DNS and leverage it for IPv4-only mode. Otherwise the logics are unchanged
from previous dual-stack builds which have been well tested.",1185,data/crawl/squid/patch_664.diff
https://github.com/squid-cache/squid/commit/9d753b02f8036b79fb5c5db0b7899a8287fa1a89,21 Jul 2010,SourceFormat Enforcement,2878,data/crawl/squid/patch_665.diff
https://github.com/squid-cache/squid/commit/bf1a7ece574ba696a111e941af3c1c3eb964f449,20 Jul 2010,"Author: Chad E. Naugle <chad.naugle@travimp.com>
Bug 2905: eDirectory (8.7 & 8.8) IPv4/IPv6->Username external ACL helper

Original code import.",2168,data/crawl/squid/patch_666.diff
https://github.com/squid-cache/squid/commit/e83fd25912b93b631114b479350469415a1a6dfd,16 Jul 2010,"Added debugging scripts that work with detailed cache.log

  scripts/find-alive.pl: pinpoint objects that are still alive, to find leaks
  scripts/trace-job.pl: find cache.log lines that correspond to a given job
  scripts/trace-master.pl: trace jobs related to a single master transaction

The scripts require maintenance as the logging format changes, but
they often simplify debugging by extracting relevant information from
tons of poorly structured cache.log data.",297,data/crawl/squid/patch_667.diff
https://github.com/squid-cache/squid/commit/22c45c7d53371b74d9007d7c5495fbbc2ea37c00,16 Jul 2010,"Polished AsyncJob documentation. Removed obsolete job call wrapping notes.

Only the comments have been changed.",49,data/crawl/squid/patch_668.diff
https://github.com/squid-cache/squid/commit/3889d00c545dcb05060d081d73ecd2fac6f12fd5,16 Jul 2010,"Added initial extended documentation for AsyncJob API.

Needs dox syntax check and polishing.",107,data/crawl/squid/patch_669.diff
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/patch_670.diff
https://github.com/squid-cache/squid/commit/feec68a0782ad124e0080162a988ccbc3ba46e34,09 Jul 2010,SourceFormat Enforcement,2656,data/crawl/squid/patch_671.diff
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/patch_672.diff
https://github.com/squid-cache/squid/commit/e673ba3a911ca99cdeaf2fda6606a26568416aa9,08 Jul 2010,Helpers: unify auth helpers use of debug and HELPER_INPUT_BUFFER,168,data/crawl/squid/patch_673.diff
https://github.com/squid-cache/squid/commit/56ff468707b9146dc19a5c519fd421dd2b9cfcb9,08 Jul 2010,Helpers: upgrade digest helpers to C++,273,data/crawl/squid/patch_674.diff
https://github.com/squid-cache/squid/commit/abf4be2be005b247ae6cf7ffd4a173ee60ff6867,07 Jul 2010,"SMP support, part 1: Essential non-caching functionality.

Added workers squid.conf option to specify how many main Squid
processes to fork and maintain. Zero means old no-daemon mode.
One means the old non-SMP mode.

Added support for process_name and process_number macros and
if-statement conditionals in squid.conf. Search for .pre changes for
documented details. These features allow the admin to configure each
worker process differently if needed.

Support multiple workers listening on the same HTTP[S] port (port
sharing). This allows multiple workers to split the load without any
special rules.

Support or prohibit port sharing for WCCP, DNS, ICP, HTCP, SNMP, and
Ident protocols, depending on protocol-specific restrictions. Sharing is
implemented by registering listening socket descriptors with the
Coordinator process and obtaining them from the Coordinator as needed.
Here are protocol-specific notes:

   WCCP: Restricted to the Coordinator process due to how WCCP works.
   Workers do not need access to the WCCP code.

   DNS: Done by each worker with no sharing. Fixed source ports not
   supported unless each worker is given its own outgoing address
   because we do not want to match outgoing queries and incoming
   responses across processes.

   SNMP: Workers share incoming and outgoing sockets.

   ICP and HTCP _clients_: Cannot be supported in SMP environment
   unless each process has its own address (i.e., unique IP address
   and/or unique [ICP] port) because we do not want to match outgoing
   queries and incoming responses across processes.

   ICP and HTCP _servers_: share listening sockets.

   Ident clients do not need to share sockets because they use
   unique ports.

Support management signals (squid -k ...) in SMP mode, acting as a
single Squid instance.

Refork dying workers, similar to how we reforked dying process in
non-SMP daemon mode.

Merged from lp smp branch r10306.",3002,data/crawl/squid/patch_675.diff
https://github.com/squid-cache/squid/commit/8eeb87e6acf8bae4bb621128865d4ee4edd20dcf,05 Jul 2010,Update negotiate SSPI helper,313,data/crawl/squid/patch_676.diff
https://github.com/squid-cache/squid/commit/598c41dafb060d9dce97dc2e7489634af0862232,01 Jul 2010,Removed comment-question. There are no default http_port entries.,2,data/crawl/squid/patch_677.diff
https://github.com/squid-cache/squid/commit/1dcf61eb8b17dc47e6ba3ed0921caa25fc1c232b,30 Jun 2010,"NTLM helpers cleanup pt 3: migrate libsmbval into libntlmauth

Library changes:
* ntlmauth.* files moved to libntlmauth/

* helpers/ntlm_auth/smb_lm/smbval moved to libntlmauth/

* No behaviour changes. Since I can't test the deeper logics.
  Just enough to make the code built with portable types available in Squid

* API shuffled slightly to use less .h and to remove all external uses of
  private *-priv.h definitions.

Library now provides three NTLM backend API:
  libntlmauth/ntlmauth.h  - NTLM packet handling
  libntlmauth/smb.h       - SMB LM credential validation
  libntlmauth/rfcnb.h     - RFCNB (NetBIOS) domain server communications

Helper Changes:

* NTLM helpers tweaked slightly to build with the adjusted libntlmauth API
  and ntlm_smb_lm_auth helper to build as C++

* automake logics updated to obey --disable-auth and --disable-auth-ntlm


NOTE: There will be extra code safety and testing benefits gained by
      converting libntlmauth to C++ as well. But that requries someone who
      can test the code behaviour during the upgrade. For now this wil do.",2475,data/crawl/squid/patch_678.diff
https://github.com/squid-cache/squid/commit/9da8dd5ce5e18bfa3781c16f450ed72ae84ccef9,29 Jun 2010,SourceFormat Enforcement,58,data/crawl/squid/patch_679.diff
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/patch_680.diff
https://github.com/squid-cache/squid/commit/bc25525a843b387bd388f61595d0ec6e2d88f2bf,28 Jun 2010,"Upgrade mswin_sspi_auth to ntlm_sspi_auth

* Make use of new libntlmauth API for several actions.

TODO: C++ upgrade will need to be done in conjunction with someone who
      can assist testing the build.",1055,data/crawl/squid/patch_681.diff
https://github.com/squid-cache/squid/commit/013e320c6831a2b175ce7a5b4fc15e58dafdc27d,14 Jun 2010,"Support ICP and HTCP _servers_ sharing listening sockets.

Without a shared cache, the servers will report many false misses.

ICP and HTCP _clients_ cannot be supported in SMP environment unless each
process has its own address (i.e., unique IP address and/or unique [ICP] port)
because we cannot match outgoing queries and incoming responses across
processes. If ICP/HTCP support in SMP is needed, the easiest change would
be to use random source ports for sending ICP/HTCP queries. This may also
improve security by avoiding well-known source ports for UDP queries.",141,data/crawl/squid/patch_682.diff
https://github.com/squid-cache/squid/commit/83c51da9947dad7253ee1c449ac1c0f388aaf688,14 Jun 2010,"Author: Tsantilas Christos <chtsanti@users.sourceforge.net> , Alex Rousskov <rousskov@measurement-factory.com>
Support ICAP 206 Partial Content extension

The ICAP 206 Partial Content extension allows the ICAP agents to optionally
combine adapted and original HTTP message content.
For more information about ICAP Partial Content extension look at the
draft from the ICAP forum:

http://www.icap-forum.org/documents/specification/draft-icap-ext-partial-content-07.txt

The new configuration option ""icap_206_enable"" added to enable/disable
the 206 feature.

This is a Measurement Factory project.",242,data/crawl/squid/patch_683.diff
https://github.com/squid-cache/squid/commit/75aa769bc374a0ebb66d3c41a763d5ca2ed44d4b,11 Jun 2010,"Upgrade ntlm_fake_auth helper and internal libntlmauth

Fake auth helper changes:

 - renames fakeauth to ntlm_fake_auth
 - links ntlm_fake_auth to libntlmauth
 - removes duplicate code provided by libcompat and libntlmauth
 - moves the remaining bits of fakeauth/ntlm.h to ntlm_fake_auth.cc

Library API changes:

 - moves some of the basic NTLM operations into libntlmauth
    * fetch_string UNICODE support
    * make challenge packet
    * validate packet type
    * make challenge nonce
    * unpack user and domain from authenticate packet

 - tweaks libntlmauth to split the make challenge operation so that it
   only generates the challenge object (does not encode blob for sending,
   or hard-code field values any more).

Other related changes:

 - tweaks the smb_lm helper which already linked libntlmauth so that it
   uses the updated API correctly after the above changes.

 - documents libntlmauth and some of ntlm_fake_auth helper",1471,data/crawl/squid/patch_684.diff
https://github.com/squid-cache/squid/commit/f3f0f5634cad7a073e461f5a45e797f9c1349324,11 Jun 2010,"Port from 2.7: max_filedescriptor config option

Since Squid no longer really has any hardcoded filedescriptor limitations
it makes sense to have a squid.conf directive allowing the number of
filedescriptors to be tuned runtime. Default if unset is to obey whatever
ulimit settings as before.

 setMaxFD: figures out what to we can use for Squid_MaxFD

 setSystemLimits: Configures the system limitations to match our
expectations which might be lower than what setMaxFD finds if
the comm loop has additional restrictions",100,data/crawl/squid/patch_685.diff
https://github.com/squid-cache/squid/commit/31ef19cd9d84d9a304faf45a4826a3a540a04901,09 Jun 2010,"Enforce connection re-try limit connect_retries

We used to have a maximum_single_address_tries limit which as similar
That is not dropped and the single-link retry used instead which applies
to ALL links regardless of the host IP address count since we dont know
that count any more.",60,data/crawl/squid/patch_686.diff
https://github.com/squid-cache/squid/commit/2413d60a94cfb849910bc8cdda2773e011e5a24f,09 Jun 2010,Migrate ICAP::Xaction::connection to a Comm::ConnectionPointer,70,data/crawl/squid/patch_687.diff
https://github.com/squid-cache/squid/commit/55cbb02b85fe2f452c1c9f28c0d6f71ffd0375a4,09 Jun 2010,Make comm_close a method of Comm::Connection,87,data/crawl/squid/patch_688.diff
https://github.com/squid-cache/squid/commit/f9b72e0ce08abc5a8be1574fc0eabe4a818499ec,08 Jun 2010,Utilize comm/forward.h for small pre-definitions,197,data/crawl/squid/patch_689.diff
https://github.com/squid-cache/squid/commit/7b1e5eb4f69eeb46a9f4586f5c83512ecacc928a,05 Jun 2010,"Replaced blocking comm_open_listener() call for incoming and outgoing SNMP
ports with Ipc::StartListening calls, to use the ""shared listen"" feature when
doing SMP.",107,data/crawl/squid/patch_690.diff
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/patch_691.diff
https://github.com/squid-cache/squid/commit/2adee6dea5e8d02f1a145c185dc24fe3d044ffa5,28 May 2010,Correct common log format line ending output,2,data/crawl/squid/patch_692.diff
https://github.com/squid-cache/squid/commit/632e3c27e933ac73bc46704e37c1c678ef30a2e4,28 May 2010,"Bug 2810: common log format generates 2 lines of syslog

Based on work by Keyran Bayliss",9,data/crawl/squid/patch_693.diff
https://github.com/squid-cache/squid/commit/3d8b6ba4c6e56fa095348ff59329b858d2eae5a7,25 May 2010,"Author: Mark Nottingham <mnot@pobox.com>
Bug 2631: store-stale refresh_pattern option

RFC2616 allows almost anything to be cached*; most of the constraints are on
what can be used out of cache.

For example, this response:

HTTP/1.1 200 OK
Content-Type: text/html
Date: [date]

[ content ]

is cacheable as per HTTP; it just is considered stale as soon as it is cached.

However, Squid (and many others) don't cache all of these responses, at least
in part because doing so would decrease cache efficiency, and introduce more
load (e.g., on disk subsystems, etc.).

In particular, Squid won't cache a response unless it has either explicit
freshness (e.g., Expires, CC: max-age) or a validator (Last-Modified or ETag).

Nevertheless, doing so is desirable in some circumstances, because in some
deployments the client wants to be able to ask for a stale response. For
example;

GET /foo HTTP/1.1
Host: example.com
Cache-Control: max-age=3600, max-stale

Should retrieve the above response from cache, as long as it is less than an
hour old.

This patch adds a 'store-stale' refresh_pattern option that allows this.",20,data/crawl/squid/patch_694.diff
https://github.com/squid-cache/squid/commit/0e1d762939f6c520ba41c222dcc7d51610b4916c,25 May 2010,Dump refresh_pattern config as single lines not pairs,2,data/crawl/squid/patch_695.diff
https://github.com/squid-cache/squid/commit/00516be10a0d4dae63c9a0b98ab2ed8f4138389c,24 May 2010,"Replaced blocking comm_open_listener() call for HTTPS ports with
Ipc::StartListening calls, to use the ""shared listen"" feature when doing SMP.

Moved common HTTP and HTTPS port opening code into OpenedHttpSocket() and
AddOpenedHttpSocket().",88,data/crawl/squid/patch_696.diff
https://github.com/squid-cache/squid/commit/93ad6f77a13ddade63012b5db285e4066a4049dc,22 May 2010,make Comm::Connection ref-counted and fix pconn handling.,246,data/crawl/squid/patch_697.diff
https://github.com/squid-cache/squid/commit/cfd665298756283c633ad77e4e6737e2f54e2999,19 May 2010,Comm restructure part 2 - outbound connections,2116,data/crawl/squid/patch_698.diff
https://github.com/squid-cache/squid/commit/42687bb299c004cd94424c85c9a0fa6bf38344bb,09 May 2010,Kill rfc1035_errno & error_message globals. We always have the error code available anyway,58,data/crawl/squid/patch_699.diff
https://github.com/squid-cache/squid/commit/d232141d1bd04ebde4e6ef92e6f911c09bc32936,06 May 2010,"Unify auth schemes credential states.

Each scheme was maintaining it's own fields about what the state of the
credentials was.
This allows code to determine the state of the credentials easily.
Username cache can also display the credential state of any auth type now.

Tested on Basic, not yet tested for Digest, NTLM, Negotiate.

Also: fixed error where Negotiate always reported no program configured.",373,data/crawl/squid/patch_700.diff
https://github.com/squid-cache/squid/commit/fe090a8613fa719ae354ee7e6027e3006236c8be,02 May 2010,"Replaced blocking comm_open_listener() call for HTTP ports with
Ipc::StartListening calls to use the ""shared listen"" feature when doing SMP.

TODO: convert HTTPS code the same way.",84,data/crawl/squid/patch_701.diff
https://github.com/squid-cache/squid/commit/bf6141370be31d72060a48d524a4f994458228d8,02 May 2010,Remove obsolete auth code from FilleDchecklist,51,data/crawl/squid/patch_702.diff
https://github.com/squid-cache/squid/commit/000c8031f0ba40cadd9f44dc68797e05b3a28f12,01 May 2010,Fixed smb_lm ntlm helper debugging,44,data/crawl/squid/patch_703.diff
,,,,
https://github.com/squid-cache/squid/commit/54e8823bf16f1310bcf26d4f5789d4ffc1fc62be,30 Apr 2010,Naming upgrade of digest_pw_auth (now digest_file_auth),206,data/crawl/squid/patch_704.diff
https://github.com/squid-cache/squid/commit/c7b1dd5d377a3cd748cf48dde9cfa12e1fb5f3df,22 Apr 2010,"Clarify http_port mode options and enhance config validation.

This makes some changes to the config validation of http_port lines
and documentation of http_port.

It alters documentation to call accel, tproxy, intercept, and sslbump
options ""mode flags"" since they determine the overall code paths which
traffic received is handled by.

The http_port syntax docs are updated to show that mode flags must go
first before any options. This is not strictly true, since the mode flag
only must go before mode-specific options. But its clearer to explain the
syntax docs like this. Both mode and options remain completely optional
(except that some options require certain modes as before).

The parser is updated to validate that only one of the mode flags is used.
Attempts to mix them will result in a fatal error. Attempts to use any of
the mode-specific options without the correct mode being enabled first will
result in a fatal message.

As a side-effect of this the implicit enabling of accel on several of its
options has been dropped. Explicit use as mode flag is preferred (and
required) instead for clear reading of the config.

Implications for older configs are that the http_port may fail a parse
check until some basic re-ordering of options or splitting of http_port
into multiple entries is done. Hopefully the messages emitted on failure
are clear enough for people to follow easily.",273,data/crawl/squid/patch_705.diff
https://github.com/squid-cache/squid/commit/d33e847ce7ca7f334ef1dccece5bf6fa42feedf9,19 Apr 2010,"Author: Dhaval Varia <dhavalkvaria@gmail.com>
TCP logging capability

Enable Squid to send log lines to a remote server over TCP.

This permits logging to bypass the failures implicit with UDP packets.

TODO:
 * example daemon to receive the log traffic via TCP
 * handle TCP failures mid-transaction
 * handle full TCP buffers",283,data/crawl/squid/patch_706.diff
https://github.com/squid-cache/squid/commit/b7ac5457b2c07bf13d3123a4035d22f6c79ce37e,17 Apr 2010,"SourceLayout: Add Ip namespace for internal libip

IpAddress is now Ip::Address, IpInterceptor is now Ip::Interceptor, etc.

* Also detaches QosConfig from the global config structures.
  Clearing up several of the dependency chains to libip",1407,data/crawl/squid/patch_707.diff
https://github.com/squid-cache/squid/commit/8277060a995bdf35b03948f4189d7b4b34b89441,05 Apr 2010,"Author: Alex Rousskov
Modify icap_service_failure_limit option to forget old ICAP errors.

A busy or remote ICAP server may produce a steady but shallow stream of
errors. Any ICAP server may become nearly unusable in a short period of
time, producing a burst of errors. To avoid disabling a generally usable
service, it is important to distinguish these two cases. Just counting
the number of errors and suspending the service after
icap_service_failure_limit is reached often either suspends the service
in both cases or never suspends it at all, depending on the option
value.

One way to distinguish a large burst of errors from a steady but shallow
error stream is to forget about old errors. The icap_service_failure_limit
option modified to instructs Squid to ignore errors that
are ""too old"" to be counted as a part of a burst.

Another way to look at this feature is to say that the modified
icap_service_failure_limit limits the ICAP error _rate_. For example,
   # suspend service usage after 10 failures in 5 seconds:
   icap_service_failure_limit 10 in 5 seconds

Squid does not remember every transaction error that occurred within the
allowed ""oldest error"" time period. That would be result in a precise
but too expensive implementation, especially during error bursts on a
busy server. Instead, Squid divides the period in ten slots, counts the
number of errors that occurred in each slot, and forget the oldest
slot(s) as needed. Thus, the algorithm has about 90% precision as far as
timing of the failures is concerned. That 90% precision ought to be good
enough for any deployment.",224,data/crawl/squid/patch_708.diff
https://github.com/squid-cache/squid/commit/27bc2077cdd539eabfb20ed051980dba4e75b51b,22 Mar 2010,"Compat: shuffle replacement OS function fiels into libcompat

* strerror() is omitted due to an emulator, and multiple
  replacement functions being defined with rather complicated
  interactions.

* the .c parts must also remain in lib/ for now to simplify
  autoconf logics.",612,data/crawl/squid/patch_709.diff
https://github.com/squid-cache/squid/commit/dc47f5311942b1641dab0631f8bc0cd5094d8959,21 Mar 2010,"Compat: Shuffle squid.h portability definitions into libcompat

* Improves and shuffles the memory allocator and string buffer protection
* Fixing many of the unsafe string buffer handling helpers
* removing several duplicated hacks already in libcompat
* Adds NetBSD portability file",468,data/crawl/squid/patch_710.diff
https://github.com/squid-cache/squid/commit/3872be7c733c3cfbdcc29f2a40d6479e11c51834,10 Mar 2010,"Bug 412: Send HTTP/1.1 to servers and peers

Building on a lot of work by a very great many people over eight years.
Thank you very, very much to everyone who made this possible.",51,data/crawl/squid/patch_711.diff
https://github.com/squid-cache/squid/commit/056823c5758d1648690dd50745eef39dc10d92c2,24 Feb 2010,"Bug #2818: Random unix_group crash at startup due to uninitialized pointer reference

The group array was not properly initialized.

This patch also removes the limitation of 10 groups.",25,data/crawl/squid/patch_712.diff
https://github.com/squid-cache/squid/commit/cb0cec9970702f1863e7cdcaac226524d29fbb88,15 Feb 2010,SourceFormat Enforcement,786,data/crawl/squid/patch_713.diff
https://github.com/squid-cache/squid/commit/9fa76e99829f5b340a9a7e7f02ef62ba4937bdd0,14 Feb 2010,"Author: Serassio Guido <serassio@squid-cache.org>
Windows port: Update mswin_check_ad_group to version 2.0

The global groups support was rewritten, now is based on ADSI.
New Features:
 - support for Domain Local, Domain Global ad Universal groups
 - full group nesting support

This helper, like the previous version, can be compiled only using
Microsoft Visual Studio because some needed library are not available
on MSYS+MinGW or Cygwin.",983,data/crawl/squid/patch_714.diff
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/patch_715.diff
https://github.com/squid-cache/squid/commit/8a368316d0c7efefdf7f3efd02e5f3673af51496,05 Feb 2010,"Author: Jean-Gabriel Dick <jean-gabriel.dick@curie.fr>
Bug 1843: multicast-siblings cache_peer option for optimising multicast ICP relations

'multicast-siblings' : this option is meant to be used only for cache peers of
type ""multicast"". It instructs Squid that ALL members of this multicast group
have ""sibling"" relationship with it, not ""parent"".  This is an optimization
that avoids useless multicast queries to a multicast group when the requested
object would be fetched only from a ""parent"" cache, anyway.  It's useful, e.g.,
when configuring a pool of redundant Squid proxies, being members of the same
multicast group.",39,data/crawl/squid/patch_716.diff
https://github.com/squid-cache/squid/commit/4bc48d15c547d6345f170714c834b2cb10d33d22,25 Jan 2010,Display cache_peer name option in CacheMgr config,5,data/crawl/squid/patch_717.diff
https://github.com/squid-cache/squid/commit/a90446680a8fae4388bf503c45415815ee568b8a,22 Jan 2010,SourceFormat Enforcement,19,data/crawl/squid/patch_718.diff
https://github.com/squid-cache/squid/commit/57d76dd4111628fdc083c3b0eac3f1ebf04d97d1,21 Jan 2010,"Author: Wolfgang Nothdurft <wolfgang@linogate.de>
Bug 2731: Add follow_x_forwarded_for support to ICAP

Pass the indirect client address to the ICAP server using X-Client-IP.",33,data/crawl/squid/patch_719.diff
https://github.com/squid-cache/squid/commit/6a7f4dec1defc21c1e4469788ed25c8eb891a5c6,09 Jan 2010,Remove optional kerberos/spnegohelp/ library due to licensing issues,4343,data/crawl/squid/patch_720.diff
https://github.com/squid-cache/squid/commit/5a48ed18b5610e3e2d3d5250797375f4fb93dc1e,02 Jan 2010,"Basic Authentication Helper name upgrades

This nearly completes renaming and C++ compiling of the basic auth helpers.
MSNT is still pending cleanup in it's smb library code.

TODO: other helper types updated.",446,data/crawl/squid/patch_721.diff
https://github.com/squid-cache/squid/commit/f692498bb44b36154c27c634ac4f263a751add9c,21 Dec 2009,"Author: Tsantilas Christos <chtsanti@users.sourceforge.net>
Append the _ABORTED or _TIMEDOUT suffixes to the action access.log field.

 * When an HTTP connection with a client times out, append _TIMEDOUT suffix
to the Squid result code field in access.log.

 * When an HTTP connection with the client is terminated prematurely by
Squid, append _ABORTED suffix to the result code field in access.log.
Premature connection termination may happen when, for example, I/O
errors or server side-problems force Squid to terminate the master
transaction and close all associated connections.

The above changes make it possible to identify failed transactions even
when they have 200/200 received/send response status codes and a
""successful"" Squid result code (e.g., TCP_MISS). This is important when
one does not want 1-hour ""stuck"" transactions for 15-byte GIFs to
significantly skew the mean response time statistics. Such transactions
eventually terminate due to, say, TCP errors, and the old code would
record huge response times for successfully-looking transactions.

The development sponsored by the Measurement Factory",56,data/crawl/squid/patch_722.diff
https://github.com/squid-cache/squid/commit/404cfda137ac83a6f7df3aab5d840746d634686c,19 Dec 2009,"Polish on-demand helpers a little more

* logic for implicit external_acl_type idle= parameter was bad
  could result in idle=9999999 if max<startup.
  Fix that and remove the possible max<startup

* add concurrency back into the config dump displays

* fully drop the auth_param concurrency parameter for consistency.",37,data/crawl/squid/patch_723.diff
https://github.com/squid-cache/squid/commit/48d54e4daa77f1b390c3d38c0346949703fcb481,16 Dec 2009,"Run helpers on-demand

For some config backwards compatibility the maximum is kept as a single
integer first parameter to the *children directives.

Default setting changes:

 Instead of starting N helpers on startup and each reconfigure this
 makes the default zero and the configured value a maximum cap.
 The default maximum is raised from 5 to 20 for all helpers except
 for dnsservers where the maximum is raised to the old documented
 maximum of 32.

Obsoleted settings:
 url_rewrite_concurrency
  - replaced by the concurrency=N option now available on all *_children
    directives (including auth_param X children).
    To avoid compile problems this directive had to be fully dropped.

 auth_param X concurrency N
  - as above. However the option was able to be retained, as deprecated
    for future removal as well.


Behavior changes:

Whenever a request needs to use a helper and there are none available
immediately Squid tests to see if its okay to start a new one. Then does so.

The ""helpers dying too fast"" warnings and Squid closing has been modified
Squid will now not care about dying helpers if there are more that
startup=N active. If the death causes less than startup=N to be running
and is hit twice in less than 30 seconds will cause the warning message
to be doisplayed and Squid to abort same as before.

NP: that with startup=0 (the new default) helpers dying before or after
their first use will not crash Squid. But may result in a loop of
hung/failed requests and WILL result in a great many helper-failed
warnings in cache.log.

If needed we can bump the startup default back to 1 to avoid all that.
Or add a special check to kill squid if helpers die during startup and
provide a clearer log message ""Foo helper is dying before we can finish
starting it"" etc.

TODO: the current patch has no way to dynamically decrease the number of
      helpers. Only a reconfigure or helper dying can do that.",945,data/crawl/squid/patch_724.diff
https://github.com/squid-cache/squid/commit/a98bcbee0005004c1aa26042060eb1dd7dad482b,02 Dec 2009,"Shuffle simple math functions into SquidMath

This unlinks many depencies pulled in by tools.cc through the more
complicated permissions, and death reporting code.",230,data/crawl/squid/patch_725.diff
https://github.com/squid-cache/squid/commit/9d65168e8095a339c6f37503f0fd1b4548cce31a,23 Nov 2009,SourceFormat Enforcement,504,data/crawl/squid/patch_726.diff
https://github.com/squid-cache/squid/commit/82b7abe3ff9fcee6e92696c8fbf2d66c6777ca2a,22 Nov 2009,"Author: Adrian Chadd + Tim Starling
Port from 2.7: Logging infrastructure updates.

 * Basic port of the Squid-2.7 modular logging code 
 * Adds support for async daemon helpers.
 * One daemon helper for file IO is included.
 * Adds UDP stream logging facility. (Tim Starling)

Ported by Amos Jeffries.",2427,data/crawl/squid/patch_727.diff
https://github.com/squid-cache/squid/commit/b0365bd9f05a30d13c6ee3dadb3011b075ebcba0,18 Nov 2009,Fixed some cases of variable shadowing,118,data/crawl/squid/patch_728.diff
https://github.com/squid-cache/squid/commit/e053c141e955538f4b2a06f31ead42b66a3f3abd,18 Nov 2009,Fixed some cases of variable shadowing,180,data/crawl/squid/patch_729.diff
https://github.com/squid-cache/squid/commit/350e2aeca88de2de7eadc3a19c1fbdf0046f2e55,18 Nov 2009,"Fixed some cases of variable shadowing
Fixed shadowing-related bug in http reply handling",72,data/crawl/squid/patch_730.diff
https://github.com/squid-cache/squid/commit/076df709f55936015ee00327e3b6586e1f9ec9f7,17 Nov 2009,Fixed some cases of variable shadowing,50,data/crawl/squid/patch_731.diff
https://github.com/squid-cache/squid/commit/18ec8500ce3dc21de9f8325af0f2d5cf93132fcd,17 Nov 2009,Fixed some cases of variable shadowing,106,data/crawl/squid/patch_732.diff
https://github.com/squid-cache/squid/commit/8bcf08e0c7aa9b83c8eeb42a872d6aff60bfee2a,17 Nov 2009,Fixed some cases of variable shadowing,122,data/crawl/squid/patch_733.diff
https://github.com/squid-cache/squid/commit/e4ae841bb56fc39cf350c84d1aa04146f7bd808d,17 Nov 2009,Fixed some cases of linkage type mismatch and parameter shadowing,128,data/crawl/squid/patch_734.diff
https://github.com/squid-cache/squid/commit/0d1858cc3577bcbd8b963ee806e9f93f90057c7b,17 Nov 2009,"Send correct Connection: header on intercepted replies

Intercepted apps are expecting Connection: back from the server not our
default Proxy-Connection:",2,data/crawl/squid/patch_735.diff
https://github.com/squid-cache/squid/commit/6afad678ee586f5e79d265ce42557a53bf0654a7,06 Nov 2009,SourceFormat Enforcement,3799,data/crawl/squid/patch_736.diff
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/patch_737.diff
https://github.com/squid-cache/squid/commit/0477a0720841098ff1fa396e80b6259d827e437c,31 Oct 2009,"Multi-Lingual FTP directory listing

This replaces hard-coded FTP directory page with dynamically loaded
'error page' same as all other FTP result HTML outputs.

This has the added benefit of making the page HTML standards compliant,
CSS branded, and presentable in any of the auto-negotiated languages.",443,data/crawl/squid/patch_738.diff
https://github.com/squid-cache/squid/commit/15b02e9a6c826188f7a409a51c2f0d7d9c3bec8a,31 Oct 2009,"Support format tags in deny_info URLs

This enables a certain level of dynamically generated redirect. Using
deny_info and ACL controls for selective controlled requests.

Usage Examples:
 * redirect from domainA to domainB while retaining original URL path
 * stripping port from requests while retaining protocol, domain and path
 * adding tokens into requested URL from external_acl_type helper",148,data/crawl/squid/patch_739.diff
https://github.com/squid-cache/squid/commit/668be43137ac65e6953d068152705ac41c675f80,27 Oct 2009,"Use libcap functions instead of raw kernel interface

Rework the Linux capabilities code to use the more stable libcap interface
instead or raw kernel syscalls.

Take two, making sure there is a sufficiently recent libcap-2.09 or later.",116,data/crawl/squid/patch_740.diff
https://github.com/squid-cache/squid/commit/c3487a772ec3903bbb44c8b85e8fde0e4236f62f,27 Oct 2009,Activate libcap changes again,51,data/crawl/squid/patch_741.diff
https://github.com/squid-cache/squid/commit/d2c540dbb83b098322a29198d9deb478fa35ccad,18 Oct 2009,Undo Linux libcap change. libcap not capable enough on some Linux versions (cap_clear_flag missing),51,data/crawl/squid/patch_742.diff
https://github.com/squid-cache/squid/commit/fc32ce2e8f38e5bbac677ced17502af8fdddfa14,18 Oct 2009,SourceFormat Enforcement,30,data/crawl/squid/patch_743.diff
https://github.com/squid-cache/squid/commit/186dc06949000f8603ffe15ea8082c5880467281,17 Oct 2009,"Use libcap functions instead of raw kernel interface

Rework the Linux capabilities code to use the more stable libcap interface
instead or raw kernel syscalls.",55,data/crawl/squid/patch_744.diff
https://github.com/squid-cache/squid/commit/876326314a57aab13a43d04ce1fcb4ac1ba6c905,15 Oct 2009,Use libcap functions instead of raw kernel interface,61,data/crawl/squid/patch_745.diff
https://github.com/squid-cache/squid/commit/c98dcee3a2e9f9e67d0542ef84dfe364fc4c8815,01 Oct 2009,SourceFormat Enforcement,54,data/crawl/squid/patch_746.diff
https://github.com/squid-cache/squid/commit/509fba1a1fd9b98c624ce185d0e2c918ea074de6,30 Sep 2009,"Generate squid.conf.default with just the configuration data & comments

forward-port from squid-2",100,data/crawl/squid/patch_747.diff
https://github.com/squid-cache/squid/commit/b0758e04c93745979a8f679cec8e08b724d6ec58,25 Sep 2009,"Author: Adrian Chadd <adrian@squid-cache.org>
A tproxy cache cluster (eg behind WCCPv2) can't peer.

The issue stems from the forwarding logic creating source address spoofed
sockets to destinations that are inside the cluster. Since the WCCPv2
router won't redirect packets with an origin of the proxy MAC (at least for
L2 peering), source spoofed packets go out and are routed normally. The
packets back from the destination peer have a remote end of the spoofed IP,
and are instead sent to teh original client rather than the proxy.

The forwarding logic needs to be taught to optionally enable tproxy source
spoofing on connections based on a peer flag.

Just for completeness - tproxy'ed connections to a upstream or peer proxy
which is -outside- of the WCCPv2 tproxy cluster work fine.",28,data/crawl/squid/patch_748.diff
https://github.com/squid-cache/squid/commit/0263742023e4872c0db3b6cfd13df08c2e4673c1,23 Sep 2009,Merg from trunk,1314,data/crawl/squid/patch_749.diff
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/patch_750.diff
https://github.com/squid-cache/squid/commit/f54f527e1ba07927377e9398827b9cdf400a1303,16 Sep 2009,"Author: Source Maintenance
SourceFormat enforcement",957,data/crawl/squid/patch_751.diff
https://github.com/squid-cache/squid/commit/6989c6dcc2a01b8147d6d92ff8d3508aa3d7a647,11 Sep 2009,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos helepr updates.",33,data/crawl/squid/patch_752.diff
https://github.com/squid-cache/squid/commit/59bce1e80b711c4bc7c7ad5642e3ca227dced424,07 Sep 2009,"Author: Henrik Nordstrom <hno@squid-cache.org>
Bug 2510: digest_ldap_auth uses incorrect logic with TLS",8,data/crawl/squid/patch_753.diff
https://github.com/squid-cache/squid/commit/3ad12bdabcfe9732e94fdce1ea44f2c75a94fb58,04 Sep 2009,New squid_kerb_auth from Markus Moeller,5968,data/crawl/squid/patch_754.diff
https://github.com/squid-cache/squid/commit/dfeb186b8c66502b97aab952b1b049014c02a733,04 Sep 2009,"Bundle helpers for url_rewrite

Adds the --enable-url-rewrite-helpers configure time option.
see release notes or ./configure help text.

Bundles two 'fake' helpers with exemplar code for shell and C++ coding:

 url_fake_rewrite
	- C++ helper with old non-concurrent protocol.

 url-fake-rewrite.sh
	- shell helper with concurrent and non-concurrent protocols.


Also, some polishing is done to debug code for helpers.",390,data/crawl/squid/patch_755.diff
https://github.com/squid-cache/squid/commit/9ca29d23f7c7ebdb9f7fc6d360b0119ca2b7a09f,04 Sep 2009,"Author: Markus Moeller <huaraz@moeller.plus.com>
Support Kerberos login to peers

In some setups the upstream proxy requires a secue authentication method
(Negotiate, NTLM). Allow this with Negotiate/Kerberos.",828,data/crawl/squid/patch_756.diff
https://github.com/squid-cache/squid/commit/ec85ebda81e7645a60fd0cc947a10754a668c55e,03 Sep 2009,Fix some build errors,86,data/crawl/squid/patch_757.diff
https://github.com/squid-cache/squid/commit/96e03dd843bf82abfefbb46b3275154853ada1d4,28 Aug 2009,"Cleanup: Remove more traces of old squid debug()() macro

There is now no reason for any of the Squid internal code to contain 'debug()'

TODO: Just the ESI code remaining on the old system.
  It's debug seems to be incrementally building a single line to display
  objects parsed. But using multiple nested calls to dump it.
  VERY nasty. They need to be made writing to a buffer instead.",78,data/crawl/squid/patch_758.diff
https://github.com/squid-cache/squid/commit/c19c2c0bf9fe61e3caf3406692f3acccfa40a2e3,27 Aug 2009,Meld helper_debug into old debug. Now reserved for helepers,64,data/crawl/squid/patch_759.diff
https://github.com/squid-cache/squid/commit/a0e95c7e26b33cb3df67c566e0daf382738da3ea,27 Aug 2009,"Cleanup of auth header special case forwarding logics

The code dealing with our special case auth header forwarding/synthesising
had grown quite hairy and partially duplicated from all additions. This
cleans up the code moving this logics to a new function and unifying
WWW & Proxy auth cases.",186,data/crawl/squid/patch_760.diff
https://github.com/squid-cache/squid/commit/0606266fc8b9a44b2b6afb501fb346f3e59de875,27 Aug 2009,Use the right auth header type for the context,6,data/crawl/squid/patch_761.diff
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/patch_762.diff
https://github.com/squid-cache/squid/commit/fd06c01fc51a0ff1c7bda7d27b79b6eb025f84bc,24 Aug 2009,Drop helper.cc changes,10,data/crawl/squid/patch_763.diff
https://github.com/squid-cache/squid/commit/e13816381e77a355099d4673cbe38e11f0fdfec2,23 Aug 2009,SourceFormat: enforcement,1601,data/crawl/squid/patch_764.diff
https://github.com/squid-cache/squid/commit/33380a2d5fbf3ee58c1b8026347e461356c2ba57,23 Aug 2009,SourceFormat: report broken file and continue after errors.,41,data/crawl/squid/patch_765.diff
https://github.com/squid-cache/squid/commit/2f7be300e1a596e5fbc66a74c129eef744197ce6,23 Aug 2009,SourceFormat: mswin_sspi helper,412,data/crawl/squid/patch_766.diff
https://github.com/squid-cache/squid/commit/bbaf26850faf3e4feb62c38ef7807c10e2237de0,15 Aug 2009,"Author: Mark Nottingham <mnot@pobox.com>
Bug 2390: New hier_code ACL type

I needed to log only forward requests; forward_log looked interesting, but
isn't flexible like access_log. The easiest thing to do seemed to be to add a
hier_code ACL type.

Adapted to Squid-3 by Amos Jeffries",326,data/crawl/squid/patch_767.diff
https://github.com/squid-cache/squid/commit/c6111665d4d240d094f6b29a622389bc3676e401,14 Aug 2009,"Populate cache_mem again on disk cache hits, moving on-disk objects back
into the hot object pool.

This adds a new squid.conf option for tuning when to keep objects in memory.

Sponsored by: The Measurement Factory",181,data/crawl/squid/patch_768.diff
https://github.com/squid-cache/squid/commit/766743af0e72dc241510f65bc660dbd2eaca9420,13 Aug 2009,"Windows port: fix mswin_negotiate_auth.exe crash when executing a LocalCall authentication with verbose debug enabled

- Also ran indent",414,data/crawl/squid/patch_769.diff
https://github.com/squid-cache/squid/commit/2e1e4f10bd3ccc01183d99a9cb466f3bc483c5da,10 Aug 2009,merged from trunk,5048,data/crawl/squid/patch_770.diff
https://github.com/squid-cache/squid/commit/dcb802aa7ae3d63d5897bbe9260abc6533f48717,04 Aug 2009,"Bug #2648: stateful helpers stuck in reserved if client disconnects while helper busy

Note: May depend on the other stateful helper cleanups.",72,data/crawl/squid/patch_771.diff
https://github.com/squid-cache/squid/commit/ea21d49788dbca1dfa77822fa736c79c813d5648,04 Aug 2009,Unify memory_cache_first/disk into a single memory_cache_mode directive,73,data/crawl/squid/patch_772.diff
https://github.com/squid-cache/squid/commit/86ea30a69b4b6a1501ecf931b80248d85cd52693,03 Aug 2009,"Remove support for deferred state in stateful helpers

the deferred state were previously used for the challenge reuse mode
in NTLM, but is since long unused as it was both incompatible with
NTLMv2 and also not very stable for authentication.",283,data/crawl/squid/patch_773.diff
https://github.com/squid-cache/squid/commit/d20ce97d2485243522542bcd8adb52839a3e8b54,02 Aug 2009,Cut away the deferred helper state,267,data/crawl/squid/patch_774.diff
https://github.com/squid-cache/squid/commit/d7e0f901f9e577ab6bfbba6402160e05e531ef14,02 Aug 2009,Cleanup: Boost helper shutdown debugs and state display,28,data/crawl/squid/patch_775.diff
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/patch_776.diff
https://github.com/squid-cache/squid/commit/d974a0723c00b59328754bbd964e34fdd03a890a,17 Jul 2009,"Bug 2680 regression: Crash after rotate with no helpers running

Regression from bug 2276 fix. n_running was used instead of n_active.
Also documents the relevant counters to prevent this recurring.",30,data/crawl/squid/patch_777.diff
https://github.com/squid-cache/squid/commit/a22e6cd3b6e8889984d266816aaea8fcf27ee13d,13 Jul 2009,"Support adaptation sets and chains, including dynamic ICAP chains:

  - Support adaptation service sets and chains
    (adaptation_service_set and adaptation_service_chain)

  - Dynamically form chains based on ICAP X-Next-Services header
    (icap_service routing=on)

  - Support cross-transactional ICAP header exchange
    (adaptation_masterx_shared_names)


An adaptation service set contains similar, interchangeable services. No more
than one service is successfully applied. If one service is down or fails,
Squid can use another service. Think ""hot standby"" or ""spare"" ICAP servers. 

Sets may seem similar to the existing ""service bypass"" feature, but they allow
the failed adaptation to be retried and succeed if a replacement service is
available. The services in a set may be all optional or all essential,
depending on whether ignoring the entire set is acceptable. The mixture of
optional and essential services in a set is supported, but yields results that
may be difficult for a human to anticipate or interpret. Squid warns when it
detects such a mixture.

When performing adaptations with a set, failures at a service (optional or
essential, does not matter) are retried with a different service if possible.
If there are no more replacement services left to try, the failure is treated
depending on whether the last service tried was optional or essential: Squid
either tries to ignore the failure and proceed or terminates the master
transaction.


An adaptation chain is a list of different services applied one after another,
forming an adaptation pipeline. Services in a chain may be optional or
essential. When performing adaptations, failures at an optional service are
ignored as if the service did not exist in the chain.

Request satisfaction terminates the adaptation chain.


When forming a set or chain for a given transaction, optional down services
are ignored as if they did not exist.

ICAP and eCAP services can be mixed and matched in an adaptation set or chain.


Merged from 3p1-plus branch at r9513.


* Implementation notes

The notes below focus on _changes_. Adaptation terminology and current layers
are now being documented in src/adaptation/notes.dox

Service sets and chains are implemented as ServiceGroup class kids. They are
very similar in most code aspects. The primary external difference is that
ServiceSet can ""replace"" a service and ServiceChain can find the ""next""
service.  The internal search code is implemented in ServiceGroup parent and
is parametrized by the kids.

Before the adaptation starts, Squid calculates the adaptation ""plan"", which is
just an iterator into the ServiceGroup. The client- and server-side adaptation
initiators used to deal with Service pointers. They now deal with ServiceGroup
pointers. The only interesting difference is that a ServiceGroup does not have
a notion of being optional or essential. Thus, if adaptation start fails, we
do not know whether the failure can be bypassed. Fortunately, starting an
adaptation does not require anything that depends on the adaptation services,
so we now simply assert that the start succeeds.

If the entire adaptation fails, the callers are notified as before. They are
told whether they can ignore the failure as before. No changes there.

A new Adaptation::Iterator class has been added to execute the adaptation
plan. That class is responsible for iterating the services in a service group
until the plan is exhausted or cannot progress due to a final failure. 


Dynamically form adaptation chains based on the ICAP X-Next-Services header.

If an ICAP service with the routing=1 option in squid.conf returns an ICAP
X-Next-Services response header during a successful REQMOD or RESPMOD
transaction, Squid abandons the original adaptation plan and forms a new
adaptation chain consisting of services identified in the X-Next-Services
header value (using a comma-separated list of adaptation service names from
squid.conf).  The dynamically created chain is destroyed once the new plan is
completed or replaced.

This feature is useful when a custom adaptation service knows which other
services are applicable to the message being adapted.

Limit adaptation iterations to adaptation_service_iteration_limit to protect
Squid from infinite adaptation loops caused by ICAP services constantly
including themselves in the dynamic adaptation chain they request. When the
limit is exceeded, the master transaction fails. The default limit of 16
should be large enough to not require an explicit configuration in most
environments yet may be small enough to limit side-effects of loops.

TODO: Add metadata support to eCAP API and honor X-Next-Services there as
well. Currently, only ICAP services can form dynamic chains but the formed
chains may contain eCAP services.


Other improvements:

Polished adaptation service configuration in squid.conf. Old format with an
anonymous bypass option is deprecated but still supported. Quit with a fatal
message if an adaptation service is misconfigured (debugging level-0 messages
do not seem to work at that stage, but that is probably another, general bug).


Polished HttpRequest::adaptHistory() interface so that the code that knows the
history is needed can force history creation without complex
configuration-time preparations and state. Currently, all adaptation history
users but the logging-related ones know runtime whether the history must be
created (e.g., when a certain ICAP header is received).


Fixed ""canonical"" Request URL maintenance when ICAP clones requests.
TODO: The urlCanonical() must become HttpRequest::canonical(), hiding the
often out-of-sync canonical data member.


Fixed ICAP request parsing (for ICAP logging). We used to parse Request-Line
as if it were the first header. TODO: optimize by parsing only when needed.


Fixed AccessCheck case where a service group disappears during a nb ACL check.
Replaced ""done"" member with an existing AsyncJob mustStop mechanism. Removed
extra async call as unneeded because ACL callbacks are already async.",1718,data/crawl/squid/patch_778.diff
https://github.com/squid-cache/squid/commit/3ff6559699bc1852ae3a6f7be48824d13e2ebf90,12 Jul 2009,"Bug #2459 fix, access logging enhancements, ICAP logging and retries support:

  - Bug #2459 fix

  - Support logging of total DNS wait time to access.log
    (%dt)

  - Support logging response times of adaptation transactions to access.log
    (%adapt::sum_trs and %adapt::all_trs)

  - Enhanced access logging
    (<Hs, <sh, >sh, <pt, <tt, icap::tt, and icap::<last_h in squid.conf)
    
  - ICAP logging 
    (see icap_log and log_icap in squid.conf as well as
    http://wiki.squid-cache.org/Features/AdaptationLog).
    
  - ICAP retries based on the ICAP responses status code
    (see icap_retry_limit in squid.conf).

Merged from 3p1-plus branch at r9511.",2714,data/crawl/squid/patch_779.diff
https://github.com/squid-cache/squid/commit/e41db37b10eb9b0f41876e7287477a17e86d1250,12 Jul 2009,"Author: Markus Moeller <huaraz@moeller.plus.com>
Bug 2710: squid_kerb_auth non-terminated string",38,data/crawl/squid/patch_780.diff
https://github.com/squid-cache/squid/commit/fdbb3b19d56573065b7e392e27161ae77ce85aaa,11 Jul 2009,"Add url_rewrite helper section

 - Introduces --enable-url-rewrite-helpers configure option
   identical to other helper options. Selects which of the new helpers to build.

 - Adds a fake url_rewrite program in C++ binary and shell scripts formats
   each perform no re-write but can log all requests made.

TODO:
 * add other helpers for various purposes.
 * make these demo/debug helpers capable of concurrent requests",253,data/crawl/squid/patch_781.diff
https://github.com/squid-cache/squid/commit/233b0db14fc8ab4272167cfd0fe4e9dff9d81120,11 Jul 2009,"Additional info for stateful helper status page

 - split R and D states.
 - clarify meaning of S (pending! not completed) state
 - add time spent in reserved state",21,data/crawl/squid/patch_782.diff
https://github.com/squid-cache/squid/commit/b1fb334820e3a4e7be5887062fc5bf72ca2f1fcb,28 Jun 2009,"Delay pools 64-bit buckets and IPv6-polish

This patch adds some polish and minor unfinished business in IPv6 
support vs delay pools.

Also updates the bucket size to 64-bytes to allow for >4MB traffic caps. 

TODO: Bump up the refresh size for >4MB/sec flows and check that nothing
      gets broken by it.",118,data/crawl/squid/patch_783.diff
https://github.com/squid-cache/squid/commit/7015d4eb4c0127faad2180b93e996bad6d9935ff,28 Jun 2009,"Author: Francesco Chemolli <kinkie@squid-cache.org>
Bug 2092: Changed select loop call counter to 64-bit

... unsigned long int so that it won't wrap around so easily.",22,data/crawl/squid/patch_784.diff
https://github.com/squid-cache/squid/commit/6b8e8ace69052065c84e32531cf5b88838ca5733,23 Jun 2009,merge from trunk,5182,data/crawl/squid/patch_785.diff
https://github.com/squid-cache/squid/commit/b61a58df52fc37f31394bc81be426a576e0b75d2,22 Jun 2009,"Make gcc 4.4 happy with 3.1 libraries

 - Fixes libecap build fubar
 - Fixes libbase circular dependencies for ufsdump",28,data/crawl/squid/patch_786.diff
https://github.com/squid-cache/squid/commit/f381d699463a8428ce72038b028ad41185545de6,12 Jun 2009,"Bug 2395: FTP auth errors not displayed

Round 2 for this bug. Now we handle missing auth as an expected result
rather than a failure. FTP operations are now well tested and this patch
does not affect code shared with other components.

Side-effect is that browser authentication popups now appear when the
FTP server needs authentication. This has been a long missed event.

The root cause of the issue is not found so other subsequent errors in
FTP sub-protocol still silently lost due to the same issue.",192,data/crawl/squid/patch_787.diff
https://github.com/squid-cache/squid/commit/68924b6db6e4dfe2e74495543c075714803812aa,31 May 2009,"Author: Henrik Nordstrom <henrik@henriknordstrom.net>
Bug #2407: Spelling error in http_port tcpkeepalive option

One of the new parameters according to the docs is ""keepalive"". However, when
using this option you'll get a ""Bungled squid.conf in line ..."". That's because
when parsing the configuration Squid is looking for the keyword ""tcpkeepalive""
instead of ""keepalive"" as stated in the docs.

Selected to fix the docs instead of code as having it named keepalive is too
easily confused with HTTP keep-alive / persistent connections.


2009-05-25: Also mistakes on spelling of config dump.",6,data/crawl/squid/patch_788.diff
https://github.com/squid-cache/squid/commit/d376ccbf3b2dd2a6d90c5e7ea2f1dfdb3b9aee28,19 May 2009,"Shuffle dnsserver -s option into its own function call.

This is prep for bug 2147 closure.",154,data/crawl/squid/patch_789.diff
https://github.com/squid-cache/squid/commit/445d18a460422224933c2d3b964dce27270bb402,18 May 2009,"Move ASN handling for ACL into ACL area.

This removes one possble compile clash, and one empty file.",1279,data/crawl/squid/patch_790.diff
https://github.com/squid-cache/squid/commit/ff9970cc48d27a18cc5140eddfeb15e7348bd118,08 May 2009,"Author: Mark Nottingham <mnot@pobox.com>
Make PEER_TCP_MAGIC_COUNT configurable

Squid will consider a peer dead when it has ten connect failures; this is
hardcoded in as PEER_TCP_MAGIC_COUNT.

The attached patch makes it a per-peer configuration option, defaulting to
PEER_TCP_MAGIC_COUNT.",27,data/crawl/squid/patch_791.diff
https://github.com/squid-cache/squid/commit/4ca08219d6fc002e18a32b3eee4042577324dc0c,08 May 2009,"Author: Mark Nottingham <mnot@pobox.com>
Bug 2645: allow squid to ignore must-revalidate",38,data/crawl/squid/patch_792.diff
https://github.com/squid-cache/squid/commit/bdcd85c36c1373c6ba80618405bcfe36d1ae9601,27 Apr 2009,Handle several IO errors cleanly.,15,data/crawl/squid/patch_793.diff
https://github.com/squid-cache/squid/commit/277594848931fd7f19a61dfbd2c923ff06922311,27 Apr 2009,"Remove infinite loop in MSNT auth helper

On one starting error condition the helper enters a read loop     
without exit conditions. Made this exit when read was done
and shutdown helper as per behavior comment by the loop.

Also removes one useless goto.",10,data/crawl/squid/patch_794.diff
https://github.com/squid-cache/squid/commit/31be869c4c5d3c3ca53e73170d739a35cd6fd937,12 Apr 2009,"Bug 2571: Squid with IPv6 fails to start on kernel without IPv6

Adds comm_open_listener() wrapper to perform IPv6/IPv4 failover on sockets
intended for listening only. Uses the wrapper in all places I can be sure of.

Open a port specially bound for listening or sending through a specific port.
This is a wrapper providing IPv4/IPv6 failover around comm_openex().
Please use for all listening sockets and bind() outbound sockets.

It will open a socket bound for:
  - IPv4 if IPv6 is disabled or address is IPv4-native.
  - IPv6 if address is IPv6-native
  - IPv6 dual-stack mode if able to open [::]

When an open performs failover it update the given address to feedback
the new IPv4-only status of the socket. Further displays of the IP
(in debugs or cachemgr) will occur in Native IPv4 format.
A reconfigure is needed to reset the stored IP in most cases and attempt
a port re-open.",88,data/crawl/squid/patch_795.diff
https://github.com/squid-cache/squid/commit/6249367873059fd0bd2ac44a05e9eb306eb03f76,12 Apr 2009,"Detatch debugs() from many of its dependencies

 - makes cache.log independent of the other logging systems
 - adds debug_options rotate=N setting
 - moves debug-specific globals and types into Debug::

TODO:
  remove remaining dependancy on shutdown flag
  polish up namespace etc for libdebug",242,data/crawl/squid/patch_796.diff
https://github.com/squid-cache/squid/commit/af6a12ee06b934ccc12bdfdcef233481a7806a21,07 Apr 2009,"Author: Source maintenance
Source Format enforcement",1314,data/crawl/squid/patch_797.diff
https://github.com/squid-cache/squid/commit/29cb1a9a08f9443a8b8ec75994cb9e506fe21f27,04 Apr 2009,The debug mode option '-d' was not documented in LDAP helpers usage message,2,data/crawl/squid/patch_798.diff
https://github.com/squid-cache/squid/commit/2f0b84f7ed4d332dd31c10ebeae2b1f49fea5f3c,01 Apr 2009,"Purge last remnants of inet_ntoa

 - Now fully replaced by IPAddress::NtoA and inet_ntop()
 - No need for the third-party emulator and license either",148,data/crawl/squid/patch_799.diff
https://github.com/squid-cache/squid/commit/0a51587682d1b9ff2ad6a8fbb741d41ccb895d09,26 Mar 2009,Changed select loops counter from int to unsigned long int.,22,data/crawl/squid/patch_800.diff
https://github.com/squid-cache/squid/commit/2d51c9088d676bc2c47a4bc01152889d9162ab87,13 Mar 2009,"SourceLayout: acl/, take 1

Moved src/ACL* and a few related files into src/acl/.
Renamed ACL source files from ACLFoo.{cc,cci,h} to Foo.{cc,cci,h}.

Added acl/ libraries, reorganized auth/ libraries, and split ACLChecklist
class to avoid circular dependencies among libraries.

Many targets in src/Makefile.am depended on selected ACL ACL*cc and related
sources.  These targets depend on acl/* libraries now. As a part of this
cleanup, the number of ufsdump sources went from about 160 to about 20.

No functionality changes were intended. Source code changes were kept to the
minimum. All my build tests are successful. However, since I had to move a lot
of files, move some code pieces, and split ACLChecklist, it is possible that
some targets will no longer build in some environments and some authentication
code will break.

Please see individual commit messages for details.",2511,data/crawl/squid/patch_801.diff
https://github.com/squid-cache/squid/commit/6ada3123cae4373866496e90f498b39f2a509494,08 Mar 2009,"Moved authenticated() method from ACL[Filled]Checklist into auth/Acl.{cc,h} to
break the circular dependency between acl/libs and auth/libs.

Context: SourceLayout: acl/, take 1",90,data/crawl/squid/patch_802.diff
https://github.com/squid-cache/squid/commit/74544ee3ea97c41a4ed832bd4efe45f954d3fbcf,08 Mar 2009,"Removed some 140 SOURCEs of ufsdump, adding a few stubs. The program seems to
work on simple ufs cache files.

urlCanonical is currently an always-asserting stub. I am not sure what pulls
in urlCanonical. I know storeKeyPublicByRequest* require it, but I am not sure
which source requires storeKeyPublicByRequest. If the stub assertion fails on
some cache files, we will need to pull more sources or re-implement
urlCanonical.

The more sources are moved into libraries, the more difficult it may be to
write isolated, compact test cases or tools because test case stubs and
customizations may start to conflict with names defined in the libraries and
because pulling in a whole library might require defining more stubs. It is
not clear yet how real this concern is in general, but a lot of acl/
SourceLayout time was spent on making ufsdump build...

Context: SourceLayout: acl/, take 1",32,data/crawl/squid/patch_803.diff
https://github.com/squid-cache/squid/commit/351fe86d54733fd51afc5acf8d9a7fb3cdc1f028,08 Mar 2009,"Extracted transaction state storage and related checks from ACLChecklist into
ACLFilledChecklist. Context: SourceLayout: acl/, take 1

ACLChecklist contained many data members representing the state of the current
transaction (in a broad sense). These members and related methods depended
on complex types such as HttpRequest and ConnStateData. Any Squid code using
ACLChecklist (and there is a lot of that code) was, hence, dependent on these
types. These dependencies caused, among other things, huge SOURCES lists in
src/Makefile.am, often for trivial targets such as ufsdump and test cases.

ACLChecklist is an abstract class now (to make sure we do not accidentally
create it). ACLChecklist has only one kid: ACLFilledChecklist. The Filled()
global function can be used to cast ACLChecklist* to ACLFilledChecklist*.
Since all ACLChecklist objects have to be ACLFilledChecklist objects, the cast
is fast and safe. The cast allows us to avoid bloating ACLChecklist with
virtual methods that only make sense in ACLFilledChecklist context.

ACLFilledChecklist now contains state-specific members while ACLChecklist
contains basic check list logic. The code that organizes or passes through
ACL checks does not need to be exposed to ACLFilledChecklist and the data
types it depends on.

Furthermore, ACLFilledChecklist should not contain complicated checks either.
It should focus on maintaining the state. The checks should go into specific
ACLs. Otherwise, complex checks cause dependency cycles with higher-level
libraries that provide code for those checks and yet depend on having access
to ACLFilledChecklist to implement specific ACLs. Currently, only the
authenticated() method got moved to auth/Acl.{cc,h} to break the circular
dependency between acl/libs and auth/libs. More work in that direction will
probably be required as we move more src/* code into libraries.

ACLFilledChecklist constructor replaces aclChecklistCreate global. This
simplifies the initiating code of all fast ACL checks: the checks no longer
need to do manual state locking, duplicating aclChecklistCreate code.",759,data/crawl/squid/patch_804.diff
https://github.com/squid-cache/squid/commit/b2009d52cf41252e222d4bff85cfbf17323014e7,26 Feb 2009,"SourceLayout: adaptation/{icap,ecap}, take 1 with tweaks

Moved src/ICAP into src/adaptation/icap.
Moved src/eCAP into src/adaptation/ecap.

Renamed ICAP source files from ICAPFoo.{cc,h} to Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1435,data/crawl/squid/patch_805.diff
https://github.com/squid-cache/squid/commit/e08d498ff7b12acd94663bf43f8d86c15b460d5d,23 Feb 2009,Fix: appname is now APP_SHORTNAME,4,data/crawl/squid/patch_806.diff
https://github.com/squid-cache/squid/commit/205d7c3b23d6ee7d9f0993e465e4ab9c30a261fc,23 Feb 2009,"Author: Mark Nottingham <mnot@pobox.com>
Bug 2599: Idempotent start

As discussed on squid-dev, Squid shouldn't return a shell error when:
  - starting squid, if it's already running
  - stopping squid, if it isn't running
This is to make writing scripts that control squid easier.

Note that it should still notify the user, and should not affect other
operations (e.g., kill, rotate, parse).",11,data/crawl/squid/patch_807.diff
https://github.com/squid-cache/squid/commit/26cc52cbc9e1fd39c10c08f3d51a1017ed6e7686,20 Feb 2009,"Renamed ICAP source files from icap/ICAPFoo.{cc,h} to icap/Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1233,data/crawl/squid/patch_808.diff
https://github.com/squid-cache/squid/commit/8007180b22cef9ff8c0c12127b5de2f1dbbea82e,18 Feb 2009,"Author: Francesco Chemolli <kinkie@squid-cache.org>
String NG : basic SquidString updates pt 2

- finished the analysis of raw buffer exporting, divided among c-sting
and raw-buf access clients
- general sanitization
- reversal of some wrongly-renamed variables and comments
- implementation of SQUIDSTRINGPRINT and SQUIDSTRINGPH (placeholder) macros and
    psize() function for printf-style calls
- implementation of, and migration to, String::size_type and String::npos
- de-inlining of pos(), rpos(), find() and rfind() calls
- implementation and use of a proper substr() call",544,data/crawl/squid/patch_809.diff
https://github.com/squid-cache/squid/commit/abe35562054b0c0e9eae3255aa976f03a4dcf13a,18 Feb 2009,"SourceLayout: setup libcompat.la for portability primitives

This library forms an underlayer which intends to be seamless for the rest
of Squid.

For code to be eligible for inclusion at this lowest layer it must be
emulating or wrapping a piece of OS-provided API for use on other OS 
where it is not provided.

Shared code which is unique to Squid is not portability.

API mappings which are OS-specific are all defined for their particular
OS in the os/* files.

API mappings which are provided by multiple OS or support libraries
are mapped in compat/*

Emulators are acceptable, though the aim should be to inline or template
most of the code so only .h are really needed.",2656,data/crawl/squid/patch_810.diff
https://github.com/squid-cache/squid/commit/dd6e6148b8960f95c4dd4aa55de100179fc2933b,18 Feb 2009,"Fixed typo in DelayTaggedBucket::stats.
Added comments.
String.cci doesn't need to include squid.h, config.h is enough
In errorpage.cc there is no need to drop to char* land, we can work with String.",21,data/crawl/squid/patch_811.diff
https://github.com/squid-cache/squid/commit/ea9d149b304c1aee0be2db0e2c39e0f56723f504,18 Feb 2009,"Remove duplicate assert.h, and bad includes of compat/* headers.",97,data/crawl/squid/patch_812.diff
https://github.com/squid-cache/squid/commit/826a1fed8f0691b3e55764cfa31432640f963835,12 Feb 2009,"Migrated *printf's to SQUIDSTRINGPH and SQUIDSTRINGPRINT macros
de-inlined String::{find,rfind,pos,rpos}",195,data/crawl/squid/patch_813.diff
https://github.com/squid-cache/squid/commit/2c1fd83748fef54a01cf9c18078d65b38d9c7eba,12 Feb 2009,"Implemented String::npos to parametrize 'search not found' results
Converted some printf to macro-based.",25,data/crawl/squid/patch_814.diff
https://github.com/squid-cache/squid/commit/b41978659e2ba47813ce143d6141e553d1fdb431,12 Feb 2009,"unsafeBuf is no more.
Reverted shortening of size_type to unisgned int, due to issue with std::string::npos.",42,data/crawl/squid/patch_815.diff
https://github.com/squid-cache/squid/commit/bb7907027442f83ae89b12a93dc1a6239c6a837a,11 Feb 2009,"defined printf-helping macros,
reverted some unnecessary renamings
further unsafeBuf conversions.",96,data/crawl/squid/patch_816.diff
https://github.com/squid-cache/squid/commit/77b88b59da370dbe30f1f3770879646ad200dbde,11 Feb 2009,Cleanup malloc stats display,5,data/crawl/squid/patch_817.diff
https://github.com/squid-cache/squid/commit/a7a42b149d312840bed63e2c353a51837241aeeb,10 Feb 2009,Converted more unsafeBuf users.,85,data/crawl/squid/patch_818.diff
https://github.com/squid-cache/squid/commit/9b558d8af0aac1d453f395e5bd719780ad6954c4,09 Feb 2009,"Implemented String.psize() (for printf())
Changed String storage size from 'unsigned short int' to size_t
Implemented String.rfind()
Implemented String.substr() and related tests
Made String.set() private, it's ready to be removed unless there's any dissent
Converted ftp.cc to use rfind in place of rpos",154,data/crawl/squid/patch_819.diff
https://github.com/squid-cache/squid/commit/8d707f3daea7725e47dc16cdea86820b54a15f98,08 Feb 2009,"Author: Francesco Chemolli <kinkie@squid-cache.org>
Cleanups: Remove code handling K&R-style varargs.

It should be a safe enough bet that any C++ compiler can handle STDC-style varargs.
This patch removes all the (mostly spaghetti) code which used to handle K&R-style varargs calls.",289,data/crawl/squid/patch_820.diff
https://github.com/squid-cache/squid/commit/09564478e5b5b854e64d65264c692c477670c03d,07 Feb 2009,Trim squid_ from compat filenames,80,data/crawl/squid/patch_821.diff
https://github.com/squid-cache/squid/commit/4ef877d67aaff7156b5611db55b45cb7c57a0120,06 Feb 2009,"Author: Francesco Chemolli <kinkie@squid-cache.org>
String NG : fixes initial merge, take 2

Compared to the retired first attempt it:
 - fixes the issues Tsantilas Christos found out about
 - implements String::find
 - some more users analyzed and fixed.",654,data/crawl/squid/patch_822.diff
https://github.com/squid-cache/squid/commit/6c3b212b309afe1f2b3c3cd1724481b77d00f715,04 Feb 2009,Fixed more previously-uncaught build errors.,20,data/crawl/squid/patch_823.diff
https://github.com/squid-cache/squid/commit/d698d2a501c87fe1339cda08ce9db6f938ea95cd,03 Feb 2009,Corret squidclient HTTP/0.9 support,149,data/crawl/squid/patch_824.diff
https://github.com/squid-cache/squid/commit/b4f2886c6d7c0a1a0854ea9e48158d718f655fba,03 Feb 2009,"Converted more String.unsafeBuf users
String.operator[] now returns a copy of a char rather than a reference.
Implemented StringNg-alike String.find() method. Eventual aim is to get rid of users of String.pos()",84,data/crawl/squid/patch_825.diff
https://github.com/squid-cache/squid/commit/d53b3f6da7a8c7a60862b7ee1645e0bdd719caba,31 Jan 2009,Verified and converted more String users.,62,data/crawl/squid/patch_826.diff
https://github.com/squid-cache/squid/commit/9c1758979642a98efb26932161362c6a957eaa34,31 Jan 2009,Verified and converted more String users.,16,data/crawl/squid/patch_827.diff
https://github.com/squid-cache/squid/commit/5b4117d8c4e8fa922453364ba410b1876452c9ba,30 Jan 2009,Verified and converted more String users.,55,data/crawl/squid/patch_828.diff
https://github.com/squid-cache/squid/commit/4232c626c22f98da411b74532c0b3c276ebdaab0,30 Jan 2009,Verified and converted more String users.,24,data/crawl/squid/patch_829.diff
https://github.com/squid-cache/squid/commit/c1945e7d46f4359b528702ca231ba16314f523d8,29 Jan 2009,Verified and converted String users.,16,data/crawl/squid/patch_830.diff
https://github.com/squid-cache/squid/commit/cb3b44fc50802a81dd9e184754c335235c4490fa,29 Jan 2009,Converted the String implementation itself,32,data/crawl/squid/patch_831.diff
https://github.com/squid-cache/squid/commit/99524de767643cfa219d1fdcf9981086effac20c,29 Jan 2009,"Refactoring: renamed String::buf() to unsafeBuf().
Introduced aliases for it named String::rawBuf() and String::termedBuf().
Introduced String::defined() and String::undefined().",561,data/crawl/squid/patch_832.diff
https://github.com/squid-cache/squid/commit/581aba778c3b49f3a45538496c75e6e7fd5501e0,18 Jan 2009,Remove FTP listing experiment. Will continue in other branch,373,data/crawl/squid/patch_833.diff
https://github.com/squid-cache/squid/commit/f04e1182fee8cd3c70ae673e629b8e7cd8297e33,15 Jan 2009,Initial import of libcompat code,1958,data/crawl/squid/patch_834.diff
https://github.com/squid-cache/squid/commit/bebf08ff5a2b02fb334ec7b845b0aeafbdd851e8,13 Jan 2009,"Bug 2556: HTCP fails without icp_port

Removes requirement for ICP port to be open for peer UDP queries to take
place.

TODO: Some work still needs to be done to separate the timeout from
icp_timeout and break ICP specific query logics out into icp code files.
But that is just cleanup for later.",80,data/crawl/squid/patch_835.diff
https://github.com/squid-cache/squid/commit/37d4da0c0793751c68f1b548ba2842ab59e10128,13 Jan 2009,"SourceLayout: migrate IPAddress into lipip.la

This also makes some small changes to other API inside libip to allow
libbip.la to be built first as a POD library before anything src/ gets built.

Anything added to it from this point on MUST NOT require linkage outside
of libip.la or the planned libcompat.",1431,data/crawl/squid/patch_836.diff
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/patch_837.diff
https://github.com/squid-cache/squid/commit/060933894e902a9ce1c7f171c7e125c147d05316,08 Jan 2009,"Pconn not being used when they should.

A slight misalignment between the keys generated for push and pop of
connections to the waiting pool caused new connections never to match
any of the existing connections.

This patch makes several alterations to achieve a fix:
 - reduces the FwdState push logics down into a simple selection in
   pconnPush function which previously was a dumb wrapper.
 - adds a dump of current hash keys to the cacheManager pconn report
 - adds uch better debugging to the pconn process at level 48,3 and 48,6
 - adds some additional documentation of code to the related call tree

  Pconn API after this patch :

The Pconn KEY takes several parameters (host, port, domain, client-ip).

For HTTP requests this is normally generated from the request data of
same name with domain being optional since it may be ientical to host.

However for peer-sourced requests this alters slightly and the host:port
fields become the peer NAME and HTTP-PORT.

This means the pconn key in abstract becomes a key to the TCP remote-end of
the link with an optional anchor on the domain being requested.",98,data/crawl/squid/patch_838.diff
https://github.com/squid-cache/squid/commit/565b233e497f3da2603188385ac416d4dad9ea30,07 Jan 2009,Convert many IPAddress to IpAddress,454,data/crawl/squid/patch_839.diff
https://github.com/squid-cache/squid/commit/eca70f3b35a4c7b62467b2d93aa73dca72076271,07 Jan 2009,merge from trunk,9,data/crawl/squid/patch_840.diff
https://github.com/squid-cache/squid/commit/c63e5f01514cbc26e4cf0bea75d2134e8c7916d2,06 Jan 2009,"Untangle CacheManager reports from log_fqdn

The fqdnFromAddr() call depends on log_fqdn to generate the FQDN. But
CacheManager needs to always display it whenever available. This removes
the call indirection, dependency and makes Name: field only display when
a name is available.

see Bug 2557 for more details.",6,data/crawl/squid/patch_841.diff
https://github.com/squid-cache/squid/commit/4906f15b0dc0feec62bd68495c2edd9d65078863,06 Jan 2009,SourceLayout: move IPInterception into libip.la,106,data/crawl/squid/patch_842.diff
https://github.com/squid-cache/squid/commit/85944c1cacf552bb755ac0a0cae4e7eaad0207c0,06 Jan 2009,Shuffle IPInterception into ip/,106,data/crawl/squid/patch_843.diff
https://github.com/squid-cache/squid/commit/ba0beb01c625b8acb4087a7ca66bdcb058f9ee1b,24 Dec 2008,"Polish ZPH configuration interface

This completes the ZPH patch merge for Squid 3.1. It makes significant
changes to the squid.conf options previously used.

ZPH controls are now formally called ""qos_flows"" with a set of options
to set individual output flow TOS based on the flow source. see squid.conf
documentation for details.

Since this is new IP-layer code it also places the new QoS code in a
directory src/ip/ and library libip.la inline with the planned source
layout model.",359,data/crawl/squid/patch_844.diff
https://github.com/squid-cache/squid/commit/9e008dda1b90a19eaa98dacc64f69dda412db8dd,12 Dec 2008,SourceFormat Update,2507,data/crawl/squid/patch_845.diff
https://github.com/squid-cache/squid/commit/638b9bab165ac336ae2d6fc64f498f0f5d1b1dbb,02 Dec 2008,"Various link errors in testDiskIO

TODO:
   Fix undefined reference to CommIO members
   discover whether any of the calls now stub'ed need to be used
   may need to pull CommIO out of comm.cc",75,data/crawl/squid/patch_846.diff
https://github.com/squid-cache/squid/commit/b5bd96cebc105b0fbcabfe0b5f40cec27665e2c4,01 Dec 2008,"Correct LINUX_CAPABILITY actions on non-Linux

non-Linux should not set transparency OFF, just because they dont have
Linux syscap.

Also kill bad use of goto. Should have been an if-else sequence.",45,data/crawl/squid/patch_847.diff
https://github.com/squid-cache/squid/commit/c044f7a980558b4012aa77a31a6dbc34ad76735b,28 Nov 2008,"Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2527: ICAP compile error with g++ 4.3.2",2,data/crawl/squid/patch_848.diff
https://github.com/squid-cache/squid/commit/488b27c52bc2279046ed0cd6e17da2c8f5d87fb7,25 Nov 2008,"Fix cache_peer forceddomainname when request has a Host header

cache_peer forceddomainname=xxx only worked when the received request
did not have a Host header.",5,data/crawl/squid/patch_849.diff
https://github.com/squid-cache/squid/commit/575cb92731154882b346410366e1ad49c16d3b3e,19 Nov 2008,Import initial code,314,data/crawl/squid/patch_850.diff
https://github.com/squid-cache/squid/commit/1ef0b9cefc7c34fdaec763a913e92ce1fa3f5218,15 Nov 2008,Fix IPAddress not setting sin_len on BSD,83,data/crawl/squid/patch_851.diff
https://github.com/squid-cache/squid/commit/12f45551aa4cd1a157722d040b9d5f9b38f18116,08 Nov 2008,"IPAddress tests and corrections.

Fixes two cases where GetSockAddr did not set sin*_len properly

Fixes configure tests for sin*_len

TODO: still to find and fix where we are getting on FreeBSD:
 SYS SS_LEN=16
 SQD SS_LEN=0    (should be 16)",68,data/crawl/squid/patch_852.diff
https://github.com/squid-cache/squid/commit/144bfdf954b4d3bc7b362bf0e8d0aa5af6276bc9,07 Nov 2008,Updates auto-save,29,data/crawl/squid/patch_853.diff
https://github.com/squid-cache/squid/commit/47c9d60ea0f964792caa8356a4a37c1f3523958b,06 Nov 2008,"Bug 843: translation should cover FTP Directory Listings as well

Converts the FTP directory listing to using error page templates.
Which are translated, HTML strict standards compliant, and CSS styled.",300,data/crawl/squid/patch_854.diff
https://github.com/squid-cache/squid/commit/ee1863f493b30a4848fc0b562078a7d8859bf1a7,21 Oct 2008,"Restore active part of error page stylesheets

This now uses an adjusted form of errorTryLoadText() which accepts
an absoute path page name and NULL dir instead of errorLoadText()
which is intended only for locating a specific page amongst the error
directory content.",107,data/crawl/squid/patch_855.diff
https://github.com/squid-cache/squid/commit/c76ec3b7646eec9121a8633ff80cd3a7c3f3f105,17 Oct 2008,"Author: Francesco Chemolli <kinkie@squid-cache.org>
Bug 2489: Testsuite doesn't obey authentication scheme ./configure parameters

I've added a couple of AC_DEFINEs and a couple of #ifdefs to make the
offending tests conditional on the actually-built builtin auth-methods.",48,data/crawl/squid/patch_856.diff
https://github.com/squid-cache/squid/commit/0ea5c60cf6445b3163cc541bb2b45ab8b616c4fb,16 Oct 2008,Prevent linking and performing checks for not-configured auth methods (bug 2489),43,data/crawl/squid/patch_857.diff
https://github.com/squid-cache/squid/commit/8e62bf658287f43d1ec54d2300ae15c215ea1780,16 Oct 2008,SourceLayout: ICMP NetDB libraries,434,data/crawl/squid/patch_858.diff
https://github.com/squid-cache/squid/commit/70d1b64c05b0453cbd5541db8095a12bf390b613,13 Oct 2008,Remove several unnecessary uses of putStrf and a compile error,8,data/crawl/squid/patch_859.diff
https://github.com/squid-cache/squid/commit/9b5c4a9a0762dc4410413d64bfc7c7073092086d,11 Oct 2008,"General ICMP dependant cleanups.

Moved netdb*() function definitions into icmp/net_db.h

Various compile and link errors after ICMP and Net_db move.

Some large blocks of potentially expensive code which are no-op without
ICMP and NetDB capabilities are now built only when useful.",90,data/crawl/squid/patch_860.diff
https://github.com/squid-cache/squid/commit/26ac04309f51d4be5c9fa41ea3da88688024d9db,10 Oct 2008,"SourceFormat: Main reformat push

This revision formats all .h .c .cc .cci files according to the
code format chosen for Squid-3 releases in future.

Due to outstanding patches which are not easily adapted a few files
have been omitted from this particular format push:

  src/comm.cc
  src/client_side.cc
  src/client_side.h
  src/errorpage.cc
  src/fde.h
  src/ftp.cc
  src/http.cc
  src/HttpRequest.cc
  src/pconn.cc
  src/pconn.h
  src/ICAP/ICAPModXact.cc
  src/ICAP/ICAPModXact.h
  src/ICAP/ICAPOptions.cc
  src/ICAP/ICAPServiceRep.cc
  src/ICAP/ICAPServiceRep.h
  src/ICAP/ICAPXaction.cc
  src/ICAP/ICAPXaction.h
  src/Server.cc
  src/Server.h
  src/structs.h",48406,data/crawl/squid/patch_861.diff
https://github.com/squid-cache/squid/commit/5c7a6e90a7d87963e81a67ee8143eeb998ade3a9,06 Oct 2008,"Author: Markus Moeller <markus_moeller@compuserve.com>
Update squid_kerb_auth helper to 1.0.3 release

Also add missing config.test file (empty) so
 --enable-negotiate-auth-helpers=X will build it with Squid.


  squid_kerb_auth 1.0.3 Official ReadMe file:

--------------------------------------------------------------------------------
readme.txt is the squid_kerb_auth read-me file.

Author: Markus Moeller (markus_moeller at compuserve.com)

Copyright (C) 2007 Markus Moeller. All rights reserved.
--------------------------------------------------------------------------------

squid_kerb_auth Read Me

Markus Moeller
May 12, 2007

1 Introduction

squid_kerb_auth is a reference implementation that supports authentication via 
the Negotiate RFC 4559 for proxies. It decodes RFC 2478 SPNEGO GSS-API tokens 
from IE7 either through helper functions or via SPNEGO supporting Kerberos libraries
and RFC 1964 Kerberos tokens from Firefox on Linux. Currently, squid_kerb_auth
 supports Squid 2.6 on Linux. 

squid_auth_kerb requires either MIT or Heimdal Kerberos libraries and header files.

2 Building and Installation

Run ./configure

for help use ./configure --help

Copy the helper squid_kerb_auth to an apropriate directory.

3 Configuration

a) Configure IE or Firefox to point to the squid proxy by using the fqdn. IE and Firefox will use the
fqdn to query for a HTTP/fqdn Kerberos service principal. 

b) Create a keytab which contains the HTTP/fqdn Kerberos service principal and place it into a directory
where the squid run user can read the keytab. 

c) Add the following line to squid.conf

auth_param negotiate program /usr/sbin/squid_kerb_auth 
auth_param negotiate children 10
auth_param negotiate keep_alive on

d) Modify squid startup file

Add the following lines to the squid startup script to point squid to a keytab file which
contains the HTTP/fqdn service principal for the default Kerberos domain. The fqdn must be 
the proxy name set in IE or firefox. You can not use an IP address.

KRB5_KTNAME=/etc/squid/HTTP.keytab
export KRB5_KTNAME

If you use a different Kerberos domain than the machine itself is in you can point squid to 
the seperate Kerberos config file by setting the following environmnet variable in the startup 
script.

KRB5_CONFIG=/etc/krb-squid5.conf
export KRB5_CONFIG

4 Miscellaneous

If squid_kerb_auth doesn't determine for some reason the right service principal you can provide 
it with -s HTTP/fqdn.

If you serve multiple Kerberos realms add a HTTP/fqdn@REALM service principal per realm to the 
HTTP.keytab file and use the -s GSS_C_NO_NAME option with squid_kerb_auth.",1834,data/crawl/squid/patch_862.diff
https://github.com/squid-cache/squid/commit/d67acb4e19a325dae3694c1944ba2239df0c49ba,04 Oct 2008,"Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Port Connection Pinning from 2.6",555,data/crawl/squid/patch_863.diff
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/patch_864.diff
https://github.com/squid-cache/squid/commit/223901927d51abc6759356742b74a1c623818d14,30 Sep 2008,"eCAP support, phase 2: Implemented libecap interfaces, added eCAP
squid.conf options. Link with libecap when eCAP support is enabled.

eCAP code needs polishing and enhancement but appears to work for a few
targeted cases. I am committing this now so that users working on eCAP
modules can test and provide more specific feedback.

These adaptation-specific changes should not have significant effect on
core code.

The libecap library is available at http://www.e-cap.org/",1758,data/crawl/squid/patch_865.diff
https://github.com/squid-cache/squid/commit/1788b28c6ffd8269a26e356295f0bc213a876ff4,30 Sep 2008,Synced after adding HttpMsg::clone().,14,data/crawl/squid/patch_866.diff
https://github.com/squid-cache/squid/commit/2dd62844d17bbab0d21dcdd9081082205aaae538,30 Sep 2008,"Revert active part of error page stylesheets.

Strange Install blocker bug found. No solution yet.

(19:04:54) rousskov: 2008/09/30 00:05:20| errorpage.cc(290) errorTryLoadText:
 '/usr/local/squid3-ecap/share/errors/templates//usr/local/squid3-ecap/etc/errorpage.css':
 (2) No such file or directory
(19:07:52) rousskov: $ make install > /tmp/tm
(19:07:52) rousskov: /bin/bash: -c: line 17: syntax error near unexpected token `then'
(19:07:52) rousskov: /bin/bash: -c: line 17: `@if test -f /usr/local/squid3-ecap/etc/errorpage.css ; then \'",100,data/crawl/squid/patch_867.diff
https://github.com/squid-cache/squid/commit/8bfcfe3a3d51ed1d41d94f64c5f2ddefa6ae69ad,29 Sep 2008,"Made ""make check"" happy.",18,data/crawl/squid/patch_868.diff
https://github.com/squid-cache/squid/commit/b050cccfa5b84603d1e56b7af745f09422c35a98,29 Sep 2008,"CSS control over translated error pages

Adds %l replacement tag to include CSS file data into an error page.

Adds error_stylesheet option to name a file as the CSS content to insert
into each error pages displayed. (default /etc/squid/errorpage.css)

Adds CSS hooks into the templates.

Adds errorpage.css to squid config directory with current CSS settings
pulled from old templates and demo entries for new hooks.

The combined effect of these is allows company sites to stylize the pages
produced to some extent limited only by the CSS capabilities. Without
worrying about translation texts themselves.

Only works for dynamically translated pages based on updated templates.
Default CSS file may need some cleaning.",697,data/crawl/squid/patch_869.diff
https://github.com/squid-cache/squid/commit/ea76d91e0b7d12414eb047f145bbf437f4c34d4d,29 Sep 2008,"Polished code by introducing two explicit and mostly independent states
(proxying virgin body and proxying adapted body) as well as a flag to
check for virgin body content access after the pipe was invalidated.",240,data/crawl/squid/patch_870.diff
https://github.com/squid-cache/squid/commit/d15d0adafdf66144073bb390283356e15c585b5d,27 Sep 2008,"Summary: Synced with libecap, adopted pass-all-changes-through transactions
model.  Polished. Needs more work.",605,data/crawl/squid/patch_871.diff
https://github.com/squid-cache/squid/commit/4d0854d44f00362bffe01e7e6d79aae7a9d24a3b,27 Sep 2008,"Use message representatives to store virgin and adapted messages.

Migrating to a model where all message changes are done via transaction,
not the message itself. A message cannot handle many changes on its own
because it is not a job, and placing some changes in MessageRep and some
in XactionRep results in messy code.

Polished body handling. Needs more work.

Added satus reporting. Needs more work.",301,data/crawl/squid/patch_872.diff
https://github.com/squid-cache/squid/commit/2170db3ef67ba8810c35fbfa3affa845deb88b3f,24 Sep 2008,Show request and reply headers new config via cachemgr dump,16,data/crawl/squid/patch_873.diff
https://github.com/squid-cache/squid/commit/5a5b4ce11c08d096dc951f052275147f36b14fed,24 Sep 2008,Comment on FTP recovery from data.fd loss,9,data/crawl/squid/patch_874.diff
https://github.com/squid-cache/squid/commit/ae5b4e1af356f125ee98d5d67da28995a7b38a71,23 Sep 2008,"Added Comm close handler for the data channel of FtpStateData
transaction in preparation for officially dropping connect callbacks for
closing descriptors.

The data channel can be opened and closed a few times and the descriptor
must be kept in sync with the close handler. I factored out the
open/closing code into a simple FtpChannel class. That class is now used
for both FTP control and data channels.

The changes resolve one XXX discussion regarding FTP not having a close
handler for the data channel. On the other hand, adding a second close
handler attached to the same transaction is not a trivial change as the
side-effects of Squid cleanup code are often illusive.

For example, I suspect that FTP cleanup code does not close or even
check the control channel. I added a DBG_IMPORTANT statement to test
whether the control channel remains open. Or should that be an assert()?

I think that only one out of the two callbacks can be dialed because the
close handler executed first will invalidate the transaction object.",167,data/crawl/squid/patch_875.diff
https://github.com/squid-cache/squid/commit/3afd7aaeb669fa304901b542ad0ee9a1e8e24fe2,23 Sep 2008,Source Format: tools,567,data/crawl/squid/patch_876.diff
https://github.com/squid-cache/squid/commit/3ff7facaa3dc851e09c963b354940370fe00b818,23 Sep 2008,"Cleanups: WCCP config

Adds text labels for WCCPv2 methods.
Admin can now use 'gre', 'l1', 'hash', 'mask' in appropriate places
instead of magic numbers.

Magic numbers still supported for backward compatability.",159,data/crawl/squid/patch_877.diff
https://github.com/squid-cache/squid/commit/6e92b048e29b6576c1bc0be9bf18140aef5a3f95,22 Sep 2008,"Call failed(ERR_FTP_FAILURE, 0) when data channel is closed unexpectidly,
to force control channel closure. Apparently, FtpStateData does not close
that channel when cleaning up.

Added and polished comments.",13,data/crawl/squid/patch_878.diff
https://github.com/squid-cache/squid/commit/b2b07b928b4caaadecc4059f99e33880e0089e3c,21 Sep 2008,"Content-Language headers

Adds ""Content-Language"" header properly if the error page language was
negotiated. Hard codes the default templates as 'en', and the squid.conf
value for soft default language of error_default_language was used.

Sets ""Vary: Accept-Language"" if negotiation is configured to take place.",46,data/crawl/squid/patch_879.diff
https://github.com/squid-cache/squid/commit/0ae3294ae95165b4e489b19e9dd9d2e7a3e477a8,15 Sep 2008,Compile errors,12,data/crawl/squid/patch_880.diff
https://github.com/squid-cache/squid/commit/5bf33a09d279fd519bf356975be6e55f955c3e2d,13 Sep 2008,"Set Content-Language and Vary headers on negotiated errors

It's also polite to send the proper Content-Language.
Error page language-negotiation requires us to send the Vary header.",36,data/crawl/squid/patch_881.diff
https://github.com/squid-cache/squid/commit/ccb2461629f5ed95f6cf1e24893d3a3068fcd728,13 Sep 2008,Updates auto-save,18,data/crawl/squid/patch_882.diff
https://github.com/squid-cache/squid/commit/63aacec1e26e07afb814a4b54352ab5075fac13e,12 Sep 2008,"Aggregate commit after two --local commits:
 - Cleaned up Comm: comm_close, comm_read_cancel, half-closed monitors, leaks.
 - Cleaned up reconfiguration sequence.
Please see individual commit messages for details (bzr permitting).",372,data/crawl/squid/patch_883.diff
https://github.com/squid-cache/squid/commit/02fc4b6f0741fc8be54584f0755bf7f155dc2301,12 Sep 2008,"Cleaned up Comm: comm_close, comm_read_cancel, half-closed monitors, leaks.

1) Comm_close now implements the following API:

  Comm_close does not close the descriptor but initiates the following
  closing sequence:

      1) The descriptor is placed in a ""closing"" state.
      2) The registered read, write, and accept callbacks (if any) are
         scheduled (in an unspecified order).
      3) The close callbacks are scheduled (in an unspecified order).
      4) A call to the internal descriptor closing handler is
         scheduled.

  Details of the above steps are being documented separately and will
  become a part of Comm API documentation.

  Since all notifications are asynchronous, it is possible for a read or
  write notification that was scheduled before comm_close was called to
  arrive at its destination after comm_close was called.  Such
  notification will arrive with COMM_ERR_CLOSING flag even though that
  flag was not set at the time of the I/O (and the I/O may have been
  successful). CommIoCbParams::syncWithComm is used for this.  The
  credit for this trick goes to Christos Tsantilas.

  Removed fde.flags.closing_ flag as unused.


2) Removed most of the half-closed monitoring code. Old code scheduled
   monitoring reads every main loop iteration, I think. It is possible
   that the assumption was that the handler will be activated and
   cleared once per iteration so that the new read can be scheduled. The
   design could result in conflicts between two monitoring reads and
   possibly between a monitoring read and an active read. There were
   also problems with handling closing descriptors.

   I have removed the loop, AbortChecker, and the associated splay
   tree). When user code marks the descriptor as half-closed, Comm now
   simply schedules a monitoring read callback.  If the user needs to
   check whether the descriptor was marked, Comm checks whether the
   callback is present.  If a user schedules a read when there is
   already a monitoring callback, the monitoring callback is removed.

   Renamed user-facing monitoring functions but left compatibility
   wrappers in place to minimize user code changes, for now.

   It is possible that the whole half-closed monitoring code will be
   eventually deleted. The above changes are meant to preserve the
   intended functionality (but without coredumps) while the decision is
   being made.


3) Removed _SQUID_LINUX_-only code that would avoid addrinfo destruction
   on connect ""errors"".  Squid seems to be working fine without this
   code. With this code, we leak memory on many connect requests because
   of EINPROGRESS. More work is probably needed to reproduce and fix the
   true cause of the memory corruption observed earlier. Removing the
   workaround will allow us to get more bug reports if the problem is
   still there.",341,data/crawl/squid/patch_884.diff
https://github.com/squid-cache/squid/commit/49e510eab9c639f6e97e24ca17555ab714a5bfd7,12 Sep 2008,"Cleaned up ConnStateData's closing and destruction.

1) Despite its name and the ""if (open) close"" use in ConnStateData
destructor, ConnStateData::close() was not closing anything. It was
called from the Comm close handler and from the destructor and would
attempt to immediately delete the ConnStateData object. Protecting code
in deleteThis() may have prevented the actual [double] delete from
happening, but it is difficult to say exactly what was going on when the
close() method was being called from the destructor.

I converted ConnStateData::close to swanSong, which is the standard
AsyncJob cleanup method. As before, the method does not close anything
(which may still be wrong). The swanSong method is never called directly
by the user code. It is called by lower layers just before the job is
destroyed. The updated close handler initiates job destruction by
calling deleteThis().

We may need to add Comm closing code to swanSong. For now, the updated
ConnStateData destructor will warn if ConnStateData forgot to close the
connection. The destructor will also warn if swanSong was not called,
which would mean that the job object is being deleted incorrectly.


2) Polished ClientSocketContext::writeComplete to distinguish
STREAM_UNPLANNED_COMPLETE from STREAM_FAILED closing state. This helps
when looking at stack traces.


3) Added an XXX comment about duplicated code.


4) Documented ClientSocketContext::initiateClose purpose and context.",29,data/crawl/squid/patch_885.diff
https://github.com/squid-cache/squid/commit/451c478622c1a61110811c3043eceabe1bd52aaf,12 Sep 2008,reply and assignment methods are not actually linked,87,data/crawl/squid/patch_886.diff
https://github.com/squid-cache/squid/commit/82ec8dfcc2a5221a91598446aad95a4c412fc3c0,11 Sep 2008,"Cleaned up Comm: comm_close, comm_read_cancel, half-closed monitors,
leaks.

1) Comm_close now implements the following API:

  Comm_close does not close the descriptor but initiates the following
  closing sequence:

      1) The descriptor is placed in a ""closing"" state.
      2) The registered read, write, and accept callbacks (if any) are
         scheduled (in an unspecified order).
      3) The close callbacks are scheduled (in an unspecified order).
      4) A call to the internal descriptor closing handler is
         scheduled.

  Details of the above steps are being documented separately and will
  become a part of Comm API documentation.

  Since all notifications are asynchronous, it is possible for a read or
  write notification that was scheduled before comm_close was called to
  arrive at its destination after comm_close was called.  Such
  notification will arrive with COMM_ERR_CLOSING flag even though that
  flag was not set at the time of the I/O (and the I/O may have been
  successful). CommIoCbParams::syncWithComm is used for this.  The
  credit for this trick goes to Christos Tsantilas.

  Removed fde.flags.closing_ flag as unused.


2) Removed most of the half-closed monitoring code. Old code scheduled
   monitoring reads every main loop iteration, I think. It is possible
   that the assumption was that the handler will be activated and
   cleared once per iteration so that the new read can be scheduled. The
   design could result in conflicts between two monitoring reads and
   possibly between a monitoring read and an active read. There were
   also problems with handling closing descriptors.

   I have removed the loop, AbortChecker, and the associated splay
   tree). When user code marks the descriptor as half-closed, Comm now
   simply schedules a monitoring read callback.  If the user needs to
   check whether the descriptor was marked, Comm checks whether the
   callback is present.  If a user schedules a read when there is
   already a monitoring callback, the monitoring callback is removed.

   Renamed user-facing monitoring functions but left compatibility
   wrappers in place to minimize user code changes, for now.

   It is possible that the whole half-closed monitoring code will be
   eventually deleted. The above changes are meant to preserve the
   intended functionality (but without coredumps) while the decision is
   being made.

3) Removed _SQUID_LINUX_-only code that would avoid addrinfo destruction
   on connect ""errors"".  Squid seems to be working fine without this
   code. With this code, we leak memory on many connect requests because
   of EINPROGRESS. More work is probably needed to reproduce and fix the
   true cause of the memory corruption observed earlier. Removing the
   workaround will allow us to get more bug reports if the problem is
   still there.",341,data/crawl/squid/patch_887.diff
https://github.com/squid-cache/squid/commit/6e1d409c65c63e90343e9156a43dbbc87ff96e59,11 Sep 2008,"Cleaned up ConnStateData's closing and destruction.

1) Despite its name and the ""if (open) close"" use in ConnStateData destructor,
ConnStateData::close() was not closing anything. It was called from the Comm
close handler and from the destructor and would attempt to immediately delete
the ConnStateData object. Protecting code in deleteThis() may have prevented
the actual [double] delete from happening, but it is difficult to say exactly
what was going on when close() was being called from the destructor.

I converted ConnStateData::close to swanSong, which is the standard AsyncJob
cleanup method. As before, the method does not close anything (which may be
wrong). The swanSong method is never called directly by the user code. It is
called by lower layers just before the job is destroyed.

We may need to add Comm closing code to swanSong. For now, the updated
ConnStateData destructor will warn if ConnStateData forgot to close
the connection. The destructor will also warn if swanSong was not called,
which would mean that the job object is being deleted incorrectly.


2) Polished ClientSocketContext::writeComplete to distinguish
STREAM_UNPLANNED_COMPLETE from STREAM_FAILED closing state. This helps when
looking at stack traces.


3) Added an XXX comment about duplicated code.


4) Documented ClientSocketContext::initiateClose purpose and context.",29,data/crawl/squid/patch_888.diff
https://github.com/squid-cache/squid/commit/21ec1b948d283f042950d45a6b4ce92ee0bb9a80,10 Sep 2008,WCCPv2 assignment method overlaps,55,data/crawl/squid/patch_889.diff
https://github.com/squid-cache/squid/commit/e313ab0aa78bcb1330577f050cd0f06ba2fdf7c6,10 Sep 2008,Friendly WCCPv2 method config,84,data/crawl/squid/patch_890.diff
https://github.com/squid-cache/squid/commit/4f4fa8157d4837aada53582861fa9efff6491d8a,01 Sep 2008,Checkpoint HTCP merge.,360,data/crawl/squid/patch_891.diff
https://github.com/squid-cache/squid/commit/e7421c003b7e523fd773d6d8e2264eb2c405df58,24 Aug 2008,"Removed code handling K&R-style varargs.
It shouldn't be needed in c++-land..",265,data/crawl/squid/patch_892.diff
https://github.com/squid-cache/squid/commit/2395c209ffef52204c44a4759bd51fb04b731167,10 Aug 2008,Updates auto-save,488,data/crawl/squid/patch_893.diff
https://github.com/squid-cache/squid/commit/8eb28163c0f4a842e4ad80d5c3907d17e3dcbf64,09 Aug 2008,"Bug 2379: obsolete dns_testnames option

Removes the dns_testnames squid.conf option and all related code.

Obsoletes -D command line option which existed only for the purpose of
turning dns_testnames off. Scheduled for absolute removal in Squid
3.2. But should be assumed as non-existing from 3.1 onwards.",57,data/crawl/squid/patch_894.diff
https://github.com/squid-cache/squid/commit/805854e2e384843adf316d94055011d90e8583ce,31 Jul 2008,"Bug #2427: squid_ldap_group -h reports the old % codes for -f

The help output still showed the old obsolete %v/%a codes in the -f description
Updates to %u for user and %g for group some many years ago.",2,data/crawl/squid/patch_895.diff
https://github.com/squid-cache/squid/commit/c70281f8bdba2a5f525ddea764667975bbd79eb3,22 Jul 2008,"Cleanups: shuffle ErrorState functions into methods.

No other changes than namespace moves.",228,data/crawl/squid/patch_896.diff
https://github.com/squid-cache/squid/commit/65a29f29c119f2e4f7f3b06334791a2b64c60197,18 Jul 2008,"Author: Eugene Gladchenko <eugene@donpac.ru>
Bug #2418: mgr:active_requests always returns ""delay_pool 0""

The delay pool indication in mgr:active_requests had not been updated
when delay pools was refactored some years ago..",2,data/crawl/squid/patch_897.diff
https://github.com/squid-cache/squid/commit/b707cdebbdb9898a3824686a7b6a007497061774,14 Jul 2008,"Fixed ""make check"".",53,data/crawl/squid/patch_898.diff
https://github.com/squid-cache/squid/commit/4a485f7104182aa3290f670f213feb6d7934b669,14 Jul 2008,"userhash and sourcehash peer seletction methods

these is effectively just copies of carp.cc with changed keying method
to key on the authenticated username respectiely client source address.",544,data/crawl/squid/patch_899.diff
https://github.com/squid-cache/squid/commit/9b3ed82cb463579f3072524133b5601edeee0558,13 Jul 2008,"Fix out-of-sourcedir ""make check"" dependency misdetection.
Fix ""make check"" by implementing a cachemgr stub to resolve link dependencies.",87,data/crawl/squid/patch_900.diff
https://github.com/squid-cache/squid/commit/f7e1d9ce938bdf65747a119f063b3faa3d9ba9d9,11 Jul 2008,The needed glue and function renames to integrate userhash and soucehash,242,data/crawl/squid/patch_901.diff
https://github.com/squid-cache/squid/commit/63104e28d3eef6502550733c16b04c982c0e1776,11 Jul 2008,copy carp.cc to peer_userhash.cc and peer_sourcehash.cc,454,data/crawl/squid/patch_902.diff
https://github.com/squid-cache/squid/commit/e313f2b8cb37f3dfac17bedf35396e1e3a43488a,03 Jul 2008,"Author: Henrik Nordstrom <henrik@henriknordstrom.net>
Port from 2.6: Support for cachemgr sub-actions

see. http://www.squid-cache.org/Versions/v2/2.6/changesets/10659.patch

This brings the Squid-3 cachemgr.cgi up to parity and backwards
compatibility with Squid 2.6 cachemgr.cgi",43,data/crawl/squid/patch_903.diff
https://github.com/squid-cache/squid/commit/7dbca7a4b0bf79fe0d6575e03fd02b774d953de4,02 Jul 2008,"Cleanup: Drop appname and full_appname_string constant globals

appname array only ever held a duplicate of ""squid""
      - calling it APP_SHORTNAME now instead of a global

full_appname_string only ever held the catenation VERSION""/""PACKAGE macros
      - calling it APP_FULLNAME now instead of a global",78,data/crawl/squid/patch_904.diff
https://github.com/squid-cache/squid/commit/60cad9371792be26f774ed27fb093029d1fffa57,30 Jun 2008,"Bug 2141: Netmasks need to die a clean death (part 1)

Update ACLIP output display to show CIDR instead of netmask format.
 With IPv6 masks can be long strings of ff* not easy to read. This makes
 them show up as CIDR masks appropriate to the base address type.

Also removes some duplicate code in output (debug show and config mgr).

TODO: parsing updates, in-memory types etc.",43,data/crawl/squid/patch_905.diff
https://github.com/squid-cache/squid/commit/63b81f1358cbd117169ecea7fdb2af3052f1aacf,30 Jun 2008,"Windows port: forward port of 2.7 lib functions updates

- Implement crypt() on Windows
- Implement getopt() on Windows
- Implement dirent-style opendir(), readdir(), closedir(),
  rewinddir(), seekdir() and telldir() on Windows",776,data/crawl/squid/patch_906.diff
https://github.com/squid-cache/squid/commit/9a6a600f88aea8c566d3f1d56ea6f607f9c049ac,24 Jun 2008,"Bug #2365: cachemgr.cgi fails to HTML encode config dumps properly
  
log_format and a couple other directives may contain HTML reserved characters
such as < >, and these needs to be HTML quoted in the output.",6,data/crawl/squid/patch_907.diff
https://github.com/squid-cache/squid/commit/4c73ba5f98e751b300f424f9e7b4a4c2f3fe20a1,01 Jun 2008,Basic Auth auto-docs and debugs cleanups.,50,data/crawl/squid/patch_908.diff
https://github.com/squid-cache/squid/commit/9e6e0372016a2d16124516049b5b9cd0ae9c52f8,17 May 2008,"Windows port: Added new mswin_check_ad_group external ACL helper

This helper allow the lookup of users's group membership in a Windows
Active Directory domain.
It overcomes the Lan Manager limits of mswin_check_lm_group, but it can be
used only with native Windows Active Directory domains, so mswin_check_lm_group 
will not removed from Squid.",669,data/crawl/squid/patch_909.diff
https://github.com/squid-cache/squid/commit/cdef7cca24d0d9e1d5db3073eb066f2a678f7d90,15 May 2008,"Author: Svenx <svensven@gmail.com>
Bug 2223: flexible handling of x-forwarded-for

This patch adds three settings for the 'forwarded_for' option in squid.conf:

If set to ""transparent"", Squid will not alter the X-Forwarded-For header in any
way.

If set to ""delete"", Squid will delete the entire X-Forwarded-For header.

If set to ""truncate"", Squid will remove all existing X-Forwarded-For entries,
and place itself as the sole entry.

The old options 'on' and 'off' have been left unaltered.",60,data/crawl/squid/patch_910.diff
https://github.com/squid-cache/squid/commit/02873aa57960b911b578aa265cd4db3bb2616eb5,10 May 2008,Crop old code and temporary #ifdef,14,data/crawl/squid/patch_911.diff
https://github.com/squid-cache/squid/commit/67c06f0d42ffa2b3b71082e0694460efa22a37a0,10 May 2008,"Bug 2223: Feature: flexible handling of x-forwarded-for

This patch adds three settings for the 'forwarded_for' option in squid.conf:

If set to ""transparent"", Squid will not alter the X-Forwarded-For header in any
way.

If set to ""delete"", Squid will delete the entire X-Forwarded-For header.

If set to ""truncate"", Squid will remove all existing X-Forwarded-For entries,
and place itself as the sole entry.

The old options 'on' and 'off' have been left unaltered.",60,data/crawl/squid/patch_912.diff
https://github.com/squid-cache/squid/commit/acde4327357e54787160fd4caac46a816cd27b69,09 May 2008,"Author: Finn Thain <fthain@telegraphics.com.au>
Bug 2323: basic auth leaks memory

- Several fixes resolving bad logic and leaks in basic auth.",59,data/crawl/squid/patch_913.diff
https://github.com/squid-cache/squid/commit/e1cbef08eff66d27f269a0ca46e044eca8b8dc56,08 May 2008,"Initial eCAP configuration and libecap support. Need to finish Message
translation and polish. See individual commit messages for details.",965,data/crawl/squid/patch_914.diff
https://github.com/squid-cache/squid/commit/e7de5ca3d2aa51590f9283b9481c78a2090b611b,08 May 2008,"Warn if two services share the same key.

TODO: Do not just warn, quit?",6,data/crawl/squid/patch_915.diff
https://github.com/squid-cache/squid/commit/fdc96a39b28104951106773c9c739ee7106fb39a,08 May 2008,"Added initial support for eCAP library (libecap), including required wrappers
for libecap::Host classes and a message translator. 

TODO: MessageTranslator should probably be renamed to MessageRep for
consistency and brevity reasons. It also lacks most of the code.",610,data/crawl/squid/patch_916.diff
https://github.com/squid-cache/squid/commit/0a48349ddf5da6c83371d65891da7fa08a968781,05 May 2008,"Bug #1784: access_log syslog results in blanks syslog lines between every access log entry.

Correct earlier forwardport of Squid-2 patch. There must only be one log call
per entry..",5,data/crawl/squid/patch_917.diff
https://github.com/squid-cache/squid/commit/757a22916ad199209348b7a2da1acf15229afa6b,01 May 2008,"Import reconfigure cachemgr action from NT Devel branch

This patch add the reconfigure restricted action to Cache Manager.",41,data/crawl/squid/patch_918.diff
https://github.com/squid-cache/squid/commit/1b328f6dba39a3f81ba8e2e073f5107ea52cb560,24 Apr 2008,"Transparent Interception remodelling.

This patch merges part 2 of the TPROXY-related updates.

 - Makes interception handling flags and options always-present
 - Updates squid.conf http_port options for clarity
 - Builds structure for sequential lookup of multiple interception methods
 - Performs sequential lookups for IPFW and multiple Netfilter targets
   if Squid configured to enable those transparency methods.
 - Pulls most of the TPROXYv2 related code out of Comm into IPInterception

IPFW changes are still experimental, but Netfilter targets have been tested.

TODO: depending on the anoyance levels a better logging method for NAT
      failures may need to be implemented. The existing methods of logging
      one-per-N seconds, for all lookup methods may prove annoying.",692,data/crawl/squid/patch_919.diff
https://github.com/squid-cache/squid/commit/f836c9ccd633c7973825dd19bcb2a22ffa7512b4,12 Apr 2008,"eCAP support, part 1: Loadable modules and ICAP-independent Squid core.

The first part of eCAP work includes (a) initial support for loadable
modules and (b) removing ICAP from main Squid sources, replaced with the
adaptation API that does not depend on a specific adaptation mechanism.

The patch does not contain significant changes to main Squid sources.
Generic adaptation API should minimize significant core changes going
forward. Details are below. For a low-level change log, see the eCAP bzr
branch at https://code.launchpad.net/~rousskov/squid/ecap

Configuration and features:

  Added adaptation_service_set squid.conf option, deprecating
  icap_class. The new option has more accurate documentation and does
  not depend on the adaptation protocol so one can group eCAP and ICAP
  services.
  
  Added adaptation_service_set squid.conf option, deprecating
  icap_access. The new option has more accurate documentation and does
  not depend on the adaptation protocol so one can mix-and-match eCAP
  and ICAP ACL rules.

  Added loadable_modules squid.conf option to specify what shared
  libraries to load dynamically. The support is based on libtool's ltdl
  convenience library and is enabled by default. It can be disabled
  using --disable-loadable-modules.  Loadable modules are needed for
  eCAP, but loadable_modules code deals with generic module
  manipulation, independent from eCAP support. Squid does not yet
  communicate with the loaded modules. TODO: support cachemgr
  reporting and reconfiguration of modules.


Internals:

  Squid core no longer knows about ICAP: General message adaptation code
  has been moved from src/ICAP to src/adaptation/. The only connection
  between main Squid code and ICAP is squid.conf parser and a few
  enabling lines in main.cc. USE_ADAPTATION is enabled if ICAP_CLIENT or
  USE_ECAP is enabled. TODO: Make adaptation comments, debug, and error
  messages in main Squid code ICAP-neutral. This has not been done yet
  to reduce VCS conflicts.

  The src/ICAP/ directory now has its own Makefile (so does the new
  src/adaptation). TODO: Should ICAP and eCAP directories be moved
  inside adaptation/?

  The eCAP directory and the --enable-ecap option have been added, but
  they should not be used yet.

  Added an adaptation service group API to support groups of services.
  Current code supports service sets and single-service groups. Sets
  provide a way to group interchangeable services together so that one
  (the ""best"" available) service is applied to the message. A
  single-service group is an internal feature to allow user to mix
  service and group names in squid.conf ACLs.  TODO: support service
  chains (as a service group) and perhaps group of groups?

  Implemented delayed creation of adaptation services. We used to create
  ICAPServiceRep objects when parsing the configuration file.
  Create-as-you-parse is imperfect for several reasons, especially if
  the services are dynamically loaded as is the case with eCAP. We now
  remember the service configuration and then create the actual service
  object _after_ the configuration has been parsed and loadable modules,
  if any, have been loaded.

  The bootstrap.sh script has been updated to generate ltdl library
  using libtoolize and move it to lib/libLtdl (except for the standard
  copyright file). With libtool version 2, the move will be supported by
  libtoolize itself.  The lib/libLtdl directory and libtool.m4 file are
  not in VCS.",4043,data/crawl/squid/patch_920.diff
https://github.com/squid-cache/squid/commit/788625af69b15b394bb13d9e099090e24f4e2320,11 Apr 2008,"Callers should not have to test for transparency when they want it to stop.

Transparency and Interception controller can do that on their behalf much cleaner.",30,data/crawl/squid/patch_921.diff
https://github.com/squid-cache/squid/commit/2ad20b4f9eaac9470dc18d4ad9153aa29b4f8422,09 Apr 2008,"Make transparency flags always-present. Rename flags 'transparent' to 'intercepted'

This minimizes the differences in code between multiple supported types of
transparency and interception.

The flag renaming is pure code cleanup, making the names much more descriptive
of the actual meaning of the flags.

TODO: currently remaining 'tproxy' flag needs changing to 'spoof_client_ip'

TODO: testing of code changes.

TODO: failover mechanism between two netfilter suported methods.",122,data/crawl/squid/patch_922.diff
https://github.com/squid-cache/squid/commit/04f874690ce86ba252f172a34d374ad38d1edea5,08 Apr 2008,Move need_linux_tproxy to a property of the Interception manager,183,data/crawl/squid/patch_923.diff
https://github.com/squid-cache/squid/commit/48bb425da6b195dbf73b23dffc017e4e5650091c,07 Apr 2008,"Bug #2001: Fails to forward responses where headers >4KB

This changes reply processing to clone the already parsed reply header
instead of trying to parse it yet another time. This allows us to seek
over the header contents and that way get away with just having a 4KB
buffer..

In the long run the store client API will be changed to provide a clean
split between headers and body, providing headers in parsed form (including
intermediary 1xx messages) and then the body starting at offset 0. This
change is a first step along that path but without changing the store client
api as such, with the intention of being merged into 3.0.",250,data/crawl/squid/patch_924.diff
https://github.com/squid-cache/squid/commit/45a87050c6ad670814652b167d1fe8afb28e69a1,05 Apr 2008,Removed stale and unused sources to minimize diffs with trunk.,1262,data/crawl/squid/patch_925.diff
https://github.com/squid-cache/squid/commit/ed08b88c5e248d7683016e4fba2d59b9d561e70f,03 Apr 2008,"Ignore and do not version lib/libLtdl because it is libtool-generated.
Ignore cfgaux because it is libtool-generated (merged from trunk).",23843,data/crawl/squid/patch_926.diff
https://github.com/squid-cache/squid/commit/62c7f90e68bf54a3699bda369795e9f2a6b781c0,03 Apr 2008,"Added an adaptation service group API to support groups of services. Current
code supports service sets and single-service groups. The former provides a
way to group interchangeable services together so that one (the ""best""
available) service is applied to the message. The latter is an internal
feature to allow user to mix service and group names in squid.conf ACLs.
TODO: support service chains (as a service group) and perhaps group of groups.

Moved adaptation access rule state from being shared between ICAPClass and
ICAPAccessCheck classes into a dedicated AccessRule class. This simplifies
both classes and allows for checking access rules in the correct order.

Use group names when linking adaptation access rules to groups. This is less
efficient (especially since we are still using Vector iteration to find a
matching group) but much simpler. TODO: Optimize.

All adaptation services, access rules, and service groups now have a
finalize() method that is called after configuration parsing has been
completed but before the main loop starts. This allows to verify or optimize
name-based links to other services, rules, and groups.

Moved adaptation access check and group classes into their own files.

Added adaptation_service_set squid.conf option, deprecating icap_class. The
new option has more accurate documentation and does not depend on the
adaptation protocol so one can group eCAP and ICAP services.

Added adaptation_service_set squid.conf option, deprecating icap_access. The
new option has more accurate documentation and does not depend on the
adaptation protocol so one can mix-and-match eCAP and ICAP ACL rules.",1311,data/crawl/squid/patch_927.diff
https://github.com/squid-cache/squid/commit/7969fcff441a20e2ff54512d8b205be93e9a0324,01 Apr 2008,"Remove autotool derived files from trunk, we only need to keep these in STABLE branches.",121941,data/crawl/squid/patch_928.diff
https://github.com/squid-cache/squid/commit/0bef8dd7255b92e0f0de92ddb516f6eb2eb59dd2,30 Mar 2008,"Renamed types and members after moving adaptation-method-agnostic APIs to the
Adaptation namespace and adding support for delayed adaptation service
creation.",148,data/crawl/squid/patch_929.diff
https://github.com/squid-cache/squid/commit/64bdef96ce94ed48c38fd37e063fdbd7cf8cce5f,30 Mar 2008,"Moved configuration options that do not depend on the adaptation method
from ICAP/ICAPConfig to adaptation/Config. ICAP and eCAP will not share
the same base configuration but will share the same base configuration code
(i.e., there will be two independent ICAPConfig and ecap::Config objects,
but they will have a common parent).

Implemented delayed creation of adaptation services. We used to create
ICAPServiceRep objects when parsing the configuration file.
Create-as-you-parse is imperfect for several reasons, especially if the
services are dynamically loaded as is the case with eCAP. We now remember the
service configuration and then create the actual service object _after_ the
configuration has been parsed and loadable modules, if any, have been loaded.

No functional changes are expected from this change.",1120,data/crawl/squid/patch_930.diff
https://github.com/squid-cache/squid/commit/80ec8b2147eb7c106fe8a1312683f8aea6ef010d,25 Mar 2008,Bootstrapped,15110,data/crawl/squid/patch_931.diff
https://github.com/squid-cache/squid/commit/52b694c261d85aebcebcb3c74e79fbaf3b3a945a,24 Mar 2008,"Fix IPv4 request regression after last commit.

Sorry guys.",15133,data/crawl/squid/patch_932.diff
https://github.com/squid-cache/squid/commit/bb5d6d6570a6763e45dd05a70eb5339fb49fa11a,22 Mar 2008,merged from trunk,1361,data/crawl/squid/patch_933.diff
https://github.com/squid-cache/squid/commit/6289f91ff5634bcc1588c2937a5642c5857168b3,21 Mar 2008,"Compile errors in auto-testing.

Also some auto-documentation.",51,data/crawl/squid/patch_934.diff
https://github.com/squid-cache/squid/commit/3e7b6055489b13ca3faa9eef01b42a74971f84e4,20 Mar 2008,"Importing CVS squid3-ecap branch:

lib/Makefile.am
        Added libLtdl to SUBDIRS if USE_LOADABLE_MODULES.


src/ICAP/ICAPModXact.h
src/ICAP/ICAPServiceRep.h

        When USE_ECAP_AS_ICAP_HACK macro is defined, enable a temporary
        hack that uses ICAP class names to implement some of the eCAP
        classes. This is necessary to hide eCAP/ICAP distinction from
        Squid core. Hiding the distinction is necessary to avoid
        numerous conflicts when this branch is merged with async call
        branch changes.
        
        Once the branches are merged, the hack will be removed. Since
        we currently #define eCAP class names to match those of ICAP
        classes, the changes at that time should not be significant:
        remove renaming #defines and adjust autotools meta files to
        allow both ICAP and eCAP co-exist.



configure.in
src/Makefile.am

        Enable eCAP support if loadable module support is enabled.
        Eventually, we may want to control eCAP support directly.
        
        Added eCAP directory to the Makefile. The eCAP directory
        contents will be committed later.



SPONSORS
        Added eCAP sponsor.


src/Makefile.am
        When eCAP is enabled, to support USE_ECAP_AS_ICAP_HACK, ignore
        ICAP files that eCAP overwrites.


configure.in

        Added --enable-ecap option to control eCAP support explicitly.
        Added consistency checks for the combination of --enable-ecap,
        --enable-icap-client, and --disable-loadable-modules options.
        
        Define USE_ECAP_AS_ICAP_HACK macro to enable a temporary hack
        that uses ICAP class names to implement some of the eCAP
        classes. This is necessary to hide eCAP/ICAP distinction from
        Squid core. Hiding the distinction is necessary to avoid
        numerous conflicts when this branch is merged with async call
        branch changes.
        
        Once the branches are merged, the hack will be removed. Since
        we currently #define eCAP class names to match those of ICAP
        classes, the changes at that time should not be significant:
        remove renaming #defines and adjust autotools meta files to
        allow both ICAP and eCAP co-exist.



Makefile.am
acinclude.m4
bootstrap.sh
configure.in
src/Makefile.am

        Added basic support for Libtool ltdl. Libltdl directory is not
        committed yet because I want to investigate whether it can be
        moved from root to lib/. Bootstrap.sh currently strips a large
        copying file from that directory but does not attempt to move
        the directory itself.
        
        The configure options will need to be changed according to
        squid-dev discussion: we should assume that ltdl is always used
        if modules are used, and we should have a --disable-modules
        option.
        
        The code works with a dummy module: Squid was able to load and
        unload using LoadableModule, an ltdl wrapper class from Spicer.
        I have not committed that wrapper yet.

Makefile.am
bootstrap.sh
configure.in
src/Makefile.am

        Moved Libtool libltdl directory to lib/libLtdl to keep all
        3rd-party libs in one place. Will commit the lib/libLtdl
        directory itself soon.
        
        Bootstrap.sh currently moves all files from the generated
        libltdl into lib/libLtdl. A better approach may be to use the
        --ltdl option of libtoolize. Will investigate.
        
        Changed configure options to assume that ltdl is always used if
        modules are used.",48970,data/crawl/squid/patch_935.diff
https://github.com/squid-cache/squid/commit/e1f7507e5bf5262ca1322f6f919ee98ba66d21ff,20 Mar 2008,"3.1 Cleanups pt 1: Add testheaders.sh script

This script automatically tests all .h files in any directory it is passed
(relative to curent make directory) using the compiler options it is also passed.
It should be integrated in to the unit-testing in every Makefile.am so that
it provides dependancy tree testing of all .h without any additional work by
developers, maintainers, or testers.


3.1 Cleanups, pt 2: Add automatic validation and fix existing problems.

- puts testheaders.sh script to use in many Makefile.am
  (tried for all subdirs tested, but some may have escaped)

- fixes many include problems where .h were not self-sufficient.
  They required .cc or other .h files using them to include additional .h
  Now any given .h will include all objects it requires for compiling.
  (linking is still not guaranteed by this alone)

- References SQUIDHOSTNAMELEN properly as defined by RFC 2181.
  Now also split into a proper rfc2181.h for use.
  (obsoleting many dependencies on squid.h all by itself)

- Migrates dlink_* (squid custom double-linked-list code) into new object.
  (releasing many dependencies on squid.h, structs.h, and protos.h)

- Migrates the SquidConfig* types into SquidConfig.cc, now built into libsquid.la
  (releasing many dependencies on structs.h, and globals.*)

- removes squid.h includes from many unit-tests
  (releasing them from link-dependencies, .o links not yet cleaned up)",2997,data/crawl/squid/patch_936.diff
https://github.com/squid-cache/squid/commit/b297bcd06f78f38f83aca7053f93b53d40e7ff4f,15 Mar 2008,"Properly build a cloned reply, and skip reading of large headers

more work remains to fix up the other paths (cache hits, IMS, Vary?)",198,data/crawl/squid/patch_937.diff
https://github.com/squid-cache/squid/commit/26c6335afcdc93b87a92665101592ff8faaf1aa3,27 Feb 2008,"Bug #2224 fix: reentrant debugging crashes Squid

Synced with src/debug changes.
TODO: Add a note that this file appears to copy debug.cc",42,data/crawl/squid/patch_938.diff
https://github.com/squid-cache/squid/commit/9eab365dad7aa94bc545812349f5bccc67ae97a2,27 Feb 2008,"Bug #2224 fix: reentrant debugging crashes Squid

Reentrant debugging occurs when something being written into the debugging
stream produces its own debugging. For example, a field accessor method may
make cbdata-validation calls, which would produce debugging. Logging such
field would crash Squid if sufficiently high debugging level is enabled.

With this change, the Debug methods detect reentrant calls and mostly ignore
them, allowing the caller to append debugging information to the existing
debug stream. A short debugging label is added before and after the reentrant
debugging message to reduce confusion that overlapping debugging statements
may cause during log analysis.",53,data/crawl/squid/patch_939.diff
https://github.com/squid-cache/squid/commit/1515a285e946b4ae9f20dcc44e210ecbdc1621b8,26 Feb 2008,"Bug #2240 fix: AsyncCall-related unit tests fail

Added a missing stub.
Updated an outdated stub.",10,data/crawl/squid/patch_940.diff
https://github.com/squid-cache/squid/commit/0b9ea7bb8be91efafbda5e559f4c7c4385ad17ad,20 Feb 2008,"Author: Klaubert Herr <klaubert@gmail.com>
Patch to strip kerberos realm from username

This patch add a new option to squid_ldap_group to strip kerberos realm from
username received from squid.
This is useful when you make kerberos authentication on squid, and try to
authorize the user using ldap in MS Active Directory, quering for
sAMAccountName.",17,data/crawl/squid/patch_941.diff
https://github.com/squid-cache/squid/commit/ae9f801d8f1a0c446318aae1853b48f5a4a607b0,20 Feb 2008,Ran indent.,146,data/crawl/squid/patch_942.diff
https://github.com/squid-cache/squid/commit/be8fdd566f491809856823486f6b598d2cf81dff,15 Feb 2008,"Loosen GetAddrInfo Unit-Tests.

Squid does not need certain OS defaults, which are known to vary.",10,data/crawl/squid/patch_943.diff
https://github.com/squid-cache/squid/commit/9512de47a631d36e3773e97b0f046ed141e3a216,13 Feb 2008,"Merging async-call branch changes to HEAD:

        ConnStateData is not a RefCountable class any more and cbdata
        used instead (I just forgot to commit these files)",16,data/crawl/squid/patch_944.diff
https://github.com/squid-cache/squid/commit/9688b0aee3c5c1989873b5ef9f0c2071107af5ef,13 Feb 2008,"Merging async-call branch changes to HEAD:

Async-call work replaces event-based asynchronous calls with
stand-alone implementation. The common async call API allows Squid
core do call, debug, and troubleshoot all callback handlers in a
uniform way.

An async ""job"" API is introduced to manage independent logical threads
or work such as protocol transaction handlers on client, server, and
ICAP sides. These jobs should communicate with each other using async
calls to minimize dependencies and avoid reentrant callback loops.

These changes will eventually improve overall code quality, debugging
quality, and Squid robustness.

Below you will find log messages from the async-call branch that are
relevant to the file(s) being committed.

        Removed CommDispatcher as unused.

        Use async calls for firing ready events. Deleted
        EventDispatcher as unused.

        Converted CompletionDispatcher-based SignalDispatcher into
        AsyncEngine-based SignalEngine to get rid of CompletionDispatchers.",64,data/crawl/squid/patch_945.diff
https://github.com/squid-cache/squid/commit/dc56a9b1420c7f77b90b5abf111d6cb98cd0d7a1,13 Feb 2008,"Merging async-call branch changes to HEAD:

Async-call work replaces event-based asynchronous calls with
stand-alone implementation. The common async call API allows Squid
core do call, debug, and troubleshoot all callback handlers in a
uniform way.

An async ""job"" API is introduced to manage independent logical threads
or work such as protocol transaction handlers on client, server, and
ICAP sides. These jobs should communicate with each other using async
calls to minimize dependencies and avoid reentrant callback loops.

These changes will eventually improve overall code quality, debugging
quality, and Squid robustness.

Below you will find log messages from the async-call branch that are
relevant to the file(s) being committed.

        Convert the comm_* calls to use CommCalls.

        Use the AsyncJob::deleteThis method as ""delete this""
        replacement instead of the previously commited block ""if
        (inCall) musStop(...) else delete this""

        ICAPInitiate::sendAnswer dialers take care of message locking
        now.",611,data/crawl/squid/patch_946.diff
https://github.com/squid-cache/squid/commit/3e5c8cf4222d850a0390ce3e3959cf6fad18ed91,13 Feb 2008,"Merging async-call branch changes to HEAD:

Async-call work replaces event-based asynchronous calls with
stand-alone implementation. The common async call API allows Squid
core do call, debug, and troubleshoot all callback handlers in a
uniform way.

An async ""job"" API is introduced to manage independent logical threads
or work such as protocol transaction handlers on client, server, and
ICAP sides. These jobs should communicate with each other using async
calls to minimize dependencies and avoid reentrant callback loops.

These changes will eventually improve overall code quality, debugging
quality, and Squid robustness.

The code is still more complex than I want it to be. However, these are
low-level interfaces that most developers will not have to deal with and
the complexity will be significantly reduced if we get rid of old style
function-pointer based callbacks, which is probably desirable for several
reasons. Other simplifications will be found in time as well.

TODO: src/ICAP/AsyncJob needs to be moved to src/. It is not moved yet to
preserve commit logs.",546,data/crawl/squid/patch_947.diff
https://github.com/squid-cache/squid/commit/b04699658ca0a35cb07317084c73493108188ced,13 Feb 2008,"Merging async-call branch changes to HEAD:

Async-call work replaces event-based asynchronous calls with
stand-alone implementation. The common async call API allows Squid
core do call, debug, and troubleshoot all callback handlers in a
uniform way.

An async ""job"" API is introduced to manage independent logical threads
or work such as protocol transaction handlers on client, server, and
ICAP sides. These jobs should communicate with each other using async
calls to minimize dependencies and avoid reentrant callback loops.

These changes will eventually improve overall code quality, debugging
quality, and Squid robustness.

Below you will find log messages from the async-call branch that are
relevant to the file(s) being committed.

    Added initial implelentation of AsyncCall-based wrappers for
    comm callbacks. The comm layer no longer calls callbacks from
    the select loop. Instead, the select loop schedules async
    calls. Scheduled calls are then called from the main loop (like
    all other async calls), after the select loop completes.


    Removed accept loop. We cannot loop because async calls do not
    get fired during the loop and, hence, cannot register new
    callbacks for new ready FDs.

    The loop is implicit now. When the next callback is registered,
    we check whether the last accept(2) call was successful or
    OPTIMISTIC_IO is defined and call acceptNext() again if yes.
    AcceptNext() may schedule another async call (using the
    being-submitted callback) if the socket was still ready. Since
    callbacks are fired until there are no callabacks left, we
    still have an accept loop.


    Removed CommDispatcher as unused.

    Removed unused IOFCB, IOWCB, and CWCB.


    Removed class fdc_t. After CommCallbackData removal, fdc_t was
    only used to check that a FD is ""active"" and to check that a FD
    is half_closed.  fd_table flags.open seems to be identical to
    the ""active"" state flag so we use that now, via newly added
    isOpen() static function. AbortChecker already maintains
    half_closed status.

    The accept-specific functionality is still implemented by
    AcceptFD class. Removed fdc_t used to marshall accept-ralted
    calls to AcceptFD anyway. fdc_table now stores AcceptFDs
    directly. I did not rename the table to ease merging with other
    code, but added a TODO for that.


    Removed calls to comm_iocallbackpending(). They were added to
    ""Speed up processing of queued events significantly, to not
    cause large delays when under low load"" but I do not see how
    having pending callbacks can be relevant because all pending
    callbacks are (should be) executed before FDs are probed.

    Removed unused nullCallback() methods.

    Removed CommCallbackData and related code. It looks like it
    remained after one of the big comm rewrites, just to handle
    accept errors. We can now schedule an async call to notify of
    those errors and do not seem to need CommCallbackData at all.

    Removed commfd_completed_events: a list of completed (but not
    yet fired) callbacks. We simply schedule the async call now
    instead of maintaining our own list of callbacks to call.  This
    change allows us to eliminate the CommDispatcher class (which
    was the motivation behind these changes), but I have not done
    that yet.

    For comm_io_callback_t, being active seems to be the same as
    having a callback. Replaced active data member with a method
    that checks for the callback presence.

    Relaxed comm_read_cancel() preconditions so that the callers do
    not have to check all the assertions inside before calling that
    function.


    The CommCall code is still more complex than I want it to be.
    However, these are low-level interfaces that most developers
    will not have to deal with and the complexity will be
    significantly reduced if we get rid of old style
    function-pointer based callbacks, which is probably desirable
    for several reasons.",1635,data/crawl/squid/patch_948.diff
https://github.com/squid-cache/squid/commit/815eaa446eab8003b71fcb45368b9de72447d153,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Added sslproxy_cert_error ACL to be able to bypass some
        certificate validation errors. The default is to bypass
        nothing.

        Only a few SSL certificate validation errors are currently
        recognized by name, including the newly defined
        SQUID_X509_V_ERR_DOMAIN_MISMATCH error which is raised when
        Squid certificate domain validation fails.",100,data/crawl/squid/patch_949.diff
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/patch_950.diff
https://github.com/squid-cache/squid/commit/4741655593ce55dd6b0ba50b2d8dd4f9b82ebf4e,09 Feb 2008,"Bug 2038: check reply_body_max_size before ICAP

Use newly added HttpReply::expectedBodyTooLarge() check to support the
reply_body_max_size ACL when the expected body size may be known. The check
is now shared between server and client sides.

The server side needs to do the checks before feeding the data to ICAP.
Otherwise, ICAP service may suck a large response in and spit a small response
out. It was decided that the reply_body_max_size ACL should apply to the
virgin response as well.

The server side does not perform HttpReply::receivedBodyTooLarge() check yet.",23,data/crawl/squid/patch_951.diff
https://github.com/squid-cache/squid/commit/592a09dc9b13360455f8f52aa85bd82ae560384a,08 Feb 2008,"make include support wildcards, and document the directive (copied from squid-2)",37,data/crawl/squid/patch_952.diff
https://github.com/squid-cache/squid/commit/b2130d58e3816ec70c9b06cdbeb7b1ad608eb448,08 Feb 2008,TCP keepalive support,82,data/crawl/squid/patch_953.diff
https://github.com/squid-cache/squid/commit/2cdeea8288740ab964b235dda466c874a39c18bd,23 Jan 2008,"Bug 1923 fix: Do not send hop-by-hop headers to the ICAP server.
Send Proxy-Authenticate&Proxy-Authorization in ICAP request headers.",80,data/crawl/squid/patch_954.diff
https://github.com/squid-cache/squid/commit/1a4c22137cc4df1612245c5103f7b82f1df96c97,19 Jan 2008,Bootstrapped,12825,data/crawl/squid/patch_955.diff
https://github.com/squid-cache/squid/commit/47ceef743c9ade52d2c2ffd9ebef608bc82ec840,18 Jan 2008,Compile errors and Bootstrap.,12839,data/crawl/squid/patch_956.diff
https://github.com/squid-cache/squid/commit/f2d716974ea48e13bb66c173faeefe8bc64a7cdb,12 Jan 2008,Improved output display formatting,6,data/crawl/squid/patch_957.diff
https://github.com/squid-cache/squid/commit/bae9832dd15d8221a56cae6e5f8c699a8621ce2d,11 Jan 2008,"AAAA/A failover fix and CNAME recursion deprecation

A bug in the final version of squid internal DNS resolver logics
caused any failover A results to overwrite the paired previous AAAA.

This patch adds state to store the DNS results between failover queries
and to merge the final sets before passing them out to the requestor.

Lookups should now be seemlessly handled within the DNS resolver stub.

CNAME recursion at the ipcache level should now be obsolete and has been
wrapped in a new ./configure --with-dns-cname option which defaults off.
That code has proven to be problematic anyway and will be no great loss.

Additional counters have been added to the squid statistics to track the
amount of queries of each type have been encountered.",186,data/crawl/squid/patch_958.diff
https://github.com/squid-cache/squid/commit/cfcb6b30e85d1567019dafc2133c83d96c9b9739,11 Jan 2008,"Author: Adrian Chadd <adrian@creative.net.au>, Gonzalo Arana <gonzalo.arana@gmail.com>
include directive for squid.conf

This patch adds an 'include' option to squid.conf for the purpose of
importing configuration details external to the squid.conf file itself

see Squid 3.1 Release notes for further details.",135,data/crawl/squid/patch_959.diff
https://github.com/squid-cache/squid/commit/ec757da4773ed36c4a009cdc1d7358b8f7910060,07 Jan 2008,Fix some minor casting errors affecting cachemgr reporting when cache/mem >2GB,12,data/crawl/squid/patch_960.diff
https://github.com/squid-cache/squid/commit/bebc043b8df7953e06b2a66ad7b88b362fbc59b5,27 Dec 2007,"Remove the default cache_dir location and the null store type

Many people gets confused by the builtin cache_dir location, thinking
that if there is no cache_dir in squid.conf then there is no on-disk cache.
This removes the builtin default.

By removing the builtin default we can also remove the ""null"" cache_dir
type whos purpose is only to override the builtin default.",410,data/crawl/squid/patch_961.diff
https://github.com/squid-cache/squid/commit/68b313c26b0d8902d9a3cb9e06db243632d7d01b,27 Dec 2007,Correct IPAddress IASSERT macro to not log false asserts on complex expressions,6,data/crawl/squid/patch_962.diff
https://github.com/squid-cache/squid/commit/4a48758996c888cb7b27153c26cb97812b85a68d,16 Dec 2007,Bootstrapped,12833,data/crawl/squid/patch_963.diff
https://github.com/squid-cache/squid/commit/30017219b023708557cfc64eb3835b39f126212e,15 Dec 2007,Bootstrapped.,12853,data/crawl/squid/patch_964.diff
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/patch_965.diff
https://github.com/squid-cache/squid/commit/0710cbcd89ad70d205b1aa53384976830d8dc471,14 Dec 2007,"Import RFC 3596 library extenstions from squid3-ipv6 branch.

This library extends the rfc1035 DNS resolver built into squid to handle
RFC 3596 IPv6 extensions for DNS. Namely the AAAA and PTR records.",466,data/crawl/squid/patch_966.diff
https://github.com/squid-cache/squid/commit/41d93087a0a99fa4a4c34eba4cf25606229567ff,14 Dec 2007,"Import IPAddress class and unit-tests from squid3-ipv6 branch

This class forms the basis of the IPv6 capable code for squid",2385,data/crawl/squid/patch_967.diff
https://github.com/squid-cache/squid/commit/49f821da7d0216f27978d65cb8948240cf20f9f4,12 Nov 2007,Bootstrapped,14939,data/crawl/squid/patch_968.diff
https://github.com/squid-cache/squid/commit/b20e50afcec2f9a73a67e4fe791d18411fab2cac,11 Nov 2007,Bootstrapped.,15167,data/crawl/squid/patch_969.diff
https://github.com/squid-cache/squid/commit/7b8d064daa0270c90c8c3e104feffaf714ab9798,08 Nov 2007,Bootstrapped,15039,data/crawl/squid/patch_970.diff
https://github.com/squid-cache/squid/commit/9aabaef1be4d727fd9c0ef1e5e3f150ef1a25195,07 Nov 2007,Bootstrapped.,15045,data/crawl/squid/patch_971.diff
https://github.com/squid-cache/squid/commit/e1a8870019efe5dc2affd355f83371eea1c2646c,31 Oct 2007,Code cleanup.,102,data/crawl/squid/patch_972.diff
https://github.com/squid-cache/squid/commit/329ce686ef29a0384b5b5ad3e39eef5023876e0d,23 Sep 2007,"Forward port of latest tproxy changes from SQUID 2:

- Automatically disable tproxy if the needed capabilities could not be set
- Keep the permitted set unless root privileges is completely dropped (chroot),
  as is normally done when not using capabilities. This fixes file permissions
  regarding the pid file.
- Test for sys/capability.h linux include file to avoid failing on systems missing libcap",135,data/crawl/squid/patch_973.diff
https://github.com/squid-cache/squid/commit/e11ffec305e6d947cbe8ed9dd766258f7793a020,22 Sep 2007,Allow the build of digest_ldap_auth when ldap_start_tls_s() is not available,12,data/crawl/squid/patch_974.diff
https://github.com/squid-cache/squid/commit/077fe5816c428aa8aae518ac560c10c1a5e1c030,21 Sep 2007,"Misc Formatting & cleanups
Some comment corrections
Some irrelevant typedef cleanups",111,data/crawl/squid/patch_975.diff
https://github.com/squid-cache/squid/commit/f3b9feae46eee5931a5c85f35bb6a31bc24ee77e,21 Sep 2007,Bootstrapped,40894,data/crawl/squid/patch_976.diff
https://github.com/squid-cache/squid/commit/560b8caa509cdc0603d3de35356cda86c1860db5,21 Sep 2007,Bug #2088: sbrk statistics broken when process size >2GB.,6,data/crawl/squid/patch_977.diff
https://github.com/squid-cache/squid/commit/1f926ba1073c060e03e22167ef06a729c3172db9,20 Sep 2007,Bootstrapped.,40929,data/crawl/squid/patch_978.diff
https://github.com/squid-cache/squid/commit/41bd17a47f74cefe841f7025291b655eeead07f4,04 Sep 2007,"More squid.conf reordering to get the dependencies between options sorted proper

this patch also adds an automatic dependency verification to cf_gen,
reducing the risk of this kind of confusing ordering of the directives.
driven by the new cf.data.depend file listing the directive types and
their dependencies.",4883,data/crawl/squid/patch_979.diff
https://github.com/squid-cache/squid/commit/988e90e19b64a5fc6ab3ddb759eadedb08a289a6,02 Sep 2007,indented,611,data/crawl/squid/patch_980.diff
https://github.com/squid-cache/squid/commit/7d63e639a5836e294ab79f042dd6a3ad0e11f039,01 Sep 2007,"Clean up use of USE_POLL/HAVE_POLL

USE_POLL == configure selected poll() for the select loop

HAVE_POLL == configure detected that the system have a poll() call",34,data/crawl/squid/patch_981.diff
https://github.com/squid-cache/squid/commit/8d3b341efba50621e1068e734ceb32c7cb9f2482,29 Aug 2007,"Bug #2057: NTLM stop work in messengers after upgrade to squid 2.6 stable 14

There is clients out there who only signal keep-alive during the NTLM
handshake, not on the final request. For example seen on CONNECT requests.

This patch makes Squid automatically fall back on Basic/Digest if NTLM
or Negotiate authentication can not be performed. Detected by seeing a
challenge from the helper on a non-persistent connection.",99,data/crawl/squid/patch_982.diff
https://github.com/squid-cache/squid/commit/8763034115108660e73e6d088c47a6dde8c751c5,27 Aug 2007,"Enable HTCP and SNMP support by default in the binary, but default off in squid.conf",68,data/crawl/squid/patch_983.diff
https://github.com/squid-cache/squid/commit/2324cda2603570ec7ab7ccc157ac045a00ad9e6a,27 Aug 2007,Spelling correction of received,184,data/crawl/squid/patch_984.diff
https://github.com/squid-cache/squid/commit/776ff02cfcd82e47b94530519aa4201972d6acbe,25 Aug 2007,Make fatal() a controlled exit without dumping core. We have fatal_dump() for that.,22,data/crawl/squid/patch_985.diff
https://github.com/squid-cache/squid/commit/9edfee167f0863739da78c3f9400ba4bb4127116,24 Aug 2007,Bootstrapped,40948,data/crawl/squid/patch_986.diff
https://github.com/squid-cache/squid/commit/fcd92691c1415c738da4b976e0e13da19cc6f824,24 Aug 2007,Bootstrapped.,41127,data/crawl/squid/patch_987.diff
https://github.com/squid-cache/squid/commit/22b245f82296981d75f635cd193c32e79ebfd47c,17 Aug 2007,Fix bug 1902 - Adds Numeric Hit and invalid request counters to IP Cache,23,data/crawl/squid/patch_988.diff
https://github.com/squid-cache/squid/commit/ee1394034ae6d0c148944ba013ce2d485b2ea57b,17 Aug 2007,"64-bit disk I/O, using off_t / size_t where appropriate",98,data/crawl/squid/patch_989.diff
https://github.com/squid-cache/squid/commit/4d883d1fa06364cb8bb95405c96abb0169a0083f,15 Aug 2007,"Fix build errors on HP Tru64 Unix and may be others

- xusleep.c: on Tru64 timeval is defined in sys/time.h
- move the definition of ISO C99 Standard printf() macros for 64 bit
  integers from squid.h to squid_types.h",61,data/crawl/squid/patch_990.diff
https://github.com/squid-cache/squid/commit/ce701a4581c4e434ca794f5c1252394679378b5d,14 Aug 2007,Forward port from 2.6 of definition of ISO C99 Standard printf() macros for 64 bit integers,28,data/crawl/squid/patch_991.diff
https://github.com/squid-cache/squid/commit/47f6e231eb0dcf02f69a97a3adebc10ae744fefb,13 Aug 2007,"Author: wessels & Christos Tsantilas
Import squid3-largeobj branch, fixing proxying and caching of >2GB objects

this patch converts all variables referring to object sizes & offsets to
64-bits, and gets rid of a lot of related casts.

The cache format is also updated to use 64-bit offsets, using a format
compatible with Squid-2.6.",1589,data/crawl/squid/patch_992.diff
https://github.com/squid-cache/squid/commit/068d42c5b2abd51ff381c5dedbfe949b6b9f684b,13 Aug 2007,Ran indent.,614,data/crawl/squid/patch_993.diff
https://github.com/squid-cache/squid/commit/5ebbe9b5592053ae6550e76a49d1cf320ba0c94d,11 Aug 2007,More RFCs relevant to Squid.,6076,data/crawl/squid/patch_994.diff
https://github.com/squid-cache/squid/commit/585ab2609de3efdd62a974afed5d4067f58db6ab,10 Aug 2007,"Bug 2034 fix, v4: Separate handling of virgin server responses and ICAP-adapted
responses. Both can be active at the same time. Only one can become final and
get into the store entry.

Also, do not abort ICAP transactions when the virgin response ends prematurely.
Keep going because the ICAP initiator may still want to know the ICAP reaction
to the now-truncated virgin message.

This version passes a few basic tests, but may need more work and does need
polishing. For example, the common code should be factored out from
ICAPModXact::noteBodyProductionEnded and ICAPModXact::noteBodyProducerAborted.",211,data/crawl/squid/patch_995.diff
https://github.com/squid-cache/squid/commit/e9505fad20b3dc72c823033d59504e6778be9f1a,19 Jul 2007,Various cleanups to make GCC happy,151,data/crawl/squid/patch_996.diff
https://github.com/squid-cache/squid/commit/975b5060aa6808de657cace729f888c2f09a23df,07 Jul 2007,"Call leave_suid() in fatal() to make sure that swap.state files are written as the effective user, rather than root.

Squid may take on root privs during reconfigure.  If squid.conf
contains a ""Bungled"" line, fatal() will be called when the process
still has root privs.",12,data/crawl/squid/patch_997.diff
https://github.com/squid-cache/squid/commit/81425fb60a4b583e1b18d50fa39770f2df8e1c86,04 Jul 2007,"Bug #2009: Negotiate fails with assertion failure

crashed with assertion failure on first request.

Updated the Negotiate implementation to match current NTLM implementation
which gets rid of this. Looks like there has been some patches to NTLM
not applied on Negotiate. The two is pretty much the same code, and any
bugs hitting NTLM will hit Negotiate as well..",75,data/crawl/squid/patch_998.diff
https://github.com/squid-cache/squid/commit/63a05fa3d20a15ec5f91d8b127f25136982fa2c7,04 Jul 2007,"Bug #2008: Work around clients trying to use NTLM or Negotiate without persistent connections

This patch forces a fallback on Basic/Digest if the client attempts
to use NTLM or Negotiate without having a persistent connection.",15,data/crawl/squid/patch_999.diff
https://github.com/squid-cache/squid/commit/063a47b558e3666eb34e0456bc56e5c370a09b59,28 Jun 2007,"Bug #1986 fix: Do not abandon ICAP when doing FTP HEAD.
Also, do not forget to adjust cachability of FTP responses when doing ICAP.

FTP HEAD processing code was calling appendSuccessHeader() but was not
checking whether the latter set icapAccessCheckPending. This resulted
in aborted FTP HEAD transactions.

Also, appendSuccessHeader was adjusting entry cachability based on
authentication flags but _not_ when ICAP was enabled. I moved that code
to newly added haveParsedReplyHeaders() which is called with or without
ICAP, just like in HttpState.

TODO: rename appendSuccessHeader because it is doing a lot more than that.",61,data/crawl/squid/patch_1000.diff
https://github.com/squid-cache/squid/commit/7c4e4e7fe5cd7674b9d453d379d9058ea711bc28,26 Jun 2007,"Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug #1971 fix, part 1: Check whether the store entry got aborted while
we were waiting for an asynchronous ICAP ACL check.

Also moved common icapAclCheckDone() code from FtpStateData and
HttpStateData into Server. Removed ""if (eof) serverComplete()"" checks from
HttpStateData::processReplyHeader and HttpStateData::failReply methods as
eof can no longer be true there.",146,data/crawl/squid/patch_1001.diff
https://github.com/squid-cache/squid/commit/375295ebbb8736415fa7c19b6e456810777e1c99,25 Jun 2007,"Bug #1798: Temporary shortage of system filedescriptors may cause Squid to perma
nently stop accepting connections

To adjust to system limits Squid automatically reduces the amount of
filedescriptors when it detects a system wide shortage. However, this
reduction might go so far that Squid completely stops accepting new
connections.

This patch adds a limit causing Squid to restart if the limit gets way
too low, in an attempt to recover if the situation is temporary.",5,data/crawl/squid/patch_1002.diff
https://github.com/squid-cache/squid/commit/8655ee19716784d8f2ccd5d47cb1080a2dc4e9f0,25 Jun 2007,"Imported ncsa_auth changes from Squid-2

- Support for plain MD5 hashed password (no salting)
- man page documenting it's use",39,data/crawl/squid/patch_1003.diff
https://github.com/squid-cache/squid/commit/d80aac12c1a9e06ca1cc6f691c378972664acaa7,25 Jun 2007,Import squid_radius_auth helper for basic authentication to RADIUS,1720,data/crawl/squid/patch_1004.diff
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/patch_1005.diff
https://github.com/squid-cache/squid/commit/89f77e43f36bdbd636826c94085f9b5d882e473d,24 Jun 2007,"Bug #1948: digest_edir_auth helper, using novell eDirectory universal password

This is a modified version of digets_ldap_auth, with eDirectory special hooks
for retrieving the Universal Password plain text password.",1874,data/crawl/squid/patch_1006.diff
https://github.com/squid-cache/squid/commit/478cfe99eccf60060ca4fdec9ccdd2f37da24d4a,20 Jun 2007,"Bug #1974 fix: Bypass failures of optional ICAP services.

To bypass various failures, ICAPModXact catches its own exceptions and enables
the ""echo"" mode instead of quitting. Exceptions are not overruled if the
transaction is retriable. The code disables bypass for essential ICAP services
and when something makes clean echoing impossible (e.g., some buffered HTTP
body content was consumed).

This design allows the same bypass mechanism to be used for moth REQMOD and
RESPMOD, regardless of the vectoring point. Its implementation did not require
changing any Squid core files.

Previously many if not most ICAP failures were not bypassed and users were
receiving cryptic ""ICAP protocol error"" messages when an optional ICAP
service went down. With the current code, the service may go up and down many
times but only the transactions with large message bodies (that were executing
when the service went down) should be affected.

When deciding on whether to consume HTTP content written to the ICAP server,
Squid has to resolve a trade-off: postponing consumption longer increases
process footprint and may slow the HTTP side down, but consuming sooner
increases the chance of that ""ICAP protocol"" error being returned to the user.
Since Squid cannot buffer very large messages, some errors are inevitable. We
may want to add knobs to control this tradeoff.


The entries below are only indirectly related to the bug #1974 fix.

virginConsume() does not call or imply checkConsuming(). We must call
checkConsuming() even if we called virginConsume(). Otherwise, we may leave
and get destroyed while the pipe object still holds a [consumer] pointer to
us.

Polished VirginBodyAct so that we can distinguish disabled from undecided
states without using magical negative size constants.

Do not stop writing before throwing an exception. If the exception kills the
transaction, the transaction should cleanup the writer anyway. To bypass an
exception, we need all virgin content intact. Stopping writes before throwing
an exception may consume virgin content because the code does not know that
the exception is about to be thrown and may perceive content as ""no longer
needed"".


Added debugging.

Merged from the squid3-icap branch.",150,data/crawl/squid/patch_1007.diff
https://github.com/squid-cache/squid/commit/cfc684056b06a337844889663f0d0fadc1af9c33,20 Jun 2007,"Ignore comm_write notifications if the newly added
ICAPXaction::ignoreLastWrite member is set. This allows kids to more safely
work around comm inability to cancel a pending write request.

When connect() times out, throw an exception instead of calling mustStop()
because we can bypass the former and not the latter. We cannot bypass mustStop
because the code may use it for legitimate stopping conditions. Eventually,
we may want to have two kinds of exceptions: bypassable and fatal.

Support icap_connect_timeout and icap_io_timeout squid.conf options.

Count I/O timeout as a service failure. This helps suspend broken services
faster and avoid HTTP processing delays when the service is optional.

Eventually, we will probably count all (or most) exceptions as service
failures.

Removed ICAPXaction members that were copied to AsyncJob some time ago.

Polished debugging.

Merged from the squid3-icap branch.",46,data/crawl/squid/patch_1008.diff
https://github.com/squid-cache/squid/commit/11007d4bcd71a936faeef31b29b0a56563b3e44a,02 Jun 2007,"Make tunnel.cc identify itself as tunnel and not ssl

tunnel.cc is about tunnel operation as needed for CONNECT, not really SSL.
This change renames everything in tunnel.cc to use tunnel instead of ssl,
this to avoid confusion with the SSL code.",382,data/crawl/squid/patch_1009.diff
https://github.com/squid-cache/squid/commit/30abd2216c340de83251e6e42e6566de0fd23766,29 May 2007,Rollback String API changes. Delayed to 3.1.,2195,data/crawl/squid/patch_1010.diff
https://github.com/squid-cache/squid/commit/ad80164a7909ff0d00b33664f0a3b58343099cc0,18 May 2007,SqString core apparently not automatically added to cvs by patch.,712,data/crawl/squid/patch_1011.diff
https://github.com/squid-cache/squid/commit/86c0aed6f3d6225d2769d5eee25eb4d1d7eb1e44,18 May 2007,"Add string API layer for better string handling.

For various reasons listed below we adopt the std::string API (but not the implementation) as the basis for string operations.

This patch reverts the SquidString.h file to provide only the main API and hooks for any string implementation behind the API.

For Release 3.0 the old String (now SqString) will remain the default string core.
That code has been kept in this patch with some minor modifications and bug fixes as listed below.

For Release 3.1 it is expected that a better string core will be developed.

Reasons for these changes:

The initial String implementation was incomplete and non-standard causing some risky operations at points in the code and duplicated some operations.
std::string provides a better known API for string handling which is widely use amongst other string implementations beyond std::string itself and this enables std::string or a derivative to be used in squid at some future date.
String as used previously is a defined alternative to std::string in some systems

This patch:
   - moves the old String class to SqString
   - provides the well-known type of 'string' for general use
   - provides implicit conversion from char* and char[] types
   - migrates custom functions to well-known API:
       buf()           -> c_str()
       clean()         -> clear()
   - removes redundant functions:
       buf(char*)      -> operator=(char*)
       initBuf(char*)  -> operator=(char*)
       reset(char*)    -> operator=(char*)
   - adds well-known API methods for safer string use:
       operator []
       empty()
       operator <<
       strcmp(), strcasecmp(), etc
   - May fix bug #1088 - segmentation fault after append(char*,int)
   - Fixes several unreported char* handling bugs in String/SqString",2203,data/crawl/squid/patch_1012.diff
https://github.com/squid-cache/squid/commit/71ee0c43b8de65e9c1192486d4e737e00d3fd245,09 May 2007,"Port of 2.6/changesets/11280.patch

This is a port of
http://www.squid-cache.org/Versions/v2/2.6/changesets/11280.patch
to Squid-3.  It seems that this particular patch was skipped
or missed when other squid-2 changes were ported to squid-3.

This patch removes the AUTHENTICATE_STATE_FINISHED state from
authentication code.  It also moves some medium sized blocks of
code from the ::authenticate() method to the to
authenticateFooHandleReply() function.",166,data/crawl/squid/patch_1013.diff
https://github.com/squid-cache/squid/commit/0f283edf9f67a0ac7c8c68574c0a2b58073b7f47,08 May 2007,"	Two unrelated changes: A failed ICAP RESPMOD transaction could leave
	the HTTP transaction stuck and a bug #1819 fix.

	Change 1: After detecting an ICAP error and calling fwd->fail(),
	the HTTP Server now calls abortTransaction() (and, hence,
	comm_close) instead of calling closeServer() (and, hence,
	fwd->unregister).  Server::closeServer() is a virtual method
	that should not be called outside of Server::serverComplete().
	It would be nice to enforce that somehow. Perhaps we should at
	least rename closeServer?

	Change 2: Bug #1819 fix: retry the ICAP transaction when its
	pconn fails. The changes in this file were minor. Search
	src/ICAP/ICAPXaction.cc log around v1.7 for complete details of
	the bug #1819 fix.",44,data/crawl/squid/patch_1014.diff
https://github.com/squid-cache/squid/commit/c824c43b3fcdb57ec2168507a8bf2ff5dc4128d4,08 May 2007,"        Bug #1819 fix in three parts: Retry failed ICAP pconns.

	Bug #1819 fix, part 1: simplify ICAPInitiator-ICAPXaction link.
	Part 1 changes should have no effect on Squid functionality.

	To retry failing persistent ICAP connections we may need to
	start more than one ICAP transaction for a given HTTP message.
	This needs to be done somewhere between ICAPInitiator and
	ICAPXaction so that neither is affected much. The design will
	be similar to HTTP FwdState.

	This change reduces ICAPInitiator dependency on ICAPXaction so
	that it is easier to insert transaction retrying logic/code
	between them. It should have no effect on Squid functionality.

	HTTP client and server (both ICAPInitiators) used to keep a
	Pointer to ICAP transaction and extracted adapted headers from
	the finished transaction using that Pointer (which forced
	ICAPModXact to use a self-Pointer).  ICAP service
	representative used custom callbacks to receive new options
	from ICAPOptXact.

	Now, all ICAP initiators use the same asynchronous
	message-based API to communicate with ICAP transactions they
	initiate. On the core side, the API is defined by
	ICAPInitiator, as before. On the ICAP side, the API is defined
	by the newly added ICAPInitiate class. The latter will also be
	used as a base for ICAPLauncher, the future ICAP transaction
	retrying class.


	Bug #1819 fix, part 2: retry the ICAP transaction when its
	pconn fails. Part 2 changes should enable Squid to handle race
	conditions of ICAP pconns.

	HTTP client, server, and ICAP server representative (all
	ICAPInitiators) used to start ICAP transactions. If a
	transaction fails due to a persistent connection race
	condition, the initiator would either terminate the HTTP
	transaction or bypass the ICAP failure, violating the protocol.

	Now, instead of starting an ICAP transaction directly, the
	above initiators start ICAP Launcher. The Launcher starts the
	ICAP transaction and retries it (i.e., starts another
	transaction with the same set of parameters) if needed. The
	Launcher is both ICAP initiator (because it starts ICAP
	transactions) and ICAP initiate (because it is started by other
	ICAP initiators). The launcher proxies ICAP communication
	(usually one or two messages each way) and makes retries
	transparent to initiators.

	All ICAP transactions corresponding to the same adaptation of
	an HTTP message are sometimes referred to as a single ICAP
	query.

	An ICAP transaction can be retried until it read data from the
	ICAP server or consumed virgin body. This means that a ICAP
	transaction may go as far as writing the entire ICAP Preview
	before aborting in a retriable state. When retrying, persistent
	connections are not used. If the first retry fails, the query
	fails. Thus, a query cannot contain more than two transactions.

	Two new things were added to support ICAPLauncher:

	First, AsyncJob, is a class that handles the basic logic of
	maintaining an asynchronous job or task such as an ICAP
	transaction or a launcher. All core AsyncJob functionality was
	moved from ICAPXaction and ICAPModXact classes. We could not
	use the two classes for the launcher because ICAPLauncher is
	not a transaction.  While currently specific to ICAP, this
	object may eventually be moved to Squid core and serve as a
	base for other asynchronous jobs or logical threads.

	Second, a temporary hack was added to support cbdata operations
	by two parents of a single CBDATA class (ICAPLauncher is both
	ICAP Initiator and Initiate). The second parent (ICAPInitiator)
	defines toCbdata() method that ICAPLauncher overwrites to
	provide a usable cbdata pointer to code that only sees an
	ICAPInitiator pointer. The ICAPInitiator pointer is unusable
	for cbdata when it comes from the middle of the ICAPLauncher
	object. Also, the initiator pointer is stored along with its
	cbdata so that the latter can be accessed (and unlocked) even
	if the initiator object is already deleted. These hacks will
	disappear once cbdata becomes object-aware.


	Bug #1819 fix, part 3: do not reuse a pconn when we may fail to
	retry it. Part 3 changes ensure that the HTTP message body is
	backed up when reusing a persistent connection (until we know
	there are no race conditions). They also disable pconns when we
	cannot backup enough.

	Decide on preview before connecting to the ICAP server because
	if we are doing preview, we can retry a failed pconn even if we
	cannot backup the entire body. Renamed shouldPreview() to
	decideOnPreview() and made the call less dependent on the
	context.

	Disable transaction retries if we are not using a persistent
	connection. ICAP does not talk about retrying failures other
	than pconn race conditions.

	It might be OK to retry other failures, but I have not done the
	required analysis and am not going to do that in the
	foreseeable future. For example, other failures may need other
	conditions for disabling retries (current code should disable
	retries when the first response byte is read).",1417,data/crawl/squid/patch_1015.diff
https://github.com/squid-cache/squid/commit/9522b380e6bc2faf77230a3a2ec0f3d57622e332,08 May 2007,"Author: Alex Rousskov <rousskov@measurement-factory.com
Bug #1950: cachemgr requests for auth helper stats can crash Squid

Partially-configured authentication helpers may result in Squid
crashes when requesting stats via cachemgr.  The attached patch
moves the ""is this helper valid?"" check into the helper*Stats()
function so that new helpers do not introduce more bugs like this
one.

This patch also reports invalid/nonexistent helpers, which may or
may not be the right thing to do (but would be trivial to change
since the reporting code is in one place now).",61,data/crawl/squid/patch_1016.diff
https://github.com/squid-cache/squid/commit/128fe1c6427379cd8d4b5c9cad71200a0edc0e92,24 Apr 2007,"SQUID_HELPER define for including squid.h from helpers

squid.h has some debugging stuff in it which should only apply to the main
squid binary, not various helpers also referencing squid.h.

This patch also splits the unlinkd helper from unlinkd.cc to unlinkd_daemon.cc
to make it more readable.",133,data/crawl/squid/patch_1017.diff
https://github.com/squid-cache/squid/commit/35f269984076c6649d5fed3e52592b60c2671e6b,23 Apr 2007,"Fix ""store_status == STORE_PENDING"" assertion in FTP with large responses

An FTP object that exceeds reply_body_max_size leads to an assertion
failure.  The StoreEntry is aborted by the call to appendSuccessHeader(),
but the abort callback is delayed due to using events.  We need to
check for ENTRY_ABORTED (again) right after the appendSuccessHeader()
call -- yuck.",11,data/crawl/squid/patch_1018.diff
https://github.com/squid-cache/squid/commit/3900307bea50f5c08706bd25b1fdc0e4b03f9265,21 Apr 2007,"Converted a more StoreEntry functions to class methods:

destroy_MemObject       -> destroyMemObject
storeSetMemStatus       -> setMemStatus
storeHashInsert         -> hashInsert
storeHashDelete         -> hashDelete
storeCheckTooSmall      -> checkTooSmall
storeCheckCachable      -> checkCachable
storeEntryLocked        -> locked
storeKeepInMemory       -> keepInMemory
storeCheckNegativeHit   -> checkNegativeHit
storeEntryValidToSend   -> validToSend
storeTimestampsSet      -> timestampsSet
storeRegisterAbort      -> registerAbort
storeUnregisterAbort    -> unregisterAbort
storeEntryDump          -> dump
storeSetMemStatus       -> setMemStatus
storeUrl                -> url
storeCreateMemObject    -> createMemObject
storeEntryReset         -> reset

storeAppend             -> deprecated
storeBuffer             -> deprecated
storeBufferFlush        -> deprecated",822,data/crawl/squid/patch_1019.diff
https://github.com/squid-cache/squid/commit/9c80b9ccc3dd02f00c20581bbe5978d450f14420,20 Apr 2007,"Removed a bunch of code marked UNUSED_CODE, OLD, and BROKEN_CODE

These sections of code have been marked unused for at least three
years now.  They have been removed.",351,data/crawl/squid/patch_1020.diff
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/patch_1021.diff
https://github.com/squid-cache/squid/commit/7f42bc3e23f64fca4fce5fc63df6b446756ddfb1,17 Apr 2007,"Rename cache_dir option read-only to no-store

The cache_dir read-only flag is a bit confusing. It only stops objects
from getting added to the store, it does not stop old objects from being
deleted. no-store is a more appropriate name for this option.",12,data/crawl/squid/patch_1022.diff
https://github.com/squid-cache/squid/commit/fc68f6b1d87d78fe3764e23ae5738ee0a8791e50,15 Apr 2007,"Bug #1630: TPROXY needs porting from 2.6 to 3.x

This patch adds Linux TPROXY support to Squid 3 forward
porting 2.6 code. Based on Steven Swilton work.

The changes are verified to not break non-TPROXY use, while the
TPROXY code is still untested.
If there will be issues in the optional TPROXY code we deal with
them as bugs later on.",420,data/crawl/squid/patch_1023.diff
https://github.com/squid-cache/squid/commit/91fabb0654bf9ff6dac1810027514fed4f389145,14 Apr 2007,"Added 'store_log_tags' cache manager page.  It reports counts of tags that
appear in store.log.",32,data/crawl/squid/patch_1024.diff
https://github.com/squid-cache/squid/commit/04a28d46f538763cbf06c16ffaf51826452c2f15,14 Apr 2007,"Added 'service_times' cachemgr page to report service time percentiles
rather than just median values.",162,data/crawl/squid/patch_1025.diff
https://github.com/squid-cache/squid/commit/95564b0d5546d9a75ba4c785db5ce9145e56bdc8,13 Apr 2007,"Reverted revision 1.442 change that was supposed to fix
bug #1837: Segfault on configuration error

It turns out a better fix for the same bug has been already committed
by Duane Wessels:

    1.88      +2 -2      squid3/src/store_rebuild.cc
    1.157     +9 -2      squid3/src/store_dir.cc

    store_dirs_rebuilding should be initialized to 1

    store_dirs_rebuilding is initialized to _1_ as a hack so that
    storeDirWriteCleanLogs() doesn't try to do anything unless _all_
    cache_dirs have been read.  For example, without this hack, Squid
    will try to write clean log files if -kparse fails (becasue it
    calls fatal()).",11,data/crawl/squid/patch_1026.diff
https://github.com/squid-cache/squid/commit/6a52823b02567168bf397199c205238fc246aeac,12 Apr 2007,"Added reporting of swap and memory usage (%used, %free) to cachemgr info
page.",11,data/crawl/squid/patch_1027.diff
https://github.com/squid-cache/squid/commit/5cd1125eaafd685d0978387ae3b897bf14c3d645,12 Apr 2007,"This change should fix bug #1837: Segfault on configuration error

When quitting on a fatal error, such as a configuration error, Squid may need
to write clean state/log files. Squid uses comm_ routines to do so. Thus, we
must initialize comm_ before such fatal errors are discovered.

Perhaps a better fix would be to avoid writing clean state/log files until
the old ones become dirty?",11,data/crawl/squid/patch_1028.diff
https://github.com/squid-cache/squid/commit/b07b21cca5af07ddc4f92555f88e62b63bfe9a61,10 Apr 2007,"store_dirs_rebuilding should be initialized to 1

store_dirs_rebuilding is initialized to _1_ as a hack so that
storeDirWriteCleanLogs() doesn't try to do anything unless _all_
cache_dirs have been read.  For example, without this hack, Squid
will try to write clean log files if -kparse fails (becasue it
calls fatal()).",18,data/crawl/squid/patch_1029.diff
https://github.com/squid-cache/squid/commit/c208fd0eafd3654a0b831f4802608a606a5afb62,07 Apr 2007,Cosmetic fix: added missing newline in WCCPv2 configuration dump.,4,data/crawl/squid/patch_1030.diff
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/patch_1031.diff
https://github.com/squid-cache/squid/commit/1b39caaa84db70bcd40fff82d3f98bcaf1715e61,06 Apr 2007,"	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.",869,data/crawl/squid/patch_1032.diff
https://github.com/squid-cache/squid/commit/db80e881d232aeafeac45a646154b3ca1f5d38de,25 Feb 2007,"Kill the psuedo-support for wais. Was never really implemented.

This change removes the wais_relay_host/port directives. WAIS support was
never really implemented but relied on forwarding the requests to some other
proxy/gateway using HTTP. Now this can just as well be done with cache_peer
so there is no point in having this duplicated and unmaintained forwarding
code around.",383,data/crawl/squid/patch_1033.diff
https://github.com/squid-cache/squid/commit/05f1c52c303814ab93f227fe249682a8aa258317,21 Dec 2006,"Kill the obsolete -V command line option. Not working, and not in line
with current squid.conf syntax.",23,data/crawl/squid/patch_1034.diff
https://github.com/squid-cache/squid/commit/474c3ef9052fcef02c13065d69190724847c48b9,07 Nov 2006,Remove extra newline in redirect message sent by deny_info http://... aclname,4,data/crawl/squid/patch_1035.diff
https://github.com/squid-cache/squid/commit/b7d249f9ddca7cfe73ac27d273901450e81baf31,02 Nov 2006,"Add support for wccpv2 mask assignment

Forwrd port of 2.6 changes.",535,data/crawl/squid/patch_1036.diff
https://github.com/squid-cache/squid/commit/c99de60701b56be31c01be2045d204ed411e33ca,01 Nov 2006,"	- Many ICAP fixes from Alex Rousskov accumulated on the
	  sourceforge squid3-icap branch since 2006/10, including:

        - Polished ICAP service selection code and implemented bypass of
          optional services. The code implements icap_class
          configuration directive which is currently used as a ""set of
          interchangeable ICAP services"". Squid2 and current squid.conf
          may imply otherwise.

        - Support Transfer-* ICAP OPTIONS response header. If Squid
          knows that a service does not want the URL, Squid will not use
          the service, even if it is an essential service with
          bypass=0. Note that we may make this decision before we know
          what the service wants. Eventually, ACLs should initiate and
          wait for the OPTIONS transaction for yet-unprobed services.

        - When ICAP transactions fail to connect to the service many
          times, the service is suspended until the next OPTIONS
          update. The limit is currently hard-coded to 10. Suspended
          service is a down service and will be skipped by the ACL
          service selection algorithm.

        - Rewrote the code updating ICAP service options. We no longer
          mark the service being updated as ""down"". Only presence of
          valid and fresh options is important. We also try to update
          the options before they expire to avoid any service downtime
          or use of stale options.

        - Report interesting changes in the ICAP service state, some
          with debugging level one to alert the cache administrator.

        - When cloning a request during an ICAP 204 ""No Content"" REQMOD
          response, preserve the client address so that the rest of the
          code has access to it. This change appears to fix Squid Bug
          #1712.

        - After ICAP 100 Continue, expect new ICAP headers instead of
          HTTP headers. Reset ICAP message object to be ready to parse
          ICAP headers again. (Tsantilas Christos
          <chtsanti@users.sourceforge.net>)

        - The ieof HTTP chunk-extension was written after chunk-data
          instead of being written after the chunk-size. (Tsantilas
          Christos <chtsanti@users.sourceforge.net>)

        - Merged common code from the ICAPClientReqmodPrecache and
          ICAPClientReqmodPrecache classes into the newly added
          ICAPClientVector class.  The specific vectors do not have a
          common owner (yet?) because ServerStateData and
          ClientHttpRequest do not have a common base class. Thus,
          ICAPClientVector has to rely on its kids to communicate with
          their owners. However, at least 50% of the logic was common
          and has been moved. Eventually, we may want to create a
          simple ICAPOwner API that ServerStateData and
          ClientHttpRequest can implement and ICAPClientVector can rely
          on. This will make the code simpler and more efficient.  The
          big merge was motivated by a couple of bugs that were found
          in one vector class but that did not exist or behaved
          differently in the other vector, mostly likely due to natural
          diversion of used-to-be identical code.

        - Rewrote communication between a server-side ICAPClient*mod*
          vector and its owner.  When a server-side ICAPClient*mod*
          vector was notifying its owner of more adapted data, the
          owner could delete the vector (by calling icap->ownerAbort)
          if the store entry was not willing to accept the data.  The
          same deletion could happen when a vector was notifying the
          owner of a successful termination. In all those cases, the
          vector did not expect to be deleted and could continue to do
          something, causing segmentation faults.  Now, when more data
          is available, the vector calls its owner and checks the
          return value of the call. If it is false, the vector knows it
          has been deleted and quits. When vector terminates, it calls
          its owner and trusts the owner to always delete the vector.
          The ""check return value and quit"" design is not perfect, but
          we are paying the price for isolating the vectors from their
          owners while using direct calls between them (instead of
          MsgPipe or a similar less efficient indirect approach we use
          elsewhere).

        - Renamed doIcap to startIcap and moved more common code there.
          Changed its return type to bool. We now handle three cases
          when ICAP ACLs call back:  1) No service was selected
          (because there was no applicable service or because all
          applicable services were broken and optional). We proceed as
          if ICAP was not configured.  2) The selected essential
          service is broken. This is a fatal transaction error and we
          return an ""ICAP protocol error"" HTTP error response. We could
          proceed with the ICAP stuff, but it saves a lot of cycles to
          abort early.  3) The selected service is not broken. We
          proceed with the ICAP stuff.  The old code did not detect
          case #2, even though there was code to handle that case (with
          dangerous XXX suggestions that are now gone).  The code
          should probably be polished further to move common ftp/http
          logic from icapAclCheckDone()s into ServerStateData.

        - Make sure there is an accept callback when we are accepting.
          If there is no callback and we accept, we will silently leak
          the accepted FD.  When we are running out of FDs, there is
          often no accept callback.  The old code, when running out of
          FDs, would create lots of ""orphaned"" or ""forgotten"" FDs that
          will eventually get into a CLOSED_WAIT state and remain there
          until Squid quits.  The new code does not call accept() if
          there is no accept callback and does not register the accept
          FD for reading if the AcceptLimiter is deferring, because
          when the AcceptLimiter kicks in, it will register the accept
          FD for reading. There are most likely other places/cases
          where accept FD should not be registered for reading.

        - When an exception is caught, mark the ICAP connection as
          non-reusable so that it is not recycled while a write is
          pending but simply closed instead. Our write callback will
          still be called, unfortunately, because there is no way to
          clear the callback without invalidating its data (i.e., the
          transaction pointer).  This change prevents pconn.cc:253:
          ""!comm_has_incomplete_write(fd)"" assertion from firing when
          things go wrong (e.g., the ICAP server cannot be contacted to
          retrieve OPTIONS).  Not all exceptions caught by the ICAP
          xaction should lead to the ICAP connection termination, but
          it is very difficult if not impossible to reliably detect
          exceptional conditions when it is safe to reuse the ICAP
          connection, and it is probably not worth it anyway.

        - Added Tsantilas Christos <chtsanti@users.sourceforge.net>
          to CONTRIBUTORS for fixing ICAP bugs.

        - Polished debugging.",2091,data/crawl/squid/patch_1037.diff
https://github.com/squid-cache/squid/commit/949a9c0dcf5e7f0eca515a4065d77a3d71d38fc0,02 Oct 2006,Add in a missing \n for the Squid access log format routine.,4,data/crawl/squid/patch_1038.diff
https://github.com/squid-cache/squid/commit/e293bb20eb936e746c1f5dcfd54b79e49256bcf8,30 Sep 2006,"Bug #1784: access_log syslog results in blanks syslog lines between every access log entry.

workaround: define a custom log format.

Forward port of 2.6 patch.",59,data/crawl/squid/patch_1039.diff
https://github.com/squid-cache/squid/commit/5679212470fc66161160a42412b157148133fb5f,26 Sep 2006,tcp-banger2 support for status validation and custom HTTP headers,60,data/crawl/squid/patch_1040.diff
https://github.com/squid-cache/squid/commit/2b6639175f09dbfda75a81ae495dd0e230f0c29a,19 Sep 2006,"First part of a comm layer rework

* Remove new-style CommWrite, CommFill
* Add in a low-overhead C replacement for comm_read and comm_write
* Remove the difference between comm_write and comm_old_write; everything
  is back to using the same API for now
* create a simple C-based read/write IO callback mechanism, used by
  comm_read and comm_write

Whats left to do:

* convert accept/connect to using the new C-based read/write IO callback
  mechanism (and remove the requirement to allocate/free transient
  structures)
* rework the deferred read manager code somewhat
* then, remove the new-style CommRead code and use comm_read + whatever
  the deferred read manager has become
* remove whats not being used",840,data/crawl/squid/patch_1041.diff
https://github.com/squid-cache/squid/commit/322f8ea8d117e26e42bf125fbbe2b53fb0a0b272,15 Sep 2006,Fix make check on MinGW,16,data/crawl/squid/patch_1042.diff
https://github.com/squid-cache/squid/commit/9c8434f6a8753d321762ff58685cb1ff0364b4a7,14 Sep 2006,"Windows port: split Windows service code into WinSvc.cc, allowing correct execution of make check",1963,data/crawl/squid/patch_1043.diff
https://github.com/squid-cache/squid/commit/595c79732716913858c8b6c0b301fa4672564616,07 Sep 2006,Windows port: Added Windows threads support to DiskThreads Disk module,1272,data/crawl/squid/patch_1044.diff
https://github.com/squid-cache/squid/commit/abb2a3d970250c126c0bfb434e8b1eedd9c24059,05 Sep 2006,Windows port: Added Windows Overlapped I/O support to AIO Disk module,523,data/crawl/squid/patch_1045.diff
https://github.com/squid-cache/squid/commit/74cef207ce58f308713f0918051311ad70e6c455,02 Sep 2006,Windows port: Display also the Windows handle in the FD stats.,20,data/crawl/squid/patch_1046.diff
https://github.com/squid-cache/squid/commit/1bc874d7d53dbf3c3772e27e028df4b585984e33,28 Aug 2006,Windows port: Allow safe multithreaded usage of debug(),52,data/crawl/squid/patch_1047.diff
https://github.com/squid-cache/squid/commit/ccb8b57c83bd82124bfbad90f64398794ce1a04e,28 Aug 2006,Fix another harmless fake_auth compiler warning on gcc 4.1.1 x86,8,data/crawl/squid/patch_1048.diff
https://github.com/squid-cache/squid/commit/9c05977a2939e40a7b749b10d1f2353f3ad57ba3,21 Aug 2006,Bootstrapped,2768,data/crawl/squid/patch_1049.diff
https://github.com/squid-cache/squid/commit/0f0083ed2e7027b4ded3dd7f6038217d7d98128b,20 Aug 2006,Fix an harmless compiler warning on Irix.,4,data/crawl/squid/patch_1050.diff
https://github.com/squid-cache/squid/commit/4da086c47184e1b0647602fd278f958a9b677e80,20 Aug 2006,"Portability fix: use _PATH_DEVNULL instead of ""/dev/null""",29,data/crawl/squid/patch_1051.diff
https://github.com/squid-cache/squid/commit/bef81ea59974a69c5cbe2113ea07704024a918bb,19 Aug 2006,"Bugfix the event loop idle detection - it was broken, and correct the store fs
tests to match(as the store is never idle due to cleanup events.",334,data/crawl/squid/patch_1052.diff
https://github.com/squid-cache/squid/commit/0e6205b4f1d53562b36e8d6f315f54883b944fd7,14 Aug 2006,"Bug #582: fake_auth ntlmGetString: bad ascii: ffffffb9 followed by FATAL: authenticateNTLMHandleReply: called with no result string

This is a major revision of fake_auth:

- Added support for unicode char encoding
- Added runtime debug functionality
- Removed offending fprintf(stdout)
- Removed obslete unused code sections

The support for unicode char encoding allow the usage of high ascii characters
in username with Windows NT/2000/XP/2003 clients. This still cannot work for
obsolete Windows 9x clients.",351,data/crawl/squid/patch_1053.diff
https://github.com/squid-cache/squid/commit/8ff3fa2e10cb85fb2e2edefdc4f00c935a4ca92f,12 Aug 2006,"Add AsyncEngine and TimeEngine support to the EventLoop, allowing it to
completely replace the old one embedded in main.cc - convert loop using
tests to use an event loop instance.",857,data/crawl/squid/patch_1054.diff
https://github.com/squid-cache/squid/commit/a553a5a35d4f6bf515fc77867e66276f42d04fe1,07 Aug 2006,"Create an explicit EventLoop class which can be used to run an event loop
outside of main.cc - i.e. for test cases. Refactor the event module into two
sections - EventScheduler which schedules events, and EventDispatcher which
dispatches events unconditionally. Refactor the signal handling code in
main to use an event dispatcher too, making the loop cleaner.",1848,data/crawl/squid/patch_1055.diff
https://github.com/squid-cache/squid/commit/5c2d7edbf5c9a65916e3a4e4b6484e3c1fe64760,05 Aug 2006,"Bug #1714: cache_dir coss line not shown correctly under cachemgr.cgi config

patch by Pawel Worach",4,data/crawl/squid/patch_1056.diff
https://github.com/squid-cache/squid/commit/e45d4fb562e8bb7ce70ced3c6f2afd69bced5868,03 Aug 2006,"Bug #1718: warning: the address of 'strerror_buf' will always evaluate as 'true'

newer versions of GCC is a little more picky and alerts us on design errors..",508,data/crawl/squid/patch_1057.diff
https://github.com/squid-cache/squid/commit/c1f552010167c2b92cf995be6b38d3cec1f207e9,30 Jul 2006,"Forward port of latest 2.6 WCCPv2 changes:

- Bug #1696: Correct processing of router capability info segments
- Bug #1700: WCCP fails on FreeBSD (Unable to disconnect WCCP out socket)
- WCCP2 correct dampening of assign buckets when there it lots of changes",148,data/crawl/squid/patch_1058.diff
https://github.com/squid-cache/squid/commit/29fe9bd5dbed46cea54065b252e4c2b6b23cd663,25 Jul 2006,"Bug #991: squid should fallback from resolv.conf to localhost
(according to linux resolv.conf manpage)

Forward port of an old 2.5 patch.",17,data/crawl/squid/patch_1059.diff
https://github.com/squid-cache/squid/commit/f4bd62963f0d9a651e773d26499642267951d589,08 Jul 2006,"Bug #1653: Username info not logged into Cachemgr active_requests statistics

Identd user info (RFC 931) was not used. Also added support for SSL
client certificate identification and external ACL user identification.",28,data/crawl/squid/patch_1060.diff
https://github.com/squid-cache/squid/commit/45648be2fd1d4fb41e05ba870dc73ea4e9bf3f54,05 Jul 2006,Ran indent,297,data/crawl/squid/patch_1061.diff
https://github.com/squid-cache/squid/commit/0b0cfcf2551cc75038f51612a0f2f738628dc52c,02 Jul 2006,Forward port of WCCPv2 support and latest WCCPv1 changes from 2.6.,2405,data/crawl/squid/patch_1062.diff
https://github.com/squid-cache/squid/commit/587609e984917147bd8ae21322a3c8b00dccfe44,15 Jun 2006,"Bug #1604: segfault on cachemgr when no redirectors defined

Patch provided by Gonzalo Arana.",7,data/crawl/squid/patch_1063.diff
https://github.com/squid-cache/squid/commit/663c0a384e7af8c593647fc04a89cb7051ac6cdf,14 Jun 2006,"Partial Windows native port merge:

- Native Windows comm_select() implementation",945,data/crawl/squid/patch_1064.diff
https://github.com/squid-cache/squid/commit/f3be8d137050beffbf252133f4a7052b947a19cf,02 Jun 2006,"Bug #1395: Add extra tracing to squid_ldap_auth in debug/verbose mode.
Correct example on how to connect to MS AD.",45,data/crawl/squid/patch_1065.diff
https://github.com/squid-cache/squid/commit/610ee3419c0f2cbb80e33ebfdd5d0eb5cb6995eb,30 May 2006,"Move clientCachable logic onto HttpRequest, as all the used fields in the
function where on the HttpRequest object.

Apply Gonzalo Aranas bugfix for the replacement to cachemgrRegister,
as having some options disabled/changed did not compile.",160,data/crawl/squid/patch_1066.diff
https://github.com/squid-cache/squid/commit/5add4d5c837127cf6b3fdc2abbbcbaf9f99b3693,27 May 2006,unbreak testStore testcase.,69,data/crawl/squid/patch_1067.diff
https://github.com/squid-cache/squid/commit/d9e7ee1f0e254b062ca4109ba2fe4c81b7d76c7b,23 May 2006,-mc command line option to disable memory pools,18,data/crawl/squid/patch_1068.diff
https://github.com/squid-cache/squid/commit/4daf94197f026ad450d3a84f6bf4762b8975ca88,23 May 2006,"Fix a memory corruption when building the magic Vary marker object headers

somehow this cast made things go very bad. Luckily it isn't needed as
we already hold a reference to the reply a few lines earlier.",6,data/crawl/squid/patch_1069.diff
https://github.com/squid-cache/squid/commit/f24583c1402155d55872879590611869f0669a08,21 May 2006,Fix http_range test to run again.,325,data/crawl/squid/patch_1070.diff
https://github.com/squid-cache/squid/commit/6a4a73125aef880c31cf63f2cd84ca2d343aa590,11 May 2006,"Also need a generic xassert to go with out assert, to be used by helpers
etc.",56,data/crawl/squid/patch_1071.diff
https://github.com/squid-cache/squid/commit/f323a09d58158ca8a41aff02ac5bd8a02e26a51c,11 May 2006,Broke out assert define into it's own include. Relied upon by MemPool,70,data/crawl/squid/patch_1072.diff
https://github.com/squid-cache/squid/commit/e85e41a2a1150078236a1ac38fdf2ebf14740e87,11 May 2006,"Bug #1530: Make ""foo"" a more intuitive error message by just using
assert instead.",6,data/crawl/squid/patch_1073.diff
https://github.com/squid-cache/squid/commit/4dd8a5fdd423be2e27c26b9ca906ec110b15ced2,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,48,data/crawl/squid/patch_1074.diff
https://github.com/squid-cache/squid/commit/a9925b40bf8179ee4468c997960413a6d510abf5,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,903,data/crawl/squid/patch_1075.diff
https://github.com/squid-cache/squid/commit/42aa79b5053a3d9046c57e56018e9e5c6a3488c7,05 May 2006,Forward port patch #1518 - strip NT domain component from usernames.,28,data/crawl/squid/patch_1076.diff
https://github.com/squid-cache/squid/commit/c21ad0f5b4216a1840a69fc8d59b7f4753b1bbb3,03 May 2006,"Add a StoreEntryStream class for use with store entries (An alternative to Packer, which uses c++ equivalents to printf. This is part of the work to decouple the squid modules to allow easier tests.",1383,data/crawl/squid/patch_1077.diff
https://github.com/squid-cache/squid/commit/3b299123c03cdf557bdfae37260f1f80014890f3,28 Apr 2006,"Replacing ClientBody class with BodyReader.

The old ClientBody code did not allow us to insert ICAP into the
flow of an HTTP request.  Code in http.cc called read functions in
client_side.cc when forwarding a request body.  But with ICAP in
the middle, HTTP needs to get the message body from ICAP, not
client_side.

The new BodyReader is similar to ClientBody.  Now read and abort
functions are pointers, rather than hard-coded in HTTP/FTP modules.",906,data/crawl/squid/patch_1078.diff
https://github.com/squid-cache/squid/commit/b1b1529284de11770b3fa213df28f3f33b26275f,25 Apr 2006,Fix make check with --disable-inline.,122,data/crawl/squid/patch_1079.diff
https://github.com/squid-cache/squid/commit/d295d770bbd2f84321b092fbb097f0867acca675,23 Apr 2006,"BUGFIX: max_user_ip was broken: initialising to -1 meant that the ACL appeared
        already configured to the parser, and thus it never configured to a
	valid value. Fixed with a test case to ensure that a normal ACL line
	will parse the -s and the limit values correctly, and a separat test
	that the defaults are as expected.",2547,data/crawl/squid/patch_1080.diff
https://github.com/squid-cache/squid/commit/81beaff8c966244209bd03c02655290aecc4bf0d,18 Apr 2006,Unbreak unit tests - add stubs for newly intertwined files.,307,data/crawl/squid/patch_1081.diff
https://github.com/squid-cache/squid/commit/faadb1b64436077d7f3b02e30cb9684b1c9ad075,10 Apr 2006,removed obsolete ldap files. These was moved to the ldap helper directory,662,data/crawl/squid/patch_1082.diff
https://github.com/squid-cache/squid/commit/beed27a22dcbf485815b572eeac2b68a5a672f78,02 Apr 2006,"Bug #1504: misleading error message message for bad/unresolveable cache_peer name

Forward port of 2.5 changes.",73,data/crawl/squid/patch_1083.diff
https://github.com/squid-cache/squid/commit/f959852857342c5245acd0873c8a699b2be81d85,02 Apr 2006,"Bug #1506: confusing statistics on stateful helpers (NTLM auth)

Forward port of 2.5 changes with some arrangements.",25,data/crawl/squid/patch_1084.diff
https://github.com/squid-cache/squid/commit/b0c8f295e67451cc061bbd60ec6533ef1c2b9bde,19 Mar 2006,external acl helper for tracking user sessions,234,data/crawl/squid/patch_1085.diff
https://github.com/squid-cache/squid/commit/907e86e0f0358e2798b086705cac5c5af7c8e392,01 Mar 2006,"Bug #1478: add nowrap to cachemgr.cgi html tables

Patch from Gonzalo Arana",4,data/crawl/squid/patch_1086.diff
https://github.com/squid-cache/squid/commit/253caccb08f5a5a23ec0c9b89272145213c09ec0,26 Jan 2006,"The purpose of this change is to add ICAP RESPMOD support for FTP responses.

I created a ""ServerStateData"" class which has common elements of both
HttpStateData and FtpStateData.  It becomes a base class for both
of them.  ICAP now uses the ServerStateData methods.",643,data/crawl/squid/patch_1087.diff
https://github.com/squid-cache/squid/commit/06a0702bd9c40d0dc0894978ce32949096607c36,24 Jan 2006,64-bit compatibility,4,data/crawl/squid/patch_1088.diff
https://github.com/squid-cache/squid/commit/6f0aab861682a3d9c8f72228b0ac01eac5e52526,24 Jan 2006,Started converting ftp.cc to use more C++ class methods,714,data/crawl/squid/patch_1089.diff
https://github.com/squid-cache/squid/commit/b6b6f46632f4820a1a473fd51f38040945880fe7,04 Jan 2006,"Converted FwdState to a C++ class to take advantage of features
such as refcounting.",1345,data/crawl/squid/patch_1090.diff
https://github.com/squid-cache/squid/commit/72fb094b16946f3c3a52575b99a1c76cdc1b3df5,29 Dec 2005,Radius Digest authentication extension draft,2140,data/crawl/squid/patch_1091.diff
https://github.com/squid-cache/squid/commit/7ed0602b28c0cc2f7e55e4e9238f5202aa3e386a,29 Dec 2005,Split digest_pw_auth into digest_pw_auth and digest_ldap_auth,1425,data/crawl/squid/patch_1092.diff
https://github.com/squid-cache/squid/commit/625672046a6efd88726bcc9bde2c9fbcf236fb5c,28 Dec 2005,Bootstrapped,12493,data/crawl/squid/patch_1093.diff
https://github.com/squid-cache/squid/commit/74925dd488ab53f823724dfbf051152fa1bf86af,26 Dec 2005,"Allow ""make check"" with --enable-delay-pools configure option",34,data/crawl/squid/patch_1094.diff
https://github.com/squid-cache/squid/commit/7cab7e9f4b17462ae83cc30fcaa96cd76c122a3d,23 Dec 2005,"RFC 3507 says that there should be a space after comma in
the Encapsulated list.",2,data/crawl/squid/patch_1095.diff
https://github.com/squid-cache/squid/commit/9d0cdbb9a001615b7ea0a76f5ed30ba0ec4f16a0,14 Dec 2005,"Finished support for parsing ICAP OPTIONS Transfer-* headers.

Squid does not yet use the Transfer-* extensions to make ICAP forwarding
decisions.",98,data/crawl/squid/patch_1096.diff
https://github.com/squid-cache/squid/commit/781ce8ff40f9cd5e6f5c4ec84ff2a978cff98ab0,07 Dec 2005,"Turned pconn.cc into C++ classes.  There are now separate persistent
connection pools for client-side, server-side, and now ICAP.

Accounting for persistent connection use still sucks because HTTP
(http.c) and ICAP state structures don't have any way to keep track
of how many times a given TCP connection was used.  So we'll keep
abusing fd_entry[] for this purpose.",566,data/crawl/squid/patch_1097.diff
https://github.com/squid-cache/squid/commit/2dfede9e81b81addee5524cfb113d30da694687d,03 Dec 2005,Some additions and changes for ICAP server connection reuse.,54,data/crawl/squid/patch_1098.diff
https://github.com/squid-cache/squid/commit/12b91c99f1a92940deca96f1a2cae3eca079324e,02 Dec 2005,"A few changes related to how the ICAP request header is built:

 - Added 'icap_persistent_connections' directive to squid.conf to turn
   on/off ICAP server connection reuse.

 - Renamed 'icap_send_auth_user' directive to 'icap_send_client_username'

 - Removed 'icap_auth_scheme' directive since it is not currently used.

 - Fixed ICAPModXact::makeRequestHeaders() to add X-Client-IP and
   X-Client-Username only when those options are enabled in squid.conf.",71,data/crawl/squid/patch_1099.diff
https://github.com/squid-cache/squid/commit/a97e82a8d478c67ede8fc78cf41b88ea29b4d5ca,02 Dec 2005,"Add X-Client-IP and X-Client-Username extention headers to ICAP
requests.",18,data/crawl/squid/patch_1100.diff
https://github.com/squid-cache/squid/commit/1dd6edf2e37e893c6515fce0452228d96f987442,24 Nov 2005,"64 bit broken again !!!!

This patch casts long ints to 32-bit ints for printfs so gcc doesn't bail",16,data/crawl/squid/patch_1101.diff
https://github.com/squid-cache/squid/commit/bab98cf32cbb0721831c926bebf8fab8f5302032,22 Nov 2005,"Ooops, ICAPAnchor should really be ICAPClientRespmodPrecache and
ICAPClientSideHook should really be ICAPClientReqmodPrecache",176,data/crawl/squid/patch_1102.diff
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/patch_1103.diff
https://github.com/squid-cache/squid/commit/de31d06f4540ce42c85045e439e46009a6d79119,22 Nov 2005,"Added ICAP REQMOD PRECACHE

These are fairly significant changes to client_side processing code to
support ICAP request modification.

One important change is in the way that various asynchronous procedures
are handled.  Previously, the async events such as ACL checks, redirector,
and no_cache checks were chained together.  e.g., aclCheckDone would call
redirectorStart, etc.

Now there is a doCallouts() function that keeps track of which operations
have been done and which have not.  This is where we inserted the ICAP
callout.",503,data/crawl/squid/patch_1104.diff
https://github.com/squid-cache/squid/commit/ba126beee15969a7464e0b59db0ff7a73c1196da,22 Nov 2005,"Turned ""leakfinder"" into something more like C++.",152,data/crawl/squid/patch_1105.diff
https://github.com/squid-cache/squid/commit/6b610e346012048edffcebd010f6c736cb3db626,20 Nov 2005,"DNS search list improvements:

- Added support for Windows DNS search list
- Added display of search list in DNS stats",76,data/crawl/squid/patch_1106.diff
https://github.com/squid-cache/squid/commit/7da10d2bc6a00bfbac4d7e7335a2acdfe33a650a,07 Nov 2005,Handle crashing auth helper more gracefully in negotiate/ntlm,22,data/crawl/squid/patch_1107.diff
https://github.com/squid-cache/squid/commit/cf154edc5fe1e856fccf174400c7a288ca08fcb1,01 Nov 2005,Added helper executable name in stateful helper stats,4,data/crawl/squid/patch_1108.diff
https://github.com/squid-cache/squid/commit/736a9a4df38fb23926e09c7b3c1cfb34c4b1779b,31 Oct 2005,"Windows port: addition of native external ACL helper.

- mswin_check_lm_group:  Windows domain groups membership check
                         (Based on Windows Lan Manager framework)

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",1343,data/crawl/squid/patch_1109.diff
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/patch_1110.diff
https://github.com/squid-cache/squid/commit/a1d716fa625a38f5409f61022f98c3b96b84142d,29 Oct 2005,Spell check.,4,data/crawl/squid/patch_1111.diff
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/patch_1112.diff
https://github.com/squid-cache/squid/commit/638b2ce3a2f6601d8edf51928abe580917cc493c,16 Oct 2005,"Bug #1391: FATAL: Incorrect scheme in auth header

Forward port of 2.5 patch.",23,data/crawl/squid/patch_1113.diff
https://github.com/squid-cache/squid/commit/863d85ee0444590909c991dc54da448c61f67365,19 Sep 2005,Added an implementation of parseFirstLine() for class HttpRequest,46,data/crawl/squid/patch_1114.diff
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/patch_1115.diff
https://github.com/squid-cache/squid/commit/429f7150b1079df416b2718f80c75c833b432987,16 Sep 2005,"Made HttpMsg::parseFirstLine() a virtual method for parsing the
status and request lines of HTTP requests and responses.
Still need to write HttpRequest::parseFirstLine().",36,data/crawl/squid/patch_1116.diff
https://github.com/squid-cache/squid/commit/5627a633e3a0e7f5d2edada4b7fb0323f23e7753,15 Sep 2005,"Bug #1204: FTP listings uses ""BASE HREF"" much more than it needs to,
confusing authentication.

This patch changes the directory cleanup to use relative URLs rather
than BASE HREF when a directory is requested without trailing /

Forward port of 2.5 patch.",54,data/crawl/squid/patch_1117.diff
https://github.com/squid-cache/squid/commit/80dc929dd9317532af1637fd3adbf334cd3896aa,15 Sep 2005,"Forward port of old 2.5 missing changes:

- Cosmetic cleanup of how // is handled within FTP URL-paths
- Clean up use of BASE HREF in ftp listings, mainly in ;type=d format
  listings.
- Bug #1253: BASE HREF missing on ftp directory URLs without /",20,data/crawl/squid/patch_1118.diff
https://github.com/squid-cache/squid/commit/f8c818e47e066e603af6b5afcb90269365c14f74,14 Sep 2005,"Bug #1370: squid_ldap_auth -U does not work

by peter stamfest <peter@stamfest.at>

Forward port of 2.5 change",10,data/crawl/squid/patch_1119.diff
https://github.com/squid-cache/squid/commit/8596962e4e813f7972c342e75a5396f0b65fe92e,13 Sep 2005,"Changes to HTTP request and reply parsing classes, started by Alex,
further hacked by DW.  These are forward-ported from ICAP development
on sourceforge.

Alex's original commit message:

- Moved parts common to HttpReply and HttpRequest to HttpMsg. HttpMsg is
  needed to be able to pipe HTTP messages using MsgPipe without knowing
  whether the message being piped is a request or response. It is also
  handy for keeping ICAPXaction mostly independent from the ICAP request
  method (and, hence, the primary HTTP message kind). Moving previously
  duplicated code to a single location is supposed to be good long-term.
  More polishing work is needed (e.g., protocol and protoPrefix need
  to be merged and so can be lastmod and last_modified).

- Added reset/parse/pack methods to parse and pack HTTP messages without
  knowing their direction/kind. HttpRequest::parse() is not implemented
  yet but we have code that should be reusable for that.

DW's additional changes

- HttpRequest didn't really have any parsing methods or state.
  Moved the HttpReply parsing methods to HttpMsg and created a
  virtual function for parsing the start line (request line or
  status line).

- Added full_uri flag to packInto() method because ICAP needs
  full URIs in encapsulated requests.",563,data/crawl/squid/patch_1120.diff
https://github.com/squid-cache/squid/commit/f988d08e657c89920167d55627d92011feb6910c,11 Sep 2005,Bug #1389: LDAP helpers does not wotk with TLS (-Z option),16,data/crawl/squid/patch_1121.diff
https://github.com/squid-cache/squid/commit/abacf7768798c5e4d190a19f1a19ab2ddcc96aa3,03 Sep 2005,"Bug #1380: E-mail sent when cache dies is blocked from many antispam rules

The e-mail sent when the cache dies use as ""From:"" field the Squid internal
appname ""squid"".
This ""From:"" address is invalid for the majority of antispam filters because
doesn't contains a valid domain name.

This patch adds the 'mail_from' directive to squid.conf, allowing to specify the
from e-mail address and change the default to use 'appname@unique_hostname'.",24,data/crawl/squid/patch_1122.diff
https://github.com/squid-cache/squid/commit/a572d8be51590c02b60374de995595fcb3e30df5,10 Jul 2005,"Bug #1307: squid -k fails in combination with chroot after patch for bug 1157

Forward port of 2.5 patch.",38,data/crawl/squid/patch_1123.diff
https://github.com/squid-cache/squid/commit/137a13ea244569b00330496ed19de4f90eb9cace,03 Jul 2005,"Bug #767: Problems making Squid 3.0 PRE3 64 bit

Fixed the following on HP Tru64 and probably on some other 64 bit platforms:

- assert() must test logical expressions, not pointers
- STATUS define conflict in parse.c (snmplib)
- Warnings SMB, fakeauth and MSNT helpers
- Various debug() ==> debugs() changes
- Alpha asm access to CPU profiling info
- timezone should be long, not time_t
- Various clean of ESI code
- assert() definition problem in diskd.cc",192,data/crawl/squid/patch_1124.diff
https://github.com/squid-cache/squid/commit/97b131b6130450dd8a7f30cfa87f9d0ac18de508,02 Jul 2005,"Samba-2.X is declared unsupported by the Samba team. Remove the old
winbind helpers to reduce confusion. People wanting winbind integration
really should use Samba-3.X these days.",4319,data/crawl/squid/patch_1125.diff
https://github.com/squid-cache/squid/commit/c9e2e0e8b71fa8e5bbd17632663617f5452188b7,27 Jun 2005,"Bug #1308: squid -k reconfigure internal corruption if the type of a
cache_dir is changed

Failed to detect if the type of an existing cache_dir was changed,
calling the parser function of the new type with the internal data of
the existing one..

This patch detects this and logs to cache.log (and the console) that a
restart is required.

Forward port of 2.5 patch.",68,data/crawl/squid/patch_1126.diff
https://github.com/squid-cache/squid/commit/7505774d0d66b25e766febb6cbdea8553af75505,26 Jun 2005,"Bug #1220: Title in FTP listings somewhat messed up

Show FTP URLs in decoded form to allow for national
characters etc to be displayed in a sane manner.

Forward port of 2.5 patch.",49,data/crawl/squid/patch_1127.diff
https://github.com/squid-cache/squid/commit/e2b35d089fc2121adfd878c7479b1467f3e72b12,03 Jun 2005,"Use PRIu64 ISO C99 Standard printf() macro for 64 bit unsigned int
instead of llu. This allow the correct formatting of 64 bit printf
on some systems like native Windows.",18,data/crawl/squid/patch_1128.diff
https://github.com/squid-cache/squid/commit/625ab59b46360ff5d03674fd7da0d01a38bc7fac,03 Jun 2005,"Allow the native Windows build of LDAP based Digest hash helper like
squid_ldap_auth and squid_ldap_group.",52,data/crawl/squid/patch_1129.diff
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/patch_1130.diff
https://github.com/squid-cache/squid/commit/d3f603c8d6803677c1a9706a47cb45565bccd496,15 May 2005,"Bug #802: squid should report username in stats when auth is enabled

This patch adds user info in cachemgr Client-side Active Requests page",18,data/crawl/squid/patch_1131.diff
https://github.com/squid-cache/squid/commit/d24ef4e96b7e08c55767889ec36eb4ff7d0aa743,14 May 2005,"Implement DNS Virtual Circuit lookups (TCP) as required when seeing a
truncated response.",223,data/crawl/squid/patch_1132.diff
https://github.com/squid-cache/squid/commit/4b0f5de8653310c14d9adbccdd27ae8de543d088,06 May 2005,"Bug #1166: Configuration confusing when empty acls are encountered
Bug #1255: http_access line with unknown acls

This patch makes Squid very strict about access configuration errors.
Previously Squid ignored most errors, now it rejects the configuraiton
with an description of the error seen.",258,data/crawl/squid/patch_1133.diff
https://github.com/squid-cache/squid/commit/248109d21d059db89fe2dc255c75ebe177594919,06 May 2005,#define VERSION conflicts with autoconf. Use PROGRAM_VERSION,4,data/crawl/squid/patch_1134.diff
https://github.com/squid-cache/squid/commit/64ffef5e31e8f777b78433310774cdd6fc4865f1,01 May 2005,"Bug #1267: Cosmetic change to DISKD statistics

This patch align labels and expand OPS and SUCCESS fields of DISKD cachemgr
stats.",16,data/crawl/squid/patch_1135.diff
https://github.com/squid-cache/squid/commit/0fd205780bbcbdd47190c50e6aba3b71ec17b0df,25 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",2,data/crawl/squid/patch_1136.diff
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/patch_1137.diff
https://github.com/squid-cache/squid/commit/42ad37afe78aa892c232a24047339ffbc3dd3d37,24 Apr 2005,"Bug #1094: Fix for CVE-1999-0710: cachemgr malicouse use

This patch adds access controls to the cachemgr.cgi script, preventing
it from being abused to reach other servers than allowed in a local
configuration file.

Forward port of 2.5 patch.",218,data/crawl/squid/patch_1138.diff
https://github.com/squid-cache/squid/commit/691aef5aec7691fcd4cbd31e3ea14bf0a33a24ae,23 Apr 2005,"pthread_t is not always an unsigned long, a type cast is needed.",4,data/crawl/squid/patch_1139.diff
https://github.com/squid-cache/squid/commit/b04654945673550e4d527cd79bcf7bab3409b7e4,07 Apr 2005,Added per thread usage info in cachemgr Async IO Function Counters.,27,data/crawl/squid/patch_1140.diff
https://github.com/squid-cache/squid/commit/5e6d4736fd14ff2fdb1f0df469c817cfea840240,07 Apr 2005,"Bug #1227: squid should syslog to daemon facility not local4

  this patch adds a new command line option -l to specify the syslog
  facility.

Forward port of 2.5 patch.",182,data/crawl/squid/patch_1141.diff
https://github.com/squid-cache/squid/commit/c2d4889f56b87a1205ffe09cb1c6146d5cc56bdf,29 Mar 2005,"Crude implementation of ESIParser registry, making ESIParser.cc
independent of the available parsers, indirectly solving the
libxml2/expat conflict and preparing for easy buildtime selection of the
available parsers.",78,data/crawl/squid/patch_1142.diff
,,,,
https://github.com/squid-cache/squid/commit/4a6186993e7c50daba6d22b7eeac7ec6865a5a9f,23 Mar 2005,Release as squid_ldap_group version 2.17,23,data/crawl/squid/patch_1143.diff
https://github.com/squid-cache/squid/commit/20e869bf11fba5e7b98c074d91b1b76a37ddc153,19 Mar 2005,"Bug #1258: LDAP helpers fails to compile with SUN LDAP SDK

Forward port of 2.5 patch with addition of MinGW support.",75,data/crawl/squid/patch_1144.diff
https://github.com/squid-cache/squid/commit/3d61c4764e0f17b8c63370706675bc3d3261e6c2,19 Mar 2005,"From ssl-2.5 2004/12/02 00:53:40

%USER_CERTCHAIN external_acl_type tag, returning the complete client SSL
certificate chain",66,data/crawl/squid/patch_1145.diff
https://github.com/squid-cache/squid/commit/a82a4fe446707715ba97e5e9a51f1bf9178b0814,19 Mar 2005,"From ssl-2.5 2004/12/02 00:53:40

Basic support for CRL lists",136,data/crawl/squid/patch_1146.diff
https://github.com/squid-cache/squid/commit/4ac9968fe81ac8105f775a32a7203433126de186,18 Mar 2005,"From ssl-2.5 2004/10/22 14:52:33

%USER_CERT external_acl_type giving the user certificate in PEM format",71,data/crawl/squid/patch_1147.diff
https://github.com/squid-cache/squid/commit/8250688c4898d1471fa8466fe38d6c336d2ce560,18 Mar 2005,"do_debug(section, level), a macro to conditionally check if a certain
debug level is active.",5,data/crawl/squid/patch_1148.diff
https://github.com/squid-cache/squid/commit/6b2936d5f814e1bbf9619ef82e46a3ac8ab649fb,18 Mar 2005,"From ssl-2.5 2004/04/18 01:09:07

sslcontext parameter, for controlling the SSL Session cache context ID",29,data/crawl/squid/patch_1149.diff
https://github.com/squid-cache/squid/commit/36584579a9d2e78ae4106ea5cec4976a096de85b,13 Mar 2005,"Bug #1257: compile warnings due to pid_t not being an int

Forward port of 2.5 patch and added use of debugs() where applicable",23,data/crawl/squid/patch_1150.diff
https://github.com/squid-cache/squid/commit/52d3f1986d5dd7a7a89d039f20c359f593d24658,06 Mar 2005,"Forward port of all the header parsing cleanup of 2.5.STABLE8:

- squid-2.5.STABLE7-header_parsing.patch
- Bug #1228
- Bug #1242
- Relaxed_header_parser squid.conf option.
- New ERR_INVALID_RESP error message.",1020,data/crawl/squid/patch_1151.diff
https://github.com/squid-cache/squid/commit/c33aa074d7abab587f479c0954e6526a1316ed4a,03 Mar 2005,Add support for seding access.log via syslog,89,data/crawl/squid/patch_1152.diff
https://github.com/squid-cache/squid/commit/5529ca8a08bb6c0ebe55ed26589ac3e8d6d1fd6c,09 Feb 2005,"Bug #1154: Disable Path-MTU discovery on intercepted requests

This patch adds a disable-pmtu-discovery option to http_port directive
allowing one to disable Path-MTU discovery on accelerated requests.

Based on 2.5 patch.",74,data/crawl/squid/patch_1153.diff
https://github.com/squid-cache/squid/commit/3cc8b8b69bf1bedd693eb227cd434910cd10ccbd,30 Jan 2005,"Bug #1187: Usernames with whitespace

Add sanity checks on LDAP user names

Forward port of 2.5 patch.",35,data/crawl/squid/patch_1154.diff
https://github.com/squid-cache/squid/commit/78d7484b527318c984af7ef9e601b56907578091,14 Jan 2005,"Kill netmask guessing in IP based ACLs. If netmask is not specified
assume a /32 mask.",85,data/crawl/squid/patch_1155.diff
https://github.com/squid-cache/squid/commit/fc98416e8e157118dbccf371405050dbe1859284,10 Jan 2005,Imported RFC and I-D documents relevant to HTTP proxies,25132,data/crawl/squid/patch_1156.diff
https://github.com/squid-cache/squid/commit/fcc351807bcecc7e20a032afdc38cdc14b8d81ee,27 Dec 2004,"Bug #1149: segfault on mgr:vm_objects

Forward port of 2.5 patch",110,data/crawl/squid/patch_1157.diff
https://github.com/squid-cache/squid/commit/4c3ef9b20c5e0d23b49c69bee1e148dc22ddcf18,22 Dec 2004,"Bug #707: Added functionality to query the origin server for IMS requests.

Original 2.5 STABLE3 patch from Brian.

This adds two new config options:

1.  refresh_all_ims (on/default off) will force all IMS queries to pass
through to the origin server (or parent cache).
2.  refresh_patterns have a refresh-ims option, which does the same, but on a
more selective level.


:wq",55,data/crawl/squid/patch_1158.diff
https://github.com/squid-cache/squid/commit/5ea33fce1749c26148150d7f0d0959334c6b91ba,22 Dec 2004,Bug #1168: Forward port of 2.5 patch for handle crashing helpers more gracefully,32,data/crawl/squid/patch_1159.diff
https://github.com/squid-cache/squid/commit/b902a58cb58daf4507d3d286f2338379fc20218a,22 Dec 2004,"bug# 1118: Squid sends requests to redirectors with shutdown flag on

Incremental Patch",6,data/crawl/squid/patch_1160.diff
https://github.com/squid-cache/squid/commit/d8f10d6ad810fec71d79f63336da847228441bfb,22 Dec 2004,Bug #1118: Squid sends requests to redirectors with shutdown flag on,63,data/crawl/squid/patch_1161.diff
https://github.com/squid-cache/squid/commit/1d8e65c40d26d3239fa0a2698d514d4895c415e1,21 Dec 2004,Bug #1165: Fix type error for diskd on openbsd,7,data/crawl/squid/patch_1162.diff
https://github.com/squid-cache/squid/commit/5bf79e53246bc62348102baf2c51f5d304f089bd,21 Dec 2004,Bug# 103 post merge fix for stat.cc,10,data/crawl/squid/patch_1163.diff
https://github.com/squid-cache/squid/commit/55cbc1b58b471f6bb1d6204bb1a687f27361f1fa,21 Dec 2004,Bug #103: Use meaningful labels in the hit/miss statistics (via hno),10,data/crawl/squid/patch_1164.diff
https://github.com/squid-cache/squid/commit/b9df790bea1a607840e416c47155c9b25f12a1b1,21 Dec 2004,make dist fixes towards fixing bug #747. Delete archids from broken cppunit make dist.,23410,data/crawl/squid/patch_1165.diff
https://github.com/squid-cache/squid/commit/af3004ff0ba41801594e0124a793d80258553c22,20 Dec 2004,Fix Stack which was broken in HEAD. Also update bootstrap.sh for newer automake and autoconf.,35439,data/crawl/squid/patch_1166.diff
https://github.com/squid-cache/squid/commit/59254e075e36fe4203b019b832a659aceb02763f,10 Dec 2004,Bug #1152: Document --enable-esi in squid.conf.default,9,data/crawl/squid/patch_1167.diff
https://github.com/squid-cache/squid/commit/7e6b941f670628fe1cf221acbb62f21fcbad8358,08 Nov 2004,Bug #1085: Compiler errors compiling with GCC 3.4 series,136,data/crawl/squid/patch_1168.diff
https://github.com/squid-cache/squid/commit/38f9c54773513ecc64a18c3b35c0b0fa091fbc9a,07 Nov 2004,"Bug #1057: New options to refresh-pattern configuration

By Przemek Czerkas and David S. Madole

This is based on patch by David S. Madole
http://www.omdev.com/squid/squid-2.2.STABLE4.ignore-no-cache.patch

I've added more options to refresh-pattern configuration:

- 'ignore-no-cache' ignores any ""Pragma: no-cache"" and ""Cache-control:
   no-cache"" headers received from a server,

- 'ignore-private' ignores any ""Cache-control: private"" headers
   received from a server,

- 'ignore-auth' caches responses to requests with authorization
   irrespective of ""Cache-control: "" headers received from a server.

Warning - these options VIOLATE the HTTP standard!",241,data/crawl/squid/patch_1169.diff
https://github.com/squid-cache/squid/commit/646583784bd1c6a5ae495ba2d50526130fd1f17e,27 Sep 2004,"Bug #431: case insensitive authentication

Most authentication backends are case insensitive on the user name, and
so should Squid. (with option for case sensitive operation)

Patch ported to Squid-3 by Guido",18,data/crawl/squid/patch_1170.diff
https://github.com/squid-cache/squid/commit/8faa78e6a1c3c1a785cad9982ba928aa728171eb,25 Sep 2004,Bug #882: Add delay pools information to active_requests,10,data/crawl/squid/patch_1171.diff
https://github.com/squid-cache/squid/commit/e39ea462af3390ffbf4236477506e57f2bcef202,25 Sep 2004,"Bug #1065: Allow build of LDAP helpers on Windows using the native LDAP libraries

by Guido",101,data/crawl/squid/patch_1172.diff
https://github.com/squid-cache/squid/commit/966f432f2921caa212146ea374fc340d4fcfec3d,25 Sep 2004,"Bug #1066: Wrong usage of unlink() in store_dir_coss.cc
patch by Guido",15,data/crawl/squid/patch_1173.diff
https://github.com/squid-cache/squid/commit/c44950c478a4dce28c9487113edfdc54a0ab5723,04 Sep 2004,Bug #947: deny_info redirection with requested URL escaped wrongly,10,data/crawl/squid/patch_1174.diff
https://github.com/squid-cache/squid/commit/f5691f9c44e06c13e6970ff31f0fe540650f787e,30 Aug 2004,/tmp/cvsZKn66v,12787,data/crawl/squid/patch_1175.diff
https://github.com/squid-cache/squid/commit/fa85aa89ff5cf6c07cae814e2346f0dca05baec7,24 Aug 2004,merge in cppunit test support. see lib/tests for examples of use,103307,data/crawl/squid/patch_1176.diff
https://github.com/squid-cache/squid/commit/1958420ab5c704cef4debfc8300b7a756cedc002,15 Aug 2004,"external_acl helpers updated to use the new protocol format based
on URL-escaped strings rather than quoted words..",333,data/crawl/squid/patch_1177.diff
https://github.com/squid-cache/squid/commit/dc1af3cf5bfffb368e2f47b6543f7654d2c8df54,15 Aug 2004,"The external_acl helper protocol breaks down if there for whatever reason
is newines embedded in the data.

This patch changes the external acl helper protocol to use URL encoding
with an optional configuration parameter to switch back to the ""shell style""
quoting used in Squid-2.5.

In addition the ""shell style"" quoting format is extended to support newlines
by the traditional \n and \r codes.",102,data/crawl/squid/patch_1178.diff
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/patch_1179.diff
https://github.com/squid-cache/squid/commit/c40690f53a04243834a4d092a7f04223c073ab8b,01 Jun 2004,Bug #969: FTP directory listing DOCTYPE misread by certain thirdparty tools,4,data/crawl/squid/patch_1180.diff
https://github.com/squid-cache/squid/commit/5fcad6f979a3a0d23e134e7bf8bdc890d9b0d8a4,08 Apr 2004,Improved HA1 password file format. compatible with Apache htdigest,79,data/crawl/squid/patch_1181.diff
https://github.com/squid-cache/squid/commit/307228f182ee6ec50cfcb73c0b66f73e6144a8ca,03 Apr 2004,"Bug #935: squid_ldap_auth can be confused by the use of reserved characters

squid_ldap_auth may be confused by the use of reserved characters allowing
the login name to be masqueraded in different manners possibly allowing the
user to partially bypass certain per-user restrictions or confuse third
party accounting packages.

Note that the user can not bypass the login procedure as such. All he can
do is to make the login name look different than normal. There is still
full audit trails on who the user is etc.

The patch also adds and documents a -d flag to both squid_ldap_auth and
squid_ldap_group to allow for easier tracing of the operation of these
programs if results is not what is expected.",62,data/crawl/squid/patch_1182.diff
https://github.com/squid-cache/squid/commit/f900210a9085cfada366a8ef4ff8f8267ac0a896,01 Mar 2004,"All of this is to fix a simple FTP crash if a HTTP keepalive+pipelined
request closes too early.

* fix the half-closed detection logic to be called once a second
  out of an event
* modify clientReadRequest() - break out the parsing logic into a seperate
  routine which can be called elsewhere to attempt to parse request(s) from
  the read buffer (ie clientParseRequest())
* call our clientParseRequest() routine in keepaliveNextRequest() to
  try parsing a request out of the read buffer before running off and
  scheduling another read (or dequeueing a parsed but deferred request)
* improve the half-closed detection: close the filedescriptor if its
  marked as half-closed and we reach a point where there are no pending
  requests and we're left to try reading from the FD. Since its half-closed,
  this signifies its end of life.
  (this occurs in keepaliveNextRequest() _and_ clientReadRequest() as
  they are the beginning and end points of any request.)",235,data/crawl/squid/patch_1183.diff
https://github.com/squid-cache/squid/commit/db7778f101e272646ad4c090773251215ae7438a,23 Oct 2003,dump object contents on memory overwrite fatals,10,data/crawl/squid/patch_1184.diff
https://github.com/squid-cache/squid/commit/17d97ab38fcac3bb6d5261db7da1ae93890627e1,20 Oct 2003,make the error message on incorrect memory reads more useful,6,data/crawl/squid/patch_1185.diff
https://github.com/squid-cache/squid/commit/e40497560cb00f30ce91a4771a5c23ff39418fc8,29 Sep 2003,"Summary: Merge Gerard's AIX signed and datatype size patches.
Keywords:

Patches applied:

 * gerard@eviston.net--squid/squid--aix-fixes--3.0--patch-5
   typecast ntohl() in wccp.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-3
   debug() ==> debugs() round 1

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-4
   casts and format strings

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-5
   debug() => debugs() round 2: peer_digest.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-6
   casts in stat.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-7
   debug() => debugs() round 3

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-8
   cast for ntohl() in wccp.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-9
   casts in tools.cc",196,data/crawl/squid/patch_1186.diff
https://github.com/squid-cache/squid/commit/b8bad68c16e839f9a8a4575439bb24a977c01dd2,22 Sep 2003,"Summary: Implement mem_hdr debugging.
Keywords:

Implement Array copy constructor.
Implement Iterators for Splay trees.
Implement tests for the above.
Implement a debug call to use the above.",261,data/crawl/squid/patch_1187.diff
https://github.com/squid-cache/squid/commit/e721bd8c980aeb9812c4e5990c3942bd121863e4,14 Sep 2003,Bootstrapped,10,data/crawl/squid/patch_1188.diff
https://github.com/squid-cache/squid/commit/a4d7e961fbbb97a65961535f2eccd715150ee25b,13 Sep 2003,"From 2.5: Make SQUID_MAXFD always an multiple of 64 to guarantee there is no rounding
errors in bitfield arithmetics of the fd_set macros. For example GLIBC has
bugs causing a fd_set overflow if the size is not an even multiple of a
machie word (64 bits on 64 bit platforms)",12,data/crawl/squid/patch_1189.diff
https://github.com/squid-cache/squid/commit/e4a67a801853cb8b1837e224dec8cd135442b7e9,06 Sep 2003,"Summary: Allow -DPURIFY to build.
Keywords:

Allow -DPURIFY to build.",70,data/crawl/squid/patch_1190.diff
https://github.com/squid-cache/squid/commit/1a2248431aee8579727981a35527c2663852fc5d,28 Aug 2003,"ported COSS enhancements from squid-2.5 code (dated ~ July 25-29, 2003).",564,data/crawl/squid/patch_1191.diff
https://github.com/squid-cache/squid/commit/a2897c13640b8b0d9f858f5a4b47153b91b8874d,20 Aug 2003,Bug #733: No explicit error message when ncsa_auth (squid user) can't access passwd file,4,data/crawl/squid/patch_1192.diff
https://github.com/squid-cache/squid/commit/55e44db9113a48dea68b11a3636dc3d6154e8835,14 Aug 2003,"Summary: Swallow request bodies even when denying access.
Keywords:

* Assert when destroying requests with body connections.
* Move ClientBody class definition to client_side.h
* Encapsulate comm_close calls from ClientSocketContext.
* When closing a client socket, if there is a body, swallow it.
* When swalling a request body, if the connection needs to close, do so.",103,data/crawl/squid/patch_1193.diff
https://github.com/squid-cache/squid/commit/35516333b6bdd23d476a6f3d344b9a71dc47e0ff,04 Aug 2003,"Cut out unwanted regex interfaces from GNUregex.c
 - emacs related stuff
 - BSD 4.2 regex interface
 - old GNU regex interface
leaving only the POSIX interface which is what we use",446,data/crawl/squid/patch_1194.diff
https://github.com/squid-cache/squid/commit/77dff9d057fa08a6430cfe875abd1429be87e974,03 Aug 2003,"Hi,

On Windows (native and Cygwin) and OS/2, when running
UFSSwapDir::closeTmpSwapLog() in store_dir_ufs.cc, Squid can be fail if the
target file for a rename operation was already deleted.

Because xrename() already try to remove the destination target on Windows,
a previous unlink() is not needed.

This patch extended the native Windows xrename() behaviour to Cygwin and
OS/2 too and remove not needed unlink().

Regards

Guido",17,data/crawl/squid/patch_1195.diff
https://github.com/squid-cache/squid/commit/b883b594bdfdef49b22874738501f742e8ac2d31,23 Jul 2003,"Summary: Port forward the solution for bug #699 (rewrite host header in place).
Keywords:

This fixes some causes for 'Zero sized reply' when squid connects via a firewall.",23,data/crawl/squid/patch_1196.diff
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/patch_1197.diff
https://github.com/squid-cache/squid/commit/c4ebc8302794bca323611dbc98cb783adaeca286,18 Jul 2003,"Added counters for HTCP messages sent and received, reported in
'info' cache manager page.",35,data/crawl/squid/patch_1198.diff
https://github.com/squid-cache/squid/commit/a8d99c600a3e858543f6c38efe7f4dc06c4f16ee,16 Jul 2003,"Summary: More MSVC compatability tweaks.
Keywords:

More pointer construction to pointer assignment replacements.
Add a test case for delete - checking that the correct delete operator is used in a class hierarchy.
Partly fix g++ 2.95 builds - there sstream includes the system assert, which breaks our custom assert macro. So, a couple of undefs and we have an ugly fix.",26,data/crawl/squid/patch_1199.diff
https://github.com/squid-cache/squid/commit/75faaa7a998ef4029150e5e3563eefa21b2525c9,15 Jul 2003,"Summary: Make all Arrays typesafe.
Keywords:

Make all arrays typesafe.
Remove C bindinds to Array logic (we can instate new ones easily if desired later on).
Make all users of HttpHeader classes: htcpReplyData.
Ensure all class contianing HttpHeader are constructed and destructed:
  htcpReplyData, request_t, HttpReply.
rename request_t to HttpRequest.
Move htcp prototypes to htcp.h.",326,data/crawl/squid/patch_1200.diff
https://github.com/squid-cache/squid/commit/924f73bcfeb2e6e499f3836e2adf7414d0a5c114,14 Jul 2003,"Summary: Merge of robertc@squid-cache.org--squid/squid--esi--3.0
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-149
     Fixup test-suite makefile pre-merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-148
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-262

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-147
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-261

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-146
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-260

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-145
     More merge fixups.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-144
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-259

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-143
     Adjust for recent merges.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-142
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-258

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-141
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-257

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-140
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-256

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-139
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-255

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-138
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-254

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-137
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-253

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-136
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-252

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-135
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-251

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-134
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-250

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-133
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-249

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-132
     Merge of projects@swelltech.com--private/squid--mem-to-disk--3.0--patch-1

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-131
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-247

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-130
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-246

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-129
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-245

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-128
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-244

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-127
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-243

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-126
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-242

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-125
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-241

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-124
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-240

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-123
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-239

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-122
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-238

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-121
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-237

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-120
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-236

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-119
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-235

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-118
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-234

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-117
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-233

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-116
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-232

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-115
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-231

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-114
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-230

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-113
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-229

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-112
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-228

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-111
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-227

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-110
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-226

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-109
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-225

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-108
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-224

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-107
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-223

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-106
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-222

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-105
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-221

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-104
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-103
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-219

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-102
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-218

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-101
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-217

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-100
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-216

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-99
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-215

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-98
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-214

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-97
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-213

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-96
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-212

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-95
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-211

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-94
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-210

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-93
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-209

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-92
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-208

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-91
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-207

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-90
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-206

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-89
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-205

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-88
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-204

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-87
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-203

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-86
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-202

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-85
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-201

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-84
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-200

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-83
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-199

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-82
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-198

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-81
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-197

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-80
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-196

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-79
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-195

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-78
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-194

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-77
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-193

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-76
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-192

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-75
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-191

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-74
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-190

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-73
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-189

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-72
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-188

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-71
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-187

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-70
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-186

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-69
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-185

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-68
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-184

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-67
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-183

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-66
     Towards esi Functions.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-65
     Refactoring towards ESI Functions.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-64
     Propogate message headers to ESI includes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-63
     Extract HttpHeader class to HttpHeader.h

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-62
     Extract ESIInclude to separate files.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-61
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-182

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-60
     Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-181

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-59
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-58
     Prevent a race condition in esi includes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-57
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-56
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-55
     BUGFIX: Memory leak in ESI requests.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-54
     BUGFIX: libTrie was returning random values when adding a node.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-53
     Give libTrie stricter g++ flags.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-52
     Parse '' correctly in esi expressions.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-51
     Fixup build.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-50
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-49
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-48
     ESI logging tweaks.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-47
     Bugfix: redirection of internal requests would segv.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-46
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-45
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-44
     Implement variable evaluation in esi:assign short form.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-43
     Implement ESI long form variable assignment.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-42
     Inital addition of ESIAssign.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-41
     Finish inserting all variables for ESI into a trie.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-40
     Variable logic extraction.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-39
     Separate out various variable logic.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-38
     Allow character transforms for tries.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-37
     ESI Variable refactoring to ease support of dynamic variables.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-36
     Allow low expiry dates on objects when using ESI.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-35
     Bugfix TrieNode constructor.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-34
     Eliminate esiVarState::esiVar_t.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-33
     Introduce esiVarState::Variable class.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-32
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-31
     Merge CVS changes to ESI.",4893,data/crawl/squid/patch_1201.diff
https://github.com/squid-cache/squid/commit/a2ac85d9c0c3985d84ea17115924aaa65a8e6d3a,11 Jul 2003,"Summary: ConnStateData tweaks to address race on close.
Keywords:

* ConnStateData is most appropriate to be reference counted by it's owners, and cbdata locked by it's callees. Make this change and propogate throughout.
* Extract on-closure logic from ConnStateData destructor to ConnStateData::close().
* Fix an apparent break with authenticateOnCloseConnection().
* Move request_t to HttpRequest.h",554,data/crawl/squid/patch_1202.diff
https://github.com/squid-cache/squid/commit/8749b5de2816626676d9082cebc7833d96acf086,09 Jul 2003,Remove dependency of src/debug.cc,27,data/crawl/squid/patch_1203.diff
https://github.com/squid-cache/squid/commit/4ecaa0f063616f22eeab93092c83cc7b64d7dc1d,09 Jul 2003,"Summary: debugs tweaks.
Keywords:

* Remove an inappropriate # from the last line of src/debug.cc
* Rename Debug::currentDebug to Debug::CurrentDebug as per the coding standards.",37,data/crawl/squid/patch_1204.diff
https://github.com/squid-cache/squid/commit/f95fe6ed2c36e2e0eb169eda54d963763cd32650,08 Jul 2003,"Summary: Merge debugs logic.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-4
     Add tests, change debugs syntax.

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-3
     Add test case for debugs in the case it doesn't require a ;

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-2
     Enforce the use of ; at the end of debugs macro calls.

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-1
     String based debug and operator ::new fixes.

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-222",306,data/crawl/squid/patch_1205.diff
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/patch_1206.diff
https://github.com/squid-cache/squid/commit/47b0c1fad722ca9a31e3f7d87703db7ecb712f17,07 Jul 2003,"External acl extensions:

%SRCPORT, %MYPORT, %MYADDR
New format tags for matching client TCP connection details

grace=N
defines a grace period on external acl cache entries. If the entry has less
then the grace period left when being refercenced then a new lookup is
initiated but without waiting for the reply.",198,data/crawl/squid/patch_1207.diff
https://github.com/squid-cache/squid/commit/b3d553215678485e59b81968c9d6a979a19c6237,02 Jul 2003,"Removed 'minimum_retry_timeout' and Config.retry.timeout.  This
variable has not been used for some time it seems.",32,data/crawl/squid/patch_1208.diff
https://github.com/squid-cache/squid/commit/abb929f03f54f744e6b67fdf84b41508a85aae36,28 Jun 2003,"* ext_user acl type to match user name returned by external acl

* cleanup of how external acls present a user name to the
  Squid core to make the code more logical and fix a
  minor security issues if there is downstream proxies.

* concept of password returned by external acl type. Integrated
  with login= cache_peer option to have the password forwarded
  to peers (both proxies and origin type peers)",316,data/crawl/squid/patch_1209.diff
https://github.com/squid-cache/squid/commit/4c50505be6b9316c646cb0022533bfebe207fa89,24 Jun 2003,"Summary: mem_hdr testing and corrections.
Keywords:

* Introduce operator < for mem_nodes, to provide ordering.
* Create a mem_hdr constructor and destructor.
* bugfix: writing before the lowest offset was broken.
* Reuse the Range template for mem_hdr::hasContigousContentRange.
* Prepare splay trees for replacing the list of mem_nodes.",313,data/crawl/squid/patch_1210.diff
https://github.com/squid-cache/squid/commit/dec5db5d459869a40175003f45731a99cb9a4999,23 Jun 2003,"Summary: comm cleanups.
Keywords:

* Add a FIXME comment in disabled client_side code where fd abstraction is broken.
* fde.rwstate is actually specific to writes - rename to wstate.
* The warning about rwstate should be a fatal, as it leads to incorrect callbacks occuring.
  disabling persistent connections will disable this bug - so a fatal is no impediment to testers.",30,data/crawl/squid/patch_1211.diff
https://github.com/squid-cache/squid/commit/697079bbfb1fa16825adce6a0ef87ccf14c5c75b,22 Jun 2003,"Summary: Add a mempools testcase.
Keywords:

Add a mempools testcase.",102,data/crawl/squid/patch_1212.diff
https://github.com/squid-cache/squid/commit/e4a1325e3dbaf32e22224ab07536fe856202e870,09 Jun 2003,"check open(""/dev/null"") return value for errors.  Especially important
later in ipcCreate() where Squid stays in a do loop if it cannot
open /dev/null.",5,data/crawl/squid/patch_1213.diff
https://github.com/squid-cache/squid/commit/07eca7e0872959dc7b011d489cc7645a8b040f28,29 May 2003,"Overlapping helper requests for standard helpers (not stateful)

 - basic auth
 - redirectors
 - external acls",373,data/crawl/squid/patch_1214.diff
https://github.com/squid-cache/squid/commit/363a8ce86aa89ce6105fe667163ff7e77fd6ae21,29 May 2003,"Imported MD5 hash support for NCSA auth, supporting both shadow and
Apache htpasswd MD5 hases (same algorithms, different permutation strings)",198,data/crawl/squid/patch_1215.diff
https://github.com/squid-cache/squid/commit/1e5562e38ca48d8bf81a6049de49afbc0547de23,20 May 2003,"Summary: Merge in external acl refactoring and tagged delay pools.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--tagged-pools--3.0--patch-5
     Enable class 5 pools.

  * robertc@squid-cache.org--squid/squid--tagged-pools--3.0--patch-4
     Implement tag associated delay pools.

  * robertc@squid-cache.org--squid/squid--tagged-pools--3.0--patch-3
     Refactoring external acl.

  * robertc@squid-cache.org--squid/squid--tagged-pools--3.0--patch-2
     Extract ExternalACLState to separate files.

  * robertc@squid-cache.org--squid/squid--tagged-pools--3.0--patch-1
     Create a tagging method for external acl replies.

  * robertc@squid-cache.org--squid/squid--tagged-pools--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-171",10400,data/crawl/squid/patch_1216.diff
https://github.com/squid-cache/squid/commit/d4f2f353bb81e0610d49d8a79fc9458847586412,18 May 2003,"Renamed external_acl_type concurrency= to children= to make room for
overlapping requests",27,data/crawl/squid/patch_1217.diff
https://github.com/squid-cache/squid/commit/ef1955a503dbd88548d5517e3d453a6bfe6f4333,17 May 2003,"Syntax change of reply_body_max_size

reply_body_max_size 40 KB [acl...]
reply_body_max_size none [acl...]

This also includes a redefiniton of acl matching methods to make sure
there is no mismatches between fast/slow acl matches, and fixes
tcp_outgoing_* for the same..

For next version we should probably create a acl base class which
all the acl driven matches can use to limit the amount of duplicated
code in these acl driven types

   allow/deny
   tos
   address
   size
   [direct/auto/peer/...] (to replace always_direct/never_direct/cache_peer_access)",273,data/crawl/squid/patch_1218.diff
https://github.com/squid-cache/squid/commit/8cfbbde6aae8c6210548daba8591aa2849fd61d7,02 May 2003,"winbind_group 1.1 by Guido:

The changes are:

- Added an option for case insensitive group name comparation (Bugzilla #574)
- Fixed a segfault (Bugzilla #574)
- Updated the documentation according to FAQ on squid-users

Bugzilla #574 can be closed.",132,data/crawl/squid/patch_1219.diff
https://github.com/squid-cache/squid/commit/9b7292ce167fd542f216c1f8da77ee50dc534433,27 Apr 2003,Fixup astyle breakage on #ifdef anround {,385,data/crawl/squid/patch_1220.diff
https://github.com/squid-cache/squid/commit/0e657244670db45e042b203ff28468382a8da6e9,27 Apr 2003,"From Guido:

Native Windows port enhancements:

- new Windows service command line options and configure support

With this patch the Windows service support on Cygwin should be complete.",450,data/crawl/squid/patch_1221.diff
https://github.com/squid-cache/squid/commit/6c1962dd70c2add16e17fc5a59aa2520aa9d56a6,26 Apr 2003,"Summary: Merge Windows fixes from Guido.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--windows--3.0--patch-6
     Native windows enhancements from Guido.",128,data/crawl/squid/patch_1222.diff
https://github.com/squid-cache/squid/commit/1a774556057c249c2f055f3ede972c90bfcf906b,22 Apr 2003,"From Guido:

This is the 9th of some splitted native Windows patches grouped by
functionality.

Native Windows port enhancements:

- changed opt_no_daemon to global
- now Cygwin can support daemon and Windows service mode in the same binary
- added Windows platform info in cache_manager output
- missing Makefile.am entry for squid_windows.h
- added more Windows service support definitions
- added cache.log info when unlinkd is disabled
- storeFsDone() is always needed for some fs storage: Coss, Awin32",78,data/crawl/squid/patch_1223.diff
https://github.com/squid-cache/squid/commit/23087cb8461e0bcfbdd7d0a9556e78147691ed0f,22 Apr 2003,"Summary: Add a RFC 1738 test program.
Keywords:

Add a RFC 1738 test program.

Summary: Make splay check silent.
Keywords:

Make splay check silent.",179,data/crawl/squid/patch_1224.diff
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/patch_1225.diff
https://github.com/squid-cache/squid/commit/35105e4ba73df707e582ef6fb2a55d1133a37392,17 Apr 2003,"dhparams=/path/to/file.pem https_port option to specify DH parameters
for forward-secrecy in encryption (practically denies decryption even
if the private key is known from what I understand).",56,data/crawl/squid/patch_1226.diff
https://github.com/squid-cache/squid/commit/0ff1980a4e05750076c5c5d31d6daa5c2b13a1e5,01 Apr 2003,"Summary: Merge in digest helper refactoring.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-6
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-5
     Tweak digest helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-4
     Factor digest password helper for easy extension.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-3
     merge from HEAD.",426,data/crawl/squid/patch_1227.diff
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/patch_1228.diff
https://github.com/squid-cache/squid/commit/2d8c0b1a741866aad675aea04e67829e0790ba9f,08 Mar 2003,"Summary: Merge comms refactoring to CVS.
Keywords:

Restyle for CVS commit.
Patches applied:

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-13
     And more comms review

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-12
     Refactor comm code to allow easier analysis.

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-11
     Merge from HEAD",1107,data/crawl/squid/patch_1229.diff
https://github.com/squid-cache/squid/commit/0353e7241e73894b614e9c07277adae642f9da2e,06 Mar 2003,"Summary: Merge String loss fix.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-10
     Track all created strings.

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-9
     More tuning.",423,data/crawl/squid/patch_1230.diff
https://github.com/squid-cache/squid/commit/6039b72956ec1d91f897dcb55b0307bdb3a6d40d,04 Mar 2003,Missing files from deferred reads patch,486,data/crawl/squid/patch_1231.diff
https://github.com/squid-cache/squid/commit/a46d2c0eef0e24f55306bb00639625102fad4fbf,04 Mar 2003,"Summary: Merge epoll and delay pools/deferred reads removal.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-12
     Bufix from merge.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-11
     Remove some duplicate code.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-10
     Handle aborts properly in deferred reads.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-9
     Fixup after merge.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-8
     Merged from HEAD.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-7
     Add missing files.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-6
     Start tackling the StoreEntry defer logic.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-5
     Bugfix: limit the size read in tunnel.cc to the buffer size.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-4
     Squash deferred reads.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-3
     Start addressing the use of deferred reads.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-2
     Start refactoring deferred reads.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-1
     Apply epoll patch from David Nicklay

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-10
     Handle aborts properly in deferred reads.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-11
     Remove some duplicate code.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--patch-12
     Bufix from merge.

  * robertc@squid-cache.org--squid/squid--epoll--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-95",5845,data/crawl/squid/patch_1232.diff
https://github.com/squid-cache/squid/commit/751c377788c842e24bf9d44b90ee2b55f58b1ea7,02 Mar 2003,"Removed the nowdays obsolete test-ellipses.pl source verification program.
We are today using the compiler directly for the same task (identifying
printf format mismatches in custom functions)",99,data/crawl/squid/patch_1233.diff
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/patch_1234.diff
https://github.com/squid-cache/squid/commit/954a851376707ccc1938b682bf1bae206779a2ee,01 Mar 2003,-W secretfile by Christoph Lechleitner <lech@ibcl.net>,108,data/crawl/squid/patch_1235.diff
https://github.com/squid-cache/squid/commit/5eecb267fe11b52bfc7d329386c839a653afd0c6,01 Mar 2003,Upgraded squid_ldap_group to 2.12,340,data/crawl/squid/patch_1236.diff
https://github.com/squid-cache/squid/commit/7ba688188e2e958eafba86a7bf5b41db55ea2007,01 Mar 2003,"Added LDAP URI support, contributed by Juerg Michel",36,data/crawl/squid/patch_1237.diff
https://github.com/squid-cache/squid/commit/82b045dccfccc9cd8222529d7d603fbcaeaf1c53,26 Feb 2003,"Summary: Merge in digest fixes for #543
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-2
     Fixup digest password helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-1
     Digest auth fixes for #543 - Sean Burfords helper fix, refactor digest auth.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-99",829,data/crawl/squid/patch_1238.diff
https://github.com/squid-cache/squid/commit/b0dd28bab816231b7a6145ee4417bedc0d0d0023,25 Feb 2003,"Summary: Merge final stage1 ACL refactoring.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-23
     ACL tidyups within new framework.",4390,data/crawl/squid/patch_1239.diff
https://github.com/squid-cache/squid/commit/4807186940395788653d89a174fa3e8f9cdc1c3c,25 Feb 2003,"Summary: Merge final stage1 ACL refactoring.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-23
     ACL tidyups within new framework.",1862,data/crawl/squid/patch_1240.diff
https://github.com/squid-cache/squid/commit/62e7632691c3b133845270bc31cdddd7e0018754,22 Feb 2003,"Summary: Ran astyle over src subtree.
Keywords:

Astyle is the formatter of choice for squid-3 C++ code. See http://www.squid-cache.org/~robertc/squid-3-style.txt for the squid 3 style conventions.",67487,data/crawl/squid/patch_1241.diff
https://github.com/squid-cache/squid/commit/5dee515e20aad8931d69c78d680e49f464cd6764,17 Feb 2003,"Revision: squid--HEAD--3.0--patch-86
Archive: robertc@squid-cache.org--squid
Creator: Robert Collins <rbtcollins@hotmail.com>
Date: Mon Feb 17 17:45:44 EST 2003
Standard-date: 2003-02-17 06:45:44 GMT
Summary: Merge more ACL changes.
Keywords:
New-files: {arch}/squid/squid--HEAD/squid--HEAD--3.0/robertc@squid-cache.org--squid/patch-log/patch-86
  {arch}/squid/squid--acl/squid--acl--3.0/robertc@squid-cache.org--squid/patch-log/patch-20
  src/.arch-ids/ACLBrowser.cc.id src/.arch-ids/ACLBrowser.h.id
  src/.arch-ids/ACLCertificate.cc.id
  src/.arch-ids/ACLCertificate.h.id
  src/.arch-ids/ACLMatchStrategy.h.id
  src/.arch-ids/ACLRequestHeaderStrategy.h.id
  src/.arch-ids/ACLStrategised.cc.id
  src/.arch-ids/ACLStrategised.h.id
  src/.arch-ids/ACLTime.cc.id src/.arch-ids/ACLTime.h.id
  src/.arch-ids/ACLTimeData.cc.id
  src/.arch-ids/ACLTimeData.h.id src/.arch-ids/ACLUrl.cc.id
  src/.arch-ids/ACLUrl.h.id src/.arch-ids/ACLUrlPath.cc.id
  src/.arch-ids/ACLUrlPath.h.id src/.arch-ids/ACLReferer.cc.id
  src/.arch-ids/ACLReferer.h.id
  src/.arch-ids/ACLRequestMIMEType.cc.id
  src/.arch-ids/ACLRequestMIMEType.h.id src/ACLBrowser.cc
  src/ACLBrowser.h src/ACLCertificate.cc src/ACLCertificate.h
  src/ACLMatchStrategy.h src/ACLRequestHeaderStrategy.h
  src/ACLStrategised.cc src/ACLStrategised.h src/ACLTime.cc
  src/ACLTime.h src/ACLTimeData.cc src/ACLTimeData.h
  src/ACLUrl.cc src/ACLUrl.h src/ACLUrlPath.cc src/ACLUrlPath.h
  src/ACLReferer.cc src/ACLReferer.h src/ACLRequestMIMEType.cc
  src/ACLRequestMIMEType.h
Modified-files: src/ACL.h src/ACLCertificateData.cc src/ACLCertificateData.h
  src/ACLData.h src/ACLDestinationDomain.cc
  src/ACLDestinationDomain.h src/ACLDomainData.cc
  src/ACLDomainData.h src/ACLIdent.cc src/ACLIdent.h
  src/ACLProxyAuth.cc src/ACLProxyAuth.h src/ACLRegexData.cc
  src/ACLRegexData.h src/ACLSourceDomain.cc
  src/ACLSourceDomain.h src/ACLUserData.cc src/ACLUserData.h
  src/Makefile.am src/Makefile.in src/acl.cc src/cache_cf.cc
  src/enums.h src/mem.cc src/structs.h
New-patches: robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-86
  robertc@squid-cache.org--squid/squid--acl--3.0--patch-20

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-20
     Still more acl incremental improvements.",6826,data/crawl/squid/patch_1242.diff
https://github.com/squid-cache/squid/commit/a86029b90dee73e9076e388d14b3f320532cb4fe,16 Feb 2003,"Incremental merge from rproxy

remove the ""hack"" to have ICP disabled in accelerator only setups even if
icp_port is configured. This should be done by setting ""icp_port 0"", not
by the fact that Squid is configured as a reverse proxy.

Note: later merges from rproxy will remove the httpd_accel_* directives,
making the ""accelerator vs proxy"" boundary much thinner.",131,data/crawl/squid/patch_1243.diff
https://github.com/squid-cache/squid/commit/678a066c6fdd40e2c9c55fe2365e7aa70e28195f,15 Feb 2003,include weight=NN in config dump of cache_peer,4,data/crawl/squid/patch_1244.diff
https://github.com/squid-cache/squid/commit/be753325ab460e945d00846dc6f34869b36c4f13,15 Feb 2003,"First batch of rproxy merges

New cache_peer options for reverse proxy setups

   originserver
   name=XXX
   forceddomain=XXX

Cleanup of authentication forwarding, and added gatewaying proxy->reverseproxy
when the same Squid is acting as both proxy and reverseproxy with authentication",321,data/crawl/squid/patch_1245.diff
https://github.com/squid-cache/squid/commit/2d5ab5c56b4194ee07c3d0c1855b6e2b8b1aee63,14 Feb 2003,"store_check_cachable_hist.no.release_request was always zero because
storeReleaseRequest() always clears ENTRY_CACHABLE.  Such objects
wer always counted as not_entry_cachable instead.

Removed references to store_check_cachable_hist.no.release_request

Removed superfluous EBIT_CLR ENTRY_CACHABLE calls before/after
storeReleaseRequest and left comments in their place.",12,data/crawl/squid/patch_1246.diff
https://github.com/squid-cache/squid/commit/fcc61c4df06783be04009c0a18caefffd06800bd,14 Feb 2003,"in 'client_list' cachemgr output, remove the percentage from the FETCHES
line. It is no longer menaingful because fetches is incremented for
non-ICP based forwarding decisions.  Also moved FETCHES to the
top of the output with other ""TCP-ish"" stats and out of the ""UDP-ish""
stats section.",8,data/crawl/squid/patch_1247.diff
https://github.com/squid-cache/squid/commit/998adf7139028eaedc7a176d9a7930e71a557f8f,14 Feb 2003,"remove unused members of IpcacheStats and FqdncacheStats.  In particular,
errors, release_locked, ghbn_calls, gbha_calls",22,data/crawl/squid/patch_1248.diff
https://github.com/squid-cache/squid/commit/225b7b107261e7d01d087e1061533751c2a7a0e0,13 Feb 2003,"Summary: Merge further ACL refactoring (including bugfixes)
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-13
     More conversion of ACL's

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-12
     Fix ACLChecklist async tests.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-11
     More conversion to the new ACL approach.",1546,data/crawl/squid/patch_1249.diff
https://github.com/squid-cache/squid/commit/8000a96583c4cafed5d348fafaaed771f117287a,12 Feb 2003,"Summary: Merge of ACL refactoring.

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-9
     Refactoring (again!)

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-8
     More refactoring.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-7
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-6
     More refactoring.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-5
     More refactoring of ACL's.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-4
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-3
     Still more refactoring steps.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-2
     More refactoring.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-1
     Bootstrap, and start refactoring.",12159,data/crawl/squid/patch_1250.diff
https://github.com/squid-cache/squid/commit/29b17d63a524ac9855a7d286c6313a82050f485a,08 Feb 2003,"Summary: Merge delay class 4 performance enhancements.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-31
     Convert ACL.h listed types to SplayNode.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-30
     Make splay trees typesafe, and use in DelayUser class.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-29
     Separate splay usage from global includes.",780,data/crawl/squid/patch_1251.diff
https://github.com/squid-cache/squid/commit/88a03fda9908a38f21bcdb88c461206c9ec8bb67,06 Feb 2003,add missing files,304,data/crawl/squid/patch_1252.diff
https://github.com/squid-cache/squid/commit/b67e2c8c4da9890e0f3d27d501edf6a0c0fdf1c9,05 Feb 2003,"Summary: Merge from delay-class-4
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-19
     Document finished aspects of delay pools.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-18
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-17
     Fixs to handle HEAD changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-16
     Merge from head.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-15
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-14
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-13
     Separate out code for DelayBucket and DelayId.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-12
     More class split outs.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-11
     More class splitting

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-10
     Splitting classes out to one per file.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-9
     Starting consolidation of delay pools hierarchy.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-8
     Snapshot

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-7
     Finally got composite structure sorted - class one and two delay pools in it.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-6
     snapshotting more refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-5
     More refactoring - no functionality changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-4
     Another refactoring snapshot.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-3
     Snapshot of delay pools refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-2
     Refactor delay pools code to not cause globals recompiles on most changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.",12710,data/crawl/squid/patch_1253.diff
https://github.com/squid-cache/squid/commit/0f15e632ec8778ddaffc77973620fac6fa2a6237,02 Feb 2003,"Summary: Windows FD support from Guido.
Keywords:

Hi,

This is the first of some splitted native Windows patches grouped by
functionality.

This patch add the native Windows support for the correct file and socket
FD handling methods.

Regards

Guido",139,data/crawl/squid/patch_1254.diff
https://github.com/squid-cache/squid/commit/2a73b7cb0baeba9e6079087dcb4c4a1c661069e2,27 Jan 2003,"date: 2003/01/27 05:00:06;  author: wessels;  state: Exp;  lines: +2 -0
Add the 'select_fds_hist' object to the cachemgr 'histogram' output.",4,data/crawl/squid/patch_1255.diff
https://github.com/squid-cache/squid/commit/528b2c611d71a201dc4ce640fbe4c3ca757e1257,23 Jan 2003,Import of fix-ranges branch,19218,data/crawl/squid/patch_1256.diff
https://github.com/squid-cache/squid/commit/ec2436ff0a68ced694ec8e68f04f9cbfce2e7596,18 Jan 2003,templatify arrays,375,data/crawl/squid/patch_1257.diff
https://github.com/squid-cache/squid/commit/a4ba1105a7e787cd2bd79649bc613d4a986ad1c6,18 Jan 2003,"date: 2003/01/10 17:52:53;  author: wessels;  state: Exp;  lines: +1 -0
added reporting of ""Process Data Segment Size via sbrk()"" when
sbrk() call exists.  According to the sbrk() man page, calling
sbrk(0) returns the end of the data segment.  By storing the data
segment offset when Squid starts, we can report the size of the
data segment at any time.  This might be a better metric than
getrusage()'s MAX RSS, which, in my experience, is often less than
the process size reported by 'ps' (presumably because some of the
processes memory is swapped to disk).  However, initial tests show that
the sbrk() trick reports a value slightly smaller than reported by
'ps'.

date: 2003/01/17 05:21:49;  author: wessels;  state: Exp;  lines: +1 -1
failure_ratio is a ratio, not a percentage.  Removed %% from printf.",27,data/crawl/squid/patch_1258.diff
https://github.com/squid-cache/squid/commit/c772f001816155f3acb072da1b5ee25c5a542692,17 Jan 2003,give Debug a class,86,data/crawl/squid/patch_1259.diff
https://github.com/squid-cache/squid/commit/08577e16e6c4aa38f8b3fd69b25662e6f1984667,09 Jan 2003,"Bugzilla 493: chroot_dir messes up all path checks.. this patch makes
life easier by assuming all paths are within the chroot directory..",9,data/crawl/squid/patch_1260.diff
https://github.com/squid-cache/squid/commit/0a706c69511e3ef1b978db23498daf740db75483,09 Jan 2003,"date: 2003/01/08 20:55:46;  author: wessels;  state: Exp;  lines: +12 -7
Some nitpicks and cleanup relating to cache manager helper stats and
user authentication:
- debugging statement in helperStatefulDefer() reported wrong function name
- formatted some comments for 80 columns
- added ""program name"" to helpeStats() output
- fixed formatting for helperStatefulStats() so columns line up again
- added authentication type (basic/digest/ntml) to cachemgr menu description
- ran gindent",21,data/crawl/squid/patch_1261.diff
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/patch_1262.diff
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/patch_1263.diff
https://github.com/squid-cache/squid/commit/147a3e90ec90e94424b47fd412a9872318c740f0,02 Dec 2002,allow Visual Studio to compile cf_gen,85,data/crawl/squid/patch_1264.diff
https://github.com/squid-cache/squid/commit/6708c52c59cd7fe5a6d2a4857c5e0b897a6e5f3c,28 Nov 2002,squid_ldap_group upgrade to version 2.8,367,data/crawl/squid/patch_1265.diff
https://github.com/squid-cache/squid/commit/f23f96e62d364a80ea46b2d27537c543accc65d7,15 Nov 2002,"Use POST when submitting the login to prevent the login & password from
being logged in the HTTP server access log or the browser history.",4,data/crawl/squid/patch_1266.diff
https://github.com/squid-cache/squid/commit/211f1d0bb2a4fef2a4a9c76361f7ec662effdf85,10 Nov 2002,"date: 2002/11/09 10:42:01;  author: hno;  state: Exp;  lines: +46 -20
Bugzilla #451: Occasional corruption of objects

This patch fixes a cbdata boundary violation in the aufs storeio
implementation wich caused data corruption on aborted cache hits.",223,data/crawl/squid/patch_1267.diff
https://github.com/squid-cache/squid/commit/71b7abe08f6bf46015975d6c8077e9d452c6627d,27 Oct 2002,s/\t/        /g,208,data/crawl/squid/patch_1268.diff
https://github.com/squid-cache/squid/commit/e48ed43391a35b15066e876ca69755a5582dc26b,25 Oct 2002,cbdata history for cbdata debug mode,162,data/crawl/squid/patch_1269.diff
https://github.com/squid-cache/squid/commit/d4cb310b3448ef4255769eaf05d3fd19fb9b40d0,21 Oct 2002,"* rename comm_write() -> comm_old_write()
* rename comm_write_mbuf() -> comm_old_write_mbuf()
* implement most of a replacement comm_write() call in comm.cc
  (everything except the actual comm_write() call is in there)",210,data/crawl/squid/patch_1270.diff
https://github.com/squid-cache/squid/commit/332dafa28099995ae4baee1de763dc42eef698ac,15 Oct 2002,fix c++ compilers that put the vtable at the beginning of structs,6897,data/crawl/squid/patch_1271.diff
https://github.com/squid-cache/squid/commit/32e0c0c5780084ed4d63c1c047d023a1a1f14dc6,14 Oct 2002,printf typedef.,6,data/crawl/squid/patch_1272.diff
https://github.com/squid-cache/squid/commit/08433d3cabbd05eb074ab810d4878506d09eefd6,14 Oct 2002,printf forced typedefs.,8,data/crawl/squid/patch_1273.diff
https://github.com/squid-cache/squid/commit/01a13aec0c97cdb950da5c41e094ca601f2fd146,14 Oct 2002,Many delay_pools variable name cleanups,71,data/crawl/squid/patch_1274.diff
https://github.com/squid-cache/squid/commit/c4b7a5a9a9712f84f4203155840609cf4a67103f,14 Oct 2002,"commloops from Adrian, C++ courtesy Rob",2452,data/crawl/squid/patch_1275.diff
https://github.com/squid-cache/squid/commit/dfb22746f7751269845dddcd600f4d7e54722f8d,14 Oct 2002,"Blunt search/replace and typecasting to get rid of some silly C->C++ errors
in delay_pools and ARP acl code.",119,data/crawl/squid/patch_1276.diff
https://github.com/squid-cache/squid/commit/e6ccf245f6ed6b3a56569453cfdceacae14d524d,14 Oct 2002,C++ conversion,16443,data/crawl/squid/patch_1277.diff
https://github.com/squid-cache/squid/commit/4d6d905e8b4d4271702d50d56863fe37f8f52e42,12 Oct 2002,extract duplicate ufs code to ufscommon.c/h,6553,data/crawl/squid/patch_1278.diff
https://github.com/squid-cache/squid/commit/797ffbb2e101871c184090059ab708115e96a08c,11 Oct 2002,"oops, only local passwd file auth requires root privs.",5,data/crawl/squid/patch_1279.diff
https://github.com/squid-cache/squid/commit/a237207127cf18be8d0aae63b45e0c36179653f3,11 Oct 2002,print a warning on stderr if pam_auth is not started as root.,5,data/crawl/squid/patch_1280.diff
https://github.com/squid-cache/squid/commit/96a7422a24d8d3400eea0ab59a54aad3d890b52c,08 Oct 2002,"If urlParse() fails in mimeLoadIconFile() (e.g., because the user put
illegal characters in the visible_hostname), this patch makes Squid
emit a fatal error message, rather than suffer a NULL pointer
dereference.",8,data/crawl/squid/patch_1281.diff
https://github.com/squid-cache/squid/commit/33f5f8b95b5bdb33a2a2e21233ab3622357a826e,06 Oct 2002,post-merge tweaks and bootstrap,18191,data/crawl/squid/patch_1282.diff
https://github.com/squid-cache/squid/commit/6a9f6389e94a15c0665e23a0a61de2b0ba9058b4,06 Oct 2002,autoconf25 merge,702,data/crawl/squid/patch_1283.diff
https://github.com/squid-cache/squid/commit/12e137b0e48abcee9185f2ed456afecd41c2c79b,03 Oct 2002,split async io counters into started and finished to give better visibility on outstanding requests,121,data/crawl/squid/patch_1284.diff
https://github.com/squid-cache/squid/commit/88bfe092ac95ad894d1c6c57974a9af562d5091c,02 Oct 2002,Andres Kroonmaa's hi-res cpu profiling patch,1643,data/crawl/squid/patch_1285.diff
https://github.com/squid-cache/squid/commit/c8be6d7b5c7b735484df330a38987ee8fa79e6ac,24 Sep 2002,Client side refactoring - no functionality changes,2627,data/crawl/squid/patch_1286.diff
https://github.com/squid-cache/squid/commit/29b8d8d6366760bd4b285d6f6d56042439e55e50,15 Sep 2002,fix headers to allow inclusion into C++ source,1555,data/crawl/squid/patch_1287.diff
https://github.com/squid-cache/squid/commit/edce4d98cbc995233439cb4af45513edecb0550c,15 Sep 2002,"clientStreams, rationalising the client side logic to allow plugin output streams, and providing a simple interface to the store. See the programmers guide for details",5389,data/crawl/squid/patch_1288.diff
https://github.com/squid-cache/squid/commit/28e81872926ccd592865575b0f059b9fa98f29aa,07 Sep 2002,squid_ldap_group documentation,143,data/crawl/squid/patch_1289.diff
https://github.com/squid-cache/squid/commit/09c1ece1f2e8e4a2916fd4b8a612619a66329bc2,07 Sep 2002,"Show pid number in ""normal"" helper statistics as well
(not only on ""stateful"" helpers)",8,data/crawl/squid/patch_1290.diff
https://github.com/squid-cache/squid/commit/2d184c3e2b8235bb95c312d644b3d51e7c0801f4,07 Sep 2002,Version 2.4. Fixes among other things support for multiple groups,117,data/crawl/squid/patch_1291.diff
https://github.com/squid-cache/squid/commit/d440f56077da81a86991e0a709bb51cace7890a6,05 Sep 2002,Version 2.3,296,data/crawl/squid/patch_1292.diff
https://github.com/squid-cache/squid/commit/387b9f71d0a3ff9bf0eb26986e4f5b21065b8d73,05 Sep 2002,Upgraded to version 2.2,203,data/crawl/squid/patch_1293.diff
https://github.com/squid-cache/squid/commit/d8c0128e0eee38cf70d964f20bd9509c9c7e1a6b,01 Sep 2002,"More HTML cleanups by Clemens. This time PRE is restored to it's
default formatting to not disturb table outputs",16,data/crawl/squid/patch_1294.diff
https://github.com/squid-cache/squid/commit/6328cedceb815cfc5537237fe58fe2023e0ed6b7,12 Aug 2002,Updated UNIX group helper,428,data/crawl/squid/patch_1295.diff
https://github.com/squid-cache/squid/commit/272716d1d1bec3447e598ccfb8ffdebdca1027cb,28 Jul 2002,Guido Serassio: add a description line to CacheMgr Async I/O counters table.,3,data/crawl/squid/patch_1296.diff
https://github.com/squid-cache/squid/commit/0792d2b121ce9cdaeb43b11412f99d08a1403c24,21 Jul 2002,HTML bugfixes in the new STYLE tag,20,data/crawl/squid/patch_1297.diff
https://github.com/squid-cache/squid/commit/d870ee7e2190ce92f0105c996391e6907ef519c0,21 Jul 2002,Oops..,4,data/crawl/squid/patch_1298.diff
https://github.com/squid-cache/squid/commit/99cce4cb6ac81c32ca07a501e7c4838c0cfa31db,21 Jul 2002,More debug section cleanups,263,data/crawl/squid/patch_1299.diff
https://github.com/squid-cache/squid/commit/429d7b01dda4ee715f5dc2327a18b10657e40635,20 Jul 2002,"winbind helpers cleanup by Guido

- wb_ntlmauth (ntlm): Fixed error message on wrong command line
- wb_auth (basic): Added same command line handling and fix to Squid
potential DoS issue as wb_ntlmauth.
- wb_group (External ACL): Added same command line handling and fix to
Squid potential DoS issue as wb_ntlmauth.",96,data/crawl/squid/patch_1300.diff
https://github.com/squid-cache/squid/commit/82ad993832ae87d8c25785c21e9a3d7fe7573abf,19 Jul 2002,Minor bugfix of the previous HTML cleanups,8,data/crawl/squid/patch_1301.diff
https://github.com/squid-cache/squid/commit/643e7dc8f42703f3ca5d1f875881d76729b44b19,18 Jul 2002,"Guido:

Bugfixes in options processing.

Henrik:

Added a usage message. Displayed on invalid arguments or if the new -h
option is used.

Fixed a potential Squid DoS issue if oversized authe requests is sent to the
helper.",44,data/crawl/squid/patch_1302.diff
https://github.com/squid-cache/squid/commit/7af1c5ab1d7987c7eeb972a1a445ea45f028da0b,17 Jul 2002,"Support squid.conf directive aliases. We already have a couple of them
defined in an attempt to be backwards compatible, but the parser never
understood them..",30,data/crawl/squid/patch_1303.diff
https://github.com/squid-cache/squid/commit/230c091c8766f4569dbe566b7f63404c46ff4065,16 Jul 2002,Not all systems support the 'obsolete' getpass() function,31,data/crawl/squid/patch_1304.diff
https://github.com/squid-cache/squid/commit/eb7d6bd6cbfc077ca677fa41253a29a1f1f9c6fb,15 Jul 2002,"Cleanup of Gopher HTML code to use a common header format, and the
standard Squid signature.",59,data/crawl/squid/patch_1305.diff
https://github.com/squid-cache/squid/commit/c307aec3b4c927c168ab7d5facdfb80fb1d694c4,14 Jul 2002,"From Guido:

This patch avoids confusion when using -s Squid switch on platforms without
syslog.",11,data/crawl/squid/patch_1306.diff
https://github.com/squid-cache/squid/commit/06bfb86383face4908b8f614e8c2d3f28a812c77,08 Jul 2002,"From Guido:

Converted to ""UNIX"" format like the rest of the sources

Makefile.am corrections",1504,data/crawl/squid/patch_1307.diff
https://github.com/squid-cache/squid/commit/4402cd0fb26dd47486975c39fb3035da7a76b283,08 Jul 2002,winbind based external_acl group helper by Guido,1332,data/crawl/squid/patch_1308.diff
https://github.com/squid-cache/squid/commit/0156f7b2492b6d190745f60f084e83a2025bd7fd,06 Jul 2002,Minor corrections to make GCC happy,5,data/crawl/squid/patch_1309.diff
https://github.com/squid-cache/squid/commit/d1b63fc8156f8f941cdd4d02ca478609e17927bb,23 Jun 2002,"Peering enhancement options for satellite or other high latency links
by Robert Cohen",129,data/crawl/squid/patch_1310.diff
https://github.com/squid-cache/squid/commit/6435edf3cfa36bd5f722c695de7eaed2a4a356d2,23 Jun 2002,ip_user external_acl helper by Rodrigo Campos,437,data/crawl/squid/patch_1311.diff
https://github.com/squid-cache/squid/commit/8f7b71f7a6c7d51b7621167b0a0f31b5d1f173cc,23 Jun 2002,A simple external_acl helper to match LDAP groups,295,data/crawl/squid/patch_1312.diff
https://github.com/squid-cache/squid/commit/d9572179194cba721c4dab65f14581e5ad8a1c1c,23 Jun 2002,"external acl support. A mechanism where flexible ACL checks can be driven
by external helpers.",1022,data/crawl/squid/patch_1313.diff
https://github.com/squid-cache/squid/commit/c06f9773560ffee68bc5244403df191acee4bbfa,23 Jun 2002,"A bit of cleanups to make GCC happy, and removed some unused code.",416,data/crawl/squid/patch_1314.diff
https://github.com/squid-cache/squid/commit/eb073b3b4c983650947bd0cb3cf3f86d9f72ded8,20 Jun 2002,"Some rewriting inspired by suggestions of overflow bugs and other problems
with this code.

denyusers.c and allowusers.c have a fair amount of nearly identical code.
I moved these functions to a new file, called usersfile.[ch].  I didn't
really want to add another source file, but....

The list of allowed/denied users were formerly stored as whitespace
separated tokens in a single char buffer.  The code used strstr() to
search for matches.  This was awkward because the search key had to
be surrounded by space characters.  The new code uses and array
of char buffers -- one for each name.  The new code uses qsort() and
bsearch().

The old code was more robust with the input file.  You could put multiple
names on a single line.  Due to the way the names were stored, it didn't
matter.  The new code is less robust.  It requires one name per line,
and no leading whitespace.

Names longer than NAMELEN are now truncated.

Added an openlog() call and Removed LOG_USER from syslog() calls.

No longer use scanf() in some places.

There is some weird logic about what to do if an allow/deny file
does not exist, or exists but cannot be read, or was read once but
cannot be read later.  I hope it still works the same.

replaced some strcpy() calls with memset() and strncpy().

Fixed a strange usage of ServerArray[] that started at index 1?

#ifdefd-out some debugging code that included fprintfs to stderr, but
was apparently never called.

Rewrote some signal handling stuff to use sigaction() (and fall back
to signal()) and removed calls to sigvec().",644,data/crawl/squid/patch_1315.diff
https://github.com/squid-cache/squid/commit/e377501e9bd98b6b628504c0bcc3245c9e69e7e3,16 Jun 2002,"Generalized the proxy_auth ACL processing one small step further to make
it easier for other ACL types to use/require authentication.",139,data/crawl/squid/patch_1316.diff
https://github.com/squid-cache/squid/commit/78e0ce43a3b41059fbacea1210b440353d4ac8ed,14 Jun 2002,"Corrected parsing of the max_user_ip -s option (forgot the number of allowed
IPs)",29,data/crawl/squid/patch_1317.diff
https://github.com/squid-cache/squid/commit/b3154cd70ab425f1a3d315d28e052c1394faa6dc,06 Jun 2002,Oops.. missed a t in \t,2,data/crawl/squid/patch_1318.diff
https://github.com/squid-cache/squid/commit/8370dcf2948e69d6914b1f38a6c81cdacce1e0b1,04 Jun 2002,TLS encryption support by Michael Cunningham,52,data/crawl/squid/patch_1319.diff
https://github.com/squid-cache/squid/commit/a2f30fc74c0f2ba7b662833a6f12d5233c07c3f2,23 May 2002,"new config.guess, dated 2002-03-04, from autoconf-2.53",254,data/crawl/squid/patch_1320.diff
https://github.com/squid-cache/squid/commit/ff84874ee573cd235b37bde2d5d9f97a38074e6d,20 May 2002,Samba Winbind ntlm and basic authentication helpers by Francesco Chemolli,2513,data/crawl/squid/patch_1321.diff
https://github.com/squid-cache/squid/commit/a15d85ea6eaa37d32cfb8642f930726906c0e997,16 May 2002,"Two fixes from Steve Bennett s.bennett at lancaster.ac.uk

1) The running averager intAverage() approaches zero due to
   roundoff errors when the input values are less than the
   averaging interval, which is happening for redirector
   service times.  For helper processes, we'll store
   the average service time in microseconds now.

2) the cachemgr output shows 'Time' as large numbers for idle
   helpers.  This patch makes use of the 'answer_time' field
   and uses that for calculating service time in cachemgr stats
   output.",12,data/crawl/squid/patch_1322.diff
https://github.com/squid-cache/squid/commit/893cbac6c562f214f0040285c436457c7bc0a116,15 May 2002,"The fatal helper queue overflow condition should not be limited by
the warning rate limitation.",6,data/crawl/squid/patch_1323.diff
https://github.com/squid-cache/squid/commit/a2727cdbd46e0ef368b9559897e029051492a6e2,28 Apr 2002,"Assert that there is at least one port defined when trying to figure out
out port number..",10,data/crawl/squid/patch_1324.diff
https://github.com/squid-cache/squid/commit/fa80a8ef90d0dce41426904f53438e3564d975b0,14 Apr 2002,"New improved reference based cbdata API, avoiding the need to
manual lock/unlock. Including full programmers guide documentation",1675,data/crawl/squid/patch_1325.diff
https://github.com/squid-cache/squid/commit/6473554b0c7508dcc1440bc44633f2c131d20232,13 Apr 2002,Bootstrapped,942,data/crawl/squid/patch_1326.diff
https://github.com/squid-cache/squid/commit/384d17e3d4bb28148f2da5a6a1ecd0af4b818b8f,13 Apr 2002,AC_CHECK_SIZEOF_SYSTYPE (forgot to add acinclude.m4 previously),34,data/crawl/squid/patch_1327.diff
https://github.com/squid-cache/squid/commit/b51b0e1356d94ac11880ffa57b0d5d946608d3ae,08 Apr 2002,"Bugzilla #132:

Better labels on the HTTP/ICP messages per minute to indicate these are
averates since start, not current values.",6,data/crawl/squid/patch_1328.diff
https://github.com/squid-cache/squid/commit/d96ceb8e4214ec5c04de85ee9814a87be33956c3,06 Apr 2002,"* Commit Andres Kroonmaa's chunked memory pool allocator
* bootstrap",2866,data/crawl/squid/patch_1329.diff
https://github.com/squid-cache/squid/commit/52f772dee6301d40d7a8cbf122dd4343f02f95cb,05 Apr 2002,"Make http_port optional, allowing for SSL-only operation. Squid will
refuse to start unless at least one port is defined.",139,data/crawl/squid/patch_1330.diff
https://github.com/squid-cache/squid/commit/1741cbadf26d175db78d9ade890f1bbc2eb75840,05 Apr 2002,Ability to read the configuration file from an external program pipe,58,data/crawl/squid/patch_1331.diff
https://github.com/squid-cache/squid/commit/b399543991674d632638ec231d05ef37f4f22f3b,05 Apr 2002,"Major cleanup or CARP. Now plays well with the other peering algorithms
as just another non-ICP peering method.",195,data/crawl/squid/patch_1332.diff
https://github.com/squid-cache/squid/commit/76cdc28d68e85e0f707ff848fd2447d03fe8b668,02 Apr 2002,"New deny_info capabilities to redirect to another server

  deny_info http://www.example.com/ acl1 acl2 ...
  deny_info TCP_RESET acl3 acl4 ...",110,data/crawl/squid/patch_1333.diff
https://github.com/squid-cache/squid/commit/4e2c57a0431489369bd9869aff83772eee1c0ef9,30 Mar 2002,SASL auth helper by Ian Castle,173,data/crawl/squid/patch_1334.diff
https://github.com/squid-cache/squid/commit/0768dfce1db934ad76ee6120d91517a9c052573c,12 Mar 2002,"Security fixes.

These changes are the result of a report by zen-parse@gmx.net regarding
a bug in rfc1035NameUnpack().  When handling ""compressed"" names, we didn't
check the value of the ""pointer"" to make sure it points to inside the
reply buffer.

I changed the static unpack function interfaces so that instead of
returning a new offset value they now return success or failure.
The offset is passed as a pointer.

I added a fake DNS error code (15) for use when the reply message
is bogus or unsafe to parse.  This is currently the only indication
of a problem.  The implementation doesn't say why unpacking failed.
This library doesn't have any hooks to Squid's debugging/logging.
We could use syslog I suppose....

I tried to make sure that only programming bugs, not bogus replies,
can cause an assertion.  i.e., some of the former assertions have
been changed to just return an error status.",234,data/crawl/squid/patch_1335.diff
https://github.com/squid-cache/squid/commit/add2192dfeb5b40768d31ba3b9b05151263af5b5,26 Feb 2002,"Bring across my first phase of commloops development.
This focused on turning storeClientCopy() into a stream-type callback,
trying to act like the stream storeAppend() is for the server side.

* storeClientCopy() has lost the seen_offset parameter
* storeClientCopy*() track the last copy offset and size, so the code
  can _enforce_ that the modules using it have been converted into stream
  routines properly
* all the modules using storeClientCopy() have been converted.

I'm sure there are remaining places where the stream enforce will be
triggered - these are the evil places noone speaks of, and will probably
be exorcised in the third round of commloops (which will probably be
a modio exercise.)",1200,data/crawl/squid/patch_1336.diff
https://github.com/squid-cache/squid/commit/1eb41ae81a71724ea3a49b6a88fd2b9622d3975a,14 Feb 2002,"Generic buffer allocator on top of the MEM_X_BUF memory pools. Simplifies
many parts of the code.",304,data/crawl/squid/patch_1337.diff
https://github.com/squid-cache/squid/commit/fab7a87efecd0ee96094fb21db85441374d9ba62,07 Jan 2002,"Large rewrite to support one-shot mode of operation (one user per PAM
connection, no connection cache).

Have also added a man page describing it's use.",233,data/crawl/squid/patch_1338.diff
https://github.com/squid-cache/squid/commit/92b9f1fdde807ca4471da49a8c55014345f6377f,01 Jan 2002,"Add the kqueue support code - its not very useful as it stands in
production because its missing support for deferred reads and delay
pools, but it survives heavy polygraph pounding and interactive
testing.

Fix up some stupid automake-related brokenness that I introduced earlier
while I'm at it.",490,data/crawl/squid/patch_1339.diff
https://github.com/squid-cache/squid/commit/50821507b51895d04060a3ef7aa3f3b65b0e232a,27 Dec 2001,Fixups of the ChangeLog. Mainly merge from 2.4.,160,data/crawl/squid/patch_1340.diff
https://github.com/squid-cache/squid/commit/1b3db6d92da76719fef67d8dec547908f971c5b6,24 Dec 2001,"Break out the comm code into a more ""modular"" format - poll code
in comm_poll.c, select code in comm_select.c . Rename some of the relevant
#defines (HAVE_POLL/USE_POLL) whilst I'm at it to make things consistent.",2017,data/crawl/squid/patch_1341.diff
https://github.com/squid-cache/squid/commit/3c641669a1f54db30f5bd364b089d56a319a0d0f,28 Nov 2001,"Latest bugfixes from the NTLM development branch.

These include
* A memory leak in the auth infrastructure.
* Debugging and reliability fixes to the NTLMSSP helper.
* The brand spanking new winbindd helper developed by Kinkie with input from
  the SAMBA team. This helper should eliminate the occasional errors currently
  plaguing NTLM with the NTLMSSP helper. It's included for completeness, as
  it has no squid-internal changes, but the actual helper needs some serious
  user bashing to be called stable.",919,data/crawl/squid/patch_1342.diff
https://github.com/squid-cache/squid/commit/686e91cdec346a49a80c8cd93dabaf9e9ba991e3,15 Nov 2001,"Restructured to dynamically allocate room for the nis password instead
of relying on a local array that may get overflowed.",50,data/crawl/squid/patch_1343.diff
https://github.com/squid-cache/squid/commit/68361fc46ac6a4e00fc3f9790af2c16bf8b60e91,14 Nov 2001,"Not all versions of GCC is very happy about expressions in __attribute__
definitions. (works, but complains a bit... looks like GCC bugs)

/home/users/h/hn/hno/squid/src/protos.h:1068: syntax error, found `+'
/home/users/h/hn/hno/squid/src/protos.h:1068: illegal function definition, found `)'
cpp-precomp: warning: errors during smart preprocessing, retrying in basic mode

and then it works..",32,data/crawl/squid/patch_1344.diff
https://github.com/squid-cache/squid/commit/06cdab880bda222625694d783ad75113fcd7671a,14 Nov 2001,"Wrap the Squid radix implementation with a ""squid_"" prefix to protect it
from any collisions with system provided versions..",369,data/crawl/squid/patch_1345.diff
https://github.com/squid-cache/squid/commit/ed19251ae02f66618d896168559022c702b740b2,24 Oct 2001,format fixes,124,data/crawl/squid/patch_1346.diff
https://github.com/squid-cache/squid/commit/32754419a27c336e2469c7af600096aa6fdc39ab,24 Oct 2001,format fixes,200,data/crawl/squid/patch_1347.diff
https://github.com/squid-cache/squid/commit/84f2d7739a333d35ae25d6ab008f85b02438bfbb,24 Oct 2001,format fixes,122,data/crawl/squid/patch_1348.diff
https://github.com/squid-cache/squid/commit/38650cc81be0886a91af673bd41576066e11b2a8,24 Oct 2001,format fixes,117,data/crawl/squid/patch_1349.diff
https://github.com/squid-cache/squid/commit/781ba3fbd97c819299eecc169b9430711ea7820b,23 Oct 2001,"Added configure options to ""squid -v""",568,data/crawl/squid/patch_1350.diff
https://github.com/squid-cache/squid/commit/392bbafe62331b5f9a4473294a79592891f6a049,23 Oct 2001,Enable GCC to check printf style arguments,64,data/crawl/squid/patch_1351.diff
https://github.com/squid-cache/squid/commit/79d4ccdf0a8c242f24a40d774d2c7d4dcdf28047,20 Oct 2001,"SSL update from the ""ssl"" branch at SourceForge

* Several SSL tweaking options
  - SSL version per https_port, no longer a global setting
  - supported chipers, per https_port
  - supported protocols, per https_port
  - connection shutdown method

* Fix the bug reported by Noel Burton-Krahn where SSL connections
  could get hung with data pending in the SSL internal buffers. Mostly
  seen on large POST/PUT requests, but could in theory appear on any
  request larger than 4K.",315,data/crawl/squid/patch_1352.diff
https://github.com/squid-cache/squid/commit/5c52f59a50e431c999f9d30032e95bf150ffab41,18 Oct 2001,"ANSI:fied the SNMP functions, and removed some stale junk
and some const cleanup",1469,data/crawl/squid/patch_1353.diff
https://github.com/squid-cache/squid/commit/9bea1d5b70133600467e62b423a898142d04d4b0,17 Oct 2001,indent,9469,data/crawl/squid/patch_1354.diff
https://github.com/squid-cache/squid/commit/de896945cc5e746634ff40a7f92427aa352ad92c,17 Oct 2001,Minor cosmetic fix of squid_ldap_auth usage message,2,data/crawl/squid/patch_1355.diff
https://github.com/squid-cache/squid/commit/d35b9a947d5f78e0671fd31a1b82b9d638b7e87a,17 Oct 2001,"A bunch of quick patches to silence gcc warnings when compiling
with FreeBSD's BDECFLAGS. These include duplicate declarations,
declarations shadowing global declarations, implicit type size
and signed/unsigned conversions.",9367,data/crawl/squid/patch_1356.diff
https://github.com/squid-cache/squid/commit/8a7e978a763df939eb3809a31bb5c95d6785e59f,17 Oct 2001,"Make xcalloc() take size_t in both it's arguments. This to match the
definition of calloc().",14,data/crawl/squid/patch_1357.diff
https://github.com/squid-cache/squid/commit/d68277188a2ab77fc3d9016edd3fb9561ac9d22c,10 Oct 2001,"Commit Roger Venning's TOS/source address ACL selection work.
This code allows the user to set ToS bits or the source address
of an ACL by defining an ACL and then using that ACL in
(mutiple instances of the) tcp_outgoing_address statement.",459,data/crawl/squid/patch_1358.diff
https://github.com/squid-cache/squid/commit/20b6fc8ee308043883494d2a8e0b02fc036b1791,06 Oct 2001,"* Be more consistent with OpenLDAP tools in how to specify the LDAP server
  -h hostname

* Allow for more than one LDAP server to be specified",59,data/crawl/squid/patch_1359.diff
https://github.com/squid-cache/squid/commit/bacca099862398892042eae34ff5e901640ceb59,04 Sep 2001,Fix all DEFAULT_helper variables; change SQUID_VERSION to VERSION in dnsserver.c,585,data/crawl/squid/patch_1360.diff
https://github.com/squid-cache/squid/commit/beeb909cb48e7d01044bd6f3d13938b2bef95ffe,04 Sep 2001,SQUID_PREFIX is no longer needed and Makefile.am doesn't define it.,8,data/crawl/squid/patch_1361.diff
https://github.com/squid-cache/squid/commit/5d146f7dc38df9c10cb3fcac6e9f6ec41f40a514,29 Aug 2001,"latest rollup from ntlm.
Includes:
* bugfix for ntlm helpers getting stuck
* bugfix for ""Direction"" error
* NTLMSSP helper no longer hangs
* some minor authentication code tidyups
* ipcCreate returns PID.
* Stateful helpers show helper PID in stats page.
* Andrew Doran has updated all his email address's. Hi Andrew!",553,data/crawl/squid/patch_1362.diff
https://github.com/squid-cache/squid/commit/c04d4f40ba637c37ac4db8b020861d48d0a548b8,20 Aug 2001,"Resolve any possible conflicts with POSIX AIO

* Use the prefix squidaio_ rather than aio_...
* Some minor cleanups",698,data/crawl/squid/patch_1363.diff
https://github.com/squid-cache/squid/commit/92b5d5b7a185c6cc3e6fd0b6c025c821770b4859,19 Aug 2001,"remove reference to old 'cache_swap' option, and make this a warning
rather than a fatal error.",4,data/crawl/squid/patch_1364.diff
https://github.com/squid-cache/squid/commit/b671cc68ba4466217767054c00a521478de6c403,16 Aug 2001,"WIN32/Cygwin fixes by Guido

- Better GetOSVersion function, more squid ""aware"", added support for
Windows XP and future Windows versions.
- Added trap in WIN32_Subsystem_Init() for unknown or unsupported (WIN32s)
Windows version.
- Fixed compile warning in comm.c
- Changed exit() WIN32 hook, now less intrusive

And some ident fixes",647,data/crawl/squid/patch_1365.diff
https://github.com/squid-cache/squid/commit/0dbabb56eb90e2b10ef08f517bab89bff8f970b6,13 Aug 2001,"* return the load based on the aio queue depth
* add a statistic line showing the number of pending disk operations",11,data/crawl/squid/patch_1366.diff
https://github.com/squid-cache/squid/commit/dd1ee1e651c0456021274dc194c11b6152e0fba7,12 Aug 2001,"* Add support for the async write op
* Make sure we call freefunc() on the buffer in the write op case",38,data/crawl/squid/patch_1367.diff
https://github.com/squid-cache/squid/commit/2887ac99ff51e31af06f8c862f1600110e53dd03,12 Aug 2001,"Commit the basic code to implement async io via posix aio.
only read is done at the moment - write and sync haven't been
implemented yet.",105,data/crawl/squid/patch_1368.diff
https://github.com/squid-cache/squid/commit/697c29aa166d6efabbf2f5a0bff70f7ff46f5698,10 Aug 2001,"Fatal if we can't open a coss store file at init time, rather than
first IO time.",6,data/crawl/squid/patch_1369.diff
https://github.com/squid-cache/squid/commit/c94af0b96468ba69e7b8253488a699efd16a49cb,10 Aug 2001,"COSS fixes from diskio.
This code is now stable, but <2gb and sync.
Next, >2gb.",193,data/crawl/squid/patch_1370.diff
https://github.com/squid-cache/squid/commit/60d096f4287b864c0213790e0593d37851a15907,03 Aug 2001,"Latest NTLM snapshot code, courtesy of kinkie and robert.

<quote>
It's been a while coming... but Kinkie and I now have
probably-production ready NTLM code. It's gone past 1.5 million requests
without failing. The attached patch is a rollup of many minor fixes and
some enhancements:

* Digest: fix crash on shutdown
* ACL: New type max_user_ip to replace authenticate_ip_is_strict.
* ACL: Authenication refactored, to separate authentication and
  authorisation as well as allow 'lazy auth' where authentication is
  triggered by the presence of an authentication using ACL, not
  necessarily ""proxy_auth"". I.e. using max_user_ip will trigger
  authentication even if no proxy_auth acl's are defined.
* Authentication: API for schemes extended to allow handling duplicate
  authentication on a authenticated _connection_ (yes NTLM again).
* Authentication: Authentication API extended to allow multiple IP's per
  auth_user, and to allow authentication as an orthogonal process to
  authorisation.
* NTLM: many minor races fixed. Should prevent the ""Direction before
  ..."" errors and the ""Duplicate auth"" + login popup bug.
* Delay pools: Support authentication (Non-NTLM)in delay pools acl's.
  Beginnings of NTLM support for same.
* Helpers: Stateful helper bugfixes to prevent negative deferred helper
  counts (which prevented ntlm challenge refreshing).
* configure: detect two more headers for NTLM compilation on some
  platforms.

</quote>",1479,data/crawl/squid/patch_1371.diff
https://github.com/squid-cache/squid/commit/a560ee938de92d50e3d788f4c5067734978c1784,28 Jul 2001,"ACL driven reply_body_max_size by Robert Collins.

Bugzilla #75",207,data/crawl/squid/patch_1372.diff
https://github.com/squid-cache/squid/commit/8a3e7d9e5b547635cbe619559e8ecdee64f1562f,04 Jul 2001,"Added back some rudimentary removal policy statistics (only implemented
for the ""lru"" policy as of yet)

  policy.Stat(policy, sentry)

  appends policy statistics to sentry",59,data/crawl/squid/patch_1373.diff
https://github.com/squid-cache/squid/commit/5f3c1e9429f6c466e257b6afeaf06d865cc05e45,19 May 2001,"The ERROR macro is not used anywhere, and conflicts with a ERROR macro
on WIN32 platforms.",8,data/crawl/squid/patch_1374.diff
https://github.com/squid-cache/squid/commit/25a77f038f3eb57aae2ddb44050ef6bf85e56c6d,08 May 2001,Generalized how cache_dir lines are dumped on mgr:config,130,data/crawl/squid/patch_1375.diff
https://github.com/squid-cache/squid/commit/d193a4363591115b2e7a9cd16766f0015924859f,04 May 2001,"Support multiple SSL certificates. See http://squid.sourceforge.net/ssl/
for details.

Sourceforge tag: ssl-20010504",274,data/crawl/squid/patch_1376.diff
https://github.com/squid-cache/squid/commit/7c2a6c51c427634bd6b1f551ba7c2e4e23419339,17 Apr 2001," * -u <attrname>   Specifies the DN attribute name used for the user name.
 * -b <basedn> is now a required option. no built in default.",23,data/crawl/squid/patch_1377.diff
https://github.com/squid-cache/squid/commit/50f87883baf7672dc324038f4256b507cb16c877,17 Apr 2001,"More LDAP options
    -R		Do not follow referrals
    -a ...	specifies when to dereference aliases

Also be more tolerant for minor search failures, accepting partial results.
Microsoft Active Directory returns partial results due to a referral in
the user definition.",50,data/crawl/squid/patch_1378.diff
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/patch_1379.diff
https://github.com/squid-cache/squid/commit/331ba75615f2fdc0500eeb6525b6c68dd2bf81c8,16 Apr 2001,"Ability to search for the user DN to log in as

Command line options for all configuration data. No longer any need
to edit squid_ldap_auth.c, just specify the correct options from
squid.conf.

Arguments:
   -b basedn
   -s searchscope
   -f searchfilter
   ldap_server_name

More documentation will be written later, explaining how to use the
searchfilter and scope, with examples on how to use this to log in
to Microsoft active directory.",101,data/crawl/squid/patch_1380.diff
https://github.com/squid-cache/squid/commit/f484cdf5a978947ad50c69fd379ac5fc3027a43e,15 Apr 2001,"SSL->HTTP gatewaying support by Benno Rice

Allows Squid in accelerator mode to listen for https requests
as well as http requests.

(ssl_support.[ch] was forgotten in the big commit)",238,data/crawl/squid/patch_1381.diff
https://github.com/squid-cache/squid/commit/0c2bd4faac3ec8e8dc65cac855af5e9767752320,15 Mar 2001,fix delaypools/delay-pools typo and remove references to HEAP_REPLACEMENT,51,data/crawl/squid/patch_1382.diff
https://github.com/squid-cache/squid/commit/6437ac71181155355122a90bffc76176c17bbdef,10 Mar 2001,"auth_rewrite update:

Improved NTLMSSP debugging & reliability
Clearer acl.c logic, catches boundary cases.
""Fail open"" configure option for NTLM to degrade gracefully
Should fix the compile issues on Solaris 8

Rob & kinkie.",464,data/crawl/squid/patch_1383.diff
https://github.com/squid-cache/squid/commit/700cae18de3e211b1b31a998a2bac708235b4781,06 Mar 2001,"Here are Gerben Wierda's files for installation and package
maintenance on Nextstep.",205,data/crawl/squid/patch_1384.diff
https://github.com/squid-cache/squid/commit/72711e319152bb701c15833f72a8aab2d5035bdc,03 Mar 2001,"cbdata now have a per-type free function rather than per allocation.

Changes to the API:

To initialize a new CBDATA type with a free function:

   CBDATA_INIT_TYPE_FREECB(typename, freefunction);

To allocate a cbdata structure

   var = cbdataAlloc(typename);
   (was CBDATA_ALLOC(typename, freefunc) )",353,data/crawl/squid/patch_1385.diff
https://github.com/squid-cache/squid/commit/54b7fec9eafb0777f3d6e2450f39a36d60f9b344,02 Mar 2001,"Oops.. the transition to cache_dir options for Q1 and Q2 was not fully
finished. There was many leftovers in the parsing code...",14,data/crawl/squid/patch_1386.diff
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/patch_1387.diff
https://github.com/squid-cache/squid/commit/de3ee917a46bbf69275684c808627e2e4ec69e01,21 Feb 2001,"cachemgr fix for http_header_access and header_replacement
by Robert Collins

Specifically neither produce output that can be put into a squid.conf
file...",15,data/crawl/squid/patch_1388.diff
https://github.com/squid-cache/squid/commit/de3ee917a46bbf69275684c808627e2e4ec69e01,21 Feb 2001,"cachemgr fix for http_header_access and header_replacement
by Robert Collins

Specifically neither produce output that can be put into a squid.conf
file...",15,data/crawl/squid/patch_1388.diff
https://github.com/squid-cache/squid/commit/8e8d4f300e0fcfdea4ea69b89ba87301346b4cca,10 Feb 2001,"The ""maxobjsize"" parameter moved to an optional cache_dir option.

This was done by implementing a generic option parser for cache_dir
where each FS-type can include their own options if needed.

squid.conf syntax changes:

maxobjsize argument now an option
the Q1 and Q2 arguments to diskd now options

Generic cache_dir syntax

  cache_dir type path [fs-parameters] [optins]

Common options available to all stores

   max-size=n (the former maxobjsize argument)
   read-only

diskd options
   Q1=n, Q2=n (the former Q1 and Q2 arguments)


Implementation details:

Each option is defined by a struct cache_dir_option with the members
  name   option name
  parse  function that parses the option argument

The parse functions are called with the arguments
  parse_function(SwapDir *sd, const char *optionname,
		  const char *optionvalue, int reconfiguring)


The FS cache_dir parser (both initial and reconfigure) must call
parse_cachedir_options after parsing all it's FS-specific arguments.

  parse_cachedir_options(SwapDir *sd, struct cache_dir_option *options,
			  int reconfiguring)

options is an array of FS-specific options, terminated with a entry where
name is NULL.

The list of common options shared by all stores is defined in cache_cf.c",386,data/crawl/squid/patch_1389.diff
https://github.com/squid-cache/squid/commit/2d72d4fd6db89d02d89d59d9e4d9efb23ad26dbc,08 Feb 2001,Cleaned up the namespace (local functions made static),348,data/crawl/squid/patch_1390.diff
https://github.com/squid-cache/squid/commit/2d70df7262cac3e29d34bed03b758695f5961b74,01 Feb 2001,"Major update from auth_rewrite

Robert Collins:

Digest (RFC2617) proxy authentication implementation

Chemolli Francesco:

Several bugs in NTLM authentication when dealing with untrusted
domains, wrong passwords, helper arguments and more have been fixed",2527,data/crawl/squid/patch_1391.diff
https://github.com/squid-cache/squid/commit/5ff76111b95f1e192f101f6ae2625ffb8523c067,30 Jan 2001,"Cleanup of coredump_dir. No longer automatically uses the first cache_dir
location, and can be commented out to use the current directory.",32,data/crawl/squid/patch_1392.diff
https://github.com/squid-cache/squid/commit/8749fa47aedadc8b36b9df15ec9e3bf6251ec5c2,26 Jan 2001,"From Kevin Littlejohn:

makes cache_cf.c not try and figure out nobody and nogroup if it's not
going to use them - ie. if squid is being run as a user instead of as root.
It came up because I don't have a nogroup on my machine.

Additions by Henrik Nordstrom:

cache_effective_group now defaults to the GID of cache_effective_user, or
the current user if not started as root. If can always be specified to some
other value if required, but are then subject to the permissions set by the
os (i.e. only root can set the group to a group where he/she is not a member)",34,data/crawl/squid/patch_1393.diff
https://github.com/squid-cache/squid/commit/a88de9ce4d7ad0f90819675551b3a3fc8ac280b4,11 Jan 2001,"auth_rewrite merge:

Usage: message added",21,data/crawl/squid/patch_1394.diff
https://github.com/squid-cache/squid/commit/fe1bda4b3bc1836b8b305eaed26456fa26978d48,10 Jan 2001,"Made overloaded dnsserver queues a soft error unless the queue is
completely stuck (3 minutes). This to handle internet-breakdowns more
gracefully when not using the internal DNS client.",12,data/crawl/squid/patch_1395.diff
https://github.com/squid-cache/squid/commit/c3b33cb704d74286976cfd795ba083a7c04e94a2,09 Jan 2001,"login=*:password cache_peer option to pass the authenticated username to
a upstream proxy in another adminstrative domain.",29,data/crawl/squid/patch_1396.diff
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/patch_1397.diff
https://github.com/squid-cache/squid/commit/468ae12b0eadd08c86b44a60a04da534cfa11a06,07 Jan 2001,indent,4020,data/crawl/squid/patch_1398.diff
https://github.com/squid-cache/squid/commit/28c60158dce026adb54eee6724ae47c5a4a1bb77,05 Jan 2001,"A modified / unified cbdata and mempool implementation. cbdata
entries are now mempool entries with a cbdata header, saving a
hash operation each time some cbdata is used.

Some documentation is avaliable in the programmers guide.

Submitted by: Moez Mahfoudh <moez.mahfoudh@imag.fr>
Approved by: squid-dev",709,data/crawl/squid/patch_1399.diff
https://github.com/squid-cache/squid/commit/3abcea5e380564b71fa2ed57794fd5e7cbdcb14b,05 Jan 2001,"I think it was a really bad idea to have both 'fs.blksize' and 'fs.kperblk'
as an optimization.  Its too hard/ugly to make sure they stay
consistent.  This patch removes fs.kperblk.",42,data/crawl/squid/patch_1400.diff
https://github.com/squid-cache/squid/commit/6bccf575a04146f1d4a205445a1b1814d9f09482,05 Jan 2001,"Ian Turner (vectro@pipeline.com) sent in this patch for ACL-based
header anonymization, filtering, and replacing.",363,data/crawl/squid/patch_1401.diff
https://github.com/squid-cache/squid/commit/b3de4c9b210bf6f6b93577e9179b440f59be586d,05 Jan 2001,"A hack to support array types in Squid's Config structure.  Mostly this
is to eliminate compiler warnings.  The compiler wants us to write
   parse_bar(&Config.bar[0]);
rather than
   parse_bar(&Config.bar);",17,data/crawl/squid/patch_1402.diff
https://github.com/squid-cache/squid/commit/90d42c2863149e2c5ef1d8b02b5871a335e3aa8e,02 Jan 2001,"swap space accounting used to assume 1K block size.  This patch uses
statvfs/statfs to get the actual block size and use it when accounting
for filesystem overheads.",57,data/crawl/squid/patch_1403.diff
https://github.com/squid-cache/squid/commit/181b1adcd6abe7d7147b49f653b2b0117140f970,31 Dec 2000,"Some corrections/additions from the original /etc/hosts patch:
* The 'H' flag in the ipcache cachemgr output was missing.
* The memory allocation comment on ipcacheAddEntryFromHosts was plain wrong
  (copy pasted from fqdncache.c I think.. correct there but not here)",9,data/crawl/squid/patch_1404.diff
https://github.com/squid-cache/squid/commit/0e70aa1e477db5f0fb4f9d4bc3d0576b7a0a27be,31 Dec 2000,/etc/hosts parsing patch by Chemolli Francesco.,231,data/crawl/squid/patch_1405.diff
https://github.com/squid-cache/squid/commit/8ee9b49f341045275e07665b7e52f92c06676c00,05 Dec 2000,"A number of CARP bug fixes.

peer->carp.hash was an unsigned long, but the spec requires 32-bit math
on integers.  Since longs are known to sometimes be 64-bits, its safer
to use unsigned int.

peer->carp.load_factor was a float, but its better to use double to
be consistent with other floating point functions and variables.

In parse_peer() I'm concerned that *token could be signed, so its
now casted to unsigned int.

In parse_peer() there is a bug in calculating the proxy hostname hash.
On the final ROTATE_LEFT, it should be ""="" rather than ""+="".

In carpInit() pay special attention to int/double conversion bugs
and passing ints to functions that expect doubles.

In carpInit() there is a bug with the value of ""k"".  In the loop,
k needs to be incremented *before* its used.  The internet-draft
begins with k=1, so the first time through the loop k should equal 2.

Added ""carp"" to cache manager for info and debugging.

I think there are still two bugs: (1) the draft says the multipliers
must be calculated in order of smallest to largest factor.  We don't
do that yet. (2) the 'score' calculation needs to be converted to
double when we multiply by the multiplier.  Otherwise there will
be overflows since the multiplier can be greater than 1.",65,data/crawl/squid/patch_1406.diff
https://github.com/squid-cache/squid/commit/c7f9eb6d11790300237552ace51f554b666a4b73,05 Dec 2000,"A feature to limit the number of connections that we make to
a neighbor cache.",55,data/crawl/squid/patch_1407.diff
https://github.com/squid-cache/squid/commit/0c5ccf11f88699938dd8ab9e7edc3eb5ea0de7d5,18 Nov 2000,"Don't return NULL in createRemovalPolicy() if there is no match for
the given policy type. None of the FS code handles this correctly,
and it was causing SIGSEGVs when a cache_replacement_policy was not
set in squid.conf, defaulting to lru, and lru was not compiled in.

We now warn very loudly and die with an error. cache.log will tell the
user to check cache_replacement_policy and memory_replacement_policy
in their squid.conf file.",8,data/crawl/squid/patch_1408.diff
https://github.com/squid-cache/squid/commit/ccf44862a7afef089080039a3b3b322230a1697e,13 Nov 2000,"Convert http_ver from a float to http_version_t which is a struct containing
two integers.

Submitted by: Robert Collins <robert.collins@itdomain.com.au>",165,data/crawl/squid/patch_1409.diff
https://github.com/squid-cache/squid/commit/55f0e6f71be85cb398494acf9a7852ce424a57b8,11 Nov 2000,"Major rewrite of async-io to make it behave a bit more sane with
substantially less overhead.

Some tuning work still remains to make it perform optimal. See the start
of store_asyncufs.h for all the knobs.",967,data/crawl/squid/patch_1410.diff
https://github.com/squid-cache/squid/commit/65fa5c61667c1b51511970fa24ae02dff6dd3df4,10 Nov 2000,"DW:
 - Rewrite of much of refreshCheck().

   This was prompted by a bug report that we didn't properly handle the
   must-revalidate directive.  Indeed, we always caused a refresh
   for must-revalidate.   The spec says must-revalidate only takes effect
   for stale responses.

   I find the spec to be unclear on how to handle must-revalidate without
   an explicit expiration time.  Currently, if we have a response
   that has must-revalidate, no expires, but the last-modified factor
   rule says the reponse is fresh, then we don't force a validation.

   Also added support for the max-stale request directive.

   I changed some of the internal accounting to use status codes.  In the
   future it may be useful to have a ""refresh.log"" file so people can
   figure out why a particular request got validated, or didn't.",445,data/crawl/squid/patch_1411.diff
https://github.com/squid-cache/squid/commit/9a8f20844aba5bcf2af4d2cd5df1d13792f863a5,09 Nov 2000,"DW:
 - Clean up debugging",100,data/crawl/squid/patch_1412.diff
https://github.com/squid-cache/squid/commit/10270faab2bc84e50cde13431a6e6d1932966e5f,05 Nov 2000,"Cross-site scripting fixes by Robert Collins and Henrik Nordstrom

Everywhere where Squid inserts text received from the network into
a HTML page (error pages, FTP listings, Gopher listings, ...) care
must be taken to ensure that the text is properly encoded as HTML,
or a malicious user might be able to insert script code or other
HTML tags, and exploit the web browser of any user visiting their
page or clicking on that funny link received in a email..",78,data/crawl/squid/patch_1413.diff
https://github.com/squid-cache/squid/commit/225644d76d8519720b9c39d531e3216a7b886d3f,01 Nov 2000,"DW:
 - This patch is some work-in-progress for a ""forward.log"" that would
   log all server-side requests that get forwarded.

   This patch was previously committed with an incorrect CVS comment so
   I manually removed those revisions and re-committed the patch.",95,data/crawl/squid/patch_1414.diff
https://github.com/squid-cache/squid/commit/186477c1163c0718cf127587c1ad63a1e61906d9,01 Nov 2000,"DW:
 - Changed occurances of

        struct _foo {
            /* first two items must be same as hash_link */
            char *key;
            foo *next;
            ...
        };

   to

        struct _foo {
            hash_link hash;     /* must be first */
            ...
        };",385,data/crawl/squid/patch_1415.diff
https://github.com/squid-cache/squid/commit/58cd5bbda71007691fd080fd87bfa8b1111b7faa,17 Oct 2000,"Andres Kroonmaa's MemPool tidyup, take 1. Take a whole bunch of
xmalloc/xcalloc's and replace them with mempool'ed versions of
things. Not everything has been converted, but this is a start.
Notable weirdnesses are:

* aufs - there are now a few pools which are used for string allocation
  for things like object paths. This might not be the most optimal
  solution but its better than what existed.

* pconn.c - an initial pconn FD set is mempool'ed, and if the pconn set
  grows bigger than PCONN_FD_SZ it changes to xmalloc()

* client_side.c - the incoming request buffer is now initially mempooled,
  of size CLIENT_REQ_BUF_SZ (4096 bytes atm). If it needs to grow, it
  changes to xmalloc()",472,data/crawl/squid/patch_1416.diff
https://github.com/squid-cache/squid/commit/08e8e020569dfd9d49330bc4e65a13b6cca85533,11 Oct 2000,"DW:
 - My change to eliminate stdio from net_db.c sucked.  It leaked memory,
   and it had awkward buffer offset junk.  Its probably better to
   use the logfile.c code, which unfortunately requires a change
   to logfileOpen().  Previously the logfile code exited with
   a fatal message if there was an error opening or writing the
   file.  For netdb we don't care that much, so I added a ""fatal""
   flag to logfileOpen().",74,data/crawl/squid/patch_1417.diff
https://github.com/squid-cache/squid/commit/d480bbc02a06721273e64a7573915db0b7221e94,06 Oct 2000,"DW:
 - Add counters for the number of calls to memPoolAlloc and memPoolFree.",9,data/crawl/squid/patch_1418.diff
https://github.com/squid-cache/squid/commit/111b16cf035d5a7ae8f9e51edb47b0359db33e97,05 Oct 2000,"DW:
 - Removed stdio from net_db.c as suggested by Jens-S. Voeckler.",110,data/crawl/squid/patch_1419.diff
https://github.com/squid-cache/squid/commit/ecc3091bac1697dd76c93b4349ba61f5001698d5,04 Oct 2000,"DW:
 - Simplified ipcache internals in the same manner as the fqdncache code.
   The ipcache structures have been made internal to ipcache.c.  The
   status variable is gone.  IPcache entries are added to the hash table
   only after the lookup completes.  There is no more need for
   ipcacheUnregister. etc.",430,data/crawl/squid/patch_1420.diff
https://github.com/squid-cache/squid/commit/add5d21fe05d72d1ac3ab26656e1f3090ab072f1,04 Oct 2000,"DW:
 - This patch makes a fundamental change to the FQDN cache internals.
   Before, FQDN entries could be in the hash (i.e. public) and in
   a pending state.  Additional lookup requests for an entry in the
   pending state would be joined to the pending entry.  Thus, we would
   only bother the DNS server for one lookup even if many clients were
   interested in it.  The problem is that if one lookup got ""stuck"" for
   some reason, many clients would be blocked.

   Now the pending lookups are ""private"" and are made public only
   after the DNS server responds.  The disadvantage is that we bother
   the DNS server for parallel requests, but we wouldn't block all of
   Squid's clients if one of those queries got stuck.

   This patch also removes the ugliness of needing to ""rename"" stuck
   queries after some timeout in order to try getting a fresh
   response.",387,data/crawl/squid/patch_1421.diff
https://github.com/squid-cache/squid/commit/be58afb56f5b5553f566a501aa863ebeaef40c49,18 Sep 2000,"Newline was missing from removal policy configuration printouts..
(mgr:config)",3,data/crawl/squid/patch_1422.diff
https://github.com/squid-cache/squid/commit/7928b8df48adc4bf4f781d149b4bb764aa041689,22 Jul 2000,"DW:
 - missing newline on RCODE table output",3,data/crawl/squid/patch_1423.diff
https://github.com/squid-cache/squid/commit/42b51993fc0613645606529f3124e598a6dbc8e4,18 Jul 2000,"DW:
 - Synced HEAD with 2.3.STABLE4.",542,data/crawl/squid/patch_1424.diff
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/patch_1425.diff
https://github.com/squid-cache/squid/commit/558be27a00732874f2f24048a883bcbefd5cdb90,14 Jul 2000,"DW:
   - This patch retries internal DNS queries that are returned with
     RCODE 2 (ServFail).",70,data/crawl/squid/patch_1426.diff
https://github.com/squid-cache/squid/commit/fd2c5549483bfdf2dedca8200fb2aaa5dae473be,13 Jul 2000,"DW:
 - Jens-S. Voeckler <voeckler@rvs.uni-hannover.de> submitted this
   patch for referer header logging.",121,data/crawl/squid/patch_1427.diff
https://github.com/squid-cache/squid/commit/65a53c8ed44bb597f7fde1ae5ad80900e9b02131,26 Jun 2000,"DW:
 - Made the store dir selection algorithm configurable via
   'store_dir_select_algorithm'.  There are currently two options:
   'least-load' (storeDirSelectSwapDirLeastLoad(), the default),
   and 'round-robin' (storeDirSelectSwapDirRoundRobin()).
 - Added counter stats to the storeCreate() function to find out
   how often it fails and succeeds.",123,data/crawl/squid/patch_1428.diff
https://github.com/squid-cache/squid/commit/23dc8acafc3dd7a63df446c9712ca11394757cb4,26 Jun 2000,"DW:
 - Added store swapin and swapout counters.
 - Changed the location of 'swap_files_cleaned' in StatCounters structure.",44,data/crawl/squid/patch_1429.diff
https://github.com/squid-cache/squid/commit/c1dd71ae4ab90baa7e5a7b784bc37eab1738ee22,26 Jun 2000,"DW:
 - gindent -br -ce -i4 -ci4 -l80 -nlp -npcs -npsl -d0 -sc -di0 -psl",166,data/crawl/squid/patch_1430.diff
https://github.com/squid-cache/squid/commit/6a566b9c9fa4d40f154a60497e332bc9067b4fc8,09 Jun 2000,"Modular policy implementation. See programmers guide for API details.

This also includes Adrians improved store I/O callback handler model.",3040,data/crawl/squid/patch_1431.diff
https://github.com/squid-cache/squid/commit/6a80d786b1dfa4ab1753e16c89f13488d7958ced,30 May 2000,"Added ""dummy"" store.log logging of entries with no mem object. This
includes almost all RELEASE's.",15,data/crawl/squid/patch_1432.diff
https://github.com/squid-cache/squid/commit/8646c00a610abced64297d6f835b91906fca3e68,29 May 2000,"DW:
 - Uninitialized memory is a bad thing.  Use xcalloc instead.
 - xcalloc never returns NULL.  It either succeeds or the process aborts.",8,data/crawl/squid/patch_1433.diff
https://github.com/squid-cache/squid/commit/d20b1cd0386b841df75fe2b06e321f468d8655c6,16 May 2000,"DW:
 - Synced HEAD with SQUID_2_3 branch as of SQUID_2_3_STABLE3.  Can't
   say it was fun.  I wouldn't be surprised if some conflicts got
   resolved incorrectly.",2641,data/crawl/squid/patch_1434.diff
https://github.com/squid-cache/squid/commit/a4b8110e31f7de1dca381099e7b95346a05116c2,12 May 2000,"DW:
 - indent -br -ce -i4 -ci4 -l80 -nlp -npcs -npsl -d0 -sc -di0 -psl
 - C++ style comments not allowed",2987,data/crawl/squid/patch_1435.diff
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/patch_1436.diff
https://github.com/squid-cache/squid/commit/6b53c3926e3c3712886d780bc903488591f73fe7,03 May 2000,"hno squid-2.3.DEVEL3.squid.conf_template_update-4.patch
Squid-2.3.DEVEL3: Major update of squid.conf template generation

A major update on how squid.conf is generated from cf.data.pre and
some related changes.

* Default lines are generated from the compiled default settings (less
  duplication in cf.data.pre)
* Non-enabled functions gets a note telling that the directive isn't enabled
  and what configure option (or defined) that is required to enable it.

Some cleanup of how some defines are used..",588,data/crawl/squid/patch_1437.diff
https://github.com/squid-cache/squid/commit/592da4ecd77b5bbd8a323353c4268d12e4ec59ad,03 May 2000,"hno squid-2.2.STABLE4.helper_statistics-2.patch
Squid-2.2.STABLE4: Include request in helper statistics

Include the request sent in helper statistics to allow the administrator
to find out why the helper processes are busy.",18,data/crawl/squid/patch_1438.diff
https://github.com/squid-cache/squid/commit/145cf92870019124d98aca879aa071c8b147d71e,03 May 2000,"hno squid-2.3.DEVEL3.auth_regex.patch

Squid-2.3.DEVEL3: proxy_auth_regex and ident_regex ACL types

Added proxy_auth_regex and ident_regex ACL types",64,data/crawl/squid/patch_1439.diff
https://github.com/squid-cache/squid/commit/5673c2e23845b9dca17b7c5b3812c29c8c390e13,15 Mar 2000,"DW:
 - Use new Logfile module for access,useragent,store logs.",265,data/crawl/squid/patch_1440.diff
https://github.com/squid-cache/squid/commit/06f0c8afe4148609e3919881ee18ffbbe0dcf804,15 Mar 2000,adding,152,data/crawl/squid/patch_1441.diff
https://github.com/squid-cache/squid/commit/fc8b9fc0336c4b1adda593f72ee1db0503b3be19,11 Jan 2000,"DW:
 - Changed global double-linked LRU list to a bunch of LRU lists,
   one for each SwapDir.  This allows us to choose which SwapDir
   cache replacement should occur on.
 - Previously the LRU list links where maintained by storeHashInsert and
   storeHashDelete.  Now they happen in the new storeSwapFileNumberSet
   function.  So entries are added and removed from the list only when
   their swap file numbers are set/cleared.
 - Changed storeMaintainSwapSpace so that it removes objects in
   a round-robin manner.  This should keep the number of unlink
   requests approximately constant across all SwapDir's.
 - Also changed the calculation of 'max_remove' in storeMaintainSwapSpace.
   Now we remove up to the 5 minute average client request rate, with
   a minimum of 10.
 - This new replacement code keeps the disk usage right at the
   high water mark.  Files are agressively removed whenever the
   high water mark is reached.  No files are removed if the usage
   is below the high water mark.  The only purpose for the low water
   mark now is to calculate the time until the next event.
 - Removed the case when we stop opening swapout files because the LRU
   age gets too low.
 - new_StoreEntry now initializes e->swap_file_number to -1.
 -",160,data/crawl/squid/patch_1442.diff
https://github.com/squid-cache/squid/commit/4f4d1d6e888bf2816dcfb100cb0716a6b37e4a9d,06 Jan 2000,"Glenn
 - Adds counters for disk hits and memory hits.",42,data/crawl/squid/patch_1443.diff
https://github.com/squid-cache/squid/commit/7e3ce7b9132c5b7796d7eec8194ec8d417d86361,31 Dec 1999,merge changes from SQUID_2_3 branch,2495,data/crawl/squid/patch_1444.diff
https://github.com/squid-cache/squid/commit/8b10870519f840625cc0ea161e79358742ed431f,01 Dec 1999,"dynamic filemap patch from 2.3 branch
plus print ""so far"" debug lines more often",96,data/crawl/squid/patch_1445.diff
https://github.com/squid-cache/squid/commit/9bc73deb181f454f4e5597c67c5b6b40fd4d0f58,04 Oct 1999,2.3 branch merge,3942,data/crawl/squid/patch_1446.diff
https://github.com/squid-cache/squid/commit/1f38f50af30799145c46f4789f0eeb8e338ed389,02 Aug 1999,2.3 branch merge,571,data/crawl/squid/patch_1447.diff
https://github.com/squid-cache/squid/commit/ede4c165ffae0a716ef4bb3c14b54f7bb0bdd6cf,23 Jul 1999,Number of slight corrections,37,data/crawl/squid/patch_1448.diff
https://github.com/squid-cache/squid/commit/b5b86e2c1eab6e4a90c6843d20b3b6d28e5c6c12,22 Jul 1999,Correctly deal with multiple caches,125,data/crawl/squid/patch_1449.diff
https://github.com/squid-cache/squid/commit/c8366e06dda8d12145c0532b907aad3e35062502,30 Jun 1999,diskd compile fixes,29,data/crawl/squid/patch_1450.diff
https://github.com/squid-cache/squid/commit/2b906e482d2956fa5ba5cb10272c3a6073a62f50,25 Jun 1999,committing Dilley's HEAP replacement code,504,data/crawl/squid/patch_1451.diff
https://github.com/squid-cache/squid/commit/ad19eafb998c90b24e3348f0cafce714740d81be,25 Jun 1999,adding,786,data/crawl/squid/patch_1452.diff
https://github.com/squid-cache/squid/commit/07476a7fd727d70833a2d0f2ffc747d4016f8ed9,17 Jun 1999,"Added redirector_bypass option, written for Deere and Company",33,data/crawl/squid/patch_1453.diff
https://github.com/squid-cache/squid/commit/b2c141d4440ca2ba7c37fee43c9875a4049317a6,25 May 1999,"massive store filesystem reorganization.  Removing hard-coded hooks
for UFS storage and using function pointers instead.  Yummmm...",937,data/crawl/squid/patch_1454.diff
https://github.com/squid-cache/squid/commit/0e4e0e7d10a5f46b03ad9e31ab0ff156643edbb8,22 May 1999,"Continuing the process of supporting multiple filesystem types.  Now
the I/O operations are function pointers in the SwapDir structure.

Moved UFS-specific parsing out of cache_cf.c and into store_dir_ufs.c.
Then had to make some cache_cf.c functions global.

Removed some remaining bits of USE_ASYNC_IO code.",292,data/crawl/squid/patch_1455.diff
https://github.com/squid-cache/squid/commit/ba781fe79304a37571ec97337b3e37f45bb0fa1b,22 May 1999,Added log_type to 'active_requests' output,3,data/crawl/squid/patch_1456.diff
https://github.com/squid-cache/squid/commit/60df005c02d5961620bab14af99495337f4fb410,05 May 1999,gindent,1426,data/crawl/squid/patch_1457.diff
https://github.com/squid-cache/squid/commit/9838d6c806a6934c01c3e28ff4fdf5b7a175e6b9,04 May 1999,move some store initialization stuff into storeUfsDirInit(),52,data/crawl/squid/patch_1458.diff
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/patch_1459.diff
https://github.com/squid-cache/squid/commit/2391a1621a15547b65862948783e1676f0840dd6,04 May 1999,"An initial implementation of new store API.  Everything goes through
fucntions in store_io.c, which is basically a level of indirection
for different types of filesystems.

This still needs a lot of work.  Have to move all rebuild functions
into store_io_ufs.c.  Have to add the indirection, instead of hard
coding everything to the UFS code.",1009,data/crawl/squid/patch_1460.diff
https://github.com/squid-cache/squid/commit/cbfbf2101659229aad11f44037ceb58afff061eb,04 May 1999,"fix refresh stats
   - show 0 entries too
   - put a new line after ""total"" and before FYI entries",4,data/crawl/squid/patch_1461.diff
https://github.com/squid-cache/squid/commit/c7bc012c39ba9058a9749e38cd4f963b5c83ebff,27 Apr 1999,Got GRE working,86,data/crawl/squid/patch_1462.diff
https://github.com/squid-cache/squid/commit/281038077d565b1ea1a3157efcc270e5aac8feb6,27 Apr 1999,rearrange so we can actually FIND comm_poll_dns_incoming,1396,data/crawl/squid/patch_1463.diff
https://github.com/squid-cache/squid/commit/320e9f3612daa1eee96a476d0092a25b934f4330,27 Apr 1999,WCCP functionality for Squid,930,data/crawl/squid/patch_1464.diff
https://github.com/squid-cache/squid/commit/6b8e748172a520691893b7b14378dd50943995c0,23 Apr 1999,branch 2.2 merge,265,data/crawl/squid/patch_1465.diff
https://github.com/squid-cache/squid/commit/236b1f2ad5087df6789dddd64542cc29e947a989,19 Apr 1999,"added ""last_event_ran"" for cachemgr.cgi",7,data/crawl/squid/patch_1466.diff
https://github.com/squid-cache/squid/commit/d980562fbbbf9ab32bfc4d8094b2c0d5541ff3e6,19 Apr 1999,try putting border on tables,4,data/crawl/squid/patch_1467.diff
https://github.com/squid-cache/squid/commit/39d5af299f23a55ffd24a3ad10edd49f04db2fce,19 Apr 1999,show if cbdata valid in event queue for cachemgr,12,data/crawl/squid/patch_1468.diff
https://github.com/squid-cache/squid/commit/3d3109e1185d74d5cfb301f359cbf6ee619be376,19 Apr 1999,add weight to cachemgr stats,11,data/crawl/squid/patch_1469.diff
https://github.com/squid-cache/squid/commit/0a69973e0e354338e377043508163415ba81fc76,19 Apr 1999,added FD byte counters,23,data/crawl/squid/patch_1470.diff
https://github.com/squid-cache/squid/commit/83c254c1e0d56e64c82e5ea409189330aa76196f,18 Apr 1999,remove printf debugging,3,data/crawl/squid/patch_1471.diff
https://github.com/squid-cache/squid/commit/b8cbc8363d25ef804f33376bfe5276a71e13d2a8,18 Apr 1999,"Added rfc1035BuildPTRQuery()

Changed rfc1035AnswersUnpack() to unpack DNS names into character
buffers so that the upper layers don't have to.   This is the switch
statement inside that function that exectues different copies
based on the record type.",119,data/crawl/squid/patch_1472.diff
https://github.com/squid-cache/squid/commit/ef523f990009da27ce7bbac6ceb4b96301d09eb9,16 Apr 1999,"comm_incoming crap for internal DNS

Semi-better retransmit algorithm.  Use nameserver % num_sends",145,data/crawl/squid/patch_1473.diff
https://github.com/squid-cache/squid/commit/b6a2f15e25349145c5f0f4737d4f5ef1cd8b6ad2,15 Apr 1999,SQUID_2_2 branch merge,3534,data/crawl/squid/patch_1474.diff
https://github.com/squid-cache/squid/commit/7cfc1c9ac835daa437691a6cfe7ca82fe7c3bcdd,15 Apr 1999,"various bugs for internal DNS

also first stab at retransmission of delayed queries",132,data/crawl/squid/patch_1475.diff
https://github.com/squid-cache/squid/commit/a16b4aa0f8db50e1c8843b2b5c26ed16e0e9ce3b,14 Apr 1999,mostly cachemgr stats and debugging,23,data/crawl/squid/patch_1476.diff
https://github.com/squid-cache/squid/commit/7b724b86a8a2f18bb51f87e968de315a0ecddeb6,14 Apr 1999,initial working implementation of internal DNS!,633,data/crawl/squid/patch_1477.diff
https://github.com/squid-cache/squid/commit/fb29421b28c6150682d9e81aefa0c2df2df689bb,14 Apr 1999,adding rfc1035.c - DNS,491,data/crawl/squid/patch_1478.diff
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/patch_1479.diff
https://github.com/squid-cache/squid/commit/74aa8456554ecdc06c6964556556073e0a625c8e,30 Jan 1999,"go ahead and print ""none"" and ""disable"" cachemgr passwords",7,data/crawl/squid/patch_1480.diff
https://github.com/squid-cache/squid/commit/7b3942d3ebf076a586411a97850fa55d1ab5a6c5,24 Jan 1999,fix ifdef handling in parser,17,data/crawl/squid/patch_1481.diff
https://github.com/squid-cache/squid/commit/9747459028dfcab615920ccec6c1898ad49ce91f,23 Jan 1999,Modified the anonymizer to be more customizable.,242,data/crawl/squid/patch_1482.diff
https://github.com/squid-cache/squid/commit/83a29c953f6826820b803b57919e2aab07feee20,22 Jan 1999,"changed open_disk_fd to store_open_disk_fd.

1) we want to track only STORE files, not necessarily log files.  Log files
   don't contribute much to disk load.

2) this accounting belongs in the ""store filesystem"" layer, not
   the ""fd layer"".  Mostly motivated by Henrik's addition of
   Opening_FD counter in the async code.",50,data/crawl/squid/patch_1483.diff
https://github.com/squid-cache/squid/commit/6f821399866aeb718576c4765e8b3b8b87f06f42,20 Jan 1999,"From:    Tony Finch <fanf@demon.net>
The patch below adds accelerator mode functionality to tcp-banger2. In
this mode it makes requests like
        PURGE /path/to/file HTTP/1.0
        Host: www.example.com
instead of
        PURGE http://www.example.com/path/to/file HTTP/1.0

We use it for keeping our accelerators up-to-date with respect to
customer changes on their sites.",24,data/crawl/squid/patch_1484.diff
https://github.com/squid-cache/squid/commit/42aa44140e76eacf861fdcc9381686222b2ac3c8,20 Jan 1999,removed fdTouch debugging,54,data/crawl/squid/patch_1485.diff
https://github.com/squid-cache/squid/commit/b889035942262249a101bd4e14f11d9415e3c72e,19 Jan 1999,2.1 branch merge and gindent,286,data/crawl/squid/patch_1486.diff
https://github.com/squid-cache/squid/commit/e92e4e445bc84a5c4d599a1cac1f867bd148a525,19 Jan 1999,"sigh.  Okay, this might work better.

To ""decouple"" storeAbort calling into the server side (fwdAbort) and
wreaking havoc, lets have the storeAbort callback done as an event,
thus outside of comm_select loop.

Hopefully this means we don't need the gross ""flags.delayed_comm_close""
and current_hdl_fd crap.

Also, since we moved the abort callback to an event, we might end up
doing a server read after the entry has been aborted, but before
the event is called.  Thus, the server modules need to check
for ENTRY_ABORTED before reading.

this commit also adds some (temp?) debugging to track open
disk FDs",123,data/crawl/squid/patch_1487.diff
https://github.com/squid-cache/squid/commit/550950432ce0736846ac4e96809028c67cffc80d,15 Jan 1999,"Here is a small addon to tcp-banger2: Warn if an unexpected HTTP status
is received.",25,data/crawl/squid/patch_1488.diff
https://github.com/squid-cache/squid/commit/cd3770650479af300ac44219406c23dc64ddb989,14 Jan 1999,OS/2 fixes from Doug Nazar nazard@man-assoc.on.ca,89,data/crawl/squid/patch_1489.diff
https://github.com/squid-cache/squid/commit/1cfdbcf024e40720d2b358414e6327fa8de958b1,12 Jan 1999,"This patch fully transforms proxy_auth into a ACL type, allowing both
allow and deny in any order suitable.

Authentication is requested from the user if:
* proxy_auth is used and no valid authentication header is present.
* wrong password is used
* denied by a proxy_auth ACL

A positive sideeffect is that is is also possible to use deny_info on
proxy_auth ACLs to change the message returned. It also fixes the
problem where proxy_auth user wasn't logged if the proxy_auth user info
wasn't cached.

This patch fully replaces my previous attemt.

There is a small collision with one of my other changes in proto.h, but
I assume that you know how to resolve this.",244,data/crawl/squid/patch_1490.diff
https://github.com/squid-cache/squid/commit/635e6242db4ed619a611a269edec9b280690b109,12 Jan 1999,"IRIX inline IO optimization ( -OPT:fast_io=ON) fubars this:

	fprintf(fopen(""foo"", ""w""), ""%d"", val);",128,data/crawl/squid/patch_1491.diff
https://github.com/squid-cache/squid/commit/6e5ae4a4f3314309a6e851cf295e157e40aab01c,12 Jan 1999,"Small change of Squid output for FTP
Henrik Nordstrom
Andrew Filonov <aef@shu.smolensk.su>",43,data/crawl/squid/patch_1492.diff
https://github.com/squid-cache/squid/commit/9977e14bd04aaeef6911557ada1447b0fc50abd0,16 Dec 1998,fwd stats polishing,38,data/crawl/squid/patch_1493.diff
https://github.com/squid-cache/squid/commit/8ddcc35dff76f783eb73d51a685850384117f457,16 Dec 1998,forwarding statistics,51,data/crawl/squid/patch_1494.diff
https://github.com/squid-cache/squid/commit/5d620373de4a5a82267070faae2db85c221da9cb,12 Dec 1998,added optional leakfinder code,615,data/crawl/squid/patch_1495.diff
https://github.com/squid-cache/squid/commit/e66d792344043eb9e7d401e86d6444649cb9ce1f,12 Dec 1998,Multicast Miss Stream code,118,data/crawl/squid/patch_1496.diff
https://github.com/squid-cache/squid/commit/0f1bc304fdce3a433aa47d685eeeffe5c8dd8249,10 Dec 1998,client active requests cachemgr page,93,data/crawl/squid/patch_1497.diff
https://github.com/squid-cache/squid/commit/8a6218c634a1e61b6dcffc5ca09d49d57715d0cb,25 Nov 1998,gindent,366,data/crawl/squid/patch_1498.diff
https://github.com/squid-cache/squid/commit/4d62b0af15beebfff0127c2e3c5134a8c3679021,21 Nov 1998,2.1 branch merge,166,data/crawl/squid/patch_1499.diff
https://github.com/squid-cache/squid/commit/59ffcdf87550f830a8f1f4447fc7cffaca43aa2d,21 Nov 1998,don't swap out a file if we are under the RESERVED_FD limit,8,data/crawl/squid/patch_1500.diff
https://github.com/squid-cache/squid/commit/c40acff3c442e1840aeea77d22f58d67854cf673,14 Nov 1998,"- added title row to storeCheckCachableStats to avoid first line being treated
  as a title",4,data/crawl/squid/patch_1501.diff
https://github.com/squid-cache/squid/commit/e13ee7ad48fb523b6cba51056584044ea7ed85f4,14 Nov 1998,"- added -k parse option
- rewrote peer digest module to fix memory leaks",1090,data/crawl/squid/patch_1502.diff
https://github.com/squid-cache/squid/commit/bb71ea1f12fe3ce197ce4f490da1f6ee6fa759cd,13 Nov 1998,fixed pinger xassert() link bug,28,data/crawl/squid/patch_1503.diff
https://github.com/squid-cache/squid/commit/54f742e7f890d1990c9ef51beabdc399fbb200ad,13 Nov 1998,Making squid more a of a true daemon process,112,data/crawl/squid/patch_1504.diff
https://github.com/squid-cache/squid/commit/c68e9c6b55d5f316a13904483017913a78a4f7b2,12 Nov 1998,2.1 branch merge,3372,data/crawl/squid/patch_1505.diff
https://github.com/squid-cache/squid/commit/dba79ac56de7e563b80a5cac8678ee41ffa0d4a6,12 Nov 1998,Squid SNMP code rewrite,1686,data/crawl/squid/patch_1506.diff
https://github.com/squid-cache/squid/commit/dba79ac56de7e563b80a5cac8678ee41ffa0d4a6,12 Nov 1998,Squid SNMP code rewrite,1686,data/crawl/squid/patch_1506.diff
https://github.com/squid-cache/squid/commit/cc7cfa8ef22b2b8682b34f895ecf51783636c115,18 Oct 1998,"- added missing case counters to refreshCheck()
	request_reload2ims_stale, request_reload_stale,
	min_age_override_exp_fresh, min_age_override_lmt_fresh
- display only non-zero stats
- hack to double check that all cases are counted
  (""total"" line will not display 100% if not)",56,data/crawl/squid/patch_1507.diff
https://github.com/squid-cache/squid/commit/829a93575aa5376b8dbc524951cef2db53f39e6c,17 Oct 1998,"- eliminated refreshWhen() which was out-of-sync with refreshCheck()
  potentially causing under-utilized cache digests
- maintain refreshCheck statistics on per-protocol basis so we
  can tell why ICP or Digests return too many misses, etc.",264,data/crawl/squid/patch_1508.diff
https://github.com/squid-cache/squid/commit/d548ee642e233f85b3f9cb68a46dd135a4ccc22a,15 Oct 1998,allow whitespace in request URI's.,142,data/crawl/squid/patch_1509.diff
https://github.com/squid-cache/squid/commit/14e87a44e450c0e74ace6210e1de91a2d825496e,14 Oct 1998,FMR bug,14,data/crawl/squid/patch_1510.diff
https://github.com/squid-cache/squid/commit/a937d5e3531729bee334d19691a47c3e2d772dd8,14 Oct 1998,check for working inet_ntoa(),79,data/crawl/squid/patch_1511.diff
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/patch_1512.diff
https://github.com/squid-cache/squid/commit/491a980bd328a920c15ca8fccf69a07fddcec6a5,07 Oct 1998,add 5/60 minute byte/request hit ratios to info page,31,data/crawl/squid/patch_1513.diff
https://github.com/squid-cache/squid/commit/2c4f7ab251a01835052ec9e0e9cfb80fb45dcc1f,24 Sep 1998,add hash_last(),101,data/crawl/squid/patch_1514.diff
https://github.com/squid-cache/squid/commit/72615e4adde797baa009ce5ffea2d0ef4d2d9ab5,23 Sep 1998,"Don't select a swap dir for writing if its over the high water mark.

Flag selected dirs for debugging in cachemgr",22,data/crawl/squid/patch_1515.diff
https://github.com/squid-cache/squid/commit/bfae3379545522d1fd6d27bdc1bb635ef73849d6,23 Sep 1998,add aborted_requests counter,14,data/crawl/squid/patch_1516.diff
https://github.com/squid-cache/squid/commit/69826fc9eb6ac860e8876a44ec39e51e7de7c604,23 Sep 1998,use fundamental filesystem block size,8,data/crawl/squid/patch_1517.diff
https://github.com/squid-cache/squid/commit/b672a532120f0c2eb22c0db8225a6431c5e57ab6,22 Sep 1998,add df-like output for storedir page,303,data/crawl/squid/patch_1518.diff
https://github.com/squid-cache/squid/commit/ae0b47252dd55d0407b0e4288604cf7de227a084,22 Sep 1998,don't call peerSelect() for URNs,9,data/crawl/squid/patch_1519.diff
https://github.com/squid-cache/squid/commit/dddd5b559b1c475d1442e07837f111c38b7d682a,21 Sep 1998,update,40,data/crawl/squid/patch_1520.diff
https://github.com/squid-cache/squid/commit/2327c45cfdb3919ab82adc7011d02e560162bb8c,17 Sep 1998,"return errno, log service time",38,data/crawl/squid/patch_1521.diff
https://github.com/squid-cache/squid/commit/2742510a1823c058ef7f0982580b55e89bd4f59d,16 Sep 1998,adding,364,data/crawl/squid/patch_1522.diff
https://github.com/squid-cache/squid/commit/698e6f167ac346d0df5de88c55c61b5c7c70b23b,16 Sep 1998,remove fatal_dump,19,data/crawl/squid/patch_1523.diff
https://github.com/squid-cache/squid/commit/5942e8d402edd68e768b7c7aa5de25f1d33f9fde,16 Sep 1998,gindent,168,data/crawl/squid/patch_1524.diff
https://github.com/squid-cache/squid/commit/e1e641f9d4e49c04986d40c28dac687552749af8,15 Sep 1998,"relocate all-redirectors-have-exited check.
removed NRedirectorsOpen == 0 assertion",8,data/crawl/squid/patch_1525.diff
https://github.com/squid-cache/squid/commit/415e0dd2308ae7b77de2831dd69efe8868c96c6d,15 Sep 1998,removed EBIT macros for StoreEntry->flag,346,data/crawl/squid/patch_1526.diff
https://github.com/squid-cache/squid/commit/69c8d152a96194425a102472e9408ffd9ecc200a,11 Sep 1998,added asndb cachemgr output,51,data/crawl/squid/patch_1527.diff
https://github.com/squid-cache/squid/commit/c5f627c2b18bfc4d2fc1f6627939947df82bcbe2,10 Sep 1998,"changed no-caching based on http service time to be based on number
of disk files open.",41,data/crawl/squid/patch_1528.diff
https://github.com/squid-cache/squid/commit/886f27853e0356b2a21bc9b3dd208177372a8624,05 Sep 1998,"syscall counters, mostly I/O",194,data/crawl/squid/patch_1529.diff
https://github.com/squid-cache/squid/commit/26d6ee93172378042a6b3f4081c005653b2be7f2,03 Sep 1998,comm_select # ready fd's histogram,22,data/crawl/squid/patch_1530.diff
https://github.com/squid-cache/squid/commit/d239c2f5ade47ac544c9902f9e03fb51cfd1dc5b,03 Sep 1998,more select stats to debug poor performance,33,data/crawl/squid/patch_1531.diff
https://github.com/squid-cache/squid/commit/8423ff74b586ecc99fe27aae602a03f4fcf6cb68,03 Sep 1998,storeCheckCachable() returns 0 if http_median_svc_time exceeds 2 seconds,61,data/crawl/squid/patch_1532.diff
https://github.com/squid-cache/squid/commit/1994bb24d88bc770a6f568674423a87199681ca8,27 Aug 1998,HTCP progress,56,data/crawl/squid/patch_1533.diff
https://github.com/squid-cache/squid/commit/75339a46776f1815300c058789302e3c6eed84b3,21 Aug 1998,use #if instead of #ifdef so it works with #define FOO 0,12,data/crawl/squid/patch_1534.diff
https://github.com/squid-cache/squid/commit/9f60cfdf80c1decb9081afeca93f4b791dc95f0b,21 Aug 1998,put http-violating code inside HTTP_VIOLATIONS,68,data/crawl/squid/patch_1535.diff
https://github.com/squid-cache/squid/commit/cbe3a7194d6bafb5030b94fbad71f0e70fd499fe,21 Aug 1998,Henrik's refresh_pattern reload patch,137,data/crawl/squid/patch_1536.diff
https://github.com/squid-cache/squid/commit/1707acbe5afd93c2801acdd982b9e1c040dfd0d4,21 Aug 1998,cleanup,94,data/crawl/squid/patch_1537.diff
https://github.com/squid-cache/squid/commit/3cd80ef81c68b1a132899ddae6f1ef4aa29f1859,21 Aug 1998,fixed henrik bodysize counting bug,170,data/crawl/squid/patch_1538.diff
https://github.com/squid-cache/squid/commit/1d62076534634576e2979da61bbdbc7ae4d498fd,18 Aug 1998,adding,456,data/crawl/squid/patch_1539.diff
https://github.com/squid-cache/squid/commit/e530de6cd0b9aa1b21680aadc0e550ee8e1d7bc9,18 Aug 1998,get rid of fatal(),4,data/crawl/squid/patch_1540.diff
https://github.com/squid-cache/squid/commit/f52a7d75fa0fa951a3b0a1481d531c8b34367976,18 Aug 1998,moved from ../src,448,data/crawl/squid/patch_1541.diff
https://github.com/squid-cache/squid/commit/1dfa1d81a7abb1b1115cc5a3df5d47b7b05dd1af,18 Aug 1998,"override-expire and override-lastmod options for refresh_pattern
(Henrik Nordstrom)",70,data/crawl/squid/patch_1542.diff
https://github.com/squid-cache/squid/commit/7c9c84ad88932d214e2423503e3c471d30c67dbf,16 Aug 1998,add near-hit service time histogram,28,data/crawl/squid/patch_1543.diff
https://github.com/squid-cache/squid/commit/447e176bc0560af9b837d744877f154af7fe92c9,14 Aug 1998,Luyers finished delay pools patch,540,data/crawl/squid/patch_1544.diff
https://github.com/squid-cache/squid/commit/f715bd3a2544e5c1ddd91e931000f725d2091cff,04 Aug 1998,Configurable proxy-auth realm string (Bob Franklin),25,data/crawl/squid/patch_1545.diff
https://github.com/squid-cache/squid/commit/95e36d02e1eca338ecbf4ca7cafc4c46797c2d41,31 Jul 1998,Luyers new DELAY_POOLS code,972,data/crawl/squid/patch_1546.diff
https://github.com/squid-cache/squid/commit/1a5dae67354a246a0248e28912ef4bfa9796a644,31 Jul 1998,adding NEIGHBOR_NO_NETDB_EXCHANGE for stats output,4,data/crawl/squid/patch_1547.diff
https://github.com/squid-cache/squid/commit/71d0fd8050748908b36c22c7556f8263660c5efa,31 Jul 1998,we don't track deferred reads any more,14,data/crawl/squid/patch_1548.diff
https://github.com/squid-cache/squid/commit/6a78c18e34cfeeb6ec4e045145dd3d1c32c1e773,29 Jul 1998,"Fixed some restart bugs with dnsservers.   Because of switch to
events, we were calling the dnsShutdownServers func AFTER the
new dnsservers had been allocated.  Using a non-NULL callback
data when registering the event fixes this.

Also added fatal() checks for too few running dnsservers and too many
queued IP/FQDN lookups.",87,data/crawl/squid/patch_1549.diff
https://github.com/squid-cache/squid/commit/d723bf6b9c7e68c0c0e56467ff8337c8607fbdcf,25 Jul 1998,"rewrote shutdown code.  Using FD timeouts suck{s,ed}.  Now we use event
handlers and close any open sockets (or call timeout handlers) when
the shutdown event runs.",181,data/crawl/squid/patch_1550.diff
https://github.com/squid-cache/squid/commit/2444b689c5197f6462607e79e2e2b9a15f97cb93,24 Jul 1998,"No runtime warning about invalid size on replies without content length.
Removed some compiletime warnings.
Changed the trace format to store checksum in hex.",21,data/crawl/squid/patch_1551.diff
https://github.com/squid-cache/squid/commit/49ad0a8cac93ffbd3ca835c0317765c08f56c188,23 Jul 1998,added 60 minute CPU average,16,data/crawl/squid/patch_1552.diff
https://github.com/squid-cache/squid/commit/73c9ccc5ab189b46f816cca9431e4c662a262ec7,23 Jul 1998,event handler to FORCE shutdown,14,data/crawl/squid/patch_1553.diff
https://github.com/squid-cache/squid/commit/979533fa384003c6f000b73a3e9966622ee012ad,23 Jul 1998,Added 5min CPU usage and total memory account to cachemgr info page,19,data/crawl/squid/patch_1554.diff
https://github.com/squid-cache/squid/commit/5d1f3c827e01c3e1c4a3380452be8cc591b6735c,23 Jul 1998,add total memory accounted to info page,8,data/crawl/squid/patch_1555.diff
https://github.com/squid-cache/squid/commit/857703c6b6ce6ac90aa736d4889e89359a4066cf,23 Jul 1998,remove old changes,1603,data/crawl/squid/patch_1556.diff
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/patch_1557.diff
https://github.com/squid-cache/squid/commit/1c3e77cd17c0d0727042c796860ac27e21019e09,21 Jul 1998,"New refresh algorithm.  No longer set entry->lastmod == entry->timestamp
when the Last-Modified header is absent.  Also, don't do ISM validations
without a Last-Modified timestamp.",127,data/crawl/squid/patch_1558.diff
https://github.com/squid-cache/squid/commit/a00a7c85e8bb1ed7d76fc0f611d22d82ca80e105,17 Jul 1998,"- added debugObj(); same as debug() put prints ""objects"" that have an objPack()
  method",50,data/crawl/squid/patch_1559.diff
https://github.com/squid-cache/squid/commit/ed2ab7dbb3dc77a8e9b4621516819a42f7c90475,17 Jul 1998,"* Do not warn about size mismatch on responses without a Content-Length:
header
* Documented all the options in usage().
* Added -t to build a tracefile suitable for later input

A tracefile has the format

METHOD URL BODY-FILE SIZE CHECKSUM
Where:
METHOD          Is the HTTP method to use, usually GET
URL             The URL
BODY-FILE       Is a file to send as request body (- for none)
SIZE            The object size of the returned object (- to ignore)
CHECKSUM        A simple checksum of the object (- to ignore)

tcp-banger already accepts this format as input (was in one of my
previous tcp-banger patches).

/Henrik",32,data/crawl/squid/patch_1560.diff
https://github.com/squid-cache/squid/commit/5843f24a96772e6dbc61cadecaacd575ea0f496d,15 Jul 1998,had sample_start_time & sample_end_time reversed,10,data/crawl/squid/patch_1561.diff
https://github.com/squid-cache/squid/commit/d6fd3381ce2715be4fde056819d20cf0756a1510,15 Jul 1998,"Added time_t StoreEntry->refresh for cache digests.
Don't need to compile a lot of the store_digest code when USE_CACHE_DIGESTS
is not set",151,data/crawl/squid/patch_1562.diff
https://github.com/squid-cache/squid/commit/d9f9d78b0cf1d464d176076841abb39a89568962,14 Jul 1998,minor HTCP progress,97,data/crawl/squid/patch_1563.diff
https://github.com/squid-cache/squid/commit/18fe65d0f7d8b2ef2a16f562bd3441d6b00e04d4,07 Jul 1998,changed MemObject mem_hdr from a pointer to a struct,79,data/crawl/squid/patch_1564.diff
https://github.com/squid-cache/squid/commit/e0ebe27c4a295273197a679324d3315a68e82e5c,30 Jun 1998,"a little rearrangement.  For CACHEOBJ and INTERNAL requests we don't
need (want) to create fwdState because it won't be attached to
a server-side FD and won't be deallocated.",36,data/crawl/squid/patch_1565.diff
https://github.com/squid-cache/squid/commit/3de0c3a6fb804274883627314ad61243de461139,26 Jun 1998,whitespacing,6,data/crawl/squid/patch_1566.diff
https://github.com/squid-cache/squid/commit/98829f69cf123264b70b0be1c12925bc627e00af,08 Jun 1998,"- Copied more robust TCP UP/DOWN patch from 1.1 code
- added 'unique_hostname' configuration option when people want to use
  the same visible hostname for multiple caches.",87,data/crawl/squid/patch_1567.diff
https://github.com/squid-cache/squid/commit/1d21d91da41c51042b444b98958cb4a357a92869,06 Jun 1998,"- changed internal structure of HttpBody to use MemBuf;
  no more inconsistencies with body.size
- removed HTML tags from mgr:http_headers dump",149,data/crawl/squid/patch_1568.diff
https://github.com/squid-cache/squid/commit/fcd2d3ef364ba7af3e966a88cd284abcfa893ceb,06 Jun 1998,"- fixed HTTP header statistics that was broken after the introduction of
  request headers",117,data/crawl/squid/patch_1569.diff
https://github.com/squid-cache/squid/commit/c4248266bf7cca0772ecb73d10ee5e568aa34ab8,05 Jun 1998,"- added -r option to generate random Range requests. Ranges break
  Content-length checks so the checks are disabled with -r option.",36,data/crawl/squid/patch_1570.diff
https://github.com/squid-cache/squid/commit/2b19063a00f246c8226a2c77fa0372a007041d27,05 Jun 1998,use fatal_dump instead of fatal,8,data/crawl/squid/patch_1571.diff
https://github.com/squid-cache/squid/commit/ba2d3770f37f33c673663c870fc3832ef73964d3,04 Jun 1998,missing colon; gindent,981,data/crawl/squid/patch_1572.diff
https://github.com/squid-cache/squid/commit/505e35db6f84bcad19f8d366753a77955dc842d2,04 Jun 1998,"Replaced 'cache_host_acl' with 'cache_host_access' so its just like the
other ACL access lists.",113,data/crawl/squid/patch_1573.diff
https://github.com/squid-cache/squid/commit/dac27377821e08080e87d33fa3751c8a47a16298,03 Jun 1998,"- use memcpy and memset in md5.c instead of MD5_memcpy and MD5_memset
  if we can",141,data/crawl/squid/patch_1574.diff
https://github.com/squid-cache/squid/commit/e17d81d3617f3a7ee4ad392767c07bd3ddfc36d6,03 Jun 1998,"- code cleanup (Ranges)
- added HDR_IF_RANGE field (no actual processing yet)",131,data/crawl/squid/patch_1575.diff
https://github.com/squid-cache/squid/commit/d192d11fc9afd7fc368f54b50ad7b977ef74614e,03 Jun 1998,- Added basic support for Range requests.,664,data/crawl/squid/patch_1576.diff
https://github.com/squid-cache/squid/commit/eeb423fb5bfa31ba0432eee145a4c7cacf078075,02 Jun 1998,gindent,1109,data/crawl/squid/patch_1577.diff
https://github.com/squid-cache/squid/commit/453c0124f6191a85f0767c0a1a52b25c2041d4ef,02 Jun 1998,"make ""key not found"" fatal",8,data/crawl/squid/patch_1578.diff
https://github.com/squid-cache/squid/commit/137ee196e3be76d5b96458b603e3d9aa78e314f1,31 May 1998,"- Replaced ""complex"" (offset accounting) calls to snprintf() with MemBuf.
- cleanup",545,data/crawl/squid/patch_1579.diff
https://github.com/squid-cache/squid/commit/19f8da406704a54ac0b8ac0fbd049eae430a76d7,30 May 1998,update,50,data/crawl/squid/patch_1580.diff
https://github.com/squid-cache/squid/commit/e0d26b9848b81437a44ffa1b7b34a69a57c497e0,29 May 1998,debug,4,data/crawl/squid/patch_1581.diff
https://github.com/squid-cache/squid/commit/309ad3b6ea1f3ce34e13feff668734456987f349,29 May 1998,auto-tuning incoming_interval for comm_incoming call frequency,265,data/crawl/squid/patch_1582.diff
https://github.com/squid-cache/squid/commit/ff11b0ff459675898b9ad5c5907a660f06160490,29 May 1998,hardening,11,data/crawl/squid/patch_1583.diff
https://github.com/squid-cache/squid/commit/19ecac48f55a4bfaf7b5051dec2b292ab0265903,28 May 1998,"- account for different snprintf interfaces as far as return value is concerned
  this fixes a errorpage.c assertion on Linux",24,data/crawl/squid/patch_1584.diff
https://github.com/squid-cache/squid/commit/2246b73298f50a6d4ecdf84e5759a1da2fa9c98b,28 May 1998,"- removed ascii headers from reply and request structures
- added more http headers
- fixed content of entity-headers array
- do not update headers with 304 that are not allowed by HTTP/1.1
- moved routines common for request and replies to HttpMsg.c
- rewrote clientBuildReply* and other client_side functions
  using new header interface
- code cleanup
- do not cut off ""; parameter"" from ""digitized"" Content-Type
  http fields
- Added X-Request-URI for persistent connection debugging",794,data/crawl/squid/patch_1585.diff
https://github.com/squid-cache/squid/commit/ba4f8e5a82791a0fe38afcda497e01b082180c90,28 May 1998,"Changes to comm_*_incoming()

Now, there is a single comm_incoming() function.  This does NOT use
select/poll.  It just calls the read handlers directly for HTTP
and ICP sockets, and relies on them to properly handle EWOULDBLOCK
and friends.

The rate at which comm_incoming gets called is configurable with
'incoming_min_rate' and 'incoming_max_rate'.   Note, these are
kind of ""backwards"" (being rates) and they indicate how many
other FD's to process before calling comm_incoming().  When the load
is none or low, we call comm_incoming at the 'min_rate' which defaults
to once every 16 FDs.  During high loads, 'max_rate' takes effect
and the default is every 2nd FD.

Also added a histogram to count how many connections/messages are
processed per call to comm_incoming.  This also percipitated some
StatHist.c changes.",147,data/crawl/squid/patch_1586.diff
https://github.com/squid-cache/squid/commit/a19d9329c7548e57071773e54fe82354512f09b1,26 May 1998,log timeouts,1,data/crawl/squid/patch_1587.diff
https://github.com/squid-cache/squid/commit/0b2e785a4a29d2dfa8ca48e5117008b152c2624d,23 May 1998,report # on-disk objects,4,data/crawl/squid/patch_1588.diff
https://github.com/squid-cache/squid/commit/115e2d8c9d005332aab0736bec7bad929048ab68,23 May 1998,generate a coredump for running out of swap file numbers,4,data/crawl/squid/patch_1589.diff
https://github.com/squid-cache/squid/commit/0faf70d0ff54b1a1acebc0890fa1ce92777917c0,23 May 1998,Print Mean object size in 'info' page,14,data/crawl/squid/patch_1590.diff
https://github.com/squid-cache/squid/commit/c3f6d2043dead805b905ebd85412813ce9c990c7,21 May 1998,Changed refresh_t->pct from an int to a double,47,data/crawl/squid/patch_1591.diff
https://github.com/squid-cache/squid/commit/d78185edcc56453d5f839c38433a05a00ddfe9dc,16 May 1998,henrik wants more complaints about creating directories,35,data/crawl/squid/patch_1592.diff
https://github.com/squid-cache/squid/commit/5204019364eaf09076222308250406698cc5cc08,15 May 1998,"Millisecond timing patch for events, comm_select/comm_poll, etc.
peerPingTimeout() now uses double the average peer RTT",292,data/crawl/squid/patch_1593.diff
https://github.com/squid-cache/squid/commit/69c95dd31c99255c7d281223688d5f3a8cb29a20,14 May 1998,"Transitioning Cache Digests from ""experimental"" to fundamental.
Removed a lot of stats collection, espeically large histograms.
Made peerDigestInit() called from an event, instead of being
called directly -- this avoids some recursion.
The selection algorithm is still kind of hard coded as follows:
	cache digests
	netdb (if CD's miss)
	ICP (if netdb has no RTT data)",373,data/crawl/squid/patch_1594.diff
https://github.com/squid-cache/squid/commit/99edd1c3cab5938128c912544998a7a0c0551b6b,12 May 1998,"        - Added binary http headers to requests
        - request_t objects are now created and destroyed in a consistent way
        - Fixed cache control printf bug
        - Added a lot of new http header ids
        - Improved Connection: header handling; now both Connection and
          Proxy-Connection headers are checked
        - Connection request header is now handled correctly regardless
          of its position and the number of entries
        - Better handling of persistent connection ""clues"" in HTTP headers
        - Removed handling of ""length="" directive in IMS headers;
          the directive is not in the HTTP/1.1 standard;
          standing by for objections
        - allowed/denied headers are now checked using bit masks instead of
          strcmp loops
        - removed Uri: from allowed headers; Uri is deprecated in RFC 2068
        - removed processing of Request-Range header (no in specs?)

note: binary headers for requests are not completed:
	request_t still keeps and ascii image of the headers",1323,data/crawl/squid/patch_1595.diff
https://github.com/squid-cache/squid/commit/14ff08f16ae47328c5ee733e6a86612c4a12eeda,09 May 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>

Here is a polished and updated test suite a bit..

* pconn-banger reports a throughtput report, like tcp-banger2
* both tools include support to validate size and a simple checksum
* A couple of pconn-banger bugs fixed.
* Wrote a small perl script that joins a URL list, and a size-checksum
report from tcp-banger to a combined list (needed to use the validation
feature).

Syntax for URL lists is eiter plain 1 URL/line, or
METHOD URL [Request-File|-] [size checksum]

The tools can send HTTP requests with any method or request-body, but
they do not (yet) support HEAD replies.",613,data/crawl/squid/patch_1596.diff
https://github.com/squid-cache/squid/commit/de2a0782959b1feea6b1e26eaa0d68adcbc6bf55,02 May 1998,binary netdb peer-peer transfers,67,data/crawl/squid/patch_1597.diff
https://github.com/squid-cache/squid/commit/cd4f6e9e855d1bee35d13494f312399cdf873143,02 May 1998,removed cache_stoplist_pattern and associated code,43,data/crawl/squid/patch_1598.diff
https://github.com/squid-cache/squid/commit/a15705d0272fad9bd4a1a9beb8ac0deac5c163db,25 Apr 1998,make Generated string like errorpage.c,10,data/crawl/squid/patch_1599.diff
https://github.com/squid-cache/squid/commit/4b4cd312bef4be6e72d6d1507e44c2217bd659e2,24 Apr 1998,gindent,461,data/crawl/squid/patch_1600.diff
https://github.com/squid-cache/squid/commit/44d4f9f025e3b1c377967512de8bb43446bb670e,24 Apr 1998,"remove wierd , CUR in ipcache output",4,data/crawl/squid/patch_1601.diff
https://github.com/squid-cache/squid/commit/ac0963ac4ff6ad89d1a0f04dd98bfd85c47e7f5c,24 Apr 1998,Add totals for ICP and HTTP hits,17,data/crawl/squid/patch_1602.diff
https://github.com/squid-cache/squid/commit/6168bccdecb952a4e873e8747d0571d771f131fd,22 Apr 1998,"- better synchronization between Rebuild and Rewrite
  now each process can wait for other to complete
- added storeDigestAdd/Del() to check object freshness
- better, but still not perfect, pre-calculation of
  cache digest size
- stats for additions, deletions, collisions, etc.
- polish",232,data/crawl/squid/patch_1603.diff
https://github.com/squid-cache/squid/commit/315127ffbc921279620fc9a89c5b98ca4f57b840,22 Apr 1998,"- configurable number of bits_per_entry per digest
- fixed resizing bug (did not set new bits to 0)
- removed public cacheDigestSizedCreate(),
  simplified creation interface
- fixed cacheDigestDestroy bug (called xfree instead of memFree)
- temporary support for X-Cache-Lookup header field/stats",78,data/crawl/squid/patch_1604.diff
https://github.com/squid-cache/squid/commit/a5a5de8779b8904f40f06286f71aa9c0a0febd15,21 Apr 1998,open swapout fd debugging,110,data/crawl/squid/patch_1605.diff
https://github.com/squid-cache/squid/commit/0ce5d80191270f5e37a9a46007848b2543cfb26b,16 Apr 1998,show percent of file map bits used,7,data/crawl/squid/patch_1606.diff
https://github.com/squid-cache/squid/commit/5d406e78e5c28196e15f2d964436f089ec1e267d,16 Apr 1998,Add stat counter for # filemap bits in use,43,data/crawl/squid/patch_1607.diff
https://github.com/squid-cache/squid/commit/6b564852fb3ce132c0feca86af3569c9dc268a91,15 Apr 1998,- added printouts of server_svc_time histograms,6,data/crawl/squid/patch_1608.diff
https://github.com/squid-cache/squid/commit/c135694e755d701a86492fd42f4cead25128c6f5,14 Apr 1998,"- added cd.on_xition_count histogram to Counter
  counts the number of 0->1 transitions during cacheDigestAdd()",40,data/crawl/squid/patch_1609.diff
https://github.com/squid-cache/squid/commit/2920225fb54e8b7da64ad9f855aa0a8971937f4f,12 Apr 1998,"- client_side: fixed processing for IMS requests for special entries
               the earlier code returned 200 replies instead of 304s
- peer_digest: bug fix: 304 replies caused coredumps
               minor debug() polishing
- stat:
- structs:
- peer_select: added histograms for #choices when selecting a peer with
               Cache Digest
- protos:      added statHistIntDumper",173,data/crawl/squid/patch_1610.diff
https://github.com/squid-cache/squid/commit/173d54abd5f2c332ac8e72d8ae26347ce0068a2d,12 Apr 1998,- added dumper for integer-based histograms,10,data/crawl/squid/patch_1611.diff
https://github.com/squid-cache/squid/commit/522b517bd1f19bccc7c3c2e60f5e75dfde9355b5,10 Apr 1998,- polish,4,data/crawl/squid/patch_1612.diff
https://github.com/squid-cache/squid/commit/588d95456c5f78414e9f398b56f973abdd715142,10 Apr 1998,- polish,4,data/crawl/squid/patch_1613.diff
https://github.com/squid-cache/squid/commit/1543ab6cbe1d1bf17e1534707ab585cd9692a398,10 Apr 1998,"- fixed bytes read bug (DW: s/swap_status/store_status)
- added bytes/messages sent stats
- other minor stats",48,data/crawl/squid/patch_1614.diff
https://github.com/squid-cache/squid/commit/7ea5d333949a9a8d0ebd1026488e657350b92d5c,10 Apr 1998,- more per-peer CDigest stats,14,data/crawl/squid/patch_1615.diff
https://github.com/squid-cache/squid/commit/86e2a29159b6d79f4ffabe7c48dd679bd76fe92a,10 Apr 1998,add averages to digest blob,4,data/crawl/squid/patch_1616.diff
https://github.com/squid-cache/squid/commit/071a3ae79623f644f3544044423946dd3a35710b,10 Apr 1998,Cleaned up ICP logging/counting and ICP/CD stats output,269,data/crawl/squid/patch_1617.diff
https://github.com/squid-cache/squid/commit/ddc0f1703bf8c3080ccf5ad5e552810724766ac7,10 Apr 1998,- more per-peer cache digest stats,39,data/crawl/squid/patch_1618.diff
https://github.com/squid-cache/squid/commit/00485c298aba90241e0697bfc2445a926cba630c,10 Apr 1998,"- tuned delaying requests for digests a bit after digests expire (to avoid
  race conditions)
- added more stats for digests: #msgs and kb_sent are now accounted for
- only cachable requests affect t/f-hit/miss stats now",85,data/crawl/squid/patch_1619.diff
https://github.com/squid-cache/squid/commit/52926044bf33aa8651b84b14845ed1e8e3e6720b,09 Apr 1998,cycle through every address on every use,88,data/crawl/squid/patch_1620.diff
https://github.com/squid-cache/squid/commit/bb20ca39130d2fba591cdd57965b0f9eb6799a50,09 Apr 1998,"minor squid-internal URL cleanup, but no bug fixes",26,data/crawl/squid/patch_1621.diff
https://github.com/squid-cache/squid/commit/c6389cd7052a3ec8bebb56a2a0e00a49ef3987f1,09 Apr 1998,- added more stats into statDigestBlob,22,data/crawl/squid/patch_1622.diff
https://github.com/squid-cache/squid/commit/0f0f385b51d394b29b9b25543530a30446687c2a,09 Apr 1998,"- temporary paranoid debug ""lost peer"" message",12,data/crawl/squid/patch_1623.diff
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/patch_1624.diff
https://github.com/squid-cache/squid/commit/39edba217789e91f12f490afe22834049f7bd9b0,09 Apr 1998,track server-side service time histograms,64,data/crawl/squid/patch_1625.diff
https://github.com/squid-cache/squid/commit/df087e68072817c5ce2202dbcf2ebfd1221db43a,08 Apr 1998,windows NT fixes (barf),450,data/crawl/squid/patch_1626.diff
https://github.com/squid-cache/squid/commit/a1e927f6e63351daeac6a02d1df24b569a237762,08 Apr 1998,- added statPeerSelect(),48,data/crawl/squid/patch_1627.diff
https://github.com/squid-cache/squid/commit/56a1c446fba2274ffc60bd20c84a210fb9209617,08 Apr 1998,"- mask_size is now used everywhere
  (used to [incorrectly] calculate bit_count all the time)
- added cacheDigestSizedCreate for peer_digest to use
- added cd_guess_stats processing
- minor fixes and additions",81,data/crawl/squid/patch_1628.diff
https://github.com/squid-cache/squid/commit/b644367b74217c80e27df07d1c78fc395f936566,07 Apr 1998,gindent,887,data/crawl/squid/patch_1629.diff
https://github.com/squid-cache/squid/commit/43d4303ea3311615cde3e8ce986b5b447f7e89ec,04 Apr 1998,"snmp beautification, code striping etc",7598,data/crawl/squid/patch_1630.diff
https://github.com/squid-cache/squid/commit/127843786e59be79fba4a581c5c16d95869949e3,04 Apr 1998,"- added code to create/rebuild/rewrite store_digest
- to disable local digest support,
  set squid.h::SQUID_MAINTAIN_CACHE_DIGEST to 0
- added a hack to support simple IMS requests for ENTRY_SPECIAL entries",340,data/crawl/squid/patch_1631.diff
https://github.com/squid-cache/squid/commit/035f5831cd0ada83e9bb0ebcd2a9442d2a945226,04 Apr 1998,missing newline in cachemgr output,3,data/crawl/squid/patch_1632.diff
https://github.com/squid-cache/squid/commit/b1b56fbd783058afdee690b8bd67449f50d9fba2,03 Apr 1998,new dns cachemgr output,34,data/crawl/squid/patch_1633.diff
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/patch_1634.diff
https://github.com/squid-cache/squid/commit/8638fc6669169597202b7c816088c63feb46677f,03 Apr 1998,"- Added internal support for cache digest (store_digest). The digest is
  maintained as a ""mirror"" of store_hash table. storeHashInsert/Delete forward
  public key objects to the store_digest object. Sending digests to other
  caches is not yet supported. Periodic digest rebuild is not yet supported.

- Rudimental reporting for store digest is done via cache manager.",194,data/crawl/squid/patch_1635.diff
https://github.com/squid-cache/squid/commit/bd753ff510e54bef3000e4d3677a29c87320afa2,01 Apr 1998,"- removed paranoid Test() assertion to CacheDigest.c::cacheDigestAdd()
- added stats on deletions from a cache digest",17,data/crawl/squid/patch_1636.diff
https://github.com/squid-cache/squid/commit/c21864460dfec5a0874621e2d62c34cec49b528d,01 Apr 1998,"- better stats
- minor fixes",89,data/crawl/squid/patch_1637.diff
https://github.com/squid-cache/squid/commit/b87b92fb2696af955748ba29d3a4f0815febdc22,01 Apr 1998,"- Add median service times to cachemgr 'info' page.
- Fixed DNS service time calculation -- the start time was set as
  the *dispatch* time, not the *request* time, so it only measured
  how long the dnsserver took to process, and did not account for
  queueing delays.
- Fixed ICP svc time calculation -- start time was set way too
  early, before DNS lookups!",84,data/crawl/squid/patch_1638.diff
https://github.com/squid-cache/squid/commit/b2ab5fd1c8abdf9c13f0b187a7618120919de33a,01 Apr 1998,- access.log start time is now synced with swap.state start time,174,data/crawl/squid/patch_1639.diff
https://github.com/squid-cache/squid/commit/6d80b36f5fa3546be4e989741a1165df97e33c14,01 Apr 1998,"- Added cacheDigestClone() method.
- major test_cache_digest updates",608,data/crawl/squid/patch_1640.diff
https://github.com/squid-cache/squid/commit/40608e8e3d9d12c76217545d9002a1dff957c1a1,01 Apr 1998,"remove special SYSLOG case for debug() macro.  MOST systems have SYSLOG
anyway, but more importantly, the _db_level var is needed for
stderr debugging.",10,data/crawl/squid/patch_1641.diff
https://github.com/squid-cache/squid/commit/1afe05c521024519ee6e8f02199d20640ac3d6b2,31 Mar 1998,gindent,711,data/crawl/squid/patch_1642.diff
https://github.com/squid-cache/squid/commit/2681d383bd49f1df553662c938fb85c6cfaae386,31 Mar 1998,only show the 'preparing for shutdown' message once,45,data/crawl/squid/patch_1643.diff
https://github.com/squid-cache/squid/commit/605bd34539fcaefbf6f08fb51442c50c14c2a22c,31 Mar 1998,use assert instead of fatal_dump,7,data/crawl/squid/patch_1644.diff
https://github.com/squid-cache/squid/commit/d21f1c548ce335c24516cf0980323cbf11ef64df,31 Mar 1998,added x-forwarded-for and via header database,124,data/crawl/squid/patch_1645.diff
https://github.com/squid-cache/squid/commit/97d93ecd264fcc159a6c34a3c243a39a19ec3da1,31 Mar 1998,- commented out printf()s on bad log entries.,10,data/crawl/squid/patch_1646.diff
https://github.com/squid-cache/squid/commit/76e3f5c2d11436b883d0f9591f7b47e5bdb8d9f9,31 Mar 1998,- Adding more stuff to test_cache_digest,171,data/crawl/squid/patch_1647.diff
https://github.com/squid-cache/squid/commit/1c729cf163be9a84de19cb9b72aa0b48b2f8bcb2,31 Mar 1998,- Added a timer for a no-load hash scan,11,data/crawl/squid/patch_1648.diff
https://github.com/squid-cache/squid/commit/c411be125a6f44f5895b034f773607cc18a40815,31 Mar 1998,Added test_cache_digest.c: a test-suite for playing with cache digests,332,data/crawl/squid/patch_1649.diff
https://github.com/squid-cache/squid/commit/f97c9706c87907cfba382e9b05c79e2632e9681c,30 Mar 1998,More detailed report,11,data/crawl/squid/patch_1650.diff
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/patch_1651.diff
https://github.com/squid-cache/squid/commit/ec8780478f02640eae9e38e428df16e923b73725,29 Mar 1998,"- fixed hash memory leaks from Proxy Auth ACL stuff
- Moved common hash list free routines to hashFreeItems()
- removed hash_insert() and hash_delete()
- renamed hash_unlink() to hash_remove_link() and removed 'freelink' arg",425,data/crawl/squid/patch_1652.diff
https://github.com/squid-cache/squid/commit/5f6ac48b7b0af57d697d8c018397911953ca863f,29 Mar 1998,printf errors/warnings,137,data/crawl/squid/patch_1653.diff
https://github.com/squid-cache/squid/commit/e8d185d28de2108ca9d5368435f56da45971943d,28 Mar 1998,"change HTCP vs ICP configuration to be a cache_peer flag instead of
separate port members",29,data/crawl/squid/patch_1654.diff
https://github.com/squid-cache/squid/commit/2e8e29b8cd94de6f348bcf3cad710ea38f6edc9d,25 Mar 1998,add icp.replies_queued counter to stat outputs,8,data/crawl/squid/patch_1655.diff
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/patch_1656.diff
https://github.com/squid-cache/squid/commit/4ba559965a3e4c1e4ee2e37b7b2bce78e07b8ad5,24 Mar 1998,added event list to cachemgr outputs,29,data/crawl/squid/patch_1657.diff
https://github.com/squid-cache/squid/commit/d8b249ef67c9f0faf42a85cf719c161751fcf766,21 Mar 1998,"- Separated raw HTTP headers from their ""compiled"" values. Squid is now
  forwarding headers even it cannot ""compile"" them. Virtually no changes to
  common format headers are done. Compiled values are stored in Reply/Request
  objects.",1327,data/crawl/squid/patch_1658.diff
https://github.com/squid-cache/squid/commit/5e14bf6d450a13f8ec961da2f76eb53337548bee,17 Mar 1998,"SNMP changes/fixes
	- changed some snmplib debugging messages
	- simplifed and fixed snmplib_debug_hook interface.  It
	  wasn't properly passing all the 'varargs' args.  Now
	  it just vsnprintf's to a buf and passes that.
	- struct _snmpconf was never used.
	- made 'snmp_agent_conf' a stringlist type
	- moved 'snmp_agent_conf' processing to snmpInit().
	- moved snmpInit() call to before 'ready to serve requests'
	  message.",148,data/crawl/squid/patch_1659.diff
https://github.com/squid-cache/squid/commit/01aebf311d6919b5fa70b7ea6f4ed37b0aeb6f06,17 Mar 1998,lincoln dale's stat graphing code,95,data/crawl/squid/patch_1660.diff
https://github.com/squid-cache/squid/commit/a369131d44229cefaa70573381207295fbd99615,17 Mar 1998,"Fixed 'single parent' and peer->options bugs.

We had mixed (options & FOO) and EBIT_SET(options, FOO) which was
clearly wrong.  Only the EBIT macros can be used with the enumerated
peer->options flags.

We never got any single parent uses because getSingleParent()
was checked only *after* direct == DIRECT_NO.

Removed 'single_parent_bypass' option.  Now, we'll require that
a single parent have the 'no-query' option.",139,data/crawl/squid/patch_1661.diff
https://github.com/squid-cache/squid/commit/042a9415d344926d1895afe9abd2629181d99917,13 Mar 1998,remove xrealloc stderr debug,3,data/crawl/squid/patch_1662.diff
https://github.com/squid-cache/squid/commit/d5d466fc1490b4f6eadb04a30e679fdd562ba2c4,13 Mar 1998,adding code,266,data/crawl/squid/patch_1663.diff
https://github.com/squid-cache/squid/commit/407d8569365a44f529d16c5783976b41aa5ef699,09 Mar 1998,- Renamed test-elipses into test-ellipses.,99,data/crawl/squid/patch_1664.diff
https://github.com/squid-cache/squid/commit/2ecaa5e78c63f638b0a40ab781b5da657c398e11,09 Mar 1998,"- Moved HttpHdrExtField from HttpHeader to a separate file.
- Fixed a few header stats bugs.",139,data/crawl/squid/patch_1665.diff
https://github.com/squid-cache/squid/commit/4f7e9dbbfc29c6021e1be4cd0afd3b66c70efb0e,08 Mar 1998,"- Replaced ""char *"" header fields with String-based ones.
- Removed ShortStringPool from Header.c (now handled by mem.c)",322,data/crawl/squid/patch_1666.diff
https://github.com/squid-cache/squid/commit/ef9b7ce60f96c463efbf7c975b61d30dd11442b8,08 Mar 1998,"remove printf, gindent",5,data/crawl/squid/patch_1667.diff
https://github.com/squid-cache/squid/commit/02922e76c2200b020601f51d8ae6f0f2819f1090,08 Mar 1998,"- Added memory pools for variable size objects (strings).
  There are three pools; for small, medium, and large objects.
- Extended String object to use memory pools.  Most fixed size char
  array fields will be replaced using string pools. Same for most
  malloc()-ed buffers.
- Replaced ""char *urlpath"" in request_t with ""String urlpath"".
- Fixed some printf-like function bugs.",929,data/crawl/squid/patch_1668.diff
https://github.com/squid-cache/squid/commit/9fe7e747492e457b3b766cc0c305833221ec672c,08 Mar 1998,- Added initial support for string pools.,113,data/crawl/squid/patch_1669.diff
https://github.com/squid-cache/squid/commit/5e91f8bc3ffbbc75bb1d91cd68efd7e79616c91e,08 Mar 1998,"- Fixed a bug that prevented some tables from being displayed. We did not
  close a <table> if there were no text after it.",6,data/crawl/squid/patch_1670.diff
https://github.com/squid-cache/squid/commit/b6c6bcef6e2a971bf194c89f089b5ac31c35e7a4,07 Mar 1998,make -P option work with -m POST,22,data/crawl/squid/patch_1671.diff
https://github.com/squid-cache/squid/commit/269704991d7aeb0e49aba62508ab61ead1180156,07 Mar 1998,removed lots of #if 0 code,718,data/crawl/squid/patch_1672.diff
https://github.com/squid-cache/squid/commit/59c4d35b43d5b1136568fed8d18b5ea4852f8a3c,07 Mar 1998,"Removed 'meta_data' structure.  Use mem.c routines instead, or
simply stop accounting for some things",399,data/crawl/squid/patch_1673.diff
https://github.com/squid-cache/squid/commit/54220df89bc36fe21cacbe5877e5e12a269155f9,06 Mar 1998,"A generic client-to-server ""pump"" was added to handle HTTP PUT as
well as POST methods on the client-cache side. Based on ""pump""
PUT requests can be made to either HTTP or FTP url's. Code is still
alpha and interoperability with browsers is not guaranteed.
Timeout/close handling should be improved sometime.",267,data/crawl/squid/patch_1674.diff
https://github.com/squid-cache/squid/commit/bce0cf8c6280419a5789d7629fc209a8f6c76e3a,06 Mar 1998,- Changed POST action in host/port form to GET.,4,data/crawl/squid/patch_1675.diff
https://github.com/squid-cache/squid/commit/3213655ab393a612db890f725fe81c350638be9b,06 Mar 1998,"for XMALLOC_DEBUG, need to call check_free() before stupid realloc()",44,data/crawl/squid/patch_1676.diff
https://github.com/squid-cache/squid/commit/9bd6a36dd60949dd50e27eced676a525ca472b5e,05 Mar 1998,"fix timeout bug when expecting 0 ICP replies
removed fatal_dump() calls",13,data/crawl/squid/patch_1677.diff
https://github.com/squid-cache/squid/commit/399e85eaaf04e7a7bc4c5f15aa2d1f136544f526,05 Mar 1998,gindent,218,data/crawl/squid/patch_1678.diff
https://github.com/squid-cache/squid/commit/7faf2bdbd107159360e994049bb7fdc2a153f37f,05 Mar 1998,"- gb_t additions to .h monsters
- Renamed HttpScc object into HttpHdrCc
- Moved HttpHdrCc from HttpHeader.c to HttpHdrCc.c
- Moved ""commonly used"" routines from HttpHeader.c to HttpHeaderTools.c.
All this was done to prepare for addition of HttpHdrRange.",666,data/crawl/squid/patch_1679.diff
https://github.com/squid-cache/squid/commit/a0f327753bc3041cabaf2e606fa0c878a1854243,05 Mar 1998,"Added more server-side counters and accounting based on patch from
Lincon Dale.  Also removed some '#if 0' code chunks.",404,data/crawl/squid/patch_1680.diff
https://github.com/squid-cache/squid/commit/c1dabf04c94dc6cb788983dea533e18aae97e07b,05 Mar 1998,- Added gb_t,38,data/crawl/squid/patch_1681.diff
https://github.com/squid-cache/squid/commit/06e6d12aa2a5d955ee25359d8bcc68d9094a9dff,05 Mar 1998,support for multi-addressed neighbors,75,data/crawl/squid/patch_1682.diff
https://github.com/squid-cache/squid/commit/b4832aa9ee32dd27b75eff3f9aba5d861ad57ccc,04 Mar 1998,"- Fixed memory alignment problem in Mem.c by removing MemChunks. We do not
  pre-allocate memory any more.
- Removed/replaced tmp_debug() mesages.",62,data/crawl/squid/patch_1683.diff
https://github.com/squid-cache/squid/commit/7d5dcfe6163c098a5d4de4bc23d53384cbb47764,04 Mar 1998,- Removed tmp_debug() macro.,9,data/crawl/squid/patch_1684.diff
https://github.com/squid-cache/squid/commit/b9bc2838ca94acb6bb6e2ff31e2482bd552f7b66,04 Mar 1998,"- Table related bug fixes
- ""Heading\t\t"" is now interpreted as ""<th columnspan=2>Heading</th>""
- use ""Heading\t \t"" to get an empty column.",69,data/crawl/squid/patch_1685.diff
https://github.com/squid-cache/squid/commit/1519582e105414fcbf200580806bce4d248dd1d8,04 Mar 1998,move newline in cachemgr output,6,data/crawl/squid/patch_1686.diff
https://github.com/squid-cache/squid/commit/7021844c42212902ee9a10ba7097201a6d66a1c5,03 Mar 1998,"- Added ""mem_pools_limit"" configuration option. Semantics of
  ""mem_pools"" option has also changed a bit to reflect new memory
  management policy.
- Reorganized memory pools. Squid now allocates memory in big chunks
  and distributes that memory among ""frequently allocated"" objects.
- memAllocate() has now only one parameter. Objects are always reset
  with 0s.

- HttpHeader.c: fixed warnings generated by some compilers on member to union
  conversions. Tested using DEC cc only.
- cachmgr.c now tries to interpret strings containing '\t' as table rows and
  format them using html table attributes.",742,data/crawl/squid/patch_1687.diff
https://github.com/squid-cache/squid/commit/e7740002c82e1f87536e06947598ff530b3b17ce,28 Feb 1998,update,183,data/crawl/squid/patch_1688.diff
https://github.com/squid-cache/squid/commit/da537f52b6ea9f15f68d4f6337c433fc6f0f025c,28 Feb 1998,realloc + bugfix etc,125,data/crawl/squid/patch_1689.diff
https://github.com/squid-cache/squid/commit/71a1770210b2cce304f0035b62055f5423d6f921,27 Feb 1998,"handling xrealloc added, logging starts by default from main()",14,data/crawl/squid/patch_1690.diff
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/patch_1691.diff
https://github.com/squid-cache/squid/commit/afb34538f3fbbeaa63e98ee4923ee57b9bad2678,27 Feb 1998,%p for warnings,10,data/crawl/squid/patch_1692.diff
https://github.com/squid-cache/squid/commit/36a97e19531e381006a0b7201d79c65572cce2c3,27 Feb 1998,patch for logging malloc/calloc/free traces to file,85,data/crawl/squid/patch_1693.diff
https://github.com/squid-cache/squid/commit/2ac768615fadafb5f4d507ffa0e10993343e0ef7,27 Feb 1998,gindent,2427,data/crawl/squid/patch_1694.diff
https://github.com/squid-cache/squid/commit/1a3db59cb44b558412cb8435ec6c7175a8c3c03a,26 Feb 1998,Spread MemBuf.h among .h monsters.,145,data/crawl/squid/patch_1695.diff
https://github.com/squid-cache/squid/commit/12d850a623ccd9163e485f074dbf1d58c0bbffc0,26 Feb 1998,"Canceled ""Status:"" line change from the previous commit. Status line already
contains '\n' and we do not have to add one.",4,data/crawl/squid/patch_1696.diff
https://github.com/squid-cache/squid/commit/2edfbcb74dc10ef80dffd59dcf4b3c13b2abfa5e,26 Feb 1998,"- Fixed bug that removed first line of the message body.
- Fixed bug that could ignore first message header.",6,data/crawl/squid/patch_1697.diff
https://github.com/squid-cache/squid/commit/1d8035662731fb90a9995af64e22a390a673c14a,26 Feb 1998,"- Fixed(?) time-tick bug in stat.c. StatCounters where copied in a wrong way
  resulting in using the same set of pointers in two objects.
- Added Squid ""signature"" to all ERR_ pages. The signature is hard-
  -coded and is added on-the-fly. The signature may use %-escapes.
  Added interface to add more hard-coded responses if needed (see
  errorpage.c::error_hard_text).
- Both default and configured directories are searched for ERR_ pages
  now. Configured directory is, of course, searched first. This allows
  you to customize a subset of ERR_ pages (in a separate directory)
  without danger of getting other copies out of sync.",196,data/crawl/squid/patch_1698.diff
https://github.com/squid-cache/squid/commit/57fff83580258b194e9c92a2f8f2f48de2c9e965,26 Feb 1998,"- Report format changes.
- lint.",41,data/crawl/squid/patch_1699.diff
https://github.com/squid-cache/squid/commit/2961668b4fedc47880a17526c867402b1e1594db,25 Feb 1998,Changed %f to %lf.,16,data/crawl/squid/patch_1700.diff
https://github.com/squid-cache/squid/commit/bdf185240e682239ba3770f729371752a818296e,25 Feb 1998,snmp per-community access controls (snmp_acl in squid.conf),193,data/crawl/squid/patch_1701.diff
https://github.com/squid-cache/squid/commit/5625c03287029aa907262645f0386439a97e4252,25 Feb 1998,Moved StatHist implementation into a separate file (StatHist.c),211,data/crawl/squid/patch_1702.diff
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/patch_1703.diff
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/patch_1704.diff
https://github.com/squid-cache/squid/commit/4a0d3a91b07d8efd6e6edcad701e74f097eb5093,25 Feb 1998,Changed ctx: messages to be more human-oriented.,11,data/crawl/squid/patch_1705.diff
https://github.com/squid-cache/squid/commit/178dbda283508805ecf4ea28ae07acd3342cf452,24 Feb 1998,update,143,data/crawl/squid/patch_1706.diff
https://github.com/squid-cache/squid/commit/d0e0c8d2e44a6abe849832bb9d03295295be42e6,24 Feb 1998,Update,1347,data/crawl/squid/patch_1707.diff
https://github.com/squid-cache/squid/commit/7395afb806a3a4c008b8464637ac03974a994359,23 Feb 1998,"- Cache Manager got new Web interface (cachemgr.cgi). New .cgi script forwards
  basic authentication from browser to squid.  Cachemgr.cgi now recognizes
  ""action protection"" types described below.

- Added better recognition of available protection for actions in Cache
  Manager. Actions are classified as ""public"" (no password needed),
  ""protected"" (must specify a valid password), ""disabled"" (those with a
  ""disable"" password in squid.conf), and ""hidden"" (actions that require a
  password, but do not have corresponding cachemgr_passwd entry in squid.conf).",442,data/crawl/squid/patch_1708.diff
https://github.com/squid-cache/squid/commit/d23f4e1b36396b975b3de1a630942be944069f3b,23 Feb 1998,new squid-independent cachemgr.cgi,1029,data/crawl/squid/patch_1709.diff
https://github.com/squid-cache/squid/commit/571c3b88dd021c80ba39a3fee22444ebc1a8590d,22 Feb 1998,Updated to cmu v1.8 + coded almost from scratch,1636,data/crawl/squid/patch_1710.diff
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/patch_1711.diff
https://github.com/squid-cache/squid/commit/54f642bf3117a1f81074822254c4d8296b41c59f,22 Feb 1998,Upgrade to cmuv1.8+recoding from scratch. include files.,1439,data/crawl/squid/patch_1712.diff
https://github.com/squid-cache/squid/commit/63259c34e9c29e18b3b5e258268d2108f70e1e44,22 Feb 1998,"- Added ""basic"" authentication scheme for Cache Manager interface.

- Added ERR_CACHE_MGR_ACCESS_DENIED page to notify of authentication
  failures when accessing Cache Manager.

- Added ""-v"" (Verbose) and ""-H"" (extra Headers) options to client.c.",249,data/crawl/squid/patch_1713.diff
https://github.com/squid-cache/squid/commit/123abbe10661173334add16fdd652fe3a87b6c51,22 Feb 1998,"Removed USE_ALEX_CODE configuration warning.

Added simple context-based debugging to debug.c. Currently, the context is
defined as a constant string. Context reporting is triggered by debug() calls.
Context debugging routines print minimal amount of information sufficient to
describe current context. The interface will be enhanced in the future.",593,data/crawl/squid/patch_1714.diff
https://github.com/squid-cache/squid/commit/f4b71808db99788a2f4cc4ca7cd372d0bfc3ebb1,21 Feb 1998,debug-levels.txt => debug-sections.txt,64,data/crawl/squid/patch_1715.diff
https://github.com/squid-cache/squid/commit/cb69b4c7ba398e7771cc53d2a75831950a7ebc71,21 Feb 1998,Dirty and buggy alex_2.,4174,data/crawl/squid/patch_1716.diff
https://github.com/squid-cache/squid/commit/d41de3c1626f9117c0674d8b1ce1407001632618,21 Feb 1998,filled in more config dump funcs,60,data/crawl/squid/patch_1717.diff
https://github.com/squid-cache/squid/commit/5ba18ba6fb69dbc520c465c8754d0af534492919,20 Feb 1998,move function to the non-PUBLIC area,59,data/crawl/squid/patch_1718.diff
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/patch_1719.diff
https://github.com/squid-cache/squid/commit/22f3fd9863d8023d48fdcbc4233843e87b71ebde,20 Feb 1998,"New cache manager scheme.  Instead of a big table and enums and such,
now cachemgr stuff is registered by each individual module",393,data/crawl/squid/patch_1720.diff
https://github.com/squid-cache/squid/commit/9973e9feb3d7b2e13361b2c0b27c4d79e8d5df75,19 Feb 1998,"Added service time histogram for DNS (ipcache+fqdncache together)
Added statLogHistDump() for printing histograms",60,data/crawl/squid/patch_1721.diff
https://github.com/squid-cache/squid/commit/7ae52c25f84164f6d9bb0c9963671df30992dd8e,18 Feb 1998,Added service-time histograms for client_http and icp,175,data/crawl/squid/patch_1722.diff
https://github.com/squid-cache/squid/commit/7ce875eb60c3989a40a4aa5b9ba0da6a815e16dc,18 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Squid-1.2.beta15: Show memory map as a tree
      Part of my beta14 memory map patch did not make it into beta15.
      Here are the missing pieces.",86,data/crawl/squid/patch_1723.diff
https://github.com/squid-cache/squid/commit/09c483ecad0513bc7c5933e9c468713287f4606c,18 Feb 1998,"From:    Maxim Krasnyansky <max@viper.uznet.net>
Added 'dns_nameservers' config option to specify non-default DNS
nameserver addresses.",75,data/crawl/squid/patch_1724.diff
https://github.com/squid-cache/squid/commit/4b23e11440ee30f54c794cdfdc07790e905bf3a6,18 Feb 1998,"From Henrik
This patch adds a automatic adjustment of RESERVED_FD when we fail to
create sockets. This functionality mentioned in the comments in
comm_open, but there was no code implementing it...",37,data/crawl/squid/patch_1725.diff
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/patch_1726.diff
https://github.com/squid-cache/squid/commit/4cd746ee92383abd27fa9f0ebe8ded8e871c91d5,14 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Take icon content types from the mime.conf definitions",24,data/crawl/squid/patch_1727.diff
https://github.com/squid-cache/squid/commit/0f5607d98c35b60269ebe9617afdb0b579320950,13 Feb 1998,"added ""counters"" cachemgr operation",18,data/crawl/squid/patch_1728.diff
https://github.com/squid-cache/squid/commit/18d5d330510c89a5bc5dec51332d596f7ba6453f,11 Feb 1998,adding,50,data/crawl/squid/patch_1729.diff
https://github.com/squid-cache/squid/commit/bcfbdc11c29777fb102cc9fe1f586b178e1d7ada,10 Feb 1998,update,25,data/crawl/squid/patch_1730.diff
https://github.com/squid-cache/squid/commit/25354045c0f8473b36e75f04385621b1b538435b,10 Feb 1998,"Changes to accomodate disk write failures:

0) The problem: file_close() doesn't always close the file immediately;
   i.e. when there are pending buffers to write.  However, after
   calling file_close, we were also calling storeUnlockObject and
   the lock count could become zero then.  Bad things would happen
   if we got a callback from a file_write after the lock count went
   to zero.  We need a way to prevent the file_write callback from
   happening when we ""close"" the swapout FD.

1) the file_write() callback data must now be in the callback
   database (cbdata).  We can't add StoreEntry's to cbdata for a couple
   of reasons.  So now we use the swapout_ctrl_t structure for the
   callback data.  Previously this was used only for the file_open
   process, but now we keep it around for the entire swapout duration.
   A new element MemObject->swapout.ctrl points to this data strucutre
   so we can re-access it from storeCheckSwapOut.

2) Changed the way write errors are handled by diskHandleWrite.
   If there is no callback function, now we exit with a fatal
   message under the assumption that the file in question is a log
   file or IPC pipe.  Otherwise, we flush all the pending write
   buffers (so we don't see multiple repeated write errors from
   the same descriptor) and let the upper layer decide how to handle
   the failure.

3) Fixes to storeDirWriteCleanLogs.  A write failure was leaving some
   empty swap.state files, even though it tells us that its ""not
   replacing the file.""  Don't flush/rename logs which we have
   prematurely closed due to write failures, indiciated by
   fd[dirn] == -1.  Close these files LAST, not before renaming.",155,data/crawl/squid/patch_1731.diff
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/patch_1732.diff
https://github.com/squid-cache/squid/commit/16300b5800314164a004ad58548666c62037a2ec,07 Feb 1998,gindent,227,data/crawl/squid/patch_1733.diff
https://github.com/squid-cache/squid/commit/cca89eeb3144e0ca6843180d2bca4d92a75c1d87,07 Feb 1998,PUT method support,43,data/crawl/squid/patch_1734.diff
https://github.com/squid-cache/squid/commit/59272939eadbaeadbf925f3298d9ee7d7ee840d2,06 Feb 1998,"Henrik's ""full memory debugging""",108,data/crawl/squid/patch_1735.diff
https://github.com/squid-cache/squid/commit/56b63fa16de6e4ad08573a745688ebb08d7500a4,06 Feb 1998,Filling in some of the config dumping routines,369,data/crawl/squid/patch_1736.diff
https://github.com/squid-cache/squid/commit/d6f4272b0eb97cfd496f2920ba046f6dd3a2970d,06 Feb 1998,removed netdb_hosts and netdb_addrs from meta_data,16,data/crawl/squid/patch_1737.diff
https://github.com/squid-cache/squid/commit/364fabfbd7609796ed65899ffa350c7e55e7fb1a,06 Feb 1998,remove GOT EOF message,3,data/crawl/squid/patch_1738.diff
https://github.com/squid-cache/squid/commit/3b34c40db5e6a37b2ab20c3095ac003fd2d0ba25,05 Feb 1998,removed unused fileno stack,7,data/crawl/squid/patch_1739.diff
https://github.com/squid-cache/squid/commit/893dbb06318d35761197d94dbab80aa7227d2dad,04 Feb 1998,add bogus value detection to parse_cachedir(),8,data/crawl/squid/patch_1740.diff
https://github.com/squid-cache/squid/commit/f09f5b266e7283bf0dbcb02c7024e906fb9e9ab3,03 Feb 1998,"STORE.C SPLIT
Also made MD5 cache keys standard",3808,data/crawl/squid/patch_1741.diff
https://github.com/squid-cache/squid/commit/0e473d707d13e0eb72d135b5d131df7e3015435f,03 Feb 1998,gindent,402,data/crawl/squid/patch_1742.diff
https://github.com/squid-cache/squid/commit/dbfed404c6bd107bed1066c27d8cfe18f0910ac3,03 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Squid-1.2.beta11: Support for NLST listings
      Format NLST listings, and inform the user that the NLST
      (plain) format is available when we find a LIST listing
      that we don't understand.
Squid-1.2.beta11: SIZE on binary FTP transfers
      Use SIZE on Binary transfers, and not ASCII. The condition
      was inversed, making squid use SIZE on ASCII transfers.
Squid-1.2.beta11: Enable virtual and Host: based acceleration in
      order to be able to use Squid as a transparent proxy without
      breaking either virtual servers or clients not sending Host:
      header the order of the virtual and Host: based acceleration
      needs to be swapped, giving Host: a higher precendence than
      virtual host.
Squid-1.2.beta11: Use memmove/bcopy as detected by configure
      Some systems does not have memmove, but have the older bcopy
      implementation.",232,data/crawl/squid/patch_1743.diff
https://github.com/squid-cache/squid/commit/d377699fc8cb9c2aca3a9ff643c6e177110e461a,02 Feb 1998,"a little swap meta debugging, and added offset to file_write()",658,data/crawl/squid/patch_1744.diff
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/patch_1745.diff
https://github.com/squid-cache/squid/commit/acf5589a3be2a2d15054f02ce7d2ca927709b14f,12 Jan 1998,adding,313,data/crawl/squid/patch_1746.diff
https://github.com/squid-cache/squid/commit/3f6c0fb2ca6b48600072d274f5bacd0ecb422a15,12 Jan 1998,new memory allocation for fixed-size blocks,729,data/crawl/squid/patch_1747.diff
https://github.com/squid-cache/squid/commit/1ee3dc75b950276691c128b245b569d061a092a6,08 Jan 1998,typo,4,data/crawl/squid/patch_1748.diff
https://github.com/squid-cache/squid/commit/a0400784a08481933d92cb7f303ad4c06ffae312,07 Jan 1998,casts on hash_first() to make warnings go away,17,data/crawl/squid/patch_1749.diff
https://github.com/squid-cache/squid/commit/85407535d3bcccc9fd1c0688fbb847201294a70b,06 Jan 1998,copied over v1.1 -z semantics,173,data/crawl/squid/patch_1750.diff
https://github.com/squid-cache/squid/commit/88aad2e576fb23daa47bbb33b23d447e19436b49,06 Jan 1998,"make checkFailureRatio() work again.  Also make 'request_failure_ratio'
global and show its value in the cachemgr info page.",46,data/crawl/squid/patch_1751.diff
https://github.com/squid-cache/squid/commit/e5f4e1b043c814dfdeb507af82ca8d271bf7557e,06 Jan 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>

Here is one big patch, with all the changes I have sent for beta8 that
was not in beta10 and some new ones.

Added remaining options to configure
--enable-new-storekey=[sha|md5(|url)] (was --enable-hashkey)
--enable-acltree
--enable-icmp
--enable-delay-hack
--enable-useragent-log
--enable-kill-parent  (this should be named -hack)
--enable-snmp
--enable-time-hack
--enable-cachemgr-hostname[=hostname]   (new)
--enable-arp-acl  (new)

Added Doug Lea malloc-2.6.4 to the distribution, so that people easily
can try a decent malloc package if they syspect their malloc is broken.
--enable-dlmalloc

Let configure determine witch parts that needs to be compiled,
instead of wrapping the sourcefiles in #ifdef

Moved all the --enable... to the beginning of configure.

Deleted src/options.h. This does NOT work well together with autoconf. I
have instead moved the comments to acconfig.h, and added a small header
with some instructions on how the thing can be configured (all is
visible in include/autoconfig.h[.in]).

Some malloc()/free() calls replaced with x-versions.

Made XMALLOC_DEBUG_COUNT working again. Requires a small stub function
for client and cachemgr.cgi (lib/stub_memaccount.c).

Tried to remove most compile-time warnings.",1350,data/crawl/squid/patch_1752.diff
https://github.com/squid-cache/squid/commit/29cd62b7fa483e864869773e436ae5896d84e4be,06 Jan 1998,"CLEANUP:
	ANSI function defs
	s/bcopy/xmemcpy/
	prototypes",624,data/crawl/squid/patch_1753.diff
https://github.com/squid-cache/squid/commit/d5649d9f35c421edf02183b397d058a5e15164c2,05 Jan 1998,fix five-min average stuff,124,data/crawl/squid/patch_1754.diff
https://github.com/squid-cache/squid/commit/dc83597742c1d42c38c1bfa5ee6ae2ba00c3a661,05 Jan 1998,"- Changed algorithm for determining alive/dead state of peers.
  Instead of using a fixed number of unacknowledged ICP replies,
  it is now based on timeouts.  If there are no ICP replies
  received from a peer within 'dead_peer_timeout' seconds, then
  we call it dead.
- Added calls to getCurrentTime() in comm_{select,poll}_incoming().
- Fixed shutdown bug when the incoming and outgoing ICP socket is
  the same file descriptor.",106,data/crawl/squid/patch_1755.diff
https://github.com/squid-cache/squid/commit/47130615adf48d144b123484de781277bc969ed5,02 Jan 1998,gindent,30,data/crawl/squid/patch_1756.diff
https://github.com/squid-cache/squid/commit/f899fac1760ccee67e36dd1b25ee5679e1071703,30 Dec 1997,ASN cleanup,339,data/crawl/squid/patch_1757.diff
https://github.com/squid-cache/squid/commit/a3aeddcad981fdb2d87586191d7e17c6483471e5,28 Dec 1997,Aligned to squid coding practice (xfree/xmalloc etc),1467,data/crawl/squid/patch_1758.diff
https://github.com/squid-cache/squid/commit/76f729d7a57dcc3f80997ba33acbb78d8bbd9eb0,21 Dec 1997,"Radix-tree algorithm, from NetBSD-4.4",898,data/crawl/squid/patch_1759.diff
https://github.com/squid-cache/squid/commit/6dd8532932de0a73fdc194b4919c0d64a753eae2,21 Dec 1997,"Initial as number acl checking for clients plus hack for server as number
routing",210,data/crawl/squid/patch_1760.diff
https://github.com/squid-cache/squid/commit/23d92c64f75d0b77afa4f96d77d122dd8dfe05a8,06 Dec 1997,INITIAL URN SUPPORT by Kostas,1140,data/crawl/squid/patch_1761.diff
https://github.com/squid-cache/squid/commit/85491f8d52977b0523d6c6a68550c80d54c631fe,05 Dec 1997,Initial URN support,802,data/crawl/squid/patch_1762.diff
https://github.com/squid-cache/squid/commit/aeb649da213ff280b55895af5c7a8708be544212,03 Dec 1997,maxfd bugs when we run out of files?,3,data/crawl/squid/patch_1763.diff
https://github.com/squid-cache/squid/commit/1df370e38a088aa3c12e0971d7324351325ff724,02 Dec 1997,"make SNMP code #ifdef-able, including config parsing",122,data/crawl/squid/patch_1764.diff
https://github.com/squid-cache/squid/commit/be335c224e30a51c526483ca7da18857f71ce98f,02 Dec 1997,gindent,528,data/crawl/squid/patch_1765.diff
https://github.com/squid-cache/squid/commit/7cb58016f291db78a007f0b4ea229d8e7d3bf509,02 Dec 1997,gindent,960,data/crawl/squid/patch_1766.diff
https://github.com/squid-cache/squid/commit/a97cfa48d9c10f3b983d04060c984d1c07f081e0,02 Dec 1997,SNMP changes to get snmpwalk working,485,data/crawl/squid/patch_1767.diff
https://github.com/squid-cache/squid/commit/4e3f712dafe2d6bf48b576483fe4d3645fc4a5c9,30 Nov 1997,"add cbdata __FILE__,__LINE__ debugging",32,data/crawl/squid/patch_1768.diff
https://github.com/squid-cache/squid/commit/e3fc4f100a5d5438d625152c4a8b93e57bc2eab3,29 Nov 1997,abort request after 20 timeouts,17,data/crawl/squid/patch_1769.diff
https://github.com/squid-cache/squid/commit/2ac237e2fee9e6534c2481501c8af15bb6d113d5,28 Nov 1997,"- StoreEntry didn't need to have the method_t member, so its been
  moved to MemObject->method.
- storeEntryListAdd and storeEntryListDelete are quite general.  They
  have been moved to tools.c and named dlinkAdd() and dlinkDelete().
- we want to be able to cache ALL methods, so store_key_url.c now
  always puts the request method into the cache key.
- made StoreEntry->refcount and StoreEntry->flag 16-bit shorts.",131,data/crawl/squid/patch_1770.diff
https://github.com/squid-cache/squid/commit/8b9a2d90ea7dd109aa00cdad99033384c64db312,28 Nov 1997,Add counter for cachemgr output,8,data/crawl/squid/patch_1771.diff
https://github.com/squid-cache/squid/commit/eb5f55b356bb195e1469c6638502a997eca33a91,25 Nov 1997,adding,397,data/crawl/squid/patch_1772.diff
https://github.com/squid-cache/squid/commit/8daca701c8c2ba8c8dd168495210a6c8d12220e9,25 Nov 1997,"Fixes to get pipelined client requests working better.  Need a function
called storeClientPending() whose purpose is to tell the client side
if there is already a callback registered for the entry and the client.
If not, then we'll register one via storeClientCopy().  This is due to
a race condition; when we have pipelined requests, we can not guarantee
that we'll get Deferred in clientSendMoreData() before its time to
send the object off to the client, so the original handler may still
be in place.",87,data/crawl/squid/patch_1773.diff
https://github.com/squid-cache/squid/commit/e144eae409917e8284f6af245e24dd78d3f48548,23 Nov 1997,"Making it so reconfigure doesn't require waiting for all current
connections to finish",155,data/crawl/squid/patch_1774.diff
https://github.com/squid-cache/squid/commit/15df8349237e9eef90b030838021ad89712bf8ea,23 Nov 1997,"Move *ConnectionOpen() functionality to client_side.c and icp_v2.c.
trying to make it so HUP doesn't require closing all the connections",205,data/crawl/squid/patch_1775.diff
https://github.com/squid-cache/squid/commit/3265e68dfa57c4a6dd17c27d30e8a32b33103c71,21 Nov 1997,"Continuing SNMP debugging.
    - snmpHandleUdp needed to set 'outlen' before calling
      snmp_agent_parse()!",23,data/crawl/squid/patch_1776.diff
https://github.com/squid-cache/squid/commit/da2d50d1b7f6df01b5276ca63e22f9c35cd65774,21 Nov 1997,gindent,23717,data/crawl/squid/patch_1777.diff
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/patch_1778.diff
https://github.com/squid-cache/squid/commit/8bde32eac8de2d9cc73e577235acb1e867a74341,21 Nov 1997,Include files for snmp support,1314,data/crawl/squid/patch_1779.diff
https://github.com/squid-cache/squid/commit/25c1b8b74a6e955334c323dbbeffd6cd05b850a2,21 Nov 1997,More initial support for snmp,1010,data/crawl/squid/patch_1780.diff
https://github.com/squid-cache/squid/commit/20903cac78734d3dded129ad79ca18c75117cc8c,15 Nov 1997,next big step on 5 minute averages,68,data/crawl/squid/patch_1781.diff
https://github.com/squid-cache/squid/commit/f29084972801ac4f9be3bcd7b0d0ed32264630fa,15 Nov 1997,New averaging counter stuff,258,data/crawl/squid/patch_1782.diff
https://github.com/squid-cache/squid/commit/5d6c7aad01d54cb7026e8bcc2a0a8ba1df90f859,13 Nov 1997,preliminary AS number support,166,data/crawl/squid/patch_1783.diff
https://github.com/squid-cache/squid/commit/ce66013b40dad272f568df241b6f1fb238cec97f,13 Nov 1997,remove fatal_dump calls,59,data/crawl/squid/patch_1784.diff
https://github.com/squid-cache/squid/commit/8a5e92cee75bac210733c2f5bd98d585c9759fd9,13 Nov 1997,remove fatal_dump calls,19,data/crawl/squid/patch_1785.diff
https://github.com/squid-cache/squid/commit/f0b1933488ce1ce1e84f6497331a6beaf8543cb5,13 Nov 1997,"Ron Gomes fixes.
	- Remove USE_PROXY_AUTH and LOG_FULL_HEADERS from Makefile.in
	- Fixed log_full_hdrs bug
We can't use pathname_stat() for both default_all() and parsing the
config file.  We must check the pathnames only after both the
defaults and the config file have been parsed.  DW also made misc
other fixes to cache_cf.c and friends.",133,data/crawl/squid/patch_1786.diff
https://github.com/squid-cache/squid/commit/fc5d6f7f369a05e34b136894a258d81ae3c6ca3f,13 Nov 1997,Fixed proxy auth support,122,data/crawl/squid/patch_1787.diff
https://github.com/squid-cache/squid/commit/79d39a72a5cc1eb6da806eddab662fed74ab6efe,05 Nov 1997,LINT,332,data/crawl/squid/patch_1788.diff
https://github.com/squid-cache/squid/commit/24ffafb48cef1a0c6bacf8a4f05b10787c5a502a,04 Nov 1997,new store key fixes,25,data/crawl/squid/patch_1789.diff
https://github.com/squid-cache/squid/commit/9fb13bb63bf31656bfa2941cb36aeb8336fcb835,04 Nov 1997,FLEXIBLE CACHE KEYS.  Can use either URLs or SHA digests.,577,data/crawl/squid/patch_1790.diff
https://github.com/squid-cache/squid/commit/9a75cc4df2be1a1938ed6028dca3a149863910df,01 Nov 1997,show keep-alive ratio in server_list output,9,data/crawl/squid/patch_1791.diff
https://github.com/squid-cache/squid/commit/bbe199dce6a94aaded20190b1cbbf83956f1fd0d,31 Oct 1997,"use execvp instead of execv.
s/daemonize/watch_child/",20,data/crawl/squid/patch_1792.diff
https://github.com/squid-cache/squid/commit/f95b81444c1aacf7e291e6932c2c3b4167f3fe87,30 Oct 1997,Added 'daemonize' function to replace RunCache script,58,data/crawl/squid/patch_1793.diff
https://github.com/squid-cache/squid/commit/fe40a877b8316aa3298200fdbffec14c20335257,30 Oct 1997,max okumoto errorpage and other mods,587,data/crawl/squid/patch_1794.diff
https://github.com/squid-cache/squid/commit/52be23e61789eae0e7cf882056062671b80c90c7,29 Oct 1997,remove unused funcs/variables,28,data/crawl/squid/patch_1795.diff
https://github.com/squid-cache/squid/commit/8fbab1bed9274981f87bf09d196c8994622d1c0e,29 Oct 1997,"storeGetSwapSpace(int) is now gone.  If we run out of file numbers,
make it fatal.",5,data/crawl/squid/patch_1796.diff
https://github.com/squid-cache/squid/commit/76a5501fd67e8b677bc9bb8562c2c0d1f22a3201,29 Oct 1997,various MLK fixes,20,data/crawl/squid/patch_1797.diff
https://github.com/squid-cache/squid/commit/c91b9eff2d3a389f10f92d78f7988758520859c5,28 Oct 1997,remove UNUSED_CODE and OLD_CODE sections,166,data/crawl/squid/patch_1798.diff
https://github.com/squid-cache/squid/commit/dd8037ab785c15d5b861a838214c14e4ae909139,28 Oct 1997,Tone down debug levels,20,data/crawl/squid/patch_1799.diff
https://github.com/squid-cache/squid/commit/22c653cddfa8e1bef90ec0126752e9ff9683dfb3,26 Oct 1997,apply Mike Pelliters connection retry ideas,228,data/crawl/squid/patch_1800.diff
https://github.com/squid-cache/squid/commit/ea3a2a698ae518a48e435d505f245dc6bca2892b,26 Oct 1997,"- Removed 'was assert' commengs
- made ever comm_write callback (CWCB) know about COMM_ERR_CLOSING code",252,data/crawl/squid/patch_1801.diff
https://github.com/squid-cache/squid/commit/899bab3fdf2d6ab797b81fa329752af322d9f4d2,25 Oct 1997,enhanced client with 'ping' behaviour. (Ron Gomes),203,data/crawl/squid/patch_1802.diff
https://github.com/squid-cache/squid/commit/f5b8bbc4b7c508252313989e6d0a3f9ec4a6a079,25 Oct 1997,get rid of ansiproto.h and _PARAMS macro,1625,data/crawl/squid/patch_1803.diff
https://github.com/squid-cache/squid/commit/3a278cb887902b7ab7f805b4e6286caf34ba7200,24 Oct 1997,"Allow arbitrary text in the config file
Oskar Pearson",170,data/crawl/squid/patch_1804.diff
https://github.com/squid-cache/squid/commit/6d80d9a6e8fb6146f2b8b3c110361563a5d8ad83,24 Oct 1997,change fatal_dump to assert(),8,data/crawl/squid/patch_1805.diff
https://github.com/squid-cache/squid/commit/48cc3fcf70cd1290d8d0e0461e927351a61f80fd,23 Oct 1997,cleanup on diskHandleWrite,17,data/crawl/squid/patch_1806.diff
https://github.com/squid-cache/squid/commit/6a54c60e337ef597f43ebd57611a54fff4cb4eaa,21 Oct 1997,gindent,307,data/crawl/squid/patch_1807.diff
https://github.com/squid-cache/squid/commit/637ed800db77e7ab1f388b6e102b77d2211b07ad,21 Oct 1997,new cachemgr objects format,44,data/crawl/squid/patch_1808.diff
https://github.com/squid-cache/squid/commit/5f0e96282a653a158f8a69c1a7cf215337aa6ae2,18 Oct 1997,"- parse the HTTP reply headers at swap in.  This means that
  storeClientCopyHandleRead() needs to have a MemObject around.
  So I added a pointer back to the parent mem_obj from _store_client.
  ugh.
- removed lots of OLD_CODE",136,data/crawl/squid/patch_1809.diff
https://github.com/squid-cache/squid/commit/e8479da9f53cf6601976118e8d5fca0d1305a748,18 Oct 1997,"- Need to use clientCacheHit() for icpHandleIMSReply() as well.  This
  means making it global.  icpHandleIMSReply() might think it is
  serving a cache hit, but the swapfile might not be validated yet,
  so swapin might fail.",13,data/crawl/squid/patch_1810.diff
https://github.com/squid-cache/squid/commit/711982d847e7646dc09878f0508847a32e95f88a,17 Oct 1997,"With new storeClientCopy() scheme, the client side might re-request
some data which has already been read from disk (if it didn't get
the full HTTP headers).  That means we need to put lseek() back
in; ugh.  New fde->disk.offset tracks the current file offset.

Fixed the 'double-read' bug found by Alex Rousskov.  Always
make the read callback after each read() call.  Don't wait
for the read buffer to full or for EOF.

This means dread_ctrl->offset isn't needed as it was being used
because there will only be one read() per dread_ctrl.  ->offset
now becomes the offset requested from the store module, and we
seek if dread_ctrl->offset != fde->disk.offset.",78,data/crawl/squid/patch_1811.diff
https://github.com/squid-cache/squid/commit/8350fe9bd9e90a452154698a287379521e49deaf,17 Oct 1997,"Reamped objects being held in memory during transit.  There will be a
smallish windo of data in memory for objects being transferred from the
server side.  For cache hits (swap ins) there is no window, we just read
directly into buffers allocated from the client side, given to store.c
via storeClientCopy().",1119,data/crawl/squid/patch_1812.diff
https://github.com/squid-cache/squid/commit/735246e86fc1bb9e29e2e9701ee08a586ab438ea,14 Oct 1997,adding,246,data/crawl/squid/patch_1813.diff
https://github.com/squid-cache/squid/commit/e102ebda49dea92e5f2f7b4575fb817134071315,26 Aug 1997,"Misc fixes to eliminate problems at exit (and other things)

	- changed storeDirCloseSwapLogs() to take a 'reopen' arg.
	  if not set, we don't reopen the logs for writing again.
	- added FD_CLOSING flag to avoid recursive calls to comm_close().
	- added 'non_peers' structure to keep stats on offendors, instead
	  of logging every bad reply.",146,data/crawl/squid/patch_1814.diff
https://github.com/squid-cache/squid/commit/a95856a0e5aaaa8b7c588c6052f7dad7127974e2,25 Aug 1997,misc fixes,84,data/crawl/squid/patch_1815.diff
https://github.com/squid-cache/squid/commit/a7d59104f856c5ca979f8bada1757a41d217bb4c,25 Aug 1997,gindent,59,data/crawl/squid/patch_1816.diff
https://github.com/squid-cache/squid/commit/f53b06f967ce5bdf5b076bba55d41f8d45a3077d,25 Aug 1997,"Configuration cleanup.
	- set up 'DEFAULT_IF_NONE' option for things like http_port
	  and cache_dir where we want to set a default only if there
	  is not one or more given in the config file.
	- Implemented the configuration dump via cachemanager.  All the
	  easy config types have dump functions; the remainder are
	  unimplemented.",220,data/crawl/squid/patch_1817.diff
https://github.com/squid-cache/squid/commit/c8391077e339148aa62085740cd503a1e2be02a6,25 Aug 1997,return a message when NETDB support isn't compiled in.,5,data/crawl/squid/patch_1818.diff
https://github.com/squid-cache/squid/commit/11d6f6c084fc4ba0b801445b628596591fae38fe,25 Aug 1997,"return 0 if there is no object data, instead of returning -1.  This
could happen, for example, with objcache requests for unsupported
features, such as netdb/icmp.",5,data/crawl/squid/patch_1819.diff
https://github.com/squid-cache/squid/commit/b716a8ad7b0f9209874e63207440d367c92f9660,10 Aug 1997,"More work on persistent connections
	- added histogram counter
	- added httpRestart() to retry failed requests when the
	  server closes on us.
	- missing commSetTimeout() calls when reusing a pconn.
	- need to disable read and timeout handler when pconn
	  pops a FD.
	- const fixes",133,data/crawl/squid/patch_1820.diff
https://github.com/squid-cache/squid/commit/6605655c8b687758b339fdbcd95f61889236ffc3,09 Aug 1997,instrumented persistent connection counter histogram,45,data/crawl/squid/patch_1821.diff
https://github.com/squid-cache/squid/commit/9b312a1927a9c6945fe8db7c97712d111e31af1d,28 Jul 1997,mostly working customizable error messages.  lots of blanks to fill in though,1504,data/crawl/squid/patch_1822.diff
https://github.com/squid-cache/squid/commit/1b6351173ec6f436ba4faec39817b0c8ea0d802f,19 Jul 1997,"fix some parsing.  Needed regular 'parse_size_t' different than one
for parsing ""bytes"" spec.
Also fixed initialization for sendSignal()",39,data/crawl/squid/patch_1823.diff
https://github.com/squid-cache/squid/commit/8873879072298d87402309ab70eb85938d040624,17 Jul 1997,successful compile after merging 1.1.10 thru 1.1.14,1065,data/crawl/squid/patch_1824.diff
https://github.com/squid-cache/squid/commit/a47b9029a4ff5a14d905603bf4af0f451b963110,16 Jul 1997,gindent,424,data/crawl/squid/patch_1825.diff
https://github.com/squid-cache/squid/commit/9e975e4e285472da81c0d6cffc4a55e9fb0b4483,15 Jul 1997,"- warning if no units present for times or byte sizes
- added defaults to all time_t's in cf.data.pre
- Fixed up connect callbacks to recognize COMM_DNS_ERR and !COMM_OK
- Set FTP_HTTP_HEADER_SENT for ftp
- Initialize neighbors_do_private_keys in globals.c
- Remove opt_no_ipcache
- removed redundant externs from squid.h
- changed more debug_trap's to assert's
- changed over-high-water-mark warning to only report once at
  each threshold",283,data/crawl/squid/patch_1826.diff
https://github.com/squid-cache/squid/commit/9906e7243b9de1e11c1e9129ae0b110e5e51ca55,15 Jul 1997,wrestling with units on byte variables,180,data/crawl/squid/patch_1827.diff
https://github.com/squid-cache/squid/commit/b556b1e958885905180021d93e9aa7e702f86c37,15 Jul 1997,"default_all() needs to copy input lines to static memory.  this also
lets us fake config_lineno.
other misc fixes",39,data/crawl/squid/patch_1828.diff
https://github.com/squid-cache/squid/commit/62607543b840af726220429b840f8b878fa5fe81,14 Jul 1997,"misc changes, but still in nonworking state",23,data/crawl/squid/patch_1829.diff
https://github.com/squid-cache/squid/commit/1273d501153738370dae6a8a940711a14d56477b,14 Jul 1997,fill in some missing cf functions,76,data/crawl/squid/patch_1830.diff
https://github.com/squid-cache/squid/commit/a82588244393fa4d92d7f0b914f4a9ca01a0ace7,07 Jul 1997,adding,1864,data/crawl/squid/patch_1831.diff
https://github.com/squid-cache/squid/commit/f1dc9b308900a8d2a3375c1ddfc7ff95c1afb8a4,07 Jul 1997,finish mega config hacking on kite,1637,data/crawl/squid/patch_1832.diff
https://github.com/squid-cache/squid/commit/0153d498880f1f43fc7cc424b42330b560858c74,06 Jul 1997,config fixes in progress,800,data/crawl/squid/patch_1833.diff
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/patch_1834.diff
https://github.com/squid-cache/squid/commit/365e5b3440022c371f19e4bd3ba143e305a472d5,27 Jun 1997,gindent,144,data/crawl/squid/patch_1835.diff
https://github.com/squid-cache/squid/commit/934b03fcac83ff55159329b6723b9d6a1d5bd194,27 Jun 1997,adding,2145,data/crawl/squid/patch_1836.diff
https://github.com/squid-cache/squid/commit/a4394ebd753cb4b23be7aaf6a11f5a5cf833df0e,21 Jun 1997,"clean up access logging, remove lots of Cacheinfo garbage
Need to relocate enums to an enums.h file, too many other wierd
dependencies.",464,data/crawl/squid/patch_1837.diff
https://github.com/squid-cache/squid/commit/f892c2bf269d12e4c8eb7b58889735b6429e8f85,21 Jun 1997,adding,510,data/crawl/squid/patch_1838.diff
https://github.com/squid-cache/squid/commit/03eb2f0154cbf163ffe8bb4cf8c7dbf23bfdebdf,20 Jun 1997,remove some of that HTTPCacheInfo->crap,234,data/crawl/squid/patch_1839.diff
https://github.com/squid-cache/squid/commit/474cac1b462e783942f31577d3c30ac359a1f543,20 Jun 1997,"Mucking about with storeAbort.  Removed squid_error_entry() (need
to replace it later!) and just call storeAbort directly now.",176,data/crawl/squid/patch_1840.diff
https://github.com/squid-cache/squid/commit/3015e83a90c646be342804dfa2b72df299410433,18 Jun 1997,"gindent, debug",134,data/crawl/squid/patch_1841.diff
https://github.com/squid-cache/squid/commit/489b22c1ec56bcd3a930dd8d4f862fd305f490da,18 Jun 1997,debugging and assertions,21,data/crawl/squid/patch_1842.diff
https://github.com/squid-cache/squid/commit/a2172245d2f3390e74782cfc7f7a18a55fe0dd5f,18 Jun 1997,adding,124,data/crawl/squid/patch_1843.diff
https://github.com/squid-cache/squid/commit/bf33177ba302db8be21150985652933e955fc821,17 Jun 1997,reload dup bugfix,6,data/crawl/squid/patch_1844.diff
https://github.com/squid-cache/squid/commit/82691c78eb5291a015b187f572f9a9a0435a4a0b,17 Jun 1997,generic callback support,115,data/crawl/squid/patch_1845.diff
https://github.com/squid-cache/squid/commit/97c03d3cfe6697fc34ed5f7640f59f38cb145f94,04 Jun 1997,use alarm(3) for timing,91,data/crawl/squid/patch_1846.diff
https://github.com/squid-cache/squid/commit/a3d5953de2f03fc75bdceff72f83a3f7a1b58ec3,04 Jun 1997,new debug() macro; David Luyer,1802,data/crawl/squid/patch_1847.diff
https://github.com/squid-cache/squid/commit/f88211e8cc111f07ed717c4e8404c6020b4eb9d0,03 Jun 1997,purifying,131,data/crawl/squid/patch_1848.diff
https://github.com/squid-cache/squid/commit/97a883999e22596c26e4fd9f2dfe8b2fc072584e,02 Jun 1997,gindent,14,data/crawl/squid/patch_1849.diff
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/patch_1850.diff
https://github.com/squid-cache/squid/commit/fe96bbe6f9c989f428467673ec9d4e50a50a6aa0,23 May 1997,"Need two offsets in the storeClientCopy stuff.  The lower offset is
represents the amount of data the client has seen and successfully
dealt with.  The upper offset represents data we have seen, but not dealt
with.  For example, incomplete HTTP reply headers.",79,data/crawl/squid/patch_1851.diff
https://github.com/squid-cache/squid/commit/d89d1fb67e34fd11cbb082a86b5b66c367cef34b,22 May 1997,"Merging in NOVM diffs.  Making functions NOVM compatible.

Big change is nuking storeRegister() and having storeClientCopy()
do the same thing.  storeClientCopy fills a buffer passed in from
the caller and makes a callback when there is data in the buffer.",304,data/crawl/squid/patch_1852.diff
https://github.com/squid-cache/squid/commit/95c4b18f9a20d4c6bd6937c0be4097cfb0c0ce05,16 May 1997,"fix swapfileno wierdness with 'SwapOutStartComplete', just set
e->swap_file_number instead of using some intermediate variable.
Remove storeDescribeStatus()
Make storeSwapInStart() global
Simplify storeLockObject(); make someone call storeSwapInStart() if
thats what they want.",140,data/crawl/squid/patch_1853.diff
https://github.com/squid-cache/squid/commit/545f551aca0994f71ebf2dc639308e7c95230ab7,16 May 1997,no debug() from sigin handlers,6,data/crawl/squid/patch_1854.diff
https://github.com/squid-cache/squid/commit/de866d201ec88988ab7d9e92bac8a1828a3b2d2d,16 May 1997,"Dont' flush write buffers on write error, UNLESS there is no callback handler.
The callback should check the status return code and take necessary measures,
the disk module will keep the data queued.

I'm pretty sure we don't need to seek on disk files since they are only
open for reading or writing, never both.
    Remove all seek calls
    Remove FD_AT_EOF wierdness
    Remove wierd dread_ctrl->cur_len member",156,data/crawl/squid/patch_1855.diff
https://github.com/squid-cache/squid/commit/f990ccccabae8e4c9d1f95d82dac3dc14b5a6073,15 May 1997,"register icpHandleStore, not icpSendMoreData; requires lots of rearranging",94,data/crawl/squid/patch_1856.diff
https://github.com/squid-cache/squid/commit/812ed90c92653caeb9156937f2bdaeb2a4cfa2ec,15 May 1997,"New MIME configuration, regular expression based
Added request_timeout config option
Multiple HTTP sockets (Lincoln Dale).
Moved 'fds_are_n_free' check to httpAccept().
s/USE_POLL/HAVE_POLL/; make poll() default if available.",556,data/crawl/squid/patch_1857.diff
https://github.com/squid-cache/squid/commit/be0d70ce81df13cef308da892a7fb145f4561a30,15 May 1997,remove storetoString(),47,data/crawl/squid/patch_1858.diff
https://github.com/squid-cache/squid/commit/382d851aec8015451a4862958d033866a8d99ba5,08 May 1997,client-proxy keep-alive connections almost working,429,data/crawl/squid/patch_1859.diff
https://github.com/squid-cache/squid/commit/9e4ad609cdc6849a20b298e7c2437007109b80fc,05 May 1997,"- DO NOT set the filemap bits for unvalidated entries.  Doing so
  causes lots of race-condition problems, especially when reading
  DIRTY logs.
- Install icpDetectClientClose handler earlier.  Move from access check
  to just after reading the request.
- Log open FD's upon exit.
- Added dnsShutdownRead handler to detect dnsserver shutdowns and
  free up state.
- Added doubleAverage and integerAverage for moving average
  calculations.
- misc prototype cleanup
- misc debug_trap's and fatal_dump's
- Removed some thread splitting for fooStartComplete() because
  the various protcol start routines should never need a swapin
  callback.  The object should already be locked and swapped in.
- queue_length counter for IP cache.
- Make it okay to storeUnlock a pending object, so long as its
  not been DISPATCHED yet.
- fixed hybrid store rebuild code.
- fixed file_open() flags to TRUNC new swaplog's
- Claned up wierd (FILE *) stuff in tools.c, always write to
  debug_log().
- rewrote writePidFile() to use file_open().",505,data/crawl/squid/patch_1860.diff
https://github.com/squid-cache/squid/commit/348b203123014c0ed2629b3f238af13ec6aa5c73,02 May 1997,"- Removed FD from FQDN callbacks
- Fixed fqdncacheUnregister() from aclChecklistFree()
  due to stupid use of static ipcache_addr memory.
- split aclCheckCallback into aclCheckCallback and
  aclChecklistFree.
- split aclNBCheck into aclNBCheck and aclChecklistCreate.
- free aclCheck_t from icpStateFree
- Added peerSelectFree()",131,data/crawl/squid/patch_1861.diff
https://github.com/squid-cache/squid/commit/e7a22b88739c5f5aacd52a7f8166322d10b7bdc9,01 May 1997,"Fixed ACL_SRC_DOMAIN that should have been ACL_DST_DOMAIN bug
Other purify fixes",84,data/crawl/squid/patch_1862.diff
https://github.com/squid-cache/squid/commit/4f92c80c2de644e024a477c30ff9643e1029b1d6,01 May 1997,more random massive changes,386,data/crawl/squid/patch_1863.diff
https://github.com/squid-cache/squid/commit/c52afeb18a015c03c02e8956d958497e8f6ff7c2,30 Apr 1997,allow file_close() to close more than just FD_FILE,4,data/crawl/squid/patch_1864.diff
https://github.com/squid-cache/squid/commit/5c5783a22a160a1b243bb783941c938781ff14b7,30 Apr 1997,"Massive changes
lose FD lifetimes, use timeouts only
move some stuff to fd.c",849,data/crawl/squid/patch_1865.diff
https://github.com/squid-cache/squid/commit/95d15928422453dc90b7c4d51dec52126ca4982a,30 Apr 1997,moving FD things to common fd.h,403,data/crawl/squid/patch_1866.diff
https://github.com/squid-cache/squid/commit/582b645678b879c12ec52bebe25ef807dc64de06,30 Apr 1997,massive casting cleanups!,651,data/crawl/squid/patch_1867.diff
https://github.com/squid-cache/squid/commit/6ad85e8a98877f871e56cc89be32c68a229743dc,28 Apr 1997,merge 1.1.8->1.1.10; just get it to compile,888,data/crawl/squid/patch_1868.diff
https://github.com/squid-cache/squid/commit/429fdbecbf36ca7f145bc760181a892136c54445,28 Apr 1997,merge 1.1.8->1.1.10; just get it to compile,2206,data/crawl/squid/patch_1869.diff
https://github.com/squid-cache/squid/commit/c932b107c4794dc16cf4358973ab7c087c0060d4,26 Apr 1997,fixes fixes fixes,77,data/crawl/squid/patch_1870.diff
https://github.com/squid-cache/squid/commit/5608850ba272cb2e1940873648bf5e54210a5b87,25 Apr 1997,finish multiple swap dirs,441,data/crawl/squid/patch_1871.diff
https://github.com/squid-cache/squid/commit/4683e377ed933d883836bf597a13c64f762d69c8,02 Apr 1997,more compiler fixes,122,data/crawl/squid/patch_1872.diff
https://github.com/squid-cache/squid/commit/0c04c38986533caca99c4b7a7893b0d1a240a1b4,02 Apr 1997,"it compiles, but need to fix swaplogs",103,data/crawl/squid/patch_1873.diff
https://github.com/squid-cache/squid/commit/596dddc1dd46f76f15138caaebcc7f0cb48f37e4,29 Mar 1997,adding,170,data/crawl/squid/patch_1874.diff
https://github.com/squid-cache/squid/commit/641941c002e567b2a9d108130acdd1a86111be96,29 Mar 1997,Started implementing diff cache dir sizes,385,data/crawl/squid/patch_1875.diff
https://github.com/squid-cache/squid/commit/e924600d26b28bf7540df417d61c5fbfefa55089,04 Mar 1997,merge 1.1.7->1/1/8,896,data/crawl/squid/patch_1876.diff
https://github.com/squid-cache/squid/commit/b6c0e933b91fafb6f021165ec913722427a24c12,01 Mar 1997,jumbo mumbo hacking to get new peer_selection working,511,data/crawl/squid/patch_1877.diff
https://github.com/squid-cache/squid/commit/93775f90841bad05e3a2d0a32b5ecbcd84c1f2b2,27 Feb 1997,"INCOMPLETE: more hacking on peer select stuff.  made peerSelect to use a
callback for success and another for failure.  Made a callback for
neighborsUdpAck to call upon receipt of an ICP reply which figures in
the selection algorithm.  Move some state from mem_obj to psctrl_t.",312,data/crawl/squid/patch_1878.diff
https://github.com/squid-cache/squid/commit/75e88d56b6f78c6e957fcdfc07c8c93cbbc7db63,27 Feb 1997,INCOMPLETE: non-blocking peerSelect(),493,data/crawl/squid/patch_1879.diff
https://github.com/squid-cache/squid/commit/0a0bf5db5f8e64cac539b6bd1bd7941a397fd7e7,27 Feb 1997,"JUMBO Stewart Forster speedup patch:
    1) aiops.c and aiops.h are a threaded implementation of asynchronous file
       operations.
    2) async_io.c and async_io.h are complete rewrites of the old versions.
    3) I have rewritten all disk file operations of squid to support
       the idea of callbacks except where not required.
    4) UDP_HIT_OBJ not supported.
    5) Background validation of 'tainted' swap log entries.
    6) Modified storeWriteCleanLog to create the log file using the
       open/write rather than fopen/printf.
    7) Added the E_INTR error response to handle badly interrupted
       system calls.",1467,data/crawl/squid/patch_1880.diff
https://github.com/squid-cache/squid/commit/062e22812e0e6cd28169be778b8a06ec7e99b1ad,26 Feb 1997,adding,211,data/crawl/squid/patch_1881.diff
https://github.com/squid-cache/squid/commit/5b220cbf8f6e71ceaf7792905bdce0b8414c4ba8,25 Feb 1997,gindent,188,data/crawl/squid/patch_1882.diff
https://github.com/squid-cache/squid/commit/c4170f1bd7620c1d6351772d875fdc6df1e75931,25 Feb 1997,fix adding duplicate IP cache entry for failed BLOCKING lookups.,8,data/crawl/squid/patch_1883.diff
https://github.com/squid-cache/squid/commit/3c01c39227b53e54143e3db8c9edb67ba92a5dd4,21 Feb 1997,Adding splay and binary tree code,176,data/crawl/squid/patch_1884.diff
https://github.com/squid-cache/squid/commit/0c77d85359989904d7321d0182f39a5529b38450,07 Feb 1997,gindent,106,data/crawl/squid/patch_1885.diff
https://github.com/squid-cache/squid/commit/d41a5e15d92b5854c778a1124acebdadc541a497,07 Feb 1997,bail on root,9,data/crawl/squid/patch_1886.diff
https://github.com/squid-cache/squid/commit/098be23bf92dd92e907a20a51934fca06e9f076d,05 Feb 1997,remove disk access locking,86,data/crawl/squid/patch_1887.diff
https://github.com/squid-cache/squid/commit/f06b30896b9baf1106fcfdb29a6e01e3ad1283e2,01 Feb 1997,"From:    ""Andrew Humphrey"" <ajh@paisley.its.unimelb.edu.au>
to ignore or flame at your leisure.  Anyway's here's a simple patch to add
a count of URLS rewritten to the redirector stuff, so that output from
the cache_object://localhost/stats/redirector looks like",10,data/crawl/squid/patch_1888.diff
https://github.com/squid-cache/squid/commit/deb79f0620ce4ffbc787ff447f4774b855d29ae4,01 Feb 1997,"change ""edge"" to ""peer"" everywhere",284,data/crawl/squid/patch_1889.diff
https://github.com/squid-cache/squid/commit/ad7ef91afc84f38d0e5cfe459725b3b24e364dc7,01 Feb 1997,setrlimit RLIMIT_VMEM,13,data/crawl/squid/patch_1890.diff
https://github.com/squid-cache/squid/commit/884011a168a44d54057d049cd08cc9709599bed8,22 Jan 1997,formatting,4,data/crawl/squid/patch_1891.diff
https://github.com/squid-cache/squid/commit/10cab007d4409e605993b09f7e7441956c8fcd11,19 Jan 1997,"oops, divide by days",7,data/crawl/squid/patch_1892.diff
https://github.com/squid-cache/squid/commit/35feb4aad4b4b06c2c67d74e0c0704595ea5ec29,19 Jan 1997,add auto ref age to stats,10,data/crawl/squid/patch_1893.diff
https://github.com/squid-cache/squid/commit/1fe4a4e1d88f097f1cfee23610fbed97b8fa1931,14 Jan 1997,fix ru.ru_maxrss in various ways,20,data/crawl/squid/patch_1894.diff
https://github.com/squid-cache/squid/commit/8c8749f3bd3ebb65d44590b6fb157362e2c478ab,14 Jan 1997,"From:    Peter Wemm <peter@spinner.DIALix.COM>
We set passwords on everything and discovered that cachemgr.c has a few
problems with passwords. (We are using squid 1.1.3)

1: it parses &password=xxx from the incoming url but doesn't use it.
   ie:  with http://foo/cgi-bin/cachemgr.cgi?host=foo&port=8080&password=xxx
   the form comes up with an empty password field and it has to be filled in.
2: When it generates a stats page, the hidden password field is empty. This
   causes the ""refresh"" button to cause a password failure.",16,data/crawl/squid/patch_1895.diff
https://github.com/squid-cache/squid/commit/7a77c4b440005304a096adcb4e1322492d1ff0ee,04 Jan 1997,update,10,data/crawl/squid/patch_1896.diff
https://github.com/squid-cache/squid/commit/d399be0ec4d0bb1e17ed21ebd6fc85699d266812,04 Jan 1997,add storeWriteCleanLog() call to fatal(),7,data/crawl/squid/patch_1897.diff
https://github.com/squid-cache/squid/commit/56aeda47936ba2b987326fcdc2bc414e3f27fe02,04 Jan 1997,add closing cell table tag,4,data/crawl/squid/patch_1898.diff
https://github.com/squid-cache/squid/commit/15db12e9528ab4611f9e742009fb58d5b564a661,21 Dec 1996,gindent,4,data/crawl/squid/patch_1899.diff
https://github.com/squid-cache/squid/commit/985b7fb7e0b7c272b497e427ef4e220179be12e1,21 Dec 1996,better split into HTTP/ICP groups,51,data/crawl/squid/patch_1900.diff
https://github.com/squid-cache/squid/commit/de61bd0bb1fdd286211a3a613b2125ba29a6352a,21 Dec 1996,fix ICP neighbor round-robin,14,data/crawl/squid/patch_1901.diff
https://github.com/squid-cache/squid/commit/151a0b6df79a7fe8c2a314b2b7dafc837aaea7f8,16 Dec 1996,fix up header stats,102,data/crawl/squid/patch_1902.diff
https://github.com/squid-cache/squid/commit/f9a568ec1d550201417299561fa2c83f106f9901,04 Dec 1996,"fatal() if no dnsservers start.
Report how many are actually running",11,data/crawl/squid/patch_1903.diff
https://github.com/squid-cache/squid/commit/ca98227c44fa1841534b363d2256066ce19d446a,04 Dec 1996,"        - Changed store.log to include date, last-modified, and
          expires timestamps, plus content-type.
        - Added content-type to access.log too.
        - parse HTTP timestamps directly in httpParseReplyHeaders().
        - moved timestampsSet() to storeTimestampsSet().
        - fixed ACL '/32' bug (Ansgar Hockmann).",261,data/crawl/squid/patch_1904.diff
https://github.com/squid-cache/squid/commit/dcfe639004a3c1fc2e9f201de8ba6cd94bd37ec1,03 Dec 1996,"Hi Duane,

        Anthony Baxter and myself have completed the patches for comm.c to
get it to use poll(2) directly rather than select().  This provides a largish
performance increase for systems that implement select() as a library call
(such as Solaris), and also allows systems such as Solaris to bypass the silly
1024 open FD limit which library select() has.  We've tested this code on
running systems and found a smallish increase in overall ability to service
connections, and a respectable drop in CPU usage.  To use, just compile with
the -DUSE_POLL flag in the make options.  Patch applies to 1.1b25 version
of comm.c.  As with all code, there probably are still bugs...",475,data/crawl/squid/patch_1905.diff
https://github.com/squid-cache/squid/commit/9d4b2981dd8f79922fb5a9b8ef33872879788825,01 Dec 1996,multicast viz hack stuff,78,data/crawl/squid/patch_1906.diff
https://github.com/squid-cache/squid/commit/7db3010f671c2aa6a886fdb72eccaadda8bb06e0,28 Nov 1996,remove DONT_DO_THIS code,32,data/crawl/squid/patch_1907.diff
https://github.com/squid-cache/squid/commit/b785f8ca1b9998aee0157dcac36d8be23bfdd011,25 Nov 1996,gindent,22,data/crawl/squid/patch_1908.diff
https://github.com/squid-cache/squid/commit/13a0a4525bca2c89c06e538ce42b53393706005c,25 Nov 1996,make FTP fork fatal,4,data/crawl/squid/patch_1909.diff
https://github.com/squid-cache/squid/commit/e94df02df758a74108a938a9497c16978978e051,23 Nov 1996,"From:    Markus Gyger <mgyger@itr.ch>
it's not possible anymore to have no password for certain
actions of cachemgr. Here's my idea for a null/""none"" password
(e.g. cachemgr_passwd none squid.conf).
Also encoding for < and & in case one uses this characters for
example for err_html_text.",16,data/crawl/squid/patch_1910.diff
https://github.com/squid-cache/squid/commit/4a218c947937e0f0793716970a258980a789f2ce,22 Nov 1996,change to debug_trap,5,data/crawl/squid/patch_1911.diff
https://github.com/squid-cache/squid/commit/b012353a54854b1224cc205cc24cd8785f7e26f7,08 Nov 1996,"- added neighbor_domain_type
- removed wierd 2-step neighbor configuration stuff
- User-Agent log patch (Joe Ramey)
- http-accel Host: patch (Miguel A.L. Paraz)",398,data/crawl/squid/patch_1912.diff
https://github.com/squid-cache/squid/commit/6fb52f6ce525caa5b27ee348cd87035052678d1c,08 Nov 1996,"Daily Ed Knowles patch, plus DW cleanup",110,data/crawl/squid/patch_1913.diff
https://github.com/squid-cache/squid/commit/52d4522b3a2c423122495166171a4b6614129453,07 Nov 1996,"- remove (PIF) casts and fix up function defns
- merge store pending list into client list",219,data/crawl/squid/patch_1914.diff
https://github.com/squid-cache/squid/commit/5df6123045559256ff611e59eec3110c2bb1f5c2,06 Nov 1996,adding passthrough module,112,data/crawl/squid/patch_1915.diff
https://github.com/squid-cache/squid/commit/fe4e214f94280f8c715eba8202223b867063fc54,06 Nov 1996,gindent,221,data/crawl/squid/patch_1916.diff
https://github.com/squid-cache/squid/commit/0ee4272be86c64bd8eedf6f662f63f61f8203e13,05 Nov 1996,massive const patch from Markus Gyger,1167,data/crawl/squid/patch_1917.diff
https://github.com/squid-cache/squid/commit/5ad764e27d272e0afd4354151c3e1f6ec5decbf9,02 Nov 1996,Make swap log pathname configurable,143,data/crawl/squid/patch_1918.diff
https://github.com/squid-cache/squid/commit/387926244297dae73028057bd54702a30e4fd225,28 Oct 1996,"        - Fundamental changes to object TTLs; now think in terms of
          refresh times.  Replaced 'ttl_pattern' with 'refresh_pattern'.
        - Dropped 'http', 'ftp', and 'gopher' config options.
        - Added a single 'maximum_object_size' value.
        - Moved storeStartDeleteBehind() calls from http/ftp/gopher to
          storeAppend().
        - Moved storeClientListAdd() call from store to client/icp
          because of storeClientCopy() race condition between IMS
          replies and objects in delete behind mode.
        - renamed TCP_EXPIRED* to TCP_REFRESH*.
        - Stopped appending error messages to partially delivered
          objects.",381,data/crawl/squid/patch_1919.diff
https://github.com/squid-cache/squid/commit/a7e590013e9b9a558086dacd25aea999ebd8724d,27 Oct 1996,Replace ttl_pattern with ttl_refresh stuff.,227,data/crawl/squid/patch_1920.diff
https://github.com/squid-cache/squid/commit/cf49df4bbd9050de47202fcdab3f693c5768f0a5,25 Oct 1996,rename rfc850 to rfc1123,366,data/crawl/squid/patch_1921.diff
https://github.com/squid-cache/squid/commit/ffa8aa23328f8cb435a01088cb290afcc314060c,25 Oct 1996,"s/""""/null_string/",24,data/crawl/squid/patch_1922.diff
https://github.com/squid-cache/squid/commit/2aea66ad6d18f02ae3e56eca799dfd37c8bcdca5,24 Oct 1996,fix process RSS for SGI,19,data/crawl/squid/patch_1923.diff
https://github.com/squid-cache/squid/commit/1d73e33a064361fe860f76a7720afb17e01236d9,24 Oct 1996,icp.h,46,data/crawl/squid/patch_1924.diff
https://github.com/squid-cache/squid/commit/d1a43e28ec0017d5b51dad6dc070841d26028cbc,17 Oct 1996,"        - Changed cachemgr stats/objects listing format.
        - Added some missing ""entry->refcount++""
        - Changed StoreEntry->timestamp to be the last verification time.
          (was the stored-on-disk time).
        - Fixed stuck objects from ""304 Not Modified"" responses without
          final blank line.
        - Added failure detection to icmpRecv().",447,data/crawl/squid/patch_1925.diff
https://github.com/squid-cache/squid/commit/c021888f94a0013f19e22e10426e5048327beae0,15 Oct 1996,"Make dnsserver, ftpget, redirector totally optional.
ftpget will be disabled for http_accel-only mode.",70,data/crawl/squid/patch_1926.diff
https://github.com/squid-cache/squid/commit/7fdce58c8704e72acf0cfe9c55f625dcd2f98769,15 Oct 1996,always divide percent by at least 100,6,data/crawl/squid/patch_1927.diff
https://github.com/squid-cache/squid/commit/7c6679053fdf539ce5ca72af71e089bb0226debf,15 Oct 1996,gindent,59,data/crawl/squid/patch_1928.diff
https://github.com/squid-cache/squid/commit/8eb58c9c8eeb97b905b9a694a94f232f9bb7dbbb,15 Oct 1996,gindent,15,data/crawl/squid/patch_1929.diff
https://github.com/squid-cache/squid/commit/e97f40f4c3e673d5cbc1cd382a4b0c3044810c45,15 Oct 1996,rearrange USE_ICMP defines,451,data/crawl/squid/patch_1930.diff
https://github.com/squid-cache/squid/commit/c41d4b6d501a43e2095977e2d044da509e146973,15 Oct 1996,adding,94,data/crawl/squid/patch_1931.diff
https://github.com/squid-cache/squid/commit/5ecceaa4cdebec59ba451d132ce107d9b5e69c36,15 Oct 1996,"        - Added client_db.c; keeps stats on clients, use cachemgr
          to view client list.
        - Stop sending ICP_OP_DENIED to clients if 95% of their
          queries are denied (then they'll think we're dead).",36,data/crawl/squid/patch_1932.diff
https://github.com/squid-cache/squid/commit/a6f3a003a5bba627232062f9821a46e470b6b5b0,15 Oct 1996,put URL strings with StoreEntries,10,data/crawl/squid/patch_1933.diff
https://github.com/squid-cache/squid/commit/9c4f4529f7456c397c89398453bd054e0eb65b82,12 Oct 1996,misc turds,13,data/crawl/squid/patch_1934.diff
https://github.com/squid-cache/squid/commit/c7433536f52d1b6bf5cf93c55b368a92d51320e6,11 Oct 1996,Misc shutdown-related cleanup stuff...,61,data/crawl/squid/patch_1935.diff
https://github.com/squid-cache/squid/commit/3e12e0629294432dce09bb91a9ffdef7816824c2,10 Oct 1996,Account and free netdb host entries too.,67,data/crawl/squid/patch_1936.diff
https://github.com/squid-cache/squid/commit/e5f6c5c2bf496abccc6c5fc3ef1b36c339c85ba2,10 Oct 1996,"-Replaced use of hostent in IP cache.  Now use home-grown ipcache_addrs with
 list of in_addr's
-Changed comm_connect() to comm_nbconnect() and removed all *ConnInProgress()
 stuff.  Now all (most?) completed connections go through a single function.
-Added ipcacheCycleAddr() to round-robin IP addresses
-Added ipcacheRemoveBadAddr() to remove bad addresses from failed connect's.
-Other junk",1078,data/crawl/squid/patch_1937.diff
https://github.com/squid-cache/squid/commit/d8dd69d1e1c78f243d6139fe661466a4d03c8a8f,09 Oct 1996,"-report pings recv/sent
-update last_use_time in netdbHops()",11,data/crawl/squid/patch_1938.diff
https://github.com/squid-cache/squid/commit/24382924a7ffbccc48f76cdc110e47fcbf727eaa,09 Oct 1996,mondo proto patch from ed knowles,323,data/crawl/squid/patch_1939.diff
https://github.com/squid-cache/squid/commit/c907000b6410e88d86f2683f00947a2a5c3c360d,09 Oct 1996,expire stuff,92,data/crawl/squid/patch_1940.diff
https://github.com/squid-cache/squid/commit/0ba3d12b9654e990d602a7da992b7facbf43ebc0,07 Oct 1996,Can't use inaddrFromHostent on ipcache entries with multiple addresses,7,data/crawl/squid/patch_1941.diff
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/patch_1942.diff
https://github.com/squid-cache/squid/commit/5e604a0e6162c5368637a2ed5395480e257ee4d5,07 Oct 1996,"better explain ""Found non-ICP cache as SIBLING""",5,data/crawl/squid/patch_1943.diff
https://github.com/squid-cache/squid/commit/233794cdf823e0b65d425e0cba840321199029da,25 Sep 1996,1.0.17 merge,41,data/crawl/squid/patch_1944.diff
https://github.com/squid-cache/squid/commit/944d6dc375906b14fb48385bab01662acd782ac4,25 Sep 1996,Moved accept() for dnsserver into Squid,29,data/crawl/squid/patch_1945.diff
https://github.com/squid-cache/squid/commit/023552a9bcafb4a1f53ad450b81d92fbb1f5fb22,25 Sep 1996,"From:    webadm@cc.fh-lippe.de (Cord Beermann, Webmaster der FH Lippe)
Here is a small fix, which corrects the Cachemgr.cgi-Output for
non-table-Browsers.",8,data/crawl/squid/patch_1946.diff
https://github.com/squid-cache/squid/commit/8269612758a2785c7463732c4695714a9e850434,24 Sep 1996,add netdb stuff,13,data/crawl/squid/patch_1947.diff
https://github.com/squid-cache/squid/commit/76cff1d4a81274ba86d8cf6fe2a45cb33b2fa4ed,24 Sep 1996,Fixed handling of race condition.,40,data/crawl/squid/patch_1948.diff
https://github.com/squid-cache/squid/commit/9d90e6654711ff3cc842698737db21948de09868,21 Sep 1996,"        - Moved ICMP socket to external 'pinger' program.
        - Moved tvSubMsec() to lib/util.c.
        - Moved accessLogTime() to debug.c.",784,data/crawl/squid/patch_1949.diff
https://github.com/squid-cache/squid/commit/67508012c81242770491cc6732a8a5b5e9715391,20 Sep 1996,"        - Fixed coredump in icpStateFree() when calling
          checkFailureRatio().
        - Added more stuff to net_db.c.
        - Fixed memory leak in stat_ipcache_get().
        - Changed __P back to _PARAMS.",977,data/crawl/squid/patch_1950.diff
https://github.com/squid-cache/squid/commit/caebbe002aa9aeb5cdf2f2f17dd52c42c88dda5b,19 Sep 1996,merge diff-1.0.12-1.0.16,301,data/crawl/squid/patch_1951.diff
https://github.com/squid-cache/squid/commit/0673c0baf89a645ff01dd1325f9524df196c6b39,17 Sep 1996,"s/()/(void)/
Fix ((void)) for varargs funcs",316,data/crawl/squid/patch_1952.diff
https://github.com/squid-cache/squid/commit/16b204c49631dd56570f689ee9ebc4208ed697ae,17 Sep 1996,mega-patch for ICMP support,551,data/crawl/squid/patch_1953.diff
https://github.com/squid-cache/squid/commit/498bf56a9cda24366c12cd02ec743663a7a20b5a,15 Sep 1996,put back _PARAMS/__P macro for defs,620,data/crawl/squid/patch_1954.diff
https://github.com/squid-cache/squid/commit/684c27207e1c67835e143d4b6184af30324a14b1,14 Sep 1996,gindent,249,data/crawl/squid/patch_1955.diff
https://github.com/squid-cache/squid/commit/b8d8561b073368b1000afe7bc3758c967ea3a0ba,14 Sep 1996,ANSIFY,10549,data/crawl/squid/patch_1956.diff
https://github.com/squid-cache/squid/commit/a528eb8716a8fd4aa2340ddb3fa6f1da75f017e8,14 Sep 1996,"        - Added setting cachemgr.cgi fields from query string
          (Neil Murray).
        - Split log type TCP_IFMODSINCE into TCP_IMS_HIT and
          TCP_IMS_MISS
        - Replaced proto_hit() and proto_miss() with proto_count()
          which looks at log_type argument to calcultate hits
          and misses.
        - Split CacheInfo into HTTPCacheInfo and ICPCacheInfo.
        - Placed call to proto_count() just after log_append()
          so we only need it in one place.
        - Made a lot of proto.c functions static and added prototypes.",196,data/crawl/squid/patch_1957.diff
https://github.com/squid-cache/squid/commit/fddcd1e0281e2b92d67ce596a5ce45b0100e7a79,14 Sep 1996,"From:    Neil Murray <neil@aone.com.au>
        I liked the idea of changeable defaults for cachemgr.cgi but thought
something that I could bookmark so that getting to a number of different
proxies was a bookmark away.

        Below is my attempt at achieving this. I use the QUERY_STRING
environment variable to pass in the proxy host & port number as

                .../cgi-bin/cachemgr.cgi?<proxy host>:<port number>",40,data/crawl/squid/patch_1958.diff
https://github.com/squid-cache/squid/commit/36fd4d1297855ec60c671cb13aab17dec713763e,13 Sep 1996,update,10,data/crawl/squid/patch_1959.diff
https://github.com/squid-cache/squid/commit/fedac7e51795988d0e6ec354c50fcf1498eaf425,13 Sep 1996,gindent,89,data/crawl/squid/patch_1960.diff
https://github.com/squid-cache/squid/commit/99585d35f8452d853a3ac46c968f8f2f640f92ee,13 Sep 1996,adding,95,data/crawl/squid/patch_1961.diff
https://github.com/squid-cache/squid/commit/85b701ed1a34fda890a2bfa71fbfbfe5d5021418,12 Sep 1996,"        - Fixed stupid coredump bug in storeGetSwapSpace().
        - Added debug_trap() to replace some fatal_dump()'s.  Now use
          debug_trap for non-fatal errors.  If -C option is set,
          then debug_trap is the same as fatal_dump.",111,data/crawl/squid/patch_1962.diff
https://github.com/squid-cache/squid/commit/56fa4cadbbb17eb8986b36f081f03e6ae766ab44,12 Sep 1996,"- Cleaned up gopher.c; prototypes, make functions static, etc.
- Added READ_DEFERRED entry flag.  Only extend lifetime when
  first entering deferred mode.",321,data/crawl/squid/patch_1963.diff
https://github.com/squid-cache/squid/commit/7690e8eb7e104d50d4b4b5214369673202d1941c,12 Sep 1996,"cleanup based on HP-UX CC
-k signal option",153,data/crawl/squid/patch_1964.diff
https://github.com/squid-cache/squid/commit/5e79098a549e778978eb49b04ae25de556d6d76b,12 Sep 1996,gindent,75,data/crawl/squid/patch_1965.diff
https://github.com/squid-cache/squid/commit/c31201c6e09db5eeae9cb106e698b33eb13c2e43,06 Sep 1996,twiddle meta_data counters,14,data/crawl/squid/patch_1966.diff
https://github.com/squid-cache/squid/commit/579a45cde642b80a5f75f7389eefb379a5d438de,06 Sep 1996,"Make storeGetMemSpace() call 'purge' for some objects and 'release'
for others.",71,data/crawl/squid/patch_1967.diff
https://github.com/squid-cache/squid/commit/620da9558a51ade1beff14a61d42e1df49c47eaa,05 Sep 1996,"-Added more IMS support.  Now Squid issues IMS requests for expired
 objects in the cache.  Log type will be either TCP_EXPIRED_HIT if
 the server sends ""304 Not Modified"" or TCP_EXPIRED_MISS if the
 server send a new object.
-Fixed storeGetMemSpace() bug; need to check storeCheckPurgeMem()
 instead of storeEntryLocked().
-renamed icp_hit_or_miss() to icpProcessRequest().
-changed mkrfc850() to use regular variable instaed of a pointer.
-removed store_entry member from fd_table[] in comm.h.
-changed httpSendRequest to not tack Squid onto the 'User-Agent' line,
 Use HTTP/1.1 'Forwarded' instead.
-removed icpProcessHIT() which only called icpSendMoreData().
-removed icpProcessIMS() which only called icpGetHeadersForIMS().
-removed some 'Reset header fields for reply' crap.
-added old_entry member to icpStateData for handling IMS requests.
-removed ipcache_call_pending_badname().
-added 'locks' member to ipcache_entry.
-cleaned up setting/clearing IP_LOOKUP_PENDING bit.
-removed storeEntryLocked() trap in storePurgeMem().
-added storeCheckExpired() for use instead of 'if (squid_curtime >
 e->expires)'.
-removed storeWalkThrough() and removeOldEntry(), changed storePurgeOld()
 to do the walking through instead.",274,data/crawl/squid/patch_1968.diff
https://github.com/squid-cache/squid/commit/1c481e007b7e5ccfe40228bd35b87754982a67ed,04 Sep 1996,squid-1.0.12 merge,246,data/crawl/squid/patch_1969.diff
https://github.com/squid-cache/squid/commit/e84703adde7a8d6cc0eadf15e4a55022146403d9,04 Sep 1996,"make fqdncache more like ipcache
	- new parsebuffer()
	- use ->expires instead of ->ttl",308,data/crawl/squid/patch_1970.diff
https://github.com/squid-cache/squid/commit/a8f7d3ee8f37334ed638d2ee22a55bdb49f44291,31 Aug 1996,merge 1.0.11 changes,235,data/crawl/squid/patch_1971.diff
https://github.com/squid-cache/squid/commit/db9f331f288347273093daaf93ac69c41bd3a546,29 Aug 1996,html cleanup,14,data/crawl/squid/patch_1972.diff
https://github.com/squid-cache/squid/commit/28b2f45fefcf5c77c6a9dfb486bcc554a9cf1596,29 Aug 1996,gindent,19,data/crawl/squid/patch_1973.diff
https://github.com/squid-cache/squid/commit/a4ebeb3baabc1baa2eaf44bfd9b044a845e74b0c,29 Aug 1996,set announce_rate and clean_rate to one year if they are disabled,14,data/crawl/squid/patch_1974.diff
https://github.com/squid-cache/squid/commit/35e853ba3aded746aa75c4af14a4518658060e0d,28 Aug 1996,initialize status and expires for new ipcache_parsebuffer,13,data/crawl/squid/patch_1975.diff
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/patch_1976.diff
https://github.com/squid-cache/squid/commit/276a6d7c01ed656b850cb6dc5dfd156772809d16,28 Aug 1996,use _dns_ttl_ only if greater than -1,7,data/crawl/squid/patch_1977.diff
https://github.com/squid-cache/squid/commit/6bf652356e41d8509d1f0e64652b035d8328d813,28 Aug 1996,Excellent DNS TTL hack from Balint Nagy Endre <bne@CareNet.hu>,64,data/crawl/squid/patch_1978.diff
https://github.com/squid-cache/squid/commit/9ca89c5aad09eb6617d410df6e1d223b61dfc747,27 Aug 1996,"-Fix calling maintenance functions in main.  Don't rely on COMM_TIMEOUT
 and clean_rate stuff.",101,data/crawl/squid/patch_1979.diff
https://github.com/squid-cache/squid/commit/cadbacbdf2f4968228e4ffe2e68e042870cced44,27 Aug 1996,check for putting NULL pointers,4,data/crawl/squid/patch_1980.diff
https://github.com/squid-cache/squid/commit/2546fcb32509e587a2a301bd30f08411dbde4330,27 Aug 1996,"        - Added patch from srb@cuci.nl (Stephen R. van den Berg) for
                - ttl_force_pattern
                - quick_abort min pct max",99,data/crawl/squid/patch_1981.diff
https://github.com/squid-cache/squid/commit/af00901c8240077af4a9e5758dd6c30f14564802,27 Aug 1996,merge from SQUID_1_0_10,477,data/crawl/squid/patch_1982.diff
https://github.com/squid-cache/squid/commit/d556a26830cf1ad1bda933b3bbd4a5832a45a9af,24 Aug 1996,gindent,8,data/crawl/squid/patch_1983.diff
https://github.com/squid-cache/squid/commit/b32508fb160c3c83081159da38c9ab9c46659814,24 Aug 1996,"        - Rewrote storeGetMemSpace()
        - Fixed hot_vm accounting.",238,data/crawl/squid/patch_1984.diff
https://github.com/squid-cache/squid/commit/a11fc0d2f400f472c7b7bf93315ea517f63587e5,24 Aug 1996,check swap_status in neighborsUdpPing(),4,data/crawl/squid/patch_1985.diff
https://github.com/squid-cache/squid/commit/e3ea7b83906486357ac6e412aeb058a58dfb079c,24 Aug 1996,remove restrictions on hot_vm_factor,13,data/crawl/squid/patch_1986.diff
https://github.com/squid-cache/squid/commit/4610e3126abd9fd4f28cae91d4753214642c6d2c,22 Aug 1996,trashed stack test,4,data/crawl/squid/patch_1987.diff
https://github.com/squid-cache/squid/commit/10321c65385827acf581a46836882a8c3fcec259,20 Aug 1996,add redirector stats,12,data/crawl/squid/patch_1988.diff
https://github.com/squid-cache/squid/commit/edae7bc01b8c21f6c9db039886bb2271dee5758f,20 Aug 1996,compiler,14,data/crawl/squid/patch_1989.diff
https://github.com/squid-cache/squid/commit/6e40f263175e8c3ed5f6197a3673dc6dee84e189,20 Aug 1996,1.0.7 -> 1.0.8 merge,383,data/crawl/squid/patch_1990.diff
https://github.com/squid-cache/squid/commit/a1e4728864eacdd4fe8a4c182f7ba4771f182fff,17 Aug 1996,-Use storeEntryLocked() more instead of various other status checks,94,data/crawl/squid/patch_1991.diff
https://github.com/squid-cache/squid/commit/c0cdaf99bbe230fd583c776bf3836bbbd189385b,15 Aug 1996,"From: Russell Street <r.street@auckland.ac.nz>
Change redirect to take IP/FQDN, ident, method on each line",54,data/crawl/squid/patch_1992.diff
https://github.com/squid-cache/squid/commit/eaa778413fd9619207139ed45af1abcd4f2c2c44,27 Jul 1996,"- Removed all references to hierarchy.log.
- Changed hierarchy_log_append() to hierarchyNote() and added
  _hierarchyLogData structure.",188,data/crawl/squid/patch_1993.diff
https://github.com/squid-cache/squid/commit/5ec2f9233ae75cbe5b24b4a746fd5253df0aa89b,26 Jul 1996,"removed {http,ftp,gopher}_stop stoplists",103,data/crawl/squid/patch_1994.diff
https://github.com/squid-cache/squid/commit/9dfb6c1c245ee2eedf617e1c9428ee8b8eb91c9c,26 Jul 1996,"-Use 'mem = entry->mem_obj' shortcut
-Define descriptive strings for store entry states.
-move hierarchy codes to request structure",134,data/crawl/squid/patch_1995.diff
https://github.com/squid-cache/squid/commit/b6f794d6be5abf71f7d53e6222ed4fc4e7532efb,25 Jul 1996,"Removed all the get*() turds, now use Config structure directly.",843,data/crawl/squid/patch_1996.diff
https://github.com/squid-cache/squid/commit/f7a5493bb14e896efb02e2b12a03144e737e1f5d,25 Jul 1996,- Misc casts and cleanup from running Insight,77,data/crawl/squid/patch_1997.diff
https://github.com/squid-cache/squid/commit/ca18f0d9f10e3602335a35d675744e4cce810976,22 Jul 1996,added new options to cachemgr,42,data/crawl/squid/patch_1998.diff
https://github.com/squid-cache/squid/commit/f88bb09c780151eb3736f0dc774ab5df6858ee4d,22 Jul 1996,"-Split ipcache.c into ipcache.c and dns.c
-Moved newer functions from icp.c to client_side.c
-Added fqdncache.c, like ipcache.c
-Added new ACL type ACL_SRC_DOMAIN 'srcdomain'
-Use aclMatchDomainList() instead of aclMatchWord() for domain names
-Renamed 'stats/general' to 'stats/ipcache'",1929,data/crawl/squid/patch_1999.diff
https://github.com/squid-cache/squid/commit/f5469bcea38a6ff05e3ca5686710bbca5f10df11,19 Jul 1996,Use two-level directory structure and log things in hex,183,data/crawl/squid/patch_2000.diff
https://github.com/squid-cache/squid/commit/e47afcdb849fd39db81aa13d4eb2f06f5c07b9d9,17 Jul 1996,"-add free arg to file_write()
-remove excessive debugging from storeAppend().
-Since no more O_RDWR files, break mem_obj->swap_fd into swapin_fd and
 swapout_fd
-Use some mem=e->mem_obj for shortcuts
-Added diskWriteIsComplete() because now with aio*() stuff, we don't want
 to close the swaplog until everything has been written.",149,data/crawl/squid/patch_2001.diff
https://github.com/squid-cache/squid/commit/b59c7120f31c84e052f8c28296dc7be3500d863e,17 Jul 1996,"-Do not allow O_RDWR files to be opened
-comment out file_update_open()
-clean up diskHandleWrite() mess.
-Added free() field to dwrite_q structure so memory can be freed
 by diskHandleWrite().",124,data/crawl/squid/patch_2002.diff
https://github.com/squid-cache/squid/commit/08086a53bcf91a4529ad9b88677c2aa5a7105d22,16 Jul 1996,abort if all the redirectors close,7,data/crawl/squid/patch_2003.diff
https://github.com/squid-cache/squid/commit/7fc9f088991bbfe2974f21ce65956b4610168bfe,16 Jul 1996,Add XMALLOC_COUNT stuff to figure out where all the memory is going,55,data/crawl/squid/patch_2004.diff
https://github.com/squid-cache/squid/commit/7ecd0a2feab33e404a3761b2ec4a262fe884f31b,12 Jul 1996,"-Changed stack size stuff so now free pages if there are more than
 max pages allocated",167,data/crawl/squid/patch_2005.diff
https://github.com/squid-cache/squid/commit/07a8ad49facf3ba055b6fc68d2485b1118a5e9c2,12 Jul 1996,"-Remove ipcache_entry->lock
-Change displayed TTL in stats page",22,data/crawl/squid/patch_2006.diff
https://github.com/squid-cache/squid/commit/68b468e5a592ede2f4bafa6d37ed72b4fed76d88,12 Jul 1996,"-fix XMALLOC_DEBUG
-add XMALLOC_COUNT",45,data/crawl/squid/patch_2007.diff
https://github.com/squid-cache/squid/commit/d2af947760f5e7a92ab3bf260744c55ce19ac073,11 Jul 1996,redirector up to snuff,639,data/crawl/squid/patch_2008.diff
https://github.com/squid-cache/squid/commit/d51e52f5fef6a82ca1a7cf1be5e55f2c1d16b3ce,10 Jul 1996,"mucho cleanup, mostly separate filedescriptor output into separate function",248,data/crawl/squid/patch_2009.diff
https://github.com/squid-cache/squid/commit/81b795fa81a7ac196b532a343f50be275f1cd429,10 Jul 1996,Added filedesciptor and reply_header entries,22,data/crawl/squid/patch_2010.diff
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/patch_2011.diff
https://github.com/squid-cache/squid/commit/983061ed9eb08a8f5b02ae74f5adc0140b933d87,04 May 1996,merging changes from SQUID_1_0 branch,1418,data/crawl/squid/patch_2012.diff
https://github.com/squid-cache/squid/commit/15c05bb09ea6f9e6c78cf77d25cee68e2f1801b1,02 May 1996,gindent,40,data/crawl/squid/patch_2013.diff
https://github.com/squid-cache/squid/commit/234967c95c2a7139e95200ad24a8e2581880a029,02 May 1996,merging all changes up to squid-1.0.beta5,1451,data/crawl/squid/patch_2014.diff
https://github.com/squid-cache/squid/commit/47b91faabc4007cd3fde175056f01afb9b8495f9,19 Apr 1996,separated nconn into TCP and UCP,18,data/crawl/squid/patch_2015.diff
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/patch_2016.diff
https://github.com/squid-cache/squid/commit/b09ad9fd5e61c14ba6e4093c68a9aef8213d9ded,18 Apr 1996,add configurable dns_testnames and remove lazy ipcache initialization checks,52,data/crawl/squid/patch_2017.diff
https://github.com/squid-cache/squid/commit/2c0a39aa50b81b233e83f1668fc0970bc4bfa02c,17 Apr 1996,remove fatal check for file_close of swaplog,7,data/crawl/squid/patch_2018.diff
https://github.com/squid-cache/squid/commit/9a70f206ec7341b69fc7befaafec6b1b08ff2e8c,17 Apr 1996,stupid swaplog problems... grr.,26,data/crawl/squid/patch_2019.diff
https://github.com/squid-cache/squid/commit/c5c666abb1fa898db13dd58dbd73e8d3a0e04a6d,16 Apr 1996,"fix Makefile clean target
remove references to Harvest",70,data/crawl/squid/patch_2020.diff
https://github.com/squid-cache/squid/commit/b8de7ebe12756b6d6a09a0b034952c1e11325c95,16 Apr 1996,"change ""cached"" to ""squid"" in lots of places",640,data/crawl/squid/patch_2021.diff
https://github.com/squid-cache/squid/commit/3facc31ebf9e1f3c9f52fd19bd5138bd383d9fdf,16 Apr 1996,"-fixed SSL/CONNECT
-Added background processing for rebuilding store",453,data/crawl/squid/patch_2022.diff
https://github.com/squid-cache/squid/commit/2aca84337bac3f949b07dfc42913b0b63cd87231,14 Apr 1996,"make storeAppend() void
deprecate has_mem_obj()
#ifdef out storeGrep()",51,data/crawl/squid/patch_2023.diff
https://github.com/squid-cache/squid/commit/540830c468c9048f5cc977ba2c38317670269826,12 Apr 1996,gindent,217,data/crawl/squid/patch_2024.diff
https://github.com/squid-cache/squid/commit/92a6f4b1230063fb89e121bf48a30ccc6a8beb67,12 Apr 1996,finish up ACL implementation,479,data/crawl/squid/patch_2025.diff
https://github.com/squid-cache/squid/commit/8213067d159ba46b0557380d483ce181762bc1df,11 Apr 1996,apparently mostly working ACLs,384,data/crawl/squid/patch_2026.diff
https://github.com/squid-cache/squid/commit/1969665d23d7a7a2879cc57abf28ba4901509505,11 Apr 1996,progress,136,data/crawl/squid/patch_2027.diff
https://github.com/squid-cache/squid/commit/0ffd22bc7fc25406b3af97a8a1f436245185b6b6,11 Apr 1996,make SIGHUP reconfigure the cache; SIGUSR1 rotates logs,331,data/crawl/squid/patch_2028.diff
https://github.com/squid-cache/squid/commit/7d49daab931553127f53ae4cd426c57745bf3e55,10 Apr 1996,building announce directly into cached,509,data/crawl/squid/patch_2029.diff
https://github.com/squid-cache/squid/commit/5f3f8d0e6a383ff1bd679be2a91f7ccad504f9d8,09 Apr 1996,beginning to arrange for HUP to reread config file,191,data/crawl/squid/patch_2030.diff
https://github.com/squid-cache/squid/commit/4d64d74a46410e9488af2bbfaa67304762c282e6,08 Apr 1996,"made main.c more modular
Added clean shutdown to comm_select.  on SIGTERM close incoming sockets
and dnsserver pipes.  When no sockets left to select on, return with
COMM_SHUTDOWN.",396,data/crawl/squid/patch_2031.diff
https://github.com/squid-cache/squid/commit/07622ccd114b553aa17e5ebb0db3eaeac82ee8a3,05 Apr 1996,fix storeSetPublicKey/storeSetPrivateKey logic problems,52,data/crawl/squid/patch_2032.diff
https://github.com/squid-cache/squid/commit/ffe4a36726c26c1852174fdbf8cb776671515bef,05 Apr 1996,"Added storeEntryValidLength() based on Henrik's version.
If content-length and hdr_size are given, the object is
ejected if the sizes don't match the actual object size.",42,data/crawl/squid/patch_2033.diff
https://github.com/squid-cache/squid/commit/cff333e843b5ee8641f9e423f5595e2475110e24,05 Apr 1996,"Added __FILE__,__LINE__ debugging to {get,put}_free_[48]k_page().
Found 'page leak' in http.c.  was calling safe_free on a 8k page.",192,data/crawl/squid/patch_2034.diff
https://github.com/squid-cache/squid/commit/2c47cf746f00fef15b9a964242f2c46a0c0083d0,04 Apr 1996,avoid using stderr; use debug() or debug_log instead,49,data/crawl/squid/patch_2035.diff
https://github.com/squid-cache/squid/commit/da00e8509f4c3bf25e093b0f8901860f01794716,04 Apr 1996,use debug() rather than stderr,11,data/crawl/squid/patch_2036.diff
https://github.com/squid-cache/squid/commit/c8bd12b18fe14c595b1b45354df85fd5a47e1f93,04 Apr 1996,"From:    ""Daniel O'Callaghan"" <danny@miriworld.its.unimelb.EDU.AU>

This patch replaces  ip_acl_match(), ip_access_check() and addToIPACL()
with versions which accept the following formats:

proxy_allow 1.2.3.0     (old cached format for 1.2.3.0/24)
proxy_allow 1.2.0.0     (old cached format for 1.2.0.0/16)

proxy_allow 1.2.3.4     (equivalent to 1.2.3.4/32)
proxy_allow 1.2.3.0/24
proxy_allow 1.2.3.0/255.255.255.0

proxy_allow all         (equivalent to 0.0.0.0/0.0.0.0)",132,data/crawl/squid/patch_2037.diff
https://github.com/squid-cache/squid/commit/6eb42caec6c6db2142568d6dd4426e89e6c16f8f,04 Apr 1996,major code cleanup/unification/rewrite,624,data/crawl/squid/patch_2038.diff
https://github.com/squid-cache/squid/commit/227fbb743cd8b4d75aa0772d1845cc3740c82b5d,02 Apr 1996,"Significant change to storage manager.  Now we don't add the object
to the hash table when it is created.  Instead it must be explicitly
added if the object is public.  storeAdd() has been split into
two functions: storeCreateEntry() and storeAddEntry().  The first is
called where storeAdd() was called.  The second is called when the
object is known to be publicly sharable.  For HTTP this means
after the reply header is parsed.  For other objects it storeAddEntry()
gets called immediately, as there is no header parsing.",369,data/crawl/squid/patch_2039.diff
https://github.com/squid-cache/squid/commit/b37a37f93ce296978332022757d6f3588c2f7dc9,02 Apr 1996,"make a large local array static
call storeCreateHashTable in storeInit instead of various other places
always expect 5 args in the swap logfile
use new getCurrentTime()
fix some deubg messages",44,data/crawl/squid/patch_2040.diff
https://github.com/squid-cache/squid/commit/abafbe267098fcef97c9987f16e311112b3e4e9c,01 Apr 1996,compiler,8,data/crawl/squid/patch_2041.diff
https://github.com/squid-cache/squid/commit/9174e20449999488894da1e1026840be04061546,01 Apr 1996,"1. Added storeExpire(StoreEntry *) that marks a object as expired
   i.e. it will NOT be provided to new clients
2. don't cache objects with private keys. This is actually a workaround
   a small problem: If the server closes the connection before the MIME
   headers are send, the object is cached with a private key. This solves
   that problem, and adds some error toleranse in the code.
   Probably it should be extended to not cache expired objects as well.
3. Expire objects that have a pending delete
   This is to prevent new clients from using a object that should be
   deleted as soon as possible.
4. Minor changes in debug messages (name corrections and level adjustment)
/Henrik",30,data/crawl/squid/patch_2042.diff
https://github.com/squid-cache/squid/commit/97f61b087c075bd32202d60fcf620c8757470788,01 Apr 1996,"A minor cleanup in _db_print in __STRICT_ANSI__ mode. Use normal argument
passing for all required arguments, and stdargs for all extra args.
/Henrik",10,data/crawl/squid/patch_2043.diff
https://github.com/squid-cache/squid/commit/6350239ff4cf4bc87d0af6ea9c2e1c33a95a8914,30 Mar 1996,"Major rewrite of logging.  Now log accesses when the client data
structure (icpStateData) gets destroyed.  TCP_DONE is gone and
TCP_MISS is now logged when the request completes and has a valid
size.  Made some adjustments to get error logging working also.
Had to add 'abort_code' element to the StoreEntry Mem_Obj structure.",52,data/crawl/squid/patch_2044.diff
https://github.com/squid-cache/squid/commit/019dd986200f03968bfff31a30eadde523bcb49c,30 Mar 1996,assign various debug sections,577,data/crawl/squid/patch_2045.diff
https://github.com/squid-cache/squid/commit/c943f3313a892d71be08ad823a58b1969e56a817,30 Mar 1996,"assign store.c to debugging section 20
fixed storeRebuildFromDisk bug introduced when switched from fdopen(, ""a"")
to fdopen(, ""w"").  Now storeInit() makes a little more sense.",647,data/crawl/squid/patch_2046.diff
https://github.com/squid-cache/squid/commit/f5558c95a8b97794c224a6b03b0d66127891210d,29 Mar 1996,Implemented prototype IMS-GET and change-key-until-headers-read,282,data/crawl/squid/patch_2047.diff
https://github.com/squid-cache/squid/commit/3f43b19b100d88a3ffa0871fd89aa7597289e7f1,28 Mar 1996,rearrange order of functions,86,data/crawl/squid/patch_2048.diff
https://github.com/squid-cache/squid/commit/f0f81709f3cd303a097c7e0e25b9585b603b8da6,28 Mar 1996,rearrange order of functions,50,data/crawl/squid/patch_2049.diff
https://github.com/squid-cache/squid/commit/16128bc705ee77a64ad5aa3fa9e0dd288cf0e7d3,28 Mar 1996,remove all code dealing with binary mode,80,data/crawl/squid/patch_2050.diff
https://github.com/squid-cache/squid/commit/77ffc99fd6b2113ca1da7087c41ecabc89ef5d28,28 Mar 1996,gindent,23,data/crawl/squid/patch_2051.diff
https://github.com/squid-cache/squid/commit/ccff960108dab2ce4bff860f2dc34def2f8ca1ae,28 Mar 1996,make pid_filename a config option and create writePidFile() in tools.c,226,data/crawl/squid/patch_2052.diff
https://github.com/squid-cache/squid/commit/12b9e9b1f34032b49437866c39c8f9d2e4f4b045,28 Mar 1996,"new debug section,level stuff",1600,data/crawl/squid/patch_2053.diff
https://github.com/squid-cache/squid/commit/0e08ce4bd4202a410239abeaf52b36ce534ecdfe,27 Mar 1996,misc cleanup related to #include shuffle,46,data/crawl/squid/patch_2054.diff
https://github.com/squid-cache/squid/commit/44a47c6e26f4aff5bc67c04dbddac360027a9e1d,27 Mar 1996,MAJOR #include REWRITE; ack!,871,data/crawl/squid/patch_2055.diff
