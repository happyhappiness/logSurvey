@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.146 1997/11/12 21:04:31 wessels Exp $
+ * $Id: client_side.cc,v 1.147 1997/11/12 23:47:37 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -170,8 +170,7 @@ clientAccessCheckDone(int answer, void *data)
     http->acl_checklist = NULL;
     if (answer == ACCESS_ALLOWED) {
 	urlCanonical(http->request, http->url);
-	if (http->redirect_state != REDIRECT_NONE)
-	    fatal_dump("clientAccessCheckDone: wrong redirect_state");
+	assert(http->redirect_state == REDIRECT_NONE);
 	http->redirect_state = REDIRECT_PENDING;
 	redirectStart(http, clientRedirectDone, http);
     } else if (answer == ACCESS_REQ_PROXY_AUTH) {
@@ -215,8 +214,7 @@ clientRedirectDone(void *data, char *result)
     request_t *old_request = http->request;
     debug(33, 5) ("clientRedirectDone: '%s' result=%s\n", http->url,
 	result ? result : "NULL");
-    if (http->redirect_state != REDIRECT_PENDING)
-	fatal_dump("clientRedirectDone: wrong redirect_state");
+    assert(http->redirect_state == REDIRECT_PENDING);
     http->redirect_state = REDIRECT_DONE;
     if (result)
 	new_request = urlParse(old_request->method, result);
@@ -1,5 +1,5 @@
 /*
- * $Id: filemap.cc,v 1.20 1997/10/28 21:55:12 wessels Exp $
+ * $Id: filemap.cc,v 1.21 1997/11/12 23:47:38 wessels Exp $
  *
  * DEBUG: section 8     Swap File Bitmap
  * AUTHOR: Harvest Derived
@@ -191,7 +191,7 @@ file_map_allocate(fileMap * fm, int suggestion)
 	    return file_map_bit_set(fm, suggestion);
 	}
     }
-    fatal_dump("file_map_allocate: Exceeded filemap limit");
+    fatal("file_map_allocate: Exceeded filemap limit");
     return 0;			/* NOTREACHED */
 }
 
@@ -213,8 +213,7 @@ main(argc, argv)
 
     for (i = 0; i < TEST_SIZE; ++i) {
 	file_map_bit_set(i);
-	if (!file_map_bit_test(i))
-	    fatal_dump(NULL);
+	assert(file_map_bit_test(i));
 	file_map_bit_reset(i);
     }
 }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: icmp.cc,v 1.48 1997/11/05 19:52:22 wessels Exp $
+ * $Id: icmp.cc,v 1.49 1997/11/12 23:47:38 wessels Exp $
  *
  * DEBUG: section 37    ICMP Routines
  * AUTHOR: Duane Wessels
@@ -252,10 +252,10 @@ icmpOpen(void)
     }
     getsockname(icmp_sock, (struct sockaddr *) &S, &namelen);
     if (comm_connect_addr(child_sock, &S) != COMM_OK)
-	fatal_dump(xstrerror());
+	fatal(xstrerror());
     getsockname(child_sock, (struct sockaddr *) &S, &namelen);
     if (comm_connect_addr(icmp_sock, &S) != COMM_OK)
-	fatal_dump(xstrerror());
+	fatal(xstrerror());
     /* flush or else we get dup data if unbuffered_logs is set */
     logsFlush();
     if ((pid = fork()) < 0) {
@@ -1,5 +1,5 @@
 /*
- * $Id: neighbors.cc,v 1.167 1997/11/12 00:08:58 wessels Exp $
+ * $Id: neighbors.cc,v 1.168 1997/11/12 23:47:39 wessels Exp $
  *
  * DEBUG: section 15    Neighbor Routines
  * AUTHOR: Harvest Derived
@@ -188,8 +188,7 @@ peerAllowedToUse(const peer * p, request_t * request)
     int do_ping = 1;
     const struct _acl_list *a = NULL;
     aclCheck_t checklist;
-    if (request == NULL)
-	fatal_dump("peerAllowedToUse: NULL request");
+    assert(request != NULL);
     if (EBIT_TEST(request->flags, REQ_NOCACHE))
 	if (neighborType(p, request) == PEER_SIBLING)
 	    return 0;
@@ -414,12 +413,8 @@ neighborsUdpPing(request_t * request,
 
     if (Config.peers == NULL)
 	return 0;
-    if (theOutIcpConnection < 0) {
-	debug(15, 0) ("neighborsUdpPing: There is no ICP socket!\n");
-	debug(15, 0) ("Cannot query neighbors for '%s'.\n", url);
-	debug(15, 0) ("Check 'icp_port' in your config file\n");
-	fatal_dump(NULL);
-    }
+    if (theOutIcpConnection < 0)
+	fatal("neighborsUdpPing: There is no ICP socket!");
     assert(entry->swap_status == SWAPOUT_NONE);
     mem->start_ping = current_time;
     mem->icp_reply_callback = callback;
@@ -900,8 +895,7 @@ peerCountMcastPeersStart(void *data)
     MemObject *mem;
     icp_common_t *query;
     LOCAL_ARRAY(char, url, MAX_URL);
-    if (p->type != PEER_MULTICAST)
-	fatal_dump("peerCountMcastPeersStart: non-multicast peer");
+    assert(p->type == PEER_MULTICAST);
     p->mcast.flags &= ~PEER_COUNT_EVENT_PENDING;
     snprintf(url, MAX_URL, "http://%s/", inet_ntoa(p->in_addr.sin_addr));
     fake = storeCreateEntry(url, url, 0, METHOD_GET);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ssl.cc,v 1.70 1997/11/12 00:09:05 wessels Exp $
+ * $Id: ssl.cc,v 1.71 1997/11/12 23:47:40 wessels Exp $
  *
  * DEBUG: section 26    Secure Sockets Layer Proxy
  * AUTHOR: Duane Wessels
@@ -99,8 +99,7 @@ sslStateFree(int fd, void *data)
     debug(26, 3) ("sslStateFree: FD %d, sslState=%p\n", fd, sslState);
     if (sslState == NULL)
 	return;
-    if (fd != sslState->server.fd)
-	fatal_dump("sslStateFree: FD mismatch!\n");
+    assert(fd == sslState->server.fd);
     safe_free(sslState->server.buf);
     safe_free(sslState->client.buf);
     xfree(sslState->url);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stat.cc,v 1.169 1997/11/12 00:09:06 wessels Exp $
+ * $Id: stat.cc,v 1.170 1997/11/12 23:47:40 wessels Exp $
  *
  * DEBUG: section 18    Cache Manager Statistics
  * AUTHOR: Harvest Derived
@@ -889,7 +889,7 @@ pconnHistCount(int what, int i)
     else if (what == 1)
 	server_pconn_hist[i]++;
     else
-	fatal_dump("pconnHistCount: bad 'what' arg");
+	assert(0);
 }
 
 void
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stmem.cc,v 1.52 1997/10/25 17:23:00 wessels Exp $
+ * $Id: stmem.cc,v 1.53 1997/11/12 23:47:41 wessels Exp $
  *
  * DEBUG: section 19    Memory Primitives
  * AUTHOR: Harvest Derived
@@ -272,8 +272,7 @@ get_free_thing(stmem_stats * thing)
     void *p = NULL;
     if (!empty_stack(&thing->free_page_stack)) {
 	p = pop(&thing->free_page_stack);
-	if (p == NULL)
-	    fatal_dump("get_free_thing: NULL pointer?");
+	assert(p != NULL);
     } else {
 	p = xmalloc(thing->page_size);
 	thing->total_pages_allocated++;
@@ -310,8 +309,7 @@ get_free_8k_page(void)
 static void
 put_free_thing(stmem_stats * thing, void *p)
 {
-    if (p == NULL)
-	fatal_dump("Somebody is putting a NULL pointer!");
+    assert(p != NULL);
     thing->n_pages_in_use--;
     if (thing->total_pages_allocated > thing->max_pages) {
 	xfree(p);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: tunnel.cc,v 1.70 1997/11/12 00:09:05 wessels Exp $
+ * $Id: tunnel.cc,v 1.71 1997/11/12 23:47:40 wessels Exp $
  *
  * DEBUG: section 26    Secure Sockets Layer Proxy
  * AUTHOR: Duane Wessels
@@ -99,8 +99,7 @@ sslStateFree(int fd, void *data)
     debug(26, 3) ("sslStateFree: FD %d, sslState=%p\n", fd, sslState);
     if (sslState == NULL)
 	return;
-    if (fd != sslState->server.fd)
-	fatal_dump("sslStateFree: FD mismatch!\n");
+    assert(fd == sslState->server.fd);
     safe_free(sslState->server.buf);
     safe_free(sslState->client.buf);
     xfree(sslState->url);