@@ -1,7 +1,7 @@
 #
 #  Makefile for the Squid Object Cache server
 #
-#  $Id: Makefile.in,v 1.53 1996/11/05 20:43:50 wessels Exp $
+#  $Id: Makefile.in,v 1.54 1996/11/08 00:02:15 wessels Exp $
 #
 #  Uncomment and customize the following to suit your needs:
 #
@@ -12,8 +12,9 @@ AUTH_OPT	= # -DUSE_PROXY_AUTH=1
 LOG_HDRS_OPT	= # -DLOG_FULL_HEADERS=1
 ICMP_OPT	= # -DUSE_ICMP=1
 DELAY_HACK      = # -DDELAY_HACK=1
-DEFINES		= $(HOST_OPT) $(AIO_OPT) $(AUTH_OPT) $(LOG_HDRS_OPT) $(ICMP_OPT) \
-		  $(DELAY_HACK)
+USERAGENT_OPT	= # -DUSE_USERAGENT_LOG=1
+DEFINES		= $(HOST_OPT) $(AIO_OPT) $(AUTH_OPT) $(LOG_HDRS_OPT) \
+		  $(ICMP_OPT) $(DELAY_HACK) $(USERAGENT_OPT)
 
 prefix		= @prefix@
 exec_prefix	= @exec_prefix@
@@ -104,6 +105,7 @@ OBJS	 	= \
 		timestamps.o \
 		url.o \
 		wais.o \
+		useragent.o \
 		$(XTRA_OBJS)
 
 DEFAULTS        = \
@@ -1,5 +1,5 @@
 /*
- * $Id: cache_cf.cc,v 1.133 1996/11/06 23:14:22 wessels Exp $
+ * $Id: cache_cf.cc,v 1.134 1996/11/08 00:02:16 wessels Exp $
  *
  * DEBUG: section 3     Configuration File Parsing
  * AUTHOR: Harvest Derived
@@ -136,6 +136,7 @@ struct SquidConfig Config;
 
 #define DefaultCacheLogFile	DEFAULT_CACHE_LOG
 #define DefaultAccessLogFile	DEFAULT_ACCESS_LOG
+#define DefaultUseragentLogFile	(char *)NULL    /* default NONE */
 #define DefaultStoreLogFile	DEFAULT_STORE_LOG
 #define DefaultSwapLogFile	(char *)NULL	/* default swappath(0) */
 #if USE_PROXY_AUTH
@@ -205,6 +206,7 @@ const char *cfg_filename = NULL;	/* just the last part */
 char ForwardedBy[256] = "";
 
 const char *const w_space = " \t\n";
+const char *const list_sep = ", \t\n";
 char config_input_line[BUFSIZ];
 int config_lineno = 0;
 
@@ -234,6 +236,7 @@ static void parseFtpUserLine _PARAMS((void));
 static void parseWordlist _PARAMS((wordlist **));
 static void parseHostAclLine _PARAMS((void));
 static void parseHostDomainLine _PARAMS((void));
+static void parseHostDomainTypeLine _PARAMS((void));
 static void parseHttpPortLine _PARAMS((void));
 static void parseHttpdAccelLine _PARAMS((void));
 static void parseIPLine _PARAMS((ip_acl ** list));
@@ -496,41 +499,34 @@ parseCacheHostLine(void)
     }
     if (weight < 1)
 	weight = 1;
-    neighbors_cf_add(hostname, type, http_port, icp_port, options,
+    neighborAdd(hostname, type, http_port, icp_port, options,
 	weight, mcast_ttl);
 }
 
-static neighbor_t
-parseNeighborType(const char *token)
+
+static void
+parseHostDomainLine(void)
 {
-    if (!strcasecmp(token, "parent"))
-	return EDGE_PARENT;
-    if (!strcasecmp(token, "neighbor"))
-	return EDGE_SIBLING;
-    if (!strcasecmp(token, "neighbour"))
-	return EDGE_SIBLING;
-    if (!strcasecmp(token, "sibling"))
-	return EDGE_SIBLING;
-    return EDGE_NONE;
+    char *host = NULL;
+    char *domain = NULL;
+    if (!(host = strtok(NULL, w_space)))
+	self_destruct();
+    while ((domain = strtok(NULL, list_sep)))
+	neighborAddDomainPing(host, domain);
 }
 
-
 static void
-parseHostDomainLine(void)
+parseHostDomainTypeLine(void)
 {
     char *host = NULL;
+    char *type = NULL;
     char *domain = NULL;
-    neighbor_t type = EDGE_NONE;
-    neighbor_t t;
     if (!(host = strtok(NULL, w_space)))
 	self_destruct();
-    while ((domain = strtok(NULL, ", \t\n"))) {
-	if ((t = parseNeighborType(domain)) != EDGE_NONE) {
-	    type = t;
-	    continue;
-	}
-	neighbors_cf_domain(host, domain, type);
-    }
+    if (!(type = strtok(NULL, w_space)))
+	self_destruct();
+    while ((domain = strtok(NULL, list_sep)))
+	neighborAddDomainType(host, domain, type);
 }
 
 static void
@@ -540,8 +536,8 @@ parseHostAclLine(void)
     char *aclname = NULL;
     if (!(host = strtok(NULL, w_space)))
 	self_destruct();
-    while ((aclname = strtok(NULL, ", \t\n")))
-	neighbors_cf_acl(host, aclname);
+    while ((aclname = strtok(NULL, list_sep)))
+	neighborAddAcl(host, aclname);
 }
 
 static void
@@ -1070,6 +1066,8 @@ parseConfigFile(const char *file_name)
 	    parseHostDomainLine();
 	else if (!strcmp(token, "cache_host_acl"))
 	    parseHostAclLine();
+	else if (!strcmp(token, "neighbor_type_domain"))
+	    parseHostDomainTypeLine();
 
 	else if (!strcmp(token, "neighbor_timeout"))
 	    parseIntegerValue(&Config.neighborTimeout);
@@ -1091,6 +1089,11 @@ parseConfigFile(const char *file_name)
 	else if (!strcmp(token, "cache_swap_log"))
 	    parsePathname(&Config.Log.swap);
 
+#if USE_USERAGENT_LOG
+	else if (!strcmp(token, "useragent_log"))
+	    parsePathname(&Config.Log.swap);
+#endif
+
 	else if (!strcmp(token, "logfile_rotate"))
 	    parseIntegerValue(&Config.Log.rotateNumber);
 
@@ -1511,6 +1514,9 @@ configSetFactoryDefaults(void)
     Config.Log.access = safe_xstrdup(DefaultAccessLogFile);
     Config.Log.store = safe_xstrdup(DefaultStoreLogFile);
     Config.Log.swap = safe_xstrdup(DefaultSwapLogFile);
+#if USE_USERAGENT_LOG
+    Config.Log.useragent = safe_xstrdup(DefaultUseragentLogFile);
+#endif
     Config.Log.rotateNumber = DefaultLogRotateNumber;
     Config.Program.ftpget = safe_xstrdup(DefaultFtpgetProgram);
     Config.Program.ftpget_opts = safe_xstrdup(DefaultFtpgetOptions);
@@ -1,5 +1,5 @@
 /*
- * $Id: main.cc,v 1.107 1996/11/06 23:14:45 wessels Exp $
+ * $Id: main.cc,v 1.108 1996/11/08 00:02:19 wessels Exp $
  *
  * DEBUG: section 1     Startup and Main Loop
  * AUTHOR: Harvest Derived
@@ -498,7 +498,7 @@ mainInitialize(void)
     fqdncache_init();
     dnsOpenServers();
     redirectOpenServers();
-    neighbors_init();
+    useragentOpenLog();
     (void) ftpInitialize();
 
 #if MALLOC_DBG
@@ -642,6 +642,7 @@ main(int argc, char **argv)
     /* preinit for debug module */
     debug_log = stderr;
     hash_init(0);
+    neighbors_init();
 
     mainInitialize();
 
@@ -654,6 +655,7 @@ main(int argc, char **argv)
 	    storeWriteCleanLog();
 	    storeRotateLog();	/* store.log */
 	    stat_rotate_log();	/* access.log */
+	    useragentRotateLog();	/* useragent.log */
 	    (void) ftpInitialize();
 	    icmpOpen();
 	    rotate_pending = 0;
@@ -1,5 +1,5 @@
 /*
- * $Id: neighbors.cc,v 1.81 1996/11/06 23:14:47 wessels Exp $
+ * $Id: neighbors.cc,v 1.82 1996/11/08 00:02:20 wessels Exp $
  *
  * DEBUG: section 15    Neighbor Routines
  * AUTHOR: Harvest Derived
@@ -110,9 +110,9 @@ static void neighborRemove _PARAMS((edge *));
 static edge *whichEdge _PARAMS((const struct sockaddr_in * from));
 static void neighborAlive _PARAMS((edge *, const MemObject *, const icp_common_t *));
 static void neighborCountIgnored _PARAMS((edge * e, icp_opcode op_unused));
+static neighbor_t parseNeighborType _PARAMS((const char *s));
 
 static neighbors *friends = NULL;
-static struct neighbor_cf *Neighbor_cf = NULL;
 static icp_common_t echo_hdr;
 static u_short echo_port;
 
@@ -167,30 +167,30 @@ hierarchyNote(request_t * request, hier_code code, int timeout, const char *cach
 static neighbor_t
 neighborType(const edge * e, const request_t * request)
 {
-    const dom_list *d = NULL;
-    for (d = e->domains; d; d = d->next) {
+    const struct _domain_type *d = NULL;
+    for (d = e->typelist; d; d = d->next) {
 	if (matchDomainName(d->domain, request->host))
-	    if (d->neighbor_type != EDGE_NONE)
-		return d->neighbor_type;
+	    if (d->type != EDGE_NONE)
+		return d->type;
     }
     return e->type;
 }
 
 static int
 edgeWouldBePinged(const edge * e, request_t * request)
 {
-    const dom_list *d = NULL;
+    const struct _domain_ping *d = NULL;
     int do_ping = 1;
     const struct _acl_list *a = NULL;
     aclCheck_t checklist;
 
     if (BIT_TEST(request->flags, REQ_NOCACHE))
 	if (neighborType(e, request) == EDGE_SIBLING)
 	    return 0;
-    if (e->domains == NULL && e->acls == NULL)
+    if (e->pinglist == NULL && e->acls == NULL)
 	return do_ping;
     do_ping = 0;
-    for (d = e->domains; d; d = d->next) {
+    for (d = e->pinglist; d; d = d->next) {
 	if (matchDomainName(d->domain, request->host))
 	    return d->do_ping;
 	do_ping = !d->do_ping;
@@ -719,70 +719,99 @@ neighborsUdpAck(int fd, const char *url, icp_common_t * header, const struct soc
 }
 
 void
-neighbors_cf_add(const char *host, const char *type, int http_port, int icp_port, int options, int weight, int mcast_ttl)
+neighborAdd(const char *host,
+	const char *type,
+	int http_port,
+	int icp_port,
+	int options,
+	int weight,
+	int mcast_ttl)
 {
-    struct neighbor_cf *t, *u;
-
-    t = xcalloc(1, sizeof(struct neighbor_cf));
-    t->host = xstrdup(host);
-    t->type = xstrdup(type);
-    t->http_port = http_port;
-    t->icp_port = icp_port;
-    t->options = options;
-    t->weight = weight;
-    t->mcast_ttl = mcast_ttl;
-    t->next = (struct neighbor_cf *) NULL;
-
-    if (Neighbor_cf == (struct neighbor_cf *) NULL) {
-	Neighbor_cf = t;
-    } else {
-	for (u = Neighbor_cf; u->next; u = u->next);
-	u->next = t;
-    }
+	edge *e = NULL;
+        const char *me = getMyHostname();
+	if (!strcmp(host, me) && http_port == Config.Port.http) {
+	    debug(15, 0, "neighbors_init: skipping cache_host %s %s/%d/%d\n",
+		type, host, http_port, icp_port);
+	    return;
+	}
+	e = xcalloc(1, sizeof(edge));
+	e->http_port = http_port;
+	e->icp_port = icp_port;
+	e->mcast_ttl = mcast_ttl;
+	e->options = options;
+	e->weight = weight;
+	e->host = xstrdup(host);
+	e->pinglist = NULL;
+	e->typelist = NULL;
+	e->acls = NULL;
+	e->neighbor_up = 0;
+	e->icp_version = ICP_VERSION_CURRENT;
+	e->type = parseNeighborType(type);
+	if (e->type == EDGE_PARENT)
+	    friends->n_parent++;
+	else if (e->type == EDGE_SIBLING)
+	    friends->n_sibling++;
+
+	/* Append edge */
+	if (!friends->edges_head)
+	    friends->edges_head = e;
+	if (friends->edges_tail)
+	    friends->edges_tail->next = e;
+	friends->edges_tail = e;
+	friends->n++;
 }
 
 void
-neighbors_cf_domain(const char *host, const char *domain, neighbor_t type)
+neighborAddDomainPing(const char *host, const char *domain)
 {
-    struct neighbor_cf *t = NULL;
-    dom_list *l = NULL;
-    dom_list **L = NULL;
-
-    for (t = Neighbor_cf; t; t = t->next) {
-	if (strcmp(t->host, host) == 0)
-	    break;
-    }
-    if (t == NULL) {
+    struct _domain_ping *l = NULL;
+    struct _domain_ping **L = NULL;
+    edge *e;
+    if ((e = neighborFindByName(host)) == NULL) {
 	debug(15, 0, "%s, line %d: No cache_host '%s'\n",
 	    cfg_filename, config_lineno, host);
 	return;
     }
-    l = xmalloc(sizeof(dom_list));
+    l = xmalloc(sizeof(struct _domain_ping));
     l->do_ping = 1;
     if (*domain == '!') {	/* check for !.edu */
 	l->do_ping = 0;
 	domain++;
     }
     l->domain = xstrdup(domain);
-    l->neighbor_type = type;
     l->next = NULL;
-    for (L = &(t->domains); *L; L = &((*L)->next));
+    for (L = &(e->pinglist); *L; L = &((*L)->next));
+    *L = l;
+}
+
+void
+neighborAddDomainType(const char *host, const char *domain, const char *type)
+{
+    struct _domain_type *l = NULL;
+    struct _domain_type **L = NULL;
+    edge *e;
+    if ((e = neighborFindByName(host)) == NULL) {
+	debug(15, 0, "%s, line %d: No cache_host '%s'\n",
+	    cfg_filename, config_lineno, host);
+	return;
+    }
+    l = xmalloc(sizeof(struct _domain_type));
+    l->type = parseNeighborType(type);
+    l->domain = xstrdup(domain);
+    l->next = NULL;
+    for (L = &(e->typelist); *L; L = &((*L)->next));
     *L = l;
 }
 
 void
-neighbors_cf_acl(const char *host, const char *aclname)
+neighborAddAcl(const char *host, const char *aclname)
 {
-    struct neighbor_cf *t = NULL;
+    edge *e;
     struct _acl_list *L = NULL;
     struct _acl_list **Tail = NULL;
     struct _acl *a = NULL;
 
-    for (t = Neighbor_cf; t; t = t->next) {
-	if (strcmp(t->host, host) == 0)
-	    break;
-    }
-    if (t == NULL) {
+    if ((e = neighborFindByName(host)) == NULL) {
 	debug(15, 0, "%s, line %d: No cache_host '%s'\n",
 	    cfg_filename, config_lineno, host);
 	return;
@@ -793,81 +822,33 @@ neighbors_cf_acl(const char *host, const char *aclname)
 	L->op = 0;
 	aclname++;
     }
-    debug(15, 3, "neighbors_cf_acl: looking for ACL name '%s'\n", aclname);
+    debug(15, 3, "neighborAddAcl: looking for ACL name '%s'\n", aclname);
     a = aclFindByName(aclname);
     if (a == NULL) {
 	debug(15, 0, "%s line %d: %s\n",
 	    cfg_filename, config_lineno, config_input_line);
-	debug(15, 0, "neighbors_cf_acl: ACL name '%s' not found.\n", aclname);
+	debug(15, 0, "neighborAddAcl: ACL name '%s' not found.\n", aclname);
 	xfree(L);
 	return;
     }
     if (a->type == ACL_SRC_IP) {
 	debug(15, 0, "%s line %d: %s\n",
 	    cfg_filename, config_lineno, config_input_line);
-	debug(15, 0, "neighbors_cf_acl: 'src' ALC's not supported for 'cache_host_acl'\n");
+	debug(15, 0, "neighborAddAcl: 'src' ALC's not supported for 'cache_host_acl'\n");
 	xfree(L);
 	return;
     }
     L->acl = a;
-    for (Tail = &(t->acls); *Tail; Tail = &((*Tail)->next));
+    for (Tail = &(e->acls); *Tail; Tail = &((*Tail)->next));
     *Tail = L;
 }
 
 void
 neighbors_init(void)
 {
-    struct neighbor_cf *t = NULL;
-    struct neighbor_cf *next = NULL;
-    const char *me = getMyHostname();
-    edge *e = NULL;
-
     debug(15, 1, "neighbors_init: Initializing Neighbors...\n");
-
     if (friends == NULL)
 	friends = xcalloc(1, sizeof(neighbors));
-
-    for (t = Neighbor_cf; t; t = next) {
-	next = t->next;
-	if (!strcmp(t->host, me) && t->http_port == Config.Port.http) {
-	    debug(15, 0, "neighbors_init: skipping cache_host %s %s %d %d\n",
-		t->type, t->host, t->http_port, t->icp_port);
-	    continue;
-	}
-	debug(15, 1, "Adding a %s: %s/%d/%d\n",
-	    t->type, t->host, t->http_port, t->icp_port);
-
-	e = xcalloc(1, sizeof(edge));
-	e->http_port = t->http_port;
-	e->icp_port = t->icp_port;
-	e->mcast_ttl = t->mcast_ttl;
-	e->options = t->options;
-	e->weight = t->weight;
-	e->host = t->host;
-	e->domains = t->domains;
-	e->acls = t->acls;
-	e->neighbor_up = 1;
-	e->icp_version = ICP_VERSION_CURRENT;
-	if (!strcmp(t->type, "parent")) {
-	    friends->n_parent++;
-	    e->type = EDGE_PARENT;
-	} else {
-	    friends->n_neighbor++;
-	    e->type = EDGE_SIBLING;
-	}
-	safe_free(t->type);
-
-	/* Append edge */
-	if (!friends->edges_head)
-	    friends->edges_head = e;
-	if (friends->edges_tail)
-	    friends->edges_tail->next = e;
-	friends->edges_tail = e;
-	friends->n++;
-
-	safe_free(t);
-    }
-    Neighbor_cf = NULL;
     any_addr.s_addr = inet_addr("0.0.0.0");
 }
 
@@ -881,3 +862,18 @@ neighborFindByName(const char *name)
     }
     return e;
 }
+
+static neighbor_t
+parseNeighborType(const char *s)
+{
+	if (!strcasecmp(s, "parent"))
+		return EDGE_PARENT;
+	if (!strcasecmp(s, "neighbor"))
+		return EDGE_SIBLING;
+	if (!strcasecmp(s, "neighbour"))
+		return EDGE_SIBLING;
+	if (!strcasecmp(s, "sibling"))
+		return EDGE_SIBLING;
+	debug(15,0,"WARNING: Unknown neighbor type: %s\n", s);
+	return EDGE_SIBLING;
+}
@@ -1,6 +1,6 @@
 
 /*
- * $Id: squid.h,v 1.71 1996/11/06 23:14:55 wessels Exp $
+ * $Id: squid.h,v 1.72 1996/11/08 00:02:22 wessels Exp $
  *
  * AUTHOR: Duane Wessels
  *
@@ -261,6 +261,7 @@ typedef int (*QS) (const void *, const void *);
 #include "async_io.h"
 #include "redirect.h"
 #include "client_side.h"
+#include "useragent.h"
 #include "icmp.h"
 #include "net_db.h"
 #include "client_db.h"
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stat.cc,v 1.100 1996/11/06 23:14:57 wessels Exp $
+ * $Id: stat.cc,v 1.101 1996/11/08 00:02:23 wessels Exp $
  *
  * DEBUG: section 18    Cache Manager Statistics
  * AUTHOR: Harvest Derived
@@ -552,7 +552,7 @@ static void
 server_list(const cacheinfo * obj, StoreEntry * sentry)
 {
     edge *e = NULL;
-    dom_list *d = NULL;
+    struct _domain_ping *d = NULL;
     icp_opcode op;
 
     storeAppendPrintf(sentry, open_bracket);
@@ -596,7 +596,7 @@ server_list(const cacheinfo * obj, StoreEntry * sentry)
 		mkhttpdlogtime(&(e->last_fail_time)));
 	}
 	storeAppendPrintf(sentry, "{DOMAIN LIST: ");
-	for (d = e->domains; d; d = d->next) {
+	for (d = e->pinglist; d; d = d->next) {
 	    if (d->do_ping)
 		storeAppendPrintf(sentry, "%s ", d->domain);
 	    else
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store.cc,v 1.157 1996/11/07 20:55:14 wessels Exp $
+ * $Id: store.cc,v 1.158 1996/11/08 00:02:24 wessels Exp $
  *
  * DEBUG: section 20    Storeage Manager
  * AUTHOR: Harvest Derived
@@ -2666,11 +2666,10 @@ storePendingNClients(const StoreEntry * e)
     int i;
     if (mem == NULL)
 	return 0;
-    for (i = 0; i < (int) mem->nclients; i++) {
+    for (i = 0; i < mem->nclients; i++) {
 	if (mem->clients[i].fd == -1)
 	    continue;
-	if (mem->clients[i].callback)
-	    npend++;
+	npend++;
     }
     return npend;
 }
@@ -0,0 +1,114 @@
+
+/*
+ * $Id: useragent.cc,v 1.1 1996/11/08 00:02:25 wessels Exp $
+ *
+ * DEBUG: section 40    User-Agent logging
+ * AUTHOR: Joe Ramey <ramey@csc.ti.com>
+ *
+ * SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
+ * --------------------------------------------------------
+ *
+ *  Squid is the result of efforts by numerous individuals from the
+ *  Internet community.  Development is led by Duane Wessels of the
+ *  National Laboratory for Applied Network Research and funded by
+ *  the National Science Foundation.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *  
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *  
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *  
+ */
+
+#include "squid.h"
+
+FILE *cache_useragent_log = NULL;
+
+void
+useragentOpenLog(void)
+{
+#if USE_USERAGENT_LOG
+    char *fname = NULL;
+    int log_fd = -1;
+    fname = Config.Log.useragent;
+    /* Close and reopen the log.  It may have been renamed "manually"
+     * before HUP'ing us. */
+    if (cache_useragent_log) {
+	file_close(fileno(cache_useragent_log));
+	fclose(cache_useragent_log);
+	cache_useragent_log = NULL;
+    }
+    if (fname && strcmp(fname, "none") != 0) {
+	log_fd = file_open(fname, NULL, O_WRONLY | O_CREAT | O_APPEND);
+	if (log_fd < 0) {
+	    debug(40, 0, "useragentOpenLog: %s: %s\n", fname, xstrerror());
+	} else if ((cache_useragent_log = fdopen(log_fd, "a")) == NULL) {
+	    file_close(log_fd);
+	    debug(40, 0, "useragentOpenLog: %s: %s\n", fname, xstrerror());
+	}
+    }
+    if (log_fd < 0 || cache_useragent_log == NULL)
+	debug(40, 1, "User-Agent logging is disabled.\n");
+#endif
+}
+
+void
+useragentRotateLog(void)
+{
+#if USE_USERAGENT_LOG
+    char *fname = NULL;
+    int i;
+    LOCAL_ARRAY(char, from, MAXPATHLEN);
+    LOCAL_ARRAY(char, to, MAXPATHLEN);
+    if ((fname = Config.Log.useragent) == NULL)
+	return;
+    if (strcmp(fname, "none") == 0)
+	return;
+    debug(40, 1, "useragentRotateLog: Rotating.\n");
+    /* Rotate numbers 0 through N up one */
+    for (i = Config.Log.rotateNumber; i > 1;) {
+	i--;
+	sprintf(from, "%s.%d", fname, i - 1);
+	sprintf(to, "%s.%d", fname, i);
+	rename(from, to);
+    }
+    /* Rotate the current log to .0 */
+    if (Config.Log.rotateNumber > 0) {
+	sprintf(to, "%s.%d", fname, 0);
+	rename(fname, to);
+    }
+    useragentOpenLog();
+#endif
+}
+
+void
+logUserAgent(const char *client, const char *agent)
+{
+#if USE_USERAGENT_LOG
+    static time_t last_time = 0;
+    static char time_str[128];
+    const char *s;
+    if (!cache_useragent_log)
+	return;
+    if (squid_curtime != last_time) {
+	s = mkhttpdlogtime(&squid_curtime);
+	strcpy(time_str, s);
+	last_time = squid_curtime;
+    }
+    fprintf(cache_useragent_log, "%s [%s] \"%s\"\n",
+	client,
+	time_str,
+	agent);
+    if (unbuffered_logs)
+	fflush(cache_useragent_log);
+#endif
+}