@@ -236,30 +236,30 @@ cacheDigestBitUtil(const CacheDigest * cd)
 }
 
 void
-cacheDigestGuessStatsUpdate(cd_guess_stats * stats, int real_hit, int guess_hit)
+cacheDigestGuessStatsUpdate(CacheDigestGuessStats * stats, int real_hit, int guess_hit)
 {
     assert(stats);
 
     if (real_hit) {
         if (guess_hit)
-            stats->true_hits++;
+            ++stats->trueHits;
         else
-            stats->false_misses++;
+            ++stats->falseMisses;
     } else {
         if (guess_hit)
-            stats->false_hits++;
+            ++stats->falseHits;
         else
-            stats->true_misses++;
+            ++stats->trueMisses;
     }
 }
 
 void
-cacheDigestGuessStatsReport(const cd_guess_stats * stats, StoreEntry * sentry, const char *label)
+cacheDigestGuessStatsReport(const CacheDigestGuessStats * stats, StoreEntry * sentry, const char *label)
 {
-    const int true_count = stats->true_hits + stats->true_misses;
-    const int false_count = stats->false_hits + stats->false_misses;
-    const int hit_count = stats->true_hits + stats->false_hits;
-    const int miss_count = stats->true_misses + stats->false_misses;
+    const int true_count = stats->trueHits + stats->trueMisses;
+    const int false_count = stats->falseHits + stats->falseMisses;
+    const int hit_count = stats->trueHits + stats->falseHits;
+    const int miss_count = stats->trueMisses + stats->falseMisses;
     const int tot_count = true_count + false_count;
 
     assert(label);
@@ -274,19 +274,19 @@ cacheDigestGuessStatsReport(const cd_guess_stats * stats, StoreEntry * sentry, c
     storeAppendPrintf(sentry, "guess\t hit\t\t miss\t\t total\t\t\n");
     storeAppendPrintf(sentry, " \t #\t %%\t #\t %%\t #\t %%\t\n");
     storeAppendPrintf(sentry, "true\t %d\t %.2f\t %d\t %.2f\t %d\t %.2f\n",
-                      stats->true_hits, xpercent(stats->true_hits, tot_count),
-                      stats->true_misses, xpercent(stats->true_misses, tot_count),
+                      stats->trueHits, xpercent(stats->trueHits, tot_count),
+                      stats->trueMisses, xpercent(stats->trueMisses, tot_count),
                       true_count, xpercent(true_count, tot_count));
     storeAppendPrintf(sentry, "false\t %d\t %.2f\t %d\t %.2f\t %d\t %.2f\n",
-                      stats->false_hits, xpercent(stats->false_hits, tot_count),
-                      stats->false_misses, xpercent(stats->false_misses, tot_count),
+                      stats->falseHits, xpercent(stats->falseHits, tot_count),
+                      stats->falseMisses, xpercent(stats->falseMisses, tot_count),
                       false_count, xpercent(false_count, tot_count));
     storeAppendPrintf(sentry, "all\t %d\t %.2f\t %d\t %.2f\t %d\t %.2f\n",
                       hit_count, xpercent(hit_count, tot_count),
                       miss_count, xpercent(miss_count, tot_count),
                       tot_count, xpercent(tot_count, tot_count));
     storeAppendPrintf(sentry, "\tclose_hits: %d ( %d%%) /* cd said hit, doc was in the peer cache, but we got a miss */\n",
-                      stats->close_hits, xpercentInt(stats->close_hits, stats->false_hits));
+                      stats->closeHits, xpercentInt(stats->closeHits, stats->falseHits));
 }
 
 void
@@ -39,7 +39,9 @@
 #if USE_CACHE_DIGESTS
 
 #include "cbdata.h"
-#include "StatCounters.h" /* for cd_guess_stats */
+
+/* for CacheDigestGuessStats */
+#include "StatCounters.h"
 
 struct _Version {
     short int current;		/* current version */
@@ -117,7 +119,7 @@ class PeerDigest
     } times;
 
     struct {
-        cd_guess_stats guess;
+        CacheDigestGuessStats guess;
         int used_count;
 
         struct {
@@ -1,4 +1,6 @@
 /*
+ * AUTHOR: Francesco Chemolli (Harvest-derived)
+ *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
  * ----------------------------------------------------------
  *
@@ -25,7 +27,6 @@
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
  *
- *  AUTHOR: Francesco Chemolli (Harvest-derived)
  *
  */
 #ifndef STATCOUNTERS_H_
@@ -34,21 +35,21 @@
 #include "StatHist.h"
 
 #if USE_CACHE_DIGESTS
-/* statistics for cache digests and other hit "predictors" */
-class cd_guess_stats {
+/** statistics for cache digests and other hit "predictors" */
+class CacheDigestGuessStats {
 public:
-    /* public, read-only */
-    int true_hits;
-    int false_hits;
-    int true_misses;
-    int false_misses;
-    int close_hits;     /* tmp, remove it later */
+    int trueHits;
+    int falseHits;
+    int trueMisses;
+    int falseMisses;
+    int closeHits;     /// \todo: temporary remove it later
 };
 #endif
 
 
-/*
- * if you add a field to StatCounters,
+/** General collection of process-wide statistics.
+ *
+ * \note if you add a field to StatCounters,
  * you MUST sync statCountersInitSpecial, statCountersClean, and statCountersCopy
  */
 class StatCounters {
@@ -63,11 +64,11 @@ class StatCounters {
         kb_t kbytes_in;
         kb_t kbytes_out;
         kb_t hit_kbytes_out;
-        StatHist miss_svc_time;
-        StatHist nm_svc_time;
-        StatHist nh_svc_time;
-        StatHist hit_svc_time;
-        StatHist all_svc_time;
+        StatHist missSvcTime;
+        StatHist nearMissSvcTime;
+        StatHist nearHitSvcTime;
+        StatHist hitSvcTime;
+        StatHist allSvcTime;
     } client_http;
 
     struct {
@@ -97,8 +98,8 @@ class StatCounters {
         kb_t kbytes_recv;
         kb_t q_kbytes_recv;
         kb_t r_kbytes_recv;
-        StatHist query_svc_time;
-        StatHist reply_svc_time;
+        StatHist querySvcTime;
+        StatHist replySvcTime;
         int query_timeouts;
         int times_used;
     } icp;
@@ -113,7 +114,7 @@ class StatCounters {
     } unlink;
 
     struct {
-        StatHist svc_time;
+        StatHist svcTime;
     } dns;
 
     struct {
@@ -125,7 +126,7 @@ class StatCounters {
         int msgs_recv;
 #if USE_CACHE_DIGESTS
 
-        cd_guess_stats guess;
+        CacheDigestGuessStats guess;
 #endif
 
         StatHist on_xition_count;
@@ -441,7 +441,7 @@ clientUpdateStatCounters(log_type logType)
 void
 clientUpdateStatHistCounters(log_type logType, int svc_time)
 {
-    statCounter.client_http.all_svc_time.count(svc_time);
+    statCounter.client_http.allSvcTime.count(svc_time);
     /**
      * The idea here is not to be complete, but to get service times
      * for only well-defined types.  For example, we don't include
@@ -452,25 +452,25 @@ clientUpdateStatHistCounters(log_type logType, int svc_time)
     switch (logType) {
 
     case LOG_TCP_REFRESH_UNMODIFIED:
-        statCounter.client_http.nh_svc_time.count(svc_time);
+        statCounter.client_http.nearHitSvcTime.count(svc_time);
         break;
 
     case LOG_TCP_IMS_HIT:
-        statCounter.client_http.nm_svc_time.count(svc_time);
+        statCounter.client_http.nearMissSvcTime.count(svc_time);
         break;
 
     case LOG_TCP_HIT:
 
     case LOG_TCP_MEM_HIT:
 
     case LOG_TCP_OFFLINE_HIT:
-        statCounter.client_http.hit_svc_time.count(svc_time);
+        statCounter.client_http.hitSvcTime.count(svc_time);
         break;
 
     case LOG_TCP_MISS:
 
     case LOG_TCP_CLIENT_REFRESH_MISS:
-        statCounter.client_http.miss_svc_time.count(svc_time);
+        statCounter.client_http.missSvcTime.count(svc_time);
         break;
 
     default:
@@ -514,7 +514,7 @@ clientUpdateHierCounters(HierarchyLogEntry * someEntry)
         i = &someEntry->ping;
 
         if (clientPingHasFinished(i))
-            statCounter.icp.query_svc_time.count(tvSubUsec(i->start, i->stop));
+            statCounter.icp.querySvcTime.count(tvSubUsec(i->start, i->stop));
 
         if (i->timeout)
             statCounter.icp.query_timeouts++;
@@ -502,7 +502,7 @@ fqdncacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error
     static_cast<generic_cbdata *>(data)->unwrap(&f);
     ++FqdncacheStats.replies;
     const int age = f->age();
-    statCounter.dns.svc_time.count(age);
+    statCounter.dns.svcTime.count(age);
 #if USE_DNSSERVERS
 
     fqdncacheParse(f, reply);
@@ -811,7 +811,7 @@ icpCount(void *buf, int which, size_t len, int delay)
             statCounter.icp.replies_sent++;
             kb_incr(&statCounter.icp.r_kbytes_sent, len);
             /* this is the sent-reply service time */
-            statCounter.icp.reply_svc_time.count(delay);
+            statCounter.icp.replySvcTime.count(delay);
         }
 
         if (ICP_HIT == icp->opcode)
@@ -826,7 +826,7 @@ icpCount(void *buf, int which, size_t len, int delay)
         } else {
             statCounter.icp.replies_recv++;
             kb_incr(&statCounter.icp.r_kbytes_recv, len);
-            /* statCounter.icp.query_svc_time set in clientUpdateCounters */
+            /* statCounter.icp.querySvcTime set in clientUpdateCounters */
         }
 
         if (ICP_HIT == icp->opcode)
@@ -598,7 +598,7 @@ ipcacheHandleReply(void *data, rfc1035_rr * answers, int na, const char *error_m
     static_cast<generic_cbdata *>(data)->unwrap(&i);
     IpcacheStats.replies++;
     const int age = i->age();
-    statCounter.dns.svc_time.count(age);
+    statCounter.dns.svcTime.count(age);
 
 #if USE_DNSSERVERS
     ipcacheParse(i, reply);
@@ -614,7 +614,7 @@ SQUIDCEXTERN pid_t ipcCreate(int type,
                              int *wfd,
                              void **hIpc);
 
-class cd_guess_stats;
+class CacheDigestGuessStats;
 /* CacheDigest */
 SQUIDCEXTERN CacheDigest *cacheDigestCreate(int capacity, int bpe);
 SQUIDCEXTERN void cacheDigestDestroy(CacheDigest * cd);
@@ -626,8 +626,8 @@ SQUIDCEXTERN void cacheDigestAdd(CacheDigest * cd, const cache_key * key);
 SQUIDCEXTERN void cacheDigestDel(CacheDigest * cd, const cache_key * key);
 SQUIDCEXTERN size_t cacheDigestCalcMaskSize(int cap, int bpe);
 SQUIDCEXTERN int cacheDigestBitUtil(const CacheDigest * cd);
-SQUIDCEXTERN void cacheDigestGuessStatsUpdate(cd_guess_stats * stats, int real_hit, int guess_hit);
-SQUIDCEXTERN void cacheDigestGuessStatsReport(const cd_guess_stats * stats, StoreEntry * sentry, const char *label);
+SQUIDCEXTERN void cacheDigestGuessStatsUpdate(CacheDigestGuessStats * stats, int real_hit, int guess_hit);
+SQUIDCEXTERN void cacheDigestGuessStatsReport(const CacheDigestGuessStats * stats, StoreEntry * sentry, const char *label);
 SQUIDCEXTERN void cacheDigestReport(CacheDigest * cd, const char *label, StoreEntry * e);
 
 SQUIDCEXTERN void internalStart(const Comm::ConnectionPointer &clientConn, HttpRequest *, StoreEntry *);
@@ -574,35 +574,35 @@ snmp_prfProtoFn(variable_list * Var, snint * ErrP)
             break;
 
         case PERF_MEDIAN_HTTP_ALL:
-            x = statHistDeltaMedian(l->client_http.all_svc_time,
-                                    f->client_http.all_svc_time);
+            x = statHistDeltaMedian(l->client_http.allSvcTime,
+                                    f->client_http.allSvcTime);
             break;
 
         case PERF_MEDIAN_HTTP_MISS:
-            x = statHistDeltaMedian(l->client_http.miss_svc_time,
-                                    f->client_http.miss_svc_time);
+            x = statHistDeltaMedian(l->client_http.missSvcTime,
+                                    f->client_http.missSvcTime);
             break;
 
         case PERF_MEDIAN_HTTP_NM:
-            x = statHistDeltaMedian(l->client_http.nm_svc_time,
-                                    f->client_http.nm_svc_time);
+            x = statHistDeltaMedian(l->client_http.nearMissSvcTime,
+                                    f->client_http.nearMissSvcTime);
             break;
 
         case PERF_MEDIAN_HTTP_HIT:
-            x = statHistDeltaMedian(l->client_http.hit_svc_time,
-                                    f->client_http.hit_svc_time);
+            x = statHistDeltaMedian(l->client_http.hitSvcTime,
+                                    f->client_http.hitSvcTime);
             break;
 
         case PERF_MEDIAN_ICP_QUERY:
-            x = statHistDeltaMedian(l->icp.query_svc_time, f->icp.query_svc_time);
+            x = statHistDeltaMedian(l->icp.querySvcTime, f->icp.querySvcTime);
             break;
 
         case PERF_MEDIAN_ICP_REPLY:
-            x = statHistDeltaMedian(l->icp.reply_svc_time, f->icp.reply_svc_time);
+            x = statHistDeltaMedian(l->icp.replySvcTime, f->icp.replySvcTime);
             break;
 
         case PERF_MEDIAN_DNS:
-            x = statHistDeltaMedian(l->dns.svc_time, f->dns.svc_time);
+            x = statHistDeltaMedian(l->dns.svcTime, f->dns.svcTime);
             break;
 
         case PERF_MEDIAN_RHR:
@@ -614,8 +614,8 @@ snmp_prfProtoFn(variable_list * Var, snint * ErrP)
             break;
 
         case PERF_MEDIAN_HTTP_NH:
-            x = statHistDeltaMedian(l->client_http.nh_svc_time,
-                                    f->client_http.nh_svc_time);
+            x = statHistDeltaMedian(l->client_http.nearHitSvcTime,
+                                    f->client_http.nearHitSvcTime);
             break;
 
         default:
@@ -1091,16 +1091,16 @@ GetAvgStat(Mgr::IntervalActionData& stats, int minutes, int hours)
     stats.client_http_kbytes_in = XAVG(client_http.kbytes_in.kb);
     stats.client_http_kbytes_out = XAVG(client_http.kbytes_out.kb);
 
-    stats.client_http_all_median_svc_time = statHistDeltaMedian(l->client_http.all_svc_time,
-                                            f->client_http.all_svc_time) / 1000.0;
-    stats.client_http_miss_median_svc_time = statHistDeltaMedian(l->client_http.miss_svc_time,
-            f->client_http.miss_svc_time) / 1000.0;
-    stats.client_http_nm_median_svc_time = statHistDeltaMedian(l->client_http.nm_svc_time,
-                                           f->client_http.nm_svc_time) / 1000.0;
-    stats.client_http_nh_median_svc_time = statHistDeltaMedian(l->client_http.nh_svc_time,
-                                           f->client_http.nh_svc_time) / 1000.0;
-    stats.client_http_hit_median_svc_time = statHistDeltaMedian(l->client_http.hit_svc_time,
-                                            f->client_http.hit_svc_time) / 1000.0;
+    stats.client_http_all_median_svc_time = statHistDeltaMedian(l->client_http.allSvcTime,
+                                            f->client_http.allSvcTime) / 1000.0;
+    stats.client_http_miss_median_svc_time = statHistDeltaMedian(l->client_http.missSvcTime,
+            f->client_http.missSvcTime) / 1000.0;
+    stats.client_http_nm_median_svc_time = statHistDeltaMedian(l->client_http.nearMissSvcTime,
+                                           f->client_http.nearMissSvcTime) / 1000.0;
+    stats.client_http_nh_median_svc_time = statHistDeltaMedian(l->client_http.nearHitSvcTime,
+                                           f->client_http.nearHitSvcTime) / 1000.0;
+    stats.client_http_hit_median_svc_time = statHistDeltaMedian(l->client_http.hitSvcTime,
+                                            f->client_http.hitSvcTime) / 1000.0;
 
     stats.server_all_requests = XAVG(server.all.requests);
     stats.server_all_errors = XAVG(server.all.errors);
@@ -1137,12 +1137,12 @@ GetAvgStat(Mgr::IntervalActionData& stats, int minutes, int hours)
     stats.icp_q_kbytes_recv = XAVG(icp.q_kbytes_recv.kb);
     stats.icp_r_kbytes_recv = XAVG(icp.r_kbytes_recv.kb);
 
-    stats.icp_query_median_svc_time = statHistDeltaMedian(l->icp.query_svc_time,
-                                      f->icp.query_svc_time) / 1000000.0;
-    stats.icp_reply_median_svc_time = statHistDeltaMedian(l->icp.reply_svc_time,
-                                      f->icp.reply_svc_time) / 1000000.0;
-    stats.dns_median_svc_time = statHistDeltaMedian(l->dns.svc_time,
-                                f->dns.svc_time) / 1000.0;
+    stats.icp_query_median_svc_time = statHistDeltaMedian(l->icp.querySvcTime,
+                                      f->icp.querySvcTime) / 1000000.0;
+    stats.icp_reply_median_svc_time = statHistDeltaMedian(l->icp.replySvcTime,
+                                      f->icp.replySvcTime) / 1000000.0;
+    stats.dns_median_svc_time = statHistDeltaMedian(l->dns.svcTime,
+                                f->dns.svcTime) / 1000.0;
 
     stats.unlink_requests = XAVG(unlink.requests);
     stats.page_faults = XAVG(page_faults);
@@ -1486,20 +1486,20 @@ statCountersInitSpecial(StatCounters * C)
     /*
      * HTTP svc_time hist is kept in milli-seconds; max of 3 hours.
      */
-    C->client_http.all_svc_time.logInit(300, 0.0, 3600000.0 * 3.0);
-    C->client_http.miss_svc_time.logInit(300, 0.0, 3600000.0 * 3.0);
-    C->client_http.nm_svc_time.logInit(300, 0.0, 3600000.0 * 3.0);
-    C->client_http.nh_svc_time.logInit(300, 0.0, 3600000.0 * 3.0);
-    C->client_http.hit_svc_time.logInit(300, 0.0, 3600000.0 * 3.0);
+    C->client_http.allSvcTime.logInit(300, 0.0, 3600000.0 * 3.0);
+    C->client_http.missSvcTime.logInit(300, 0.0, 3600000.0 * 3.0);
+    C->client_http.nearMissSvcTime.logInit(300, 0.0, 3600000.0 * 3.0);
+    C->client_http.nearHitSvcTime.logInit(300, 0.0, 3600000.0 * 3.0);
+    C->client_http.hitSvcTime.logInit(300, 0.0, 3600000.0 * 3.0);
     /*
      * ICP svc_time hist is kept in micro-seconds; max of 1 minute.
      */
-    C->icp.query_svc_time.logInit(300, 0.0, 1000000.0 * 60.0);
-    C->icp.reply_svc_time.logInit(300, 0.0, 1000000.0 * 60.0);
+    C->icp.querySvcTime.logInit(300, 0.0, 1000000.0 * 60.0);
+    C->icp.replySvcTime.logInit(300, 0.0, 1000000.0 * 60.0);
     /*
      * DNS svc_time hist is kept in milli-seconds; max of 10 minutes.
      */
-    C->dns.svc_time.logInit(300, 0.0, 60000.0 * 10.0);
+    C->dns.svcTime.logInit(300, 0.0, 60000.0 * 10.0);
     /*
      * Cache Digest Stuff
      */
@@ -1515,14 +1515,14 @@ static void
 statCountersClean(StatCounters * C)
 {
     assert(C);
-    C->client_http.all_svc_time.clear();
-    C->client_http.miss_svc_time.clear();
-    C->client_http.nm_svc_time.clear();
-    C->client_http.nh_svc_time.clear();
-    C->client_http.hit_svc_time.clear();
-    C->icp.query_svc_time.clear();
-    C->icp.reply_svc_time.clear();
-    C->dns.svc_time.clear();
+    C->client_http.allSvcTime.clear();
+    C->client_http.missSvcTime.clear();
+    C->client_http.nearMissSvcTime.clear();
+    C->client_http.nearHitSvcTime.clear();
+    C->client_http.hitSvcTime.clear();
+    C->icp.querySvcTime.clear();
+    C->icp.replySvcTime.clear();
+    C->dns.svcTime.clear();
     C->cd.on_xition_count.clear();
     C->comm_icp_incoming.clear();
     C->comm_dns_incoming.clear();
@@ -1541,15 +1541,15 @@ statCountersCopy(StatCounters * dest, const StatCounters * orig)
     statCountersInitSpecial(dest);
     /* now handle special cases */
     /* note: we assert that histogram capacities do not change */
-    dest->client_http.all_svc_time=orig->client_http.all_svc_time;
-    dest->client_http.miss_svc_time=orig->client_http.miss_svc_time;
-    dest->client_http.nm_svc_time=orig->client_http.nm_svc_time;
-    dest->client_http.nh_svc_time=orig->client_http.nh_svc_time;
-
-    dest->client_http.hit_svc_time=orig->client_http.hit_svc_time;
-    dest->icp.query_svc_time=orig->icp.query_svc_time;
-    dest->icp.reply_svc_time=orig->icp.reply_svc_time;
-    dest->dns.svc_time=orig->dns.svc_time;
+    dest->client_http.allSvcTime=orig->client_http.allSvcTime;
+    dest->client_http.missSvcTime=orig->client_http.missSvcTime;
+    dest->client_http.nearMissSvcTime=orig->client_http.nearMissSvcTime;
+    dest->client_http.nearHitSvcTime=orig->client_http.nearHitSvcTime;
+
+    dest->client_http.hitSvcTime=orig->client_http.hitSvcTime;
+    dest->icp.querySvcTime=orig->icp.querySvcTime;
+    dest->icp.replySvcTime=orig->icp.replySvcTime;
+    dest->dns.svcTime=orig->dns.svcTime;
     dest->cd.on_xition_count=orig->cd.on_xition_count;
     dest->comm_icp_incoming=orig->comm_icp_incoming;
     dest->comm_http_incoming=orig->comm_http_incoming;
@@ -1559,22 +1559,22 @@ statCountersCopy(StatCounters * dest, const StatCounters * orig)
 static void
 statCountersHistograms(StoreEntry * sentry)
 {
-    storeAppendPrintf(sentry, "client_http.all_svc_time histogram:\n");
-    statCounter.client_http.all_svc_time.dump(sentry, NULL);
-    storeAppendPrintf(sentry, "client_http.miss_svc_time histogram:\n");
-    statCounter.client_http.miss_svc_time.dump(sentry, NULL);
-    storeAppendPrintf(sentry, "client_http.nm_svc_time histogram:\n");
-    statCounter.client_http.nm_svc_time.dump(sentry, NULL);
-    storeAppendPrintf(sentry, "client_http.nh_svc_time histogram:\n");
-    statCounter.client_http.nh_svc_time.dump(sentry, NULL);
-    storeAppendPrintf(sentry, "client_http.hit_svc_time histogram:\n");
-    statCounter.client_http.hit_svc_time.dump(sentry, NULL);
-    storeAppendPrintf(sentry, "icp.query_svc_time histogram:\n");
-    statCounter.icp.query_svc_time.dump(sentry, NULL);
-    storeAppendPrintf(sentry, "icp.reply_svc_time histogram:\n");
-    statCounter.icp.reply_svc_time.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "client_http.allSvcTime histogram:\n");
+    statCounter.client_http.allSvcTime.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "client_http.missSvcTime histogram:\n");
+    statCounter.client_http.missSvcTime.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "client_http.nearMissSvcTime histogram:\n");
+    statCounter.client_http.nearMissSvcTime.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "client_http.nearHitSvcTime histogram:\n");
+    statCounter.client_http.nearHitSvcTime.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "client_http.hitSvcTime histogram:\n");
+    statCounter.client_http.hitSvcTime.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "icp.querySvcTime histogram:\n");
+    statCounter.icp.querySvcTime.dump(sentry, NULL);
+    storeAppendPrintf(sentry, "icp.replySvcTime histogram:\n");
+    statCounter.icp.replySvcTime.dump(sentry, NULL);
     storeAppendPrintf(sentry, "dns.svc_time histogram:\n");
-    statCounter.dns.svc_time.dump(sentry, NULL);
+    statCounter.dns.svcTime.dump(sentry, NULL);
     storeAppendPrintf(sentry, "select_fds_hist histogram:\n");
     statCounter.select_fds_hist.dump(sentry, NULL);
 }
@@ -1872,31 +1872,31 @@ statPctileSvc(double pctile, int interval, int which)
     switch (which) {
 
     case PCTILE_HTTP:
-        x = statHistDeltaPctile(l->client_http.all_svc_time,f->client_http.all_svc_time, pctile);
+        x = statHistDeltaPctile(l->client_http.allSvcTime,f->client_http.allSvcTime, pctile);
         break;
 
     case PCTILE_HIT:
-        x = statHistDeltaPctile(l->client_http.hit_svc_time,f->client_http.hit_svc_time, pctile);
+        x = statHistDeltaPctile(l->client_http.hitSvcTime,f->client_http.hitSvcTime, pctile);
         break;
 
     case PCTILE_MISS:
-        x = statHistDeltaPctile(l->client_http.miss_svc_time,f->client_http.miss_svc_time, pctile);
+        x = statHistDeltaPctile(l->client_http.missSvcTime,f->client_http.missSvcTime, pctile);
         break;
 
     case PCTILE_NM:
-        x = statHistDeltaPctile(l->client_http.nm_svc_time,f->client_http.nm_svc_time, pctile);
+        x = statHistDeltaPctile(l->client_http.nearMissSvcTime,f->client_http.nearMissSvcTime, pctile);
         break;
 
     case PCTILE_NH:
-        x = statHistDeltaPctile(l->client_http.nh_svc_time,f->client_http.nh_svc_time, pctile);
+        x = statHistDeltaPctile(l->client_http.nearHitSvcTime,f->client_http.nearHitSvcTime, pctile);
         break;
 
     case PCTILE_ICP_QUERY:
-        x = statHistDeltaPctile(l->icp.query_svc_time,f->icp.query_svc_time, pctile);
+        x = statHistDeltaPctile(l->icp.querySvcTime,f->icp.querySvcTime, pctile);
         break;
 
     case PCTILE_DNS:
-        x = statHistDeltaPctile(l->dns.svc_time,f->dns.svc_time, pctile);
+        x = statHistDeltaPctile(l->dns.svcTime,f->dns.svcTime, pctile);
         break;
 
     default: