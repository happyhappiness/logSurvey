@@ -212,7 +212,7 @@ The ldap server list can be:
 server \- In this case server can be used for all Kerberos domains
 server@  \- In this case server can be used for all Kerberos domains
 server@domain  \- In this case server can be used for Kerberos domain domain
-server1a@domain1:server1b@domain1:server2@domain2:server3@:server4 \- A list is build with a colon as seperator
+server1a@domain1:server1b@domain1:server2@domain2:server3@:server4 \- A list is build with a colon as separator
 
 .
 .SH AUTHOR
@@ -252,7 +252,7 @@ main(int argc, char *const argv[])
             fprintf(stderr, "-n do not use Kerberos to authenticate to AD. Requires -u , -p and -l option\n");
             fprintf(stderr, "-g group list\n");
             fprintf(stderr, "-t group list (only group name hex UTF-8 format)\n");
-            fprintf(stderr, "-T group list (all in hex UTF-8 format - except seperator @)\n");
+            fprintf(stderr, "-T group list (all in hex UTF-8 format - except separator @)\n");
             fprintf(stderr, "-D default domain\n");
             fprintf(stderr, "-N netbios to dns domain map\n");
             fprintf(stderr, "-S ldap server to dns domain map\n");
@@ -272,7 +272,7 @@ main(int argc, char *const argv[])
             fprintf(stderr, "group   - In this case group can be used for all keberised and non kerberised ldap servers\n");
             fprintf(stderr, "group@  - In this case group can be used for all keberised ldap servers\n");
             fprintf(stderr, "group@domain  - In this case group can be used for ldap servers of domain domain\n");
-            fprintf(stderr, "group1@domain1:group2@domain2:group3@:group4  - A list is build with a colon as seperator\n");
+            fprintf(stderr, "group1@domain1:group2@domain2:group3@:group4  - A list is build with a colon as separator\n");
             fprintf(stderr, "Group membership is determined with AD servers through the users memberof attribute which\n");
             fprintf(stderr, "is followed to the top (e.g. if the group is a member of a group)\n");
             fprintf(stderr, "Group membership is determined with non AD servers through the users memberuid (assuming\n");
@@ -281,7 +281,7 @@ main(int argc, char *const argv[])
             fprintf(stderr, "server - In this case server can be used for all Kerberos domains\n");
             fprintf(stderr, "server@  - In this case server can be used for all Kerberos domains\n");
             fprintf(stderr, "server@domain  - In this case server can be used for Kerberos domain domain\n");
-            fprintf(stderr, "server1a@domain1:server1b@domain1:server2@domain2:server3@:server4 - A list is build with a colon as seperator\n");
+            fprintf(stderr, "server1a@domain1:server1b@domain1:server2@domain2:server3@:server4 - A list is build with a colon as separator\n");
             clean_args(&margs);
             exit(0);
         default:
@@ -211,14 +211,14 @@ Auth::Basic::Config::decode(char const *proxy_auth, const char *aRequestRealm)
     /* permitted because local_basic is purely local function scope. */
     Auth::Basic::User *local_basic = NULL;
 
-    char *seperator = strchr(cleartext, ':');
+    char *separator = strchr(cleartext, ':');
 
     lb = local_basic = new Auth::Basic::User(this, aRequestRealm);
 
-    if (seperator) {
+    if (separator) {
         /* terminate the username */
-        *seperator = '\0';
-        local_basic->passwd = xstrdup(seperator+1);
+        *separator = '\0';
+        local_basic->passwd = xstrdup(separator+1);
     }
 
     if (!casesensitive)
@@ -234,7 +234,7 @@ Comm::TcpAcceptor::doAccept(int fd, void *data)
     } catch (const std::exception &e) {
         fatalf("FATAL: error while accepting new client connection: %s\n", e.what());
     } catch (...) {
-        fatal("FATAL: error while accepting new client connection: [unkown]\n");
+        fatal("FATAL: error while accepting new client connection: [unknown]\n");
     }
 }
 
@@ -346,7 +346,7 @@ mem_hdr::write (StoreIOBuffer const &writeBuffer)
     if (unionNotEmpty(writeBuffer)) {
         debugs(19, DBG_CRITICAL, "mem_hdr::write: writeBuffer: " << writeBuffer.range());
         debugDump();
-        fatal_dump("Attempt to overwrite already in-memory data. Preceeding this there should be a mem_hdr::write output that lists the attempted write, and the currently present data. Please get a 'backtrace full' from this error - using the generated core, and file a bug report with the squid developers including the last 10 lines of cache.log and the backtrace.\n");
+        fatal_dump("Attempt to overwrite already in-memory data. Preceding this there should be a mem_hdr::write output that lists the attempted write, and the currently present data. Please get a 'backtrace full' from this error - using the generated core, and file a bug report with the squid developers including the last 10 lines of cache.log and the backtrace.\n");
         PROF_stop(mem_hdr_write);
         return false;
     }
@@ -323,7 +323,7 @@ urnHandleReply(void *data, StoreIOBuffer result)
 
     debugs(53, 3, "urnFindMinRtt: Counted " << i << " URLs");
 
-    if (urls == NULL) {     /* unkown URN error */
+    if (urls == NULL) {     /* unknown URN error */
         debugs(52, 3, "urnTranslateDone: unknown URN " << e->url());
         err = new ErrorState(ERR_URN_RESOLVE, Http::scNotFound, urnState->request.getRaw());
         err->url = xstrdup(e->url());