@@ -1,38 +1,39 @@
-/* $Id: rredir.c,v 1.2 1996/09/12 22:14:03 wessels Exp $ */
+/* $Id: rredir.c,v 1.3 1996/09/14 16:54:47 wessels Exp $ */
 
-#ifdef MAIL_HEADERS
-From:    richard@hekkihek.hacom.nl (Richard Huveneers)
-To:      squid-users@nlanr.net
-Subject: Save 15% on your bandwidth...
-Date:    12 Sep 1996 21:21:55 GMT
-==============================================================================
-
-I have downloaded the multi-megabyte files from Netscape and Microsoft that
-our users like to download from every mirror in the world, defeating the usual
-caching.
-
-I put these files in a separate directory and installed a basic redirector
-for Squid that checks if the file (so hostname and pathname are disregarded)
-is present in this directory.
-
-After a few days of testing (the redirector looks very stable) it looks like
-this is saving us approx. 15% on our cache flow. Also, our own WWW server has
-become more popular than ever :)
-
-I'm sure this code will be useful to others too, so I've attached it at the end
-of this message. Improvements, extensions etc. are welcome.
-
-I'm going on holidays now, so I won't be able to respond to e-mail quickly.
-
-Enjoy, Richard.
-#endif
+/*
+ * From:    richard@hekkihek.hacom.nl (Richard Huveneers)
+ * To:      squid-users@nlanr.net
+ * Subject: Save 15% on your bandwidth...
+ * Date:    12 Sep 1996 21:21:55 GMT
+ * ===========================================================================
+ * 
+ * I have downloaded the multi-megabyte files from Netscape and Microsoft
+ * that our users like to download from every mirror in the world,
+ * defeating the usual caching.
+ * 
+ * I put these files in a separate directory and installed a basic
+ * redirector for Squid that checks if the file (so hostname and pathname
+ * are disregarded) is present in this directory.
+ * 
+ * After a few days of testing (the redirector looks very stable) it looks
+ * like this is saving us approx. 15% on our cache flow. Also, our own WWW
+ * server has become more popular than ever :)
+ * 
+ * I'm sure this code will be useful to others too, so I've attached it at
+ * the end of this message. Improvements, extensions etc. are welcome.
+ * 
+ * I'm going on holidays now, so I won't be able to respond to e-mail
+ * quickly.
+ * 
+ * Enjoy, Richard.
+ */
 
 /*
-** rredir - redirect to local directory
-**
-** version 0.1, 7 sep 1996
-**   - initial version (Richard Huveneers <Richard.Huveneers@hekkihek.hacom.nl>)
-*/
+ * rredir - redirect to local directory
+ * 
+ * version 0.1, 7 sep 1996
+ * - initial version (Richard Huveneers <Richard.Huveneers@hekkihek.hacom.nl>)
+ */
 
 #include <stdio.h>
 #include <unistd.h>
@@ -43,55 +44,59 @@ Enjoy, Richard.
 #define REDIRECT_TO_URL         "http://www.hacom.nl/local/rredir"
 #define BUFFER_SIZE             (16*1024)
 
-int main()
+int
+main()
 {
-        char    buf[BUFFER_SIZE];
-        char    *s, *t;
-        int     tlu = 0;
-
-        /* make standard output line buffered */
-        if (setvbuf(stdout, NULL, _IOLBF, 0) != 0) return 1;
-
-        /* speed up the access() calls below */
-        if (chdir(ACCESS_LOCAL_DIR) == -1) return 1;
-
-        /* scan standard input */
-        while (fgets(buf, BUFFER_SIZE, stdin) != NULL)
-        {
-                /* check for too long urls */
-                if (strchr(buf, '\n') == NULL)
-                {
-                        tlu = 1;
-                        continue;
-                }
-                if (tlu) goto dont_redirect;
-
-                /* determine end of url */
-                if ((s = strchr(buf, ' ')) == NULL) goto dont_redirect;
-                *s = '\0';
-
-                /* determine first character of filename */
-                if ((s = strrchr(buf, '/')) == NULL) goto dont_redirect;
-                s++;
-
-                /* security: do not redirect to hidden files, the current
-                ** directory or the parent directory */
-                if (*s == '.' || *s == '\0') goto dont_redirect;
-
-                /* map filename to lower case */
-                for (t = s; *t != '\0'; t++) *t = (char) tolower((int) *t);
-
-                /* check for a local copy of this file */
-                if (access(s, R_OK) == 0)
-                {
-                        (void) printf("%s/%s\n", REDIRECT_TO_URL, s);
-                        continue;
-                }
-
-dont_redirect:
-                tlu = 0;
-                (void) printf("\n");
-        }
-
-        return 0;
+    char buf[BUFFER_SIZE];
+    char *s, *t;
+    int tlu = 0;
+
+    /* make standard output line buffered */
+    if (setvbuf(stdout, NULL, _IOLBF, 0) != 0)
+	return 1;
+
+    /* speed up the access() calls below */
+    if (chdir(ACCESS_LOCAL_DIR) == -1)
+	return 1;
+
+    /* scan standard input */
+    while (fgets(buf, BUFFER_SIZE, stdin) != NULL) {
+	/* check for too long urls */
+	if (strchr(buf, '\n') == NULL) {
+	    tlu = 1;
+	    continue;
+	}
+	if (tlu)
+	    goto dont_redirect;
+
+	/* determine end of url */
+	if ((s = strchr(buf, ' ')) == NULL)
+	    goto dont_redirect;
+	*s = '\0';
+
+	/* determine first character of filename */
+	if ((s = strrchr(buf, '/')) == NULL)
+	    goto dont_redirect;
+	s++;
+
+	/* security: do not redirect to hidden files, the current
+	 * ** directory or the parent directory */
+	if (*s == '.' || *s == '\0')
+	    goto dont_redirect;
+
+	/* map filename to lower case */
+	for (t = s; *t != '\0'; t++)
+	    *t = (char) tolower((int) *t);
+
+	/* check for a local copy of this file */
+	if (access(s, R_OK) == 0) {
+	    (void) printf("%s/%s\n", REDIRECT_TO_URL, s);
+	    continue;
+	}
+      dont_redirect:
+	tlu = 0;
+	(void) printf("\n");
+    }
+
+    return 0;
 }
@@ -1,5 +1,5 @@
 /*
- * $Id: util.h,v 1.13 1996/09/14 16:14:25 wessels Exp $
+ * $Id: util.h,v 1.14 1996/09/14 16:54:48 wessels Exp $
  *
  * AUTHOR: Harvest Derived
  *
@@ -124,14 +124,14 @@
 #if !HAVE_STRDUP
 extern char *strdup(char *);
 #endif
-extern char *xstrdup (char *);		/* Duplicate a string */
+extern char *xstrdup(char *);	/* Duplicate a string */
 
 /* from xmalloc.c */
-void *xmalloc (size_t);	/* Wrapper for malloc(3) */
-void *xrealloc (void *, size_t);	/* Wrapper for realloc(3) */
-void *xcalloc (int, size_t);	/* Wrapper for calloc(3) */
-void xfree (void *);	/* Wrapper for free(3) */
-void xxfree (void *);	/* Wrapper for free(3) */
+void *xmalloc(size_t);		/* Wrapper for malloc(3) */
+void *xrealloc(void *, size_t);	/* Wrapper for realloc(3) */
+void *xcalloc(int, size_t);	/* Wrapper for calloc(3) */
+void xfree(void *);		/* Wrapper for free(3) */
+void xxfree(void *);		/* Wrapper for free(3) */
 char *xstrdup(char *);
 char *xstrerror(void);
 char *getfullhostname(void);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: cachemgr.cc,v 1.20 1996/09/14 08:45:39 wessels Exp $
+ * $Id: cachemgr.cc,v 1.21 1996/09/14 16:54:49 wessels Exp $
  *
  * DEBUG: Section 0     CGI Cache Manager
  * AUTHOR: Harvest Derived
@@ -270,7 +270,7 @@ char *progname = NULL;
 
 static int client_comm_connect(int sock, char *dest_host, u_short dest_port);
 
-void 
+void
 print_trailer(void)
 {
     time_t now = time(NULL);
@@ -287,7 +287,7 @@ print_trailer(void)
     printf("</ADDRESS></BODY></HTML>\n");
 }
 
-void 
+void
 noargs_html(char *host, int port)
 {
     printf("\r\n\r\n");
@@ -386,7 +386,7 @@ fmakeword(FILE * f, char stop, int *cl)
 }
 
 /* A utility function from the NCSA httpd cgi-src utils.c */
-char 
+char
 x2c(char *what)
 {
     char digit;
@@ -398,7 +398,7 @@ x2c(char *what)
 }
 
 /* A utility function from the NCSA httpd cgi-src utils.c */
-void 
+void
 unescape_url(char *url)
 {
     int x, y;
@@ -413,7 +413,7 @@ unescape_url(char *url)
 }
 
 /* A utility function from the NCSA httpd cgi-src utils.c */
-void 
+void
 plustospace(char *str)
 {
     int x;
@@ -424,7 +424,7 @@ plustospace(char *str)
 }
 
 
-void 
+void
 parse_object(char *string)
 {
     char *tmp_line = NULL;
@@ -501,7 +501,7 @@ parse_object(char *string)
     free(status);
 }
 
-int 
+int
 main(int argc, char *argv[])
 {
     static char hostname[256];
@@ -919,7 +919,7 @@ main(int argc, char *argv[])
     return 0;
 }
 
-static int 
+static int
 client_comm_connect(int sock, char *dest_host, u_short dest_port)
 {
     struct hostent *hp;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.24 1996/09/14 16:05:41 wessels Exp $
+ * $Id: client_side.cc,v 1.25 1996/09/14 16:54:50 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -104,7 +104,7 @@ clientProxyAuthCheck(icpStateData * icpState)
 
 void
 clientAccessCheck(icpStateData * icpState,
-	void (*handler) (icpStateData *,
+    void (*handler) (icpStateData *,
 	int))
 {
     int answer = 1;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: comm.cc,v 1.67 1996/09/14 08:45:43 wessels Exp $
+ * $Id: comm.cc,v 1.68 1996/09/14 16:54:51 wessels Exp $
  *
  * DEBUG: section 5     Socket Functions
  * AUTHOR: Harvest Derived
@@ -302,7 +302,7 @@ comm_listen(int sock)
 }
 
 /* Connect SOCK to specified DEST_PORT at DEST_HOST. */
-int 
+int
 comm_connect(int sock, char *dest_host, u_short dest_port)
 {
     struct hostent *hp = NULL;
@@ -1,5 +1,5 @@
 /*
- * $Id: disk.cc,v 1.24 1996/09/14 16:05:42 wessels Exp $
+ * $Id: disk.cc,v 1.25 1996/09/14 16:54:52 wessels Exp $
  *
  * DEBUG: section 6     Disk I/O Routines
  * AUTHOR: Harvest Derived
@@ -144,7 +144,7 @@ disk_init()
 }
 
 /* Open a disk file. Return a file descriptor */
-int 
+int
 file_open(char *path, int (*handler) (), int mode)
 {
     FD_ENTRY *conn;
@@ -187,7 +187,7 @@ file_open(char *path, int (*handler) (), int mode)
 
 
 /* close a disk file. */
-int 
+int
 file_close(int fd)
 {
     FD_ENTRY *conn = NULL;
@@ -333,12 +333,12 @@ diskHandleWrite(int fd, FileEntry * entry)
 /* call a handle when writing is complete. */
 int
 file_write(int fd,
-	char *ptr_to_buf,
-	int len,
-	int access_code,
-	void (*handle) (),
-	void *handle_data,
-	void (*free) (void *))
+    char *ptr_to_buf,
+    int len,
+    int access_code,
+    void (*handle) (),
+    void *handle_data,
+    void (*free) (void *))
 {
     dwrite_q *wq = NULL;
 
@@ -1,5 +1,5 @@
 /*
- * $Id: gopher.cc,v 1.44 1996/09/14 16:05:43 wessels Exp $
+ * $Id: gopher.cc,v 1.45 1996/09/14 16:54:53 wessels Exp $
  *
  * DEBUG: section 10    Gopher
  * AUTHOR: Harvest Derived
@@ -161,21 +161,21 @@ typedef struct gopher_ds {
 static int gopherStateFree(int fd, GopherStateData *);
 static void gopher_mime_content(char *buf, char *name, char *def);
 static void gopherMimeCreate(GopherStateData *);
-static int gopher_url_parser (char *url,
-	char *host,
-	int *port,
-	char *type_id,
-	char *request);
+static int gopher_url_parser(char *url,
+    char *host,
+    int *port,
+    char *type_id,
+    char *request);
 static void gopherEndHTML(GopherStateData *);
 static void gopherToHTML(GopherStateData *, char *inbuf, int len);
 static int gopherReadReplyTimeout(int fd, GopherStateData *);
 static void gopherLifetimeExpire(int fd, GopherStateData *);
 static void gopherReadReply(int fd, GopherStateData *);
-static void gopherSendComplete (int fd,
-	char *buf,
-	int size,
-	int errflag,
-	void *data);
+static void gopherSendComplete(int fd,
+    char *buf,
+    int size,
+    int errflag,
+    void *data);
 static void gopherSendRequest(int fd, GopherStateData *);
 static GopherStateData *CreateGopherStateData(void);
 