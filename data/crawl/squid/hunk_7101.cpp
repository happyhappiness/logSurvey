 
 #include "squid.h"
 
-#define SQUID_ERROR_MSG_P1 "\
-<HTML><HEAD>\n\
-<TITLE>ERROR: The requested URL could not be retrieved</TITLE>\n\
-</HEAD><BODY>\n\
-<H1>ERROR</H1>\n\
-<H2>The requested URL could not be retrieved</H2>\n\
-<HR>\n\
-<P>\n\
-While trying to retrieve the URL:\n\
-<A HREF=\"%s\">%s</A>\n\
-<P>\n\
-The following error was encountered:\n\
-<UL>\n\
-<LI><STRONG>%s</STRONG>\n\
-</UL>\n\
-"
-
-#define SQUID_ERROR_MSG_P2 "\
-<P>The system returned:\n\
-<PRE><I>    %s</I></PRE>\n\
-"
-
-#define SQUID_ERROR_MSG_P3 "\
-<P>This means that:\n\
-<PRE>\n\
-    %s\n\
-</PRE>\n\
-<P>\n\
-%s\n\
-<HR>\n\
-<ADDRESS>\n\
-Generated by %s/%s@%s\n\
-</ADDRESS></BODY></HTML>\n\
-\n"
-
-typedef struct {
-    char *tag;
-    char *shrt;
-    char *lng;
-} error_data;
-
-static error_data ErrorData[] =
+const char *err_string[] =
 {
-    {"ERR_READ_TIMEOUT",
-	"Read Timeout",
-	"The remote site or network may be down.  Please try again."},
-    {"ERR_LIFETIME_EXP",
-	"Transaction Timeout",
-	"The network or remote site may be down or too slow.  Try again later."},
-    {"ERR_NO_CLIENTS",
-	"No Client",
-	"All Clients went away before tranmission completed and the object would not be cached."},
-    {"ERR_READ_ERROR",
-	"Read Error",
-	"The remote site or network may be down.  Please try again."},
-    {"ERR_WRITE_ERROR",
-	"Write Error",
-	"The remote site or network may be down.  Please try again."},
-    {"ERR_CLIENT_ABORT",
-	"Client Aborted",
-	"Client(s) dropped connection before transmission completed.\nObject fetching is aborted.",},
-    {"ERR_CONNECT_FAIL",
-	"Connection Failed",
-	"The remote site or server may be down.  Please try again soon."},
-    {"ERR_INVALID_REQUEST",
-	"Invalid HTTP request",
-	"Please double check it, or ask for assistance."},
-    {"ERR_UNSUP_REQUEST",
-	"Unsupported request",
-	"This request method is not supported for this protocol."},
-    {"ERR_INVALID_URL",
-	"Invalid URL syntax",
-	"Please double check it, or ask for assistance."},
-    {"ERR_NO_FDS",
-	"Out of file descriptors",
-	"The cache is currently very busy.  Please try again."},
-    {"ERR_DNS_FAIL",
-	"DNS name lookup failure",
-	"The named host probably does not exist."},
-    {"ERR_NOT_IMPLEMENTED",
-	"Protocol Not Supported",
-	"The cache does not know about the requested protocol."},
-    {"ERR_CANNOT_FETCH",
-	"Unable to Retrieve",
-	"The requested URL can not currently be retrieved."},
-    {"ERR_NO_RELAY",
-	"No WAIS Relay",
-	"There is no WAIS relay host defined for this cache."},
-    {"ERR_DISK_IO",
-	"Cache Disk I/O Failure",
-	"The system disk is out of space or failing."},
-    {"ERR_ZERO_SIZE_OBJECT",
-	"No Object Data",
-	"The remote server closed the connection before sending any data."},
-    {"ERR_PROXY_DENIED",
-	"Access Denied",
-	"You must authenticate yourself before accessing this cache."}
+    "ERR_NONE",
+    "ERR_READ_TIMEOUT",
+    "ERR_LIFETIME_EXP",
+    "ERR_NO_CLIENTS",
+    "ERR_READ_ERROR",
+    "ERR_WRITE_ERROR",
+    "ERR_CLIENT_ABORT",
+    "ERR_CONNECT_FAIL",
+    "ERR_INVALID_REQ",
+    "ERR_UNSUP_REQ",
+    "ERR_INVALID_URL",
+    "ERR_SOCKET_FAILURE",
+    "ERR_DNS_FAIL",
+    "ERR_NOT_IMPLEMENTED",
+    "ERR_CANNOT_FORWARD",
+    "ERR_NO_RELAY",
+    "ERR_DISK_IO",
+    "ERR_ZERO_SIZE_OBJECT",
+    "ERR_FTP_DISABLED",
+    "ERR_PROXY_DENIED",
+    "ERR_CACHE_MISS_DENIED",
+    "ERR_ACCESS_DENIED",
+    "ERR_MAX"
 };
 
-/* LOCAL */
-static char *tbuf = NULL;
-static char *auth_msg = NULL;
+static char *error_text[ERR_MAX];
+
+static void errorStateFree _PARAMS((ErrorState * err));
+static char *errorConvert _PARAMS((char token, ErrorState * err));
+static char *errorBuildBuf _PARAMS((ErrorState * err, int *len));
+static CWCB errorSendComplete;
 
 void
 errorInitialize(void)
 {
-#ifndef USE_PROXY_AUTH
-    tmp_error_buf = xmalloc(MAX_URL * 4);
-#else
-    tmp_error_buf = xmalloc(8192);
-#endif /* USE_PROXY_AUTH */
-    meta_data.misc += MAX_URL * 4;
-    tbuf = xmalloc(MAX_URL * 3);
-    meta_data.misc += MAX_URL * 3;
-    auth_msg = xmalloc(MAX_URL * 3);
-    meta_data.misc += MAX_URL * 3;
-}
-
-
-char *
-squid_error_url(const char *url, int method, int type, const char *address, int code, const char *msg)
-{
-    int error_index;
-
-    *tmp_error_buf = '\0';
-    if (type < ERR_MIN || type > ERR_MAX)
-	fatal_dump("squid_error_url: type out of range.");
-    if (!code)
-	code = 500;
-    error_index = (int) (type - ERR_MIN);
-    debug(4, 1) ("%s: %s\n", ErrorData[error_index].tag, url);
-    sprintf(tmp_error_buf, "HTTP/1.0 %d Cache Detected Error\r\nContent-type: text/html\r\n\r\n", code);
-    sprintf(tbuf, SQUID_ERROR_MSG_P1,
-	url,
-	url,
-	ErrorData[error_index].shrt);
-    strcat(tmp_error_buf, tbuf);
-    if (msg) {
-	sprintf(tbuf, SQUID_ERROR_MSG_P2, msg);
-	strcat(tmp_error_buf, tbuf);
+    err_type i;
+    int fd;
+    char path[MAXPATHLEN];
+    struct stat sb;
+    assert(sizeof(err_string) == (ERR_MAX + 1) * 4);
+    for (i = ERR_NONE + 1; i < ERR_MAX; i++) {
+	snprintf(path, MAXPATHLEN, "%s/%s",
+	    Config.errorDirectory, err_string[i]);
+	fd = file_open(path, O_RDONLY, NULL, NULL);
+	if (fd < 0) {
+	    debug(4, 0) ("errorInitialize: %s: %s\n", path, xstrerror());
+	    fatal("Failed to open error text file");
+	}
+	if (fstat(fd, &sb) < 0)
+	    fatal_dump("stat() failed on error text file");
+	safe_free(error_text[i]);
+	error_text[i] = xcalloc(sb.st_size, 1);
+	if (read(fd, error_text[i], sb.st_size) != sb.st_size)
+	    fatal_dump("failed to fully read error text file");
+	file_close(fd);
     }
-    sprintf(tbuf, SQUID_ERROR_MSG_P3,
-	ErrorData[error_index].lng,
-	Config.errHtmlText,
-	appname,
-	version_string,
-	getMyHostname());
-    strcat(tmp_error_buf, tbuf);
-    return tmp_error_buf;
 }
 
-
-#define SQUID_REQUEST_ERROR_MSG "\
-<HTML><HEAD><TITLE>ERROR: Invalid HTTP Request</TITLE></HEAD>\n\
-<BODY><H1>ERROR</H1>\n\
-<H2>Invalid HTTP Request</H2>\n\
-<HR>\n\
-<PRE>\n\
-%s\n\
-</PRE>\n\
-<P>\n\
-%s\n\
-<HR>\n\
-<ADDRESS>\n\
-Generated by %s/%s@%s\n\
-</ADDRESS></BODY></HTML>\n\
-\n"
-
-char *
-squid_error_request(const char *request, int type, int code)
+static void
+errorStateFree(ErrorState * err)
 {
-    int error_index;
-
-    *tmp_error_buf = '\0';
-    if (type < ERR_MIN || type > ERR_MAX)
-	fatal_dump("squid_error_request: type out of range.");
-    error_index = (int) (type - ERR_MIN);
-    debug(4, 1) ("%s: %s\n", ErrorData[error_index].tag, request);
-    sprintf(tmp_error_buf, "HTTP/1.0 %d Cache Detected Error\r\nContent-type: text/html\r\n\r\n", code);
-    sprintf(tbuf, SQUID_REQUEST_ERROR_MSG,
-	request,
-	Config.errHtmlText,
-	appname,
-	version_string,
-	getMyHostname());
-    strcat(tmp_error_buf, tbuf);
-    return tmp_error_buf;
+    requestUnlink(err->request);
+    safe_free(err->redirect_url);
+    safe_free(err->url);
+    cbdataFree(err);
 }
 
-char *
-access_denied_msg(int code, int method, const char *url, const char *client)
+static char *
+errorConvert(char token, ErrorState * err)
 {
-    sprintf(tmp_error_buf,
-	"HTTP/1.0 %d Cache Access Denied\r\n"
-	"Content-type: text/html\r\n"
-	"\r\n"
-	"<HTML><HEAD><TITLE>Cache Access Denied</TITLE></HEAD>\n"
-	"<BODY><H1>Error</H1>\n"
-	"<H2>Access Denied</H2>\n"
-	"<P>\n"
-	"Sorry, you are not currently allowed to request:\n"
-	"<PRE>    %s</PRE>\n"
-	"from this cache.  Please check with the\n"
-	"<A HREF=\"mailto:%s\">cache administrator</A>\n"
-	"if you believe this is incorrect.\n"
-	"<P>\n"
-	"%s\n"
-	"<HR>\n"
-	"<ADDRESS>\n"
-	"Generated by %s/%s@%s\n"
-	"</ADDRESS>\n"
-	"\n",
-	code,
-	url,
-	Config.adminEmail,
-	Config.errHtmlText,
-	appname,
-	version_string,
-	getMyHostname());
-    return tmp_error_buf;
+    char *p = NULL;
+    switch (token) {
+    case 'U':
+	if (err->request)
+	    p = urlCanonicalClean(err->request);
+	else
+	    p = err->url;
+	break;
+    default:
+	p = "%UNKNOWN%";
+	break;
+    }
+    if (p == NULL)
+	p = "<NULL>";
+    return p;
 }
 
-/* maex@space.net (06.09.1996)
- *    the message that is sent on deny_info
- *      add a Location: and for old browsers a HREF to the info page
- */
-char *
-access_denied_redirect(int code, int method, const char *url, const char *client, const char *redirect)
-{
-    sprintf(tmp_error_buf,
-	"HTTP/1.0 %d Cache Access Deny Redirect\r\n"
-	"Location: %s\r\n"
-	"Content-type: text/html\r\n"
-	"\r\n"
-	"<HTML><HEAD><TITLE>Cache Access Denied</TITLE></HEAD>\n"
-	"<BODY><H1>Error</H1>\n"
-	"<H2>Access Denied</H2>\n"
-	"<P>\n"
-	"Sorry, you are not currently allowed to request:\n"
-	"<PRE>    %s</PRE>\n"
-	"from this cache.\n"
-	"<P>\n"
-	"You may take a look at\n"
-	"<PRE> <A HREF=\"%s\">%s</A></PRE>\n"
-	"or check with the\n"
-	"<A HREF=\"mailto:%s\">cache administrator</A>\n"
-	"if you believe this is incorrect.\n"
-	"<P>\n"
-	"%s\n"
-	"<HR>\n"
-	"<ADDRESS>\n"
-	"Generated by %s/%s@%s\n"
-	"</ADDRESS></BODY></HTML>\n"
-	"\n",
-	code,
-	redirect,
-	url,
-	redirect,
-	redirect,
-	Config.adminEmail,
-	Config.errHtmlText,
-	appname,
-	version_string,
-	getMyHostname());
-    return tmp_error_buf;
-}
+#define ERROR_BUF_SZ (MAX_URL<<2)
 
-char *
-authorization_needed_msg(const request_t * request, const char *realm)
+static char *
+errorBuildBuf(ErrorState * err, int *len)
 {
-    sprintf(auth_msg, "<HTML><HEAD><TITLE>Authorization needed</TITLE>\n\
-</HEAD><BODY><H1>Authorization needed</H1>\n\
-<P>Sorry, you have to authorize yourself to request:\n\
-<PRE>    ftp://%s@%s%s</PRE>\n\
-<P>from this cache.  Please check with the\n\
-<A HREF=\"mailto:%s\">cache administrator</A>\n\
-if you believe this is incorrect.\n\
-<P>\n\
-%s\n\
-<HR>\n\
-<ADDRESS>\n\
-Generated by %s/%s@%s\n\
-</ADDRESS></BODY></HTML>\n\
-\n",
-	request->login,
-	request->host,
-	request->urlpath,
-	Config.adminEmail,
-	Config.errHtmlText,
-	appname,
-	version_string,
-	getMyHostname());
-
-    mk_mime_hdr(tbuf,
+    LOCAL_ARRAY(char, buf, ERROR_BUF_SZ);
+    LOCAL_ARRAY(char, content, ERROR_BUF_SZ);
+    char *hdr;
+    int clen;
+    int tlen;
+    char *m;
+    char *p;
+    char *t;
+    assert(err != NULL);
+    assert(err->type > ERR_NONE && err->type < ERR_MAX);
+    m = error_text[err->type];
+    clen = 0;
+    while ((p = strchr(m, '%'))) {
+	*p = '\0';		/* terminate */
+	xstrncpy(content + clen, m, ERROR_BUF_SZ - clen);	/* copy */
+	clen += (p - m);	/* advance */
+	if (clen >= ERROR_BUF_SZ)
+	    break;
+	p++;
+	m = p + 1;
+	t = errorConvert(*p, err);	/* convert */
+	xstrncpy(content + clen, t, ERROR_BUF_SZ - clen);	/* copy */
+	clen += strlen(t);	/* advance */
+	if (clen >= ERROR_BUF_SZ)
+	    break;
+    }
+    if (clen < ERROR_BUF_SZ && m != NULL) {
+	xstrncpy(content + clen, m, ERROR_BUF_SZ - clen);
+	clen += strlen(m);
+    }
+    if (clen >= ERROR_BUF_SZ) {
+	clen = ERROR_BUF_SZ - 1;
+	*(content + clen) = '\0';
+    }
+    assert(clen == strlen(content));
+    hdr = httpReplyHeader((double) 1.0,
+	err->http_status,
 	"text/html",
-	strlen(auth_msg),
+	clen,
 	squid_curtime,
-	squid_curtime + Config.negativeTtl);
-    sprintf(tmp_error_buf, "HTTP/1.0 401 Unauthorized\r\n"
-	"%s"
-	"WWW-Authenticate: Basic realm=\"%s\"\r\n"
-	"\r\n"
-	"%s",
-	tbuf, realm, auth_msg);
-    return tmp_error_buf;
+	squid_curtime);
+    tlen = snprintf(buf, ERROR_BUF_SZ, "%s\r\n%s", hdr, content);
+    if (len)
+	*len = tlen;
+    return buf;
 }
 
-
-#define PROXY_AUTH_ERR_MSG "\
-HTTP/1.0 %d Cache Access Denied\r\n\
-Proxy-Authenticate: Basic realm=\"Squid proxy-caching web server\"\r\n\
-Content-type: text/html\r\n\
-\r\n\
-<TITLE>Cache Access Denied</TITLE>\n\
-<H2>Cache Access Denied</H2>\n\
-<P>\n\
-Sorry, you are not currently allowed to request:\n\
-<PRE>    %s</PRE>\n\
-from this cache until you have authenticated yourself.\n\
-\n<p>\
-You need to use Netscape version 2.0 or greater, or Microsoft Internet Explorer 3.0\n\
-or an HTTP/1.1 compliant browser for this to work.\n\
-Please contact the <a href=\"mailto:%s\">cache administrator</a>\n\
-if you have difficulties authenticating yourself, or\n\
-<a href=\"http://%s/cgi-bin/chpasswd.cgi\">change</a>\n\
-your default password.\n\
-<P>\n\
-%s\n\
-<HR>\n\
-<ADDRESS>\n\
-Generated by %s/%s@%s\n\
-</ADDRESS>\n\
-"
-
-char *
-proxy_denied_msg(int code, int method, const char *url, const char *client)
+void
+errorSend(int fd, ErrorState * err)
 {
-    sprintf(tmp_error_buf, PROXY_AUTH_ERR_MSG,
-	code,
-	url,
-	Config.adminEmail,
-	getMyHostname(),
-	Config.errHtmlText,
-	appname,
-	version_string,
-	getMyHostname());
-    return tmp_error_buf;
+    char *buf;
+    int len;
+    assert(fd >= 0);
+    buf = errorBuildBuf(err, &len);
+    cbdataAdd(err);
+    cbdataLock(err);
+    comm_write(fd, xstrdup(buf), len, errorSendComplete, err, xfree);
 }
 
 void
-errorpageFreeMemory(void)
+errorAppendEntry(StoreEntry * entry, ErrorState * err)
+{
+    char *buf;
+    int len;
+    assert(entry->store_status == STORE_PENDING);
+    buf = errorBuildBuf(err, &len);
+    storeAppend(entry, buf, len);
+}
+
+static void
+errorSendComplete(int fd, char *buf, int size, int errflag, void *data)
 {
-    safe_free(tmp_error_buf);
-    safe_free(tbuf);
-    safe_free(auth_msg);
+    ErrorState *err = data;
+    if (err->callback)
+	err->callback(fd, err->callback_data, size);
+    cbdataUnlock(err);
+    errorStateFree(err);
 }
