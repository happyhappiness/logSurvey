@@ -1,6 +1,6 @@
 
 /*
- * $Id: HttpMsg.cc,v 1.29 2006/05/06 22:13:18 wessels Exp $
+ * $Id: HttpMsg.cc,v 1.30 2006/05/27 00:35:05 robertc Exp $
  *
  * DEBUG: section 74    HTTP Message
  * AUTHOR: Alex Rousskov
@@ -35,7 +35,6 @@
 
 #include "squid.h"
 #include "HttpMsg.h"
-#include "HttpRequest.h"
 #include "MemBuf.h"
 
 HttpMsg::HttpMsg(http_hdr_owner_type owner): header(owner),
@@ -30,13 +30,13 @@ TestSwapDir::canStore(const StoreEntry&) const
 }
 
 StoreIOState::Pointer
-TestSwapDir::createStoreIO(StoreEntry&, StoreIOState::STFNCB, StoreIOState::STIOCB, void*)
+TestSwapDir::createStoreIO(StoreEntry &, StoreIOState::STFNCB *, StoreIOState::STIOCB *, void *)
 {
     return NULL;
 }
 
 StoreIOState::Pointer
-TestSwapDir::openStoreIO(StoreEntry&, StoreIOState::STFNCB, StoreIOState::STIOCB, void*)
+TestSwapDir::openStoreIO(StoreEntry &, StoreIOState::STFNCB *, StoreIOState::STIOCB *, void *)
 {
     return NULL;
 }
@@ -18,14 +18,8 @@ class TestSwapDir : public SwapDir
     virtual void reconfigure(int, char*);
     virtual void init();
     virtual int canStore(const StoreEntry&) const;
-    virtual StoreIOState::Pointer createStoreIO(StoreEntry&,
-            StoreIOState::STFNCB,
-            StoreIOState::STIOCB,
-            void*);
-    virtual StoreIOState::Pointer openStoreIO(StoreEntry&,
-            StoreIOState::STFNCB,
-            StoreIOState::STIOCB,
-            void*);
+    virtual StoreIOState::Pointer createStoreIO(StoreEntry &, StoreIOState::STFNCB *, StoreIOState::STIOCB *, void *);
+    virtual StoreIOState::Pointer openStoreIO(StoreEntry &, StoreIOState::STFNCB *, StoreIOState::STIOCB *, void *);
     virtual void parse(int, char*);
     virtual StoreSearch *search(String, HttpRequest *);
 };
@@ -1,5 +1,5 @@
 /*
- * $Id: stub_HttpReply.cc,v 1.2 2005/12/18 09:23:40 serassio Exp $
+ * $Id: stub_HttpReply.cc,v 1.3 2006/05/27 00:35:05 robertc Exp $
  *
  * DEBUG: section 84    Helper process maintenance
  * AUTHOR: Robert Collins
@@ -35,6 +35,16 @@
 #include "squid.h"
 #include "HttpReply.h"
 
+HttpReply::HttpReply() : HttpMsg(hoReply)
+{
+    fatal ("Not implemented.");
+}
+
+HttpReply::~HttpReply()
+{
+    fatal ("Not implemented.");
+}
+
 void
 HttpReply::absorb(HttpReply * new_rep)
 {
@@ -64,3 +74,43 @@ httpBodyPackInto(const HttpBody * body, Packer * p)
 {
     fatal ("Not implemented");
 }
+
+bool
+HttpReply::sanityCheckStartLine(MemBuf *buf, http_status *error)
+{
+    fatal ("Not implemented");
+    return false;
+}
+
+int
+HttpReply::httpMsgParseError()
+{
+    fatal ("Not implemented");
+    return 0;
+}
+
+bool
+HttpReply::expectingBody(method_t, ssize_t&) const
+{
+    fatal ("Not implemented");
+    return false;
+}
+
+void
+HttpReply::packFirstLineInto(Packer * p, bool) const
+{
+    fatal ("Not implemented");
+}
+
+bool
+HttpReply::parseFirstLine(const char *start, const char *end)
+{
+    fatal ("Not implemented");
+    return false;
+}
+
+void
+HttpReply::hdrCacheInit()
+{
+    fatal ("Not implemented");
+}