@@ -0,0 +1,39 @@
+draft-cooper-webi-wpad-00.txt
+	WPAD protocol documenting how MSIE and several other browsers
+	automatically find their proxy settings from DHCP and/or DNS
+
+draft-ietf-wrec-web-pro-00.txt
+	WCCP 1.0
+
+draft-wilson-wrec-wccp-v2-01.txt
+	WCCP 2.0
+
+draft-vinod-carp-v1-03.txt
+	Microsoft CARP peering algorithm
+
+rfc1738.txt
+	Uniform Resource Locators (URL)
+
+rfc1945.txt
+	Hypertext Transfer Protocol -- HTTP/1.0
+	
+rfc2817.txt
+	Upgrading to TLS Within HTTP/1.1
+	Not currently in use, but scheduled to replace https://
+
+rfc2818.txt
+	HTTP Over TLS
+	Documents the https:// scheme
+
+rfc2964.txt
+	Use of HTTP State Management
+	Cookies
+
+rfc2965.txt
+	HTTP State Management Mechanism
+	Cookies
+
+rfc3310.txt
+	Updated Digest specification
+	Most likely not in use for HTTP. Title says HTTP but all examples
+	is SIP.
@@ -0,0 +1,1176 @@
+
+
+Network Working Group                                          I. Cooper
+Internet-Draft                                                   Equinix
+Expires: May 16, 2001                                        P. Gauthier
+                                                     Inktomi Corporation
+                                                                J. Cohen
+                                                 (Microsoft Corporation)
+                                                             M. Dunsmuir
+                                                    (RealNetworks, Inc.)
+                                                              C. Perkins
+                                                  Sun Microsystems, Inc.
+                                                       November 15, 2000
+
+
+                   Web Proxy Auto-Discovery Protocol
+                     draft-cooper-webi-wpad-00.txt
+
+Status of this Memo
+
+   This document is an Internet-Draft and is in full conformance with
+   all provisions of Section 10 of RFC2026.
+
+   Internet-Drafts are working documents of the Internet Engineering
+   Task Force (IETF), its areas, and its working groups. Note that
+   other groups may also distribute working documents as
+   Internet-Drafts.
+
+   Internet-Drafts are draft documents valid for a maximum of six
+   months and may be updated, replaced, or obsoleted by other documents
+   at any time. It is inappropriate to use Internet-Drafts as reference
+   material or to cite them other than as "work in progress."
+
+   The list of current Internet-Drafts can be accessed at
+   http://www.ietf.org/ietf/1id-abstracts.txt.
+
+   The list of Internet-Draft Shadow Directories can be accessed at
+   http://www.ietf.org/shadow.html.
+
+   This Internet-Draft will expire on May 16, 2001.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2000). All Rights Reserved.
+
+Abstract
+
+   A mechanism is needed to permit web clients to locate nearby
+   (caching) web proxy. Current best practice is for end users to hand
+   configure their web client (i.e., browser) with the URL of an "auto
+   configuration file". In large environments this presents a
+   formidable support problem.  It would be much more manageable for
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 1]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   the web client software to automatically learn the configuration
+   information for its web proxy settings. This is typically referred
+   to as a resource discovery problem.
+
+   Web client implementers are faced with a dizzying array of resource
+   discovery protocols at varying levels of implementation and
+   deployment. This complexity is hampering deployment of a "web proxy
+   auto-discovery" facility.  This document proposes a pragmatic
+   approach to web proxy auto-discovery.  It draws on a number of
+   proposed standards in the light of practical deployment concerns. It
+   proposes an escalating strategy of resource discovery attempts in
+   order to find a nearby web proxy server. It attempts to provide rich
+   mechanisms for supporting a complex environment, which may contain
+   multiple web proxy servers.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 2]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+Table of Contents
+
+   1.    Prior Work . . . . . . . . . . . . . . . . . . . . . . . . .  4
+   2.    Conventions used in this document  . . . . . . . . . . . . .  4
+   3.    Introduction . . . . . . . . . . . . . . . . . . . . . . . .  4
+   4.    Defining Web Proxy Auto-Discovery  . . . . . . . . . . . . .  5
+   5.    The Discovery Process  . . . . . . . . . . . . . . . . . . .  6
+   5.1   WPAD Overview  . . . . . . . . . . . . . . . . . . . . . . .  6
+   5.2   When to Execute WPAD . . . . . . . . . . . . . . . . . . . .  8
+   5.2.1 Upon Startup of the Web Client . . . . . . . . . . . . . . .  8
+   5.2.2 Network Stack Events . . . . . . . . . . . . . . . . . . . .  8
+   5.2.3 Expiration of the CFILE  . . . . . . . . . . . . . . . . . .  8
+   5.3   WPAD Protocol Specification  . . . . . . . . . . . . . . . .  9
+   5.4   Discovery Mechanisms . . . . . . . . . . . . . . . . . . . . 11
+   5.4.1 DHCP . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
+   5.4.2 Service Location Protocol /SLP . . . . . . . . . . . . . . . 12
+   5.4.3 DNS A/CNAME  "Well Known Aliases"  . . . . . . . . . . . . . 12
+   5.4.4 DNS SRV Records  . . . . . . . . . . . . . . . . . . . . . . 12
+   5.4.5 DNS TXT service: Entries . . . . . . . . . . . . . . . . . . 13
+   5.4.6 Fallback . . . . . . . . . . . . . . . . . . . . . . . . . . 13
+   5.4.7 Timeouts . . . . . . . . . . . . . . . . . . . . . . . . . . 13
+   5.5   Composing a Candidate CURL . . . . . . . . . . . . . . . . . 13
+   5.6   Retrieving the CFILE at the CURL . . . . . . . . . . . . . . 14
+   5.7   Resuming Discovery . . . . . . . . . . . . . . . . . . . . . 14
+   6.    Client Implementation Considerations . . . . . . . . . . . . 14
+   7.    Proxy Considerations . . . . . . . . . . . . . . . . . . . . 15
+   8.    Administrator Considerations . . . . . . . . . . . . . . . . 15
+   9.    Conditional Compliance . . . . . . . . . . . . . . . . . . . 16
+   9.1   Class 0 - Minimally compliant  . . . . . . . . . . . . . . . 16
+   9.2   Class 1 - Compliant  . . . . . . . . . . . . . . . . . . . . 17
+   9.3   Class 2 - Maximally compliant  . . . . . . . . . . . . . . . 17
+   10.   Security Considerations  . . . . . . . . . . . . . . . . . . 17
+   11.   Acknowledgements . . . . . . . . . . . . . . . . . . . . . . 17
+         References . . . . . . . . . . . . . . . . . . . . . . . . . 18
+         Authors' Addresses . . . . . . . . . . . . . . . . . . . . . 19
+         Full Copyright Statement . . . . . . . . . . . . . . . . . . 21
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 3]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+1. Prior Work
+
+   This memo is built on the prior work of Paul Gauthier, Josh Cohen,
+   Martin Dunsmuir and Charles Perkins.  Their efforts in producing
+   previous versions of this work are acknowledged with thanks.
+
+2. Conventions used in this document
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in BCP4[7].
+
+3. Introduction
+
+   The problem of locating nearby web proxies cannot wait for the
+   implementation and large scale deployment of various upcoming
+   resource discovery protocols. The widespread success of the HTTP
+   protocol and the recent popularity of streaming media has placed
+   unanticipated strains on the networks of corporations, ISPs and
+   backbone providers. There currently is no effective method for these
+   organizations to realize the obvious benefits of web caching without
+   tedious and error-prone configuration by each and every end user.
+
+   The de-facto mechanism for specifying a web proxy configuration in
+   web clients is the download of a script or configuration file named
+   by a URL. Users are currently expected to hand configure this URL
+   into their browser or other web client.  This mechanism suffers from
+   a number of drawbacks:
+   o  Difficulty in supporting a large body of end-users. Many users
+      misconfigure their proxy settings and are unable to diagnose the
+      cause of their problems.
+   o  Lack of support for mobile clients who require a different proxy
+      as their point of access changes.
+   o  Lack of support for complex proxy environments where there may
+      exist a number of proxies with different affinities for different
+      clients (based on network proximity, for example).  Currently,
+      clients would have to "know" which proxy server was optimal for
+      their use.
+
+   Currently available methods for resource discovery need to be
+   exploited in the context of a well defined framework. Simple,
+   functional and efficient mechanisms stand a good chance of solving
+   this pressing and basic need. As new resource discovery mechanisms
+   mature they can be folded into this framework with little difficulty.
+
+   This document is a specification for implementers of web client
+   software. It defines a protocol for automatically configuring those
+   clients to use a local proxy. It also defines how an administrator
+   should configure various resource discovery services in their
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 4]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   network to support WPAD compatible web clients.
+
+   While it does contain suggestions for web proxy software
+   implementers, it does not make any specific demands of those parties.
+
+4. Defining Web Proxy Auto-Discovery
+
+   As mentioned above, web client software currently needs to be
+   configured with the URL of a proxy auto-configuration file or
+   script. The contents of this script are vendor specific and not
+   currently standardized. This document does not attempt to discuss
+   the contents of these files (see[8] for an example file format).
+
+   Thus, the Web Proxy Auto-Discovery (WPAD) problem reduces to
+   providing the web client a mechanism for discovering the URL of the
+   Configuration File. Once this Configuration URL (CURL) is known, the
+   client software already contains mechanisms for retrieving and
+   interpreting the Configuration File (CFILE) to enable access to the
+   specified proxy or proxies.
+
+   It is worth carefully noting that the goal of the WPAD process is to
+   discover the correct CURL at which to retrieve the CFILE. The client
+   is *not* trying to directly discover the name of the proxy.  That
+   would circumvent the additional capabilities provided by proxy
+   Configuration Files (such as load balancing, request routing to an
+   array of servers, automated fail-over to backup proxy [10][8]).
+
+   It is worth noting that different clients requesting the CURL may
+   receive completely different CFILEs in response. The web server may
+   send back different CFILES based on a number of criteria such as the
+   "User-Agent" header, "Accept" headers, client IP address/subnet,
+   etc.  The same client could conceivably receive a different CFILE on
+   successive retrievals (as a method of round-robin load balancing,
+   for example).
+
+   This document will discuss a range of mechanisms for discovering the
+   Configuration URL. The client will attempt them in a predefined
+   order, until one succeeds. Existing widely deployed facilities may
+   not provide enough expressiveness to specify a complete URL. As
+   such, we will define default values for portions of the CURL which
+   may not be expressible by some discovery mechanisms:
+
+       http://<HOST>:<PORT><PATH>
+
+   HOST 
+      There is no default for this portion. Any succeeding discovery
+      mechanism will provide a value for the <HOST> portion of the
+      CURL. The client MUST NOT provide a default.
+   PORT 
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 5]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+      The client MUST assume port 80 if the successful discovery
+      mechanism does not provide a port component.
+   PATH 
+      The client MUST assume a path of "/wpad.dat" if the successful
+      discovery mechanism does not provide a path component.
+
+5. The Discovery Process
+
+5.1 WPAD Overview
+
+   This sub-section will present a descriptive overview of the WPAD
+   protocol. It is intended to introduce the concepts and flow of the
+   protocol. The remaining sub-sections (Section 5.2-Section 5.7) will
+   provide the rigorous specification of the protocol details. WPAD
+   uses a collection of pre-existing Internet resource discovery
+   mechanisms to perform web proxy auto-discovery. Readers may wish to
+   refer to [1] for a similar approach to resource discovery, since it
+   was a basis for this strategy. The WPAD protocol specifies the
+   following:
+   o  how to use each mechanism for the specific purpose of web proxy
+      auto-discovery
+   o  the order in which the mechanisms should be performed
+
+   The resource discovery mechanisms utilized by WPAD are as follows.
+   o  Dynamic Host Configuration Protocol (DHCP [3][4])
+   o  Service Location Protocol (SLP [5])
+   o  "Well Known Aliases" using DNS A records [6][9]
+   o  DNS SRV records [2][9]
+   o  "service: URLs" in DNS TXT records [11]
+
+   Of all these mechanisms only the DHCP and "Well Known Aliases" are
+   required in WPAD clients. This decision is based on three reasons:
+   these facilities are currently widely deployed in existing vendor
+   hardware and software; they represent functionality that should
+   cover most real world environments; they are relatively simple to
+   implement.
+
+   DNS servers supporting A records are clearly the most widely
+   deployed of the services outlined above. It is reasonable to expect
+   API support inside most web client development environments (POSIX
+   C, Java, etc). The hierarchical nature of DNS makes it possible to
+   support hierarchies of proxy servers,
+
+   DNS is not suitable in every environment, unfortunately.
+   Administrators often choose a DNS domain name hierarchy that does
+   not correlate to network topologies, but rather with some
+   organizational model (for example, foo.development.bar.com and
+   foo.marketing.bar.com). DHCP servers, on the other hand, are
+   frequently deployed with concern for network topologies. DHCP
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 6]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   servers provide support for making configuration decisions based on
+   subnets, which are directly related to network topology.
+
+   Full client support for DHCP is not as ubiquitous as for DNS. That
+   is, not all clients are equipped to take advantage of DHCP for their
+   essential network configuration (assignment of IP address, network
+   mask, etc). APIs for DHCP are not as widely available. Luckily,
+   using DHCP for WPAD does not require either of these facilities. It
+   is relatively easy for web client developers to speak just the
+   minimal DHCP protocol to perform resource discovery. It entails
+   building a simple UDP packet, sending it to the subnet broadcast
+   address, and parsing the reply UDP packet(s) which are received to
+   extract the WPAD option field. A reference implementation of this
+   code in C is available [12].
+
+   The WPAD client attempts a series of resource discovery requests,
+   using the discovery mechanisms mentioned above, in a specific order.
+   Clients only attempt mechanisms that they support (obviously). Each
+   time the discovery attempt succeeds; the client uses the information
+   obtained to construct a CURL. If a CFILE is successfully retrieved
+   at that CURL, the process completes. If not, the client resumes
+   where it left off in the predefined series of resource discovery
+   requests. If no untried mechanisms remain and a CFILE has not been
+   successfully retrieved, the WPAD protocol fails and the client is
+   configured to use no proxy.
+
+   First the client tries DHCP, followed by SLP. If no CFILE has been
+   retrieved the client moves on to the DNS based mechanisms. The
+   client will cycle through the DNS SRV, "Well Known Aliases" and DNS
+   TXT record methods multiple times. Each time through the QNAME being
+   used in the DNS query is made less and less specific. In this manner
+   the client can locate the most specific configuration information
+   possible, but can fall back on less specific information. Every DNS
+   lookup has the QNAME prefixed with "wpad" to indicate the resource
+   type being requested.
+
+   As an example, consider a client with hostname
+   johns-desktop.development.foo.com. Assume the web client software
+   supports all of the mechanisms listed above. This is the sequence of
+   discovery attempts the client would perform until one succeeded in
+   locating a valid CFILE:
+   o  DHCP
+   o  SLP
+   o  DNS A lookup on QNAME=wpad.development.foo.com.
+   o  DNS SRV lookup on QNAME=wpad.development.foo.com.
+   o  DNS TXT lookup on QNAME=wpad.development.foo.com.
+   o  DNS A lookup on QNAME=wpad.foo.com.
+   o  DNS SRV lookup on QNAME=wpad.foo.com.
+   o  DNS TXT lookup on QNAME=wpad.foo.com.
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 7]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+5.2 When to Execute WPAD
+
+   Web clients need to perform the WPAD protocol periodically to
+   maintain correct proxy settings. This should occur on a regular
+   basis corresponding to initialization of the client software or the
+   networking stack below the client. Further, WPAD will need to occur
+   in response to expiration of existing configuration data.  The
+   following sections describe the details of these scenarios.
+
+   The web proxy auto-discovery process MUST occur at least as
+   frequently as one of the following two options. A web client can use
+   either option depending on which makes sense in their environment. 
+   Clients MUST use at least one of the following options. They MAY
+   also choose to implement both options.
+   o  Upon startup of the web client
+   o  Whenever there indication from the networking stack that the IP
+      address of the client host either has, or could have, changed
+
+   In addition, the client MUST attempt a discovery cycle upon
+   expiration of a previously downloaded CFILE in accordance with
+   HTTP/1.1[15].
+
+5.2.1 Upon Startup of the Web Client
+
+   For many types of web client (like web browsers) there can be many
+   instances of the client operating for a given user at one time. This
+   is often to allow display of multiple web pages in different
+   windows, for example. There is no need to re-perform WPAD every time
+   a new instance of the web client is opened. WPAD MUST be performed
+   when the number of web client instances transitions from 0 to 1. It
+   SHOULD NOT be performed as additional instances are created.
+
+5.2.2 Network Stack Events
+
+   Another option for clients is to tie the execution of WPAD to
+   changes in the networking environment. If the client can learn about
+   the change of the local host's IP address, or the possible change of
+   the IP address, it MUST re-perform the WPAD protocol.  Many
+   operating systems provide indications of "network up" events, for
+   example. Those types of events and system-boot events might be the
+   triggers for WPAD in many environments.
+
+5.2.3 Expiration of the CFILE
+
+   The HTTP retrieval of the CURL may return HTTP headers specifying a
+   valid lifetime for the CFILE returned. The client MUST obey these
+   timeouts and rerun the WPAD process when it expires. A client MAY
+   rerun the WPAD process if it detects a failure of the currently
+   configured proxy (which is not otherwise recoverable via the
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 8]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   inherent mechanisms provided by the currently active Configuration
+   File).
+
+   Whenever the client decides to invalidate the current CURL or CFILE,
+   it MUST rerun the entire WPAD protocol to ensure it discovers the
+   currently correct CURL. Specifically, if the valid lifetime of the
+   CFILE ends (as specified by the HTTP headers provided when it was
+   retrieved), the complete WPAD protocol MUST be rerun. The client
+   MUST NOT simply re-use the existing CURL to obtain a fresh copy of
+   the CFILE.
+
+   A number of network round trips, broadcast and/or multicast
+   communications may be required during the WPAD protocol. The WPAD
+   protocol SHOULD NOT be invoked at a more frequent rate than
+   specified above (such as per-URL retrieval).
+
+5.3 WPAD Protocol Specification
+
+   The following pseudo-code defines the WPAD protocol.  If a
+   particular discovery mechanism is not supported, treat it as a
+   failed discovery attempt in the pseudo-code.
+
+   Two subroutines need explanation. The subroutine
+   strip_leading_component(dns_string) strips off the leading
+   characters, up to and including the first dot (`.') in the string
+   which is passed as a parameter, and is expected to contain DNS name.
+   The Boolean subroutine is_not_canonical(dns_string) returns FALSE if
+   dns_string is one of the canonical domain suffixes defined in RFC
+   1591[13] (for example, "com").
+
+   The slp_list and dns_list elements below are assumed to be linked
+   lists containing a data field and a pointer to the next element. 
+   The data field contains the elements used to override the default
+   values in creating a CURL, as detailed in Section 5.5.
+
+       load_CFILE() {
+       /* MUST use DHCP */
+       curl = dhcp_query(/*WPAD option  (Section 5.4.1) */);
+       if (curl != null) {  /* DHCP succeeded */
+          if isvalid (read_CFILE(curl))
+             return SUCCESS;  /* valid CFILE */
+       }
+
+       /* Should use SLP */
+       slp_list = slp_query(/*(WPAD attributes  (Section 5.4.2)*/);
+       while (slp_list != null) {  /* test each curl  */
+          if isvalid(read_CFILE(slp_list.curl_data))
+             return SUCCESS;   /* valid CFILE */
+          else
+
+
+Cooper, et. al.           Expires May 16, 2001                  [Page 9]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+             slp_list = slp_list.next;
+       }
+
+       /* all the DNS mechanisms */
+       TGTDOM = gethostbyname(me);
+       TGTDOM = strip_leading_component(TGTDOM);
+
+       while (is_not_canonical(TGTDOM)) {
+
+          /* SHOULD try DNS SRV records */
+          dns_list = dns_query(/*QNAME=wpad.TGTDOM.,
+                                       QTYPE=SRV (Section 5.4.4)*/);
+          while (dns_list != null) { /* each TXT record */
+             if isvalid(read_CFILE(dns_list, curl_data))
+                return SUCCESS;   /* valid CFILE */
+             else
+                dns_list = dns_list.next;
+          }
+
+          /* SHOULD try DNS TXT records */
+          dns_list = dns_query(/*QNAME=wpad.TGTDOM.,
+                                       QTYPE=TXT (Section 5.4.5)*/);
+          while (dns_list != null) { /* each TXT record */
+             if isvalid(read_CFILE(dns_list, curl_data))
+                return SUCCESS;   /* valid CFILE */
+             else
+                dns_list = dns_list.next;
+          }
+
+          /* MUST try DNS A records */
+          dns_list = dns_query(/*QNAME=wpad.TGTDOM.,
+                                   QTYPE=A  (Section 5.4.3)*/);
+
+          while (dns_list != null) { /* check each A record */
+             if isvalid(read_CFILE(dns_list, curl_data))
+                return SUCCESS;   /* valid CFILE */
+             else
+                dns_list = dns_list.next;
+          }
+
+          /* Still no match, remove leading component and iterate */
+          TGTDOM = strip_leading_component(TGTDOM);
+
+       } /* no A, TXT or SRV records for wpad.* */
+
+       return FAILED;  /* could not locate valid CFILE */
+     }
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 10]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+5.4 Discovery Mechanisms
+
+   Each of the resource discovery methods will be marked as to whether
+   the client MUST, SHOULD, MAY, or MUST NOT implement them to be
+   compliant. Client implementers are encouraged to implement as many
+   mechanisms as possible, to promote maximum interoperability.
+
+   SUMMARY OF DISCOVERY MECHANISMS
+
+      +-------------------------+--------+----------+
+      | Discovery               |        | Document |
+      | Mechanism               | Status | Section  |
+      +-------------------------+--------+----------+
+      | DHCP                    | MUST   | 5.4.1    |
+      | SLP                     | SHOULD | 5.4.2    |
+      | "Well Known Alias"      | MUST   | 5.4.3    |
+      | DNS SRV Records         | SHOULD | 5.4.4    |
+      | DNS TXT "service: URLs" | SHOULD | 5.4.5    |
+      +-------------------------+--------+----------+
+
+5.4.1 DHCP
+
+   Client implementations MUST support DHCP. DHCP has widespread
+   support in numerous vendor hardware and software implementations,
+   and is widely deployed. It is also perfectly suited to this task,
+   and is used to discover other network resources (such a time
+   servers, printers, etc). The DHCP protocol is detailed in RFC
+   2131[3].  We propose a new DHCP option with code 252 for use in web
+   proxy auto-discovery. See RFC 2132[4] for a list of existing DHCP
+   options. See "Conditional Compliance" (Section 9) for more
+   information on DHCP requirements.
+
+   The client should obtain the value of the DHCP option code 252 as
+   returned by the DHCP server. If the client has already conducted
+   DHCP protocol during its initialization, the DHCP server may already
+   have supplied that value. If the value is not available through a
+   client OS API, the client SHOULD use a DHCPINFORM message to query
+   the DHCP server to obtain the value.
+
+   The DHCP option code for WPAD is 252 by agreement of the DHC working
+   group chair.  This option is of type STRING. This string contains a
+   URL which points to an appropriate config file.  The STRING is of
+   arbitrary size.
+
+   An example STRING value would be:
+   "http://server.domain/proxyconfig.pac"
+
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 11]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+5.4.2 Service Location Protocol /SLP
+
+   The Service Location Protocol[14] is a Proposed Standard for
+   discovering services in the Internet.  SLP has several reference
+   implementations available; for details, check [16].
+
+   A service type for use with WPAD has been defined and is available
+   as an Internet Draft.
+
+   Client implementations SHOULD implement SLP. SLP Service Replies
+   will provide one or more complete CURLs. Each candidate CURL so
+   created should be pursued as specified in Section 5.5 and beyond.
+
+5.4.3 DNS A/CNAME  "Well Known Aliases"
+
+   Client implementations MUST support this mechanism. This should be
+   straightforward since only basic DNS lookup of A records is
+   required. See RFC 2219[6] for a description of using "well known"
+   DNS aliases for resource discovery. We propose the "well known
+   alias" of "wpad" for web proxy auto-discovery.
+
+   The client performs the following DNS lookup:
+   QNAME=wpad.TGTDOM., QCLASS=IN, QTYPE=A
+
+   Each A RR, which is returned, contains an IP address which is used
+   to replace the <HOST> default in the CURL.
+
+   Each candidate CURL so created should be pursued as specified in
+   Section 5.5 and beyond.
+
+5.4.4 DNS SRV Records
+
+   Client implementations SHOULD support the DNS SRV mechanism. Details
+   of the protocol can be found in RFC 2052[2]. If the implementation
+   language/environment provides the ability to perform DNS lookups on
+   QTYPEs other than A, client implementers are strongly encouraged to
+   provide this support.  It is acknowledged that not all resolver APIs
+   provide this functionality.
+
+   The client issues the following DNS lookup:
+   QNAME=wpad.tcp.TGTDOM., QCLASS=IN, QTYPE=SRV
+
+   If it receives SRV RRs in response, the client should use each valid
+   RR in the order specified in RFC 2052[2]. Each valid record will
+   specify both a <HOST> and <PORT> to override the CURL defaults.
+
+   Each candidate CURL so created should be pursued as specified in
+   Section 5.5 and beyond.
+
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 12]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+5.4.5 DNS TXT service: Entries
+
+   Client implementations SHOULD support this mechanism.  If the
+   implementation language/environment provides the ability to perform
+   DNS lookups on QTYPEs other than A, the vendor is strongly
+   encouraged to provide this support. It is acknowledged that not all
+   resolver APIs provide this functionality.
+
+   The client should attempt to retrieve TXT RRs from the DNS to obtain
+   "service: URLs" contained therein. The "service: URL" will be of the
+   following format, specifying a complete candidate CURL for each
+   record located:
+
+       service: wpad:http://<HOST>:<PORT><PATH>
+
+   The client should first issue the following DNS query:
+   QNAME=wpad.TGTDOM., QCLASS=IN, QTYPE=TXT
+
+   It should process each TXT RR it receives (if any) using each
+   service:URL found (if any) to generate a candidate CURL. These CURLs
+   should be pursued as described in Section 5.5 and beyond.  Readers
+   familiar with [1] should note that WPAD clients MUST NOT perform the
+   QNAME=TGTDOM., QCLASS=IN, QTYPE=TXT lookup which would be suggested
+   by that document.
+
+5.4.6 Fallback
+
+   Clients MUST NOT implement the "Fallback" mechanism described in
+   [1]. It is unlikely that a client will find a web server prepared to
+   handle the CURL request at a random suffix of its FQDN. This will
+   only increase the number of DNS probes and introduce an excess of
+   spurious "GET" requests on those hapless web servers.
+
+   Instead, the "Well Known Aliases" method of Section 5.4.4 provides
+   equivalent functionality.
+
+5.4.7 Timeouts
+
+   Implementers are encouraged to limit the time elapsed in each
+   discovery phase.  When possible, limiting each phase to 10 seconds
+   is considered reasonable.  Implementers may choose a different value
+   which is more appropriate to their network properties.  For example,
+   a device implementation, which operated over a wireless network, may
+   use a much larger timeout to account for low bandwidth or high
+   latency.
+
+5.5 Composing a Candidate CURL
+
+   Any successful discovery mechanism response will provide a <HOST>
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 13]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   (perhaps in the form of an IP address). Some mechanisms will also
+   provide a <PORT> and/or a <PATH>. The client should override the
+   default CURL fields with all of those supplied by the discovery
+   mechanism.
+
+5.6 Retrieving the CFILE at the CURL
+
+   The client then requests the CURL via HTTP.  When making the request
+   it MUST transmit HTTP "Accept" headers indicating what CFILE formats
+   it is capable of accepting. For example, Netscape Navigator browsers
+   with versions 2.0 and beyond might include the following line in the
+   HTTP Request:
+
+       Accept: application/x-ns-proxy-autoconfig
+
+   The client MUST follow HTTP redirect directives (response codes 3xx)
+   returned by the server. The client SHOULD send a valid "User-Agent"
+   header.
+
+5.7 Resuming Discovery
+
+   If the HTTP request fails for any reason (fails to connect, server
+   error response, etc.) the client MUST resume the search for a
+   successful CURL where it left off. It should continue attempting
+   other sub-steps in a specific discovery mechanism, and then move on
+   to the next mechanism or TGTDOM iteration, etc.
+
+6. Client Implementation Considerations
+
+   The large number of discovery mechanisms specified in this document
+   may raise concerns about network traffic and performance. The DHCP
+   portion of the process will result in a single broadcast by the
+   client, and perhaps a few replies by listening DHCP servers.
+
+   The remaining mechanisms are all DNS based. All DNS queries should
+   have the QNAME terminated with a trailing '.' to indicate a FQDN and
+   expedite the lookup. As such each TGTDOM iteration will cause 3 DNS
+   lookups, each a unicast UDP packet and a reply. Most clients will
+   have fewer than 2 TGTDOM iterations, limiting the total number of
+   DNS request/replies to 6.
+
+   In total, 7 UDP request/reply packets on client startup is quite a
+   low overhead.  The first web page downloaded by the client will
+   likely dwarf that packet count. Each of the DNS lookups should stand
+   a high chance of hitting the cache in the client's DNS server, since
+   other clients will have likely looked them up recently, providing a
+   low total elapsed time.
+
+   This is of course the worst case, where no CURLS are obtained, and
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 14]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   assuming a long client FQDN. Often, a successful CURL will be found
+   early in the protocol, reducing the total packet count.  Client
+   implementations are encouraged to overlap this protocol work with
+   other startup activities. Also, client implementers with concerns
+   about performance can choose to implement only the discovery
+   mechanisms listed as MUST in Section 5.4.
+
+   A longer delay could occur if a CURL is obtained, but the hosting
+   web server is down. The client could spend considerable time waiting
+   for the TCP "connect ()" call to fail. Luckily this is an extremely
+   rare case where the web server hosting the CFILE has failed. See
+   Section 6, where proxy implementers are encouraged to provide
+   support for hosting CURLs on the proxy itself (acting as web
+   server).  Since proxies are often deployed with considerable
+   attention to fault tolerance, this corner case can be further
+   minimized.
+
+7. Proxy Considerations
+
+   As mentioned in the previous section, it is suggested that proxies
+   be capable of acting as a web server, so that they can host the CURL
+   directly.
+
+   The implementers of proxies are most likely to understand the
+   deployment situations of (caching) proxies, the formats of proxy
+   configuration files, etc. They can also build in the ability select
+   a CFILE based on all the various inputs at the time of the CURL
+   request("User-Agent", "Accept", client IP address/subnet/hostname,
+   topological distribution of nearby proxy servers, etc.).
+
+8. Administrator Considerations
+
+   Administrators should configure at least one of the DHCP or DNS A RR
+   methods in their environment (since those are the only two all
+   compatible clients MUST implement). Beyond that, configuring to
+   support mechanisms earlier in the search order will improve client
+   startup time.
+
+   One of the major motivations for this protocol structure was to
+   support client location of "nearby" proxies. In many environments
+   there may be a number of proxies (workgroup, corporate gateway, ISP,
+   backbone). There are a number of possible points at which "nearness"
+   decisions can be made in this framework:
+   o  DHCP servers for different subnets can return different answers. 
+      They can also base decisions on the client cipaddr field or the
+      client identifier option.
+   o  DNS servers can be configured to return different SRV/A/TXT RRs
+      for Different domain suffixes (for example, QNAMEs
+      wpad.marketing.bigcorp.com and wpad.development.bigcorp.com).
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 15]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   o  The web server handling the CURL request can make decisions based
+      on the "User-Agent", "Accept", client IP address/subnet/hostname,
+      and the topological distribution of nearby proxies, etc.  This
+      can occur inside a CGI executable created to handle the CURL.  As
+      mentioned above it could be a proxy server itself handing the
+      CURL request and making those decisions.
+   o  The CFILE may be expressive enough to select from a set of
+      alternatives at "runtime" on the client. CARP[10] is based on
+      this premise for an array of caches. It is not inconceivable that
+      the CFILE could compute some network distance or fitness metrics
+      to a set of candidate proxies and then select the "closest" or
+      "most responsive" device.
+
+   Note that it is valid to configure a DHCP daemon to respond only to
+   INFORM option queries in static IP environments
+
+   Not all of the above mechanisms can be supported in all currently
+   deployed vendor hardware and software. The hope is that enough
+   flexibility is provided in this framework that administrators can
+   select which mechanisms will work in their environments.
+
+9. Conditional Compliance
+
+   In light of the fact that many of the discovery technologies
+   described in this document are not well deployed or not available on
+   all platforms, this specification permits conditional compliance. 
+   Conditional compliance is designated by three class identifications.
+
+   Additionally, due to the possible security implications of a DHCP
+   broadcast request, it is onerous to REQUIRE an implementer to put
+   himself or his implementation at undue risk.  It is quite common to
+   have rogue DHCP servers on a network which may fool a DHCP broadcast
+   implementation into using a malicious configuration file.  On
+   platforms which do not support DHCP natively and cannot get the WPAD
+   option along with its IP address, and which cannot support the DHCP
+   INFORM unicast request, presumably to a known and trusted DHCP
+   server, the likelihood of an undetected spoofing attack is
+   increased.  Having an individual program, such as a browser, trying
+   to detect a DHCP server on a network is unreasonable, in the
+   authors' opinion.  On platforms which use DHCP for their system IP
+   address and have previously trusted a DHCP server, a unicast DHCP
+   INFORM to that same trusted server does not introduce any additional
+   trust to that server.
+
+9.1 Class 0 - Minimally compliant
+
+   A WPAD implementation which implements only the following discovery
+   mechanisms and interval schemes is considered class 0 compliant:
+      DNS A record queries
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 16]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+      Browser or System session refresh intervals
+
+   Class 0 compliance is only applicable to systems or implementations
+   which do not natively support DHCP and/or cannot securely determine
+   a trusted local DHCP server.
+
+9.2 Class 1 - Compliant
+
+   A WPAD implementation which implements only the following discovery
+   mechanisms and interval schemes is considered class 1 compliant:
+      DNS A record queries
+      DHCP INFORM Queries
+      Network stack change refresh intervals
+      CFILE expiration refresh intervals
+
+9.3 Class 2 - Maximally compliant
+
+   A WPAD implementation which implements only the following discovery
+   mechanisms and interval schemes is considered class 1 compliant:
+      DNS A record queries
+      DHCP INFORM Queries
+      DNS TXT service: queries
+      DNS SRV RR queries
+      SVRLOC Queries
+      Network stack change refresh intervals
+      CFILE expiration refresh intervals
+
+   To be considered compliant with a given class, an implementation
+   MUST support the features listed above corresponding to that class.
+
+10. Security Considerations
+
+   This document does not address security of the protocols involved. 
+   The WPAD protocol is vulnerable to existing identified weaknesses in
+   DHCP and DNS. The groups driving those standards, as well as the SLP
+   protocol standards, are addressing security.
+
+   When using DHCP discovery, clients are encouraged to use unicast
+   DHCP INFORM queries instead of broadcast queries which are more
+   easily spoofed in insecure networks.
+
+   Minimally, it can be said that the WPAD protocol does not create new
+   security weaknesses.
+
+11. Acknowledgements
+
+   The authors' work on this specification would be incomplete without
+   the assistance of many people.  Specifically, the authors would like
+   the express their gratitude to the following people:
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 17]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   Chuck Neerdaels, Inktomi, for providing assistance in the design of
+   the WPAD protocol as well as for providing reference implementations.
+
+   Arthur Bierer, Darren Mitchell, Sean Edmison, Mario Rodriguez, Danpo
+   Zhang, and Yaron Goland, Microsoft, for providing implementation
+   insights as well as testing and deployment.
+
+   Ari Luotonen, Netscape, for his role in designing the first web
+   proxy.
+
+   In addition, the authors are grateful for the feedback provided by
+   the following people:
+   o  Jeremy Worley (RealNetworks)
+   o  Eric Twitchell (United Parcel Service)
+
+References
+
+   [1]   Moats, R., Hamilton, M. and P. Leach, "Finding Stuff (How to
+         discover services) (Internet Draft)", October 1997.
+
+   [2]   Gulbrandsen, A. and P. Vixie, "A DNS RR for specifying the
+         location of services (DNS SRV)", RFC 2052, October 1996, 
+         <URL:http://www.ietf.org/rfc/rfc2052.txt>.
+
+   [3]   Droms, R., "Dynamic Host Configuration Protocol", RFC 2131,
+         March 1997, 
+         <URL:http://www.ietf.org/rfc/rfc2131.txt>.
+
+   [4]   Alexander, S. and R. Droms, "DHCP Options and BOOTP Vendor
+         Extensions", RFC 2132, March 1997, 
+         <URL:http://www.ietf.org/rfc/rfc2131.txt>.
+
+   [5]   Veizades, J., Guttman, E., Perkins, C. and M. Day, "Service
+         Location Protocol (Internet Draft)", October 1997.
+
+   [6]   Hamilton, M. and R. Wright, "Use of DNS Aliases for Network
+         Services", RFC 2219, October 1997, 
+         <URL:http://www.ietf.org/rfc/rfc2219.txt>.
+
+   [7]   Bradner, S., "Key words for use in RFCs to Indicate
+         Requirement Levels", RFC 2119, March 1997, 
+         <URL:http://www.ietf.org/rfc/rfc2119.txt>.
+
+   [8]   Luotonen, A., "Navigator Proxy Auto-Config File Format", March
+         1996, 
+         <URL:http://home.netscape.com/eng/mozilla/2.0/relnotes/demo/pro
+         xy-live.html>.
+
+   [9]   Mockapetris, P., "Domain Names - Concepts and Facilities", RFC
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 18]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+         1034, November 1987, 
+         <URL:http://www.ietf.org/rfc/rfc1034.txt>.
+
+   [10]  Valloppillil, V. and K.W. Ross, "Cache Array Routing
+         Protocol", draft-vinod-carp-v1-03.txt (work in progress),
+         February 1998, 
+         <URL:http://www.wrec.org/Drafts/draft-vinod-carp-v1-03.txt>.
+
+   [11]  Perkins, C., Guttman, E. and J. Kempf, "Service Templates and
+         service: Schemes (Internet Draft)", December 1997.
+
+   [12]  "A Sample DHCP Implementation for WPAD", February 1998, 
+         <URL:http://www.inktomi.com/TBD.html>.
+
+   [13]  Postel, J., "Domain Name System Structure and Delegation", RFC
+         1591, March 1994, 
+         <URL:http://www.ietf.org/rfc/rfc1591.txt>.
+
+   [14]  Guttman, E., Perkins, C., Viezades, J. and M. Day, "Service
+         Location Protocol, Version 2", RFC 2608, June 1999, 
+         <URL:http://www.ietf.org/rfc/rfc2608.txt>.
+
+   [15]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,
+         L., Leach, P. and T. Berners-Lee, "Hypertext Transfer Protocol
+         -- HTTP/1.1", RFC 2616, June 1999, 
+         <URL:http://www.ietf.org/rfc/rfc2616.txt>.
+
+   [16]  <URL:http://www.srvloc.org/>
+
+
+Authors' Addresses
+
+   Ian Cooper
+   Equinix, Inc.
+
+   EMail: icooper@equinix.com
+
+
+   Paul Gauthier
+   Inktomi Corporation
+
+   EMail: gauthier@inktomi.com
+
+
+   Josh Cohen
+   (Microsoft Corporation)
+
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 19]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+   Martin Dunsmuir
+   (RealNetworks, Inc.)
+
+
+   Charles Perkins
+   Sun Microsystems, Inc.
+
+   EMail: charles.perkins@Sun.COM
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 20]
+
+Internet-Draft                    WPAD                     November 2000
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (2000). All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph
+   are included on all such copies and derivative works. However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Cooper, et. al.           Expires May 16, 2001                 [Page 21]
+
@@ -0,0 +1,589 @@
+
+
+
+
+
+
+INTERNET-DRAFT                                         M Cieslak
+<draft-ietf-wrec-web-pro-00.txt>                       D Forster
+                                                       Cisco Systems
+                                                       1 June 1999
+                                                       Expires December 1999
+
+                  Web Cache Coordination Protocol V1.0
+
+Status of this Memo
+
+   This document is an Internet-Draft and is in  full  conformance  with
+   all provisions of Section 10 of RFC2026.
+
+   Internet-Drafts are working documents  of  the  Internet  Engineering
+   Task Force (IETF), its areas, and its working groups. Note that other
+   groups may also distribute working documents as Internet-Drafts.
+
+   Internet-Drafts are draft documents valid for a maximum of six months
+   and  may be updated, replaced, or obsoleted by other documents at any
+   time.  It  is  inappropriate  to  use  Internet-Drafts  as  reference
+   material or to cite them other than as "work in progress".
+
+   The  list   of   current   Internet-Drafts   can   be   accessed   at
+   http://www.ietf.org/ietf/lid-abstracts.txt
+
+   The list of Internet-Draft Shadow  Directories  can  be  accessed  at
+   http://www.ietf.org/shadow.html
+
+   Cisco has a patent pending that may  relate  to  WCCP  V1.0.  If  any
+   patents  issue  to  Cisco  or  its  subsidiaries with claims that are
+   necessary for practicing WCCP V1.0, then any party will  be  able  to
+   obtain  a  license  from  Cisco  to  use any such patent claims under
+   openly specified, reasonable, non-discriminatory terms  to  implement
+   WCCP V1.0. No license is required for nonprofit institutions.
+
+Abstract
+
+   This draft documents the Web Cache Coordination Protocol (WCCP) V1.0.
+   This  protocol  is  used (a) to associate a single router with one or
+   more web-caches for the purposes of transparent redirection  of  HTTP
+   traffic,  and  (b)  to allow one of the web-caches to dictate how the
+   router  distributes  transparently-redirected  traffic   across   the
+   associated web-caches.
+
+   This draft describes the interactions between a  router  and  one  or
+   more  web-caches.  It  does  not  describe the interactions between a
+   group of associated web-caches or those between  a  web-cache  and  a
+   web-server.
+
+
+
+                                                               [Page 1]
+
+Definitions
+
+   Transparent Redirection.
+
+      Transparent redirection is a technique used to deploy  web-caching
+      without  the  need for reconfiguration of web-clients. It involves
+      the interception and redirection of HTTP traffic to  one  or  more
+      web-caches by a router or switch, transparently to the web-client.
+
+   Web-Cache Farm.
+
+      One or more web-caches associated with a router.
+
+   Designated Web-Cache.
+
+      The web-cache in a web-cache farm responsible for dictating to the
+      router  how  redirected  traffic  should be distributed across the
+      members of the farm.
+
+   Redirection Hash Table.
+
+      A 256-bucket hash table maintained by the router. This table  maps
+      the  IP  destination address of a packet for redirection to the IP
+      address of a web-cache in the farm
+
+Description of Protocol
+
+   WCCP has two main functions. The first is to allow a  router  enabled
+   for  transparent  redirection  to  discover,  verify,  and  advertise
+   connectivity to one or more web-caches.
+
+   The second function is to allow one of the web-caches, the designated
+   web-cache,  to  dictate how the router distributes redirected traffic
+   across the web-cache farm.
+
+   It is recommended that the web-cache with the lowest  IP  address  is
+   elected as designated web-cache for a farm.
+
+Discovery
+
+   WCCP V1.0 allows a single router to be associated with  one  or  more
+   web-caches.  A  group  of  web-caches  associated  with  a  router is
+   referred to as a web-cache farm. A web-cache may be directly attached
+   to the router or some hops distant.
+
+Joining a web-cache farm
+
+   A web-cache joins a  web-cache  farm  by  periodically  unicasting  a
+
+
+
+                                                               [Page 2]
+
+WCCP_HERE_I_AM  packet  to  the  router  associated  with the farm at
+   intervals of HERE_I_AM_T (10) seconds. The source IP address  of  the
+   WCCP_HERE_I_AM uniquely identifies the web-cache. The router unicasts
+   a WCCP_I_SEE_YOU packet back to the web-cache  in  response  to  each
+   WCCP_HERE_I_AM it receives.
+
+Verifying connectivity
+
+   The Received_ID  fields  in  the  WCCP_HERE_I_AM  and  WCCP_I_SEE_YOU
+   packets  are  used  to verify two-way connectivity between the router
+   and web-cache. The router increments the  value  of  the  Received_ID
+   field  each time it sends a WCCP_I_SEE_YOU to a web-cache and expects
+   to receive the same value back in the Received_ID field of  the  next
+   WCCP_HERE_I_AM  from that cache. WCCP_HERE_I_AM packets containing an
+   invalid Received_ID are ignored.
+
+   The Received_ID in the initial WCCP_HERE_I_AM sent from  a  web-cache
+   is ignored. The router will only consider a web-cache to be reachable
+   when it has received  a  subsequent  WCCP_HERE_I_AM  with  a  correct
+   Received_ID.  Note  that a useable web-cache is merely reachable; the
+   router will not redirect traffic to  a  newly-acquired  useable  web-
+   cache  until instructed to do so in a WCCP_ASSIGN_BUCKETS packet from
+   the designated web-cache.
+
+Advertising connectivity
+
+   The router includes a list of  the  web-caches  it  considers  to  be
+   usable  in each WCCP_I_SEE_YOU packet it transmits. Each entry in the
+   list includes the IP address of the  web-cache  and  indicates  which
+   buckets  in the Redirection Hash Table are currently assigned to that
+   web-cache. This information  is  provided  for  the  benefit  of  the
+   designated web-cache.
+
+   A Change ID in the WCCP_I_SEE_YOU packet is incremented whenever  the
+   web-cache  list  changes or the bucket allocation for an entry in the
+   list is modified.
+
+Timing-out a web-cache
+
+   If the router does  not  receive  a  valid  WCCP_HERE_I_AM  for  3  *
+   HERE_I_AM_T  seconds  it  will  no  longer consider a web-cache to be
+   useable. In this case the web-cache is no longer  advertised  in  the
+   WCCP_I_SEE_YOU  packet  and  all  buckets  previously assigned to the
+   web-cache in the  router's  Redirection  Hash  Table  are  marked  as
+   unassigned.
+
+Assignment
+
+
+
+
+                                                               [Page 3]
+
+The router associated with a web-cache  farm  distributes  redirected
+   traffic  by  destination IP address across the members of the farm as
+   directed by the  designated  web-cache  via  the  WCCP_ASSIGN_BUCKETS
+   packet.
+
+   How the designated web-cache  arrives  at  the  traffic  distribution
+   described  by  the WCCP_ASSIGN_BUCKETS packet is outside the scope of
+   this draft.
+
+   Since the  router  has  no  knowledge  of  the  designated  web-cache
+   election process it will accept a WCCP_ASSIGN_BUCKETS packet from any
+   member of the web-cache farm.
+
+   The value of the Received_ID in the WCCP_ASSIGN_BUCKETS  packet  must
+   match  that  in  the  last WCCP_I_SEE_YOU sent to the designated web-
+   cache. If the Received_ID is not valid the  router  will  ignore  the
+   WCCP_ASSIGN_BUCKETS packet.
+
+   On receipt of a valid WCCP_ASSIGN_BUCKETS packet the router will  set
+   its  Redirection Hash Table from information contained in the packet.
+   This information comprises a list of web-caches followed  by  a  256-
+   bucket  hash  table.  The  position of a web-cache in the list is its
+   index number, the index number of the first entry  being  zero.  Each
+   bucket  in  the  hash table may contain the value 0xFF, indicating no
+   web-cache has been assigned to that bucket, or the index number of  a
+   web-cache.
+
+   The  router  does  not  generate  a  packet  in   response   to   the
+   WCCP_ASSIGN_BUCKET.  However the change in the Redirection Hash Table
+   will be reflected in subsequent WCCP_I_SEE_YOU packets  generated  by
+   the router.
+
+Packet Redirection
+
+Detection
+
+   The router detects HTTP packets (TCP packets with a destination  port
+   number  of  80)  and  redirects  them to a web-cache in the web-cache
+   farm.
+
+   The destination IP address of a candidate packet is hashed  to  yield
+   an  index  into  the  256-bucket  Redirection Hash Table. The indexed
+   bucket indicates to which web-cache the packet should be  redirected.
+   If  the bucket in the Redirection Hash Table is unassigned the packet
+   cannot be redirected and should be forwarded normally.
+
+Encapsulation
+
+
+
+
+                                                               [Page 4]
+
+Each redirected packet  is  encapsulated  in  a  GRE  packet[1].  The
+   encapsulation  uses the base four-octet GRE header with the two Flags
+   and version octets set to zero and a Protocol Type of 0x883E.
+
+   An encapsulated packet may be fragmented if  it  exceeds  the  output
+   interface's MTU.
+
+Returned packets
+
+   The router must ensure that HTTP  traffic  passing  through  it  from
+   members  of  the  web-cache  farm  en-route  to  a  web-server is not
+   redirected.
+
+   The router will  not  redirect  any  packet  with  a  source  address
+   belonging to a member of the web-cache farm.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                               [Page 5]
+
+Format of Protocol Packets
+
+   This section defines the format of the WCCP packets.
+
+   Each WCCP  protocol  packet  is  carried  in  a  UDP  packet  with  a
+   destination port of 2048
+
+Here I Am
+
+   0                   1                   2                   3
+   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                              Type                             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Protocol Version                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Hash Revision                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Hash Information (0)                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                            .                                  |
+   |                            .                                  |
+   |                            .                                  |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Hash Information (7)                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |U|                         Reserved                            |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Received ID                          |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP_HERE_I_AM (7)
+
+   Protocol Version
+
+      4
+
+   Hash Revision
+
+      0
+
+   Hash Information
+
+      A  256-element  bit-vector.  A  set   bit   indicates   that   the
+      corresponding        bucket  in  the  Redirection  Hash  Table  is
+      assigned to this  web-cache.   Normally  the  value  of  the  Hash
+
+
+
+                                                               [Page 6]
+
+Information present in the last WCCP_I_SEE_YOU message received by
+      this cache. In the initial WCCP_HERE_I_AM sent to  the  router  it
+      may  be  zero  or  the  value  assigned to the cache in a previous
+      membership of this web-cache farm. This information may be used by
+      the designated web-cache to re-assign buckets to the cache.
+
+   U
+
+      Normally  the  value  of  the  U  flag   present   in   the   last
+      WCCP_I_SEE_YOU  message  received  by  this  cache.  Set  in first
+      WCCP_HERE_I_AM to indicate that Hash Information is historical.
+
+   Received ID
+
+      The value of the Received ID present in  the  last  WCCP_I_SEE_YOU
+      received by this web-cache.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                               [Page 7]
+
+I See You
+
+   0                   1                   2                   3
+   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                            Type                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Protocol Version                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Change Number                         |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Received ID                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Number of WCs                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Web-Cache List Entry(0)                    |
+   |                            .                                  |
+   |                            .                                  |
+   |                            .                                  |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Web-Cache List Entry(n)                    |
+   |                            .                                  |
+   |                            .                                  |
+   |                            .                                  |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP_I_SEE_YOU (8)
+
+   Protocol Version
+
+      4
+
+   Change Number
+
+      Incremented if a Web-Cache List Entry has been added,  removed  or
+      its   hash   information   has   been   modified  since  the  last
+      WCCP_I_SEE_YOU sent by the router.
+
+   Received ID
+
+      Incremented each time the router generates a WCCP_I_SEE_YOU.  Will
+      never be zero.
+
+   Number of WCs
+
+      Number of Web-Cache List Entry elements in the packet.
+
+
+
+                                                               [Page 8]
+
+Web-Cache List Entry
+
+   The Web-Cache List Entry describes a  Web-Cache  by  IP  Address  and
+   lists the redirection hash table entries assigned to it.
+
+   0                   1                   2                   3
+   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         IP Address                            |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Hash Revision                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Hash Information (0)                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                            .                                  |
+   |                            .                                  |
+   |                            .                                  |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Hash Information (7)                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |U|                         Reserved                            |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   IP Address
+
+      Web-cache IP Address
+
+   Hash Revision
+
+      0
+
+   Hash Information
+
+      A  256-element  bit-vector.  A  set   bit   indicates   that   the
+      corresponding        bucket  in  the  Redirection  Hash  Table  is
+      assigned to this web-cache.
+
+   U
+
+      If set indicates web-cache is not assigned in the Redirection Hash
+      Table  and that the web-cache hash information is historical. This
+      information may be used by the designated  web-cache  to  reassign
+      buckets to a web-cache which has rejoined the farm.
+
+
+
+
+
+
+
+
+                                                               [Page 9]
+
+Assign Bucket
+
+   0                   1                   2                   3
+   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                            Type                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Received ID                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                      Number of Web Caches                     |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Web-Cache 0 IP Address                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                             .                                 |
+   |                             .                                 |
+   |                             .                                 |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Web-Cache n IP Address                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |   Bucket 0    |   Bucket 1    |   Bucket 2    |   Bucket 3    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                             .                                 |
+   |                             .                                 |
+   |                             .                                 |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |   Bucket 252  |   Bucket 253  |   Bucket 254  |   Bucket 255  |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP_ASSIGN_BUCKET (9)
+
+   Received ID
+
+      Value of Received ID in last WCCP_I_SEE_YOU received from router.
+
+   Number of Web Caches
+
+      Number of Web Caches to which redirect traffic can be sent.
+
+   Web-Cache IP Address, 0-n
+
+      IP Addresses of Web-Caches to which redirect traffic can be  sent.
+      The  position of a Web-Cache's IP Address in this list is the Web-
+      Cache's index number. The first entry in the  list  has  an  index
+      number of zero.
+
+   Bucket 0-255
+
+
+
+                                                              [Page 10]
+
+These 256 buckets represent the redirection hash table. The  value
+      of  each  bucket  may  be  0xFF  (Unassigned) or a Web-Cache index
+      number (0-31).
+
+References
+
+   [1] Hanks, Li, Farinacci &  Traina,  "Generic  Routing  Encapsulation
+   (GRE)", RFC 1701, October 1994
+
+Authors' Addresses
+
+   Martin Cieslak
+   Cisco Systems
+   170 Tasman Drive
+   San Jose, CA 95143
+
+   David Forster
+   Cisco Systems
+   170 Tasman Drive
+   San Jose, CA 95143
+
+   Phone: +44-181-7568967
+   Email: dforster@cisco.com
+
+
+   Expires December 1999
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 11]
+
@@ -0,0 +1,417 @@
+INTERNET-DRAFT                                      Vinod Valloppillil
+<draft-vinod-carp-v1-03.txt>                     Microsoft Corporation
+                                                         Keith W. Ross
+                                            University of Pennsylvania
+                                                           26 Feb 1998
+                                                   Expires August 1998
+
+
+		Cache Array Routing Protocol v1.0
+
+Status of this Memo
+
+ This document is an Internet-Draft.  Internet-Drafts are working
+ documents of the Internet Engineering Task Force (IETF), its areas,
+ and its working groups.  Note that other groups may also distribute
+ working documents as Internet-Drafts.
+
+ Internet-Drafts are draft documents valid for a maximum of six months
+ and may be updated, replaced, or obsoleted by other documents at any
+ time.  It is inappropriate to use Internet-Drafts as reference
+ material or to cite them other than as ``work in progress.''
+
+ To learn the current status of any Internet-Draft, please check the
+ ``1id-abstracts.txt'' listing contained in the Internet-Drafts Shadow
+ Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe),
+ munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or
+ ftp.isi.edu (US West Coast).
+
+Abstract
+
+  This draft documents the Cache Array Routing Protocol (CARP) v1.0
+  for dividing URL-space among an array of loosely coupled proxy 
+  servers.
+
+  An HTTP client agent (either a proxy server or a client browser)
+  which implements CARP v1.0 can allocate and intelligently route
+  requests for the correct URLs to any member of the Proxy
+  Array.  Due to the resulting sorting of requests through these 
+  proxies, duplication of cache contents is eliminated and global
+  cache hit rates are improved.
+
+Valloppillil                                           [Page 1]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0     26 Feb 1998
+
+Table of Contents
+
+  1.  Overview........................................ 2
+  2.  Proxy Array Membership Table.................... 3
+      2.1  Global Information......................... 3
+      2.2  Member Information......................... 4
+  3.  Routing Function................................ 5
+      3.1  Hash Function.............................. 5
+      3.2  Hash Combination........................... 6
+      3.3  Load Factor................................ 7
+      3.4  Route Selection............................ 7
+      3.5  Member Failure Routing..................... 7
+  4.  Client-Side Implementation...................... 7 
+  5.  Versioning...................................... 7
+  6.  Security Considerations......................... 8
+  7.  Open Issues..................................... 8
+  8.  Acknowledgements................................ 8
+  9.  References...................................... 8
+  10. Author's Information............................ 9
+
+Valloppillil                                           [Page 2]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0     26 Feb 1998
+
+1. Overview
+
+  The Cache Array Routing Protocol describes a distributed caching 
+  protocol based on
+
+	1) a known membership list of loosely coupled proxies and
+	2) a hash function for dividing URL space among those proxies
+
+  The Proxy Array Membership Table is defined as a plain ASCII text
+  file retrieved from an Array Configuration URL.  This document does
+  NOT describe how this table is constructed, merely the format of
+  the fields used by agents implementing.
+
+  The hash function plus routing algorithm defined in this document 
+  take member proxies described in the Proxy Array Membership Table 
+  and make an on-the-fly determination as to which Proxy Array member 
+  should be the proper receptacle for a cached version of a resource 
+  keyed by URL.
+
+  Downstream agents may then access the cached resource by forwarding
+  the proxied HTTP request [5] for that resource to the appropriate 
+  member of the Proxy Array.
+
+Valloppillil                                           [Page 3]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0         26 Feb 1998
+
+2. Proxy Array Membership Table
+
+  The Proxy Array Membership Table is a plain-text ASCII file which
+  can be published from a URL.
+
+  The format of the table is:
+
+  Proxy Array Information/<Version number>
+  ArrayEnabled:  <0 | 1>
+  ConfigID:  <opaque string>
+  ArrayName:  <opaque string>
+  ListTTL:  <minutes until next check>
+
+  <name> <IP addr> <listening port> <table URL> <agent str> 
+  <statetime> <status UP | DOWN> <load factor> <cache size>
+
+2.1 Global Information
+
+  These are fields that describe the array itself and are not specific
+  to any one member of an array
+
+  Global information is terminated in the Proxy Array Membership Table
+  by a CR/LF/CR/LF.
+
+2.1.1 Version number
+
+  The version number for implementations of this specification is 
+  1.0
+
+2.1.2 ArrayEnabled
+
+  This field allows proxies to advertise their implementation of CARP 
+  v1 even if they are not members of a Proxy Array. 
+
+2.1.3 ConfigID
+
+  ConfigID is an opaque number no larger than 32bits similar to an 
+  ETag in HTTP 1.1.  It is used to track the current state of an 
+  Array table and may be used to match multiple yet independently 
+  published copies of the Proxy Array Membership Table.
+
+2.1.4 ArrayName
+
+  ArrayName is an opaque string which is used to provide a convenient
+  administrative name for a given array.
+
+2.1.5 ListTTL
+
+  ListTTL is the number of seconds for which an HTTP client entity 
+  should consider the current table image valid.  After ListTTL 
+  has expired, that client should retrieve a new copy of 
+  the Proxy Array Membership Table.
+
+Valloppillil                                           [Page 4]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0         26 Feb 1998
+
+2.2 Member Information
+
+  The following fields are published per member in an array and are 
+  separated by single spaces.  The end of an array member's record is
+  terminated by a CR/LF.
+
+2.2.1 Name
+
+  The name of the proxy server.  Typically this is the fully qualified
+  DNS name.  Downstream HTTP agents should use resolution of this name 
+  to determine how to connect to this proxy. 
+
+2.2.2 IP Addr
+
+  The IP address that other proxy servers within this array should use
+  to connect to this proxy server.  This is necessary for proxy 
+  servers which may be hosted on multi-hommed servers where requests 
+  are only accepted by one of the interfaces.
+
+  If this field is not published in the table, name resolution may be
+  used to find a proxy IP address
+
+2.2.3 Listening Port
+
+  The TCP port number this proxy is expecting requests on.
+
+2.2.4 Table URL
+
+  A URL which may be maintained by this proxy server on which a copy
+  of the array membership table can be found. 
+
+  This entry does not have to be unique per proxy server.  In such 
+  cases, the URL should be identical to the URL from which the 
+  downstream client requested this table.
+
+2.2.5 Agent String
+
+  An opaque string identifying the vendor / version of the 
+  proxy Server in the Array Membership Table.
+
+Valloppillil                                           [Page 5]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0         26 Feb 1998
+
+2.2.7 Statetime
+
+  How long a Proxy Server has been in its current state and has been
+  a member of this table.  This is useful for dynamic generation of 
+  the Array Membership Table where the host generating the table has
+  knowledge of the proxy's operational status.
+
+  This field is expressed in seconds and is an unsighed 32 bit value.
+
+2.2.8 Status
+
+  Status provides a simple text string indicating whether a member
+  proxy is currently able to handle requests (UP) or refused a 
+  connection when last contacted (DOWN).
+
+2.2.9 Load Factor
+
+  Load Factor is a relative amount of the total load for an array that
+  should be handled by any given member of the array.
+
+  Load Factor is specified as an integer and relative weight is 
+  computed against other integer values in the table.
+
+2.2.10 Cache Size
+
+  Cache size is an informational field that indicates the size of the
+  cache held by a particular member of an array. 
+
+  Cache size is specified in Megabytes (MB) and represents the 
+  maximum potential size of a disk cache for this server.
+ 
+3. Routing Function
+
+  Once an agent has a Proxy Array Membership Table.  It uses a 
+  mathematical hash function to determine which of the members of 
+  the array should be the receptacle of a particular URL request.
+
+  This routing function involves constructing n "scores" using a hash
+  of the request URL plus a hash of each of the k proxies in the Proxy
+  Array Membership Table.  
+
+  Both the URL and the proxy names are hashed in order to minimize the
+  disruption of target routes if a member of the target array can't
+  be contacted.
+
+  Hashes of the URL and proxy name are constructed using the algorithm
+  described in 3.1 and combined using the algorithm described in 3.2.
+
+Valloppillil                                           [Page 6]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0         26 Feb 1998
+
+3.1. Hash Function
+
+  The hash function outputs a 32 bit unsigned integers based on a 
+  zero-terminated ASCII input string.  The machine name and domain 
+  names of the URL, the protocol, and the machine names of each member 
+  proxy should be evaluated in lower case since that portion of the 
+  URL is case insensitive.
+
+  Because irreversibility and strong cryptographic features are 
+  unnecessary for this application, a very simple and fast hash 
+  function based on the bitwise left rotate operator is used.  
+
+  For (each char in URL):
+	URL_Hash +=  _rotl(URL_Hash, 19) + char ; 
+ 
+  Member proxy hashes are computed in a similar manner:
+
+  For (each char in MemberProxyName):
+	MemberProxy_Hash +=  _rotl(MemberProxy_Hash, 19) + char ; 
+
+  Becaues member names are often similar to each other, their hash
+  values are further spread across hash space via the following 
+  additional operations:
+
+  MemberProxy_Hash += MemberProxy_Hash * 0x62531965 ;
+  MemberProxy_Hash = _rotl (MemberProxy_Hash, 21) ;
+
+3.2. Hash Combination
+
+  Hashes are combined by first exclusive or-ing (XOR) the URL hash by 
+  the machine name and then multiplying by a constant and performing
+  a bitwise rotation.
+
+  All final and intermediate values are 32 bit unsigned integers.
+
+  Combined_Hash = (URL_hash ^ MemberProxy_Hash) ;  
+  Combined_Hash += Combined_Hash * 0x62531965 ; 
+  Combined_Hash = _rotl(Combined_Hash, 21) ; 
+  
+Valloppillil                                           [Page 7]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0         26 Feb 1998
+
+3.3. Load Factor
+
+  Support for array members with differing HTTP processing & caching
+  capacity is achieved by multiplying each of the combined hash values
+  by a Load Factor Multiplier.
+
+  The Load Factor Multiplier for an individual member is calculated by
+  taking each member's relative Load Factor and applying the
+  following formula:
+
+  The Load Factor Multiplier must be calculated from the smallest 
+  P_k to the largest P_k.  The sum of all P_k's must be 1.
+
+  For each proxy server 1,...,K, the Load Factor Multiplier, X_k, is
+  calculated iteratively as follows:
+
+  All X_n values are 32 bit floating point numbers.
+
+  X_1 = pow ((K*p_1), (1/K))
+
+  X_k = ([K-k+1] * [P_k - P_{k-1}])/(X_1 * X_2 * ... * X_{k-1})
+  X_k += pow ((X_{k-1}, {K-k+1})
+  X_k = pow (X_k, {1/(K-k+1)})
+
+  where:
+
+  X_k = Load Factor Multiplier for proxy k
+  K = number of proxies in an array
+  P_k = relative percent of the load that proxy k should handle 
+
+  This is then combined with the previously computed hashes as
+
+  Resultant_value = Combined_Hash * X_k
+
+
+3.4. Route Selection
+
+  The "score" for a particular combination of URL plus proxy is its
+  resultant value. Once the agent determines the scores of the 
+  K proxies, it routes the URL query to the proxy with the highest 
+  score.
+
+3.5. Member Failure Routing
+
+  If a proxy can not contact the designated member of a proxy array 
+  in order to forward an HTTP request, that proxy should route
+  the request to the second highest scoring proxy in the target array.
+
+4. Client-side implementation
+
+  CARP can be implemented on client-side HTTP browsers via the 
+  use of the Proxy AutoConfig file described in [1] and [2].
+
+5. Versioning
+
+  If a downstream proxy receives an Array Membership Table with a 
+  greater version # than that proxy is able to parse, it should 
+  fall back to simple proxy request routing to any administrator
+  defined upstream proxy server.
+
+Valloppillil                                           [Page 8]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0        26 Feb 1998
+
+6. Security Considerations
+
+  This draft does not discuss relevant security considerations.
+
+7. Open Issues
+
+8. Acknowledgements
+
+  The author would like to thank Brian Smith, Kip Compton, and 
+  Kerry Schwartz for their assistance in preparing this document.
+
+  Most of the architecture & design of CARP stem from work conducted
+  by Brian Smith at Microsoft Corp.
+
+9. References
+
+  [1] Luotonen, Ari., "Navigator Proxy Auto-Config File Format", 
+ Netscape Corporation, http://home.netscape.com/eng/mozilla/2.0/
+ relnotes/demo/proxy-live.html, March 1996.
+
+  [3] Wessels, Duane., "Internet Cache Protocol Version 2", http://ds.
+ internic.net/internet-drafts/draft-wessels-icp-v2-00.txt, March 21, 
+ 1997.
+
+  [4] Sharp Corporation., "Super Proxy Script", 
+ http://naragw.sharp.co.jp/sps/, August 9, 1996.
+
+  [5] Fielding, R., et. al, "Hypertext Transfer Protocol -- HTTP/1.1", 
+ RFC 2068, UC Irvine, January 1997.
+
+  [6] Valloppillil & Cohen, "Hierarchical HTTP Routing Protocol", 
+ http://ircache.nlanr.net/Cache/ICP/draft-vinod-icp-traffic-dist-00.txt,
+ April 21, 1997.
+
+  [7] Thaler, David & Ravishankar, Chinya.  "Using Name-Based 
+ Mappings to Increase Hit Rates,"  ACM/IEEE Transactions on Networking.
+ to appear.
+
+Valloppillil                                           [Page 9]
+
+INTERNET-DRAFT   Cache Array Routing Protocol v1.0       21 Aug  1997
+
+10.  Author Information
+
+    Vinod Valloppillil
+    Microsoft Corporation
+    One Microsoft Way
+    Redmond, WA 98052
+
+    Phone:  1.206.703.3460
+    Email:  VinodV@Microsoft.Com
+
+    Keith W. Ross
+    University of Pennsylvania
+    Department of Systems Engineering
+    Philadelphia, PA  19104
+
+    Phone:  1.215.898.6069 
+    Email:  Ross@UPenn.Edu
+
+Expires August 1998
@@ -0,0 +1,2332 @@
+INTERNET-DRAFT                                         M Cieslak
+<draft-wilson-wrec-wccp-v2-01.txt>                     D Forster
+                                                       G Tiwana
+                                                       R Wilson
+                                                       Cisco Systems
+                                                       03 Apr 2001
+                                                       Expires Oct 2001
+
+                 Web Cache Communication Protocol V2.0
+
+Status of this Memo
+
+   This document is an Internet-Draft and is in full conformance with all
+   provisions of Section 10 of RFC2026.
+
+   Internet-Drafts are working documents of the Internet Engineering Task
+   Force (IETF), its areas, and its working groups. Note that other
+   groups may also distribute working documents as Internet-Drafts.
+
+   Internet-Drafts are draft documents valid for a maximum of six months
+   and may be updated, replaced, or obsoleted by other documents at any
+   time. It is inappropriate to use Internet-Drafts as reference material
+   or to cite them other than as "work in progress".
+
+   The list of current Internet-Drafts can be accessed at
+   http://www.ietf.org/ietf/lid-abstracts.txt.
+
+   The list of Internet-Draft Shadow Directories can be accessed at
+   http://www.ietf.org/shadow.html.
+
+1. Abstract
+
+   This document describes version 2.0 of the Web Cache Communication
+   Protocol (WCCP). The WCCP V2.0 protocol specifies interactions between
+   one or more routers and one or more web-caches. The purpose of the
+   interaction is to establish and maintain the transparent redirection
+   of selected types of traffic flowing through a group of routers. The
+   selected traffic is redirected to a group of web-caches with the aim
+   of optimising resource usage and lowering response times.
+
+   The protocol does not specify any interaction between the web-caches
+   within a group or between a web-cache and a web-server.
+
+2. Definitions
+
+   Assignment Method
+
+      The method by which redirected packets are distributed between
+
+
+
+                                                               [Page 1]
+
+web-caches.
+
+   Designated Web-Cache.
+
+      The web-cache in a web-cache farm responsible for dictating to the
+      router or routers how redirected traffic should be distributed between
+      the members of the farm.
+
+   Forwarding Method
+
+      The method by which redirected packets are transported from router to
+      web-cache.
+
+   Packet Return Method
+
+      The method by which packets redirected to a web-cache are returned to
+      a router for normal forwarding.
+
+   Redirection Hash Table.
+
+      A 256-bucket hash table maintained by the router or routers. This
+      table maps the hash index derived from a packet to be redirected to
+      the IP address of a destination web-cache.
+
+   Service Group
+
+      A group of one or more routers plus one or more web-caches working
+      together in the redirection of traffic whose characteristics are part
+      of the Service Group definition.
+
+   Transparent Redirection.
+
+      Transparent redirection is a technique used to deploy caching without
+      the need for reconfiguration of clients or servers. It involves the
+      interception and redirection of traffic to one or more web-caches by a
+      router or switch transparently to the end points of the traffic flow.
+
+   Usable Web-Cache.
+
+      From the viewpoint of a router a web-cache is considered a usable
+      member of a Service Group when it has sent that web-cache a
+      WCCP2_I_SEE_YOU message and has received in response a WCCP2_HERE_I_AM
+      message with a valid "Receive ID".
+
+   Web-Cache Farm.
+
+      One or more web-caches associated with a router or routers.
+
+
+
+
+                                                               [Page 2]
+
+3. Introduction
+
+3.1 Protocol Overview
+
+   WCCP V2.0 defines mechanisms to allow one or more routers enabled for
+   transparent redirection to discover, verify, and advertise
+   connectivity to one or more web-caches.
+
+   Having established connectivity the routers and web-caches form
+   Service Groups to handle the redirection of traffic whose
+   characteristics are part of the Service Group definition.
+
+   The protocol provides the means to negotiate the specific method
+   used for load distribution among web-caches and also the method used
+   to transport traffic between router and cache.
+
+   A single web-cache within a Service Group is elected as the designated
+   web-cache. It is the responsibility of the designated web-cache to
+   provide routers with the data which determines how redirected traffic
+   is distributed between the web-caches in the Service Group.
+
+3.2 WCCP V2.0 enhancements
+
+   WCCP V2.0 supports the following enhancements to the WCCP V1.0
+   protocol.
+
+   * Multi-Router Support.
+   WCCP V2.0 allows a farm of web-caches to be attached to more than one
+   router.
+
+   * Multicast Support.
+   WCCP V2.0 supports multicasting of protocol messages between
+   web-caches and routers.
+
+   * Improved Security.
+   WCCP V2.0 provides optional authentication of protocol packets
+   received by web-caches and routers.
+
+   * Support for redirection of non-HTTP traffic.
+   WCCP V2.0 supports the redirection of traffic other than HTTP traffic
+   through the concept of Service Groups.
+
+   * Packet return.
+   WCCP V2.0 allows a web-cache to decline to service a redirected packet
+   and to return it to a router to be forwarded. The method by which
+   packets are returned to a router is negotiable.
+
+
+
+
+
+                                                               [Page 3]
+
+* Alternative Hashing.
+   WCCP V2.0 allows the designated web-cache to mark individual buckets
+   in the Redirection Hash Table for a secondary hash. This allows the
+   traffic being hashed to a particular bucket to be distributed across
+   the members of a Service Group.
+
+   * Multiple Forwarding Methods
+   WCCP V2.0 allows individual web-caches to negotiate the method by
+   which packets are forwarded to a web-cache from a router. Packets
+   may now be forwarded unencapsulated using a Layer 2 destination
+   address rewrite.
+
+   * Multiple Assignment Methods
+   WCCP V2.0 allows the designated web-cache to negotiate the method by which
+   packets are distributed between the web-caches in a service group.
+   Packets may now be assigned using a hashing scheme or a masking scheme.
+
+   * Command and Status Information
+   WCCP V2.0 includes a mechanism to allow a web-cache to pass a command
+   to the routers in a Service Group. The same mechanism can be employed
+   by the routers to pass status information to the web-caches in a
+   Service Group.
+
+4. Protocol Description
+
+4.1 Joining a Service Group
+
+   A web-cache joins and maintains its membership of a Service Group by
+   transmitting a WCCP2_HERE_I_AM message to each router in the Group at
+   HERE_I_AM_T (10) second intervals. This may be by unicast to each
+   router or multicast to the configured Service Group multicast
+   address. The Web Cache Info component in the WCCP2_HERE_I_AM message
+   identifies the web-cache by IP address. The Service Info component of
+   the WCCP2_HERE_I_AM message identifies and describes the Service Group in
+   which the web-cache wishes to participate.
+
+   A router responds to a WCCP2_HERE_I_AM message with a WCCP2_I_SEE_YOU
+   message. If the WCCP2_HERE_I_AM message was unicast then the router will
+   respond immediately with a unicast WCCP2_I_SEE_YOU message. If the
+   WCCP2_HERE_I_AM message was multicast the router will respond via the
+   scheduled multicast WCCP2_I_SEE_YOU message for the Service Group.
+
+   A router responds to multicast web-cache members of a Service Group
+   using a multicast WCCP2_I_SEE_YOU message transmitted at 9 second
+   intervals with a 10% jitter.
+
+   The Router Identity component in a WCCP2_I_SEE_YOU message includes a list
+   of the web-caches to which the packet is addressed. A web-cache not
+
+
+
+                                                               [Page 4]
+
+in the list should discard the WCCP2_I_SEE_YOU message.
+
+4.2 Describing a Service Group
+
+   The Service Info component of a WCCP2_HERE_I_AM message describes the
+   Service Group in which a web-cache wishes to participate. A Service
+   Group is identified by Service Type and Service ID. There are two
+   types of Service Group:
+
+   * Well Known Services
+   * Dynamic Services.
+
+   Well Known Services are known by both routers and web-caches and do
+   not require a description other than a Service ID.
+
+   In contrast Dynamic Services must be described to a router. A router
+   may be configured to participate in a particular Dynamic Service
+   Group, identified by Service ID, without any knowledge of the
+   characteristics of the traffic associated with the Service Group. The
+   traffic description is communicated to the router in the
+   WCCP2_HERE_I_AM message of the first web-cache to join the Service
+   Group. A web-cache describes a Dynamic Service using the Protocol,
+   Service Flags and Port fields of the Service Info component. Once a
+   Dynamic Service has been defined a router will discard any subsequent
+   WCCP2_HERE_I_AM message which contains a conflicting description. A
+   router will also discard a WCCP2_HERE_I_AM message which describes a
+   Service Group for which the router has not been configured.
+
+4.3 Establishing Two-Way Connectivity
+
+   WCCP V2.0 uses a "Receive ID" to verify two-way connectivity between a
+   router and a web-cache.  The Router Identity Info component of a
+   WCCP2_I_SEE_YOU message contains a "Receive ID" field. This field is
+   maintained separately for each Service Group and its value is
+   incremented each time the router sends a WCCP2_I_SEE_YOU message to
+   the Service Group.
+
+   The "Receive ID" sent by a router is reflected back by a web-cache in
+   the Web-Cache View Info component of a WCCP2_HERE_I_AM message. A
+   router checks the value of the "Receive ID" in each WCCP2_HERE_I_AM
+   message received from a Service Group member. If the value does not
+   match the "Receive ID" in the last WCCP2_I_SEE_YOU message sent to
+   that member the message is discarded.
+
+   A router considers a web-cache to be a usable member of a Service
+   Group only after it has sent that web-cache a WCCP2_I_SEE_YOU message
+   and received a WCCP2_HERE_I_AM message with a valid "Receive ID" in
+   response.
+
+
+
+                                                               [Page 5]
+
+4.4 Negotiating the Forwarding Method
+
+   A web-cache and router may negotiate the method by which packets are
+   forwarded to the web-cache by the router.
+
+   This negotiation is per web-cache, per Service Group. Thus web-caches
+   participating in the same Service Group may negotiate different
+   forwarding methods with the Service Group routers.
+
+   A router will advertise the supported forwarding methods for a Service
+   Group using the optional Capabilities Info component of the
+   WCCP2_I_SEE_YOU message. The absence of such an advertisement implies
+   the router supports the default GRE encapsulation method only.
+
+   A web-cache will inspect the forwarding method advertisement in the
+   first WCCP2_I_SEE_YOU message received from a router for a particular
+   Service Group. If the router does not advertise a method supported by
+   the web-cache then the web-cache will abort its attempt to join the
+   Service Group. Otherwise the web-cache will pick one method from those
+   advertised by the router and specify that in the optional Capabilities
+   Info component of its next WCCP2_HERE_I_AM message. Absence of a
+   forwarding method advertisement in a WCCP2_HERE_I_AM message implies
+   the cache is requesting the default GRE encapsulation method.
+
+   A router will inspect the forwarding method selected by a web-cache in
+   the WCCP2_HERE_I_AM message received in response to a WCCP2_I_SEE_YOU
+   message. If the selected method is not supported by the router the
+   router will ignore the WCCP2_HERE_I_AM message. If the forwarding
+   method is supported the router will accept the web-cache as usable and
+   add it to the Service Group.
+
+4.5 Negotiating the Assignment Method
+
+   A web-cache and router may negotiate the method by which packets are
+   distributed between the web-caches in a Service Group.
+
+   The negotiation is per Service. Thus web-caches participating in
+   several Service Groups may negotiate a different assignment method for
+   each Service Group.
+
+   A router will advertise the supported assignment methods for a
+   Service Group using the optional Capabilities Info component of the
+   WCCP2_I_SEE_YOU message. The absence of such an advertisement implies
+   the router supports the default Hash assignment method only.
+
+   A web-cache will inspect the assignment method advertisement in the
+   first WCCP2_I_SEE_YOU message received from a router for the Service
+   Group. If the router does not advertise a method supported by the
+
+
+
+                                                               [Page 6]
+
+web-cache then the web-cache will abort its attempt to join the
+   Service Group. Otherwise the web-cache will pick one method from those
+   advertised by the router and specify that in the optional Capabilities
+   Info component of its next WCCP2_HERE_I_AM message. Absence of an
+   assignment method advertisement in a WCCP2_HERE_I_AM message implies
+   the cache is requesting the default Hash assignment method.
+
+   A router will inspect the assignment method selected by a web-cache in
+   the WCCP2_HERE_I_AM message received in response to a WCCP2_I_SEE_YOU
+   message. If the selected method is not supported by the router the
+   router will ignore the WCCP2_HERE_I_AM message. If the assignment
+   method is supported the router will accept the web-cache as usable and
+   add it to the Service Group.
+
+4.5 Negotiating the Packet Return Method
+
+   A web-cache and router may negotiate the method by which packets are
+   returned from a web-cache to a router for normal forwarding.
+
+   The negotiation is per Service. Thus web-caches participating in
+   several Service Groups may negotiate a different packet return method
+   for each Service Group.
+
+   A router will advertise the supported packet return methods for a
+   Service Group using the optional Capabilities Info component of the
+   WCCP2_I_SEE_YOU message. The absence of such an advertisement implies
+   the router supports the default GRE packet return method only.
+
+   A web-cache will inspect the packet return method advertisement in the
+   first WCCP2_I_SEE_YOU message received from a router for the Service
+   Group. If the router does not advertise a method supported by the
+   web-cache then the web-cache will abort its attempt to join the
+   Service Group. Otherwise the web-cache will pick one method from those
+   advertised by the router and specify that method in the optional
+   Capabilities Info component of its next WCCP2_HERE_I_AM
+   message. Absence of a packet return method advertisement in a
+   WCCP2_HERE_I_AM message implies the cache is requesting the default
+   GRE packet return method.
+
+   A router will inspect the packet return method selected by a web-cache
+   in the WCCP2_HERE_I_AM message received in response to a
+   WCCP2_I_SEE_YOU message. If the selected method is not supported by
+   the router the router will ignore the WCCP2_HERE_I_AM message. If the
+   packet return method is supported the router will accept the web-cache
+   as usable and add it to the Service Group.
+
+
+
+
+
+
+                                                               [Page 7]
+
+4.6 Advertising Views of the Service Group
+
+   Each router advertises its view of a Service Group via the Router View
+   Info component in the WCCP2_I_SEE_YOU message it sends to web-caches.
+   This component includes a list of the useable web-caches in the
+   Service Group as seen by the router and a list of the routers in the
+   Service Group as reported in WCCP2_HERE_I_AM messages from
+   web-caches. A change number in the component is incremented if the
+   Service Group membership has changed since the last WCCP2_I_SEE_YOU
+   message sent by the router.
+
+   Each web-cache advertises its view of the Service Group via the Web
+   Cache View Info component in the WCCP2_HERE_I_AM message it sends to
+   routers in the Service Group. This component includes the list of
+   routers that have sent the web-cache a WCCP2_I_SEE_YOU message and a
+   list of web-caches learnt from the WCCP2_I_SEE_YOU messages. The Web
+   Cache View Info component also includes a change number which is
+   incremented each time Service Group membership information changes.
+
+4.7 Security
+
+   WCCP V2.0 provides a security component in each protocol message to
+   allow simple authentication.  Two options are supported:
+
+   * No Security (default)
+   * MD5 password security
+
+   MD5 password security requires that each router and web-cache wishing
+   to join a Service Group be configured with the Service Group
+   password. Each WCCP protocol packet sent by a router or web-cache for
+   that Service Group will contain in its security component the MD5
+   checksum of the WCCP protocol message (including the WCCP message
+   header) and a Service Group password. Each web-cache or router in the
+   Service Group will authenticate the security component in a received
+   WCCP message immediately after validating the WCCP message header.
+   Packets failing authentication will be discarded.
+
+4.8 Distribution of Traffic Assignments
+
+   WCCP V2.0 allows the traffic assignment method to be negotiated. There
+   are two types of information to be communicated depending on the
+   assignment method:
+
+   * Hash Tables
+   * Mask/Value Sets
+
+
+
+
+
+
+                                                               [Page 8]
+
+4.8.1 Hash Tables
+
+   When using hash assignment each router uses a 256-bucket Redirection
+   Hash Table to distribute traffic for a Service Group across the member
+   web-caches. It is the responsibility of the Service Group's designated
+   web-cache to assign each router's Redirection Hash Table.
+
+   The designated web-cache uses a WCCP2_REDIRECT_ASSIGNMENT message to
+   assign the routers' Redirection Hash Tables. This message is
+   generated following a change in Service Group membership and is sent
+   to the same set of addresses to which the web-cache sends WCCP2_HERE_I_AM
+   messages. The designated web-cache will wait 1.5 HERE_I_AM_T
+   seconds following a change before generating the message in order to
+   allow the Service Group membership to stabilise.
+
+   The Redirection Hash Tables can be conveyed in either an Assignment
+   Info Component or an Alternate Assignment Component within a
+   WCCP2_REDIRECT_ASSIGNMENT.  Both components contain an Assignment
+   Key. This will be reflected back to the designated web-cache in
+   subsequent WCCP2_I_SEE_YOU messages from the routers in the Service
+   Group. A WCCP2_REDIRECT_ASSIGNMENT may be repeated after HERE_I_AM_T
+   seconds if inspection of WCCP2_I_SEE_YOU messages indicates a router
+   has not received an assignment.
+
+   A router will flush its Redirection Hash Table if a
+   WCCP2_REDIRECT_ASSIGNMENT is not received within 5 HERE_I_AM_T seconds
+   of a Service Group membership change.  A router will flush its
+   Redirection Hash Table if it receives a WCCP2_REDIRECT_ASSIGNMENT
+   message in which it is not listed.
+
+   The designated web-cache lists the web-caches to which traffic should
+   be distributed in either an Assignment Info Component or an Alternate
+   Assignment Component within a WCCP2_REDIRECT_ASSIGNMENT message. Only
+   those web-caches seen by every router in the Service Group are
+   included.
+
+4.8.2 Mask/Value Sets
+
+   When using mask assignment each router uses masks and a table of
+   values to distribute traffic for a Service Group across the member
+   web-caches. It is the responsibility of the Service Group's designated
+   web-cache to assign each router's mask/value sets.
+
+   The designated web-cache uses the Alternate Assignment Component in a
+   WCCP2_REDIRECT_ASSIGNMENT message to assign the routers' mask/value
+   set. This message is generated following a change in Service Group
+   membership and is sent to the same set of addresses to which the
+   web-cache sends WCCP2_HERE_I_AM messages. The designated web-cache
+
+
+
+                                                               [Page 9]
+
+will wait 1.5 HERE_I_AM_T seconds following a change before generating
+   the message in order to allow the Service Group membership to
+   stabilise.
+
+   The Alternate Assignment Info component of the
+   WCCP2_REDIRECT_ASSIGNMENT contains an Assignment Key. This will be
+   reflected back to the designated web-cache in subsequent
+   WCCP2_I_SEE_YOU messages from the routers in the Service Group. A
+   WCCP2_REDIRECT_ASSIGNMENT message may be repeated after HERE_I_AM_T
+   seconds if inspection of WCCP2_I_SEE_YOU messages indicates a router
+   has not received an assignment.
+
+   A router will flush its mask/value set if a WCCP2_REDIRECT_ASSIGNMENT
+   is not received within 5 HERE_I_AM_T seconds of a Service Group
+   membership change. A router will flush its mask/value set if it
+   receives a WCCP2_REDIRECT_ASSIGNMENT in which it is not listed.
+
+   The designated web-cache lists the web-caches to which traffic should
+   be distributed in the Alternate Assignment Info component of the
+   WCCP2_REDIRECT_ASSIGNMENT message. Only those web-caches seen by every
+   router in the Service Group are included.
+
+4.9  Electing the Designated Web-cache
+
+   Election of the designated web-cache will take place once a Service
+   Group membership has stabilised following a change. The designated
+   web-cache must be receiving a WCCP2_I_SEE_YOU message from every
+   router in the Service Group.
+
+   Election of the designated web-cache is not part of the WCCP
+   protocol. However it is recommended that the web-cache with the lowest
+   IP address is selected as designated web-cache for a Service Group.
+
+4.10 Traffic Interception
+
+   A router will check packets passing through it against its set of
+   Service Group descriptions. The Service Group descriptions are
+   checked in priority order. A packet which matches a Service Group
+   description is a candidate for redirection to a web-cache in the
+   Service Group.
+
+   A router will not redirect a packet with a source IP address matching
+   any web-cache in the Service Group.
+
+
+
+
+
+
+
+
+                                                              [Page 10]
+
+4.11 Traffic Redirection
+
+4.11.1 Redirection with Hash Assignment
+
+   Redirection with hash assignment is a two-stage process. In the first
+   stage a primary key is formed from the packet (as defined by the
+   Service Group description) and hashed to yield an index into the
+   Redirection Hash Table.
+
+   If the Redirection Hash Table entry contains an unflagged web-cache
+   index then the packet is redirected to that web-cache. If the bucket
+   is unassigned the packet is forwarded normally. If the bucket is
+   flagged as requiring a secondary hash then a secondary key is formed
+   (as defined by the Service Group description) and hashed to yield an
+   index into the Redirection Hash Table. If the secondary entry contains
+   a web-cache index then the packet is directed to that web-cache. If the
+   entry is unassigned the packet is forwarded normally.
+
+4.11.2 Redirection with Mask Assignment
+
+   The first step in redirection using the mask assignment method is to
+   perform a bitwise AND operation between the mask from the first
+   mask/value set in the Service Group definition and the contents of the
+   packet. The output of this operation is the set of fields in the packet
+   which will be used for value matching. The selected fields from the
+   packet are then compared against each entry in the list of values for
+   that mask/value set. If a match is found the packet is redirected to
+   the web-cache associated with the value entry. If no match is found
+   the process is repeated for each mask/value set defined for the
+   Service Group.  If, after trying all of the mask/value sets defined
+   for the Service Group, no match is found, the packet is forwarded
+   normally.
+
+   Mask/value sets are processed in the order in which they are
+   presented in the Alternate Assignment component. Value elements are
+   compared in the order in which they appear in the mask/value set of which
+   they are part.
+
+4.12 Traffic Forwarding
+
+   WCCP allows the negotiation of the forwarding method between router
+   and web-cache (See Negotiating the Forwarding Method). The currently
+   defined forwarding methods are:
+
+   * GRE Encapsulated
+   * Unencapsulated with L2 rewrite
+
+
+
+
+
+                                                              [Page 11]
+
+4.12.1 Forwarding with GRE Encapsulation
+
+   Redirected packets are encapsulated in a new IP packet with a GRE [1]
+   header followed by a four-octet Redirect header.
+
+   The GRE encapsulation uses the simple four-octet GRE header with the
+   two Flags and Version octets set to zero and a Protocol Type of
+   0x883E.
+
+   The Redirect header is as follows:
+
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |D|A| Reserved  |  Service ID   |  Alt Bucket   |  Pri Bucket   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   D       Dynamic Service
+           0: Well known service
+           1: Dynamic service
+
+   A       Alternative bucket used
+           0: Primary bucket used
+           1: Alternative bucket used
+
+   Service ID
+
+      Service Group identifier
+
+   Alt Bucket
+
+      Alternative bucket index used to redirect the packet. Only valid
+      for hash assignment.
+
+   Pri Bucket
+
+      Primary bucket index used to redirect the packet. Only valid for hash
+      assignment.
+
+4.12.2 Forwarding with L2 Rewrite
+
+   Redirected packets are not encapsulated. The router replaces the
+   packet's destination MAC address with the MAC address of the target
+   web-cache.
+
+   This forwarding method requires that the target web-cache
+   be directly-connected to the router at Layer 2. A router will not
+   allow a web-cache which is not directly attached to negotiate this
+   forwarding method.
+
+
+
+
+                                                              [Page 12]
+
+4.13 Packet Return
+
+   WCCP V2.0 allows a web-cache to decline a redirected packet and return
+   it to a router for normal forwarding as specified by the packet's
+   destination IP address. The method by which packets are returned from
+   router to cache is a matter for negotiation (see Negotiating the
+   Packet Return Method).
+
+   When a router receives a returned packet it must not attempt to
+   redirect that packet back to a web-cache. Two methods are available to
+   prevent any further redirection:
+
+   * Interface Configuration
+   * Encapsulation
+
+   The interface configuration method requires that a router is
+   configured to inhibit redirection of packets arriving over interfaces
+   connected to web-caches. Redirection may be disabled for all packets
+   arriving on an interface or for packets where the source MAC
+   address is that of a web-cache. This mechanism is efficient but is
+   topology dependant and thus may not always be suitable. In this case
+   the packet return method in use is L2.
+
+   The encapsulation method requires a web-cache to send returned packets
+   to a router with encapsulation. Returned packets are encapsulated in a
+   GRE packet [1] with a Protocol Type of 0x883E and contain the original
+   Redirect Header or a null Redirect Header if none was present in the
+   original redirected packet. The receiving router removes the GRE
+   encapsulation from the packets and forwards them without attempting to
+   redirect. The packet return method used in this case is GRE.
+
+4.14 Querying Cache Time-Out
+
+   If a router does not receive a WCCP2_HERE_I_AM message from a Service
+   Group member for 2.5 * HERE_I_AM_T seconds it will query the member by
+   unicasting a WCCP2_REMOVAL_QUERY message to it.  The target Service
+   Group member should respond by sending a series of 3 identical
+   WCCP2_HERE_I_AM messages, each separated by HERE_I_AM_T/10 seconds.
+
+   If a router does not receive a WCCP2_HERE_I_AM message from a Service
+   Group member for 3 * HERE_I_AM_T seconds it will consider the member
+   to be unusable and remove it from the Service Group. The web-cache
+   will no longer appear in the Router View Info component of the
+   WCCP2_I_SEE_YOU message.
+
+   The web-cache will be purged from the assignment data for the Service
+   Group.
+
+
+
+
+                                                              [Page 13]
+
+4.15 Command and Status Information
+
+   WCCP V2.0 includes a mechanism to allow web-caches to send commands to
+   routers within a service group. The same mechanism can be used by the
+   routers to provide status information to web-caches.
+
+   The mechanism is implemented by the Command Extension component. This
+   component is included in the WCCP2_HERE_I_AM message from a web-cache
+   passing commands to routers in a Service Group.
+
+   If a router needs to send status information to a web-cache it will
+   include a command in the Command Extension component within its own
+   WCCP2_I_SEE_YOU message. That command will indicate the type of status
+   information being carried.
+
+5. Protocol Messages
+
+   Each WCCP protocol message is carried in a UDP packet with a
+   destination port of 2048. There are four WCCP V2.0 messages:
+
+   * Here I AM
+   * I See You
+   * Redirect Assign
+   * Removal Query
+
+5.1 'Here I Am' Message
+
+   +--------------------------------------+
+   |         WCCP Message Header          |
+   +--------------------------------------+
+   |       Security Info Component        |
+   +--------------------------------------+
+   |        Service Info Component        |
+   +--------------------------------------+
+   |  Web-Cache Identity Info Component   |
+   +--------------------------------------+
+   |    Web-Cache View Info Component     |
+   +--------------------------------------+
+   | Capability Info Component (optional) |
+   +--------------------------------------+
+   |Command Extension Component (optional)|
+   +--------------------------------------+
+
+
+
+
+
+
+
+
+
+                                                              [Page 14]
+
+5.2 'I See You' Message
+
+   +--------------------------------------+
+   |         WCCP Message Header          |
+   +--------------------------------------+
+   |       Security Info Component        |
+   +--------------------------------------+
+   |        Service Info Component        |
+   +--------------------------------------+
+   |    Router Identity Info Component    |
+   +--------------------------------------+
+   |      Router View Info Component      |
+   +--------------------------------------+
+   |       Assignment Info Component      |
+   |                OR                    |
+   |        Assignment Map Component      |
+   +--------------------------------------+
+   | Capability Info Component (optional) |
+   +--------------------------------------+
+   |Command Extension Component (optional)|
+   +--------------------------------------+
+
+5.3 'Redirect Assign' Message
+
+   +--------------------------------------+
+   |         WCCP Message Header          |
+   +--------------------------------------+
+   |       Security Info Component        |
+   +--------------------------------------+
+   |        Service Info Component        |
+   +--------------------------------------+
+   |      Assignment Info Component       |
+   |                OR                    |
+   |    Alternate Assignment Component    |
+   +--------------------------------------+
+
+5.4 'Removal Query' Message
+
+   +--------------------------------------+
+   |         WCCP Message Header          |
+   +--------------------------------------+
+   |      Security Info Component         |
+   +--------------------------------------+
+   |       Service Info Component         |
+   +--------------------------------------+
+   |     Router Query Info Component      |
+   +--------------------------------------+
+
+
+
+
+                                                              [Page 15]
+
+5.5 WCCP Message Header
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                              Type                             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |           Version             |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_HERE_I_AM (10)
+      WCCP2_I_SEE_YOU (11)
+      WCCP2_REDIRECT_ASSIGN (12)
+      WCCP2_REMOVAL_QUERY (13)
+
+   Version
+
+      0x200
+
+   Length
+
+      Length of the WCCP message not including the WCCP Message Header.
+
+
+5.6 Message Components
+
+   Each WCCP message comprises a WCCP Message Header followed by a number of
+   message components. The defined components are:
+
+   * Security Info
+   * Service Info
+   * Router Identity Info
+   * Web-Cache Identify Info
+   * Router View Info
+   * Web-Cache View Info
+   * Assignment Info
+   * Router Query Info
+   * Capabilities Info
+   * Alternate Assignment
+   * Assignment Map
+   * Command Extension
+
+   Components are padded to align on a four-octet boundary. Each
+   component has a 4-octet header specifying the component type and
+   length. Note that the length value does not include the 4-octet
+   component header.
+
+
+
+                                                              [Page 16]
+
+5.6.1 Security Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |             Type              |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Security Option                       |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Security Implementation                   |
+   |                               .                               |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_SECURITY_INFO (0)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Security Option
+
+      WCCP2_NO_SECURITY (0)
+      WCCP2_MD5_SECURITY (1)
+
+   Security Implementation
+
+      If Security Option has the value WCCP2_NO_SECURITY then this field is
+      not present. If Security Option has the value WCCP2_MD5_SECURITY this
+      is a 16-octet field containing the MD5 checksum of the WCCP message and
+      the Service Group password. The maximum password length is 8 octets.
+
+      Prior to calculating the MD5 checksum the password should be padded
+      out to 8 octets with trailing zeros and the Security Implementation
+      field of the Security Option set to zero. The MD5 checksum is calculated
+      using the 8 octet padded password and the WCCP message (including the
+      WCCP Message Header).
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 17]
+
+5.6.2 Service Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |             Type              |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   | Service Type  |  Service ID   |  Priority     |  Protocol     |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Service Flags                         |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |           Port 0              |         Port 1                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |           Port 6              |         Port 7                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_SERVICE_INFO (1)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Service Type
+
+      WCCP2_SERVICE_STANDARD (0).
+      Service is a well known service and is described by the Service ID.
+      All fields other than Service ID must be zero.
+
+      WCCP2_SERVICE_DYNAMIC (1).
+      Service is defined by the Protocol, Service Flags and Port fields.
+
+   Service ID
+
+      Service number. A number in the range 0-255. For well known services
+      numbers in the range 0-50 are reserved. The numbers currently defined
+      for well known services are:
+
+      0x00    HTTP
+
+
+
+
+
+
+
+                                                              [Page 18]
+
+Priority
+
+      Service priority. The lowest priority is 0, the highest is
+      255. Packets for redirection are matched against Services in priority
+      order, highest first. Well known services have a priority of 240.
+
+   Protocol
+
+      IP protocol identifier
+
+   Service Flags
+
+      0x0001  Source IP Hash
+      0x0002  Destination IP Hash
+      0x0004  Source Port Hash
+      0x0008  Destination Port Hash
+      0x0010  Ports Defined.
+      0x0020  Ports Source.
+      0x0100  Source IP Alternative Hash
+      0x0200  Destination IP Alternative Hash
+      0x0400  Source Port Alternative Hash
+      0x0800  Destination Port Alternative Hash
+
+      The primary hash flags (Source IP Hash, Destination IP Hash, Source
+      Port Hash, Destination Port Hash) determine the key which will be
+      hashed to yield the Redirection Hash Table primary bucket index. If
+      only the Destination IP Hash flag is set then the packet destination
+      IP address is used as the key. Otherwise if any of the primary hash
+      flags are set then the key is constructed by XORing the appropriate
+      fields from the packet with the key (which has an initial value of
+      zero).
+
+      The key is hashed using the following algorithm:
+
+          ulong hash = key;
+          hash ^= hash >> 16;
+          hash ^= hash >> 8;
+          return(hash & 0xFF);
+
+      If alternative hashing has been enabled for the primary bucket (see
+      Assignment Info Component) the alternate hash flags (Source IP
+      Alternative Hash, Destination IP Alternative Hash, Source Port
+      Alternative Hash, Destination Port Alternative Hash) determine the
+      key which will be hashed to yield a secondary bucket index. The key
+      is constructed by XORing the appropriate fields from the packet with
+      a key (which has an initial value of zero).
+
+
+
+
+
+                                                              [Page 19]
+
+Port 0-7
+
+      Zero terminated list of UDP or TCP port identifiers. Packets will be
+      matched against this set of ports if the Ports Defined flag is set. If
+      the Ports Source flag is set the port information refers to a source
+      port, if clear the port information refers to a destination port.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 20]
+
+5.6.3 Router Identity Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |               Type            |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Router ID Element                       |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Sent To Address                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                      Number Received From                     |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Received From Address 0                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Received From Address n                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_ROUTER_ID_INFO (2)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Router ID Element
+
+      Element containing the router's identifying IP address and Receive
+      ID. The IP address must be a valid, reachable address for the router.
+
+   Sent To Address
+
+      IP address to which the target web-cache sent the WCCP2_HERE_I_AM
+      message. When this component is present in a unicast WCCP2_I_SEE_YOU
+      message it will contain the IP address that the target web-cache
+      used. When present in a multicast WCCP2_I_SEE_YOU message it will
+      contain the Service Group multicast address.
+
+   Number Received From
+
+      The number of web-caches to which this message is directed. When using
+      multicast addressing it may be less than the number of caches which
+
+
+
+                                                              [Page 21]
+
+actually see the message.
+
+   Received From Address 0-n
+
+      List of the IP addresses of web-caches to which this message is
+      directed. When using multicast addressing it may be a subset of the
+      caches which actually see the message.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 22]
+
+5.6.4 Web-Cache Identity Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |              Type             |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                  Web-Cache Identity Element                   |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_WC_ID_INFO (3)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Web-Cache Identity Element
+
+      Element containing the web-cache IP address and Redirection Hash Table
+      mapping.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 23]
+
+5.6.5 Router View Info Component
+
+   This represents a router's view of the Service Group.
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |              Type             |         Length                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Member Change Number                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Assignment Key                         |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Number of Routers                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                            Router 0                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                            Router n                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Number of Web-Caches                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Web-Cache Identity Element 0               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Web-Cache Identity Element n               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_RTR_VIEW_INFO (4)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Member Change Number
+
+      Incremented each time there is a change in Service Group membership.
+
+
+
+                                                              [Page 24]
+
+Assignment Key
+
+      Assignment Key element received in the last WCCP2_REDIRECT_ASSIGNMENT
+      message. Used by the designated web-cache to verify that an assignment
+      has been executed.
+
+   Number of Routers
+
+      Number of routers in the Service Group
+
+   Router 0-n
+
+      IP addresses of routers in the Service Group. This list is constructed
+      from routers reported by web-caches via WCCP2_HERE_I_AM messages. Note
+      that a router does not include itself in the list unless it has also
+      been reported via a WCCP2_HERE_I_AM message.
+
+   Number of Web-Caches
+
+      Number of useable web-caches in the Service Group
+
+   Web-Cache Identity Element 0-n
+
+      Identity elements of useable web-caches in Service Group. This list
+      contains web-caches that have sent the router a WCCP2_HERE_I_AM
+      message with a valid "Received ID".
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 25]
+
+5.6.6 Web Cache View Info Component
+
+   This represents a web-cache's view of the Service Group.
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |           Type                |      Length                   |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Change Number                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Number of Routers                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Router ID Element 0                    |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Router ID Element n                    |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Number of Web-Caches                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Web Cache address 0                     |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Web Cache address n                     |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_WC_VIEW_INFO (5)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Change Number
+
+      Incremented each time there is a change in the view.
+
+   Number of Routers
+
+      Number of routers in the Service Group
+
+
+
+
+                                                              [Page 26]
+
+Router ID Element 0-n
+
+      List of elements containing the identifying IP address for each router
+      in the Service Group and the last "Received ID" from each.
+
+   Number of Web-Caches
+
+      Number of web-caches in the Service Group
+
+   Web Cache address 0-n
+
+      List of web-cache IP addresses learnt from WCCP2_I_SEE_YOU messages.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 27]
+
+5.6.7 Assignment Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |              Type             |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Assignment Key                        |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Number of Routers                       |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Router Assignment Element 0                |
+   |                              .                                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                              .                                |
+   |                              .                                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Router Assignment Element n                |
+   |                              .                                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Number of Web-Caches                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Web-Cache 0                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                              .                                |
+   |                              .                                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Web-Cache n                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |    Bucket 0   |  Bucket 1     |   Bucket 2    |   Bucket 3    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |    Bucket 252 |  Bucket 253   |   Bucket 254  |   Bucket 255  |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_REDIRECT_ASSIGNMENT (6)
+
+   Length
+
+      Length of the remainder of the component.
+
+
+
+
+
+
+                                                              [Page 28]
+
+Assignment Key
+
+      The designated web-cache expects this element to be returned by a router
+      in subsequent WCCP2_I_SEE_YOU messages.
+
+   Number of Routers
+
+      Number of routers reachable by the designated web-cache.
+
+   Router Assignment Element 0-n
+
+      Elements containing the router IP address, "Receive ID" and "Change
+      Number" for each router.
+
+   Number of Web-Caches
+
+      Number of useable web-caches in the Service Group seen by all routers.
+
+   Web Cache 0-n
+
+      List of the IP addresses of useable web-caches in Service Group. The
+      position of a web-cache identifier in this list is the web-cache
+      index. The first entry in the list has an index of zero.
+
+   Bucket 0-255
+
+      Contents of the Redirection Hash Table. The content of each bucket is a
+      web-cache index value in the range 0-31. If set the A flag indicates
+      that alternative hashing should be used for this web-cache. The value
+      0xFF indicates no web-cache has been assigned to the bucket.
+
+       0 1 2 3 4 5 6 7
+      +-+-+-+-+-+-+-+-+
+      | Index       |A|
+      +-+-+-+-+-+-+-+-+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 29]
+
+5.6.8 Router Query Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |             Type              |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                           Router ID                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                           Receive ID                          |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Sent To IP Address                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Target IP Address                         |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_QUERY_INFO (7)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Router ID
+
+      Router IP address. The same address advertised in a WCCP2_I_SEE_YOU
+      message.
+
+   Receive ID
+
+      Receive ID expected by the router.
+
+   Sent To IP Address
+
+      IP address to which the web-cache sent its last WCCP2_HERE_I_AM
+      message. This will not be the Router ID if the web-cache is
+      multicasting its WCCP2_HERE_I_AM messages.
+
+   Target IP Address
+
+      IP address of web-cache being queried.
+
+
+
+
+
+
+
+
+
+                                                              [Page 30]
+
+5.6.9 Capabilities Info Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |             Type              |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Capability Element 0                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Capability Element n                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_CAPABILITY_INFO (8)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Capability Element
+
+      Element in Type-Length-Value format (TLV) describing a router or
+      web-cache capability.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 31]
+
+5.6.10 Alternate Assignment Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |              Type             |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |       Assignment Type         |     Assignment Length         |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Assignment Body                         |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_ALT_ASSIGNMENT (13)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Assignment Type
+
+      Currently defined values:
+
+      WCCP2_HASH_ASSIGNMENT           (0x00)
+      WCCP2_MASK_ASSIGNMENT           (0x01)
+
+   Assignment Length
+
+      Length of Assignment Body
+
+   Assignment Body
+
+      The format of Assignment Body depends upon the value of Assignment Type.
+
+      Assignment Type = WCCP2_HASH_ASSIGNMENT
+
+      In this case the body of the message is identical to the Assignment
+      Info Component with the Type and Length fields omitted.
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 32]
+
+Assignment Type = WCCP2_MASK_ASSIGNMENT
+
+       0                   1                   2                   3
+       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                         Assignment Key                        |
+      |                               .                               |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                       Number of Routers                       |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                    Router Assignment Element 0                |
+      |                              .                                |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                              .                                |
+      |                              .                                |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                    Router Assignment Element n                |
+      |                              .                                |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |             Number of Mask/Value Set Elements (m)             |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                    Mask/Value Set Element 0                   |
+      |                              .                                |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                               .                               |
+      |                               .                               |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                   Mask/Value Set Element m                    |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+      Assignment Key
+
+         The designated web-cache expects this element to be returned by a
+         router in subsequent WCCP2_I_SEE_YOU messages.
+
+      Number of Routers
+
+         Number of routers reachable by the designated web-cache.
+
+      Router Assignment Element 0-n
+
+         Element containing the router IP address, Receive ID and Change
+         Number for each router.
+
+      Number of Mask/Value Set Elements (m)
+
+         Number of Mask/Value Set elements in this message
+
+
+
+
+                                                              [Page 33]
+
+Mask/Value Set Element 0-m
+
+         A list of the Mask/Value Element Sets for the Service Group
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 34]
+
+5.6.11 Assignment Map Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |           Type                |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |             Number of Mask/Value Set Elements (n)             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                    Mask/Value Set Element 0                   |
+   |                              .                                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                   Mask/Value Set Element n                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_ASSIGN_MAP (14)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Number of Mask/Value Set Elements (n)
+
+      Number of Mask/Value Set elements in the message
+
+   Mask/Value Set Element 0-n
+
+      A list of the Mask/Value Element Sets for the Service Group
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 35]
+
+5.6.12 Command Extension Component
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |           Type                |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |       Command Type            |      Command Length           !
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Command Data                           |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      WCCP2_COMMAND_EXTENSION (15)
+
+   Length
+
+      Length of the remainder of the component.
+
+   Command Type
+
+      The command specifier.
+
+   Command Length
+
+      The length of the Command Data field of this command
+
+   The defined Command Types are:
+
+   Command Type:   WCCP2_COMMAND_TYPE_SHUTDOWN (01)
+   Command Length: 4
+   Command Data:   Web-cache IP address
+   Description:    This command is used by a web-cache to indicate to
+                   the routers in a Service Group that it is shutting
+                   down and should no longer receive any redirected traffic.
+
+
+   Command Type:   WCCP2_COMMAND_TYPE_SHUTDOWN_RESPONSE (02)
+   Command Length: 4
+   Command Data:   Web-cache IP address.
+   Description:    This command is used by a router to acknowledge
+                   receipt of a SHUTDOWN command received from the web-cache
+                   identified by the IP address in the Command Data field.
+
+
+
+
+                                                              [Page 36]
+
+5.7 Information Elements
+
+5.7.1 Router ID Element
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Router ID                             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Receive ID                            |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Router ID
+
+      Router's identifying IP address. This must be a valid IP address by
+      which the router is reachable.
+
+   Receive ID
+
+      Defined per Service Group. Incremented each time the router sends a WCCP
+      protocol message including a Router Identity Info component. Will never be
+      zero.
+
+5.7.2 Web-Cache Identity Element
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         WC Address                            |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |        Hash Revision          |U|        Reserved             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Bucket Block 0                       |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                               .                               |
+   |                               .                               |
+   |                               .                               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                          Bucket Block 7                       |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |    Assignment Weight          |           Status              |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   WC Address
+
+      Web-Cache IP address
+
+
+
+
+
+                                                              [Page 37]
+
+Hash Revision
+
+      0x00
+
+   U
+
+      If set indicates that the web cache does not have an assignment in the
+      Redirection Hash Table and that Bucket Block data is historical.
+      Historical data may be used by the designated web-cache to re-assign
+      the same bucket set to a web-cache that left and subsequently
+      rejoined a Service Group.
+
+   Bucket Block 0-7
+
+      256-bit vector. A set bit indicates the corresponding Redirection
+      Hash Table bucket is assigned to this web-cache.
+
+   Assignment Weight
+
+      Hash weight. May be used to indicate to the designated web-cache how new
+      assignments should be made.
+
+   Status
+
+      Hash status. May be used to indicate to the designated web-cache how new
+      assignments should be made.
+
+5.7.3 Assignment Key Element
+
+   This element identifies a particular assignment.
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                       Key IP Address                          |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                      Key Change Number                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Key IP Address
+
+      Designated web-cache IP address
+
+   Key Change Number
+
+      Incremented if a change has occurred.
+
+
+
+
+
+                                                              [Page 38]
+
+5.7.4 Router Assignment Element
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Router ID                             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Receive ID                            |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Change Number                          |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Router ID
+
+      Router's identifying IP address. It must be a valid address by which
+      the router is reachable.
+
+   Receive ID
+
+      Last Receive ID received from the router identified by Router
+      ID. A router will ignore an assignment if Receive ID is invalid.
+
+   Change Number
+
+      Last Member Change Number received from the router identified by
+      Router ID. A router will ignore an assignment if Change Number is
+      invalid.
+
+5.7.5 Capability Element
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |             Type              |          Length               |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                             Value                             |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Type
+
+      Currently defined types are:
+
+      WCCP2_FORWARDING_METHOD     0x01
+      WCCP2_ASSIGNMENT_METHOD     0x02
+      WCCP2_PACKET_RETURN_METHOD  0x03
+
+
+
+
+
+
+                                                              [Page 39]
+
+Length
+
+      Length of Capability element Value
+
+   Value
+
+      The length and format of the value field is dependant on the capability type.
+
+      Type = WCCP2_FORWARDING_METHOD
+
+      A 32-bit bitmask indicating supported/selected forwarding methods.
+      Currently defined values are:
+
+      WCCP2_FORWARDING_METHOD_GRE     0x00000001
+      WCCP2_FORWARDING_METHOD_L2      0x00000002
+
+      Type = WCCP2_ASSIGNMENT_METHOD
+
+      A 32-bit bitmask indicating supported/selected assignment methods.
+      Currently defined values are:
+
+      WCCP2_ASSIGNMENT_METHOD_HASH    0x00000001
+      WCCP2_ASSIGNEMNT_METHOD_MASK    0x00000002
+
+      Type = WCCP2_PACKET_RETURN_METHOD
+
+      A 32-bit bitmask indicating supported/selected packet return methods.
+      Currently defined values are:
+
+      WCCP2_PACKET_RETURN_METHOD_GRE  0x00000001
+      WCCP2_PACKET_RETURN_METHOD_L2   0x00000002
+
+5.7.6 Mask/Value Set Element
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                         Mask Element                          |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                   Number of Value Elements (n)                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Value Element 0                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                              .                                |
+   |                              .                                |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                        Value Element n                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+
+
+                                                              [Page 40]
+
+Mask Element
+
+      Mask element for this set.
+
+   Number of Value Elements (n)
+
+      The number of value elements in this set.
+
+   Value Element 0-n
+
+      The list of value elements for this set.
+
+5.7.7 Mask Element
+
+   Note that in all of the mask fields of this element a zero means
+   "Don't care".
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Source Address Mask                       |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                   Destination Address Mask                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |      Source Port Mask         |   Destination Port Mask       |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Source Address Mask
+
+      The 32 bit mask to be applied to the source IP address of the packet.
+
+   Destination Address Mask
+
+      The 32 bit mask to be applied to the destination IP address of the packet.
+
+   Source Port Mask
+
+      The 16 bit mask to be applied to the TCP/UDP source port field of the packet.
+
+   Destination Port Mask
+
+      The 16 bit mask to be applied to the TCP/UDP destination port field of the packet.
+
+
+
+
+
+
+
+
+
+                                                              [Page 41]
+
+5.7.8 Value Element
+
+    0                   1                   2                   3
+    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                     Source Address Value                      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                  Destination Address Value                    |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |      Source Port Value        |   Destination Port Value      |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+   |                   Web Cache IP Address                        |
+   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+   Source Address Value
+
+      The value to match against the source IP address of the packet after
+      masking.
+
+   Destination Address Value
+
+      The value to match against the destination IP address of the packet after
+      masking.
+
+   Source Port Value
+
+      The value to match against the TCP/UDP source port number of the
+      packet after masking.
+
+   Destination Port Value
+
+      The value to match against the TCP/UDP destination port number of the
+      packet after masking.
+
+   Web-cache IP address
+
+      The IP address of the web-cache to which packets matching this value
+      element should be sent.
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 42]
+
+6. Security Considerations
+
+   WCCP V2 provides a mechanism for message authentication. It is
+   described in section 4.7 of this document. The authentication
+   mechanism relies on a password known to all routers and web-caches in
+   a Service Group. The password is part of the Service Group
+   configuration and is used to compute message checksums which can be
+   verified by other members of the group. Should the password become
+   known to a host attempting to disrupt the operation of a Service Group
+   it would be possible for that host to spoof WCCP messages and appear
+   as either a router or web-cache in the Service Group.
+
+   To pose as a router in a Service Group a host would advertise its
+   presence to the members of the group in I_SEE_YOU messages.  If
+   accepted as part of the Service Group the host would receive the
+   configuration for the group in a HERE_I_AM message from the designated
+   web-cache. This situation would not pose any threat to the operation
+   of the Service Group because the host would not be performing any
+   packet redirection and all packets would flow normally.
+
+   To pose as a web-cache within a Service Group a host would advertise
+   its presence in HERE_I_AM messages. Acceptance of the host as part of
+   the Service Group would be decided by the designated cache and may be
+   subject to additional security checks not specified by WCCP. Should
+   the host become part of the Service Group it would be assigned a
+   proportion of the traffic redirected by the routers in the Service
+   Group. Assuming that the host drops any redirected packets the net
+   effect to clients would be that some attempts to retrieve content via
+   the Service Group routers would fail.
+
+
+7. References
+
+   [1] Hanks, Li, Farinacci & Traina, "Generic Routing Encapsulation
+   (GRE)", RFC 1701, October 1994
+
+
+8. Authors' Addresses
+
+   Martin Cieslak
+   Cisco Systems
+   170 Tasman Drive
+   San Jose, CA 95143
+
+   David Forster
+   Cisco Systems
+   170 Tasman Drive
+   San Jose, CA 95143
+
+
+
+                                                              [Page 43]
+
+Gurumukh Tiwana
+   Cisco Systems
+   170 Tasman Drive
+   San Jose, CA 95143
+
+   Rob Wilson
+   Cisco Systems
+   170 Tasman Drive
+   San Jose, CA 95143
+
+   email: robewils@cisco.com
+
+   Expires January 2001
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+                                                              [Page 44]
+
@@ -0,0 +1,1403 @@
+
+
+
+
+
+
+Network Working Group                                     T. Berners-Lee
+Request for Comments: 1738                                          CERN
+Category: Standards Track                                    L. Masinter
+                                                       Xerox Corporation
+                                                             M. McCahill
+                                                 University of Minnesota
+                                                                 Editors
+                                                           December 1994
+
+
+                    Uniform Resource Locators (URL)
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Abstract
+
+   This document specifies a Uniform Resource Locator (URL), the syntax
+   and semantics of formalized information for location and access of
+   resources via the Internet.
+
+1. Introduction
+
+   This document describes the syntax and semantics for a compact string
+   representation for a resource available via the Internet.  These
+   strings are called "Uniform Resource Locators" (URLs).
+
+   The specification is derived from concepts introduced by the World-
+   Wide Web global information initiative, whose use of such objects
+   dates from 1990 and is described in "Universal Resource Identifiers
+   in WWW", RFC 1630. The specification of URLs is designed to meet the
+   requirements laid out in "Functional Requirements for Internet
+   Resource Locators" [12].
+
+   This document was written by the URI working group of the Internet
+   Engineering Task Force.  Comments may be addressed to the editors, or
+   to the URI-WG <uri@bunyip.com>. Discussions of the group are archived
+   at <URL:http://www.acl.lanl.gov/URI/archive/uri-archive.index.html>
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 1]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+2. General URL Syntax
+
+   Just as there are many different methods of access to resources,
+   there are several schemes for describing the location of such
+   resources.
+
+   The generic syntax for URLs provides a framework for new schemes to
+   be established using protocols other than those defined in this
+   document.
+
+   URLs are used to `locate' resources, by providing an abstract
+   identification of the resource location.  Having located a resource,
+   a system may perform a variety of operations on the resource, as
+   might be characterized by such words as `access', `update',
+   `replace', `find attributes'. In general, only the `access' method
+   needs to be specified for any URL scheme.
+
+2.1. The main parts of URLs
+
+   A full BNF description of the URL syntax is given in Section 5.
+
+   In general, URLs are written as follows:
+
+       <scheme>:<scheme-specific-part>
+
+   A URL contains the name of the scheme being used (<scheme>) followed
+   by a colon and then a string (the <scheme-specific-part>) whose
+   interpretation depends on the scheme.
+
+   Scheme names consist of a sequence of characters. The lower case
+   letters "a"--"z", digits, and the characters plus ("+"), period
+   ("."), and hyphen ("-") are allowed. For resiliency, programs
+   interpreting URLs should treat upper case letters as equivalent to
+   lower case in scheme names (e.g., allow "HTTP" as well as "http").
+
+2.2. URL Character Encoding Issues
+
+   URLs are sequences of characters, i.e., letters, digits, and special
+   characters. A URLs may be represented in a variety of ways: e.g., ink
+   on paper, or a sequence of octets in a coded character set. The
+   interpretation of a URL depends only on the identity of the
+   characters used.
+
+   In most URL schemes, the sequences of characters in different parts
+   of a URL are used to represent sequences of octets used in Internet
+   protocols. For example, in the ftp scheme, the host name, directory
+   name and file names are such sequences of octets, represented by
+   parts of the URL.  Within those parts, an octet may be represented by
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 2]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   the chararacter which has that octet as its code within the US-ASCII
+   [20] coded character set.
+
+   In addition, octets may be encoded by a character triplet consisting
+   of the character "%" followed by the two hexadecimal digits (from
+   "0123456789ABCDEF") which forming the hexadecimal value of the octet.
+   (The characters "abcdef" may also be used in hexadecimal encodings.)
+
+   Octets must be encoded if they have no corresponding graphic
+   character within the US-ASCII coded character set, if the use of the
+   corresponding character is unsafe, or if the corresponding character
+   is reserved for some other interpretation within the particular URL
+   scheme.
+
+   No corresponding graphic US-ASCII:
+
+   URLs are written only with the graphic printable characters of the
+   US-ASCII coded character set. The octets 80-FF hexadecimal are not
+   used in US-ASCII, and the octets 00-1F and 7F hexadecimal represent
+   control characters; these must be encoded.
+
+   Unsafe:
+
+   Characters can be unsafe for a number of reasons.  The space
+   character is unsafe because significant spaces may disappear and
+   insignificant spaces may be introduced when URLs are transcribed or
+   typeset or subjected to the treatment of word-processing programs.
+   The characters "<" and ">" are unsafe because they are used as the
+   delimiters around URLs in free text; the quote mark (""") is used to
+   delimit URLs in some systems.  The character "#" is unsafe and should
+   always be encoded because it is used in World Wide Web and in other
+   systems to delimit a URL from a fragment/anchor identifier that might
+   follow it.  The character "%" is unsafe because it is used for
+   encodings of other characters.  Other characters are unsafe because
+   gateways and other transport agents are known to sometimes modify
+   such characters. These characters are "{", "}", "|", "\", "^", "~",
+   "[", "]", and "`".
+
+   All unsafe characters must always be encoded within a URL. For
+   example, the character "#" must be encoded within URLs even in
+   systems that do not normally deal with fragment or anchor
+   identifiers, so that if the URL is copied into another system that
+   does use them, it will not be necessary to change the URL encoding.
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 3]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   Reserved:
+
+   Many URL schemes reserve certain characters for a special meaning:
+   their appearance in the scheme-specific part of the URL has a
+   designated semantics. If the character corresponding to an octet is
+   reserved in a scheme, the octet must be encoded.  The characters ";",
+   "/", "?", ":", "@", "=" and "&" are the characters which may be
+   reserved for special meaning within a scheme. No other characters may
+   be reserved within a scheme.
+
+   Usually a URL has the same interpretation when an octet is
+   represented by a character and when it encoded. However, this is not
+   true for reserved characters: encoding a character reserved for a
+   particular scheme may change the semantics of a URL.
+
+   Thus, only alphanumerics, the special characters "$-_.+!*'(),", and
+   reserved characters used for their reserved purposes may be used
+   unencoded within a URL.
+
+   On the other hand, characters that are not required to be encoded
+   (including alphanumerics) may be encoded within the scheme-specific
+   part of a URL, as long as they are not being used for a reserved
+   purpose.
+
+2.3 Hierarchical schemes and relative links
+
+   In some cases, URLs are used to locate resources that contain
+   pointers to other resources. In some cases, those pointers are
+   represented as relative links where the expression of the location of
+   the second resource is in terms of "in the same place as this one
+   except with the following relative path". Relative links are not
+   described in this document. However, the use of relative links
+   depends on the original URL containing a hierarchical structure
+   against which the relative link is based.
+
+   Some URL schemes (such as the ftp, http, and file schemes) contain
+   names that can be considered hierarchical; the components of the
+   hierarchy are separated by "/".
+
+
+
+
+
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 4]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+3. Specific Schemes
+
+   The mapping for some existing standard and experimental protocols is
+   outlined in the BNF syntax definition.  Notes on particular protocols
+   follow. The schemes covered are:
+
+   ftp                     File Transfer protocol
+   http                    Hypertext Transfer Protocol
+   gopher                  The Gopher protocol
+   mailto                  Electronic mail address
+   news                    USENET news
+   nntp                    USENET news using NNTP access
+   telnet                  Reference to interactive sessions
+   wais                    Wide Area Information Servers
+   file                    Host-specific file names
+   prospero                Prospero Directory Service
+
+   Other schemes may be specified by future specifications. Section 4 of
+   this document describes how new schemes may be registered, and lists
+   some scheme names that are under development.
+
+3.1. Common Internet Scheme Syntax
+
+   While the syntax for the rest of the URL may vary depending on the
+   particular scheme selected, URL schemes that involve the direct use
+   of an IP-based protocol to a specified host on the Internet use a
+   common syntax for the scheme-specific data:
+
+        //<user>:<password>@<host>:<port>/<url-path>
+
+   Some or all of the parts "<user>:<password>@", ":<password>",
+   ":<port>", and "/<url-path>" may be excluded.  The scheme specific
+   data start with a double slash "//" to indicate that it complies with
+   the common Internet scheme syntax. The different components obey the
+   following rules:
+
+    user
+        An optional user name. Some schemes (e.g., ftp) allow the
+        specification of a user name.
+
+    password
+        An optional password. If present, it follows the user
+        name separated from it by a colon.
+
+   The user name (and password), if present, are followed by a
+   commercial at-sign "@". Within the user and password field, any ":",
+   "@", or "/" must be encoded.
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 5]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   Note that an empty user name or password is different than no user
+   name or password; there is no way to specify a password without
+   specifying a user name. E.g., <URL:ftp://@host.com/> has an empty
+   user name and no password, <URL:ftp://host.com/> has no user name,
+   while <URL:ftp://foo:@host.com/> has a user name of "foo" and an
+   empty password.
+
+    host
+        The fully qualified domain name of a network host, or its IP
+        address as a set of four decimal digit groups separated by
+        ".". Fully qualified domain names take the form as described
+        in Section 3.5 of RFC 1034 [13] and Section 2.1 of RFC 1123
+        [5]: a sequence of domain labels separated by ".", each domain
+        label starting and ending with an alphanumerical character and
+        possibly also containing "-" characters. The rightmost domain
+        label will never start with a digit, though, which
+        syntactically distinguishes all domain names from the IP
+        addresses.
+
+    port
+        The port number to connect to. Most schemes designate
+        protocols that have a default port number. Another port number
+        may optionally be supplied, in decimal, separated from the
+        host by a colon. If the port is omitted, the colon is as well.
+
+    url-path
+        The rest of the locator consists of data specific to the
+        scheme, and is known as the "url-path". It supplies the
+        details of how the specified resource can be accessed. Note
+        that the "/" between the host (or port) and the url-path is
+        NOT part of the url-path.
+
+   The url-path syntax depends on the scheme being used, as does the
+   manner in which it is interpreted.
+
+3.2. FTP
+
+   The FTP URL scheme is used to designate files and directories on
+   Internet hosts accessible using the FTP protocol (RFC959).
+
+   A FTP URL follow the syntax described in Section 3.1.  If :<port> is
+   omitted, the port defaults to 21.
+
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 6]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+3.2.1. FTP Name and Password
+
+   A user name and password may be supplied; they are used in the ftp
+   "USER" and "PASS" commands after first making the connection to the
+   FTP server.  If no user name or password is supplied and one is
+   requested by the FTP server, the conventions for "anonymous" FTP are
+   to be used, as follows:
+
+        The user name "anonymous" is supplied.
+
+        The password is supplied as the Internet e-mail address
+        of the end user accessing the resource.
+
+   If the URL supplies a user name but no password, and the remote
+   server requests a password, the program interpreting the FTP URL
+   should request one from the user.
+
+3.2.2. FTP url-path
+
+   The url-path of a FTP URL has the following syntax:
+
+        <cwd1>/<cwd2>/.../<cwdN>/<name>;type=<typecode>
+
+   Where <cwd1> through <cwdN> and <name> are (possibly encoded) strings
+   and <typecode> is one of the characters "a", "i", or "d".  The part
+   ";type=<typecode>" may be omitted. The <cwdx> and <name> parts may be
+   empty. The whole url-path may be omitted, including the "/"
+   delimiting it from the prefix containing user, password, host, and
+   port.
+
+   The url-path is interpreted as a series of FTP commands as follows:
+
+      Each of the <cwd> elements is to be supplied, sequentially, as the
+      argument to a CWD (change working directory) command.
+
+      If the typecode is "d", perform a NLST (name list) command with
+      <name> as the argument, and interpret the results as a file
+      directory listing.
+
+      Otherwise, perform a TYPE command with <typecode> as the argument,
+      and then access the file whose name is <name> (for example, using
+      the RETR command.)
+
+   Within a name or CWD component, the characters "/" and ";" are
+   reserved and must be encoded. The components are decoded prior to
+   their use in the FTP protocol.  In particular, if the appropriate FTP
+   sequence to access a particular file requires supplying a string
+   containing a "/" as an argument to a CWD or RETR command, it is
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 7]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   necessary to encode each "/".
+
+   For example, the URL <URL:ftp://myname@host.dom/%2Fetc/motd> is
+   interpreted by FTP-ing to "host.dom", logging in as "myname"
+   (prompting for a password if it is asked for), and then executing
+   "CWD /etc" and then "RETR motd". This has a different meaning from
+   <URL:ftp://myname@host.dom/etc/motd> which would "CWD etc" and then
+   "RETR motd"; the initial "CWD" might be executed relative to the
+   default directory for "myname". On the other hand,
+   <URL:ftp://myname@host.dom//etc/motd>, would "CWD " with a null
+   argument, then "CWD etc", and then "RETR motd".
+
+   FTP URLs may also be used for other operations; for example, it is
+   possible to update a file on a remote file server, or infer
+   information about it from the directory listings. The mechanism for
+   doing so is not spelled out here.
+
+3.2.3. FTP Typecode is Optional
+
+   The entire ;type=<typecode> part of a FTP URL is optional. If it is
+   omitted, the client program interpreting the URL must guess the
+   appropriate mode to use. In general, the data content type of a file
+   can only be guessed from the name, e.g., from the suffix of the name;
+   the appropriate type code to be used for transfer of the file can
+   then be deduced from the data content of the file.
+
+3.2.4 Hierarchy
+
+   For some file systems, the "/" used to denote the hierarchical
+   structure of the URL corresponds to the delimiter used to construct a
+   file name hierarchy, and thus, the filename will look similar to the
+   URL path. This does NOT mean that the URL is a Unix filename.
+
+3.2.5. Optimization
+
+   Clients accessing resources via FTP may employ additional heuristics
+   to optimize the interaction. For some FTP servers, for example, it
+   may be reasonable to keep the control connection open while accessing
+   multiple URLs from the same server. However, there is no common
+   hierarchical model to the FTP protocol, so if a directory change
+   command has been given, it is impossible in general to deduce what
+   sequence should be given to navigate to another directory for a
+   second retrieval, if the paths are different.  The only reliable
+   algorithm is to disconnect and reestablish the control connection.
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 8]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+3.3. HTTP
+
+   The HTTP URL scheme is used to designate Internet resources
+   accessible using HTTP (HyperText Transfer Protocol).
+
+   The HTTP protocol is specified elsewhere. This specification only
+   describes the syntax of HTTP URLs.
+
+   An HTTP URL takes the form:
+
+      http://<host>:<port>/<path>?<searchpart>
+
+   where <host> and <port> are as described in Section 3.1. If :<port>
+   is omitted, the port defaults to 80.  No user name or password is
+   allowed.  <path> is an HTTP selector, and <searchpart> is a query
+   string. The <path> is optional, as is the <searchpart> and its
+   preceding "?". If neither <path> nor <searchpart> is present, the "/"
+   may also be omitted.
+
+   Within the <path> and <searchpart> components, "/", ";", "?" are
+   reserved.  The "/" character may be used within HTTP to designate a
+   hierarchical structure.
+
+3.4. GOPHER
+
+   The Gopher URL scheme is used to designate Internet resources
+   accessible using the Gopher protocol.
+
+   The base Gopher protocol is described in RFC 1436 and supports items
+   and collections of items (directories). The Gopher+ protocol is a set
+   of upward compatible extensions to the base Gopher protocol and is
+   described in [2]. Gopher+ supports associating arbitrary sets of
+   attributes and alternate data representations with Gopher items.
+   Gopher URLs accommodate both Gopher and Gopher+ items and item
+   attributes.
+
+3.4.1. Gopher URL syntax
+
+   A Gopher URL takes the form:
+
+      gopher://<host>:<port>/<gopher-path>
+
+   where <gopher-path> is one of
+
+       <gophertype><selector>
+       <gophertype><selector>%09<search>
+       <gophertype><selector>%09<search>%09<gopher+_string>
+
+
+
+
+Berners-Lee, Masinter & McCahill                                [Page 9]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   If :<port> is omitted, the port defaults to 70.  <gophertype> is a
+   single-character field to denote the Gopher type of the resource to
+   which the URL refers. The entire <gopher-path> may also be empty, in
+   which case the delimiting "/" is also optional and the <gophertype>
+   defaults to "1".
+
+   <selector> is the Gopher selector string.  In the Gopher protocol,
+   Gopher selector strings are a sequence of octets which may contain
+   any octets except 09 hexadecimal (US-ASCII HT or tab) 0A hexadecimal
+   (US-ASCII character LF), and 0D (US-ASCII character CR).
+
+   Gopher clients specify which item to retrieve by sending the Gopher
+   selector string to a Gopher server.
+
+   Within the <gopher-path>, no characters are reserved.
+
+   Note that some Gopher <selector> strings begin with a copy of the
+   <gophertype> character, in which case that character will occur twice
+   consecutively. The Gopher selector string may be an empty string;
+   this is how Gopher clients refer to the top-level directory on a
+   Gopher server.
+
+3.4.2 Specifying URLs for Gopher Search Engines
+
+   If the URL refers to a search to be submitted to a Gopher search
+   engine, the selector is followed by an encoded tab (%09) and the
+   search string. To submit a search to a Gopher search engine, the
+   Gopher client sends the <selector> string (after decoding), a tab,
+   and the search string to the Gopher server.
+
+3.4.3 URL syntax for Gopher+ items
+
+   URLs for Gopher+ items have a second encoded tab (%09) and a Gopher+
+   string. Note that in this case, the %09<search> string must be
+   supplied, although the <search> element may be the empty string.
+
+   The <gopher+_string> is used to represent information required for
+   retrieval of the Gopher+ item. Gopher+ items may have alternate
+   views, arbitrary sets of attributes, and may have electronic forms
+   associated with them.
+
+   To retrieve the data associated with a Gopher+ URL, a client will
+   connect to the server and send the Gopher selector, followed by a tab
+   and the search string (which may be empty), followed by a tab and the
+   Gopher+ commands.
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 10]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+3.4.4 Default Gopher+ data representation
+
+   When a Gopher server returns a directory listing to a client, the
+   Gopher+ items are tagged with either a "+" (denoting Gopher+ items)
+   or a "?" (denoting Gopher+ items which have a +ASK form associated
+   with them). A Gopher URL with a Gopher+ string consisting of only a
+   "+" refers to the default view (data representation) of the item
+   while a Gopher+ string containing only a "?" refer to an item with a
+   Gopher electronic form associated with it.
+
+3.4.5 Gopher+ items with electronic forms
+
+   Gopher+ items which have a +ASK associated with them (i.e. Gopher+
+   items tagged with a "?") require the client to fetch the item's +ASK
+   attribute to get the form definition, and then ask the user to fill
+   out the form and return the user's responses along with the selector
+   string to retrieve the item.  Gopher+ clients know how to do this but
+   depend on the "?" tag in the Gopher+ item description to know when to
+   handle this case. The "?" is used in the Gopher+ string to be
+   consistent with Gopher+ protocol's use of this symbol.
+
+3.4.6 Gopher+ item attribute collections
+
+   To refer to the Gopher+ attributes of an item, the Gopher URL's
+   Gopher+ string consists of "!" or "$". "!" refers to the all of a
+   Gopher+ item's attributes. "$" refers to all the item attributes for
+   all items in a Gopher directory.
+
+3.4.7 Referring to specific Gopher+ attributes
+
+   To refer to specific attributes, the URL's gopher+_string is
+   "!<attribute_name>" or "$<attribute_name>". For example, to refer to
+   the attribute containing the abstract of an item, the gopher+_string
+   would be "!+ABSTRACT".
+
+   To refer to several attributes, the gopher+_string consists of the
+   attribute names separated by coded spaces. For example,
+   "!+ABSTRACT%20+SMELL" refers to the +ABSTRACT and +SMELL attributes
+   of an item.
+
+3.4.8 URL syntax for Gopher+ alternate views
+
+   Gopher+ allows for optional alternate data representations (alternate
+   views) of items. To retrieve a Gopher+ alternate view, a Gopher+
+   client sends the appropriate view and language identifier (found in
+   the item's +VIEW attribute). To refer to a specific Gopher+ alternate
+   view, the URL's Gopher+ string would be in the form:
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 11]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+        +<view_name>%20<language_name>
+
+   For example, a Gopher+ string of "+application/postscript%20Es_ES"
+   refers to the Spanish language postscript alternate view of a Gopher+
+   item.
+
+3.4.9 URL syntax for Gopher+ electronic forms
+
+   The gopher+_string for a URL that refers to an item referenced by a
+   Gopher+ electronic form (an ASK block) filled out with specific
+   values is a coded version of what the client sends to the server.
+   The gopher+_string is of the form:
+
++%091%0D%0A+-1%0D%0A<ask_item1_value>%0D%0A<ask_item2_value>%0D%0A.%0D%0A
+
+   To retrieve this item, the Gopher client sends:
+
+       <a_gopher_selector><tab>+<tab>1<cr><lf>
+       +-1<cr><lf>
+       <ask_item1_value><cr><lf>
+       <ask_item2_value><cr><lf>
+       .<cr><lf>
+
+   to the Gopher server.
+
+3.5. MAILTO
+
+   The mailto URL scheme is used to designate the Internet mailing
+   address of an individual or service. No additional information other
+   than an Internet mailing address is present or implied.
+
+   A mailto URL takes the form:
+
+        mailto:<rfc822-addr-spec>
+
+   where <rfc822-addr-spec> is (the encoding of an) addr-spec, as
+   specified in RFC 822 [6]. Within mailto URLs, there are no reserved
+   characters.
+
+   Note that the percent sign ("%") is commonly used within RFC 822
+   addresses and must be encoded.
+
+   Unlike many URLs, the mailto scheme does not represent a data object
+   to be accessed directly; there is no sense in which it designates an
+   object. It has a different use than the message/external-body type in
+   MIME.
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 12]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+3.6. NEWS
+
+   The news URL scheme is used to refer to either news groups or
+   individual articles of USENET news, as specified in RFC 1036.
+
+   A news URL takes one of two forms:
+
+     news:<newsgroup-name>
+     news:<message-id>
+
+   A <newsgroup-name> is a period-delimited hierarchical name, such as
+   "comp.infosystems.www.misc". A <message-id> corresponds to the
+   Message-ID of section 2.1.5 of RFC 1036, without the enclosing "<"
+   and ">"; it takes the form <unique>@<full_domain_name>.  A message
+   identifier may be distinguished from a news group name by the
+   presence of the commercial at "@" character. No additional characters
+   are reserved within the components of a news URL.
+
+   If <newsgroup-name> is "*" (as in <URL:news:*>), it is used to refer
+   to "all available news groups".
+
+   The news URLs are unusual in that by themselves, they do not contain
+   sufficient information to locate a single resource, but, rather, are
+   location-independent.
+
+3.7. NNTP
+
+   The nntp URL scheme is an alternative method of referencing news
+   articles, useful for specifying news articles from NNTP servers (RFC
+   977).
+
+   A nntp URL take the form:
+
+      nntp://<host>:<port>/<newsgroup-name>/<article-number>
+
+   where <host> and <port> are as described in Section 3.1. If :<port>
+   is omitted, the port defaults to 119.
+
+   The <newsgroup-name> is the name of the group, while the <article-
+   number> is the numeric id of the article within that newsgroup.
+
+   Note that while nntp: URLs specify a unique location for the article
+   resource, most NNTP servers currently on the Internet today are
+   configured only to allow access from local clients, and thus nntp
+   URLs do not designate globally accessible resources. Thus, the news:
+   form of URL is preferred as a way of identifying news articles.
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 13]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+3.8. TELNET
+
+   The Telnet URL scheme is used to designate interactive services that
+   may be accessed by the Telnet protocol.
+
+   A telnet URL takes the form:
+
+       telnet://<user>:<password>@<host>:<port>/
+
+   as specified in Section 3.1. The final "/" character may be omitted.
+   If :<port> is omitted, the port defaults to 23.  The :<password> can
+   be omitted, as well as the whole <user>:<password> part.
+
+   This URL does not designate a data object, but rather an interactive
+   service. Remote interactive services vary widely in the means by
+   which they allow remote logins; in practice, the <user> and
+   <password> supplied are advisory only: clients accessing a telnet URL
+   merely advise the user of the suggested username and password.
+
+3.9.  WAIS
+
+   The WAIS URL scheme is used to designate WAIS databases, searches, or
+   individual documents available from a WAIS database. WAIS is
+   described in [7]. The WAIS protocol is described in RFC 1625 [17];
+   Although the WAIS protocol is based on Z39.50-1988, the WAIS URL
+   scheme is not intended for use with arbitrary Z39.50 services.
+
+   A WAIS URL takes one of the following forms:
+
+     wais://<host>:<port>/<database>
+     wais://<host>:<port>/<database>?<search>
+     wais://<host>:<port>/<database>/<wtype>/<wpath>
+
+   where <host> and <port> are as described in Section 3.1. If :<port>
+   is omitted, the port defaults to 210.  The first form designates a
+   WAIS database that is available for searching. The second form
+   designates a particular search.  <database> is the name of the WAIS
+   database being queried.
+
+   The third form designates a particular document within a WAIS
+   database to be retrieved. In this form <wtype> is the WAIS
+   designation of the type of the object. Many WAIS implementations
+   require that a client know the "type" of an object prior to
+   retrieval, the type being returned along with the internal object
+   identifier in the search response.  The <wtype> is included in the
+   URL in order to allow the client interpreting the URL adequate
+   information to actually retrieve the document.
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 14]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   The <wpath> of a WAIS URL consists of the WAIS document-id, encoded
+   as necessary using the method described in Section 2.2. The WAIS
+   document-id should be treated opaquely; it may only be decomposed by
+   the server that issued it.
+
+3.10 FILES
+
+   The file URL scheme is used to designate files accessible on a
+   particular host computer. This scheme, unlike most other URL schemes,
+   does not designate a resource that is universally accessible over the
+   Internet.
+
+   A file URL takes the form:
+
+       file://<host>/<path>
+
+   where <host> is the fully qualified domain name of the system on
+   which the <path> is accessible, and <path> is a hierarchical
+   directory path of the form <directory>/<directory>/.../<name>.
+
+   For example, a VMS file
+
+     DISK$USER:[MY.NOTES]NOTE123456.TXT
+
+   might become
+
+     <URL:file://vms.host.edu/disk$user/my/notes/note12345.txt>
+
+   As a special case, <host> can be the string "localhost" or the empty
+   string; this is interpreted as `the machine from which the URL is
+   being interpreted'.
+
+   The file URL scheme is unusual in that it does not specify an
+   Internet protocol or access method for such files; as such, its
+   utility in network protocols between hosts is limited.
+
+3.11 PROSPERO
+
+   The Prospero URL scheme is used to designate resources that are
+   accessed via the Prospero Directory Service. The Prospero protocol is
+   described elsewhere [14].
+
+   A prospero URLs takes the form:
+
+      prospero://<host>:<port>/<hsoname>;<field>=<value>
+
+   where <host> and <port> are as described in Section 3.1. If :<port>
+   is omitted, the port defaults to 1525. No username or password is
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 15]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   allowed.
+
+   The <hsoname> is the host-specific object name in the Prospero
+   protocol, suitably encoded.  This name is opaque and interpreted by
+   the Prospero server.  The semicolon ";" is reserved and may not
+   appear without quoting in the <hsoname>.
+
+   Prospero URLs are interpreted by contacting a Prospero directory
+   server on the specified host and port to determine appropriate access
+   methods for a resource, which might themselves be represented as
+   different URLs. External Prospero links are represented as URLs of
+   the underlying access method and are not represented as Prospero
+   URLs.
+
+   Note that a slash "/" may appear in the <hsoname> without quoting and
+   no significance may be assumed by the application.  Though slashes
+   may indicate hierarchical structure on the server, such structure is
+   not guaranteed. Note that many <hsoname>s begin with a slash, in
+   which case the host or port will be followed by a double slash: the
+   slash from the URL syntax, followed by the initial slash from the
+   <hsoname>. (E.g., <URL:prospero://host.dom//pros/name> designates a
+   <hsoname> of "/pros/name".)
+
+   In addition, after the <hsoname>, optional fields and values
+   associated with a Prospero link may be specified as part of the URL.
+   When present, each field/value pair is separated from each other and
+   from the rest of the URL by a ";" (semicolon).  The name of the field
+   and its value are separated by a "=" (equal sign). If present, these
+   fields serve to identify the target of the URL.  For example, the
+   OBJECT-VERSION field can be specified to identify a specific version
+   of an object.
+
+4. REGISTRATION OF NEW SCHEMES
+
+   A new scheme may be introduced by defining a mapping onto a
+   conforming URL syntax, using a new prefix. URLs for experimental
+   schemes may be used by mutual agreement between parties. Scheme names
+   starting with the characters "x-" are reserved for experimental
+   purposes.
+
+   The Internet Assigned Numbers Authority (IANA) will maintain a
+   registry of URL schemes. Any submission of a new URL scheme must
+   include a definition of an algorithm for accessing of resources
+   within that scheme and the syntax for representing such a scheme.
+
+   URL schemes must have demonstrable utility and operability.  One way
+   to provide such a demonstration is via a gateway which provides
+   objects in the new scheme for clients using an existing protocol.  If
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 16]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   the new scheme does not locate resources that are data objects, the
+   properties of names in the new space must be clearly defined.
+
+   New schemes should try to follow the same syntactic conventions of
+   existing schemes, where appropriate.  It is likewise recommended
+   that, where a protocol allows for retrieval by URL, that the client
+   software have provision for being configured to use specific gateway
+   locators for indirect access through new naming schemes.
+
+   The following scheme have been proposed at various times, but this
+   document does not define their syntax or use at this time. It is
+   suggested that IANA reserve their scheme names for future definition:
+
+   afs              Andrew File System global file names.
+   mid              Message identifiers for electronic mail.
+   cid              Content identifiers for MIME body parts.
+   nfs              Network File System (NFS) file names.
+   tn3270           Interactive 3270 emulation sessions.
+   mailserver       Access to data available from mail servers.
+   z39.50           Access to ANSI Z39.50 services.
+
+5. BNF for specific URL schemes
+
+   This is a BNF-like description of the Uniform Resource Locator
+   syntax, using the conventions of RFC822, except that "|" is used to
+   designate alternatives, and brackets [] are used around optional or
+   repeated elements. Briefly, literals are quoted with "", optional
+   elements are enclosed in [brackets], and elements may be preceded
+   with <n>* to designate n or more repetitions of the following
+   element; n defaults to 0.
+
+; The generic form of a URL is:
+
+genericurl     = scheme ":" schemepart
+
+; Specific predefined schemes are defined here; new schemes
+; may be registered with IANA
+
+url            = httpurl | ftpurl | newsurl |
+                 nntpurl | telneturl | gopherurl |
+                 waisurl | mailtourl | fileurl |
+                 prosperourl | otherurl
+
+; new schemes follow the general syntax
+otherurl       = genericurl
+
+; the scheme is in lower case; interpreters should use case-ignore
+scheme         = 1*[ lowalpha | digit | "+" | "-" | "." ]
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 17]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+schemepart     = *xchar | ip-schemepart
+
+
+; URL schemeparts for ip based protocols:
+
+ip-schemepart  = "//" login [ "/" urlpath ]
+
+login          = [ user [ ":" password ] "@" ] hostport
+hostport       = host [ ":" port ]
+host           = hostname | hostnumber
+hostname       = *[ domainlabel "." ] toplabel
+domainlabel    = alphadigit | alphadigit *[ alphadigit | "-" ] alphadigit
+toplabel       = alpha | alpha *[ alphadigit | "-" ] alphadigit
+alphadigit     = alpha | digit
+hostnumber     = digits "." digits "." digits "." digits
+port           = digits
+user           = *[ uchar | ";" | "?" | "&" | "=" ]
+password       = *[ uchar | ";" | "?" | "&" | "=" ]
+urlpath        = *xchar    ; depends on protocol see section 3.1
+
+; The predefined schemes:
+
+; FTP (see also RFC959)
+
+ftpurl         = "ftp://" login [ "/" fpath [ ";type=" ftptype ]]
+fpath          = fsegment *[ "/" fsegment ]
+fsegment       = *[ uchar | "?" | ":" | "@" | "&" | "=" ]
+ftptype        = "A" | "I" | "D" | "a" | "i" | "d"
+
+; FILE
+
+fileurl        = "file://" [ host | "localhost" ] "/" fpath
+
+; HTTP
+
+httpurl        = "http://" hostport [ "/" hpath [ "?" search ]]
+hpath          = hsegment *[ "/" hsegment ]
+hsegment       = *[ uchar | ";" | ":" | "@" | "&" | "=" ]
+search         = *[ uchar | ";" | ":" | "@" | "&" | "=" ]
+
+; GOPHER (see also RFC1436)
+
+gopherurl      = "gopher://" hostport [ / [ gtype [ selector
+                 [ "%09" search [ "%09" gopher+_string ] ] ] ] ]
+gtype          = xchar
+selector       = *xchar
+gopher+_string = *xchar
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 18]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+; MAILTO (see also RFC822)
+
+mailtourl      = "mailto:" encoded822addr
+encoded822addr = 1*xchar               ; further defined in RFC822
+
+; NEWS (see also RFC1036)
+
+newsurl        = "news:" grouppart
+grouppart      = "*" | group | article
+group          = alpha *[ alpha | digit | "-" | "." | "+" | "_" ]
+article        = 1*[ uchar | ";" | "/" | "?" | ":" | "&" | "=" ] "@" host
+
+; NNTP (see also RFC977)
+
+nntpurl        = "nntp://" hostport "/" group [ "/" digits ]
+
+; TELNET
+
+telneturl      = "telnet://" login [ "/" ]
+
+; WAIS (see also RFC1625)
+
+waisurl        = waisdatabase | waisindex | waisdoc
+waisdatabase   = "wais://" hostport "/" database
+waisindex      = "wais://" hostport "/" database "?" search
+waisdoc        = "wais://" hostport "/" database "/" wtype "/" wpath
+database       = *uchar
+wtype          = *uchar
+wpath          = *uchar
+
+; PROSPERO
+
+prosperourl    = "prospero://" hostport "/" ppath *[ fieldspec ]
+ppath          = psegment *[ "/" psegment ]
+psegment       = *[ uchar | "?" | ":" | "@" | "&" | "=" ]
+fieldspec      = ";" fieldname "=" fieldvalue
+fieldname      = *[ uchar | "?" | ":" | "@" | "&" ]
+fieldvalue     = *[ uchar | "?" | ":" | "@" | "&" ]
+
+; Miscellaneous definitions
+
+lowalpha       = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" |
+                 "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" |
+                 "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" |
+                 "y" | "z"
+hialpha        = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
+                 "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
+                 "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 19]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+alpha          = lowalpha | hialpha
+digit          = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
+                 "8" | "9"
+safe           = "$" | "-" | "_" | "." | "+"
+extra          = "!" | "*" | "'" | "(" | ")" | ","
+national       = "{" | "}" | "|" | "\" | "^" | "~" | "[" | "]" | "`"
+punctuation    = "<" | ">" | "#" | "%" | <">
+
+
+reserved       = ";" | "/" | "?" | ":" | "@" | "&" | "="
+hex            = digit | "A" | "B" | "C" | "D" | "E" | "F" |
+                 "a" | "b" | "c" | "d" | "e" | "f"
+escape         = "%" hex hex
+
+unreserved     = alpha | digit | safe | extra
+uchar          = unreserved | escape
+xchar          = unreserved | reserved | escape
+digits         = 1*digit
+
+6. Security Considerations
+
+   The URL scheme does not in itself pose a security threat. Users
+   should beware that there is no general guarantee that a URL which at
+   one time points to a given object continues to do so, and does not
+   even at some later time point to a different object due to the
+   movement of objects on servers.
+
+   A URL-related security threat is that it is sometimes possible to
+   construct a URL such that an attempt to perform a harmless idempotent
+   operation such as the retrieval of the object will in fact cause a
+   possibly damaging remote operation to occur.  The unsafe URL is
+   typically constructed by specifying a port number other than that
+   reserved for the network protocol in question.  The client
+   unwittingly contacts a server which is in fact running a different
+   protocol.  The content of the URL contains instructions which when
+   interpreted according to this other protocol cause an unexpected
+   operation. An example has been the use of gopher URLs to cause a rude
+   message to be sent via a SMTP server.  Caution should be used when
+   using any URL which specifies a port number other than the default
+   for the protocol, especially when it is a number within the reserved
+   space.
+
+   Care should be taken when URLs contain embedded encoded delimiters
+   for a given protocol (for example, CR and LF characters for telnet
+   protocols) that these are not unencoded before transmission.  This
+   would violate the protocol but could be used to simulate an extra
+   operation or parameter, again causing an unexpected and possible
+   harmful remote operation to be performed.
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 20]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+   The use of URLs containing passwords that should be secret is clearly
+   unwise.
+
+7. Acknowledgements
+
+   This paper builds on the basic WWW design (RFC 1630) and much
+   discussion of these issues by many people on the network. The
+   discussion was particularly stimulated by articles by Clifford Lynch,
+   Brewster Kahle [10] and Wengyik Yeong [18]. Contributions from John
+   Curran, Clifford Neuman, Ed Vielmetti and later the IETF URL BOF and
+   URI working group were incorporated.
+
+   Most recently, careful readings and comments by Dan Connolly, Ned
+   Freed, Roy Fielding, Guido van Rossum, Michael Dolan, Bert Bos, John
+   Kunze, Olle Jarnefors, Peter Svanberg and many others have helped
+   refine this RFC.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 21]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+APPENDIX: Recommendations for URLs in Context
+
+   URIs, including URLs, are intended to be transmitted through
+   protocols which provide a context for their interpretation.
+
+   In some cases, it will be necessary to distinguish URLs from other
+   possible data structures in a syntactic structure. In this case, is
+   recommended that URLs be preceeded with a prefix consisting of the
+   characters "URL:". For example, this prefix may be used to
+   distinguish URLs from other kinds of URIs.
+
+   In addition, there are many occasions when URLs are included in other
+   kinds of text; examples include electronic mail, USENET news
+   messages, or printed on paper. In such cases, it is convenient to
+   have a separate syntactic wrapper that delimits the URL and separates
+   it from the rest of the text, and in particular from punctuation
+   marks that might be mistaken for part of the URL. For this purpose,
+   is recommended that angle brackets ("<" and ">"), along with the
+   prefix "URL:", be used to delimit the boundaries of the URL.  This
+   wrapper does not form part of the URL and should not be used in
+   contexts in which delimiters are already specified.
+
+   In the case where a fragment/anchor identifier is associated with a
+   URL (following a "#"), the identifier would be placed within the
+   brackets as well.
+
+   In some cases, extra whitespace (spaces, linebreaks, tabs, etc.) may
+   need to be added to break long URLs across lines.  The whitespace
+   should be ignored when extracting the URL.
+
+   No whitespace should be introduced after a hyphen ("-") character.
+   Because some typesetters and printers may (erroneously) introduce a
+   hyphen at the end of line when breaking a line, the interpreter of a
+   URL containing a line break immediately after a hyphen should ignore
+   all unencoded whitespace around the line break, and should be aware
+   that the hyphen may or may not actually be part of the URL.
+
+   Examples:
+
+      Yes, Jim, I found it under <URL:ftp://info.cern.ch/pub/www/doc;
+      type=d> but you can probably pick it up from <URL:ftp://ds.in
+      ternic.net/rfc>.  Note the warning in <URL:http://ds.internic.
+      net/instructions/overview.html#WARNING>.
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 22]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+References
+
+   [1] Anklesaria, F., McCahill, M., Lindner, P., Johnson, D.,
+       Torrey, D., and B. Alberti, "The Internet Gopher Protocol
+       (a distributed document search and retrieval protocol)",
+       RFC 1436, University of Minnesota, March 1993.
+       <URL:ftp://ds.internic.net/rfc/rfc1436.txt;type=a>
+
+   [2] Anklesaria, F., Lindner, P., McCahill, M., Torrey, D.,
+       Johnson, D., and B. Alberti, "Gopher+: Upward compatible
+       enhancements to the Internet Gopher protocol",
+       University of Minnesota, July 1993.
+       <URL:ftp://boombox.micro.umn.edu/pub/gopher/gopher_protocol
+       /Gopher+/Gopher+.txt>
+
+   [3] Berners-Lee, T., "Universal Resource Identifiers in WWW: A
+       Unifying Syntax for the Expression of Names and Addresses of
+       Objects on the Network as used in the World-Wide Web", RFC
+       1630, CERN, June 1994.
+       <URL:ftp://ds.internic.net/rfc/rfc1630.txt>
+
+   [4] Berners-Lee, T., "Hypertext Transfer Protocol (HTTP)",
+       CERN, November 1993.
+       <URL:ftp://info.cern.ch/pub/www/doc/http-spec.txt.Z>
+
+   [5] Braden, R., Editor, "Requirements for Internet Hosts --
+       Application and Support", STD 3, RFC 1123, IETF, October 1989.
+       <URL:ftp://ds.internic.net/rfc/rfc1123.txt>
+
+   [6] Crocker, D. "Standard for the Format of ARPA Internet Text
+       Messages", STD 11, RFC 822, UDEL, April 1982.
+       <URL:ftp://ds.internic.net/rfc/rfc822.txt>
+
+   [7] Davis, F., Kahle, B., Morris, H., Salem, J., Shen, T., Wang, R.,
+       Sui, J., and M. Grinbaum, "WAIS Interface Protocol Prototype
+       Functional Specification", (v1.5), Thinking Machines
+       Corporation, April 1990.
+       <URL:ftp://quake.think.com/pub/wais/doc/protspec.txt>
+
+   [8] Horton, M. and R. Adams, "Standard For Interchange of USENET
+       Messages", RFC 1036, AT&T Bell Laboratories, Center for Seismic
+       Studies, December 1987.
+       <URL:ftp://ds.internic.net/rfc/rfc1036.txt>
+
+   [9] Huitema, C., "Naming: Strategies and Techniques", Computer
+       Networks and ISDN Systems 23 (1991) 107-110.
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 23]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+  [10] Kahle, B., "Document Identifiers, or International Standard
+       Book Numbers for the Electronic Age", 1991.
+       <URL:ftp://quake.think.com/pub/wais/doc/doc-ids.txt>
+
+  [11] Kantor, B. and P. Lapsley, "Network News Transfer Protocol:
+       A Proposed Standard for the Stream-Based Transmission of News",
+       RFC 977, UC San Diego & UC Berkeley, February 1986.
+       <URL:ftp://ds.internic.net/rfc/rfc977.txt>
+
+  [12] Kunze, J., "Functional Requirements for Internet Resource
+       Locators", Work in Progress, December 1994.
+       <URL:ftp://ds.internic.net/internet-drafts
+       /draft-ietf-uri-irl-fun-req-02.txt>
+
+  [13] Mockapetris, P., "Domain Names - Concepts and Facilities",
+       STD 13, RFC 1034, USC/Information Sciences Institute,
+       November 1987.
+       <URL:ftp://ds.internic.net/rfc/rfc1034.txt>
+
+  [14] Neuman, B., and S. Augart, "The Prospero Protocol",
+       USC/Information Sciences Institute, June 1993.
+       <URL:ftp://prospero.isi.edu/pub/prospero/doc
+       /prospero-protocol.PS.Z>
+
+  [15] Postel, J. and J. Reynolds, "File Transfer Protocol (FTP)",
+       STD 9, RFC 959, USC/Information Sciences Institute,
+       October 1985.
+       <URL:ftp://ds.internic.net/rfc/rfc959.txt>
+
+  [16] Sollins, K. and L. Masinter, "Functional Requirements for
+       Uniform Resource Names", RFC 1737, MIT/LCS, Xerox Corporation,
+       December 1994.
+       <URL:ftp://ds.internic.net/rfc/rfc1737.txt>
+
+  [17] St. Pierre, M, Fullton, J., Gamiel, K., Goldman, J., Kahle, B.,
+       Kunze, J., Morris, H., and F. Schiettecatte, "WAIS over
+       Z39.50-1988", RFC 1625, WAIS, Inc., CNIDR, Thinking Machines
+       Corp., UC Berkeley, FS Consulting, June 1994.
+       <URL:ftp://ds.internic.net/rfc/rfc1625.txt>
+
+  [18] Yeong, W. "Towards Networked Information Retrieval", Technical
+       report 91-06-25-01, Performance Systems International, Inc.
+       <URL:ftp://uu.psi.com/wp/nir.txt>, June 1991.
+
+  [19] Yeong, W., "Representing Public Archives in the Directory",
+       Work in Progress, November 1991.
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 24]
+
+RFC 1738            Uniform Resource Locators (URL)        December 1994
+
+
+  [20] "Coded Character Set -- 7-bit American Standard Code for
+       Information Interchange", ANSI X3.4-1986.
+
+Editors' Addresses
+
+Tim Berners-Lee
+World-Wide Web project
+CERN,
+1211 Geneva 23,
+Switzerland
+
+Phone: +41 (22)767 3755
+Fax: +41 (22)767 7155
+EMail: timbl@info.cern.ch
+
+
+Larry Masinter
+Xerox PARC
+3333 Coyote Hill Road
+Palo Alto, CA 94034
+
+Phone: (415) 812-4365
+Fax: (415) 812-4333
+EMail: masinter@parc.xerox.com
+
+
+Mark McCahill
+Computer and Information Services,
+University of Minnesota
+Room 152 Shepherd Labs
+100 Union Street SE
+Minneapolis, MN 55455
+
+Phone: (612) 625 1300
+EMail: mpm@boombox.micro.umn.edu
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Berners-Lee, Masinter & McCahill                               [Page 25]
+
@@ -0,0 +1,1907 @@
+
+
+
+
+
+
+Network Working Group                                          J. Franks
+Request for Comments: 2617                       Northwestern University
+Obsoletes: 2069                                          P. Hallam-Baker
+Category: Standards Track                                 Verisign, Inc.
+                                                            J. Hostetler
+                                                         AbiSource, Inc.
+                                                             S. Lawrence
+                                                   Agranat Systems, Inc.
+                                                                P. Leach
+                                                   Microsoft Corporation
+                                                             A. Luotonen
+                                     Netscape Communications Corporation
+                                                              L. Stewart
+                                                       Open Market, Inc.
+                                                               June 1999
+
+
+      HTTP Authentication: Basic and Digest Access Authentication
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+Abstract
+
+   "HTTP/1.0", includes the specification for a Basic Access
+   Authentication scheme. This scheme is not considered to be a secure
+   method of user authentication (unless used in conjunction with some
+   external secure system such as SSL [5]), as the user name and
+   password are passed over the network as cleartext.
+
+   This document also provides the specification for HTTP's
+   authentication framework, the original Basic authentication scheme
+   and a scheme based on cryptographic hashes, referred to as "Digest
+   Access Authentication".  It is therefore also intended to serve as a
+   replacement for RFC 2069 [6].  Some optional elements specified by
+   RFC 2069 have been removed from this specification due to problems
+   found since its publication; other new elements have been added for
+   compatibility, those new elements have been made optional, but are
+   strongly recommended.
+
+
+
+Franks, et al.              Standards Track                     [Page 1]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   Like Basic, Digest access authentication verifies that both parties
+   to a communication know a shared secret (a password); unlike Basic,
+   this verification can be done without sending the password in the
+   clear, which is Basic's biggest weakness. As with most other
+   authentication protocols, the greatest sources of risks are usually
+   found not in the core protocol itself but in policies and procedures
+   surrounding its use.
+
+Table of Contents
+
+   1   Access Authentication................................   3
+    1.1   Reliance on the HTTP/1.1 Specification............   3
+    1.2   Access Authentication Framework...................   3
+   2   Basic Authentication Scheme..........................   5
+   3   Digest Access Authentication Scheme..................   6
+    3.1   Introduction......................................   6
+     3.1.1  Purpose.........................................   6
+     3.1.2  Overall Operation...............................   6
+     3.1.3  Representation of digest values.................   7
+     3.1.4  Limitations.....................................   7
+    3.2   Specification of Digest Headers...................   7
+     3.2.1  The WWW-Authenticate Response Header............   8
+     3.2.2  The Authorization Request Header................  11
+     3.2.3  The Authentication-Info Header..................  15
+    3.3   Digest Operation..................................  17
+    3.4   Security Protocol Negotiation.....................  18
+    3.5   Example...........................................  18
+    3.6   Proxy-Authentication and Proxy-Authorization......  19
+   4   Security Considerations..............................  19
+    4.1   Authentication of Clients using Basic
+          Authentication....................................  19
+    4.2   Authentication of Clients using Digest
+          Authentication....................................  20
+    4.3   Limited Use Nonce Values..........................  21
+    4.4   Comparison of Digest with Basic Authentication....  22
+    4.5   Replay Attacks....................................  22
+    4.6   Weakness Created by Multiple Authentication
+          Schemes...........................................  23
+    4.7   Online dictionary attacks.........................  23
+    4.8   Man in the Middle.................................  24
+    4.9   Chosen plaintext attacks..........................  24
+    4.10  Precomputed dictionary attacks....................  25
+    4.11  Batch brute force attacks.........................  25
+    4.12  Spoofing by Counterfeit Servers...................  25
+    4.13  Storing passwords.................................  26
+    4.14  Summary...........................................  26
+   5   Sample implementation................................  27
+   6   Acknowledgments......................................  31
+
+
+
+Franks, et al.              Standards Track                     [Page 2]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   7   References...........................................  31
+   8   Authors' Addresses...................................  32
+   9   Full Copyright Statement.............................  34
+
+1 Access Authentication
+
+1.1 Reliance on the HTTP/1.1 Specification
+
+   This specification is a companion to the HTTP/1.1 specification [2].
+   It uses the augmented BNF section 2.1 of that document, and relies on
+   both the non-terminals defined in that document and other aspects of
+   the HTTP/1.1 specification.
+
+1.2 Access Authentication Framework
+
+   HTTP provides a simple challenge-response authentication mechanism
+   that MAY be used by a server to challenge a client request and by a
+   client to provide authentication information. It uses an extensible,
+   case-insensitive token to identify the authentication scheme,
+   followed by a comma-separated list of attribute-value pairs which
+   carry the parameters necessary for achieving authentication via that
+   scheme.
+
+      auth-scheme    = token
+      auth-param     = token "=" ( token | quoted-string )
+
+   The 401 (Unauthorized) response message is used by an origin server
+   to challenge the authorization of a user agent. This response MUST
+   include a WWW-Authenticate header field containing at least one
+   challenge applicable to the requested resource. The 407 (Proxy
+   Authentication Required) response message is used by a proxy to
+   challenge the authorization of a client and MUST include a Proxy-
+   Authenticate header field containing at least one challenge
+   applicable to the proxy for the requested resource.
+
+      challenge   = auth-scheme 1*SP 1#auth-param
+
+   Note: User agents will need to take special care in parsing the WWW-
+   Authenticate or Proxy-Authenticate header field value if it contains
+   more than one challenge, or if more than one WWW-Authenticate header
+   field is provided, since the contents of a challenge may itself
+   contain a comma-separated list of authentication parameters.
+
+   The authentication parameter realm is defined for all authentication
+   schemes:
+
+      realm       = "realm" "=" realm-value
+      realm-value = quoted-string
+
+
+
+Franks, et al.              Standards Track                     [Page 3]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   The realm directive (case-insensitive) is required for all
+   authentication schemes that issue a challenge. The realm value
+   (case-sensitive), in combination with the canonical root URL (the
+   absoluteURI for the server whose abs_path is empty; see section 5.1.2
+   of [2]) of the server being accessed, defines the protection space.
+   These realms allow the protected resources on a server to be
+   partitioned into a set of protection spaces, each with its own
+   authentication scheme and/or authorization database. The realm value
+   is a string, generally assigned by the origin server, which may have
+   additional semantics specific to the authentication scheme. Note that
+   there may be multiple challenges with the same auth-scheme but
+   different realms.
+
+   A user agent that wishes to authenticate itself with an origin
+   server--usually, but not necessarily, after receiving a 401
+   (Unauthorized)--MAY do so by including an Authorization header field
+   with the request. A client that wishes to authenticate itself with a
+   proxy--usually, but not necessarily, after receiving a 407 (Proxy
+   Authentication Required)--MAY do so by including a Proxy-
+   Authorization header field with the request.  Both the Authorization
+   field value and the Proxy-Authorization field value consist of
+   credentials containing the authentication information of the client
+   for the realm of the resource being requested. The user agent MUST
+   choose to use one of the challenges with the strongest auth-scheme it
+   understands and request credentials from the user based upon that
+   challenge.
+
+   credentials = auth-scheme #auth-param
+
+      Note that many browsers will only recognize Basic and will require
+      that it be the first auth-scheme presented. Servers should only
+      include Basic if it is minimally acceptable.
+
+   The protection space determines the domain over which credentials can
+   be automatically applied. If a prior request has been authorized, the
+   same credentials MAY be reused for all other requests within that
+   protection space for a period of time determined by the
+   authentication scheme, parameters, and/or user preference. Unless
+   otherwise defined by the authentication scheme, a single protection
+   space cannot extend outside the scope of its server.
+
+   If the origin server does not wish to accept the credentials sent
+   with a request, it SHOULD return a 401 (Unauthorized) response. The
+   response MUST include a WWW-Authenticate header field containing at
+   least one (possibly new) challenge applicable to the requested
+   resource. If a proxy does not accept the credentials sent with a
+   request, it SHOULD return a 407 (Proxy Authentication Required). The
+   response MUST include a Proxy-Authenticate header field containing a
+
+
+
+Franks, et al.              Standards Track                     [Page 4]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   (possibly new) challenge applicable to the proxy for the requested
+   resource.
+
+   The HTTP protocol does not restrict applications to this simple
+   challenge-response mechanism for access authentication. Additional
+   mechanisms MAY be used, such as encryption at the transport level or
+   via message encapsulation, and with additional header fields
+   specifying authentication information. However, these additional
+   mechanisms are not defined by this specification.
+
+   Proxies MUST be completely transparent regarding user agent
+   authentication by origin servers. That is, they must forward the
+   WWW-Authenticate and Authorization headers untouched, and follow the
+   rules found in section 14.8 of [2]. Both the Proxy-Authenticate and
+   the Proxy-Authorization header fields are hop-by-hop headers (see
+   section 13.5.1 of [2]).
+
+2 Basic Authentication Scheme
+
+   The "basic" authentication scheme is based on the model that the
+   client must authenticate itself with a user-ID and a password for
+   each realm.  The realm value should be considered an opaque string
+   which can only be compared for equality with other realms on that
+   server. The server will service the request only if it can validate
+   the user-ID and password for the protection space of the Request-URI.
+   There are no optional authentication parameters.
+
+   For Basic, the framework above is utilized as follows:
+
+      challenge   = "Basic" realm
+      credentials = "Basic" basic-credentials
+
+   Upon receipt of an unauthorized request for a URI within the
+   protection space, the origin server MAY respond with a challenge like
+   the following:
+
+      WWW-Authenticate: Basic realm="WallyWorld"
+
+   where "WallyWorld" is the string assigned by the server to identify
+   the protection space of the Request-URI. A proxy may respond with the
+   same challenge using the Proxy-Authenticate header field.
+
+   To receive authorization, the client sends the userid and password,
+   separated by a single colon (":") character, within a base64 [7]
+   encoded string in the credentials.
+
+      basic-credentials = base64-user-pass
+      base64-user-pass  = <base64 [4] encoding of user-pass,
+
+
+
+Franks, et al.              Standards Track                     [Page 5]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+                       except not limited to 76 char/line>
+      user-pass   = userid ":" password
+      userid      = *<TEXT excluding ":">
+      password    = *TEXT
+
+   Userids might be case sensitive.
+
+   If the user agent wishes to send the userid "Aladdin" and password
+   "open sesame", it would use the following header field:
+
+      Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
+
+   A client SHOULD assume that all paths at or deeper than the depth of
+   the last symbolic element in the path field of the Request-URI also
+   are within the protection space specified by the Basic realm value of
+   the current challenge. A client MAY preemptively send the
+   corresponding Authorization header with requests for resources in
+   that space without receipt of another challenge from the server.
+   Similarly, when a client sends a request to a proxy, it may reuse a
+   userid and password in the Proxy-Authorization header field without
+   receiving another challenge from the proxy server. See section 4 for
+   security considerations associated with Basic authentication.
+
+3 Digest Access Authentication Scheme
+
+3.1 Introduction
+
+3.1.1 Purpose
+
+   The protocol referred to as "HTTP/1.0" includes the specification for
+   a Basic Access Authentication scheme[1]. That scheme is not
+   considered to be a secure method of user authentication, as the user
+   name and password are passed over the network in an unencrypted form.
+   This section provides the specification for a scheme that does not
+   send the password in cleartext,  referred to as "Digest Access
+   Authentication".
+
+   The Digest Access Authentication scheme is not intended to be a
+   complete answer to the need for security in the World Wide Web. This
+   scheme provides no encryption of message content. The intent is
+   simply to create an access authentication method that avoids the most
+   serious flaws of Basic authentication.
+
+3.1.2 Overall Operation
+
+   Like Basic Access Authentication, the Digest scheme is based on a
+   simple challenge-response paradigm. The Digest scheme challenges
+   using a nonce value. A valid response contains a checksum (by
+
+
+
+Franks, et al.              Standards Track                     [Page 6]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   default, the MD5 checksum) of the username, the password, the given
+   nonce value, the HTTP method, and the requested URI. In this way, the
+   password is never sent in the clear. Just as with the Basic scheme,
+   the username and password must be prearranged in some fashion not
+   addressed by this document.
+
+3.1.3 Representation of digest values
+
+   An optional header allows the server to specify the algorithm used to
+   create the checksum or digest. By default the MD5 algorithm is used
+   and that is the only algorithm described in this document.
+
+   For the purposes of this document, an MD5 digest of 128 bits is
+   represented as 32 ASCII printable characters. The bits in the 128 bit
+   digest are converted from most significant to least significant bit,
+   four bits at a time to their ASCII presentation as follows. Each four
+   bits is represented by its familiar hexadecimal notation from the
+   characters 0123456789abcdef. That is, binary 0000 gets represented by
+   the character '0', 0001, by '1', and so on up to the representation
+   of 1111 as 'f'.
+
+3.1.4 Limitations
+
+   The Digest authentication scheme described in this document suffers
+   from many known limitations. It is intended as a replacement for
+   Basic authentication and nothing more. It is a password-based system
+   and (on the server side) suffers from all the same problems of any
+   password system. In particular, no provision is made in this protocol
+   for the initial secure arrangement between user and server to
+   establish the user's password.
+
+   Users and implementors should be aware that this protocol is not as
+   secure as Kerberos, and not as secure as any client-side private-key
+   scheme. Nevertheless it is better than nothing, better than what is
+   commonly used with telnet and ftp, and better than Basic
+   authentication.
+
+3.2 Specification of Digest Headers
+
+   The Digest Access Authentication scheme is conceptually similar to
+   the Basic scheme. The formats of the modified WWW-Authenticate header
+   line and the Authorization header line are specified below. In
+   addition, a new header, Authentication-Info, is specified.
+
+
+
+
+
+
+
+
+Franks, et al.              Standards Track                     [Page 7]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+3.2.1 The WWW-Authenticate Response Header
+
+   If a server receives a request for an access-protected object, and an
+   acceptable Authorization header is not sent, the server responds with
+   a "401 Unauthorized" status code, and a WWW-Authenticate header as
+   per the framework defined above, which for the digest scheme is
+   utilized as follows:
+
+      challenge        =  "Digest" digest-challenge
+
+      digest-challenge  = 1#( realm | [ domain ] | nonce |
+                          [ opaque ] |[ stale ] | [ algorithm ] |
+                          [ qop-options ] | [auth-param] )
+
+
+      domain            = "domain" "=" <"> URI ( 1*SP URI ) <">
+      URI               = absoluteURI | abs_path
+      nonce             = "nonce" "=" nonce-value
+      nonce-value       = quoted-string
+      opaque            = "opaque" "=" quoted-string
+      stale             = "stale" "=" ( "true" | "false" )
+      algorithm         = "algorithm" "=" ( "MD5" | "MD5-sess" |
+                           token )
+      qop-options       = "qop" "=" <"> 1#qop-value <">
+      qop-value         = "auth" | "auth-int" | token
+
+   The meanings of the values of the directives used above are as
+   follows:
+
+   realm
+     A string to be displayed to users so they know which username and
+     password to use. This string should contain at least the name of
+     the host performing the authentication and might additionally
+     indicate the collection of users who might have access. An example
+     might be "registered_users@gotham.news.com".
+
+   domain
+     A quoted, space-separated list of URIs, as specified in RFC XURI
+     [7], that define the protection space.  If a URI is an abs_path, it
+     is relative to the canonical root URL (see section 1.2 above) of
+     the server being accessed. An absoluteURI in this list may refer to
+     a different server than the one being accessed. The client can use
+     this list to determine the set of URIs for which the same
+     authentication information may be sent: any URI that has a URI in
+     this list as a prefix (after both have been made absolute) may be
+     assumed to be in the same protection space. If this directive is
+     omitted or its value is empty, the client should assume that the
+     protection space consists of all URIs on the responding server.
+
+
+
+Franks, et al.              Standards Track                     [Page 8]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+     This directive is not meaningful in Proxy-Authenticate headers, for
+     which the protection space is always the entire proxy; if present
+     it should be ignored.
+
+   nonce
+     A server-specified data string which should be uniquely generated
+     each time a 401 response is made. It is recommended that this
+     string be base64 or hexadecimal data. Specifically, since the
+     string is passed in the header lines as a quoted string, the
+     double-quote character is not allowed.
+
+     The contents of the nonce are implementation dependent. The quality
+     of the implementation depends on a good choice. A nonce might, for
+     example, be constructed as the base 64 encoding of
+
+         time-stamp H(time-stamp ":" ETag ":" private-key)
+
+     where time-stamp is a server-generated time or other non-repeating
+     value, ETag is the value of the HTTP ETag header associated with
+     the requested entity, and private-key is data known only to the
+     server.  With a nonce of this form a server would recalculate the
+     hash portion after receiving the client authentication header and
+     reject the request if it did not match the nonce from that header
+     or if the time-stamp value is not recent enough. In this way the
+     server can limit the time of the nonce's validity. The inclusion of
+     the ETag prevents a replay request for an updated version of the
+     resource.  (Note: including the IP address of the client in the
+     nonce would appear to offer the server the ability to limit the
+     reuse of the nonce to the same client that originally got it.
+     However, that would break proxy farms, where requests from a single
+     user often go through different proxies in the farm. Also, IP
+     address spoofing is not that hard.)
+
+     An implementation might choose not to accept a previously used
+     nonce or a previously used digest, in order to protect against a
+     replay attack. Or, an implementation might choose to use one-time
+     nonces or digests for POST or PUT requests and a time-stamp for GET
+     requests.  For more details on the issues involved see section 4.
+     of this document.
+
+     The nonce is opaque to the client.
+
+   opaque
+     A string of data, specified by the server, which should be returned
+     by the client unchanged in the Authorization header of subsequent
+     requests with URIs in the same protection space. It is recommended
+     that this string be base64 or hexadecimal data.
+
+
+
+
+Franks, et al.              Standards Track                     [Page 9]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   stale
+     A flag, indicating that the previous request from the client was
+     rejected because the nonce value was stale. If stale is TRUE
+     (case-insensitive), the client may wish to simply retry the request
+     with a new encrypted response, without reprompting the user for a
+     new username and password. The server should only set stale to TRUE
+     if it receives a request for which the nonce is invalid but with a
+     valid digest for that nonce (indicating that the client knows the
+     correct username/password). If stale is FALSE, or anything other
+     than TRUE, or the stale directive is not present, the username
+     and/or password are invalid, and new values must be obtained.
+
+   algorithm
+     A string indicating a pair of algorithms used to produce the digest
+     and a checksum. If this is not present it is assumed to be "MD5".
+     If the algorithm is not understood, the challenge should be ignored
+     (and a different one used, if there is more than one).
+
+     In this document the string obtained by applying the digest
+     algorithm to the data "data" with secret "secret" will be denoted
+     by KD(secret, data), and the string obtained by applying the
+     checksum algorithm to the data "data" will be denoted H(data). The
+     notation unq(X) means the value of the quoted-string X without the
+     surrounding quotes.
+
+     For the "MD5" and "MD5-sess" algorithms
+
+         H(data) = MD5(data)
+
+     and
+
+         KD(secret, data) = H(concat(secret, ":", data))
+
+     i.e., the digest is the MD5 of the secret concatenated with a colon
+     concatenated with the data. The "MD5-sess" algorithm is intended to
+     allow efficient 3rd party authentication servers; for the
+     difference in usage, see the description in section 3.2.2.2.
+
+   qop-options
+     This directive is optional, but is made so only for backward
+     compatibility with RFC 2069 [6]; it SHOULD be used by all
+     implementations compliant with this version of the Digest scheme.
+     If present, it is a quoted string of one or more tokens indicating
+     the "quality of protection" values supported by the server.  The
+     value "auth" indicates authentication; the value "auth-int"
+     indicates authentication with integrity protection; see the
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 10]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+     descriptions below for calculating the response directive value for
+     the application of this choice. Unrecognized options MUST be
+     ignored.
+
+   auth-param
+     This directive allows for future extensions. Any unrecognized
+     directive MUST be ignored.
+
+3.2.2 The Authorization Request Header
+
+   The client is expected to retry the request, passing an Authorization
+   header line, which is defined according to the framework above,
+   utilized as follows.
+
+       credentials      = "Digest" digest-response
+       digest-response  = 1#( username | realm | nonce | digest-uri
+                       | response | [ algorithm ] | [cnonce] |
+                       [opaque] | [message-qop] |
+                           [nonce-count]  | [auth-param] )
+
+       username         = "username" "=" username-value
+       username-value   = quoted-string
+       digest-uri       = "uri" "=" digest-uri-value
+       digest-uri-value = request-uri   ; As specified by HTTP/1.1
+       message-qop      = "qop" "=" qop-value
+       cnonce           = "cnonce" "=" cnonce-value
+       cnonce-value     = nonce-value
+       nonce-count      = "nc" "=" nc-value
+       nc-value         = 8LHEX
+       response         = "response" "=" request-digest
+       request-digest = <"> 32LHEX <">
+       LHEX             =  "0" | "1" | "2" | "3" |
+                           "4" | "5" | "6" | "7" |
+                           "8" | "9" | "a" | "b" |
+                           "c" | "d" | "e" | "f"
+
+   The values of the opaque and algorithm fields must be those supplied
+   in the WWW-Authenticate response header for the entity being
+   requested.
+
+   response
+     A string of 32 hex digits computed as defined below, which proves
+     that the user knows a password
+
+   username
+     The user's name in the specified realm.
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 11]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   digest-uri
+     The URI from Request-URI of the Request-Line; duplicated here
+     because proxies are allowed to change the Request-Line in transit.
+
+   qop
+     Indicates what "quality of protection" the client has applied to
+     the message. If present, its value MUST be one of the alternatives
+     the server indicated it supports in the WWW-Authenticate header.
+     These values affect the computation of the request-digest. Note
+     that this is a single token, not a quoted list of alternatives as
+     in WWW- Authenticate.  This directive is optional in order to
+     preserve backward compatibility with a minimal implementation of
+     RFC 2069 [6], but SHOULD be used if the server indicated that qop
+     is supported by providing a qop directive in the WWW-Authenticate
+     header field.
+
+   cnonce
+     This MUST be specified if a qop directive is sent (see above), and
+     MUST NOT be specified if the server did not send a qop directive in
+     the WWW-Authenticate header field.  The cnonce-value is an opaque
+     quoted string value provided by the client and used by both client
+     and server to avoid chosen plaintext attacks, to provide mutual
+     authentication, and to provide some message integrity protection.
+     See the descriptions below of the calculation of the response-
+     digest and request-digest values.
+
+   nonce-count
+     This MUST be specified if a qop directive is sent (see above), and
+     MUST NOT be specified if the server did not send a qop directive in
+     the WWW-Authenticate header field.  The nc-value is the hexadecimal
+     count of the number of requests (including the current request)
+     that the client has sent with the nonce value in this request.  For
+     example, in the first request sent in response to a given nonce
+     value, the client sends "nc=00000001".  The purpose of this
+     directive is to allow the server to detect request replays by
+     maintaining its own copy of this count - if the same nc-value is
+     seen twice, then the request is a replay.   See the description
+     below of the construction of the request-digest value.
+
+   auth-param
+     This directive allows for future extensions. Any unrecognized
+     directive MUST be ignored.
+
+   If a directive or its value is improper, or required directives are
+   missing, the proper response is 400 Bad Request. If the request-
+   digest is invalid, then a login failure should be logged, since
+   repeated login failures from a single client may indicate an attacker
+   attempting to guess passwords.
+
+
+
+Franks, et al.              Standards Track                    [Page 12]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   The definition of request-digest above indicates the encoding for its
+   value. The following definitions show how the value is computed.
+
+3.2.2.1 Request-Digest
+
+   If the "qop" value is "auth" or "auth-int":
+
+      request-digest  = <"> < KD ( H(A1),     unq(nonce-value)
+                                          ":" nc-value
+                                          ":" unq(cnonce-value)
+                                          ":" unq(qop-value)
+                                          ":" H(A2)
+                                  ) <">
+
+   If the "qop" directive is not present (this construction is for
+   compatibility with RFC 2069):
+
+      request-digest  =
+                 <"> < KD ( H(A1), unq(nonce-value) ":" H(A2) ) >
+   <">
+
+   See below for the definitions for A1 and A2.
+
+3.2.2.2 A1
+
+   If the "algorithm" directive's value is "MD5" or is unspecified, then
+   A1 is:
+
+      A1       = unq(username-value) ":" unq(realm-value) ":" passwd
+
+   where
+
+      passwd   = < user's password >
+
+   If the "algorithm" directive's value is "MD5-sess", then A1 is
+   calculated only once - on the first request by the client following
+   receipt of a WWW-Authenticate challenge from the server.  It uses the
+   server nonce from that challenge, and the first client nonce value to
+   construct A1 as follows:
+
+      A1       = H( unq(username-value) ":" unq(realm-value)
+                     ":" passwd )
+                     ":" unq(nonce-value) ":" unq(cnonce-value)
+
+   This creates a 'session key' for the authentication of subsequent
+   requests and responses which is different for each "authentication
+   session", thus limiting the amount of material hashed with any one
+   key.  (Note: see further discussion of the authentication session in
+
+
+
+Franks, et al.              Standards Track                    [Page 13]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   section 3.3.) Because the server need only use the hash of the user
+   credentials in order to create the A1 value, this construction could
+   be used in conjunction with a third party authentication service so
+   that the web server would not need the actual password value.  The
+   specification of such a protocol is beyond the scope of this
+   specification.
+
+3.2.2.3 A2
+
+   If the "qop" directive's value is "auth" or is unspecified, then A2
+   is:
+
+      A2       = Method ":" digest-uri-value
+
+   If the "qop" value is "auth-int", then A2 is:
+
+      A2       = Method ":" digest-uri-value ":" H(entity-body)
+
+3.2.2.4 Directive values and quoted-string
+
+   Note that the value of many of the directives, such as "username-
+   value", are defined as a "quoted-string". However, the "unq" notation
+   indicates that surrounding quotation marks are removed in forming the
+   string A1. Thus if the Authorization header includes the fields
+
+     username="Mufasa", realm=myhost@testrealm.com
+
+   and the user Mufasa has password "Circle Of Life" then H(A1) would be
+   H(Mufasa:myhost@testrealm.com:Circle Of Life) with no quotation marks
+   in the digested string.
+
+   No white space is allowed in any of the strings to which the digest
+   function H() is applied unless that white space exists in the quoted
+   strings or entity body whose contents make up the string to be
+   digested. For example, the string A1 illustrated above must be
+
+        Mufasa:myhost@testrealm.com:Circle Of Life
+
+   with no white space on either side of the colons, but with the white
+   space between the words used in the password value.  Likewise, the
+   other strings digested by H() must not have white space on either
+   side of the colons which delimit their fields unless that white space
+   was in the quoted strings or entity body being digested.
+
+   Also note that if integrity protection is applied (qop=auth-int), the
+   H(entity-body) is the hash of the entity body, not the message body -
+   it is computed before any transfer encoding is applied by the sender
+
+
+
+
+Franks, et al.              Standards Track                    [Page 14]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   and after it has been removed by the recipient. Note that this
+   includes multipart boundaries and embedded headers in each part of
+   any multipart content-type.
+
+3.2.2.5 Various considerations
+
+   The "Method" value is the HTTP request method as specified in section
+   5.1.1 of [2]. The "request-uri" value is the Request-URI from the
+   request line as specified in section 5.1.2 of [2]. This may be "*",
+   an "absoluteURL" or an "abs_path" as specified in section 5.1.2 of
+   [2], but it MUST agree with the Request-URI. In particular, it MUST
+   be an "absoluteURL" if the Request-URI is an "absoluteURL". The
+   "cnonce-value" is an optional  client-chosen value whose purpose is
+   to foil chosen plaintext attacks.
+
+   The authenticating server must assure that the resource designated by
+   the "uri" directive is the same as the resource specified in the
+   Request-Line; if they are not, the server SHOULD return a 400 Bad
+   Request error. (Since this may be a symptom of an attack, server
+   implementers may want to consider logging such errors.) The purpose
+   of duplicating information from the request URL in this field is to
+   deal with the possibility that an intermediate proxy may alter the
+   client's Request-Line. This altered (but presumably semantically
+   equivalent) request would not result in the same digest as that
+   calculated by the client.
+
+   Implementers should be aware of how authenticated transactions
+   interact with shared caches. The HTTP/1.1 protocol specifies that
+   when a shared cache (see section 13.7 of [2]) has received a request
+   containing an Authorization header and a response from relaying that
+   request, it MUST NOT return that response as a reply to any other
+   request, unless one of two Cache-Control (see section 14.9 of [2])
+   directives was present in the response. If the original response
+   included the "must-revalidate" Cache-Control directive, the cache MAY
+   use the entity of that response in replying to a subsequent request,
+   but MUST first revalidate it with the origin server, using the
+   request headers from the new request to allow the origin server to
+   authenticate the new request. Alternatively, if the original response
+   included the "public" Cache-Control directive, the response entity
+   MAY be returned in reply to any subsequent request.
+
+3.2.3 The Authentication-Info Header
+
+   The Authentication-Info header is used by the server to communicate
+   some information regarding the successful authentication in the
+   response.
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 15]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+        AuthenticationInfo = "Authentication-Info" ":" auth-info
+        auth-info          = 1#(nextnonce | [ message-qop ]
+                               | [ response-auth ] | [ cnonce ]
+                               | [nonce-count] )
+        nextnonce          = "nextnonce" "=" nonce-value
+        response-auth      = "rspauth" "=" response-digest
+        response-digest    = <"> *LHEX <">
+
+   The value of the nextnonce directive is the nonce the server wishes
+   the client to use for a future authentication response.  The server
+   may send the Authentication-Info header with a nextnonce field as a
+   means of implementing one-time or otherwise changing  nonces. If the
+   nextnonce field is present the client SHOULD use it when constructing
+   the Authorization header for its next request. Failure of the client
+   to do so may result in a request to re-authenticate from the server
+   with the "stale=TRUE".
+
+     Server implementations should carefully consider the performance
+     implications of the use of this mechanism; pipelined requests will
+     not be possible if every response includes a nextnonce directive
+     that must be used on the next request received by the server.
+     Consideration should be given to the performance vs. security
+     tradeoffs of allowing an old nonce value to be used for a limited
+     time to permit request pipelining.  Use of the nonce-count can
+     retain most of the security advantages of a new server nonce
+     without the deleterious affects on pipelining.
+
+   message-qop
+     Indicates the "quality of protection" options applied to the
+     response by the server.  The value "auth" indicates authentication;
+     the value "auth-int" indicates authentication with integrity
+     protection. The server SHOULD use the same value for the message-
+     qop directive in the response as was sent by the client in the
+     corresponding request.
+
+   The optional response digest in the "response-auth" directive
+   supports mutual authentication -- the server proves that it knows the
+   user's secret, and with qop=auth-int also provides limited integrity
+   protection of the response. The "response-digest" value is calculated
+   as for the "request-digest" in the Authorization header, except that
+   if "qop=auth" or is not specified in the Authorization header for the
+   request, A2 is
+
+      A2       = ":" digest-uri-value
+
+   and if "qop=auth-int", then A2 is
+
+      A2       = ":" digest-uri-value ":" H(entity-body)
+
+
+
+Franks, et al.              Standards Track                    [Page 16]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   where "digest-uri-value" is the value of the "uri" directive on the
+   Authorization header in the request. The "cnonce-value" and "nc-
+   value" MUST be the ones for the client request to which this message
+   is the response. The "response-auth", "cnonce", and "nonce-count"
+   directives MUST BE present if "qop=auth" or "qop=auth-int" is
+   specified.
+
+   The Authentication-Info header is allowed in the trailer of an HTTP
+   message transferred via chunked transfer-coding.
+
+3.3 Digest Operation
+
+   Upon receiving the Authorization header, the server may check its
+   validity by looking up the password that corresponds to the submitted
+   username. Then, the server must perform the same digest operation
+   (e.g., MD5) performed by the client, and compare the result to the
+   given request-digest value.
+
+   Note that the HTTP server does not actually need to know the user's
+   cleartext password. As long as H(A1) is available to the server, the
+   validity of an Authorization header may be verified.
+
+   The client response to a WWW-Authenticate challenge for a protection
+   space starts an authentication session with that protection space.
+   The authentication session lasts until the client receives another
+   WWW-Authenticate challenge from any server in the protection space. A
+   client should remember the username, password, nonce, nonce count and
+   opaque values associated with an authentication session to use to
+   construct the Authorization header in future requests within that
+   protection space. The Authorization header may be included
+   preemptively; doing so improves server efficiency and avoids extra
+   round trips for authentication challenges. The server may choose to
+   accept the old Authorization header information, even though the
+   nonce value included might not be fresh. Alternatively, the server
+   may return a 401 response with a new nonce value, causing the client
+   to retry the request; by specifying stale=TRUE with this response,
+   the server tells the client to retry with the new nonce, but without
+   prompting for a new username and password.
+
+   Because the client is required to return the value of the opaque
+   directive given to it by the server for the duration of a session,
+   the opaque data may be used to transport authentication session state
+   information. (Note that any such use can also be accomplished more
+   easily and safely by including the state in the nonce.) For example,
+   a server could be responsible for authenticating content that
+   actually sits on another server. It would achieve this by having the
+   first 401 response include a domain directive whose value includes a
+   URI on the second server, and an opaque directive whose value
+
+
+
+Franks, et al.              Standards Track                    [Page 17]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   contains the state information. The client will retry the request, at
+   which time the server might respond with a 301/302 redirection,
+   pointing to the URI on the second server. The client will follow the
+   redirection, and pass an Authorization header , including the
+   <opaque> data.
+
+   As with the basic scheme, proxies must be completely transparent in
+   the Digest access authentication scheme. That is, they must forward
+   the WWW-Authenticate, Authentication-Info and Authorization headers
+   untouched. If a proxy wants to authenticate a client before a request
+   is forwarded to the server, it can be done using the Proxy-
+   Authenticate and Proxy-Authorization headers described in section 3.6
+   below.
+
+3.4 Security Protocol Negotiation
+
+   It is useful for a server to be able to know which security schemes a
+   client is capable of handling.
+
+   It is possible that a server may want to require Digest as its
+   authentication method, even if the server does not know that the
+   client supports it. A client is encouraged to fail gracefully if the
+   server specifies only authentication schemes it cannot handle.
+
+3.5 Example
+
+   The following example assumes that an access-protected document is
+   being requested from the server via a GET request. The URI of the
+   document is "http://www.nowhere.org/dir/index.html". Both client and
+   server know that the username for this document is "Mufasa", and the
+   password is "Circle Of Life" (with one space between each of the
+   three words).
+
+   The first time the client requests the document, no Authorization
+   header is sent, so the server responds with:
+
+         HTTP/1.1 401 Unauthorized
+         WWW-Authenticate: Digest
+                 realm="testrealm@host.com",
+                 qop="auth,auth-int",
+                 nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
+                 opaque="5ccc069c403ebaf9f0171e9517f40e41"
+
+   The client may prompt the user for the username and password, after
+   which it will respond with a new request, including the following
+   Authorization header:
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 18]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+         Authorization: Digest username="Mufasa",
+                 realm="testrealm@host.com",
+                 nonce="dcd98b7102dd2f0e8b11d0f600bfb0c093",
+                 uri="/dir/index.html",
+                 qop=auth,
+                 nc=00000001,
+                 cnonce="0a4f113b",
+                 response="6629fae49393a05397450978507c4ef1",
+                 opaque="5ccc069c403ebaf9f0171e9517f40e41"
+
+3.6 Proxy-Authentication and Proxy-Authorization
+
+   The digest authentication scheme may also be used for authenticating
+   users to proxies, proxies to proxies, or proxies to origin servers by
+   use of the Proxy-Authenticate and Proxy-Authorization headers. These
+   headers are instances of the Proxy-Authenticate and Proxy-
+   Authorization headers specified in sections 10.33 and 10.34 of the
+   HTTP/1.1 specification [2] and their behavior is subject to
+   restrictions described there. The transactions for proxy
+   authentication are very similar to those already described. Upon
+   receiving a request which requires authentication, the proxy/server
+   must issue the "407 Proxy Authentication Required" response with a
+   "Proxy-Authenticate" header.  The digest-challenge used in the
+   Proxy-Authenticate header is the same as that for the WWW-
+   Authenticate header as defined above in section 3.2.1.
+
+   The client/proxy must then re-issue the request with a Proxy-
+   Authorization header, with directives as specified for the
+   Authorization header in section 3.2.2 above.
+
+   On subsequent responses, the server sends Proxy-Authentication-Info
+   with directives the same as those for the Authentication-Info header
+   field.
+
+   Note that in principle a client could be asked to authenticate itself
+   to both a proxy and an end-server, but never in the same response.
+
+4 Security Considerations
+
+4.1 Authentication of Clients using Basic Authentication
+
+   The Basic authentication scheme is not a secure method of user
+   authentication, nor does it in any way protect the entity, which is
+   transmitted in cleartext across the physical network used as the
+   carrier. HTTP does not prevent additional authentication schemes and
+   encryption mechanisms from being employed to increase security or the
+   addition of enhancements (such as schemes to use one-time passwords)
+   to Basic authentication.
+
+
+
+Franks, et al.              Standards Track                    [Page 19]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   The most serious flaw in Basic authentication is that it results in
+   the essentially cleartext transmission of the user's password over
+   the physical network. It is this problem which Digest Authentication
+   attempts to address.
+
+   Because Basic authentication involves the cleartext transmission of
+   passwords it SHOULD NOT be used (without enhancements) to protect
+   sensitive or valuable information.
+
+   A common use of Basic authentication is for identification purposes
+   -- requiring the user to provide a user name and password as a means
+   of identification, for example, for purposes of gathering accurate
+   usage statistics on a server. When used in this way it is tempting to
+   think that there is no danger in its use if illicit access to the
+   protected documents is not a major concern. This is only correct if
+   the server issues both user name and password to the users and in
+   particular does not allow the user to choose his or her own password.
+   The danger arises because naive users frequently reuse a single
+   password to avoid the task of maintaining multiple passwords.
+
+   If a server permits users to select their own passwords, then the
+   threat is not only unauthorized access to documents on the server but
+   also unauthorized access to any other resources on other systems that
+   the user protects with the same password. Furthermore, in the
+   server's password database, many of the passwords may also be users'
+   passwords for other sites. The owner or administrator of such a
+   system could therefore expose all users of the system to the risk of
+   unauthorized access to all those sites if this information is not
+   maintained in a secure fashion.
+
+   Basic Authentication is also vulnerable to spoofing by counterfeit
+   servers. If a user can be led to believe that he is connecting to a
+   host containing information protected by Basic authentication when,
+   in fact, he is connecting to a hostile server or gateway, then the
+   attacker can request a password, store it for later use, and feign an
+   error. This type of attack is not possible with Digest
+   Authentication. Server implementers SHOULD guard against the
+   possibility of this sort of counterfeiting by gateways or CGI
+   scripts. In particular it is very dangerous for a server to simply
+   turn over a connection to a gateway.  That gateway can then use the
+   persistent connection mechanism to engage in multiple transactions
+   with the client while impersonating the original server in a way that
+   is not detectable by the client.
+
+4.2 Authentication of Clients using Digest Authentication
+
+   Digest Authentication does not provide a strong authentication
+   mechanism, when compared to public key based mechanisms, for example.
+
+
+
+Franks, et al.              Standards Track                    [Page 20]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   However, it is significantly stronger than (e.g.) CRAM-MD5, which has
+   been proposed for use with LDAP [10], POP and IMAP (see RFC 2195
+   [9]).  It is intended to replace the much weaker and even more
+   dangerous Basic mechanism.
+
+   Digest Authentication offers no confidentiality protection beyond
+   protecting the actual password. All of the rest of the request and
+   response are available to an eavesdropper.
+
+   Digest Authentication offers only limited integrity protection for
+   the messages in either direction. If  qop=auth-int mechanism is used,
+   those parts of the message used in the calculation of the WWW-
+   Authenticate and Authorization header field response directive values
+   (see section 3.2 above) are  protected.  Most header fields and their
+   values could be modified as a part of a man-in-the-middle attack.
+
+   Many needs for secure HTTP transactions cannot be met by Digest
+   Authentication. For those needs TLS or SHTTP are more appropriate
+   protocols. In particular Digest authentication cannot be used for any
+   transaction requiring confidentiality protection.  Nevertheless many
+   functions remain for which Digest authentication is both useful and
+   appropriate.  Any service in present use that uses Basic should be
+   switched to Digest as soon as practical.
+
+4.3 Limited Use Nonce Values
+
+   The Digest scheme uses a server-specified nonce to seed the
+   generation of the request-digest value (as specified in section
+   3.2.2.1 above).  As shown in the example nonce in section 3.2.1, the
+   server is free to construct the nonce such that it may only be used
+   from a particular client, for a particular resource, for a limited
+   period of time or number of uses, or any other restrictions.  Doing
+   so strengthens the protection provided against, for example, replay
+   attacks (see 4.5).  However, it should be noted that the method
+   chosen for generating and checking the nonce also has performance and
+   resource implications.  For example, a server may choose to allow
+   each nonce value to be used only once by maintaining a record of
+   whether or not each recently issued nonce has been returned and
+   sending a next-nonce directive in the Authentication-Info header
+   field of every response. This protects against even an immediate
+   replay attack, but has a high cost checking nonce values, and perhaps
+   more important will cause authentication failures for any pipelined
+   requests (presumably returning a stale nonce indication).  Similarly,
+   incorporating a request-specific element such as the Etag value for a
+   resource limits the use of the nonce to that version of the resource
+   and also defeats pipelining. Thus it may be useful to do so for
+   methods with side effects but have unacceptable performance for those
+   that do not.
+
+
+
+Franks, et al.              Standards Track                    [Page 21]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+4.4 Comparison of Digest with Basic Authentication
+
+   Both Digest and Basic Authentication are very much on the weak end of
+   the security strength spectrum. But a comparison between the two
+   points out the utility, even necessity, of replacing Basic by Digest.
+
+   The greatest threat to the type of transactions for which these
+   protocols are used is network snooping. This kind of transaction
+   might involve, for example, online access to a database whose use is
+   restricted to paying subscribers. With Basic authentication an
+   eavesdropper can obtain the password of the user. This not only
+   permits him to access anything in the database, but, often worse,
+   will permit access to anything else the user protects with the same
+   password.
+
+   By contrast, with Digest Authentication the eavesdropper only gets
+   access to the transaction in question and not to the user's password.
+   The information gained by the eavesdropper would permit a replay
+   attack, but only with a request for the same document, and even that
+   may be limited by the server's choice of nonce.
+
+4.5 Replay Attacks
+
+   A replay attack against Digest authentication would usually be
+   pointless for a simple GET request since an eavesdropper would
+   already have seen the only document he could obtain with a replay.
+   This is because the URI of the requested document is digested in the
+   client request and the server will only deliver that document. By
+   contrast under Basic Authentication once the eavesdropper has the
+   user's password, any document protected by that password is open to
+   him.
+
+   Thus, for some purposes, it is necessary to protect against replay
+   attacks. A good Digest implementation can do this in various ways.
+   The server created "nonce" value is implementation dependent, but if
+   it contains a digest of the client IP, a time-stamp, the resource
+   ETag, and a private server key (as recommended above) then a replay
+   attack is not simple. An attacker must convince the server that the
+   request is coming from a false IP address and must cause the server
+   to deliver the document to an IP address different from the address
+   to which it believes it is sending the document. An attack can only
+   succeed in the period before the time-stamp expires. Digesting the
+   client IP and time-stamp in the nonce permits an implementation which
+   does not maintain state between transactions.
+
+   For applications where no possibility of replay attack can be
+   tolerated the server can use one-time nonce values which will not be
+   honored for a second use. This requires the overhead of the server
+
+
+
+Franks, et al.              Standards Track                    [Page 22]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   remembering which nonce values have been used until the nonce time-
+   stamp (and hence the digest built with it) has expired, but it
+   effectively protects against replay attacks.
+
+   An implementation must give special attention to the possibility of
+   replay attacks with POST and PUT requests. Unless the server employs
+   one-time or otherwise limited-use nonces and/or insists on the use of
+   the integrity protection of qop=auth-int, an attacker could replay
+   valid credentials from a successful request with counterfeit form
+   data or other message body. Even with the use of integrity protection
+   most metadata in header fields is not protected. Proper nonce
+   generation and checking provides some protection against replay of
+   previously used valid credentials, but see 4.8.
+
+4.6 Weakness Created by Multiple Authentication Schemes
+
+   An HTTP/1.1 server may return multiple challenges with a 401
+   (Authenticate) response, and each challenge may use a different
+   auth-scheme. A user agent MUST choose to use the strongest auth-
+   scheme it understands and request credentials from the user based
+   upon that challenge.
+
+      Note that many browsers will only recognize Basic and will require
+      that it be the first auth-scheme presented. Servers should only
+      include Basic if it is minimally acceptable.
+
+   When the server offers choices of authentication schemes using the
+   WWW-Authenticate header, the strength of the resulting authentication
+   is only as good as that of the of the weakest of the authentication
+   schemes. See section 4.8 below for discussion of particular attack
+   scenarios that exploit multiple authentication schemes.
+
+4.7 Online dictionary attacks
+
+   If the attacker can eavesdrop, then it can test any overheard
+   nonce/response pairs against a list of common words. Such a list is
+   usually much smaller than the total number of possible passwords. The
+   cost of computing the response for each password on the list is paid
+   once for each challenge.
+
+   The server can mitigate this attack by not allowing users to select
+   passwords that are in a dictionary.
+
+
+
+
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 23]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+4.8 Man in the Middle
+
+   Both Basic and Digest authentication are vulnerable to "man in the
+   middle" (MITM) attacks, for example, from a hostile or compromised
+   proxy. Clearly, this would present all the problems of eavesdropping.
+   But it also offers some additional opportunities to the attacker.
+
+   A possible man-in-the-middle attack would be to add a weak
+   authentication scheme to the set of choices, hoping that the client
+   will use one that exposes the user's credentials (e.g. password). For
+   this reason, the client should always use the strongest scheme that
+   it understands from the choices offered.
+
+   An even better MITM attack would be to remove all offered choices,
+   replacing them with a challenge that requests only Basic
+   authentication, then uses the cleartext credentials from the Basic
+   authentication to authenticate to the origin server using the
+   stronger scheme it requested. A particularly insidious way to mount
+   such a MITM attack would be to offer a "free" proxy caching service
+   to gullible users.
+
+   User agents should consider measures such as presenting a visual
+   indication at the time of the credentials request of what
+   authentication scheme is to be used, or remembering the strongest
+   authentication scheme ever requested by a server and produce a
+   warning message before using a weaker one. It might also be a good
+   idea for the user agent to be configured to demand Digest
+   authentication in general, or from specific sites.
+
+   Or, a hostile proxy might spoof the client into making a request the
+   attacker wanted rather than one the client wanted. Of course, this is
+   still much harder than a comparable attack against Basic
+   Authentication.
+
+4.9 Chosen plaintext attacks
+
+   With Digest authentication, a MITM or a malicious server can
+   arbitrarily choose the nonce that the client will use to compute the
+   response. This is called a "chosen plaintext" attack. The ability to
+   choose the nonce is known to make cryptanalysis much easier [8].
+
+   However, no way to analyze the MD5 one-way function used by Digest
+   using chosen plaintext is currently known.
+
+   The countermeasure against this attack is for clients to be
+   configured to require the use of the optional "cnonce" directive;
+   this allows the client to vary the input to the hash in a way not
+   chosen by the attacker.
+
+
+
+Franks, et al.              Standards Track                    [Page 24]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+4.10 Precomputed dictionary attacks
+
+   With Digest authentication, if the attacker can execute a chosen
+   plaintext attack, the attacker can precompute the response for many
+   common words to a nonce of its choice, and store a dictionary of
+   (response, password) pairs. Such precomputation can often be done in
+   parallel on many machines. It can then use the chosen plaintext
+   attack to acquire a response corresponding to that challenge, and
+   just look up the password in the dictionary. Even if most passwords
+   are not in the dictionary, some might be. Since the attacker gets to
+   pick the challenge, the cost of computing the response for each
+   password on the list can be amortized over finding many passwords. A
+   dictionary with 100 million password/response pairs would take about
+   3.2 gigabytes of disk storage.
+
+   The countermeasure against this attack is to for clients to be
+   configured to require the use of the optional "cnonce" directive.
+
+4.11 Batch brute force attacks
+
+   With Digest authentication, a MITM can execute a chosen plaintext
+   attack, and can gather responses from many users to the same nonce.
+   It can then find all the passwords within any subset of password
+   space that would generate one of the nonce/response pairs in a single
+   pass over that space. It also reduces the time to find the first
+   password by a factor equal to the number of nonce/response pairs
+   gathered. This search of the password space can often be done in
+   parallel on many machines, and even a single machine can search large
+   subsets of the password space very quickly -- reports exist of
+   searching all passwords with six or fewer letters in a few hours.
+
+   The countermeasure against this attack is to for clients to be
+   configured to require the use of the optional "cnonce" directive.
+
+4.12 Spoofing by Counterfeit Servers
+
+   Basic Authentication is vulnerable to spoofing by counterfeit
+   servers.  If a user can be led to believe that she is connecting to a
+   host containing information protected by a password she knows, when
+   in fact she is connecting to a hostile server, then the hostile
+   server can request a password, store it away for later use, and feign
+   an error.  This type of attack is more difficult with Digest
+   Authentication -- but the client must know to demand that Digest
+   authentication be used, perhaps using some of the techniques
+   described above to counter "man-in-the-middle" attacks.  Again, the
+   user can be helped in detecting this attack by a visual indication of
+   the authentication mechanism in use with appropriate guidance in
+   interpreting the implications of each scheme.
+
+
+
+Franks, et al.              Standards Track                    [Page 25]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+4.13 Storing passwords
+
+   Digest authentication requires that the authenticating agent (usually
+   the server) store some data derived from the user's name and password
+   in a "password file" associated with a given realm. Normally this
+   might contain pairs consisting of username and H(A1), where H(A1) is
+   the digested value of the username, realm, and password as described
+   above.
+
+   The security implications of this are that if this password file is
+   compromised, then an attacker gains immediate access to documents on
+   the server using this realm. Unlike, say a standard UNIX password
+   file, this information need not be decrypted in order to access
+   documents in the server realm associated with this file. On the other
+   hand, decryption, or more likely a brute force attack, would be
+   necessary to obtain the user's password. This is the reason that the
+   realm is part of the digested data stored in the password file. It
+   means that if one Digest authentication password file is compromised,
+   it does not automatically compromise others with the same username
+   and password (though it does expose them to brute force attack).
+
+   There are two important security consequences of this. First the
+   password file must be protected as if it contained unencrypted
+   passwords, because for the purpose of accessing documents in its
+   realm, it effectively does.
+
+   A second consequence of this is that the realm string should be
+   unique among all realms which any single user is likely to use. In
+   particular a realm string should include the name of the host doing
+   the authentication. The inability of the client to authenticate the
+   server is a weakness of Digest Authentication.
+
+4.14 Summary
+
+   By modern cryptographic standards Digest Authentication is weak. But
+   for a large range of purposes it is valuable as a replacement for
+   Basic Authentication. It remedies some, but not all, weaknesses of
+   Basic Authentication. Its strength may vary depending on the
+   implementation.  In particular the structure of the nonce (which is
+   dependent on the server implementation) may affect the ease of
+   mounting a replay attack.  A range of server options is appropriate
+   since, for example, some implementations may be willing to accept the
+   server overhead of one-time nonces or digests to eliminate the
+   possibility of replay. Others may satisfied with a nonce like the one
+   recommended above restricted to a single IP address and a single ETag
+   or with a limited lifetime.
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 26]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   The bottom line is that *any* compliant implementation will be
+   relatively weak by cryptographic standards, but *any* compliant
+   implementation will be far superior to Basic Authentication.
+
+5 Sample implementation
+
+   The following code implements the calculations of H(A1), H(A2),
+   request-digest and response-digest, and a test program which computes
+   the values used in the example of section 3.5. It uses the MD5
+   implementation from RFC 1321.
+
+   File "digcalc.h":
+
+#define HASHLEN 16
+typedef char HASH[HASHLEN];
+#define HASHHEXLEN 32
+typedef char HASHHEX[HASHHEXLEN+1];
+#define IN
+#define OUT
+
+/* calculate H(A1) as per HTTP Digest spec */
+void DigestCalcHA1(
+    IN char * pszAlg,
+    IN char * pszUserName,
+    IN char * pszRealm,
+    IN char * pszPassword,
+    IN char * pszNonce,
+    IN char * pszCNonce,
+    OUT HASHHEX SessionKey
+    );
+
+/* calculate request-digest/response-digest as per HTTP Digest spec */
+void DigestCalcResponse(
+    IN HASHHEX HA1,           /* H(A1) */
+    IN char * pszNonce,       /* nonce from server */
+    IN char * pszNonceCount,  /* 8 hex digits */
+    IN char * pszCNonce,      /* client nonce */
+    IN char * pszQop,         /* qop-value: "", "auth", "auth-int" */
+    IN char * pszMethod,      /* method from the request */
+    IN char * pszDigestUri,   /* requested URL */
+    IN HASHHEX HEntity,       /* H(entity body) if qop="auth-int" */
+    OUT HASHHEX Response      /* request-digest or response-digest */
+    );
+
+File "digcalc.c":
+
+#include <global.h>
+#include <md5.h>
+
+
+
+Franks, et al.              Standards Track                    [Page 27]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+#include <string.h>
+#include "digcalc.h"
+
+void CvtHex(
+    IN HASH Bin,
+    OUT HASHHEX Hex
+    )
+{
+    unsigned short i;
+    unsigned char j;
+
+    for (i = 0; i < HASHLEN; i++) {
+        j = (Bin[i] >> 4) & 0xf;
+        if (j <= 9)
+            Hex[i*2] = (j + '0');
+         else
+            Hex[i*2] = (j + 'a' - 10);
+        j = Bin[i] & 0xf;
+        if (j <= 9)
+            Hex[i*2+1] = (j + '0');
+         else
+            Hex[i*2+1] = (j + 'a' - 10);
+    };
+    Hex[HASHHEXLEN] = '\0';
+};
+
+/* calculate H(A1) as per spec */
+void DigestCalcHA1(
+    IN char * pszAlg,
+    IN char * pszUserName,
+    IN char * pszRealm,
+    IN char * pszPassword,
+    IN char * pszNonce,
+    IN char * pszCNonce,
+    OUT HASHHEX SessionKey
+    )
+{
+      MD5_CTX Md5Ctx;
+      HASH HA1;
+
+      MD5Init(&Md5Ctx);
+      MD5Update(&Md5Ctx, pszUserName, strlen(pszUserName));
+      MD5Update(&Md5Ctx, ":", 1);
+      MD5Update(&Md5Ctx, pszRealm, strlen(pszRealm));
+      MD5Update(&Md5Ctx, ":", 1);
+      MD5Update(&Md5Ctx, pszPassword, strlen(pszPassword));
+      MD5Final(HA1, &Md5Ctx);
+      if (stricmp(pszAlg, "md5-sess") == 0) {
+
+
+
+Franks, et al.              Standards Track                    [Page 28]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+            MD5Init(&Md5Ctx);
+            MD5Update(&Md5Ctx, HA1, HASHLEN);
+            MD5Update(&Md5Ctx, ":", 1);
+            MD5Update(&Md5Ctx, pszNonce, strlen(pszNonce));
+            MD5Update(&Md5Ctx, ":", 1);
+            MD5Update(&Md5Ctx, pszCNonce, strlen(pszCNonce));
+            MD5Final(HA1, &Md5Ctx);
+      };
+      CvtHex(HA1, SessionKey);
+};
+
+/* calculate request-digest/response-digest as per HTTP Digest spec */
+void DigestCalcResponse(
+    IN HASHHEX HA1,           /* H(A1) */
+    IN char * pszNonce,       /* nonce from server */
+    IN char * pszNonceCount,  /* 8 hex digits */
+    IN char * pszCNonce,      /* client nonce */
+    IN char * pszQop,         /* qop-value: "", "auth", "auth-int" */
+    IN char * pszMethod,      /* method from the request */
+    IN char * pszDigestUri,   /* requested URL */
+    IN HASHHEX HEntity,       /* H(entity body) if qop="auth-int" */
+    OUT HASHHEX Response      /* request-digest or response-digest */
+    )
+{
+      MD5_CTX Md5Ctx;
+      HASH HA2;
+      HASH RespHash;
+       HASHHEX HA2Hex;
+
+      // calculate H(A2)
+      MD5Init(&Md5Ctx);
+      MD5Update(&Md5Ctx, pszMethod, strlen(pszMethod));
+      MD5Update(&Md5Ctx, ":", 1);
+      MD5Update(&Md5Ctx, pszDigestUri, strlen(pszDigestUri));
+      if (stricmp(pszQop, "auth-int") == 0) {
+            MD5Update(&Md5Ctx, ":", 1);
+            MD5Update(&Md5Ctx, HEntity, HASHHEXLEN);
+      };
+      MD5Final(HA2, &Md5Ctx);
+       CvtHex(HA2, HA2Hex);
+
+      // calculate response
+      MD5Init(&Md5Ctx);
+      MD5Update(&Md5Ctx, HA1, HASHHEXLEN);
+      MD5Update(&Md5Ctx, ":", 1);
+      MD5Update(&Md5Ctx, pszNonce, strlen(pszNonce));
+      MD5Update(&Md5Ctx, ":", 1);
+      if (*pszQop) {
+
+
+
+Franks, et al.              Standards Track                    [Page 29]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+          MD5Update(&Md5Ctx, pszNonceCount, strlen(pszNonceCount));
+          MD5Update(&Md5Ctx, ":", 1);
+          MD5Update(&Md5Ctx, pszCNonce, strlen(pszCNonce));
+          MD5Update(&Md5Ctx, ":", 1);
+          MD5Update(&Md5Ctx, pszQop, strlen(pszQop));
+          MD5Update(&Md5Ctx, ":", 1);
+      };
+      MD5Update(&Md5Ctx, HA2Hex, HASHHEXLEN);
+      MD5Final(RespHash, &Md5Ctx);
+      CvtHex(RespHash, Response);
+};
+
+File "digtest.c":
+
+
+#include <stdio.h>
+#include "digcalc.h"
+
+void main(int argc, char ** argv) {
+
+      char * pszNonce = "dcd98b7102dd2f0e8b11d0f600bfb0c093";
+      char * pszCNonce = "0a4f113b";
+      char * pszUser = "Mufasa";
+      char * pszRealm = "testrealm@host.com";
+      char * pszPass = "Circle Of Life";
+      char * pszAlg = "md5";
+      char szNonceCount[9] = "00000001";
+      char * pszMethod = "GET";
+      char * pszQop = "auth";
+      char * pszURI = "/dir/index.html";
+      HASHHEX HA1;
+      HASHHEX HA2 = "";
+      HASHHEX Response;
+
+      DigestCalcHA1(pszAlg, pszUser, pszRealm, pszPass, pszNonce,
+pszCNonce, HA1);
+      DigestCalcResponse(HA1, pszNonce, szNonceCount, pszCNonce, pszQop,
+       pszMethod, pszURI, HA2, Response);
+      printf("Response = %s\n", Response);
+};
+
+
+
+
+
+
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 30]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+6 Acknowledgments
+
+   Eric W. Sink, of AbiSource, Inc., was one of the original authors
+   before the specification underwent substantial revision.
+
+   In addition to the authors, valuable discussion instrumental in
+   creating this document has come from Peter J. Churchyard, Ned Freed,
+   and David M.  Kristol.
+
+   Jim Gettys and Larry Masinter edited this document for update.
+
+7 References
+
+   [1]  Berners-Lee, T.,  Fielding, R. and H. Frystyk, "Hypertext
+        Transfer Protocol -- HTTP/1.0", RFC 1945, May 1996.
+
+   [2]  Fielding, R.,  Gettys, J., Mogul, J., Frysyk, H., Masinter, L.,
+        Leach, P. and T. Berners-Lee, "Hypertext Transfer Protocol --
+        HTTP/1.1", RFC 2616, June 1999.
+
+   [3]  Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321, April
+        1992.
+
+   [4]  Freed, N. and N. Borenstein. "Multipurpose Internet Mail
+        Extensions (MIME) Part One: Format of Internet Message Bodies",
+        RFC 2045, November 1996.
+
+   [5]  Dierks, T. and C. Allen "The TLS Protocol, Version 1.0", RFC
+        2246, January 1999.
+
+   [6]  Franks, J., Hallam-Baker, P., Hostetler, J., Leach, P.,
+        Luotonen, A., Sink, E. and L. Stewart, "An Extension to HTTP :
+        Digest Access Authentication", RFC 2069, January 1997.
+
+   [7]  Berners Lee, T, Fielding, R. and L. Masinter, "Uniform Resource
+        Identifiers (URI): Generic Syntax", RFC 2396, August 1998.
+
+   [8]  Kaliski, B.,Robshaw, M., "Message Authentication with MD5",
+        CryptoBytes, Sping 1995, RSA Inc,
+        (http://www.rsa.com/rsalabs/pubs/cryptobytes/spring95/md5.htm)
+
+   [9]  Klensin, J., Catoe, R. and P. Krumviede, "IMAP/POP AUTHorize
+        Extension for Simple Challenge/Response", RFC 2195, September
+        1997.
+
+   [10] Morgan, B., Alvestrand, H., Hodges, J., Wahl, M.,
+        "Authentication Methods for LDAP", Work in Progress.
+
+
+
+
+Franks, et al.              Standards Track                    [Page 31]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+8 Authors' Addresses
+
+   John Franks
+   Professor of Mathematics
+   Department of Mathematics
+   Northwestern University
+   Evanston, IL 60208-2730, USA
+
+   EMail: john@math.nwu.edu
+
+
+   Phillip M. Hallam-Baker
+   Principal Consultant
+   Verisign Inc.
+   301 Edgewater Place
+   Suite 210
+   Wakefield MA 01880, USA
+
+   EMail: pbaker@verisign.com
+
+
+   Jeffery L. Hostetler
+   Software Craftsman
+   AbiSource, Inc.
+   6 Dunlap Court
+   Savoy, IL 61874
+
+   EMail: jeff@AbiSource.com
+
+
+   Scott D. Lawrence
+   Agranat Systems, Inc.
+   5 Clocktower Place, Suite 400
+   Maynard, MA 01754, USA
+
+   EMail: lawrence@agranat.com
+
+
+   Paul J. Leach
+   Microsoft Corporation
+   1 Microsoft Way
+   Redmond, WA 98052, USA
+
+   EMail: paulle@microsoft.com
+
+
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 32]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+   Ari Luotonen
+   Member of Technical Staff
+   Netscape Communications Corporation
+   501 East Middlefield Road
+   Mountain View, CA 94043, USA
+
+
+   Lawrence C. Stewart
+   Open Market, Inc.
+   215 First Street
+   Cambridge, MA  02142, USA
+
+   EMail: stewart@OpenMarket.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 33]
+
+RFC 2617                  HTTP Authentication                  June 1999
+
+
+9.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (1999).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Franks, et al.              Standards Track                    [Page 34]
+
@@ -0,0 +1,731 @@
+
+
+
+
+
+
+Network Working Group                                           R. Khare
+Request for Comments: 2817                     4K Associates / UC Irvine
+Updates: 2616                                                S. Lawrence
+Category: Standards Track                          Agranat Systems, Inc.
+                                                                May 2000
+
+
+                    Upgrading to TLS Within HTTP/1.1
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+Abstract
+
+   This memo explains how to use the Upgrade mechanism in HTTP/1.1 to
+   initiate Transport Layer Security (TLS) over an existing TCP
+   connection. This allows unsecured and secured HTTP traffic to share
+   the same well known port (in this case, http: at 80 rather than
+   https: at 443). It also enables "virtual hosting", so a single HTTP +
+   TLS server can disambiguate traffic intended for several hostnames at
+   a single IP address.
+
+   Since HTTP/1.1 [1] defines Upgrade as a hop-by-hop mechanism, this
+   memo also documents the HTTP CONNECT method for establishing end-to-
+   end tunnels across HTTP proxies. Finally, this memo establishes new
+   IANA registries for public HTTP status codes, as well as public or
+   private Upgrade product tokens.
+
+   This memo does NOT affect the current definition of the 'https' URI
+   scheme, which already defines a separate namespace
+   (http://example.org/ and https://example.org/ are not equivalent).
+
+
+
+
+
+
+
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 1]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+Table of Contents
+
+   1.  Motivation . . . . . . . . . . . . . . . . . . . . . . . . . .  2
+   2.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
+   2.1 Requirements Terminology . . . . . . . . . . . . . . . . . . .  4
+   3.  Client Requested Upgrade to HTTP over TLS  . . . . . . . . . .  4
+   3.1 Optional Upgrade . . . . . . . . . . . . . . . . . . . . . . .  4
+   3.2 Mandatory Upgrade  . . . . . . . . . . . . . . . . . . . . . .  4
+   3.3 Server Acceptance of Upgrade Request . . . . . . . . . . . . .  4
+   4.  Server Requested Upgrade to HTTP over TLS  . . . . . . . . . .  5
+   4.1 Optional Advertisement . . . . . . . . . . . . . . . . . . . .  5
+   4.2 Mandatory Advertisement  . . . . . . . . . . . . . . . . . . .  5
+   5.  Upgrade across Proxies . . . . . . . . . . . . . . . . . . . .  6
+   5.1 Implications of Hop By Hop Upgrade . . . . . . . . . . . . . .  6
+   5.2 Requesting a Tunnel with CONNECT . . . . . . . . . . . . . . .  6
+   5.3 Establishing a Tunnel with CONNECT . . . . . . . . . . . . . .  7
+   6.  Rationale for the use of a 4xx (client error) Status Code  . .  7
+   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . .  8
+   7.1 HTTP Status Code Registry  . . . . . . . . . . . . . . . . . .  8
+   7.2 HTTP Upgrade Token Registry  . . . . . . . . . . . . . . . . .  8
+   8.  Security Considerations  . . . . . . . . . . . . . . . . . . .  9
+   8.1 Implications for the https: URI Scheme . . . . . . . . . . . . 10
+   8.2 Security Considerations for CONNECT  . . . . . . . . . . . . . 10
+       References . . . . . . . . . . . . . . . . . . . . . . . . . . 10
+       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 11
+   A.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 12
+       Full Copyright Statement . . . . . . . . . . . . . . . . . . . 13
+
+1. Motivation
+
+   The historical practice of deploying HTTP over SSL3 [3] has
+   distinguished the combination from HTTP alone by a unique URI scheme
+   and the TCP port number. The scheme 'http' meant the HTTP protocol
+   alone on port 80, while 'https' meant the HTTP protocol over SSL on
+   port 443.  Parallel well-known port numbers have similarly been
+   requested -- and in some cases, granted -- to distinguish between
+   secured and unsecured use of other application protocols (e.g.
+   snews, ftps). This approach effectively halves the number of
+   available well known ports.
+
+   At the Washington DC IETF meeting in December 1997, the Applications
+   Area Directors and the IESG reaffirmed that the practice of issuing
+   parallel "secure" port numbers should be deprecated. The HTTP/1.1
+   Upgrade mechanism can apply Transport Layer Security [6] to an open
+   HTTP connection.
+
+
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 2]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+   In the nearly two years since, there has been broad acceptance of the
+   concept behind this proposal, but little interest in implementing
+   alternatives to port 443 for generic Web browsing. In fact, nothing
+   in this memo affects the current interpretation of https: URIs.
+   However, new application protocols built atop HTTP, such as the
+   Internet Printing Protocol [7], call for just such a mechanism in
+   order to move ahead in the IETF standards process.
+
+   The Upgrade mechanism also solves the "virtual hosting" problem.
+   Rather than allocating multiple IP addresses to a single host, an
+   HTTP/1.1 server will use the Host: header to disambiguate the
+   intended web service. As HTTP/1.1 usage has grown more prevalent,
+   more ISPs are offering name-based virtual hosting, thus delaying IP
+   address space exhaustion.
+
+   TLS (and SSL) have been hobbled by the same limitation as earlier
+   versions of HTTP: the initial handshake does not specify the intended
+   hostname, relying exclusively on the IP address. Using a cleartext
+   HTTP/1.1 Upgrade: preamble to the TLS handshake -- choosing the
+   certificates based on the initial Host: header -- will allow ISPs to
+   provide secure name-based virtual hosting as well.
+
+2. Introduction
+
+   TLS, a.k.a., SSL (Secure Sockets Layer), establishes a private end-
+   to-end connection, optionally including strong mutual authentication,
+   using a variety of cryptosystems. Initially, a handshake phase uses
+   three subprotocols to set up a record layer, authenticate endpoints,
+   set parameters, as well as report errors.  Then, there is an ongoing
+   layered record protocol that handles encryption, compression, and
+   reassembly for the remainder of the connection. The latter is
+   intended to be completely transparent. For example, there is no
+   dependency between TLS's record markers and or certificates and
+   HTTP/1.1's chunked encoding or authentication.
+
+   Either the client or server can use the HTTP/1.1 [1] Upgrade
+   mechanism (Section 14.42) to indicate that a TLS-secured connection
+   is desired or necessary. This memo defines the "TLS/1.0" Upgrade
+   token, and a new HTTP Status Code, "426 Upgrade Required".
+
+   Section 3 and Section 4 describe the operation of a directly
+   connected client and server. Intermediate proxies must establish an
+   end-to-end tunnel before applying those operations, as explained in
+   Section 5.
+
+
+
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 3]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+2.1 Requirements Terminology
+
+   Keywords "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT" and
+   "MAY" that appear in this document are to be interpreted as described
+   in RFC 2119 [11].
+
+3. Client Requested Upgrade to HTTP over TLS
+
+   When the client sends an HTTP/1.1 request with an Upgrade header
+   field containing the token "TLS/1.0", it is requesting the server to
+   complete the current HTTP/1.1 request after switching to TLS/1.0.
+
+3.1 Optional Upgrade
+
+   A client MAY offer to switch to secured operation during any clear
+   HTTP request when an unsecured response would be acceptable:
+
+       GET http://example.bank.com/acct_stat.html?749394889300 HTTP/1.1
+       Host: example.bank.com
+       Upgrade: TLS/1.0
+       Connection: Upgrade
+
+   In this case, the server MAY respond to the clear HTTP operation
+   normally, OR switch to secured operation (as detailed in the next
+   section).
+
+   Note that HTTP/1.1 [1] specifies "the upgrade keyword MUST be
+   supplied within a Connection header field (section 14.10) whenever
+   Upgrade is present in an HTTP/1.1 message".
+
+3.2 Mandatory Upgrade
+
+   If an unsecured response would be unacceptable, a client MUST send an
+   OPTIONS request first to complete the switch to TLS/1.0 (if
+   possible).
+
+       OPTIONS * HTTP/1.1
+       Host: example.bank.com
+       Upgrade: TLS/1.0
+       Connection: Upgrade
+
+3.3 Server Acceptance of Upgrade Request
+
+   As specified in HTTP/1.1 [1], if the server is prepared to initiate
+   the TLS handshake, it MUST send the intermediate "101 Switching
+   Protocol" and MUST include an Upgrade response header specifying the
+   tokens of the protocol stack it is switching to:
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 4]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+       HTTP/1.1 101 Switching Protocols
+       Upgrade: TLS/1.0, HTTP/1.1
+       Connection: Upgrade
+
+   Note that the protocol tokens listed in the Upgrade header of a 101
+   Switching Protocols response specify an ordered 'bottom-up' stack.
+
+   As specified in  HTTP/1.1 [1], Section 10.1.2: "The server will
+   switch protocols to those defined by the response's Upgrade header
+   field immediately after the empty line which terminates the 101
+   response".
+
+   Once the TLS handshake completes successfully, the server MUST
+   continue with the response to the original request. Any TLS handshake
+   failure MUST lead to disconnection, per the TLS error alert
+   specification.
+
+4. Server Requested Upgrade to HTTP over TLS
+
+   The Upgrade response header field advertises possible protocol
+   upgrades a server MAY accept. In conjunction with the "426 Upgrade
+   Required" status code, a server can advertise the exact protocol
+   upgrade(s) that a client MUST accept to complete the request.
+
+4.1 Optional Advertisement
+
+   As specified in HTTP/1.1 [1], the server MAY include an Upgrade
+   header in any response other than 101 or 426 to indicate a
+   willingness to switch to any (combination) of the protocols listed.
+
+4.2 Mandatory Advertisement
+
+   A server MAY indicate that a client request can not be completed
+   without TLS using the "426 Upgrade Required" status code, which MUST
+   include an an Upgrade header field specifying the token of the
+   required TLS version.
+
+       HTTP/1.1 426 Upgrade Required
+       Upgrade: TLS/1.0, HTTP/1.1
+       Connection: Upgrade
+
+   The server SHOULD include a message body in the 426 response which
+   indicates in human readable form the reason for the error and
+   describes any alternative courses which may be available to the user.
+
+   Note that even if a client is willing to use TLS, it must use the
+   operations in Section 3 to proceed; the TLS handshake cannot begin
+   immediately after the 426 response.
+
+
+
+Khare & Lawrence            Standards Track                     [Page 5]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+5. Upgrade across Proxies
+
+   As a hop-by-hop header, Upgrade is negotiated between each pair of
+   HTTP counterparties.  If a User Agent sends a request with an Upgrade
+   header to a proxy, it is requesting a change to the protocol between
+   itself and the proxy, not an end-to-end change.
+
+   Since TLS, in particular, requires end-to-end connectivity to provide
+   authentication and prevent man-in-the-middle attacks, this memo
+   specifies the CONNECT method to establish a tunnel across proxies.
+
+   Once a tunnel is established, any of the operations in Section 3 can
+   be used to establish a TLS connection.
+
+5.1 Implications of Hop By Hop Upgrade
+
+   If an origin server receives an Upgrade header from a proxy and
+   responds with a 101 Switching Protocols response, it is changing the
+   protocol only on the connection between the proxy and itself.
+   Similarly, a proxy might return a 101 response to its client to
+   change the protocol on that connection independently of the protocols
+   it is using to communicate toward the origin server.
+
+   These scenarios also complicate diagnosis of a 426 response.  Since
+   Upgrade is a hop-by-hop header, a proxy that does not recognize 426
+   might remove the accompanying Upgrade header and prevent the client
+   from determining the required protocol switch.  If a client receives
+   a 426 status without an accompanying Upgrade header, it will need to
+   request an end to end tunnel connection as described in Section 5.2
+   and repeat the request in order to obtain the required upgrade
+   information.
+
+   This hop-by-hop definition of Upgrade was a deliberate choice.  It
+   allows for incremental deployment on either side of proxies, and for
+   optimized protocols between cascaded proxies without the knowledge of
+   the parties that are not a part of the change.
+
+5.2 Requesting a Tunnel with CONNECT
+
+   A CONNECT method requests that a proxy establish a tunnel connection
+   on its behalf. The Request-URI portion of the Request-Line is always
+   an 'authority' as defined by URI Generic Syntax [2], which is to say
+   the host name and port number destination of the requested connection
+   separated by a colon:
+
+      CONNECT server.example.com:80 HTTP/1.1
+      Host: server.example.com:80
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 6]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+   Other HTTP mechanisms can be used normally with the CONNECT method --
+   except end-to-end protocol Upgrade requests, of course, since the
+   tunnel must be established first.
+
+   For example, proxy authentication might be used to establish the
+   authority to create a tunnel:
+
+      CONNECT server.example.com:80 HTTP/1.1
+      Host: server.example.com:80
+      Proxy-Authorization: basic aGVsbG86d29ybGQ=
+
+   Like any other pipelined HTTP/1.1 request, data to be tunneled may be
+   sent immediately after the blank line. The usual caveats also apply:
+   data may be discarded if the eventual response is negative, and the
+   connection may be reset with no response if more than one TCP segment
+   is outstanding.
+
+5.3 Establishing a Tunnel with CONNECT
+
+   Any successful (2xx) response to a CONNECT request indicates that the
+   proxy has established a connection to the requested host and port,
+   and has switched to tunneling the current connection to that server
+   connection.
+
+   It may be the case that the proxy itself can only reach the requested
+   origin server through another proxy.  In this case, the first proxy
+   SHOULD make a CONNECT request of that next proxy, requesting a tunnel
+   to the authority.  A proxy MUST NOT respond with any 2xx status code
+   unless it has either a direct or tunnel connection established to the
+   authority.
+
+   An origin server which receives a CONNECT request for itself MAY
+   respond with a 2xx status code to indicate that a connection is
+   established.
+
+   If at any point either one of the peers gets disconnected, any
+   outstanding data that came from that peer will be passed to the other
+   one, and after that also the other connection will be terminated by
+   the proxy. If there is outstanding data to that peer undelivered,
+   that data will be discarded.
+
+6. Rationale for the use of a 4xx (client error) Status Code
+
+   Reliable, interoperable negotiation of Upgrade features requires an
+   unambiguous failure signal. The 426 Upgrade Required status code
+   allows a server to definitively state the precise protocol extensions
+   a given resource must be served with.
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 7]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+   It might at first appear that the response should have been some form
+   of redirection (a 3xx code), by analogy to an old-style redirection
+   to an https: URI.  User agents that do not understand Upgrade:
+   preclude this.
+
+   Suppose that a 3xx code had been assigned for "Upgrade Required"; a
+   user agent that did not recognize it would treat it as 300.  It would
+   then properly look for a "Location" header in the response and
+   attempt to repeat the request at the URL in that header field. Since
+   it did not know to Upgrade to incorporate the TLS layer, it would at
+   best fail again at the new URL.
+
+7. IANA Considerations
+
+   IANA shall create registries for two name spaces, as described in BCP
+   26 [10]:
+
+   o  HTTP Status Codes
+   o  HTTP Upgrade Tokens
+
+7.1 HTTP Status Code Registry
+
+   The HTTP Status Code Registry defines the name space for the Status-
+   Code token in the Status line of an HTTP response.  The initial
+   values for this name space are those specified by:
+
+   1.  Draft Standard for HTTP/1.1 [1]
+   2.  Web Distributed Authoring and Versioning [4] [defines 420-424]
+   3.  WebDAV Advanced Collections [5] (Work in Progress) [defines 425]
+   4.  Section 6 [defines 426]
+
+   Values to be added to this name space SHOULD be subject to review in
+   the form of a standards track document within the IETF Applications
+   Area.  Any such document SHOULD be traceable through statuses of
+   either 'Obsoletes' or 'Updates' to the Draft Standard for
+   HTTP/1.1 [1].
+
+7.2 HTTP Upgrade Token Registry
+
+   The HTTP Upgrade Token Registry defines the name space for product
+   tokens used to identify protocols in the Upgrade HTTP header field.
+   Each registered token should be associated with one or a set of
+   specifications, and with contact information.
+
+   The Draft Standard for HTTP/1.1 [1] specifies that these tokens obey
+   the production for 'product':
+
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 8]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+      product         = token ["/" product-version]
+      product-version = token
+
+   Registrations should be allowed on a First Come First Served basis as
+   described in BCP 26 [10]. These specifications need not be IETF
+   documents or be subject to IESG review, but should obey the following
+   rules:
+
+   1.  A token, once registered, stays registered forever.
+   2.  The registration MUST name a responsible party for the
+       registration.
+   3.  The registration MUST name a point of contact.
+   4.  The registration MAY name the documentation required for the
+       token.
+   5.  The responsible party MAY change the registration at any time.
+       The IANA will keep a record of all such changes, and make them
+       available upon request.
+   6.  The responsible party for the first registration of a "product"
+       token MUST approve later registrations of a "version" token
+       together with that "product" token before they can be registered.
+   7.  If absolutely required, the IESG MAY reassign the responsibility
+       for a token. This will normally only be used in the case when a
+       responsible party cannot be contacted.
+
+   This specification defines the protocol token "TLS/1.0" as the
+   identifier for the protocol specified by The TLS Protocol [6].
+
+   It is NOT required that specifications for upgrade tokens be made
+   publicly available, but the contact information for the registration
+   SHOULD be.
+
+8. Security Considerations
+
+   The potential for a man-in-the-middle attack (deleting the Upgrade
+   header) remains the same as current, mixed http/https practice:
+
+   o  Removing the Upgrade header is similar to rewriting web pages to
+      change https:// links to http:// links.
+   o  The risk is only present if the server is willing to vend such
+      information over both a secure and an insecure channel in the
+      first place.
+   o  If the client knows for a fact that a server is TLS-compliant, it
+      can insist on it by only sending an Upgrade request with a no-op
+      method like OPTIONS.
+   o  Finally, as the https: specification warns, "users should
+      carefully examine the certificate presented by the server to
+      determine if it meets their expectations".
+
+
+
+
+Khare & Lawrence            Standards Track                     [Page 9]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+   Furthermore, for clients that do not explicitly try to invoke TLS,
+   servers can use the Upgrade header in any response other than 101 or
+   426 to advertise TLS compliance. Since TLS compliance should be
+   considered a feature of the server and not the resource at hand, it
+   should be sufficient to send it once, and let clients cache that
+   fact.
+
+8.1 Implications for the https: URI Scheme
+
+   While nothing in this memo affects the definition of the 'https' URI
+   scheme, widespread adoption of this mechanism for HyperText content
+   could use 'http' to identify both secure and non-secure resources.
+
+   The choice of what security characteristics are required on the
+   connection is left to the client and server.  This allows either
+   party to use any information available in making this determination.
+   For example, user agents may rely on user preference settings or
+   information about the security of the network such as 'TLS required
+   on all POST operations not on my local net', or servers may apply
+   resource access rules such as 'the FORM on this page must be served
+   and submitted using TLS'.
+
+8.2 Security Considerations for CONNECT
+
+   A generic TCP tunnel is fraught with security risks. First, such
+   authorization should be limited to a small number of known ports.
+   The Upgrade: mechanism defined here only requires onward tunneling at
+   port 80. Second, since tunneled data is opaque to the proxy, there
+   are additional risks to tunneling to other well-known or reserved
+   ports. A putative HTTP client CONNECTing to port 25 could relay spam
+   via SMTP, for example.
+
+References
+
+   [1]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,
+        Leach, P. and T. Berners-Lee, "Hypertext Transfer Protocol --
+        HTTP/1.1", RFC 2616, June 1999.
+
+   [2]  Berners-Lee, T., Fielding, R. and L. Masinter, "URI Generic
+        Syntax", RFC 2396, August 1998.
+
+   [3]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.
+
+   [4]  Goland, Y., Whitehead, E., Faizi, A., Carter, S. and D. Jensen,
+        "Web Distributed Authoring and Versioning", RFC 2518, February
+        1999.
+
+
+
+
+
+Khare & Lawrence            Standards Track                    [Page 10]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+   [5]  Slein, J., Whitehead, E.J., et al., "WebDAV Advanced Collections
+        Protocol",  Work In Progress.
+
+   [6]  Dierks, T. and C. Allen, "The TLS Protocol", RFC 2246, January
+        1999.
+
+   [7]  Herriot, R., Butler, S., Moore, P. and R. Turner, "Internet
+        Printing Protocol/1.0: Encoding and Transport", RFC 2565, April
+        1999.
+
+   [8]  Luotonen, A., "Tunneling TCP based protocols through Web proxy
+        servers",  Work In Progress.  (Also available in: Luotonen, Ari.
+        Web Proxy Servers, Prentice-Hall, 1997 ISBN:0136806120.)
+
+   [9]  Rose, M., "Writing I-Ds and RFCs using XML", RFC 2629, June
+        1999.
+
+   [10] Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
+        Considerations Section in RFCs", BCP 26, RFC 2434, October 1998.
+
+   [11] Bradner, S., "Key words for use in RFCs to Indicate Requirement
+        Levels", BCP 14, RFC 2119, March 1997.
+
+Authors' Addresses
+
+   Rohit Khare
+   4K Associates / UC Irvine
+   3207 Palo Verde
+   Irvine, CA  92612
+   US
+
+   Phone: +1 626 806 7574
+   EMail: rohit@4K-associates.com
+   URI:   http://www.4K-associates.com/
+
+
+   Scott Lawrence
+   Agranat Systems, Inc.
+   5 Clocktower Place
+   Suite 400
+   Maynard, MA  01754
+   US
+
+   Phone: +1 978 461 0888
+   EMail: lawrence@agranat.com
+   URI:   http://www.agranat.com/
+
+
+
+
+
+Khare & Lawrence            Standards Track                    [Page 11]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+Appendix A. Acknowledgments
+
+   The CONNECT method was originally described in a Work in Progress
+   titled, "Tunneling TCP based protocols through Web proxy servers",
+   [8] by Ari Luotonen of Netscape Communications Corporation.  It was
+   widely implemented by HTTP proxies, but was never made a part of any
+   IETF Standards Track document. The method name CONNECT was reserved,
+   but not defined in [1].
+
+   The definition provided here is derived directly from that earlier
+   memo, with some editorial changes and conformance to the stylistic
+   conventions since established in other HTTP specifications.
+
+   Additional Thanks to:
+
+   o  Paul Hoffman for his work on the STARTTLS command extension for
+      ESMTP.
+   o  Roy Fielding for assistance with the rationale behind Upgrade:
+      and its interaction with OPTIONS.
+   o  Eric Rescorla for his work on standardizing the existing https:
+      practice to compare with.
+   o  Marshall Rose, for the xml2rfc document type description and tools
+      [9].
+   o  Jim Whitehead, for sorting out the current range of available HTTP
+      status codes.
+   o  Henrik Frystyk Nielsen, whose work on the Mandatory extension
+      mechanism pointed out a hop-by-hop Upgrade still requires
+      tunneling.
+   o  Harald Alvestrand for improvements to the token registration
+      rules.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Khare & Lawrence            Standards Track                    [Page 12]
+
+RFC 2817                  HTTP Upgrade to TLS                   May 2000
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Khare & Lawrence            Standards Track                    [Page 13]
+
@@ -0,0 +1,395 @@
+
+
+
+
+
+
+Network Working Group                                       E. Rescorla
+Request for Comments: 2818                                   RTFM, Inc.
+Category: Informational                                        May 2000
+
+
+                             HTTP Over TLS
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+Abstract
+
+   This memo describes how to use TLS to secure HTTP connections over
+   the Internet. Current practice is to layer HTTP over SSL (the
+   predecessor to TLS), distinguishing secured traffic from insecure
+   traffic by the use of a different server port. This document
+   documents that practice using TLS. A companion document describes a
+   method for using HTTP/TLS over the same port as normal HTTP
+   [RFC2817].
+
+Table of Contents
+
+   1. Introduction  . . . . . . . . . . . . . . . . . . . . . . 2
+   1.1. Requirements Terminology  . . . . . . . . . . . . . . . 2
+   2. HTTP Over TLS . . . . . . . . . . . . . . . . . . . . . . 2
+   2.1. Connection Initiation . . . . . . . . . . . . . . . . . 2
+   2.2. Connection Closure  . . . . . . . . . . . . . . . . . . 2
+   2.2.1. Client Behavior . . . . . . . . . . . . . . . . . . . 3
+   2.2.2. Server Behavior . . . . . . . . . . . . . . . . . . . 3
+   2.3. Port Number . . . . . . . . . . . . . . . . . . . . . . 4
+   2.4. URI Format  . . . . . . . . . . . . . . . . . . . . . . 4
+   3. Endpoint Identification . . . . . . . . . . . . . . . . . 4
+   3.1. Server Identity . . . . . . . . . . . . . . . . . . . . 4
+   3.2. Client Identity . . . . . . . . . . . . . . . . . . . . 5
+   References . . . . . . . . . . . . . . . . . . . . . . . . . 6
+   Security Considerations  . . . . . . . . . . . . . . . . . . 6
+   Author's Address . . . . . . . . . . . . . . . . . . . . . . 6
+   Full Copyright Statement . . . . . . . . . . . . . . . . . . 7
+
+
+
+
+
+
+Rescorla                     Informational                      [Page 1]
+
+RFC 2818                     HTTP Over TLS                      May 2000
+
+
+1.  Introduction
+
+   HTTP [RFC2616] was originally used in the clear on the Internet.
+   However, increased use of HTTP for sensitive applications has
+   required security measures. SSL, and its successor TLS [RFC2246] were
+   designed to provide channel-oriented security. This document
+   describes how to use HTTP over TLS.
+
+1.1.  Requirements Terminology
+
+   Keywords "MUST", "MUST NOT", "REQUIRED", "SHOULD", "SHOULD NOT" and
+   "MAY" that appear in this document are to be interpreted as described
+   in [RFC2119].
+
+2.  HTTP Over TLS
+
+   Conceptually, HTTP/TLS is very simple. Simply use HTTP over TLS
+   precisely as you would use HTTP over TCP.
+
+2.1.  Connection Initiation
+
+   The agent acting as the HTTP client should also act as the TLS
+   client.  It should initiate a connection to the server on the
+   appropriate port and then send the TLS ClientHello to begin the TLS
+   handshake. When the TLS handshake has finished. The client may then
+   initiate the first HTTP request.  All HTTP data MUST be sent as TLS
+   "application data".  Normal HTTP behavior, including retained
+   connections should be followed.
+
+2.2.  Connection Closure
+
+   TLS provides a facility for secure connection closure. When a valid
+   closure alert is received, an implementation can be assured that no
+   further data will be received on that connection.  TLS
+   implementations MUST initiate an exchange of closure alerts before
+   closing a connection. A TLS implementation MAY, after sending a
+   closure alert, close the connection without waiting for the peer to
+   send its closure alert, generating an "incomplete close".  Note that
+   an implementation which does this MAY choose to reuse the session.
+   This SHOULD only be done when the application knows (typically
+   through detecting HTTP message boundaries) that it has received all
+   the message data that it cares about.
+
+   As specified in [RFC2246], any implementation which receives a
+   connection close without first receiving a valid closure alert (a
+   "premature close") MUST NOT reuse that session.  Note that a
+   premature close does not call into question the security of the data
+   already received, but simply indicates that subsequent data might
+
+
+
+Rescorla                     Informational                      [Page 2]
+
+RFC 2818                     HTTP Over TLS                      May 2000
+
+
+   have been truncated. Because TLS is oblivious to HTTP
+   request/response boundaries, it is necessary to examine the HTTP data
+   itself (specifically the Content-Length header) to determine whether
+   the truncation occurred inside a message or between messages.
+
+2.2.1.  Client Behavior
+
+   Because HTTP uses connection closure to signal end of server data,
+   client implementations MUST treat any premature closes as errors and
+   the data received as potentially truncated.  While in some cases the
+   HTTP protocol allows the client to find out whether truncation took
+   place so that, if it received the complete reply, it may tolerate
+   such errors following the principle to "[be] strict when sending and
+   tolerant when receiving" [RFC1958], often truncation does not show in
+   the HTTP protocol data; two cases in particular deserve special note:
+
+     A HTTP response without a Content-Length header. Since data length
+     in this situation is signalled by connection close a premature
+     close generated by the server cannot be distinguished from a
+     spurious close generated by an attacker.
+
+     A HTTP response with a valid Content-Length header closed before
+     all data has been read. Because TLS does not provide document
+     oriented protection, it is impossible to determine whether the
+     server has miscomputed the Content-Length or an attacker has
+     truncated the connection.
+
+   There is one exception to the above rule. When encountering a
+   premature close, a client SHOULD treat as completed all requests for
+   which it has received as much data as specified in the Content-Length
+   header.
+
+   A client detecting an incomplete close SHOULD recover gracefully.  It
+   MAY resume a TLS session closed in this fashion.
+
+   Clients MUST send a closure alert before closing the connection.
+   Clients which are unprepared to receive any more data MAY choose not
+   to wait for the server's closure alert and simply close the
+   connection, thus generating an incomplete close on the server side.
+
+2.2.2.  Server Behavior
+
+   RFC 2616 permits an HTTP client to close the connection at any time,
+   and requires servers to recover gracefully.  In particular, servers
+   SHOULD be prepared to receive an incomplete close from the client,
+   since the client can often determine when the end of server data is.
+   Servers SHOULD be willing to resume TLS sessions closed in this
+   fashion.
+
+
+
+Rescorla                     Informational                      [Page 3]
+
+RFC 2818                     HTTP Over TLS                      May 2000
+
+
+   Implementation note: In HTTP implementations which do not use
+   persistent connections, the server ordinarily expects to be able to
+   signal end of data by closing the connection. When Content-Length is
+   used, however, the client may have already sent the closure alert and
+   dropped the connection.
+
+   Servers MUST attempt to initiate an exchange of closure alerts with
+   the client before closing the connection. Servers MAY close the
+   connection after sending the closure alert, thus generating an
+   incomplete close on the client side.
+
+2.3.  Port Number
+
+   The first data that an HTTP server expects to receive from the client
+   is the Request-Line production. The first data that a TLS server (and
+   hence an HTTP/TLS server) expects to receive is the ClientHello.
+   Consequently, common practice has been to run HTTP/TLS over a
+   separate port in order to distinguish which protocol is being used.
+   When HTTP/TLS is being run over a TCP/IP connection, the default port
+   is 443. This does not preclude HTTP/TLS from being run over another
+   transport. TLS only presumes a reliable connection-oriented data
+   stream.
+
+2.4.  URI Format
+
+   HTTP/TLS is differentiated from HTTP URIs by using the 'https'
+   protocol identifier in place of the 'http' protocol identifier. An
+   example URI specifying HTTP/TLS is:
+
+     https://www.example.com/~smith/home.html
+
+3.  Endpoint Identification
+
+3.1.  Server Identity
+
+   In general, HTTP/TLS requests are generated by dereferencing a URI.
+   As a consequence, the hostname for the server is known to the client.
+   If the hostname is available, the client MUST check it against the
+   server's identity as presented in the server's Certificate message,
+   in order to prevent man-in-the-middle attacks.
+
+   If the client has external information as to the expected identity of
+   the server, the hostname check MAY be omitted. (For instance, a
+   client may be connecting to a machine whose address and hostname are
+   dynamic but the client knows the certificate that the server will
+   present.) In such cases, it is important to narrow the scope of
+   acceptable certificates as much as possible in order to prevent man
+
+
+
+
+Rescorla                     Informational                      [Page 4]
+
+RFC 2818                     HTTP Over TLS                      May 2000
+
+
+   in the middle attacks.  In special cases, it may be appropriate for
+   the client to simply ignore the server's identity, but it must be
+   understood that this leaves the connection open to active attack.
+
+   If a subjectAltName extension of type dNSName is present, that MUST
+   be used as the identity. Otherwise, the (most specific) Common Name
+   field in the Subject field of the certificate MUST be used. Although
+   the use of the Common Name is existing practice, it is deprecated and
+   Certification Authorities are encouraged to use the dNSName instead.
+
+   Matching is performed using the matching rules specified by
+   [RFC2459].  If more than one identity of a given type is present in
+   the certificate (e.g., more than one dNSName name, a match in any one
+   of the set is considered acceptable.) Names may contain the wildcard
+   character * which is considered to match any single domain name
+   component or component fragment. E.g., *.a.com matches foo.a.com but
+   not bar.foo.a.com. f*.com matches foo.com but not bar.com.
+
+   In some cases, the URI is specified as an IP address rather than a
+   hostname. In this case, the iPAddress subjectAltName must be present
+   in the certificate and must exactly match the IP in the URI.
+
+   If the hostname does not match the identity in the certificate, user
+   oriented clients MUST either notify the user (clients MAY give the
+   user the opportunity to continue with the connection in any case) or
+   terminate the connection with a bad certificate error. Automated
+   clients MUST log the error to an appropriate audit log (if available)
+   and SHOULD terminate the connection (with a bad certificate error).
+   Automated clients MAY provide a configuration setting that disables
+   this check, but MUST provide a setting which enables it.
+
+   Note that in many cases the URI itself comes from an untrusted
+   source. The above-described check provides no protection against
+   attacks where this source is compromised. For example, if the URI was
+   obtained by clicking on an HTML page which was itself obtained
+   without using HTTP/TLS, a man in the middle could have replaced the
+   URI.  In order to prevent this form of attack, users should carefully
+   examine the certificate presented by the server to determine if it
+   meets their expectations.
+
+3.2.  Client Identity
+
+   Typically, the server has no external knowledge of what the client's
+   identity ought to be and so checks (other than that the client has a
+   certificate chain rooted in an appropriate CA) are not possible. If a
+   server has such knowledge (typically from some source external to
+   HTTP or TLS) it SHOULD check the identity as described above.
+
+
+
+
+Rescorla                     Informational                      [Page 5]
+
+RFC 2818                     HTTP Over TLS                      May 2000
+
+
+References
+
+   [RFC2459] Housley, R., Ford, W., Polk, W. and D. Solo, "Internet
+             Public Key Infrastructure: Part I: X.509 Certificate and
+             CRL Profile", RFC 2459, January 1999.
+
+   [RFC2616] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter,
+             L., Leach, P. and T. Berners-Lee, "Hypertext Transfer
+             Protocol, HTTP/1.1", RFC 2616, June 1999.
+
+   [RFC2119] Bradner, S., "Key Words for use in RFCs to indicate
+             Requirement Levels", BCP 14, RFC 2119, March 1997.
+
+   [RFC2246] Dierks, T. and C. Allen, "The TLS Protocol", RFC 2246,
+             January 1999.
+
+   [RFC2817] Khare, R. and S. Lawrence, "Upgrading to TLS Within
+             HTTP/1.1", RFC 2817, May 2000.
+
+Security Considerations
+
+   This entire document is about security.
+
+Author's Address
+
+   Eric Rescorla
+   RTFM, Inc.
+   30 Newell Road, #16
+   East Palo Alto, CA 94303
+
+   Phone: (650) 328-8631
+   EMail: ekr@rtfm.com
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Rescorla                     Informational                      [Page 6]
+
+RFC 2818                     HTTP Over TLS                      May 2000
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Rescorla                     Informational                      [Page 7]
+
@@ -0,0 +1,451 @@
+
+
+
+
+
+
+Network Working Group                                            K. Moore
+Request for Comments: 2964                        University of Tennessee
+BCP: 44                                                          N. Freed
+Category: Best Current Practice                                  Innosoft
+                                                             October 2000
+
+
+                      Use of HTTP State Management
+
+Status of this Memo
+
+   This document specifies an Internet Best Current Practices for the
+   Internet Community, and requests discussion and suggestions for
+   improvements.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+IESG Note
+
+   The IESG notes that this mechanism makes use of the .local top-level
+   domain (TLD) internally when handling host names that don't contain
+   any dots, and that this mechanism might not work in the expected way
+   should an actual .local TLD ever be registered.
+
+Abstract
+
+   The mechanisms described in "HTTP State Management Mechanism" (RFC-
+   2965), and its predecessor (RFC-2109), can be used for many different
+   purposes.  However, some current and potential uses of the protocol
+   are controversial because they have significant user privacy and
+   security implications.  This memo identifies specific uses of
+   Hypertext Transfer Protocol (HTTP) State Management protocol which
+   are either (a) not recommended by the IETF, or (b) believed to be
+   harmful, and discouraged.  This memo also details additional privacy
+   considerations which are not covered by the HTTP State Management
+   protocol specification.
+
+1.  Introduction
+
+   The HTTP State Management mechanism is both useful and controversial.
+   It is useful because numerous applications of HTTP benefit from the
+   ability to save state between HTTP transactions, without encoding
+   such state in URLs.  It is controversial because the mechanism has
+   been used to accomplish things for which it was not designed and is
+   not well-suited.  Some of these uses have attracted a great deal of
+   public criticism because they threaten to violate the privacy of web
+
+
+
+Moore & Freed            Best Current Practice                  [Page 1]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+   users, specifically by leaking potentially sensitive information to
+   third parties such as the Web sites a user has visited.  There are
+   also other uses of HTTP State Management which are inappropriate even
+   though they do not threaten user privacy.
+
+   This memo therefore identifies uses of the HTTP State Management
+   protocol specified in RFC-2965 which are not recommended by the IETF,
+   or which are believed to be harmful and are therefore discouraged.
+
+   This document occasionally uses terms that appear in capital letters.
+   When the terms "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY"
+   appear capitalized, they are being used to indicate particular
+   requirements of this specification.  A discussion of the meanings of
+   the terms "MUST", "SHOULD", and "MAY" appears in [RFC-1123]; the
+   terms "MUST NOT" and "SHOULD NOT" are logical extensions of this
+   usage.
+
+2.  Uses of HTTP State Management
+
+   The purpose of HTTP State Management is to allow an HTTP-based
+   service to create stateful "sessions" which persist across multiple
+   HTTP transactions.  A single session may involve transactions with
+   multiple server hosts.  Multiple client hosts may also be involved in
+   a single session when the session data for a particular user is
+   shared between client hosts (e.g., via a networked file system).  In
+   other words, the "session" retains state between a "user" and a
+   "service", not between particular hosts.
+
+   It's important to realize that similar capabilities may also be
+   achieved using the "bare" HTTP protocol, and/or dynamically-generated
+   HTML, without the State Management extensions.  For example, state
+   information can be transmitted from the service to the user by
+   embedding a session identifier in one or more URLs which appear in
+   HTTP redirects, or dynamically generated HTML; and the state
+   information may be returned from the user to the service when such
+   URLs appear in a GET or POST request.  HTML forms can also be used to
+   pass state information from the service to the user and back, without
+   the user being aware of this happening.
+
+   However, the HTTP State Management facility does provide an increase
+   in functionality over ordinary HTTP and HTML.  In practice, this
+   additional functionality includes:
+
+   (1)   The ability to exchange URLs between users, of resources
+         accessed during stateful sessions, without leaking the state
+         information associated with those sessions.  (e.g. "Here's the
+         URL for the FooCorp web catalog entry for those sandals that
+         you wanted.")
+
+
+
+Moore & Freed            Best Current Practice                  [Page 2]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+   (2)   The ability to maintain session state without "cache-busting".
+         That is, separating the session state from the URL allows a web
+         cache to maintain only a single copy of the named resource.  If
+         the state is maintained in session-specific URLs, the cache
+         would likely have to maintain several identical copies of the
+         resource.
+
+   (3)   The ability to implement sessions with minimal server
+         configuration and minimal protocol overhead, as compared to
+         other techniques of maintaining session state.
+
+   (4)   The ability to associate the user with session state whenever a
+         user accesses the service, regardless of whether the user
+         enters through a particular "home page" or "portal".
+
+   (5)   The ability to save session information in stable storage, so
+         that a "session" can be maintained across client invocations,
+         system reboots, and client or system crashes.
+
+2.1.  Recommended Uses
+
+   Use of HTTP State Management is appropriate whenever it is desirable
+   to maintain state between a user and a service across multiple HTTP
+   transactions, provided that:
+
+   (1)   the user is aware that session state is being maintained and
+         consents to it,
+
+   (2)   the user has the ability to delete the state associated with
+         such a session at any time,
+
+   (3)   the information obtained through the ability to track the
+         user's usage of the service is not disclosed to other parties
+         without the user's explicit consent, and
+
+   (4)   session information itself cannot contain sensitive information
+         and cannot be used to obtain sensitive information that is not
+         otherwise available to an eavesdropper.
+
+   This last point is important because cookies are usually sent in the
+   clear and hence are readily available to eavesdroppers.
+
+   An example of such a recommended use would be a "shopping cart",
+   where the existence of the shopping cart is explicitly made known to
+   the user, the user can explicitly "empty" his or her shopping cart
+   (either by requesting that it be emptied or by purchasing those
+
+
+
+
+
+Moore & Freed            Best Current Practice                  [Page 3]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+   items) and thus cause the shared state to be discarded, and the
+   service asserts that it will not disclose the user's shopping or
+   browsing habits to third parties without the user's consent.
+
+   Note that the HTTP State Management protocol effectively allows a
+   service provider to refuse to provide a service, or provide a reduced
+   level of service, if the user or a user's client fails to honor a
+   request to maintain session state.  Absent legal prohibition to the
+   contrary, the server MAY refuse to provide the service, or provide a
+   reduced level of service, under these conditions.  As a purely
+   practical consideration, services designed to utilize HTTP State
+   Management may be unable to function properly if the client does not
+   provide it.  Such servers SHOULD gracefully handle such conditions
+   and explain to the user why the full level of service is not
+   available.
+
+2.2.  Problematic Uses
+
+   The following uses of HTTP State Management are deemed inappropriate
+   and contrary to this specification:
+
+2.2.1.  Leakage of Information to Third Parties
+
+   HTTP State Management MUST NOT be used to leak information about the
+   user or the user's browsing habits to other parties besides the user
+   or service, without the user's explicit consent.  Such usage is
+   prohibited even if the user's name or other externally-assigned
+   identifier are not exposed to other parties, because the state
+   management mechanism itself provides an identifier which can be used
+   to compile information about the user.
+
+   Because such practices encourage users to defeat HTTP State
+   Management mechanisms, they tend to reduce the effectiveness of HTTP
+   State Management, and are therefore considered detrimental to the
+   operation of the web.
+
+2.2.2.  Use as an Authentication Mechanism
+
+   It is generally inappropriate to use the HTTP State Management
+   protocol as an authentication mechanism.  HTTP State Management is
+   not designed with such use in mind, and safeguards for protection of
+   authentication credentials are lacking in both the protocol
+   specification and in widely deployed HTTP clients and servers.  Most
+   HTTP sessions are not encrypted and "cookies" may therefore be
+   exposed to passive eavesdroppers.  Furthermore, HTTP clients and
+   servers typically store "cookies" in cleartext with little or no
+   protection against exposure.  HTTP State Management therefore SHOULD
+
+
+
+
+Moore & Freed            Best Current Practice                  [Page 4]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+   NOT be used as an authentication mechanism to protect information
+   from being exposed to unauthorized parties, even if the HTTP sessions
+   are encrypted.
+
+   The prohibition against using HTTP State Management for
+   authentication includes both its use to protect information which is
+   provided by the service, and its use to protect potentially sensitive
+   information about the user which is entrusted to the service's care.
+   For example, it would be inappropriate to expose a user's name,
+   address, telephone number, or billing information to a client that
+   merely presented a cookie which had been previously associated with
+   the user.
+
+   Similarly, HTTP State Management SHOULD NOT be used to authenticate
+   user requests if unauthorized requests might have undesirable side-
+   effects for the user, unless the user is aware of the potential for
+   such side-effects and explicitly consents to such use.  For example,
+   a service which allowed a user to order merchandise with a single
+   "click", based entirely on the user's stored "cookies", could
+   inconvenience the user by requiring her to dispute charges to her
+   credit card, and/or return the unwanted merchandise, in the event
+   that the cookies were exposed to third parties.
+
+   Some uses of HTTP State Management to identify users may be
+   relatively harmless, for example, if the only information which can
+   be thus exposed belongs to the service, and the service will suffer
+   little harm from the exposure of such information.
+
+3.  User Interface Considerations for HTTP State Management
+
+   HTTP State Management has been very controversial because of its
+   potential to expose information about a user's browsing habits to
+   third parties, without the knowledge or consent of the user.  While
+   such exposure is possible, this is less a flaw in the protocol itself
+   than a failure of HTTP client implementations (and of some providers
+   of HTTP-based services) to protect users' interests.
+
+   As implied above, there are other ways to maintain session state than
+   using HTTP State Management, and therefore other ways in which users'
+   browsing habits can be tracked.  Indeed, it is difficult to imagine
+   how the HTTP protocol or an HTTP client could actually prevent a
+   service from disclosing a user's "click trail" to other parties if
+   the service chose to do so.  Protection of such information from
+   inappropriate exposure must therefore be the responsibility of the
+   service.  HTTP client implementations inherently cannot provide such
+   protection, though they can implement countermeasures which make it
+   more difficult for HTTP State Management to be used as the mechanism
+   by which such information is exposed.
+
+
+
+Moore & Freed            Best Current Practice                  [Page 5]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+   It is arguable that HTTP clients should provide more protection in
+   general against inappropriate exposure of tracking information,
+   regardless of whether the exposure were facilitated by use of HTTP
+   State Management or by some other means.  However, issues related to
+   other mechanisms are beyond the scope of this memo.
+
+3.1.  Capabilities Required of an HTTP Client
+
+   A user's willingness to consent to use of HTTP State Management is
+   likely to vary from one service to another, according to whether the
+   user trusts the service to use the information appropriately and to
+   limit its exposure to other parties.  The user therefore SHOULD be
+   able to control whether his client supports a service's request to
+   use HTTP State Management, on a per-service basis.  In particular:
+
+   (1)   Clients MUST NOT respond to HTTP State Management requests
+         unless explicitly enabled by the user.
+
+   (2)   Clients SHOULD provide an effective interface which allows
+         users to review, and approve or refuse, any particular requests
+         from a server to maintain state information, before the client
+         provides any state information to the server.
+
+   (3)   Clients SHOULD provide an effective interface which allows
+         users to instruct their clients to ignore all requests from a
+         particular service to maintain state information, on a per-
+         service basis, immediately in response to any particular
+         request from a server, before the client provides any state
+         information to the server.
+
+   (4)   Clients SHOULD provide an effective interface which allows a
+         user to disable future transmission of any state information to
+         a service, and/or discard any saved state information for that
+         service, even though the user has previously approved a
+         service's request to maintain state information.
+
+   (5)   Clients SHOULD provide an effective interface which allows a
+         user to terminate a previous request not to retain state
+         management information for a given service.
+
+3.2.  Limitations of the domain-match algorithm
+
+   The domain-match algorithm in RFC-2965 section 2 is intended as a
+   heuristic to allow a client to "guess" whether or not two domains are
+   part of the same service.  There are few rules about how domain names
+   can be used, and the structure of domain names and how they are
+   delegated varies from one top-level domain to another (i.e. the
+   client cannot tell which part of the domain was assigned to the
+
+
+
+Moore & Freed            Best Current Practice                  [Page 6]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+   service).  Therefore NO string comparison algorithm (including the
+   domain-match algorithm) can be relied on to distinguish a domain that
+   belongs to a particular service, from a domain that belongs to
+   another party.
+
+   As stated above, each service is ultimately responsible for ensuring
+   that user information is not inappropriately leaked to third parties.
+   Leaking information to third parties via State Management by careful
+   selection of domain names, or by assigning domain names to hosts
+   maintained by third parties, is at least as inappropriate as leaking
+   the same information by other means.
+
+4.  Security Considerations
+
+   This entire memo is about security considerations.
+
+5.  Authors' Addresses
+
+   Keith Moore
+   University of Tennessee Computer Science Department
+   1122 Volunteer Blvd, Suite 203
+   Knoxville TN, 37996-3450
+
+   EMail: moore@cs.utk.edu
+
+
+   Ned Freed
+   Innosoft International, Inc.
+   1050 Lakes Drive
+   West Covina, CA 81790
+
+   EMail: ned.freed@innosoft.com
+
+6.  References
+
+   [RFC 1123] Braden, R., "Requirements for Internet Hosts --
+              Application and Support", STD 3, RFC 1123, October 1989.
+
+   [RFC 2965] Kristol, D. and L. Montulli, "HTTP State Management
+              Mechanism", RFC 2965, October 2000.
+
+   [RFC 2109] Kristol, D. and L. Montulli, "HTTP State Management
+              Mechanism", RFC 2109, February 1997.
+
+
+
+
+
+
+
+
+Moore & Freed            Best Current Practice                  [Page 7]
+
+RFC 2964              Use of HTTP State Management          October 2000
+
+
+7.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Moore & Freed            Best Current Practice                  [Page 8]
+
@@ -0,0 +1,1459 @@
+
+
+
+
+
+
+Network Working Group                                         D. Kristol
+Request for Comments: 2965        Bell Laboratories, Lucent Technologies
+Obsoletes: 2109                                              L. Montulli
+Category: Standards Track                             Epinions.com, Inc.
+                                                            October 2000
+
+
+                    HTTP State Management Mechanism
+
+Status of this Memo
+
+   This document specifies an Internet standards track protocol for the
+   Internet community, and requests discussion and suggestions for
+   improvements.  Please refer to the current edition of the "Internet
+   Official Protocol Standards" (STD 1) for the standardization state
+   and status of this protocol.  Distribution of this memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+IESG Note
+
+   The IESG notes that this mechanism makes use of the .local top-level
+   domain (TLD) internally when handling host names that don't contain
+   any dots, and that this mechanism might not work in the expected way
+   should an actual .local TLD ever be registered.
+
+Abstract
+
+   This document specifies a way to create a stateful session with
+   Hypertext Transfer Protocol (HTTP) requests and responses.  It
+   describes three new headers, Cookie, Cookie2, and Set-Cookie2, which
+   carry state information between participating origin servers and user
+   agents.  The method described here differs from Netscape's Cookie
+   proposal [Netscape], but it can interoperate with HTTP/1.0 user
+   agents that use Netscape's method.  (See the HISTORICAL section.)
+
+   This document reflects implementation experience with RFC 2109 and
+   obsoletes it.
+
+1.  TERMINOLOGY
+
+   The terms user agent, client, server, proxy, origin server, and
+   http_URL have the same meaning as in the HTTP/1.1 specification
+   [RFC2616].  The terms abs_path and absoluteURI have the same meaning
+   as in the URI Syntax specification [RFC2396].
+
+
+
+
+Kristol & Montulli          Standards Track                     [Page 1]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Host name (HN) means either the host domain name (HDN) or the numeric
+   Internet Protocol (IP) address of a host.  The fully qualified domain
+   name is preferred; use of numeric IP addresses is strongly
+   discouraged.
+
+   The terms request-host and request-URI refer to the values the client
+   would send to the server as, respectively, the host (but not port)
+   and abs_path portions of the absoluteURI (http_URL) of the HTTP
+   request line.  Note that request-host is a HN.
+
+   The term effective host name is related to host name.  If a host name
+   contains no dots, the effective host name is that name with the
+   string .local appended to it.  Otherwise the effective host name is
+   the same as the host name.  Note that all effective host names
+   contain at least one dot.
+
+   The term request-port refers to the port portion of the absoluteURI
+   (http_URL) of the HTTP request line.  If the absoluteURI has no
+   explicit port, the request-port is the HTTP default, 80.  The
+   request-port of a cookie is the request-port of the request in which
+   a Set-Cookie2 response header was returned to the user agent.
+
+   Host names can be specified either as an IP address or a HDN string.
+   Sometimes we compare one host name with another.  (Such comparisons
+   SHALL be case-insensitive.)  Host A's name domain-matches host B's if
+
+      *  their host name strings string-compare equal; or
+
+      * A is a HDN string and has the form NB, where N is a non-empty
+         name string, B has the form .B', and B' is a HDN string.  (So,
+         x.y.com domain-matches .Y.com but not Y.com.)
+
+   Note that domain-match is not a commutative operation: a.b.c.com
+   domain-matches .c.com, but not the reverse.
+
+   The reach R of a host name H is defined as follows:
+
+      *  If
+
+         -  H is the host domain name of a host; and,
+
+         -  H has the form A.B; and
+
+         -  A has no embedded (that is, interior) dots; and
+
+         -  B has at least one embedded dot, or B is the string "local".
+            then the reach of H is .B.
+
+
+
+
+Kristol & Montulli          Standards Track                     [Page 2]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+      *  Otherwise, the reach of H is H.
+
+   For two strings that represent paths, P1 and P2, P1 path-matches P2
+   if P2 is a prefix of P1 (including the case where P1 and P2 string-
+   compare equal).  Thus, the string /tec/waldo path-matches /tec.
+
+   Because it was used in Netscape's original implementation of state
+   management, we will use the term cookie to refer to the state
+   information that passes between an origin server and user agent, and
+   that gets stored by the user agent.
+
+1.1  Requirements
+
+   The key words "MAY", "MUST", "MUST NOT", "OPTIONAL", "RECOMMENDED",
+   "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT" in this
+   document are to be interpreted as described in RFC 2119 [RFC2119].
+
+2.  STATE AND SESSIONS
+
+   This document describes a way to create stateful sessions with HTTP
+   requests and responses.  Currently, HTTP servers respond to each
+   client request without relating that request to previous or
+   subsequent requests; the state management mechanism allows clients
+   and servers that wish to exchange state information to place HTTP
+   requests and responses within a larger context, which we term a
+   "session".  This context might be used to create, for example, a
+   "shopping cart", in which user selections can be aggregated before
+   purchase, or a magazine browsing system, in which a user's previous
+   reading affects which offerings are presented.
+
+   Neither clients nor servers are required to support cookies.  A
+   server MAY refuse to provide content to a client that does not return
+   the cookies it sends.
+
+3.  DESCRIPTION
+
+   We describe here a way for an origin server to send state information
+   to the user agent, and for the user agent to return the state
+   information to the origin server.  The goal is to have a minimal
+   impact on HTTP and user agents.
+
+3.1  Syntax:  General
+
+   The two state management headers, Set-Cookie2 and Cookie, have common
+   syntactic properties involving attribute-value pairs.  The following
+   grammar uses the notation, and tokens DIGIT (decimal digits), token
+
+
+
+
+
+Kristol & Montulli          Standards Track                     [Page 3]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   (informally, a sequence of non-special, non-white space characters),
+   and http_URL from the HTTP/1.1 specification [RFC2616] to describe
+   their syntax.
+
+   av-pairs    =     av-pair *(";" av-pair)
+   av-pair     =     attr ["=" value]              ; optional value
+   attr        =     token
+   value       =     token | quoted-string
+
+   Attributes (names) (attr) are case-insensitive.  White space is
+   permitted between tokens.  Note that while the above syntax
+   description shows value as optional, most attrs require them.
+
+   NOTE: The syntax above allows whitespace between the attribute and
+   the = sign.
+
+3.2  Origin Server Role
+
+   3.2.1  General  The origin server initiates a session, if it so
+   desires.  To do so, it returns an extra response header to the
+   client, Set-Cookie2.  (The details follow later.)
+
+   A user agent returns a Cookie request header (see below) to the
+   origin server if it chooses to continue a session.  The origin server
+   MAY ignore it or use it to determine the current state of the
+   session.  It MAY send back to the client a Set-Cookie2 response
+   header with the same or different information, or it MAY send no
+   Set-Cookie2 header at all.  The origin server effectively ends a
+   session by sending the client a Set-Cookie2 header with Max-Age=0.
+
+   Servers MAY return Set-Cookie2 response headers with any response.
+   User agents SHOULD send Cookie request headers, subject to other
+   rules detailed below, with every request.
+
+   An origin server MAY include multiple Set-Cookie2 headers in a
+   response.  Note that an intervening gateway could fold multiple such
+   headers into a single header.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                     [Page 4]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   3.2.2  Set-Cookie2 Syntax  The syntax for the Set-Cookie2 response
+   header is
+
+   set-cookie      =       "Set-Cookie2:" cookies
+   cookies         =       1#cookie
+   cookie          =       NAME "=" VALUE *(";" set-cookie-av)
+   NAME            =       attr
+   VALUE           =       value
+   set-cookie-av   =       "Comment" "=" value
+                   |       "CommentURL" "=" <"> http_URL <">
+                   |       "Discard"
+                   |       "Domain" "=" value
+                   |       "Max-Age" "=" value
+                   |       "Path" "=" value
+                   |       "Port" [ "=" <"> portlist <"> ]
+                   |       "Secure"
+                   |       "Version" "=" 1*DIGIT
+   portlist        =       1#portnum
+   portnum         =       1*DIGIT
+
+   Informally, the Set-Cookie2 response header comprises the token Set-
+   Cookie2:, followed by a comma-separated list of one or more cookies.
+   Each cookie begins with a NAME=VALUE pair, followed by zero or more
+   semi-colon-separated attribute-value pairs.  The syntax for
+   attribute-value pairs was shown earlier.  The specific attributes and
+   the semantics of their values follows.  The NAME=VALUE attribute-
+   value pair MUST come first in each cookie.  The others, if present,
+   can occur in any order.  If an attribute appears more than once in a
+   cookie, the client SHALL use only the value associated with the first
+   appearance of the attribute; a client MUST ignore values after the
+   first.
+
+   The NAME of a cookie MAY be the same as one of the attributes in this
+   specification.  However, because the cookie's NAME must come first in
+   a Set-Cookie2 response header, the NAME and its VALUE cannot be
+   confused with an attribute-value pair.
+
+   NAME=VALUE
+      REQUIRED.  The name of the state information ("cookie") is NAME,
+      and its value is VALUE.  NAMEs that begin with $ are reserved and
+      MUST NOT be used by applications.
+
+      The VALUE is opaque to the user agent and may be anything the
+      origin server chooses to send, possibly in a server-selected
+      printable ASCII encoding.  "Opaque" implies that the content is of
+      interest and relevance only to the origin server.  The content
+      may, in fact, be readable by anyone that examines the Set-Cookie2
+      header.
+
+
+
+Kristol & Montulli          Standards Track                     [Page 5]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Comment=value
+      OPTIONAL.  Because cookies can be used to derive or store private
+      information about a user, the value of the Comment attribute
+      allows an origin server to document how it intends to use the
+      cookie.  The user can inspect the information to decide whether to
+      initiate or continue a session with this cookie.  Characters in
+      value MUST be in UTF-8 encoding. [RFC2279]
+
+   CommentURL="http_URL"
+      OPTIONAL.  Because cookies can be used to derive or store private
+      information about a user, the CommentURL attribute allows an
+      origin server to document how it intends to use the cookie.  The
+      user can inspect the information identified by the URL to decide
+      whether to initiate or continue a session with this cookie.
+
+   Discard
+      OPTIONAL.  The Discard attribute instructs the user agent to
+      discard the cookie unconditionally when the user agent terminates.
+
+   Domain=value
+      OPTIONAL.  The value of the Domain attribute specifies the domain
+      for which the cookie is valid.  If an explicitly specified value
+      does not start with a dot, the user agent supplies a leading dot.
+
+   Max-Age=value
+      OPTIONAL.  The value of the Max-Age attribute is delta-seconds,
+      the lifetime of the cookie in seconds, a decimal non-negative
+      integer.  To handle cached cookies correctly, a client SHOULD
+      calculate the age of the cookie according to the age calculation
+      rules in the HTTP/1.1 specification [RFC2616].  When the age is
+      greater than delta-seconds seconds, the client SHOULD discard the
+      cookie.  A value of zero means the cookie SHOULD be discarded
+      immediately.
+
+   Path=value
+      OPTIONAL.  The value of the Path attribute specifies the subset of
+      URLs on the origin server to which this cookie applies.
+
+   Port[="portlist"]
+      OPTIONAL.  The Port attribute restricts the port to which a cookie
+      may be returned in a Cookie request header.  Note that the syntax
+      REQUIREs quotes around the OPTIONAL portlist even if there is only
+      one portnum in portlist.
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                     [Page 6]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Secure
+      OPTIONAL.  The Secure attribute (with no value) directs the user
+      agent to use only (unspecified) secure means to contact the origin
+      server whenever it sends back this cookie, to protect the
+      confidentially and authenticity of the information in the cookie.
+
+      The user agent (possibly with user interaction) MAY determine what
+      level of security it considers appropriate for "secure" cookies.
+      The Secure attribute should be considered security advice from the
+      server to the user agent, indicating that it is in the session's
+      interest to protect the cookie contents.  When it sends a "secure"
+      cookie back to a server, the user agent SHOULD use no less than
+      the same level of security as was used when it received the cookie
+      from the server.
+
+   Version=value
+      REQUIRED.  The value of the Version attribute, a decimal integer,
+      identifies the version of the state management specification to
+      which the cookie conforms.  For this specification, Version=1
+      applies.
+
+   3.2.3  Controlling Caching  An origin server must be cognizant of the
+   effect of possible caching of both the returned resource and the
+   Set-Cookie2 header.  Caching "public" documents is desirable.  For
+   example, if the origin server wants to use a public document such as
+   a "front door" page as a sentinel to indicate the beginning of a
+   session for which a Set-Cookie2 response header must be generated,
+   the page SHOULD be stored in caches "pre-expired" so that the origin
+   server will see further requests.  "Private documents", for example
+   those that contain information strictly private to a session, SHOULD
+   NOT be cached in shared caches.
+
+   If the cookie is intended for use by a single user, the Set-Cookie2
+   header SHOULD NOT be cached.  A Set-Cookie2 header that is intended
+   to be shared by multiple users MAY be cached.
+
+   The origin server SHOULD send the following additional HTTP/1.1
+   response headers, depending on circumstances:
+
+      *  To suppress caching of the Set-Cookie2 header:
+
+         Cache-control: no-cache="set-cookie2"
+
+   and one of the following:
+
+      *  To suppress caching of a private document in shared caches:
+
+         Cache-control: private
+
+
+
+Kristol & Montulli          Standards Track                     [Page 7]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+      *  To allow caching of a document and require that it be validated
+         before returning it to the client:
+
+         Cache-Control: must-revalidate, max-age=0
+
+      *  To allow caching of a document, but to require that proxy
+         caches (not user agent caches) validate it before returning it
+         to the client:
+
+         Cache-Control: proxy-revalidate, max-age=0
+
+      *  To allow caching of a document and request that it be validated
+         before returning it to the client (by "pre-expiring" it):
+
+         Cache-control: max-age=0
+
+         Not all caches will revalidate the document in every case.
+
+   HTTP/1.1 servers MUST send Expires: old-date (where old-date is a
+   date long in the past) on responses containing Set-Cookie2 response
+   headers unless they know for certain (by out of band means) that
+   there are no HTTP/1.0 proxies in the response chain.  HTTP/1.1
+   servers MAY send other Cache-Control directives that permit caching
+   by HTTP/1.1 proxies in addition to the Expires: old-date directive;
+   the Cache-Control directive will override the Expires: old-date for
+   HTTP/1.1 proxies.
+
+3.3  User Agent Role
+
+   3.3.1  Interpreting Set-Cookie2  The user agent keeps separate track
+   of state information that arrives via Set-Cookie2 response headers
+   from each origin server (as distinguished by name or IP address and
+   port).  The user agent MUST ignore attribute-value pairs whose
+   attribute it does not recognize.  The user agent applies these
+   defaults for optional attributes that are missing:
+
+   Discard The default behavior is dictated by the presence or absence
+           of a Max-Age attribute.
+
+   Domain  Defaults to the effective request-host.  (Note that because
+           there is no dot at the beginning of effective request-host,
+           the default Domain can only domain-match itself.)
+
+   Max-Age The default behavior is to discard the cookie when the user
+           agent exits.
+
+   Path    Defaults to the path of the request URL that generated the
+           Set-Cookie2 response, up to and including the right-most /.
+
+
+
+Kristol & Montulli          Standards Track                     [Page 8]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Port    The default behavior is that a cookie MAY be returned to any
+           request-port.
+
+   Secure  If absent, the user agent MAY send the cookie over an
+           insecure channel.
+
+   3.3.2  Rejecting Cookies  To prevent possible security or privacy
+   violations, a user agent rejects a cookie according to rules below.
+   The goal of the rules is to try to limit the set of servers for which
+   a cookie is valid, based on the values of the Path, Domain, and Port
+   attributes and the request-URI, request-host and request-port.
+
+   A user agent rejects (SHALL NOT store its information) if the Version
+   attribute is missing.  Moreover, a user agent rejects (SHALL NOT
+   store its information) if any of the following is true of the
+   attributes explicitly present in the Set-Cookie2 response header:
+
+      *  The value for the Path attribute is not a prefix of the
+         request-URI.
+
+      *  The value for the Domain attribute contains no embedded dots,
+         and the value is not .local.
+
+      *  The effective host name that derives from the request-host does
+         not domain-match the Domain attribute.
+
+      *  The request-host is a HDN (not IP address) and has the form HD,
+         where D is the value of the Domain attribute, and H is a string
+         that contains one or more dots.
+
+      *  The Port attribute has a "port-list", and the request-port was
+         not in the list.
+
+   Examples:
+
+      *  A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com
+         would be rejected, because H is y.x and contains a dot.
+
+      *  A Set-Cookie2 from request-host x.foo.com for Domain=.foo.com
+         would be accepted.
+
+      *  A Set-Cookie2 with Domain=.com or Domain=.com., will always be
+         rejected, because there is no embedded dot.
+
+      *  A Set-Cookie2 with Domain=ajax.com will be accepted, and the
+         value for Domain will be taken to be .ajax.com, because a dot
+         gets prepended to the value.
+
+
+
+
+Kristol & Montulli          Standards Track                     [Page 9]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+      *  A Set-Cookie2 with Port="80,8000" will be accepted if the
+         request was made to port 80 or 8000 and will be rejected
+         otherwise.
+
+      *  A Set-Cookie2 from request-host example for Domain=.local will
+         be accepted, because the effective host name for the request-
+         host is example.local, and example.local domain-matches .local.
+
+   3.3.3  Cookie Management  If a user agent receives a Set-Cookie2
+   response header whose NAME is the same as that of a cookie it has
+   previously stored, the new cookie supersedes the old when: the old
+   and new Domain attribute values compare equal, using a case-
+   insensitive string-compare; and, the old and new Path attribute
+   values string-compare equal (case-sensitive).  However, if the Set-
+   Cookie2 has a value for Max-Age of zero, the (old and new) cookie is
+   discarded.  Otherwise a cookie persists (resources permitting) until
+   whichever happens first, then gets discarded: its Max-Age lifetime is
+   exceeded; or, if the Discard attribute is set, the user agent
+   terminates the session.
+
+   Because user agents have finite space in which to store cookies, they
+   MAY also discard older cookies to make space for newer ones, using,
+   for example, a least-recently-used algorithm, along with constraints
+   on the maximum number of cookies that each origin server may set.
+
+   If a Set-Cookie2 response header includes a Comment attribute, the
+   user agent SHOULD store that information in a human-readable form
+   with the cookie and SHOULD display the comment text as part of a
+   cookie inspection user interface.
+
+   If a Set-Cookie2 response header includes a CommentURL attribute, the
+   user agent SHOULD store that information in a human-readable form
+   with the cookie, or, preferably, SHOULD allow the user to follow the
+   http_URL link as part of a cookie inspection user interface.
+
+   The cookie inspection user interface may include a facility whereby a
+   user can decide, at the time the user agent receives the Set-Cookie2
+   response header, whether or not to accept the cookie.  A potentially
+   confusing situation could arise if the following sequence occurs:
+
+      *  the user agent receives a cookie that contains a CommentURL
+         attribute;
+
+      *  the user agent's cookie inspection interface is configured so
+         that it presents a dialog to the user before the user agent
+         accepts the cookie;
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 10]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+      *  the dialog allows the user to follow the CommentURL link when
+         the user agent receives the cookie; and,
+
+      *  when the user follows the CommentURL link, the origin server
+         (or another server, via other links in the returned content)
+         returns another cookie.
+
+   The user agent SHOULD NOT send any cookies in this context.  The user
+   agent MAY discard any cookie it receives in this context that the
+   user has not, through some user agent mechanism, deemed acceptable.
+
+   User agents SHOULD allow the user to control cookie destruction, but
+   they MUST NOT extend the cookie's lifetime beyond that controlled by
+   the Discard and Max-Age attributes.  An infrequently-used cookie may
+   function as a "preferences file" for network applications, and a user
+   may wish to keep it even if it is the least-recently-used cookie. One
+   possible implementation would be an interface that allows the
+   permanent storage of a cookie through a checkbox (or, conversely, its
+   immediate destruction).
+
+   Privacy considerations dictate that the user have considerable
+   control over cookie management.  The PRIVACY section contains more
+   information.
+
+   3.3.4  Sending Cookies to the Origin Server  When it sends a request
+   to an origin server, the user agent includes a Cookie request header
+   if it has stored cookies that are applicable to the request, based on
+
+      * the request-host and request-port;
+
+      * the request-URI;
+
+      * the cookie's age.
+
+   The syntax for the header is:
+
+cookie          =  "Cookie:" cookie-version 1*((";" | ",") cookie-value)
+cookie-value    =  NAME "=" VALUE [";" path] [";" domain] [";" port]
+cookie-version  =  "$Version" "=" value
+NAME            =  attr
+VALUE           =  value
+path            =  "$Path" "=" value
+domain          =  "$Domain" "=" value
+port            =  "$Port" [ "=" <"> value <"> ]
+
+   The value of the cookie-version attribute MUST be the value from the
+   Version attribute of the corresponding Set-Cookie2 response header.
+   Otherwise the value for cookie-version is 0.  The value for the path
+
+
+
+Kristol & Montulli          Standards Track                    [Page 11]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   attribute MUST be the value from the Path attribute, if one was
+   present, of the corresponding Set-Cookie2 response header.  Otherwise
+   the attribute SHOULD be omitted from the Cookie request header.  The
+   value for the domain attribute MUST be the value from the Domain
+   attribute, if one was present, of the corresponding Set-Cookie2
+   response header.  Otherwise the attribute SHOULD be omitted from the
+   Cookie request header.
+
+   The port attribute of the Cookie request header MUST mirror the Port
+   attribute, if one was present, in the corresponding Set-Cookie2
+   response header.  That is, the port attribute MUST be present if the
+   Port attribute was present in the Set-Cookie2 header, and it MUST
+   have the same value, if any.  Otherwise, if the Port attribute was
+   absent from the Set-Cookie2 header, the attribute likewise MUST be
+   omitted from the Cookie request header.
+
+   Note that there is neither a Comment nor a CommentURL attribute in
+   the Cookie request header corresponding to the ones in the Set-
+   Cookie2 response header.  The user agent does not return the comment
+   information to the origin server.
+
+   The user agent applies the following rules to choose applicable
+   cookie-values to send in Cookie request headers from among all the
+   cookies it has received.
+
+   Domain Selection
+      The origin server's effective host name MUST domain-match the
+      Domain attribute of the cookie.
+
+   Port Selection
+      There are three possible behaviors, depending on the Port
+      attribute in the Set-Cookie2 response header:
+
+      1. By default (no Port attribute), the cookie MAY be sent to any
+         port.
+
+      2. If the attribute is present but has no value (e.g., Port), the
+         cookie MUST only be sent to the request-port it was received
+         from.
+
+      3. If the attribute has a port-list, the cookie MUST only be
+         returned if the new request-port is one of those listed in
+         port-list.
+
+   Path Selection
+      The request-URI MUST path-match the Path attribute of the cookie.
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 12]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Max-Age Selection
+      Cookies that have expired should have been discarded and thus are
+      not forwarded to an origin server.
+
+   If multiple cookies satisfy the criteria above, they are ordered in
+   the Cookie header such that those with more specific Path attributes
+   precede those with less specific.  Ordering with respect to other
+   attributes (e.g., Domain) is unspecified.
+
+   Note: For backward compatibility, the separator in the Cookie header
+   is semi-colon (;) everywhere.  A server SHOULD also accept comma (,)
+   as the separator between cookie-values for future compatibility.
+
+   3.3.5  Identifying What Version is Understood:  Cookie2  The Cookie2
+   request header facilitates interoperation between clients and servers
+   that understand different versions of the cookie specification.  When
+   the client sends one or more cookies to an origin server, if at least
+   one of those cookies contains a $Version attribute whose value is
+   different from the version that the client understands, then the
+   client MUST also send a Cookie2 request header, the syntax for which
+   is
+
+   cookie2 =       "Cookie2:" cookie-version
+
+   Here the value for cookie-version is the highest version of cookie
+   specification (currently 1) that the client understands.  The client
+   needs to send at most one such request header per request.
+
+   3.3.6  Sending Cookies in Unverifiable Transactions  Users MUST have
+   control over sessions in order to ensure privacy.  (See PRIVACY
+   section below.)  To simplify implementation and to prevent an
+   additional layer of complexity where adequate safeguards exist,
+   however, this document distinguishes between transactions that are
+   verifiable and those that are unverifiable.  A transaction is
+   verifiable if the user, or a user-designated agent, has the option to
+   review the request-URI prior to its use in the transaction.  A
+   transaction is unverifiable if the user does not have that option.
+   Unverifiable transactions typically arise when a user agent
+   automatically requests inlined or embedded entities or when it
+   resolves redirection (3xx) responses from an origin server.
+   Typically the origin transaction, the transaction that the user
+   initiates, is verifiable, and that transaction may directly or
+   indirectly induce the user agent to make unverifiable transactions.
+
+   An unverifiable transaction is to a third-party host if its request-
+   host U does not domain-match the reach R of the request-host O in the
+   origin transaction.
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 13]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   When it makes an unverifiable transaction, a user agent MUST disable
+   all cookie processing (i.e., MUST NOT send cookies, and MUST NOT
+   accept any received cookies) if the transaction is to a third-party
+   host.
+
+   This restriction prevents a malicious service author from using
+   unverifiable transactions to induce a user agent to start or continue
+   a session with a server in a different domain.  The starting or
+   continuation of such sessions could be contrary to the privacy
+   expectations of the user, and could also be a security problem.
+
+   User agents MAY offer configurable options that allow the user agent,
+   or any autonomous programs that the user agent executes, to ignore
+   the above rule, so long as these override options default to "off".
+
+   (N.B.  Mechanisms may be proposed that will automate overriding the
+   third-party restrictions under controlled conditions.)
+
+   Many current user agents already provide a review option that would
+   render many links verifiable.  For instance, some user agents display
+   the URL that would be referenced for a particular link when the mouse
+   pointer is placed over that link.  The user can therefore determine
+   whether to visit that site before causing the browser to do so.
+   (Though not implemented on current user agents, a similar technique
+   could be used for a button used to submit a form -- the user agent
+   could display the action to be taken if the user were to select that
+   button.)  However, even this would not make all links verifiable; for
+   example, links to automatically loaded images would not normally be
+   subject to "mouse pointer" verification.
+
+   Many user agents also provide the option for a user to view the HTML
+   source of a document, or to save the source to an external file where
+   it can be viewed by another application.  While such an option does
+   provide a crude review mechanism, some users might not consider it
+   acceptable for this purpose.
+
+3.4  How an Origin Server Interprets the Cookie Header
+
+   A user agent returns much of the information in the Set-Cookie2
+   header to the origin server when the request-URI path-matches the
+   Path attribute of the cookie.  When it receives a Cookie header, the
+   origin server SHOULD treat cookies with NAMEs whose prefix is $
+   specially, as an attribute for the cookie.
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 14]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+3.5  Caching Proxy Role
+
+   One reason for separating state information from both a URL and
+   document content is to facilitate the scaling that caching permits.
+   To support cookies, a caching proxy MUST obey these rules already in
+   the HTTP specification:
+
+      *  Honor requests from the cache, if possible, based on cache
+         validity rules.
+
+      *  Pass along a Cookie request header in any request that the
+         proxy must make of another server.
+
+      *  Return the response to the client.  Include any Set-Cookie2
+         response header.
+
+      *  Cache the received response subject to the control of the usual
+         headers, such as Expires,
+
+         Cache-control: no-cache
+
+         and
+
+         Cache-control: private
+
+      *  Cache the Set-Cookie2 subject to the control of the usual
+         header,
+
+         Cache-control: no-cache="set-cookie2"
+
+         (The Set-Cookie2 header should usually not be cached.)
+
+   Proxies MUST NOT introduce Set-Cookie2 (Cookie) headers of their own
+   in proxy responses (requests).
+
+4.  EXAMPLES
+
+4.1  Example 1
+
+   Most detail of request and response headers has been omitted.  Assume
+   the user agent has no stored cookies.
+
+      1. User Agent -> Server
+
+        POST /acme/login HTTP/1.1
+        [form data]
+
+        User identifies self via a form.
+
+
+
+Kristol & Montulli          Standards Track                    [Page 15]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+      2. Server -> User Agent
+
+        HTTP/1.1 200 OK
+        Set-Cookie2: Customer="WILE_E_COYOTE"; Version="1"; Path="/acme"
+
+        Cookie reflects user's identity.
+
+      3. User Agent -> Server
+
+        POST /acme/pickitem HTTP/1.1
+        Cookie: $Version="1"; Customer="WILE_E_COYOTE"; $Path="/acme"
+        [form data]
+
+        User selects an item for "shopping basket".
+
+      4. Server -> User Agent
+
+        HTTP/1.1 200 OK
+        Set-Cookie2: Part_Number="Rocket_Launcher_0001"; Version="1";
+                Path="/acme"
+
+        Shopping basket contains an item.
+
+      5. User Agent -> Server
+
+        POST /acme/shipping HTTP/1.1
+        Cookie: $Version="1";
+                Customer="WILE_E_COYOTE"; $Path="/acme";
+                Part_Number="Rocket_Launcher_0001"; $Path="/acme"
+        [form data]
+
+        User selects shipping method from form.
+
+      6. Server -> User Agent
+
+        HTTP/1.1 200 OK
+        Set-Cookie2: Shipping="FedEx"; Version="1"; Path="/acme"
+
+        New cookie reflects shipping method.
+
+      7. User Agent -> Server
+
+        POST /acme/process HTTP/1.1
+        Cookie: $Version="1";
+                Customer="WILE_E_COYOTE"; $Path="/acme";
+                Part_Number="Rocket_Launcher_0001"; $Path="/acme";
+                Shipping="FedEx"; $Path="/acme"
+        [form data]
+
+
+
+Kristol & Montulli          Standards Track                    [Page 16]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+        User chooses to process order.
+
+      8. Server -> User Agent
+
+        HTTP/1.1 200 OK
+
+        Transaction is complete.
+
+   The user agent makes a series of requests on the origin server, after
+   each of which it receives a new cookie.  All the cookies have the
+   same Path attribute and (default) domain.  Because the request-URIs
+   all path-match /acme, the Path attribute of each cookie, each request
+   contains all the cookies received so far.
+
+4.2  Example 2
+
+   This example illustrates the effect of the Path attribute.  All
+   detail of request and response headers has been omitted.  Assume the
+   user agent has no stored cookies.
+
+   Imagine the user agent has received, in response to earlier requests,
+   the response headers
+
+   Set-Cookie2: Part_Number="Rocket_Launcher_0001"; Version="1";
+           Path="/acme"
+
+   and
+
+   Set-Cookie2: Part_Number="Riding_Rocket_0023"; Version="1";
+           Path="/acme/ammo"
+
+   A subsequent request by the user agent to the (same) server for URLs
+   of the form /acme/ammo/...  would include the following request
+   header:
+
+   Cookie: $Version="1";
+           Part_Number="Riding_Rocket_0023"; $Path="/acme/ammo";
+           Part_Number="Rocket_Launcher_0001"; $Path="/acme"
+
+   Note that the NAME=VALUE pair for the cookie with the more specific
+   Path attribute, /acme/ammo, comes before the one with the less
+   specific Path attribute, /acme.  Further note that the same cookie
+   name appears more than once.
+
+   A subsequent request by the user agent to the (same) server for a URL
+   of the form /acme/parts/ would include the following request header:
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 17]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Cookie: $Version="1"; Part_Number="Rocket_Launcher_0001";
+   $Path="/acme"
+
+   Here, the second cookie's Path attribute /acme/ammo is not a prefix
+   of the request URL, /acme/parts/, so the cookie does not get
+   forwarded to the server.
+
+5.  IMPLEMENTATION CONSIDERATIONS
+
+   Here we provide guidance on likely or desirable details for an origin
+   server that implements state management.
+
+5.1  Set-Cookie2 Content
+
+   An origin server's content should probably be divided into disjoint
+   application areas, some of which require the use of state
+   information.  The application areas can be distinguished by their
+   request URLs.  The Set-Cookie2 header can incorporate information
+   about the application areas by setting the Path attribute for each
+   one.
+
+   The session information can obviously be clear or encoded text that
+   describes state.  However, if it grows too large, it can become
+   unwieldy.  Therefore, an implementor might choose for the session
+   information to be a key to a server-side resource.  Of course, using
+   a database creates some problems that this state management
+   specification was meant to avoid, namely:
+
+      1. keeping real state on the server side;
+
+      2. how and when to garbage-collect the database entry, in case the
+         user agent terminates the session by, for example, exiting.
+
+5.2  Stateless Pages
+
+   Caching benefits the scalability of WWW.  Therefore it is important
+   to reduce the number of documents that have state embedded in them
+   inherently.  For example, if a shopping-basket-style application
+   always displays a user's current basket contents on each page, those
+   pages cannot be cached, because each user's basket's contents would
+   be different.  On the other hand, if each page contains just a link
+   that allows the user to "Look at My Shopping Basket", the page can be
+   cached.
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 18]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+5.3  Implementation Limits
+
+   Practical user agent implementations have limits on the number and
+   size of cookies that they can store.  In general, user agents' cookie
+   support should have no fixed limits.  They should strive to store as
+   many frequently-used cookies as possible.  Furthermore, general-use
+   user agents SHOULD provide each of the following minimum capabilities
+   individually, although not necessarily simultaneously:
+
+      *  at least 300 cookies
+
+      *  at least 4096 bytes per cookie (as measured by the characters
+         that comprise the cookie non-terminal in the syntax description
+         of the Set-Cookie2 header, and as received in the Set-Cookie2
+         header)
+
+      *  at least 20 cookies per unique host or domain name
+
+   User agents created for specific purposes or for limited-capacity
+   devices SHOULD provide at least 20 cookies of 4096 bytes, to ensure
+   that the user can interact with a session-based origin server.
+
+   The information in a Set-Cookie2 response header MUST be retained in
+   its entirety.  If for some reason there is inadequate space to store
+   the cookie, it MUST be discarded, not truncated.
+
+   Applications should use as few and as small cookies as possible, and
+   they should cope gracefully with the loss of a cookie.
+
+   5.3.1  Denial of Service Attacks  User agents MAY choose to set an
+   upper bound on the number of cookies to be stored from a given host
+   or domain name or on the size of the cookie information.  Otherwise a
+   malicious server could attempt to flood a user agent with many
+   cookies, or large cookies, on successive responses, which would force
+   out cookies the user agent had received from other servers.  However,
+   the minima specified above SHOULD still be supported.
+
+6.  PRIVACY
+
+   Informed consent should guide the design of systems that use cookies.
+   A user should be able to find out how a web site plans to use
+   information in a cookie and should be able to choose whether or not
+   those policies are acceptable.  Both the user agent and the origin
+   server must assist informed consent.
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 19]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+6.1  User Agent Control
+
+   An origin server could create a Set-Cookie2 header to track the path
+   of a user through the server.  Users may object to this behavior as
+   an intrusive accumulation of information, even if their identity is
+   not evident.  (Identity might become evident, for example, if a user
+   subsequently fills out a form that contains identifying information.)
+   This state management specification therefore requires that a user
+   agent give the user control over such a possible intrusion, although
+   the interface through which the user is given this control is left
+   unspecified.  However, the control mechanisms provided SHALL at least
+   allow the user
+
+      *  to completely disable the sending and saving of cookies.
+
+      *  to determine whether a stateful session is in progress.
+
+      *  to control the saving of a cookie on the basis of the cookie's
+         Domain attribute.
+
+   Such control could be provided, for example, by mechanisms
+
+      *  to notify the user when the user agent is about to send a
+         cookie to the origin server, to offer the option not to begin a
+         session.
+
+      * to display a visual indication that a stateful session is in
+         progress.
+
+      * to let the user decide which cookies, if any, should be saved
+         when the user concludes a window or user agent session.
+
+      * to let the user examine and delete the contents of a cookie at
+         any time.
+
+   A user agent usually begins execution with no remembered state
+   information.  It SHOULD be possible to configure a user agent never
+   to send Cookie headers, in which case it can never sustain state with
+   an origin server.  (The user agent would then behave like one that is
+   unaware of how to handle Set-Cookie2 response headers.)
+
+   When the user agent terminates execution, it SHOULD let the user
+   discard all state information.  Alternatively, the user agent MAY ask
+   the user whether state information should be retained; the default
+   should be "no".  If the user chooses to retain state information, it
+   would be restored the next time the user agent runs.
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 20]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   NOTE: User agents should probably be cautious about using files to
+   store cookies long-term.  If a user runs more than one instance of
+   the user agent, the cookies could be commingled or otherwise
+   corrupted.
+
+6.2  Origin Server Role
+
+   An origin server SHOULD promote informed consent by adding CommentURL
+   or Comment information to the cookies it sends.  CommentURL is
+   preferred because of the opportunity to provide richer information in
+   a multiplicity of languages.
+
+6.3  Clear Text
+
+   The information in the Set-Cookie2 and Cookie headers is unprotected.
+   As a consequence:
+
+      1. Any sensitive information that is conveyed in them is exposed
+         to intruders.
+
+      2. A malicious intermediary could alter the headers as they travel
+         in either direction, with unpredictable results.
+
+   These facts imply that information of a personal and/or financial
+   nature should only be sent over a secure channel.  For less sensitive
+   information, or when the content of the header is a database key, an
+   origin server should be vigilant to prevent a bad Cookie value from
+   causing failures.
+
+   A user agent in a shared user environment poses a further risk.
+   Using a cookie inspection interface, User B could examine the
+   contents of cookies that were saved when User A used the machine.
+
+7.  SECURITY CONSIDERATIONS
+
+7.1  Protocol Design
+
+   The restrictions on the value of the Domain attribute, and the rules
+   concerning unverifiable transactions, are meant to reduce the ways
+   that cookies can "leak" to the "wrong" site.  The intent is to
+   restrict cookies to one host, or a closely related set of hosts.
+   Therefore a request-host is limited as to what values it can set for
+   Domain.  We consider it acceptable for hosts host1.foo.com and
+   host2.foo.com to share cookies, but not a.com and b.com.
+
+   Similarly, a server can set a Path only for cookies that are related
+   to the request-URI.
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 21]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+7.2  Cookie Spoofing
+
+   Proper application design can avoid spoofing attacks from related
+   domains.  Consider:
+
+      1. User agent makes request to victim.cracker.edu, gets back
+         cookie session_id="1234" and sets the default domain
+         victim.cracker.edu.
+
+      2. User agent makes request to spoof.cracker.edu, gets back cookie
+         session-id="1111", with Domain=".cracker.edu".
+
+      3. User agent makes request to victim.cracker.edu again, and
+         passes
+
+         Cookie: $Version="1"; session_id="1234",
+                 $Version="1"; session_id="1111"; $Domain=".cracker.edu"
+
+         The server at victim.cracker.edu should detect that the second
+         cookie was not one it originated by noticing that the Domain
+         attribute is not for itself and ignore it.
+
+7.3  Unexpected Cookie Sharing
+
+   A user agent SHOULD make every attempt to prevent the sharing of
+   session information between hosts that are in different domains.
+   Embedded or inlined objects may cause particularly severe privacy
+   problems if they can be used to share cookies between disparate
+   hosts.  For example, a malicious server could embed cookie
+   information for host a.com in a URI for a CGI on host b.com.  User
+   agent implementors are strongly encouraged to prevent this sort of
+   exchange whenever possible.
+
+7.4  Cookies For Account Information
+
+   While it is common practice to use them this way, cookies are not
+   designed or intended to be used to hold authentication information,
+   such as account names and passwords.  Unless such cookies are
+   exchanged over an encrypted path, the account information they
+   contain is highly vulnerable to perusal and theft.
+
+8.  OTHER, SIMILAR, PROPOSALS
+
+   Apart from RFC 2109, three other proposals have been made to
+   accomplish similar goals.  This specification began as an amalgam of
+   Kristol's State-Info proposal [DMK95] and Netscape's Cookie proposal
+   [Netscape].
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 22]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   Brian Behlendorf proposed a Session-ID header that would be user-
+   agent-initiated and could be used by an origin server to track
+   "clicktrails".  It would not carry any origin-server-defined state,
+   however.  Phillip Hallam-Baker has proposed another client-defined
+   session ID mechanism for similar purposes.
+
+   While both session IDs and cookies can provide a way to sustain
+   stateful sessions, their intended purpose is different, and,
+   consequently, the privacy requirements for them are different.  A
+   user initiates session IDs to allow servers to track progress through
+   them, or to distinguish multiple users on a shared machine.  Cookies
+   are server-initiated, so the cookie mechanism described here gives
+   users control over something that would otherwise take place without
+   the users' awareness.  Furthermore, cookies convey rich, server-
+   selected information, whereas session IDs comprise user-selected,
+   simple information.
+
+9.  HISTORICAL
+
+9.1  Compatibility with Existing Implementations
+
+   Existing cookie implementations, based on the Netscape specification,
+   use the Set-Cookie (not Set-Cookie2) header.  User agents that
+   receive in the same response both a Set-Cookie and Set-Cookie2
+   response header for the same cookie MUST discard the Set-Cookie
+   information and use only the Set-Cookie2 information.  Furthermore, a
+   user agent MUST assume, if it received a Set-Cookie2 response header,
+   that the sending server complies with this document and will
+   understand Cookie request headers that also follow this
+   specification.
+
+   New cookies MUST replace both equivalent old- and new-style cookies.
+   That is, if a user agent that follows both this specification and
+   Netscape's original specification receives a Set-Cookie2 response
+   header, and the NAME and the Domain and Path attributes match (per
+   the Cookie Management section) a Netscape-style cookie, the
+   Netscape-style cookie MUST be discarded, and the user agent MUST
+   retain only the cookie adhering to this specification.
+
+   Older user agents that do not understand this specification, but that
+   do understand Netscape's original specification, will not recognize
+   the Set-Cookie2 response header and will receive and send cookies
+   according to the older specification.
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 23]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+   A user agent that supports both this specification and Netscape-style
+   cookies SHOULD send a Cookie request header that follows the older
+   Netscape specification if it received the cookie in a Set-Cookie
+   response header and not in a Set-Cookie2 response header.  However,
+   it SHOULD send the following request header as well:
+
+        Cookie2: $Version="1"
+
+   The Cookie2 header advises the server that the user agent understands
+   new-style cookies.  If the server understands new-style cookies, as
+   well, it SHOULD continue the stateful session by sending a Set-
+   Cookie2 response header, rather than Set-Cookie.  A server that does
+   not understand new-style cookies will simply ignore the Cookie2
+   request header.
+
+9.2  Caching and HTTP/1.0
+
+   Some caches, such as those conforming to HTTP/1.0, will inevitably
+   cache the Set-Cookie2 and Set-Cookie headers, because there was no
+   mechanism to suppress caching of headers prior to HTTP/1.1.  This
+   caching can lead to security problems.  Documents transmitted by an
+   origin server along with Set-Cookie2 and Set-Cookie headers usually
+   either will be uncachable, or will be "pre-expired".  As long as
+   caches obey instructions not to cache documents (following Expires:
+   <a date in the past> or Pragma: no-cache (HTTP/1.0), or Cache-
+   control:  no-cache (HTTP/1.1)) uncachable documents present no
+   problem.  However, pre-expired documents may be stored in caches.
+   They require validation (a conditional GET) on each new request, but
+   some cache operators loosen the rules for their caches, and sometimes
+   serve expired documents without first validating them.  This
+   combination of factors can lead to cookies meant for one user later
+   being sent to another user.  The Set-Cookie2 and Set-Cookie headers
+   are stored in the cache, and, although the document is stale
+   (expired), the cache returns the document in response to later
+   requests, including cached headers.
+
+10.  ACKNOWLEDGEMENTS
+
+   This document really represents the collective efforts of the HTTP
+   Working Group of the IETF and, particularly, the following people, in
+   addition to the authors: Roy Fielding, Yaron Goland, Marc Hedlund,
+   Ted Hardie, Koen Holtman, Shel Kaphan, Rohit Khare, Foteos Macrides,
+   David W. Morris.
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 24]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+11.  AUTHORS' ADDRESSES
+
+   David M. Kristol
+   Bell Laboratories, Lucent Technologies
+   600 Mountain Ave.  Room 2A-333
+   Murray Hill, NJ  07974
+
+   Phone: (908) 582-2250
+   Fax: (908) 582-1239
+   EMail: dmk@bell-labs.com
+
+
+   Lou Montulli
+   Epinions.com, Inc.
+   2037 Landings Dr.
+   Mountain View, CA  94301
+
+   EMail: lou@montulli.org
+
+12.  REFERENCES
+
+   [DMK95]    Kristol, D.M., "Proposed HTTP State-Info Mechanism",
+              available at <http://portal.research.bell-
+              labs.com/~dmk/state-info.html>, September, 1995.
+
+   [Netscape] "Persistent Client State -- HTTP Cookies", available at
+              <http://www.netscape.com/newsref/std/cookie_spec.html>,
+              undated.
+
+   [RFC2109]  Kristol, D. and L. Montulli, "HTTP State Management
+              Mechanism", RFC 2109, February 1997.
+
+   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
+              Requirement Levels", BCP 14, RFC 2119, March 1997.
+
+   [RFC2279]  Yergeau, F., "UTF-8, a transformation format of Unicode
+              and ISO-10646", RFC 2279, January 1998.
+
+   [RFC2396]  Berners-Lee, T., Fielding, R. and L. Masinter, "Uniform
+              Resource Identifiers (URI): Generic Syntax", RFC 2396,
+              August 1998.
+
+   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H. and T.
+              Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1",
+              RFC 2616, June 1999.
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 25]
+
+RFC 2965            HTTP State Management Mechanism         October 2000
+
+
+13.  Full Copyright Statement
+
+   Copyright (C) The Internet Society (2000).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Kristol & Montulli          Standards Track                    [Page 26]
+
@@ -0,0 +1,1011 @@
+
+
+
+
+
+
+Network Working Group                                           A. Niemi
+Request for Comments: 3310                                         Nokia
+Category: Informational                                         J. Arkko
+                                                             V. Torvinen
+                                                                Ericsson
+                                                          September 2002
+
+
+       Hypertext Transfer Protocol (HTTP) Digest Authentication
+              Using Authentication and Key Agreement (AKA)
+
+Status of this Memo
+
+   This memo provides information for the Internet community.  It does
+   not specify an Internet standard of any kind.  Distribution of this
+   memo is unlimited.
+
+Copyright Notice
+
+   Copyright (C) The Internet Society (2002).  All Rights Reserved.
+
+Abstract
+
+   This memo specifies an Authentication and Key Agreement (AKA) based
+   one-time password generation mechanism for Hypertext Transfer
+   Protocol (HTTP) Digest access authentication.  The HTTP
+   Authentication Framework includes two authentication schemes: Basic
+   and Digest.  Both schemes employ a shared secret based mechanism for
+   access authentication.  The AKA mechanism performs user
+   authentication and session key distribution in Universal Mobile
+   Telecommunications System (UMTS) networks.  AKA is a challenge-
+   response based mechanism that uses symmetric cryptography.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                      [Page 1]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+Table of Contents
+
+   1.  Introduction and Motivation  . . . . . . . . . . . . . . . . .  2
+   1.1 Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  3
+   1.2 Conventions  . . . . . . . . . . . . . . . . . . . . . . . . .  4
+   2.  AKA Mechanism Overview . . . . . . . . . . . . . . . . . . . .  4
+   3.  Specification of Digest AKA  . . . . . . . . . . . . . . . . .  5
+   3.1 Algorithm Directive  . . . . . . . . . . . . . . . . . . . . .  5
+   3.2 Creating a Challenge . . . . . . . . . . . . . . . . . . . . .  6
+   3.3 Client Authentication  . . . . . . . . . . . . . . . . . . . .  7
+   3.4 Synchronization Failure  . . . . . . . . . . . . . . . . . . .  7
+   3.5 Server Authentication  . . . . . . . . . . . . . . . . . . . .  8
+   4.  Example Digest AKA Operation . . . . . . . . . . . . . . . . .  8
+   5.  Security Considerations  . . . . . . . . . . . . . . . . . . . 12
+   5.1 Authentication of Clients using Digest AKA . . . . . . . . . . 13
+   5.2 Limited Use of Nonce Values  . . . . . . . . . . . . . . . . . 13
+   5.3 Multiple Authentication Schemes and Algorithms . . . . . . . . 14
+   5.4 Online Dictionary Attacks  . . . . . . . . . . . . . . . . . . 14
+   5.5 Session Protection . . . . . . . . . . . . . . . . . . . . . . 14
+   5.6 Replay Protection  . . . . . . . . . . . . . . . . . . . . . . 15
+   5.7 Improvements to AKA Security . . . . . . . . . . . . . . . . . 15
+   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 15
+   6.1 Registration Template  . . . . . . . . . . . . . . . . . . . . 16
+       Normative References . . . . . . . . . . . . . . . . . . . . . 16
+       Informative References . . . . . . . . . . . . . . . . . . . . 16
+   A.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 17
+       Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . 17
+       Full Copyright Statement . . . . . . . . . . . . . . . . . . . 18
+
+1. Introduction and Motivation
+
+   The Hypertext Transfer Protocol (HTTP) Authentication Framework,
+   described in RFC 2617 [2], includes two authentication schemes: Basic
+   and Digest.  Both schemes employ a shared secret based mechanism for
+   access authentication.  The Basic scheme is inherently insecure in
+   that it transmits user credentials in plain text.  The Digest scheme
+   improves security by hiding user credentials with cryptographic
+   hashes, and additionally by providing limited message integrity.
+
+   The Authentication and Key Agreement (AKA) [6] mechanism performs
+   authentication and session key distribution in Universal Mobile
+   Telecommunications System (UMTS) networks.  AKA is a challenge-
+   response based mechanism that uses symmetric cryptography.  AKA is
+   typically run in a UMTS IM Services Identity Module (ISIM), which
+   resides on a smart card like device that also provides tamper
+   resistant storage of shared secrets.
+
+
+
+
+
+Niemi, et. al.               Informational                      [Page 2]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   This document specifies a mapping of AKA parameters onto HTTP Digest
+   authentication.  In essence, this mapping enables the usage of AKA as
+   a one-time password generation mechanism for Digest authentication.
+
+   As the Session Initiation Protocol (SIP) [3] Authentication Framework
+   closely follows the HTTP Authentication Framework, Digest AKA is
+   directly applicable to SIP as well as any other embodiment of HTTP
+   Digest.
+
+1.1 Terminology
+
+   This chapter explains the terminology used in this document.
+
+   AKA
+      Authentication and Key Agreement.
+
+   AuC
+      Authentication Center.  The network element in mobile networks
+      that can authorize users either in GSM or in UMTS networks.
+
+   AUTN
+      Authentication Token.  A 128 bit value generated by the AuC, which
+      together with the RAND parameter authenticates the server to the
+      client.
+
+   AUTS
+      Authentication Token.  A 112 bit value generated by the client
+      upon experiencing an SQN synchronization failure.
+
+   CK
+      Cipher Key.  An AKA session key for encryption.
+
+   IK
+      Integrity Key.  An AKA session key for integrity check.
+
+   ISIM
+      IP Multimedia Services Identity Module.
+
+   PIN
+      Personal Identification Number.  Commonly assigned passcodes for
+      use with automatic cash machines, smart cards, etc.
+
+   RAND
+      Random Challenge.  Generated by the AuC using the SQN.
+
+   RES
+      Authentication Response.  Generated by the ISIM.
+
+
+
+
+Niemi, et. al.               Informational                      [Page 3]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   SIM
+      Subscriber Identity Module.  GSM counter part for ISIM.
+
+   SQN
+      Sequence Number.  Both AuC and ISIM maintain the value of the SQN.
+
+   UMTS
+      Universal Mobile Telecommunications System.
+
+   XRES
+      Expected Authentication Response.  In a successful authentication
+      this is equal to RES.
+
+1.2 Conventions
+
+   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
+   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
+   document are to be interpreted as described in BCP 14, RFC 2119 [1].
+
+2. AKA Mechanism Overview
+
+   This chapter describes the AKA operation in detail:
+
+   1. A shared secret K is established beforehand between the ISIM and
+      the Authentication Center (AuC).  The secret is stored in the
+      ISIM, which resides on a smart card like, tamper resistant device.
+
+   2. The AuC of the home network produces an authentication vector AV,
+      based on the shared secret K and a sequence number SQN.  The
+      authentication vector contains a random challenge RAND, network
+      authentication token AUTN, expected authentication result XRES, a
+      session key for integrity check IK, and a session key for
+      encryption CK.
+
+   3. The authentication vector is downloaded to a server.  Optionally,
+      the server can also download a batch of AVs, containing more than
+      one authentication vector.
+
+   4. The server creates an authentication request, which contains the
+      random challenge RAND, and the network authenticator token AUTN.
+
+   5. The authentication request is delivered to the client.
+
+   6. Using the shared secret K and the sequence number SQN, the client
+      verifies the AUTN with the ISIM.  If the verification is
+      successful, the network has been authenticated.  The client then
+      produces an authentication response RES, using the shared secret K
+      and the random challenge RAND.
+
+
+
+Niemi, et. al.               Informational                      [Page 4]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   7. The authentication response, RES, is delivered to the server.
+
+   8. The server compares the authentication response RES with the
+      expected response, XRES.  If the two match, the user has been
+      successfully authenticated, and the session keys, IK and CK, can
+      be used for protecting further communications between the client
+      and the server.
+
+   When verifying the AUTN, the client may detect that the sequence
+   numbers between the client and the server have fallen out of sync.
+   In this case, the client produces a synchronization parameter AUTS,
+   using the shared secret K and the client sequence number SQN.  The
+   AUTS parameter is delivered to the network in the authentication
+   response, and the authentication can be tried again based on
+   authentication vectors generated with the synchronized sequence
+   number.
+
+   For a specification of the AKA mechanism and the generation of the
+   cryptographic parameters AUTN, RES, IK, CK, and AUTS, see reference
+   3GPP TS 33.102 [6].
+
+3. Specification of Digest AKA
+
+   In general, the Digest AKA operation is identical to the Digest
+   operation in RFC 2617 [2].  This chapter specifies the parts in which
+   Digest AKA extends the Digest operation.  The notation used in the
+   Augmented BNF definitions for the new and modified syntax elements in
+   this section is as used in SIP [3], and any elements not defined in
+   this section are as defined in SIP and the documents to which it
+   refers.
+
+3.1 Algorithm Directive
+
+   In order to direct the client into using AKA for authentication
+   instead of the standard password system, the RFC 2617 defined
+   algorithm directive is overloaded in Digest AKA:
+
+           algorithm           =  "algorithm" EQUAL ( aka-namespace
+                                  / algorithm-value )
+           aka-namespace       =  aka-version "-" algorithm-value
+           aka-version         =  "AKAv" 1*DIGIT
+           algorithm-value     =  ( "MD5" / "MD5-sess" / token )
+
+   algorithm
+      A string indicating the algorithm used in producing the digest and
+      the checksum.  If the directive is not understood, the nonce
+      SHOULD be ignored, and another challenge (if one is present)
+      should be used instead.  The default aka-version is "AKAv1".
+
+
+
+Niemi, et. al.               Informational                      [Page 5]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+      Further AKA versions can be specified, with version numbers
+      assigned by IANA [7].  When the algorithm directive is not
+      present, it is assumed to be "MD5".  This indicates, that AKA is
+      not used to produce the Digest password.
+
+      Example:
+
+            algorithm=AKAv1-MD5
+
+      If the entropy of the used RES value is limited (e.g., only 32
+      bits), reuse of the same RES value in authenticating subsequent
+      requests and responses is NOT RECOMMENDED.  Such a RES value
+      SHOULD only be used as a one-time password, and algorithms such as
+      "MD5-sess", which limit the amount of material hashed with a
+      single key, by producing a session key for authentication, SHOULD
+      NOT be used.
+
+3.2 Creating a Challenge
+
+   In order to deliver the AKA authentication challenge to the client in
+   Digest AKA, the nonce directive defined in RFC 2617 is extended:
+
+           nonce               =  "nonce" EQUAL ( aka-nonce
+                                  / nonce-value )
+           aka-nonce           =  LDQUOT aka-nonce-value RDQUOT
+           aka-nonce-value     =  <base64 encoding of RAND, AUTN, and
+                                   server specific data>
+
+   nonce
+      A parameter, which is populated with the Base64 [4] encoding of
+      the concatenation of the AKA authentication challenge RAND, the
+      AKA AUTN token, and optionally some server specific data, as in
+      Figure 1.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                      [Page 6]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+      Example:
+
+          nonce="MzQ0a2xrbGtmbGtsZm9wb2tsc2tqaHJzZXNy9uQyMzMzMzQK="
+
+       0                   1                   2                   3
+       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                                                               |
+      |                            RAND                               |
+      |                                                               |
+      |                                                               |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |                                                               |
+      |                            AUTN                               |
+      |                                                               |
+      |                                                               |
+      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+      |  Server Data...
+      +-+-+-+-+-+-+-+-+-+-+-+
+
+                    Figure 1: Generating the nonce value.
+
+   If the server receives a client authentication containing the "auts"
+   parameter defined in Section 3.4, that includes a valid AKA AUTS
+   parameter, the server MUST use it to generate a new challenge to the
+   client.  Note that when the AUTS is present, the included "response"
+   parameter is calculated using an empty password (password of ""),
+   instead of a RES.
+
+3.3 Client Authentication
+
+   When a client receives a Digest AKA authentication challenge, it
+   extracts the RAND and AUTN from the "nonce" parameter, and assesses
+   the AUTN token provided by the server.  If the client successfully
+   authenticates the server with the AUTN, and determines that the SQN
+   used in generating the challenge is within expected range, the AKA
+   algorithms are run with the RAND challenge and shared secret K.
+
+   The resulting AKA RES parameter is treated as a "password" when
+   calculating the response directive of RFC 2617.
+
+3.4 Synchronization Failure
+
+   For indicating an AKA sequence number synchronization failure, and to
+   re-synchronize the SQN in the AuC using the AUTS token, a new
+   directive is defined for the "digest-response" of the "Authorization"
+   request header defined in RFC 2617:
+
+
+
+
+Niemi, et. al.               Informational                      [Page 7]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+           auts                =  "auts" EQUAL auts-param
+           auts-param          =  LDQUOT auts-value RDQUOT
+           auts-value          =  <base64 encoding of AUTS>
+
+
+   auts
+      A string carrying a base64 encoded AKA AUTS parameter.  This
+      directive is used to re-synchronize the server side SQN.  If the
+      directive is present, the client doesn't use any password when
+      calculating its credentials.  Instead, the client MUST calculate
+      its credentials using an empty password (password of "").
+
+      Example:
+
+            auts="CjkyMzRfOiwg5CfkJ2UK="
+
+   Upon receiving the "auts" parameter, the server will check the
+   validity of the parameter value using the shared secret K.  A valid
+   AUTS parameter is used to re-synchronize the SQN in the AuC.  The
+   synchronized SQN is then used to generate a fresh authentication
+   vector AV, with which the client is then re-challenged.
+
+3.5 Server Authentication
+
+   Even though AKA provides inherent mutual authentication with the AKA
+   AUTN token, mutual authentication mechanisms provided by Digest may
+   still be useful in order to provide message integrity.
+
+   In Digest AKA, the server uses the AKA XRES parameter as "password"
+   when calculating the "response-auth" of the "Authentication-Info"
+   header defined in RFC 2617.
+
+4. Example Digest AKA Operation
+
+   Figure 2 below describes a message flow describing a Digest AKA
+   process of authenticating a SIP request, namely the SIP REGISTER
+   request.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                      [Page 8]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+      Client                                                  Server
+
+        | 1) REGISTER                                           |
+        |------------------------------------------------------>|
+        |                                                       |
+        |                            +-----------------------------+
+        |                            | Server runs AKA algorithms, |
+        |                            | generates RAND and AUTN.    |
+        |                            +-----------------------------+
+        |                                                       |
+        |              2) 401 Unauthorized                      |
+        |                 WWW-Authenticate: Digest              |
+        |                                (RAND, AUTN delivered) |
+        |<------------------------------------------------------|
+        |                                                       |
+    +------------------------------------+                      |
+    | Client runs AKA algorithms on ISIM,|                      |
+    | verifies AUTN, derives RES         |                      |
+    | and session keys.                  |                      |
+    +------------------------------------+                      |
+        |                                                       |
+        | 3) REGISTER                                           |
+        |    Authorization: Digest (RES is used)                |
+        |------------------------------------------------------>|
+        |                                                       |
+        |                            +------------------------------+
+        |                            | Server checks the given RES, |
+        |                            | and finds it correct.        |
+        |                            +------------------------------+
+        |                                                       |
+        |               4) 200 OK                               |
+        |                  Authentication-Info: (XRES is used)  |
+        |<------------------------------------------------------|
+        |                                                       |
+
+     Figure 2: Message flow representing a successful authentication.
+
+   1) Initial request
+
+      REGISTER sip:home.mobile.biz SIP/2.0
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                      [Page 9]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   2) Response containing a challenge
+
+      SIP/2.0 401 Unauthorized
+      WWW-Authenticate: Digest
+              realm="RoamingUsers@mobile.biz",
+              nonce="CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==",
+              qop="auth,auth-int",
+              opaque="5ccc069c403ebaf9f0171e9517f40e41",
+              algorithm=AKAv1-MD5
+
+   3) Request containing credentials
+
+      REGISTER sip:home.mobile.biz SIP/2.0
+      Authorization: Digest
+              username="jon.dough@mobile.biz",
+              realm="RoamingUsers@mobile.biz",
+              nonce="CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==",
+              uri="sip:home.mobile.biz",
+              qop=auth-int,
+              nc=00000001,
+              cnonce="0a4f113b",
+              response="6629fae49393a05397450978507c4ef1",
+              opaque="5ccc069c403ebaf9f0171e9517f40e41"
+
+   4) Successful response
+
+      SIP/2.0 200 OK
+      Authentication-Info:
+              qop=auth-int,
+              rspauth="6629fae49393a05397450978507c4ef1",
+              cnonce="0a4f113b",
+              nc=00000001
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 10]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   Figure 3 below describes a message flow describing a Digest AKA
+   authentication process, in which there is a synchronization failure.
+
+      Client                                                 Server
+
+        | 1) REGISTER                                           |
+        |------------------------------------------------------>|
+        |                                                       |
+        |                            +-----------------------------+
+        |                            | Server runs AKA algorithms, |
+        |                            | generates RAND and AUTN.    |
+        |                            +-----------------------------+
+        |                                                       |
+        |              2) 401 Unauthorized                      |
+        |                 WWW-Authenticate: Digest              |
+        |                                (RAND, AUTN delivered) |
+        |<------------------------------------------------------|
+        |                                                       |
+    +------------------------------------+                      |
+    | Client runs AKA algorithms on ISIM,|                      |
+    | verifies the AUTN, but discovers   |                      |
+    | that it contains an invalid        |                      |
+    | sequence number. The client then   |                      |
+    | generates an AUTS token.           |                      |
+    +------------------------------------+                      |
+        |                                                       |
+        | 3) REGISTER                                           |
+        |    Authorization: Digest (AUTS is delivered)          |
+        |------------------------------------------------------>|
+        |                                                       |
+        |                                  +-----------------------+
+        |                                  | Server performs       |
+        |                                  | re-synchronization    |
+        |                                  | using AUTS and RAND.  |
+        |                                  +-----------------------+
+        |                                                       |
+        |              4) 401 Unauthorized                      |
+        |                 WWW-Authenticate: Digest              |
+        |                                (re-synchronized RAND, |
+        |                                 AUTN delivered)       |
+        |<------------------------------------------------------|
+        |                                                       |
+
+   Figure 3: Message flow representing an authentication synchronization
+   failure.
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 11]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   1) Initial request
+
+      REGISTER sip:home.mobile.biz SIP/2.0
+
+   2) Response containing a challenge
+
+      SIP/2.0 401 Unauthorized
+      WWW-Authenticate: Digest
+            realm="RoamingUsers@mobile.biz",
+            qop="auth",
+            nonce="CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==",
+            opaque="5ccc069c403ebaf9f0171e9517f40e41",
+            algorithm=AKAv1-MD5
+
+   3) Request containing credentials
+
+      REGISTER sip:home.mobile.biz SIP/2.0
+      Authorization: Digest
+            username="jon.dough@mobile.biz",
+            realm="RoamingUsers@mobile.biz",
+            nonce="CjPk9mRqNuT25eRkajM09uTl9nM09uTl9nMz5OX25PZz==",
+            uri="sip:home.mobile.biz",
+            qop=auth,
+            nc=00000001,
+            cnonce="0a4f113b",
+            response="4429ffe49393c02397450934607c4ef1",
+            opaque="5ccc069c403ebaf9f0171e9517f40e41",
+            auts="5PYxMuX2NOT2NeQ="
+
+   4) Response containing a new challenge
+
+      SIP/2.0 401 Unauthorized
+      WWW-Authenticate: Digest
+            realm="RoamingUsers@mobile.biz",
+            qop="auth,auth-int",
+            nonce="9uQzNPbk9jM05Pbl5Pbl5DIz9uTl9uTl9jM0NTHk9uXk==",
+            opaque="dcd98b7102dd2f0e8b11d0f600bfb0c093",
+            algorithm=AKAv1-MD5
+
+5. Security Considerations
+
+   In general, Digest AKA is vulnerable to the same security threats as
+   HTTP authentication [2].  This chapter discusses the relevant
+   exceptions.
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 12]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+5.1 Authentication of Clients using Digest AKA
+
+   AKA is typically -- though this isn't a theoretical limitation -- run
+   on an ISIM application that usually resides in a tamper resistant
+   smart card.  Interfaces to the ISIM exist, which enable the host
+   device to request authentication to be performed on the card.
+   However, these interfaces do not allow access to the long-term secret
+   outside the ISIM, and the authentication can only be performed if the
+   device accessing the ISIM has knowledge of a PIN code, shared between
+   the user and the ISIM.  Such PIN codes are typically obtained from
+   user input, and are usually required when the device is powered on.
+
+   The use of tamper resistant cards with secure interfaces implies that
+   Digest AKA is typically more secure than regular Digest
+   implementations, as neither possession of the host device nor Trojan
+   Horses in the software give access to the long term secret.  Where a
+   PIN scheme is used, the user is also authenticated when the device is
+   powered on.  However, there may be a difference in the resulting
+   security of Digest AKA, compared to traditional Digest
+   implementations, depending of course on whether those implementations
+   cache/store passwords that are received from the user.
+
+5.2 Limited Use of Nonce Values
+
+   The Digest scheme uses server-specified nonce values to seed the
+   generation of the request-digest value.  The server is free to
+   construct the nonce in such a way, that it may only be used from a
+   particular client, for a particular resource, for a limited period of
+   time or number of uses, or any other restrictions.  Doing so
+   strengthens the protection provided against, for example, replay
+   attacks.
+
+   Digest AKA limits the applicability of a nonce value to a particular
+   ISIM.  Typically, the ISIM is accessible only to one client device at
+   a time.  However, the nonce values are strong and secure even though
+   limited to a particular ISIM.  Additionally, this requires that the
+   server is provided with the client identity before an authentication
+   challenge can be generated.  If a client identity is not available,
+   an additional round trip is needed to acquire it.  Such a case is
+   analogous to an AKA synchronization failure.
+
+   A server may allow each nonce value to be used only once by sending a
+   next-nonce directive in the Authentication-Info header field of every
+   response.  However, this may cause a synchronization failure, and
+   consequently some additional round trips in AKA, if the same SQN
+   space is also used for other access schemes at the same time.
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 13]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+5.3 Multiple Authentication Schemes and Algorithms
+
+   In HTTP authentication, a user agent MUST choose the strongest
+   authentication scheme it understands and request credentials from the
+   user, based upon that challenge.
+
+   In general, using passwords generated by Digest AKA with other HTTP
+   authentication schemes is not recommended even though the realm
+   values or protection domains would coincide.  In these cases, a
+   password should be requested from the end-user instead.  Digest AKA
+   passwords MUST NOT be re-used with such HTTP authentication schemes,
+   which send the password in clear.  In particular, AKA passwords MUST
+   NOT be re-used with HTTP Basic.
+
+   The same principle must be applied within a scheme if several
+   algorithms are supported.  A client receiving an HTTP Digest
+   challenge with several available algorithms MUST choose the strongest
+   algorithm it understands.  For example, Digest with "AKAv1-MD5" would
+   be stronger than Digest with "MD5".
+
+5.4 Online Dictionary Attacks
+
+   Since user-selected passwords are typically quite simple, it has been
+   proposed that servers should not accept passwords for HTTP Digest,
+   which are in the dictionary [2].  This potential threat does not
+   exist in HTTP Digest AKA because the algorithm will use ISIM
+   originated passwords.  However, the end-user must still be careful
+   with PIN codes.  Even though HTTP Digest AKA password requests are
+   never displayed to the end-user, she will be authenticated to the
+   ISIM via a PIN code.  Commonly known initial PIN codes are typically
+   installed to the ISIM during manufacturing and if the end-users do
+   not change them, there is a danger that an unauthorized user may be
+   able to use the device.  Naturally this requires that the
+   unauthorized user has access to the physical device, and that the
+   end-user has not changed the initial PIN code.  For this reason,
+   end-users are strongly encouraged to change their PIN codes when they
+   receive an ISIM.
+
+5.5 Session Protection
+
+   Digest AKA is able to generate additional session keys for integrity
+   (IK) and confidentiality (CK) protection.  Even though this document
+   does not specify the use of these additional keys, they may be used
+   for creating additional security within HTTP authentication or some
+   other security mechanism.
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 14]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+5.6 Replay Protection
+
+   AKA allows sequence numbers to be tracked for each authentication,
+   with the SQN parameter.  This allows authentications to be replay
+   protected even if the RAND parameter happened to be the same for two
+   authentication requests.  More importantly, this offers additional
+   protection for the case where an attacker replays an old
+   authentication request sent by the network.  The client will be able
+   to detect that the request is old, and refuse authentication.  This
+   proves liveliness of the authentication request even in the case
+   where a MitM attacker tries to trick the client into providing an
+   authentication response, and then replaces parts of the message with
+   something else.  In other words, a client challenged by Digest AKA is
+   not vulnerable for chosen plain text attacks.  Finally, frequent
+   sequence number errors would reveal an attack where the tamper
+   resistant card has been cloned and is being used in multiple devices.
+
+   The downside of sequence number tracking is that servers must hold
+   more information for each user than just their long-term secret,
+   namely the current SQN value.  However, this information is typically
+   not stored in the SIP nodes, but in dedicated authentication servers
+   instead.
+
+5.7 Improvements to AKA Security
+
+   Even though AKA is perceived as a secure mechanism, Digest AKA is
+   able to improve it.  More specifically, the AKA parameters carried
+   between the client and the server during authentication may be
+   protected along with other parts of the message by using Digest AKA.
+   This is not possible with plain AKA.
+
+6. IANA Considerations
+
+   This document specifies an aka-version namespace in Section 3.1 which
+   requires a central coordinating body.  The body responsible for this
+   coordination is the Internet Assigned Numbers Authority (IANA).
+
+   The default aka-version defined in this document is "AKAv1".
+   Following the policies outlined in [5], versions above 1 are
+   allocated as Expert Review.
+
+   Registrations with the IANA MUST include the version number being
+   registered, including the "AKAv" prefix.  For example, a registration
+   for "AKAv2" would potentially be a valid one, whereas a registration
+   for "FOOv2" or "2" would not be valid.  Further, the registration
+   MUST include contact information for the party responsible for the
+   registration.
+
+
+
+
+Niemi, et. al.               Informational                     [Page 15]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+   As this document defines the default aka-version, the initial IANA
+   registration for aka-version values will contain an entry for
+   "AKAv1".
+
+6.1 Registration Template
+
+      To: ietf-digest-aka@iana.org
+      Subject: Registration of a new AKA version
+
+      Version identifier:
+
+          (Must contain a valid aka-version value,
+           as described in section 3.1.)
+
+      Person & email address to contact for further information:
+
+          (Must contain contact information for the
+           person(s) responsible for the registration.)
+
+Normative References
+
+   [1]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
+        Levels", BCP 14, RFC 2119, March 1997.
+
+   [2]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
+        Leach, P., Luotonen, A. and L. Stewart, "HTTP Authentication:
+        Basic and Digest Access Authentication", RFC 2617, June 1999.
+
+   [3]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston, A.,
+        Peterson, J., Sparks, R., Handley, M. and E. Schooler, "SIP:
+        Session Initiation Protocol", RFC 3261, June 2002.
+
+   [4]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
+        Extensions (MIME) Part One: Format of Internet Message Bodies",
+        RFC 2045, November 1996.
+
+Informative References
+
+   [5]  Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
+        Considerations Section in RFCs", BCP 26, RFC 2434, October 1998.
+
+   [6]  3rd Generation Partnership Project, "Security Architecture
+        (Release 4)", TS 33.102, December 2001.
+
+   [7]  http://www.iana.org, "Assigned Numbers".
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 16]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+Appendix A. Acknowledgements
+
+   The authors would like to thank Sanjoy Sen, Jonathan Rosenberg, Pete
+   McCann, Tao Haukka, Ilkka Uusitalo, Henry Haverinen, John Loughney,
+   Allison Mankin and Greg Rose.
+
+Authors' Addresses
+
+   Aki Niemi
+   Nokia
+   P.O. Box 301
+   NOKIA GROUP, FIN  00045
+   Finland
+
+   Phone: +358 50 389 1644
+   EMail: aki.niemi@nokia.com
+
+
+   Jari Arkko
+   Ericsson
+   Hirsalantie 1
+   Jorvas, FIN  02420
+   Finland
+
+   Phone: +358 40 5079256
+   EMail: jari.arkko@ericsson.com
+
+
+   Vesa Torvinen
+   Ericsson
+   Joukahaisenkatu 1
+   Turku, FIN  20520
+   Finland
+
+   Phone: +358 40 7230822
+   EMail: vesa.torvinen@ericsson.fi
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 17]
+
+RFC 3310          HTTP Digest Authentication Using AKA    September 2002
+
+
+Full Copyright Statement
+
+   Copyright (C) The Internet Society (2002).  All Rights Reserved.
+
+   This document and translations of it may be copied and furnished to
+   others, and derivative works that comment on or otherwise explain it
+   or assist in its implementation may be prepared, copied, published
+   and distributed, in whole or in part, without restriction of any
+   kind, provided that the above copyright notice and this paragraph are
+   included on all such copies and derivative works.  However, this
+   document itself may not be modified in any way, such as by removing
+   the copyright notice or references to the Internet Society or other
+   Internet organizations, except as needed for the purpose of
+   developing Internet standards in which case the procedures for
+   copyrights defined in the Internet Standards process must be
+   followed, or as required to translate it into languages other than
+   English.
+
+   The limited permissions granted above are perpetual and will not be
+   revoked by the Internet Society or its successors or assigns.
+
+   This document and the information contained herein is provided on an
+   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
+   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
+   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
+   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
+   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
+
+Acknowledgement
+
+   Funding for the RFC Editor function is currently provided by the
+   Internet Society.
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+Niemi, et. al.               Informational                     [Page 18]
+