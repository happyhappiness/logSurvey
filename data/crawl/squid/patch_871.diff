@@ -96,7 +96,7 @@ class BodyPipe: public RefCountable {
 		bool mayNeedMoreData() const { return !bodySizeKnown() || needsMoreData(); }
 		bool needsMoreData() const { return bodySizeKnown() && unproducedSize() > 0; }
 		uint64_t unproducedSize() const; // size of still unproduced data
-		bool stillProducing(Producer *producer) const { return theProducer == producer; }
+		bool stillProducing(const Producer *producer) const { return theProducer == producer; }
 
 		// called by consumers
 		bool setConsumerIfNotLate(Consumer *aConsumer);
@@ -105,7 +105,7 @@ class BodyPipe: public RefCountable {
 		void consume(size_t size);
 		bool expectMoreAfter(uint64_t offset) const;
 		bool exhausted() const; // saw eof/abort and all data consumed
-		bool stillConsuming(Consumer *consumer) const { return theConsumer == consumer; }
+		bool stillConsuming(const Consumer *consumer) const { return theConsumer == consumer; }
 
 		// start or continue consuming when there is no consumer
 		void enableAutoConsumption();
@@ -91,7 +91,7 @@ Adaptation::Initiate::service()
 }
 
 const char *Adaptation::Initiate::status() const {
-    return ""; // for now
+    return AsyncJob::status(); // for now
 }
 
 
@@ -22,22 +22,6 @@ Ecap::HeaderRep::HeaderRep(HttpMsg &aMessage): theHeader(aMessage.header),
 {
 }
 
-http_hdr_type
-Ecap::HeaderRep::TranslateHeaderId(const Name &name)
-{
-    if (name.assignedHostId())
-        return static_cast<http_hdr_type>(name.hostId());
-    return HDR_OTHER;
-}
-
-protocol_t
-Ecap::HeaderRep::TranslateProtocolId(const Name &name)
-{
-    if (name.assignedHostId())
-        return static_cast<protocol_t>(name.hostId());
-    return PROTO_NONE; // no PROTO_OTHER
-}
-
 bool
 Ecap::HeaderRep::hasAny(const Name &name) const
 {
@@ -101,22 +85,37 @@ Ecap::HeaderRep::parse(const Area &buf)
     Must(theMessage.parse(&mb, true, &error));
 }
 
+http_hdr_type
+Ecap::HeaderRep::TranslateHeaderId(const Name &name)
+{
+    if (name.assignedHostId())
+        return static_cast<http_hdr_type>(name.hostId());
+    return HDR_OTHER;
+}
+
+
+/* FirstLineRep */
+
+Ecap::FirstLineRep::FirstLineRep(HttpMsg &aMessage): theMessage(aMessage)
+{
+}
+
 libecap::Version
-Ecap::HeaderRep::version() const
+Ecap::FirstLineRep::version() const
 {
     return libecap::Version(theMessage.http_ver.major,
         theMessage.http_ver.minor);
 }
 
 void
-Ecap::HeaderRep::version(const libecap::Version &aVersion)
+Ecap::FirstLineRep::version(const libecap::Version &aVersion)
 {
     theMessage.http_ver.major = aVersion.majr;
     theMessage.http_ver.minor = aVersion.minr;
 }
 
 libecap::Name
-Ecap::HeaderRep::protocol() const
+Ecap::FirstLineRep::protocol() const
 {
     // TODO: optimize?
     switch (theMessage.protocol) {
@@ -143,22 +142,30 @@ Ecap::HeaderRep::protocol() const
 }
 
 void
-Ecap::HeaderRep::protocol(const Name &p)
+Ecap::FirstLineRep::protocol(const Name &p)
 {
     // TODO: what happens if we fail to translate some protocol?
     theMessage.protocol = TranslateProtocolId(p);
 }
 
+protocol_t
+Ecap::FirstLineRep::TranslateProtocolId(const Name &name)
+{
+    if (name.assignedHostId())
+        return static_cast<protocol_t>(name.hostId());
+    return PROTO_NONE; // no PROTO_OTHER
+}
+
 
 /* RequestHeaderRep */
 
-Ecap::RequestHeaderRep::RequestHeaderRep(HttpRequest &aMessage):
-    HeaderRep(aMessage), theMessage(aMessage)
+Ecap::RequestLineRep::RequestLineRep(HttpRequest &aMessage):
+    FirstLineRep(aMessage), theMessage(aMessage)
 {
 }
 
 void
-Ecap::RequestHeaderRep::uri(const Area &aUri)
+Ecap::RequestLineRep::uri(const Area &aUri)
 {
     // TODO: if method is not set, urlPath will assume it is not connect;
     // Can we change urlParse API to remove the method parameter?
@@ -169,15 +176,15 @@ Ecap::RequestHeaderRep::uri(const Area &aUri)
     Must(ok);
 }
 
-Ecap::RequestHeaderRep::Area
-Ecap::RequestHeaderRep::uri() const
+Ecap::RequestLineRep::Area
+Ecap::RequestLineRep::uri() const
 {
     return Area::FromTempBuffer(theMessage.urlpath.buf(),
         theMessage.urlpath.size());
 }
 
 void
-Ecap::RequestHeaderRep::method(const Name &aMethod)
+Ecap::RequestLineRep::method(const Name &aMethod)
 {
     if (aMethod.assignedHostId()) {
         const int id = aMethod.hostId();
@@ -191,8 +198,8 @@ Ecap::RequestHeaderRep::method(const Name &aMethod)
     }
 }
 
-Ecap::RequestHeaderRep::Name
-Ecap::RequestHeaderRep::method() const
+Ecap::RequestLineRep::Name
+Ecap::RequestLineRep::method() const
 {
     switch (theMessage.method.id()) {
         case METHOD_GET: return libecap::methodGet;
@@ -206,53 +213,108 @@ Ecap::RequestHeaderRep::method() const
     }
 }
 
+libecap::Version
+Ecap::RequestLineRep::version() const
+{
+    return FirstLineRep::version();
+}
+
+void
+Ecap::RequestLineRep::version(const libecap::Version &aVersion)
+{
+    FirstLineRep::version(aVersion);
+}
+
+libecap::Name
+Ecap::RequestLineRep::protocol() const
+{
+    return FirstLineRep::protocol();
+}
+
+void
+Ecap::RequestLineRep::protocol(const Name &p)
+{
+    FirstLineRep::protocol(p);
+}
+
 
 /* ReplyHeaderRep */
 
-Ecap::ReplyHeaderRep::ReplyHeaderRep(HttpReply &aMessage):
-    HeaderRep(aMessage), theMessage(aMessage)
+Ecap::StatusLineRep::StatusLineRep(HttpReply &aMessage):
+    FirstLineRep(aMessage), theMessage(aMessage)
 {
 }
 
 void
-Ecap::ReplyHeaderRep::statusCode(int code)
+Ecap::StatusLineRep::statusCode(int code)
 {
     // TODO: why is .status a enum? Do we not support unknown statuses?
     theMessage.sline.status = static_cast<http_status>(code);
 }
 
 int
-Ecap::ReplyHeaderRep::statusCode() const
+Ecap::StatusLineRep::statusCode() const
 {
     // TODO: see statusCode(code) TODO above
     return static_cast<int>(theMessage.sline.status);
 }
 
 void
-Ecap::ReplyHeaderRep::reasonPhrase(const Area &)
+Ecap::StatusLineRep::reasonPhrase(const Area &)
 {
     // Squid does not support custom reason phrases
     theMessage.sline.reason = NULL;
 }
 
-Ecap::ReplyHeaderRep::Area
-Ecap::ReplyHeaderRep::reasonPhrase() const
+Ecap::StatusLineRep::Area
+Ecap::StatusLineRep::reasonPhrase() const
 {
     return theMessage.sline.reason ?
         Area::FromTempString(std::string(theMessage.sline.reason)) : Area();
 }
 
+libecap::Version
+Ecap::StatusLineRep::version() const
+{
+    return FirstLineRep::version();
+}
+
+void
+Ecap::StatusLineRep::version(const libecap::Version &aVersion)
+{
+    FirstLineRep::version(aVersion);
+}
+
+libecap::Name
+Ecap::StatusLineRep::protocol() const
+{
+    return FirstLineRep::protocol();
+}
+
+void
+Ecap::StatusLineRep::protocol(const Name &p)
+{
+    FirstLineRep::protocol(p);
+}
 
 /* BodyRep */
 
 Ecap::BodyRep::BodyRep(const BodyPipe::Pointer &aBody): theBody(aBody)
 {
 }
 
+void
+Ecap::BodyRep::tie(const BodyPipe::Pointer &aBody)
+{
+    Must(!theBody);
+    Must(aBody != NULL);
+    theBody = aBody;
+}
+
 Ecap::BodyRep::BodySize
 Ecap::BodyRep::bodySize() const
 {
-    return BodySize(theBody->bodySize());
+    return !theBody ? BodySize() : BodySize(theBody->bodySize());
 }
 
 Ecap::BodyRep::size_type
@@ -267,19 +329,6 @@ Ecap::BodyRep::productionEnded() const
     return theBody->productionEnded();
 }
    
-void
-Ecap::BodyRep::bodySize(const Ecap::BodyRep::BodySize &size)
-{
-    Must(size.known());
-    theBody->setBodySize(size.value());
-}
-
-Ecap::BodyRep::size_type
-Ecap::BodyRep::append(const Ecap::BodyRep::Area &area)
-{
-    return theBody->putMoreData(area.start, area.size);
-}
-
 Ecap::BodyRep::Area
 Ecap::BodyRep::prefix(Ecap::BodyRep::size_type size) const
 {
@@ -288,37 +337,59 @@ Ecap::BodyRep::prefix(Ecap::BodyRep::size_type size) const
     return Area::FromTempBuffer(theBody->buf().content(), size);
 }
 
-void
-Ecap::BodyRep::consume(Ecap::BodyRep::size_type size)
-{
-    theBody->consume(size);
-}
-
 
 /* MessageRep */
 
-Ecap::MessageRep::MessageRep(Adaptation::Message &aMessage,
-    Ecap::XactionRep *aXaction):
-    theMessage(aMessage), theXaction(aXaction),
+Ecap::MessageRep::MessageRep(HttpMsg *rawHeader):
+    theMessage(rawHeader), theFirstLineRep(NULL),
     theHeaderRep(NULL), theBodyRep(NULL)
 {
     Must(theMessage.header); // we do not want to represent a missing message
 
     if (HttpRequest *req = dynamic_cast<HttpRequest*>(theMessage.header))
-        theHeaderRep = new RequestHeaderRep(*req);
+        theFirstLineRep = new RequestLineRep(*req);
     else
     if (HttpReply *rep = dynamic_cast<HttpReply*>(theMessage.header))
-        theHeaderRep = new ReplyHeaderRep(*rep);
+        theFirstLineRep = new StatusLineRep(*rep);
     else
 	    Must(false); // unknown message header type
 
+    theHeaderRep = new HeaderRep(*theMessage.header);
+
     if (theMessage.body_pipe != NULL)
         theBodyRep = new BodyRep(theMessage.body_pipe);
 }
 
 Ecap::MessageRep::~MessageRep()
 {
     delete theHeaderRep;
+    delete theBodyRep;
+}
+
+libecap::shared_ptr<libecap::Message>
+Ecap::MessageRep::clone() const
+{
+    HttpMsg *hdr = theMessage.header->clone();
+    hdr->body_pipe = NULL; // if any; TODO: remove pipe cloning from ::clone?
+    libecap::shared_ptr<libecap::Message> res(new MessageRep(hdr));
+
+    // restore indication of a body if needed, but not the pipe
+    if (theMessage.header->body_pipe != NULL)
+        res->addBody();
+
+    return res;
+}
+
+libecap::FirstLine &
+Ecap::MessageRep::firstLine()
+{
+    return *theFirstLineRep;
+}
+
+const libecap::FirstLine &
+Ecap::MessageRep::firstLine() const
+{
+    return *theFirstLineRep;
 }
 
 libecap::Header &
@@ -342,11 +413,18 @@ Ecap::MessageRep::body()
 void
 Ecap::MessageRep::addBody()
 {
-    Must(theXaction);
     Must(!theBodyRep);
+    Must(!theMessage.body_pipe); // set in tieBody()
+    theBodyRep = new BodyRep(NULL);
+}
+
+void
+Ecap::MessageRep::tieBody(Ecap::XactionRep *x)
+{
+    Must(theBodyRep != NULL); // addBody must be called first
     Must(!theMessage.body_pipe);
-    theMessage.body_pipe = new BodyPipe(theXaction);
-    theBodyRep = new BodyRep(theMessage.body_pipe);
+    theMessage.body_pipe = new BodyPipe(x);
+    theBodyRep->tie(theMessage.body_pipe);
 }
 
 const libecap::Body *Ecap::MessageRep::body() const
@@ -34,76 +34,105 @@ class HeaderRep: public libecap::Header
     virtual Area image() const;
     virtual void parse(const Area &buf); // throws on failures
 
-    virtual libecap::Version version() const;
-    virtual void version(const libecap::Version &aVersion);
-    virtual Name protocol() const;
-    virtual void protocol(const Name &aProtocol);
-
 protected:
     static http_hdr_type TranslateHeaderId(const Name &name);
-    static protocol_t TranslateProtocolId(const Name &name);
 
 private:
     HttpHeader &theHeader; // the header being translated to libecap
     HttpMsg &theMessage;   // the message being translated to libecap
 };
 
 
-// Translates Squid HttpRequest into libecap::Header + libecap::RequestLine.
-class RequestHeaderRep: public HeaderRep, public libecap::RequestLine
+// Helps translate Squid HttpMsg into libecap::FirstLine (see children).
+class FirstLineRep
 {
 public:
-    RequestHeaderRep(HttpRequest &aMessage);
+    typedef libecap::Name Name;
+
+public:
+    FirstLineRep(HttpMsg &aMessage);
+
+    libecap::Version version() const;
+    void version(const libecap::Version &aVersion);
+    Name protocol() const;
+    void protocol(const Name &aProtocol);
+
+protected:
+    static protocol_t TranslateProtocolId(const Name &name);
+
+private:
+    HttpMsg &theMessage; // the message which first line is being translated
+};
+
+// Translates Squid HttpRequest into libecap::RequestLine.
+class RequestLineRep: public libecap::RequestLine, public FirstLineRep
+{
+public:
+//    typedef libecap::Name Name;
+    typedef libecap::Area Area;
+
+public:
+    RequestLineRep(HttpRequest &aMessage);
 
     virtual void uri(const Area &aUri);
     virtual Area uri() const;
 
     virtual void method(const Name &aMethod);
     virtual Name method() const;
 
+    virtual libecap::Version version() const;
+    virtual void version(const libecap::Version &aVersion);
+    virtual Name protocol() const;
+    virtual void protocol(const Name &aProtocol);
+
 private:
     HttpRequest &theMessage; // the request header being translated to libecap
 };
 
-// Translates Squid HttpReply into libecap::Header + libecap::StatusLine.
-class ReplyHeaderRep: public HeaderRep, public libecap::StatusLine
+// Translates Squid HttpReply into libecap::StatusLine.
+class StatusLineRep: public libecap::StatusLine, public FirstLineRep
 {
 public:
-    ReplyHeaderRep(HttpReply &aMessage);
+    typedef libecap::Name Name;
+    typedef libecap::Area Area;
+
+public:
+    StatusLineRep(HttpReply &aMessage);
 
     virtual void statusCode(int code);
     virtual int statusCode() const;
 
     virtual void reasonPhrase(const Area &phrase);
     virtual Area reasonPhrase() const;
 
+    virtual libecap::Version version() const;
+    virtual void version(const libecap::Version &aVersion);
+    virtual Name protocol() const;
+    virtual void protocol(const Name &aProtocol);
+
 private:
     HttpReply &theMessage; // the request header being translated to libecap
 };
 
 
-// Translates Squid HttpMsg into libecap::Body.
+// Translates Squid BodyPipe into libecap::Body.
 class BodyRep: public libecap::Body
 {
 public:
     typedef libecap::Area Area;
     typedef libecap::BodySize BodySize;
+    using libecap::Body::size_type;
 
 public:
-    BodyRep(const BodyPipe::Pointer &aBody);
+    BodyRep(const BodyPipe::Pointer &aBody); // using NULL pointer? see tie()
 
-    // stats
+    void tie(const BodyPipe::Pointer &aBody); // late binding if !theBody;
+
+    // libecap::Body API
     virtual BodySize bodySize() const;
     virtual size_type consumedSize() const;
-    virtual bool productionEnded() const; // producedSize will not grow
-   
-    // called by producers
-    virtual void bodySize(const BodySize &size); // throws if already !
-    virtual size_type append(const Area &area); // throws on overflow
-
-    // called by consumers
+    virtual bool productionEnded() const;
     virtual Area prefix(size_type size) const;
-    virtual void consume(size_type size);
 
 private:
     BodyPipe::Pointer theBody; // the body being translated to libecap
@@ -113,21 +142,30 @@ class BodyRep: public libecap::Body
 class MessageRep: public libecap::Message
 {
 public:
-    MessageRep(Adaptation::Message &aMessage, Ecap::XactionRep *aXaction);
+    explicit MessageRep(HttpMsg *rawHeader);
     virtual ~MessageRep();
 
+	virtual libecap::shared_ptr<libecap::Message> clone() const;
+
+	virtual libecap::FirstLine &firstLine();
+	virtual const libecap::FirstLine &firstLine() const;
+
     virtual libecap::Header &header();
     virtual const libecap::Header &header() const;
 
     virtual void addBody();
     virtual libecap::Body *body();
     virtual const libecap::Body *body() const;
+	void tieBody(Ecap::XactionRep *x); // to a specific transaction
+
+	Adaptation::Message &raw() { return theMessage; } // for host access
+	const Adaptation::Message &raw() const { return theMessage; } // for host
 
 private:
-    Adaptation::Message &theMessage; // the message being translated to libecap
-    Ecap::XactionRep *theXaction; // host transaction managing the translation
-    HeaderRep *theHeaderRep;
-    BodyRep *theBodyRep;
+    Adaptation::Message theMessage; // the message being translated to libecap
+    libecap::FirstLine *theFirstLineRep; // request or status line wrapper
+    HeaderRep *theHeaderRep; // header wrapper
+    BodyRep *theBodyRep; // body wrapper
 };
 
 } // namespace Ecap;
@@ -1,4 +1,6 @@
 #include "squid.h"
+#include <libecap/common/area.h>
+#include <libecap/common/delay.h>
 #include <libecap/adapter/xaction.h>
 #include "TextException.h"
 #include "assert.h"
@@ -16,19 +18,17 @@ Ecap::XactionRep::XactionRep(Adaptation::Initiator *anInitiator,
     const Adaptation::ServicePointer &aService):
     AsyncJob("Ecap::XactionRep"),
     Adaptation::Initiate("Ecap::XactionRep", anInitiator, aService),
-    theVirgin(virginHeader), theCause(virginCause),
-    theVirginRep(theVirgin, NULL), theCauseRep(NULL),
-    theAnswerRep(NULL)
+    theVirginRep(virginHeader), theCauseRep(NULL)
 {
     if (virginCause)
-        theCauseRep = new MessageRep(theCause, NULL);
+        theCauseRep = new MessageRep(virginCause);
 }
 
 Ecap::XactionRep::~XactionRep()
 {
     assert(!theMaster);
     delete theCauseRep;
-    delete theAnswerRep;
+    theAnswerRep.reset();
 }
 
 void
@@ -43,11 +43,17 @@ void
 Ecap::XactionRep::start()
 {
     Must(theMaster);
+
+    // register as a consumer if there is a body
+    // we do not actually consume unless the adapter tells us to
+    BodyPipePointer &p = theVirginRep.raw().body_pipe;
+    Must(!p || p->setConsumerIfNotLate(this));
+
     theMaster->start();
 }
 
 void
-Ecap::XactionRep::swangSong()
+Ecap::XactionRep::swanSong()
 {
     terminateMaster();
     Adaptation::Initiate::swanSong();
@@ -69,62 +75,207 @@ Ecap::XactionRep::virgin()
     return theVirginRep;
 }
 
-const libecap::Message *
+const libecap::Message &
 Ecap::XactionRep::cause()
 {
-    return theCauseRep;
+    Must(theCauseRep != NULL);
+    return *theCauseRep;
 }
 
-void 
-Ecap::XactionRep::useVirgin()
+libecap::Message &
+Ecap::XactionRep::adapted()
 {
-    theMaster.reset();
-    Adaptation::Message::ShortCircuit(theVirgin, theAnswer);
-    Must(!theVirgin.body_pipe == !theAnswer.body_pipe);
-    sendAnswer(theAnswer.header);
+    Must(theAnswerRep != NULL);
+    return *theAnswerRep;
+}
+
+Adaptation::Message &
+Ecap::XactionRep::answer()
+{
+	MessageRep *rep = dynamic_cast<MessageRep*>(theAnswerRep.get());
+	Must(rep);
+    return rep->raw();
+}
+
+bool
+Ecap::XactionRep::doneAll() const
+{
+    if (theMaster) {
+        if (!doneWithAdapted() || sendingVirgin())
+            return false;
+	}   
+
+    return Adaptation::Initiate::doneAll();
+}
+
+// are we still sending virgin body to theMaster?
+bool
+Ecap::XactionRep::doneWithAdapted() const
+{
+    if (!theAnswerRep)
+        return false;
+
+    // we are not done if we are producing
+    MessageRep *answer = dynamic_cast<MessageRep*>(theAnswerRep.get());
+	Must(answer);
+    const BodyPipePointer &ap = answer->raw().body_pipe;
+    return !ap || !ap->stillProducing(this);
+}
+
+// are we still sending virgin body to theMaster?
+bool
+Ecap::XactionRep::sendingVirgin() const
+{
+    // we are sending if we are consuming
+    const BodyPipePointer &vp = theVirginRep.raw().body_pipe;
+    return vp != NULL && vp->stillConsuming(this);
+}
+
+// stops sending virgin to theMaster and enables auto-consumption
+void
+Ecap::XactionRep::dropVirgin(const char *reason)
+{
+    debugs(93,4, HERE << "because " << reason);
+
+    BodyPipePointer &p = theVirginRep.raw().body_pipe;
+    Must(p != NULL);
+    Must(p->stillConsuming(this));
+    stopConsumingFrom(p);
+    p->enableAutoConsumption();
+    if (doneWithAdapted())
+        theMaster.reset();
 }
 
 void 
-Ecap::XactionRep::adaptVirgin()
+Ecap::XactionRep::useVirgin()
 {
+    debugs(93,3, HERE << status());
+
     // XXX: check state everywhere
     Must(!theAnswerRep);
-    Must(!theAnswer.header);
-    Must(!theAnswer.body_pipe);
-    theAnswer.set(theVirgin.header->clone());
-	theAnswerRep = new MessageRep(theAnswer, this);
-    Must(!theAnswer.body_pipe);
+    theMaster.reset();
+
+	HttpMsg *answer = theVirginRep.raw().header->clone();
+	Must(!theVirginRep.raw().body_pipe == !answer->body_pipe); // check clone()
+
+	if (answer->body_pipe != NULL) {
+        // if libecap consumed, we cannot shortcircuit
+        Must(!answer->body_pipe->consumedSize());
+        Must(answer->body_pipe->stillConsuming(this));
+		stopConsumingFrom(answer->body_pipe);
+    }
+
+	sendAnswer(answer);
+    Must(done());
 }
 
 void 
-Ecap::XactionRep::adaptNewRequest()
+Ecap::XactionRep::useAdapted(const libecap::shared_ptr<libecap::Message> &m)
 {
-    theAnswer.set(new HttpRequest);
-	theAnswerRep = new MessageRep(theAnswer, this);
+    debugs(93,3, HERE << status());
+    theAnswerRep = m;
+	MessageRep *rep = dynamic_cast<MessageRep*>(theAnswerRep.get());
+	Must(rep);
+	HttpMsg *answer = rep->raw().header;
+    if (!theAnswerRep->body()) {
+        if (!sendingVirgin())
+            theMaster.reset();
+        sendAnswer(answer);
+	} else {
+		Must(!answer->body_pipe); // only host can set body pipes
+		rep->tieBody(this);
+        debugs(93,4, HERE << "adapter will produce body" << status());
+        // libecap will produce
+        sendAnswer(answer);
+    }
 }
 
-void 
-Ecap::XactionRep::adaptNewResponse()
+// if adapter does not want to consume, we should not either
+void
+Ecap::XactionRep::adapterWontConsume()
 {
-    theAnswer.set(new HttpReply);
-	theAnswerRep = new MessageRep(theAnswer, this);
+    if (sendingVirgin())
+        dropVirgin("adapterWontConsume");
 }
 
-libecap::Message *
-Ecap::XactionRep::adapted()
+void
+Ecap::XactionRep::adapterWillConsume()
 {
-    return theAnswerRep;
+    Must(sendingVirgin());
+    theMaster->noteVirginDataAvailable(); // XXX: async
 }
 
-void 
-Ecap::XactionRep::useAdapted()
+void
+Ecap::XactionRep::adapterDoneConsuming()
 {
-    theMaster.reset();
-    sendAnswer(theAnswer.header);
+    if (sendingVirgin())
+        dropVirgin("adapterDoneConsuming");
+}
+
+void
+Ecap::XactionRep::consumeVirgin(size_type n)
+{
+    BodyPipePointer &p = theVirginRep.raw().body_pipe;
+    Must(p != NULL);
+    const size_t size = static_cast<size_t>(n); // XXX: check for overflow
+    const size_t sizeMax = static_cast<size_t>(p->buf().contentSize()); // TODO: make MemBuf use size_t?
+    p->consume(min(size, sizeMax));
+}
+
+void
+Ecap::XactionRep::pauseVirginProduction()
+{
+    // TODO: support production pauses
+}
+
+void
+Ecap::XactionRep::resumeVirginProduction()
+{
+    // TODO: support production pauses
+}
+
+void
+Ecap::XactionRep::setAdaptedBodySize(const libecap::BodySize &size)
+{
+    Must(answer().body_pipe != NULL);
+    if (size.known())
+        answer().body_pipe->setBodySize(size.value());
+    // else the piped body size is unknown by default
+}
+
+void
+Ecap::XactionRep::appendAdapted(const libecap::Area &area)
+{
+    BodyPipe *p = answer().body_pipe.getRaw();
+    Must(p);
+    Must(p->putMoreData(area.start, area.size) == area.size);
+}
+
+bool
+Ecap::XactionRep::callable() const
+{
+    return !done();
+}
+
+void
+Ecap::XactionRep::noteAdaptedBodyEnd()
+{
+    Must(answer().body_pipe != NULL);
+    answer().body_pipe->clearProducer(true);
+    if (!sendingVirgin())
+        theMaster.reset();
+}
+
+void
+Ecap::XactionRep::adaptationDelayed(const libecap::Delay &d)
+{
+    debugs(93,3, HERE << "adapter needs time: " <<
+       d.state << '/' << d.progress);
+    // XXX: set timeout?
 }
 
 void 
-Ecap::XactionRep::useNone()
+Ecap::XactionRep::adaptationAborted()
 {
     theMaster.reset();
     tellQueryAborted(true); // should eCAP support retries?
@@ -140,8 +291,7 @@ Ecap::XactionRep::noteMoreBodySpaceAvailable(RefCount<BodyPipe> bp)
 void 
 Ecap::XactionRep::noteBodyConsumerAborted(RefCount<BodyPipe> bp)
 {
-    Must(theMaster);
-    theMaster->noteAdaptedAborted();
+    terminateMaster();
 }
 
 void
@@ -161,8 +311,7 @@ Ecap::XactionRep::noteBodyProductionEnded(RefCount<BodyPipe> bp)
 void
 Ecap::XactionRep::noteBodyProducerAborted(RefCount<BodyPipe> bp)
 {
-    Must(theMaster);
-    theMaster->noteVirginAborted();
+    terminateMaster();
 }
 
 void
@@ -173,5 +322,30 @@ Ecap::XactionRep::noteInitiatorAborted()
 
 const char *Ecap::XactionRep::status() const
 {
-	return Adaptation::Initiate::status();
+    static MemBuf buf;
+    buf.reset();
+
+    buf.append(" [", 2);
+
+    if (theAnswerRep != NULL) {
+		MessageRep *answer = dynamic_cast<MessageRep*>(theAnswerRep.get());
+		Must(answer);
+		const BodyPipePointer &ap = answer->raw().body_pipe;
+		if (ap != NULL && ap->stillProducing(this))
+			buf.append("Ab ", 3);
+        else
+			buf.append("A. ", 3);
+	}
+
+    const BodyPipePointer &vp = theVirginRep.raw().body_pipe;
+    if (vp != NULL && vp->stillConsuming(this))
+		buf.append("Vb ", 3);
+    else
+		buf.append("V. ", 3);
+
+    buf.Printf(" ecapx%d]", id);
+
+    buf.terminate();
+
+    return buf.content();
 }
@@ -22,7 +22,7 @@ namespace Ecap {
    xaction that Squid communicates with. One eCAP module may register many 
    eCAP xactions. */
 class XactionRep : public Adaptation::Initiate, public libecap::host::Xaction,
-    public BodyProducer, public BodyConsumer
+    public BodyConsumer, public BodyProducer
 {
 public:
     XactionRep(Adaptation::Initiator *anInitiator, HttpMsg *virginHeader, HttpRequest *virginCause, const Adaptation::ServicePointer &service);
@@ -32,15 +32,25 @@ class XactionRep : public Adaptation::Initiate, public libecap::host::Xaction,
 	void master(const AdapterXaction &aMaster); // establish a link
 
     // libecap::host::Xaction API
-    virtual libecap::Message &virgin(); // request or response
-    virtual const libecap::Message *cause(); // request for the above response
-    virtual void useVirgin();  // final answer: no adaptation
-    virtual void adaptVirgin(); // adapted message starts as virgin
-    virtual void adaptNewRequest(); // make fresh adapted request
-    virtual void adaptNewResponse(); // make fresh adapted response
-    virtual libecap::Message *adapted(); // request or response
-    virtual void useAdapted(); // final answer: adapted msg is ready
-    virtual void useNone(); // final answer: no answer
+    virtual libecap::Message &virgin();
+    virtual const libecap::Message &cause();
+    virtual libecap::Message &adapted();
+    virtual void useVirgin();
+    virtual void useAdapted(const libecap::shared_ptr<libecap::Message> &msg);
+    virtual void adaptationDelayed(const libecap::Delay &);
+    virtual void adaptationAborted();
+    virtual void adapterWontConsume();
+    virtual void adapterWillConsume();
+    virtual void adapterDoneConsuming();
+    virtual void consumeVirgin(size_type n);
+    virtual void pauseVirginProduction();
+    virtual void resumeVirginProduction();
+    virtual void setAdaptedBodySize(const libecap::BodySize &size);
+    virtual void appendAdapted(const libecap::Area &area);
+    virtual void noteAdaptedBodyEnd();
+
+	// libecap::Callable API, via libecap::host::Xaction
+	virtual bool callable() const;
 
     // BodyProducer API
     virtual void noteMoreBodySpaceAvailable(RefCount<BodyPipe> bp);
@@ -56,21 +66,28 @@ class XactionRep : public Adaptation::Initiate, public libecap::host::Xaction,
 
     // AsyncJob API (via Initiate)
     virtual void start();
-    virtual void swangSong();
+    virtual bool doneAll() const;
+    virtual void swanSong();
     virtual const char *status() const;
 
 protected:
+    Adaptation::Message &answer();
+
+    bool sendingVirgin() const;
+    void dropVirgin(const char *reason);
+    bool doneWithAdapted() const;
+
     void terminateMaster();
+    void scheduleStop(const char *reason);
 
 private:
 	AdapterXaction theMaster; // the actual adaptation xaction we represent
 
-	Adaptation::Message theVirgin;
-	Adaptation::Message theCause;
-	Adaptation::Message theAnswer;
 	MessageRep theVirginRep;
 	MessageRep *theCauseRep;
-	MessageRep *theAnswerRep;
+
+	typedef libecap::shared_ptr<libecap::Message> MessagePtr;
+	MessagePtr theAnswerRep;
 
 	CBDATA_CLASS2(XactionRep);
 };