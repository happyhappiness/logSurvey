@@ -49,108 +49,115 @@
 # include <netinet/in.h>
 #endif
 
-#ifndef APCMAIN
-# define APCMAIN 0
-#endif
-
 #define NISPORT 3551
 #define MAXSTRING               256
 #define MODULE_NAME "apcups"
 
 #define APCUPS_DEFAULT_HOST "localhost"
 
+/*
+ * Private data types
+ */
+struct apc_detail_s
+{
+	double linev;
+	double loadpct;
+	double bcharge;
+	double timeleft;
+	double outputv;
+	double itemp;
+	double battv;
+	double linefreq;
+};
+
+/*
+ * Private variables
+ */
 /* Default values for contacting daemon */
-static char *global_host = NULL;
-static int   global_port = NISPORT;
+static char *conf_host = NULL;
+static int   conf_port = NISPORT;
+
+static int global_sockfd = -1;
 
 /* 
  * The following are only if not compiled to test the module with its own main.
 */
-#if !APCMAIN
-static char *bvolt_file_template = "apcups/voltage-%s.rrd";
-static char *bvolt_ds_def[] = 
+static data_source_t data_source_voltage[1] =
 {
-	"DS:voltage:GAUGE:"COLLECTD_HEARTBEAT":0:U",
+	{"voltage", DS_TYPE_GAUGE, NAN, NAN}
 };
-static int bvolt_ds_num = 1;
 
-static char *load_file_template = "apcups/load_percent.rrd";
-static char *load_ds_def[] = 
+static data_set_t ds_voltage =
 {
-	"DS:percent:GAUGE:"COLLECTD_HEARTBEAT":0:110",
+	"voltage", 1, data_source_voltage
 };
-static int load_ds_num = 1;
 
-static char *charge_file_template = "apcups/charge_percent.rrd";
-static char *charge_ds_def[] = 
+static data_source_t data_source_percent[1] =
 {
-	"DS:percent:GAUGE:"COLLECTD_HEARTBEAT":0:110",
+	{"percent", DS_TYPE_GAUGE, 0, 100.1}
 };
-static int charge_ds_num = 1;
 
-static char *time_file_template = "apcups/timeleft.rrd";
-static char *time_ds_def[] = 
+static data_set_t ds_percent =
 {
-	"DS:timeleft:GAUGE:"COLLECTD_HEARTBEAT":0:100",
+	"percent", 1, data_source_percent
 };
-static int time_ds_num = 1;
 
-static char *temp_file_template = "apcups/temperature.rrd";
-static char *temp_ds_def[] = 
+static data_source_t data_source_timeleft[1] =
 {
-	/* -273.15 is absolute zero */
-	"DS:value:GAUGE:"COLLECTD_HEARTBEAT":-274:U",
+	{"timeleft", DS_TYPE_GAUGE, 0, 100.0}
 };
-static int temp_ds_num = 1;
 
-static char *freq_file_template = "apcups/frequency-%s.rrd";
-static char *freq_ds_def[] = 
+static data_set_t ds_timeleft =
 {
-	"DS:frequency:GAUGE:"COLLECTD_HEARTBEAT":0:U",
+	"timeleft", 1, data_source_timeleft
 };
-static int freq_ds_num = 1;
 
-static char *config_keys[] =
+static data_source_t data_source_temperature[1] =
 {
-	"Host",
-	"Port",
-	NULL
+	{"value", DS_TYPE_GAUGE, -273.15, NAN}
 };
-static int config_keys_num = 2;
 
-#endif /* if APCMAIN */
+static data_set_t ds_temperature =
+{
+	"temperature", 1, data_source_temperature
+};
 
-struct apc_detail_s
+static data_source_t data_source_frequency[1] =
 {
-	double linev;
-	double loadpct;
-	double bcharge;
-	double timeleft;
-	double outputv;
-	double itemp;
-	double battv;
-	double linefreq;
+	{"frequency", DS_TYPE_GAUGE, 0, NAN}
+};
+
+static data_set_t ds_frequency =
+{
+	"frequency", 1, data_source_frequency
 };
 
-#define BIG_BUF 4096
+static const char *config_keys[] =
+{
+	"Host",
+	"Port",
+	NULL
+};
+static int config_keys_num = 2;
 
-#if APCMAIN
 /* Close the network connection */
-static void net_close (int *fd)
+static int apcups_shutdown (void)
 {
 	uint16_t packet_size = 0;
 
-	assert (*fd >= 0);
+	if (global_sockfd < 0)
+		return (0);
 
-	DBG ("Gracefully shutting down socket %i.", *fd);
+	DBG ("Gracefully shutting down socket %i.", global_sockfd);
 
 	/* send EOF sentinel */
-	swrite (*fd, (void *) &packet_size, sizeof (packet_size));
+	swrite (global_sockfd, (void *) &packet_size, sizeof (packet_size));
 
-	close (*fd);
-	*fd = -1;
-}
-#endif /* APCMAIN */
+	close (global_sockfd);
+	global_sockfd = -1;
+
+	return (0);
+} /* int apcups_shutdown */
 
 /*     
  * Open a TCP connection to the UPS network server
@@ -300,7 +307,6 @@ static int apc_query_server (char *host, int port,
 	char   *key;
 	double  value;
 
-	static int sockfd   = -1;
 	static complain_t compl;
 
 #if APCMAIN
@@ -309,9 +315,9 @@ static int apc_query_server (char *host, int port,
 # define PRINT_VALUE(name, val) /**/
 #endif
 
-	if (sockfd < 0)
+	if (global_sockfd < 0)
 	{
-		if ((sockfd = net_open (host, NULL, port)) < 0)
+		if ((global_sockfd = net_open (host, NULL, port)) < 0)
 		{
 			plugin_complain (LOG_ERR, &compl, "apcups plugin: "
 					"Connecting to the apcupsd failed.");
@@ -324,13 +330,13 @@ static int apc_query_server (char *host, int port,
 		}
 	}
 
-	if (net_send (&sockfd, "status", 6) < 0)
+	if (net_send (&global_sockfd, "status", 6) < 0)
 	{
 		syslog (LOG_ERR, "apcups plugin: Writing to the socket failed.");
 		return (-1);
 	}
 
-	while ((n = net_recv (&sockfd, recvline, sizeof (recvline) - 1)) > 0)
+	while ((n = net_recv (&global_sockfd, recvline, sizeof (recvline) - 1)) > 0)
 	{
 		assert (n < sizeof (recvline));
 		recvline[n] = '\0';
@@ -374,51 +380,20 @@ static int apc_query_server (char *host, int port,
 		syslog (LOG_WARNING, "apcups plugin: Error reading from socket");
 		return (-1);
 	}
-#if APCMAIN
-	else
-	{
-		/* close the opened socket */
-		net_close (&sockfd);
-	}
-#endif /* APCMAIN */
 
 	return (0);
 }
 
-#if APCMAIN
-/*
- * This is used for testing apcups in a standalone mode.
- * Usefull for debugging.
- */
-int main (int argc, char **argv)
-{
-	/* we are not really going to use this */
-	struct apc_detail_s apcups_detail;
-
-	openlog ("apcups", LOG_PID | LOG_NDELAY | LOG_LOCAL1, LOG_USER);
-
-	if (global_host == NULL || strcmp (global_host, "0.0.0.0") == 0)
-		global_host = "localhost";
-
-	if(apc_query_server (global_host, global_port, &apcups_detail) < 0)
-	{
-		printf("apcups: Failed...\n");
-		return(-1);
-	}
-
-	return 0;
-}
-#else
-static int apcups_config (char *key, char *value)
+static int apcups_config (const char *key, const char *value)
 {
 	if (strcasecmp (key, "host") == 0)
 	{
-		if (global_host != NULL)
+		if (conf_host != NULL)
 		{
-			free (global_host);
-			global_host = NULL;
+			free (conf_host);
+			conf_host = NULL;
 		}
-		if ((global_host = strdup (value)) == NULL)
+		if ((conf_host = strdup (value)) == NULL)
 			return (1);
 	}
 	else if (strcasecmp (key, "Port") == 0)
@@ -429,7 +404,7 @@ static int apcups_config (char *key, char *value)
 			syslog (LOG_WARNING, "apcups plugin: Invalid port: %i", port_tmp);
 			return (1);
 		}
-		global_port = port_tmp;
+		conf_port = port_tmp;
 	}
 	else
 	{
@@ -438,83 +413,37 @@ static int apcups_config (char *key, char *value)
 	return (0);
 }
 
-static void apcups_init (void)
-{
-	return;
-}
-
-static void apc_write_voltage (char *host, char *inst, char *val)
-{
-	char file[512];
-	int  status;
-
-	status = snprintf (file, 512, bvolt_file_template, inst);
-	if ((status < 1) || (status >= 512))
-		return;
-
-	rrd_update_file (host, file, val, bvolt_ds_def, bvolt_ds_num);
-}
-
-static void apc_write_charge (char *host, char *inst, char *val)
-{
-	rrd_update_file (host, charge_file_template, val, charge_ds_def, charge_ds_num);
-}
-
-static void apc_write_percent (char *host, char *inst, char *val)
-{
-	rrd_update_file (host, load_file_template, val, load_ds_def, load_ds_num);
-}
-
-static void apc_write_timeleft (char *host, char *inst, char *val)
-{
-	rrd_update_file (host, time_file_template, val, time_ds_def, time_ds_num);
-}
-
-static void apc_write_temperature (char *host, char *inst, char *val)
-{
-	rrd_update_file (host, temp_file_template, val, temp_ds_def, temp_ds_num);
-}
-
-static void apc_write_frequency (char *host, char *inst, char *val)
+static void apc_submit_generic (char *type, char *type_inst, double value)
 {
-	char file[512];
-	int  status;
-
-	status = snprintf (file, 512, freq_file_template, inst);
-	if ((status < 1) || (status >= 512))
-		return;
-
-	rrd_update_file (host, file, val, freq_ds_def, freq_ds_num);
-}
+	value_t values[1];
+	value_list_t vl = VALUE_LIST_INIT;
 
-static void apc_submit_generic (char *type, char *inst,
-		double value)
-{
-	char buf[512];
-	int  status;
+	values[0].gauge = value;
 
-	status = snprintf (buf, 512, "%u:%f",
-			(unsigned int) curtime, value);
-	if ((status < 1) || (status >= 512))
-		return;
+	vl.values = values;
+	vl.values_len = 1;
+	vl.time = time (NULL);
+	strcpy (vl.host, hostname);
+	strcpy (vl.plugin, "apcups");
+	strcpy (vl.plugin_instance, "");
+	strncpy (vl.type_instance, type_inst, sizeof (vl.type_instance));
 
-	DBG ("plugin_submit (%s, %s, %s);", type, inst, buf);
-	plugin_submit (type, inst, buf);
+	plugin_dispatch_values (type, &vl);
 }
 
 static void apc_submit (struct apc_detail_s *apcups_detail)
 {
 	apc_submit_generic ("apcups_voltage",    "input",   apcups_detail->linev);
 	apc_submit_generic ("apcups_voltage",    "output",  apcups_detail->outputv);
 	apc_submit_generic ("apcups_voltage",    "battery", apcups_detail->battv);
-	apc_submit_generic ("apcups_charge",     "-",       apcups_detail->bcharge);
-	apc_submit_generic ("apcups_charge_pct", "-",       apcups_detail->loadpct);
-	apc_submit_generic ("apcups_timeleft",   "-",       apcups_detail->timeleft);
-	apc_submit_generic ("apcups_temp",       "-",       apcups_detail->itemp);
+	apc_submit_generic ("apcups_charge",     "",        apcups_detail->bcharge);
+	apc_submit_generic ("apcups_charge_pct", "",        apcups_detail->loadpct);
+	apc_submit_generic ("apcups_timeleft",   "",        apcups_detail->timeleft);
+	apc_submit_generic ("apcups_temp",       "",        apcups_detail->itemp);
 	apc_submit_generic ("apcups_frequency",  "input",   apcups_detail->linefreq);
 }
 
-static void apcups_read (void)
+static int apcups_read (void)
 {
 	struct apc_detail_s apcups_detail;
 	int status;
@@ -528,10 +457,10 @@ static void apcups_read (void)
 	apcups_detail.itemp    = -300.0;
 	apcups_detail.linefreq =   -1.0;
   
-	status = apc_query_server (global_host == NULL
+	status = apc_query_server (conf_host == NULL
 			? APCUPS_DEFAULT_HOST
-			: global_host,
-			global_port, &apcups_detail);
+			: conf_host,
+			conf_port, &apcups_detail);
  
 	/*
 	 * if we did not connect then do not bother submitting
@@ -540,27 +469,28 @@ static void apcups_read (void)
 	if (status != 0)
 	{
 		DBG ("apc_query_server (%s, %i) = %i",
-				global_host == NULL
+				conf_host == NULL
 				? APCUPS_DEFAULT_HOST
-				: global_host,
-				global_port, status);
-		return;
+				: conf_host,
+				conf_port, status);
+		return (-1);
 	}
 
 	apc_submit (&apcups_detail);
+
+	return (0);
 } /* apcups_read */
 
 void module_register (void)
 {
-	plugin_register (MODULE_NAME, apcups_init, apcups_read, NULL);
-	plugin_register ("apcups_voltage",    NULL, NULL, apc_write_voltage);
-	plugin_register ("apcups_charge",     NULL, NULL, apc_write_charge);
-	plugin_register ("apcups_charge_pct", NULL, NULL, apc_write_percent);
-	plugin_register ("apcups_timeleft",   NULL, NULL, apc_write_timeleft);
-	plugin_register ("apcups_temp",       NULL, NULL, apc_write_temperature);
-	plugin_register ("apcups_frequency",  NULL, NULL, apc_write_frequency);
-	cf_register (MODULE_NAME, apcups_config, config_keys, config_keys_num);
-}
+	plugin_register_data_set (&ds_voltage);
+	plugin_register_data_set (&ds_percent);
+	plugin_register_data_set (&ds_timeleft);
+	plugin_register_data_set (&ds_temperature);
+	plugin_register_data_set (&ds_frequency);
 
-#endif /* if APCMAIN */
-#undef MODULE_NAME
+	plugin_register_config ("apcups", apcups_config, config_keys, config_keys_num);
+
+	plugin_register_read ("apcups", apcups_read);
+	plugin_register_shutdown ("apcups", apcups_shutdown);
+}