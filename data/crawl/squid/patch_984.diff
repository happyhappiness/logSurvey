@@ -121,7 +121,7 @@ snmp_build(session, pdu, packet, out_length)
 }
 
 /*
- * Parses the packet recieved on the input session, and places the data into
+ * Parses the packet received on the input session, and places the data into
  * the input pdu.  length is the length of the input packet.  If any errors
  * are encountered, NULL is returned.  If not, the community is.
  */
@@ -1,6 +1,6 @@
 
 /*
- * $Id: DelayId.cc,v 1.21 2007/04/28 22:26:37 hno Exp $
+ * $Id: DelayId.cc,v 1.22 2007/08/27 12:50:42 hno Exp $
  *
  * DEBUG: section 77    Delay Pools
  * AUTHOR: Robert Collins <robertc@squid-cache.org>
@@ -162,7 +162,7 @@ DelayId::bytesWanted(int minimum, int maximum) const
 }
 
 /*
- * this records actual bytes recieved.  always recorded, even if the
+ * this records actual bytes received.  always recorded, even if the
  * class is disabled - it's more efficient to just do it than to do all
  * the checks.
  */
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ESI.cc,v 1.25 2007/05/29 13:31:36 amosjeffries Exp $
+ * $Id: ESI.cc,v 1.26 2007/08/27 12:50:42 hno Exp $
  *
  * DEBUG: section 86    ESI processing
  * AUTHOR: Robert Collins
@@ -743,7 +743,7 @@ esiStreamDetach (clientStreamNode *thisNode, ClientHttpRequest *http)
  *   There is context data or a reply structure
  */
 void
-esiProcessStream (clientStreamNode *thisNode, ClientHttpRequest *http, HttpReply *rep, StoreIOBuffer recievedData)
+esiProcessStream (clientStreamNode *thisNode, ClientHttpRequest *http, HttpReply *rep, StoreIOBuffer receivedData)
 {
     /* test preconditions */
     assert (thisNode != NULL);
@@ -774,26 +774,26 @@ esiProcessStream (clientStreamNode *thisNode, ClientHttpRequest *http, HttpReply
      * has been detected to prevent ESI processing the error body
      */
     if (context->flags.passthrough) {
-        clientStreamCallback (thisNode, http, rep, recievedData);
+        clientStreamCallback (thisNode, http, rep, receivedData);
         return;
     }
 
     debugs(86, 3, "esiProcessStream: Processing thisNode " << thisNode <<
            " context " << context.getRaw() << " offset " <<
-           (int) recievedData.offset << " length " <<
-           (unsigned int)recievedData.length);
+           (int) receivedData.offset << " length " <<
+           (unsigned int)receivedData.length);
 
     /* once we finish the template, we *cannot* return here */
     assert (!context->flags.finishedtemplate);
     assert (!context->cachedASTInUse);
 
     /* Can we generate any data ?*/
 
-    if (recievedData.data) {
+    if (receivedData.data) {
         /* Increase our buffer area with incoming data */
-        assert (recievedData.length <= HTTP_REQBUF_SZ);
-        assert (thisNode->readBuffer.offset == recievedData.offset);
-        debugs (86,5, "esiProcessStream found " << recievedData.length << " bytes of body data at offset " << recievedData.offset);
+        assert (receivedData.length <= HTTP_REQBUF_SZ);
+        assert (thisNode->readBuffer.offset == receivedData.offset);
+        debugs (86,5, "esiProcessStream found " << receivedData.length << " bytes of body data at offset " << receivedData.offset);
         /* secure the data for later use */
 
         if (!context->incoming.getRaw()) {
@@ -803,15 +803,15 @@ esiProcessStream (clientStreamNode *thisNode, ClientHttpRequest *http, HttpReply
             context->incoming = context->buffered;
         }
 
-        if (recievedData.data != &context->incoming->buf[context->incoming->len]) {
+        if (receivedData.data != &context->incoming->buf[context->incoming->len]) {
             /* We have to copy the data out because we didn't supply thisNode buffer */
             size_t space = HTTP_REQBUF_SZ - context->incoming->len;
-            size_t len = min (space, recievedData.length);
-            debugs(86, 5, "Copying data from " << recievedData.data << " to " <<
+            size_t len = min (space, receivedData.length);
+            debugs(86, 5, "Copying data from " << receivedData.data << " to " <<
                    &context->incoming->buf[context->incoming->len] <<
                    " because our buffer was not used");
 
-            xmemcpy (&context->incoming->buf[context->incoming->len], recievedData.data, len);
+            xmemcpy (&context->incoming->buf[context->incoming->len], receivedData.data, len);
             context->incoming->len += len;
 
             if (context->incoming->len == HTTP_REQBUF_SZ) {
@@ -820,17 +820,17 @@ esiProcessStream (clientStreamNode *thisNode, ClientHttpRequest *http, HttpReply
                 context->incoming = context->incoming->next;
             }
 
-            if (len != recievedData.length) {
+            if (len != receivedData.length) {
                 /* capture the remnants */
-                xmemcpy (context->incoming->buf, &recievedData.data[len], recievedData.length - len);
-                context->incoming->len = recievedData.length - len;
+                xmemcpy (context->incoming->buf, &receivedData.data[len], receivedData.length - len);
+                context->incoming->len = receivedData.length - len;
             }
 
             /* and note where we are up to */
-            context->readpos += recievedData.length;
+            context->readpos += receivedData.length;
         } else {
             /* update our position counters, and if needed assign a new buffer */
-            context->incoming->len += recievedData.length;
+            context->incoming->len += receivedData.length;
             assert (context->incoming->len <= HTTP_REQBUF_SZ);
 
             if (context->incoming->len > HTTP_REQBUF_SZ * 3 / 4) {
@@ -839,12 +839,12 @@ esiProcessStream (clientStreamNode *thisNode, ClientHttpRequest *http, HttpReply
                 context->incoming = context->incoming->next;
             }
 
-            context->readpos += recievedData.length;
+            context->readpos += receivedData.length;
         }
     }
 
     /* EOF / Read error /  aborted entry */
-    if (rep == NULL && recievedData.data == NULL && recievedData.length == 0 && !context->flags.finishedtemplate) {
+    if (rep == NULL && receivedData.data == NULL && receivedData.length == 0 && !context->flags.finishedtemplate) {
         /* TODO: get stream status to test the entry for aborts */
         /* else flush the esi processor */
         debugs(86, 5, "esiProcess: " << context.getRaw() << " Finished reading upstream data");
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ESIInclude.cc,v 1.13 2007/06/25 11:45:20 hno Exp $
+ * $Id: ESIInclude.cc,v 1.14 2007/08/27 12:50:42 hno Exp $
  *
  * DEBUG: section 86    ESI processing
  * AUTHOR: Robert Collins
@@ -71,7 +71,7 @@ esiBufferDetach (clientStreamNode *node, ClientHttpRequest *http)
  *   There are no more entries in the stream chain.
  */
 void
-esiBufferRecipient (clientStreamNode *node, ClientHttpRequest *http, HttpReply *rep, StoreIOBuffer recievedData)
+esiBufferRecipient (clientStreamNode *node, ClientHttpRequest *http, HttpReply *rep, StoreIOBuffer receivedData)
 {
     /* Test preconditions */
     assert (node != NULL);
@@ -88,11 +88,11 @@ esiBufferRecipient (clientStreamNode *node, ClientHttpRequest *http, HttpReply *
     ESIStreamContext::Pointer esiStream = dynamic_cast<ESIStreamContext *>(node->data.getRaw());
     assert (esiStream.getRaw() != NULL);
     /* If segments become more flexible, ignore thisNode */
-    assert (recievedData.length <= sizeof(esiStream->localbuffer->buf));
+    assert (receivedData.length <= sizeof(esiStream->localbuffer->buf));
     assert (!esiStream->finished);
 
-    debugs (86,5, "esiBufferRecipient rep " << rep << " body " << recievedData.data << " len " << recievedData.length);
-    assert (node->readBuffer.offset == recievedData.offset || recievedData.length == 0);
+    debugs (86,5, "esiBufferRecipient rep " << rep << " body " << receivedData.data << " len " << receivedData.length);
+    assert (node->readBuffer.offset == receivedData.offset || receivedData.length == 0);
 
     /* trivial case */
 
@@ -126,27 +126,27 @@ esiBufferRecipient (clientStreamNode *node, ClientHttpRequest *http, HttpReply *
         }
     }
 
-    if (recievedData.data && recievedData.length) {
-        http->out.offset += recievedData.length;
+    if (receivedData.data && receivedData.length) {
+        http->out.offset += receivedData.length;
 
-        if (recievedData.data >= esiStream->localbuffer->buf &&
-                recievedData.data < &esiStream->localbuffer->buf[sizeof(esiStream->localbuffer->buf)]) {
+        if (receivedData.data >= esiStream->localbuffer->buf &&
+                receivedData.data < &esiStream->localbuffer->buf[sizeof(esiStream->localbuffer->buf)]) {
             /* original static buffer */
 
-            if (recievedData.data != esiStream->localbuffer->buf) {
+            if (receivedData.data != esiStream->localbuffer->buf) {
                 /* But not the start of it */
-                xmemmove (esiStream->localbuffer->buf, recievedData.data, recievedData.length);
+                xmemmove (esiStream->localbuffer->buf, receivedData.data, receivedData.length);
             }
 
-            esiStream->localbuffer->len = recievedData.length;
+            esiStream->localbuffer->len = receivedData.length;
         } else {
             assert (esiStream->buffer.getRaw() != NULL);
-            esiStream->buffer->len = recievedData.length;
+            esiStream->buffer->len = receivedData.length;
         }
     }
 
     /* EOF / Read error /  aborted entry */
-    if (rep == NULL && recievedData.data == NULL && recievedData.length == 0) {
+    if (rep == NULL && receivedData.data == NULL && receivedData.length == 0) {
         /* TODO: get stream status to test the entry for aborts */
         debugs(86, 5, "Finished reading upstream data in subrequest");
         esiStream->include->subRequestDone (esiStream, true);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: asn.cc,v 1.113 2007/08/01 22:36:02 amosjeffries Exp $
+ * $Id: asn.cc,v 1.114 2007/08/27 12:50:42 hno Exp $
  *
  * DEBUG: section 53    AS Number handling
  * AUTHOR: Duane Wessels, Kostas Anagnostakis
@@ -364,7 +364,7 @@ asHandleReply(void *data, StoreIOBuffer result)
                         asState);
     } else {
         StoreIOBuffer tempBuffer;
-        debugs(53, 3, "asHandleReply: store complete, but data recieved " << e->url()  );
+        debugs(53, 3, "asHandleReply: store complete, but data received " << e->url()  );
         tempBuffer.offset = asState->offset;
         tempBuffer.length = AS_REQBUF_SZ - asState->reqofs;
         tempBuffer.data = asState->reqbuf + asState->reqofs;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: auth_digest.cc,v 1.58 2007/08/03 02:16:59 amosjeffries Exp $
+ * $Id: auth_digest.cc,v 1.59 2007/08/27 12:50:45 hno Exp $
  *
  * DEBUG: section 29    Authenticator
  * AUTHOR: Robert Collins
@@ -1236,7 +1236,7 @@ AuthDigestConfig::decode(char const *proxy_auth)
 
     if (!nonce) {
         /* we couldn't find a matching nonce! */
-        debugs(29, 4, "authenticateDigestDecode: Unexpected or invalid nonce recieved");
+        debugs(29, 4, "authenticateDigestDecode: Unexpected or invalid nonce received");
         delete digest_request;
         return authDigestLogUsername(username);
     }
@@ -1248,8 +1248,8 @@ AuthDigestConfig::decode(char const *proxy_auth)
      * RFC 2069 we should support a missing qop. Tough. */
 
     if (!digest_request->qop || strcmp(digest_request->qop, QOP_AUTH)) {
-        /* we recieved a qop option we didn't send */
-        debugs(29, 4, "authenticateDigestDecode: Invalid qop option recieved");
+        /* we received a qop option we didn't send */
+        debugs(29, 4, "authenticateDigestDecode: Invalid qop option received");
         delete digest_request;
         return authDigestLogUsername(username);
     }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: auth_negotiate.cc,v 1.24 2007/08/04 03:12:11 amosjeffries Exp $
+ * $Id: auth_negotiate.cc,v 1.25 2007/08/27 12:50:46 hno Exp $
  *
  * DEBUG: section 29    Negotiate Authenticator
  * AUTHOR: Robert Collins, Henrik Nordstrom, Francesco Chemolli
@@ -717,7 +717,7 @@ AuthNegotiateUserRequest::authenticate(HttpRequest * request, ConnStateData::Poi
     switch (auth_state) {
 
     case AUTHENTICATE_STATE_NONE:
-        /* we've recieved a negotiate request. pass to a helper */
+        /* we've received a negotiate request. pass to a helper */
         debugs(29, 9, "AuthNegotiateUserRequest::authenticate: auth state negotiate none. Received blob: '" << proxy_auth << "'");
         auth_state = AUTHENTICATE_STATE_INITIAL;
         safe_free(client_blob);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: auth_ntlm.cc,v 1.74 2007/08/04 03:08:36 amosjeffries Exp $
+ * $Id: auth_ntlm.cc,v 1.75 2007/08/27 12:50:47 hno Exp $
  *
  * DEBUG: section 29    NTLM Authenticator
  * AUTHOR: Robert Collins, Henrik Nordstrom, Francesco Chemolli
@@ -647,7 +647,7 @@ AuthNTLMUserRequest::authenticate(HttpRequest * request, ConnStateData::Pointer
     switch (auth_state) {
 
     case AUTHENTICATE_STATE_NONE:
-        /* we've recieved a ntlm request. pass to a helper */
+        /* we've received a ntlm request. pass to a helper */
         debugs(29, 9, "AuthNTLMUserRequest::authenticate: auth state ntlm none. Received blob: '" << proxy_auth << "'");
         auth_state = AUTHENTICATE_STATE_INITIAL;
         safe_free(client_blob);
@@ -1,6 +1,6 @@
 
 #
-# $Id: cf.data.pre,v 1.459 2007/08/26 02:45:46 amosjeffries Exp $
+# $Id: cf.data.pre,v 1.460 2007/08/27 12:50:42 hno Exp $
 #
 # SQUID Web Proxy Cache		http://www.squid-cache.org/
 # ----------------------------------------------------------
@@ -4525,7 +4525,7 @@ DOC_START
 	FreeBSD and requires support in the kernel.
 
 	The 'httpready' filter delays delivering new connections
-	to Squid until a full HTTP request has been recieved.
+	to Squid until a full HTTP request has been received.
 	See the accf_http(9) man page.
 
 EXAMPLE:
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.760 2007/08/17 20:28:49 rousskov Exp $
+ * $Id: client_side.cc,v 1.761 2007/08/27 12:50:42 hno Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -150,7 +150,7 @@ static void clientPrepareLogWithRequestDetails(HttpRequest *, AccessLogEntry *);
 #ifndef PURIFY
 static int connIsUsable(ConnStateData::Pointer conn);
 #endif
-static int responseFinishedOrFailed(HttpReply * rep, StoreIOBuffer const &recievedData);
+static int responseFinishedOrFailed(HttpReply * rep, StoreIOBuffer const &receivedData);
 static void ClientSocketContextPushDeferredIfNeeded(ClientSocketContext::Pointer deferredRequest, ConnStateData::Pointer & conn);
 static void clientUpdateSocketStats(log_type logType, size_t size);
 
@@ -721,21 +721,21 @@ ConnStateData::getCurrentContext() const
 }
 
 void
-ClientSocketContext::deferRecipientForLater(clientStreamNode * node, HttpReply * rep, StoreIOBuffer recievedData)
+ClientSocketContext::deferRecipientForLater(clientStreamNode * node, HttpReply * rep, StoreIOBuffer receivedData)
 {
     debugs(33, 2, "clientSocketRecipient: Deferring request " << http->uri);
     assert(flags.deferred == 0);
     flags.deferred = 1;
     deferredparams.node = node;
     deferredparams.rep = rep;
-    deferredparams.queuedBuffer = recievedData;
+    deferredparams.queuedBuffer = receivedData;
     return;
 }
 
 int
-responseFinishedOrFailed(HttpReply * rep, StoreIOBuffer const & recievedData)
+responseFinishedOrFailed(HttpReply * rep, StoreIOBuffer const & receivedData)
 {
-    if (rep == NULL && recievedData.data == NULL && recievedData.length == 0)
+    if (rep == NULL && receivedData.data == NULL && receivedData.length == 0)
         return 1;
 
     return 0;
@@ -1225,7 +1225,7 @@ ClientSocketContext::sendStartOfMessage(HttpReply * rep, StoreIOBuffer bodyData)
  */
 static void
 clientSocketRecipient(clientStreamNode * node, ClientHttpRequest * http,
-                      HttpReply * rep, StoreIOBuffer recievedData)
+                      HttpReply * rep, StoreIOBuffer receivedData)
 {
     int fd;
     /* Test preconditions */
@@ -1245,23 +1245,23 @@ clientSocketRecipient(clientStreamNode * node, ClientHttpRequest * http,
     /* TODO: check offset is what we asked for */
 
     if (context != http->getConn()->getCurrentContext()) {
-        context->deferRecipientForLater(node, rep, recievedData);
+        context->deferRecipientForLater(node, rep, receivedData);
         PROF_stop(clientSocketRecipient);
         return;
     }
 
-    if (responseFinishedOrFailed(rep, recievedData)) {
+    if (responseFinishedOrFailed(rep, receivedData)) {
         context->writeComplete(fd, NULL, 0, COMM_OK);
         PROF_stop(clientSocketRecipient);
         return;
     }
 
     if (!context->startOfOutput())
-        context->sendBody(rep, recievedData);
+        context->sendBody(rep, receivedData);
     else {
         assert(rep);
         http->al.reply = HTTPMSGLOCK(rep);
-        context->sendStartOfMessage(rep, recievedData);
+        context->sendStartOfMessage(rep, receivedData);
     }
 
     PROF_stop(clientSocketRecipient);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.h,v 1.23 2007/08/13 17:20:51 hno Exp $
+ * $Id: client_side.h,v 1.24 2007/08/27 12:50:42 hno Exp $
  *
  *
  * SQUID Web Proxy Cache          http://www.squid-cache.org/
@@ -111,7 +111,7 @@ unsigned parsed_ok: 1; /* Was this parsed correctly? */
     clientStreamNode * getClientReplyContext() const;
     void connIsFinished();
     void removeFromConnectionList(RefCount<ConnStateData> conn);
-    void deferRecipientForLater(clientStreamNode * node, HttpReply * rep, StoreIOBuffer recievedData);
+    void deferRecipientForLater(clientStreamNode * node, HttpReply * rep, StoreIOBuffer receivedData);
     bool multipartRangeRequest() const;
     void registerWithConn();
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side_reply.cc,v 1.134 2007/08/17 03:45:56 hno Exp $
+ * $Id: client_side_reply.cc,v 1.135 2007/08/27 12:50:43 hno Exp $
  *
  * DEBUG: section 88    Client-side Reply Routines
  * AUTHOR: Robert Collins (Originally Duane Wessels in client_side.c)
@@ -287,7 +287,7 @@ clientReplyContext::sendClientUpstreamResponse()
 {
     StoreIOBuffer tempresult;
     removeStoreReference(&old_sc, &old_entry);
-    /* here the data to send is the data we just recieved */
+    /* here the data to send is the data we just received */
     tempBuffer.offset = 0;
     old_reqsize = 0;
     /* sendMoreData tracks the offset as well.
@@ -1853,7 +1853,7 @@ clientReplyContext::processReplyAccessResult(bool accessAllowed)
 
     if (next()->readBuffer.offset != 0) {
         if (next()->readBuffer.offset > body_size) {
-            /* Can't use any of the body we recieved. send nothing */
+            /* Can't use any of the body we received. send nothing */
             tempBuffer.length = 0;
             tempBuffer.data = NULL;
         } else {
@@ -22,7 +22,7 @@ typedef enum {
     COMM_ERR_DNS = -9,
     COMM_ERR_CLOSING = -10,
 } comm_err_t;
-typedef void IOFCB(int fd, StoreIOBuffer recievedData, comm_err_t flag, int xerrno, void *data);
+typedef void IOFCB(int fd, StoreIOBuffer receivedData, comm_err_t flag, int xerrno, void *data);
 typedef void IOWCB(int fd, char *buffer, size_t len, comm_err_t flag, int xerrno, void *data);
 
 typedef void CWCB(int fd, char *, size_t size, comm_err_t flag, void *data);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: helper.cc,v 1.87 2007/08/04 03:19:12 amosjeffries Exp $
+ * $Id: helper.cc,v 1.88 2007/08/27 12:50:43 hno Exp $
  *
  * DEBUG: section 84    Helper process maintenance
  * AUTHOR: Harvest Derived?
@@ -1132,7 +1132,7 @@ helperStatefulHandleRead(int fd, char *buf, size_t len, comm_err_t flag, int xer
             switch ((r->callback(r->data, srv, srv->rbuf))) {	/*if non-zero reserve helper */
 
             case S_HELPER_UNKNOWN:
-                    fatal("helperStatefulHandleRead: either a non-state aware callback was give to the stateful helper routines, or an uninitialised callback response was recieved.\n");
+                    fatal("helperStatefulHandleRead: either a non-state aware callback was give to the stateful helper routines, or an uninitialised callback response was received.\n");
                 break;
 
             case S_HELPER_RELEASE:	/* helper finished with */
@@ -2,7 +2,7 @@
 
 SQUID-MIB DEFINITIONS ::= BEGIN
 --
--- $Id: mib.txt,v 1.30 2006/09/22 02:48:51 hno Exp $
+-- $Id: mib.txt,v 1.31 2007/08/27 12:50:43 hno Exp $
 --
 
 IMPORTS
@@ -314,7 +314,7 @@ squid MODULE-IDENTITY
                 MAX-ACCESS read-only
                 STATUS current
 		DESCRIPTION
-			" Number of HTTP KB's recieved "
+			" Number of HTTP KB's received "
         ::= { cacheProtoAggregateStats 4 }
 
         cacheHttpOutKb OBJECT-TYPE
@@ -354,7 +354,7 @@ squid MODULE-IDENTITY
                 MAX-ACCESS read-only
                 STATUS current
 		DESCRIPTION
-                        " Number of ICP KB's recieved "
+                        " Number of ICP KB's received "
         ::= { cacheProtoAggregateStats 9 }
 
         cacheServerRequests OBJECT-TYPE
@@ -378,7 +378,7 @@ squid MODULE-IDENTITY
                 MAX-ACCESS read-only
                 STATUS current
 		DESCRIPTION
-                        " KB's of traffic recieved from servers "
+                        " KB's of traffic received from servers "
         ::= { cacheProtoAggregateStats 12 }
 
         cacheServerOutKb OBJECT-TYPE
@@ -1,6 +1,6 @@
 
 /*
- * $Id: net_db.cc,v 1.196 2007/05/29 13:31:40 amosjeffries Exp $
+ * $Id: net_db.cc,v 1.197 2007/08/27 12:50:43 hno Exp $
  *
  * DEBUG: section 38    Network Measurement Database
  * AUTHOR: Duane Wessels
@@ -674,7 +674,7 @@ netdbFreeNameEntry(void *data)
 
 
 static void
-netdbExchangeHandleReply(void *data, StoreIOBuffer recievedData)
+netdbExchangeHandleReply(void *data, StoreIOBuffer receivedData)
 {
     netdbExchangeState *ex = (netdbExchangeState *)data;
     int rec_sz = 0;
@@ -695,7 +695,7 @@ netdbExchangeHandleReply(void *data, StoreIOBuffer recievedData)
     rec_sz += 1 + sizeof(addr.s_addr);
     rec_sz += 1 + sizeof(int);
     rec_sz += 1 + sizeof(int);
-    debugs(38, 3, "netdbExchangeHandleReply: " << recievedData.length << " read bytes");
+    debugs(38, 3, "netdbExchangeHandleReply: " << receivedData.length << " read bytes");
 
     if (!cbdataReferenceValid(ex->p)) {
         debugs(38, 3, "netdbExchangeHandleReply: Peer became invalid");
@@ -705,8 +705,8 @@ netdbExchangeHandleReply(void *data, StoreIOBuffer recievedData)
 
     debugs(38, 3, "netdbExchangeHandleReply: for '" << ex->p->host << ":" << ex->p->http_port << "'");
 
-    if (recievedData.length == 0 &&
-            !recievedData.flags.error) {
+    if (receivedData.length == 0 &&
+            !receivedData.flags.error) {
         debugs(38, 3, "netdbExchangeHandleReply: Done");
         netdbExchangeDone(ex);
         return;
@@ -715,14 +715,14 @@ netdbExchangeHandleReply(void *data, StoreIOBuffer recievedData)
     p = ex->buf;
 
     /* Get the size of the buffer now */
-    size = ex->buf_ofs + recievedData.length;
+    size = ex->buf_ofs + receivedData.length;
     debugs(38, 3, "netdbExchangeHandleReply: " << size << " bytes buf");
 
     /* Check if we're still doing headers */
 
     if (ex->connstate == STATE_HEADER) {
 
-        ex->buf_ofs += recievedData.length;
+        ex->buf_ofs += receivedData.length;
 
         /* skip reply headers */
 
@@ -859,7 +859,7 @@ netdbExchangeHandleReply(void *data, StoreIOBuffer recievedData)
         tempBuffer.offset = ex->used;
         tempBuffer.length = ex->buf_sz - ex->buf_ofs;
         tempBuffer.data = ex->buf + ex->buf_ofs;
-        debugs(38, 3, "netdbExchangeHandleReply: EOF not recieved");
+        debugs(38, 3, "netdbExchangeHandleReply: EOF not received");
         storeClientCopy(ex->sc, ex->e, tempBuffer,
                         netdbExchangeHandleReply, ex);
     }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: peer_digest.cc,v 1.126 2007/08/13 17:20:51 hno Exp $
+ * $Id: peer_digest.cc,v 1.127 2007/08/27 12:50:43 hno Exp $
  *
  * DEBUG: section 72    Peer Digest Routines
  * AUTHOR: Alex Rousskov
@@ -417,21 +417,21 @@ peerDigestRequest(PeerDigest * pd)
  * not interested in rewriting everything to suit my little idea.
  */
 static void
-peerDigestHandleReply(void *data, StoreIOBuffer recievedData)
+peerDigestHandleReply(void *data, StoreIOBuffer receivedData)
 {
     DigestFetchState *fetch = (DigestFetchState *)data;
     int retsize = -1;
     digest_read_state_t prevstate;
     int newsize;
 
-    assert(fetch->pd && recievedData.data);
-    /* The existing code assumes that the recieved pointer is
+    assert(fetch->pd && receivedData.data);
+    /* The existing code assumes that the received pointer is
      * where we asked the data to be put
      */
-    assert(fetch->buf + fetch->bufofs == recievedData.data);
+    assert(fetch->buf + fetch->bufofs == receivedData.data);
 
     /* Update the buffer size */
-    fetch->bufofs += recievedData.length;
+    fetch->bufofs += receivedData.length;
 
     assert(fetch->bufofs <= SM_PAGE_SIZE);
 
@@ -500,7 +500,7 @@ peerDigestHandleReply(void *data, StoreIOBuffer recievedData)
     } while (cbdataReferenceValid(fetch) && prevstate != fetch->state && fetch->bufofs > 0);
 
     /* Update the copy offset */
-    fetch->offset += recievedData.length;
+    fetch->offset += receivedData.length;
 
     /* Schedule another copy */
     if (cbdataReferenceValid(fetch)) {
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store.cc,v 1.616 2007/08/13 17:20:51 hno Exp $
+ * $Id: store.cc,v 1.617 2007/08/27 12:50:43 hno Exp $
  *
  * DEBUG: section 20    Storage Manager
  * AUTHOR: Harvest Derived
@@ -818,7 +818,7 @@ StoreEntry::write (StoreIOBuffer writeBuffer)
 
     if (!writeBuffer.length)
       {
-        /* the headers are recieved already, but we have not recieved
+        /* the headers are received already, but we have not received
          * any body data. There are BROKEN abuses of HTTP which require
          * the headers to be passed along before any body data - see
          * http://developer.apple.com/documentation/QuickTime/QTSS/Concepts/chapter_2_section_14.html
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store_client.cc,v 1.158 2007/08/13 17:20:51 hno Exp $
+ * $Id: store_client.cc,v 1.159 2007/08/27 12:50:43 hno Exp $
  *
  * DEBUG: section 90    Storage Manager Client-Side Interface
  * AUTHOR: Duane Wessels
@@ -768,7 +768,7 @@ CheckQuickAbort2(StoreEntry * entry)
     int64_t expectlen = entry->getReply()->content_length + entry->getReply()->hdr_sz;
 
     if (expectlen < 0)
-        /* expectlen is < 0 if *no* information about the object has been recieved */
+        /* expectlen is < 0 if *no* information about the object has been received */
         return 1;
 
     int64_t curlen =  mem->endOffset ();
@@ -37,7 +37,7 @@ testEvent::testCreate()
 }
 
 
-/* Helper for tests - an event which records the number of calls it recieved. */
+/* Helper for tests - an event which records the number of calls it received. */
 
 struct CalledEvent
 {