@@ -1,5 +1,5 @@
 /*
- * $Id: acl.cc,v 1.30 1996/09/11 22:31:04 wessels Exp $
+ * $Id: acl.cc,v 1.31 1996/09/11 22:41:10 wessels Exp $
  *
  * DEBUG: section 28    Access Control
  * AUTHOR: Duane Wessels
@@ -477,11 +477,11 @@ void aclParseAclLine()
 }
 
 /* maex@space.net (06.09.96)
- *	get (if any) the URL from deny_info for a certain acl
+ *    get (if any) the URL from deny_info for a certain acl
  */
 char *aclGetDenyInfoUrl(head, name)
-    struct _acl_deny_info_list **head;
-    char *name;
+     struct _acl_deny_info_list **head;
+     char *name;
 {
     struct _acl_deny_info_list *A = NULL;
     struct _acl_name_list *L = NULL;
@@ -503,15 +503,15 @@ char *aclGetDenyInfoUrl(head, name)
     return (NULL);
 }
 /* maex@space.net (05.09.96)
- *	get the info for redirecting "access denied" to info pages
- *	TODO (probably ;-)
- *	currently there is no optimization for
- *	- more than one deny_info line with the same url
- *	- a check, whether the given acl really is defined
- *	- a check, whether an acl is added more than once for the same url
+ *    get the info for redirecting "access denied" to info pages
+ *      TODO (probably ;-)
+ *      currently there is no optimization for
+ *      - more than one deny_info line with the same url
+ *      - a check, whether the given acl really is defined
+ *      - a check, whether an acl is added more than once for the same url
  */
 void aclParseDenyInfoLine(head)
-    struct _acl_deny_info_list **head;
+     struct _acl_deny_info_list **head;
 {
     char *t = NULL;
     struct _acl_deny_info_list *A = NULL;
@@ -969,7 +969,7 @@ void aclDestroyAccessList(list)
 }
 
 /* maex@space.net (06.09.1996)
- *	destroy an _acl_deny_info_list
+ *    destroy an _acl_deny_info_list
  */
 void aclDestroyDenyInfoList(list)
      struct _acl_deny_info_list **list;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.18 1996/09/11 22:38:48 wessels Exp $
+ * $Id: client_side.cc,v 1.19 1996/09/11 22:41:11 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -76,6 +76,7 @@ static void clientLookupIdentDone(data)
      void *data;
 {
 }
+
 #endif
 
 #if USE_PROXY_AUTH
@@ -181,17 +182,17 @@ void clientAccessCheckDone(icpState, answer)
 	redirectUrl = aclGetDenyInfoUrl(&DenyInfoList, AclMatchedName);
 	if (redirectUrl) {
 	    icpState->http_code = 302,
-	    buf = access_denied_redirect(icpState->http_code,
+		buf = access_denied_redirect(icpState->http_code,
 		icpState->method,
 		icpState->url,
 		fd_table[fd].ipaddr,
 		redirectUrl);
 	} else {
 	    icpState->http_code = 400;
 	    buf = access_denied_msg(icpState->http_code,
-	        icpState->method,
-	        icpState->url,
-	        fd_table[fd].ipaddr);
+		icpState->method,
+		icpState->url,
+		fd_table[fd].ipaddr);
 	}
 	icpSendERROR(fd, LOG_TCP_DENIED, buf, icpState, icpState->http_code);
     }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: dnsserver.cc,v 1.19 1996/09/11 22:39:50 wessels Exp $
+ * $Id: dnsserver.cc,v 1.20 1996/09/11 22:41:12 wessels Exp $
  *
  * DEBUG: section 0     DNS Resolver
  * AUTHOR: Harvest Derived
@@ -224,7 +224,7 @@ int do_debug = 0;
 
 /* error messages from gethostbyname() */
 static char *my_h_msgs(x)
-	int x;
+     int x;
 {
     if (x == HOST_NOT_FOUND)
 	return "Host not found (authoritative)";
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store.cc,v 1.101 1996/09/11 22:40:15 wessels Exp $
+ * $Id: store.cc,v 1.102 1996/09/11 22:41:14 wessels Exp $
  *
  * DEBUG: section 20    Storeage Manager
  * AUTHOR: Harvest Derived
@@ -1861,7 +1861,7 @@ int storeGetMemSpace(size, check_vm_number)
 	} else if (storeCheckPurgeMem(e)) {
 	    *(list + list_count) = e;
 	    list_count++;
- 	} else if (!storeEntryLocked(e)) {
+	} else if (!storeEntryLocked(e)) {
 	    *(list + list_count) = e;
 	    list_count++;
 	} else {
@@ -1889,13 +1889,13 @@ int storeGetMemSpace(size, check_vm_number)
 		break;
 	e = *(list + i);
 	if (storeCheckPurgeMem(e)) {
-		storePurgeMem(e);
-		n_purged++;
+	    storePurgeMem(e);
+	    n_purged++;
 	} else if (!storeEntryLocked(e)) {
-		storeRelease(e);
-		n_released++;
+	    storeRelease(e);
+	    n_released++;
 	} else {
-		fatal_dump("storeGetMemSpace: Bad Entry in LRU list");
+	    fatal_dump("storeGetMemSpace: Bad Entry in LRU list");
 	}
     }
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: tools.cc,v 1.52 1996/09/11 22:39:23 wessels Exp $
+ * $Id: tools.cc,v 1.53 1996/09/11 22:41:15 wessels Exp $
  *
  * DEBUG: section 21    Misc Functions
  * AUTHOR: Harvest Derived
@@ -568,15 +568,15 @@ void squid_signal(sig, func, flags)
 }
 
 char *accessLogTime(t)
-	time_t t;
+     time_t t;
 {
-        struct tm *tm;
-	static char buf[128];
-	static char last_t = 0;
-	if (t != last_t) {
-		tm = localtime(&t);
-		strftime (buf, 127, "%y/%m/%d %T", tm);
-		last_t = t;
-	}
-	return buf;
+    struct tm *tm;
+    static char buf[128];
+    static char last_t = 0;
+    if (t != last_t) {
+	tm = localtime(&t);
+	strftime(buf, 127, "%y/%m/%d %T", tm);
+	last_t = t;
+    }
+    return buf;
 }