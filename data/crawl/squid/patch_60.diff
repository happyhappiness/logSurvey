----++++doc/release-notes/release-4.sgml
@@ -91,6 +91,13 @@ Most user-facing changes are reflected in squid.conf (see below).
    to configure the minimum version the TLS negotiation will allow to be used
    when an old TLS version is requested by the remote endpoint.
 
+&lt;p&gt;The system Trusted CAs are no longer used by default when verifying client
+   certificates. The &lt;em&gt;cafile=&lt;/em&gt; option should be used instead to load
+   the specific CA which signed acceptible client certificates explicitly,
+   even if that CA is one of the system Trusted CAs.
+   The &lt;em&gt;tls-default-ca&lt;/em&gt; option can be used to restore the old
+   behaviour explicitly if needed.
+
 
 &lt;sect1&gt;MSNT-multi-domain helper removal
 &lt;p&gt;The &lt;em&gt;basic_msnt_multi_domain_auth&lt;/em&gt; helper has been removed. The
@@ -161,7 +168,7 @@ This section gives a thorough account of those changes in three categories:
 	&lt;p&gt;New option &lt;em&gt;auth-no-keytab&lt;/em&gt; to let GSSAPI implementation determine
 	   which Kerberos credentials to use, instead of specifying a keytab.
 	&lt;p&gt;New option &lt;em&gt;tls-min-version=1.N&lt;/em&gt; to set minimum TLS version allowed.
-	&lt;p&gt;New option &lt;em&gt;tls-no-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;
+	&lt;p&gt;New option &lt;em&gt;tls-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;
 	&lt;p&gt;New option &lt;em&gt;tls-no-npn&lt;/em&gt; to disable sending TLS NPN extension.
 	&lt;p&gt;All &lt;em&gt;ssloptions=&lt;/em&gt; values for SSLv2 configuration or disabling
 	   have been removed.
@@ -176,18 +183,20 @@ This section gives a thorough account of those changes in three categories:
 
 	&lt;tag&gt;http_port&lt;/tag&gt;
 	&lt;p&gt;New option &lt;em&gt;tls-min-version=1.N&lt;/em&gt; to set minimum TLS version allowed.
-	&lt;p&gt;New option &lt;em&gt;tls-no-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;
+	&lt;p&gt;New option &lt;em&gt;tls-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;
 	&lt;p&gt;New option &lt;em&gt;tls-no-npn&lt;/em&gt; to disable sending TLS NPN extension.
 	&lt;p&gt;All &lt;em&gt;option=&lt;/em&gt; values for SSLv2 configuration or disabling
 	   have been removed.
 	&lt;p&gt;Removed &lt;em&gt;version=&lt;/em&gt; option. Use &lt;em&gt;tls-options=&lt;/em&gt; instead.
 	&lt;p&gt;Manual squid.conf update may be required on upgrade.
 	&lt;p&gt;Replaced &lt;em&gt;cafile=&lt;/em&gt; with &lt;em&gt;tls-cafile=&lt;/em&gt; which takes multiple entries.
-	&lt;p&gt;New option &lt;em&gt;tls-no-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;
+	&lt;p&gt;New option &lt;em&gt;tls-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;,
+	   the default is also changed to OFF.
 
 	&lt;tag&gt;https_port&lt;/tag&gt;
 	&lt;p&gt;New option &lt;em&gt;tls-min-version=1.N&lt;/em&gt; to set minimum TLS version allowed.
-	&lt;p&gt;New option &lt;em&gt;tls-no-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;
+	&lt;p&gt;New option &lt;em&gt;tls-default-ca&lt;/em&gt; replaces &lt;em&gt;sslflags=NO_DEFAULT_CA&lt;/em&gt;,
+	   the default is also changed to OFF.
 	&lt;p&gt;New option &lt;em&gt;tls-no-npn&lt;/em&gt; to disable sending TLS NPN extension.
 	&lt;p&gt;All &lt;em&gt;options=&lt;/em&gt; values for SSLv2
 	   configuration or disabling have been removed.
@@ -210,6 +219,8 @@ This section gives a thorough account of those changes in three categories:
 	   certificate(s) to verify the server certificate.
 	&lt;p&gt;New &lt;em&gt;tls-crlfile=&lt;/em&gt; option to set a file with a CRL to verify the
 	   server certificate.
+	&lt;p&gt;New &lt;em&gt;tls-default-ca&lt;/em&gt; option to use the system Trusted CAs to
+	   verify the server certificate.
 	&lt;p&gt;New &lt;em&gt;tls-domain=&lt;/em&gt; option to verify the server certificate domain.
 
 	&lt;tag&gt;logformat&lt;/tag&gt;
----++++src/cf.data.pre
@@ -2013,8 +2013,8 @@ DOC_START
 				Verify CRL lists for all certificates in the
 				client certificate chain.
 
-	   tls-no-default-ca
-			Do not use the system default Trusted CA.
+	   tls-default-ca[=off]
+			Whether to use the system Trusted CAs. Default is OFF.
 
 	   tls-no-npn	Do not use the TLS NPN extension to advertise HTTP/1.1.
 
@@ -2551,7 +2551,8 @@ DOC_START
 				Don&#39;t verify the peer certificate
 				matches the server name
 	
-	no-default-ca	Do not use the system default Trusted CA.
+	default-ca[=off]
+			Whether to use the system Trusted CAs. Default is ON.
 	
 	domain= 	The peer name as advertised in its certificate.
 			Used for verifying the correctness of the received peer
@@ -3326,9 +3327,9 @@ DOC_START
 			See MS KB document Q307347 for details on this header.
 			If set to auto the header will only be added if the
 			request is forwarded as a https:// URL.
-
-	tls-no-default-ca
-			Do not use the system default Trusted CA.	
+	
+	tls-default-ca[=off]
+			Whether to use the system Trusted CAs. Default is ON.
 	
 	tls-no-npn	Do not use the TLS NPN extension to advertise HTTP/1.1.
 
@@ -8527,7 +8528,7 @@ DOC_START
 			the icap server certificate.
 			Use to specify intermediate CA certificate(s) if not sent
 			by the server. Or the full CA chain for the server when
-			using the tls-no-default-ca flag.
+			using the tls-default-ca=off flag.
 			May be repeated to load multiple files.
 
 	tls-capath=...	A directory containing additional CA certificates to
@@ -8546,8 +8547,8 @@ DOC_START
 				Don&#39;t verify the icap server certificate
 				matches the server name
 
-	tls-no-default-ca
-			Do no use the system default Trusted CA.
+	tls-default-ca[=off]
+			Whether to use the system Trusted CAs. Default is ON.
 
 	tls-domain=	The icap server name as advertised in it&#39;s certificate.
 			Used for verifying the correctness of the received icap
----++++src/security/PeerOptions.cc
@@ -91,8 +91,14 @@ Security::PeerOptions::parse(const char *token)
         }
         sslFlags = SBuf(token + 6);
         parsedFlags = parseFlags();
-    } else if (strncmp(token, &quot;no-default-ca&quot;, 13) == 0) {
-        flags.tlsDefaultCa = false;
+    } else if (strncmp(token, &quot;default-ca=off&quot;, 14) == 0 || strncmp(token, &quot;no-default-ca&quot;, 13) == 0) {
+        if (flags.tlsDefaultCa.configured() &amp;&amp; flags.tlsDefaultCa)
+            fatalf(&quot;ERROR: previous default-ca settings conflict with %s&quot;, token);
+        flags.tlsDefaultCa.configure(false);
+    } else if (strncmp(token, &quot;default-ca=on&quot;, 13) == 0 || strncmp(token, &quot;default-ca&quot;, 10) == 0) {
+        if (flags.tlsDefaultCa.configured() &amp;&amp; !flags.tlsDefaultCa)
+            fatalf(&quot;ERROR: previous default-ca settings conflict with %s&quot;, token);
+        flags.tlsDefaultCa.configure(true);
     } else if (strncmp(token, &quot;domain=&quot;, 7) == 0) {
         sslDomain = SBuf(token + 7);
     } else if (strncmp(token, &quot;no-npn&quot;, 6) == 0) {
@@ -140,8 +146,14 @@ Security::PeerOptions::dumpCfg(Packable *p, const char *pfx) const
     if (!sslFlags.isEmpty())
         p-&gt;appendf(&quot; %sflags=&quot; SQUIDSBUFPH, pfx, SQUIDSBUFPRINT(sslFlags));
 
-    if (!flags.tlsDefaultCa)
-        p-&gt;appendf(&quot; %sno-default-ca&quot;, pfx);
+    if (flags.tlsDefaultCa.configured()) {
+        // default ON for peers / upstream servers
+        // default OFF for listening ports
+        if (flags.tlsDefaultCa)
+            p-&gt;appendf(&quot; %sdefault-ca&quot;, pfx);
+        else
+            p-&gt;appendf(&quot; %sdefault-ca=off&quot;, pfx);
+    }
 
     if (!flags.tlsNpn)
         p-&gt;appendf(&quot; %sno-npn&quot;, pfx);
@@ -500,8 +512,10 @@ Security::PeerOptions::parseFlags()
         if (!found)
             fatalf(&quot;Unknown TLS flag &#39;&quot; SQUIDSBUFPH &quot;&#39;&quot;, SQUIDSBUFPRINT(tok.remaining()));
         if (found == SSL_FLAG_NO_DEFAULT_CA) {
-            debugs(83, DBG_PARSE_NOTE(2), &quot;UPGRADE WARNING: flags=NO_DEFAULT_CA is deprecated. Use tls-no-default-ca instead.&quot;);
-            flags.tlsDefaultCa = false;
+            if (flags.tlsDefaultCa.configured() &amp;&amp; flags.tlsDefaultCa)
+                fatal(&quot;ERROR: previous default-ca settings conflict with sslflags=NO_DEFAULT_CA&quot;);
+            debugs(83, DBG_PARSE_NOTE(2), &quot;WARNING: flags=NO_DEFAULT_CA is deprecated. Use tls-default-ca=off instead.&quot;);
+            flags.tlsDefaultCa.configure(false);
         } else
             fl |= found;
     } while (tok.skipOne(delims));
----++++src/security/PeerOptions.h
@@ -9,6 +9,7 @@
 #ifndef SQUID_SRC_SECURITY_PEEROPTIONS_H
 #define SQUID_SRC_SECURITY_PEEROPTIONS_H
 
+#include &quot;base/YesNoNone.h&quot;
 #include &quot;ConfigParser.h&quot;
 #include &quot;security/KeyData.h&quot;
 
@@ -75,15 +76,15 @@ class PeerOptions
     std::list&lt;SBuf&gt; caFiles;  ///&lt; paths of files containing trusted Certificate Authority
     Security::CertRevokeList parsedCrl; ///&lt; CRL to use when verifying the remote end certificate
 
-private:
+protected:
     int sslVersion;
 
     /// flags governing Squid internal TLS operations
     struct flags_ {
         flags_() : tlsDefaultCa(true), tlsNpn(true) {}
 
         /// whether to use the system default Trusted CA when verifying the remote end certificate
-        bool tlsDefaultCa;
+        YesNoNone tlsDefaultCa;
 
         /// whether to use the TLS NPN extension on these connections
         bool tlsNpn;
----++++src/security/ServerOptions.h
@@ -18,7 +18,11 @@ namespace Security
 class ServerOptions : public PeerOptions
 {
 public:
-    ServerOptions() : PeerOptions() {}
+    ServerOptions() : PeerOptions() {
+        // Bug 4005: dynamic contexts use a lot of memory and it
+        // is more secure to have only a small set of trusted CA.
+        flags.tlsDefaultCa.defaultTo(false);
+    }
     explicit ServerOptions(const Security::ServerOptions &amp;);
     virtual ~ServerOptions() = default;
 
----++++GitHub