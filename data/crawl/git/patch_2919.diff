@@ -9,12 +9,16 @@ git-cat-file - Provide content or type/size information for repository objects
 SYNOPSIS
 --------
 'git-cat-file' [-t | -s | -e | -p | <type>] <object>
+'git-cat-file' --batch-check < <list-of-objects>
 
 DESCRIPTION
 -----------
-Provides content or type of objects in the repository. The type
-is required unless '-t' or '-p' is used to find the object type,
-or '-s' is used to find the object size.
+In the first form, provides content or type of objects in the repository. The
+type is required unless '-t' or '-p' is used to find the object type, or '-s'
+is used to find the object size.
+
+In the second form, a list of object (separated by LFs) is provided on stdin,
+and the SHA1, type, and size of each object is printed on stdout.
 
 OPTIONS
 -------
@@ -46,6 +50,10 @@ OPTIONS
 	or to ask for a "blob" with <object> being a tag object that
 	points at it.
 
+--batch-check::
+	Print the SHA1, type, and size of each object provided on stdin. May not be
+	combined with any other options or arguments.
+
 OUTPUT
 ------
 If '-t' is specified, one of the <type>.
@@ -56,9 +64,22 @@ If '-e' is specified, no output.
 
 If '-p' is specified, the contents of <object> are pretty-printed.
 
-Otherwise the raw (though uncompressed) contents of the <object> will
-be returned.
+If <type> is specified, the raw (though uncompressed) contents of the <object>
+will be returned.
+
+If '--batch-check' is specified, output of the following form is printed for
+each object specified fon stdin:
+
+------------
+<sha1> SP <type> SP <size> LF
+------------
+
+Additionally, output of the following form is printed for each object specified
+on stdin that does not exist in the repository:
 
+------------
+<object> SP missing LF
+------------
 
 Author
 ------
@@ -143,19 +143,77 @@ static int cat_one_file(int opt, const char *exp_type, const char *obj_name)
 	return 0;
 }
 
-static const char cat_file_usage[] = "git-cat-file [-t|-s|-e|-p|<type>] <sha1>";
+static int batch_one_object(const char *obj_name)
+{
+	unsigned char sha1[20];
+	enum object_type type;
+	unsigned long size;
+
+	if (!obj_name)
+	   return 1;
+
+	if (get_sha1(obj_name, sha1)) {
+		printf("%s missing\n", obj_name);
+		return 0;
+	}
+
+	type = sha1_object_info(sha1, &size);
+	if (type <= 0)
+		return 1;
+
+	printf("%s %s %lu\n", sha1_to_hex(sha1), typename(type), size);
+
+	return 0;
+}
+
+static int batch_objects(void)
+{
+	struct strbuf buf;
+
+	strbuf_init(&buf, 0);
+	while (strbuf_getline(&buf, stdin, '\n') != EOF) {
+		int error = batch_one_object(buf.buf);
+		if (error)
+			return error;
+	}
+
+	return 0;
+}
+
+static const char cat_file_usage[] = "git-cat-file [ [-t|-s|-e|-p|<type>] <sha1> | --batch-check < <list_of_sha1s> ]";
 
 int cmd_cat_file(int argc, const char **argv, const char *prefix)
 {
-	int i, opt = 0;
+	int i, opt = 0, batch_check = 0;
 	const char *exp_type = NULL, *obj_name = NULL;
 
 	git_config(git_default_config);
 
 	for (i = 1; i < argc; ++i) {
 		const char *arg = argv[i];
 
+		if (!strcmp(arg, "--batch-check")) {
+			if (opt) {
+				error("git-cat-file: Can't use --batch-check with -%c", opt);
+				usage(cat_file_usage);
+			} else if (exp_type) {
+				error("git-cat-file: Can't use --batch-check when a type (\"%s\") is specified", exp_type);
+				usage(cat_file_usage);
+			} else if (obj_name) {
+				error("git-cat-file: Can't use --batch-check when an object (\"%s\") is specified", obj_name);
+				usage(cat_file_usage);
+			}
+
+			batch_check = 1;
+			continue;
+		}
+
 		if (!strcmp(arg, "-t") || !strcmp(arg, "-s") || !strcmp(arg, "-e") || !strcmp(arg, "-p")) {
+			if (batch_check) {
+				error("git-cat-file: Can't use %s with --batch-check", arg);
+				usage(cat_file_usage);
+			}
+
 			exp_type = arg;
 			opt = exp_type[1];
 			continue;
@@ -165,17 +223,29 @@ int cmd_cat_file(int argc, const char **argv, const char *prefix)
 			usage(cat_file_usage);
 
 		if (!exp_type) {
+			if (batch_check) {
+				error("git-cat-file: Can't specify a type (\"%s\") with --batch-check", arg);
+				usage(cat_file_usage);
+			}
+
 			exp_type = arg;
 			continue;
 		}
 
 		if (obj_name)
 			usage(cat_file_usage);
 
+		// We should have hit one of the earlier if (batch_check) cases before
+		// getting here.
+		assert(!batch_check);
+
 		obj_name = arg;
 		break;
 	}
 
+	if (batch_check)
+		return batch_objects();
+
 	if (!exp_type || !obj_name)
 		usage(cat_file_usage);
 
@@ -67,6 +67,19 @@ run_tests () {
 		false
         fi
     '
+
+    test_expect_success "--batch-check output of $type is correct" '
+	expect="$sha1 $type $size"
+	actual="$(echo_without_newline $sha1 | git cat-file --batch-check)"
+        if test "z$expect" = "z$actual"
+	then
+		: happy
+	else
+		echo "Oops: expected $expect"
+		echo "but got $actual"
+		false
+        fi
+    '
 }
 
 hello_content="Hello World"
@@ -118,4 +131,56 @@ test_expect_success \
     "Reach a blob from a tag pointing to it" \
     "test '$hello_content' = \"\$(git cat-file blob $tag_sha1)\""
 
+for opt in t s e p
+do
+    test_expect_success "Passing -$opt with --batch-check fails" '
+	test_must_fail git cat-file --batch-check -$opt $hello_sha1
+    '
+
+    test_expect_success "Passing --batch-check with -$opt fails" '
+	test_must_fail git cat-file -$opt --batch-check $hello_sha1
+    '
+done
+
+test_expect_success "Passing <type> with --batch-check fails" '
+    test_must_fail git cat-file --batch-check blob $hello_sha1
+'
+
+test_expect_success "Passing --batch-check with <type> fails" '
+    test_must_fail git cat-file blob --batch-check $hello_sha1
+'
+
+test_expect_success "Passing sha1 with --batch-check fails" '
+    test_must_fail git cat-file --batch-check $hello_sha1
+'
+
+test_expect_success "--batch-check for a non-existent object" '
+    test "deadbeef missing" = \
+    "$(echo_without_newline deadbeef | git cat-file --batch-check)"
+'
+
+test_expect_success "--batch-check for an emtpy line" '
+    test " missing" = "$(echo | git cat-file --batch-check)"
+'
+
+batch_check_input="$hello_sha1
+$tree_sha1
+$commit_sha1
+$tag_sha1
+deadbeef
+
+"
+
+batch_check_output="$hello_sha1 blob $hello_size
+$tree_sha1 tree $tree_size
+$commit_sha1 commit $commit_size
+$tag_sha1 tag $tag_size
+deadbeef missing
+ missing"
+
+test_expect_success "--batch-check with multiple sha1s gives correct format" '
+    test "$batch_check_output" = \
+    "$(echo_without_newline "$batch_check_input" | git cat-file --batch-check)"
+'
+
 test_done