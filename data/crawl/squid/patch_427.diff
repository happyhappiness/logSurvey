@@ -28,11 +28,15 @@
 /// Intended for registration pattern APIs where the function result does not matter to the test
 #define STUB_NOP { std::cerr<<"SKIP: "<<STUB_API<<" "<<__FUNCTION__<<" (not implemented).\n"; }
 
-/** macro to stub a function with return value.
- *  Aborts unit tests requiring its definition with a message about the missing linkage
- */
+/// macro to stub a function with return value.
+/// Aborts unit tests requiring its definition with a message about the missing linkage
 #define STUB_RETVAL(x) { stub_fatal(STUB_API " required"); return x; }
 
+/// macro to stub a void function without a fatal message and with a return value
+/// Intended for registration pattern APIs where the function result does not matter to the test
+#define STUB_RETVAL_NOP(x) { std::cerr<<"SKIP: "<<STUB_API<<" "<<__FUNCTION__<<" (not implemented).\n"; return x; }
+
+
 /** macro to stub a function which returns a reference to dynamic
  *  Aborts unit tests requiring its definition with a message about the missing linkage
  *  This macro uses 'new x' to construct a stack vailable for the reference, may leak.
@@ -38,12 +38,12 @@
 #include "squid-old.h"
 #include "DelayId.h"
 
-DelayId::DelayId() {}
-
-void
-DelayId::delayRead(DeferredRead const&)
-{}
+#define STUB_API "stub_DelayId.cc"
+#include "tests/STUB.h"
 
+DelayId::DelayId() {}
 DelayId::~DelayId() {}
 
+void DelayId::delayRead(DeferredRead const&) STUB_NOP
+
 #endif /* USE_DELAY_POOLS */
@@ -2,6 +2,9 @@
 #include "HelperChildConfig.h"
 #include "globals.h"
 
+#define STUB_API "stub_HelperChildconfig.cc"
+#include "tests/STUB.h"
+
 #include <string.h>
 
 HelperChildConfig::HelperChildConfig(const unsigned int m):
@@ -26,9 +29,4 @@ HelperChildConfig::needNew() const
     return (n_max - n_active);
 }
 
-void
-HelperChildConfig::parseConfig()
-{
-    fprintf(stderr, "HelperChildConfig::parseConfig not implemented.");
-    exit(1);
-}
+void HelperChildConfig::parseConfig() STUB
@@ -6,15 +6,15 @@
 #include "tests/STUB.h"
 
 HttpRequest::HttpRequest() : HttpMsg(hoRequest) STUB
-        HttpRequest::HttpRequest(const HttpRequestMethod& method, AnyP::ProtocolType protocol, const char *aUrlpath) : HttpMsg(hoRequest) STUB
-        HttpRequest::~HttpRequest() STUB
-        void HttpRequest::packFirstLineInto(Packer * p, bool full_uri) const STUB
-        bool HttpRequest::sanityCheckStartLine(MemBuf *buf, const size_t hdr_len, http_status *error) STUB_RETVAL(false)
-        void HttpRequest::hdrCacheInit() STUB
-        void HttpRequest::reset() STUB
-        bool HttpRequest::expectingBody(const HttpRequestMethod& unused, int64_t&) const STUB_RETVAL(false)
-        void HttpRequest::initHTTP(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aUrlpath) STUB
-        bool HttpRequest::parseFirstLine(const char *start, const char *end) STUB_RETVAL(false)
-        HttpRequest * HttpRequest::clone() const STUB_RETVAL(NULL)
-        bool HttpRequest::inheritProperties(const HttpMsg *aMsg) STUB_RETVAL(false)
-        int64_t HttpRequest::getRangeOffsetLimit() STUB_RETVAL(0)
+HttpRequest::HttpRequest(const HttpRequestMethod& method, AnyP::ProtocolType protocol, const char *aUrlpath) : HttpMsg(hoRequest) STUB
+HttpRequest::~HttpRequest() STUB
+void HttpRequest::packFirstLineInto(Packer * p, bool full_uri) const STUB
+bool HttpRequest::sanityCheckStartLine(MemBuf *buf, const size_t hdr_len, http_status *error) STUB_RETVAL(false)
+void HttpRequest::hdrCacheInit() STUB
+void HttpRequest::reset() STUB
+bool HttpRequest::expectingBody(const HttpRequestMethod& unused, int64_t&) const STUB_RETVAL(false)
+void HttpRequest::initHTTP(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aUrlpath) STUB
+bool HttpRequest::parseFirstLine(const char *start, const char *end) STUB_RETVAL(false)
+HttpRequest * HttpRequest::clone() const STUB_RETVAL(NULL)
+bool HttpRequest::inheritProperties(const HttpMsg *aMsg) STUB_RETVAL(false)
+int64_t HttpRequest::getRangeOffsetLimit() STUB_RETVAL(0)
@@ -1,35 +1,16 @@
 #include "squid.h"
-#define STUB_API "StatHist.cc"
-#include "STUB.h"
 #include "StatHist.h"
 
-
-void
-StatHist::dump(StoreEntry * sentry, StatHistBinDumper * bd) const
-{}
-
-void
-StatHist::enumInit(unsigned int i)
-{}
-
-void
-StatHist::count(double d)
-{}
-
-double
-statHistDeltaMedian(const StatHist & A, const StatHist & B)
-STUB_RETVAL(0.0)
-
-double
-statHistDeltaPctile(const StatHist & A, const StatHist & B, double pctile)
-STUB_RETVAL(0.0)
-
-void
-StatHist::logInit(unsigned int i, double d1, double d2)
-STUB
+#define STUB_API "StatHist.cc"
+#include "STUB.h"
 
 class StoreEntry;
-void
-statHistIntDumper(StoreEntry * sentry, int idx, double val, double size, int count)
-STUB
+
+void StatHist::dump(StoreEntry * sentry, StatHistBinDumper * bd) const STUB
+void StatHist::enumInit(unsigned int i) STUB_NOP
+void StatHist::count(double d) STUB_NOP
+double statHistDeltaMedian(const StatHist & A, const StatHist & B) STUB_RETVAL(0.0)
+double statHistDeltaPctile(const StatHist & A, const StatHist & B, double pctile) STUB_RETVAL(0.0)
+void StatHist::logInit(unsigned int i, double d1, double d2) STUB
+void statHistIntDumper(StoreEntry * sentry, int idx, double val, double size, int count) STUB
 
@@ -43,35 +43,7 @@ void self_destruct(void) STUB
 void parse_int(int *var) STUB
 void parse_onoff(int *var) STUB
 void parse_eol(char *volatile *var) STUB
-#if 0
-{
-    unsigned char *token = (unsigned char *) strtok(NULL, null_string);
-    safe_free(*var);
-
-    if (token == NULL)
-        self_destruct();
-
-    while (*token && xisspace(*token))
-        ++token;
-
-    if (!*token)
-        self_destruct();
-
-    *var = xstrdup((char *) token);
-}
-#endif
-
 void parse_wordlist(wordlist ** list) STUB
-#if 0
-{
-    char *token;
-    char *t = strtok(NULL, "");
-
-    while ((token = strwordtok(NULL, &t)))
-        wordlistAdd(list, token);
-}
-#endif
-
 void requirePathnameExists(const char *name, const char *path) STUB_NOP
 void parse_time_t(time_t * var) STUB
 char * strtokFile(void) STUB_RETVAL(NULL)
@@ -34,8 +34,3 @@
 #include "squid.h"
 #include "client_side_request.h"
 #include "Store.h"
-
-#if !_USE_INLINE_
-#include "client_side_request.cci"
-#endif
-
@@ -1,6 +1,9 @@
 /*
  * A stub implementation of the Debug.h API.
  * For use by test binaries which do not need the full context debugging
+ *
+ * Note: it doesn't use the STUB API as the functions defined here must
+ * not abort the unit test.
  */
 #include "squid.h"
 #include "Debug.h"
@@ -26,19 +26,19 @@ bool Comm::ConnOpener::doneAll() const STUB_RETVAL(false)
 void Comm::ConnOpener::start() STUB
 void Comm::ConnOpener::swanSong() STUB
 Comm::ConnOpener::ConnOpener(Comm::ConnectionPointer &, AsyncCall::Pointer &, time_t) : AsyncJob("STUB Comm::ConnOpener") STUB
-        Comm::ConnOpener::~ConnOpener() STUB
-        void Comm::ConnOpener::setHost(const char *) STUB
-        const char * Comm::ConnOpener::getHost() const STUB_RETVAL(NULL)
+Comm::ConnOpener::~ConnOpener() STUB
+void Comm::ConnOpener::setHost(const char *) STUB
+const char * Comm::ConnOpener::getHost() const STUB_RETVAL(NULL)
 
 #include "comm/forward.h"
-        bool Comm::IsConnOpen(const Comm::ConnectionPointer &) STUB_RETVAL(false)
+bool Comm::IsConnOpen(const Comm::ConnectionPointer &) STUB_RETVAL(false)
 
 #include "comm/IoCallback.h"
-        void Comm::IoCallback::setCallback(iocb_type type, AsyncCall::Pointer &cb, char *buf, FREE *func, int sz) STUB
-        void Comm::IoCallback::selectOrQueueWrite() STUB
-        void Comm::IoCallback::cancel(const char *reason) STUB
-        void Comm::IoCallback::finish(comm_err_t code, int xerrn) STUB
-        Comm::CbEntry *Comm::iocb_table = NULL;
+void Comm::IoCallback::setCallback(iocb_type type, AsyncCall::Pointer &cb, char *buf, FREE *func, int sz) STUB
+void Comm::IoCallback::selectOrQueueWrite() STUB
+void Comm::IoCallback::cancel(const char *reason) STUB
+void Comm::IoCallback::finish(comm_err_t code, int xerrn) STUB
+Comm::CbEntry *Comm::iocb_table = NULL;
 void Comm::CallbackTableInit() STUB
 void Comm::CallbackTableDestruct() STUB
 
@@ -35,15 +35,10 @@
 
 #include "squid.h"
 
-void
-shut_down(int)
-{ /* stub */ }
+#define STUB_API "stub_main_cc.cc"
+#include "tests/STUB.h"
 
-void
-reconfigure(int)
-{ /* stub */ }
-
-void
-rotate_logs(int)
-{ /* stub */ }
+void shut_down(int) STUB
+void reconfigure(int) STUB
+void rotate_logs(int) STUB
 
@@ -60,10 +60,5 @@ memFreeBufFunc(size_t size)
     return cxx_xfree;
 }
 
-void *
-memAllocate(mem_type type)
-STUB_RETVAL(NULL)
-
-void
-memFree(void *p, int type)
-STUB
+void * memAllocate(mem_type type) STUB_RETVAL(NULL)
+void memFree(void *p, int type) STUB
@@ -34,30 +34,14 @@
 
 #include "squid-old.h"
 
-void
-storeRebuildProgress(int sd_index, int total, int sofar)
-{}
+#define STUB_API "stub_store_rebuild.cc"
+#include "tests/STUB.h"
 
-void
-
-storeRebuildComplete(struct _store_rebuild_data *dc)
-{}
-
-bool
-storeRebuildLoadEntry(int, int, MemBuf&, _store_rebuild_data&)
-{
-    return false;
-}
-
-bool
-storeRebuildKeepEntry(const StoreEntry &tmpe, const cache_key *key,
-                      struct _store_rebuild_data &counts)
-{
-    return false;
-}
-
-bool
-storeRebuildParseEntry(MemBuf &, StoreEntry &, cache_key *, struct _store_rebuild_data &, uint64_t)
+void storeRebuildProgress(int sd_index, int total, int sofar) STUB
+void storeRebuildComplete(struct _store_rebuild_data *dc) STUB_NOP
+bool storeRebuildLoadEntry(int, int, MemBuf&, _store_rebuild_data&)
 {
     return false;
 }
+bool storeRebuildKeepEntry(const StoreEntry &tmpe, const cache_key *key, struct _store_rebuild_data &counts) STUB_RETVAL(false)
+bool storeRebuildParseEntry(MemBuf &, StoreEntry &, cache_key *, struct _store_rebuild_data &, uint64_t) STUB_RETVAL(false)
@@ -49,30 +49,13 @@ IamWorkerProcess()
     return true;
 }
 
-bool
-IamDiskProcess()
-{
-    std::cerr << STUB_API << " IamDiskProcess() Not implemented\n";
-    return false;
-}
-
-bool
-InDaemonMode()
-{
-    std::cerr << STUB_API << " InDaemonMode() Not implemented\n";
-    return false;
-}
-
-bool
-UsingSmp()
-{
-    std::cerr << STUB_API << " UsingSnmp() Not implemented\n";
-    return false;
-}
-
+bool IamDiskProcess() STUB_RETVAL_NOP(false)
+bool InDaemonMode() STUB_RETVAL_NOP(false)
+bool UsingSmp() STUB_RETVAL_NOP(false)
 bool IamCoordinatorProcess() STUB_RETVAL(false)
 bool IamPrimaryProcess() STUB_RETVAL(false)
 int NumberOfKids() STUB_RETVAL(0)
+
 //not yet needed in the Stub, causes dependency on String
 //String ProcessRoles() STUB_RETVAL(String())
 void writePidFile(void) STUB