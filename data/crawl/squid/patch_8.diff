----++++src/dns/rfc3596.cc
@@ -237,100 +237,100 @@ main(int argc, char *argv[])
 
         if ( ! inet_pton(AF_INET, argv[var], &amp;((struct sockaddr_in *)S)-&gt;sin_addr.s_addr) ) {
             perror(&quot;listen address&quot;);
-        exit(EXIT_FAILURE);
+            exit(EXIT_FAILURE);
+        }
     }
-}
 
-while (fgets(input, PACKET_BUFSZ, stdin))
-{
+    while (fgets(input, PACKET_BUFSZ, stdin))
+    {
 
-    struct in6_addr junk6;
+        struct in6_addr junk6;
 
-    struct in_addr junk4;
-    strtok(input, "\r\n");
-    memset(buf, '\0', PACKET_BUFSZ);
-    sz = PACKET_BUFSZ;
+        struct in_addr junk4;
+        strtok(input, "\r\n");
+        memset(buf, '\0', PACKET_BUFSZ);
+        sz = PACKET_BUFSZ;
 
-    if (inet_pton(AF_INET6, input, &amp;junk6)) {
-        sid = rfc1035BuildPTRQuery6(junk6, buf, &amp;sz, edns_max);
-        sidb=0;
-    } else if (inet_pton(AF_INET, input, &amp;junk4)) {
-        sid = rfc1035BuildPTRQuery4(junk4, buf, &amp;sz, edns_max);
-        sidb=0;
-    } else {
-        sid = rfc1035BuildAAAAQuery(input, buf, &amp;sz, edns_max);
-        sidb = rfc1035BuildAQuery(input, buf, &amp;sz, edns_max);
-    }
+        if (inet_pton(AF_INET6, input, &amp;junk6)) {
+            sid = rfc1035BuildPTRQuery6(junk6, buf, &amp;sz, edns_max);
+            sidb=0;
+        } else if (inet_pton(AF_INET, input, &amp;junk4)) {
+            sid = rfc1035BuildPTRQuery4(junk4, buf, &amp;sz, edns_max);
+            sidb=0;
+        } else {
+            sid = rfc1035BuildAAAAQuery(input, buf, &amp;sz, edns_max);
+            sidb = rfc1035BuildAQuery(input, buf, &amp;sz, edns_max);
+        }
 
-    sendto(s, buf, sz, 0, S, sizeof(*S));
+        sendto(s, buf, sz, 0, S, sizeof(*S));
 
-    do {
-        fd_set R;
+        do {
+            fd_set R;
 
-        struct timeval to;
-        FD_ZERO(&amp;R);
-        FD_SET(s, &amp;R);
-        to.tv_sec = 10;
-        to.tv_usec = 0;
-        rl = select(s + 1, &amp;R, NULL, NULL, &amp;to);
-    } while (0);
+            struct timeval to;
+            FD_ZERO(&amp;R);
+            FD_SET(s, &amp;R);
+            to.tv_sec = 10;
+            to.tv_usec = 0;
+            rl = select(s + 1, &amp;R, NULL, NULL, &amp;to);
+        } while (0);
 
-    if (rl &lt; 1) {
-        printf("TIMEOUT\n");
-        continue;
-    }
+        if (rl &lt; 1) {
+            printf("TIMEOUT\n");
+            continue;
+        }
 
-    memset(rbuf, &#39;\0&#39;, PACKET_BUFSZ);
-    rl = recv(s, rbuf, PACKET_BUFSZ, 0);
-    {
-        unsigned short rid = 0;
-        int i;
-        int n;
-        rfc1035_rr *answers = NULL;
-        n = rfc1035AnswersUnpack(rbuf,
-                                 rl,
-                                 &amp;answers,
-                                 &amp;rid);
-
-        if (n &lt; 0) {
-            printf(&quot;ERROR %d\n&quot;, -n);
-        } else if (rid != sid &amp;&amp; rid != sidb) {
-            printf(&quot;ERROR, ID mismatch (%#hx, %#hx)\n&quot;, sid, rid);
-            printf(&quot;ERROR, ID mismatch (%#hx, %#hx)\n&quot;, sidb, rid);
-        } else {
-            printf(&quot;%d answers\n&quot;, n);
-
-            for (i = 0; i &lt; n; i++) {
-                if (answers[i].type == RFC1035_TYPE_A) {
-
-                    struct in_addr a;
-                    char tmp[16];
-                    memcpy(&amp;a, answers[i].rdata, 4);
-                    printf(&quot;A\t%d\t%s\n&quot;, answers[i].ttl, inet_ntop(AF_INET,&amp;a,tmp,16));
-                } else if (answers[i].type == RFC1035_TYPE_AAAA) {
-
-                    struct in6_addr a;
-                    char tmp[INET6_ADDRSTRLEN];
-                    memcpy(&amp;a, answers[i].rdata, 16);
-                    printf(&quot;AAAA\t%d\t%s\n&quot;, answers[i].ttl, inet_ntop(AF_INET6,&amp;a,tmp,sizeof(tmp)));
-                } else if (answers[i].type == RFC1035_TYPE_PTR) {
-                    char ptr[RFC1035_MAXHOSTNAMESZ];
-                    strncpy(ptr, answers[i].rdata, answers[i].rdlength);
-                    printf(&quot;PTR\t%d\t%s\n&quot;, answers[i].ttl, ptr);
-                } else if (answers[i].type == RFC1035_TYPE_CNAME) {
-                    char ptr[RFC1035_MAXHOSTNAMESZ];
-                    strncpy(ptr, answers[i].rdata, answers[i].rdlength);
-                    printf(&quot;CNAME\t%d\t%s\n&quot;, answers[i].ttl, ptr);
-                } else {
-                    fprintf(stderr, &quot;can&#39;t print answer type %d\n&quot;,
-                            (int) answers[i].type);
+        memset(rbuf, &#39;\0&#39;, PACKET_BUFSZ);
+        rl = recv(s, rbuf, PACKET_BUFSZ, 0);
+        {
+            unsigned short rid = 0;
+            int i;
+            int n;
+            rfc1035_rr *answers = NULL;
+            n = rfc1035AnswersUnpack(rbuf,
+                                     rl,
+                                     &amp;answers,
+                                     &amp;rid);
+
+            if (n &lt; 0) {
+                printf(&quot;ERROR %d\n&quot;, -n);
+            } else if (rid != sid &amp;&amp; rid != sidb) {
+                printf(&quot;ERROR, ID mismatch (%#hx, %#hx)\n&quot;, sid, rid);
+                printf(&quot;ERROR, ID mismatch (%#hx, %#hx)\n&quot;, sidb, rid);
+            } else {
+                printf(&quot;%d answers\n&quot;, n);
+
+                for (i = 0; i &lt; n; i++) {
+                    if (answers[i].type == RFC1035_TYPE_A) {
+
+                        struct in_addr a;
+                        char tmp[16];
+                        memcpy(&amp;a, answers[i].rdata, 4);
+                        printf(&quot;A\t%d\t%s\n&quot;, answers[i].ttl, inet_ntop(AF_INET,&amp;a,tmp,16));
+                    } else if (answers[i].type == RFC1035_TYPE_AAAA) {
+
+                        struct in6_addr a;
+                        char tmp[INET6_ADDRSTRLEN];
+                        memcpy(&amp;a, answers[i].rdata, 16);
+                        printf(&quot;AAAA\t%d\t%s\n&quot;, answers[i].ttl, inet_ntop(AF_INET6,&amp;a,tmp,sizeof(tmp)));
+                    } else if (answers[i].type == RFC1035_TYPE_PTR) {
+                        char ptr[RFC1035_MAXHOSTNAMESZ];
+                        strncpy(ptr, answers[i].rdata, answers[i].rdlength);
+                        printf(&quot;PTR\t%d\t%s\n&quot;, answers[i].ttl, ptr);
+                    } else if (answers[i].type == RFC1035_TYPE_CNAME) {
+                        char ptr[RFC1035_MAXHOSTNAMESZ];
+                        strncpy(ptr, answers[i].rdata, answers[i].rdlength);
+                        printf(&quot;CNAME\t%d\t%s\n&quot;, answers[i].ttl, ptr);
+                    } else {
+                        fprintf(stderr, &quot;can&#39;t print answer type %d\n&quot;,
+                                (int) answers[i].type);
+                    }
                 }
             }
         }
     }
-}
 
-return EXIT_SUCCESS;
+    return EXIT_SUCCESS;
 }
 
 #endif
----++++tools/purge/purge.cc
@@ -894,7 +894,7 @@ main( int argc, char* argv[] )
     serverPort = htons(DEFAULTPORT);
     if ( convertHostname(DEFAULTHOST,serverHost) == -1 ) {
         fprintf( stderr, &quot;unable to resolve host %s!\n&quot;, DEFAULTHOST );
-       exit(EXIT_FAILURE);
+        exit(EXIT_FAILURE);
     }
 
     // setup line buffer
----++++GitHub