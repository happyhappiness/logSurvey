@@ -1,7 +1,7 @@
 #
 #  Makefile for the Squid Object Cache server
 #
-#  $Id: Makefile.am,v 1.187 2007/08/26 21:04:32 hno Exp $
+#  $Id: Makefile.am,v 1.188 2007/09/04 17:39:56 hno Exp $
 #
 #  Uncomment and customize the following to suit your needs:
 #
@@ -1023,7 +1023,7 @@ squid.conf.default: cf_parser.h
 	$(SHELL) -c "test -f squid.conf.default || ./cf_gen cf.data"
 
 cf_parser.h: cf.data cf_gen$(EXEEXT)
-	./cf_gen cf.data 
+	./cf_gen cf.data $(srcdir)/cf.data.depend
 
 cf_gen_defines.h: $(srcdir)/cf_gen_defines $(srcdir)/cf.data.pre
 	$(AWK) -f $(srcdir)/cf_gen_defines <$(srcdir)/cf.data.pre >cf_gen_defines.h
@@ -0,0 +1,50 @@
+# type			dependencies
+access_log		acl	logformat
+acl			external_acl_type auth_param
+acl_access		acl
+acl_address		acl
+acl_b_size_t		acl
+acl_tos			acl
+address
+authparam
+b_int64_t
+b_size_t
+cachedir		cache_replacement_policy
+cachemgrpasswd
+debug
+delay_pool_access	acl	delay_class
+delay_pool_class	delay_pools
+delay_pool_count
+delay_pool_rates	delay_class
+denyinfo		acl
+eol
+externalAclHelper	auth_param
+hostdomain		cache_peer
+hostdomaintype		cache_peer
+http_header_access
+http_header_replace
+http_port_list
+https_port_list
+icap_access_type	icap_class acl
+icap_class_type		icap_service
+icap_service_type
+int
+kb_int64_t
+kb_size_t
+logformat
+onoff
+peer
+peer_access		cache_peer acl
+refreshpattern
+removalpolicy
+size_t
+sockaddr_in_list
+string
+string
+time_t
+tristate
+uri_whitespace
+ushort
+wccp2_service
+wccp2_service_info
+wordlist
@@ -1,6 +1,6 @@
 
 /*
- * $Id: cf_gen.cc,v 1.60 2007/08/27 13:37:02 hno Exp $
+ * $Id: cf_gen.cc,v 1.61 2007/09/04 17:39:57 hno Exp $
  *
  * DEBUG: none          Generate squid.conf.default and cf_parser.h
  * AUTHOR: Max Okumoto
@@ -55,6 +55,7 @@
 #define MAX_LINE	1024	/* longest configuration line */
 #define _PATH_PARSER		"cf_parser.h"
 #define _PATH_SQUID_CONF	"squid.conf.default"
+#define _PATH_CF_DEPEND		"cf.data.depend"
 
 enum State {
     sSTART,
@@ -101,8 +102,22 @@ typedef struct Entry
 
 Entry;
 
+typedef struct TypeDep
+{
+    char *name;
+
+    TypeDep *next;
+} TypeDep;
+
+typedef struct Type
+{
+    char *name;
+    TypeDep *depend;
 
-static const char WS[] = " \t";
+    struct Type *next;
+} Type;
+
+static const char WS[] = " \t\n";
 static int gen_default(Entry *, FILE *);
 static void gen_parse(Entry *, FILE *);
 static void gen_parse_entry(Entry *entry, FILE *fp);
@@ -124,16 +139,43 @@ lineAdd(Line ** L, const char *str)
     (*L)->data = xstrdup(str);
 }
 
+static void
+checkDepend(const char *directive, const char *name, const Type *types, const Entry *entries)
+{
+    const Type *type;
+    for (type = types; type; type = type->next) {
+	const TypeDep *dep;
+	if (strcmp(type->name, name) != 0)
+	    continue;
+	for (dep = type->depend; dep; dep = dep->next) {
+	    const Entry *entry;
+	    for (entry = entries; entry; entry = entry->next) {
+		if (strcmp(entry->name, dep->name) == 0)
+		    break;
+	    }
+	    if (!entry) {
+		fprintf(stderr, "ERROR: '%s' (%s) depends on '%s'\n", directive, name, dep->name);
+		exit(1);
+	    }
+	}
+	return;
+    }
+    fprintf(stderr, "ERROR: Dependencies for cf.data type '%s' used in '%s' not defined\n", name, directive);
+    exit(1);
+}
+
 int
 main(int argc, char *argv[])
 {
     FILE *fp;
     char *input_filename = argv[1];
     const char *output_filename = _PATH_PARSER;
     const char *conf_filename = _PATH_SQUID_CONF;
+    const char *type_depend = argv[2];
     int linenum = 0;
     Entry *entries = NULL;
     Entry *curr = NULL;
+    Type *types = NULL;
     enum State state;
     int rc = 0;
     char *ptr = NULL;
@@ -144,6 +186,34 @@ main(int argc, char *argv[])
 
     const char *rmode = "r";
 #endif
+    char buff[MAX_LINE];
+
+
+    /*-------------------------------------------------------------------*
+     * Parse type dependencies
+     *-------------------------------------------------------------------*/
+    if ((fp = fopen(type_depend, rmode)) == NULL) {
+        perror(input_filename);
+        exit(1);
+    }
+
+    while ((NULL != fgets(buff, MAX_LINE, fp))) {
+	const char *type = strtok(buff, WS);
+	const char *dep;
+	if (!type || type[0] == '#')
+	    continue;
+	Type *t = (Type *)xcalloc(1, sizeof(*t));
+	t->name = xstrdup(type);
+	while ((dep = strtok(NULL, WS)) != NULL) {
+	    TypeDep *d = (TypeDep *)xcalloc(1, sizeof(*dep));
+	    d->name = xstrdup(dep);
+	    d->next = t->depend;
+	    t->depend = d;
+	}
+	t->next = types;
+	types = t;
+    }
+    fclose(fp);
 
     /*-------------------------------------------------------------------*
      * Parse input file
@@ -164,7 +234,6 @@ main(int argc, char *argv[])
     state = sSTART;
 
     while (feof(fp) == 0 && state != sEXIT) {
-        char buff[MAX_LINE];
         char *t;
 
         if (NULL == fgets(buff, MAX_LINE, fp))
@@ -261,6 +330,7 @@ main(int argc, char *argv[])
                     *(ptr + strlen(ptr) - 2) = '\0';
                 }
 
+		checkDepend(curr->name, ptr, types, entries);
                 curr->type = xstrdup(ptr);
             } else if (!strncmp(buff, "IFDEF:", 6)) {
                 if ((ptr = strtok(buff + 6, WS)) == NULL) {