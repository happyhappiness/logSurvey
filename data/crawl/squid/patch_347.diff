@@ -9,7 +9,6 @@
 #include "cache_cf.h"
 #include "ConfigParser.h"
 #include "Debug.h"
-#include "wordlist.h"
 
 void
 ACLAdaptationServiceData::parse()
@@ -41,8 +41,8 @@
 #include "cache_cf.h"
 #include "Debug.h"
 #include "eui/Eui48.h"
+#include "globals.h"
 #include "ip/Address.h"
-#include "wordlist.h"
 
 static void aclParseArpList(SplayNode<Eui::Eui48 *> **curlist);
 static int aclMatchArp(SplayNode<Eui::Eui48 *> **dataptr, Ip::Address &c);
@@ -203,15 +203,15 @@ aclDumpArpListWalkee(Eui::Eui48 * const &node, void *state)
 {
     static char buf[48];
     node->encode(buf, 48);
-    wordlistAdd((wordlist **)state, buf);
+    static_cast<SBufList *>(state)->push_back(SBuf(buf));
 }
 
-wordlist *
+SBufList
 ACLARP::dump() const
 {
-    wordlist *w = NULL;
-    data->walk(aclDumpArpListWalkee, &w);
-    return w;
+    SBufList sl;
+    data->walk(aclDumpArpListWalkee, &sl);
+    return sl;
 }
 
 /* ==== END ARP ACL SUPPORT =============================================== */
@@ -58,7 +58,7 @@ class ACLARP : public ACL
     virtual char const *typeString() const;
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
-    virtual wordlist *dump() const;
+    virtual SBufList dump() const;
     virtual bool empty () const;
 
 protected:
@@ -50,7 +50,6 @@
 #include "Store.h"
 #include "StoreClient.h"
 #include "StoreClient.h"
-#include "wordlist.h"
 
 #define WHOIS_PORT 43
 #define	AS_REQBUF_SZ	4096
@@ -37,7 +37,6 @@
 #include "acl/Strategised.h"
 #include "CbDataList.h"
 #include "ip/Address.h"
-#include "SBufList.h"
 
 int asnMatchIp(CbDataList<int> *, Ip::Address &);
 
@@ -2,7 +2,6 @@
 #include "acl/BoolOps.h"
 #include "acl/Checklist.h"
 #include "Debug.h"
-#include "wordlist.h"
 
 /* Acl::NotNode */
 
@@ -38,7 +38,6 @@
 #include "cache_cf.h"
 #include "Debug.h"
 #include "src/URL.h"
-#include "wordlist.h"
 
 template<class T>
 inline void
@@ -41,8 +41,8 @@
 #include "cache_cf.h"
 #include "Debug.h"
 #include "eui/Eui64.h"
+#include "globals.h"
 #include "ip/Address.h"
-#include "wordlist.h"
 
 static void aclParseEuiList(SplayNode<Eui::Eui64 *> **curlist);
 static int aclMatchEui(SplayNode<Eui::Eui64 *> **dataptr, Ip::Address &c);
@@ -177,13 +177,13 @@ aclDumpEuiListWalkee(Eui::Eui64 * const &node, void *state)
 {
     static char buf[48];
     node->encode(buf, 48);
-    wordlistAdd((wordlist **)state, buf);
+    static_cast<SBufList *>(state)->push_back(SBuf(buf));
 }
 
-wordlist *
+SBufList
 ACLEui64::dump() const
 {
-    wordlist *w = NULL;
+    SBufList w;
     data->walk(aclDumpEuiListWalkee, &w);
     return w;
 }
@@ -57,7 +57,7 @@ class ACLEui64 : public ACL
     virtual char const *typeString() const;
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
-    virtual wordlist *dump() const;
+    virtual SBufList dump() const;
     virtual bool empty () const;
 
 protected:
@@ -42,7 +42,6 @@
 #include "Debug.h"
 #include "HttpHeaderTools.h"
 #include "SBuf.h"
-#include "wordlist.h"
 
 /* Construct an ACLHTTPHeaderData that uses an ACLRegex rule with the value of the
  * selected header from a given request.
@@ -38,7 +38,6 @@
 #include "cache_cf.h"
 #include "Debug.h"
 #include "HttpReply.h"
-#include "wordlist.h"
 
 #include <climits>
 
@@ -7,7 +7,6 @@
 #include "ConfigParser.h"
 #include "Debug.h"
 #include "globals.h"
-#include "wordlist.h"
 #include <algorithm>
 
 void
@@ -37,7 +37,6 @@
 #include "cache_cf.h"
 #include "Debug.h"
 #include "Parsing.h"
-#include "wordlist.h"
 
 /* explicit instantiation required for some systems */
 /** \cond AUTODOCS_IGNORE */
@@ -36,7 +36,6 @@
 #include "acl/Data.h"
 #include "CbDataList.h"
 #include "Range.h"
-#include "SBufList.h"
 
 /// \ingroup ACLAPI
 class ACLIntRange : public ACLData<int>
@@ -39,7 +39,6 @@
 #include "client_db.h"
 #include "Debug.h"
 #include "SquidConfig.h"
-#include "wordlist.h"
 
 ACL *
 ACLMaxConnection::clone() const
@@ -104,21 +103,17 @@ ACLMaxConnection::match(ACLChecklist *checklist)
     return clientdbEstablished(Filled(checklist)->src_addr, 0) > limit ? 1 : 0;
 }
 
-wordlist *
+SBufList
 ACLMaxConnection::dump() const
 {
+    SBufList sl;
     if (!limit)
-        return NULL;
+        return sl;
 
-    wordlist *W = NULL;
-
-    char buf[32];
-
-    snprintf(buf, sizeof(buf), "%d", limit);
-
-    wordlistAdd(&W, buf);
-
-    return W;
+    SBuf s;
+    s.Printf("%d", limit);
+    sl.push_back(s);
+    return sl;
 }
 
 void
@@ -52,7 +52,7 @@ class ACLMaxConnection : public ACL
     virtual char const *typeString() const;
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
-    virtual wordlist *dump() const;
+    virtual SBufList dump() const;
     virtual bool empty () const;
     virtual bool valid () const;
     virtual void prepareForUse();
@@ -37,7 +37,6 @@
 #include "acl/MethodData.h"
 #include "cache_cf.h"
 #include "HttpRequestMethod.h"
-#include "wordlist.h"
 
 int ACLMethodData::ThePurgeCount = 0;
 
@@ -68,18 +67,18 @@ ACLMethodData::match(HttpRequestMethod toFind)
 template cbdata_type CbDataList<HttpRequestMethod>::CBDATA_CbDataList;
 /// \endcond
 
-wordlist *
+SBufList
 ACLMethodData::dump()
 {
-    wordlist *W = NULL;
+    SBufList sl;
     CbDataList<HttpRequestMethod> *data = values;
 
     while (data != NULL) {
-        wordlistAdd(&W, RequestMethodStr(data->element));
+        sl.push_back(SBuf(RequestMethodStr(data->element)));
         data = data->next;
     }
 
-    return W;
+    return sl;
 }
 
 void
@@ -50,7 +50,7 @@ class ACLMethodData : public ACLData<HttpRequestMethod>
     ACLMethodData &operator= (ACLMethodData const &);
     virtual ~ACLMethodData();
     bool match(HttpRequestMethod);
-    wordlist *dump();
+    SBufList dump();
     void parse();
     bool empty() const;
     virtual ACLData<HttpRequestMethod> *clone() const;
@@ -51,15 +51,13 @@ ACLNoteData::match(HttpRequest *request)
     return false;
 }
 
-wordlist *
+SBufList
 ACLNoteData::dump()
 {
-    wordlist *W = NULL;
-    wordlistAdd(&W, name.termedBuf());
-    wordlist * dumpR = values->dump();
-    wordlistAddWl(&W, dumpR);
-    wordlistDestroy(&dumpR);
-    return W;
+    SBufList sl;
+    sl.push_back(SBuf(name));
+    sl.splice(sl.end(),values->dump());
+    return sl;
 }
 
 void
@@ -17,7 +17,7 @@ class ACLNoteData : public ACLData<HttpRequest *>
     ACLNoteData();
     virtual ~ACLNoteData();
     virtual bool match(HttpRequest* request);
-    virtual wordlist *dump();
+    virtual SBufList dump();
     virtual void parse();
     virtual bool empty() const;
     virtual ACLData<HttpRequest *> *clone() const;
@@ -65,18 +65,18 @@ ACLProtocolData::match(AnyP::ProtocolType toFind)
 template cbdata_type CbDataList<AnyP::ProtocolType>::CBDATA_CbDataList;
 /// \endcond
 
-wordlist *
+SBufList
 ACLProtocolData::dump()
 {
-    wordlist *W = NULL;
+    SBufList sl;
     CbDataList<AnyP::ProtocolType> *data = values;
 
     while (data != NULL) {
-        wordlistAdd(&W, AnyP::ProtocolType_str[data->element]);
+        sl.push_back(SBuf(AnyP::ProtocolType_str[data->element]));
         data = data->next;
     }
 
-    return W;
+    return sl;
 }
 
 void
@@ -50,7 +50,7 @@ class ACLProtocolData : public ACLData<AnyP::ProtocolType>
     ACLProtocolData &operator= (ACLProtocolData const &);
     virtual ~ACLProtocolData();
     bool match(AnyP::ProtocolType);
-    wordlist *dump();
+    SBufList dump();
     void parse();
     bool empty() const;
     virtual ACLData<AnyP::ProtocolType> *clone() const;
@@ -135,10 +135,10 @@ ACLRandom::match(ACLChecklist *cl)
     return (data > random)?1:0;
 }
 
-wordlist *
+SBufList
 ACLRandom::dump() const
 {
-    wordlist *w = NULL;
-    wordlistAdd(&w, pattern);
-    return w;
+    SBufList sl;
+    sl.push_back(SBuf(pattern));
+    return sl;
 }
@@ -51,7 +51,7 @@ class ACLRandom : public ACL
     virtual char const *typeString() const;
     virtual void parse();
     virtual int match(ACLChecklist *checklist);
-    virtual wordlist *dump() const;
+    virtual SBufList dump() const;
     virtual bool empty () const;
     virtual bool valid() const;
 
@@ -34,7 +34,6 @@
 
 #include "acl/Data.h"
 #include "MemPool.h"
-#include "SBufList.h"
 
 class RegexList;
 
@@ -146,19 +146,14 @@ ACLMaxUserIP::match(ACLChecklist *cl)
     }
 }
 
-wordlist *
+SBufList
 ACLMaxUserIP::dump() const
 {
+    SBufList sl;
     if (!maximum)
-        return NULL;
-
-    wordlist *W = NULL;
-
-    char buf[128];
-
-    snprintf(buf, sizeof(buf), "%lu", (unsigned long int) maximum);
-
-    wordlistAdd(&W, buf);
-
-    return W;
+        return sl;
+    SBuf s;
+    s.Printf("%lu", (unsigned long int) maximum);
+    sl.push_back(s);
+    return sl;
 }
@@ -54,7 +54,7 @@ class ACLMaxUserIP : public ACL
     virtual char const *typeString() const;
     virtual void parse();
     virtual int match(ACLChecklist *cl);
-    virtual wordlist *dump() const;
+    virtual SBufList dump() const;
     virtual bool empty() const;
     virtual bool valid() const;
     virtual bool requiresRequest() const {return true;}