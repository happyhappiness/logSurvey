url,date,title,changes,file_name,reason_for_consistence,is_trivial,old_hunk_file,new_hunk_file,old_loc,new_loc,old_log,new_log,edit_types,edit_words,edit_feature,cluster,wait_time
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1006.cpp,,,data/crawl/squid/old_hunk_1006.cpp,data/crawl/squid/new_hunk_1006.cpp,3,3,"mb->Printf(""%s\n"", w->key);","mb->appendf(""%s\n"", w->key);","[""updateLog""]","[[""Printf""], [""appendf""]]",[-403317783590601070],7733,"44 days, 13:38:37.808219"
https://github.com/squid-cache/squid/commit/0153d498880f1f43fc7cc424b42330b560858c74,06 Jul 1997,config fixes in progress,800,data/crawl/squid/hunk_7154.cpp,,,data/crawl/squid/old_hunk_7154.cpp,data/crawl/squid/new_hunk_7154.cpp,12,-1,"fatal(""not implemented"");",,"[""removeLog""]","[[""fatal"", ""not"", ""implemented""], []]",[8889578217720560850],7731,"5376 days, 15:33:20"
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,-1,642,,"fatal(""not implemented"");","[""addLog""]","[[], [""fatal"", ""not"", ""implemented""]]",[-8889578217720560850],7730,"3810 days, 15:12:28.514851"
https://github.com/squid-cache/squid/commit/b69e9ffa9e2a148e2abc08511ebc5378697a7b6c,03 Apr 2016,Cleanup: remove xstrerror(),1093,data/crawl/squid/hunk_330.cpp,,,data/crawl/squid/old_hunk_330.cpp,data/crawl/squid/new_hunk_330.cpp,15,14,"fprintf(stderr, ""\t%s: %s\n"", f, xstrerror());","fprintf(stderr, ""\t%s: %s\n"", f, xstrerr(xerrno));","[""updateVariable"", ""addVariable""]","[[""xstrerror""], [""xstrerr"", ""xerrno""]]",[-692937571753102809],7729,"30 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ec85ebda81e7645a60fd0cc947a10754a668c55e,03 Sep 2009,Fix some build errors,86,data/crawl/squid/hunk_3612.cpp,,,data/crawl/squid/old_hunk_3612.cpp,data/crawl/squid/new_hunk_3612.cpp,3,3,"fprintf(stderr, ""cmgr: verified auth. info.\n"");","debug(""cmgr: verified auth. info.\n"");","[""updateLog"", ""removeVariable""]","[[""fprintf"", ""stderr""], [""debug""]]",[21637425830572660846],7728,"196 days, 12:10:44.776119"
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7825.cpp,,,data/crawl/squid/old_hunk_7825.cpp,data/crawl/squid/new_hunk_7825.cpp,-1,53,,"storeAppendPrintf(sentry, ""}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\n""]]",[6080590955771865090],7727,"1034 days, 21:31:02.068965"
https://github.com/squid-cache/squid/commit/d41de3c1626f9117c0674d8b1ce1407001632618,21 Feb 1998,filled in more config dump funcs,60,data/crawl/squid/hunk_6777.cpp,,,data/crawl/squid/old_hunk_6777.cpp,data/crawl/squid/new_hunk_6777.cpp,-1,8,,"storeAppendPrintf(entry, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""\\n""]]",[3924684621819481232],7726,"3903 days, 6:56:00"
https://github.com/squid-cache/squid/commit/96e9c799d793b401a9aee746e42294e8d8c2805d,03 Mar 2011,Add some stubs and undo some problematic make optimizations,256,data/crawl/squid/hunk_2705.cpp,,,data/crawl/squid/old_hunk_2705.cpp,data/crawl/squid/new_hunk_2705.cpp,-1,123,,"fatal(""pconn.cc required"");","[""addLog""]","[[], [""fatal"", ""pconn"", ""cc"", ""required""]]",[-13636338255685932867],7725,"55 days, 5:08:34.285714"
https://github.com/squid-cache/squid/commit/9bc73deb181f454f4e5597c67c5b6b40fd4d0f58,04 Oct 1999,2.3 branch merge,3942,data/crawl/squid/hunk_6094.cpp,,,data/crawl/squid/old_hunk_6094.cpp,data/crawl/squid/new_hunk_6094.cpp,-1,15,,"printf(""ERR\n"");","[""addLog""]","[[], [""printf"", ""ERR\\n""]]",[15522548339914942793],7724,"1143 days, 5:16:05.853658"
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6826.cpp,,,data/crawl/squid/old_hunk_6826.cpp,data/crawl/squid/new_hunk_6826.cpp,62,60,"storeAppendPrintf(sentry, ""{\t%d = %d}\n"", size, number);","storeAppendPrintf(sentry, ""\t%d = %d\n"", size, number);","[""updateContent""]","[[""%d"", ""\\n""], [""%d\\n""]]",[6128436140151560348],7723,0:00:00
https://github.com/squid-cache/squid/commit/ac5de05bed05906909d7ccc894f940438b8a9967,29 Sep 2010,"Bug 3051: integer display overflow

This alters the cachemgr display formatting to use 64-bit integers
instead of 32-bit. Revealing overflows hiding behind display overflows.",302,data/crawl/squid/hunk_3018.cpp,,,data/crawl/squid/old_hunk_3018.cpp,data/crawl/squid/new_hunk_3018.cpp,97,97,"storeAppendPrintf(sentry, ""cd.kbytes_recv = %d\n"",
                      (int) f->cd.kbytes_recv.kb);","storeAppendPrintf(sentry, ""cd.kbytes_recv = %ld\n"",
                      (long) f->cd.kbytes_recv.kb);","[""updateVariable"", ""updateContent""]","[[""%d\\n"", ""int""], [""%ld\\n"", ""long""]]",[5116502832370718979],7722,0:00:00
https://github.com/squid-cache/squid/commit/99524de767643cfa219d1fdcf9981086effac20c,29 Jan 2009,"Refactoring: renamed String::buf() to unsafeBuf().
Introduced aliases for it named String::rawBuf() and String::termedBuf().
Introduced String::defined() and String::undefined().",561,data/crawl/squid/hunk_3999.cpp,,,data/crawl/squid/old_hunk_3999.cpp,data/crawl/squid/new_hunk_3999.cpp,12,12,"printf(""%c"", anEntry->_appended_text.buf()[i] );","printf(""%c"", anEntry->_appended_text.unsafeBuf()[i] );","[""updateVariable""]","[[""buf""], [""unsafeBuf""]]",[2412284708412051408],7721,"2 days, 3:50:24"
https://github.com/squid-cache/squid/commit/a97cfa48d9c10f3b983d04060c984d1c07f081e0,02 Dec 1997,SNMP changes to get snmpwalk working,485,data/crawl/squid/hunk_6905.cpp,,,data/crawl/squid/old_hunk_6905.cpp,data/crawl/squid/new_hunk_6905.cpp,4,4,"fprintf(debug_log, ""\tTotal free:            %6d KB %d%%\n"",
	ms.bytes_free >> 10,
	percent(ms.bytes_free, ms.bytes_total));","fprintf(debug_log, ""\tTotal free:            %6d KB %d%%\n"",
	(int) (ms.bytes_free >> 10),
	percent(ms.bytes_free, ms.bytes_total));","[""addVariable""]","[[], [""int""]]",[-7555364370854764664],7720,"2876 days, 6:43:12"
https://github.com/squid-cache/squid/commit/6cb2818da50678f522eef8ad482e04bbebeb1ac3,05 May 2014,"Support concurrency channels in Digest authentication helpers

All bundled digest helpers will now automatically detect the existence
of a concurrecy channel-ID and adjust responses appropriately.

The auth_param children concurrency= parameter can now be set to any
valid value without needing to alter the helper binary. This resolves
issues upgrading to default-on concurrency on the digest auth interface.",44,data/crawl/squid/hunk_1504.cpp,,,data/crawl/squid/old_hunk_1504.cpp,data/crawl/squid/new_hunk_1504.cpp,-1,4,,"printf(""%u "", requestData.channelId);","[""addLog""]","[[], [""printf"", ""%u"", ""requestData"", ""channelId""]]",[3098921161029892682],7719,"16 days, 6:00:00"
https://github.com/squid-cache/squid/commit/10201568d9c80bb89cbe628c07dd043d72d20b50,04 Mar 2015,"MemBuf implements Packable interface

... detatch it from Packer wrapper class",191,data/crawl/squid/hunk_1009.cpp,,,data/crawl/squid/old_hunk_1009.cpp,data/crawl/squid/new_hunk_1009.cpp,10,7,"mb->Printf(""\r\n"");","mb->append(""\r\n"", 2);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""2""]]",[-16152299998899699014],7718,"44 days, 8:20:52.173913"
https://github.com/squid-cache/squid/commit/253caccb08f5a5a23ec0c9b89272145213c09ec0,26 Jan 2006,"The purpose of this change is to add ICAP RESPMOD support for FTP responses.

I created a ""ServerStateData"" class which has common elements of both
HttpStateData and FtpStateData.  It becomes a base class for both
of them.  ICAP now uses the ServerStateData methods.",643,data/crawl/squid/hunk_4884.cpp,,,data/crawl/squid/old_hunk_4884.cpp,data/crawl/squid/new_hunk_4884.cpp,100,103,"storeAppendPrintf(entry, ""Generated %s by %s (%s)\n"",
                      mkrfc1123(squid_curtime),
                      getMyHostname(),
                      visible_appname_string);","printfReplyBody(""Generated %s by %s (%s)\n"",
                    mkrfc1123(squid_curtime),
                    getMyHostname(),
                    visible_appname_string);","[""updateLog"", ""removeVariable""]","[[""storeAppendPrintf"", ""entry""], [""printfReplyBody""]]",[-4645287094243982784],7717,0:00:00
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4183.cpp,,,data/crawl/squid/old_hunk_4183.cpp,data/crawl/squid/new_hunk_4183.cpp,7,7,"fprintf(stdout, ""NA Not enough memory\n"");","fprintf(stdout, ""BH Not enough memory\n"");","[""updateContent""]","[[""NA""], [""BH""]]",[-1536009228013789],7716,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ac5de05bed05906909d7ccc894f940438b8a9967,29 Sep 2010,"Bug 3051: integer display overflow

This alters the cachemgr display formatting to use 64-bit integers
instead of 32-bit. Revealing overflows hiding behind display overflows.",302,data/crawl/squid/hunk_3018.cpp,,,data/crawl/squid/old_hunk_3018.cpp,data/crawl/squid/new_hunk_3018.cpp,117,117,"storeAppendPrintf(sentry, ""aborted_requests = %d\n"",
                      f->aborted_requests);","storeAppendPrintf(sentry, ""aborted_requests = %ld\n"",
                      (long)f->aborted_requests);","[""updateContent"", ""addVariable""]","[[""%d\\n""], [""%ld\\n"", ""long""]]",[-2438861538484045685],7715,0:00:00
https://github.com/squid-cache/squid/commit/db9f331f288347273093daaf93ac69c41bd3a546,29 Aug 1996,html cleanup,14,data/crawl/squid/hunk_7615.cpp,,,data/crawl/squid/old_hunk_7615.cpp,data/crawl/squid/new_hunk_7615.cpp,3,-1,"storeAppendPrintf(sentry, ""{}\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\n""], []]",[-6080590955771865090],7714,"2072 days, 1:05:27.272727"
https://github.com/squid-cache/squid/commit/30abd2216c340de83251e6e42e6566de0fd23766,29 May 2007,Rollback String API changes. Delayed to 3.1.,2195,data/crawl/squid/hunk_4586.cpp,,,data/crawl/squid/old_hunk_4586.cpp,data/crawl/squid/new_hunk_4586.cpp,22,22,"rep->header.putStr(HDR_X_ACCELERATOR_VARY, vary.c_str());","rep->header.putStr(HDR_X_ACCELERATOR_VARY, vary.buf());","[""updateVariable""]","[[""c_str""], [""buf""]]",[-277036821796306822],7713,0:00:00
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/hunk_2353.cpp,,,data/crawl/squid/old_hunk_2353.cpp,data/crawl/squid/new_hunk_2353.cpp,129,-1,"fatal(""pconn.cc required"");",,"[""removeLog""]","[[""fatal"", ""pconn"", ""cc"", ""required""], []]",[13636338255685932867],7712,0:00:00
https://github.com/squid-cache/squid/commit/86c0aed6f3d6225d2769d5eee25eb4d1d7eb1e44,18 May 2007,"Add string API layer for better string handling.

For various reasons listed below we adopt the std::string API (but not the implementation) as the basis for string operations.

This patch reverts the SquidString.h file to provide only the main API and hooks for any string implementation behind the API.

For Release 3.0 the old String (now SqString) will remain the default string core.
That code has been kept in this patch with some minor modifications and bug fixes as listed below.

For Release 3.1 it is expected that a better string core will be developed.

Reasons for these changes:

The initial String implementation was incomplete and non-standard causing some risky operations at points in the code and duplicated some operations.
std::string provides a better known API for string handling which is widely use amongst other string implementations beyond std::string itself and this enables std::string or a derivative to be used in squid at some future date.
String as used previously is a defined alternative to std::string in some systems

This patch:
   - moves the old String class to SqString
   - provides the well-known type of 'string' for general use
   - provides implicit conversion from char* and char[] types
   - migrates custom functions to well-known API:
       buf()           -> c_str()
       clean()         -> clear()
   - removes redundant functions:
       buf(char*)      -> operator=(char*)
       initBuf(char*)  -> operator=(char*)
       reset(char*)    -> operator=(char*)
   - adds well-known API methods for safer string use:
       operator []
       empty()
       operator <<
       strcmp(), strcasecmp(), etc
   - May fix bug #1088 - segmentation fault after append(char*,int)
   - Fixes several unreported char* handling bugs in String/SqString",2203,data/crawl/squid/hunk_4619.cpp,,,data/crawl/squid/old_hunk_4619.cpp,data/crawl/squid/new_hunk_4619.cpp,22,22,"rep->header.putStr(HDR_X_ACCELERATOR_VARY, vary.buf());","rep->header.putStr(HDR_X_ACCELERATOR_VARY, vary.c_str());","[""updateVariable""]","[[""buf""], [""c_str""]]",[277036821796306822],7711,0:00:00
https://github.com/squid-cache/squid/commit/a98bcbee0005004c1aa26042060eb1dd7dad482b,02 Dec 2009,"Shuffle simple math functions into SquidMath

This unlinks many depencies pulled in by tools.cc through the more
complicated permissions, and death reporting code.",230,data/crawl/squid/hunk_3494.cpp,,,data/crawl/squid/old_hunk_3494.cpp,data/crawl/squid/new_hunk_3494.cpp,7,7,"fprintf(debug_log, ""\tTotal free:            %6d KB %d%%\n"",
            t >> 10, percent(t, mp.arena));","fprintf(debug_log, ""\tTotal free:            %6d KB %d%%\n"",
            t >> 10, Math::intPercent(t, mp.arena));","[""removeVariable"", ""addVariable""]","[[""percent""], [""Math"", ""intPercent""]]",[-11117553028743557694],7710,0:00:00
https://github.com/squid-cache/squid/commit/96e9c799d793b401a9aee746e42294e8d8c2805d,03 Mar 2011,Add some stubs and undo some problematic make optimizations,256,data/crawl/squid/hunk_2704.cpp,,,data/crawl/squid/old_hunk_2704.cpp,data/crawl/squid/new_hunk_2704.cpp,-1,66,,"fatal(""client_db.cc required"");","[""addLog""]","[[], [""fatal"", ""client_db"", ""cc"", ""required""]]",[-11584999754346286923],7709,"53 days, 0:00:00"
https://github.com/squid-cache/squid/commit/227fbb743cd8b4d75aa0772d1845cc3740c82b5d,02 Apr 1996,"Significant change to storage manager.  Now we don't add the object
to the hash table when it is created.  Instead it must be explicitly
added if the object is public.  storeAdd() has been split into
two functions: storeCreateEntry() and storeAddEntry().  The first is
called where storeAdd() was called.  The second is called when the
object is known to be publicly sharable.  For HTTP this means
after the reply header is parsed.  For other objects it storeAddEntry()
gets called immediately, as there is no header parsing.",369,data/crawl/squid/hunk_7903.cpp,,,data/crawl/squid/old_hunk_7903.cpp,data/crawl/squid/new_hunk_7903.cpp,11,-1,fatal_dump(NULL);,,"[""removeLog""]","[[""fatal_dump"", ""NULL""], []]",[12879563083587916188],7708,"274 days, 20:12:37.894736"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7755.cpp,,,data/crawl/squid/old_hunk_7755.cpp,data/crawl/squid/new_hunk_7755.cpp,-1,81,,"storeAppendPrintf(sentry, close_bracket);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""close_bracket""]]",[14804266055628296458],7707,"42 days, 1:24:42.352941"
https://github.com/squid-cache/squid/commit/85b701ed1a34fda890a2bfa71fbfbfe5d5021418,12 Sep 1996,"        - Fixed stupid coredump bug in storeGetSwapSpace().
        - Added debug_trap() to replace some fatal_dump()'s.  Now use
          debug_trap for non-fatal errors.  If -C option is set,
          then debug_trap is the same as fatal_dump.",111,data/crawl/squid/hunk_7588.cpp,,,data/crawl/squid/old_hunk_7588.cpp,data/crawl/squid/new_hunk_7588.cpp,3,3,"fatal_dump(""storeGetMemSpace: Bad Entry in LRU list"");","debug_trap(""storeGetMemSpace: Bad Entry in LRU list"");","[""updateLog""]","[[""fatal_dump""], [""debug_trap""]]",[12404155701656691210],7706,"6 days, 2:49:24.705882"
https://github.com/squid-cache/squid/commit/af00901c8240077af4a9e5758dd6c30f14564802,27 Aug 1996,merge from SQUID_1_0_10,477,data/crawl/squid/hunk_7634.cpp,,,data/crawl/squid/old_hunk_7634.cpp,data/crawl/squid/new_hunk_7634.cpp,25,-1,"storeAppendPrintf(sentry, close_bracket);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""close_bracket""], []]",[-14804266055628296458],7705,"453 days, 11:17:38.823529"
https://github.com/squid-cache/squid/commit/9e4ad609cdc6849a20b298e7c2437007109b80fc,05 May 1997,"- DO NOT set the filemap bits for unvalidated entries.  Doing so
  causes lots of race-condition problems, especially when reading
  DIRTY logs.
- Install icpDetectClientClose handler earlier.  Move from access check
  to just after reading the request.
- Log open FD's upon exit.
- Added dnsShutdownRead handler to detect dnsserver shutdowns and
  free up state.
- Added doubleAverage and integerAverage for moving average
  calculations.
- misc prototype cleanup
- misc debug_trap's and fatal_dump's
- Removed some thread splitting for fooStartComplete() because
  the various protcol start routines should never need a swapin
  callback.  The object should already be locked and swapped in.
- queue_length counter for IP cache.
- Make it okay to storeUnlock a pending object, so long as its
  not been DISPATCHED yet.
- fixed hybrid store rebuild code.
- fixed file_open() flags to TRUNC new swaplog's
- Claned up wierd (FILE *) stuff in tools.c, always write to
  debug_log().
- rewrote writePidFile() to use file_open().",505,data/crawl/squid/hunk_7265.cpp,,,data/crawl/squid/old_hunk_7265.cpp,data/crawl/squid/new_hunk_7265.cpp,41,41,"fprintf(f, ""\tbytes used in maintaining the free tree:\t%d\n"",
	mp.treeoverhead);","fprintf(debug_log, ""\tbytes used in maintaining the free tree:\t%d\n"",
	mp.treeoverhead);","[""updateVariable""]","[[""f""], [""debug_log""]]",[-1054936003883337168],7704,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,155,154,"storeAppendPrintf(sentry, ""{\t%-25.25s                      = %6d KB}\n"",
	""Total Accounted"",
	statMemoryAccounted() >> 10);","storeAppendPrintf(sentry, ""\t%-25.25s                      = %6d KB\n"",
	""Total Accounted"",
	statMemoryAccounted() >> 10);","[""updateContent""]","[[""KB"", ""\\n""], [""KB\\n""]]",[1791130042753803100],7703,0:00:00
https://github.com/squid-cache/squid/commit/9bc73deb181f454f4e5597c67c5b6b40fd4d0f58,04 Oct 1999,2.3 branch merge,3942,data/crawl/squid/hunk_6094.cpp,,,data/crawl/squid/old_hunk_6094.cpp,data/crawl/squid/new_hunk_6094.cpp,-1,17,,"printf(""OK\n"");","[""addLog""]","[[], [""printf"", ""OK\\n""]]",[7225515199027138487],7702,"1399 days, 1:36:00"
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/hunk_3436.cpp,,,data/crawl/squid/old_hunk_3436.cpp,data/crawl/squid/new_hunk_3436.cpp,3,3,"fprintf(stderr, ""%s| %s: Not enough memory\n"", LogTime(),
                            PROGRAM);","fprintf(stderr, ""%s| %s: ERROR: Not enough memory\n"", LogTime(),
                            PROGRAM);","[""updateContent""]","[[], [""ERROR""]]",[8285138784999380343],7701,"60 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/hunk_3426.cpp,,,data/crawl/squid/old_hunk_3426.cpp,data/crawl/squid/new_hunk_3426.cpp,2,2,"fprintf(stderr,
                            ""%s| %s: fgets() failed! dying..... errno=%d (%s)\n"",
                            LogTime(), PROGRAM, ferror(stdin),
                            strerror(ferror(stdin)));","fprintf(stderr,
                            ""%s| %s: FATAL: fgets() failed! dying..... errno=%d (%s)\n"",
                            LogTime(), PROGRAM, ferror(stdin),
                            strerror(ferror(stdin)));","[""updateContent""]","[[], [""FATAL""]]",[-4947173928198612933],7700,"126 days, 1:36:00"
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3284.cpp,,,data/crawl/squid/old_hunk_3284.cpp,data/crawl/squid/new_hunk_3284.cpp,5,5,"printf(""ERR\n"");","SEND_ERR("""");","[""updateLog"", ""updateContent""]","[[""printf"", ""ERR\\n""], [""SEND_ERR""]]",[-7889771974565263663],7699,"7 days, 17:36:00"
https://github.com/squid-cache/squid/commit/6bccf575a04146f1d4a205445a1b1814d9f09482,05 Jan 2001,"Ian Turner (vectro@pipeline.com) sent in this patch for ACL-based
header anonymization, filtering, and replacing.",363,data/crawl/squid/hunk_5927.cpp,,,data/crawl/squid/old_hunk_5927.cpp,data/crawl/squid/new_hunk_5927.cpp,-1,67,,"storeAppendPrintf(entry, ""%s:"", name);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""name""]]",[-248933907621281061],7698,"3363 days, 16:00:00"
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/hunk_83.cpp,,,data/crawl/squid/old_hunk_83.cpp,data/crawl/squid/new_hunk_83.cpp,3,3,"auth_user_request->denyMessage(""Login successful"");","auth_user_request->setDenyMessage(""Login successful"");","[""updateLog""]","[[""denyMessage""], [""setDenyMessage""]]",[10306481890596025221],7697,"3 days, 4:48:00"
https://github.com/squid-cache/squid/commit/635e6242db4ed619a611a269edec9b280690b109,12 Jan 1999,"IRIX inline IO optimization ( -OPT:fast_io=ON) fubars this:

	fprintf(fopen(""foo"", ""w""), ""%d"", val);",128,data/crawl/squid/hunk_6196.cpp,,,data/crawl/squid/old_hunk_6196.cpp,data/crawl/squid/new_hunk_6196.cpp,5,7,"fprintf (fopen(""conftestval"", ""w""), ""%s\n"", inet_ntoa(in));","fprintf (fp, ""%s\n"", inet_ntoa(in));","[""removeVariable"", ""removeContent"", ""addVariable""]","[[""fopen"", ""conftestval"", ""w""], [""fp""]]",[-6413025362998860845],7696,0:00:00
https://github.com/squid-cache/squid/commit/bf1a7ece574ba696a111e941af3c1c3eb964f449,20 Jul 2010,"Author: Chad E. Naugle <chad.naugle@travimp.com>
Bug 2905: eDirectory (8.7 & 8.8) IPv4/IPv6->Username external ACL helper

Original code import.",2168,data/crawl/squid/hunk_3126.cpp,,,data/crawl/squid/old_hunk_3126.cpp,data/crawl/squid/new_hunk_3126.cpp,-1,144,,"fputs(dbuf, stderr);","[""addLog""]","[[], [""fputs"", ""dbuf"", ""stderr""]]",[-21040805309855973594],7695,"30 days, 12:00:00"
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,113,,"fprintf(stderr, ""----------------------\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\n""]]",[-13913879213697345406],7694,"3051 days, 1:42:51.428571"
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/hunk_5838.cpp,,,data/crawl/squid/old_hunk_5838.cpp,data/crawl/squid/new_hunk_5838.cpp,30,-1,"printf(""ERR\n"");",,"[""removeLog""]","[[""printf"", ""ERR\\n""], []]",[-15522548339914942793],7693,"1301 days, 1:42:51.428571"
https://github.com/squid-cache/squid/commit/c70281f8bdba2a5f525ddea764667975bbd79eb3,22 Jul 2008,"Cleanups: shuffle ErrorState functions into methods.

No other changes than namespace moves.",228,data/crawl/squid/hunk_4252.cpp,,,data/crawl/squid/old_hunk_4252.cpp,data/crawl/squid/new_hunk_4252.cpp,3,3,"httpHeaderPutStrf(&rep->header, HDR_X_SQUID_ERROR, ""%s %d"",
                          name, err->xerrno);","httpHeaderPutStrf(&rep->header, HDR_X_SQUID_ERROR, ""%s %d"", name, xerrno);","[""removeVariable"", ""addVariable""]","[[""err""], []]",[3051142320815333018],7692,0:00:00
https://github.com/squid-cache/squid/commit/7dbca7a4b0bf79fe0d6575e03fd02b774d953de4,02 Jul 2008,"Cleanup: Drop appname and full_appname_string constant globals

appname array only ever held a duplicate of ""squid""
      - calling it APP_SHORTNAME now instead of a global

full_appname_string only ever held the catenation VERSION""/""PACKAGE macros
      - calling it APP_FULLNAME now instead of a global",78,data/crawl/squid/hunk_4279.cpp,,,data/crawl/squid/old_hunk_4279.cpp,data/crawl/squid/new_hunk_4279.cpp,3,3,"fprintf(fp, ""From: %s@%s\n"", appname, uniqueHostname());","fprintf(fp, ""From: %s@%s\n"", APP_SHORTNAME, uniqueHostname());","[""updateVariable""]","[[""appname""], [""APP_SHORTNAME""]]",[4784142546648117347],7691,"36 days, 7:23:04.615384"
https://github.com/squid-cache/squid/commit/4dd643d505fb6bc13be7d440e2aa5707036a138e,03 Jun 2013,"Polish: update Ip::Address to follow Squid coding guidelines

* lower-case initial word for camelCase method names
* _ suffix for private variables.
* upper-case for static methods
* InitAddrInfo() and FreeAddrInfo() are static, do not use as methods

Not all methods are camelCased due to meaning irregularities and there
are other guidelines not being followed which also need to be fixed.",1969,data/crawl/squid/hunk_1737.cpp,,,data/crawl/squid/old_hunk_1737.cpp,data/crawl/squid/new_hunk_1737.cpp,3,3,"fprintf(stderr, ""Connected to: %s (%s)\n"", hostname, iaddr.NtoA(ipbuf, MAX_IPSTRLEN));","fprintf(stderr, ""Connected to: %s (%s)\n"", hostname, iaddr.toStr(ipbuf, MAX_IPSTRLEN));","[""updateVariable""]","[[""NtoA""], [""toStr""]]",[11520492049254401423],7690,0:00:00
https://github.com/squid-cache/squid/commit/d5649d9f35c421edf02183b397d058a5e15164c2,05 Jan 1998,fix five-min average stuff,124,data/crawl/squid/hunk_6876.cpp,,,data/crawl/squid/old_hunk_6876.cpp,data/crawl/squid/new_hunk_6876.cpp,86,64,"storeAppendPrintf(sentry, ""select_loops = %d\n"", A.select_loops);","storeAppendPrintf(sentry, ""select_loops = %f/sec\n"",
	XAVG(select_loops));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%d\\n"", ""A""], [""%f/sec\\n"", ""XAVG""]]",[-11021074611193673368],7689,0:00:00
https://github.com/squid-cache/squid/commit/3facc31ebf9e1f3c9f52fd19bd5138bd383d9fdf,16 Apr 1996,"-fixed SSL/CONNECT
-Added background processing for rebuilding store",453,data/crawl/squid/hunk_7853.cpp,,,data/crawl/squid/old_hunk_7853.cpp,data/crawl/squid/new_hunk_7853.cpp,7,-1,fatal(tmp_error_buf);,,"[""removeLog""]","[[""fatal"", ""tmp_error_buf""], []]",[13960320583637834086],7688,"450 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fcc351807bcecc7e20a032afdc38cdc14b8d81ee,27 Dec 2004,"Bug #1149: segfault on mgr:vm_objects

Forward port of 2.5 patch",110,data/crawl/squid/hunk_5085.cpp,,,data/crawl/squid/old_hunk_5085.cpp,data/crawl/squid/new_hunk_5085.cpp,20,20,"storeAppendPrintf(s, ""\n"");","memBufPrintf(mb, ""\n"");","[""updateVariable"", ""updateLog""]","[[""storeAppendPrintf"", ""s""], [""memBufPrintf"", ""mb""]]",[-7876639109950016255],7687,0:00:00
https://github.com/squid-cache/squid/commit/6f0aab861682a3d9c8f72228b0ac01eac5e52526,24 Jan 2006,Started converting ftp.cc to use more C++ class methods,714,data/crawl/squid/hunk_4886.cpp,,,data/crawl/squid/old_hunk_4886.cpp,data/crawl/squid/new_hunk_4886.cpp,109,107,"storeAppendPrintf(e, ""Generated %s by %s (%s)\n"",
                      mkrfc1123(squid_curtime),
                      getMyHostname(),
                      visible_appname_string);","storeAppendPrintf(entry, ""Generated %s by %s (%s)\n"",
                      mkrfc1123(squid_curtime),
                      getMyHostname(),
                      visible_appname_string);","[""updateVariable""]","[[""e""], [""entry""]]",[-1268459155482108395],7686,0:00:00
https://github.com/squid-cache/squid/commit/f24583c1402155d55872879590611869f0669a08,21 May 2006,Fix http_range test to run again.,325,data/crawl/squid/hunk_4817.cpp,,,data/crawl/squid/old_hunk_4817.cpp,data/crawl/squid/new_hunk_4817.cpp,20,-1,"fatal (""dummy function\n"");",,"[""removeLog""]","[[""fatal"", ""dummy"", ""function\\n""], []]",[-2056731110784074756],7685,0:00:00
https://github.com/squid-cache/squid/commit/c69199bb22ce6d16080bc84c613823830c22c0d3,09 Nov 2012,"Upgrade Digest authentication to use key=value parameters

* Update the Digest auth code in Squid to process the HelperReply key-pair
  notes list for data
+ output upgrade WARNING messages when old format responses are identified
+ handle TT result code (as an error with critical level ERROR message)
+ handle BH result code (as an error)

* Adds a ha1="""" key to Digest auth response protocol to pass the HA1.

* Upgrade the Digest helpers to use OK/ERR/BH result codes and key=value
  parameters.",82,data/crawl/squid/hunk_1945.cpp,,,data/crawl/squid/old_hunk_1945.cpp,data/crawl/squid/new_hunk_1945.cpp,6,6,"printf(""%s\n"", requestData->HHA1);","printf(""OK ha1=\""%s\""\n"", requestData->HHA1);","[""updateContent""]","[[""%s\\n""], [""OK"", ""ha1"", ""\\"", ""%s\\"", ""\\n""]]",[-17318855744961982517],7684,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/36c84e199a995f639a720362195bda49368c6a53,06 Apr 2014,"Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Also fixed rock disk space waste warning.

Rock store and shared memory cache code used entry and slot limit as if
the two were the same. In large caches, the number of entry slots may exceed
the number of entries supported by Squid (16777216 entries per store). This
is especially likely with large caches storing large entries (many slots
per entry with maximum number of entries) or large caches using small slot
sizes.

AFAICT, the bug led to the ""tail"" of cache storage being unused and cache
entries being purged even though there was still space to store them. Also,
Squid was allocating smaller shared memory tables (and temporary cache index
build tables) than actually needed for the configured cache sizes.

Note that this change does not remove the per-store 16777216 entry limit.


The old [small] rock warning about wasted disk space assumed that a cache
entry occupies exactly one slot. The updated warnings do not.


Also fixed and simplified db scanning condition during cache index build.",333,data/crawl/squid/hunk_1550.cpp,,,data/crawl/squid/old_hunk_1550.cpp,data/crawl/squid/new_hunk_1550.cpp,8,8,"storeAppendPrintf(&e, ""Current entries: %9d %.2f%%\n"",
                              entryCount, (100.0 * entryCount / limit));","storeAppendPrintf(&e, ""Current entries: %9d %.2f%%\n"",
                              entryCount, (100.0 * entryCount / entryLimit));","[""updateVariable""]","[[""limit""], [""entryLimit""]]",[8955552442617202755],7683,"67 days, 0:00:00"
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,991,,"print_error(""Expected \""}\"""", token, type);","[""addLog""]","[[], [""print_error"", ""Expected"", ""\\"", ""\\"", ""token"", ""type""]]",[23625327351001242289],7682,0:00:00
https://github.com/squid-cache/squid/commit/d94a2ce5ea26e644273483181e8ff536d5645dbe,19 Sep 2010,"Author: Chad Naugle <Chad.Naugle@travimp.com>
ext_edirectory_userip_acl build fixes

... and compiled into a single file.",2315,data/crawl/squid/hunk_3026.cpp,,,data/crawl/squid/old_hunk_3026.cpp,data/crawl/squid/new_hunk_3026.cpp,144,-1,"fputs(dbuf, stderr);",,"[""removeLog""]","[[""fputs"", ""dbuf"", ""stderr""], []]",[21040805309855973594],7681,"8 days, 8:43:38.181818"
https://github.com/squid-cache/squid/commit/a8f7d3ee8f37334ed638d2ee22a55bdb49f44291,31 Aug 1996,merge 1.0.11 changes,235,data/crawl/squid/hunk_7613.cpp,,,data/crawl/squid/old_hunk_7613.cpp,data/crawl/squid/new_hunk_7613.cpp,-1,7,,"printf(""-------------- ------- -------------------------------------\n"");","[""addLog""]","[[], [""printf"", ""\\n""]]",[7249185625612668815],7680,"2355 days, 13:05:27.272727"
https://github.com/squid-cache/squid/commit/a5a5de8779b8904f40f06286f71aa9c0a0febd15,21 Apr 1998,open swapout fd debugging,110,data/crawl/squid/hunk_6450.cpp,,,data/crawl/squid/old_hunk_6450.cpp,data/crawl/squid/new_hunk_6450.cpp,58,44,"storeAppendPrintf(sentry, ""\n"");","storeAppendPrintf(s, ""\n"");","[""updateVariable""]","[[""sentry""], [""s""]]",[-887447176678270073],7679,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7731.cpp,,,data/crawl/squid/old_hunk_7731.cpp,data/crawl/squid/new_hunk_7731.cpp,-1,115,,"storeAppendPrintf(sentry, ""}\n\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\n\\n""]]",[907191344344343430],7678,"1401 days, 2:24:00"
https://github.com/squid-cache/squid/commit/6328cedceb815cfc5537237fe58fe2023e0ed6b7,12 Aug 2002,Updated UNIX group helper,428,data/crawl/squid/hunk_5599.cpp,,,data/crawl/squid/old_hunk_5599.cpp,data/crawl/squid/new_hunk_5599.cpp,-1,233,,"fprintf(stderr, ""%s: ERROR: Too large..: %s\n"", argv[0], buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Too"", ""large"", ""%s\\n"", ""argv[0]"", ""buf""]]",[-8164570441682819975],7677,"949 days, 19:12:00"
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4945.cpp,,,data/crawl/squid/old_hunk_4945.cpp,data/crawl/squid/new_hunk_4945.cpp,-1,377,,"fprintf(stderr, ""[%4.4s]   %-50.50s  %s\n"", addrstr, hexstr, charstr);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""[%4"", ""4s]"", ""%"", ""50"", ""50s"", ""%s\\n"", ""addrstr"", ""hexstr"", ""charstr""]]",[-6288472998734895651],7676,"734 days, 19:12:00"
https://github.com/squid-cache/squid/commit/e40497560cb00f30ce91a4771a5c23ff39418fc8,29 Sep 2003,"Summary: Merge Gerard's AIX signed and datatype size patches.
Keywords:

Patches applied:

 * gerard@eviston.net--squid/squid--aix-fixes--3.0--patch-5
   typecast ntohl() in wccp.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-3
   debug() ==> debugs() round 1

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-4
   casts and format strings

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-5
   debug() => debugs() round 2: peer_digest.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-6
   casts in stat.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-7
   debug() => debugs() round 3

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-8
   cast for ntohl() in wccp.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-9
   casts in tools.cc",196,data/crawl/squid/hunk_5174.cpp,,,data/crawl/squid/old_hunk_5174.cpp,data/crawl/squid/new_hunk_5174.cpp,18,18,"fprintf(debug_log, ""\tFree Ordinary blocks:  %6d KB\n"",
            mp.fordblks >> 10);","fprintf(debug_log, ""\tFree Ordinary blocks:  %6ld KB\n"",
            (long)mp.fordblks >> 10);","[""updateContent"", ""addVariable""]","[[""%6d""], [""%6ld"", ""long""]]",[16886507379923651671],7675,"1022 days, 19:12:00"
https://github.com/squid-cache/squid/commit/d5d5493b580fb565ede89e4f5b9ef727403b7e40,21 Jun 2011,"Fix make check and make distcheck.

Mostly makefile changes.  New stub code added and some unneeded
stub code removed.  Fixed for UFS and COSS tests related to
object destruction order.",411,data/crawl/squid/hunk_2540.cpp,,,data/crawl/squid/old_hunk_2540.cpp,data/crawl/squid/new_hunk_2540.cpp,-1,28,,"fprintf(stderr, ""Not implemented"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Not"", ""implemented""]]",[-17868059573967399683],7674,"54 days, 19:12:00"
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/hunk_2342.cpp,,,data/crawl/squid/old_hunk_2342.cpp,data/crawl/squid/new_hunk_2342.cpp,65,-1,"fatal(""client_db.cc required"");",,"[""removeLog""]","[[""fatal"", ""client_db"", ""cc"", ""required""], []]",[11584999754346286923],7673,0:00:00
https://github.com/squid-cache/squid/commit/a0f327753bc3041cabaf2e606fa0c878a1854243,05 Mar 1998,"Added more server-side counters and accounting based on patch from
Lincon Dale.  Also removed some '#if 0' code chunks.",404,data/crawl/squid/hunk_6637.cpp,,,data/crawl/squid/old_hunk_6637.cpp,data/crawl/squid/new_hunk_6637.cpp,-1,48,,"storeAppendPrintf(e, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""\\n""]]",[5193143777301589627],7672,"990 days, 16:48:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1003.cpp,,,data/crawl/squid/old_hunk_1003.cpp,data/crawl/squid/new_hunk_1003.cpp,8,5,"output->Printf(""\t\tcopy_size: %d\n"",
                   (int) copyInto.length);","output->appendf(""\t\tcopy_size: %d\n"", copyInto.length);","[""updateLog"", ""removeVariable""]","[[""Printf"", ""int""], [""appendf""]]",[7152046587264163594],7671,"26 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4176.cpp,,,data/crawl/squid/old_hunk_4176.cpp,data/crawl/squid/new_hunk_4176.cpp,-1,3,,"fprintf(stdout, ""BH input error\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""input"", ""error\\n""]]",[-27673462301926708073],7670,"845 days, 14:24:00"
https://github.com/squid-cache/squid/commit/2056c6a6b3b59f54afb222f73bcf9486ab6051ff,27 Jul 2015,purge: Convert squid.conf parser to std::regex,140,data/crawl/squid/hunk_641.cpp,,,data/crawl/squid/old_hunk_641.cpp,data/crawl/squid/new_hunk_641.cpp,77,51,"fprintf( debug, ""# match from %d-%d on \""%s\""\n"",
                                      (int)subs[offset].rm_so,
                                      (int)subs[offset].rm_eo,
                                      line+subs[offset].rm_so );","fprintf( debug, ""# match '%s' in \""%s\""\n"", subs[offset].str().c_str(), subs[0].str().c_str());","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""from"", ""%d"", ""%d"", ""on"", ""int"", ""rm_so"", ""int"", ""subs[offset]"", ""rm_eo"", ""line"", ""subs[offset]"", ""rm_so""], [""%s"", ""in"", ""str"", ""c_str"", ""subs[0]"", ""str"", ""c_str""]]",[18914542953596725113],7669,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a369131d44229cefaa70573381207295fbd99615,17 Mar 1998,"Fixed 'single parent' and peer->options bugs.

We had mixed (options & FOO) and EBIT_SET(options, FOO) which was
clearly wrong.  Only the EBIT macros can be used with the enumerated
peer->options flags.

We never got any single parent uses because getSingleParent()
was checked only *after* direct == DIRECT_NO.

Removed 'single_parent_bypass' option.  Now, we'll require that
a single parent have the 'no-query' option.",139,data/crawl/squid/hunk_6588.cpp,,,data/crawl/squid/old_hunk_6588.cpp,data/crawl/squid/new_hunk_6588.cpp,17,-1,"storeAppendPrintf(entry, ""\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""\\n""], []]",[-3924684621819481232],7668,"3955 days, 12:00:00"
https://github.com/squid-cache/squid/commit/f53b06f967ce5bdf5b076bba55d41f8d45a3077d,25 Aug 1997,"Configuration cleanup.
	- set up 'DEFAULT_IF_NONE' option for things like http_port
	  and cache_dir where we want to set a default only if there
	  is not one or more given in the config file.
	- Implemented the configuration dump via cachemanager.  All the
	  easy config types have dump functions; the remainder are
	  unimplemented.",220,data/crawl/squid/hunk_7083.cpp,,,data/crawl/squid/old_hunk_7083.cpp,data/crawl/squid/new_hunk_7083.cpp,-1,5,,"storeAppendPrintf(entry, ""%s -- UNIMPLEMENTED\n"", name);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""UNIMPLEMENTED\\n"", ""name""]]",[-8524465994432361915],7667,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5893.cpp,,,data/crawl/squid/old_hunk_5893.cpp,data/crawl/squid/new_hunk_5893.cpp,-1,177,,"fprintf(stdout, ""ERR\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""ERR\\n""]]",[-5640522499396071603],7666,"637 days, 2:40:00"
https://github.com/squid-cache/squid/commit/7c8931a1f908c09a8ab797e7354e8d57718d766d,04 May 2011,"Compile fixes for binutils-gold and gcc-4.6 support

These two tools are much stricter about dependency linkages. We have already
had to drop testAuth due to major dependency loops they dislike.
This makes the remainder of the dependency changes needed.

Also adds:
 - tests/STUB.h with macros for simpler stub file creation
 - stub_libmgr.cc for unit-test stub replacment of mgr/libmgr.la library.
   many API functions commented out, but sufficient for the current needs.",479,data/crawl/squid/hunk_2618.cpp,,,data/crawl/squid/old_hunk_2618.cpp,data/crawl/squid/new_hunk_2618.cpp,-1,14,,"fatal (""MemObject.cc required."");","[""addLog""]","[[], [""fatal"", ""MemObject"", ""cc"", ""required""]]",[-5142970086775005695],7665,"78 days, 2:40:00"
https://github.com/squid-cache/squid/commit/7f06a3d8d7e9569685ac575db1a0f6cf5681024a,22 Apr 2014,"SBuf: convert HttpMethod internals

Update the internal string/image representation of an HTTP
method to be an SBuf string. Including the global registered
methods index.

Also,
 * remove RequestMethodStr() wrapper functions
 * remove remainders of obsolete extension_methods feature
 * remove remainders of obsolete RequestMethodStr[] array
 * fix potential cache key error from http/MethodType.h
   enum ordering.
 * polished many debugs involving method",289,data/crawl/squid/hunk_1524.cpp,,,data/crawl/squid/old_hunk_1524.cpp,data/crawl/squid/new_hunk_1524.cpp,3,3,"mb->Printf(""%s %s %s/%d.%d\r\n"",
               RequestMethodStr(request->method),
               url && *url ? url : ""/"",
               AnyP::ProtocolType_str[httpver.protocol],
               httpver.major,httpver.minor);","mb->Printf(SQUIDSBUFPH "" %s %s/%d.%d\r\n"",
               SQUIDSBUFPRINT(request->method.image()),
               url && *url ? url : ""/"",
               AnyP::ProtocolType_str[httpver.protocol],
               httpver.major,httpver.minor);","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""RequestMethodStr""], [""SQUIDSBUFPH"", ""SQUIDSBUFPRINT"", ""image""]]",[5323122395840098553],7664,"24 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,487,,"mb.Printf(""%i %s\r\n"", code, msg);","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""%s\\r\\n"", ""code"", ""msg""]]",[27668380407176316555],7663,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,401,,"fprintf(stdout, ""BH Invalid request\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""Invalid"", ""request\\n""]]",[-14936515258816654011],7662,"887 days, 8:00:00"
https://github.com/squid-cache/squid/commit/f88bb09c780151eb3736f0dc774ab5df6858ee4d,22 Jul 1996,"-Split ipcache.c into ipcache.c and dns.c
-Moved newer functions from icp.c to client_side.c
-Added fqdncache.c, like ipcache.c
-Added new ACL type ACL_SRC_DOMAIN 'srcdomain'
-Use aclMatchDomainList() instead of aclMatchWord() for domain names
-Renamed 'stats/general' to 'stats/ipcache'",1929,data/crawl/squid/hunk_7678.cpp,,,data/crawl/squid/old_hunk_7678.cpp,data/crawl/squid/new_hunk_7678.cpp,-1,277,,fatal_dump(NULL);,"[""addLog""]","[[], [""fatal_dump"", ""NULL""]]",[-12879563083587916188],7661,"39 days, 6:00:00"
https://github.com/squid-cache/squid/commit/a0f327753bc3041cabaf2e606fa0c878a1854243,05 Mar 1998,"Added more server-side counters and accounting based on patch from
Lincon Dale.  Also removed some '#if 0' code chunks.",404,data/crawl/squid/hunk_6641.cpp,,,data/crawl/squid/old_hunk_6641.cpp,data/crawl/squid/new_hunk_6641.cpp,9,36,"storeAppendPrintf(sentry, ""server.kbytes_out = %d\n"",
	(int) f->server.kbytes_out.kb);","storeAppendPrintf(sentry, ""server.other.kbytes_out = %d\n"",
	(int) f->server.other.kbytes_out.kb);","[""updateContent"", ""addVariable""]","[[], [""other"", ""other""]]",[8623595955817938790],7660,0:00:00
https://github.com/squid-cache/squid/commit/c943f3313a892d71be08ad823a58b1969e56a817,30 Mar 1996,"assign store.c to debugging section 20
fixed storeRebuildFromDisk bug introduced when switched from fdopen(, ""a"")
to fdopen(, ""w"").  Now storeInit() makes a little more sense.",647,data/crawl/squid/hunk_7930.cpp,,,data/crawl/squid/old_hunk_7930.cpp,data/crawl/squid/new_hunk_7930.cpp,-1,16,,fatal(tmp_error_buf);,"[""addLog""]","[[], [""fatal"", ""tmp_error_buf""]]",[-13960320583637834086],7659,"282 days, 21:00:00"
https://github.com/squid-cache/squid/commit/c04d4f40ba637c37ac4db8b020861d48d0a548b8,20 Aug 2001,"Resolve any possible conflicts with POSIX AIO

* Use the prefix squidaio_ rather than aio_...
* Some minor cleanups",698,data/crawl/squid/hunk_5790.cpp,,,data/crawl/squid/old_hunk_5790.cpp,data/crawl/squid/new_hunk_5790.cpp,10,10,"storeAppendPrintf(sentry, ""check_callback\t%d\n"", aio_counts.check_callback);","storeAppendPrintf(sentry, ""check_callback\t%d\n"", squidaio_counts.check_callback);","[""updateVariable""]","[[""aio_counts""], [""squidaio_counts""]]",[-16023929972491634641],7658,0:00:00
https://github.com/squid-cache/squid/commit/fcc351807bcecc7e20a032afdc38cdc14b8d81ee,27 Dec 2004,"Bug #1149: segfault on mgr:vm_objects

Forward port of 2.5 patch",110,data/crawl/squid/hunk_5086.cpp,,,data/crawl/squid/old_hunk_5086.cpp,data/crawl/squid/new_hunk_5086.cpp,27,27,"storeAppendPrintf(output, ""\n"");","memBufPrintf(output, ""\n"");","[""updateLog""]","[[""storeAppendPrintf""], [""memBufPrintf""]]",[-7890591179051097972],7657,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5886.cpp,,,data/crawl/squid/old_hunk_5886.cpp,data/crawl/squid/new_hunk_5886.cpp,-1,106,,"puts(""ERR"");","[""addLog""]","[[], [""puts"", ""ERR""]]",[1091395453046515340],7656,"884 days, 3:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5900.cpp,,,data/crawl/squid/old_hunk_5900.cpp,data/crawl/squid/new_hunk_5900.cpp,-1,122,,"fprintf(stderr, ""unknown option: -%c. Exiting\n"", opt);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""unknown"", ""option"", ""%c"", ""Exiting\\n"", ""opt""]]",[-6958397524576261935],7655,"2127 days, 21:00:00"
https://github.com/squid-cache/squid/commit/75aa769bc374a0ebb66d3c41a763d5ca2ed44d4b,11 Jun 2010,"Upgrade ntlm_fake_auth helper and internal libntlmauth

Fake auth helper changes:

 - renames fakeauth to ntlm_fake_auth
 - links ntlm_fake_auth to libntlmauth
 - removes duplicate code provided by libcompat and libntlmauth
 - moves the remaining bits of fakeauth/ntlm.h to ntlm_fake_auth.cc

Library API changes:

 - moves some of the basic NTLM operations into libntlmauth
    * fetch_string UNICODE support
    * make challenge packet
    * validate packet type
    * make challenge nonce
    * unpack user and domain from authenticate packet

 - tweaks libntlmauth to split the make challenge operation so that it
   only generates the challenge object (does not encode blob for sending,
   or hard-code field values any more).

Other related changes:

 - tweaks the smb_lm helper which already linked libntlmauth so that it
   uses the updated API correctly after the above changes.

 - documents libntlmauth and some of ntlm_fake_auth helper",1471,data/crawl/squid/hunk_3309.cpp,,,data/crawl/squid/old_hunk_3309.cpp,data/crawl/squid/new_hunk_3309.cpp,116,-1,"fprintf(stderr, ""[%4.4s]   %-50.50s  %s\n"", addrstr, hexstr, charstr);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""[%4"", ""4s]"", ""%"", ""50"", ""50s"", ""%s\\n"", ""addrstr"", ""hexstr"", ""charstr""], []]",[6288472998734895651],7654,"15 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3284.cpp,,,data/crawl/squid/old_hunk_3284.cpp,data/crawl/squid/new_hunk_3284.cpp,3,3,"printf(""OK\n"");","SEND_OK("""");","[""updateLog"", ""updateContent""]","[[""printf"", ""OK\\n""], [""SEND_OK""]]",[-9335956330906339887],7653,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3286.cpp,,,data/crawl/squid/old_hunk_3286.cpp,data/crawl/squid/new_hunk_3286.cpp,3,3,"fprintf( stderr, ""error %d %s\n"", rc, sasl_errstring(rc, NULL, NULL ));","fprintf(stderr, ""FATAL: %d %s\n"", rc, sasl_errstring(rc, NULL, NULL ));","[""updateContent""]","[[""error""], [""FATAL""]]",[-13232312713197993276],7652,"10 days, 12:00:00"
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4929.cpp,,,data/crawl/squid/old_hunk_4929.cpp,data/crawl/squid/new_hunk_4929.cpp,-1,342,,"mustStop(""exception"");","[""addLog""]","[[], [""mustStop"", ""exception""]]",[-3541540401470368235],7651,"1493 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,87,,"fatal(""Rock Store db creation error"");","[""addLog""]","[[], [""fatal"", ""Rock"", ""Store"", ""db"", ""creation"", ""error""]]",[-1759631197158767042],7650,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/00d0ce87e4fb95bde86ebb57dc394554b06b169e,21 Jun 2014,"Support for PROXY protocol version 1

This protocol enables other proxies to easily relay indirect client IP
and port details without altering the HTTP (or other) protocol within the
connection.",234,data/crawl/squid/hunk_1367.cpp,,,data/crawl/squid/old_hunk_1367.cpp,data/crawl/squid/new_hunk_1367.cpp,-1,129,,proxyProtocolError(true);,"[""addLog""]","[[], [""proxyProtocolError"", ""true""]]",[6002347251361972528],7649,0:00:00
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2991.cpp,,,data/crawl/squid/old_hunk_2991.cpp,data/crawl/squid/new_hunk_2991.cpp,86,-1,"fprintf(tracefp, ""f:%p\n"", s);",,"[""removeLog""]","[[""fprintf"", ""tracefp"", ""f"", ""%p\\n"", ""s""], []]",[4185219475741869808],7648,"662 days, 21:00:00"
https://github.com/squid-cache/squid/commit/efc238716eb68db2888faac60423184a894f5483,18 Jan 2015,"Support rotate=N option on access_log

Add a rotate=N option to access_log directive to set per-log what the
retained log count will be. At present it is only used by the stdio:
logging module, which is also the only one to use logfile_rotate
directive.

If this option is absent (as will be the common case) the log rotation
defaults to using the value of logfile_rotate directive.

Also, add missing dump output of other access_log options if they differ
from the defaults.

The use-cases for this are:

1) Unix fifo logging requires all the stdio: module operations except
that the normal rotate/rename operation is NOT performed on the fifo
socket. It makes more sense to add this option which can also meet case
#2 than to create a whole new module just for fifo.

2) managing only some access_log files with a third-party log manager.
Those specific logs need rotate=0, but the Squid managed logs may
require non-0 values.",88,data/crawl/squid/hunk_1052.cpp,,,data/crawl/squid/old_hunk_1052.cpp,data/crawl/squid/new_hunk_1052.cpp,32,32,"storeAppendPrintf(entry, ""%s referrer"", log->filename);","storeAppendPrintf(entry, ""%s logformat=referrer"", log->filename);","[""updateContent""]","[[], [""logformat""]]",[-2095683113656719822],7647,0:00:00
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1003.cpp,,,data/crawl/squid/old_hunk_1003.cpp,data/crawl/squid/new_hunk_1003.cpp,22,17,"output->Printf(""\n"");","output->append(""\n"",1);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""1""]]",[-16152299999027699401],7646,"40 days, 9:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,316,,"fprintf(stderr, ""%s| %s: Invalid request [%s]\n"", LogTime(), PROGRAM, buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""request"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf""]]",[-20974463790759197551],7645,"1313 days, 12:00:00"
https://github.com/squid-cache/squid/commit/bebc043b8df7953e06b2a66ad7b88b362fbc59b5,27 Dec 2007,"Remove the default cache_dir location and the null store type

Many people gets confused by the builtin cache_dir location, thinking
that if there is no cache_dir in squid.conf then there is no on-disk cache.
This removes the builtin default.

By removing the builtin default we can also remove the ""null"" cache_dir
type whos purpose is only to override the builtin default.",410,data/crawl/squid/hunk_4398.cpp,,,data/crawl/squid/old_hunk_4398.cpp,data/crawl/squid/new_hunk_4398.cpp,108,-1,"fatal (""Cannot search by url yet\n"");",,"[""removeLog""]","[[""fatal"", ""Cannot"", ""search"", ""by"", ""url"", ""yet\\n""], []]",[17188289028935592274],7644,"2432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,25 Jan 2016,"Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends ""150 Opening..."" to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends ""451 Forbidden"" to the FTP client.
 * The FTP server sends ""500 OOPS: setsockopt: linger"" to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project.",221,data/crawl/squid/hunk_397.cpp,,,data/crawl/squid/old_hunk_397.cpp,data/crawl/squid/new_hunk_397.cpp,3,3,"mustStop(""HttpStateData::abortTransaction"");","mustStop(""HttpStateData::abortAll"");","[""updateContent""]","[[""abortTransaction""], [""abortAll""]]",[9614335523586009905],7643,0:00:00
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,25 Jan 2016,"Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends ""150 Opening..."" to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends ""451 Forbidden"" to the FTP client.
 * The FTP server sends ""500 OOPS: setsockopt: linger"" to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project.",221,data/crawl/squid/hunk_393.cpp,,,data/crawl/squid/old_hunk_393.cpp,data/crawl/squid/new_hunk_393.cpp,3,3,"abortTransaction(""entry aborted after calling appendSuccessHeader()"");","abortOnData(""entry aborted after calling appendSuccessHeader()"");","[""updateLog""]","[[""abortTransaction""], [""abortOnData""]]",[7044889801674964592],7642,0:00:00
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1375.cpp,,,data/crawl/squid/old_hunk_1375.cpp,data/crawl/squid/new_hunk_1375.cpp,10,-1,"storeAppendPrintf(entry, "" %s"", list->key);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""list"", ""key""], []]",[-18527958583169795512],7641,"150 days, 9:00:00"
https://github.com/squid-cache/squid/commit/c943f3313a892d71be08ad823a58b1969e56a817,30 Mar 1996,"assign store.c to debugging section 20
fixed storeRebuildFromDisk bug introduced when switched from fdopen(, ""a"")
to fdopen(, ""w"").  Now storeInit() makes a little more sense.",647,data/crawl/squid/hunk_7937.cpp,,,data/crawl/squid/old_hunk_7937.cpp,data/crawl/squid/new_hunk_7937.cpp,61,58,fatal(tmpbuf);,fatal(tmp_error_buf);,"[""updateVariable""]","[[""tmpbuf""], [""tmp_error_buf""]]",[-10977526806704958013],7640,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,90,89,"storeAppendPrintf(sentry, ""{\tbytes used in maintaining the free tree:\t%d}\n"",
	mp.treeoverhead);","storeAppendPrintf(sentry, ""\tbytes used in maintaining the free tree:\t%d\n"",
	mp.treeoverhead);","[""updateContent""]","[[""\\t%d"", ""\\n""], [""\\t%d\\n""]]",[-1330699662296328616],7639,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,4,3,"storeAppendPrintf(sentry, ""{Squid Object Cache: Version %s}\n"",
	version_string);","storeAppendPrintf(sentry, ""Squid Object Cache: Version %s\n"",
	version_string);","[""updateContent""]","[[""%s"", ""\\n""], [""%s\\n""]]",[6128453140213560284],7638,0:00:00
https://github.com/squid-cache/squid/commit/6eb42caec6c6db2142568d6dd4426e89e6c16f8f,04 Apr 1996,major code cleanup/unification/rewrite,624,data/crawl/squid/hunk_7898.cpp,,,data/crawl/squid/old_hunk_7898.cpp,data/crawl/squid/new_hunk_7898.cpp,3,3,"fatal_dump(""urlcmp: Got a NULL url pointer.\n"");","fatal_dump(""urlcmp: Got a NULL url pointer."");","[""updateContent""]","[[""\\n""], []]",[-11776070748106360],7637,"289 days, 6:51:25.714285"
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5306.cpp,,,data/crawl/squid/old_hunk_5306.cpp,data/crawl/squid/new_hunk_5306.cpp,3,3,"fprintf(stderr, ""squid_ldap_auth: ERROR, could not get user DN for '%s'\n"", userid);","fprintf(stderr, PROGRAM_NAME "": ERROR, could not get user DN for '%s'\n"", userid);","[""updateContent"", ""addVariable""]","[[""squid_ldap_auth""], [""PROGRAM_NAME""]]",[-1507727038595517550],7636,0:00:00
https://github.com/squid-cache/squid/commit/95e36d02e1eca338ecbf4ca7cafc4c46797c2d41,31 Jul 1998,Luyers new DELAY_POOLS code,972,data/crawl/squid/hunk_6314.cpp,,,data/crawl/squid/old_hunk_6314.cpp,data/crawl/squid/new_hunk_6314.cpp,-1,237,,"storeAppendPrintf(sentry, ""\t\tCurrent: "");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\t\\tCurrent""]]",[6528457113049910470],7635,"774 days, 10:17:08.571428"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,643,,"printf (""vax-dec-bsd\n"");","[""addLog""]","[[], [""printf"", ""vax"", ""dec"", ""bsd\\n""]]",[7042265659612649168],7634,"2229 days, 10:17:08.571428"
https://github.com/squid-cache/squid/commit/fcd92691c1415c738da4b976e0e13da19cc6f824,24 Aug 2007,Bootstrapped.,41127,data/crawl/squid/hunk_4484.cpp,,,data/crawl/squid/old_hunk_4484.cpp,data/crawl/squid/new_hunk_4484.cpp,3,3,"printf (""arm-acorn-riscix"");","printf (""arm-acorn-riscix\n"");","[""updateContent""]","[[""riscix""], [""riscix\\n""]]",[-3839271978006135108],7633,"93 days, 10:17:08.571428"
https://github.com/squid-cache/squid/commit/9edfee167f0863739da78c3f9400ba4bb4127116,24 Aug 2007,Bootstrapped,40948,data/crawl/squid/hunk_4482.cpp,,,data/crawl/squid/old_hunk_4482.cpp,data/crawl/squid/new_hunk_4482.cpp,3,3,"printf (""arm-acorn-riscix\n"");","printf (""arm-acorn-riscix"");","[""updateContent""]","[[""riscix\\n""], [""riscix""]]",[3839271978006135108],7632,"94 days, 6:51:25.714285"
https://github.com/squid-cache/squid/commit/4ef877d67aaff7156b5611db55b45cb7c57a0120,06 Feb 2009,"Author: Francesco Chemolli <kinkie@squid-cache.org>
String NG : fixes initial merge, take 2

Compared to the retired first attempt it:
 - fixes the issues Tsantilas Christos found out about
 - implements String::find
 - some more users analyzed and fixed.",654,data/crawl/squid/hunk_3949.cpp,,,data/crawl/squid/old_hunk_3949.cpp,data/crawl/squid/new_hunk_3949.cpp,3,3,"rep->header.putStr(HDR_VARY, vary.buf());","rep->header.putStr(HDR_VARY, vary.termedBuf());","[""updateVariable""]","[[""buf""], [""termedBuf""]]",[6611493792027371697],7631,0:00:00
https://github.com/squid-cache/squid/commit/5b4117d8c4e8fa922453364ba410b1876452c9ba,30 Jan 2009,Verified and converted more String users.,55,data/crawl/squid/hunk_3964.cpp,,,data/crawl/squid/old_hunk_3964.cpp,data/crawl/squid/new_hunk_3964.cpp,3,3,"hdr->putStr(HDR_VIA, strVia.unsafeBuf());","hdr->putStr(HDR_VIA, strVia.termedBuf());","[""updateVariable""]","[[""unsafeBuf""], [""termedBuf""]]",[4199209083615320289],7630,"5 days, 13:42:51.428571"
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2914.cpp,,,data/crawl/squid/old_hunk_2914.cpp,data/crawl/squid/new_hunk_2914.cpp,-1,131,,"mustStop(""commClosed"");","[""addLog""]","[[], [""mustStop"", ""commClosed""]]",[-196900071475591971],7629,"51 days, 17:08:34.285714"
https://github.com/squid-cache/squid/commit/ac49890a255f5cfbf2242434c98b74da81b90dd4,27 Jan 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Fix IP/FQDN cache accounting to avoid idle caches on busy servers.

When maintaining the IP/FQDN cache size, use the number of entries in the cache
rather than the number of allocated and not freed MEM_IPCACHE_ENTRY and
MEM_FQDNCACHE_ENTRY objects. These objects are used outside the cache
for DNS queries. If queries leak (or perhaps when there are just a lot of them),
the memory-pool-based count overestimates the cache size, sometimes to
such a degree that the cache remains nearly empty despite lots of misses.

Use memory-pool-based counter to estimate cache size also violates IP/FQDN cache
encapsulation boundaries because it effectively prevents others from using
the same memory pool.",23,data/crawl/squid/hunk_2796.cpp,,,data/crawl/squid/old_hunk_2796.cpp,data/crawl/squid/new_hunk_2796.cpp,3,3,"storeAppendPrintf(sentry, ""IPcache Entries:  %d\n"",
                      memInUse(MEM_IPCACHE_ENTRY));","storeAppendPrintf(sentry, ""IPcache Entries In Use:  %d\n"",
                      memInUse(MEM_IPCACHE_ENTRY));","[""updateContent""]","[[], [""In"", ""Use""]]",[-2607846366279385415],7628,"11 days, 10:17:08.571428"
https://github.com/squid-cache/squid/commit/115e2d8c9d005332aab0736bec7bad929048ab68,23 May 1998,generate a coredump for running out of swap file numbers,4,data/crawl/squid/hunk_6417.cpp,,,data/crawl/squid/old_hunk_6417.cpp,data/crawl/squid/new_hunk_6417.cpp,3,3,"fatal(""You've run out of swap file numbers."");","fatal_dump(""You've run out of swap file numbers."");","[""updateLog""]","[[""fatal""], [""fatal_dump""]]",[-3765830668276604274],7627,"5020 days, 20:34:17.142857"
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2991.cpp,,,data/crawl/squid/old_hunk_2991.cpp,data/crawl/squid/new_hunk_2991.cpp,52,-1,"fprintf(tracefp, ""m:%d:%p\n"", sz, p);",,"[""removeLog""]","[[""fprintf"", ""tracefp"", ""m"", ""%d"", ""%p\\n"", ""sz"", ""p""], []]",[4165763358341692610],7626,"753 days, 13:42:51.428571"
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2992.cpp,,,data/crawl/squid/old_hunk_2992.cpp,data/crawl/squid/new_hunk_2992.cpp,55,-1,"fprintf(tracefp, ""c:%u:%u:%p\n"", (unsigned int) n, (unsigned int) sz, p);",,"[""removeLog""]","[[""fprintf"", ""tracefp"", ""c"", ""%u"", ""%u"", ""%p\\n"", ""unsigned"", ""int"", ""n"", ""unsigned"", ""int"", ""sz"", ""p""], []]",[33602757814329880716],7625,"753 days, 13:42:51.428571"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5912.cpp,,,data/crawl/squid/old_hunk_5912.cpp,data/crawl/squid/new_hunk_5912.cpp,-1,131,,"storeAppendPrintf(entry, "" %s"", list->key);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""list"", ""key""]]",[18527958583169795512],7624,"2492 days, 13:42:51.428571"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7756.cpp,,,data/crawl/squid/old_hunk_7756.cpp,data/crawl/squid/new_hunk_7756.cpp,3,3,"storeAppendPrintf(sentry, ""{\n"");","storeAppendPrintf(sentry, open_bracket);","[""removeContent"", ""addVariable""]","[[""\\n""], [""open_bracket""]]",[8910855836114536213],7623,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1371,,"print_error(""Warning: This entry is pretty silly"", np->label, type);","[""addLog""]","[[], [""print_error"", ""Warning"", ""This"", ""entry"", ""is"", ""pretty"", ""silly"", ""np"", ""label"", ""type""]]",[-3855785183751805220],7622,0:00:00
https://github.com/squid-cache/squid/commit/934b03fcac83ff55159329b6723b9d6a1d5bd194,27 Jun 1997,adding,2145,data/crawl/squid/hunk_7162.cpp,,,data/crawl/squid/old_hunk_7162.cpp,data/crawl/squid/new_hunk_7162.cpp,-1,185,,"printf(""Error on line %d\n"", linenum);","[""addLog""]","[[], [""printf"", ""Error"", ""on"", ""line"", ""%d\\n"", ""linenum""]]",[23449878132933055095],7621,"26 days, 8:00:00"
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6826.cpp,,,data/crawl/squid/old_hunk_6826.cpp,data/crawl/squid/new_hunk_6826.cpp,34,33,"storeAppendPrintf(sentry, ""{    %12.12s : %8d %3d%%}\n"",
		icp_opcode_str[op],
		e->stats.counts[op],
		percent(e->stats.counts[op], e->stats.pings_acked));","storeAppendPrintf(sentry, ""    %12.12s : %8d %3d%%\n"",
		icp_opcode_str[op],
		e->stats.counts[op],
		percent(e->stats.counts[op], e->stats.pings_acked));","[""updateContent""]","[[""%3d%%"", ""\\n""], [""%3d%%\\n""]]",[3520244070347549960],7620,0:00:00
https://github.com/squid-cache/squid/commit/a0f327753bc3041cabaf2e606fa0c878a1854243,05 Mar 1998,"Added more server-side counters and accounting based on patch from
Lincon Dale.  Also removed some '#if 0' code chunks.",404,data/crawl/squid/hunk_6637.cpp,,,data/crawl/squid/old_hunk_6637.cpp,data/crawl/squid/new_hunk_6637.cpp,-1,47,,"storeAppendPrintf(e, ""(no values recorded yet)\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""no"", ""values"", ""recorded"", ""yet"", ""\\n""]]",[10243070043228460127],7619,0:00:00
https://github.com/squid-cache/squid/commit/429fdbecbf36ca7f145bc760181a892136c54445,28 Apr 1997,merge 1.1.8->1.1.10; just get it to compile,2206,data/crawl/squid/hunk_7325.cpp,,,data/crawl/squid/old_hunk_7325.cpp,data/crawl/squid/new_hunk_7325.cpp,-1,114,,"fprintf(fp, ""\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\n""]]",[-5179306325123647028],7618,"397 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6708c52c59cd7fe5a6d2a4857c5e0b897a6e5f3c,28 Nov 2002,squid_ldap_group upgrade to version 2.8,367,data/crawl/squid/hunk_5495.cpp,,,data/crawl/squid/old_hunk_5495.cpp,data/crawl/squid/new_hunk_5495.cpp,27,108,"fprintf(stderr, ""squid_ldap_match: WARNING, LDAP search error '%s'\n"", ldap_err2string(rc));","fprintf(stderr, PROGRAM_NAME "" WARNING, LDAP search error '%s'\n"", ldap_err2string(rc));","[""updateContent"", ""addVariable""]","[[""squid_ldap_match""], [""PROGRAM_NAME""]]",[2098943339665693782],7617,0:00:00
https://github.com/squid-cache/squid/commit/5608850ba272cb2e1940873648bf5e54210a5b87,25 Apr 1997,finish multiple swap dirs,441,data/crawl/squid/hunk_7347.cpp,,,data/crawl/squid/old_hunk_7347.cpp,data/crawl/squid/new_hunk_7347.cpp,-1,40,,"fatal(""storeDirOpenTmpSwapLog: Failed to open swap log."");","[""addLog""]","[[], [""fatal"", ""storeDirOpenTmpSwapLog"", ""Failed"", ""to"", ""open"", ""swap"", ""log""]]",[-7196785520234966959],7616,"1230 days, 0:00:00"
https://github.com/squid-cache/squid/commit/137ee196e3be76d5b96458b603e3d9aa78e314f1,31 May 1998,"- Replaced ""complex"" (offset accounting) calls to snprintf() with MemBuf.
- cleanup",545,data/crawl/squid/hunk_6391.cpp,,,data/crawl/squid/old_hunk_6391.cpp,data/crawl/squid/new_hunk_6391.cpp,-1,9,,"fatalf(""Failed to make swap directory %s: %s"",
	    path, xstrerror());","[""addLog""]","[[], [""fatalf"", ""Failed"", ""to"", ""make"", ""swap"", ""directory"", ""%s"", ""%s"", ""path"", ""xstrerror""]]",[-4186603929638388916],7615,"895 days, 20:00:00"
https://github.com/squid-cache/squid/commit/137ee196e3be76d5b96458b603e3d9aa78e314f1,31 May 1998,"- Replaced ""complex"" (offset accounting) calls to snprintf() with MemBuf.
- cleanup",545,data/crawl/squid/hunk_6391.cpp,,,data/crawl/squid/old_hunk_6391.cpp,data/crawl/squid/new_hunk_6391.cpp,-1,3,,"fatalf(""Swap directory %s is not a directory."", path);","[""addLog""]","[[], [""fatalf"", ""Swap"", ""directory"", ""%s"", ""is"", ""not"", ""a"", ""directory"", ""path""]]",[16895851936805237112],7614,"895 days, 20:00:00"
https://github.com/squid-cache/squid/commit/e40497560cb00f30ce91a4771a5c23ff39418fc8,29 Sep 2003,"Summary: Merge Gerard's AIX signed and datatype size patches.
Keywords:

Patches applied:

 * gerard@eviston.net--squid/squid--aix-fixes--3.0--patch-5
   typecast ntohl() in wccp.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-3
   debug() ==> debugs() round 1

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-4
   casts and format strings

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-5
   debug() => debugs() round 2: peer_digest.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-6
   casts in stat.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-7
   debug() => debugs() round 3

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-8
   cast for ntohl() in wccp.cc

 * ports@eviston.net--aix/squid--aix-fixes--3.0--patch-9
   casts in tools.cc",196,data/crawl/squid/hunk_5174.cpp,,,data/crawl/squid/old_hunk_5174.cpp,data/crawl/squid/new_hunk_5174.cpp,12,12,"fprintf(debug_log, ""\tHolding blocks:        %6d KB %6d blks\n"",
            mp.hblkhd >> 10, mp.hblks);","fprintf(debug_log, ""\tHolding blocks:        %6ld KB %6ld blks\n"",
            (long)mp.hblkhd >> 10, (long)mp.hblks);","[""updateContent"", ""addVariable""]","[[""%6d"", ""%6d""], [""%6ld"", ""%6ld"", ""long"", ""long""]]",[33773014759847303342],7613,0:00:00
https://github.com/squid-cache/squid/commit/64ffef5e31e8f777b78433310774cdd6fc4865f1,01 May 2005,"Bug #1267: Cosmetic change to DISKD statistics

This patch align labels and expand OPS and SUCCESS fields of DISKD cachemgr
stats.",16,data/crawl/squid/hunk_5044.cpp,,,data/crawl/squid/old_hunk_5044.cpp,data/crawl/squid/new_hunk_5044.cpp,14,14,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
                      ""write"", diskd_stats.write.ops, diskd_stats.write.success, diskd_stats.write.fail);","storeAppendPrintf(sentry, ""%7s %9d %9d %7d\n"",
                      ""write"", diskd_stats.write.ops, diskd_stats.write.success, diskd_stats.write.fail);","[""updateContent""]","[[""%7d"", ""%7d""], [""%9d"", ""%9d""]]",[-4000020],7612,0:00:00
https://github.com/squid-cache/squid/commit/0f1bc304fdce3a433aa47d685eeeffe5c8dd8249,10 Dec 1998,client active requests cachemgr page,93,data/crawl/squid/hunk_6204.cpp,,,data/crawl/squid/old_hunk_6204.cpp,data/crawl/squid/new_hunk_6204.cpp,-1,47,,"storeAppendPrintf(s, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""s"", ""\\n""]]",[5193143779093595017],7611,"869 days, 8:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,344,,"fprintf(stderr, ""OpenSCManager failed\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""OpenSCManager"", ""failed\\n""]]",[-21828551817829994559],7610,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4923.cpp,,,data/crawl/squid/old_hunk_4923.cpp,data/crawl/squid/new_hunk_4923.cpp,-1,157,,stop(notifyOwner);,"[""addLog""]","[[], [""stop"", ""notifyOwner""]]",[-4780997408801844825],7609,"114 days, 16:00:00"
https://github.com/squid-cache/squid/commit/8370dcf2948e69d6914b1f38a6c81cdacce1e0b1,04 Jun 2002,TLS encryption support by Michael Cunningham,52,data/crawl/squid/hunk_5651.cpp,,,data/crawl/squid/old_hunk_5651.cpp,data/crawl/squid/new_hunk_5651.cpp,-1,17,,"fprintf( stderr, ""Could not Activate TLS connection\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Could"", ""not"", ""Activate"", ""TLS"", ""connection\\n""]]",[-94042995092749779],7608,"849 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8370dcf2948e69d6914b1f38a6c81cdacce1e0b1,04 Jun 2002,TLS encryption support by Michael Cunningham,52,data/crawl/squid/hunk_5651.cpp,,,data/crawl/squid/old_hunk_5651.cpp,data/crawl/squid/new_hunk_5651.cpp,-1,11,,"fprintf( stderr, ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"",
                        version );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Could"", ""not"", ""set"", ""LDAP_OPT_PROTOCOL_VERSION"", ""%d\\n"", ""version""]]",[14165094135550653739],7607,"849 days, 12:00:00"
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5310.cpp,,,data/crawl/squid/old_hunk_5310.cpp,data/crawl/squid/new_hunk_5310.cpp,-1,14,,"fprintf(stderr, ""\nUnable to connect to SSL LDAP server: %s port:%d\n"",
				ldapServer, port);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""SSL"", ""LDAP"", ""server"", ""%s"", ""port"", ""%d\\n"", ""ldapServer"", ""port""]]",[3455699060833364420],7606,"653 days, 8:00:00"
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5310.cpp,,,data/crawl/squid/old_hunk_5310.cpp,data/crawl/squid/new_hunk_5310.cpp,-1,7,,"fprintf(stderr, ""\nUnable to initialise SSL with cert path %s\n"",
				sslpath);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""initialise"", ""SSL"", ""with"", ""cert"", ""path"", ""%s\\n"", ""sslpath""]]",[8616501409148837831],7605,"653 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7ba688188e2e958eafba86a7bf5b41db55ea2007,01 Mar 2003,"Added LDAP URI support, contributed by Juerg Michel",36,data/crawl/squid/hunk_5327.cpp,,,data/crawl/squid/old_hunk_5327.cpp,data/crawl/squid/new_hunk_5327.cpp,-1,7,,"fprintf(stderr, ""\nUnable to connect to LDAPURI:%s\n"", ldapServer);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""LDAPURI"", ""%s\\n"", ""ldapServer""]]",[-968658030135572842],7604,"654 days, 0:00:00"
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5312.cpp,,,data/crawl/squid/old_hunk_5312.cpp,data/crawl/squid/new_hunk_5312.cpp,-1,6,,"fprintf(stderr, PROGRAM_NAME "": WARNING, SSL error %d (%s)\n"", sslerr, ldapssl_err2string(sslerr));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""SSL"", ""error"", ""%d"", ""%s"", ""\\n"", ""sslerr"", ""ldapssl_err2string"", ""sslerr""]]",[-8521655138693661446],7603,"569 days, 12:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,598,,"puts (""hppa2.0"");","[""addLog""]","[[], [""puts"", ""hppa2"", ""0""]]",[2429724524263534483],7602,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,600,,"puts (""hppa1.0"");","[""addLog""]","[[], [""puts"", ""hppa1"", ""0""]]",[2429724524263534486],7601,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1315,-1,"printf (""vax-dec-bsd\n"");",,"[""removeLog""]","[[""printf"", ""vax"", ""dec"", ""bsd\\n""], []]",[-7042265659612649168],7600,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,616,-1,"puts (""hppa2.0"");",,"[""removeLog""]","[[""puts"", ""hppa2"", ""0""], []]",[-2429724524263534483],7599,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,618,-1,"puts (""hppa1.0"");",,"[""removeLog""]","[[""puts"", ""hppa1"", ""0""], []]",[-2429724524263534486],7598,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e377501e9bd98b6b628504c0bcc3245c9e69e7e3,16 Jun 2002,"Generalized the proxy_auth ACL processing one small step further to make
it easier for other ACL types to use/require authentication.",139,data/crawl/squid/hunk_5645.cpp,,,data/crawl/squid/old_hunk_5645.cpp,data/crawl/squid/new_hunk_5645.cpp,-1,43,,"fatal(""unexpected authenticateAuthenticate reply\n"");","[""addLog""]","[[], [""fatal"", ""unexpected"", ""authenticateAuthenticate"", ""reply\\n""]]",[-7738081176919200605],7597,"1680 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e41db37b10eb9b0f41876e7287477a17e86d1250,12 Jul 2009,"Author: Markus Moeller <huaraz@moeller.plus.com>
Bug 2710: squid_kerb_auth non-terminated string",38,data/crawl/squid/hunk_3747.cpp,,,data/crawl/squid/old_hunk_3747.cpp,data/crawl/squid/new_hunk_3747.cpp,7,19,"fprintf(stderr, ""%s| %s: User %s authenticated\n"", LogTime(), PROGRAM, (char *)output_token.value);","fprintf(stderr, ""%s| %s: User %s authenticated\n"", LogTime(), PROGRAM, user);","[""updateVariable"", ""removeVariable""]","[[""char"", ""*"", ""output_token"", ""value""], [""user""]]",[305716311373404735],7596,0:00:00
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,437,,"fprintf(stderr, ""%s| %s: Not enough memory\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Not"", ""enough"", ""memory\\n"", ""LogTime"", ""PROGRAM""]]",[-2312750529207102588],7595,"681 days, 8:00:00"
https://github.com/squid-cache/squid/commit/350e2aeca88de2de7eadc3a19c1fbdf0046f2e55,18 Nov 2009,"Fixed some cases of variable shadowing
Fixed shadowing-related bug in http reply handling",72,data/crawl/squid/hunk_3529.cpp,,,data/crawl/squid/old_hunk_3529.cpp,data/crawl/squid/new_hunk_3529.cpp,20,20,"buf.Printf("" cons%p"", theConsumer);","outputBuffer.Printf("" cons%p"", theConsumer);","[""updateLog""]","[[""buf""], [""outputBuffer""]]",[-6896451894010301071],7594,0:00:00
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/hunk_3437.cpp,,,data/crawl/squid/old_hunk_3437.cpp,data/crawl/squid/new_hunk_3437.cpp,6,6,"fprintf(stderr, ""%s| %s: User %s authenticated\n"", LogTime(),
                        PROGRAM, user);","fprintf(stderr, ""%s| %s: INFO: User %s authenticated\n"", LogTime(),
                        PROGRAM, user);","[""updateContent""]","[[], [""INFO""]]",[-6492726066479515808],7593,0:00:00
https://github.com/squid-cache/squid/commit/ac5de05bed05906909d7ccc894f940438b8a9967,29 Sep 2010,"Bug 3051: integer display overflow

This alters the cachemgr display formatting to use 64-bit integers
instead of 32-bit. Revealing overflows hiding behind display overflows.",302,data/crawl/squid/hunk_3015.cpp,,,data/crawl/squid/old_hunk_3015.cpp,data/crawl/squid/new_hunk_3015.cpp,50,50,"storeAppendPrintf(sentry, ""\tbytes used in maintaining the free tree:\t%d\n"",
                      mp.treeoverhead);","storeAppendPrintf(sentry, ""\tbytes used in maintaining the free tree:\t%ld\n"",
                      (long)mp.treeoverhead);","[""updateContent"", ""addVariable""]","[[""\\t%d\\n""], [""\\t%ld\\n"", ""long""]]",[11325057620674453895],7592,0:00:00
https://github.com/squid-cache/squid/commit/6da430a4640e07dfae7ef7a4451acc2854817014,01 Oct 2010,"Bug 3068: cache_dir capacity and usage overflows

Makes usage calculations use size_t instead of int and updates the
relevant fields storing the cache_dir capacity and usage fields as well.

This fixes Squid filling cache_dir with files >2GB in size.
Also allows Squid to store more than 2TB of data total in one dir.",55,data/crawl/squid/hunk_3007.cpp,,,data/crawl/squid/old_hunk_3007.cpp,data/crawl/squid/new_hunk_3007.cpp,3,3,"storeAppendPrintf(&entry, "" %d %d %d"",
                      max_size >> 10,
                      l1,
                      l2);","storeAppendPrintf(&entry, "" %Zu %d %d"", (max_size >> 10), l1, l2);","[""updateContent"", ""addVariable""]","[[""%d""], [""%Zu""]]",[-4775301843675679744],7591,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5905.cpp,,,data/crawl/squid/old_hunk_5905.cpp,data/crawl/squid/new_hunk_5905.cpp,-1,544,,"fprintf(stderr, ""SessSetupAndX response. Action = %i\n"",
	SVAL(SMB_Hdr(pkt), SMB_ssetpr_act_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SessSetupAndX"", ""response"", ""Action"", ""%i\\n"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_ssetpr_act_offset""]]",[-4441335963205359382],7590,"2378 days, 16:00:00"
https://github.com/squid-cache/squid/commit/5673c2e23845b9dca17b7c5b3812c29c8c390e13,15 Mar 2000,"DW:
 - Use new Logfile module for access,useragent,store logs.",265,data/crawl/squid/hunk_6067.cpp,,,data/crawl/squid/old_hunk_6067.cpp,data/crawl/squid/new_hunk_6067.cpp,-1,10,,"logfilePrintf(logfile, "" [%s] [%s]\n"", ereq, erep);","[""addLog""]","[[], [""logfilePrintf"", ""logfile"", ""[%s]"", ""[%s]\\n"", ""ereq"", ""erep""]]",[2243749579326389688],7589,"2365 days, 0:00:00"
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/hunk_2804.cpp,,,data/crawl/squid/old_hunk_2804.cpp,data/crawl/squid/new_hunk_2804.cpp,-1,93,,"mustStop(""error"");","[""addLog""]","[[], [""mustStop"", ""error""]]",[-776500057558850006],7588,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/147a3e90ec90e94424b47fd412a9872318c740f0,02 Dec 2002,allow Visual Studio to compile cf_gen,85,data/crawl/squid/hunk_5487.cpp,,,data/crawl/squid/old_hunk_5487.cpp,data/crawl/squid/new_hunk_5487.cpp,25,-1,"fprintf(fp, ""#if %s\n"", entry->ifdef);",,"[""removeLog""]","[[""fprintf"", ""fp"", ""if"", ""%s\\n"", ""entry"", ""ifdef""], []]",[440416233817151051],7587,"2642 days, 12:00:00"
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/hunk_2336.cpp,,,data/crawl/squid/old_hunk_2336.cpp,data/crawl/squid/new_hunk_2336.cpp,205,-1,"fatal (""MemObject.cc required."");",,"[""removeLog""]","[[""fatal"", ""MemObject"", ""cc"", ""required""], []]",[5142970086775005695],7586,0:00:00
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,177,-1,fatal(fatal_str);,,"[""removeLog""]","[[""fatal"", ""fatal_str""], []]",[1353160381696869034],7585,"2856 days, 16:00:00"
https://github.com/squid-cache/squid/commit/812ed90c92653caeb9156937f2bdaeb2a4cfa2ec,15 May 1997,"New MIME configuration, regular expression based
Added request_timeout config option
Multiple HTTP sockets (Lincoln Dale).
Moved 'fds_are_n_free' check to httpAccept().
s/USE_POLL/HAVE_POLL/; make poll() default if available.",556,data/crawl/squid/hunk_7249.cpp,,,data/crawl/squid/old_hunk_7249.cpp,data/crawl/squid/new_hunk_7249.cpp,-1,6,,fatal(fatal_str);,"[""addLog""]","[[], [""fatal"", ""fatal_str""]]",[-1353160381696869034],7584,"2388 days, 12:00:00"
https://github.com/squid-cache/squid/commit/49b76711eb061f751a766c289a778caaf6086797,27 Nov 2012,"Helper protocol upgrade: add optional kv-pair field to responses

This adds an optional kv-pair field immediately following the result field
on all helper interface responses. This field contains a list of key=value
pairs where the value is a RFC1738 (URL) encoded token or a quoted string.
Quoted-string MAY contain whitespace and shell escaping.

The response syntax for all helpers becomes:
  [channel-ID SP] result [SP key-pair ...] [SP other] EOL


The parser for HelperReply is also updated to map the old AF and NA
NTLM/Negotiate response fields into the HelperReply notes:
 * ""token="" is added to supply the NTLM and Negotiate server blob/token.
 * ""user="" is added to supply the user label field.
The relevant callback handlers are updated for these helpers to make use
of these new keys.


The bundled Digest authentication helpers are all upgraded to send the new
format responses. They now use ERR for failed lookup, BH for internal
errors, and OK with ""ha1="" key added to supply a HA1 response. The handler
for Digest authentication is updated to process the new HelperReply fields
with failover the old format on Unknown result codes.

The external ACL handler is updated to pull its key=value pairs out of the
Notes list. The old parser loop becomes useless with this and is removed.
Taking with it support for several long deprecated keys ""login="", ""passwd="",
and ""error="" which are now ignored.


Any other keys MAY be sent on any response. However at this stage 2 patch
they are ignored. As are repeated / secondary values for the expected key
names, only the first instance sent in the response is used.",727,data/crawl/squid/hunk_1889.cpp,,,data/crawl/squid/old_hunk_1889.cpp,data/crawl/squid/new_hunk_1889.cpp,28,35,auth_user_request->denyMessage(blob);,auth_user_request->denyMessage(errNote->firstValue());,"[""removeVariable"", ""addVariable""]","[[""blob""], [""errNote"", ""firstValue""]]",[-11898805055367006084],7583,"4 days, 16:00:00"
https://github.com/squid-cache/squid/commit/d96a5ab4cc2865be3bde9876d2681e3831495902,18 Nov 2012,"log_file_daemon: better error reporting

* report rotation errors and log file removal errors instead of silently
  ignoring them.

 Detected by Coverity Scan. Issue 740316",18,data/crawl/squid/hunk_1903.cpp,,,data/crawl/squid/old_hunk_1903.cpp,data/crawl/squid/new_hunk_1903.cpp,-1,19,,"fprintf(stderr, ""WARNING: rename %s to %s failure: %s\n"", path, to, xstrerror());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""WARNING"", ""rename"", ""%s"", ""to"", ""%s"", ""failure"", ""%s\\n"", ""path"", ""to"", ""xstrerror""]]",[-13421638805233913797],7582,"10 days, 16:00:00"
https://github.com/squid-cache/squid/commit/d96a5ab4cc2865be3bde9876d2681e3831495902,18 Nov 2012,"log_file_daemon: better error reporting

* report rotation errors and log file removal errors instead of silently
  ignoring them.

 Detected by Coverity Scan. Issue 740316",18,data/crawl/squid/hunk_1903.cpp,,,data/crawl/squid/old_hunk_1903.cpp,data/crawl/squid/new_hunk_1903.cpp,-1,15,,"fprintf(stderr, ""WARNING: remove '%s' failure: %s\n"", to, xstrerror());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""WARNING"", ""remove"", ""%s"", ""failure"", ""%s\\n"", ""to"", ""xstrerror""]]",[-20583615695712937023],7581,"10 days, 16:00:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6116.cpp,,,data/crawl/squid/old_hunk_6116.cpp,data/crawl/squid/new_hunk_6116.cpp,110,-1,"fatal(""Failed to open swap log for reading"");",,"[""removeLog""]","[[""fatal"", ""Failed"", ""to"", ""open"", ""swap"", ""log"", ""for"", ""reading""], []]",[16044729424592680332],7580,"1727 days, 20:00:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6116.cpp,,,data/crawl/squid/old_hunk_6116.cpp,data/crawl/squid/new_hunk_6116.cpp,103,-1,"fatal(""storeDirOpenTmpSwapLog: Failed to open swap log."");",,"[""removeLog""]","[[""fatal"", ""storeDirOpenTmpSwapLog"", ""Failed"", ""to"", ""open"", ""swap"", ""log""], []]",[7196785520234966959],7579,"1727 days, 20:00:00"
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6753.cpp,,,data/crawl/squid/old_hunk_6753.cpp,data/crawl/squid/new_hunk_6753.cpp,124,-1,"printf(""\n  "");",,"[""removeLog""]","[[""printf"", ""\\n""], []]",[-7249185625612668815],7578,"1603 days, 12:00:00"
https://github.com/squid-cache/squid/commit/cf2155f28a0333dc57adb63c537c3ea30cbf0344,24 Jan 2014,"Enable -n command line option for non-Windows Squid builds

This command line option is used on Windows to name the service instance
of Squid being run and/or managed. At this point it still only has
useful effect on Windows, but can now be used by components on other
systems as well.

Show the running instance service name in cacehmgr and -v output.

Also remove _WIN_SQUID_DEFAULT_SERVICE_NAME macro which duplicated the
APP_SHORTNAME macro. This changes the Windows service name from Squid to
squid (lower case) on future Squid-3 for Windows.",112,data/crawl/squid/hunk_1628.cpp,,,data/crawl/squid/old_hunk_1628.cpp,data/crawl/squid/new_hunk_1628.cpp,2,2,"storeAppendPrintf(sentry,""\nRunning as %s Windows System Service on %s\n"",
                          WIN32_Service_name, WIN32_OS_string);","storeAppendPrintf(sentry,""\nRunning as %s Windows System Service on %s\n"",
                          Service_name, WIN32_OS_string);","[""updateVariable""]","[[""WIN32_Service_name""], [""Service_name""]]",[3676727402390234290],7577,0:00:00
https://github.com/squid-cache/squid/commit/faadb1b64436077d7f3b02e30cb9684b1c9ad075,10 Apr 2006,removed obsolete ldap files. These was moved to the ldap helper directory,662,data/crawl/squid/hunk_4873.cpp,,,data/crawl/squid/old_hunk_4873.cpp,data/crawl/squid/new_hunk_4873.cpp,593,-1,"fprintf(stderr, ""\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""\\n""], []]",[13913879213697345406],7576,"1764 days, 20:00:00"
https://github.com/squid-cache/squid/commit/36c84e199a995f639a720362195bda49368c6a53,06 Apr 2014,"Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Also fixed rock disk space waste warning.

Rock store and shared memory cache code used entry and slot limit as if
the two were the same. In large caches, the number of entry slots may exceed
the number of entries supported by Squid (16777216 entries per store). This
is especially likely with large caches storing large entries (many slots
per entry with maximum number of entries) or large caches using small slot
sizes.

AFAICT, the bug led to the ""tail"" of cache storage being unused and cache
entries being purged even though there was still space to store them. Also,
Squid was allocating smaller shared memory tables (and temporary cache index
build tables) than actually needed for the configured cache sizes.

Note that this change does not remove the per-store 16777216 entry limit.


The old [small] rock warning about wasted disk space assumed that a cache
entry occupies exactly one slot. The updated warnings do not.


Also fixed and simplified db scanning condition during cache index build.",333,data/crawl/squid/hunk_1550.cpp,,,data/crawl/squid/old_hunk_1550.cpp,data/crawl/squid/new_hunk_1550.cpp,-1,12,,"storeAppendPrintf(&e, ""Maximum slots:   %9d\n"", slotLimit);","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Maximum"", ""slots"", ""%9d\\n"", ""slotLimit""]]",[20935556611366205784],7575,"67 days, 0:00:00"
https://github.com/squid-cache/squid/commit/36c84e199a995f639a720362195bda49368c6a53,06 Apr 2014,"Lifted 16777216 slot limit from rock cache_dirs and shared memory caches.
Also fixed rock disk space waste warning.

Rock store and shared memory cache code used entry and slot limit as if
the two were the same. In large caches, the number of entry slots may exceed
the number of entries supported by Squid (16777216 entries per store). This
is especially likely with large caches storing large entries (many slots
per entry with maximum number of entries) or large caches using small slot
sizes.

AFAICT, the bug led to the ""tail"" of cache storage being unused and cache
entries being purged even though there was still space to store them. Also,
Squid was allocating smaller shared memory tables (and temporary cache index
build tables) than actually needed for the configured cache sizes.

Note that this change does not remove the per-store 16777216 entry limit.


The old [small] rock warning about wasted disk space assumed that a cache
entry occupies exactly one slot. The updated warnings do not.


Also fixed and simplified db scanning condition during cache index build.",333,data/crawl/squid/hunk_1550.cpp,,,data/crawl/squid/old_hunk_1550.cpp,data/crawl/squid/new_hunk_1550.cpp,14,17,"storeAppendPrintf(&e, ""Used slots:      %9d %.2f%%\n"",
                                  usedSlots, (100.0 * usedSlots / limit));","storeAppendPrintf(&e, ""Used slots:      %9d %.2f%%\n"",
                                  usedSlots, (100.0 * usedSlots / slotLimit));","[""updateVariable""]","[[""limit""], [""slotLimit""]]",[7111851765608050760],7574,"67 days, 0:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,899,,"writeCustomReply(451, ""Server error; transfer aborted"");","[""addLog""]","[[], [""writeCustomReply"", ""451"", ""Server"", ""error"", ""transfer"", ""aborted""]]",[-6421079062331928970],7573,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,745,,"filteredHeader.putStr(HDR_FTP_PRE, buf);","[""addLog""]","[[], [""filteredHeader"", ""putStr"", ""HDR_FTP_PRE"", ""buf""]]",[4621350245977610158],7572,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1667.cpp,,,data/crawl/squid/old_hunk_1667.cpp,data/crawl/squid/new_hunk_1667.cpp,-1,229,,"mb.Printf(""PASV%s"", Ftp::crlf);","[""addLog""]","[[], [""mb"", ""Printf"", ""PASV%s"", ""Ftp"", ""crlf""]]",[3588186707584736628],7571,"191 days, 16:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1667.cpp,,,data/crawl/squid/old_hunk_1667.cpp,data/crawl/squid/new_hunk_1667.cpp,-1,243,,"mb.Printf(""EPSV 1%s"", Ftp::crlf);","[""addLog""]","[[], [""mb"", ""Printf"", ""EPSV"", ""1%s"", ""Ftp"", ""crlf""]]",[4046860697659007166],7570,"191 days, 16:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1667.cpp,,,data/crawl/squid/old_hunk_1667.cpp,data/crawl/squid/new_hunk_1667.cpp,-1,238,,"mb.Printf(""EPSV 2%s"", Ftp::crlf);","[""addLog""]","[[], [""mb"", ""Printf"", ""EPSV"", ""2%s"", ""Ftp"", ""crlf""]]",[2920805185148149333],7569,"191 days, 16:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_927.cpp,,,data/crawl/squid/old_hunk_927.cpp,data/crawl/squid/new_hunk_927.cpp,10,10,"packer->Printf(""%"" PRId64 ""-%"" PRId64, offset, offset + length - 1);","p->appendf(""%"" PRId64 ""-%"" PRId64, offset, offset + length - 1);","[""updateLog""]","[[""packer"", ""Printf""], [""p"", ""appendf""]]",[7002479699071699579],7568,"26 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_990.cpp,,,data/crawl/squid/old_hunk_990.cpp,data/crawl/squid/new_hunk_990.cpp,8,7,"mb.Printf("":%d"", port);","mb.appendf("":%u"", port);","[""updateLog"", ""updateContent""]","[[""Printf"", ""%d""], [""appendf"", ""%u""]]",[-403317783590601055],7567,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1003.cpp,,,data/crawl/squid/old_hunk_1003.cpp,data/crawl/squid/new_hunk_1003.cpp,20,15,"output->Printf("" copy_event_pending"");","output->append("" copy_event_pending"", 19);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""19""]]",[-16146027967618661649],7566,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1003.cpp,,,data/crawl/squid/old_hunk_1003.cpp,data/crawl/squid/new_hunk_1003.cpp,17,12,"output->Printf("" store_copying"");","output->append("" store_copying"", 14);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""14""]]",[-16146027967618661652],7565,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,366,-1,"fprintf(stdout, ""BH Invalid request\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""Invalid"", ""request\\n""], []]",[14936515258816654011],7564,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2909.cpp,,,data/crawl/squid/old_hunk_2909.cpp,data/crawl/squid/new_hunk_2909.cpp,-1,182,,mustStop(reason);,"[""addLog""]","[[], [""mustStop"", ""reason""]]",[-12168142237827300475],7563,"1295 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b69e9ffa9e2a148e2abc08511ebc5378697a7b6c,03 Apr 2016,Cleanup: remove xstrerror(),1093,data/crawl/squid/hunk_294.cpp,,,data/crawl/squid/old_hunk_294.cpp,data/crawl/squid/new_hunk_294.cpp,3,4,"fatalf(""Aiee! aio_write() returned error (%d) FIXME and wrap file_write !\n"", errno);","fatalf(""Aiee! aio_write() returned error (%d) FIXME and wrap file_write !\n"", xerrno);","[""updateVariable""]","[[""errno""], [""xerrno""]]",[-5579466342789487351],7562,"30 days, 0:00:00"
https://github.com/squid-cache/squid/commit/644b0587cc6495cfabfcba76243a71dca0e1a20c,20 Dec 2016,Fix shadowing of member 'type' in SchemeConfig,14,data/crawl/squid/hunk_109.cpp,,,data/crawl/squid/old_hunk_109.cpp,data/crawl/squid/new_hunk_109.cpp,27,27,"storeAppendPrintf(entry, ""%s %s utf8 on\n"", name, type);","storeAppendPrintf(entry, ""%s %s utf8 on\n"", name, schemeType);","[""updateVariable""]","[[""type""], [""schemeType""]]",[-6937237504119161965],7561,0:00:00
https://github.com/squid-cache/squid/commit/2c47cf746f00fef15b9a964242f2c46a0c0083d0,04 Apr 1996,avoid using stderr; use debug() or debug_log instead,49,data/crawl/squid/hunk_7877.cpp,,,data/crawl/squid/old_hunk_7877.cpp,data/crawl/squid/new_hunk_7877.cpp,4,4,"fprintf(stderr, ""Harvest Cache (Version %s): Terminated abnormally.\n"",
	SQUID_VERSION);","fprintf(debug_log, ""Harvest Cache (Version %s): Terminated abnormally.\n"",
	SQUID_VERSION);","[""updateVariable""]","[[""stderr""], [""debug_log""]]",[7666580819308282657],7560,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1373,,"print_error(""No end to oid"", (char *)NULL, type);","[""addLog""]","[[], [""print_error"", ""No"", ""end"", ""to"", ""oid"", ""char"", ""*"", ""NULL"", ""type""]]",[9551342531087663082],7559,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1247,,"print_error(""Bad DESCRIPTION"", token, type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""DESCRIPTION"", ""token"", ""type""]]",[14155231338761717494],7558,0:00:00
https://github.com/squid-cache/squid/commit/1df370e38a088aa3c12e0971d7324351325ff724,02 Dec 1997,"make SNMP code #ifdef-able, including config parsing",122,data/crawl/squid/hunk_6897.cpp,,,data/crawl/squid/old_hunk_6897.cpp,data/crawl/squid/new_hunk_6897.cpp,-1,7,,"fprintf(fp, ""#endif\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""endif\\n""]]",[2535454387840088139],7557,0:00:00
https://github.com/squid-cache/squid/commit/1df370e38a088aa3c12e0971d7324351325ff724,02 Dec 1997,"make SNMP code #ifdef-able, including config parsing",122,data/crawl/squid/hunk_6897.cpp,,,data/crawl/squid/old_hunk_6897.cpp,data/crawl/squid/new_hunk_6897.cpp,-1,4,,"fprintf(fp, ""#ifdef %s\n"", entry->ifdef);","[""addLog""]","[[], [""fprintf"", ""fp"", ""ifdef"", ""%s\\n"", ""entry"", ""ifdef""]]",[-593136330113430995],7556,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,104,103,"storeAppendPrintf(sentry, ""{\tReserved number of file descriptors:  %4d}\n"",
	RESERVED_FD);","storeAppendPrintf(sentry, ""\tReserved number of file descriptors:  %4d\n"",
	RESERVED_FD);","[""updateContent""]","[[""%4d"", ""\\n""], [""%4d\\n""]]",[-613038733896009100],7555,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,552,-1,"print_error(""Bad DESCRIPTION"", token, type);",,"[""removeLog""]","[[""print_error"", ""Bad"", ""DESCRIPTION"", ""token"", ""type""], []]",[-14155231338761717494],7554,0:00:00
https://github.com/squid-cache/squid/commit/ffa8aa23328f8cb435a01088cb290afcc314060c,25 Oct 1996,"s/""""/null_string/",24,data/crawl/squid/hunk_7461.cpp,,,data/crawl/squid/old_hunk_7461.cpp,data/crawl/squid/new_hunk_7461.cpp,14,14,"storeAppendPrintf(sentry, ""%31s %s}\n"", """", fd_note(i, NULL));","storeAppendPrintf(sentry, ""%31s %s}\n"", null_string, fd_note(i, NULL));","[""removeContent"", ""addVariable""]","[[], [""null_string""]]",[8748942515781726998],7553,"117 days, 9:36:00"
https://github.com/squid-cache/squid/commit/234967c95c2a7139e95200ad24a8e2581880a029,02 May 1996,merging all changes up to squid-1.0.beta5,1451,data/crawl/squid/hunk_7807.cpp,,,data/crawl/squid/old_hunk_7807.cpp,data/crawl/squid/new_hunk_7807.cpp,-1,24,,fatal_dump(tmp_error_buf);,"[""addLog""]","[[], [""fatal_dump"", ""tmp_error_buf""]]",[-17726151251914438360],7552,"221 days, 9:36:00"
https://github.com/squid-cache/squid/commit/75339a46776f1815300c058789302e3c6eed84b3,21 Aug 1998,use #if instead of #ifdef so it works with #define FOO 0,12,data/crawl/squid/hunk_6298.cpp,,,data/crawl/squid/old_hunk_6298.cpp,data/crawl/squid/new_hunk_6298.cpp,3,3,"fprintf(fp, ""#ifdef %s\n"", entry->ifdef);","fprintf(fp, ""#if %s\n"", entry->ifdef);","[""updateContent""]","[[""ifdef""], [""if""]]",[152720096296279944],7551,0:00:00
https://github.com/squid-cache/squid/commit/186477c1163c0718cf127587c1ad63a1e61906d9,01 Nov 2000,"DW:
 - Changed occurances of

        struct _foo {
            /* first two items must be same as hash_link */
            char *key;
            foo *next;
            ...
        };

   to

        struct _foo {
            hash_link hash;     /* must be first */
            ...
        };",385,data/crawl/squid/hunk_5961.cpp,,,data/crawl/squid/old_hunk_5961.cpp,data/crawl/squid/new_hunk_5961.cpp,5,5,"storeAppendPrintf(s, ""old_entry %p/%s\n"", e, e ? storeKeyText(e->key) : ""N/A"");","storeAppendPrintf(s, ""old_entry %p/%s\n"", e, e ? storeKeyText(e->hash.key) : ""N/A"");","[""addVariable""]","[[], [""hash""]]",[7799588877615763652],7550,0:00:00
https://github.com/squid-cache/squid/commit/06cdab880bda222625694d783ad75113fcd7671a,14 Nov 2001,"Wrap the Squid radix implementation with a ""squid_"" prefix to protect it
from any collisions with system provided versions..",369,data/crawl/squid/hunk_5728.cpp,,,data/crawl/squid/old_hunk_5728.cpp,data/crawl/squid/new_hunk_5728.cpp,11,11,"fprintf(stderr, ""%s %x at %x\n"",
		    ""rn_delete: Orphaned Mask"", (int) m, (int) x);","fprintf(stderr, ""%s %x at %x\n"",
		    ""squid_rn_delete: Orphaned Mask"", (int) m, (int) x);","[""updateContent""]","[[""rn_delete""], [""squid_rn_delete""]]",[4868407350708381787],7549,0:00:00
https://github.com/squid-cache/squid/commit/b6a2f15e25349145c5f0f4737d4f5ef1cd8b6ad2,15 Apr 1999,SQUID_2_2 branch merge,3534,data/crawl/squid/hunk_6152.cpp,,,data/crawl/squid/old_hunk_6152.cpp,data/crawl/squid/new_hunk_6152.cpp,-1,4,,"storeAppendPrintf(sentry, "" READ-ONLY"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""READ"", ""ONLY""]]",[61847490146178052],7548,"485 days, 14:24:00"
https://github.com/squid-cache/squid/commit/72615e4adde797baa009ce5ffea2d0ef4d2d9ab5,23 Sep 1998,"Don't select a swap dir for writing if its over the high water mark.

Flag selected dirs for debugging in cachemgr",22,data/crawl/squid/hunk_6257.cpp,,,data/crawl/squid/old_hunk_6257.cpp,data/crawl/squid/new_hunk_6257.cpp,-1,5,,"storeAppendPrintf(sentry, "" SELECTED"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""SELECTED""]]",[2809235622583736885],7547,"648 days, 19:12:00"
https://github.com/squid-cache/squid/commit/a369131d44229cefaa70573381207295fbd99615,17 Mar 1998,"Fixed 'single parent' and peer->options bugs.

We had mixed (options & FOO) and EBIT_SET(options, FOO) which was
clearly wrong.  Only the EBIT macros can be used with the enumerated
peer->options flags.

We never got any single parent uses because getSingleParent()
was checked only *after* direct == DIRECT_NO.

Removed 'single_parent_bypass' option.  Now, we'll require that
a single parent have the 'no-query' option.",139,data/crawl/squid/hunk_6590.cpp,,,data/crawl/squid/old_hunk_6590.cpp,data/crawl/squid/new_hunk_6590.cpp,-1,3,,"storeAppendPrintf(sentry, ""Flags      :"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Flags""]]",[12121816957590146942],7546,"800 days, 19:12:00"
https://github.com/squid-cache/squid/commit/c932b107c4794dc16cf4358973ab7c087c0060d4,26 Apr 1997,fixes fixes fixes,77,data/crawl/squid/hunk_7341.cpp,,,data/crawl/squid/old_hunk_7341.cpp,data/crawl/squid/new_hunk_7341.cpp,-1,27,,"storeAppendPrintf(sentry, ""Percent Used: %0.2f%%\n"",
		100.0 * SD->cur_size /  SD->max_size);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Percent"", ""Used"", ""%0"", ""2f%%\\n"", ""100"", ""0"", ""*"", ""SD"", ""cur_size"", ""/"", ""SD"", ""max_size""]]",[22852711430526874902],7545,"1060 days, 19:12:00"
https://github.com/squid-cache/squid/commit/c932b107c4794dc16cf4358973ab7c087c0060d4,26 Apr 1997,fixes fixes fixes,77,data/crawl/squid/hunk_7341.cpp,,,data/crawl/squid/old_hunk_7341.cpp,data/crawl/squid/new_hunk_7341.cpp,-1,26,,"storeAppendPrintf(sentry, ""Current Size: %d KB\n"", SD->cur_size);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Current"", ""Size"", ""%d"", ""KB\\n"", ""SD"", ""cur_size""]]",[7572611168408590936],7544,"1060 days, 19:12:00"
https://github.com/squid-cache/squid/commit/c932b107c4794dc16cf4358973ab7c087c0060d4,26 Apr 1997,fixes fixes fixes,77,data/crawl/squid/hunk_7341.cpp,,,data/crawl/squid/old_hunk_7341.cpp,data/crawl/squid/new_hunk_7341.cpp,-1,25,,"storeAppendPrintf(sentry, ""Maximum Size: %d KB\n"", SD->max_size);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Maximum"", ""Size"", ""%d"", ""KB\\n"", ""SD"", ""max_size""]]",[17079324005041243121],7543,"1060 days, 19:12:00"
https://github.com/squid-cache/squid/commit/5608850ba272cb2e1940873648bf5e54210a5b87,25 Apr 1997,finish multiple swap dirs,441,data/crawl/squid/hunk_7347.cpp,,,data/crawl/squid/old_hunk_7347.cpp,data/crawl/squid/new_hunk_7347.cpp,-1,47,,"fatal(""Failed to open swap log for reading"");","[""addLog""]","[[], [""fatal"", ""Failed"", ""to"", ""open"", ""swap"", ""log"", ""for"", ""reading""]]",[-16044729424592680332],7542,"1061 days, 14:24:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6117.cpp,,,data/crawl/squid/old_hunk_6117.cpp,data/crawl/squid/new_hunk_6117.cpp,34,-1,"storeAppendPrintf(sentry, "" READ-ONLY"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""READ"", ""ONLY""], []]",[-61847490146178052],7541,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6117.cpp,,,data/crawl/squid/old_hunk_6117.cpp,data/crawl/squid/new_hunk_6117.cpp,32,-1,"storeAppendPrintf(sentry, "" SELECTED"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""SELECTED""], []]",[-2809235622583736885],7540,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6117.cpp,,,data/crawl/squid/old_hunk_6117.cpp,data/crawl/squid/new_hunk_6117.cpp,30,-1,"storeAppendPrintf(sentry, ""Flags:"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Flags""], []]",[-12121816957590146942],7539,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6117.cpp,,,data/crawl/squid/old_hunk_6117.cpp,data/crawl/squid/new_hunk_6117.cpp,11,-1,"storeAppendPrintf(sentry, ""Percent Used: %0.2f%%\n"",
	    100.0 * SD->cur_size / SD->max_size);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Percent"", ""Used"", ""%0"", ""2f%%\\n"", ""100"", ""0"", ""*"", ""SD"", ""cur_size"", ""/"", ""SD"", ""max_size""], []]",[-22852711430526874902],7538,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6117.cpp,,,data/crawl/squid/old_hunk_6117.cpp,data/crawl/squid/new_hunk_6117.cpp,10,-1,"storeAppendPrintf(sentry, ""Current Size: %d KB\n"", SD->cur_size);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Current"", ""Size"", ""%d"", ""KB\\n"", ""SD"", ""cur_size""], []]",[-7572611168408590936],7537,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6117.cpp,,,data/crawl/squid/old_hunk_6117.cpp,data/crawl/squid/new_hunk_6117.cpp,9,-1,"storeAppendPrintf(sentry, ""Maximum Size: %d KB\n"", SD->max_size);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Maximum"", ""Size"", ""%d"", ""KB\\n"", ""SD"", ""max_size""], []]",[-17079324005041243121],7536,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6115.cpp,,,data/crawl/squid/old_hunk_6115.cpp,data/crawl/squid/new_hunk_6115.cpp,102,-1,"fatalf(""Failed to make swap directory %s: %s"",
	    path, xstrerror());",,"[""removeLog""]","[[""fatalf"", ""Failed"", ""to"", ""make"", ""swap"", ""directory"", ""%s"", ""%s"", ""path"", ""xstrerror""], []]",[4186603929638388916],7535,"1020 days, 19:12:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5464.cpp,,,data/crawl/squid/old_hunk_5464.cpp,data/crawl/squid/new_hunk_5464.cpp,55,49,"storeAppendPrintf(sentry, ""\n"");","storeAppendPrintf(&sentry, ""\n"");","[""addVariable""]","[[""sentry""], [""&sentry""]]",[3269677785121613405],7534,0:00:00
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4923.cpp,,,data/crawl/squid/old_hunk_4923.cpp,data/crawl/squid/new_hunk_4923.cpp,-1,149,,stop(notifyNone);,"[""addLog""]","[[], [""stop"", ""notifyNone""]]",[-10998138912094340629],7533,"68 days, 19:12:00"
https://github.com/squid-cache/squid/commit/b7d249f9ddca7cfe73ac27d273901450e81baf31,02 Nov 2006,"Add support for wccpv2 mask assignment

Forwrd port of 2.6 changes.",535,data/crawl/squid/hunk_4717.cpp,,,data/crawl/squid/old_hunk_4717.cpp,data/crawl/squid/new_hunk_4717.cpp,-1,171,,"fatalf(""Unknown Wccp2 assignment method\n"");","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""Wccp2"", ""assignment"", ""method\\n""]]",[-408584221186559861],7532,0:00:00
https://github.com/squid-cache/squid/commit/c99de60701b56be31c01be2045d204ed411e33ca,01 Nov 2006,"	- Many ICAP fixes from Alex Rousskov accumulated on the
	  sourceforge squid3-icap branch since 2006/10, including:

        - Polished ICAP service selection code and implemented bypass of
          optional services. The code implements icap_class
          configuration directive which is currently used as a ""set of
          interchangeable ICAP services"". Squid2 and current squid.conf
          may imply otherwise.

        - Support Transfer-* ICAP OPTIONS response header. If Squid
          knows that a service does not want the URL, Squid will not use
          the service, even if it is an essential service with
          bypass=0. Note that we may make this decision before we know
          what the service wants. Eventually, ACLs should initiate and
          wait for the OPTIONS transaction for yet-unprobed services.

        - When ICAP transactions fail to connect to the service many
          times, the service is suspended until the next OPTIONS
          update. The limit is currently hard-coded to 10. Suspended
          service is a down service and will be skipped by the ACL
          service selection algorithm.

        - Rewrote the code updating ICAP service options. We no longer
          mark the service being updated as ""down"". Only presence of
          valid and fresh options is important. We also try to update
          the options before they expire to avoid any service downtime
          or use of stale options.

        - Report interesting changes in the ICAP service state, some
          with debugging level one to alert the cache administrator.

        - When cloning a request during an ICAP 204 ""No Content"" REQMOD
          response, preserve the client address so that the rest of the
          code has access to it. This change appears to fix Squid Bug
          #1712.

        - After ICAP 100 Continue, expect new ICAP headers instead of
          HTTP headers. Reset ICAP message object to be ready to parse
          ICAP headers again. (Tsantilas Christos
          <chtsanti@users.sourceforge.net>)

        - The ieof HTTP chunk-extension was written after chunk-data
          instead of being written after the chunk-size. (Tsantilas
          Christos <chtsanti@users.sourceforge.net>)

        - Merged common code from the ICAPClientReqmodPrecache and
          ICAPClientReqmodPrecache classes into the newly added
          ICAPClientVector class.  The specific vectors do not have a
          common owner (yet?) because ServerStateData and
          ClientHttpRequest do not have a common base class. Thus,
          ICAPClientVector has to rely on its kids to communicate with
          their owners. However, at least 50% of the logic was common
          and has been moved. Eventually, we may want to create a
          simple ICAPOwner API that ServerStateData and
          ClientHttpRequest can implement and ICAPClientVector can rely
          on. This will make the code simpler and more efficient.  The
          big merge was motivated by a couple of bugs that were found
          in one vector class but that did not exist or behaved
          differently in the other vector, mostly likely due to natural
          diversion of used-to-be identical code.

        - Rewrote communication between a server-side ICAPClient*mod*
          vector and its owner.  When a server-side ICAPClient*mod*
          vector was notifying its owner of more adapted data, the
          owner could delete the vector (by calling icap->ownerAbort)
          if the store entry was not willing to accept the data.  The
          same deletion could happen when a vector was notifying the
          owner of a successful termination. In all those cases, the
          vector did not expect to be deleted and could continue to do
          something, causing segmentation faults.  Now, when more data
          is available, the vector calls its owner and checks the
          return value of the call. If it is false, the vector knows it
          has been deleted and quits. When vector terminates, it calls
          its owner and trusts the owner to always delete the vector.
          The ""check return value and quit"" design is not perfect, but
          we are paying the price for isolating the vectors from their
          owners while using direct calls between them (instead of
          MsgPipe or a similar less efficient indirect approach we use
          elsewhere).

        - Renamed doIcap to startIcap and moved more common code there.
          Changed its return type to bool. We now handle three cases
          when ICAP ACLs call back:  1) No service was selected
          (because there was no applicable service or because all
          applicable services were broken and optional). We proceed as
          if ICAP was not configured.  2) The selected essential
          service is broken. This is a fatal transaction error and we
          return an ""ICAP protocol error"" HTTP error response. We could
          proceed with the ICAP stuff, but it saves a lot of cycles to
          abort early.  3) The selected service is not broken. We
          proceed with the ICAP stuff.  The old code did not detect
          case #2, even though there was code to handle that case (with
          dangerous XXX suggestions that are now gone).  The code
          should probably be polished further to move common ftp/http
          logic from icapAclCheckDone()s into ServerStateData.

        - Make sure there is an accept callback when we are accepting.
          If there is no callback and we accept, we will silently leak
          the accepted FD.  When we are running out of FDs, there is
          often no accept callback.  The old code, when running out of
          FDs, would create lots of ""orphaned"" or ""forgotten"" FDs that
          will eventually get into a CLOSED_WAIT state and remain there
          until Squid quits.  The new code does not call accept() if
          there is no accept callback and does not register the accept
          FD for reading if the AcceptLimiter is deferring, because
          when the AcceptLimiter kicks in, it will register the accept
          FD for reading. There are most likely other places/cases
          where accept FD should not be registered for reading.

        - When an exception is caught, mark the ICAP connection as
          non-reusable so that it is not recycled while a write is
          pending but simply closed instead. Our write callback will
          still be called, unfortunately, because there is no way to
          clear the callback without invalidating its data (i.e., the
          transaction pointer).  This change prevents pconn.cc:253:
          ""!comm_has_incomplete_write(fd)"" assertion from firing when
          things go wrong (e.g., the ICAP server cannot be contacted to
          retrieve OPTIONS).  Not all exceptions caught by the ICAP
          xaction should lead to the ICAP connection termination, but
          it is very difficult if not impossible to reliably detect
          exceptional conditions when it is safe to reuse the ICAP
          connection, and it is probably not worth it anyway.

        - Added Tsantilas Christos <chtsanti@users.sourceforge.net>
          to CONTRIBUTORS for fixing ICAP bugs.

        - Polished debugging.",2091,data/crawl/squid/hunk_4723.cpp,,,data/crawl/squid/old_hunk_4723.cpp,data/crawl/squid/new_hunk_4723.cpp,19,-1,stop(notifyNone);,,"[""removeLog""]","[[""stop"", ""notifyNone""], []]",[10998138912094340629],7531,"62 days, 9:36:00"
https://github.com/squid-cache/squid/commit/954a851376707ccc1938b682bf1bae206779a2ee,01 Mar 2003,-W secretfile by Christoph Lechleitner <lech@ibcl.net>,108,data/crawl/squid/hunk_5318.cpp,,,data/crawl/squid/old_hunk_5318.cpp,data/crawl/squid/new_hunk_5318.cpp,-1,30,,"fprintf(stderr, PROGRAM_NAME "" ERROR: can not allocate memory\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""can"", ""not"", ""allocate"", ""memory\\n""]]",[5282042152026651368],7530,"684 days, 0:00:00"
https://github.com/squid-cache/squid/commit/954a851376707ccc1938b682bf1bae206779a2ee,01 Mar 2003,-W secretfile by Christoph Lechleitner <lech@ibcl.net>,108,data/crawl/squid/hunk_5318.cpp,,,data/crawl/squid/old_hunk_5318.cpp,data/crawl/squid/new_hunk_5318.cpp,-1,17,,"fprintf(stderr, PROGRAM_NAME "" ERROR: Secret file %s is empty\n"", filename);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""Secret"", ""file"", ""%s"", ""is"", ""empty\\n"", ""filename""]]",[-13530033979971404440],7529,"684 days, 0:00:00"
https://github.com/squid-cache/squid/commit/954a851376707ccc1938b682bf1bae206779a2ee,01 Mar 2003,-W secretfile by Christoph Lechleitner <lech@ibcl.net>,108,data/crawl/squid/hunk_5318.cpp,,,data/crawl/squid/old_hunk_5318.cpp,data/crawl/squid/new_hunk_5318.cpp,-1,12,,"fprintf(stderr, PROGRAM_NAME "" ERROR: Can not read secret file %s\n"", filename);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""Can"", ""not"", ""read"", ""secret"", ""file"", ""%s\\n"", ""filename""]]",[-13528255030028203367],7528,"684 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8370dcf2948e69d6914b1f38a6c81cdacce1e0b1,04 Jun 2002,TLS encryption support by Michael Cunningham,52,data/crawl/squid/hunk_5649.cpp,,,data/crawl/squid/old_hunk_5649.cpp,data/crawl/squid/new_hunk_5649.cpp,-1,18,,"fprintf( stderr, ""TLS (-Z) is incompatible with version %d\n"",
			version);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""TLS"", ""Z"", ""is"", ""incompatible"", ""with"", ""version"", ""%d\\n"", ""version""]]",[-14722757135422908747],7527,"864 days, 14:24:00"
https://github.com/squid-cache/squid/commit/8370dcf2948e69d6914b1f38a6c81cdacce1e0b1,04 Jun 2002,TLS encryption support by Michael Cunningham,52,data/crawl/squid/hunk_5649.cpp,,,data/crawl/squid/old_hunk_5649.cpp,data/crawl/squid/new_hunk_5649.cpp,-1,12,,"fprintf( stderr, ""Protocol version should be 2 or 3\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Protocol"", ""version"", ""should"", ""be"", ""2"", ""or"", ""3\\n""]]",[-2561798031947152765],7526,"864 days, 14:24:00"
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5308.cpp,,,data/crawl/squid/old_hunk_5308.cpp,data/crawl/squid/new_hunk_5308.cpp,-1,9,,"fprintf(stderr, PROGRAM_NAME "" ERROR: -E unsupported with this LDAP library\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""E"", ""unsupported"", ""with"", ""this"", ""LDAP"", ""library\\n""]]",[-14444500455805034374],7525,"683 days, 9:36:00"
https://github.com/squid-cache/squid/commit/7ba688188e2e958eafba86a7bf5b41db55ea2007,01 Mar 2003,"Added LDAP URI support, contributed by Juerg Michel",36,data/crawl/squid/hunk_5325.cpp,,,data/crawl/squid/old_hunk_5325.cpp,data/crawl/squid/new_hunk_5325.cpp,-1,5,,"fprintf(stderr, ""ERROR: Your LDAP library does not have URI support\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""Your"", ""LDAP"", ""library"", ""does"", ""not"", ""have"", ""URI"", ""support\\n""]]",[18986198431406661351],7524,"684 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e39ea462af3390ffbf4236477506e57f2bcef202,25 Sep 2004,"Bug #1065: Allow build of LDAP helpers on Windows using the native LDAP libraries

by Guido",101,data/crawl/squid/hunk_5114.cpp,,,data/crawl/squid/old_hunk_5114.cpp,data/crawl/squid/new_hunk_5114.cpp,-1,14,,"fprintf( stderr, PROGRAM_NAME "": ERROR: TLS (-Z) not supported on this platform.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""TLS"", ""Z"", ""not"", ""supported"", ""on"", ""this"", ""platform"", ""\\n""]]",[10221048830143577611],7523,"342 days, 14:24:00"
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5307.cpp,,,data/crawl/squid/old_hunk_5307.cpp,data/crawl/squid/new_hunk_5307.cpp,-1,11,,"fprintf(stderr, ""Connect timeouts not supported in your LDAP library\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Connect"", ""timeouts"", ""not"", ""supported"", ""in"", ""your"", ""LDAP"", ""library\\n""]]",[5623528979515244551],7522,"683 days, 9:36:00"
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4940.cpp,,,data/crawl/squid/old_hunk_4940.cpp,data/crawl/squid/new_hunk_4940.cpp,-1,162,,"fprintf(stderr, ""Invalid Request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Invalid"", ""Request\\n""]]",[-14949053334177767064],7521,"371 days, 14:24:00"
https://github.com/squid-cache/squid/commit/10270faab2bc84e50cde13431a6e6d1932966e5f,05 Nov 2000,"Cross-site scripting fixes by Robert Collins and Henrik Nordstrom

Everywhere where Squid inserts text received from the network into
a HTML page (error pages, FTP listings, Gopher listings, ...) care
must be taken to ensure that the text is properly encoded as HTML,
or a malicious user might be able to insert script code or other
HTML tags, and exploit the web browser of any user visiting their
page or clicking on that funny link received in a email..",78,data/crawl/squid/hunk_5950.cpp,,,data/crawl/squid/old_hunk_5950.cpp,data/crawl/squid/new_hunk_5950.cpp,20,21,"storeAppendPrintf(e, ""ERROR: Failed to parse URL: %s\n"",
		ftpState->title_url);","storeAppendPrintf(e, ""ERROR: Failed to parse URL: %s\n"",
		html_quote(ftpState->title_url));","[""addVariable""]","[[], [""html_quote""]]",[2471647707173191164],7520,"557 days, 14:24:00"
https://github.com/squid-cache/squid/commit/8ee9b49f341045275e07665b7e52f92c06676c00,05 Dec 2000,"A number of CARP bug fixes.

peer->carp.hash was an unsigned long, but the spec requires 32-bit math
on integers.  Since longs are known to sometimes be 64-bits, its safer
to use unsigned int.

peer->carp.load_factor was a float, but its better to use double to
be consistent with other floating point functions and variables.

In parse_peer() I'm concerned that *token could be signed, so its
now casted to unsigned int.

In parse_peer() there is a bug in calculating the proxy hostname hash.
On the final ROTATE_LEFT, it should be ""="" rather than ""+="".

In carpInit() pay special attention to int/double conversion bugs
and passing ints to functions that expect doubles.

In carpInit() there is a bug with the value of ""k"".  In the loop,
k needs to be incremented *before* its used.  The internet-draft
begins with k=1, so the first time through the loop k should equal 2.

Added ""carp"" to cache manager for info and debugging.

I think there are still two bugs: (1) the draft says the multipliers
must be calculated in order of smallest to largest factor.  We don't
do that yet. (2) the 'score' calculation needs to be converted to
double when we multiply by the multiplier.  Otherwise there will
be overflows since the multiplier can be greater than 1.",65,data/crawl/squid/hunk_5934.cpp,,,data/crawl/squid/old_hunk_5934.cpp,data/crawl/squid/new_hunk_5934.cpp,-1,9,,"storeAppendPrintf(sentry, ""%24s %10s %10s %10s %10s\n"",
	""Hostname"",
	""Hash"",
	""Multiplier"",
	""Factor"",
	""Actual"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%24s"", ""%10s"", ""%10s"", ""%10s"", ""%10s\\n"", ""Hostname"", ""Hash"", ""Multiplier"", ""Factor"", ""Actual""]]",[57540478511058568957],7519,"2221 days, 4:48:00"
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/hunk_4678.cpp,,,data/crawl/squid/old_hunk_4678.cpp,data/crawl/squid/new_hunk_4678.cpp,-1,20,,"mustStop(""initiator aborted"");","[""addLog""]","[[], [""mustStop"", ""initiator"", ""aborted""]]",[-8267585922809030933],7518,"274 days, 4:48:00"
https://github.com/squid-cache/squid/commit/225b7b107261e7d01d087e1061533751c2a7a0e0,13 Feb 2003,"Summary: Merge further ACL refactoring (including bugfixes)
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-13
     More conversion of ACL's

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-12
     Fix ACLChecklist async tests.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-11
     More conversion to the new ACL approach.",1546,data/crawl/squid/hunk_5405.cpp,,,data/crawl/squid/old_hunk_5405.cpp,data/crawl/squid/new_hunk_5405.cpp,-1,53,,"fatal (""requiresRequest SHOULD have been true for this ACL!!"");","[""addLog""]","[[], [""fatal"", ""requiresRequest"", ""SHOULD"", ""have"", ""been"", ""true"", ""for"", ""this"", ""ACL""]]",[13140470785063076799],7517,"1774 days, 0:00:00"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7775.cpp,,,data/crawl/squid/old_hunk_7775.cpp,data/crawl/squid/new_hunk_7775.cpp,48,61,"fprintf(lf, ""Page faults with physical i/o: %d\n"",
	rusage.ru_majflt);","fprintf(lf, ""Page faults with physical i/o: %ld\n"",
	rusage.ru_majflt);","[""updateContent""]","[[""%d\\n""], [""%ld\\n""]]",[-8409904864072351395],7516,"3752 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a22e6cd3b6e8889984d266816aaea8fcf27ee13d,13 Jul 2009,"Support adaptation sets and chains, including dynamic ICAP chains:

  - Support adaptation service sets and chains
    (adaptation_service_set and adaptation_service_chain)

  - Dynamically form chains based on ICAP X-Next-Services header
    (icap_service routing=on)

  - Support cross-transactional ICAP header exchange
    (adaptation_masterx_shared_names)


An adaptation service set contains similar, interchangeable services. No more
than one service is successfully applied. If one service is down or fails,
Squid can use another service. Think ""hot standby"" or ""spare"" ICAP servers. 

Sets may seem similar to the existing ""service bypass"" feature, but they allow
the failed adaptation to be retried and succeed if a replacement service is
available. The services in a set may be all optional or all essential,
depending on whether ignoring the entire set is acceptable. The mixture of
optional and essential services in a set is supported, but yields results that
may be difficult for a human to anticipate or interpret. Squid warns when it
detects such a mixture.

When performing adaptations with a set, failures at a service (optional or
essential, does not matter) are retried with a different service if possible.
If there are no more replacement services left to try, the failure is treated
depending on whether the last service tried was optional or essential: Squid
either tries to ignore the failure and proceed or terminates the master
transaction.


An adaptation chain is a list of different services applied one after another,
forming an adaptation pipeline. Services in a chain may be optional or
essential. When performing adaptations, failures at an optional service are
ignored as if the service did not exist in the chain.

Request satisfaction terminates the adaptation chain.


When forming a set or chain for a given transaction, optional down services
are ignored as if they did not exist.

ICAP and eCAP services can be mixed and matched in an adaptation set or chain.


Merged from 3p1-plus branch at r9513.


* Implementation notes

The notes below focus on _changes_. Adaptation terminology and current layers
are now being documented in src/adaptation/notes.dox

Service sets and chains are implemented as ServiceGroup class kids. They are
very similar in most code aspects. The primary external difference is that
ServiceSet can ""replace"" a service and ServiceChain can find the ""next""
service.  The internal search code is implemented in ServiceGroup parent and
is parametrized by the kids.

Before the adaptation starts, Squid calculates the adaptation ""plan"", which is
just an iterator into the ServiceGroup. The client- and server-side adaptation
initiators used to deal with Service pointers. They now deal with ServiceGroup
pointers. The only interesting difference is that a ServiceGroup does not have
a notion of being optional or essential. Thus, if adaptation start fails, we
do not know whether the failure can be bypassed. Fortunately, starting an
adaptation does not require anything that depends on the adaptation services,
so we now simply assert that the start succeeds.

If the entire adaptation fails, the callers are notified as before. They are
told whether they can ignore the failure as before. No changes there.

A new Adaptation::Iterator class has been added to execute the adaptation
plan. That class is responsible for iterating the services in a service group
until the plan is exhausted or cannot progress due to a final failure. 


Dynamically form adaptation chains based on the ICAP X-Next-Services header.

If an ICAP service with the routing=1 option in squid.conf returns an ICAP
X-Next-Services response header during a successful REQMOD or RESPMOD
transaction, Squid abandons the original adaptation plan and forms a new
adaptation chain consisting of services identified in the X-Next-Services
header value (using a comma-separated list of adaptation service names from
squid.conf).  The dynamically created chain is destroyed once the new plan is
completed or replaced.

This feature is useful when a custom adaptation service knows which other
services are applicable to the message being adapted.

Limit adaptation iterations to adaptation_service_iteration_limit to protect
Squid from infinite adaptation loops caused by ICAP services constantly
including themselves in the dynamic adaptation chain they request. When the
limit is exceeded, the master transaction fails. The default limit of 16
should be large enough to not require an explicit configuration in most
environments yet may be small enough to limit side-effects of loops.

TODO: Add metadata support to eCAP API and honor X-Next-Services there as
well. Currently, only ICAP services can form dynamic chains but the formed
chains may contain eCAP services.


Other improvements:

Polished adaptation service configuration in squid.conf. Old format with an
anonymous bypass option is deprecated but still supported. Quit with a fatal
message if an adaptation service is misconfigured (debugging level-0 messages
do not seem to work at that stage, but that is probably another, general bug).


Polished HttpRequest::adaptHistory() interface so that the code that knows the
history is needed can force history creation without complex
configuration-time preparations and state. Currently, all adaptation history
users but the logging-related ones know runtime whether the history must be
created (e.g., when a certain ICAP header is received).


Fixed ""canonical"" Request URL maintenance when ICAP clones requests.
TODO: The urlCanonical() must become HttpRequest::canonical(), hiding the
often out-of-sync canonical data member.


Fixed ICAP request parsing (for ICAP logging). We used to parse Request-Line
as if it were the first header. TODO: optimize by parsing only when needed.


Fixed AccessCheck case where a service group disappears during a nb ACL check.
Replaced ""done"" member with an existing AsyncJob mustStop mechanism. Removed
extra async call as unneeded because ACL callbacks are already async.",1718,data/crawl/squid/hunk_3720.cpp,,,data/crawl/squid/old_hunk_3720.cpp,data/crawl/squid/new_hunk_3720.cpp,3,3,"disableBypass(""sent adapted content"");","disableBypass(""sent adapted content"", true);","[""addContent""]","[[], [""true""]]",[2314047222236391260],7515,0:00:00
https://github.com/squid-cache/squid/commit/e41db37b10eb9b0f41876e7287477a17e86d1250,12 Jul 2009,"Author: Markus Moeller <huaraz@moeller.plus.com>
Bug 2710: squid_kerb_auth non-terminated string",38,data/crawl/squid/hunk_3747.cpp,,,data/crawl/squid/old_hunk_3747.cpp,data/crawl/squid/new_hunk_3747.cpp,-1,7,,"fprintf(stdout, ""BH Not enough memory\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""Not"", ""enough"", ""memory\\n""]]",[-5566043686881520900],7514,"69 days, 14:24:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,162,,"fprintf(stderr, ""%s| %s: %s failed: %s\n"", LogTime(), PROGRAM, function, buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""%s"", ""failed"", ""%s\\n"", ""LogTime"", ""PROGRAM"", ""function"", ""buf""]]",[-13411346457197098932],7513,"532 days, 14:24:00"
https://github.com/squid-cache/squid/commit/18ec8500ce3dc21de9f8325af0f2d5cf93132fcd,17 Nov 2009,Fixed some cases of variable shadowing,106,data/crawl/squid/hunk_3535.cpp,,,data/crawl/squid/old_hunk_3535.cpp,data/crawl/squid/new_hunk_3535.cpp,10,10,"httpHeaderPutStrf(&rep->header, type, ""NTLM %s"", ntlm_request->server_blob);","httpHeaderPutStrf(&rep->header, hdrType, ""NTLM %s"", ntlm_request->server_blob);","[""updateVariable""]","[[""type""], [""hdrType""]]",[-250865384264815883],7512,0:00:00
https://github.com/squid-cache/squid/commit/076df709f55936015ee00327e3b6586e1f9ec9f7,17 Nov 2009,Fixed some cases of variable shadowing,50,data/crawl/squid/hunk_3531.cpp,,,data/crawl/squid/old_hunk_3531.cpp,data/crawl/squid/new_hunk_3531.cpp,23,23,"httpHeaderPutStrf(&rep->header, type, ""Negotiate %s"", negotiate_request->server_blob);","httpHeaderPutStrf(&rep->header, reqType, ""Negotiate %s"", negotiate_request->server_blob);","[""updateVariable""]","[[""type""], [""reqType""]]",[-5220649235763027813],7511,0:00:00
https://github.com/squid-cache/squid/commit/e053c141e955538f4b2a06f31ead42b66a3f3abd,18 Nov 2009,Fixed some cases of variable shadowing,180,data/crawl/squid/hunk_3521.cpp,,,data/crawl/squid/old_hunk_3521.cpp,data/crawl/squid/new_hunk_3521.cpp,14,14,"printf(""%s ERR message=\""No session available\""\n"", index);","printf(""%s ERR message=\""No session available\""\n"", user_key);","[""updateVariable""]","[[""index""], [""user_key""]]",[-624353835239633432],7510,0:00:00
https://github.com/squid-cache/squid/commit/27bc2077cdd539eabfb20ed051980dba4e75b51b,22 Mar 2010,"Compat: shuffle replacement OS function fiels into libcompat

* strerror() is omitted due to an emulator, and multiple
  replacement functions being defined with rather complicated
  interactions.

* the .c parts must also remain in lib/ for now to simplify
  autoconf logics.",612,data/crawl/squid/hunk_3408.cpp,,,data/crawl/squid/old_hunk_3408.cpp,data/crawl/squid/new_hunk_3408.cpp,7,7,"printf(""$fail A system error occured looking up Domain/IP '%s': %s.\n"", buf, xgai_strerror(res));","printf(""$fail A system error occured looking up Domain/IP '%s': %s.\n"", buf, gai_strerror(res));","[""updateVariable""]","[[""xgai_strerror""], [""gai_strerror""]]",[-2238227337298578263],7509,0:00:00
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4954.cpp,,,data/crawl/squid/old_hunk_4954.cpp,data/crawl/squid/new_hunk_4954.cpp,-1,48,,auth_user_request->denyMessage(blob);,"[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""blob""]]",[4613437229150417116],7508,"1009 days, 19:12:00"
https://github.com/squid-cache/squid/commit/225b7b107261e7d01d087e1061533751c2a7a0e0,13 Feb 2003,"Summary: Merge further ACL refactoring (including bugfixes)
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-13
     More conversion of ACL's

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-12
     Fix ACLChecklist async tests.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-11
     More conversion to the new ACL approach.",1546,data/crawl/squid/hunk_5409.cpp,,,data/crawl/squid/old_hunk_5409.cpp,data/crawl/squid/new_hunk_5409.cpp,43,-1,"fatal(""unexpected authenticateAuthenticate reply\n"");",,"[""removeLog""]","[[""fatal"", ""unexpected"", ""authenticateAuthenticate"", ""reply\\n""], []]",[7738081176919200605],7507,"1947 days, 4:48:00"
https://github.com/squid-cache/squid/commit/fab7a87efecd0ee96094fb21db85441374d9ba62,07 Jan 2002,"Large rewrite to support one-shot mode of operation (one user per PAM
connection, no connection cache).

Have also added a man page describing it's use.",233,data/crawl/squid/hunk_5699.cpp,,,data/crawl/squid/old_hunk_5699.cpp,data/crawl/squid/new_hunk_5699.cpp,74,-1,"fprintf(stdout, ""ERR\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""ERR\\n""], []]",[5640522499396071603],7506,"1856 days, 9:36:00"
https://github.com/squid-cache/squid/commit/56ff468707b9146dc19a5c519fd421dd2b9cfcb9,08 Jul 2010,Helpers: upgrade digest helpers to C++,273,data/crawl/squid/hunk_3228.cpp,,,data/crawl/squid/old_hunk_3228.cpp,data/crawl/squid/new_hunk_3228.cpp,4,3,"printf(""No attribute value found\n"");","debug(""No attribute value found\n"");","[""updateLog""]","[[""printf""], [""debug""]]",[474360991262646625],7505,0:00:00
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3190.cpp,,,data/crawl/squid/old_hunk_3190.cpp,data/crawl/squid/new_hunk_3190.cpp,-1,165,,"fprintf( debug, ""# match from %d-%d on \""%s\""\n"", 
			    subs[offset].rm_so, subs[offset].rm_eo, 
			    line+subs[offset].rm_so );","[""addLog""]","[[], [""fprintf"", ""debug"", ""match"", ""from"", ""%d"", ""%d"", ""on"", ""\\"", ""%s\\"", ""\\n"", ""subs[offset]"", ""rm_so"", ""subs[offset]"", ""rm_eo"", ""line"", ""subs[offset]"", ""rm_so""]]",[-11309608075672930126],7504,0:00:00
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3295.cpp,,,data/crawl/squid/old_hunk_3295.cpp,data/crawl/squid/new_hunk_3295.cpp,3,3,"printf(""ERR No such user\n"");","SEND_ERR(""No such user"");","[""updateLog"", ""updateContent""]","[[""printf"", ""ERR"", ""user\\n""], [""SEND_ERR"", ""user""]]",[882446102806684045],7503,"6 days, 19:12:00"
https://github.com/squid-cache/squid/commit/e313f2b8cb37f3dfac17bedf35396e1e3a43488a,03 Jul 2008,"Author: Henrik Nordstrom <henrik@henriknordstrom.net>
Port from 2.6: Support for cachemgr sub-actions

see. http://www.squid-cache.org/Versions/v2/2.6/changesets/10659.patch

This brings the Squid-3 cachemgr.cgi up to parity and backwards
compatibility with Squid 2.6 cachemgr.cgi",43,data/crawl/squid/hunk_4266.cpp,,,data/crawl/squid/old_hunk_4266.cpp,data/crawl/squid/new_hunk_4266.cpp,-1,8,,"fputs("" "", stdout);","[""addLog""]","[[], [""fputs"", ""stdout""]]",[-12222144665393643080],7502,"613 days, 4:48:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5903.cpp,,,data/crawl/squid/old_hunk_5903.cpp,data/crawl/squid/new_hunk_5903.cpp,-1,224,,"fprintf(stderr, ""Sending packet: "");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Sending"", ""packet""]]",[-23441903884649910407],7501,"713 days, 14:24:00"
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2919.cpp,,,data/crawl/squid/old_hunk_2919.cpp,data/crawl/squid/new_hunk_2919.cpp,47,46,"storeAppendPrintf(sentry, ""\tStore Disk files open:                %4d\n"",
                      store_open_disk_fd);","storeAppendPrintf(sentry, ""\tStore Disk files open:                %4.0f\n"",
                      stats.store_open_disk_fd);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%4d\\n""], [""%4"", ""0f\\n"", ""stats""]]",[4215632211798628011],7500,0:00:00
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,-1,11,,"fprintf(stderr, ""-d full debug\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""d"", ""full"", ""debug\\n""]]",[-8556171269710379750],7499,"400 days, 19:12:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,-1,14,,"fprintf(stderr, ""-h help\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""h"", ""help\\n""]]",[-14753409232526306072],7498,"400 days, 19:12:00"
https://github.com/squid-cache/squid/commit/e24f13cdd75215b6b297ef81b44b93daf94b5f20,30 Jun 2011,"Remove the HttpStateData::orig_request member

When FwdServer::_peer is set, HttpStateData constructor creates a new special
HttpRequest, overwriting the request pointer set in the parent (ServerStateData) 
constructor to fwd->request.

This special HttpRequest sets the proper urlpath (which maybe different from
the original HttpRequest), the host (HttpRequest::SetHost/GetHost) to be the
peer hostname and inherits flags, protocol, method. Also sets the
HttpRequest::flags.proxying.

Probably this is originaly done to handle only the differences in urlpath and
the host. But this is has  as result to have two HttpRequests object in
HttpStateData, but their difference is not clear.

This patch removes the HttpStateData::orig_request member and uses only the 
HttpStateData::request member

Bugs fixed with this patch:

- Debugs() and error pages sometimes display the cache_peer hostname as the URL   requested domain name when going to an origin. Regardless of what the virtual
  host name actually is.

- The request_header_access configuration parameter does not work when
  sending requests to parent proxies.

- Squid may cache replies to requests with no-store in headers when uses a
  parent cache.

- parent caches which have been configured as ""sibling"" for specific domains
  using the neighbor_type_domain parameter are not counted.

- Probably many other


This is a Measurement Factory project",271,data/crawl/squid/hunk_2529.cpp,,,data/crawl/squid/old_hunk_2529.cpp,data/crawl/squid/new_hunk_2529.cpp,11,11,"hdr_out->putStr(HDR_HOST, orig_request->GetHost());","hdr_out->putStr(HDR_HOST, request->GetHost());","[""updateVariable""]","[[""orig_request""], [""request""]]",[-5422013243546040469],7497,0:00:00
https://github.com/squid-cache/squid/commit/f1dc9b308900a8d2a3375c1ddfc7ff95c1afb8a4,07 Jul 1997,finish mega config hacking on kite,1637,data/crawl/squid/hunk_7137.cpp,,,data/crawl/squid/old_hunk_7137.cpp,data/crawl/squid/new_hunk_7137.cpp,11,-1,"fprintf(fp, ""\n"");",,"[""removeLog""]","[[""fprintf"", ""fp"", ""\\n""], []]",[5179306325123647028],7496,"3980 days, 14:24:00"
https://github.com/squid-cache/squid/commit/7ff7a211c25688d2d6742acc7bc271f700c9dbe9,08 Aug 2011,Migrate cf_gen.cc from C-style stdio to C++ iostreams.,300,data/crawl/squid/hunk_2496.cpp,,,data/crawl/squid/old_hunk_2496.cpp,data/crawl/squid/new_hunk_2496.cpp,10,-1,"fprintf(fp, ""#endif\n"");",,"[""removeLog""]","[[""fprintf"", ""fp"", ""endif\\n""], []]",[-2535454387840088139],7495,0:00:00
https://github.com/squid-cache/squid/commit/7ff7a211c25688d2d6742acc7bc271f700c9dbe9,08 Aug 2011,Migrate cf_gen.cc from C-style stdio to C++ iostreams.,300,data/crawl/squid/hunk_2489.cpp,,,data/crawl/squid/old_hunk_2489.cpp,data/crawl/squid/new_hunk_2489.cpp,3,-1,"printf(""Error on line %d\n"", linenum);",,"[""removeLog""]","[[""printf"", ""Error"", ""on"", ""line"", ""%d\\n"", ""linenum""], []]",[-23449878132933055095],7494,0:00:00
https://github.com/squid-cache/squid/commit/2be46d6709526a1c4454c0f5fa8716efe354b617,21 Sep 2011,"ext_session_acl: version 1.1

 * Add fixed period session support with -T

 * Fix synchronization between multiple helpers accessing the database

 * Fix crash when configured with non-concurrent settings.",80,data/crawl/squid/hunk_2435.cpp,,,data/crawl/squid/old_hunk_2435.cpp,data/crawl/squid/new_hunk_2435.cpp,14,16,"printf(""%s ERR message=\""No session available\""\n"", user_key);","printf(""%s ERR message=\""No session available\""\n"", channel_id);","[""updateVariable""]","[[""user_key""], [""channel_id""]]",[35040588119375336],7493,0:00:00
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/hunk_2357.cpp,,,data/crawl/squid/old_hunk_2357.cpp,data/crawl/squid/new_hunk_2357.cpp,90,-1,"fprintf(stderr, ""Not implemented"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Not"", ""implemented""], []]",[17868059573967399683],7492,0:00:00
https://github.com/squid-cache/squid/commit/62607543b840af726220429b840f8b878fa5fe81,14 Jul 1997,"misc changes, but still in nonworking state",23,data/crawl/squid/hunk_7127.cpp,,,data/crawl/squid/old_hunk_7127.cpp,data/crawl/squid/new_hunk_7127.cpp,-1,4,,"fprintf(stderr, ""FATAL: %s\n"", message);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""FATAL"", ""%s\\n"", ""message""]]",[-19574497941444277743],7491,"3969 days, 4:48:00"
https://github.com/squid-cache/squid/commit/cd4f6e9e855d1bee35d13494f312399cdf873143,02 May 1998,removed cache_stoplist_pattern and associated code,43,data/crawl/squid/hunk_6435.cpp,,,data/crawl/squid/old_hunk_6435.cpp,data/crawl/squid/new_hunk_6435.cpp,6,-1,"storeAppendPrintf(entry, ""%s"", name);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""name""], []]",[248933907621281061],7490,"2609 days, 9:36:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1341.cpp,,,data/crawl/squid/old_hunk_1341.cpp,data/crawl/squid/new_hunk_1341.cpp,15,15,"fprintf(stderr, ""%s: ERROR: Could not Control Service %s\n"",
                    APP_SHORTNAME, service_name);","fprintf(stderr, ""%s: ERROR: Could not Control Service "" SQUIDSBUFPH ""\n"",
                    APP_SHORTNAME, SQUIDSBUFPRINT(service_name));","[""updateContent"", ""addContent"", ""addVariable""]","[[""%s\\n""], [""SQUIDSBUFPH"", ""\\n"", ""SQUIDSBUFPRINT""]]",[-1373802741959305100],7489,"14 days, 14:24:00"
https://github.com/squid-cache/squid/commit/25f983407b3c3df95d9f81edf1bd917316f2dfda,01 Nov 2010,"Bug 3038: Detatch libmisc from libcompat

* Migrates many of the remaining libmisc portability wrappers into
  libcompat.

* Splits libmisc into:
   libprofiler - Squid internal profiler (developer-only)
   libmiscencoding - Various binary encoding / crypto algorithms
   libmisccontainers - Various data container algorithms

* Makes all binaries which need to link the libmisc* pieces directly instead
  of via $(COMPAT_LIB) which now only links the libcompat and internal
  profiler due to profiling being used on some libcompat functions.

* Adds a stub_debug for binaries needing the Debug.h API without squid
  timers and globals.

Some effort has been made to identify binaries whose dependencies can be
reduced. More of this dependency removal can be done in future.",2111,data/crawl/squid/hunk_2899.cpp,,,data/crawl/squid/old_hunk_2899.cpp,data/crawl/squid/new_hunk_2899.cpp,173,-1,"fprintf(tracefp, ""r:%p:%p:%d\n"", p, s, sz);",,"[""removeLog""]","[[""fprintf"", ""tracefp"", ""r"", ""%p"", ""%p"", ""%d\\n"", ""p"", ""s"", ""sz""], []]",[4161047314464603172],7488,"1027 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1003.cpp,,,data/crawl/squid/old_hunk_1003.cpp,data/crawl/squid/new_hunk_1003.cpp,14,9,"output->Printf("" disk_io_pending"");","output->append("" disk_io_pending"", 16);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""16""]]",[-16146027967618661650],7487,"54 days, 0:00:00"
https://github.com/squid-cache/squid/commit/bf3e8d5a0de0f6f59996d1a8fb88402ba2273ede,05 Jun 2015,"SourceLayout: convert helper stats display to Packable API

Requires unifying the classes Helper::Request queues which incidentally
also brings stateful helpers closer to concurrency support",192,data/crawl/squid/hunk_690.cpp,,,data/crawl/squid/old_hunk_690.cpp,data/crawl/squid/new_hunk_690.cpp,24,15,"storeAppendPrintf(sentry, ""avg service time: %d msec\n"",
                      hlp->stats.avg_svc_time);","p->appendf(""  avg service time: %d msec\n"", stats.avg_svc_time);","[""addLog"", ""removeVariable"", ""updateContent"", ""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""hlp""], [""p"", ""appendf""]]",[7194585758806152193],7486,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_627.cpp,,,data/crawl/squid/old_hunk_627.cpp,data/crawl/squid/new_hunk_627.cpp,3,3,"rep->header.putStr(HDR_CONNECTION, ""keep-alive"");","rep->header.putStr(Http::HdrType::CONNECTION, ""keep-alive"");","[""removeVariable"", ""addVariable""]","[[""HDR_CONNECTION""], [""Http"", ""HdrType"", ""CONNECTION""]]",[13771875659940423964],7485,0:00:00
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4178.cpp,,,data/crawl/squid/old_hunk_4178.cpp,data/crawl/squid/new_hunk_4178.cpp,-1,29,,"fprintf(stdout, ""BH quit command\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""quit"", ""command\\n""]]",[-2382764984285885200],7484,"771 days, 19:12:00"
https://github.com/squid-cache/squid/commit/faadb1b64436077d7f3b02e30cb9684b1c9ad075,10 Apr 2006,removed obsolete ldap files. These was moved to the ldap helper directory,662,data/crawl/squid/hunk_4873.cpp,,,data/crawl/squid/old_hunk_4873.cpp,data/crawl/squid/new_hunk_4873.cpp,218,-1,"fprintf(stderr, PROGRAM_NAME "" WARNING, LDAP search error '%s'\n"", ldap_err2string(rc));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""LDAP"", ""search"", ""error"", ""%s"", ""\\n"", ""ldap_err2string"", ""rc""], []]",[10530649752204183237],7483,"2812 days, 19:12:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,902,,"fatal(""unreachable code"");","[""addLog""]","[[], [""fatal"", ""unreachable"", ""code""]]",[-1700840284824413321],7482,"240 days, 4:48:00"
https://github.com/squid-cache/squid/commit/ea5746353c1e72f8f59c0d08906a3d90400b0dac,18 Nov 2016,"TLS: Add ErrorString() function to libsecurity API

To convert library error codes to strings in a library agnostic way.",108,data/crawl/squid/hunk_135.cpp,,,data/crawl/squid/old_hunk_135.cpp,data/crawl/squid/new_hunk_135.cpp,10,10,"fatalf(""SSL private key '%s' does not match public key '%s': %s\n"",
                       certfile, keyfile, ERR_error_string(ssl_error, NULL));","fatalf(""SSL private key '%s' does not match public key '%s': %s\n"",
                       certfile, keyfile, Security::ErrorString(ssl_error));","[""removeVariable"", ""addVariable""]","[[""ERR_error_string"", ""NULL""], [""Security"", ""ErrorString""]]",[7639119569518464859],7481,0:00:00
https://github.com/squid-cache/squid/commit/c943f3313a892d71be08ad823a58b1969e56a817,30 Mar 1996,"assign store.c to debugging section 20
fixed storeRebuildFromDisk bug introduced when switched from fdopen(, ""a"")
to fdopen(, ""w"").  Now storeInit() makes a little more sense.",647,data/crawl/squid/hunk_7935.cpp,,,data/crawl/squid/old_hunk_7935.cpp,data/crawl/squid/new_hunk_7935.cpp,91,-1,fatal(tmpbuf);,,"[""removeLog""]","[[""fatal"", ""tmpbuf""], []]",[2982793776932876073],7480,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7710.cpp,,,data/crawl/squid/old_hunk_7710.cpp,data/crawl/squid/new_hunk_7710.cpp,-1,128,,"fprintf (fopen(""conftestval"", ""w""), ""%d\n"", val);","[""addLog""]","[[], [""fprintf"", ""fopen"", ""conftestval"", ""w"", ""%d\\n"", ""val""]]",[3619549246778451972],7479,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7716.cpp,,,data/crawl/squid/old_hunk_7716.cpp,data/crawl/squid/new_hunk_7716.cpp,-1,6,,"printf(""<OPTION VALUE=\""server_list\"">Cache Server List\n"");","[""addLog""]","[[], [""printf"", ""OPTION"", ""VALUE"", ""\\"", ""server_list\\"", ""Cache"", ""Server"", ""List\\n""]]",[-10051900618652627175],7478,12:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7742.cpp,,,data/crawl/squid/old_hunk_7742.cpp,data/crawl/squid/new_hunk_7742.cpp,-1,32,,"storeAppendPrintf(sentry, ""{Read Histogram:}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Read"", ""Histogram"", ""\\n""]]",[-4886403402328369767],7477,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/9d90e6654711ff3cc842698737db21948de09868,21 Sep 1996,"        - Moved ICMP socket to external 'pinger' program.
        - Moved tvSubMsec() to lib/util.c.
        - Moved accessLogTime() to debug.c.",784,data/crawl/squid/hunk_7511.cpp,,,data/crawl/squid/old_hunk_7511.cpp,data/crawl/squid/new_hunk_7511.cpp,-1,60,,fatal_dump(xstrerror());,"[""addLog""]","[[], [""fatal_dump"", ""xstrerror""]]",[-6060328181111983635],7476,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/582b645678b879c12ec52bebe25ef807dc64de06,30 Apr 1997,massive casting cleanups!,651,data/crawl/squid/hunk_7299.cpp,,,data/crawl/squid/old_hunk_7299.cpp,data/crawl/squid/new_hunk_7299.cpp,15,16,"storeAppendPrintf(data->sentry, close_bracket);","storeAppendPrintf(ctrl->sentry, close_bracket);","[""updateVariable""]","[[""data""], [""ctrl""]]",[14292070942582277035],7475,0:00:00
https://github.com/squid-cache/squid/commit/9e4ad609cdc6849a20b298e7c2437007109b80fc,05 May 1997,"- DO NOT set the filemap bits for unvalidated entries.  Doing so
  causes lots of race-condition problems, especially when reading
  DIRTY logs.
- Install icpDetectClientClose handler earlier.  Move from access check
  to just after reading the request.
- Log open FD's upon exit.
- Added dnsShutdownRead handler to detect dnsserver shutdowns and
  free up state.
- Added doubleAverage and integerAverage for moving average
  calculations.
- misc prototype cleanup
- misc debug_trap's and fatal_dump's
- Removed some thread splitting for fooStartComplete() because
  the various protcol start routines should never need a swapin
  callback.  The object should already be locked and swapped in.
- queue_length counter for IP cache.
- Make it okay to storeUnlock a pending object, so long as its
  not been DISPATCHED yet.
- fixed hybrid store rebuild code.
- fixed file_open() flags to TRUNC new swaplog's
- Claned up wierd (FILE *) stuff in tools.c, always write to
  debug_log().
- rewrote writePidFile() to use file_open().",505,data/crawl/squid/hunk_7266.cpp,,,data/crawl/squid/old_hunk_7266.cpp,data/crawl/squid/new_hunk_7266.cpp,11,11,"fprintf(lf, ""Page faults with physical i/o: %ld\n"",
	rusage.ru_majflt);","fprintf(debug_log, ""Page faults with physical i/o: %ld\n"",
	rusage.ru_majflt);","[""updateVariable""]","[[""lf""], [""debug_log""]]",[-1068760073879422601],7474,0:00:00
https://github.com/squid-cache/squid/commit/934b03fcac83ff55159329b6723b9d6a1d5bd194,27 Jun 1997,adding,2145,data/crawl/squid/hunk_7162.cpp,,,data/crawl/squid/old_hunk_7162.cpp,data/crawl/squid/new_hunk_7162.cpp,-1,388,,"fprintf(fp, ""}\n\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\n\\n""]]",[-10352705936551168688],7473,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f53b06f967ce5bdf5b076bba55d41f8d45a3077d,25 Aug 1997,"Configuration cleanup.
	- set up 'DEFAULT_IF_NONE' option for things like http_port
	  and cache_dir where we want to set a default only if there
	  is not one or more given in the config file.
	- Implemented the configuration dump via cachemanager.  All the
	  easy config types have dump functions; the remainder are
	  unimplemented.",220,data/crawl/squid/hunk_7087.cpp,,,data/crawl/squid/old_hunk_7087.cpp,data/crawl/squid/new_hunk_7087.cpp,5,5,"printf(""%d"", var);","storeAppendPrintf(entry, ""%s %d\n"", name, var);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%d""], [""storeAppendPrintf"", ""entry"", ""%s"", ""%d\\n"", ""name""]]",[-1346131251586176808],7472,0:00:00
https://github.com/squid-cache/squid/commit/f0b1933488ce1ce1e84f6497331a6beaf8543cb5,13 Nov 1997,"Ron Gomes fixes.
	- Remove USE_PROXY_AUTH and LOG_FULL_HEADERS from Makefile.in
	- Fixed log_full_hdrs bug
We can't use pathname_stat() for both default_all() and parsing the
config file.  We must check the pathnames only after both the
defaults and the config file have been parsed.  DW also made misc
other fixes to cache_cf.c and friends.",133,data/crawl/squid/hunk_6986.cpp,,,data/crawl/squid/old_hunk_6986.cpp,data/crawl/squid/new_hunk_6986.cpp,35,39,"printf(""Setting it to the maximum (%d).\n"", DefaultRedirectChildrenMax);","debug(3, 0) (""Setting it to the maximum (%d).\n"", DefaultRedirectChildrenMax);","[""updateLog"", ""moveLog"", ""addContent""]","[[""printf""], [""debug"", ""3"", ""0""]]",[474361003934684740],7471,0:00:00
https://github.com/squid-cache/squid/commit/a4ebeb3baabc1baa2eaf44bfd9b044a845e74b0c,29 Aug 1996,set announce_rate and clean_rate to one year if they are disabled,14,data/crawl/squid/hunk_7617.cpp,,,data/crawl/squid/old_hunk_7617.cpp,data/crawl/squid/new_hunk_7617.cpp,7,-1,"printf(""         Change your configuration file.\n"");",,"[""removeLog""]","[[""printf"", ""Change"", ""your"", ""configuration"", ""file"", ""\\n""], []]",[-10653224935150031867],7470,"246 days, 18:00:00"
https://github.com/squid-cache/squid/commit/fe40a877b8316aa3298200fdbffec14c20335257,30 Oct 1997,max okumoto errorpage and other mods,587,data/crawl/squid/hunk_7011.cpp,,,data/crawl/squid/old_hunk_7011.cpp,data/crawl/squid/new_hunk_7011.cpp,7,7,"fatal_dump(""failed to fully read error text file"");","fatal(""failed to fully read error text file"");","[""updateLog""]","[[""fatal_dump""], [""fatal""]]",[3765830668276604274],7469,"10 days, 12:00:00"
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,-1,621,,"printf(""}"");","[""addLog""]","[[], [""printf""]]",[7237409554864562455],7468,"73 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a4394ebd753cb4b23be7aaf6a11f5a5cf833df0e,21 Jun 1997,"clean up access logging, remove lots of Cacheinfo garbage
Need to relocate enums to an enums.h file, too many other wierd
dependencies.",464,data/crawl/squid/hunk_7163.cpp,,,data/crawl/squid/old_hunk_7163.cpp,data/crawl/squid/new_hunk_7163.cpp,101,-1,"storeAppendPrintf(sentry, open_bracket);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""open_bracket""], []]",[-14991446791886401303],7467,"106 days, 6:00:00"
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,79,78,"storeAppendPrintf(sentry, ""{\tTotal free:            %6d KB %d%%}\n"",
	t >> 10, percent(t, mp.arena));","storeAppendPrintf(sentry, ""\tTotal free:            %6d KB %d%%\n"",
	t >> 10, percent(t, mp.arena));","[""updateContent""]","[[""%d%%"", ""\\n""], [""%d%%\\n""]]",[-3075893759996400776],7466,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6825.cpp,,,data/crawl/squid/old_hunk_6825.cpp,data/crawl/squid/new_hunk_6825.cpp,56,55,"storeAppendPrintf(sentry, ""{%5d-%5d: %9d %2d%%}\n"",
	    i ? (1 << (i - 1)) + 1 : 1,
	    1 << i,
	    IOStats.Wais.read_hist[i],
	    percent(IOStats.Wais.read_hist[i], IOStats.Wais.reads));","storeAppendPrintf(sentry, ""%5d-%5d: %9d %2d%%\n"",
	    i ? (1 << (i - 1)) + 1 : 1,
	    1 << i,
	    IOStats.Wais.read_hist[i],
	    percent(IOStats.Wais.read_hist[i], IOStats.Wais.reads));","[""updateContent""]","[[""%2d%%"", ""\\n""], [""%2d%%\\n""]]",[-318948967552326248],7465,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6826.cpp,,,data/crawl/squid/old_hunk_6826.cpp,data/crawl/squid/new_hunk_6826.cpp,15,14,"storeAppendPrintf(sentry, ""{AVG RTT    : %d msec}\n"", e->stats.rtt);","storeAppendPrintf(sentry, ""AVG RTT    : %d msec\n"", e->stats.rtt);","[""updateContent""]","[[""msec"", ""\\n""], [""msec\\n""]]",[10844713033967271200],7464,0:00:00
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7822.cpp,,,data/crawl/squid/old_hunk_7822.cpp,data/crawl/squid/new_hunk_7822.cpp,-1,40,,"storeAppendPrintf(sentry, ""!%s "", d->domain);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%s"", ""d"", ""domain""]]",[14478533116132914383],7463,"336 days, 0:00:00"
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6755.cpp,,,data/crawl/squid/old_hunk_6755.cpp,data/crawl/squid/new_hunk_6755.cpp,61,79,"fprintf(stderr, ""Error building packet\n"");","snmplib_debug(3, ""Error building packet\n"");","[""updateLog"", ""removeVariable"", ""addContent""]","[[""fprintf"", ""stderr""], [""snmplib_debug"", ""3""]]",[17748533876247899808],7462,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,674,-1,"print_error(""No end to oid"", (char *) NULL, type);",,"[""removeLog""]","[[""print_error"", ""No"", ""end"", ""to"", ""oid"", ""char"", ""*"", ""NULL"", ""type""], []]",[-9551342531087663082],7461,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,672,-1,"print_error(""Warning: This entry is pretty silly"", np->label, type);",,"[""removeLog""]","[[""print_error"", ""Warning"", ""This"", ""entry"", ""is"", ""pretty"", ""silly"", ""np"", ""label"", ""type""], []]",[3855785183751805220],7460,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,1002,392,"fprintf(stderr, ""Mib table is bad.  Exiting\n"");","snmplib_debug(0, ""Mib table is bad.  Exiting\n"");","[""updateLog"", ""removeVariable"", ""addContent""]","[[""fprintf"", ""stderr""], [""snmplib_debug"", ""0""]]",[17748533875863898655],7459,0:00:00
https://github.com/squid-cache/squid/commit/afb34538f3fbbeaa63e98ee4923ee57b9bad2678,27 Feb 1998,%p for warnings,10,data/crawl/squid/hunk_6675.cpp,,,data/crawl/squid/old_hunk_6675.cpp,data/crawl/squid/new_hunk_6675.cpp,3,3,"fprintf(tracefp,""c:%d:%d:%x\n"", n, sz,p);","fprintf(tracefp,""c:%d:%d:%p\n"", n, sz,p);","[""updateContent""]","[[""%x\\n""], [""%p\\n""]]",[7999999999816],7458,0:00:00
https://github.com/squid-cache/squid/commit/5f6ac48b7b0af57d697d8c018397911953ca863f,29 Mar 1998,printf errors/warnings,137,data/crawl/squid/hunk_6577.cpp,,,data/crawl/squid/old_hunk_6577.cpp,data/crawl/squid/new_hunk_6577.cpp,2,2,"storeAppendPrintf(sentry, ""sample_time = %d.%d (%s)\n"",
	f->timestamp.tv_sec,
	f->timestamp.tv_usec,
	mkrfc1123(f->timestamp.tv_sec));","storeAppendPrintf(sentry, ""sample_time = %d.%d (%s)\n"",
	(int) f->timestamp.tv_sec,
	(int) f->timestamp.tv_usec,
	mkrfc1123(f->timestamp.tv_sec));","[""addVariable""]","[[], [""int"", ""int""]]",[-15110728741709529328],7457,0:00:00
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/hunk_6568.cpp,,,data/crawl/squid/old_hunk_6568.cpp,data/crawl/squid/new_hunk_6568.cpp,-1,128,,"fprintf(stderr, ""cannot open %s: %s\n"", fname, strerror(errno));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""cannot"", ""open"", ""%s"", ""%s\\n"", ""fname"", ""strerror"", ""errno""]]",[7895422984797803733],7456,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6521.cpp,,,data/crawl/squid/old_hunk_6521.cpp,data/crawl/squid/new_hunk_6521.cpp,122,-1,"printf(""$end\n"");",,"[""removeLog""]","[[""printf"", ""end\\n""], []]",[-5968934412344492967],7455,0:00:00
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,9,,"storeAppendPrintf(sentry, ""client_http.hit_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""hit_svc_time"", ""histogram"", ""\\n""]]",[8195476901053635300],7454,"21 days, 18:00:00"
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,7,,"storeAppendPrintf(sentry, ""client_http.nm_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""nm_svc_time"", ""histogram"", ""\\n""]]",[3132268931358861387],7453,"21 days, 18:00:00"
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,5,,"storeAppendPrintf(sentry, ""client_http.miss_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""miss_svc_time"", ""histogram"", ""\\n""]]",[12266767035431664052],7452,"21 days, 18:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,461,,"printf(""done walking hash table...\n"");","[""addLog""]","[[], [""printf"", ""done"", ""walking"", ""hash"", ""table"", ""\\n""]]",[4589393764457364610],7451,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,458,,"printf(""item %5d: key: '%s' item: %p\n"", i++, walker->key,
	    walker->item);","[""addLog""]","[[], [""printf"", ""item"", ""%5d"", ""key"", ""%s"", ""item"", ""%p\\n"", ""i"", ""walker"", ""key"", ""walker"", ""item""]]",[15351615556342527134],7450,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,456,,"printf(""walking hash table...\n"");","[""addLog""]","[[], [""printf"", ""walking"", ""hash"", ""table"", ""\\n""]]",[13408071408817695086],7449,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5897.cpp,,,data/crawl/squid/old_hunk_5897.cpp,data/crawl/squid/new_hunk_5897.cpp,-1,72,,printf(ERR);,"[""addLog""]","[[], [""printf"", ""ERR""]]",[4186267234049229437],7448,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,669,,"fprintf(stderr, ""Error receiving response to TCon\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""TCon\\n""]]",[-26711466169847032482],7447,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,171,,"fprintf(fd, ""    %s\n"", outbuf1);","[""addLog""]","[[], [""fprintf"", ""fd"", ""%s\\n"", ""outbuf1""]]",[1103988382793225785],7446,0:00:00
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/hunk_5838.cpp,,,data/crawl/squid/old_hunk_5838.cpp,data/crawl/squid/new_hunk_5838.cpp,-1,25,,"fprintf(stderr, ""\t-p\t\t\tpersistent LDAP connection\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""p\\t\\t\\tpersistent"", ""LDAP"", ""connection\\n""]]",[-21473577094276731833],7445,"278 days, 6:00:00"
https://github.com/squid-cache/squid/commit/95dcd2b8dd0efdc96589997f76b967c5ffb95a4a,04 May 1999,"split a bunch of FS-dependent stuff from store_dir.c into store_dir_ufs.c,
but its probably not really enough.",636,data/crawl/squid/hunk_6115.cpp,,,data/crawl/squid/old_hunk_6115.cpp,data/crawl/squid/new_hunk_6115.cpp,96,-1,"fatalf(""Swap directory %s is not a directory."", path);",,"[""removeLog""]","[[""fatalf"", ""Swap"", ""directory"", ""%s"", ""is"", ""not"", ""a"", ""directory"", ""path""], []]",[-16895851936805237112],7444,"942 days, 18:00:00"
https://github.com/squid-cache/squid/commit/14ff08f16ae47328c5ee733e6a86612c4a12eeda,09 May 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>

Here is a polished and updated test suite a bit..

* pconn-banger reports a throughtput report, like tcp-banger2
* both tools include support to validate size and a simple checksum
* A couple of pconn-banger bugs fixed.
* Wrote a small perl script that joins a URL list, and a size-checksum
report from tcp-banger to a combined list (needed to use the validation
feature).

Syntax for URL lists is eiter plain 1 URL/line, or
METHOD URL [Request-File|-] [size checksum]

The tools can send HTTP requests with any method or request-body, but
they do not (yet) support HEAD replies.",613,data/crawl/squid/hunk_6433.cpp,,,data/crawl/squid/old_hunk_6433.cpp,data/crawl/squid/new_hunk_6433.cpp,3,3,"printf(""maxfd=%d\n"", maxfd);","fprintf(stderr, ""maxfd=%d\n"", maxfd);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""stderr""]]",[-21163064839310014221],7443,"416 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4d6d905e8b4d4271702d50d56863fe37f8f52e42,12 Oct 2002,extract duplicate ufs code to ufscommon.c/h,6553,data/crawl/squid/hunk_5544.cpp,,,data/crawl/squid/old_hunk_5544.cpp,data/crawl/squid/new_hunk_5544.cpp,104,-1,"storeAppendPrintf(sentry, ""Filesystem Inodes in use: %d/%d (%d%%)\n"",
	    totl_in - free_in,
	    totl_in,
	    percent(totl_in - free_in, totl_in));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Filesystem"", ""Inodes"", ""in"", ""use"", ""%d/%d"", ""%d%%"", ""\\n"", ""totl_in"", ""free_in"", ""totl_in"", ""percent"", ""totl_in"", ""free_in"", ""totl_in""], []]",[13174929257738570109],7442,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4d6d905e8b4d4271702d50d56863fe37f8f52e42,12 Oct 2002,extract duplicate ufs code to ufscommon.c/h,6553,data/crawl/squid/hunk_5544.cpp,,,data/crawl/squid/old_hunk_5544.cpp,data/crawl/squid/new_hunk_5544.cpp,100,-1,"storeAppendPrintf(sentry, ""Filesystem Space in use: %d/%d KB (%d%%)\n"",
	    totl_kb - free_kb,
	    totl_kb,
	    percent(totl_kb - free_kb, totl_kb));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Filesystem"", ""Space"", ""in"", ""use"", ""%d/%d"", ""KB"", ""%d%%"", ""\\n"", ""totl_kb"", ""free_kb"", ""totl_kb"", ""percent"", ""totl_kb"", ""free_kb"", ""totl_kb""], []]",[5873967832361889231],7441,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4d6d905e8b4d4271702d50d56863fe37f8f52e42,12 Oct 2002,extract duplicate ufs code to ufscommon.c/h,6553,data/crawl/squid/hunk_5543.cpp,,,data/crawl/squid/old_hunk_5543.cpp,data/crawl/squid/new_hunk_5543.cpp,325,-1,fatal(errmsg);,,"[""removeLog""]","[[""fatal"", ""errmsg""], []]",[11940022100866282055],7440,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6048.cpp,,,data/crawl/squid/old_hunk_6048.cpp,data/crawl/squid/new_hunk_6048.cpp,-1,358,,fatal(errmsg);,"[""addLog""]","[[], [""fatal"", ""errmsg""]]",[-11940022100866282055],7439,"465 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3c01c39227b53e54143e3db8c9edb67ba92a5dd4,21 Feb 1997,Adding splay and binary tree code,176,data/crawl/squid/hunk_7386.cpp,,,data/crawl/squid/old_hunk_7386.cpp,data/crawl/squid/new_hunk_7386.cpp,-1,139,,"printf (""%d\n"", A->i);","[""addLog""]","[[], [""printf"", ""%d\\n"", ""A"", ""i""]]",[13382357820073349692],7438,"1632 days, 18:00:00"
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6047.cpp,,,data/crawl/squid/old_hunk_6047.cpp,data/crawl/squid/new_hunk_6047.cpp,-1,388,,"fatal(""msgget failed"");","[""addLog""]","[[], [""fatal"", ""msgget"", ""failed""]]",[-9228573894909806285],7437,"587 days, 12:00:00"
https://github.com/squid-cache/squid/commit/f5691f9c44e06c13e6970ff31f0fe540650f787e,30 Aug 2004,/tmp/cvsZKn66v,12787,data/crawl/squid/hunk_5122.cpp,,,data/crawl/squid/old_hunk_5122.cpp,data/crawl/squid/new_hunk_5122.cpp,6,6,"storeAppendPrintf(entry, ""%s basic credentialsttl %d seconds\n"", name, (int) config->credentialsTTL);","storeAppendPrintf(entry, ""%s basic credentialsttl %d seconds\n"", name, (int) credentialsTTL);","[""removeVariable"", ""addVariable""]","[[""config""], []]",[-1329061548721586620],7436,0:00:00
https://github.com/squid-cache/squid/commit/5bf79e53246bc62348102baf2c51f5d304f089bd,21 Dec 2004,Bug# 103 post merge fix for stat.cc,10,data/crawl/squid/hunk_5098.cpp,,,data/crawl/squid/old_hunk_5098.cpp,data/crawl/squid/new_hunk_5098.cpp,15,15,"storeAppendPrintf(sentry, ""\tDisk hits as % of hit requests:\t5min: %3.1f%%, 60min: %3.1f%%\n"",
                      statRequestHitDiskRatio(5),
                      statRequestHitDiskRatio(60));","storeAppendPrintf(sentry, ""\tDisk hits as %% of hit requests:\t5min: %3.1f%%, 60min: %3.1f%%\n"",
                      statRequestHitDiskRatio(5),
                      statRequestHitDiskRatio(60));","[""updateContent""]","[[""%""], [""%%""]]",[4736023717028452],7435,0:00:00
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5049.cpp,,,data/crawl/squid/old_hunk_5049.cpp,data/crawl/squid/new_hunk_5049.cpp,3,3,"printf(""ERR\n"");","printf(""ERR No such user\n"");","[""updateContent""]","[[""ERR\\n""], [""ERR"", ""No"", ""such"", ""user\\n""]]",[-4129791547095036775],7434,6:00:00
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4947.cpp,,,data/crawl/squid/old_hunk_4947.cpp,data/crawl/squid/new_hunk_4947.cpp,-1,367,,"fprintf(stderr, ""Illegal request received: '%s'\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Illegal"", ""request"", ""received"", ""%s"", ""\\n"", ""buf""]]",[-9451113466944467918],7433,0:00:00
https://github.com/squid-cache/squid/commit/9c05977a2939e40a7b749b10d1f2353f3ad57ba3,21 Aug 2006,Bootstrapped,2768,data/crawl/squid/hunk_4759.cpp,,,data/crawl/squid/old_hunk_4759.cpp,data/crawl/squid/new_hunk_4759.cpp,-1,2691,,"fprintf (f, ""%lu\n"", i);","[""addLog""]","[[], [""fprintf"", ""f"", ""%lu\\n"", ""i""]]",[-7469080072603433866],7432,0:00:00
https://github.com/squid-cache/squid/commit/9c05977a2939e40a7b749b10d1f2353f3ad57ba3,21 Aug 2006,Bootstrapped,2768,data/crawl/squid/hunk_4759.cpp,,,data/crawl/squid/old_hunk_4759.cpp,data/crawl/squid/new_hunk_4759.cpp,-1,2684,,"fprintf (f, ""%ld\n"", i);","[""addLog""]","[[], [""fprintf"", ""f"", ""%ld\\n"", ""i""]]",[-7469095072533433443],7431,0:00:00
https://github.com/squid-cache/squid/commit/55f0e6f71be85cb398494acf9a7852ce424a57b8,11 Nov 2000,"Major rewrite of async-io to make it behave a bit more sane with
substantially less overhead.

Some tuning work still remains to make it perform optimal. See the start
of store_asyncufs.h for all the knobs.",967,data/crawl/squid/hunk_5940.cpp,,,data/crawl/squid/old_hunk_5940.cpp,data/crawl/squid/new_hunk_5940.cpp,-1,17,,"fatal(""Failed to create condition variable"");","[""addLog""]","[[], [""fatal"", ""Failed"", ""to"", ""create"", ""condition"", ""variable""]]",[-18284048235763799555],7430,"1063 days, 0:00:00"
https://github.com/squid-cache/squid/commit/55f0e6f71be85cb398494acf9a7852ce424a57b8,11 Nov 2000,"Major rewrite of async-io to make it behave a bit more sane with
substantially less overhead.

Some tuning work still remains to make it perform optimal. See the start
of store_asyncufs.h for all the knobs.",967,data/crawl/squid/hunk_5940.cpp,,,data/crawl/squid/old_hunk_5940.cpp,data/crawl/squid/new_hunk_5940.cpp,-1,15,,"fatal(""Failed to create mutex"");","[""addLog""]","[[], [""fatal"", ""Failed"", ""to"", ""create"", ""mutex""]]",[-18964020235099249029],7429,"1063 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,157,,"fprintf(stderr, ""RegCloseKey %d\n"", (int) rv);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""RegCloseKey"", ""%d\\n"", ""int"", ""rv""]]",[-13964991524264781003],7428,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c99de60701b56be31c01be2045d204ed411e33ca,01 Nov 2006,"	- Many ICAP fixes from Alex Rousskov accumulated on the
	  sourceforge squid3-icap branch since 2006/10, including:

        - Polished ICAP service selection code and implemented bypass of
          optional services. The code implements icap_class
          configuration directive which is currently used as a ""set of
          interchangeable ICAP services"". Squid2 and current squid.conf
          may imply otherwise.

        - Support Transfer-* ICAP OPTIONS response header. If Squid
          knows that a service does not want the URL, Squid will not use
          the service, even if it is an essential service with
          bypass=0. Note that we may make this decision before we know
          what the service wants. Eventually, ACLs should initiate and
          wait for the OPTIONS transaction for yet-unprobed services.

        - When ICAP transactions fail to connect to the service many
          times, the service is suspended until the next OPTIONS
          update. The limit is currently hard-coded to 10. Suspended
          service is a down service and will be skipped by the ACL
          service selection algorithm.

        - Rewrote the code updating ICAP service options. We no longer
          mark the service being updated as ""down"". Only presence of
          valid and fresh options is important. We also try to update
          the options before they expire to avoid any service downtime
          or use of stale options.

        - Report interesting changes in the ICAP service state, some
          with debugging level one to alert the cache administrator.

        - When cloning a request during an ICAP 204 ""No Content"" REQMOD
          response, preserve the client address so that the rest of the
          code has access to it. This change appears to fix Squid Bug
          #1712.

        - After ICAP 100 Continue, expect new ICAP headers instead of
          HTTP headers. Reset ICAP message object to be ready to parse
          ICAP headers again. (Tsantilas Christos
          <chtsanti@users.sourceforge.net>)

        - The ieof HTTP chunk-extension was written after chunk-data
          instead of being written after the chunk-size. (Tsantilas
          Christos <chtsanti@users.sourceforge.net>)

        - Merged common code from the ICAPClientReqmodPrecache and
          ICAPClientReqmodPrecache classes into the newly added
          ICAPClientVector class.  The specific vectors do not have a
          common owner (yet?) because ServerStateData and
          ClientHttpRequest do not have a common base class. Thus,
          ICAPClientVector has to rely on its kids to communicate with
          their owners. However, at least 50% of the logic was common
          and has been moved. Eventually, we may want to create a
          simple ICAPOwner API that ServerStateData and
          ClientHttpRequest can implement and ICAPClientVector can rely
          on. This will make the code simpler and more efficient.  The
          big merge was motivated by a couple of bugs that were found
          in one vector class but that did not exist or behaved
          differently in the other vector, mostly likely due to natural
          diversion of used-to-be identical code.

        - Rewrote communication between a server-side ICAPClient*mod*
          vector and its owner.  When a server-side ICAPClient*mod*
          vector was notifying its owner of more adapted data, the
          owner could delete the vector (by calling icap->ownerAbort)
          if the store entry was not willing to accept the data.  The
          same deletion could happen when a vector was notifying the
          owner of a successful termination. In all those cases, the
          vector did not expect to be deleted and could continue to do
          something, causing segmentation faults.  Now, when more data
          is available, the vector calls its owner and checks the
          return value of the call. If it is false, the vector knows it
          has been deleted and quits. When vector terminates, it calls
          its owner and trusts the owner to always delete the vector.
          The ""check return value and quit"" design is not perfect, but
          we are paying the price for isolating the vectors from their
          owners while using direct calls between them (instead of
          MsgPipe or a similar less efficient indirect approach we use
          elsewhere).

        - Renamed doIcap to startIcap and moved more common code there.
          Changed its return type to bool. We now handle three cases
          when ICAP ACLs call back:  1) No service was selected
          (because there was no applicable service or because all
          applicable services were broken and optional). We proceed as
          if ICAP was not configured.  2) The selected essential
          service is broken. This is a fatal transaction error and we
          return an ""ICAP protocol error"" HTTP error response. We could
          proceed with the ICAP stuff, but it saves a lot of cycles to
          abort early.  3) The selected service is not broken. We
          proceed with the ICAP stuff.  The old code did not detect
          case #2, even though there was code to handle that case (with
          dangerous XXX suggestions that are now gone).  The code
          should probably be polished further to move common ftp/http
          logic from icapAclCheckDone()s into ServerStateData.

        - Make sure there is an accept callback when we are accepting.
          If there is no callback and we accept, we will silently leak
          the accepted FD.  When we are running out of FDs, there is
          often no accept callback.  The old code, when running out of
          FDs, would create lots of ""orphaned"" or ""forgotten"" FDs that
          will eventually get into a CLOSED_WAIT state and remain there
          until Squid quits.  The new code does not call accept() if
          there is no accept callback and does not register the accept
          FD for reading if the AcceptLimiter is deferring, because
          when the AcceptLimiter kicks in, it will register the accept
          FD for reading. There are most likely other places/cases
          where accept FD should not be registered for reading.

        - When an exception is caught, mark the ICAP connection as
          non-reusable so that it is not recycled while a write is
          pending but simply closed instead. Our write callback will
          still be called, unfortunately, because there is no way to
          clear the callback without invalidating its data (i.e., the
          transaction pointer).  This change prevents pconn.cc:253:
          ""!comm_has_incomplete_write(fd)"" assertion from firing when
          things go wrong (e.g., the ICAP server cannot be contacted to
          retrieve OPTIONS).  Not all exceptions caught by the ICAP
          xaction should lead to the ICAP connection termination, but
          it is very difficult if not impossible to reliably detect
          exceptional conditions when it is safe to reuse the ICAP
          connection, and it is probably not worth it anyway.

        - Added Tsantilas Christos <chtsanti@users.sourceforge.net>
          to CONTRIBUTORS for fixing ICAP bugs.

        - Polished debugging.",2091,data/crawl/squid/hunk_4722.cpp,,,data/crawl/squid/old_hunk_4722.cpp,data/crawl/squid/new_hunk_4722.cpp,111,-1,stop(notifyOwner);,,"[""removeLog""]","[[""stop"", ""notifyOwner""], []]",[4780997408801844825],7427,"78 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5153.cpp,,,data/crawl/squid/old_hunk_5153.cpp,data/crawl/squid/new_hunk_5153.cpp,-1,36,,"fprintf(stderr, ""\nUnable to connect to LDAP server:%s port:%d\n"",
	    ldapServer, port);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""LDAP"", ""server"", ""%s"", ""port"", ""%d\\n"", ""ldapServer"", ""port""]]",[3824874482844155251],7426,"477 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6708c52c59cd7fe5a6d2a4857c5e0b897a6e5f3c,28 Nov 2002,squid_ldap_group upgrade to version 2.8,367,data/crawl/squid/hunk_5496.cpp,,,data/crawl/squid/old_hunk_5496.cpp,data/crawl/squid/new_hunk_5496.cpp,-1,27,,"fprintf(stderr, PROGRAM_NAME "" WARNING, LDAP search error '%s'\n"", ldap_err2string(rc));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""LDAP"", ""search"", ""error"", ""%s"", ""\\n"", ""ldap_err2string"", ""rc""]]",[-10530649752204183237],7425,"924 days, 18:00:00"
https://github.com/squid-cache/squid/commit/934b03fcac83ff55159329b6723b9d6a1d5bd194,27 Jun 1997,adding,2145,data/crawl/squid/hunk_7162.cpp,,,data/crawl/squid/old_hunk_7162.cpp,data/crawl/squid/new_hunk_7162.cpp,-1,404,,"fprintf(fp, ""#%s\n"", line->data);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s\\n"", ""line"", ""data""]]",[-1893739475219068612],7424,"1314 days, 6:00:00"
https://github.com/squid-cache/squid/commit/20e869bf11fba5e7b98c074d91b1b76a37ddc153,19 Mar 2005,"Bug #1258: LDAP helpers fails to compile with SUN LDAP SDK

Forward port of 2.5 patch with addition of MinGW support.",75,data/crawl/squid/hunk_5069.cpp,,,data/crawl/squid/old_hunk_5069.cpp,data/crawl/squid/new_hunk_5069.cpp,-1,22,,"fprintf(stderr, ""TLS not supported with your LDAP library\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""TLS"", ""not"", ""supported"", ""with"", ""your"", ""LDAP"", ""library\\n""]]",[95155891144576559],7423,"436 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/hunk_4426.cpp,,,data/crawl/squid/old_hunk_4426.cpp,data/crawl/squid/new_hunk_4426.cpp,5,5,"httpHeaderPutStrf(hdr_out, HDR_HOST, ""%s:%d"",
                                  orig_request->host, (int) orig_request->port);","httpHeaderPutStrf(hdr_out, HDR_HOST, ""%s:%d"",
                                  orig_request->GetHost(),
                                  (int) orig_request->port);","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""host""], [""GetHost""]]",[-4546079892751069813],7422,0:00:00
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,650,,"printf (""i860-alliant-bsd\n"");","[""addLog""]","[[], [""printf"", ""i860"", ""alliant"", ""bsd\\n""]]",[15258442327341906774],7421,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,645,,"printf (""vax-dec-ultrix\n"");","[""addLog""]","[[], [""printf"", ""vax"", ""dec"", ""ultrix\\n""]]",[3771227756932470676],7420,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,1144,,exit (0);,"[""addLog""]","[[], [""exit"", ""0""]]",[-4664224508366039323],7419,"1051 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,632,,"printf (""i386-sequent-ptx2\n"");","[""addLog""]","[[], [""printf"", ""i386"", ""sequent"", ""ptx2\\n""]]",[-6392862029409455855],7418,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,622,,"printf (""ns32k-sequent-dynix\n"");","[""addLog""]","[[], [""printf"", ""ns32k"", ""sequent"", ""dynix\\n""]]",[17209887179899307144],7417,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,619,,"printf (""i386-sequent-dynix\n"");","[""addLog""]","[[], [""printf"", ""i386"", ""sequent"", ""dynix\\n""]]",[3173292423511830362],7416,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,614,,"printf (""i386-pc-bsd\n"");","[""addLog""]","[[], [""printf"", ""i386"", ""pc"", ""bsd\\n""]]",[6236355447578103142],7415,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,608,,"printf (""ns32k-encore-bsd\n"");","[""addLog""]","[[], [""printf"", ""ns32k"", ""encore"", ""bsd\\n""]]",[24666701257148115169],7414,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,606,,"printf (""ns32k-encore-mach\n"");","[""addLog""]","[[], [""printf"", ""ns32k"", ""encore"", ""mach\\n""]]",[20799389516449904868],7413,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,603,,"printf (""ns32k-encore-sysv\n"");","[""addLog""]","[[], [""printf"", ""ns32k"", ""encore"", ""sysv\\n""]]",[27225681863095121744],7412,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,597,,"printf (""%s-next-nextstep%d\n"", __ARCHITECTURE__, version);","[""addLog""]","[[], [""printf"", ""%s"", ""next"", ""nextstep%d\\n"", ""__ARCHITECTURE__"", ""version""]]",[8971082284214367716],7411,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,588,,"printf (""m68k-hp-bsd\n"");","[""addLog""]","[[], [""printf"", ""m68k"", ""hp"", ""bsd\\n""]]",[4406936890319637595],7410,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,573,,"printf (""m68k-sony-newsos%s\n"",
#ifdef NEWSOS4
          ""4""
#else
	  """"
#endif
         );","[""addLog""]","[[], [""printf"", ""m68k"", ""sony"", ""newsos%s\\n"", ""ifdef"", ""NEWSOS4"", ""4"", ""else"", ""endif""]]",[-11037806279510753175],7409,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,301,,"puts (""unknown-hitachi-hiuxwe2"");","[""addLog""]","[[], [""puts"", ""unknown"", ""hitachi"", ""hiuxwe2""]]",[16275653397761100143],7408,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,300,,"puts (""m68k-hitachi-hiuxwe2"");","[""addLog""]","[[], [""puts"", ""m68k"", ""hitachi"", ""hiuxwe2""]]",[12535257479151834420],7407,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,296,,"puts (""hppa-hitachi-hiuxwe2"");","[""addLog""]","[[], [""puts"", ""hppa"", ""hitachi"", ""hiuxwe2""]]",[28655898973806569187],7406,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,295,,"puts (""hppa2.0-hitachi-hiuxwe2"");","[""addLog""]","[[], [""puts"", ""hppa2"", ""0"", ""hitachi"", ""hiuxwe2""]]",[19143513846723492019],7405,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,294,,"puts (""hppa1.1-hitachi-hiuxwe2"");","[""addLog""]","[[], [""puts"", ""hppa1"", ""1"", ""hitachi"", ""hiuxwe2""]]",[19143513846851492405],7404,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,293,,"puts (""hppa1.0-hitachi-hiuxwe2"");","[""addLog""]","[[], [""puts"", ""hppa1"", ""0"", ""hitachi"", ""hiuxwe2""]]",[19143513846723492022],7403,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,222,,"puts(""powerpc-ibm-aix3.2.5"");","[""addLog""]","[[], [""puts"", ""powerpc"", ""ibm"", ""aix3"", ""2"", ""5""]]",[-2767682009957926458],7402,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,154,,"printf (""mips-mips-riscos%sbsd\n"", argv[1]);","[""addLog""]","[[], [""printf"", ""mips"", ""mips"", ""riscos%sbsd\\n"", ""argv[1]""]]",[-12615113043110249714],7401,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,151,,"printf (""mips-mips-riscos%ssvr4\n"", argv[1]);","[""addLog""]","[[], [""printf"", ""mips"", ""mips"", ""riscos%ssvr4\\n"", ""argv[1]""]]",[-6627189546977484297],7400,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,148,,"printf (""mips-mips-riscos%ssysv\n"", argv[1]);","[""addLog""]","[[], [""printf"", ""mips"", ""mips"", ""riscos%ssysv\\n"", ""argv[1]""]]",[-8018455546522590639],7399,"1950 days, 18:00:00"
https://github.com/squid-cache/squid/commit/fdc96a39b28104951106773c9c739ee7106fb39a,08 May 2008,"Added initial support for eCAP library (libecap), including required wrappers
for libecap::Host classes and a message translator. 

TODO: MessageTranslator should probably be renamed to MessageRep for
consistency and brevity reasons. It also lacks most of the code.",610,data/crawl/squid/hunk_4299.cpp,,,data/crawl/squid/old_hunk_4299.cpp,data/crawl/squid/new_hunk_4299.cpp,-1,57,,x->stop();,"[""addLog""]","[[], [""x"", ""stop""]]",[-1840386892150835003],7398,"72 days, 6:00:00"
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/hunk_4013.cpp,,,data/crawl/squid/old_hunk_4013.cpp,data/crawl/squid/new_hunk_4013.cpp,22,33,"storeAppendPrintf(entry, "" miss-mask=%2x"", preserve_miss_tos_mask);","snprintf(p, 15, "" miss-mask=%2x"", preserve_miss_tos_mask);","[""updateVariable"", ""updateLog"", ""addContent""]","[[""storeAppendPrintf"", ""entry""], [""snprintf"", ""p"", ""15""]]",[-9614446916550611389],7397,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/bb7907027442f83ae89b12a93dc1a6239c6a837a,11 Feb 2009,"defined printf-helping macros,
reverted some unnecessary renamings
further unsafeBuf conversions.",96,data/crawl/squid/hunk_3900.cpp,,,data/crawl/squid/old_hunk_3900.cpp,data/crawl/squid/new_hunk_3900.cpp,3,10,"mb.Printf(""%s %s HTTP/%d.%d\n"",
                      RequestMethodStr(request->method),
                      request->urlpath.size() ? request->urlpath.unsafeBuf() : ""/"",
                      request->http_ver.major, request->http_ver.minor);","mb.Printf(""%s "" SQUIDSTRINGPH "" HTTP/%d.%d\n"",
                      RequestMethodStr(request->method),
                      SQUIDSTRINGPRINT(urlpath_or_slash),
                      request->http_ver.major, request->http_ver.minor);","[""removeVariable"", ""addContent"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""%s"", ""urlpath"", ""size"", ""urlpath"", ""unsafeBuf"", ""/"", ""request"", ""request""], [""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT"", ""urlpath_or_slash""]]",[-9113466037831026587],7396,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/826a1fed8f0691b3e55764cfa31432640f963835,12 Feb 2009,"Migrated *printf's to SQUIDSTRINGPH and SQUIDSTRINGPRINT macros
de-inlined String::{find,rfind,pos,rpos}",195,data/crawl/squid/hunk_3880.cpp,,,data/crawl/squid/old_hunk_3880.cpp,data/crawl/squid/new_hunk_3880.cpp,9,8,"buf.Printf(""Proxy-Authorization: %.*s\r\n"",
                   vh.size(), vh.rawBuf());","buf.Printf(""Proxy-Authorization: "" SQUIDSTRINGPH ""\r\n"", SQUIDSTRINGPRINT(vh));","[""removeVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""%"", ""*s\\r\\n"", ""size"", ""vh"", ""rawBuf""], [""SQUIDSTRINGPH"", ""\\r\\n"", ""SQUIDSTRINGPRINT""]]",[-19891850880832541083],7395,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c3b33cb704d74286976cfd795ba083a7c04e94a2,09 Jan 2001,"login=*:password cache_peer option to pass the authenticated username to
a upstream proxy in another adminstrative domain.",29,data/crawl/squid/hunk_5884.cpp,,,data/crawl/squid/old_hunk_5884.cpp,data/crawl/squid/new_hunk_5884.cpp,-1,13,,"httpHeaderPutStrf(hdr_out, HDR_PROXY_AUTHORIZATION, ""Basic %s"",
		base64_encode(loginbuf));","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr_out"", ""HDR_PROXY_AUTHORIZATION"", ""Basic"", ""%s"", ""base64_encode"", ""loginbuf""]]",[3447329530469338278],7394,"1800 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/hunk_3627.cpp,,,data/crawl/squid/old_hunk_3627.cpp,data/crawl/squid/new_hunk_3627.cpp,74,-1,"httpHeaderPutStrf(hdr_out, HDR_AUTHORIZATION, ""Basic %s"",
                              base64_encode(loginbuf));",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""hdr_out"", ""HDR_AUTHORIZATION"", ""Basic"", ""%s"", ""base64_encode"", ""loginbuf""], []]",[-4153229444962023281],7393,12:00:00
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/hunk_3627.cpp,,,data/crawl/squid/old_hunk_3627.cpp,data/crawl/squid/new_hunk_3627.cpp,26,-1,"httpHeaderPutStrf(hdr_out, HDR_PROXY_AUTHORIZATION, ""Basic %s"",
                                  base64_encode(loginbuf));",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""hdr_out"", ""HDR_PROXY_AUTHORIZATION"", ""Basic"", ""%s"", ""base64_encode"", ""loginbuf""], []]",[-3447329530469338278],7392,12:00:00
https://github.com/squid-cache/squid/commit/876326314a57aab13a43d04ce1fcb4ac1ba6c905,15 Oct 2009,Use libcap functions instead of raw kernel interface,61,data/crawl/squid/hunk_3566.cpp,,,data/crawl/squid/old_hunk_3566.cpp,data/crawl/squid/new_hunk_3566.cpp,-1,10,,"IpInterceptor.StopTransparency(""Can't get current capabilities"");","[""addLog""]","[[], [""IpInterceptor"", ""StopTransparency"", ""Can"", ""t"", ""get"", ""current"", ""capabilities""]]",[-12025155075898479786],7391,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,469,,"fprintf(stderr, ""%s| %s: continuation needed\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""continuation"", ""needed\\n"", ""LogTime"", ""PROGRAM""]]",[-8607357028711081211],7390,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,372,,"fprintf(stderr, ""%s| %s: received type %d NTLM token\n"", LogTime(), PROGRAM, (int) *((unsigned char *)input_token.value + sizeof ntlmProtocol));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""received"", ""type"", ""%d"", ""NTLM"", ""token\\n"", ""LogTime"", ""PROGRAM"", ""int"", ""*"", ""unsigned"", ""char"", ""*"", ""input_token"", ""value"", ""sizeof"", ""ntlmProtocol""]]",[-30326822607808584511],7389,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/hunk_3437.cpp,,,data/crawl/squid/old_hunk_3437.cpp,data/crawl/squid/new_hunk_3437.cpp,3,3,"fprintf(stderr, ""%s| %s: AF %s %s\n"", LogTime(), PROGRAM,
                        ""AA=="", user);","fprintf(stderr, ""%s| %s: DEBUG: AF %s %s\n"", LogTime(), PROGRAM,
                        ""AA=="", user);","[""updateContent""]","[[], [""DEBUG""]]",[7711770546127209080],7388,0:00:00
https://github.com/squid-cache/squid/commit/06f0c8afe4148609e3919881ee18ffbbe0dcf804,15 Mar 2000,adding,152,data/crawl/squid/hunk_6072.cpp,,,data/crawl/squid/old_hunk_6072.cpp,data/crawl/squid/new_hunk_6072.cpp,-1,20,,"fatalf(""Cannot open '%s' for writing.\n""
		""\tThe parent directory must be writeable by the\n""
		""\tuser '%s', which is the cache_effective_user\n""
		""\tset in squid.conf."", path, Config.effectiveUser);","[""addLog""]","[[], [""fatalf"", ""Cannot"", ""open"", ""%s"", ""for"", ""writing"", ""\\n"", ""\\tThe"", ""parent"", ""directory"", ""must"", ""be"", ""writeable"", ""by"", ""the\\n"", ""\\tuser"", ""%s"", ""which"", ""is"", ""the"", ""cache_effective_user\\n"", ""\\tset"", ""in"", ""squid"", ""conf"", ""path"", ""Config"", ""effectiveUser""]]",[3071125531774423807],7387,"2691 days, 6:00:00"
https://github.com/squid-cache/squid/commit/06f0c8afe4148609e3919881ee18ffbbe0dcf804,15 Mar 2000,adding,152,data/crawl/squid/hunk_6072.cpp,,,data/crawl/squid/old_hunk_6072.cpp,data/crawl/squid/new_hunk_6072.cpp,-1,16,,"fatalf(""Cannot open '%s' because\n""
		""\tthe parent directory does not exist.\n""
		""\tPlease create the directory.\n"", path);","[""addLog""]","[[], [""fatalf"", ""Cannot"", ""open"", ""%s"", ""because\\n"", ""\\tthe"", ""parent"", ""directory"", ""does"", ""not"", ""exist"", ""\\n"", ""\\tPlease"", ""create"", ""the"", ""directory"", ""\\n"", ""path""]]",[1166021827210040158],7386,"2691 days, 6:00:00"
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4954.cpp,,,data/crawl/squid/old_hunk_4954.cpp,data/crawl/squid/new_hunk_4954.cpp,-1,39,,"auth_user_request->denyMessage(""Login successful"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""Login"", ""successful""]]",[9105902704882108649],7385,"841 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8d3b341efba50621e1068e734ceb32c7cb9f2482,29 Aug 2007,"Bug #2057: NTLM stop work in messengers after upgrade to squid 2.6 stable 14

There is clients out there who only signal keep-alive during the NTLM
handshake, not on the final request. For example seen on CONNECT requests.

This patch makes Squid automatically fall back on Basic/Digest if NTLM
or Negotiate authentication can not be performed. Detected by seeing a
challenge from the helper on a non-persistent connection.",99,data/crawl/squid/hunk_4474.cpp,,,data/crawl/squid/old_hunk_4474.cpp,data/crawl/squid/new_hunk_4474.cpp,-1,12,,"auth_user_request->denyMessage(""NTLM authentication requires a persistent connection"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""NTLM"", ""authentication"", ""requires"", ""a"", ""persistent"", ""connection""]]",[-18540693860504430209],7384,"504 days, 0:00:00"
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5053.cpp,,,data/crawl/squid/old_hunk_5053.cpp,data/crawl/squid/new_hunk_5053.cpp,-1,3,,"digest_request->setDenyMessage(""Incorrect password"");","[""addLog""]","[[], [""digest_request"", ""setDenyMessage"", ""Incorrect"", ""password""]]",[3651971687145068688],7383,"932 days, 12:00:00"
https://github.com/squid-cache/squid/commit/351fe86d54733fd51afc5acf8d9a7fb3cdc1f028,08 Mar 2009,"Extracted transaction state storage and related checks from ACLChecklist into
ACLFilledChecklist. Context: SourceLayout: acl/, take 1

ACLChecklist contained many data members representing the state of the current
transaction (in a broad sense). These members and related methods depended
on complex types such as HttpRequest and ConnStateData. Any Squid code using
ACLChecklist (and there is a lot of that code) was, hence, dependent on these
types. These dependencies caused, among other things, huge SOURCES lists in
src/Makefile.am, often for trivial targets such as ufsdump and test cases.

ACLChecklist is an abstract class now (to make sure we do not accidentally
create it). ACLChecklist has only one kid: ACLFilledChecklist. The Filled()
global function can be used to cast ACLChecklist* to ACLFilledChecklist*.
Since all ACLChecklist objects have to be ACLFilledChecklist objects, the cast
is fast and safe. The cast allows us to avoid bloating ACLChecklist with
virtual methods that only make sense in ACLFilledChecklist context.

ACLFilledChecklist now contains state-specific members while ACLChecklist
contains basic check list logic. The code that organizes or passes through
ACL checks does not need to be exposed to ACLFilledChecklist and the data
types it depends on.

Furthermore, ACLFilledChecklist should not contain complicated checks either.
It should focus on maintaining the state. The checks should go into specific
ACLs. Otherwise, complex checks cause dependency cycles with higher-level
libraries that provide code for those checks and yet depend on having access
to ACLFilledChecklist to implement specific ACLs. Currently, only the
authenticated() method got moved to auth/Acl.{cc,h} to break the circular
dependency between acl/libs and auth/libs. More work in that direction will
probably be required as we move more src/* code into libraries.

ACLFilledChecklist constructor replaces aclChecklistCreate global. This
simplifies the initiating code of all fast ACL checks: the checks no longer
need to do manual state locking, duplicating aclChecklistCreate code.",759,data/crawl/squid/hunk_3812.cpp,,,data/crawl/squid/old_hunk_3812.cpp,data/crawl/squid/new_hunk_3812.cpp,17,-1,"fatal (""requiresRequest SHOULD have been true for this ACL!!"");",,"[""removeLog""]","[[""fatal"", ""requiresRequest"", ""SHOULD"", ""have"", ""been"", ""true"", ""for"", ""this"", ""ACL""], []]",[-13140470785063076799],7382,"219 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3163.cpp,,,data/crawl/squid/old_hunk_3163.cpp,data/crawl/squid/new_hunk_3163.cpp,6,6,"fprintf(stderr, ""%s Can't find DC for local domain '%s'\n"", myname, machinedomain);","fprintf(stderr, ""%s: ERROR: Can't find DC for local domain '%s'\n"", program_name, machinedomain);","[""updateVariable"", ""updateContent""]","[[""myname""], [""ERROR"", ""program_name""]]",[3290800548422350724],7381,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3166.cpp,,,data/crawl/squid/old_hunk_3166.cpp,data/crawl/squid/new_hunk_3166.cpp,3,3,"fprintf(stderr, ""%s Can't read machine domain\n"", myname);","fprintf(stderr, ""%s: FATAL: Can't read machine domain\n"", program_name);","[""updateVariable"", ""updateContent""]","[[""myname""], [""FATAL"", ""program_name""]]",[-9941512164775642552],7380,0:00:00
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,-1,12,,"fprintf(stderr, ""-i informational messages\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""i"", ""informational"", ""messages\\n""]]",[-15489768886428597982],7379,"270 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3192.cpp,,,data/crawl/squid/old_hunk_3192.cpp,data/crawl/squid/new_hunk_3192.cpp,-1,87,,"printf( "" %s\n"", b2 );","[""addLog""]","[[], [""printf"", ""%s\\n"", ""b2""]]",[13394918869641385055],7378,"31 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3192.cpp,,,data/crawl/squid/old_hunk_3192.cpp,data/crawl/squid/new_hunk_3192.cpp,-1,81,,"printf( ""%02X%c"", ch, ((i==7) ? '-' : ' ' ) );","[""addLog""]","[[], [""printf"", ""%02X%c"", ""ch"", ""i"", ""7""]]",[13012347453533798083],7377,"31 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3192.cpp,,,data/crawl/squid/old_hunk_3192.cpp,data/crawl/squid/new_hunk_3192.cpp,-1,78,,"printf( ""%08X: "", line );","[""addLog""]","[[], [""printf"", ""%08X"", ""line""]]",[19353359119457577028],7376,"31 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3192.cpp,,,data/crawl/squid/old_hunk_3192.cpp,data/crawl/squid/new_hunk_3192.cpp,-1,68,,"fprintf( stderr, ""Usage: %s filename\n"", argv[0] );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Usage"", ""%s"", ""filename\\n"", ""argv[0]""]]",[-12027015428844307674],7375,"31 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3076.cpp,,,data/crawl/squid/old_hunk_3076.cpp,data/crawl/squid/new_hunk_3076.cpp,87,-1,"printf( "" %s\n"", b2 );",,"[""removeLog""]","[[""printf"", ""%s\\n"", ""b2""], []]",[-13394918869641385055],7374,6:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3076.cpp,,,data/crawl/squid/old_hunk_3076.cpp,data/crawl/squid/new_hunk_3076.cpp,86,-1,"fputs(""   "",stdout);",,"[""removeLog""]","[[""fputs"", ""stdout""], []]",[12222144665393643080],7373,6:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3076.cpp,,,data/crawl/squid/old_hunk_3076.cpp,data/crawl/squid/new_hunk_3076.cpp,81,-1,"printf( ""%02X%c"", ch, ((i==7) ? '-' : ' ' ) );",,"[""removeLog""]","[[""printf"", ""%02X%c"", ""ch"", ""i"", ""7""], []]",[-13012347453533798083],7372,6:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3076.cpp,,,data/crawl/squid/old_hunk_3076.cpp,data/crawl/squid/new_hunk_3076.cpp,78,-1,"printf( ""%08X: "", line );",,"[""removeLog""]","[[""printf"", ""%08X"", ""line""], []]",[-19353359119457577028],7371,6:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3076.cpp,,,data/crawl/squid/old_hunk_3076.cpp,data/crawl/squid/new_hunk_3076.cpp,68,-1,"fprintf( stderr, ""Usage: %s filename\n"", argv[0] );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Usage"", ""%s"", ""filename\\n"", ""argv[0]""], []]",[12027015428844307674],7370,6:00:00
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2921.cpp,,,data/crawl/squid/old_hunk_2921.cpp,data/crawl/squid/new_hunk_2921.cpp,137,222,"storeAppendPrintf(sentry, ""aborted_requests = %f/sec\n"",
                      XAVG(aborted_requests));","storeAppendPrintf(sentry, ""aborted_requests = %f/sec\n"",
                      stats.aborted_requests);","[""removeVariable"", ""addVariable""]","[[""XAVG""], [""stats""]]",[1848561580698048512],7369,0:00:00
https://github.com/squid-cache/squid/commit/ac49890a255f5cfbf2242434c98b74da81b90dd4,27 Jan 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Fix IP/FQDN cache accounting to avoid idle caches on busy servers.

When maintaining the IP/FQDN cache size, use the number of entries in the cache
rather than the number of allocated and not freed MEM_IPCACHE_ENTRY and
MEM_FQDNCACHE_ENTRY objects. These objects are used outside the cache
for DNS queries. If queries leak (or perhaps when there are just a lot of them),
the memory-pool-based count overestimates the cache size, sometimes to
such a degree that the cache remains nearly empty despite lots of misses.

Use memory-pool-based counter to estimate cache size also violates IP/FQDN cache
encapsulation boundaries because it effectively prevents others from using
the same memory pool.",23,data/crawl/squid/hunk_2796.cpp,,,data/crawl/squid/old_hunk_2796.cpp,data/crawl/squid/new_hunk_2796.cpp,-1,5,,"storeAppendPrintf(sentry, ""IPcache Entries Cached:  %d\n"",
                      ipcacheCount());","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""IPcache"", ""Entries"", ""Cached"", ""%d\\n"", ""ipcacheCount""]]",[22122026386024735270],7368,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5b67dfa47e67e77ee787da66416981932523ded9,11 Sep 2010,comm Acceptor/Opener audit fallout.,326,data/crawl/squid/hunk_3030.cpp,,,data/crawl/squid/old_hunk_3030.cpp,data/crawl/squid/new_hunk_3030.cpp,-1,19,,"mustStop(""Listener socket closed"");","[""addLog""]","[[], [""mustStop"", ""Listener"", ""socket"", ""closed""]]",[-5749801543235549026],7367,"113 days, 6:00:00"
https://github.com/squid-cache/squid/commit/5b67dfa47e67e77ee787da66416981932523ded9,11 Sep 2010,comm Acceptor/Opener audit fallout.,326,data/crawl/squid/hunk_3029.cpp,,,data/crawl/squid/old_hunk_3029.cpp,data/crawl/squid/new_hunk_3029.cpp,-1,19,,"fatal(""FATAL: error while accepting new client connection: [unkown]\n"");","[""addLog""]","[[], [""fatal"", ""FATAL"", ""error"", ""while"", ""accepting"", ""new"", ""client"", ""connection"", ""[unkown]\\n""]]",[13602788282184694618],7366,"113 days, 6:00:00"
https://github.com/squid-cache/squid/commit/96e9c799d793b401a9aee746e42294e8d8c2805d,03 Mar 2011,Add some stubs and undo some problematic make optimizations,256,data/crawl/squid/hunk_2707.cpp,,,data/crawl/squid/old_hunk_2707.cpp,data/crawl/squid/new_hunk_2707.cpp,-1,13,,"fatal(""tools.cc required"");","[""addLog""]","[[], [""fatal"", ""tools"", ""cc"", ""required""]]",[-3614026982818920886],7365,"53 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2413d60a94cfb849910bc8cdda2773e011e5a24f,09 Jun 2010,Migrate ICAP::Xaction::connection to a Comm::ConnectionPointer,70,data/crawl/squid/hunk_3319.cpp,,,data/crawl/squid/old_hunk_3319.cpp,data/crawl/squid/new_hunk_3319.cpp,4,4,"buf.Printf(""Comm(%d)"", connection);","buf.Printf(""Comm(%d)"", connection->fd);","[""removeVariable"", ""addVariable""]","[[], [""fd""]]",[13056078438117844],7364,"186 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7ff7a211c25688d2d6742acc7bc271f700c9dbe9,08 Aug 2011,Migrate cf_gen.cc from C-style stdio to C++ iostreams.,300,data/crawl/squid/hunk_2498.cpp,,,data/crawl/squid/old_hunk_2498.cpp,data/crawl/squid/new_hunk_2498.cpp,23,-1,"fprintf(fp, ""%s\n"", line->data);",,"[""removeLog""]","[[""fprintf"", ""fp"", ""%s\\n"", ""line"", ""data""], []]",[1893739475219068612],7363,0:00:00
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,551,,"storeAppendPrintf(&e, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""\\n""]]",[5198007793595594540],7362,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77915f065e93d6218259a8703a2fa912e37f95a6,21 Oct 2011,Made fatal shm_open() errors more detailed to triage failing tests/testRock.,8,data/crawl/squid/hunk_2409.cpp,,,data/crawl/squid/old_hunk_2409.cpp,data/crawl/squid/new_hunk_2409.cpp,3,3,"fatal(""Ipc::Mem::Segment::create failed to shm_open"");","fatalf(""Ipc::Mem::Segment::create failed to shm_open(%s): %s\n"",
               theName.termedBuf(), xstrerror());","[""updateLog"", ""updateContent"", ""addVariable""]","[[""fatal""], [""fatalf"", ""%s"", ""%s\\n"", ""theName"", ""termedBuf"", ""xstrerror""]]",[18788859735329310263],7361,0:00:00
https://github.com/squid-cache/squid/commit/6dd9a2e497684ead9334c48ae450c02f2b3f3775,10 Jul 2012,"Bug 3577: File Descriptors not properly closed in trunk r12185.
Bug 3583: Server connection stuck after TCP_REFRESH_UNMODIFIED.

These changes fix FD leaks and stuck connections under two conditions:

1) Client aborts while Squid's server-side establishes a connection

Bug 3577: When a client quits while ConnOpener is trying to open the
connection to the next hop, FwdState cancels its ConnOpener callback.
ConnOpener notices that when trying to connect again and quits before
establishing a connection. The ConnOpener cleanup code did not close the
temporary FD used for establishing the connection. It did call fd_close(),
but fd_close() does not close the FD, naturally.

ConnOpener was probably leaking the temporary FD in other error handling
cases as well. It was never closed unless the connection was successful.


2) Client aborts after Squid's server-side established a connection:

Bug 3583: When a client aborts the store entry after receiving an HTTP 304 Not
Modified reply in response to a cache refreshing IMS request, HttpStateData
notices an aborted Store entry (after writing the reply to store), but does
virtually nothing, often resulting in a stuck server connection, leaking a
descriptor.  Now we abort the server-side transaction in this case.

Bug 3577: Similarly, when a client disconnects after Squid started talking to
the origin server but before Squid received a [complete] server response,
HttpStateData notices an aborted Store entry (during the next read from the
origin server), but does virtually nothing, often resulting in a stuck server
connection, leaking a descriptor. Now we abort the server-side transaction in
this case.

FwdState now also closes the server-side connection, if any, when the client
aborts the store entry and FwdState::abort() callback is called. This helps
reduce the number of concurrent server-side connections when clients abort
connections rapidly as Squid no longer has to wait for the server-side I/O to
notice that the entry is gone. The code to close the connection was temporary
removed in trunk r10057.1.51.",18,data/crawl/squid/hunk_2270.cpp,,,data/crawl/squid/old_hunk_2270.cpp,data/crawl/squid/new_hunk_2270.cpp,-1,4,,"abortTransaction(""store entry aborted while storing reply"");","[""addLog""]","[[], [""abortTransaction"", ""store"", ""entry"", ""aborted"", ""while"", ""storing"", ""reply""]]",[-22610546794415874701],7360,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6dd9a2e497684ead9334c48ae450c02f2b3f3775,10 Jul 2012,"Bug 3577: File Descriptors not properly closed in trunk r12185.
Bug 3583: Server connection stuck after TCP_REFRESH_UNMODIFIED.

These changes fix FD leaks and stuck connections under two conditions:

1) Client aborts while Squid's server-side establishes a connection

Bug 3577: When a client quits while ConnOpener is trying to open the
connection to the next hop, FwdState cancels its ConnOpener callback.
ConnOpener notices that when trying to connect again and quits before
establishing a connection. The ConnOpener cleanup code did not close the
temporary FD used for establishing the connection. It did call fd_close(),
but fd_close() does not close the FD, naturally.

ConnOpener was probably leaking the temporary FD in other error handling
cases as well. It was never closed unless the connection was successful.


2) Client aborts after Squid's server-side established a connection:

Bug 3583: When a client aborts the store entry after receiving an HTTP 304 Not
Modified reply in response to a cache refreshing IMS request, HttpStateData
notices an aborted Store entry (after writing the reply to store), but does
virtually nothing, often resulting in a stuck server connection, leaking a
descriptor.  Now we abort the server-side transaction in this case.

Bug 3577: Similarly, when a client disconnects after Squid started talking to
the origin server but before Squid received a [complete] server response,
HttpStateData notices an aborted Store entry (during the next read from the
origin server), but does virtually nothing, often resulting in a stuck server
connection, leaking a descriptor. Now we abort the server-side transaction in
this case.

FwdState now also closes the server-side connection, if any, when the client
aborts the store entry and FwdState::abort() callback is called. This helps
reduce the number of concurrent server-side connections when clients abort
connections rapidly as Squid no longer has to wait for the server-side I/O to
notice that the entry is gone. The code to close the connection was temporary
removed in trunk r10057.1.51.",18,data/crawl/squid/hunk_2269.cpp,,,data/crawl/squid/old_hunk_2269.cpp,data/crawl/squid/new_hunk_2269.cpp,-1,3,,"abortTransaction(""store entry aborted while reading reply"");","[""addLog""]","[[], [""abortTransaction"", ""store"", ""entry"", ""aborted"", ""while"", ""reading"", ""reply""]]",[-26778743856181259603],7359,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f4698e0b79fa14c3ae1758eb36561aaa39344cd7,17 Jul 2012,"Add request_header_add option

This patch:

- Add request_header_add, a new ACL-driven squid.conf option that         
  allow addition of HTTP request header fields before the request is sent to
  the next HTTP hop (a peer proxy or an origin server):
     request_header_add <field-name> <field-value> acl1 [acl2]
  where:
     * Field-name is a token specifying an HTTP header name.
     
     * Field-value is either a constant token or a quoted string containing
       %macros. In theory, all of the logformat codes can be used as %macros.
       However, unlike logging the transaction may not yet have enough
       information to expand a macro when the new header value is needed.
       The macro will be expanded into a single dash ('-') in such cases.
       Not all macros have been tested.

     * One or more Squid ACLs may be specified to restrict header insertion to
       matching requests. The request_header_add option supports fast ACLs only.

- Add the %ssl::>cert_subject and %ssl::>cert_issuer logformating codes which
  prints the Subject field and Issuer field of the received client SSL
  certificate or a dash ('-').

This is a Measurement Factory project.",328,data/crawl/squid/hunk_2268.cpp,,,data/crawl/squid/old_hunk_2268.cpp,data/crawl/squid/new_hunk_2268.cpp,-1,11,,"storeAppendPrintf(entry, ""%s "", hwa->fieldValue.c_str());","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""hwa"", ""fieldValue"", ""c_str""]]",[-6959451586058577596],7358,12:00:00
https://github.com/squid-cache/squid/commit/f4698e0b79fa14c3ae1758eb36561aaa39344cd7,17 Jul 2012,"Add request_header_add option

This patch:

- Add request_header_add, a new ACL-driven squid.conf option that         
  allow addition of HTTP request header fields before the request is sent to
  the next HTTP hop (a peer proxy or an origin server):
     request_header_add <field-name> <field-value> acl1 [acl2]
  where:
     * Field-name is a token specifying an HTTP header name.
     
     * Field-value is either a constant token or a quoted string containing
       %macros. In theory, all of the logformat codes can be used as %macros.
       However, unlike logging the transaction may not yet have enough
       information to expand a macro when the new header value is needed.
       The macro will be expanded into a single dash ('-') in such cases.
       Not all macros have been tested.

     * One or more Squid ACLs may be specified to restrict header insertion to
       matching requests. The request_header_add option supports fast ACLs only.

- Add the %ssl::>cert_subject and %ssl::>cert_issuer logformating codes which
  prints the Subject field and Issuer field of the received client SSL
  certificate or a dash ('-').

This is a Measurement Factory project.",328,data/crawl/squid/hunk_2268.cpp,,,data/crawl/squid/old_hunk_2268.cpp,data/crawl/squid/new_hunk_2268.cpp,-1,10,,"storeAppendPrintf(entry, ""%s "", hwa->fieldName.c_str());","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""hwa"", ""fieldName"", ""c_str""]]",[-9879850199040563429],7357,12:00:00
https://github.com/squid-cache/squid/commit/225b7b107261e7d01d087e1061533751c2a7a0e0,13 Feb 2003,"Summary: Merge further ACL refactoring (including bugfixes)
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-13
     More conversion of ACL's

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-12
     Fix ACLChecklist async tests.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-11
     More conversion to the new ACL approach.",1546,data/crawl/squid/hunk_5411.cpp,,,data/crawl/squid/old_hunk_5411.cpp,data/crawl/squid/new_hunk_5411.cpp,9,-1,"fatal(""AclLookupProxyAuthDone: Old code floating around somewhere.\nMake clean and if that doesn't work, report a bug to the squid developers.\n"");",,"[""removeLog""]","[[""fatal"", ""AclLookupProxyAuthDone"", ""Old"", ""code"", ""floating"", ""around"", ""somewhere"", ""\\nMake"", ""clean"", ""and"", ""if"", ""that"", ""doesn"", ""t"", ""work"", ""report"", ""a"", ""bug"", ""to"", ""the"", ""squid"", ""developers"", ""\\n""], []]",[-31539841372898536781],7356,"2575 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/hunk_2327.cpp,,,data/crawl/squid/old_hunk_2327.cpp,data/crawl/squid/new_hunk_2327.cpp,-1,15,,"fatalf(""%s_port %s initialization error"", protocol,  s.ToURL(buf, sizeof(buf)));","[""addLog""]","[[], [""fatalf"", ""%s_port"", ""%s"", ""initialization"", ""error"", ""protocol"", ""s"", ""ToURL"", ""buf"", ""sizeof"", ""buf""]]",[11835393429186752141],7355,"101 days, 18:00:00"
https://github.com/squid-cache/squid/commit/0272dd08f2be7f000c031ddc1a3c720efc4696aa,19 Sep 2012,Convert helper char* response to class,562,data/crawl/squid/hunk_2035.cpp,,,data/crawl/squid/old_hunk_2035.cpp,data/crawl/squid/new_hunk_2035.cpp,-1,11,,"fatalf(""authenticateNegotiateHandleReply: *** Unsupported helper response ***, '%s'\n"", reply.other().content());","[""addLog""]","[[], [""fatalf"", ""authenticateNegotiateHandleReply"", ""***"", ""Unsupported"", ""helper"", ""response"", ""***"", ""%s"", ""\\n"", ""reply"", ""other"", ""content""]]",[3708139154972262716],7354,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/0272dd08f2be7f000c031ddc1a3c720efc4696aa,19 Sep 2012,Convert helper char* response to class,562,data/crawl/squid/hunk_2033.cpp,,,data/crawl/squid/old_hunk_2033.cpp,data/crawl/squid/new_hunk_2033.cpp,32,23,digest_request->setDenyMessage(t);,digest_request->setDenyMessage(reply.other().content());,"[""removeVariable"", ""addVariable""]","[[""t""], [""reply"", ""other"", ""content""]]",[-6050016541010723673],7353,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/05e5285440fcf3537422a5282ebd0d35898ef9fd,10 Nov 2012,"Fix URL-decode logics consistency

* always perform URL-decode on only token form of values
  (\-escaping always removed on all values prior to URL-decode)

* document change in URL-encoding for external_acl_type config

* deprecate external_acl type quote= and protocol= options

* remove unneeded 'urlQuoting' parameter from HelperReply parser",65,data/crawl/squid/hunk_1942.cpp,,,data/crawl/squid/old_hunk_1942.cpp,data/crawl/squid/new_hunk_1942.cpp,-1,4,,"storeAppendPrintf(sentry, "" protocol=2.5"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""protocol"", ""2"", ""5""]]",[12354729488681892469],7352,"16 days, 6:00:00"
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/hunk_1950.cpp,,,data/crawl/squid/old_hunk_1950.cpp,data/crawl/squid/new_hunk_1950.cpp,-1,37,,"auth_user_request->denyMessage(""NTLM Authentication failed with no reason given"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""NTLM"", ""Authentication"", ""failed"", ""with"", ""no"", ""reason"", ""given""]]",[-21254742995402587156],7351,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/hunk_1950.cpp,,,data/crawl/squid/old_hunk_1950.cpp,data/crawl/squid/new_hunk_1950.cpp,-1,33,,"auth_user_request->denyMessage(""Internal Error"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""Internal"", ""Error""]]",[5082695339119143889],7350,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/hunk_1950.cpp,,,data/crawl/squid/old_hunk_1950.cpp,data/crawl/squid/new_hunk_1950.cpp,-1,13,,"auth_user_request->denyMessage(""NTLM Authentication denied with no reason given"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""NTLM"", ""Authentication"", ""denied"", ""with"", ""no"", ""reason"", ""given""]]",[-13243614487407290766],7349,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/hunk_1948.cpp,,,data/crawl/squid/old_hunk_1948.cpp,data/crawl/squid/new_hunk_1948.cpp,-1,42,,"auth_user_request->denyMessage(""Negotiate Authentication failed with no reason given"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""Negotiate"", ""Authentication"", ""failed"", ""with"", ""no"", ""reason"", ""given""]]",[-20419471422409429170],7348,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/hunk_1948.cpp,,,data/crawl/squid/old_hunk_1948.cpp,data/crawl/squid/new_hunk_1948.cpp,34,38,auth_user_request->denyMessage(blob);,"auth_user_request->denyMessage(""Internal Error"");","[""removeVariable"", ""addContent""]","[[""blob""], [""Internal"", ""Error""]]",[469258109968726773],7347,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d850d8eeefd035925cca584a136b4b646de93b2a,22 Sep 2012,Update NTLM and Negotiate TT result code handlers to use token=,14,data/crawl/squid/hunk_2016.cpp,,,data/crawl/squid/old_hunk_2016.cpp,data/crawl/squid/new_hunk_2016.cpp,9,9,"auth_user_request->denyMessage(""NTLM authentication requires a persistent connection"");","auth_user_request->denyMessage(""Negotiate authentication requires a persistent connection"");","[""updateContent""]","[[""NTLM""], [""Negotiate""]]",[835271572993157986],7346,"53 days, 0:00:00"
https://github.com/squid-cache/squid/commit/bcb9f68855ed476199bcfb749641bfdc0c065eec,04 Dec 2012,merge from trunk r12500,2102,data/crawl/squid/hunk_1861.cpp,,,data/crawl/squid/old_hunk_1861.cpp,data/crawl/squid/new_hunk_1861.cpp,5,5,"fprintf(stderr, ""%s| %s: INFO: User %s authenticated\n"", LogTime(),
                        PROGRAM, user);","fprintf(stderr, ""%s| %s: INFO: User %s authenticated\n"", LogTime(),
                        PROGRAM, rfc1738_escape(user));","[""addVariable""]","[[], [""rfc1738_escape""]]",[2496725644890865050],7345,0:00:00
https://github.com/squid-cache/squid/commit/c4e688b7b851b9accc082a210fd0efb131cc696f,12 Apr 2011,Added basic stats reporting.,23,data/crawl/squid/hunk_2658.cpp,,,data/crawl/squid/old_hunk_2658.cpp,data/crawl/squid/new_hunk_2658.cpp,-1,11,,"storeAppendPrintf(&e, ""Maximum entries: %9d\n"", limit);","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Maximum"", ""entries"", ""%9d\\n"", ""limit""]]",[26042438292031601741],7344,"325 days, 18:00:00"
https://github.com/squid-cache/squid/commit/7ce875eb60c3989a40a4aa5b9ba0da6a815e16dc,18 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Squid-1.2.beta15: Show memory map as a tree
      Part of my beta14 memory map patch did not make it into beta15.
      Here are the missing pieces.",86,data/crawl/squid/hunk_6803.cpp,,,data/crawl/squid/old_hunk_6803.cpp,data/crawl/squid/new_hunk_6803.cpp,8,-1,"fprintf(stderr, ""----- Memory map ----\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Memory"", ""map"", ""\\n""], []]",[591730028667204742],7343,"4100 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/hunk_1545.cpp,,,data/crawl/squid/old_hunk_1545.cpp,data/crawl/squid/new_hunk_1545.cpp,-1,10,,"rv.Printf(""%d"", status1);","[""addLog""]","[[], [""rv"", ""Printf"", ""%d"", ""status1""]]",[84807196141561062],7342,12:00:00
https://github.com/squid-cache/squid/commit/3e5c8cf4222d850a0390ce3e3959cf6fad18ed91,13 Feb 2008,"Merging async-call branch changes to HEAD:

Async-call work replaces event-based asynchronous calls with
stand-alone implementation. The common async call API allows Squid
core do call, debug, and troubleshoot all callback handlers in a
uniform way.

An async ""job"" API is introduced to manage independent logical threads
or work such as protocol transaction handlers on client, server, and
ICAP sides. These jobs should communicate with each other using async
calls to minimize dependencies and avoid reentrant callback loops.

These changes will eventually improve overall code quality, debugging
quality, and Squid robustness.

The code is still more complex than I want it to be. However, these are
low-level interfaces that most developers will not have to deal with and
the complexity will be significantly reduced if we get rid of old style
function-pointer based callbacks, which is probably desirable for several
reasons. Other simplifications will be found in time as well.

TODO: src/ICAP/AsyncJob needs to be moved to src/. It is not moved yet to
preserve commit logs.",546,data/crawl/squid/hunk_4374.cpp,,,data/crawl/squid/old_hunk_4374.cpp,data/crawl/squid/new_hunk_4374.cpp,-1,66,,"buf.Printf(""Stopped, reason:"");","[""addLog""]","[[], [""buf"", ""Printf"", ""Stopped"", ""reason""]]",[2846851238253798841],7341,"1714 days, 6:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1517.cpp,,,data/crawl/squid/old_hunk_1517.cpp,data/crawl/squid/new_hunk_1517.cpp,-1,31,,"notifyManager(""pop"");","[""addLog""]","[[], [""notifyManager"", ""pop""]]",[9036858764262246947],7340,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1517.cpp,,,data/crawl/squid/old_hunk_1517.cpp,data/crawl/squid/new_hunk_1517.cpp,-1,18,,"notifyManager(""pop failure"");","[""addLog""]","[[], [""notifyManager"", ""pop"", ""failure""]]",[5056153533980692852],7339,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1517.cpp,,,data/crawl/squid/old_hunk_1517.cpp,data/crawl/squid/new_hunk_1517.cpp,-1,5,,"notifyManager(""push"");","[""addLog""]","[[], [""notifyManager"", ""push""]]",[10170405422719313165],7338,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1515.cpp,,,data/crawl/squid/old_hunk_1515.cpp,data/crawl/squid/new_hunk_1515.cpp,-1,4,,"parent_->notifyManager(""idle conn closure"");","[""addLog""]","[[], [""parent_"", ""notifyManager"", ""idle"", ""conn"", ""closure""]]",[12613105253019535517],7337,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1514.cpp,,,data/crawl/squid/old_hunk_1514.cpp,data/crawl/squid/new_hunk_1514.cpp,-1,4,,"storeAppendPrintf(sentry, "" standby=%d"", p->standby.limit);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""standby"", ""%d"", ""p"", ""standby"", ""limit""]]",[-1407114076367375992],7336,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5aca9cf2e5a7c901386831bca92d0339c6e5e60e,07 May 2014,"Cleanup: Refactor external_acl_type format codes representation

Removes enum_external_acl_format::format_type from external_acl.cc
by replacing it with enum Format::ByteCode_t.

Several missing logformat codes related to URL display have been added
to the logformat token set for general use.

Several of the external ACL format codes have been added to
Format::ByteCode_t without equivalent logformat TokenTableEntry's at
this stage as both desirable token naming and access to the data to
produce them generically is unclear.

The external_acl_type parser is updated to accept logformat tokens
wherever an equivalent exists and map directly to the ByteCode_t values.

The mgr:config report dumper is also updated to output the logformat
tokens. But as yet the official deprecation has not been done in
squid.conf.",409,data/crawl/squid/hunk_1497.cpp,,,data/crawl/squid/old_hunk_1497.cpp,data/crawl/squid/new_hunk_1497.cpp,9,10,"fatal(""unknown external_acl format error"");","fatalf(""ERROR: unknown external_acl_type format %u"", (uint8_t)format->type);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""fatal"", ""external_acl"", ""error""], [""fatalf"", ""ERROR"", ""external_acl_type"", ""%u"", ""uint8_t"", ""format"", ""type""]]",[25799921375167280930],7335,"14 days, 18:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1512.cpp,,,data/crawl/squid/old_hunk_1512.cpp,data/crawl/squid/new_hunk_1512.cpp,-1,4,,"fatalf(""ERROR: cache_peer %s max-conn=%d is lower than its standby=%d\n"", p->host, p->max_conn, p->standby.limit);","[""addLog""]","[[], [""fatalf"", ""ERROR"", ""cache_peer"", ""%s"", ""max"", ""conn"", ""%d"", ""is"", ""lower"", ""than"", ""its"", ""standby"", ""%d\\n"", ""p"", ""host"", ""p"", ""max_conn"", ""p"", ""standby"", ""limit""]]",[29364651481153957321],7334,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1510.cpp,,,data/crawl/squid/old_hunk_1510.cpp,data/crawl/squid/new_hunk_1510.cpp,-1,4,,"closeServerConnection(""~FwdState"");","[""addLog""]","[[], [""closeServerConnection"", ""FwdState""]]",[-4006801213804189218],7333,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e8dca4753c64e14c4dcb8690533571f54fc846de,30 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>
cache_peer standby=N implementation.

The feature focus is to instantly provide a ready-to-use connection to a
cooperating cache peer, virtually at all times. This is useful when connection
establishment is ""too slow"" and/or when infrequent peer use prevents Squid from
combating slow connection establishment with the regular idle connection pool.

The feature is similar to Squid2 idle=N feature, but there are key differences:

* Standby connections are available virtually at all times, while Squid2 unused
  ""idle"" connections are available only for a short time after a peer request.

* All N standby connections are not opened at once, reducing the chance of
  the feature being mistaken for a DoS attack on a peer.

* More consistent support for peers with multiple IP addresses (peer IPs are
  cycled through, just like during regular Squid request forwarding).

Besides, ""idle"" is a poor choice of adjective for an unused connection pool
name because the same term is used for used persistent connections, which have
somewhat different properties, are stored in a different pool, may need
distinct set of tuning options, etc. It is better to use a dedicated term for
the new feature.

The relationship between the max-conn limit and standby/idle connections is a
complex one. After several rewrites and tests, Squid now obeys max-conn limit
when opening new standby connections and accounts for standby connections when
checking whether to allow peer use. This often works OK, but leads to standby
guarantee violations when non-standby connections approach the limit. The
alternative design where standby code ignores max-conn works better, but is
really difficult to explain and advocate because an admin expects max-conn to
cover all connections and because of the idle connections accounting and
maintenance bugs. We may come back to this when the idle connections code is
fixed.

Fixed max-conn documentation and XXXed a peerHTTPOkay() bug (now in
peerHasConnAvailable()) that results in max-conn limit preventing the use of a
peer with idle persistent connections.

Decided to use standby connections for non-retriable requests. Avoiding
standby connections for POSTs and such would violate the main purpose of the
feature: providing an instant ready-to-use connection. A user does not care
whether it is waiting too long for a GET or POST request. Actually, a user may
care more when their POST requests are delayed (because canceling and
retrying them is often scary from the user point of view). The idea behind
standby connections is that the admin is responsible for avoiding race
conditions by properly configuring the peering Squids. If such proper
configuration is not possible or the consequences of rare races (e.g., due to
peer shutdown) are more severe than the consequences of slow requests, the
admin should not use standby=N. This choice may become configurable in the
future.

TODO: Teach peer probing code to push successful probing connections into the
standby pool (when enabled). Should be done as a followup project because of
the differences in standby and probe connection opening code, especially when
SSL peers are supported. Will require some discussion.

A standby pool is using a full-blown PconnPool object for storage instead of
the smaller IdleConnList, like the ICAP code does. The primary reasons for
this design were:

* A peer may have multiple addresses and those addresses may change. PconnPool
has code to deal with multiple addresses while IdleConnList does not. I do not
think this difference is really used in this implementation, but I did not
want to face an unknown limitation. Note that ICAP does not support multiple
ICAP server addresses.

* PconnPool has reporting (and cache manager integration) code that we should
eventually improve and report standby-specific stats. When this happens,
PconnPool will probably become abstract and spawn two kids, one for pconn and
one for standby pools.

Seemingly unrelated changes triggered by standby=N addition:

* Removed PconnPool from fde.h. We used to create immortal PconnPool objects.
Now, standby pools are destroyed when their peer is destroyed. Sharing raw
pointers to such pools is too dangerous. We could use smart pointers, but
PconnPools do not really belong to such a low-level object like fde IMO.

* Added FwdState::closeServerConnection() to encapsulate server connection
closing code, including the new noteUses() maintenance. Also updated
FwdState::serverClosed() to do the same maintenance.

* Close all connections in IdleConnList upon deletion. The old code did
not care because we never deleted PconnPools (although I am not sure
there were no bugs related to ICAP service pools which use IdleConnList
directly and do get destroyed).

* Fixed PconnPool::dumpHash(). It was listing the first entry twice because
the code misused misnamed hash_next().

* Removed unnecessary hard-coded limit on the number of PconnPools. Use
std::set for their storage.

* Fixed very stale PconnPool::pop() documentation and polished its code.

* Added RegisteredRunner::sync() method to use during Squid reconfiguration:

The existing run() method and destructor are great for the initial
configuration and final shutdown, but do not work well for reconfiguration
when you do not want to completely destroy and then recreate the state.
The sync() method (called via SyncRegistered) can be used for that.

Eventually, the reconfiguration API should present the old ""saved"" config
and the new ""current"" config to RegisteredRunners so that they can update
their modules/features intelligently. For now, they just see the new config.

This is a Measurement Factory project",719,data/crawl/squid/hunk_1509.cpp,,,data/crawl/squid/old_hunk_1509.cpp,data/crawl/squid/new_hunk_1509.cpp,-1,3,,"fwd->closeServerConnection(""store entry aborted"");","[""addLog""]","[[], [""fwd"", ""closeServerConnection"", ""store"", ""entry"", ""aborted""]]",[-17743666038846039931],7332,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,11,11,"storeAppendPrintf(sentry, ""check_callback\t%d\t-\n"", squidaio_counts.check_callback);","storeAppendPrintf(sentry, ""  check_callback\t%"" PRIu64 ""\t-\n"", squidaio_counts.check_callback);","[""updateContent"", ""addContent"", ""addVariable""]","[[""check_callback\\t%d\\t""], [""check_callback\\t%"", ""PRIu64"", ""\\t""]]",[13077690418461584331],7331,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,10,10,"storeAppendPrintf(sentry, ""unlink\t%d\t%d\n"", squidaio_counts.unlink_start, squidaio_counts.unlink_finish);","storeAppendPrintf(sentry, ""  unlink\t%"" PRIu64 ""\t%"" PRIu64 ""\n"", squidaio_counts.unlink_start, squidaio_counts.unlink_finish);","[""updateContent"", ""addContent"", ""addVariable""]","[[""unlink\\t%d\\t%d\\n""], [""unlink\\t%"", ""PRIu64"", ""\\t%"", ""PRIu64"", ""\\n""]]",[28793593602667734210],7330,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,9,9,"storeAppendPrintf(sentry, ""stat\t%d\t%d\n"", squidaio_counts.stat_start, squidaio_counts.stat_finish);","storeAppendPrintf(sentry, ""  stat\t%"" PRIu64 ""\t%"" PRIu64 ""\n"", squidaio_counts.stat_start, squidaio_counts.stat_finish);","[""updateContent"", ""addContent"", ""addVariable""]","[[""stat\\t%d\\t%d\\n""], [""stat\\t%"", ""PRIu64"", ""\\t%"", ""PRIu64"", ""\\n""]]",[7585794040815471036],7329,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,8,8,"storeAppendPrintf(sentry, ""read\t%d\t%d\n"", squidaio_counts.read_start, squidaio_counts.read_finish);","storeAppendPrintf(sentry, ""  read\t%"" PRIu64 ""\t%"" PRIu64 ""\n"", squidaio_counts.read_start, squidaio_counts.read_finish);","[""updateContent"", ""addContent"", ""addVariable""]","[[""read\\t%d\\t%d\\n""], [""read\\t%"", ""PRIu64"", ""\\t%"", ""PRIu64"", ""\\n""]]",[16358681470435711100],7328,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,7,7,"storeAppendPrintf(sentry, ""write\t%d\t%d\n"", squidaio_counts.write_start, squidaio_counts.write_finish);","storeAppendPrintf(sentry, ""  write\t%"" PRIu64 ""\t%"" PRIu64 ""\n"", squidaio_counts.write_start, squidaio_counts.write_finish);","[""updateContent"", ""addContent"", ""addVariable""]","[[""write\\t%d\\t%d\\n""], [""write\\t%"", ""PRIu64"", ""\\t%"", ""PRIu64"", ""\\n""]]",[18762541978395181280],7327,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,6,6,"storeAppendPrintf(sentry, ""cancel\t%d\t-\n"", squidaio_counts.cancel);","storeAppendPrintf(sentry, ""  cancel\t%"" PRIu64 ""\t-\n"", squidaio_counts.cancel);","[""updateContent"", ""addContent"", ""addVariable""]","[[""cancel\\t%d\\t""], [""cancel\\t%"", ""PRIu64"", ""\\t""]]",[13802078768900448067],7326,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,5,5,"storeAppendPrintf(sentry, ""close\t%d\t%d\n"", squidaio_counts.close_start, squidaio_counts.close_finish);","storeAppendPrintf(sentry, ""  close\t%"" PRIu64 ""\t%"" PRIu64 ""\n"", squidaio_counts.close_start, squidaio_counts.close_finish);","[""updateContent"", ""addContent"", ""addVariable""]","[[""close\\t%d\\t%d\\n""], [""close\\t%"", ""PRIu64"", ""\\t%"", ""PRIu64"", ""\\n""]]",[11133942527068290366],7325,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/22cec59ee4543e4a8c7235b880664b9d4f17da4b,12 May 2014,Bug 2554: 32-bit wrap in AUFS counters,48,data/crawl/squid/hunk_1495.cpp,,,data/crawl/squid/old_hunk_1495.cpp,data/crawl/squid/new_hunk_1495.cpp,4,4,"storeAppendPrintf(sentry, ""open\t%d\t%d\n"", squidaio_counts.open_start, squidaio_counts.open_finish);","storeAppendPrintf(sentry, ""  open\t%"" PRIu64 ""\t%"" PRIu64 ""\n"", squidaio_counts.open_start, squidaio_counts.open_finish);","[""updateContent"", ""addContent"", ""addVariable""]","[[""open\\t%d\\t%d\\n""], [""open\\t%"", ""PRIu64"", ""\\t%"", ""PRIu64"", ""\\n""]]",[11931890377534102028],7324,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fb93aaa47625d637f9523ea77f29b2871c1b8817,05 May 2014,url_fake_rewrite: concurrency channel support,13,data/crawl/squid/hunk_1498.cpp,,,data/crawl/squid/old_hunk_1498.cpp,data/crawl/squid/new_hunk_1498.cpp,-1,10,,"fprintf(stdout, ""%"" PRId64 "" ERR\n"", channelId);","[""addLog""]","[[], [""fprintf"", ""stdout"", ""%"", ""PRId64"", ""ERR\\n"", ""channelId""]]",[6318793926672518033],7323,"16 days, 6:00:00"
https://github.com/squid-cache/squid/commit/fb93aaa47625d637f9523ea77f29b2871c1b8817,05 May 2014,url_fake_rewrite: concurrency channel support,13,data/crawl/squid/hunk_1498.cpp,,,data/crawl/squid/old_hunk_1498.cpp,data/crawl/squid/new_hunk_1498.cpp,4,7,"fprintf(stdout,""\n"");","fprintf(stdout,""ERR\n"");","[""updateContent""]","[[""\\n""], [""ERR\\n""]]",[8273362714302273978],7322,"16 days, 6:00:00"
https://github.com/squid-cache/squid/commit/0309fc406832ea1103fb4172cadab9f6d6abe8cb,28 May 2014,Cleanup: de-duplicate handling of auth_param 'children',30,data/crawl/squid/hunk_1466.cpp,,,data/crawl/squid/old_hunk_1466.cpp,data/crawl/squid/new_hunk_1466.cpp,3,-1,"storeAppendPrintf(entry, ""%s basic children %d startup=%d idle=%d concurrency=%d\n"", name, authenticateChildren.n_max, authenticateChildren.n_startup, authenticateChildren.n_idle, authenticateChildren.concurrency);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""basic"", ""children"", ""%d"", ""startup"", ""%d"", ""idle"", ""%d"", ""concurrency"", ""%d\\n"", ""name"", ""authenticateChildren"", ""n_max"", ""authenticateChildren"", ""n_startup"", ""authenticateChildren"", ""n_idle"", ""authenticateChildren"", ""concurrency""], []]",[-41838630015929548659],7321,"18 days, 0:00:00"
https://github.com/squid-cache/squid/commit/0309fc406832ea1103fb4172cadab9f6d6abe8cb,28 May 2014,Cleanup: de-duplicate handling of auth_param 'children',30,data/crawl/squid/hunk_1465.cpp,,,data/crawl/squid/old_hunk_1465.cpp,data/crawl/squid/new_hunk_1465.cpp,-1,3,,"storeAppendPrintf(entry, ""%s %s children %d startup=%d idle=%d concurrency=%d\n"",
                      name, scheme->type(),
                      authenticateChildren.n_max, authenticateChildren.n_startup,
                      authenticateChildren.n_idle, authenticateChildren.concurrency);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""children"", ""%d"", ""startup"", ""%d"", ""idle"", ""%d"", ""concurrency"", ""%d\\n"", ""name"", ""scheme"", ""type"", ""authenticateChildren"", ""n_max"", ""authenticateChildren"", ""n_startup"", ""authenticateChildren"", ""n_idle"", ""authenticateChildren"", ""concurrency""]]",[48453486322322680081],7320,"18 days, 0:00:00"
https://github.com/squid-cache/squid/commit/154ea56667e82cf7217580817f9088397a86a694,13 Aug 2014,"Rearrange PROXY/1.0 parser

Add a first pass to confirm LF line terminator and wait for more bytes if
missing.",46,data/crawl/squid/hunk_1231.cpp,,,data/crawl/squid/old_hunk_1231.cpp,data/crawl/squid/new_hunk_1231.cpp,19,7,"proxyProtocolError(tok.atEnd() ? ""PROXY/1.0 error: invalid protocol family"" : NULL);","proxyProtocolError(""PROXY/1.0 error: invalid protocol family"");","[""moveContent"", ""removeVariable""]","[[""tok"", ""atEnd"", ""NULL""], []]",[13399002909542979497],7319,0:00:00
https://github.com/squid-cache/squid/commit/655daa0610ed6c5ee86a5978c9a7c23a4adf0034,10 Sep 2010,"Compliance: Forward 1xx control messages to clients that support them.

Forward 1xx control messages to all HTTP/1.1 clients and to HTTP/1.0
clients that sent an Expect: 100-continue header unless the 1xx message
fails the optional http_reply_access check described below.

RFC 2616 requires clients to accept 1xx control messages, even if they
did not send Expect headers. However, 1xx control messages prohibited by
http_reply_access are ignored and not forwarded. This can be used to
protect broken HTTP/1.1 clients or naive HTTP/1.0 clients that
unknowingly forward 100-continue headers, for example. Only fast checks
are supported at this time.

The patch removes ignore_expect_100 squid.conf option and the
corresponding code because

  - the reasons to treat 100-continue specially have changed since we
    can now forward 1xx responses;

  - rejection of 100-continue request can still be done using a
    combination of the existing http_access and deny_info options;

  - hiding of 100-continue header from next hops can still be done using
    an existing request_header_access option;

  - 100 (Continue) responses can be hidden from clients using
    http_reply_access check described above.


We still respond with 417 Expectation Failed to requests with
expectations other than 100-continue.

Implementation notes: 

We forward control messages one-at-a-time and stop processing the server
response while the 1xx message is being written to client, to avoid
server-driven DoS attacks with large number of 1xx messages.

1xx forwarding is done via async calls from HttpStateData to
ConnStateData/ClientSocketContext. The latter then calls back to notify
HttpStateData that the message was written out to client. If any one of
the two async messages is not fired, HttpStateData will get stuck unless
it is destroyed due to an external event/error. The code assumes such
event/error will always happen because when
ConnStateData/ClientSocketContext is gone, HttpStateData job should be
terminated. This requires more testing/thought, but should still be
better than not forwarding 1xx messages at all.",240,data/crawl/squid/hunk_3031.cpp,,,data/crawl/squid/old_hunk_3031.cpp,data/crawl/squid/new_hunk_3031.cpp,-1,12,,"rep->header.putStr(HDR_CONNECTION, ""keep-alive"");","[""addLog""]","[[], [""rep"", ""header"", ""putStr"", ""HDR_CONNECTION"", ""keep"", ""alive""]]",[-6436086023878567355],7318,"1075 days, 6:00:00"
https://github.com/squid-cache/squid/commit/cf6eb29ef384e73a2a00839bc215dcc555e39691,06 Dec 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Bug 3420: Request body consumption races and !theConsumer exception.

Also fixes endless waiting for HTTP client to send req body we no longer need.

Before these changes, the client side used a single ""closing"" state to
handle two different error conditions:

  1. We stopped receiving request body because of some error.
  2. We stopped sending response because of some error.

When a ""directional"" error occurred, we try to keep the transaction going in
the other direction (e.g., to give ICAP the entire request or to give HTTP
client the entire response). However, because there was just one ""closing""
state, the code failed to correctly detect or process many corner cases,
resulting in stuck transactions and !theConsumer assertions/exceptions due to
races between enableAutoConsumption() and expectNoConsumption() calls.

This patch replaces the ""closing"" state with two direction-specific ""we
stopped sending/receiving"" flags.

Now, when the response sending code is done, it now checks whether the
receiving code stopped and closes the connection as needed. This is done both
when we encounter a sending error (ClientSocketContext::initiateClose) and
when we successfully sent the entire response to the client
(ClientSocketContext::keepaliveNextRequest).

Similarly, when the request body reading code is done, it now checks whether
the receiving code stopped and closes the connection as needed. This is done
both when we encounter a receiving error
(ConnStateData::noteBodyConsumerAborted) and when we successfully receive the
entire request body from the client (ClientSocketContext::writeComplete).

TODO: This patch focuses on various error cases. We might still have problems
when there is an early HTTP response and no errors of any kind. I marked the
corresponding old code with an XXX.",139,data/crawl/squid/hunk_2388.cpp,,,data/crawl/squid/old_hunk_2388.cpp,data/crawl/squid/new_hunk_2388.cpp,-1,7,,"stopReceiving(""virgin request body consumer aborted"");","[""addLog""]","[[], [""stopReceiving"", ""virgin"", ""request"", ""body"", ""consumer"", ""aborted""]]",[-7986465492880148666],7317,"736 days, 6:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1670.cpp,,,data/crawl/squid/old_hunk_1670.cpp,data/crawl/squid/new_hunk_1670.cpp,-1,73,,"header.putStr(HDR_FTP_ARGUMENTS, """");","[""addLog""]","[[], [""header"", ""putStr"", ""HDR_FTP_ARGUMENTS""]]",[-7630026048812294592],7316,"212 days, 0:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1670.cpp,,,data/crawl/squid/old_hunk_1670.cpp,data/crawl/squid/new_hunk_1670.cpp,-1,71,,"header.putStr(HDR_FTP_COMMAND, ""PASV"");","[""addLog""]","[[], [""header"", ""putStr"", ""HDR_FTP_COMMAND"", ""PASV""]]",[1357199028149208865],7315,"212 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a37ec7fa9e6d67647727e3e459cadf5aa5fcecb3,20 Jan 2014,"Avoid comm.cc:170: ""Comm::IsConnOpen(conn)"" assertions
by being more careful with the client data connection state.

Do not forward a 125/150 response to the client until the client data
connection is ready. Do not forward it at all if the data connection was
already closed by the time we got a server 125/150 response. If we have to
wait, we do not really forward the original 125/150 response but generate our
own 150. That may change.",57,data/crawl/squid/hunk_1630.cpp,,,data/crawl/squid/old_hunk_1630.cpp,data/crawl/squid/new_hunk_1630.cpp,-1,13,,"mb.Printf(""150 Data connection opened.\r\n"");","[""addLog""]","[[], [""mb"", ""Printf"", ""150"", ""Data"", ""connection"", ""opened"", ""\\r\\n""]]",[-5488740528201876078],7314,"154 days, 6:00:00"
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/hunk_1224.cpp,,,data/crawl/squid/old_hunk_1224.cpp,data/crawl/squid/new_hunk_1224.cpp,-1,3,,"csd->abortRequestParsing(""error:request-too-large"");","[""addLog""]","[[], [""csd"", ""abortRequestParsing"", ""error"", ""request"", ""too"", ""large""]]",[2217293304187969653],7313,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ecb19f1a0380320db5b2e82505f4c9cfdc3625b3,09 Aug 2014,"Centralized and documented FTP protocol ""version"" (1.1) definition.

Moved AnyP::PortCfg::setTransport() to the cache_cf.cc parsing code where it
currently belongs. AnyP code should not have protocol-specific pieces as it is
code shared among (or used by) many (ideally, all transfer) protocols.

TODO: Convert Http::ProtocolVersion from class into a function.",83,data/crawl/squid/hunk_1261.cpp,,,data/crawl/squid/old_hunk_1261.cpp,data/crawl/squid/new_hunk_1261.cpp,20,-1,"fatalf(""http(s)_port protocol=%s is not supported\n"", aProtocol);",,"[""removeLog""]","[[""fatalf"", ""http"", ""s"", ""_port"", ""protocol"", ""%s"", ""is"", ""not"", ""supported\\n"", ""aProtocol""], []]",[-39699959897722009250],7312,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/97b131b6130450dd8a7f30cfa87f9d0ac18de508,02 Jul 2005,"Samba-2.X is declared unsupported by the Samba team. Remove the old
winbind helpers to reduce confusion. People wanting winbind integration
really should use Samba-3.X these days.",4319,data/crawl/squid/hunk_5018.cpp,,,data/crawl/squid/old_hunk_5018.cpp,data/crawl/squid/new_hunk_5018.cpp,345,-1,"printf (""OK\n"");",,"[""removeLog""]","[[""printf"", ""OK\\n""], []]",[-7225515199027138487],7311,"1539 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9136993377e9decfef076b4fa8b14ee03f4c8a09,11 Jun 2015,"Convert enum LogTags into class LogTags

- enum sequence re-typed to LogTags_ot
- logTagsIsATcpHit() function converted to method LogTags::isTcpHit()
- strings array lookup converted to method LogTags::c_str()
- constructors and assignment assure valid values, no more need for
  external asserts before logging.",173,data/crawl/squid/hunk_684.cpp,,,data/crawl/squid/old_hunk_684.cpp,data/crawl/squid/new_hunk_684.cpp,17,17,"storeAppendPrintf(sentry,
                              ""        %-20.20s %7d %3d%%\n"",
                              LogTags_str[l],
                              c->Http.result_hist[l],
                              Math::intPercent(c->Http.result_hist[l], c->Http.n_requests));","storeAppendPrintf(sentry,
                              ""        %-20.20s %7d %3d%%\n"",
                              LogTags(l).c_str(),
                              c->Http.result_hist[l],
                              Math::intPercent(c->Http.result_hist[l], c->Http.n_requests));","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""LogTags_str[l]""], [""LogTags"", ""l"", ""c_str""]]",[-2018681310503768858],7310,"16 days, 0:00:00"
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_620.cpp,,,data/crawl/squid/old_hunk_620.cpp,data/crawl/squid/new_hunk_620.cpp,16,16,"hdr_out->putStr(HDR_HOST, authority.c_str());","hdr_out->putStr(Http::HdrType::HOST, authority.c_str());","[""removeVariable"", ""addVariable""]","[[""HDR_HOST""], [""Http"", ""HdrType"", ""HOST""]]",[26551869338292852740],7309,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_625.cpp,,,data/crawl/squid/old_hunk_625.cpp,data/crawl/squid/new_hunk_625.cpp,7,7,"featReply->header.putStr(HDR_FTP_PRE, buf);","featReply->header.putStr(Http::HdrType::FTP_PRE, buf);","[""removeVariable"", ""addVariable""]","[[""HDR_FTP_PRE""], [""Http"", ""HdrType"", ""FTP_PRE""]]",[2250285213106812856],7308,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,365,-1,"fprintf(stderr, ""%s| %s: Invalid request [%s]\n"", LogTime(), PROGRAM, buf);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""request"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf""], []]",[20974463790759197551],7307,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,292,-1,"fprintf(stdout, ""BH input error\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""input"", ""error\\n""], []]",[27673462301926708073],7306,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,328,,"fprintf(stderr, ""%s| %s: Invalid negotiate request [%s]\n"", LogTime(), PROGRAM, buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""negotiate"", ""request"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf""]]",[-24305751704748737954],7305,"1313 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,270,,"fprintf(stderr, ""%s| %s: Invalid request\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""request\\n"", ""LogTime"", ""PROGRAM""]]",[-11683222101142235699],7304,"1313 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,259,,"fprintf(stderr, ""%s| %s: Oversized message\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Oversized"", ""message\\n"", ""LogTime"", ""PROGRAM""]]",[-10148544130211447693],7303,"1313 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,242,,"fprintf(stderr, ""%s| %s: fgets() failed! dying..... errno=%d (%s)\n"", LogTime(), PROGRAM, ferror(stdin),
		 strerror(ferror(stdin)));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""fgets"", ""failed"", ""dying"", ""errno"", ""%d"", ""%s"", ""\\n"", ""LogTime"", ""PROGRAM"", ""ferror"", ""stdin"", ""strerror"", ""ferror"", ""stdin""]]",[-20226450349386740227],7302,"1313 days, 12:00:00"
https://github.com/squid-cache/squid/commit/90d881c4fa0fc6d3a480be6fd9b701d1068dfaeb,12 Jan 2013,Bug 3736: Floating point exception due to divide by zero,6,data/crawl/squid/hunk_1800.cpp,,,data/crawl/squid/old_hunk_1800.cpp,data/crawl/squid/new_hunk_1800.cpp,-1,7,,"fatal(""'store_avg_object_size' should be larger than 0."");","[""addLog""]","[[], [""fatal"", ""store_avg_object_size"", ""should"", ""be"", ""larger"", ""than"", ""0""]]",[4169576952635120669],7301,"786 days, 18:00:00"
https://github.com/squid-cache/squid/commit/90d881c4fa0fc6d3a480be6fd9b701d1068dfaeb,12 Jan 2013,Bug 3736: Floating point exception due to divide by zero,6,data/crawl/squid/hunk_1800.cpp,,,data/crawl/squid/old_hunk_1800.cpp,data/crawl/squid/new_hunk_1800.cpp,-1,4,,"fatal(""'store_objects_per_bucket' should be larger than 0."");","[""addLog""]","[[], [""fatal"", ""store_objects_per_bucket"", ""should"", ""be"", ""larger"", ""than"", ""0""]]",[-12300532009220373221],7300,"786 days, 18:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5211.cpp,,,data/crawl/squid/old_hunk_5211.cpp,data/crawl/squid/new_hunk_5211.cpp,-1,5,,"fatal (""too much io\n"");","[""addLog""]","[[], [""fatal"", ""too"", ""much"", ""io\\n""]]",[-21256136546020748691],7299,"3383 days, 6:00:00"
https://github.com/squid-cache/squid/commit/04ebce5515f51ee9b8e81a6c70f3abc3aeb38302,03 Jan 2014,Got rid of Store.cci,104,data/crawl/squid/hunk_1633.cpp,,,data/crawl/squid/old_hunk_1633.cpp,data/crawl/squid/new_hunk_1633.cpp,59,-1,"fatal(""No Store Root has been set"");",,"[""removeLog""]","[[""fatal"", ""No"", ""Store"", ""Root"", ""has"", ""been"", ""set""], []]",[14073623743529683832],7298,"519 days, 18:00:00"
https://github.com/squid-cache/squid/commit/03901cf8c887266fcb6ff9604ea09da1db0857fc,30 Jan 2016,SourceLayout: move Basic auth helpers to src/auth/basic/,233,data/crawl/squid/hunk_374.cpp,,,data/crawl/squid/old_hunk_374.cpp,data/crawl/squid/new_hunk_374.cpp,5,5,"fprintf(stderr, ""Example basic_yp_auth mydomain.com passwd.byname\n"");","fprintf(stderr, ""Example basic_nis_auth mydomain.com passwd.byname\n"");","[""updateContent""]","[[""basic_yp_auth""], [""basic_nis_auth""]]",[-5123814034601454],7297,0:00:00
https://github.com/squid-cache/squid/commit/6e1d409c65c63e90343e9156a43dbbc87ff96e59,11 Sep 2008,"Cleaned up ConnStateData's closing and destruction.

1) Despite its name and the ""if (open) close"" use in ConnStateData destructor,
ConnStateData::close() was not closing anything. It was called from the Comm
close handler and from the destructor and would attempt to immediately delete
the ConnStateData object. Protecting code in deleteThis() may have prevented
the actual [double] delete from happening, but it is difficult to say exactly
what was going on when close() was being called from the destructor.

I converted ConnStateData::close to swanSong, which is the standard AsyncJob
cleanup method. As before, the method does not close anything (which may be
wrong). The swanSong method is never called directly by the user code. It is
called by lower layers just before the job is destroyed.

We may need to add Comm closing code to swanSong. For now, the updated
ConnStateData destructor will warn if ConnStateData forgot to close
the connection. The destructor will also warn if swanSong was not called,
which would mean that the job object is being deleted incorrectly.


2) Polished ClientSocketContext::writeComplete to distinguish
STREAM_UNPLANNED_COMPLETE from STREAM_FAILED closing state. This helps when
looking at stack traces.


3) Added an XXX comment about duplicated code.


4) Documented ClientSocketContext::initiateClose purpose and context.",29,data/crawl/squid/hunk_4225.cpp,,,data/crawl/squid/old_hunk_4225.cpp,data/crawl/squid/new_hunk_4225.cpp,-1,7,,"initiateClose(""STREAM_FAILED"");","[""addLog""]","[[], [""initiateClose"", ""STREAM_FAILED""]]",[-774983655038102417],7296,"1343 days, 18:00:00"
https://github.com/squid-cache/squid/commit/014adac1c52c2f7dabee4cf6361dec4f4207f41a,20 May 2016,"Do not allow low-level debugging to hide important/critical messages.

Removed debugs() side effects that inadvertently resulted in some
important/critical messages logged at the wrong debugging level and,
hence, becoming invisible to the admin. The removed side effects set the
""current"" debugging level when a debugs() parameter called a function
that also called debugs(). The last nested debugs() called affected the
level of all debugs() still in progress!

Related changes:

* Reentrant debugging messages no longer clobber parent messages. Each
  debugging message is logged separately, in the natural order of
  debugs() calls that would have happened if debugs() were a function
  (that gets already evaluated arguments) and not a macro (that
  evaluates its arguments in the middle of the call). This order is
  ""natural"" because good macros work like functions from the caller
  point of view.

* Assertions hit while evaluating debugs() parameters are now logged
  instead of being lost with the being-built debugs() log line.

* 10-20% faster debugs() performance because we no longer allocate a new
  std::ostringstream buffer for the vast majority of debugs() calls.
  Only reentrant calls get a new buffer.

* Removed old_debug(), addressing an old ""needs to die"" to-do.

* Removed do_debug() that changed debugging level while testing whether
  debugging is needed. Use side-effect-free Debug::Enabled() instead.

Also removed the OutStream wrapper class. The wrapper was added in trunk
revision 13767 that promised to (but did not?) MemPool the debug output
buffers. We no longer ""new"" the buffer stream so a custom new() method
would be unused. Besides, the r13767 explanation implied that providing
a Child::new() method would somehow overwrite Parent::allocator_type,
which did not compute for me. Finally, Squid ""new""s other allocator-
enabled STL objects without overriding their new methods so either the
same problem is still there or it did not exist (or was different?).

Also removed Debug::xassert() because the debugs() assertions now work
OK without that hack.",321,data/crawl/squid/hunk_231.cpp,,,data/crawl/squid/old_hunk_231.cpp,data/crawl/squid/new_hunk_231.cpp,-1,41,,"_db_print(""%s\n"", Current->buf.str().c_str());","[""addLog""]","[[], [""_db_print"", ""%s\\n"", ""Current"", ""buf"", ""str"", ""c_str""]]",[8314283759339014326],7295,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/25f983407b3c3df95d9f81edf1bd917316f2dfda,01 Nov 2010,"Bug 3038: Detatch libmisc from libcompat

* Migrates many of the remaining libmisc portability wrappers into
  libcompat.

* Splits libmisc into:
   libprofiler - Squid internal profiler (developer-only)
   libmiscencoding - Various binary encoding / crypto algorithms
   libmisccontainers - Various data container algorithms

* Makes all binaries which need to link the libmisc* pieces directly instead
  of via $(COMPAT_LIB) which now only links the libcompat and internal
  profiler due to profiling being used on some libcompat functions.

* Adds a stub_debug for binaries needing the Debug.h API without squid
  timers and globals.

Some effort has been made to identify binaries whose dependencies can be
reduced. More of this dependency removal can be done in future.",2111,data/crawl/squid/hunk_2903.cpp,,,data/crawl/squid/old_hunk_2903.cpp,data/crawl/squid/new_hunk_2903.cpp,32,-1,"_db_print(""%s\n"", CurrentDebug->str().c_str());",,"[""removeLog""]","[[""_db_print"", ""%s\\n"", ""CurrentDebug"", ""str"", ""c_str""], []]",[-6980861486925073934],7294,"1407 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c2afddd8f98c17c7a9e03d504b97847065d744e1,30 Nov 2016,"Revert C++11 std::regex changes

CentOS 7 (and thus probably also RHEL 7) still have difficulty using
GCC 5+ compiler necessary for this C++11 code to be used reliably.

see http://lists.squid-cache.org/pipermail/squid-dev/2015-July/002884.html",5399,data/crawl/squid/hunk_120.cpp,,,data/crawl/squid/old_hunk_120.cpp,data/crawl/squid/new_hunk_120.cpp,51,77,"fprintf( debug, ""# match '%s' in \""%s\""\n"", subs[offset].str().c_str(), subs[0].str().c_str());","fprintf( debug, ""# match from %d-%d on \""%s\""\n"",
                                      (int)subs[offset].rm_so,
                                      (int)subs[offset].rm_eo,
                                      line+subs[offset].rm_so );","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""%s"", ""in"", ""str"", ""c_str"", ""subs[0]"", ""str"", ""c_str""], [""from"", ""%d"", ""%d"", ""on"", ""int"", ""rm_so"", ""int"", ""subs[offset]"", ""rm_eo"", ""line"", ""subs[offset]"", ""rm_so""]]",[-18914542953596725113],7293,0:00:00
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/hunk_110.cpp,,,data/crawl/squid/old_hunk_110.cpp,data/crawl/squid/new_hunk_110.cpp,19,21,"storeAppendPrintf(entry, ""%s %s key_extras \""%s\""\n"", name, scheme->type(), keyExtrasLine.termedBuf());","storeAppendPrintf(entry, ""%s %s key_extras \""%s\""\n"", name, type, keyExtrasLine.termedBuf());","[""removeVariable"", ""addVariable""]","[[""scheme""], []]",[4226706071475375301],7292,0:00:00
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/hunk_84.cpp,,,data/crawl/squid/old_hunk_84.cpp,data/crawl/squid/new_hunk_84.cpp,7,3,"auth_user_request->denyMessage(""NTLM Authentication denied with no reason given"");","auth_user_request->denyMessageFromHelper(""NTLM"", reply);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""denyMessage"", ""Authentication"", ""denied"", ""with"", ""no"", ""reason"", ""given""], [""denyMessageFromHelper"", ""reply""]]",[6858755942896812863],7291,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_91.cpp,,,data/crawl/squid/old_hunk_91.cpp,data/crawl/squid/new_hunk_91.cpp,5,5,auth_user_request->denyMessage(errNote);,auth_user_request->denyMessage(errNote.c_str());,"[""removeVariable"", ""addVariable""]","[[], [""c_str""]]",[604061038622547682],7290,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ccff960108dab2ce4bff860f2dc34def2f8ca1ae,28 Mar 1996,make pid_filename a config option and create writePidFile() in tools.c,226,data/crawl/squid/hunk_7950.cpp,,,data/crawl/squid/old_hunk_7950.cpp,data/crawl/squid/new_hunk_7950.cpp,9,-1,"fprintf(stderr, ""         messages will be sent to 'stderr'.\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""messages"", ""will"", ""be"", ""sent"", ""to"", ""stderr"", ""\\n""], []]",[25988502163877975932],7289,0:00:00
https://github.com/squid-cache/squid/commit/6eb42caec6c6db2142568d6dd4426e89e6c16f8f,04 Apr 1996,major code cleanup/unification/rewrite,624,data/crawl/squid/hunk_7894.cpp,,,data/crawl/squid/old_hunk_7894.cpp,data/crawl/squid/new_hunk_7894.cpp,3,3,"fatal_dump(""storeFreeEntry: NULL Entry\n"");","fatal_dump(""storeFreeEntry: NULL Entry"");","[""updateContent""]","[[""Entry\\n""], [""Entry""]]",[-5374594766037945752],7288,0:00:00
https://github.com/squid-cache/squid/commit/b8de7ebe12756b6d6a09a0b034952c1e11325c95,16 Apr 1996,"change ""cached"" to ""squid"" in lots of places",640,data/crawl/squid/hunk_7838.cpp,,,data/crawl/squid/old_hunk_7838.cpp,data/crawl/squid/new_hunk_7838.cpp,18,18,"printf(""         Change your cached.conf file.\n"");","printf(""         Change your configuration file.\n"");","[""updateContent""]","[[""cached"", ""conf""], [""configuration""]]",[-5312941622082004259],7287,0:00:00
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7824.cpp,,,data/crawl/squid/old_hunk_7824.cpp,data/crawl/squid/new_hunk_7824.cpp,-1,46,,"storeAppendPrintf(sentry, ""{\t\t%s}\n"", p->key);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\t\\t%s"", ""\\n"", ""p"", ""key""]]",[16559813076352035363],7286,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7753.cpp,,,data/crawl/squid/old_hunk_7753.cpp,data/crawl/squid/new_hunk_7753.cpp,18,13,"storeAppendPrintf(sentry, ""{\tReserved number of file descriptors :\t%d}\n"",
	RESERVED_FD);","storeAppendPrintf(sentry, ""{\tReserved number of file descriptors:  %4d}\n"",
	RESERVED_FD);","[""updateContent""]","[[""\\t%d""], [""%4d""]]",[391083725521778503],7285,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7758.cpp,,,data/crawl/squid/old_hunk_7758.cpp,data/crawl/squid/new_hunk_7758.cpp,3,3,"storeAppendPrintf(sentry, ""}\n"");","storeAppendPrintf(sentry, close_bracket);","[""removeContent"", ""addVariable""]","[[""\\n""], [""close_bracket""]]",[8723675099856431368],7284,0:00:00
https://github.com/squid-cache/squid/commit/d51e52f5fef6a82ca1a7cf1be5e55f2c1d16b3ce,10 Jul 1996,"mucho cleanup, mostly separate filedescriptor output into separate function",248,data/crawl/squid/hunk_7700.cpp,,,data/crawl/squid/old_hunk_7700.cpp,data/crawl/squid/new_hunk_7700.cpp,-1,72,,"storeAppendPrintf(sentry, ""%31s %s}\n"", """", fd_note(i, NULL));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%31s"", ""%s"", ""\\n"", ""fd_note"", ""i"", ""NULL""]]",[2238263000112151173],7283,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7742.cpp,,,data/crawl/squid/old_hunk_7742.cpp,data/crawl/squid/new_hunk_7742.cpp,-1,11,,"storeAppendPrintf(sentry, open_bracket);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""open_bracket""]]",[14991446791886401303],7282,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/5ec2f9233ae75cbe5b24b4a746fd5253df0aa89b,26 Jul 1996,"removed {http,ftp,gopher}_stop stoplists",103,data/crawl/squid/hunk_7664.cpp,,,data/crawl/squid/old_hunk_7664.cpp,data/crawl/squid/new_hunk_7664.cpp,21,-1,"storeAppendPrintf(sentry, ""{\t\t%s}\n"", p->key);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\t\\t%s"", ""\\n"", ""p"", ""key""], []]",[-16559813076352035363],7281,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7731.cpp,,,data/crawl/squid/old_hunk_7731.cpp,data/crawl/squid/new_hunk_7731.cpp,-1,132,,"storeAppendPrintf(sentry, "" %15s"", inet_ntoa(addr));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%15s"", ""inet_ntoa"", ""addr""]]",[16086344755803639427],7280,"46 days, 8:00:00"
https://github.com/squid-cache/squid/commit/af00901c8240077af4a9e5758dd6c30f14564802,27 Aug 1996,merge from SQUID_1_0_10,477,data/crawl/squid/hunk_7634.cpp,,,data/crawl/squid/old_hunk_7634.cpp,data/crawl/squid/new_hunk_7634.cpp,17,-1,"storeAppendPrintf(sentry, "" %15s"", inet_ntoa(addr));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%15s"", ""inet_ntoa"", ""addr""], []]",[-16086344755803639427],7279,"21 days, 16:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,49,,"fatal_dump(""Invalid IP address"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""IP"", ""address""]]",[-25587333007482150697],7278,"83 days, 8:00:00"
https://github.com/squid-cache/squid/commit/5c5783a22a160a1b243bb783941c938781ff14b7,30 Apr 1997,"Massive changes
lose FD lifetimes, use timeouts only
move some stuff to fd.c",849,data/crawl/squid/hunk_7288.cpp,,,data/crawl/squid/old_hunk_7288.cpp,data/crawl/squid/new_hunk_7288.cpp,38,25,"storeAppendPrintf(sentry, ""%31s %s}\n"", null_string, fd_note(i, NULL));","storeAppendPrintf(sentry, ""%31s %s}\n"", null_string, f->desc);","[""removeVariable"", ""addVariable""]","[[""fd_note"", ""i"", ""NULL""], [""f"", ""desc""]]",[1173293591823174329],7277,0:00:00
https://github.com/squid-cache/squid/commit/4f92c80c2de644e024a477c30ff9643e1029b1d6,01 May 1997,more random massive changes,386,data/crawl/squid/hunk_7279.cpp,,,data/crawl/squid/old_hunk_7279.cpp,data/crawl/squid/new_hunk_7279.cpp,58,-1,"storeAppendPrintf(sentry, ""%31s %s}\n"", null_string, f->desc);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%31s"", ""%s"", ""\\n"", ""null_string"", ""f"", ""desc""], []]",[-12160499107717052500],7276,0:00:00
https://github.com/squid-cache/squid/commit/934b03fcac83ff55159329b6723b9d6a1d5bd194,27 Jun 1997,adding,2145,data/crawl/squid/hunk_7162.cpp,,,data/crawl/squid/old_hunk_7162.cpp,data/crawl/squid/new_hunk_7162.cpp,-1,308,,"fprintf(fp, ""\t%s = xstrdup(\""%s\"");\n"",
		entry->loc, entry->default_value);","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\t%s"", ""xstrdup"", ""\\"", ""%s\\"", ""\\n"", ""entry"", ""loc"", ""entry"", ""default_value""]]",[-6895646199655884782],7275,0:00:00
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,-1,546,,"printf(""%d"", var);","[""addLog""]","[[], [""printf"", ""%d"", ""var""]]",[3494803623616240280],7274,0:00:00
https://github.com/squid-cache/squid/commit/5ad764e27d272e0afd4354151c3e1f6ec5decbf9,02 Nov 1996,Make swap log pathname configurable,143,data/crawl/squid/hunk_7454.cpp,,,data/crawl/squid/old_hunk_7454.cpp,data/crawl/squid/new_hunk_7454.cpp,-1,4,,"fatal_dump(""cache_dir pathname is too long"");","[""addLog""]","[[], [""fatal_dump"", ""cache_dir"", ""pathname"", ""is"", ""too"", ""long""]]",[-3692931254316650243],7273,"131 days, 8:00:00"
https://github.com/squid-cache/squid/commit/f53b06f967ce5bdf5b076bba55d41f8d45a3077d,25 Aug 1997,"Configuration cleanup.
	- set up 'DEFAULT_IF_NONE' option for things like http_port
	  and cache_dir where we want to set a default only if there
	  is not one or more given in the config file.
	- Implemented the configuration dump via cachemanager.  All the
	  easy config types have dump functions; the remainder are
	  unimplemented.",220,data/crawl/squid/hunk_7088.cpp,,,data/crawl/squid/old_hunk_7088.cpp,data/crawl/squid/new_hunk_7088.cpp,7,6,"printf(""%s "", list->key);","storeAppendPrintf(entry, ""%s %s\n"", name, list->key);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf""], [""storeAppendPrintf"", ""entry"", ""%s\\n"", ""name""]]",[-1346114251524176872],7272,0:00:00
https://github.com/squid-cache/squid/commit/a4ebeb3baabc1baa2eaf44bfd9b044a845e74b0c,29 Aug 1996,set announce_rate and clean_rate to one year if they are disabled,14,data/crawl/squid/hunk_7617.cpp,,,data/crawl/squid/old_hunk_7617.cpp,data/crawl/squid/new_hunk_7617.cpp,6,-1,"printf(""         This will cause serious problems with your cache!!!\n"");",,"[""removeLog""]","[[""printf"", ""This"", ""will"", ""cause"", ""serious"", ""problems"", ""with"", ""your"", ""cache"", ""\\n""], []]",[6661567269603525748],7271,"247 days, 16:00:00"
https://github.com/squid-cache/squid/commit/641941c002e567b2a9d108130acdd1a86111be96,29 Mar 1997,Started implementing diff cache dir sizes,385,data/crawl/squid/hunk_7356.cpp,,,data/crawl/squid/old_hunk_7356.cpp,data/crawl/squid/new_hunk_7356.cpp,10,-1,"fatal_dump(""cache_dir pathname is too long"");",,"[""removeLog""]","[[""fatal_dump"", ""cache_dir"", ""pathname"", ""is"", ""too"", ""long""], []]",[3692931254316650243],7270,"109 days, 16:00:00"
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6958.cpp,,,data/crawl/squid/old_hunk_6958.cpp,data/crawl/squid/new_hunk_6958.cpp,-1,340,,"fprintf(stderr, ""Couldn't abort session: %s. Exiting\n"", 
		    api_errstring(snmp_errno));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Couldn"", ""t"", ""abort"", ""session"", ""%s"", ""Exiting\\n"", ""api_errstring"", ""snmp_errno""]]",[-3556889371496085440],7269,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,977,,"print_error(""Expected integer"", token, type);","[""addLog""]","[[], [""print_error"", ""Expected"", ""integer"", ""token"", ""type""]]",[20396393434689223760],7268,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6956.cpp,,,data/crawl/squid/old_hunk_6956.cpp,data/crawl/squid/new_hunk_6956.cpp,-1,901,,"fprintf(stderr, ""object identifier too long\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""object"", ""identifier"", ""too"", ""long\\n""]]",[-16428620954377002349],7267,0:00:00
https://github.com/squid-cache/squid/commit/da2d50d1b7f6df01b5276ca63e22f9c35cd65774,21 Nov 1997,gindent,23717,data/crawl/squid/hunk_6948.cpp,,,data/crawl/squid/old_hunk_6948.cpp,data/crawl/squid/new_hunk_6948.cpp,-1,28,,"printf(""Description== \""%.50s\""\n"", quoted_string_buffer);","[""addLog""]","[[], [""printf"", ""Description"", ""\\"", ""%"", ""50s\\"", ""\\n"", ""quoted_string_buffer""]]",[4929498204986278236],7266,0:00:00
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,24,,"fatal_dump(""Invalid $message"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""message""]]",[-23689232014450983535],7265,"157 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,21,,"fatal_dump(""Invalid $fail"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""fail""]]",[-17352137429592844529],7264,"157 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a4394ebd753cb4b23be7aaf6a11f5a5cf833df0e,21 Jun 1997,"clean up access logging, remove lots of Cacheinfo garbage
Need to relocate enums to an enums.h file, too many other wierd
dependencies.",464,data/crawl/squid/hunk_7166.cpp,,,data/crawl/squid/old_hunk_7166.cpp,data/crawl/squid/new_hunk_7166.cpp,42,-1,"fatal(""Cannot open logfile."");",,"[""removeLog""]","[[""fatal"", ""Cannot"", ""open"", ""logfile""], []]",[-2958952059222500357],7263,"74 days, 16:00:00"
https://github.com/squid-cache/squid/commit/f892c2bf269d12e4c8eb7b58889735b6429e8f85,21 Jun 1997,adding,510,data/crawl/squid/hunk_7167.cpp,,,data/crawl/squid/old_hunk_7167.cpp,data/crawl/squid/new_hunk_7167.cpp,-1,252,,"fatal(""Cannot open logfile."");","[""addLog""]","[[], [""fatal"", ""Cannot"", ""open"", ""logfile""]]",[2958952059222500357],7262,"74 days, 16:00:00"
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,69,68,"storeAppendPrintf(sentry, ""{\tHolding blocks:        %6d KB %6d blks}\n"",
	mp.hblkhd >> 10, mp.hblks);","storeAppendPrintf(sentry, ""\tHolding blocks:        %6d KB %6d blks\n"",
	mp.hblkhd >> 10, mp.hblks);","[""updateContent""]","[[""blks"", ""\\n""], [""blks\\n""]]",[-1191985278751827136],7261,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,16,15,"storeAppendPrintf(sentry, ""{\tNumber of ICP messages sent:\t%u}\n"",
	Counter.icp.pkts_sent);","storeAppendPrintf(sentry, ""\tNumber of ICP messages sent:\t%u\n"",
	Counter.icp.pkts_sent);","[""updateContent""]","[[""\\t%u"", ""\\n""], [""\\t%u\\n""]]",[-1330684662102328312],7260,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,23,22,"storeAppendPrintf(sentry, ""{\tICP messages per minute:\t%.1f}\n"",
	(Counter.icp.pkts_sent + Counter.icp.pkts_recv) / (runtime / 60.0));","storeAppendPrintf(sentry, ""\tICP messages per minute:\t%.1f\n"",
	(Counter.icp.pkts_sent + Counter.icp.pkts_recv) / (runtime / 60.0));","[""updateContent""]","[[""1f"", ""\\n""], [""1f\\n""]]",[641379475350173300],7259,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6826.cpp,,,data/crawl/squid/old_hunk_6826.cpp,data/crawl/squid/new_hunk_6826.cpp,18,17,"storeAppendPrintf(sentry, ""{LAST REPLY : %8d seconds ago}\n"",
	    (int) (squid_curtime - e->stats.last_reply));","storeAppendPrintf(sentry, ""LAST REPLY : %8d seconds ago\n"",
	    (int) (squid_curtime - e->stats.last_reply));","[""updateContent""]","[[""ago"", ""\\n""], [""ago\\n""]]",[-9755500214657285284],7258,0:00:00
https://github.com/squid-cache/squid/commit/b716a8ad7b0f9209874e63207440d367c92f9660,10 Aug 1997,"More work on persistent connections
	- added histogram counter
	- added httpRestart() to retry failed requests when the
	  server closes on us.
	- missing commSetTimeout() calls when reusing a pconn.
	- need to disable read and timeout handler when pconn
	  pops a FD.
	- const fixes",133,data/crawl/squid/hunk_7097.cpp,,,data/crawl/squid/old_hunk_7097.cpp,data/crawl/squid/new_hunk_7097.cpp,-1,21,,"storeAppendPrintf(e, ""\t%4d  %9d\n"", i, server_pconn_hist[i]);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""\\t%4d"", ""%9d\\n"", ""i"", ""server_pconn_hist[i]""]]",[4661309132147493222],7257,"129 days, 8:00:00"
https://github.com/squid-cache/squid/commit/b716a8ad7b0f9209874e63207440d367c92f9660,10 Aug 1997,"More work on persistent connections
	- added histogram counter
	- added httpRestart() to retry failed requests when the
	  server closes on us.
	- missing commSetTimeout() calls when reusing a pconn.
	- need to disable read and timeout handler when pconn
	  pops a FD.
	- const fixes",133,data/crawl/squid/hunk_7097.cpp,,,data/crawl/squid/old_hunk_7097.cpp,data/crawl/squid/new_hunk_7097.cpp,-1,11,,"storeAppendPrintf(e,
	""\n""
	""Server-side persistent connection counts:\n""
	""\n""
	""\treq/\n""
	""\tconn      count\n""
	""\t----  ---------\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""\\n"", ""Server"", ""side"", ""persistent"", ""connection"", ""counts"", ""\\n"", ""\\n"", ""\\treq/\\n"", ""\\tconn"", ""count\\n"", ""\\t"", ""\\n""]]",[11180452350504215011],7256,"129 days, 8:00:00"
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,557,-1,"printf(""Description== \""%.50s\""\n"", quoted_string_buffer);",,"[""removeLog""]","[[""printf"", ""Description"", ""\\"", ""%"", ""50s\\"", ""\\n"", ""quoted_string_buffer""], []]",[-4929498204986278236],7255,0:00:00
https://github.com/squid-cache/squid/commit/d23f4e1b36396b975b3de1a630942be944069f3b,23 Feb 1998,new squid-independent cachemgr.cgi,1029,data/crawl/squid/hunk_6741.cpp,,,data/crawl/squid/old_hunk_6741.cpp,data/crawl/squid/new_hunk_6741.cpp,-1,81,,"fputs(buf, stdout);","[""addLog""]","[[], [""fputs"", ""buf"", ""stdout""]]",[-11895120448567402220],7254,0:00:00
https://github.com/squid-cache/squid/commit/2961668b4fedc47880a17526c867402b1e1594db,25 Feb 1998,Changed %f to %lf.,16,data/crawl/squid/hunk_6710.cpp,,,data/crawl/squid/old_hunk_6710.cpp,data/crawl/squid/new_hunk_6710.cpp,3,3,"storeAppendPrintf(sentry, ""%2d\t %5d\t %5d\t %6.2f\n"",
	    idx, ((int)(val+size)), count, xpercent(count, HeaderEntryParsedCount));","storeAppendPrintf(sentry, ""%2d\t %5d\t %5d\t %6.2lf\n"",
	    idx, ((int)(val+size)), count, xpercent(count, HeaderEntryParsedCount));","[""updateContent""]","[[""2f\\n""], [""2lf\\n""]]",[-7691326309081763623],7253,0:00:00
https://github.com/squid-cache/squid/commit/7021844c42212902ee9a10ba7097201a6d66a1c5,03 Mar 1998,"- Added ""mem_pools_limit"" configuration option. Semantics of
  ""mem_pools"" option has also changed a bit to reflect new memory
  management policy.
- Reorganized memory pools. Squid now allocates memory in big chunks
  and distributes that memory among ""frequently allocated"" objects.
- memAllocate() has now only one parameter. Objects are always reset
  with 0s.

- HttpHeader.c: fixed warnings generated by some compilers on member to union
  conversions. Tested using DEC cc only.
- cachmgr.c now tries to interpret strings containing '\t' as table rows and
  format them using html table attributes.",742,data/crawl/squid/hunk_6652.cpp,,,data/crawl/squid/old_hunk_6652.cpp,data/crawl/squid/new_hunk_6652.cpp,11,11,"storeAppendPrintf(e, ""\t<h3>Number of fields per header distribution (init size: %d)</h3>\n"",
	INIT_FIELDS_PER_HEADER);","storeAppendPrintf(e, ""<h3>Number of fields per header distribution (init size: %d)</h3>\n"",
	INIT_FIELDS_PER_HEADER);","[""updateContent""]","[[""\\t""], []]",[-11776070748106338],7252,0:00:00
https://github.com/squid-cache/squid/commit/7021844c42212902ee9a10ba7097201a6d66a1c5,03 Mar 1998,"- Added ""mem_pools_limit"" configuration option. Semantics of
  ""mem_pools"" option has also changed a bit to reflect new memory
  management policy.
- Reorganized memory pools. Squid now allocates memory in big chunks
  and distributes that memory among ""frequently allocated"" objects.
- memAllocate() has now only one parameter. Objects are always reset
  with 0s.

- HttpHeader.c: fixed warnings generated by some compilers on member to union
  conversions. Tested using DEC cc only.
- cachmgr.c now tries to interpret strings containing '\t' as table rows and
  format them using html table attributes.",742,data/crawl/squid/hunk_6651.cpp,,,data/crawl/squid/old_hunk_6651.cpp,data/crawl/squid/new_hunk_6651.cpp,3,3,"storeAppendPrintf(sentry, ""%2d\t %5d\t %5d\t %6.2lf\n"",
	    idx, ((int) (val + size)), count, xpercent(count, HeaderEntryParsedCount));","storeAppendPrintf(sentry, ""%2d\t %5d\t %5d\t %6.2f\n"",
	    idx, ((int) (val + size)), count, xpercent(count, HeaderEntryParsedCount));","[""updateContent""]","[[""2lf\\n""], [""2f\\n""]]",[7691326309081763623],7251,0:00:00
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/hunk_6568.cpp,,,data/crawl/squid/old_hunk_6568.cpp,data/crawl/squid/new_hunk_6568.cpp,-1,155,,"fprintf(stderr, ""%s scanning\n"", fname);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""scanning\\n"", ""fname""]]",[-3659830878210560945],7250,16:00:00
https://github.com/squid-cache/squid/commit/23d92c64f75d0b77afa4f96d77d122dd8dfe05a8,06 Dec 1997,INITIAL URN SUPPORT by Kostas,1140,data/crawl/squid/hunk_6885.cpp,,,data/crawl/squid/old_hunk_6885.cpp,data/crawl/squid/new_hunk_6885.cpp,749,-1,"fatal_dump(""Invalid $message"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""message""], []]",[23689232014450983535],7249,"78 days, 16:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,26,,"storeAppendPrintf(sentry, ""icp.kbytes_recv = %d\n"",
	(int) f->icp.kbytes_recv.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""kbytes_recv"", ""%d\\n"", ""int"", ""f"", ""icp"", ""kbytes_recv"", ""kb""]]",[6902633323381723445],7248,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,24,,"storeAppendPrintf(sentry, ""icp.kbytes_sent = %d\n"",
	(int) f->icp.kbytes_sent.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""kbytes_sent"", ""%d\\n"", ""int"", ""f"", ""icp"", ""kbytes_sent"", ""kb""]]",[4902379322301722921],7247,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,22,,"storeAppendPrintf(sentry, ""icp.pkts_recv = %d\n"",
	f->icp.pkts_recv);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""pkts_recv"", ""%d\\n"", ""f"", ""icp"", ""pkts_recv""]]",[4165807127523989432],7246,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,20,,"storeAppendPrintf(sentry, ""icp.pkts_sent = %d\n"",
	f->icp.pkts_sent);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""pkts_sent"", ""%d\\n"", ""f"", ""icp"", ""pkts_sent""]]",[2165521125979986932],7245,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9973e9feb3d7b2e13361b2c0b27c4d79e8d5df75,19 Feb 1998,"Added service time histogram for DNS (ipcache+fqdncache together)
Added statLogHistDump() for printing histograms",60,data/crawl/squid/hunk_6796.cpp,,,data/crawl/squid/old_hunk_6796.cpp,data/crawl/squid/new_hunk_6796.cpp,-1,5,,"storeAppendPrintf(sentry, ""dns.svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""dns"", ""svc_time"", ""histogram"", ""\\n""]]",[653227546511370233],7244,"18 days, 16:00:00"
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6728.cpp,,,data/crawl/squid/old_hunk_6728.cpp,data/crawl/squid/new_hunk_6728.cpp,-1,5,,"storeAppendPrintf(sentry, ""icp.reply_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""reply_svc_time"", ""histogram"", ""\\n""]]",[-8726389353641440357],7243,"14 days, 16:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6723.cpp,,,data/crawl/squid/old_hunk_6723.cpp,data/crawl/squid/new_hunk_6723.cpp,-1,90,,"storeAppendPrintf(sentry, ""client_http.all_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""all_svc_time"", ""histogram"", ""\\n""]]",[1431764734794782766],7242,"29 days, 0:00:00"
https://github.com/squid-cache/squid/commit/95e36d02e1eca338ecbf4ca7cafc4c46797c2d41,31 Jul 1998,Luyers new DELAY_POOLS code,972,data/crawl/squid/hunk_6314.cpp,,,data/crawl/squid/old_hunk_6314.cpp,data/crawl/squid/new_hunk_6314.cpp,-1,230,,"storeAppendPrintf(sentry, ""\n\tAggregate:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\n\\tAggregate"", ""\\n""]]",[9574720658453296260],7241,0:00:00
https://github.com/squid-cache/squid/commit/447e176bc0560af9b837d744877f154af7fe92c9,14 Aug 1998,Luyers finished delay pools patch,540,data/crawl/squid/hunk_6311.cpp,,,data/crawl/squid/old_hunk_6311.cpp,data/crawl/squid/new_hunk_6311.cpp,-1,60,,"storeAppendPrintf(sentry, ""\n\tAggregate:\n\tDisabled.\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\n\\tAggregate"", ""\\n\\tDisabled"", ""\\n""]]",[8874407868546681546],7240,0:00:00
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6782.cpp,,,data/crawl/squid/old_hunk_6782.cpp,data/crawl/squid/new_hunk_6782.cpp,60,-1,"storeAppendPrintf(sentry, ""!%s "", d->domain);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%s"", ""d"", ""domain""], []]",[-14478533116132914383],7239,"62 days, 16:00:00"
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6162.cpp,,,data/crawl/squid/old_hunk_6162.cpp,data/crawl/squid/new_hunk_6162.cpp,249,-1,"storeAppendPrintf(sentry, ""\n\tAggregate:\n\tDisabled.\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\n\\tAggregate"", ""\\n\\tDisabled"", ""\\n""], []]",[-8874407868546681546],7238,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6162.cpp,,,data/crawl/squid/old_hunk_6162.cpp,data/crawl/squid/new_hunk_6162.cpp,241,-1,"storeAppendPrintf(sentry, ""\n\tAggregate:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\n\\tAggregate"", ""\\n""], []]",[-9574720658453296260],7237,0:00:00
https://github.com/squid-cache/squid/commit/b8de7ebe12756b6d6a09a0b034952c1e11325c95,16 Apr 1996,"change ""cached"" to ""squid"" in lots of places",640,data/crawl/squid/hunk_7849.cpp,,,data/crawl/squid/old_hunk_7849.cpp,data/crawl/squid/new_hunk_7849.cpp,-1,5,,"fatal_dump(""Cannot cd to swap directory?"");","[""addLog""]","[[], [""fatal_dump"", ""Cannot"", ""cd"", ""to"", ""swap"", ""directory""]]",[-10293767358945213303],7236,"370 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b672a532120f0c2eb22c0db8225a6431c5e57ab6,22 Sep 1998,add df-like output for storedir page,303,data/crawl/squid/hunk_6263.cpp,,,data/crawl/squid/old_hunk_6263.cpp,data/crawl/squid/new_hunk_6263.cpp,-1,12,,"storeAppendPrintf(sentry, ""Filesystem Inodes in use: %d/%d (%d%%)\n"",
		sfs.f_files - sfs.f_ffree, sfs.f_files,
		percent(sfs.f_files - sfs.f_ffree, sfs.f_files));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Filesystem"", ""Inodes"", ""in"", ""use"", ""%d/%d"", ""%d%%"", ""\\n"", ""sfs"", ""f_files"", ""sfs"", ""f_ffree"", ""sfs"", ""f_files"", ""percent"", ""sfs"", ""f_files"", ""sfs"", ""f_ffree"", ""sfs"", ""f_files""]]",[-1857087631882639425],7235,"392 days, 16:00:00"
https://github.com/squid-cache/squid/commit/6a566b9c9fa4d40f154a60497e332bc9067b4fc8,09 Jun 2000,"Modular policy implementation. See programmers guide for API details.

This also includes Adrians improved store I/O callback handler model.",3040,data/crawl/squid/hunk_6003.cpp,,,data/crawl/squid/old_hunk_6003.cpp,data/crawl/squid/new_hunk_6003.cpp,-1,8,,"storeAppendPrintf(sentry, ""Storage Replacement Threshold:\t%f\n"",
	heap_peepminkey(sd.repl.heap.heap));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Storage"", ""Replacement"", ""Threshold"", ""\\t%f\\n"", ""heap_peepminkey"", ""sd"", ""repl"", ""heap"", ""heap""]]",[13864888633352626769],7234,0:00:00
https://github.com/squid-cache/squid/commit/0c2bd4faac3ec8e8dc65cac855af5e9767752320,15 Mar 2001,fix delaypools/delay-pools typo and remove references to HEAP_REPLACEMENT,51,data/crawl/squid/hunk_5845.cpp,,,data/crawl/squid/old_hunk_5845.cpp,data/crawl/squid/new_hunk_5845.cpp,8,-1,"storeAppendPrintf(sentry, ""Storage Replacement Threshold:\t%f\n"",
	heap_peepminkey(sd.repl.heap.heap));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Storage"", ""Replacement"", ""Threshold"", ""\\t%f\\n"", ""heap_peepminkey"", ""sd"", ""repl"", ""heap"", ""heap""], []]",[-13864888633352626769],7233,0:00:00
https://github.com/squid-cache/squid/commit/4e2c57a0431489369bd9869aff83772eee1c0ef9,30 Mar 2002,SASL auth helper by Ian Castle,173,data/crawl/squid/hunk_5688.cpp,,,data/crawl/squid/old_hunk_5688.cpp,data/crawl/squid/new_hunk_5688.cpp,-1,85,,"fprintf( stderr, ""error %d %s\n"", rc, sasl_errstring(rc, NULL, NULL ));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""error"", ""%d"", ""%s\\n"", ""rc"", ""sasl_errstring"", ""rc"", ""NULL"", ""NULL""]]",[-839464069439094152],7232,0:00:00
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/hunk_7234.cpp,,,data/crawl/squid/old_hunk_7234.cpp,data/crawl/squid/new_hunk_7234.cpp,-1,38,,"storeAppendPrintf(e, ""</PRE>\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""/PRE"", ""\\n""]]",[-2456542899871621207],7231,"625 days, 8:00:00"
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/hunk_7234.cpp,,,data/crawl/squid/old_hunk_7234.cpp,data/crawl/squid/new_hunk_7234.cpp,-1,39,,"storeAppendPrintf(e, ""<HR>\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""HR"", ""\\n""]]",[5206455857277709763],7230,"625 days, 8:00:00"
https://github.com/squid-cache/squid/commit/332dafa28099995ae4baee1de763dc42eef698ac,15 Oct 2002,fix c++ compilers that put the vtable at the beginning of structs,6897,data/crawl/squid/hunk_5504.cpp,,,data/crawl/squid/old_hunk_5504.cpp,data/crawl/squid/new_hunk_5504.cpp,5,5,"storeAppendPrintf(s, ""old_entry %p/%s\n"", e, e ? storeKeyText((cache_key const *)e->hash.key) : ""N/A"");","storeAppendPrintf(s, ""old_entry %p/%s\n"", e, e ? e->getMD5Text() : ""N/A"");","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""addVariable""]","[[""storeKeyText"", ""cache_key"", ""const"", ""*"", ""hash"", ""key""], [""getMD5Text""]]",[-6891533447135810742],7229,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6162.cpp,,,data/crawl/squid/old_hunk_6162.cpp,data/crawl/squid/new_hunk_6162.cpp,257,-1,"storeAppendPrintf(sentry, ""\t\tCurrent: "");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\t\\tCurrent""], []]",[-6528457113049910470],7228,"489 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b67e2c8c4da9890e0f3d27d501edf6a0c0fdf1c9,05 Feb 2003,"Summary: Merge from delay-class-4
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-19
     Document finished aspects of delay pools.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-18
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-17
     Fixs to handle HEAD changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-16
     Merge from head.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-15
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-14
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-13
     Separate out code for DelayBucket and DelayId.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-12
     More class split outs.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-11
     More class splitting

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-10
     Splitting classes out to one per file.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-9
     Starting consolidation of delay pools hierarchy.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-8
     Snapshot

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-7
     Finally got composite structure sorted - class one and two delay pools in it.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-6
     snapshotting more refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-5
     More refactoring - no functionality changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-4
     Another refactoring snapshot.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-3
     Snapshot of delay pools refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-2
     Refactor delay pools code to not cause globals recompiles on most changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.",12710,data/crawl/squid/hunk_5426.cpp,,,data/crawl/squid/old_hunk_5426.cpp,data/crawl/squid/new_hunk_5426.cpp,22,-1,"printf(""%d\n"", """", A->i);",,"[""removeLog""]","[[""printf"", ""%d\\n"", ""A"", ""i""], []]",[-13382357820073349692],7227,"50 days, 16:00:00"
https://github.com/squid-cache/squid/commit/5673c2e23845b9dca17b7c5b3812c29c8c390e13,15 Mar 2000,"DW:
 - Use new Logfile module for access,useragent,store logs.",265,data/crawl/squid/hunk_6067.cpp,,,data/crawl/squid/old_hunk_6067.cpp,data/crawl/squid/new_hunk_6067.cpp,-1,14,,"logfilePrintf(logfile, ""\n"");","[""addLog""]","[[], [""logfilePrintf"", ""logfile"", ""\\n""]]",[3058783768913786027],7226,"806 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,3,,"storeAppendPrintf(sentry, ""\n             OPS SUCCESS    FAIL\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\n"", ""OPS"", ""SUCCESS"", ""FAIL\\n""]]",[8741072292188538015],7225,"746 days, 8:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,637,,"printf (""i386-sequent-ptx\n"");","[""addLog""]","[[], [""printf"", ""i386"", ""sequent"", ""ptx\\n""]]",[-2966281485289467054],7224,"1385 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,635,,"printf (""i386-sequent-ptx1\n"");","[""addLog""]","[[], [""printf"", ""i386"", ""sequent"", ""ptx1\\n""]]",[-6392863029535456224],7223,"1385 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,584,,"printf (""arm-acorn-riscix"");","[""addLog""]","[[], [""printf"", ""arm"", ""acorn"", ""riscix""]]",[9551449641104062770],7222,"1385 days, 0:00:00"
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6244.cpp,,,data/crawl/squid/old_hunk_6244.cpp,data/crawl/squid/new_hunk_6244.cpp,172,-1,"storeAppendPrintf(sentry, ""   A = ALIVE\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""A"", ""ALIVE\\n""], []]",[-7650467745663906056],7221,"1510 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/hunk_5000.cpp,,,data/crawl/squid/old_hunk_5000.cpp,data/crawl/squid/new_hunk_5000.cpp,-1,3,,".Printf(""\r\n"");","[""addLog""]","[[], [""Printf"", ""\\r\\n""]]",[2075766014185147191],7220,0:00:00
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/hunk_4973.cpp,,,data/crawl/squid/old_hunk_4973.cpp,data/crawl/squid/new_hunk_4973.cpp,-1,14,,"str.Printf(""\r\n"");","[""addLog""]","[[], [""str"", ""Printf"", ""\\r\\n""]]",[1706590592177356461],7219,0:00:00
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4951.cpp,,,data/crawl/squid/old_hunk_4951.cpp,data/crawl/squid/new_hunk_4951.cpp,-1,347,,"httpHeaderPutStrf(&rep->header, type, ""Negotiate"");","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""type"", ""Negotiate""]]",[-7254889620896197845],7218,0:00:00
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4947.cpp,,,data/crawl/squid/old_hunk_4947.cpp,data/crawl/squid/new_hunk_4947.cpp,-1,256,,"printf(""TT %s\n"",c);","[""addLog""]","[[], [""printf"", ""TT"", ""%s\\n"", ""c""]]",[13397222896155443925],7217,0:00:00
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4947.cpp,,,data/crawl/squid/old_hunk_4947.cpp,data/crawl/squid/new_hunk_4947.cpp,-1,385,,"fprintf(stderr, ""FATAL, can't initialize SSPI, exiting.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""FATAL"", ""can"", ""t"", ""initialize"", ""SSPI"", ""exiting"", ""\\n""]]",[-17337122093854703499],7216,0:00:00
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6783.cpp,,,data/crawl/squid/old_hunk_6783.cpp,data/crawl/squid/new_hunk_6783.cpp,37,-1,"storeAppendPrintf(e,
	""\n""
	""Server-side persistent connection counts:\n""
	""\n""
	""\treq/\n""
	""\tconn      count\n""
	""\t----  ---------\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""\\n"", ""Server"", ""side"", ""persistent"", ""connection"", ""counts"", ""\\n"", ""\\n"", ""\\treq/\\n"", ""\\tconn"", ""count\\n"", ""\\t"", ""\\n""], []]",[-11180452350504215011],7215,"949 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6783.cpp,,,data/crawl/squid/old_hunk_6783.cpp,data/crawl/squid/new_hunk_6783.cpp,35,-1,"storeAppendPrintf(e, ""\t%4d  %9d\n"", i, client_pconn_hist[i]);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""\\t%4d"", ""%9d\\n"", ""i"", ""client_pconn_hist[i]""], []]",[-3068874400049008290],7214,"949 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,761,,"storeAppendPrintf(sentry, ""Histogram of events per incoming socket type\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Histogram"", ""of"", ""events"", ""per"", ""incoming"", ""socket"", ""type\\n""]]",[1151672113808383658],7213,"1379 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,758,,"storeAppendPrintf(sentry, ""Current incoming_http_interval: %d\n"",
	incoming_http_interval >> INCOMING_FACTOR);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Current"", ""incoming_http_interval"", ""%d\\n"", ""incoming_http_interval"", ""INCOMING_FACTOR""]]",[-4932119534106571314],7212,"1379 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ef523f990009da27ce7bbac6ceb4b96301d09eb9,16 Apr 1999,"comm_incoming crap for internal DNS

Semi-better retransmit algorithm.  Use nameserver % num_sends",145,data/crawl/squid/hunk_6137.cpp,,,data/crawl/squid/old_hunk_6137.cpp,data/crawl/squid/new_hunk_6137.cpp,-1,3,,"storeAppendPrintf(sentry, ""Current incoming_dns_interval: %d\n"",
	incoming_dns_interval >> INCOMING_FACTOR);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Current"", ""incoming_dns_interval"", ""%d\\n"", ""incoming_dns_interval"", ""INCOMING_FACTOR""]]",[1872844249140019602],7211,"1199 days, 16:00:00"
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,756,,"storeAppendPrintf(sentry, ""Current incoming_icp_interval: %d\n"",
	incoming_icp_interval >> INCOMING_FACTOR);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Current"", ""incoming_icp_interval"", ""%d\\n"", ""incoming_icp_interval"", ""INCOMING_FACTOR""]]",[-14564787219605550420],7210,"1379 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9c8434f6a8753d321762ff58685cb1ff0364b4a7,14 Sep 2006,"Windows port: split Windows service code into WinSvc.cc, allowing correct execution of make check",1963,data/crawl/squid/hunk_4751.cpp,,,data/crawl/squid/old_hunk_4751.cpp,data/crawl/squid/new_hunk_4751.cpp,748,-1,"fprintf(stderr, ""OpenSCManager failed\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""OpenSCManager"", ""failed\\n""], []]",[21828551817829994559],7209,0:00:00
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4923.cpp,,,data/crawl/squid/old_hunk_4923.cpp,data/crawl/squid/new_hunk_4923.cpp,-1,98,,stop(notifyIcap);,"[""addLog""]","[[], [""stop"", ""notifyIcap""]]",[448476161043210430],7208,"114 days, 16:00:00"
https://github.com/squid-cache/squid/commit/b7d249f9ddca7cfe73ac27d273901450e81baf31,02 Nov 2006,"Add support for wccpv2 mask assignment

Forwrd port of 2.6 changes.",535,data/crawl/squid/hunk_4717.cpp,,,data/crawl/squid/old_hunk_4717.cpp,data/crawl/squid/new_hunk_4717.cpp,-1,145,,"fatalf(""Unknown service hash method\n"");","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""service"", ""hash"", ""method\\n""]]",[16020496437618912398],7207,0:00:00
https://github.com/squid-cache/squid/commit/c99de60701b56be31c01be2045d204ed411e33ca,01 Nov 2006,"	- Many ICAP fixes from Alex Rousskov accumulated on the
	  sourceforge squid3-icap branch since 2006/10, including:

        - Polished ICAP service selection code and implemented bypass of
          optional services. The code implements icap_class
          configuration directive which is currently used as a ""set of
          interchangeable ICAP services"". Squid2 and current squid.conf
          may imply otherwise.

        - Support Transfer-* ICAP OPTIONS response header. If Squid
          knows that a service does not want the URL, Squid will not use
          the service, even if it is an essential service with
          bypass=0. Note that we may make this decision before we know
          what the service wants. Eventually, ACLs should initiate and
          wait for the OPTIONS transaction for yet-unprobed services.

        - When ICAP transactions fail to connect to the service many
          times, the service is suspended until the next OPTIONS
          update. The limit is currently hard-coded to 10. Suspended
          service is a down service and will be skipped by the ACL
          service selection algorithm.

        - Rewrote the code updating ICAP service options. We no longer
          mark the service being updated as ""down"". Only presence of
          valid and fresh options is important. We also try to update
          the options before they expire to avoid any service downtime
          or use of stale options.

        - Report interesting changes in the ICAP service state, some
          with debugging level one to alert the cache administrator.

        - When cloning a request during an ICAP 204 ""No Content"" REQMOD
          response, preserve the client address so that the rest of the
          code has access to it. This change appears to fix Squid Bug
          #1712.

        - After ICAP 100 Continue, expect new ICAP headers instead of
          HTTP headers. Reset ICAP message object to be ready to parse
          ICAP headers again. (Tsantilas Christos
          <chtsanti@users.sourceforge.net>)

        - The ieof HTTP chunk-extension was written after chunk-data
          instead of being written after the chunk-size. (Tsantilas
          Christos <chtsanti@users.sourceforge.net>)

        - Merged common code from the ICAPClientReqmodPrecache and
          ICAPClientReqmodPrecache classes into the newly added
          ICAPClientVector class.  The specific vectors do not have a
          common owner (yet?) because ServerStateData and
          ClientHttpRequest do not have a common base class. Thus,
          ICAPClientVector has to rely on its kids to communicate with
          their owners. However, at least 50% of the logic was common
          and has been moved. Eventually, we may want to create a
          simple ICAPOwner API that ServerStateData and
          ClientHttpRequest can implement and ICAPClientVector can rely
          on. This will make the code simpler and more efficient.  The
          big merge was motivated by a couple of bugs that were found
          in one vector class but that did not exist or behaved
          differently in the other vector, mostly likely due to natural
          diversion of used-to-be identical code.

        - Rewrote communication between a server-side ICAPClient*mod*
          vector and its owner.  When a server-side ICAPClient*mod*
          vector was notifying its owner of more adapted data, the
          owner could delete the vector (by calling icap->ownerAbort)
          if the store entry was not willing to accept the data.  The
          same deletion could happen when a vector was notifying the
          owner of a successful termination. In all those cases, the
          vector did not expect to be deleted and could continue to do
          something, causing segmentation faults.  Now, when more data
          is available, the vector calls its owner and checks the
          return value of the call. If it is false, the vector knows it
          has been deleted and quits. When vector terminates, it calls
          its owner and trusts the owner to always delete the vector.
          The ""check return value and quit"" design is not perfect, but
          we are paying the price for isolating the vectors from their
          owners while using direct calls between them (instead of
          MsgPipe or a similar less efficient indirect approach we use
          elsewhere).

        - Renamed doIcap to startIcap and moved more common code there.
          Changed its return type to bool. We now handle three cases
          when ICAP ACLs call back:  1) No service was selected
          (because there was no applicable service or because all
          applicable services were broken and optional). We proceed as
          if ICAP was not configured.  2) The selected essential
          service is broken. This is a fatal transaction error and we
          return an ""ICAP protocol error"" HTTP error response. We could
          proceed with the ICAP stuff, but it saves a lot of cycles to
          abort early.  3) The selected service is not broken. We
          proceed with the ICAP stuff.  The old code did not detect
          case #2, even though there was code to handle that case (with
          dangerous XXX suggestions that are now gone).  The code
          should probably be polished further to move common ftp/http
          logic from icapAclCheckDone()s into ServerStateData.

        - Make sure there is an accept callback when we are accepting.
          If there is no callback and we accept, we will silently leak
          the accepted FD.  When we are running out of FDs, there is
          often no accept callback.  The old code, when running out of
          FDs, would create lots of ""orphaned"" or ""forgotten"" FDs that
          will eventually get into a CLOSED_WAIT state and remain there
          until Squid quits.  The new code does not call accept() if
          there is no accept callback and does not register the accept
          FD for reading if the AcceptLimiter is deferring, because
          when the AcceptLimiter kicks in, it will register the accept
          FD for reading. There are most likely other places/cases
          where accept FD should not be registered for reading.

        - When an exception is caught, mark the ICAP connection as
          non-reusable so that it is not recycled while a write is
          pending but simply closed instead. Our write callback will
          still be called, unfortunately, because there is no way to
          clear the callback without invalidating its data (i.e., the
          transaction pointer).  This change prevents pconn.cc:253:
          ""!comm_has_incomplete_write(fd)"" assertion from firing when
          things go wrong (e.g., the ICAP server cannot be contacted to
          retrieve OPTIONS).  Not all exceptions caught by the ICAP
          xaction should lead to the ICAP connection termination, but
          it is very difficult if not impossible to reliably detect
          exceptional conditions when it is safe to reuse the ICAP
          connection, and it is probably not worth it anyway.

        - Added Tsantilas Christos <chtsanti@users.sourceforge.net>
          to CONTRIBUTORS for fixing ICAP bugs.

        - Polished debugging.",2091,data/crawl/squid/hunk_4722.cpp,,,data/crawl/squid/old_hunk_4722.cpp,data/crawl/squid/new_hunk_4722.cpp,95,-1,stop(notifyIcap);,,"[""removeLog""]","[[""stop"", ""notifyIcap""], []]",[-448476161043210430],7206,"52 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,546,,"fprintf(stderr, ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\tIf"", ""you"", ""need"", ""to"", ""bind"", ""as"", ""a"", ""user"", ""to"", ""perform"", ""searches"", ""then"", ""use"", ""the\\n\\t"", ""D"", ""binddn"", ""w"", ""bindpasswd"", ""or"", ""D"", ""binddn"", ""W"", ""secretfile"", ""options\\n\\n""]]",[-21067398988177175679],7205,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,544,,"fprintf(stderr, ""\t-S\t\t\t\t\tStrip NT domain from usernames\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""S\\t\\t\\t\\t\\tStrip"", ""NT"", ""domain"", ""from"", ""usernames\\n""]]",[5090686850103421743],7204,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,542,,"fprintf(stderr, ""\t-Z\t\t\t\t\tTLS encrypt the LDAP connection, requires\n\t\t\t\tLDAP version 3\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""Z\\t\\t\\t\\t\\tTLS"", ""encrypt"", ""the"", ""LDAP"", ""connection"", ""requires\\n\\t\\t\\t\\tLDAP"", ""version"", ""3\\n""]]",[-5060751713717657718],7203,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,541,,"fprintf(stderr, ""\t-v 2|3\t\t\t\t\tLDAP version\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""v"", ""2"", ""3\\t\\t\\t\\t\\tLDAP"", ""version\\n""]]",[-21145454339206748204],7202,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,539,,"fprintf(stderr, ""\t-a never|always|search|find\t\twhen to dereference aliases\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""a"", ""never"", ""always"", ""search"", ""find\\t\\twhen"", ""to"", ""dereference"", ""aliases\\n""]]",[-23105837796456109078],7201,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,538,,"fprintf(stderr, ""\t-R\t\t\t\t\tdo not follow referrals\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""R\\t\\t\\t\\t\\tdo"", ""not"", ""follow"", ""referrals\\n""]]",[-1894048416314063796],7200,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,537,,"fprintf(stderr, ""\t-t timelimit\t\t\t\tsearch time limit\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""t"", ""timelimit\\t\\t\\t\\tsearch"", ""time"", ""limit\\n""]]",[-11723405557014922537],7199,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,536,,"fprintf(stderr, ""\t-c timeout\t\t\t\tconnect timeout\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""c"", ""timeout\\t\\t\\t\\tconnect"", ""timeout\\n""]]",[2744873673402200451],7198,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,534,,"fprintf(stderr, ""\t-E sslcertpath\t\t\t\tenable LDAP over SSL\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""E"", ""sslcertpath\\t\\t\\t\\tenable"", ""LDAP"", ""over"", ""SSL\\n""]]",[-8592631049204160241],7197,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,532,,"fprintf(stderr, ""\t-P\t\t\t\t\tpersistent LDAP connection\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""P\\t\\t\\t\\t\\tpersistent"", ""LDAP"", ""connection\\n""]]",[-21091167032319512765],7196,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,531,,"fprintf(stderr, ""\t-p port\t\t\t\t\tLDAP server port (defaults to %d)\n"", LDAP_PORT);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""p"", ""port\\t\\t\\t\\t\\tLDAP"", ""server"", ""port"", ""defaults"", ""to"", ""%d"", ""\\n"", ""LDAP_PORT""]]",[-19321455758914240077],7195,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,530,,"fprintf(stderr, ""\t-h server\t\t\t\tLDAP server (defaults to localhost)\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""h"", ""server\\t\\t\\t\\tLDAP"", ""server"", ""defaults"", ""to"", ""localhost"", ""\\n""]]",[-9582311649862625147],7194,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,528,,"fprintf(stderr, ""\t-H URI\t\t\t\t\tLDAPURI (defaults to ldap://localhost)\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""H"", ""URI\\t\\t\\t\\t\\tLDAPURI"", ""defaults"", ""to"", ""ldap"", ""//localhost"", ""\\n""]]",[-10330614204544903234],7193,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,526,,"fprintf(stderr, ""\t-W secretfile\t\t\t\tread password for binddn from file secretfile\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""W"", ""secretfile\\t\\t\\t\\tread"", ""password"", ""for"", ""binddn"", ""from"", ""file"", ""secretfile\\n""]]",[-9878792280319460962],7192,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,525,,"fprintf(stderr, ""\t-w bindpasswd\t\t\t\tpassword for binddn\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""w"", ""bindpasswd\\t\\t\\t\\tpassword"", ""for"", ""binddn\\n""]]",[-12530415325592299573],7191,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,524,,"fprintf(stderr, ""\t-D binddn\t\t\t\tDN to bind as to perform searches\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""D"", ""binddn\\t\\t\\t\\tDN"", ""to"", ""bind"", ""as"", ""to"", ""perform"", ""searches\\n""]]",[-26923766882391008309],7190,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,523,,"fprintf(stderr, ""\t-s base|one|sub\t\t\t\tsearch scope\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""s"", ""base"", ""one"", ""sub\\t\\t\\t\\tsearch"", ""scope\\n""]]",[-8879583864574169648],7189,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,522,,"fprintf(stderr, ""\t-u attribute\t\t\t\tattribute to use in combination with the basedn to create the user DN\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""u"", ""attribute\\t\\t\\t\\tattribute"", ""to"", ""use"", ""in"", ""combination"", ""with"", ""the"", ""basedn"", ""to"", ""create"", ""the"", ""user"", ""DN\\n""]]",[-20820827593741061351],7188,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,521,,"fprintf(stderr, ""\t-F filter\t\t\t\tuser search filter pattern. %%s = login\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""F"", ""filter\\t\\t\\t\\tuser"", ""search"", ""filter"", ""pattern"", ""%%s"", ""login\\n""]]",[-23098753190322380741],7187,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,520,,"fprintf(stderr, ""\t-e Encrypted passwords(REQUIRED)\tPassword are stored encrypted using HHA1\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""e"", ""Encrypted"", ""passwords"", ""REQUIRED"", ""\\tPassword"", ""are"", ""stored"", ""encrypted"", ""using"", ""HHA1\\n""]]",[-10977248088103819280],7186,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,519,,"fprintf(stderr, ""\t-b basedn (REQUIRED)\t\t\tbase dn under where to search for users\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""b"", ""basedn"", ""REQUIRED"", ""\\t\\t\\tbase"", ""dn"", ""under"", ""where"", ""to"", ""search"", ""for"", ""users\\n""]]",[-6268878712008716629],7185,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,518,,"fprintf(stderr, ""\t-l password realm delimiter(REQUIRED)\tCharater(s) that devides the password attribute\n\t\t\t\t\t\tin realm and password tokens, default ':' realm:password\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""l"", ""password"", ""realm"", ""delimiter"", ""REQUIRED"", ""\\tCharater"", ""s"", ""that"", ""devides"", ""the"", ""password"", ""attribute\\n\\t\\t\\t\\t\\t\\tin"", ""realm"", ""and"", ""password"", ""tokens"", ""default"", ""realm"", ""password\\n""]]",[-51223121887047633760],7184,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,517,,"fprintf(stderr, ""\t-A password attribute(REQUIRED)\t\tUser attribute that contains the password\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""A"", ""password"", ""attribute"", ""REQUIRED"", ""\\t\\tUser"", ""attribute"", ""that"", ""contains"", ""the"", ""password\\n""]]",[-44745532800568688908],7183,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,516,,"fprintf(stderr, ""Usage: "" PROGRAM_NAME "" -b basedn -f filter [options] ldap_server_name\n\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Usage"", ""PROGRAM_NAME"", ""b"", ""basedn"", ""f"", ""filter"", ""[options]"", ""ldap_server_name\\n\\n""]]",[67020336773252265],7182,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,492,,"fprintf(stderr, PROGRAM_NAME "" ERROR: Unknown command line option '%c'\n"", option);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""Unknown"", ""command"", ""line"", ""option"", ""%c"", ""\\n"", ""option""]]",[4645213619568394786],7181,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,439,,"fprintf(stderr, PROGRAM_NAME "" ERROR: Unknown alias dereference method '%s'\n"", value);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""Unknown"", ""alias"", ""dereference"", ""method"", ""%s"", ""\\n"", ""value""]]",[-20888195001474585535],7180,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,409,,"fprintf(stderr, PROGRAM_NAME "" ERROR: Unknown search scope '%s'\n"", value);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""Unknown"", ""search"", ""scope"", ""%s"", ""\\n"", ""value""]]",[-28603462415344214557],7179,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,332,,"fprintf(stderr, ""Connected OK\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Connected"", ""OK\\n""]]",[-22669490430663158658],7178,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,326,,"fprintf(stderr, PROGRAM_NAME "" WARNING, could not bind to binddn '%s'\n"", ldap_err2string(rc));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""could"", ""not"", ""bind"", ""to"", ""binddn"", ""%s"", ""\\n"", ""ldap_err2string"", ""rc""]]",[-2103980923165096312],7177,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,250,,"fprintf(stderr, PROGRAM_NAME "" WARNING, LDAP error '%s'\n"", ldap_err2string(rc));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""LDAP"", ""error"", ""%s"", ""\\n"", ""ldap_err2string"", ""rc""]]",[-6417957942758496167],7176,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,243,,"printf(""password: %s\n"", password);","[""addLog""]","[[], [""printf"", ""password"", ""%s\\n"", ""password""]]",[-1032207333545575809],7175,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,225,,"printf(""No attribute value found\n"");","[""addLog""]","[[], [""printf"", ""No"", ""attribute"", ""value"", ""found\\n""]]",[-419288586331188282],7174,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,212,,"fprintf(stderr, ""searchbase '%s'\n"", searchbase);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""searchbase"", ""%s"", ""\\n"", ""searchbase""]]",[-1316827970557873006],7173,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,193,,"fprintf(stderr, PROGRAM_NAME "" WARNING, LDAP search error, trying to recover'%s'\n"", ldap_err2string(rc));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""LDAP"", ""search"", ""error"", ""trying"", ""to"", ""recover"", ""%s"", ""\\n"", ""ldap_err2string"", ""rc""]]",[-1013475353818831774],7172,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca6965d0ee1b85378f52c072efb315cc5764e6be,19 May 2005,Imported LDAP based Digest hash helper,722,data/crawl/squid/hunk_5035.cpp,,,data/crawl/squid/old_hunk_5035.cpp,data/crawl/squid/new_hunk_5035.cpp,-1,176,,"fprintf(stderr, ""user filter '%s', searchbase '%s'\n"", filter, searchbase);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""user"", ""filter"", ""%s"", ""searchbase"", ""%s"", ""\\n"", ""filter"", ""searchbase""]]",[14902606342050671269],7171,"330 days, 0:00:00"
https://github.com/squid-cache/squid/commit/0ff1980a4e05750076c5c5d31d6daa5c2b13a1e5,01 Apr 2003,"Summary: Merge in digest helper refactoring.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-6
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-5
     Tweak digest helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-4
     Factor digest password helper for easy extension.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-3
     merge from HEAD.",426,data/crawl/squid/hunk_5267.cpp,,,data/crawl/squid/old_hunk_5267.cpp,data/crawl/squid/new_hunk_5267.cpp,-1,34,,"printf(""%s\n"", requestData->HHA1);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""requestData"", ""HHA1""]]",[12316829383075309951],7170,"849 days, 8:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,317,,"fprintf(stdout, ""NA Invalid request\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""NA"", ""Invalid"", ""request\\n""]]",[-14934979249588640222],7169,0:00:00
https://github.com/squid-cache/squid/commit/ee1394034ae6d0c148944ba013ce2d485b2ea57b,17 Aug 2007,"64-bit disk I/O, using off_t / size_t where appropriate",98,data/crawl/squid/hunk_4487.cpp,,,data/crawl/squid/old_hunk_4487.cpp,data/crawl/squid/new_hunk_4487.cpp,3,3,"fprintf(stderr, ""%d FD %d, offset %d: "", (int) mypid, fs->fd, r->offset);","fprintf(stderr, ""%d FD %d, offset %""PRId64"": "", (int) mypid, fs->fd, (int64_t)r->offset);","[""updateContent"", ""addContent"", ""addVariable""]","[[""%d""], [""%"", ""PRId64"", ""int64_t""]]",[13217465345508381607],7168,0:00:00
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/hunk_4421.cpp,,,data/crawl/squid/old_hunk_4421.cpp,data/crawl/squid/new_hunk_4421.cpp,10,10,"mb.Printf(""%s"", inet_ntoa(err->src_addr));","mb.Printf(""%s"", err->src_addr.NtoA(ntoabuf,MAX_IPSTRLEN));","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""inet_ntoa""], [""NtoA"", ""ntoabuf"", ""MAX_IPSTRLEN""]]",[-13132999907163937786],7167,0:00:00
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/hunk_4409.cpp,,,data/crawl/squid/old_hunk_4409.cpp,data/crawl/squid/new_hunk_4409.cpp,12,13,"mb.Printf(""/%s"", inet_ntoa(ip->mask));","mb.Printf(""/%s"", ip->mask.NtoA(tmpbuf,MAX_IPSTRLEN));","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""inet_ntoa""], [""NtoA"", ""tmpbuf"", ""MAX_IPSTRLEN""]]",[-11073456879402284372],7166,0:00:00
https://github.com/squid-cache/squid/commit/0f5607d98c35b60269ebe9617afdb0b579320950,13 Feb 1998,"added ""counters"" cachemgr operation",18,data/crawl/squid/hunk_6810.cpp,,,data/crawl/squid/old_hunk_6810.cpp,data/crawl/squid/new_hunk_6810.cpp,17,-1,"storeAppendPrintf(e, ""\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""\\n""], []]",[-5193143777301589627],7165,"1217 days, 0:00:00"
https://github.com/squid-cache/squid/commit/dc56a9b1420c7f77b90b5abf111d6cb98cd0d7a1,13 Feb 2008,"Merging async-call branch changes to HEAD:

Async-call work replaces event-based asynchronous calls with
stand-alone implementation. The common async call API allows Squid
core do call, debug, and troubleshoot all callback handlers in a
uniform way.

An async ""job"" API is introduced to manage independent logical threads
or work such as protocol transaction handlers on client, server, and
ICAP sides. These jobs should communicate with each other using async
calls to minimize dependencies and avoid reentrant callback loops.

These changes will eventually improve overall code quality, debugging
quality, and Squid robustness.

Below you will find log messages from the async-call branch that are
relevant to the file(s) being committed.

        Convert the comm_* calls to use CommCalls.

        Use the AsyncJob::deleteThis method as ""delete this""
        replacement instead of the previously commited block ""if
        (inCall) musStop(...) else delete this""

        ICAPInitiate::sendAnswer dialers take care of message locking
        now.",611,data/crawl/squid/hunk_4372.cpp,,,data/crawl/squid/old_hunk_4372.cpp,data/crawl/squid/new_hunk_4372.cpp,22,14,"ftpState->abortTransaction(""entry aborted when accepting data conn"");","abortTransaction(""entry aborted when accepting data conn"");","[""addLog"", ""removeLog""]","[[""ftpState""], []]",[-5830271478841260977],7164,0:00:00
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,1226,,"printf (""vax-dec-bsd4.3reno\n"");","[""addLog""]","[[], [""printf"", ""vax"", ""dec"", ""bsd4"", ""3reno\\n""]]",[6715825018866626433],7163,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,1223,,"printf (""vax-dec-bsd4.3\n"");","[""addLog""]","[[], [""printf"", ""vax"", ""dec"", ""bsd4"", ""3\\n""]]",[795344038673301191],7162,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,1174,,"printf (""%s-next-openstep%d\n"", __ARCHITECTURE__, version);","[""addLog""]","[[], [""printf"", ""%s"", ""next"", ""openstep%d\\n"", ""__ARCHITECTURE__"", ""version""]]",[1854032569697081307],7161,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,594,,"puts (""hppa2.0n"");","[""addLog""]","[[], [""puts"", ""hppa2"", ""0n""]]",[2435868555031571550],7160,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,593,,"puts (""hppa2.0w"");","[""addLog""]","[[], [""puts"", ""hppa2"", ""0w""]]",[2435868555031571527],7159,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5269.cpp,,,data/crawl/squid/old_hunk_5269.cpp,data/crawl/squid/new_hunk_5269.cpp,-1,588,,"puts (""hppa1.1"");","[""addLog""]","[[], [""puts"", ""hppa1"", ""1""]]",[2429724524391534869],7158,"790 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1323,-1,"printf (""i860-alliant-bsd\n"");",,"[""removeLog""]","[[""printf"", ""i860"", ""alliant"", ""bsd\\n""], []]",[-15258442327341906774],7157,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1318,-1,"printf (""vax-dec-ultrix\n"");",,"[""removeLog""]","[[""printf"", ""vax"", ""dec"", ""ultrix\\n""], []]",[-3771227756932470676],7156,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1309,-1,"printf (""vax-dec-bsd4.3reno\n"");",,"[""removeLog""]","[[""printf"", ""vax"", ""dec"", ""bsd4"", ""3reno\\n""], []]",[-6715825018866626433],7155,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1306,-1,"printf (""vax-dec-bsd4.3\n"");",,"[""removeLog""]","[[""printf"", ""vax"", ""dec"", ""bsd4"", ""3\\n""], []]",[-795344038673301191],7154,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1297,-1,"printf (""i386-sequent-ptx\n"");",,"[""removeLog""]","[[""printf"", ""i386"", ""sequent"", ""ptx\\n""], []]",[2966281485289467054],7153,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1295,-1,"printf (""i386-sequent-ptx1\n"");",,"[""removeLog""]","[[""printf"", ""i386"", ""sequent"", ""ptx1\\n""], []]",[6392863029535456224],7152,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1292,-1,"printf (""i386-sequent-ptx2\n"");",,"[""removeLog""]","[[""printf"", ""i386"", ""sequent"", ""ptx2\\n""], []]",[6392862029409455855],7151,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1282,-1,"printf (""ns32k-sequent-dynix\n"");",,"[""removeLog""]","[[""printf"", ""ns32k"", ""sequent"", ""dynix\\n""], []]",[-17209887179899307144],7150,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1279,-1,"printf (""i386-sequent-dynix\n"");",,"[""removeLog""]","[[""printf"", ""i386"", ""sequent"", ""dynix\\n""], []]",[-3173292423511830362],7149,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1274,-1,"printf (""i386-pc-bsd\n"");",,"[""removeLog""]","[[""printf"", ""i386"", ""pc"", ""bsd\\n""], []]",[-6236355447578103142],7148,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1268,-1,"printf (""ns32k-encore-bsd\n"");",,"[""removeLog""]","[[""printf"", ""ns32k"", ""encore"", ""bsd\\n""], []]",[-24666701257148115169],7147,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1266,-1,"printf (""ns32k-encore-mach\n"");",,"[""removeLog""]","[[""printf"", ""ns32k"", ""encore"", ""mach\\n""], []]",[-20799389516449904868],7146,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1263,-1,"printf (""ns32k-encore-sysv\n"");",,"[""removeLog""]","[[""printf"", ""ns32k"", ""encore"", ""sysv\\n""], []]",[-27225681863095121744],7145,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1257,-1,"printf (""%s-next-openstep%d\n"", __ARCHITECTURE__, version);",,"[""removeLog""]","[[""printf"", ""%s"", ""next"", ""openstep%d\\n"", ""__ARCHITECTURE__"", ""version""], []]",[-1854032569697081307],7144,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1255,-1,"printf (""%s-next-nextstep%d\n"", __ARCHITECTURE__, version);",,"[""removeLog""]","[[""printf"", ""%s"", ""next"", ""nextstep%d\\n"", ""__ARCHITECTURE__"", ""version""], []]",[-8971082284214367716],7143,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1245,-1,"printf (""m68k-hp-bsd\n"");",,"[""removeLog""]","[[""printf"", ""m68k"", ""hp"", ""bsd\\n""], []]",[-4406936890319637595],7142,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1241,-1,"printf (""arm-acorn-riscix"");",,"[""removeLog""]","[[""printf"", ""arm"", ""acorn"", ""riscix""], []]",[-9551449641104062770],7141,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1230,-1,"printf (""m68k-sony-newsos%s\n"",
#ifdef NEWSOS4
          ""4""
#else
	  """"
#endif
         );",,"[""removeLog""]","[[""printf"", ""m68k"", ""sony"", ""newsos%s\\n"", ""ifdef"", ""NEWSOS4"", ""4"", ""else"", ""endif""], []]",[11037806279510753175],7140,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,1227,-1,exit (0);,,"[""removeLog""]","[[""exit"", ""0""], []]",[4664224508366039323],7139,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,667,-1,"puts (""unknown-hitachi-hiuxwe2"");",,"[""removeLog""]","[[""puts"", ""unknown"", ""hitachi"", ""hiuxwe2""], []]",[-16275653397761100143],7138,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,666,-1,"puts (""m68k-hitachi-hiuxwe2"");",,"[""removeLog""]","[[""puts"", ""m68k"", ""hitachi"", ""hiuxwe2""], []]",[-12535257479151834420],7137,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,662,-1,"puts (""hppa-hitachi-hiuxwe2"");",,"[""removeLog""]","[[""puts"", ""hppa"", ""hitachi"", ""hiuxwe2""], []]",[-28655898973806569187],7136,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,661,-1,"puts (""hppa2.0-hitachi-hiuxwe2"");",,"[""removeLog""]","[[""puts"", ""hppa2"", ""0"", ""hitachi"", ""hiuxwe2""], []]",[-19143513846723492019],7135,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,660,-1,"puts (""hppa1.1-hitachi-hiuxwe2"");",,"[""removeLog""]","[[""puts"", ""hppa1"", ""1"", ""hitachi"", ""hiuxwe2""], []]",[-19143513846851492405],7134,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,659,-1,"puts (""hppa1.0-hitachi-hiuxwe2"");",,"[""removeLog""]","[[""puts"", ""hppa1"", ""0"", ""hitachi"", ""hiuxwe2""], []]",[-19143513846723492022],7133,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,612,-1,"puts (""hppa2.0n"");",,"[""removeLog""]","[[""puts"", ""hppa2"", ""0n""], []]",[-2435868555031571550],7132,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,611,-1,"puts (""hppa2.0w"");",,"[""removeLog""]","[[""puts"", ""hppa2"", ""0w""], []]",[-2435868555031571527],7131,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,606,-1,"puts (""hppa1.1"");",,"[""removeLog""]","[[""puts"", ""hppa1"", ""1""], []]",[-2429724524391534869],7130,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,521,-1,"puts(""powerpc-ibm-aix3.2.5"");",,"[""removeLog""]","[[""puts"", ""powerpc"", ""ibm"", ""aix3"", ""2"", ""5""], []]",[2767682009957926458],7129,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,433,-1,"printf (""mips-mips-riscos%sbsd\n"", argv[1]);",,"[""removeLog""]","[[""printf"", ""mips"", ""mips"", ""riscos%sbsd\\n"", ""argv[1]""], []]",[12615113043110249714],7128,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,430,-1,"printf (""mips-mips-riscos%ssvr4\n"", argv[1]);",,"[""removeLog""]","[[""printf"", ""mips"", ""mips"", ""riscos%ssvr4\\n"", ""argv[1]""], []]",[6627189546977484297],7127,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/abc26e5b99f550ced93036b885c64aa86b561b8c,17 Apr 2007,Bootstrapped,105872,data/crawl/squid/hunk_4657.cpp,,,data/crawl/squid/old_hunk_4657.cpp,data/crawl/squid/new_hunk_4657.cpp,427,-1,"printf (""mips-mips-riscos%ssysv\n"", argv[1]);",,"[""removeLog""]","[[""printf"", ""mips"", ""mips"", ""riscos%ssysv\\n"", ""argv[1]""], []]",[8018455546522590639],7126,"234 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7dbca7a4b0bf79fe0d6575e03fd02b774d953de4,02 Jul 2008,"Cleanup: Drop appname and full_appname_string constant globals

appname array only ever held a duplicate of ""squid""
      - calling it APP_SHORTNAME now instead of a global

full_appname_string only ever held the catenation VERSION""/""PACKAGE macros
      - calling it APP_FULLNAME now instead of a global",78,data/crawl/squid/hunk_4282.cpp,,,data/crawl/squid/old_hunk_4282.cpp,data/crawl/squid/new_hunk_4282.cpp,3,3,"fprintf(stderr, ""%s: ERROR: Could not read pid file\n"", appname);","fprintf(stderr, APP_SHORTNAME "": ERROR: Could not read pid file\n"");","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""appname""], [""APP_SHORTNAME""]]",[4779406518195074565],7125,0:00:00
https://github.com/squid-cache/squid/commit/c70281f8bdba2a5f525ddea764667975bbd79eb3,22 Jul 2008,"Cleanups: shuffle ErrorState functions into methods.

No other changes than namespace moves.",228,data/crawl/squid/hunk_4249.cpp,,,data/crawl/squid/old_hunk_4249.cpp,data/crawl/squid/new_hunk_4249.cpp,4,4,"mb.Printf(""%d"", (int) r->port);","mb.Printf(""%d"", (int) request->port);","[""updateVariable""]","[[""r""], [""request""]]",[-1906760029003681671],7124,0:00:00
https://github.com/squid-cache/squid/commit/82ec8dfcc2a5221a91598446aad95a4c412fc3c0,11 Sep 2008,"Cleaned up Comm: comm_close, comm_read_cancel, half-closed monitors,
leaks.

1) Comm_close now implements the following API:

  Comm_close does not close the descriptor but initiates the following
  closing sequence:

      1) The descriptor is placed in a ""closing"" state.
      2) The registered read, write, and accept callbacks (if any) are
         scheduled (in an unspecified order).
      3) The close callbacks are scheduled (in an unspecified order).
      4) A call to the internal descriptor closing handler is
         scheduled.

  Details of the above steps are being documented separately and will
  become a part of Comm API documentation.

  Since all notifications are asynchronous, it is possible for a read or
  write notification that was scheduled before comm_close was called to
  arrive at its destination after comm_close was called.  Such
  notification will arrive with COMM_ERR_CLOSING flag even though that
  flag was not set at the time of the I/O (and the I/O may have been
  successful). CommIoCbParams::syncWithComm is used for this.  The
  credit for this trick goes to Christos Tsantilas.

  Removed fde.flags.closing_ flag as unused.


2) Removed most of the half-closed monitoring code. Old code scheduled
   monitoring reads every main loop iteration, I think. It is possible
   that the assumption was that the handler will be activated and
   cleared once per iteration so that the new read can be scheduled. The
   design could result in conflicts between two monitoring reads and
   possibly between a monitoring read and an active read. There were
   also problems with handling closing descriptors.

   I have removed the loop, AbortChecker, and the associated splay
   tree). When user code marks the descriptor as half-closed, Comm now
   simply schedules a monitoring read callback.  If the user needs to
   check whether the descriptor was marked, Comm checks whether the
   callback is present.  If a user schedules a read when there is
   already a monitoring callback, the monitoring callback is removed.

   Renamed user-facing monitoring functions but left compatibility
   wrappers in place to minimize user code changes, for now.

   It is possible that the whole half-closed monitoring code will be
   eventually deleted. The above changes are meant to preserve the
   intended functionality (but without coredumps) while the decision is
   being made.

3) Removed _SQUID_LINUX_-only code that would avoid addrinfo destruction
   on connect ""errors"".  Squid seems to be working fine without this
   code. With this code, we leak memory on many connect requests because
   of EINPROGRESS. More work is probably needed to reproduce and fix the
   true cause of the memory corruption observed earlier. Removing the
   workaround will allow us to get more bug reports if the problem is
   still there.",341,data/crawl/squid/hunk_4223.cpp,,,data/crawl/squid/old_hunk_4223.cpp,data/crawl/squid/new_hunk_4223.cpp,11,9,"fatalf (""comm_write: fd %d: pending callback!\n"", fd);",assert(!ccb->active());,"[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""fatalf"", ""comm_write"", ""fd"", ""%d"", ""pending"", ""callback"", ""\\n"", ""fd""], [""assert"", ""ccb"", ""active""]]",[-2313291948716450097],7123,16:00:00
https://github.com/squid-cache/squid/commit/4d0854d44f00362bffe01e7e6d79aae7a9d24a3b,27 Sep 2008,"Use message representatives to store virgin and adapted messages.

Migrating to a model where all message changes are done via transaction,
not the message itself. A message cannot handle many changes on its own
because it is not a job, and placing some changes in MessageRep and some
in XactionRep results in messy code.

Polished body handling. Needs more work.

Added satus reporting. Needs more work.",301,data/crawl/squid/hunk_4200.cpp,,,data/crawl/squid/old_hunk_4200.cpp,data/crawl/squid/new_hunk_4200.cpp,-1,24,,"buf.Printf("" ecapx%d]"", id);","[""addLog""]","[[], [""buf"", ""Printf"", ""ecapx%d]"", ""id""]]",[2386550613750857899],7122,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/0ae3294ae95165b4e489b19e9dd9d2e7a3e477a8,15 Sep 2008,Compile errors,12,data/crawl/squid/hunk_4214.cpp,,,data/crawl/squid/old_hunk_4214.cpp,data/crawl/squid/new_hunk_4214.cpp,-1,9,,"error_stylesheet.Printf(""%s"",temp);","[""addLog""]","[[], [""error_stylesheet"", ""Printf"", ""%s"", ""temp""]]",[3209358912624498704],7121,"16 days, 16:00:00"
https://github.com/squid-cache/squid/commit/d20ce97d2485243522542bcd8adb52839a3e8b54,02 Aug 2009,Cut away the deferred helper state,267,data/crawl/squid/hunk_3693.cpp,,,data/crawl/squid/old_hunk_3693.cpp,data/crawl/squid/new_hunk_3693.cpp,26,-1,"fatal(""StatefulHandleRead: Callback routine attempted to reserve a stateful helper with deferred requests. This can lead to deadlock.\n"");",,"[""removeLog""]","[[""fatal"", ""StatefulHandleRead"", ""Callback"", ""routine"", ""attempted"", ""to"", ""reserve"", ""a"", ""stateful"", ""helper"", ""with"", ""deferred"", ""requests"", ""This"", ""can"", ""lead"", ""to"", ""deadlock"", ""\\n""], []]",[-1031818230852830416],7120,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5234.cpp,,,data/crawl/squid/old_hunk_5234.cpp,data/crawl/squid/new_hunk_5234.cpp,-1,110,,"storeAppendPrintf(entry, ""none"");","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""none""]]",[-253675936071323782],7119,"1483 days, 8:00:00"
https://github.com/squid-cache/squid/commit/20e869bf11fba5e7b98c074d91b1b76a37ddc153,19 Mar 2005,"Bug #1258: LDAP helpers fails to compile with SUN LDAP SDK

Forward port of 2.5 patch with addition of MinGW support.",75,data/crawl/squid/hunk_5069.cpp,,,data/crawl/squid/old_hunk_5069.cpp,data/crawl/squid/new_hunk_5069.cpp,-1,18,,"fprintf(stderr, ""TLS requires LDAP version 3\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""TLS"", ""requires"", ""LDAP"", ""version"", ""3\\n""]]",[-15385751882136328078],7118,"544 days, 8:00:00"
https://github.com/squid-cache/squid/commit/a9925b40bf8179ee4468c997960413a6d510abf5,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,903,data/crawl/squid/hunk_4836.cpp,,,data/crawl/squid/old_hunk_4836.cpp,data/crawl/squid/new_hunk_4836.cpp,-1,3,,"reply->header.putStr(HDR_CONTENT_ENCODING, mime_enc);","[""addLog""]","[[], [""reply"", ""header"", ""putStr"", ""HDR_CONTENT_ENCODING"", ""mime_enc""]]",[-13730523031883377103],7117,"822 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,548,-1,"fprintf(stdout, ""BH Not enough memory\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""Not"", ""enough"", ""memory\\n""], []]",[5566043686881520900],7116,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,547,-1,"fprintf(stderr, ""%s| %s: Not enough memory\n"", LogTime(), PROGRAM);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Not"", ""enough"", ""memory\\n"", ""LogTime"", ""PROGRAM""], []]",[2312750529207102588],7115,0:00:00
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4185.cpp,,,data/crawl/squid/old_hunk_4185.cpp,data/crawl/squid/new_hunk_4185.cpp,-1,255,,"fprintf(stdout,""Token: %s\n"",Token?Token:""NULL"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""Token"", ""%s\\n"", ""Token"", ""Token"", ""NULL""]]",[10114567155438669502],7114,"133 days, 16:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4185.cpp,,,data/crawl/squid/old_hunk_4185.cpp,data/crawl/squid/new_hunk_4185.cpp,-1,251,,"fprintf(stderr, ""%s| %s: Error: No proxy server name given\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Error"", ""No"", ""proxy"", ""server"", ""name"", ""given\\n"", ""LogTime"", ""PROGRAM""]]",[-3993605086623310008],7113,"133 days, 16:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4185.cpp,,,data/crawl/squid/old_hunk_4185.cpp,data/crawl/squid/new_hunk_4185.cpp,-1,195,,"fprintf(stderr, ""%s| %s: Error: No proxy server name\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Error"", ""No"", ""proxy"", ""server"", ""name\\n"", ""LogTime"", ""PROGRAM""]]",[-628383695844682266],7112,"133 days, 16:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4180.cpp,,,data/crawl/squid/old_hunk_4180.cpp,data/crawl/squid/new_hunk_4180.cpp,-1,14,,"fprintf(stderr, ""%s| %s: Token is possibly a GSSAPI token\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Token"", ""is"", ""possibly"", ""a"", ""GSSAPI"", ""token\\n"", ""LogTime"", ""PROGRAM""]]",[-10652912587544659733],7111,"133 days, 16:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4179.cpp,,,data/crawl/squid/old_hunk_4179.cpp,data/crawl/squid/new_hunk_4179.cpp,-1,9,,"fprintf(stderr, ""%s| %s: Decode '%s' (decoded length: %d).\n"", LogTime(), PROGRAM, buf+3,(int)input_token.length);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Decode"", ""%s"", ""decoded"", ""length"", ""%d"", ""\\n"", ""LogTime"", ""PROGRAM"", ""buf"", ""3"", ""int"", ""input_token"", ""length""]]",[-9209981235340167470],7110,"133 days, 16:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,-1,16,,"fprintf(stderr, ""default SPN is HTTP/fqdn@DEFAULT_REALM\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""default"", ""SPN"", ""is"", ""HTTP/fqdn"", ""DEFAULT_REALM\\n""]]",[-16001149151896106589],7109,"133 days, 16:00:00"
https://github.com/squid-cache/squid/commit/b0365bd9f05a30d13c6ee3dadb3011b075ebcba0,18 Nov 2009,Fixed some cases of variable shadowing,118,data/crawl/squid/hunk_3519.cpp,,,data/crawl/squid/old_hunk_3519.cpp,data/crawl/squid/new_hunk_3519.cpp,7,7,"finalizeMsg(""ERROR: Unknown adaptation name"", sid, true);","finalizeMsg(""ERROR: Unknown adaptation name"", serviceId, true);","[""updateVariable""]","[[""sid""], [""serviceId""]]",[4276942373760829436],7108,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,426,-1,"fprintf(stdout, ""BH received type %d NTLM token\n"",(int) *((unsigned char *)input_token.value + sizeof ntlmProtocol));",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""received"", ""type"", ""%d"", ""NTLM"", ""token\\n"", ""int"", ""*"", ""unsigned"", ""char"", ""*"", ""input_token"", ""value"", ""sizeof"", ""ntlmProtocol""], []]",[33580115765483002823],7107,"21 days, 16:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,425,-1,"fprintf(stderr, ""%s| %s: received type %d NTLM token\n"", LogTime(), PROGRAM, (int) *((unsigned char *)input_token.value + sizeof ntlmProtocol));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""received"", ""type"", ""%d"", ""NTLM"", ""token\\n"", ""LogTime"", ""PROGRAM"", ""int"", ""*"", ""unsigned"", ""char"", ""*"", ""input_token"", ""value"", ""sizeof"", ""ntlmProtocol""], []]",[30326822607808584511],7106,"21 days, 16:00:00"
https://github.com/squid-cache/squid/commit/b7ac5457b2c07bf13d3123a4035d22f6c79ce37e,17 Apr 2010,"SourceLayout: Add Ip namespace for internal libip

IpAddress is now Ip::Address, IpInterceptor is now Ip::Interceptor, etc.

* Also detaches QosConfig from the global config structures.
  Clearing up several of the dependency chains to libip",1407,data/crawl/squid/hunk_3401.cpp,,,data/crawl/squid/old_hunk_3401.cpp,data/crawl/squid/new_hunk_3401.cpp,3,3,"IpInterceptor.StopTransparency(""Error enabling needed capabilities."");","Ip::Interceptor.StopTransparency(""Error enabling needed capabilities."");","[""addLog"", ""updateLog""]","[[""IpInterceptor""], [""Ip"", ""Interceptor""]]",[-942555901688474914],7105,0:00:00
https://github.com/squid-cache/squid/commit/54e8823bf16f1310bcf26d4f5789d4ffc1fc62be,30 Apr 2010,Naming upgrade of digest_pw_auth (now digest_file_auth),206,data/crawl/squid/hunk_3388.cpp,,,data/crawl/squid/old_hunk_3388.cpp,data/crawl/squid/new_hunk_3388.cpp,3,3,"fprintf(stderr, ""Usage: digest_pw_auth [OPTIONS] <passwordfile>\n"");","fprintf(stderr, ""Usage: digest_file_auth [OPTIONS] <passwordfile>\n"");","[""updateContent""]","[[""digest_pw_auth""], [""digest_file_auth""]]",[17608948659245283803],7104,0:00:00
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3344.cpp,,,data/crawl/squid/old_hunk_3344.cpp,data/crawl/squid/new_hunk_3344.cpp,117,-1,auth_user_request->denyMessage(blob);,,"[""removeLog""]","[[""auth_user_request"", ""denyMessage"", ""blob""], []]",[-4613437229150417116],7103,0:00:00
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3286.cpp,,,data/crawl/squid/old_hunk_3286.cpp,data/crawl/squid/new_hunk_3286.cpp,12,11,"fprintf( stderr, ""authenticator: Unexpected input '%s'\n"", line );","debug(""ERROR: %s: Unexpected input '%s'\n"", argv[0], line);","[""moveContent"", ""updateLog"", ""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""stderr"", ""authenticator""], [""debug"", ""ERROR"", ""%s"", ""argv[0]""]]",[21528577501340763098],7102,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5898.cpp,,,data/crawl/squid/old_hunk_5898.cpp,data/crawl/squid/new_hunk_5898.cpp,-1,171,,"fprintf(stderr, ""No auth at all. Returning no-auth\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""No"", ""auth"", ""at"", ""all"", ""Returning"", ""no"", ""auth\\n""]]",[-15157065372892297358],7101,"1261 days, 8:00:00"
https://github.com/squid-cache/squid/commit/15df8349237e9eef90b030838021ad89712bf8ea,23 Nov 1997,"Move *ConnectionOpen() functionality to client_side.c and icp_v2.c.
trying to make it so HUP doesn't require closing all the connections",205,data/crawl/squid/hunk_6917.cpp,,,data/crawl/squid/old_hunk_6917.cpp,data/crawl/squid/new_hunk_6917.cpp,-1,26,,"fatal(""Cannot open ICP Port"");","[""addLog""]","[[], [""fatal"", ""Cannot"", ""open"", ""ICP"", ""Port""]]",[-9481987995531124990],7100,"3065 days, 0:00:00"
https://github.com/squid-cache/squid/commit/15df8349237e9eef90b030838021ad89712bf8ea,23 Nov 1997,"Move *ConnectionOpen() functionality to client_side.c and icp_v2.c.
trying to make it so HUP doesn't require closing all the connections",205,data/crawl/squid/hunk_6919.cpp,,,data/crawl/squid/old_hunk_6919.cpp,data/crawl/squid/new_hunk_6919.cpp,42,-1,"fatal(""Cannot open ICP Port"");",,"[""removeLog""]","[[""fatal"", ""Cannot"", ""open"", ""ICP"", ""Port""], []]",[9481987995531124990],7099,"3065 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d5d466fc1490b4f6eadb04a30e679fdd562ba2c4,13 Mar 1998,adding code,266,data/crawl/squid/hunk_6592.cpp,,,data/crawl/squid/old_hunk_6592.cpp,data/crawl/squid/new_hunk_6592.cpp,-1,184,,"fatal(""Cannot open HTCP Socket"");","[""addLog""]","[[], [""fatal"", ""Cannot"", ""open"", ""HTCP"", ""Socket""]]",[3828576806609246128],7098,"2991 days, 16:00:00"
https://github.com/squid-cache/squid/commit/faadb1b64436077d7f3b02e30cb9684b1c9ad075,10 Apr 2006,removed obsolete ldap files. These was moved to the ldap helper directory,662,data/crawl/squid/hunk_4873.cpp,,,data/crawl/squid/old_hunk_4873.cpp,data/crawl/squid/new_hunk_4873.cpp,275,-1,"printf(""password: %s\n"", password);",,"[""removeLog""]","[[""printf"", ""password"", ""%s\\n"", ""password""], []]",[1032207333545575809],7097,"1033 days, 8:00:00"
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/hunk_3430.cpp,,,data/crawl/squid/old_hunk_3430.cpp,data/crawl/squid/new_hunk_3430.cpp,3,3,"fprintf(stderr, ""%s| %s: received type %d NTLM token\n"",
                        LogTime(), PROGRAM,
                        (int) *((unsigned char *) input_token.value +
                                sizeof ntlmProtocol));","fprintf(stderr, ""%s| %s: WARNING: received type %d NTLM token\n"",
                        LogTime(), PROGRAM,
                        (int) *((unsigned char *) input_token.value +
                                sizeof ntlmProtocol));","[""updateContent""]","[[], [""WARNING""]]",[-4387977558364981357],7096,"51 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3194.cpp,,,data/crawl/squid/old_hunk_3194.cpp,data/crawl/squid/new_hunk_3194.cpp,-1,83,,"fputs( ""(unknown)\n"", stderr );","[""addLog""]","[[], [""fputs"", ""unknown"", ""\\n"", ""stderr""]]",[-16791036293205242296],7095,"28 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3194.cpp,,,data/crawl/squid/old_hunk_3194.cpp,data/crawl/squid/new_hunk_3194.cpp,-1,81,,"fprintf( stderr, ""%s\n"", _sys_siglist[sig] );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""_sys_siglist[sig]""]]",[-1572256004854501974],7094,"28 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3194.cpp,,,data/crawl/squid/old_hunk_3194.cpp,data/crawl/squid/new_hunk_3194.cpp,-1,79,,"fprintf( stderr, ""%s: "", msg );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""msg""]]",[-7533761602946052704],7093,"28 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d68277188a2ab77fc3d9016edd3fb9561ac9d22c,10 Oct 2001,"Commit Roger Venning's TOS/source address ACL selection work.
This code allows the user to set ToS bits or the source address
of an ACL by defining an ACL and then using that ACL in
(mutiple instances of the) tcp_outgoing_address statement.",459,data/crawl/squid/hunk_5776.cpp,,,data/crawl/squid/old_hunk_5776.cpp,data/crawl/squid/new_hunk_5776.cpp,-1,60,,"storeAppendPrintf(entry, ""%s none"", name);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""none"", ""name""]]",[-4415518394763979715],7092,"1289 days, 0:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5905.cpp,,,data/crawl/squid/old_hunk_5905.cpp,data/crawl/squid/new_hunk_5905.cpp,-1,523,,"fprintf(stderr, ""SMB_SessSetupAndX failed with errorclass = %i, Error Code = %i\n"",
	    CVAL(SMB_Hdr(pkt), SMB_hdr_rcls_offset),
	    SVAL(SMB_Hdr(pkt), SMB_hdr_err_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SMB_SessSetupAndX"", ""failed"", ""with"", ""errorclass"", ""%i"", ""Error"", ""Code"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_rcls_offset"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_err_offset""]]",[5891327049776777669],7091,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5905.cpp,,,data/crawl/squid/old_hunk_5905.cpp,data/crawl/squid/new_hunk_5905.cpp,-1,510,,"fprintf(stderr, ""Error receiving response to SessSetupAndX\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""SessSetupAndX\\n""]]",[-17664103020917590369],7090,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5905.cpp,,,data/crawl/squid/old_hunk_5905.cpp,data/crawl/squid/new_hunk_5905.cpp,-1,497,,"fprintf(stderr, ""Error sending SessSetupX request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""sending"", ""SessSetupX"", ""request\\n""]]",[-5811297851841865137],7089,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5905.cpp,,,data/crawl/squid/old_hunk_5905.cpp,data/crawl/squid/new_hunk_5905.cpp,-1,102,,"fprintf(stderr, ""Setting no-delay on TCP socket failed ...\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Setting"", ""no"", ""delay"", ""on"", ""TCP"", ""socket"", ""failed"", ""\\n""]]",[-7235141140431330927],7088,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2956.cpp,,,data/crawl/squid/old_hunk_2956.cpp,data/crawl/squid/new_hunk_2956.cpp,-1,259,,"printf(""  %s\n"", err_string);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""err_string""]]",[11752476434877001442],7087,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2955.cpp,,,data/crawl/squid/old_hunk_2955.cpp,data/crawl/squid/new_hunk_2955.cpp,-1,701,,"fprintf(stderr, ""Error sending Open request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""sending"", ""Open"", ""request\\n""]]",[-656643587028167890],7086,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2955.cpp,,,data/crawl/squid/old_hunk_2955.cpp,data/crawl/squid/new_hunk_2955.cpp,-1,643,,"fprintf(stderr, ""Could not allocate file handle space ..."");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Could"", ""not"", ""allocate"", ""file"", ""handle"", ""space""]]",[8591932977287670914],7085,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2954.cpp,,,data/crawl/squid/old_hunk_2954.cpp,data/crawl/squid/new_hunk_2954.cpp,-1,654,,"fprintf(stderr, ""SMB_SessSetupAndTCon failed with errorclass = %i, Error Code = %i\n"",
                CVAL(SMB_Hdr(pkt), SMB_hdr_rcls_offset),
                SVAL(SMB_Hdr(pkt), SMB_hdr_err_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SMB_SessSetupAndTCon"", ""failed"", ""with"", ""errorclass"", ""%i"", ""Error"", ""Code"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_rcls_offset"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_err_offset""]]",[23461725029944925512],7084,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2954.cpp,,,data/crawl/squid/old_hunk_2954.cpp,data/crawl/squid/new_hunk_2954.cpp,-1,638,,"fprintf(stderr, ""Error receiving response to SessSetupAndTCon\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""SessSetupAndTCon\\n""]]",[-9047901430437325038],7083,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2954.cpp,,,data/crawl/squid/old_hunk_2954.cpp,data/crawl/squid/new_hunk_2954.cpp,-1,622,,"fprintf(stderr, ""Error sending SessSetupAndTCon request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""sending"", ""SessSetupAndTCon"", ""request\\n""]]",[7125125016913124162],7082,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5903.cpp,,,data/crawl/squid/old_hunk_5903.cpp,data/crawl/squid/new_hunk_5903.cpp,-1,279,,"fprintf(stderr, ""Bad packet return in RFCNB_Recv... \n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Bad"", ""packet"", ""return"", ""in"", ""RFCNB_Recv"", ""\\n""]]",[-13390460590631321895],7081,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,386,,"fprintf(stderr, ""Pkt Len = %i, read_len = %i\n"", pkt_len, read_len);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Pkt"", ""Len"", ""%i"", ""read_len"", ""%i\\n"", ""pkt_len"", ""read_len""]]",[14749515261673248060],7080,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,366,,"fprintf(stderr, ""Frag_Len = %i, this_time = %i, this_len = %i, more = %i\n"", frag_len,
	    this_time, this_len, more);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Frag_Len"", ""%i"", ""this_time"", ""%i"", ""this_len"", ""%i"", ""more"", ""%i\\n"", ""frag_len"", ""this_time"", ""this_len"", ""more""]]",[-21986929429100296154],7079,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,311,,"fprintf(stderr, ""Reading Pkt: Length = %i\n"", pkt_len);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Reading"", ""Pkt"", ""Length"", ""%i\\n"", ""pkt_len""]]",[-2546329978924844425],7078,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,282,,"fprintf(stderr, ""RFCNB KEEP ALIVE received\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""RFCNB"", ""KEEP"", ""ALIVE"", ""received\\n""]]",[-4094161876581336934],7077,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,268,,"fprintf(stderr, ""Connection closed reading\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Connection"", ""closed"", ""reading\\n""]]",[-3658438838238786031],7076,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,252,,"fprintf(stderr, ""Reading the packet, we got:"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Reading"", ""the"", ""packet"", ""we"", ""got""]]",[-31893954141555588920],7075,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,236,,"fprintf(stderr, ""Trying to read less than a packet:"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Trying"", ""to"", ""read"", ""less"", ""than"", ""a"", ""packet""]]",[-16752697044726255696],7074,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,205,,"fprintf(stderr, ""Len sent = %i ...\n"", len_sent);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Len"", ""sent"", ""%i"", ""\\n"", ""len_sent""]]",[-1761508097882951492],7073,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,173,,"fprintf(stderr, ""Frags = %i, tot_sent = %i\n"", i, tot_sent);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Frags"", ""%i"", ""tot_sent"", ""%i\\n"", ""i"", ""tot_sent""]]",[386152058147198788],7072,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,93,,"fprintf(stderr, ""Discard_Rest called to discard: %i\n"", len);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Discard_Rest"", ""called"", ""to"", ""discard"", ""%i\\n"", ""len""]]",[-2698513984810611498],7071,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5901.cpp,,,data/crawl/squid/old_hunk_5901.cpp,data/crawl/squid/new_hunk_5901.cpp,-1,40,,"fprintf(stderr, ""IO Timed out ...\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""IO"", ""Timed"", ""out"", ""\\n""]]",[-18858184016081431633],7070,"1189 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2968.cpp,,,data/crawl/squid/old_hunk_2968.cpp,data/crawl/squid/new_hunk_2968.cpp,440,-1,"fprintf(stderr, ""Sending packet: "");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Sending"", ""packet""], []]",[23441903884649910407],7069,0:00:00
https://github.com/squid-cache/squid/commit/f95fe6ed2c36e2e0eb169eda54d963763cd32650,08 Jul 2003,"Summary: Merge debugs logic.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-4
     Add tests, change debugs syntax.

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-3
     Add test case for debugs in the case it doesn't require a ;

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-2
     Enforce the use of ; at the end of debugs macro calls.

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--patch-1
     String based debug and operator ::new fixes.

  * robertc@squid-cache.org--squid/squid--cplusplusdebug--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-222",306,data/crawl/squid/hunk_5229.cpp,,,data/crawl/squid/old_hunk_5229.cpp,data/crawl/squid/new_hunk_5229.cpp,-1,15,,"_db_print(""%s\n"", currentDebug->str().c_str());","[""addLog""]","[[], [""_db_print"", ""%s\\n"", ""currentDebug"", ""str"", ""c_str""]]",[6980861486925073934],7068,"891 days, 0:00:00"
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2990.cpp,,,data/crawl/squid/old_hunk_2990.cpp,data/crawl/squid/new_hunk_2990.cpp,-1,102,,"fprintf(tracefp, ""f:%p\n"", s);","[""addLog""]","[[], [""fprintf"", ""tracefp"", ""f"", ""%p\\n"", ""s""]]",[-4185219475741869808],7067,"9 days, 8:00:00"
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2990.cpp,,,data/crawl/squid/old_hunk_2990.cpp,data/crawl/squid/new_hunk_2990.cpp,-1,80,,"fprintf(tracefp, ""m:%d:%p\n"", sz, p);","[""addLog""]","[[], [""fprintf"", ""tracefp"", ""m"", ""%d"", ""%p\\n"", ""sz"", ""p""]]",[-4165763358341692610],7066,"9 days, 8:00:00"
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2990.cpp,,,data/crawl/squid/old_hunk_2990.cpp,data/crawl/squid/new_hunk_2990.cpp,-1,40,,"fprintf(tracefp, ""c:%u:%u:%p\n"", (unsigned int) n, (unsigned int) sz, p);","[""addLog""]","[[], [""fprintf"", ""tracefp"", ""c"", ""%u"", ""%u"", ""%p\\n"", ""unsigned"", ""int"", ""n"", ""unsigned"", ""int"", ""sz"", ""p""]]",[-33602757814329880716],7065,"9 days, 8:00:00"
https://github.com/squid-cache/squid/commit/12e11a5c0e2d896840e65b724f7afa47b5d575ad,04 Dec 2010,"Bug 3068: Actually make SwapDir capacity fields 64-bit.

This one uses uint64_t instead of size_t. It's a bit wider reaching than
the earlier commit since much of the existing code used size_t.",82,data/crawl/squid/hunk_2874.cpp,,,data/crawl/squid/old_hunk_2874.cpp,data/crawl/squid/new_hunk_2874.cpp,3,3,"storeAppendPrintf(&entry, "" %Zu %d %d"", (max_size >> 10), l1, l2);","storeAppendPrintf(&entry, "" %""PRIu64"" %d %d"", (max_size >> 10), l1, l2);","[""addContent"", ""updateContent"", ""addVariable""]","[[""%Zu""], [""%"", ""PRIu64""]]",[12007996375015214115],7064,0:00:00
https://github.com/squid-cache/squid/commit/12e11a5c0e2d896840e65b724f7afa47b5d575ad,04 Dec 2010,"Bug 3068: Actually make SwapDir capacity fields 64-bit.

This one uses uint64_t instead of size_t. It's a bit wider reaching than
the earlier commit since much of the existing code used size_t.",82,data/crawl/squid/hunk_2872.cpp,,,data/crawl/squid/old_hunk_2872.cpp,data/crawl/squid/new_hunk_2872.cpp,3,3,"storeAppendPrintf(&entry, "" %Zu"", (max_size >> 10));","storeAppendPrintf(&entry, "" %lu"", (max_size >> 10));","[""updateContent""]","[[""%Zu""], [""%lu""]]",[-17999946],7063,0:00:00
https://github.com/squid-cache/squid/commit/c06f9773560ffee68bc5244403df191acee4bbfa,23 Jun 2002,"A bit of cleanups to make GCC happy, and removed some unused code.",416,data/crawl/squid/hunk_5640.cpp,,,data/crawl/squid/old_hunk_5640.cpp,data/crawl/squid/new_hunk_5640.cpp,13,-1,"fprintf(stderr, ""Setting no-delay on TCP socket failed ...\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Setting"", ""no"", ""delay"", ""on"", ""TCP"", ""socket"", ""failed"", ""\\n""], []]",[7235141140431330927],7062,"2053 days, 16:00:00"
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/hunk_2807.cpp,,,data/crawl/squid/old_hunk_2807.cpp,data/crawl/squid/new_hunk_2807.cpp,93,-1,"buf.Printf("" [FD %d, requestId %u]"", fd, requestId);",,"[""removeLog""]","[[""buf"", ""Printf"", ""[FD"", ""%d"", ""requestId"", ""%u]"", ""fd"", ""requestId""], []]",[-25233463667732629772],7061,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/hunk_2806.cpp,,,data/crawl/squid/old_hunk_2806.cpp,data/crawl/squid/new_hunk_2806.cpp,4,-1,mustStop(reason);,,"[""removeLog""]","[[""mustStop"", ""reason""], []]",[12168142237827300475],7060,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/hunk_2805.cpp,,,data/crawl/squid/old_hunk_2805.cpp,data/crawl/squid/new_hunk_2805.cpp,-1,7,,"mustStop(""long URI"");","[""addLog""]","[[], [""mustStop"", ""long"", ""URI""]]",[-5711881963993431090],7059,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/hunk_2804.cpp,,,data/crawl/squid/old_hunk_2804.cpp,data/crawl/squid/new_hunk_2804.cpp,-1,202,,"buf.Printf("" [request->requestId %u]"", request->requestId);","[""addLog""]","[[], [""buf"", ""Printf"", ""[request"", ""requestId"", ""%u]"", ""request"", ""requestId""]]",[7296075189643111955],7058,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/51ea0904875d045eb83a16bdd96cc6c169b1b8b4,19 Jan 2011,importing smp-snmp patch,2936,data/crawl/squid/hunk_2803.cpp,,,data/crawl/squid/old_hunk_2803.cpp,data/crawl/squid/new_hunk_2803.cpp,-1,121,,"mustStop(""timeout"");","[""addLog""]","[[], [""mustStop"", ""timeout""]]",[-5542715327692713175],7057,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ac49890a255f5cfbf2242434c98b74da81b90dd4,27 Jan 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Fix IP/FQDN cache accounting to avoid idle caches on busy servers.

When maintaining the IP/FQDN cache size, use the number of entries in the cache
rather than the number of allocated and not freed MEM_IPCACHE_ENTRY and
MEM_FQDNCACHE_ENTRY objects. These objects are used outside the cache
for DNS queries. If queries leak (or perhaps when there are just a lot of them),
the memory-pool-based count overestimates the cache size, sometimes to
such a degree that the cache remains nearly empty despite lots of misses.

Use memory-pool-based counter to estimate cache size also violates IP/FQDN cache
encapsulation boundaries because it effectively prevents others from using
the same memory pool.",23,data/crawl/squid/hunk_2795.cpp,,,data/crawl/squid/old_hunk_2795.cpp,data/crawl/squid/new_hunk_2795.cpp,-1,6,,"storeAppendPrintf(sentry, ""FQDNcache Entries Cached: %d\n"",
                      fqdncacheCount());","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""FQDNcache"", ""Entries"", ""Cached"", ""%d\\n"", ""fqdncacheCount""]]",[11149010967697573662],7056,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/cbff89ba6b249941fe47ad28d4ac2ed50e286b94,26 Jan 2011,"Bug 2581, Bug 3081, Bug 2948: various TCP socket connection problems

Bug 3081:
  During conversion of listening socket handlers to AsyncCalls a violation
of the AsyncCall API was introduced. Resulting in occasional crashes from
invalid re-use of call objects.


This implements a TcpAcceptor async job which receives a listening socket
and a CallSubscription. For every connection attempt on the listener socket
a new AsyncCall is spawned from the subscription template.

Initial users are the HTTP and HTTPS listening sockets and FTP data channel.

In order to implement this job in FTP the logics surrounding data channel
handling had to be extended and reworked. Fixing bug 2948 and 2581 in the
process.",914,data/crawl/squid/hunk_2799.cpp,,,data/crawl/squid/old_hunk_2799.cpp,data/crawl/squid/new_hunk_2799.cpp,-1,19,,"fatalf(""FATAL: error while accepting new client connection: %s\n"", e.what());","[""addLog""]","[[], [""fatalf"", ""FATAL"", ""error"", ""while"", ""accepting"", ""new"", ""client"", ""connection"", ""%s\\n"", ""e"", ""what""]]",[21925932187621116973],7055,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cbff89ba6b249941fe47ad28d4ac2ed50e286b94,26 Jan 2011,"Bug 2581, Bug 3081, Bug 2948: various TCP socket connection problems

Bug 3081:
  During conversion of listening socket handlers to AsyncCalls a violation
of the AsyncCall API was introduced. Resulting in occasional crashes from
invalid re-use of call objects.


This implements a TcpAcceptor async job which receives a listening socket
and a CallSubscription. For every connection attempt on the listener socket
a new AsyncCall is spawned from the subscription template.

Initial users are the HTTP and HTTPS listening sockets and FTP data channel.

In order to implement this job in FTP the logics surrounding data channel
handling had to be extended and reworked. Fixing bug 2948 and 2581 in the
process.",914,data/crawl/squid/hunk_2798.cpp,,,data/crawl/squid/old_hunk_2798.cpp,data/crawl/squid/new_hunk_2798.cpp,-1,93,,"buf.Printf("" FD %d, %s"",fd, ipbuf);","[""addLog""]","[[], [""buf"", ""Printf"", ""FD"", ""%d"", ""%s"", ""fd"", ""ipbuf""]]",[7907134041917515033],7054,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cbff89ba6b249941fe47ad28d4ac2ed50e286b94,26 Jan 2011,"Bug 2581, Bug 3081, Bug 2948: various TCP socket connection problems

Bug 3081:
  During conversion of listening socket handlers to AsyncCalls a violation
of the AsyncCall API was introduced. Resulting in occasional crashes from
invalid re-use of call objects.


This implements a TcpAcceptor async job which receives a listening socket
and a CallSubscription. For every connection attempt on the listener socket
a new AsyncCall is spawned from the subscription template.

Initial users are the HTTP and HTTPS listening sockets and FTP data channel.

In order to implement this job in FTP the logics surrounding data channel
handling had to be extended and reworked. Fixing bug 2948 and 2581 in the
process.",914,data/crawl/squid/hunk_2797.cpp,,,data/crawl/squid/old_hunk_2797.cpp,data/crawl/squid/new_hunk_2797.cpp,11,11,fatal(msgIfFail);,"fatalf(""Unable to open %s"",FdNote(portType));","[""updateVariable"", ""updateLog"", ""addContent"", ""addVariable""]","[[""fatal"", ""msgIfFail""], [""fatalf"", ""Unable"", ""to"", ""open"", ""%s"", ""FdNote"", ""portType""]]",[39279313673191983323],7053,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/83af6fa2d157bff23080c87724c71c147d420395,27 Jan 2011,"Author: Steven Lawrance <squid@moonlightdesign.org>
Bug: 2968: Show the Vary: headers information in cachemgr objects report",4,data/crawl/squid/hunk_2794.cpp,,,data/crawl/squid/old_hunk_2794.cpp,data/crawl/squid/new_hunk_2794.cpp,-1,8,,"mb->Printf(""\tvary_headers: %s\n"", vary_headers);","[""addLog""]","[[], [""mb"", ""Printf"", ""\\tvary_headers"", ""%s\\n"", ""vary_headers""]]",[9692894893635809932],7052,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/hunk_4693.cpp,,,data/crawl/squid/old_hunk_4693.cpp,data/crawl/squid/new_hunk_4693.cpp,-1,158,,"(abortOnBadEntry(""entry went bad while ICAP aborted"");","[""addLog""]","[[], [""abortOnBadEntry"", ""entry"", ""went"", ""bad"", ""while"", ""ICAP"", ""aborted""]]",[-15089254301519600519],7051,"927 days, 8:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,-1,24,,"fprintf(stderr, ""%s| %s: Starting version %s\n"", LogTime(), PROGRAM, VERSION);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Starting"", ""version"", ""%s\\n"", ""LogTime"", ""PROGRAM"", ""VERSION""]]",[-3293571494806197117],7050,"309 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,272,,"fprintf(stderr, ""Usage: \n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Usage"", ""\\n""]]",[-16792158364100634950],7049,"269 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2634.cpp,,,data/crawl/squid/old_hunk_2634.cpp,data/crawl/squid/new_hunk_2634.cpp,9,8,"storeAppendPrintf(&output, ""Current Store Swap Size: %.2f KB\n"",
                      currentSizeInKB);","storeAppendPrintf(&output, ""Current Store Swap Size: %.2f KB\n"",
                      currentSize() / 1024.0);","[""removeVariable"", ""addContent"", ""addVariable""]","[[""currentSizeInKB""], [""currentSize"", ""/"", ""1024"", ""0""]]",[-12190290789123435782],7048,0:00:00
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4951.cpp,,,data/crawl/squid/old_hunk_4951.cpp,data/crawl/squid/new_hunk_4951.cpp,-1,289,,"httpHeaderPutStrf(&rep->header, type, ""Negotiate %s"", server_blob);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""type"", ""Negotiate"", ""%s"", ""server_blob""]]",[-12596721475175719257],7047,"1235 days, 8:00:00"
https://github.com/squid-cache/squid/commit/0606266fc8b9a44b2b6afb501fb346f3e59de875,27 Aug 2009,Use the right auth header type for the context,6,data/crawl/squid/hunk_3625.cpp,,,data/crawl/squid/old_hunk_3625.cpp,data/crawl/squid/new_hunk_3625.cpp,3,3,"httpHeaderPutStrf(hdr_out, HDR_PROXY_AUTHORIZATION, ""Basic %s"",
			  base64_encode(loginbuf));","httpHeaderPutStrf(hdr_out, header, ""Basic %s"",
			  base64_encode(loginbuf));","[""updateVariable""]","[[""HDR_PROXY_AUTHORIZATION""], [""header""]]",[-9782990965685720069],7046,"230 days, 16:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,654,,"fatalf(""Can't parse configuration token: '%s'\n"",
               def);","[""addLog""]","[[], [""fatalf"", ""Can"", ""t"", ""parse"", ""configuration"", ""token"", ""%s"", ""\\n"", ""def""]]",[10658322044005221237],7045,"1888 days, 8:00:00"
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/hunk_4967.cpp,,,data/crawl/squid/old_hunk_4967.cpp,data/crawl/squid/new_hunk_4967.cpp,-1,5,,"mb.Printf(""%*s"", (int) fmt->width, out);","[""addLog""]","[[], [""mb"", ""Printf"", ""%*s"", ""int"", ""fmt"", ""width"", ""out""]]",[-7314084157223720897],7044,"1353 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/hunk_4967.cpp,,,data/crawl/squid/old_hunk_4967.cpp,data/crawl/squid/new_hunk_4967.cpp,-1,3,,"mb.Printf(""%-*s"", (int) fmt->width, out);","[""addLog""]","[[], [""mb"", ""Printf"", ""%"", ""*s"", ""int"", ""fmt"", ""width"", ""out""]]",[-2538142304887021005],7043,"1353 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,843,,"storeAppendPrintf(entry, ""%s"", te->config);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""te"", ""config""]]",[5261554217450138221],7042,"1888 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,839,,"storeAppendPrintf(entry, ""{%s}"", arg);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""arg""]]",[5370724308728515853],7041,"1888 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,836,,"storeAppendPrintf(entry, "".%d"", (int) t->precision);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%d"", ""int"", ""t"", ""precision""]]",[-10961276620916630613],7040,"1888 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,833,,"storeAppendPrintf(entry, ""%d"", (int) t->width);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%d"", ""int"", ""t"", ""width""]]",[-5835084181075759729],7039,"1888 days, 8:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,778,,"storeAppendPrintf(entry, ""%s"", t->data.string);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""t"", ""data"", ""string""]]",[-14068941932392998644],7038,"1888 days, 8:00:00"
https://github.com/squid-cache/squid/commit/38e16f927fb0ac854e8a6bfec90f49af5ef1f6eb,04 Aug 2011,"SourceLayout: format namespace for custom tag-based formats

Part 1 of enabling non-logging components to support custom formats in strings

Shuffle the log custom format code into its own library separate from the
logging functionality.

One minor logic change removing redundant LogFileEnabled flag.

TODO:
 - use MemBuf instead or as well as StoreEntry as the output buffer
 - separate from AccessLogEntry confusion
 - upgrade deny_info URL generation format
 - upgrade external_acl_type format
 - add custom helper formats",3483,data/crawl/squid/hunk_2511.cpp,,,data/crawl/squid/old_hunk_2511.cpp,data/crawl/squid/new_hunk_2511.cpp,3,3,"storeAppendPrintf(s, ""logType %s\n"", log_tags[http->logType]);","storeAppendPrintf(s, ""logType %s\n"", Format::log_tags[http->logType]);","[""addVariable""]","[[], [""Format""]]",[2880483376040711751],7037,0:00:00
https://github.com/squid-cache/squid/commit/e08b0f778791043501c04a4a0a4b1dd5c97f8bc6,14 Apr 2011,"Use off_t instead of int and size_t for segment sizes
to be able to allocated larger than 4GB segments on some platforms.

Double check the newly created segment size using fstat().",54,data/crawl/squid/hunk_2657.cpp,,,data/crawl/squid/old_hunk_2657.cpp,data/crawl/squid/new_hunk_2657.cpp,-1,26,,fatal(s.termedBuf());,"[""addLog""]","[[], [""fatal"", ""s"", ""termedBuf""]]",[1991344095375043898],7036,"101 days, 8:00:00"
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2632.cpp,,,data/crawl/squid/old_hunk_2632.cpp,data/crawl/squid/new_hunk_2632.cpp,6,5,"storeAppendPrintf(&sentry, ""Maximum Size: %""PRIu64"" KB\n"", max_size);","storeAppendPrintf(&sentry, ""Maximum Size: %""PRIu64"" KB\n"", maxSize() >> 10);","[""removeVariable"", ""addContent"", ""addVariable""]","[[""max_size""], [""maxSize"", ""10""]]",[-3169932154592107851],7035,"46 days, 8:00:00"
https://github.com/squid-cache/squid/commit/e08b0f778791043501c04a4a0a4b1dd5c97f8bc6,14 Apr 2011,"Use off_t instead of int and size_t for segment sizes
to be able to allocated larger than 4GB segments on some platforms.

Double check the newly created segment size using fstat().",54,data/crawl/squid/hunk_2656.cpp,,,data/crawl/squid/old_hunk_2656.cpp,data/crawl/squid/new_hunk_2656.cpp,10,-1,fatal(s.termedBuf());,,"[""removeLog""]","[[""fatal"", ""s"", ""termedBuf""], []]",[-1991344095375043898],7034,"126 days, 16:00:00"
https://github.com/squid-cache/squid/commit/c7baff405558ef38ca6f0b2e5568621ad120004a,30 Dec 2011,"SourceLayout: shuffel UserRequest into Auth:: namespace

No logic changes, symbols and debug only.

* shuffle AuthUserRequest to Auth::UserRequest
* shuffle AuthBasicUserRequest to Auth::Basic::UserRequest
* shuffle AuthDigestUserRequest to Auth::Digest::UserRequest
* shuffle AuthNegotiateUserRequest to Auth::Negotiate::UserRequest
* shuffle AuthNTLMUserRequest to Auth::NTLM::UserRequest

* polish and add documentation for several parts of the hierarchy

* replace obsolete debugs() location texts",547,data/crawl/squid/hunk_2368.cpp,,,data/crawl/squid/old_hunk_2368.cpp,data/crawl/squid/new_hunk_2368.cpp,17,17,"fatal(""AuthUserRequest::connLastHeader should always be overridden by conn based auth schemes"");","fatal(""Auth::UserRequest::connLastHeader should always be overridden by conn based auth schemes"");","[""updateContent""]","[[""AuthUserRequest""], [""Auth"", ""UserRequest""]]",[-15331411644525419072],7033,0:00:00
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/hunk_2357.cpp,,,data/crawl/squid/old_hunk_2357.cpp,data/crawl/squid/new_hunk_2357.cpp,103,-1,"fatal(""tools.cc required"");",,"[""removeLog""]","[[""fatal"", ""tools"", ""cc"", ""required""], []]",[3614026982818920886],7032,0:00:00
https://github.com/squid-cache/squid/commit/65d448bc848526838ea2d5cea65d72a341896f08,25 Apr 2012,"SourceLayout: port config and select-loop priority polishing

- renames http_port_list to AnyP::PortCfg
- de-duplicate https_port_list into AnyP::PortCfg
- shuffles related globals and defines into anyp/PortCfg.*
- renames MAXHTTPPORTS to MAXTCPLISTENPORTS to suit its actual coverage of HTTP and HTTPS ports.
- shuffled config port clone function into a method.
- rename ICP/HTCP/SNMP API functions to consistent *OpenPorts() and *ClosePorts()


  NP:following applies to incoming_* and *_poll_cnt directives.
- renames *_icp_* to *_udp_*
- renames *_http_* to *_tcp_*
- shuffles duplicated struct SquidConf options into a shared structure
- shuffles related defines into comm/Loops.h
- documents options better

- various other cosmetic syntax tweaks and polish

One bug fix:
  comm_dns_incoming was not being propigated in StatsHist copy/clone.
  Now is. I seem to remember mention of something similar being zero before,
  but can't find the bug report.",1098,data/crawl/squid/hunk_2322.cpp,,,data/crawl/squid/old_hunk_2322.cpp,data/crawl/squid/new_hunk_2322.cpp,7,7,"storeAppendPrintf(sentry, ""Current incoming_http_interval: %d\n"",
                      incoming_http_interval >> INCOMING_FACTOR);","storeAppendPrintf(sentry, ""Current incoming_tcp_interval: %d\n"",
                      incoming_tcp_interval >> INCOMING_FACTOR);","[""updateVariable"", ""updateContent""]","[[""incoming_http_interval"", ""incoming_http_interval""], [""incoming_tcp_interval"", ""incoming_tcp_interval""]]",[9573987039334629836],7031,0:00:00
https://github.com/squid-cache/squid/commit/65d448bc848526838ea2d5cea65d72a341896f08,25 Apr 2012,"SourceLayout: port config and select-loop priority polishing

- renames http_port_list to AnyP::PortCfg
- de-duplicate https_port_list into AnyP::PortCfg
- shuffles related globals and defines into anyp/PortCfg.*
- renames MAXHTTPPORTS to MAXTCPLISTENPORTS to suit its actual coverage of HTTP and HTTPS ports.
- shuffled config port clone function into a method.
- rename ICP/HTCP/SNMP API functions to consistent *OpenPorts() and *ClosePorts()


  NP:following applies to incoming_* and *_poll_cnt directives.
- renames *_icp_* to *_udp_*
- renames *_http_* to *_tcp_*
- shuffles duplicated struct SquidConf options into a shared structure
- shuffles related defines into comm/Loops.h
- documents options better

- various other cosmetic syntax tweaks and polish

One bug fix:
  comm_dns_incoming was not being propigated in StatsHist copy/clone.
  Now is. I seem to remember mention of something similar being zero before,
  but can't find the bug report.",1098,data/crawl/squid/hunk_2322.cpp,,,data/crawl/squid/old_hunk_2322.cpp,data/crawl/squid/new_hunk_2322.cpp,3,3,"storeAppendPrintf(sentry, ""Current incoming_icp_interval: %d\n"",
                      incoming_icp_interval >> INCOMING_FACTOR);","storeAppendPrintf(sentry, ""Current incoming_udp_interval: %d\n"",
                      incoming_udp_interval >> INCOMING_FACTOR);","[""updateVariable"", ""updateContent""]","[[""incoming_icp_interval"", ""incoming_icp_interval""], [""incoming_udp_interval"", ""incoming_udp_interval""]]",[-35563025994777130],7030,0:00:00
https://github.com/squid-cache/squid/commit/3b07476b752e45322023212915a52f586cf56c1c,05 Jul 2012,"Author: Alex Rousskov <rousskov@measurement-factory.com>
[request|reply]_header_* manglers fixes to handle custom headers

This patch fix the [request|reply]_header_[access|replace] configuration
parameters to support custom headers. Before this patch the user was able 
to remove/replace/allow all custom headers using the ""Other"" as header name.


This is a Measurement Factory project.",439,data/crawl/squid/hunk_2273.cpp,,,data/crawl/squid/old_hunk_2273.cpp,data/crawl/squid/new_hunk_2273.cpp,52,25,"storeAppendPrintf(entry, ""%s %s %s\n"", name, httpHeaderNameById(i),
                          header[i].replacement);","manglers->dumpReplacement(entry, name);","[""addLog"", ""removeVariable"", ""removeContent"", ""removeLog""]","[[""storeAppendPrintf"", ""%s"", ""%s"", ""%s\\n"", ""httpHeaderNameById"", ""i"", ""header[i]"", ""replacement""], [""manglers"", ""dumpReplacement""]]",[-11043328176935827389],7029,"8 days, 16:00:00"
https://github.com/squid-cache/squid/commit/3b07476b752e45322023212915a52f586cf56c1c,05 Jul 2012,"Author: Alex Rousskov <rousskov@measurement-factory.com>
[request|reply]_header_* manglers fixes to handle custom headers

This patch fix the [request|reply]_header_[access|replace] configuration
parameters to support custom headers. Before this patch the user was able 
to remove/replace/allow all custom headers using the ""Other"" as header name.


This is a Measurement Factory project.",439,data/crawl/squid/hunk_2272.cpp,,,data/crawl/squid/old_hunk_2272.cpp,data/crawl/squid/new_hunk_2272.cpp,9,6,"storeAppendPrintf(entry, ""%s "", name);","manglers->dumpAccess(entry, name);","[""addLog"", ""removeContent"", ""removeLog""]","[[""storeAppendPrintf"", ""%s""], [""manglers"", ""dumpAccess""]]",[1374559074738771596],7028,"8 days, 16:00:00"
https://github.com/squid-cache/squid/commit/3b07476b752e45322023212915a52f586cf56c1c,05 Jul 2012,"Author: Alex Rousskov <rousskov@measurement-factory.com>
[request|reply]_header_* manglers fixes to handle custom headers

This patch fix the [request|reply]_header_[access|replace] configuration
parameters to support custom headers. Before this patch the user was able 
to remove/replace/allow all custom headers using the ""Other"" as header name.


This is a Measurement Factory project.",439,data/crawl/squid/hunk_2271.cpp,,,data/crawl/squid/old_hunk_2271.cpp,data/crawl/squid/new_hunk_2271.cpp,-1,25,,"storeAppendPrintf(entry, ""%s %s %s\n"", option, name, m.replacement);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""%s\\n"", ""option"", ""name"", ""m"", ""replacement""]]",[5754358729700913051],7027,"8 days, 16:00:00"
https://github.com/squid-cache/squid/commit/3b07476b752e45322023212915a52f586cf56c1c,05 Jul 2012,"Author: Alex Rousskov <rousskov@measurement-factory.com>
[request|reply]_header_* manglers fixes to handle custom headers

This patch fix the [request|reply]_header_[access|replace] configuration
parameters to support custom headers. Before this patch the user was able 
to remove/replace/allow all custom headers using the ""Other"" as header name.


This is a Measurement Factory project.",439,data/crawl/squid/hunk_2271.cpp,,,data/crawl/squid/old_hunk_2271.cpp,data/crawl/squid/new_hunk_2271.cpp,-1,15,,"storeAppendPrintf(entry, ""%s "", option);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""option""]]",[6205846990721878971],7026,"8 days, 16:00:00"
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/hunk_2329.cpp,,,data/crawl/squid/old_hunk_2329.cpp,data/crawl/squid/new_hunk_2329.cpp,3,3,"fatalf(""Failed to set SSL cipher suite '%s': %s\n"",
                   cipher, ERR_error_string(ssl_error, NULL));","debugs(83, DBG_CRITICAL, ""ERROR: Failed to set SSL cipher suite '"" << cipher << ""': "" << ERR_error_string(ssl_error, NULL));","[""updateVariable"", ""updateLog"", ""updateContent"", ""addContent"", ""addVariable""]","[[""fatalf"", ""%s"", ""%s\\n""], [""debugs"", ""83"", ""DBG_CRITICAL"", ""ERROR""]]",[1675755882985238231],7025,"79 days, 8:00:00"
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/hunk_2328.cpp,,,data/crawl/squid/old_hunk_2328.cpp,data/crawl/squid/new_hunk_2328.cpp,3,3,"fatalf(""Failed to allocate SSL context: %s\n"",
               ERR_error_string(ssl_error, NULL));","debugs(83, DBG_CRITICAL, ""ERROR: Failed to allocate SSL context: "" << ERR_error_string(ssl_error, NULL));","[""updateLog"", ""updateContent"", ""addContent"", ""addVariable""]","[[""fatalf"", ""%s\\n""], [""debugs"", ""83"", ""DBG_CRITICAL"", ""ERROR""]]",[1680491911438281013],7024,"79 days, 8:00:00"
https://github.com/squid-cache/squid/commit/caf3666d1f57f270e2ba21ea4974b44f863c5cf2,04 May 2012,"Re-enabled support for bump-client-first mode using enhanced ssl_bump option.

Even though bump-server-first is an overall better method, bumping the client
first is useful for backward compatibility and possibly for serving internal
Squid objects such as icons.

The code path implementing bump-client-first approach was preserved during the
bump-server-first changes, so we just needed to add a configuration option to
allow the admin to pick between two modes. We did that by using custom ""mode""
keywords with the existing ssl_bump option. The old allow/deny pair of
standard keywords could not be used to select one of the two modes for an
""allowed"" connection.",222,data/crawl/squid/hunk_2318.cpp,,,data/crawl/squid/old_hunk_2318.cpp,data/crawl/squid/new_hunk_2318.cpp,-1,45,,"storeAppendPrintf(entry, ""%s "", Ssl::bumpMode(sb->allow.kind));","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""Ssl"", ""bumpMode"", ""sb"", ""allow"", ""kind""]]",[13922051435011257693],7023,"50 days, 0:00:00"
https://github.com/squid-cache/squid/commit/aebe6888b2d7870965f2e7877e562004e4d91bf9,27 Jan 2012,"sslproxy_cert_sign squid.conf option

This option control how generated fake SSL certificates are signed.

Syntax:
  sslproxy_cert_sign <signing algorithm> acl ...

where <signing algorithm> can be one of the signTrusted, signUntrusted or
signSelf

Default signing algorithm if the sslproxy_cert_sign is not configured is 
signSelf, if the server certificate is self signed, signUntrusted if the server
certificate is untrusted (ERR_INVALID_CA, ERR_SELF_SIGNED_CERT_IN_CHAIN,
ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE, ERR_UNABLE_TO_GET_ISSUER_CERT,
ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY and ERR_CERT_UNTRUSTED errors) and
signTrusted if the server certificate is trusted.


Notes:
  - The signing algorithm passed as parameter to the ssl_crtd daemon

  - A self signed certificate generated on squid startup to be used as
    signing certificate for untrusted certificates, with CN = 
    ""Squid CA for Untrusted Certificates""

  - The configured certificates with http(s)_port squid.conf option chained to
    the client SSL connection only when signTrusted signing algorithm selected.
    When the signing algorithm is signSelf or signUntrusted no other certificate
    send to the client browser.

  - A small bug fixed which did not allow the sslproxy_cert_adapt option
    to be enabled in squid if the icap client is not enabled",618,data/crawl/squid/hunk_2330.cpp,,,data/crawl/squid/old_hunk_2330.cpp,data/crawl/squid/new_hunk_2330.cpp,-1,38,,"storeAppendPrintf(entry, ""%s "", Ssl::certSignAlgorithm(cs->alg));","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""Ssl"", ""certSignAlgorithm"", ""cs"", ""alg""]]",[953825321972862509],7022,"115 days, 8:00:00"
https://github.com/squid-cache/squid/commit/fb2178bb51a9028bbb9d848e669fd02f380134d4,21 Jan 2012,"sslproxy_cert_adapt squid.conf option

This patch add the sslproxy_cert_adapt option to squid.conf which gives to
squid administrators the required functionality to ""fix"" a known broken 
certificate using acls.
Currently only the ""Not After"", ""Not Before"" and ""Common Name"" fields of a
certificate can be modified/fixed.

The sslproxy_cert_adapt option has the form:
   sslproxy_cert_adapt <adaptation algorithm> acl ...
where <adaptation algorithm> is one of the setValidAfter, setValidBefore and 
setCommonName.

    setValidAfter: sets the ""Not After"" property to the signing cert's 
                   ""Not After"" property.
    setValidBefore: sets the ""Not Before"" property to the signing cert's 
                   ""Not After"" property.
    setCommonName: sets certificate Subject.CN property to the host name
                   from specified as a CN parameter (setCommonName{CN}) or, 
                   if no explicit CN parameter was specified, extracted from 
                   the CONNECT request

When the acl(s) match, the corresponding adaptation algorithm is applied to 
the fake/generated certificate. Otherwise, the default mimicking action takes 
place.",451,data/crawl/squid/hunk_2331.cpp,,,data/crawl/squid/old_hunk_2331.cpp,data/crawl/squid/new_hunk_2331.cpp,-1,59,,"storeAppendPrintf(entry, ""%s{%s} "", Ssl::sslCertAdaptAlgoritm(ca->alg), ca->param);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""Ssl"", ""sslCertAdaptAlgoritm"", ""ca"", ""alg"", ""ca"", ""param""]]",[3422795718846657287],7021,"119 days, 8:00:00"
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/hunk_2327.cpp,,,data/crawl/squid/old_hunk_2327.cpp,data/crawl/squid/new_hunk_2327.cpp,-1,37,,"fatalf(""Unable to generate  signing SSL certificate for untrusted sites for %s_port %s"", protocol, s.ToURL(buf, sizeof(buf)));","[""addLog""]","[[], [""fatalf"", ""Unable"", ""to"", ""generate"", ""signing"", ""SSL"", ""certificate"", ""for"", ""untrusted"", ""sites"", ""for"", ""%s_port"", ""%s"", ""protocol"", ""s"", ""ToURL"", ""buf"", ""sizeof"", ""buf""]]",[2352543332009545962],7020,"79 days, 8:00:00"
https://github.com/squid-cache/squid/commit/f4e4d4d6f1540163acf52590868f1dc77b1d3410,21 Mar 2012,"certificateMatchesProperties segfault

It is reported at least one case where squid crashed with segfault because the
signing certificate was NULL.

This patch:
  - Add assertion checks inside  buildSslCertGenerationParams and  
    Ssl::certificateMatchesProperties functions (a)to avoid segfaults
  - In the case the signing certificate is not given in http_port configuration
    or the given certificate filename was not valid, squid does not start.
  - Creates the http_port_list::configureSslServerContext method and move
    here the cache_cf.cc code which was responsible to initialize ssl contexts
    and sslBump feature.",97,data/crawl/squid/hunk_2327.cpp,,,data/crawl/squid/old_hunk_2327.cpp,data/crawl/squid/new_hunk_2327.cpp,-1,26,,"fatalf(""No valid signing SSL certificate configured for %s_port %s"", protocol,  s.ToURL(buf, sizeof(buf)));","[""addLog""]","[[], [""fatalf"", ""No"", ""valid"", ""signing"", ""SSL"", ""certificate"", ""configured"", ""for"", ""%s_port"", ""%s"", ""protocol"", ""s"", ""ToURL"", ""buf"", ""sizeof"", ""buf""]]",[-5703592576602632753],7019,"79 days, 8:00:00"
https://github.com/squid-cache/squid/commit/54311b7026f3f5af011cd808127103d4ed4e6795,08 Aug 2012,"Moved to STUB API stubs for DelayId.cc, HelperChildconfig.cc, debug.cc",23,data/crawl/squid/hunk_2079.cpp,,,data/crawl/squid/old_hunk_2079.cpp,data/crawl/squid/new_hunk_2079.cpp,6,-1,"fprintf(stderr, ""HelperChildConfig::parseConfig not implemented."");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""HelperChildConfig"", ""parseConfig"", ""not"", ""implemented""], []]",[15049532103204724158],7018,8:00:00
https://github.com/squid-cache/squid/commit/d60a166f39212bbc756544dea5e95ff5391a7645,13 Sep 2012,more RequestFlags getters/setters,128,data/crawl/squid/hunk_2053.cpp,,,data/crawl/squid/old_hunk_2053.cpp,data/crawl/squid/new_hunk_2053.cpp,3,3,">putStr(HDR_CONNECTION, request->flags.proxy_keepalive ? ""keep-alive"" : ""close"");",">putStr(HDR_CONNECTION, request->flags.proxyKeepalive() ? ""keep-alive"" : ""close"");","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""proxy_keepalive""], [""proxyKeepalive""]]",[-11626908043684631500],7017,"8 days, 16:00:00"
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3344.cpp,,,data/crawl/squid/old_hunk_3344.cpp,data/crawl/squid/new_hunk_3344.cpp,124,-1,"fatalf(""authenticateNTLMHandleReply: *** Unsupported helper response ***, '%s'\n"", reply);",,"[""removeLog""]","[[""fatalf"", ""authenticateNTLMHandleReply"", ""***"", ""Unsupported"", ""helper"", ""response"", ""***"", ""%s"", ""\\n"", ""reply""], []]",[3623871199738568275],7016,"573 days, 8:00:00"
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3340.cpp,,,data/crawl/squid/old_hunk_3340.cpp,data/crawl/squid/new_hunk_3340.cpp,154,-1,"fatalf(""authenticateNegotiateHandleReply: *** Unsupported helper response ***, '%s'\n"", reply);",,"[""removeLog""]","[[""fatalf"", ""authenticateNegotiateHandleReply"", ""***"", ""Unsupported"", ""helper"", ""response"", ""***"", ""%s"", ""\\n"", ""reply""], []]",[-2877559570256363225],7015,"573 days, 8:00:00"
https://github.com/squid-cache/squid/commit/b3404bc5f559ff3d73960357e6b94f20e6ac6a31,26 Oct 2012,"note option

Add forgotten Notes.cc and Notes.h file",234,data/crawl/squid/hunk_1963.cpp,,,data/crawl/squid/old_hunk_1963.cpp,data/crawl/squid/new_hunk_1963.cpp,-1,118,,"storeAppendPrintf(entry, ""%s "" SQUIDSTRINGPH "" %s"",
                              key, SQUIDSTRINGPRINT((*m)->key), ConfigParser::QuoteString((*v)->value));","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""SQUIDSTRINGPH"", ""%s"", ""key"", ""SQUIDSTRINGPRINT"", ""*m"", ""key"", ""ConfigParser"", ""QuoteString"", ""*v"", ""value""]]",[-561083083629220026],7014,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b3404bc5f559ff3d73960357e6b94f20e6ac6a31,26 Oct 2012,"note option

Add forgotten Notes.cc and Notes.h file",234,data/crawl/squid/hunk_1963.cpp,,,data/crawl/squid/old_hunk_1963.cpp,data/crawl/squid/new_hunk_1963.cpp,-1,101,,"fatalf(""%s:%d: meta key \""%s\"" is a reserved %s name"",
                       cfg_filename, config_lineno, note->key.termedBuf(),
                       descr ? descr : """");","[""addLog""]","[[], [""fatalf"", ""%s"", ""%d"", ""meta"", ""key"", ""\\"", ""%s\\"", ""is"", ""a"", ""reserved"", ""%s"", ""name"", ""cfg_filename"", ""config_lineno"", ""note"", ""key"", ""termedBuf"", ""descr"", ""descr""]]",[31843372144641062895],7013,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/45bb03812cb68af775325092731082b5485e9dce,29 Oct 2012,Bug 3189: AIO thread race on pipe() initialization,18,data/crawl/squid/hunk_1962.cpp,,,data/crawl/squid/old_hunk_1962.cpp,data/crawl/squid/new_hunk_1962.cpp,-1,8,,"fatalf(""Disk Threads I/O pipes not initialized before first use."");","[""addLog""]","[[], [""fatalf"", ""Disk"", ""Threads"", ""I/O"", ""pipes"", ""not"", ""initialized"", ""before"", ""first"", ""use""]]",[19287123141693404468],7012,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fd7f26eaf8b41da6b4131ee33d2c898a888b2044,27 Nov 2012,"Audit Review updates

* guarantee that note values output by the HelperReply parser are """"
  nil-terminated string and not undefined String.
* rename HelperReply::responseKeys to 'notes'
* rename Notes::findByName() to find()
* add Note::firstValue() to locate first value provided for a given key
  and present it as a char* terminated string
* various documentation updates",141,data/crawl/squid/hunk_1899.cpp,,,data/crawl/squid/old_hunk_1899.cpp,data/crawl/squid/new_hunk_1899.cpp,5,5,auth_user_request->denyMessage(errNote->values[0]->value.termedBuf());,auth_user_request->denyMessage(errNote->firstValue());,"[""updateVariable"", ""moveVariable"", ""removeVariable"", ""removeContent""]","[[""values[0]"", ""value"", ""termedBuf""], [""firstValue""]]",[-7920885891220566413],7011,0:00:00
https://github.com/squid-cache/squid/commit/be05c1858335550066ee6706166c491e9ab3ca01,16 Nov 2012,"squidclient: Better error checking

* detect and report fstat() errors which could lead to invalid
  Content-Length being sent.

* remove some useless checks which were causing false positives by Coverity.

 Detected by Coverity Scan. Issues 740334, 740379",16,data/crawl/squid/hunk_1905.cpp,,,data/crawl/squid/old_hunk_1905.cpp,data/crawl/squid/new_hunk_1905.cpp,-1,4,,"fprintf(stderr, ""%s: can't identify length of file (%s)\n"", argv[0], xstrerror());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""can"", ""t"", ""identify"", ""length"", ""of"", ""file"", ""%s"", ""\\n"", ""argv[0]"", ""xstrerror""]]",[1984672696862652088],7010,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f087640fc902bdbfdd2d8591f5e57277e05904f9,30 Nov 2012,"Polish: Improve the messages output by UFS swap log management.

It also includes a small local variable symbol change from ""new_path"" to
""tmp_path"" to prevent future developer mistakes like the one seen in
bug 3663 mistaking ""new_path"" for the new destination path of xrename().",23,data/crawl/squid/hunk_1881.cpp,,,data/crawl/squid/old_hunk_1881.cpp,data/crawl/squid/new_hunk_1881.cpp,3,3,"fatal(""Failed to open swap log for reading"");","fatalf(""Failed to open swap log for reading %s"", swaplog_path);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""fatal""], [""fatalf"", ""%s"", ""swaplog_path""]]",[4733547812641902954],7009,"2 days, 16:00:00"
https://github.com/squid-cache/squid/commit/f087640fc902bdbfdd2d8591f5e57277e05904f9,30 Nov 2012,"Polish: Improve the messages output by UFS swap log management.

It also includes a small local variable symbol change from ""new_path"" to
""tmp_path"" to prevent future developer mistakes like the one seen in
bug 3663 mistaking ""new_path"" for the new destination path of xrename().",23,data/crawl/squid/hunk_1880.cpp,,,data/crawl/squid/old_hunk_1880.cpp,data/crawl/squid/new_hunk_1880.cpp,3,3,"fatal(""UFSSwapDir::openTmpSwapLog: Failed to open swap log."");","fatalf(""Failed to open swap log %s"", new_path);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""fatal"", ""UFSSwapDir"", ""openTmpSwapLog""], [""fatalf"", ""%s"", ""new_path""]]",[10528854663160828935],7008,"2 days, 16:00:00"
https://github.com/squid-cache/squid/commit/f087640fc902bdbfdd2d8591f5e57277e05904f9,30 Nov 2012,"Polish: Improve the messages output by UFS swap log management.

It also includes a small local variable symbol change from ""new_path"" to
""tmp_path"" to prevent future developer mistakes like the one seen in
bug 3663 mistaking ""new_path"" for the new destination path of xrename().",23,data/crawl/squid/hunk_1879.cpp,,,data/crawl/squid/old_hunk_1879.cpp,data/crawl/squid/new_hunk_1879.cpp,10,9,"fatalf(""Failed to rename log file %s to %s.new"", swaplog_path, swaplog_path);","fatalf(""Failed to rename log file %s to %s"", tmp_path, swaplog_path);","[""updateVariable"", ""updateContent""]","[[""new"", ""swaplog_path""], [""tmp_path""]]",[-6635065609728656627],7007,"2 days, 16:00:00"
https://github.com/squid-cache/squid/commit/d471b08ae0a97908f9c3eac88a3fee438e8acefe,01 Dec 2012,Bug 3688: Lots of Orphan Comm:Connections to ICAP server,21,data/crawl/squid/hunk_1878.cpp,,,data/crawl/squid/old_hunk_1878.cpp,data/crawl/squid/new_hunk_1878.cpp,-1,3,,"mustStop(""externally aborted"");","[""addLog""]","[[], [""mustStop"", ""externally"", ""aborted""]]",[-21285172630784138485],7006,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/49b76711eb061f751a766c289a778caaf6086797,27 Nov 2012,"Helper protocol upgrade: add optional kv-pair field to responses

This adds an optional kv-pair field immediately following the result field
on all helper interface responses. This field contains a list of key=value
pairs where the value is a RFC1738 (URL) encoded token or a quoted string.
Quoted-string MAY contain whitespace and shell escaping.

The response syntax for all helpers becomes:
  [channel-ID SP] result [SP key-pair ...] [SP other] EOL


The parser for HelperReply is also updated to map the old AF and NA
NTLM/Negotiate response fields into the HelperReply notes:
 * ""token="" is added to supply the NTLM and Negotiate server blob/token.
 * ""user="" is added to supply the user label field.
The relevant callback handlers are updated for these helpers to make use
of these new keys.


The bundled Digest authentication helpers are all upgraded to send the new
format responses. They now use ERR for failed lookup, BH for internal
errors, and OK with ""ha1="" key added to supply a HA1 response. The handler
for Digest authentication is updated to process the new HelperReply fields
with failover the old format on Unknown result codes.

The external ACL handler is updated to pull its key=value pairs out of the
Notes list. The old parser loop becomes useless with this and is removed.
Taking with it support for several long deprecated keys ""login="", ""passwd="",
and ""error="" which are now ignored.


Any other keys MAY be sent on any response. However at this stage 2 patch
they are ignored. As are repeated / secondary values for the expected key
names, only the first instance sent in the response is used.",727,data/crawl/squid/hunk_1887.cpp,,,data/crawl/squid/old_hunk_1887.cpp,data/crawl/squid/new_hunk_1887.cpp,-1,40,,auth_user_request->denyMessage(errNote->firstValue());,"[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""errNote"", ""firstValue""]]",[-7285367826216588968],7005,"4 days, 16:00:00"
https://github.com/squid-cache/squid/commit/49b76711eb061f751a766c289a778caaf6086797,27 Nov 2012,"Helper protocol upgrade: add optional kv-pair field to responses

This adds an optional kv-pair field immediately following the result field
on all helper interface responses. This field contains a list of key=value
pairs where the value is a RFC1738 (URL) encoded token or a quoted string.
Quoted-string MAY contain whitespace and shell escaping.

The response syntax for all helpers becomes:
  [channel-ID SP] result [SP key-pair ...] [SP other] EOL


The parser for HelperReply is also updated to map the old AF and NA
NTLM/Negotiate response fields into the HelperReply notes:
 * ""token="" is added to supply the NTLM and Negotiate server blob/token.
 * ""user="" is added to supply the user label field.
The relevant callback handlers are updated for these helpers to make use
of these new keys.


The bundled Digest authentication helpers are all upgraded to send the new
format responses. They now use ERR for failed lookup, BH for internal
errors, and OK with ""ha1="" key added to supply a HA1 response. The handler
for Digest authentication is updated to process the new HelperReply fields
with failover the old format on Unknown result codes.

The external ACL handler is updated to pull its key=value pairs out of the
Notes list. The old parser loop becomes useless with this and is removed.
Taking with it support for several long deprecated keys ""login="", ""passwd="",
and ""error="" which are now ignored.


Any other keys MAY be sent on any response. However at this stage 2 patch
they are ignored. As are repeated / secondary values for the expected key
names, only the first instance sent in the response is used.",727,data/crawl/squid/hunk_1887.cpp,,,data/crawl/squid/old_hunk_1887.cpp,data/crawl/squid/new_hunk_1887.cpp,15,17,auth_user_request->denyMessage(arg);,auth_user_request->denyMessage(messageNote->firstValue());,"[""removeVariable"", ""addVariable""]","[[""arg""], [""messageNote"", ""firstValue""]]",[-15861014039095818322],7004,"4 days, 16:00:00"
https://github.com/squid-cache/squid/commit/49b76711eb061f751a766c289a778caaf6086797,27 Nov 2012,"Helper protocol upgrade: add optional kv-pair field to responses

This adds an optional kv-pair field immediately following the result field
on all helper interface responses. This field contains a list of key=value
pairs where the value is a RFC1738 (URL) encoded token or a quoted string.
Quoted-string MAY contain whitespace and shell escaping.

The response syntax for all helpers becomes:
  [channel-ID SP] result [SP key-pair ...] [SP other] EOL


The parser for HelperReply is also updated to map the old AF and NA
NTLM/Negotiate response fields into the HelperReply notes:
 * ""token="" is added to supply the NTLM and Negotiate server blob/token.
 * ""user="" is added to supply the user label field.
The relevant callback handlers are updated for these helpers to make use
of these new keys.


The bundled Digest authentication helpers are all upgraded to send the new
format responses. They now use ERR for failed lookup, BH for internal
errors, and OK with ""ha1="" key added to supply a HA1 response. The handler
for Digest authentication is updated to process the new HelperReply fields
with failover the old format on Unknown result codes.

The external ACL handler is updated to pull its key=value pairs out of the
Notes list. The old parser loop becomes useless with this and is removed.
Taking with it support for several long deprecated keys ""login="", ""passwd="",
and ""error="" which are now ignored.


Any other keys MAY be sent on any response. However at this stage 2 patch
they are ignored. As are repeated / secondary values for the expected key
names, only the first instance sent in the response is used.",727,data/crawl/squid/hunk_1885.cpp,,,data/crawl/squid/old_hunk_1885.cpp,data/crawl/squid/new_hunk_1885.cpp,-1,55,,digest_request->setDenyMessage(msgNote->firstValue());,"[""addLog""]","[[], [""digest_request"", ""setDenyMessage"", ""msgNote"", ""firstValue""]]",[6639356828016837016],7003,"4 days, 16:00:00"
https://github.com/squid-cache/squid/commit/d96a5ab4cc2865be3bde9876d2681e3831495902,18 Nov 2012,"log_file_daemon: better error reporting

* report rotation errors and log file removal errors instead of silently
  ignoring them.

 Detected by Coverity Scan. Issue 740316",18,data/crawl/squid/hunk_1904.cpp,,,data/crawl/squid/old_hunk_1904.cpp,data/crawl/squid/new_hunk_1904.cpp,3,3,"fprintf(stderr, ""WARNING: %s writing %s. Attempting to recover via a log rotation.\n"",strerror(err),argv[1]);","fprintf(stderr, ""WARNING: %s writing %s. Attempting to recover via a log rotation.\n"",xstrerr(err),argv[1]);","[""updateVariable""]","[[""strerror""], [""xstrerr""]]",[-5201201212762092628],7002,"10 days, 16:00:00"
https://github.com/squid-cache/squid/commit/03f581b09946b8c0b8c383c58e4c2d42bd413ea3,14 Nov 2012,"ext_time_quota_acl: Polish and handle bad input better

* Send BH response code when username field is missing or empty on the
  input line received from Squid (or manually typed)

* Display error message on broken config file lines and skip instead of
  crashing.

* Polish out some unused assignments.

 Detected by Coverity Scan. Issues 740404, 740405, 740591",30,data/crawl/squid/hunk_1908.cpp,,,data/crawl/squid/old_hunk_1908.cpp,data/crawl/squid/new_hunk_1908.cpp,-1,22,,"fprintf(stderr, ""ERROR: missing 'period' field on line %u of '%s'.\n"", lineCount, filename);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""missing"", ""period"", ""field"", ""on"", ""line"", ""%u"", ""of"", ""%s"", ""\\n"", ""lineCount"", ""filename""]]",[-9040306044563822023],7001,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/03f581b09946b8c0b8c383c58e4c2d42bd413ea3,14 Nov 2012,"ext_time_quota_acl: Polish and handle bad input better

* Send BH response code when username field is missing or empty on the
  input line received from Squid (or manually typed)

* Display error message on broken config file lines and skip instead of
  crashing.

* Polish out some unused assignments.

 Detected by Coverity Scan. Issues 740404, 740405, 740591",30,data/crawl/squid/hunk_1908.cpp,,,data/crawl/squid/old_hunk_1908.cpp,data/crawl/squid/new_hunk_1908.cpp,-1,18,,"fprintf(stderr, ""ERROR: missing 'budget' field on line %u of '%s'.\n"", lineCount, filename);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""missing"", ""budget"", ""field"", ""on"", ""line"", ""%u"", ""of"", ""%s"", ""\\n"", ""lineCount"", ""filename""]]",[-5496400249466088807],7000,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/ed7f08683a186453fe6ed3249b0bda0a85b092fd,14 Nov 2012,"ext_file_userip_acl: Polish and missing file handling

* Display error when dictionary file is unaccessible instead of crashing.

* Polish several useless assignments out of the code.

 Detected by Coverity Scan. Issues 740402, 740403, 740589, 740590.",26,data/crawl/squid/hunk_1909.cpp,,,data/crawl/squid/old_hunk_1909.cpp,data/crawl/squid/new_hunk_1909.cpp,-1,5,,"fprintf(stderr, ""%s: FATAL: Unable to open file '%s': %s"", program_name, filename, xstrerror());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""FATAL"", ""Unable"", ""to"", ""open"", ""file"", ""%s"", ""%s"", ""program_name"", ""filename"", ""xstrerror""]]",[-20451433145615024222],6999,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/85b0d7b862f0a2dc34f97be23bbbd17566e32c81,14 Nov 2012,"digest_file_auth: Improved error handling

Adds missing error handling when pasword file fails to open for any
reason.

Skips records with missing username in password file.Displays an error
message instead of crashing.

 Detected by Coverity Scan. Issues 740400, 740401",15,data/crawl/squid/hunk_1910.cpp,,,data/crawl/squid/old_hunk_1910.cpp,data/crawl/squid/new_hunk_1910.cpp,-1,5,,"fprintf(stderr, ""digest_file_auth: cannot open password file: %s\n"", xstrerror());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""digest_file_auth"", ""cannot"", ""open"", ""password"", ""file"", ""%s\\n"", ""xstrerror""]]",[-5116394615007373690],6998,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/69c954eb754f8a939e82948ce67916ff0dc850f3,14 Nov 2012,"basic_radius_auth: Fix several issues

* abort on failed fcntl() non-blocking socket setup

* retry send() on failure. Up to retry attempt count.
  Display send() errors to cache.log.

* prevent buffer overflow on long command line arguments.

* make compiler buffer overflow checks happier with RADIUS packet 
  creation code.

 Detected by Coverity Scan. Issues 740314, 740315, 740410, 740474",23,data/crawl/squid/hunk_1912.cpp,,,data/crawl/squid/old_hunk_1912.cpp,data/crawl/squid/new_hunk_1912.cpp,-1,4,,"fprintf(stderr,""%s| ERROR: fcntl() failure: %s\n"", argv[0], xstrerror());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""fcntl"", ""failure"", ""%s\\n"", ""argv[0]"", ""xstrerror""]]",[-7027583557500576595],6997,"13 days, 8:00:00"
https://github.com/squid-cache/squid/commit/3c18a6773e7d3011ba323e4ae3f1927b9aeab494,13 Nov 2012,"basic_ncsa_auth: Fix NULL-dereference crash

When reading corrupt or broken user passwd files with missing username
data this helper can crash.

 Detected by Coverity Scan. Issue 740398",11,data/crawl/squid/hunk_1913.cpp,,,data/crawl/squid/old_hunk_1913.cpp,data/crawl/squid/new_hunk_1913.cpp,-1,12,,"fprintf(stderr, ""ERROR: Missing user name at %s line %d\n"", passwdfile, lineCount);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""Missing"", ""user"", ""name"", ""at"", ""%s"", ""line"", ""%d\\n"", ""passwdfile"", ""lineCount""]]",[-963025474436057684],6996,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cf9f0261d2588344038a89f764325b80179a7e0d,29 Apr 2013,"HttpRequest::helperNotes to NotePairs

This patch try to fix current current Notes interface and usage.
The changes done having in mind that we need:

  1) to add multiple notes with the same key
  2) to support 3 different note types: adaptation meta headers, helper notes
    and custom notes added by the system administrator
  3) to log notes using the %note formating code
  4) to use the %note formating code everywhere the formating API is used. For
    example use the %note with the request_header_add configuration parameter.
  5) to use notes with ACLs.

Details:
 - The NotePairs class is not a kid of HttpHeader class anymore. It is
   implemented from scratch to cover Helper/adaptation and custom notes needs.
     * The new class stores key:value pairs in list. It allow multiple entries
       with the same key.
     * Includes a find method which return a coma separated list of values
       for a given key
 - The HttpRequest::helperNotes is now a Refcount of a HttpPairs object
 - The HelperReply::notes is now a HttpPairs object
 - The AccessLogEntry::notes now is a RefCount of a HttpPairs object, and
   stores only the custom notes add by the ""note"" configuration parameter
 - Add the AccessLogEntry::helperNotes which is a RefCount of a HttpPairs object
   to store notes added by helpers.
   Now the notes added by adaptation or helpers are accessible to format/* code
   imediatelly after added. Before this patch are accessible only for logging.

Future work:
 - Posible merge AccessLogEntry::notes and AccessLogEntry::helperNotes
 - Performance fixes

This is a Measurement Factory project",488,data/crawl/squid/hunk_1767.cpp,,,data/crawl/squid/old_hunk_1767.cpp,data/crawl/squid/new_hunk_1767.cpp,5,5,auth_user_request->denyMessage(errNote->firstValue());,auth_user_request->denyMessage(errNote);,"[""removeVariable"", ""addVariable""]","[[""firstValue""], []]",[5958936810815123457],6995,0:00:00
https://github.com/squid-cache/squid/commit/eb6ac8089e8b4157aad32f3e4616569746ffe6f3,26 Jul 2013,"Update the http(s)_port directives protocol= parameter

... to use AnyP::ProtocolVersion for internal storage instead of opaque
string text.

This both limits the possible parameter values to one of HTTP, HTTP/1.1,
HTTPS or HTTPS/1.1 and ensures that URLs generated from that protocol
parameter value are http:// and https:// URL. 
Other values will cause Squid to abort.",107,data/crawl/squid/hunk_1696.cpp,,,data/crawl/squid/old_hunk_1696.cpp,data/crawl/squid/new_hunk_1696.cpp,3,3,"fatalf(""%s_port %s initialization error"", protocol,  s.toUrl(buf, sizeof(buf)));","fatalf(""%s_port %s initialization error"", AnyP::ProtocolType_str[transport.protocol],  s.toUrl(buf, sizeof(buf)));","[""removeVariable"", ""addVariable""]","[[""protocol""], [""AnyP"", ""ProtocolType_str[transport"", ""protocol]""]]",[-6088442366351739298],6994,0:00:00
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,131,-1,"storeAppendPrintf(sentry, ""\n             OPS SUCCESS    FAIL\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\n"", ""OPS"", ""SUCCESS"", ""FAIL\\n""], []]",[-8741072292188538015],6993,"2126 days, 0:00:00"
https://github.com/squid-cache/squid/commit/35a1b223314eddb67b631cb0224d6e03a2360c77,13 Sep 2011,"SMP Caching: Core changes, IPC primitives, Shared memory cache, and Rock Store

Core changes
------------

* Added MemObject::expectedReplySize() and used it instead of object_sz.

When deciding whether an object with a known content length can be
swapped out, do not wait until the object is completely received and its
size (mem_obj->object_sz) becomes known (while asking the store to
recheck in vain with every incoming chunk). Instead, use the known
content length, if any, to make the decision.

This optimizes the common case where the complete object is eventually
received and swapped out, preventing accumulating potentially large
objects in RAM while waiting for the end of the response. Should not
affect objects with unknown content length.

Side-effect1: probably fixes several cases of unknowingly using negative
(unknown) mem_obj->object_sz in calculations. I added a few assertions
to double check some of the remaining object_sz/objectLen() uses.

Side-effect2: When expectedReplySize() is stored on disk as StoreEntry
metadata, it may help to detect truncated entries when the writer
process dies before completing the swapout.


* Removed mem->swapout.memnode in favor of mem->swapout.queue_offset.

The code used swapout.memnode pointer to keep track of the last page
that was swapped out. The code was semi-buggy because it could reset the
pointer to NULL if no new data came in before the call to doPages().
Perhaps the code relied on the assumption that the caller will never
doPages if there is no new data, but I am not sure that assumption was
correct in all cases (it could be that I broke the calling code, of course).

Moreover, the page pointer was kept without any protection from page
disappearing during asynchronous swapout. There were ""Evil hack time""
comments discussing how the page might disappear.

Fortunately, we already have mem->swapout.queue_offset that can be fed
to getBlockContainingLocation to find the page that needs to be swapped
out. There is no need to keep the page pointer around. The
queue_offset-based math is the same so we are not adding any overheads
by using that offset (in fact, we are removing some minor computations).


* Added ""close how?"" parameter to storeClose() and friends.

The old code would follow the same path when closing swapout activity
for an aborted entry and when completing a perfectly healthy swapout. In
non-shared case, that could have been OK because the abort code would
then release the entry, removing any half-written entry from the index
and the disk (but I am not sure that release happened fast enough in
100% of cases).

When the index and disk storage is shared among workers, such
""temporary"" inconsistencies result in truncated responses being
delivered by other workers to the user because once the swapout activity
is closed, other workers can start using the entry.

By adding the ""close how?"" parameter to closing methods we allow the
core and SwapDir-specific code to handle aborted swapouts appropriately.

Since swapin code is ""read only"", we do not currently distinguish
between aborted and fully satisfied readers: The readerGone enum value
applies to both cases. If needed, the SwapDir reading code can make that
distinction by analyzing how much was actually swapped in.


* Moved ""can you store this entry?"" code to virtual SwapDir::canStore().

The old code had some of the tests in SwapDir-specific canStore()
methods and some in storeDirSelect*() methods. This resulted in
inconsistencies, code duplication, and extra calculation overheads.
Making this call virtual allows individual cache_dir types to do custom
access controls.

The same method is used for cache_dir load reporting (if it returns
true). Load management needs more work, but the current code is no worse
than the old one in this aspect, and further improvements are outside
this change scope.


* Minimized from-disk StoreEntry loading/unpacking code duplication.

Moved common (and often rather complex!) code from store modules into
storeRebuildLoadEntry, storeRebuildParseEntry, and storeRebuildKeepEntry.


* Do not set object_sz when the entry is aborted because the true object
size (HTTP reply headers + body) is not known in this case. Setting
object_sz may fool client-side code into believing that the object is
complete.

This addresses an old RBC's complaint.


* When swapout initiation fails, mark swapout decision as
MemObject::SwapOut::swImpossible. This prevents the caller code from trying to
swap out again and again because swap_status becomes SWAPOUT_NONE.

TODO: Consider add SWAPOUT_ERROR, STORE_ERROR, and similar states. It
may solve several problems where the code sees _NONE or _OK and thinks
everything is peachy when in fact there was an error.


* Call haveParsedReplyHeaders() before entry->replaceHttpReply().

HaveParsedReplyHeaders() sets the entry public key and various flags (at 
least). ReplaceHttpReply() packs reply headers, starting swapout process.
It feels natural to adjust the entry _before_ we pack/swap it, but I may be
missing some side-effects here.

The change was necessary because we started calling checkCachable() from
swapoutPossible(). If haveParsedReplyHeaders() is not called before we swap
out checks, the entry will still have the private key and will be declared
impossible to cache.


* Extracted the write-to-store step from StoreEntry::replaceHttpReply().

This allows the caller to set the reply for the entry and then update the
entry and the reply before writing them to store. For example, the server-side
haveParsedReplyHeaders() code needs to set the entry timestamps and make the
entry key public before the entry starts swapping out, but the same code also
needs access to entry->getReply() and such for timestampsSet() and similar
code to work correctly.

TODO: Calls to StoreEntry::replaceHttpReply() do not have to be modified
because replaceHttpReply() does write by default. However, it is likely that
callers other than ServerStateData::setFinalReply() should take advantage of
the new split interface because they call timestampsSet() and such after
replaceHttpReply().


* Moved SwapDir::cur_size and n_disk_objects to specific SwapDirs. Removed
updateSize().  Some cache_dirs maintain their own maps and size statistics,
making the one-size-fits-all SwapDir members inappropriate.

* A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.

* Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.

Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.

Store Config.Store.avgObjectSize in bytes to avoid repeated and error-prone
KB<->bytes conversions.


* Change Config.cacheSwap.swapDirs and StoreEntry::store() type to SwapDir.

This allows using SwapDir API without dynamic_cast.


* Always call StoreEntry::abort() instead of setting ENTRY_ABORTED manually.

* Rely on entry->abort() side-effects if ENTRY_ABORTED was set.

* Added or updated comments to better document current code.

* Added operator << for dumping StoreEntry summary into the debugging
log. Needs more work to report more info (and not report yet-unknown info).

* Fixed blocking reads that were sometimes reading from random file offsets.

Core ""disk file"" reading code assumed that if the globally stored disk.offset
matches the desired offset, there is no reason to seek. This was probably done
to reduce seek overhead between consecutive reads. Unfortunately, the disk
writing code did not know about that optimization and left F->disk.offset
unchanged after writing.

This may have worked OK for UFS if it never writes to the file it reads from,
but it does not work for store modules that do both kinds of I/O at different
offsets of the same disk file.

Eventually, implement this optimization correctly or remove disk.offset.


IPC primitives
--------------

To make SMP disk and memory caching non-blocking and correct, worker and
disker processes must asynchronously communicate with each other. We are
adding a collection of classes that support such communication.

At the base of the collection is the AtomicWordT template that uses GCC atomic
primitives such as __sync_add_and_fetch() to perform atomic operations on
integral values in memory shared by multiple Squid kids. AtomicWordT is used
to implement non-blocking shared locks, queues, store tables, and page pools.

To avoid blocking or very long searches, many operations are ""optimistic"" in
nature. For example, it is possible that an atomic store map will refuse to
allocate an entry for two processes even though a blocking implementation
would have allowed one of the processes to get the map slot. We speculate that
such conflict resolution is better than blocking locks when it comes to
caching, especially if the conflicts are rare due to large number of cache
entries, fast operations, and relatively small number of kids.


TODO: Eventually, consider breaking locks left by dead kids.



Shared Memory Cache
-------------------

* Added initial shared memory cache implementation (MemStore).

The shared memory cache keeps its own compact index of cached entries using
extended Ipc::StoreMap class (MemStoreMap). The cache also strives to keep its
Root.get() results out of the store_table except during transit.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.

Allow the user to explicitly disable shared memory caching in SMP mode via
memory_cache_shared to squid.conf. Report whether mem_cache is shared.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

TODO: Better limits/separation for cache and I/O shared memory pages.
Eventually, support shared memory caching of multi-page entries.


Rock Store
----------

Rock Store uses a single [large] database-style file per cache_dir to store
cached responses and metadata. This part of the design is similar to COSS.
Rock Store does not maintain or rely on swap.state ""log"" for recovery.
Instead, the database is scanned in the background to load entries when Squid
starts. Rock Store maintains its own index of cached entries and avoids global
store_table. All entries must be max-size or smaller.

In SMP mode, each Rock cache_dir is given a dedicated Kid processes called
""disker"". All SMP workers communicate with diskers to store misses and load
hits, using shared memory pages and atomic shared memory queues. Disker blocks
when doing disk I/O but workers do not. Any Diskers:Workers ratio is supported
so that the user can find and configure the optimal number of workers and
diskers for a given number of disks and CPU cores.

In non-SMP mode, should use good old blocking disk I/O, without any diskers,
but this has not been tested recently and probably needs more work.

Feature page: http://wiki.squid-cache.org/Features/RockStore

TODO: Disk rate limit to protect Squid from disk overload. More stats.
Multiple readers? Seek optimization? Remove known max-size requirement?",8765,data/crawl/squid/hunk_2449.cpp,,,data/crawl/squid/old_hunk_2449.cpp,data/crawl/squid/new_hunk_2449.cpp,-1,710,,"storeAppendPrintf(&e, ""Current Size: %.2f KB %.2f%%\n"",
                      currentSize() / 1024.0,
                      Math::doublePercent(currentSize(), maxSize()));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Current"", ""Size"", ""%"", ""2f"", ""KB"", ""%"", ""2f%%\\n"", ""currentSize"", ""/"", ""1024"", ""0"", ""Math"", ""doublePercent"", ""currentSize"", ""maxSize""]]",[-13220344648006792379],6992,"560 days, 16:00:00"
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5054.cpp,,,data/crawl/squid/old_hunk_5054.cpp,data/crawl/squid/new_hunk_5054.cpp,-1,3,,"digest_request->setDenyMessage(""Stale nonce"");","[""addLog""]","[[], [""digest_request"", ""setDenyMessage"", ""Stale"", ""nonce""]]",[23687127897404164687],6991,"1696 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,364,-1,"fprintf(stderr, ""No memory leaks detected\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""No"", ""memory"", ""leaks"", ""detected\\n""], []]",[9734286523197740853],6990,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,362,-1,"fprintf(stderr, ""Total leaked memory: %d\n"", leak_sum);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Total"", ""leaked"", ""memory"", ""%d\\n"", ""leak_sum""], []]",[-1090480920425176742],6989,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,355,-1,"fprintf(stderr, "" allocation %d\n"", malloc_count[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""allocation"", ""%d\\n"", ""malloc_count[B][I]""], []]",[10462376222229726382],6988,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,354,-1,"fprintf(stderr, "" size %d"", malloc_size[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""size"", ""%d"", ""malloc_size[B][I]""], []]",[23792901597658945470],6987,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,353,-1,"fprintf(stderr, "":%d"", malloc_line[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%d"", ""malloc_line[B][I]""], []]",[20829002662514788700],6986,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,352,-1,"fprintf(stderr, "" %s"", malloc_file[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""malloc_file[B][I]""], []]",[14996614139783100611],6985,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,351,-1,"fprintf(stderr, ""Leak found: %p"", malloc_ptrs[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Leak"", ""found"", ""%p"", ""malloc_ptrs[B][I]""], []]",[2325989577404035541],6984,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,321,-1,"fprintf(stderr, ""%*s%p %s:%d size %d allocation %d ... (%d)\n"",
                                depth * 2, """",
                                malloc_ptrs[B][I], malloc_file[B][I],
                                malloc_line[B][I], malloc_size[B][I],
                                malloc_count[B][I], malloc_refs[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%*s%p"", ""%s"", ""%d"", ""size"", ""%d"", ""allocation"", ""%d"", ""%d"", ""\\n"", ""depth"", ""*"", ""2"", ""malloc_ptrs[B][I]"", ""malloc_file[B][I]"", ""malloc_line[B][I]"", ""malloc_size[B][I]"", ""malloc_count[B][I]"", ""malloc_refs[B][I]""], []]",[30585478959801514631],6983,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,312,-1,"fprintf(stderr, ""=== %d bytes\n"", sum);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%d"", ""bytes\\n"", ""sum""], []]",[14207206390608598951],6982,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,302,-1,"fprintf(stderr, ""%*s%p %s:%d size %d allocation %d\n"",
                                depth, """",
                                malloc_ptrs[B][I], malloc_file[B][I],
                                malloc_line[B][I], malloc_size[B][I],
                                malloc_count[B][I]);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%*s%p"", ""%s"", ""%d"", ""size"", ""%d"", ""allocation"", ""%d\\n"", ""depth"", ""malloc_ptrs[B][I]"", ""malloc_file[B][I]"", ""malloc_line[B][I]"", ""malloc_size[B][I]"", ""malloc_count[B][I]""], []]",[28946520347337305743],6981,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,274,-1,"fprintf(stderr, "" %d\n"", xmalloc_count);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%d\\n"", ""xmalloc_count""], []]",[9382290775761783620],6980,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,272,-1,"fprintf(stderr, "" (%d %s:%d)\n"", malloc_number(p), malloc_file_name(p), malloc_line_number(p));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%d"", ""%s"", ""%d"", ""\\n"", ""malloc_number"", ""p"", ""malloc_file_name"", ""p"", ""malloc_line_number"", ""p""], []]",[14674548379399223140],6979,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/2ded5176931a7d1f472a39c200747a1f26480f27,21 Nov 2010,"failure_notify is C++-only

The global function failure_notify is tightly type dependent.

This makes sure all code which uses it is C++ and wraps it away from any
situations where the symbol may be re-defined with a C definition.

As a side-effect the malloc tracing code is shuffled into its own file.",813,data/crawl/squid/hunk_2890.cpp,,,data/crawl/squid/old_hunk_2890.cpp,data/crawl/squid/new_hunk_2890.cpp,264,-1,"fprintf(stderr, ""%c%8p size=%5d/%d acc=%5d/%d mallinfo=%5d/%d %s:%d %s"",
                sign > 0 ? '+' : '-', p,
                (int) xmalloc_total - last_total, (int) xmalloc_total,
                (int) accounted - last_accounted, (int) accounted,
                (int) mi - last_mallinfo, (int) mi,
                xmalloc_file, xmalloc_line, xmalloc_func);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%c%8p"", ""size"", ""%5d/%d"", ""acc"", ""%5d/%d"", ""mallinfo"", ""%5d/%d"", ""%s"", ""%d"", ""%s"", ""sign"", ""0"", ""p"", ""int"", ""xmalloc_total"", ""last_total"", ""int"", ""xmalloc_total"", ""int"", ""accounted"", ""last_accounted"", ""int"", ""accounted"", ""int"", ""mi"", ""last_mallinfo"", ""int"", ""mi"", ""xmalloc_file"", ""xmalloc_line"", ""xmalloc_func""], []]",[125373654210938505036],6978,"807 days, 16:00:00"
https://github.com/squid-cache/squid/commit/a23223bf7fb54242ade248d5be8376f7527cc881,25 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Ssl::PeerConnector class

This patch investigates the new Ssl::PeerConnector class. This class connects
Squid client-side to a SSL cache_peer or SSL server. It is used by 
TunnelStateData and FwdState to initiate and establish the SSL connection.
This class handles peer certificate validation.

The caller receives a call back with PeerConnectorAnswer. In the SSL connection
is not established because of an error, an error object suitable for error
response generation is attached to PeerConnectorAnser

The Ssl::PeerConnector class includes the old SSL initialization code from
FwdState class.

This is a Measurement Factory project",1239,data/crawl/squid/hunk_1520.cpp,,,data/crawl/squid/old_hunk_1520.cpp,data/crawl/squid/new_hunk_1520.cpp,-1,527,,"buf.Printf("" %s%u]"", id.Prefix, id.value);","[""addLog""]","[[], [""buf"", ""Printf"", ""%s%u]"", ""id"", ""Prefix"", ""id"", ""value""]]",[-848067901940049833],6977,"22 days, 16:00:00"
https://github.com/squid-cache/squid/commit/a23223bf7fb54242ade248d5be8376f7527cc881,25 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Ssl::PeerConnector class

This patch investigates the new Ssl::PeerConnector class. This class connects
Squid client-side to a SSL cache_peer or SSL server. It is used by 
TunnelStateData and FwdState to initiate and establish the SSL connection.
This class handles peer certificate validation.

The caller receives a call back with PeerConnectorAnswer. In the SSL connection
is not established because of an error, an error object suitable for error
response generation is attached to PeerConnectorAnser

The Ssl::PeerConnector class includes the old SSL initialization code from
FwdState class.

This is a Measurement Factory project",1239,data/crawl/squid/hunk_1520.cpp,,,data/crawl/squid/old_hunk_1520.cpp,data/crawl/squid/new_hunk_1520.cpp,-1,526,,"buf.Printf("" FD %d"", serverConn->fd);","[""addLog""]","[[], [""buf"", ""Printf"", ""FD"", ""%d"", ""serverConn"", ""fd""]]",[14674879574681093913],6976,"22 days, 16:00:00"
https://github.com/squid-cache/squid/commit/a23223bf7fb54242ade248d5be8376f7527cc881,25 Apr 2014,"author: Alex Rousskov <rousskov@measurement-factory.com>, Christos Tsantilas <chtsanti@users.sourceforge.net>
Ssl::PeerConnector class

This patch investigates the new Ssl::PeerConnector class. This class connects
Squid client-side to a SSL cache_peer or SSL server. It is used by 
TunnelStateData and FwdState to initiate and establish the SSL connection.
This class handles peer certificate validation.

The caller receives a call back with PeerConnectorAnswer. In the SSL connection
is not established because of an error, an error object suitable for error
response generation is attached to PeerConnectorAnser

The Ssl::PeerConnector class includes the old SSL initialization code from
FwdState class.

This is a Measurement Factory project",1239,data/crawl/squid/hunk_1520.cpp,,,data/crawl/squid/old_hunk_1520.cpp,data/crawl/squid/new_hunk_1520.cpp,-1,523,,"buf.Printf(""%s"",stopReason);","[""addLog""]","[[], [""buf"", ""Printf"", ""%s"", ""stopReason""]]",[-1074088487245675513],6975,"22 days, 16:00:00"
https://github.com/squid-cache/squid/commit/0309fc406832ea1103fb4172cadab9f6d6abe8cb,28 May 2014,Cleanup: de-duplicate handling of auth_param 'children',30,data/crawl/squid/hunk_1469.cpp,,,data/crawl/squid/old_hunk_1469.cpp,data/crawl/squid/new_hunk_1469.cpp,5,-1,"storeAppendPrintf(entry, ""%s %s keep_alive %s\n"", name, ""ntlm"", keep_alive ? ""on"" : ""off"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""keep_alive"", ""%s\\n"", ""name"", ""ntlm"", ""keep_alive"", ""on"", ""off""], []]",[-2570647197035317809],6974,16:00:00
https://github.com/squid-cache/squid/commit/0309fc406832ea1103fb4172cadab9f6d6abe8cb,28 May 2014,Cleanup: de-duplicate handling of auth_param 'children',30,data/crawl/squid/hunk_1468.cpp,,,data/crawl/squid/old_hunk_1468.cpp,data/crawl/squid/new_hunk_1468.cpp,5,-1,"storeAppendPrintf(entry, ""%s %s keep_alive %s\n"", name, ""negotiate"", keep_alive ? ""on"" : ""off"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""keep_alive"", ""%s\\n"", ""name"", ""negotiate"", ""keep_alive"", ""on"", ""off""], []]",[-3405918770028475795],6973,16:00:00
https://github.com/squid-cache/squid/commit/7f06a3d8d7e9569685ac575db1a0f6cf5681024a,22 Apr 2014,"SBuf: convert HttpMethod internals

Update the internal string/image representation of an HTTP
method to be an SBuf string. Including the global registered
methods index.

Also,
 * remove RequestMethodStr() wrapper functions
 * remove remainders of obsolete extension_methods feature
 * remove remainders of obsolete RequestMethodStr[] array
 * fix potential cache key error from http/MethodType.h
   enum ordering.
 * polished many debugs involving method",289,data/crawl/squid/hunk_1521.cpp,,,data/crawl/squid/old_hunk_1521.cpp,data/crawl/squid/new_hunk_1521.cpp,3,3,"mb->Printf(""\t%s %s\n"",
               RequestMethodStr(method), logUri());","mb->Printf(""\t"" SQUIDSBUFPH "" %s\n"", SQUIDSBUFPRINT(method.image()), logUri());","[""updateVariable"", ""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""\\t%s"", ""RequestMethodStr""], [""\\t"", ""SQUIDSBUFPH"", ""SQUIDSBUFPRINT"", ""image""]]",[10501284035843663233],6972,"24 days, 16:00:00"
https://github.com/squid-cache/squid/commit/00d0ce87e4fb95bde86ebb57dc394554b06b169e,21 Jun 2014,"Support for PROXY protocol version 1

This protocol enables other proxies to easily relay indirect client IP
and port details without altering the HTTP (or other) protocol within the
connection.",234,data/crawl/squid/hunk_1367.cpp,,,data/crawl/squid/old_hunk_1367.cpp,data/crawl/squid/new_hunk_1367.cpp,-1,89,,proxyProtocolError(!tok.atEnd());,"[""addLog""]","[[], [""proxyProtocolError"", ""tok"", ""atEnd""]]",[-5544144393304699248],6971,0:00:00
https://github.com/squid-cache/squid/commit/3cf8f5c1d8e2de4843abae4b59025e9f683d653d,11 Feb 2014,"Remove Vector, Stack and related unit tests",716,data/crawl/squid/hunk_1614.cpp,,,data/crawl/squid/old_hunk_1614.cpp,data/crawl/squid/new_hunk_1614.cpp,438,-1,"fatal (""domain error"");",,"[""removeLog""]","[[""fatal"", ""domain"", ""error""], []]",[-11742947046656841780],6970,"44 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1328.cpp,,,data/crawl/squid/old_hunk_1328.cpp,data/crawl/squid/new_hunk_1328.cpp,160,-1,"mb.Printf(""%i %s\r\n"", code, msg);",,"[""removeLog""]","[[""mb"", ""Printf"", ""%i"", ""%s\\r\\n"", ""code"", ""msg""], []]",[-27668380407176316555],6969,0:00:00
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,1097,,"mb.Printf(""%i %s\r\n"", header.getInt(HDR_FTP_STATUS),
                  (reason ? reason : 0));","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""%s\\r\\n"", ""header"", ""getInt"", ""HDR_FTP_STATUS"", ""reason"", ""reason"", ""0""]]",[13051058726262438831],6968,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,1091,,"mb.Printf(""%s\r\n"", raw.termedBuf());","[""addLog""]","[[], [""mb"", ""Printf"", ""%s\\r\\n"", ""raw"", ""termedBuf""]]",[23498504526796650154],6967,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,1002,,"mb.Printf(""%i %s\r\n"", scode, reason);","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""%s\\r\\n"", ""scode"", ""reason""]]",[9588580236911371895],6966,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,994,,"mb.Printf(""%i-Description: %s\r\n"", scode, desc.termedBuf());","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""Description"", ""%s\\r\\n"", ""scode"", ""desc"", ""termedBuf""]]",[10157503322206665686],6965,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,992,,"mb.Printf(""%i-Information: %s\r\n"", scode, info.termedBuf());","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""Information"", ""%s\\r\\n"", ""scode"", ""info"", ""termedBuf""]]",[16370919095229531315],6964,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,981,,"mb.Printf(""%i-Error: (%d) %s\r\n"", scode,
                  request->errDetail,
                  strerror(request->errDetail));","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""Error"", ""%d"", ""%s\\r\\n"", ""scode"", ""request"", ""errDetail"", ""strerror"", ""request"", ""errDetail""]]",[26435219459047061136],6963,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,977,,"mb.Printf(""%i-%s\r\n"", scode, errorPageName(request->errType));","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""%s\\r\\n"", ""scode"", ""errorPageName"", ""request"", ""errType""]]",[8675476368997430674],6962,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,960,,"mb.Printf(""229 Entering Extended Passive Mode (|||%u|)\r\n"", localPort);","[""addLog""]","[[], [""mb"", ""Printf"", ""229"", ""Entering"", ""Extended"", ""Passive"", ""Mode"", ""%u"", ""\\r\\n"", ""localPort""]]",[-19738588075219403345],6961,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,948,,"writeCustomReply(502, ""Cannot connect to server"", reply);","[""addLog""]","[[], [""writeCustomReply"", ""502"", ""Cannot"", ""connect"", ""to"", ""server"", ""reply""]]",[-10234473869156531835],6960,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,939,,"writeCustomReply(200, ""EPRT successfully converted to PASV."");","[""addLog""]","[[], [""writeCustomReply"", ""200"", ""EPRT"", ""successfully"", ""converted"", ""to"", ""PASV""]]",[-4103722366908748665],6959,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,935,,"writeCustomReply(502, ""Server does not support PASV (converted from EPRT)"", reply);","[""addLog""]","[[], [""writeCustomReply"", ""502"", ""Server"", ""does"", ""not"", ""support"", ""PASV"", ""converted"", ""from"", ""EPRT"", ""reply""]]",[-14841888926432143417],6958,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,891,,"writeCustomReply(226, ""Transfer complete"");","[""addLog""]","[[], [""writeCustomReply"", ""226"", ""Transfer"", ""complete""]]",[339440345684861903],6957,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,872,,"writeCustomReply(426, ""Data connection error; transfer aborted"");","[""addLog""]","[[], [""writeCustomReply"", ""426"", ""Data"", ""connection"", ""error"", ""transfer"", ""aborted""]]",[-12338575398840472949],6956,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,838,,"writeCustomReply(425, ""Data connection is not established."");","[""addLog""]","[[], [""writeCustomReply"", ""425"", ""Data"", ""connection"", ""is"", ""not"", ""established""]]",[-8935027388215679979],6955,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,805,,"writeCustomReply(200, ""PORT successfully converted to PASV."");","[""addLog""]","[[], [""writeCustomReply"", ""200"", ""PORT"", ""successfully"", ""converted"", ""to"", ""PASV""]]",[4703057921438157095],6954,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,801,,"writeCustomReply(502, ""Server does not support PASV (converted from PORT)"", reply);","[""addLog""]","[[], [""writeCustomReply"", ""502"", ""Server"", ""does"", ""not"", ""support"", ""PASV"", ""converted"", ""from"", ""PORT"", ""reply""]]",[-6035108638085237657],6953,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,789,,"mb.Printf(""227 Entering Passive Mode (%s,%i,%i).\r\n"",
              addr,
              static_cast<int>(localPort / 256),
              static_cast<int>(localPort % 256));","[""addLog""]","[[], [""mb"", ""Printf"", ""227"", ""Entering"", ""Passive"", ""Mode"", ""%s"", ""%i"", ""%i"", ""\\r\\n"", ""addr"", ""static_cast"", ""int"", ""localPort"", ""/"", ""256"", ""static_cast"", ""int"", ""localPort"", ""%"", ""256""]]",[-56978986730655189650],6952,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,764,,"writeCustomReply(502, ""Server does not support PASV"", reply);","[""addLog""]","[[], [""writeCustomReply"", ""502"", ""Server"", ""does"", ""not"", ""support"", ""PASV"", ""reply""]]",[-16041733232403737805],6951,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,691,,"writeCustomReply(502, ""Server does not support FEAT"", reply);","[""addLog""]","[[], [""writeCustomReply"", ""502"", ""Server"", ""does"", ""not"", ""support"", ""FEAT"", ""reply""]]",[-20693818389631369539],6950,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,623,,"request->header.putStr(HDR_TRANSFER_ENCODING, ""chunked"");","[""addLog""]","[[], [""request"", ""header"", ""putStr"", ""HDR_TRANSFER_ENCODING"", ""chunked""]]",[-5293700204190662525],6949,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,622,,"request->header.putStr(HDR_EXPECT, ""100-continue"");","[""addLog""]","[[], [""request"", ""header"", ""putStr"", ""HDR_EXPECT"", ""100"", ""continue""]]",[3071203418587731188],6948,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,485,,"mb.Printf(""%i \r\n"", code);","[""addLog""]","[[], [""mb"", ""Printf"", ""%i"", ""\\r\\n"", ""code""]]",[7567834424575262437],6947,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,483,,"mb.Printf("" Server reply:\r\n"");","[""addLog""]","[[], [""mb"", ""Printf"", ""Server"", ""reply"", ""\\r\\n""]]",[-5456764747709439034],6946,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1329.cpp,,,data/crawl/squid/old_hunk_1329.cpp,data/crawl/squid/new_hunk_1329.cpp,-1,346,,"writeCustomReply(451, ""Internal error"");","[""addLog""]","[[], [""writeCustomReply"", ""451"", ""Internal"", ""error""]]",[-2750567740350901701],6945,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/43446566e3092dc7969e72f22b6c1362a4701784,07 Aug 2014,"Fixed HttpHdr::Private/NoCache(v) implementations and optimized their API.

These calls now avoid assertions and extra trailing commas when called with
empty names. The API now allows calling with a String() object, but still
needs more polishing work.


Moved common code from Ftp::Server::setReply and Ftp::Relay::createHttpReply()
into Ftp::HttpReplyWrapper().


Also removed the last non-job callbak from Ftp::Client, polished and synced
new FTP comments with the modern client/server/gateway/relay terminology, as
well as minimized changes compared to trunk.",152,data/crawl/squid/hunk_1265.cpp,,,data/crawl/squid/old_hunk_1265.cpp,data/crawl/squid/new_hunk_1265.cpp,-1,22,,"header.putStr(HDR_FTP_REASON, ftpReason);","[""addLog""]","[[], [""header"", ""putStr"", ""HDR_FTP_REASON"", ""ftpReason""]]",[4874593275812037100],6944,"7 days, 16:00:00"
https://github.com/squid-cache/squid/commit/35f269984076c6649d5fed3e52592b60c2671e6b,23 Apr 2007,"Fix ""store_status == STORE_PENDING"" assertion in FTP with large responses

An FTP object that exceeds reply_body_max_size leads to an assertion
failure.  The StoreEntry is aborted by the call to appendSuccessHeader(),
but the abort callback is delayed due to using events.  We need to
check for ENTRY_ABORTED (again) right after the appendSuccessHeader()
call -- yuck.",11,data/crawl/squid/hunk_4648.cpp,,,data/crawl/squid/old_hunk_4648.cpp,data/crawl/squid/new_hunk_4648.cpp,-1,8,,"abortTransaction(""entry aborted after calling appendSuccessHeader()"");","[""addLog""]","[[], [""abortTransaction"", ""entry"", ""aborted"", ""after"", ""calling"", ""appendSuccessHeader""]]",[-31140353411621825280],6943,"1783 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/hunk_4701.cpp,,,data/crawl/squid/old_hunk_4701.cpp,data/crawl/squid/new_hunk_4701.cpp,-1,3,,"abortTransaction(""entry aborted during dataRead"");","[""addLog""]","[[], [""abortTransaction"", ""entry"", ""aborted"", ""during"", ""dataRead""]]",[-14041970511130099506],6942,"1794 days, 8:00:00"
https://github.com/squid-cache/squid/commit/4b4686c911f1917b70cf2d0d37f75a04296181ce,22 Sep 2011,"Bug 3351: FTP timeout causing ""store_status == STORE_PENDING"" assertion

If the entry was aborted while we were timing out, do not attempt to
write the timeout error message to it.

TODO: Other FTP code should call abortOnBadEntry() instead of testing for
ENTRY_ABORTED and calling abortTransaction().",3,data/crawl/squid/hunk_2432.cpp,,,data/crawl/squid/old_hunk_2432.cpp,data/crawl/squid/new_hunk_2432.cpp,-1,3,,"(abortOnBadEntry(""entry went bad while waiting for a timeout"");","[""addLog""]","[[], [""abortOnBadEntry"", ""entry"", ""went"", ""bad"", ""while"", ""waiting"", ""for"", ""a"", ""timeout""]]",[-6015737064028494462],6941,"707 days, 16:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1667.cpp,,,data/crawl/squid/old_hunk_1667.cpp,data/crawl/squid/new_hunk_1667.cpp,-1,233,,"mb.Printf(""EPSV ALL%s"", Ftp::crlf);","[""addLog""]","[[], [""mb"", ""Printf"", ""EPSV"", ""ALL%s"", ""Ftp"", ""crlf""]]",[6592608173729305072],6940,"191 days, 16:00:00"
https://github.com/squid-cache/squid/commit/000e664babaf79d53f8f0a009662decebebf5c15,04 Nov 2013,"Initial support for gatewaying FTP EPRT and EPSV commands.

Client side validates the IPv6-friendly commands, but the server side
independently decides which of the four standard data connection establishment
commands to use. In practice only PASV and EPSV commands are sent because
Squid still does not support active FTP connections on the server side.

Moved EPSV- and some PASV-handling code from proxy-specific ftp.cc into
general FtpServer.cc for the client-side gateway code to reuse.",932,data/crawl/squid/hunk_1667.cpp,,,data/crawl/squid/old_hunk_1667.cpp,data/crawl/squid/new_hunk_1667.cpp,-1,140,,"mb.Printf(""EPRT |%d|%s|%d|%s"",
              ( data.conn->local.isIPv6() ? 2 : 1 ),
              data.conn->local.toStr(buf,MAX_IPSTRLEN),
              comm_local_port(data.conn->fd), Ftp::crlf );","[""addLog""]","[[], [""mb"", ""Printf"", ""EPRT"", ""%d"", ""%s"", ""%d"", ""%s"", ""data"", ""conn"", ""local"", ""isIPv6"", ""2"", ""1"", ""data"", ""conn"", ""local"", ""toStr"", ""buf"", ""MAX_IPSTRLEN"", ""comm_local_port"", ""data"", ""conn"", ""fd"", ""Ftp"", ""crlf""]]",[7409817402308099475],6939,"191 days, 16:00:00"
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/hunk_4703.cpp,,,data/crawl/squid/old_hunk_4703.cpp,data/crawl/squid/new_hunk_4703.cpp,-1,4,,">abortTransaction(""zero control reply read"");","[""addLog""]","[[], [""abortTransaction"", ""zero"", ""control"", ""reply"", ""read""]]",[-15868666021114446515],6938,"1794 days, 8:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1326.cpp,,,data/crawl/squid/old_hunk_1326.cpp,data/crawl/squid/new_hunk_1326.cpp,33,-1,"stopReceiving(""virgin request body consumer aborted"");",,"[""removeLog""]","[[""stopReceiving"", ""virgin"", ""request"", ""body"", ""consumer"", ""aborted""], []]",[7986465492880148666],6937,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1325.cpp,,,data/crawl/squid/old_hunk_1325.cpp,data/crawl/squid/new_hunk_1325.cpp,11,-1,"rep->header.putStr(HDR_CONNECTION, ""keep-alive"");",,"[""removeLog""]","[[""rep"", ""header"", ""putStr"", ""HDR_CONNECTION"", ""keep"", ""alive""], []]",[6436086023878567355],6936,"9 days, 16:00:00"
https://github.com/squid-cache/squid/commit/8f5ad4487a052db1dddea37d5867b8844e69dce4,10 Aug 2014,"Changes in response to Amos' squid-dev review dated 2014/08/08.

See inner commit messages for details.",312,data/crawl/squid/hunk_1259.cpp,,,data/crawl/squid/old_hunk_1259.cpp,data/crawl/squid/new_hunk_1259.cpp,-1,21,,"fatalf(""%s directive does not support protocol="" SQUIDSBUFPH ""\n"", cfg_directive, SQUIDSBUFPRINT(value));","[""addLog""]","[[], [""fatalf"", ""%s"", ""directive"", ""does"", ""not"", ""support"", ""protocol"", ""SQUIDSBUFPH"", ""\\n"", ""cfg_directive"", ""SQUIDSBUFPRINT"", ""value""]]",[-556277199634202520],6935,"5 days, 16:00:00"
https://github.com/squid-cache/squid/commit/1689cdbc1355cd1281cd3bdc791c1b13cec462fe,12 Aug 2014,Performance optimizations and polish,92,data/crawl/squid/hunk_1233.cpp,,,data/crawl/squid/old_hunk_1233.cpp,data/crawl/squid/new_hunk_1233.cpp,-1,18,,"proxyProtocolError(in.buf.length() > 107? ""PROXY/1.0 error: missing CRLF"":NULL);","[""addLog""]","[[], [""proxyProtocolError"", ""in"", ""buf"", ""length"", ""107"", ""PROXY/1"", ""0"", ""error"", ""missing"", ""CRLF"", ""NULL""]]",[27540090278766768736],6934,"7 days, 8:00:00"
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1328.cpp,,,data/crawl/squid/old_hunk_1328.cpp,data/crawl/squid/new_hunk_1328.cpp,414,-1,"filteredHeader.putStr(HDR_FTP_PRE, buf);",,"[""removeLog""]","[[""filteredHeader"", ""putStr"", ""HDR_FTP_PRE"", ""buf""], []]",[-4621350245977610158],6933,"39 days, 16:00:00"
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/hunk_1225.cpp,,,data/crawl/squid/old_hunk_1225.cpp,data/crawl/squid/new_hunk_1225.cpp,-1,3,,"csd->abortRequestParsing(""error:method-not-allowed"");","[""addLog""]","[[], [""csd"", ""abortRequestParsing"", ""error"", ""method"", ""not"", ""allowed""]]",[7202450654319138192],6932,"38 days, 8:00:00"
https://github.com/squid-cache/squid/commit/685277d8fcb4ba6b1f1a66a634937764c31744d4,19 Dec 2014,"negotiate_kerberos_auth: MEMORY keytab and replay cache support

1) Checks for MEMORY: keytab support and reads the keytab from disk into
   MEMORY to improve performance (i.e. read keytab only at startup and
   nerver again)

2) Add option for replay cache type. Allows to set replay cache to none
   to improve performance ( may reduce security a bit )

3) Add option for replay cache directory.  If /var/tmp is not the best
   location you can choose a different location.",492,data/crawl/squid/hunk_1140.cpp,,,data/crawl/squid/old_hunk_1140.cpp,data/crawl/squid/new_hunk_1140.cpp,-1,80,,"fprintf(stderr, ""%s| %s: ERROR: krb5_read_keytab: %s\n"",
                        LogTime(), PROGRAM, strerror(retval));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""ERROR"", ""krb5_read_keytab"", ""%s\\n"", ""LogTime"", ""PROGRAM"", ""strerror"", ""retval""]]",[19178999263170707185],6931,0:00:00
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3292.cpp,,,data/crawl/squid/old_hunk_3292.cpp,data/crawl/squid/new_hunk_3292.cpp,4,-1,"puts(""ERR"");",,"[""removeLog""]","[[""puts"", ""ERR""], []]",[-1091395453046515340],6930,"1094 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3334.cpp,,,data/crawl/squid/old_hunk_3334.cpp,data/crawl/squid/new_hunk_3334.cpp,118,-1,"digest_request->setDenyMessage(""Stale nonce"");",,"[""removeLog""]","[[""digest_request"", ""setDenyMessage"", ""Stale"", ""nonce""], []]",[-23687127897404164687],6929,"1128 days, 16:00:00"
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3337.cpp,,,data/crawl/squid/old_hunk_3337.cpp,data/crawl/squid/new_hunk_3337.cpp,56,-1,"httpHeaderPutStrf(&rep->header, type, ""Negotiate %s"", server_blob);",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""&rep"", ""header"", ""type"", ""Negotiate"", ""%s"", ""server_blob""], []]",[12596721475175719257],6928,"681 days, 8:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_1003.cpp,,,data/crawl/squid/old_hunk_1003.cpp,data/crawl/squid/new_hunk_1003.cpp,11,6,"output->Printf(""\t\tflags:"");","output->append(""\t\tflags:"", 8);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""8""]]",[-16152299998131696704],6927,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_990.cpp,,,data/crawl/squid/old_hunk_990.cpp,data/crawl/squid/new_hunk_990.cpp,13,12,"mb.Printf(""%s"", name);","mb.append(name, strlen(name));","[""addLog"", ""removeContent"", ""addVariable"", ""removeLog""]","[[""Printf"", ""%s""], [""append"", ""strlen"", ""name""]]",[-29491536403146589910],6926,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_990.cpp,,,data/crawl/squid/old_hunk_990.cpp,data/crawl/squid/new_hunk_990.cpp,11,10,"mb.Printf(""%s"", dir);",strlen(dir);,"[""addLog"", ""removeContent"", ""removeLog""]","[[""mb"", ""Printf"", ""%s""], [""strlen""]]",[-16424019549386861376],6925,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_976.cpp,,,data/crawl/squid/old_hunk_976.cpp,data/crawl/squid/new_hunk_976.cpp,3,3,"mb.Printf(""%s"", sign_mb->content());","mb.append(sign_mb->content(), sign_mb->contentSize());","[""updateLog"", ""removeContent"", ""addVariable""]","[[""Printf"", ""%s""], [""append"", ""sign_mb"", ""contentSize""]]",[-18784583862098719768],6924,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_974.cpp,,,data/crawl/squid/old_hunk_974.cpp,data/crawl/squid/new_hunk_974.cpp,3,3,"mb.Printf(""%d"", (int) request->port);","mb.appendf(""%u"", request->port);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""Printf"", ""%d"", ""int""], [""appendf"", ""%u""]]",[7152046587264163609],6923,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_970.cpp,,,data/crawl/squid/old_hunk_970.cpp,data/crawl/squid/new_hunk_970.cpp,14,14,"mb.Printf(""[No Error]"");","mb.append(""[No Error]"", 10);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""10""]]",[-16146027967618661656],6922,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_970.cpp,,,data/crawl/squid/old_hunk_970.cpp,data/crawl/squid/new_hunk_970.cpp,3,3,"mb.Printf(""[No Error Detail]"");","mb.append(""[No Error Detail]"", 17);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""17""]]",[-16146027967618661651],6921,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_968.cpp,,,data/crawl/squid/old_hunk_968.cpp,data/crawl/squid/new_hunk_968.cpp,17,17,"str.Printf(""FTP Msg: "");","str.append(""FTP Msg: "", 9);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""9""]]",[-16152299998003696321],6920,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_967.cpp,,,data/crawl/squid/old_hunk_967.cpp,data/crawl/squid/new_hunk_967.cpp,35,35,"str.Printf(""HTTP Request:\r\n"");","str.append(""HTTP Request:\r\n"", 15);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""15""]]",[-16146027967618661653],6919,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_967.cpp,,,data/crawl/squid/old_hunk_967.cpp,data/crawl/squid/new_hunk_967.cpp,14,14,"str.Printf(""Err: [none]\r\n"");","str.append(""Err: [none]\r\n"", 13);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""13""]]",[-16146027967618661655],6918,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_953.cpp,,,data/crawl/squid/old_hunk_953.cpp,data/crawl/squid/new_hunk_953.cpp,4,3,"buf.Printf(""%s"",stopReason);","buf.appendf(""Stopped, reason:%s"", stopReason);","[""updateLog"", ""updateContent""]","[[""Printf""], [""appendf"", ""Stopped"", ""reason""]]",[-5120900317027605544],6917,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_953.cpp,,,data/crawl/squid/old_hunk_953.cpp,data/crawl/squid/new_hunk_953.cpp,3,-1,"buf.Printf(""Stopped, reason:"");",,"[""removeLog""]","[[""buf"", ""Printf"", ""Stopped"", ""reason""], []]",[-2846851238253798841],6916,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_952.cpp,,,data/crawl/squid/old_hunk_952.cpp,data/crawl/squid/new_hunk_952.cpp,6,6,"buf.Printf(""Stopped"");","buf.append(""Stopped"", 7);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""7""]]",[-16152299998259697091],6915,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_948.cpp,,,data/crawl/squid/old_hunk_948.cpp,data/crawl/squid/new_hunk_948.cpp,11,11,"buf.Printf(""Allow: 206\r\n"");","buf.append(""Allow: 206\r\n"", 12);","[""updateLog"", ""addContent""]","[[""Printf""], [""append"", ""12""]]",[-16146027967618661654],6914,"45 days, 0:00:00"
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6244.cpp,,,data/crawl/squid/old_hunk_6244.cpp,data/crawl/squid/new_hunk_6244.cpp,174,-1,"storeAppendPrintf(sentry, ""   C = CLOSING\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""C"", ""CLOSING\\n""], []]",[-14263333398775378258],6913,"4054 days, 16:00:00"
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6244.cpp,,,data/crawl/squid/old_hunk_6244.cpp,data/crawl/squid/new_hunk_6244.cpp,173,-1,"storeAppendPrintf(sentry, ""   B = BUSY\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""B"", ""BUSY\\n""], []]",[-5774997970090305024],6912,"4054 days, 16:00:00"
https://github.com/squid-cache/squid/commit/4ac1880a33a31144592a93d95fff715d67a6bf05,09 Jul 2015,make dump_peer_options clearer (and address CID 740350),26,data/crawl/squid/hunk_667.cpp,,,data/crawl/squid/old_hunk_667.cpp,data/crawl/squid/new_hunk_667.cpp,11,17,"storeAppendPrintf(sentry, ""%sonly-clr"",(doneopts++>0?"","":""=""));","storeAppendPrintf(sentry, ""%sonly-clr"",(doneopts?"","":""=""));","[""removeVariable"", ""removeContent""]","[[""0""], []]",[-6144018481],6911,0:00:00
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,10,-1,"storeAppendPrintf(e, "" key=%s"", s->key);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""key"", ""%s"", ""s"", ""key""], []]",[-22464641105818714367],6910,"1768 days, 8:00:00"
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_631.cpp,,,data/crawl/squid/old_hunk_631.cpp,data/crawl/squid/new_hunk_631.cpp,3,3,">header.putStr(HDR_ACCEPT, ""text/plain"");",">header.putStr(Http::HdrType::ACCEPT, ""text/plain"");","[""removeVariable"", ""addVariable""]","[[""HDR_ACCEPT""], [""Http"", ""HdrType"", ""ACCEPT""]]",[5411025994465438704],6909,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_628.cpp,,,data/crawl/squid/old_hunk_628.cpp,data/crawl/squid/new_hunk_628.cpp,7,7,"rep->header.putStr(HDR_VARY, vary.termedBuf());","rep->header.putStr(Http::HdrType::VARY, vary.termedBuf());","[""removeVariable"", ""addVariable""]","[[""HDR_VARY""], [""Http"", ""HdrType"", ""VARY""]]",[8928636869784475108],6908,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_623.cpp,,,data/crawl/squid/old_hunk_623.cpp,data/crawl/squid/new_hunk_623.cpp,7,7,"request->header.putStr(HDR_TRANSFER_ENCODING, ""chunked"");","request->header.putStr(Http::HdrType::TRANSFER_ENCODING, ""chunked"");","[""removeVariable"", ""addVariable""]","[[""HDR_TRANSFER_ENCODING""], [""Http"", ""HdrType"", ""TRANSFER_ENCODING""]]",[8442495673730136598],6907,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_632.cpp,,,data/crawl/squid/old_hunk_632.cpp,data/crawl/squid/new_hunk_632.cpp,3,3,"rep->header.putStr(HDR_LOCATION, min_u->url);","rep->header.putStr(Http::HdrType::LOCATION, min_u->url);","[""removeVariable"", ""addVariable""]","[[""HDR_LOCATION""], [""Http"", ""HdrType"", ""LOCATION""]]",[-1917803309236843682],6906,0:00:00
https://github.com/squid-cache/squid/commit/aadbbd7d080ef1662bfd7ea568edbb29f25fdd72,30 Dec 2014,"Crypto-NG: Base64 crypto replacement

The existing Squid base64 code had ambiguous copyright licensing. In
particular it only referenced a dead URL for source copyright
ownership details. In all likelihood this was for an Open Source
implementation, but we dont have sufficient record of the original
license terms to be certain without a long investigation.

It has also been heavily modified and customized over the decades
since importing whih complicates the issue a lot.

It also does not match any of the common industry context-based API
patterns for encoders/decoders.


This patch replaces that logic with GPLv2 licensed code from the
Nettle crypto library. Either linking the library dynamically or in
its absence embedding the logic via our libmiscencoding library.

It also updates all code to the new API, and as a byproduct removes
several layers of deprecated wrapper functions which have grown in
over the years.",839,data/crawl/squid/hunk_1091.cpp,,,data/crawl/squid/old_hunk_1091.cpp,data/crawl/squid/new_hunk_1091.cpp,-1,20,,"fprintf(stdout, ""BH Invalid negotiate request token\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""Invalid"", ""negotiate"", ""request"", ""token\\n""]]",[-23985582874567925232],6905,"85 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,414,,"fprintf(stdout, ""BH Invalid negotiate request\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""Invalid"", ""negotiate"", ""request\\n""]]",[-18267803172806194414],6904,"887 days, 8:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,337,,"fprintf(stdout, ""BH Oversized message\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""Oversized"", ""message\\n""]]",[-13401837287885866005],6903,"887 days, 8:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,343,,"fprintf(stderr, ""%s| %s: Got '%s' from squid (length: %d).\n"",
		LogTime(), PROGRAM, buf, length);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Got"", ""%s"", ""from"", ""squid"", ""length"", ""%d"", ""\\n"", ""LogTime"", ""PROGRAM"", ""buf"", ""length""]]",[-3528819456225505226],6902,"887 days, 8:00:00"
https://github.com/squid-cache/squid/commit/14e9491b4913f476c7a1f56e3a2ebcebfb5323f8,11 Mar 2013,Many typos fixed,17,data/crawl/squid/hunk_1777.cpp,,,data/crawl/squid/old_hunk_1777.cpp,data/crawl/squid/new_hunk_1777.cpp,3,3,"fatal(""Squid has attempted to read data from memory that is not present. This is an indication of of (pre-3.0) code that hasn't been updated to deal with sparse objects in memory. Squid should coredump.allowing to review the cause. Immediately preceeding this message is a dump of the available data in the format [start,end). The [ means from the value, the ) means up to the value. I.e. [1,5) means that there are 4 bytes of data, at offsets 1,2,3,4.\n"");","fatal(""Squid has attempted to read data from memory that is not present. This is an indication of of (pre-3.0) code that hasn't been updated to deal with sparse objects in memory. Squid should coredump.allowing to review the cause. Immediately preceding this message is a dump of the available data in the format [start,end). The [ means from the value, the ) means up to the value. I.e. [1,5) means that there are 4 bytes of data, at offsets 1,2,3,4.\n"");","[""updateContent""]","[[""preceeding""], [""preceding""]]",[-6138486007324851744],6901,"311 days, 16:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,31,-1,"storeAppendPrintf(e, "" dhparams=%s"", s->dhfile);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""dhparams"", ""%s"", ""s"", ""dhfile""], []]",[-7434341468065256817],6900,"1865 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,1223,-1,"storeAppendPrintf(&output, ""\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""&output"", ""\\n""], []]",[-8190073519903471645],6899,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,1093,-1,"fatal(""'store_avg_object_size' should be larger than 0."");",,"[""removeLog""]","[[""fatal"", ""store_avg_object_size"", ""should"", ""be"", ""larger"", ""than"", ""0""], []]",[-4169576952635120669],6898,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,1090,-1,"fatal(""'store_objects_per_bucket' should be larger than 0."");",,"[""removeLog""]","[[""fatal"", ""store_objects_per_bucket"", ""should"", ""be"", ""larger"", ""than"", ""0""], []]",[12300532009220373221],6897,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,1046,-1,"fatal (""too much io\n"");",,"[""removeLog""]","[[""fatal"", ""too"", ""much"", ""io\\n""], []]",[21256136546020748691],6896,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,334,-1,"storeAppendPrintf(&output, ""Current Capacity       : %.2f%% used, %.2f%% free\n"",
                      Math::doublePercent(currentSize(), maxSize()),
                      Math::doublePercent((maxSize() - currentSize()), maxSize()));",,"[""removeLog""]","[[""storeAppendPrintf"", ""&output"", ""Current"", ""Capacity"", ""%"", ""2f%%"", ""used"", ""%"", ""2f%%"", ""free\\n"", ""Math"", ""doublePercent"", ""currentSize"", ""maxSize"", ""Math"", ""doublePercent"", ""maxSize"", ""currentSize"", ""maxSize""], []]",[5089640615166122444],6895,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,332,-1,"storeAppendPrintf(&output, ""Current Store Swap Size: %.2f KB\n"",
                      currentSize() / 1024.0);",,"[""removeLog""]","[[""storeAppendPrintf"", ""&output"", ""Current"", ""Store"", ""Swap"", ""Size"", ""%"", ""2f"", ""KB\\n"", ""currentSize"", ""/"", ""1024"", ""0""], []]",[1225167862351329007],6894,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,330,-1,"storeAppendPrintf(&output, ""Maximum Swap Size      : %"" PRIu64 "" KB\n"",
                      maxSize() >> 10);",,"[""removeLog""]","[[""storeAppendPrintf"", ""&output"", ""Maximum"", ""Swap"", ""Size"", ""%"", ""PRIu64"", ""KB\\n"", ""maxSize"", ""10""], []]",[-21396462949852261658],6893,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,328,-1,"storeAppendPrintf(&output, ""Store Entries          : %lu\n"",
                      (unsigned long int)StoreEntry::inUseCount());",,"[""removeLog""]","[[""storeAppendPrintf"", ""&output"", ""Store"", ""Entries"", ""%lu\\n"", ""unsigned"", ""long"", ""int"", ""StoreEntry"", ""inUseCount""], []]",[-10641832577037846956],6892,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_534.cpp,,,data/crawl/squid/old_hunk_534.cpp,data/crawl/squid/new_hunk_534.cpp,327,-1,"storeAppendPrintf(&output, ""Store Directory Statistics:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""&output"", ""Store"", ""Directory"", ""Statistics"", ""\\n""], []]",[-13978733286480319094],6891,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_533.cpp,,,data/crawl/squid/old_hunk_533.cpp,data/crawl/squid/new_hunk_533.cpp,-1,366,,"storeAppendPrintf(&output, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""&output"", ""\\n""]]",[8190073519903471645],6890,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_529.cpp,,,data/crawl/squid/old_hunk_529.cpp,data/crawl/squid/new_hunk_529.cpp,-1,148,,"storeAppendPrintf(&output, ""Current Capacity       : %.2f%% used, %.2f%% free\n"",
                      Math::doublePercent(currentSize(), maxSize()),
                      Math::doublePercent((maxSize() - currentSize()), maxSize()));","[""addLog""]","[[], [""storeAppendPrintf"", ""&output"", ""Current"", ""Capacity"", ""%"", ""2f%%"", ""used"", ""%"", ""2f%%"", ""free\\n"", ""Math"", ""doublePercent"", ""currentSize"", ""maxSize"", ""Math"", ""doublePercent"", ""maxSize"", ""currentSize"", ""maxSize""]]",[-5089640615166122444],6889,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_529.cpp,,,data/crawl/squid/old_hunk_529.cpp,data/crawl/squid/new_hunk_529.cpp,-1,146,,"storeAppendPrintf(&output, ""Current Store Swap Size: %.2f KB\n"",
                      currentSize() / 1024.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""&output"", ""Current"", ""Store"", ""Swap"", ""Size"", ""%"", ""2f"", ""KB\\n"", ""currentSize"", ""/"", ""1024"", ""0""]]",[-1225167862351329007],6888,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_529.cpp,,,data/crawl/squid/old_hunk_529.cpp,data/crawl/squid/new_hunk_529.cpp,-1,144,,"storeAppendPrintf(&output, ""Maximum Swap Size      : %"" PRIu64 "" KB\n"",
                      maxSize() >> 10);","[""addLog""]","[[], [""storeAppendPrintf"", ""&output"", ""Maximum"", ""Swap"", ""Size"", ""%"", ""PRIu64"", ""KB\\n"", ""maxSize"", ""10""]]",[21396462949852261658],6887,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_529.cpp,,,data/crawl/squid/old_hunk_529.cpp,data/crawl/squid/new_hunk_529.cpp,-1,142,,"storeAppendPrintf(&output, ""Store Entries          : %lu\n"",
                      (unsigned long int)StoreEntry::inUseCount());","[""addLog""]","[[], [""storeAppendPrintf"", ""&output"", ""Store"", ""Entries"", ""%lu\\n"", ""unsigned"", ""long"", ""int"", ""StoreEntry"", ""inUseCount""]]",[10641832577037846956],6886,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_529.cpp,,,data/crawl/squid/old_hunk_529.cpp,data/crawl/squid/new_hunk_529.cpp,-1,141,,"storeAppendPrintf(&output, ""Store Directory Statistics:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""&output"", ""Store"", ""Directory"", ""Statistics"", ""\\n""]]",[13978733286480319094],6885,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_528.cpp,,,data/crawl/squid/old_hunk_528.cpp,data/crawl/squid/new_hunk_528.cpp,39,-1,"fatal(""Store::unlink on invalid Store\n"");",,"[""removeLog""]","[[""fatal"", ""Store"", ""unlink"", ""on"", ""invalid"", ""Store\\n""], []]",[9647309652365982831],6884,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9dde3c2a8c8d0ebc8a4065814d68ab1534534a35,15 Nov 2015,Use pipeline stats in cachemgr reports,3,data/crawl/squid/hunk_541.cpp,,,data/crawl/squid/old_hunk_541.cpp,data/crawl/squid/new_hunk_541.cpp,3,3,"storeAppendPrintf(s, ""\tnrequests: %d\n"",
                              conn->nrequests);","storeAppendPrintf(s, ""\tnrequests: %u\n"", conn->pipeline.nrequests);","[""updateContent"", ""addVariable""]","[[""%d\\n""], [""%u\\n"", ""pipeline""]]",[-6452227546100303071],6883,"13 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_524.cpp,,,data/crawl/squid/old_hunk_524.cpp,data/crawl/squid/new_hunk_524.cpp,7,-1,"fatal(""Transients::get(key,callback,data) should not be called"");",,"[""removeLog""]","[[""fatal"", ""Transients"", ""get"", ""key"", ""callback"", ""data"", ""should"", ""not"", ""be"", ""called""], []]",[9343544430058125087],6882,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2745fea5af27ea60a6172f38846c82d16f54c4ba,18 Nov 2015,"Store API and layout polishing. No functionality changes intended.

This first step towards bug #7 fix focuses on fixing ""any Store is a
Root"" API that forced us to bloat the base Store class with methods
needed only in Store::Root() Controller.

We resolved about 15 XXXs and 10 TODOs (although these counts are
inflated by many duplicated/repeated problems). We added a few new
XXXs and TODOs as well, but they are just marking already problematic
code, not adding more problems or genuinely new work.

Class renaming and source file movement map:
  
  src/SwapDir.h => src/store/Disk.h (and Controller.h)
  src/SwapDir.cc => src/store/Disk.cc
  src/StoreHashIndex.h => src/store/Disks.h (and LocalSearch.h)
  src/store_dir.cc => src/store/Controller.cc (and Disks.cc, LocalSearch.cc)
  src/disk.* => src/fs_io.*

The code movement to files in parenthesis is not tracked by bzr
because bzr cannot track file splits, and most of the moved code had
to be split across multiple files to untangle various messes. When
deciding what to tell ""bzr mv"", we picked file pairs that would allow
us to track the most complex, most voluminous code but there is
probably no single correct way to do that.

src/disk.* files were renamed to src/fs_io.* to avoid ""src/foo
conflicts with src/store/Foo"" problems expected on some case-
insensitive platforms.


The Store namespace hierarchy now looks like this:

* Storage: Any storage. Similar to the old Store class, but leaner.
* Controller: Combined memory/disks caches and transients. Root API.
* Controlled: Memory cache, disk(s) cache, or transient Storage.
* Disks: All disk caches combined.
* Disk: A single cache_dir Storage.
* Memory: A memory cache.
* Transients: Entries capable of being collapsed for CF.

The last two are not moved/finalized yet, but it should not be too
difficult to do that later because there are few direct references to
them from the high-level code.


Related polishing touches:

Moved a lot of misplaced code into the right class and/or source file.

Simplified Store::search() interface to match the actual code that
does not support any search parameters. Removed the search API from
all other stores because the code did not really support store-
specific searches. Resisted the temptation to rename parameterless
search() to iterate() or similar because the actual future of this API
is murky. We may add search parameters or even remove the method
completely. This could quickly snowball into a separate project.

Removed Store::get(x,y,z) API as unused and unsupported.

Removed FreeObject() template as unused (and possibly technically
flawed).

Simplified default Store initialization/cleanup sequence. Removed
empty disk_init(). The non-default Store::Init() parameter is used by
the unit testing code only.

Simplified Store::dereference() API by moving the second parameter to
dedicated Controller::dereferenceIdle() method that is the only ones
using that parameter.",4700,data/crawl/squid/hunk_521.cpp,,,data/crawl/squid/old_hunk_521.cpp,data/crawl/squid/new_hunk_521.cpp,7,-1,"fatal(""MemStore::get(key,callback,data) should not be called"");",,"[""removeLog""]","[[""fatal"", ""MemStore"", ""get"", ""key"", ""callback"", ""data"", ""should"", ""not"", ""be"", ""called""], []]",[-3864778167489770400],6881,"9 days, 0:00:00"
https://github.com/squid-cache/squid/commit/faadb1b64436077d7f3b02e30cb9684b1c9ad075,10 Apr 2006,removed obsolete ldap files. These was moved to the ldap helper directory,662,data/crawl/squid/hunk_4873.cpp,,,data/crawl/squid/old_hunk_4873.cpp,data/crawl/squid/new_hunk_4873.cpp,222,-1,"fprintf(stderr, PROGRAM_NAME "": WARNING, SSL error %d (%s)\n"", sslerr, ldapssl_err2string(sslerr));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""SSL"", ""error"", ""%d"", ""%s"", ""\\n"", ""sslerr"", ""ldapssl_err2string"", ""sslerr""], []]",[8521655138693661446],6880,"2344 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/hunk_4696.cpp,,,data/crawl/squid/old_hunk_4696.cpp,data/crawl/squid/new_hunk_4696.cpp,-1,8,,"initiateClose(""failure or true request status"");","[""addLog""]","[[], [""initiateClose"", ""failure"", ""or"", ""true"", ""request"", ""status""]]",[-6969606714274698964],6879,"2140 days, 16:00:00"
https://github.com/squid-cache/squid/commit/1f1eee3f84f3874ea982b10c6186c20d373ac6fc,16 Apr 2016,"cachemgr.cgi: use dynamic MemBuf for internal content generation

Using a fixed size buffer limits how big content lines can be. Modern
HTTP is fast reaching the point where such limits are problematic.
Also fixes incorrect uses of snprintf() by removing them.",95,data/crawl/squid/hunk_292.cpp,,,data/crawl/squid/old_hunk_292.cpp,data/crawl/squid/new_hunk_292.cpp,-1,12,,"fputs(out.buf, stdout);","[""addLog""]","[[], [""fputs"", ""out"", ""buf"", ""stdout""]]",[-7760073820532761677],6878,"21 days, 8:00:00"
https://github.com/squid-cache/squid/commit/1f1eee3f84f3874ea982b10c6186c20d373ac6fc,16 Apr 2016,"cachemgr.cgi: use dynamic MemBuf for internal content generation

Using a fixed size buffer limits how big content lines can be. Modern
HTTP is fast reaching the point where such limits are problematic.
Also fixes incorrect uses of snprintf() by removing them.",95,data/crawl/squid/hunk_292.cpp,,,data/crawl/squid/old_hunk_292.cpp,data/crawl/squid/new_hunk_292.cpp,8,-1,"fputs(munge_other_line(buf, req), stdout);",,"[""removeLog""]","[[""fputs"", ""munge_other_line"", ""buf"", ""req"", ""stdout""], []]",[11026334546984865509],6877,"21 days, 8:00:00"
https://github.com/squid-cache/squid/commit/1f1eee3f84f3874ea982b10c6186c20d373ac6fc,16 Apr 2016,"cachemgr.cgi: use dynamic MemBuf for internal content generation

Using a fixed size buffer limits how big content lines can be. Modern
HTTP is fast reaching the point where such limits are problematic.
Also fixes incorrect uses of snprintf() by removing them.",95,data/crawl/squid/hunk_292.cpp,,,data/crawl/squid/old_hunk_292.cpp,data/crawl/squid/new_hunk_292.cpp,6,-1,"fputs(munge_menu_line(buf, req), stdout);",,"[""removeLog""]","[[""fputs"", ""munge_menu_line"", ""buf"", ""req"", ""stdout""], []]",[6249281519666114897],6876,"21 days, 8:00:00"
https://github.com/squid-cache/squid/commit/b69e9ffa9e2a148e2abc08511ebc5378697a7b6c,03 Apr 2016,Cleanup: remove xstrerror(),1093,data/crawl/squid/hunk_330.cpp,,,data/crawl/squid/old_hunk_330.cpp,data/crawl/squid/new_hunk_330.cpp,14,13,"fprintf(stderr, APP_SHORTNAME "": ERROR: Could not read pid file\n"");","fprintf(stderr, APP_SHORTNAME "": ERROR: Could not open PID file for read\n"");","[""updateContent""]","[[""read"", ""pid"", ""file\\n""], [""open"", ""PID"", ""file"", ""for"", ""read\\n""]]",[-6683045894385230470],6875,"30 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b35bf4e58ca28895b4783eb950abc02f31e51db4,02 May 2016,"HTTP/1.1: normalize Host header

When absolute-URI is provided Host header should be ignored. However some
code still uses Host directly so normalize it using the previously
sanitized URL authority value before doing any further request processing.

For now preserve the case where Host is completely absent. That matters
to the CVE-2009-0801 protection.

This also has the desirable side effect of removing multiple or duplicate
Host header entries.",10,data/crawl/squid/hunk_288.cpp,,,data/crawl/squid/old_hunk_288.cpp,data/crawl/squid/new_hunk_288.cpp,-1,10,,"request->header.putStr(Http::HOST, tmp.c_str());","[""addLog""]","[[], [""request"", ""header"", ""putStr"", ""Http"", ""HOST"", ""tmp"", ""c_str""]]",[2756243321553634903],6874,"10 days, 16:00:00"
https://github.com/squid-cache/squid/commit/793b1bfb48e5bd84205414497c7680c22ce0087b,30 Apr 2016,"Stop parsing SSL records after a fatal SSL Alert. 

The fatal alert sender should close the connection. Waiting for the next
record is pointless and will obscure the problem when we eventually read
the EOF on the socket.",4,data/crawl/squid/hunk_289.cpp,,,data/crawl/squid/old_hunk_289.cpp,data/crawl/squid/new_hunk_289.cpp,-1,3,,(alert.fatal();,"[""addLog""]","[[], [""alert"", ""fatal""]]",[-2237907343613694454],6873,"13 days, 16:00:00"
https://github.com/squid-cache/squid/commit/c3149111e45340cb60a8f3c28a418ae96e9b67e8,30 Apr 2016,"Separated BinaryTokenizer commits from context debugging. Polished.

Commits are relatively rare events specific to incremental parsing. Most
parsers are not incremental and do not commit/rollback. However, all
parsers need to debug what they parse. Thus, it was wrong to combine
commits with context debugging.

BinaryTokenizer single-context debugging did not support nested contexts
(such as Hello.version.major) and reported wrong FieldGroup sizes for
some parsed structures. The new BinaryTokenizerContext does not have
these problems and is more general (but still needs more polishing
work).

Also polished many field names, comments, debug messages, and some code.",293,data/crawl/squid/hunk_290.cpp,,,data/crawl/squid/old_hunk_290.cpp,data/crawl/squid/new_hunk_290.cpp,-1,3,,"debugs(83, (alert.fatal() ? 2:3),
           ""level "" << static_cast<int>(alert.level) <<
           "" description "" << static_cast<int>(alert.description));","[""addLog""]","[[], [""debugs"", ""83"", ""alert"", ""fatal"", ""2"", ""3"", ""level"", ""static_cast"", ""int"", ""alert"", ""level"", ""description"", ""static_cast"", ""int"", ""alert"", ""description""]]",[-9004269533873689954],6872,"13 days, 16:00:00"
https://github.com/squid-cache/squid/commit/f57ae909fef52f5088b8304a4eb21d0c3978f533,25 Mar 2016,"Fix memory leak of AccessLogentry::url

 ... created by ACLFilledChecklist::syncAle().

::syncAle() is the only place in the codebase that assigns a URL that
AccessLogEntry is expected to free(), which AccessLogEntry doesn't do.
This results in a memory leak.

  This is submitted on behalf of Bloomberg L.P.",44,data/crawl/squid/hunk_337.cpp,,,data/crawl/squid/old_hunk_337.cpp,data/crawl/squid/new_hunk_337.cpp,3,5,"logfilePrintf(logfile, ""%9ld.%03d %s %s %s\n"",
                  (long int) current_time.tv_sec,
                  (int) current_time.tv_usec / 1000,
                  clientip,
                  referer,
                  al->url ? al->url : ""-"");","logfilePrintf(logfile, ""%9ld.%03d %s %s "" SQUIDSBUFPH ""\n"",
                  (long int) current_time.tv_sec,
                  (int) current_time.tv_usec / 1000,
                  clientip,
                  referer,
                  SQUIDSBUFPRINT(url));","[""removeVariable"", ""updateContent"", ""addContent"", ""removeContent"", ""addVariable""]","[[""%s\\n"", ""al"", ""al"", ""url""], [""SQUIDSBUFPH"", ""\\n"", ""SQUIDSBUFPRINT""]]",[1222651555877977458],6871,"36 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8f7dbf74048f3950f8931e5ea38480b5d35b641e,30 Mar 2016,Bug 4312: Support disabling collapsed forwarding SMP cooperation,46,data/crawl/squid/hunk_333.cpp,,,data/crawl/squid/old_hunk_333.cpp,data/crawl/squid/new_hunk_333.cpp,-1,6,,"storeAppendPrintf(entry, ""%s %"" PRId64 ""\n"", name, var);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%"", ""PRId64"", ""\\n"", ""name"", ""var""]]",[3252915763092037348],6870,"32 days, 16:00:00"
https://github.com/squid-cache/squid/commit/8250ca31a53cf976d81e79834bbab85b76358398,30 Jun 2015,"Fix cachemgr 'config' report output for TLS options

Adds Security::PeerOptions::dumpCfg() method to output config
details for the peer TLS settings stored. Takes an optional
prefix string for the option parameters.
- uses prefix """" for tls_outgoing_options
- uses prefix ""tls-"" for https_port, http_port, and cache_peer
- displays ""tls-disable"" for directives without TLS settings.

Fixes missing cache_peer config output for TLS settings.

Fixes display of http(s)_port TLS settings 'ssl' prefix.

Fixes tls-min-version= internal operation to avoid polluting
tls-options= config settings.

Also, updates documentation mentions of ""SSL"" in debugs().",91,data/crawl/squid/hunk_674.cpp,,,data/crawl/squid/old_hunk_674.cpp,data/crawl/squid/new_hunk_674.cpp,3,3,"fatalf(""Unknown SSL flag '"" SQUIDSBUFPH ""'"", SQUIDSBUFPRINT(tok.remaining()));","fatalf(""Unknown TLS flag '"" SQUIDSBUFPH ""'"", SQUIDSBUFPRINT(tok.remaining()));","[""updateContent""]","[[""SSL""], [""TLS""]]",[-1126055512629858161],6869,"146 days, 8:00:00"
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/hunk_81.cpp,,,data/crawl/squid/old_hunk_81.cpp,data/crawl/squid/new_hunk_81.cpp,7,5,"auth_user_request->denyMessage(""Negotiate Authentication failed with no reason given"");","auth_user_request->denyMessageFromHelper(""Negotiate"", reply);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""denyMessage"", ""Authentication"", ""failed"", ""with"", ""no"", ""reason"", ""given""], [""denyMessageFromHelper"", ""reply""]]",[14869884450892109253],6868,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/40fc161851f5809741ddb4774e7c366d23323a97,05 Feb 2017,Sync from v5 r15034,2231,data/crawl/squid/hunk_64.cpp,,,data/crawl/squid/old_hunk_64.cpp,data/crawl/squid/new_hunk_64.cpp,32,-1,auth_user_request->denyMessage(errNote);,,"[""removeLog""]","[[""auth_user_request"", ""denyMessage"", ""errNote""], []]",[1326431015401465511],6867,0:00:00
https://github.com/squid-cache/squid/commit/12b9e9b1f34032b49437866c39c8f9d2e4f4b045,28 Mar 1996,"new debug section,level stuff",1600,data/crawl/squid/hunk_7958.cpp,,,data/crawl/squid/old_hunk_7958.cpp,data/crawl/squid/new_hunk_7958.cpp,24,-1,"printf(""         use the 'inside_firewall' and 'local_domain' lines\n"");",,"[""removeLog""]","[[""printf"", ""use"", ""the"", ""inside_firewall"", ""and"", ""local_domain"", ""lines\\n""], []]",[-3010694902379083115],6866,0:00:00
https://github.com/squid-cache/squid/commit/f5558c95a8b97794c224a6b03b0d66127891210d,29 Mar 1996,Implemented prototype IMS-GET and change-key-until-headers-read,282,data/crawl/squid/hunk_7938.cpp,,,data/crawl/squid/old_hunk_7938.cpp,data/crawl/squid/new_hunk_7938.cpp,-1,39,,"fatal_dump(""storeUnChangeKey: Hash table 'table' is zero!\n"");","[""addLog""]","[[], [""fatal_dump"", ""storeUnChangeKey"", ""Hash"", ""table"", ""table"", ""is"", ""zero"", ""\\n""]]",[-3178018769607953594],6865,0:00:00
https://github.com/squid-cache/squid/commit/6eb42caec6c6db2142568d6dd4426e89e6c16f8f,04 Apr 1996,major code cleanup/unification/rewrite,624,data/crawl/squid/hunk_7885.cpp,,,data/crawl/squid/old_hunk_7885.cpp,data/crawl/squid/new_hunk_7885.cpp,3,3,"fatal(""Cannot open UDP Port\n"");","fatal(""Cannot open UDP Port"");","[""updateContent""]","[[""Port\\n""], [""Port""]]",[1176236813168864752],6864,0:00:00
https://github.com/squid-cache/squid/commit/6350239ff4cf4bc87d0af6ea9c2e1c33a95a8914,30 Mar 1996,"Major rewrite of logging.  Now log accesses when the client data
structure (icpStateData) gets destroyed.  TCP_DONE is gone and
TCP_MISS is now logged when the request completes and has a valid
size.  Made some adjustments to get error logging working also.
Had to add 'abort_code' element to the StoreEntry Mem_Obj structure.",52,data/crawl/squid/hunk_7913.cpp,,,data/crawl/squid/old_hunk_7913.cpp,data/crawl/squid/new_hunk_7913.cpp,-1,38,,"fatal_dump(""cached_error_url: type out of range."");","[""addLog""]","[[], [""fatal_dump"", ""cached_error_url"", ""type"", ""out"", ""of"", ""range""]]",[-13139861453368182966],6863,"2 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c8bd12b18fe14c595b1b45354df85fd5a47e1f93,04 Apr 1996,"From:    ""Daniel O'Callaghan"" <danny@miriworld.its.unimelb.EDU.AU>

This patch replaces  ip_acl_match(), ip_access_check() and addToIPACL()
with versions which accept the following formats:

proxy_allow 1.2.3.0     (old cached format for 1.2.3.0/24)
proxy_allow 1.2.0.0     (old cached format for 1.2.0.0/16)

proxy_allow 1.2.3.4     (equivalent to 1.2.3.4/32)
proxy_allow 1.2.3.0/24
proxy_allow 1.2.3.0/255.255.255.0

proxy_allow all         (equivalent to 0.0.0.0/0.0.0.0)",132,data/crawl/squid/hunk_7881.cpp,,,data/crawl/squid/old_hunk_7881.cpp,data/crawl/squid/new_hunk_7881.cpp,-1,119,,"fprintf(stderr,
		""cached.conf error in IP acl line %s (ignored)\n"", ip_str);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""cached"", ""conf"", ""error"", ""in"", ""IP"", ""acl"", ""line"", ""%s"", ""ignored"", ""\\n"", ""ip_str""]]",[6535138188355621304],6862,0:00:00
https://github.com/squid-cache/squid/commit/da00e8509f4c3bf25e093b0f8901860f01794716,04 Apr 1996,use debug() rather than stderr,11,data/crawl/squid/hunk_7879.cpp,,,data/crawl/squid/old_hunk_7879.cpp,data/crawl/squid/new_hunk_7879.cpp,3,3,"fprintf(stderr,
		""cached.conf error in IP acl line %s (ignored)\n"", ip_str);","debug(3, 0, ""addToIPACL: Ignoring invalid IP acl line '%s'\n"",
		ip_str);","[""updateLog"", ""removeVariable"", ""addContent"", ""updateContent""]","[[""fprintf"", ""stderr"", ""cached"", ""conf"", ""error"", ""in"", ""ignored""], [""debug"", ""3"", ""0"", ""addToIPACL"", ""Ignoring"", ""invalid""]]",[11123615058567768574],6861,0:00:00
https://github.com/squid-cache/squid/commit/8213067d159ba46b0557380d483ce181762bc1df,11 Apr 1996,apparently mostly working ACLs,384,data/crawl/squid/hunk_7860.cpp,,,data/crawl/squid/old_hunk_7860.cpp,data/crawl/squid/new_hunk_7860.cpp,2,2,"fprintf(debug_log, ""Harvest Cache (Version %s): Terminated abnormally.\n"",
	SQUID_VERSION);","fprintf(debug_log, ""Harvest Cache (Version %s): Terminated abnormally.\n"",
	version_string);","[""updateVariable""]","[[""SQUID_VERSION""], [""version_string""]]",[2145715888889987516],6860,0:00:00
https://github.com/squid-cache/squid/commit/b8de7ebe12756b6d6a09a0b034952c1e11325c95,16 Apr 1996,"change ""cached"" to ""squid"" in lots of places",640,data/crawl/squid/hunk_7846.cpp,,,data/crawl/squid/old_hunk_7846.cpp,data/crawl/squid/new_hunk_7846.cpp,9,9,"fprintf(cache_hierarchy_log, ""%d %s %s%s\n"",
		(int) cached_curtime,
		url,
		timeout ? ""TIMEOUT_"" : """",
		hier_strings[code]);","fprintf(cache_hierarchy_log, ""%d %s %s%s\n"",
		(int) squid_curtime,
		url,
		timeout ? ""TIMEOUT_"" : """",
		hier_strings[code]);","[""updateVariable""]","[[""cached_curtime""], [""squid_curtime""]]",[-11233380819947686557],6859,0:00:00
https://github.com/squid-cache/squid/commit/b8de7ebe12756b6d6a09a0b034952c1e11325c95,16 Apr 1996,"change ""cached"" to ""squid"" in lots of places",640,data/crawl/squid/hunk_7843.cpp,,,data/crawl/squid/old_hunk_7843.cpp,data/crawl/squid/new_hunk_7843.cpp,3,3,"fatal_dump(""cached_error_url: type out of range."");","fatal_dump(""squid_error_url: type out of range."");","[""updateContent""]","[[""cached_error_url""], [""squid_error_url""]]",[8710127190126751657],6858,0:00:00
https://github.com/squid-cache/squid/commit/b8de7ebe12756b6d6a09a0b034952c1e11325c95,16 Apr 1996,"change ""cached"" to ""squid"" in lots of places",640,data/crawl/squid/hunk_7838.cpp,,,data/crawl/squid/old_hunk_7838.cpp,data/crawl/squid/new_hunk_7838.cpp,19,19,"printf(""         For this run, however, cached will use %d minutes for clean_rate.\n"", (int) (getCleanRate() / 60));","printf(""         For this run, however, %s will use %d minutes for clean_rate.\n"", appname, (int) (getCleanRate() / 60));","[""updateContent"", ""addVariable""]","[[""cached""], [""%s"", ""appname""]]",[-6051341086951825635],6857,0:00:00
https://github.com/squid-cache/squid/commit/c5c666abb1fa898db13dd58dbd73e8d3a0e04a6d,16 Apr 1996,"fix Makefile clean target
remove references to Harvest",70,data/crawl/squid/hunk_7835.cpp,,,data/crawl/squid/old_hunk_7835.cpp,data/crawl/squid/new_hunk_7835.cpp,3,3,"fprintf(debug_log, ""Harvest Cache (Version %s): Terminated abnormally.\n"",
	version_string);","fprintf(debug_log, ""Squid Cache (Version %s): Terminated abnormally.\n"",
	version_string);","[""updateContent""]","[[""Harvest""], [""Squid""]]",[5933233547553506351],6856,0:00:00
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7820.cpp,,,data/crawl/squid/old_hunk_7820.cpp,data/crawl/squid/new_hunk_7820.cpp,-1,3,,"storeAppendPrintf(data->sentry, ""}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""data"", ""sentry"", ""\\n""]]",[-2738076688578465314],6855,0:00:00
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7823.cpp,,,data/crawl/squid/old_hunk_7823.cpp,data/crawl/squid/new_hunk_7823.cpp,-1,16,,"storeAppendPrintf(sentry, ""{Connection information for %s:}\n"", appname);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Connection"", ""information"", ""for"", ""%s"", ""\\n"", ""appname""]]",[5207409015510323392],6854,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/234967c95c2a7139e95200ad24a8e2581880a029,02 May 1996,merging all changes up to squid-1.0.beta5,1451,data/crawl/squid/hunk_7800.cpp,,,data/crawl/squid/old_hunk_7800.cpp,data/crawl/squid/new_hunk_7800.cpp,10,11,"fprintf(cache_hierarchy_log, ""%d %s %s%s\n"",
		(int) squid_curtime,
		url,
		timeout ? ""TIMEOUT_"" : """",
		hier_strings[code]);","fprintf(cache_hierarchy_log, ""%d.%03d %s %s%s\n"",
		(int) current_time.tv_sec,
		(int) current_time.tv_usec / 1000,
		url,
		timeout ? ""TIMEOUT_"" : """",
		hier_strings[code]);","[""removeVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""squid_curtime""], [""%03d"", ""current_time"", ""tv_sec"", ""int"", ""current_time"", ""tv_usec"", ""/"", ""1000""]]",[9204310726049635646],6853,0:00:00
https://github.com/squid-cache/squid/commit/234967c95c2a7139e95200ad24a8e2581880a029,02 May 1996,merging all changes up to squid-1.0.beta5,1451,data/crawl/squid/hunk_7792.cpp,,,data/crawl/squid/old_hunk_7792.cpp,data/crawl/squid/new_hunk_7792.cpp,7,-1,"printf(""<OPTION VALUE=\""log\"">Cache Log\n"");",,"[""removeLog""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""log\\"", ""Cache"", ""Log\\n""], []]",[3215372113052218659],6852,0:00:00
https://github.com/squid-cache/squid/commit/983061ed9eb08a8f5b02ae74f5adc0140b933d87,04 May 1996,merging changes from SQUID_1_0 branch,1418,data/crawl/squid/hunk_7784.cpp,,,data/crawl/squid/old_hunk_7784.cpp,data/crawl/squid/new_hunk_7784.cpp,-1,241,,"fatal_dump(""sslReadTimeout: FD mismatch!\n"");","[""addLog""]","[[], [""fatal_dump"", ""sslReadTimeout"", ""FD"", ""mismatch"", ""\\n""]]",[-14846918233041060754],6851,0:00:00
https://github.com/squid-cache/squid/commit/983061ed9eb08a8f5b02ae74f5adc0140b933d87,04 May 1996,merging changes from SQUID_1_0 branch,1418,data/crawl/squid/hunk_7784.cpp,,,data/crawl/squid/old_hunk_7784.cpp,data/crawl/squid/new_hunk_7784.cpp,-1,42,,"fatal_dump(""sslStateFree: FD mismatch!\n"");","[""addLog""]","[[], [""fatal_dump"", ""sslStateFree"", ""FD"", ""mismatch"", ""\\n""]]",[-6575889428949358056],6850,0:00:00
https://github.com/squid-cache/squid/commit/f0f81709f3cd303a097c7e0e25b9585b603b8da6,28 Mar 1996,rearrange order of functions,50,data/crawl/squid/hunk_7943.cpp,,,data/crawl/squid/old_hunk_7943.cpp,data/crawl/squid/new_hunk_7943.cpp,11,-1,"fprintf(lf, ""CPU Usage: user %d sys %d\nMemory Usage: rss %d KB\n"",
	rusage.ru_utime.tv_sec, rusage.ru_stime.tv_sec,
	rusage.ru_maxrss * getpagesize() / 1000);",,"[""removeLog""]","[[""fprintf"", ""lf"", ""CPU"", ""Usage"", ""user"", ""%d"", ""sys"", ""%d\\nMemory"", ""Usage"", ""rss"", ""%d"", ""KB\\n"", ""rusage"", ""ru_utime"", ""tv_sec"", ""rusage"", ""ru_stime"", ""tv_sec"", ""rusage"", ""ru_maxrss"", ""*"", ""getpagesize"", ""/"", ""1000""], []]",[12237231477693356759],6849,"51 days, 12:00:00"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7775.cpp,,,data/crawl/squid/old_hunk_7775.cpp,data/crawl/squid/new_hunk_7775.cpp,27,39,"fprintf(f, ""   number of ordinary blocks allocated  %d\n"",
	mp.allocated);","fprintf(f, ""\tnumber of ordinary blocks allocated:\t%d\n"",
	mp.allocated);","[""updateContent""]","[[""number"", ""%d\\n""], [""\\tnumber"", ""\\t%d\\n""]]",[-2632706847231742984],6848,0:00:00
https://github.com/squid-cache/squid/commit/3f43b19b100d88a3ffa0871fd89aa7597289e7f1,28 Mar 1996,rearrange order of functions,86,data/crawl/squid/hunk_7940.cpp,,,data/crawl/squid/old_hunk_7940.cpp,data/crawl/squid/new_hunk_7940.cpp,22,-1,"fprintf(f, ""   space in ordinary blocks in use  %d\n"", mp.uordblks);",,"[""removeLog""]","[[""fprintf"", ""f"", ""space"", ""in"", ""ordinary"", ""blocks"", ""in"", ""use"", ""%d\\n"", ""mp"", ""uordblks""], []]",[6840522631576659716],6847,"51 days, 12:00:00"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7781.cpp,,,data/crawl/squid/old_hunk_7781.cpp,data/crawl/squid/new_hunk_7781.cpp,4,-1,"fatal_dump(""sslReadTimeout: FD mismatch!\n"");",,"[""removeLog""]","[[""fatal_dump"", ""sslReadTimeout"", ""FD"", ""mismatch"", ""\\n""], []]",[14846918233041060754],6846,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7735.cpp,,,data/crawl/squid/old_hunk_7735.cpp,data/crawl/squid/new_hunk_7735.cpp,34,43,fatal(tmp_error_buf);,safe_free(e);,"[""updateVariable"", ""updateLog""]","[[""fatal"", ""tmp_error_buf""], [""safe_free"", ""e""]]",[19412267563886803759],6845,0:00:00
https://github.com/squid-cache/squid/commit/81b795fa81a7ac196b532a343f50be275f1cd429,10 Jul 1996,Added filedesciptor and reply_header entries,22,data/crawl/squid/hunk_7707.cpp,,,data/crawl/squid/old_hunk_7707.cpp,data/crawl/squid/new_hunk_7707.cpp,-1,6,,"printf(""<OPTION VALUE=\""stats/vm_objects\"">VM_Objects\n"");","[""addLog""]","[[], [""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/vm_objects\\"", ""VM_Objects\\n""]]",[-1561553180655118294],6844,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7738.cpp,,,data/crawl/squid/old_hunk_7738.cpp,data/crawl/squid/new_hunk_7738.cpp,-1,188,,"fatal_dump(""redirectStart: NULL handler"");","[""addLog""]","[[], [""fatal_dump"", ""redirectStart"", ""NULL"", ""handler""]]",[-20307552045099219304],6843,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/d2af947760f5e7a92ab3bf260744c55ce19ac073,11 Jul 1996,redirector up to snuff,639,data/crawl/squid/hunk_7693.cpp,,,data/crawl/squid/old_hunk_7693.cpp,data/crawl/squid/new_hunk_7693.cpp,-1,17,,"printf(""WARNING: redirect_children was set to a bad value: %d\n"",
	    getRedirectChildren());","[""addLog""]","[[], [""printf"", ""WARNING"", ""redirect_children"", ""was"", ""set"", ""to"", ""a"", ""bad"", ""value"", ""%d\\n"", ""getRedirectChildren""]]",[-2183495583320205808],6842,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7731.cpp,,,data/crawl/squid/old_hunk_7731.cpp,data/crawl/squid/new_hunk_7731.cpp,-1,109,,"storeAppendPrintf(sentry, ""{dnsservers use histogram:}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""dnsservers"", ""use"", ""histogram"", ""\\n""]]",[3592243268571107408],6841,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b6f794d6be5abf71f7d53e6222ed4fc4e7532efb,25 Jul 1996,"Removed all the get*() turds, now use Config structure directly.",843,data/crawl/squid/hunk_7666.cpp,,,data/crawl/squid/old_hunk_7666.cpp,data/crawl/squid/new_hunk_7666.cpp,43,43,"printf(""WARNING: redirect_children was set to a bad value: %d\n"",
	    getRedirectChildren());","printf(""WARNING: redirect_children was set to a bad value: %d\n"",
	    Config.redirectChildren);","[""removeVariable"", ""addVariable""]","[[""getRedirectChildren""], [""Config"", ""redirectChildren""]]",[-979107095127866057],6840,0:00:00
https://github.com/squid-cache/squid/commit/b6f794d6be5abf71f7d53e6222ed4fc4e7532efb,25 Jul 1996,"Removed all the get*() turds, now use Config structure directly.",843,data/crawl/squid/hunk_7666.cpp,,,data/crawl/squid/old_hunk_7666.cpp,data/crawl/squid/new_hunk_7666.cpp,32,32,"printf(""WARNING: dns_children was set to a bad value: %d\n"",
	    getDnsChildren());","printf(""WARNING: dns_children was set to a bad value: %d\n"",
	    Config.dnsChildren);","[""removeVariable"", ""addVariable""]","[[""getDnsChildren""], [""Config"", ""dnsChildren""]]",[-13101996368854436315],6839,0:00:00
https://github.com/squid-cache/squid/commit/b6f794d6be5abf71f7d53e6222ed4fc4e7532efb,25 Jul 1996,"Removed all the get*() turds, now use Config structure directly.",843,data/crawl/squid/hunk_7670.cpp,,,data/crawl/squid/old_hunk_7670.cpp,data/crawl/squid/new_hunk_7670.cpp,46,46,"storeAppendPrintf(sentry,
	""{CleanRate %d \""# Rate for periodic object expiring\""}\n"",
	getCleanRate());","storeAppendPrintf(sentry,
	""{CleanRate %d \""# Rate for periodic object expiring\""}\n"",
	Config.cleanRate);","[""removeVariable"", ""addVariable""]","[[""getCleanRate""], [""Config"", ""cleanRate""]]",[2050313424590516075],6838,0:00:00
https://github.com/squid-cache/squid/commit/b6f794d6be5abf71f7d53e6222ed4fc4e7532efb,25 Jul 1996,"Removed all the get*() turds, now use Config structure directly.",843,data/crawl/squid/hunk_7670.cpp,,,data/crawl/squid/old_hunk_7670.cpp,data/crawl/squid/new_hunk_7670.cpp,10,10,"storeAppendPrintf(sentry,
	""{Swap-Max %d \""# Maximum disk cache (MB)\""}\n"",
	getCacheSwapMax() / (1 << 10));","storeAppendPrintf(sentry,
	""{Swap-Max %d \""# Maximum disk cache (MB)\""}\n"",
	Config.Swap.maxSize / (1 << 10));","[""removeVariable"", ""addVariable""]","[[""getCacheSwapMax""], [""Config"", ""Swap"", ""maxSize""]]",[7058633051817301291],6837,0:00:00
https://github.com/squid-cache/squid/commit/b6f794d6be5abf71f7d53e6222ed4fc4e7532efb,25 Jul 1996,"Removed all the get*() turds, now use Config structure directly.",843,data/crawl/squid/hunk_7671.cpp,,,data/crawl/squid/old_hunk_7671.cpp,data/crawl/squid/new_hunk_7671.cpp,3,3,"fprintf(fp, ""To: %s\n"", getAdminEmail());","fprintf(fp, ""To: %s\n"", Config.adminEmail);","[""removeVariable"", ""addVariable""]","[[""getAdminEmail""], [""Config"", ""adminEmail""]]",[-5707690273233795741],6836,"13 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ca18f0d9f10e3602335a35d675744e4cce810976,22 Jul 1996,added new options to cachemgr,42,data/crawl/squid/hunk_7674.cpp,,,data/crawl/squid/old_hunk_7674.cpp,data/crawl/squid/new_hunk_7674.cpp,-1,6,,"printf(""</SELECT>"");","[""addLog""]","[[], [""printf"", ""/SELECT""]]",[4701123320431530247],6835,"14 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ca18f0d9f10e3602335a35d675744e4cce810976,22 Jul 1996,added new options to cachemgr,42,data/crawl/squid/hunk_7673.cpp,,,data/crawl/squid/old_hunk_7673.cpp,data/crawl/squid/new_hunk_7673.cpp,-1,7,,"printf(""<OPTION VALUE=\""refresh\"">Refresh Object (URL required)\n"");","[""addLog""]","[[], [""printf"", ""OPTION"", ""VALUE"", ""\\"", ""refresh\\"", ""Refresh"", ""Object"", ""URL"", ""required"", ""\\n""]]",[-12902735912966907942],6834,"14 days, 12:00:00"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7731.cpp,,,data/crawl/squid/old_hunk_7731.cpp,data/crawl/squid/new_hunk_7731.cpp,-1,138,,"storeAppendPrintf(sentry, "" %s"", i->entry.h_name);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%s"", ""i"", ""entry"", ""h_name""]]",[8228192580865638877],6833,"24 days, 12:00:00"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7731.cpp,,,data/crawl/squid/old_hunk_7731.cpp,data/crawl/squid/new_hunk_7731.cpp,-1,135,,"storeAppendPrintf(sentry, "" %s"", i->entry.h_aliases[k]);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%s"", ""i"", ""entry"", ""h_aliases[k]""]]",[-631824269237080595],6832,"24 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,74,,"fatal_dump(""Invalid dnsserver output"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""dnsserver"", ""output""]]",[-29917273278847675787],6831,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,71,,"fatal_dump(""Invalid $ttl"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""ttl""]]",[-18337828980884710258],6830,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,66,,"fatal_dump(""Invalid alias"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""alias""]]",[-14133335461660142488],6829,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,56,,"fatal_dump(""Invalid $aliascount"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""aliascount""]]",[-11230306074212304254],6828,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,39,,"fatal_dump(""Invalid $ipcount"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""ipcount""]]",[-10563348015832141258],6827,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,35,,"fatal_dump(""Invalid $h_len"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""h_len""]]",[-24448664448630495720],6826,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,31,,"fatal_dump(""Invalid $h_name"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""h_name""]]",[-13419497249733194613],6825,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5a266cbb6bc3323f81f2242abe536c5190b587f,28 Aug 1996,rewrite ipcache_parsebuffer,305,data/crawl/squid/hunk_7620.cpp,,,data/crawl/squid/old_hunk_7620.cpp,data/crawl/squid/new_hunk_7620.cpp,-1,28,,"fatal_dump(""Invalid $name"");","[""addLog""]","[[], [""fatal_dump"", ""Invalid"", ""name""]]",[-21009176533381759780],6824,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fddcd1e0281e2b92d67ce596a5ce45b0100e7a79,14 Sep 1996,"From:    Neil Murray <neil@aone.com.au>
        I liked the idea of changeable defaults for cachemgr.cgi but thought
something that I could bookmark so that getting to a number of different
proxies was a bookmark away.

        Below is my attempt at achieving this. I use the QUERY_STRING
environment variable to pass in the proxy host & port number as

                .../cgi-bin/cachemgr.cgi?<proxy host>:<port number>",40,data/crawl/squid/hunk_7571.cpp,,,data/crawl/squid/old_hunk_7571.cpp,data/crawl/squid/new_hunk_7571.cpp,3,3,"printf(""<p><em><A HREF=\""%s\"">Empty form</A></em></p>\n"", script_name);","printf(""<p><em><A HREF=\""%s?%s:%d\"">Empty form</A></em></p>\n"", script_name,
	query_host, query_port);","[""addVariable""]","[[""%s\\""], [""%s"", ""%s"", ""%d\\"", ""query_host"", ""query_port""]]",[1048538202904477678],6823,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,24,23,"printf(""<OPTION VALUE=\""stats/redirector\"">Redirector Statistics\n"");","print_option(op, STATS_R);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/redirector\\"", ""Redirector"", ""Statistics\\n""], [""print_option"", ""op"", ""STATS_R""]]",[-90683033449648112],6822,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,23,22,"printf(""<OPTION VALUE=\""stats/dns\"">DNS Server Statistics\n"");","print_option(op, STATS_D);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/dns\\"", ""DNS"", ""Server"", ""Statistics\\n""], [""print_option"", ""op"", ""STATS_D""]]",[-8960997079493189923],6821,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,22,21,"printf(""<OPTION VALUE=\""stats/fqdncache\"">FQDN Cache Contents\n"");","print_option(op, STATS_F);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/fqdncache\\"", ""FQDN"", ""Cache"", ""Contents\\n""], [""print_option"", ""op"", ""STATS_F""]]",[2853397224556786535],6820,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,21,20,"printf(""<OPTION VALUE=\""stats/ipcache\"">IP Cache Contents\n"");","print_option(op, STATS_I);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/ipcache\\"", ""IP"", ""Cache"", ""Contents\\n""], [""print_option"", ""op"", ""STATS_I""]]",[632831879309844688],6819,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,20,19,"printf(""<OPTION VALUE=\""server_list\"">Cache Server List\n"");","print_option(op, SERVER);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""server_list\\"", ""Cache"", ""Server"", ""List\\n""], [""print_option"", ""op"", ""SERVER""]]",[10511872350889121404],6818,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,19,18,"printf(""<OPTION VALUE=\""stats/vm_objects\"">VM_Objects\n"");","print_option(op, STATS_VM);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/vm_objects\\"", ""VM_Objects\\n""], [""print_option"", ""op"", ""STATS_VM""]]",[9665445805269658591],6817,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,18,17,"printf(""<OPTION VALUE=\""stats/objects\"">Objects\n"");","print_option(op, STATS_O);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/objects\\"", ""Objects\\n""], [""print_option"", ""op"", ""STATS_O""]]",[-16239782748446456142],6816,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,17,16,"printf(""<OPTION VALUE=\""stats/filedescriptors\"">Filedescriptor Usage\n"");","print_option(op, STATS_FDS);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/filedescriptors\\"", ""Filedescriptor"", ""Usage\\n""], [""print_option"", ""op"", ""STATS_FDS""]]",[3070119916795852726],6815,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,16,15,"printf(""<OPTION VALUE=\""stats/reply_headers\"">HTTP Reply Headers\n"");","print_option(op, STATS_HDRS);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/reply_headers\\"", ""HTTP"", ""Reply"", ""Headers\\n""], [""print_option"", ""op"", ""STATS_HDRS""]]",[-3933167973364664597],6814,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,15,14,"printf(""<OPTION VALUE=\""stats/io\"">I/O\n"");","print_option(op, STATS_IO);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/io\\"", ""I/O\\n""], [""print_option"", ""op"", ""STATS_IO""]]",[6046403672980567070],6813,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,14,13,"printf(""<OPTION VALUE=\""stats/utilization\"">Utilization\n"");","print_option(op, STATS_U);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""stats/utilization\\"", ""Utilization\\n""], [""print_option"", ""op"", ""STATS_U""]]",[-12308058500309744580],6812,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,12,11,"printf(""<OPTION VALUE=\""log\"">Cache Log\n"");","print_option(op, LOG);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""log\\"", ""Cache"", ""Log\\n""], [""print_option"", ""op"", ""LOG""]]",[11854443745543060334],6811,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,10,9,"printf(""<OPTION VALUE=\""parameter\"">Cache Parameters\n"");","print_option(op, PARAM);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""parameter\\"", ""Cache"", ""Parameters\\n""], [""print_option"", ""op"", ""PARAM""]]",[-1326724882331020529],6810,0:00:00
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7502.cpp,,,data/crawl/squid/old_hunk_7502.cpp,data/crawl/squid/new_hunk_7502.cpp,9,8,"printf(""<OPTION VALUE=\""squid.conf\"">Cache Configuration File\n"");","print_option(op, CACHED);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""OPTION"", ""VALUE"", ""\\"", ""squid"", ""conf\\"", ""Cache"", ""Configuration"", ""File\\n""], [""print_option"", ""op"", ""CACHED""]]",[-2243033154644659567],6809,0:00:00
https://github.com/squid-cache/squid/commit/fddcd1e0281e2b92d67ce596a5ce45b0100e7a79,14 Sep 1996,"From:    Neil Murray <neil@aone.com.au>
        I liked the idea of changeable defaults for cachemgr.cgi but thought
something that I could bookmark so that getting to a number of different
proxies was a bookmark away.

        Below is my attempt at achieving this. I use the QUERY_STRING
environment variable to pass in the proxy host & port number as

                .../cgi-bin/cachemgr.cgi?<proxy host>:<port number>",40,data/crawl/squid/hunk_7568.cpp,,,data/crawl/squid/old_hunk_7568.cpp,data/crawl/squid/new_hunk_7568.cpp,7,8,"printf(""SIZE=30 VALUE=\""%d\"">\n\n"", CACHE_HTTP_PORT);","printf(""SIZE=30 VALUE=\""%d\"">\n\n"", port);","[""updateVariable""]","[[""CACHE_HTTP_PORT""], [""port""]]",[8839386030983199447],6808,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fddcd1e0281e2b92d67ce596a5ce45b0100e7a79,14 Sep 1996,"From:    Neil Murray <neil@aone.com.au>
        I liked the idea of changeable defaults for cachemgr.cgi but thought
something that I could bookmark so that getting to a number of different
proxies was a bookmark away.

        Below is my attempt at achieving this. I use the QUERY_STRING
environment variable to pass in the proxy host & port number as

                .../cgi-bin/cachemgr.cgi?<proxy host>:<port number>",40,data/crawl/squid/hunk_7568.cpp,,,data/crawl/squid/old_hunk_7568.cpp,data/crawl/squid/new_hunk_7568.cpp,5,6,"printf(""SIZE=30 VALUE=\""%s\"">\n\n"", CACHEMGR_HOSTNAME);","printf(""SIZE=30 VALUE=\""%s\"">\n\n"", host);","[""updateVariable""]","[[""CACHEMGR_HOSTNAME""], [""host""]]",[9862897625793279785],6807,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/67508012c81242770491cc6732a8a5b5e9715391,20 Sep 1996,"        - Fixed coredump in icpStateFree() when calling
          checkFailureRatio().
        - Added more stuff to net_db.c.
        - Fixed memory leak in stat_ipcache_get().
        - Changed __P back to _PARAMS.",977,data/crawl/squid/hunk_7516.cpp,,,data/crawl/squid/old_hunk_7516.cpp,data/crawl/squid/new_hunk_7516.cpp,-1,194,,"storeAppendPrintf(sentry, "" %s"", x->name);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%s"", ""x"", ""name""]]",[1906972441691148998],6806,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/67508012c81242770491cc6732a8a5b5e9715391,20 Sep 1996,"        - Fixed coredump in icpStateFree() when calling
          checkFailureRatio().
        - Added more stuff to net_db.c.
        - Fixed memory leak in stat_ipcache_get().
        - Changed __P back to _PARAMS.",977,data/crawl/squid/hunk_7516.cpp,,,data/crawl/squid/old_hunk_7516.cpp,data/crawl/squid/new_hunk_7516.cpp,-1,170,,"storeAppendPrintf(sentry, ""{Network DB Statistics:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Network"", ""DB"", ""Statistics"", ""\\n""]]",[809246232247150102],6805,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e97f40f4c3e673d5cbc1cd382a4b0c3044810c45,15 Oct 1996,rearrange USE_ICMP defines,451,data/crawl/squid/hunk_7473.cpp,,,data/crawl/squid/old_hunk_7473.cpp,data/crawl/squid/new_hunk_7473.cpp,44,-1,fatal_dump(xstrerror());,,"[""removeLog""]","[[""fatal_dump"", ""xstrerror""], []]",[6060328181111983635],6804,0:00:00
https://github.com/squid-cache/squid/commit/e97f40f4c3e673d5cbc1cd382a4b0c3044810c45,15 Oct 1996,rearrange USE_ICMP defines,451,data/crawl/squid/hunk_7476.cpp,,,data/crawl/squid/old_hunk_7476.cpp,data/crawl/squid/new_hunk_7476.cpp,-1,31,,"storeAppendPrintf(sentry, ""{%-16.16s %9s %7s %5s %s}\n"",
	""Network"",
	""recv/sent"",
	""RTT"",
	""Hops"",
	""Hostnames"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%"", ""16"", ""16s"", ""%9s"", ""%7s"", ""%5s"", ""%s"", ""\\n"", ""Network"", ""recv/sent"", ""RTT"", ""Hops"", ""Hostnames""]]",[-13068287709989147905],6803,"10 days, 12:00:00"
https://github.com/squid-cache/squid/commit/1fe4a4e1d88f097f1cfee23610fbed97b8fa1931,14 Jan 1997,fix ru.ru_maxrss in various ways,20,data/crawl/squid/hunk_7409.cpp,,,data/crawl/squid/old_hunk_7409.cpp,data/crawl/squid/new_hunk_7409.cpp,6,6,"fprintf(lf, ""Memory Usage: rss %ld KB\n"",
	(rusage.ru_maxrss * getpagesize()) >> 10);","fprintf(lf, ""Maximum Resident Size: %ld KB\n"",
	(rusage.ru_maxrss * getpagesize()) >> 10);","[""updateContent""]","[[""Memory"", ""Usage"", ""rss""], [""Maximum"", ""Resident"", ""Size""]]",[3900651794928102726],6802,0:00:00
https://github.com/squid-cache/squid/commit/1fe4a4e1d88f097f1cfee23610fbed97b8fa1931,14 Jan 1997,fix ru.ru_maxrss in various ways,20,data/crawl/squid/hunk_7408.cpp,,,data/crawl/squid/old_hunk_7408.cpp,data/crawl/squid/new_hunk_7408.cpp,7,7,"storeAppendPrintf(sentry, ""{\tProcess Size: rss %ld KB}\n"",
	(rusage.ru_maxrss * getpagesize()) >> 10);","storeAppendPrintf(sentry, ""{\tMaximum Resident Size: %ld KB}\n"",
	(rusage.ru_maxrss * getpagesize()) >> 10);","[""updateContent""]","[[""\\tProcess"", ""rss""], [""\\tMaximum"", ""Resident""]]",[140024472440747910],6801,0:00:00
https://github.com/squid-cache/squid/commit/f7a5493bb14e896efb02e2b12a03144e737e1f5d,25 Jul 1996,- Misc casts and cleanup from running Insight,77,data/crawl/squid/hunk_7672.cpp,,,data/crawl/squid/old_hunk_7672.cpp,data/crawl/squid/new_hunk_7672.cpp,13,11,"fatal_dump(""ipcache_release: expected i == result!"");","fatal_dump(""ipcache_release: i != table_entry!"");","[""updateContent""]","[[""expected"", ""result""], [""table_entry""]]",[-12437404892355442255],6800,"138 days, 12:00:00"
https://github.com/squid-cache/squid/commit/95d15928422453dc90b7c4d51dec52126ca4982a,30 Apr 1997,moving FD things to common fd.h,403,data/crawl/squid/hunk_7290.cpp,,,data/crawl/squid/old_hunk_7290.cpp,data/crawl/squid/new_hunk_7290.cpp,-1,8,,"fatal_dump(""comm_close: bad FD"");","[""addLog""]","[[], [""fatal_dump"", ""comm_close"", ""bad"", ""FD""]]",[-11972907313379474798],6799,0:00:00
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/hunk_7234.cpp,,,data/crawl/squid/old_hunk_7234.cpp,data/crawl/squid/new_hunk_7234.cpp,-1,30,,"storeAppendPrintf(e, ""<PRE>\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""PRE"", ""\\n""]]",[8202134892678371835],6798,0:00:00
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/hunk_7234.cpp,,,data/crawl/squid/old_hunk_7234.cpp,data/crawl/squid/new_hunk_7234.cpp,-1,28,,"storeAppendPrintf(e, ""FTP Directory: %s\n"", ftpState->title_url);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""FTP"", ""Directory"", ""%s\\n"", ""ftpState"", ""title_url""]]",[8861013139451281820],6797,0:00:00
https://github.com/squid-cache/squid/commit/03eb2f0154cbf163ffe8bb4cf8c7dbf23bfdebdf,20 Jun 1997,remove some of that HTTPCacheInfo->crap,234,data/crawl/squid/hunk_7178.cpp,,,data/crawl/squid/old_hunk_7178.cpp,data/crawl/squid/new_hunk_7178.cpp,28,-1,"storeAppendPrintf(sentry, "" "");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry""], []]",[-6068814885023758730],6796,0:00:00
https://github.com/squid-cache/squid/commit/a4394ebd753cb4b23be7aaf6a11f5a5cf833df0e,21 Jun 1997,"clean up access logging, remove lots of Cacheinfo garbage
Need to relocate enums to an enums.h file, too many other wierd
dependencies.",464,data/crawl/squid/hunk_7163.cpp,,,data/crawl/squid/old_hunk_7163.cpp,data/crawl/squid/new_hunk_7163.cpp,85,-1,"storeAppendPrintf(ctrl->sentry, close_bracket);",,"[""removeLog""]","[[""storeAppendPrintf"", ""ctrl"", ""sentry"", ""close_bracket""], []]",[-20277669353860243089],6795,0:00:00
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,-1,503,,"printf(""%s"", var);","[""addLog""]","[[], [""printf"", ""%s"", ""var""]]",[3494803623616240301],6794,0:00:00
https://github.com/squid-cache/squid/commit/c021888f94a0013f19e22e10426e5048327beae0,15 Oct 1996,"Make dnsserver, ftpget, redirector totally optional.
ftpget will be disabled for http_accel-only mode.",70,data/crawl/squid/hunk_7468.cpp,,,data/crawl/squid/old_hunk_7468.cpp,data/crawl/squid/new_hunk_7468.cpp,15,-1,"printf(""WARNING: redirect_children was set to a bad value: %d\n"",
	    Config.redirectChildren);",,"[""removeLog""]","[[""printf"", ""WARNING"", ""redirect_children"", ""was"", ""set"", ""to"", ""a"", ""bad"", ""value"", ""%d\\n"", ""Config"", ""redirectChildren""], []]",[3162602678448071865],6793,"127 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d2af947760f5e7a92ab3bf260744c55ce19ac073,11 Jul 1996,redirector up to snuff,639,data/crawl/squid/hunk_7693.cpp,,,data/crawl/squid/old_hunk_7693.cpp,data/crawl/squid/new_hunk_7693.cpp,-1,19,,"printf(""Setting it to the maximum (%d).\n"", DefaultRedirectChildrenMax);","[""addLog""]","[[], [""printf"", ""Setting"", ""it"", ""to"", ""the"", ""maximum"", ""%d"", ""\\n"", ""DefaultRedirectChildrenMax""]]",[20849850010002208210],6792,"175 days, 12:00:00"
https://github.com/squid-cache/squid/commit/579a45cde642b80a5f75f7389eefb379a5d438de,06 Sep 1996,"Make storeGetMemSpace() call 'purge' for some objects and 'release'
for others.",71,data/crawl/squid/hunk_7597.cpp,,,data/crawl/squid/old_hunk_7597.cpp,data/crawl/squid/new_hunk_7597.cpp,-1,14,,"fatal_dump(""storeGetMemSpace: Bad Entry in LRU list"");","[""addLog""]","[[], [""fatal_dump"", ""storeGetMemSpace"", ""Bad"", ""Entry"", ""in"", ""LRU"", ""list""]]",[9562399362135629917],6791,"156 days, 0:00:00"
https://github.com/squid-cache/squid/commit/36fd4d1297855ec60c671cb13aab17dec713763e,13 Sep 1996,update,10,data/crawl/squid/hunk_7572.cpp,,,data/crawl/squid/old_hunk_7572.cpp,data/crawl/squid/new_hunk_7572.cpp,-1,6,,fatal_dump();,"[""addLog""]","[[], [""fatal_dump""]]",[-8713004596475217207],6790,"153 days, 12:00:00"
https://github.com/squid-cache/squid/commit/f53b06f967ce5bdf5b076bba55d41f8d45a3077d,25 Aug 1997,"Configuration cleanup.
	- set up 'DEFAULT_IF_NONE' option for things like http_port
	  and cache_dir where we want to set a default only if there
	  is not one or more given in the config file.
	- Implemented the configuration dump via cachemanager.  All the
	  easy config types have dump functions; the remainder are
	  unimplemented.",220,data/crawl/squid/hunk_7088.cpp,,,data/crawl/squid/old_hunk_7088.cpp,data/crawl/squid/new_hunk_7088.cpp,10,-1,"printf(""}"");",,"[""removeLog""]","[[""printf""], []]",[-7237409554864562455],6789,0:00:00
https://github.com/squid-cache/squid/commit/641941c002e567b2a9d108130acdd1a86111be96,29 Mar 1997,Started implementing diff cache dir sizes,385,data/crawl/squid/hunk_7358.cpp,,,data/crawl/squid/old_hunk_7358.cpp,data/crawl/squid/new_hunk_7358.cpp,-1,4,,"fatal(""No cache_dir's specified in config file"");","[""addLog""]","[[], [""fatal"", ""No"", ""cache_dir"", ""s"", ""specified"", ""in"", ""config"", ""file""]]",[-5002055989006717529],6788,"74 days, 12:00:00"
https://github.com/squid-cache/squid/commit/79d39a72a5cc1eb6da806eddab662fed74ab6efe,05 Nov 1997,LINT,332,data/crawl/squid/hunk_6994.cpp,,,data/crawl/squid/old_hunk_6994.cpp,data/crawl/squid/new_hunk_6994.cpp,6,7,fatal_dump(NULL);,assert(e1 != NULL && e2 != NULL);,"[""updateLog"", ""addVariable""]","[[""fatal_dump""], [""assert"", ""e1"", ""&&"", ""e2"", ""NULL""]]",[10865151936969747635],6787,0:00:00
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,511,-1,"printf(""WARNING: dnsservers are disabled!\n"");",,"[""removeLog""]","[[""printf"", ""WARNING"", ""dnsservers"", ""are"", ""disabled"", ""\\n""], []]",[-8898563971015925156],6786,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7159.cpp,,,data/crawl/squid/old_hunk_7159.cpp,data/crawl/squid/new_hunk_7159.cpp,497,-1,"printf(""WARNING: cache_swap (%d kbytes) is less than cache_mem (%d bytes).\n"", Config.Swap.maxSize, Config.Mem.maxSize);",,"[""removeLog""]","[[""printf"", ""WARNING"", ""cache_swap"", ""%d"", ""kbytes"", ""is"", ""less"", ""than"", ""cache_mem"", ""%d"", ""bytes"", ""\\n"", ""Config"", ""Swap"", ""maxSize"", ""Config"", ""Mem"", ""maxSize""], []]",[-2620933435431787524],6785,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ce66013b40dad272f568df241b6f1fb238cec97f,13 Nov 1997,remove fatal_dump calls,59,data/crawl/squid/hunk_6981.cpp,,,data/crawl/squid/old_hunk_6981.cpp,data/crawl/squid/new_hunk_6981.cpp,4,-1,"fatal_dump(""sslStateFree: FD mismatch!\n"");",,"[""removeLog""]","[[""fatal_dump"", ""sslStateFree"", ""FD"", ""mismatch"", ""\\n""], []]",[6575889428949358056],6784,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6958.cpp,,,data/crawl/squid/old_hunk_6958.cpp,data/crawl/squid/new_hunk_6958.cpp,-1,941,,"fprintf(stderr, ""Out of memory!\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Out"", ""of"", ""memory"", ""\\n""]]",[-2829632968305792191],6783,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6958.cpp,,,data/crawl/squid/old_hunk_6958.cpp,data/crawl/squid/new_hunk_6958.cpp,-1,1125,,"fprintf(stderr, ""Error building packet\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""building"", ""packet\\n""]]",[-5499772573560979573],6782,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1549,,"print_error(""Bad parse of module identity"", (char *)NULL,
				type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""parse"", ""of"", ""module"", ""identity"", ""char"", ""*"", ""NULL"", ""type""]]",[7997078272424875002],6781,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1529,,"print_error(""Bad parse of module compliance"", (char *)NULL,
				type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""parse"", ""of"", ""module"", ""compliance"", ""char"", ""*"", ""NULL"", ""type""]]",[-4890720600463276281],6780,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1509,,"print_error(""Bad parse of notification definition"",
				(char *)NULL, type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""parse"", ""of"", ""notification"", ""definition"", ""char"", ""*"", ""NULL"", ""type""]]",[4323801684523373336],6779,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1568,,"print_error(""Bad parse of object type"", (char *)NULL,
				type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""parse"", ""of"", ""object"", ""type"", ""char"", ""*"", ""NULL"", ""type""]]",[1341106843915763349],6778,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1040,,"print_error(""Bad syntax"", token, type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""syntax"", ""token"", ""type""]]",[17848780491021707584],6777,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1125,,"print_error(""Bad format"", token, type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""format"", ""token"", ""type""]]",[17693141389288487800],6776,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6956.cpp,,,data/crawl/squid/old_hunk_6956.cpp,data/crawl/squid/new_hunk_6956.cpp,-1,820,,"fprintf(stderr, ""Mib not initialized.  Exiting.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Mib"", ""not"", ""initialized"", ""Exiting"", ""\\n""]]",[2000251782537818125],6775,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6956.cpp,,,data/crawl/squid/old_hunk_6956.cpp,data/crawl/squid/new_hunk_6956.cpp,-1,896,,"fprintf(stderr, ""sub-identifier too large: %s\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""sub"", ""identifier"", ""too"", ""large"", ""%s\\n"", ""buf""]]",[-8920168857096952611],6774,0:00:00
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7733.cpp,,,data/crawl/squid/old_hunk_7733.cpp,data/crawl/squid/new_hunk_7733.cpp,-1,148,,"fatal(""Cannot open Outgoing ICP Port"");","[""addLog""]","[[], [""fatal"", ""Cannot"", ""open"", ""Outgoing"", ""ICP"", ""Port""]]",[-5533911984522645564],6773,"251 days, 0:00:00"
https://github.com/squid-cache/squid/commit/735246e86fc1bb9e29e2e9701ee08a586ab438ea,14 Oct 1997,adding,246,data/crawl/squid/hunk_7050.cpp,,,data/crawl/squid/old_hunk_7050.cpp,data/crawl/squid/new_hunk_7050.cpp,-1,168,,"fprintf(stderr, ""usage: %s: -p port -h host -n max\n"", progname);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""usage"", ""%s"", ""p"", ""port"", ""h"", ""host"", ""n"", ""max\\n"", ""progname""]]",[-4251147104453689710],6772,"21 days, 0:00:00"
https://github.com/squid-cache/squid/commit/735246e86fc1bb9e29e2e9701ee08a586ab438ea,14 Oct 1997,adding,246,data/crawl/squid/hunk_7050.cpp,,,data/crawl/squid/old_hunk_7050.cpp,data/crawl/squid/new_hunk_7050.cpp,-1,151,,"printf(""Done Reading URLS\n"");","[""addLog""]","[[], [""printf"", ""Done"", ""Reading"", ""URLS\\n""]]",[-13343316361656720164],6771,"21 days, 0:00:00"
https://github.com/squid-cache/squid/commit/735246e86fc1bb9e29e2e9701ee08a586ab438ea,14 Oct 1997,adding,246,data/crawl/squid/hunk_7050.cpp,,,data/crawl/squid/old_hunk_7050.cpp,data/crawl/squid/new_hunk_7050.cpp,-1,82,,"printf (""\rWaiting for open connections to finish...\n"");","[""addLog""]","[[], [""printf"", ""\\rWaiting"", ""for"", ""open"", ""connections"", ""to"", ""finish"", ""\\n""]]",[19301964869545538919],6770,"21 days, 0:00:00"
https://github.com/squid-cache/squid/commit/76f729d7a57dcc3f80997ba33acbb78d8bbd9eb0,21 Dec 1997,"Radix-tree algorithm, from NetBSD-4.4",898,data/crawl/squid/hunk_6881.cpp,,,data/crawl/squid/old_hunk_6881.cpp,data/crawl/squid/new_hunk_6881.cpp,-1,686,,"fprintf(stderr, ""rn_delete: inconsistent annotation\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""rn_delete"", ""inconsistent"", ""annotation\\n""]]",[-19893265211029631873],6769,0:00:00
https://github.com/squid-cache/squid/commit/d41a5e15d92b5854c778a1124acebdadc541a497,07 Feb 1997,bail on root,9,data/crawl/squid/hunk_7393.cpp,,,data/crawl/squid/old_hunk_7393.cpp,data/crawl/squid/new_hunk_7393.cpp,-1,8,,"fatal(""Don't run Squid as root, set 'cache_effective_user'!"");","[""addLog""]","[[], [""fatal"", ""Don"", ""t"", ""run"", ""Squid"", ""as"", ""root"", ""set"", ""cache_effective_user""]]",[-18336888759707698090],6768,"166 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3f6c0fb2ca6b48600072d274f5bacd0ecb422a15,12 Jan 1998,new memory allocation for fixed-size blocks,729,data/crawl/squid/hunk_6865.cpp,,,data/crawl/squid/old_hunk_6865.cpp,data/crawl/squid/new_hunk_6865.cpp,3,3,"storeAppendPrintf(sentry, ""Store Entries          : %d\n"", meta_data.store_entries);","storeAppendPrintf(sentry, ""Store Entries          : %d\n"",
	memInUse(MEM_STOREENTRY));","[""removeVariable"", ""addVariable""]","[[""meta_data"", ""store_entries""], [""memInUse"", ""MEM_STOREENTRY""]]",[-3822276254173549766],6767,0:00:00
https://github.com/squid-cache/squid/commit/d5649d9f35c421edf02183b397d058a5e15164c2,05 Jan 1998,fix five-min average stuff,124,data/crawl/squid/hunk_6876.cpp,,,data/crawl/squid/old_hunk_6876.cpp,data/crawl/squid/new_hunk_6876.cpp,-1,67,,"storeAppendPrintf(sentry, ""wall_time = %f seconds\n"", dt);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""wall_time"", ""%f"", ""seconds\\n"", ""dt""]]",[1067573474463398996],6766,"13 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d5649d9f35c421edf02183b397d058a5e15164c2,05 Jan 1998,fix five-min average stuff,124,data/crawl/squid/hunk_6876.cpp,,,data/crawl/squid/old_hunk_6876.cpp,data/crawl/squid/new_hunk_6876.cpp,-1,66,,"storeAppendPrintf(sentry, ""cpu_time = %f seconds\n"", ct);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cpu_time"", ""%f"", ""seconds\\n"", ""ct""]]",[1940876692940817866],6765,"13 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6857.cpp,,,data/crawl/squid/old_hunk_6857.cpp,data/crawl/squid/new_hunk_6857.cpp,32,-1,fatal(xstrerror());,,"[""removeLog""]","[[""fatal"", ""xstrerror""], []]",[2294497512835379361],6764,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,43,42,"storeAppendPrintf(sentry, ""{\tCPU Time:\t%.3f seconds}\n"", cputime);","storeAppendPrintf(sentry, ""\tCPU Time:\t%.3f seconds\n"", cputime);","[""updateContent""]","[[""seconds"", ""\\n""], [""seconds\\n""]]",[-3934719272372798284],6763,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6829.cpp,,,data/crawl/squid/old_hunk_6829.cpp,data/crawl/squid/new_hunk_6829.cpp,8,7,"storeAppendPrintf(sentry, ""{Current Time:\t%s}\n"",
	mkrfc1123(current_time.tv_sec));","storeAppendPrintf(sentry, ""Current Time:\t%s\n"",
	mkrfc1123(current_time.tv_sec));","[""updateContent""]","[[""\\t%s"", ""\\n""], [""\\t%s\\n""]]",[-1330682662106328288],6762,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6815.cpp,,,data/crawl/squid/old_hunk_6815.cpp,data/crawl/squid/new_hunk_6815.cpp,34,34,"storeAppendPrintf(sentry, ""{    Read Offset: %d bytes}\n"",
	    dns->offset);","storeAppendPrintf(sentry, ""    Read Offset: %d bytes\n"",
	    dns->offset);","[""updateContent""]","[[""bytes"", ""\\n""], [""bytes\\n""]]",[3040561417812119672],6761,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6826.cpp,,,data/crawl/squid/old_hunk_6826.cpp,data/crawl/squid/new_hunk_6826.cpp,5,-1,"storeAppendPrintf(sentry, ""{There are no neighbors installed.}\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""There"", ""are"", ""no"", ""neighbors"", ""installed"", ""\\n""], []]",[-21427585880408419704],6760,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7822.cpp,,,data/crawl/squid/old_hunk_7822.cpp,data/crawl/squid/new_hunk_7822.cpp,-1,35,,"storeAppendPrintf(sentry, ""{DOMAIN LIST: "");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""DOMAIN"", ""LIST""]]",[20444842400479138936],6759,"336 days, 0:00:00"
https://github.com/squid-cache/squid/commit/30a4f2a885dbb469498c0e805e1e8d42244788be,09 Jul 1996,cleanup after big merge,12717,data/crawl/squid/hunk_7750.cpp,,,data/crawl/squid/old_hunk_7750.cpp,data/crawl/squid/new_hunk_7750.cpp,-1,25,,"storeAppendPrintf(sentry, ""{Histogram of PINGS ACKED:}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Histogram"", ""of"", ""PINGS"", ""ACKED"", ""\\n""]]",[10610578670362077077],6758,"295 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c30c5a739f6b27a74c8750c6b4aa01daad7c813e,19 Apr 1996,use storeAppendPrintf() instead of sprintf();storeAppend(),371,data/crawl/squid/hunk_7822.cpp,,,data/crawl/squid/old_hunk_7822.cpp,data/crawl/squid/new_hunk_7822.cpp,-1,16,,"storeAppendPrintf(sentry, ""{There are no neighbors installed.}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""There"", ""are"", ""no"", ""neighbors"", ""installed"", ""\\n""]]",[21427585880408419704],6757,"336 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6783.cpp,,,data/crawl/squid/old_hunk_6783.cpp,data/crawl/squid/new_hunk_6783.cpp,47,-1,"storeAppendPrintf(e, ""\t%4d  %9d\n"", i, server_pconn_hist[i]);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""\\t%4d"", ""%9d\\n"", ""i"", ""server_pconn_hist[i]""], []]",[-4661309132147493222],6756,0:00:00
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6783.cpp,,,data/crawl/squid/old_hunk_6783.cpp,data/crawl/squid/new_hunk_6783.cpp,26,-1,"storeAppendPrintf(e,
	""Client-side persistent connection counts:\n""
	""\n""
	""\treq/\n""
	""\tconn      count\n""
	""\t----  ---------\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""Client"", ""side"", ""persistent"", ""connection"", ""counts"", ""\\n"", ""\\n"", ""\\treq/\\n"", ""\\tconn"", ""count\\n"", ""\\t"", ""\\n""], []]",[-18179187017519893231],6755,0:00:00
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6781.cpp,,,data/crawl/squid/old_hunk_6781.cpp,data/crawl/squid/new_hunk_6781.cpp,-1,31,,"storeAppendPrintf(e, ""\t%4d  %9d\n"", i, client_pconn_hist[i]);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""\\t%4d"", ""%9d\\n"", ""i"", ""client_pconn_hist[i]""]]",[3068874400049008290],6754,0:00:00
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6781.cpp,,,data/crawl/squid/old_hunk_6781.cpp,data/crawl/squid/new_hunk_6781.cpp,-1,22,,"storeAppendPrintf(e,
        ""Client-side persistent connection counts:\n""
        ""\n""
        ""\treq/\n""
        ""\tconn      count\n""
        ""\t----  ---------\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""Client"", ""side"", ""persistent"", ""connection"", ""counts"", ""\\n"", ""\\n"", ""\\treq/\\n"", ""\\tconn"", ""count\\n"", ""\\t"", ""\\n""]]",[18179187017519893231],6753,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6758.cpp,,,data/crawl/squid/old_hunk_6758.cpp,data/crawl/squid/new_hunk_6758.cpp,-1,381,,"printf(""VARS %d: Encoding NULL at 0x%x\n"", Counter, bufp);","[""addLog""]","[[], [""printf"", ""VARS"", ""%d"", ""Encoding"", ""NULL"", ""at"", ""0x%x\\n"", ""Counter"", ""bufp""]]",[-2577900448518484852],6752,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6758.cpp,,,data/crawl/squid/old_hunk_6758.cpp,data/crawl/squid/new_hunk_6758.cpp,-1,219,,"printf(""VARS: Cloned  (%x)\n"", (unsigned int)Dest);","[""addLog""]","[[], [""printf"", ""VARS"", ""Cloned"", ""%x"", ""\\n"", ""unsigned"", ""int"", ""Dest""]]",[-23764653827026217162],6751,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6758.cpp,,,data/crawl/squid/old_hunk_6758.cpp,data/crawl/squid/new_hunk_6758.cpp,-1,152,,"printf(""VARS: Created (%x)\n"", (unsigned int)New);","[""addLog""]","[[], [""printf"", ""VARS"", ""Created"", ""%x"", ""\\n"", ""unsigned"", ""int"", ""New""]]",[-18167291016024732353],6750,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6757.cpp,,,data/crawl/squid/old_hunk_6757.cpp,data/crawl/squid/new_hunk_6757.cpp,-1,185,,"fprintf(out, ""LIBSNMP: ----------------------------------------\n"");","[""addLog""]","[[], [""fprintf"", ""out"", ""LIBSNMP"", ""\\n""]]",[4064873767396912617],6749,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6957.cpp,,,data/crawl/squid/old_hunk_6957.cpp,data/crawl/squid/new_hunk_6957.cpp,-1,1562,,"print_error(""Bad parse of object id"", (char *)NULL, type);","[""addLog""]","[[], [""print_error"", ""Bad"", ""parse"", ""of"", ""object"", ""id"", ""char"", ""*"", ""NULL"", ""type""]]",[-959491297452506378],6748,"46 days, 12:00:00"
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,848,-1,"print_error(""Bad parse of module identity"", (char *) NULL,
			type);",,"[""removeLog""]","[[""print_error"", ""Bad"", ""parse"", ""of"", ""module"", ""identity"", ""char"", ""*"", ""NULL"", ""type""], []]",[-7997078272424875002],6747,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,828,-1,"print_error(""Bad parse of module compliance"", (char *) NULL,
			type);",,"[""removeLog""]","[[""print_error"", ""Bad"", ""parse"", ""of"", ""module"", ""compliance"", ""char"", ""*"", ""NULL"", ""type""], []]",[4890720600463276281],6746,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,808,-1,"print_error(""Bad parse of notification definition"",
			(char *) NULL, type);",,"[""removeLog""]","[[""print_error"", ""Bad"", ""parse"", ""of"", ""notification"", ""definition"", ""char"", ""*"", ""NULL"", ""type""], []]",[-4323801684523373336],6745,0:00:00
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6752.cpp,,,data/crawl/squid/old_hunk_6752.cpp,data/crawl/squid/new_hunk_6752.cpp,294,-1,"print_error(""Expected \"")\"""", token, type);",,"[""removeLog""]","[[""print_error"", ""Expected"", ""\\"", ""\\"", ""token"", ""type""], []]",[-23625327351001242289],6744,0:00:00
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6956.cpp,,,data/crawl/squid/old_hunk_6956.cpp,data/crawl/squid/new_hunk_6956.cpp,-1,995,,"printf(""%s"", buf);","[""addLog""]","[[], [""printf"", ""%s"", ""buf""]]",[7569169800143846097],6743,"46 days, 12:00:00"
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6956.cpp,,,data/crawl/squid/old_hunk_6956.cpp,data/crawl/squid/new_hunk_6956.cpp,-1,1067,,"printf(""%s\n"", tempbuf);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""tempbuf""]]",[15369913385445251411],6742,"46 days, 12:00:00"
https://github.com/squid-cache/squid/commit/627f6d02e9baad40c38bd35ef893fc6bc9a22ca1,21 Nov 1997,"SNMP, cmu derived, heavily modified",5272,data/crawl/squid/hunk_6956.cpp,,,data/crawl/squid/old_hunk_6956.cpp,data/crawl/squid/new_hunk_6956.cpp,-1,982,,"printf(""%s\n"", buf);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""buf""]]",[13709399011105512741],6741,"46 days, 12:00:00"
https://github.com/squid-cache/squid/commit/85269fdf3c2a36641dfae2cf71f495a38c95cc28,22 Feb 1998,"Snmplib for squid, based on v1.8, heavily changed",8289,data/crawl/squid/hunk_6746.cpp,,,data/crawl/squid/old_hunk_6746.cpp,data/crawl/squid/new_hunk_6746.cpp,56,-1,"fprintf(stderr, ""object identifier too long\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""object"", ""identifier"", ""too"", ""long\\n""], []]",[16428620954377002349],6740,0:00:00
https://github.com/squid-cache/squid/commit/a8f7d3ee8f37334ed638d2ee22a55bdb49f44291,31 Aug 1996,merge 1.0.11 changes,235,data/crawl/squid/hunk_7607.cpp,,,data/crawl/squid/old_hunk_7607.cpp,data/crawl/squid/new_hunk_7607.cpp,7,-1,"printf(""</FORM>\n"");",,"[""removeLog""]","[[""printf"", ""/FORM"", ""\\n""], []]",[-15263044218574330895],6739,"270 days, 12:00:00"
https://github.com/squid-cache/squid/commit/f7d9a2ad2e0f5a75c6ec42b13c5c3ac96214beef,07 Oct 1996,"From:    Markus Gyger <mgyger@itr.ch>
OK, I couldn't resist to make some changes in cachemgr.c:

    - URLs like .../cgi-bin/cachemgr?proxy.w3.org:3128 should now work
    - .../cgi-bin/cachemgr?host=proxy&port=3128&url=http://www.x.org/&operation=
refresh
      works like a POST request (parameters may be omitted)
    - removed ""Current"" item in operation selection;
      previous selection is remembered
    - added ""Empty Form"" entry in selection",352,data/crawl/squid/hunk_7501.cpp,,,data/crawl/squid/old_hunk_7501.cpp,data/crawl/squid/new_hunk_7501.cpp,134,-1,"printf(""Unknown operation: %s\n"", operation);",,"[""removeLog""]","[[""printf"", ""Unknown"", ""operation"", ""%s\\n"", ""operation""], []]",[-14080718154647789094],6738,"252 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d23f4e1b36396b975b3de1a630942be944069f3b,23 Feb 1998,new squid-independent cachemgr.cgi,1029,data/crawl/squid/hunk_6741.cpp,,,data/crawl/squid/old_hunk_6741.cpp,data/crawl/squid/new_hunk_6741.cpp,448,-1,"printf(""<HR>\n"");",,"[""removeLog""]","[[""printf"", ""HR"", ""\\n""], []]",[-7262497705588788951],6737,0:00:00
https://github.com/squid-cache/squid/commit/d0e0c8d2e44a6abe849832bb9d03295295be42e6,24 Feb 1998,Update,1347,data/crawl/squid/hunk_6734.cpp,,,data/crawl/squid/old_hunk_6734.cpp,data/crawl/squid/new_hunk_6734.cpp,159,155,"printf(""Ignoring PDU %d\n"", PDU->command);","debug(49, 9) (""Ignoring PDU %d\n"", PDU->command);","[""updateLog"", ""moveLog"", ""addContent""]","[[""printf""], [""debug"", ""49"", ""9""]]",[481017038546728640],6736,0:00:00
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,36,,"storeAppendPrintf(sentry, ""wall_time = %f\n"",
        tvSubDsec(f->timestamp, current_time));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""wall_time"", ""%f\\n"", ""tvSubDsec"", ""f"", ""timestamp"", ""current_time""]]",[7225499045681938401],6735,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,34,,"storeAppendPrintf(sentry, ""cpu_time = %f\n"",
	f->cputime);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cpu_time"", ""%f\\n"", ""f"", ""cputime""]]",[10681447212033283360],6734,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,32,,"storeAppendPrintf(sentry, ""select_loops = %d\n"",
	f->select_loops);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""select_loops"", ""%d\\n"", ""f"", ""select_loops""]]",[19552141474140858902],6733,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,30,,"storeAppendPrintf(sentry, ""page_faults = %d\n"",
	f->page_faults);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""page_faults"", ""%d\\n"", ""f"", ""page_faults""]]",[8775029013852970286],6732,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,28,,"storeAppendPrintf(sentry, ""unlink.requests = %d\n"",
	f->unlink.requests);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""unlink"", ""requests"", ""%d\\n"", ""f"", ""unlink"", ""requests""]]",[14424672953305956856],6731,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,18,,"storeAppendPrintf(sentry, ""server.kbytes_out = %d\n"",
	(int) f->server.kbytes_out.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""server"", ""kbytes_out"", ""%d\\n"", ""int"", ""f"", ""server"", ""kbytes_out"", ""kb""]]",[-4372552772645165581],6730,0:00:00
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,16,,"storeAppendPrintf(sentry, ""server.kbytes_in = %d\n"",
	(int) f->server.kbytes_in.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""server"", ""kbytes_in"", ""%d\\n"", ""int"", ""f"", ""server"", ""kbytes_in"", ""kb""]]",[5852715778484342843],6729,0:00:00
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,14,,"storeAppendPrintf(sentry, ""server.errors = %d\n"",
	(int) f->server.errors);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""server"", ""errors"", ""%d\\n"", ""int"", ""f"", ""server"", ""errors""]]",[-10659075048449863174],6728,0:00:00
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6727.cpp,,,data/crawl/squid/old_hunk_6727.cpp,data/crawl/squid/new_hunk_6727.cpp,-1,12,,"storeAppendPrintf(sentry, ""server.requests = %d\n"",
	(int) f->server.requests);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""server"", ""requests"", ""%d\\n"", ""int"", ""f"", ""server"", ""requests""]]",[4153088057896327848],6727,0:00:00
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,18,,"storeAppendPrintf(sentry, ""client_http.kbytes_out = %d\n"",
	(int) f->client_http.kbytes_out.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""kbytes_out"", ""%d\\n"", ""int"", ""f"", ""client_http"", ""kbytes_out"", ""kb""]]",[13540181629153195307],6726,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,16,,"storeAppendPrintf(sentry, ""client_http.kbytes_in = %d\n"",
	(int) f->client_http.kbytes_in.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""kbytes_in"", ""%d\\n"", ""int"", ""f"", ""client_http"", ""kbytes_in"", ""kb""]]",[23765450180282703731],6725,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,14,,"storeAppendPrintf(sentry, ""client_http.errors = %d\n"",
	f->client_http.errors);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""errors"", ""%d\\n"", ""f"", ""client_http"", ""errors""]]",[14809023724203262378],6724,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,12,,"storeAppendPrintf(sentry, ""client_http.hits = %d\n"",
	f->client_http.hits);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""hits"", ""%d\\n"", ""f"", ""client_http"", ""hits""]]",[44393885824770128424],6723,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6860.cpp,,,data/crawl/squid/old_hunk_6860.cpp,data/crawl/squid/new_hunk_6860.cpp,-1,10,,"storeAppendPrintf(sentry, ""client_http.requests = %d\n"",
	f->client_http.requests);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""requests"", ""%d\\n"", ""f"", ""client_http"", ""requests""]]",[29621186830549453400],6722,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6715.cpp,,,data/crawl/squid/old_hunk_6715.cpp,data/crawl/squid/new_hunk_6715.cpp,-1,95,,"storeAppendPrintf(e, ""%s\n"", ""<hr size=1 noshade>"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%s\\n"", ""hr"", ""size"", ""1"", ""noshade""]]",[10036459428081683775],6721,0:00:00
https://github.com/squid-cache/squid/commit/36a97e19531e381006a0b7201d79c65572cce2c3,27 Feb 1998,patch for logging malloc/calloc/free traces to file,85,data/crawl/squid/hunk_6678.cpp,,,data/crawl/squid/old_hunk_6678.cpp,data/crawl/squid/new_hunk_6678.cpp,-1,4,,"fprintf(tracefp,""f:%x\n"",s);","[""addLog""]","[[], [""fprintf"", ""tracefp"", ""f"", ""%x\\n"", ""s""]]",[-4185227475741869624],6720,0:00:00
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6715.cpp,,,data/crawl/squid/old_hunk_6715.cpp,data/crawl/squid/new_hunk_6715.cpp,-1,65,,"storeAppendPrintf(e, ""<br><h3>Long String Stats</h3>\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""br"", ""h3"", ""Long"", ""String"", ""Stats"", ""/h3"", ""\\n""]]",[6771819759970315408],6719,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6715.cpp,,,data/crawl/squid/old_hunk_6715.cpp,data/crawl/squid/new_hunk_6715.cpp,-1,25,,"storeAppendPrintf(sentry, ""%2d\t %-20s\t %5d\t %6.2f\n"",
	    id, name, count, xdiv(count, CcPasredCount));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%2d\\t"", ""%"", ""20s\\t"", ""%5d\\t"", ""%6"", ""2f\\n"", ""id"", ""name"", ""count"", ""xdiv"", ""count"", ""CcPasredCount""]]",[20114730292022789432],6718,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/1df370e38a088aa3c12e0971d7324351325ff724,02 Dec 1997,"make SNMP code #ifdef-able, including config parsing",122,data/crawl/squid/hunk_6890.cpp,,,data/crawl/squid/old_hunk_6890.cpp,data/crawl/squid/new_hunk_6890.cpp,6,-1,"storeAppendPrintf(entry, ""%s -- UNIMPLEMENTED\n"", name);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""UNIMPLEMENTED\\n"", ""name""], []]",[8524465994432361915],6717,"52 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/hunk_6568.cpp,,,data/crawl/squid/old_hunk_6568.cpp,data/crawl/squid/new_hunk_6568.cpp,-1,179,,"fprintf(stderr, ""%s:%d: unknown swap log action\n"", fname, count);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%d"", ""unknown"", ""swap"", ""log"", ""action\\n"", ""fname"", ""count""]]",[-4349479986286482466],6716,12:00:00
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/hunk_6568.cpp,,,data/crawl/squid/old_hunk_6568.cpp,data/crawl/squid/new_hunk_6568.cpp,-1,146,,"fprintf(stderr, ""%s: scanned lines: %d\n"", 
	idx->name, idx->scanned_count);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""scanned"", ""lines"", ""%d\\n"", ""idx"", ""name"", ""idx"", ""scanned_count""]]",[-32770925052841502622],6715,12:00:00
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/hunk_6568.cpp,,,data/crawl/squid/old_hunk_6568.cpp,data/crawl/squid/new_hunk_6568.cpp,-1,144,,"fprintf(stderr, ""%s: bad swap_del:  %d\n"", 
	idx->name, idx->bad_del_count);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""bad"", ""swap_del"", ""%d\\n"", ""idx"", ""name"", ""idx"", ""bad_del_count""]]",[-37650082127031582687],6714,12:00:00
https://github.com/squid-cache/squid/commit/8667b85653445cbc52add5c21e84860f68863150,30 Mar 1998,"- Added cache_diff.c, a stand alone program that
    - Computes the difference between the contents of two caches using
      swap logs
    - Reports the percentage of common files and other stats",280,data/crawl/squid/hunk_6568.cpp,,,data/crawl/squid/old_hunk_6568.cpp,data/crawl/squid/new_hunk_6568.cpp,-1,142,,"fprintf(stderr, ""%s: bad swap_add:  %d\n"",
	idx->name, idx->bad_add_count);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""bad"", ""swap_add"", ""%d\\n"", ""idx"", ""name"", ""idx"", ""bad_add_count""]]",[-26870335904675328883],6713,12:00:00
https://github.com/squid-cache/squid/commit/6d80b36f5fa3546be4e989741a1165df97e33c14,01 Apr 1998,"- Added cacheDigestClone() method.
- major test_cache_digest updates",608,data/crawl/squid/hunk_6540.cpp,,,data/crawl/squid/old_hunk_6540.cpp,data/crawl/squid/new_hunk_6540.cpp,11,-1,"fprintf(stderr, ""%s scanning\n"", fname);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""scanning\\n"", ""fname""], []]",[3659830878210560945],6712,0:00:00
https://github.com/squid-cache/squid/commit/6d80b36f5fa3546be4e989741a1165df97e33c14,01 Apr 1998,"- Added cacheDigestClone() method.
- major test_cache_digest updates",608,data/crawl/squid/hunk_6537.cpp,,,data/crawl/squid/old_hunk_6537.cpp,data/crawl/squid/new_hunk_6537.cpp,110,138,"fprintf(stderr, ""%s: init-ed  digest with %d entries\n"",
	idx->name, idx->digest->count);","fprintf(stderr, ""%s: init-ed  digest with %d entries\n"",
	cache->name, cache->digest->count);","[""updateVariable""]","[[""idx"", ""idx""], [""cache"", ""cache""]]",[-1894896888047170934],6711,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,56,-1,"fatal_dump(""Invalid IP address"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""IP"", ""address""], []]",[25587333007482150697],6710,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,68,-1,"fatal_dump(""Invalid $ttl"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""ttl""], []]",[18337828980884710258],6709,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,64,-1,"fatal_dump(""Invalid alias"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""alias""], []]",[14133335461660142488],6708,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,60,-1,"fatal_dump(""Invalid $aliascount"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""aliascount""], []]",[11230306074212304254],6707,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,42,-1,"fatal_dump(""Invalid $ipcount"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""ipcount""], []]",[10563348015832141258],6706,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,38,-1,"fatal_dump(""Invalid $h_len"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""h_len""], []]",[24448664448630495720],6705,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,34,-1,"fatal_dump(""Invalid $h_name"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""h_name""], []]",[13419497249733194613],6704,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,30,-1,"fatal_dump(""Invalid $name"");",,"[""removeLog""]","[[""fatal_dump"", ""Invalid"", ""name""], []]",[21009176533381759780],6703,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6524.cpp,,,data/crawl/squid/old_hunk_6524.cpp,data/crawl/squid/new_hunk_6524.cpp,21,27,"fatal_dump(""Invalid $fail"");",xstrdup(token);,"[""updateLog"", ""removeContent"", ""addVariable""]","[[""fatal_dump"", ""Invalid"", ""fail""], [""xstrdup"", ""token""]]",[23960145393658786582],6702,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6521.cpp,,,data/crawl/squid/old_hunk_6521.cpp,data/crawl/squid/new_hunk_6521.cpp,91,-1,"printf(""$name %s\n"", request);",,"[""removeLog""]","[[""printf"", ""name"", ""%s\\n"", ""request""], []]",[-7309036292721935386],6701,0:00:00
https://github.com/squid-cache/squid/commit/09c483ecad0513bc7c5933e9c468713287f4606c,18 Feb 1998,"From:    Maxim Krasnyansky <max@viper.uznet.net>
Added 'dns_nameservers' config option to specify non-default DNS
nameserver addresses.",75,data/crawl/squid/hunk_6804.cpp,,,data/crawl/squid/old_hunk_6804.cpp,data/crawl/squid/new_hunk_6804.cpp,14,-1,"fprintf(stderr, ""Could not open dnsserver's log file\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Could"", ""not"", ""open"", ""dnsserver"", ""s"", ""log"", ""file\\n""], []]",[-6736872700914998490],6700,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/270b86af848681f97dab32924f8eb092ebb64d9a,27 Jun 1997,"Max Okumoto configuration file patch.  Config goop will be generated
from a single file.  Still needs work.",1886,data/crawl/squid/hunk_7157.cpp,,,data/crawl/squid/old_hunk_7157.cpp,data/crawl/squid/new_hunk_7157.cpp,-1,352,,"printf(""%s"", inet_ntoa(addr));","[""addLog""]","[[], [""printf"", ""%s"", ""inet_ntoa"", ""addr""]]",[11114772215085777012],6699,"140 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f88bb09c780151eb3736f0dc774ab5df6858ee4d,22 Jul 1996,"-Split ipcache.c into ipcache.c and dns.c
-Moved newer functions from icp.c to client_side.c
-Added fqdncache.c, like ipcache.c
-Added new ACL type ACL_SRC_DOMAIN 'srcdomain'
-Use aclMatchDomainList() instead of aclMatchWord() for domain names
-Renamed 'stats/general' to 'stats/ipcache'",1929,data/crawl/squid/hunk_7679.cpp,,,data/crawl/squid/old_hunk_7679.cpp,data/crawl/squid/new_hunk_7679.cpp,11,-1,"storeAppendPrintf(sentry, ""{dnsservers use histogram:}\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""dnsservers"", ""use"", ""histogram"", ""\\n""], []]",[-3592243268571107408],6698,"310 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6780.cpp,,,data/crawl/squid/old_hunk_6780.cpp,data/crawl/squid/new_hunk_6780.cpp,-1,69,,"storeAppendPrintf(sentry, ""Keep-Alive Ratio: %d%%\n"",
	    percent(e->stats.n_keepalives_recv, e->stats.n_keepalives_sent));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Keep"", ""Alive"", ""Ratio"", ""%d%%\\n"", ""percent"", ""e"", ""stats"", ""n_keepalives_recv"", ""e"", ""stats"", ""n_keepalives_sent""]]",[-3862966612436958554],6697,"21 days, 12:00:00"
https://github.com/squid-cache/squid/commit/43d4303ea3311615cde3e8ce986b5b447f7e89ec,04 Apr 1998,"snmp beautification, code striping etc",7598,data/crawl/squid/hunk_6513.cpp,,,data/crawl/squid/old_hunk_6513.cpp,data/crawl/squid/new_hunk_6513.cpp,122,-1,"printf(""VARS %d: Encoding NULL at 0x%x\n"", Counter, bufp);",,"[""removeLog""]","[[""printf"", ""VARS"", ""%d"", ""Encoding"", ""NULL"", ""at"", ""0x%x\\n"", ""Counter"", ""bufp""], []]",[2577900448518484852],6696,0:00:00
https://github.com/squid-cache/squid/commit/43d4303ea3311615cde3e8ce986b5b447f7e89ec,04 Apr 1998,"snmp beautification, code striping etc",7598,data/crawl/squid/hunk_6512.cpp,,,data/crawl/squid/old_hunk_6512.cpp,data/crawl/squid/new_hunk_6512.cpp,57,-1,"printf(""VARS: Created (%x)\n"", (unsigned int)New);",,"[""removeLog""]","[[""printf"", ""VARS"", ""Created"", ""%x"", ""\\n"", ""unsigned"", ""int"", ""New""], []]",[18167291016024732353],6695,0:00:00
https://github.com/squid-cache/squid/commit/2e8e29b8cd94de6f348bcf3cad710ea38f6edc9d,25 Mar 1998,add icp.replies_queued counter to stat outputs,8,data/crawl/squid/hunk_6581.cpp,,,data/crawl/squid/old_hunk_6581.cpp,data/crawl/squid/new_hunk_6581.cpp,-1,3,,"storeAppendPrintf(sentry, ""icp.replies_queued = %d\n"",
	f->icp.replies_queued);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""replies_queued"", ""%d\\n"", ""f"", ""icp"", ""replies_queued""]]",[-2262826027038683720],6694,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a1e927f6e63351daeac6a02d1df24b569a237762,08 Apr 1998,- added statPeerSelect(),48,data/crawl/squid/hunk_6489.cpp,,,data/crawl/squid/old_hunk_6489.cpp,data/crawl/squid/new_hunk_6489.cpp,-1,10,,"storeAppendPrintf(sentry, ""icp.client_median_svc_time = %f seconds\n"",
	x / 1000.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""client_median_svc_time"", ""%f"", ""seconds\\n"", ""x"", ""/"", ""1000"", ""0""]]",[3985394527082167644],6693,12:00:00
https://github.com/squid-cache/squid/commit/a1e927f6e63351daeac6a02d1df24b569a237762,08 Apr 1998,- added statPeerSelect(),48,data/crawl/squid/hunk_6489.cpp,,,data/crawl/squid/old_hunk_6489.cpp,data/crawl/squid/new_hunk_6489.cpp,-1,6,,"storeAppendPrintf(sentry, ""cd.client_median_svc_time = %f seconds\n"",
	x / 1000.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""client_median_svc_time"", ""%f"", ""seconds\\n"", ""x"", ""/"", ""1000"", ""0""]]",[11553430974065046448],6692,12:00:00
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6730.cpp,,,data/crawl/squid/old_hunk_6730.cpp,data/crawl/squid/new_hunk_6730.cpp,-1,18,,"storeAppendPrintf(sentry, ""client_http.hit_median_svc_time = %f seconds\n"",
	x / 1000.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""hit_median_svc_time"", ""%f"", ""seconds\\n"", ""x"", ""/"", ""1000"", ""0""]]",[15990970733818383033],6691,"21 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ee1679dfd12ffb98e1dad264fa530d2b0c513acb,25 Feb 1998,"- Added more bytes in/out and service time tracking.  There is one pair
  of byte counters for the server-side (http,ftp,gopher,wais,ssl,pass).
- Also separately track cache hits, misses, and not-modified replies.
- Try to track ICP query service time, but this may not be implemented
  right.
- Removed '60min' average, now we have 5 minutes max",316,data/crawl/squid/hunk_6730.cpp,,,data/crawl/squid/old_hunk_6730.cpp,data/crawl/squid/new_hunk_6730.cpp,-1,10,,"storeAppendPrintf(sentry, ""client_http.miss_median_svc_time = %f seconds\n"",
	x / 1000.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""client_http"", ""miss_median_svc_time"", ""%f"", ""seconds\\n"", ""x"", ""/"", ""1000"", ""0""]]",[11573547714088272369],6690,"21 days, 12:00:00"
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,47,,"storeAppendPrintf(sentry, ""cd.kbytes_recv = %d\n"",
	(int) f->cd.kbytes_recv.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""kbytes_recv"", ""%d\\n"", ""int"", ""f"", ""cd"", ""kbytes_recv"", ""kb""]]",[22038706217347481053],6689,12:00:00
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,45,,"storeAppendPrintf(sentry, ""cd.kbytes_sent = %d\n"",
	(int) f->cd.kbytes_sent.kb);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""kbytes_sent"", ""%d\\n"", ""int"", ""f"", ""cd"", ""kbytes_sent"", ""kb""]]",[20038452216267480529],6688,12:00:00
https://github.com/squid-cache/squid/commit/00485c298aba90241e0697bfc2445a926cba630c,10 Apr 1998,"- tuned delaying requests for digests a bit after digests expire (to avoid
  race conditions)
- added more stats for digests: #msgs and kb_sent are now accounted for
- only cachable requests affect t/f-hit/miss stats now",85,data/crawl/squid/hunk_6476.cpp,,,data/crawl/squid/old_hunk_6476.cpp,data/crawl/squid/new_hunk_6476.cpp,-1,5,,"storeAppendPrintf(sentry, ""cd.msgs_recv = %d\n"",
	f->cd.msgs_recv);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""msgs_recv"", ""%d\\n"", ""f"", ""cd"", ""msgs_recv""]]",[4837284672466329140],6687,0:00:00
https://github.com/squid-cache/squid/commit/00485c298aba90241e0697bfc2445a926cba630c,10 Apr 1998,"- tuned delaying requests for digests a bit after digests expire (to avoid
  race conditions)
- added more stats for digests: #msgs and kb_sent are now accounted for
- only cachable requests affect t/f-hit/miss stats now",85,data/crawl/squid/hunk_6476.cpp,,,data/crawl/squid/old_hunk_6476.cpp,data/crawl/squid/new_hunk_6476.cpp,-1,3,,"storeAppendPrintf(sentry, ""cd.msgs_sent = %d\n"",
	f->cd.msgs_sent);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""msgs_sent"", ""%d\\n"", ""f"", ""cd"", ""msgs_sent""]]",[2837526673978331448],6686,0:00:00
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,46,-1,"storeAppendPrintf(sentry, ""icp.kbytes_recv = %d\n"",
	(int) f->icp.kbytes_recv.kb);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""icp"", ""kbytes_recv"", ""%d\\n"", ""int"", ""f"", ""icp"", ""kbytes_recv"", ""kb""], []]",[-6902633323381723445],6685,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,44,-1,"storeAppendPrintf(sentry, ""icp.kbytes_sent = %d\n"",
	(int) f->icp.kbytes_sent.kb);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""icp"", ""kbytes_sent"", ""%d\\n"", ""int"", ""f"", ""icp"", ""kbytes_sent"", ""kb""], []]",[-4902379322301722921],6684,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,42,-1,"storeAppendPrintf(sentry, ""icp.pkts_recv = %d\n"",
	f->icp.pkts_recv);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""icp"", ""pkts_recv"", ""%d\\n"", ""f"", ""icp"", ""pkts_recv""], []]",[-4165807127523989432],6683,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,40,-1,"storeAppendPrintf(sentry, ""icp.pkts_sent = %d\n"",
	f->icp.pkts_sent);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""icp"", ""pkts_sent"", ""%d\\n"", ""f"", ""icp"", ""pkts_sent""], []]",[-2165521125979986932],6682,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,51,,"storeAppendPrintf(sentry, ""cd.store_memory = %d\n"",
	(int) (store_digest ? store_digest->mask_size/1024 : 0));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""store_memory"", ""%d\\n"", ""int"", ""store_digest"", ""store_digest"", ""mask_size/1024"", ""0""]]",[-23460585845524430750],6681,12:00:00
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,43,,"storeAppendPrintf(sentry, ""cd.times_used = %d\n"",
	f->cd.times_used);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""cd"", ""times_used"", ""%d\\n"", ""f"", ""cd"", ""times_used""]]",[23617377622427395332],6680,12:00:00
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,31,,"storeAppendPrintf(sentry, ""icp.times_used = %d\n"",
	f->icp.times_used);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""times_used"", ""%d\\n"", ""f"", ""icp"", ""times_used""]]",[8481304728461637724],6679,12:00:00
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,28,-1,"storeAppendPrintf(sentry, ""client_http.hit_svc_time histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""client_http"", ""hit_svc_time"", ""histogram"", ""\\n""], []]",[-8195476901053635300],6678,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,26,-1,"storeAppendPrintf(sentry, ""client_http.nm_svc_time histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""client_http"", ""nm_svc_time"", ""histogram"", ""\\n""], []]",[-3132268931358861387],6677,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,24,-1,"storeAppendPrintf(sentry, ""client_http.miss_svc_time histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""client_http"", ""miss_svc_time"", ""histogram"", ""\\n""], []]",[-12266767035431664052],6676,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,22,-1,"storeAppendPrintf(sentry, ""client_http.all_svc_time histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""client_http"", ""all_svc_time"", ""histogram"", ""\\n""], []]",[-1431764734794782766],6675,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6723.cpp,,,data/crawl/squid/old_hunk_6723.cpp,data/crawl/squid/new_hunk_6723.cpp,-1,116,,"storeAppendPrintf(sentry, ""icp.query_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""icp"", ""query_svc_time"", ""histogram"", ""\\n""]]",[-3662707251514409093],6674,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,17,,"storeAppendPrintf(sentry, ""\ncd.client_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\ncd"", ""client_svc_time"", ""histogram"", ""\\n""]]",[-9875232530174705395],6673,12:00:00
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,15,,"storeAppendPrintf(sentry, ""\nicp.client_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\nicp"", ""client_svc_time"", ""histogram"", ""\\n""]]",[-4939705136421208611],6672,12:00:00
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,13,,"storeAppendPrintf(sentry, ""\nicp.reply_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\nicp"", ""reply_svc_time"", ""histogram"", ""\\n""]]",[-1397121129752594633],6671,12:00:00
https://github.com/squid-cache/squid/commit/26b164ac83cf389215621005dbe69a664c08ac20,09 Apr 1998,"- added peer_digest.o
- a lot of digest related coding and fixes
- new stats (mgr:digest_stats)",233,data/crawl/squid/hunk_6483.cpp,,,data/crawl/squid/old_hunk_6483.cpp,data/crawl/squid/new_hunk_6483.cpp,-1,11,,"storeAppendPrintf(sentry, ""\nicp.query_svc_time histogram:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\nicp"", ""query_svc_time"", ""histogram"", ""\\n""]]",[3666560972374436631],6670,12:00:00
https://github.com/squid-cache/squid/commit/071a3ae79623f644f3544044423946dd3a35710b,10 Apr 1998,Cleaned up ICP logging/counting and ICP/CD stats output,269,data/crawl/squid/hunk_6470.cpp,,,data/crawl/squid/old_hunk_6470.cpp,data/crawl/squid/new_hunk_6470.cpp,22,-1,"storeAppendPrintf(sentry, ""\ncd.client_svc_time histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\ncd"", ""client_svc_time"", ""histogram"", ""\\n""], []]",[9875232530174705395],6669,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/071a3ae79623f644f3544044423946dd3a35710b,10 Apr 1998,Cleaned up ICP logging/counting and ICP/CD stats output,269,data/crawl/squid/hunk_6470.cpp,,,data/crawl/squid/old_hunk_6470.cpp,data/crawl/squid/new_hunk_6470.cpp,20,-1,"storeAppendPrintf(sentry, ""\nicp.client_svc_time histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\nicp"", ""client_svc_time"", ""histogram"", ""\\n""], []]",[4939705136421208611],6668,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/071a3ae79623f644f3544044423946dd3a35710b,10 Apr 1998,Cleaned up ICP logging/counting and ICP/CD stats output,269,data/crawl/squid/hunk_6470.cpp,,,data/crawl/squid/old_hunk_6470.cpp,data/crawl/squid/new_hunk_6470.cpp,44,-1,"storeAppendPrintf(sentry, ""icp.client_median_svc_time = %f seconds\n"",
	x / 1000.0);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""icp"", ""client_median_svc_time"", ""%f"", ""seconds\\n"", ""x"", ""/"", ""1000"", ""0""], []]",[-3985394527082167644],6667,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/071a3ae79623f644f3544044423946dd3a35710b,10 Apr 1998,Cleaned up ICP logging/counting and ICP/CD stats output,269,data/crawl/squid/hunk_6470.cpp,,,data/crawl/squid/old_hunk_6470.cpp,data/crawl/squid/new_hunk_6470.cpp,40,-1,"storeAppendPrintf(sentry, ""cd.client_median_svc_time = %f seconds\n"",
	x / 1000.0);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""cd"", ""client_median_svc_time"", ""%f"", ""seconds\\n"", ""x"", ""/"", ""1000"", ""0""], []]",[-11553430974065046448],6666,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d192d11fc9afd7fc368f54b50ad7b977ef74614e,03 Jun 1998,- Added basic support for Range requests.,664,data/crawl/squid/hunk_6377.cpp,,,data/crawl/squid/old_hunk_6377.cpp,data/crawl/squid/new_hunk_6377.cpp,-1,63,,"httpHeaderPutStrf(hdr, HDR_CONTENT_TYPE,
		    ""multipart/byteranges; boundary=\""%s\"""",
		    strBuf(http->range_iter.boundary));","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr"", ""HDR_CONTENT_TYPE"", ""multipart/byteranges"", ""boundary"", ""\\"", ""%s\\"", ""strBuf"", ""http"", ""range_iter"", ""boundary""]]",[-6063074112591328951],6665,0:00:00
https://github.com/squid-cache/squid/commit/1d21d91da41c51042b444b98958cb4a357a92869,06 Jun 1998,"- changed internal structure of HttpBody to use MemBuf;
  no more inconsistencies with body.size
- removed HTML tags from mgr:http_headers dump",149,data/crawl/squid/hunk_6354.cpp,,,data/crawl/squid/old_hunk_6354.cpp,data/crawl/squid/new_hunk_6354.cpp,12,12,"storeAppendPrintf(e, ""<h3>Number of fields per header distribution</h3>\n"");","storeAppendPrintf(e, ""Number of fields per header distribution\n"");","[""updateContent""]","[[""h3"", ""distribution"", ""/h3"", ""\\n""], [""distribution\\n""]]",[-3062110297471260224],6664,0:00:00
https://github.com/squid-cache/squid/commit/8638fc6669169597202b7c816088c63feb46677f,03 Apr 1998,"- Added internal support for cache digest (store_digest). The digest is
  maintained as a ""mirror"" of store_hash table. storeHashInsert/Delete forward
  public key objects to the store_digest object. Sending digests to other
  caches is not yet supported. Periodic digest rebuild is not yet supported.

- Rudimental reporting for store digest is done via cache manager.",194,data/crawl/squid/hunk_6527.cpp,,,data/crawl/squid/old_hunk_6527.cpp,data/crawl/squid/new_hunk_6527.cpp,-1,64,,"storeAppendPrintf(e, ""store digest: disabled.\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""store"", ""digest"", ""disabled"", ""\\n""]]",[4525747576557647335],6663,"51 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6168bccdecb952a4e873e8747d0571d771f131fd,22 Apr 1998,"- better synchronization between Rebuild and Rewrite
  now each process can wait for other to complete
- added storeDigestAdd/Del() to check object freshness
- better, but still not perfect, pre-calculation of
  cache digest size
- stats for additions, deletions, collisions, etc.
- polish",232,data/crawl/squid/hunk_6447.cpp,,,data/crawl/squid/old_hunk_6447.cpp,data/crawl/squid/new_hunk_6447.cpp,-1,8,,"storeAppendPrintf(e, ""\t collisions: on add: %.2f %% on rej: %.2f %%\n"",
	    xpercent(sd_stats.add_coll_count, sd_stats.add_count), 
	    xpercent(sd_stats.rej_coll_count, sd_stats.rej_count));","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""\\t"", ""collisions"", ""on"", ""add"", ""%"", ""2f"", ""%%"", ""on"", ""rej"", ""%"", ""2f"", ""%%\\n"", ""xpercent"", ""sd_stats"", ""add_coll_count"", ""sd_stats"", ""add_count"", ""xpercent"", ""sd_stats"", ""rej_coll_count"", ""sd_stats"", ""rej_count""]]",[-19536262234481106060],6662,"42 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6168bccdecb952a4e873e8747d0571d771f131fd,22 Apr 1998,"- better synchronization between Rebuild and Rewrite
  now each process can wait for other to complete
- added storeDigestAdd/Del() to check object freshness
- better, but still not perfect, pre-calculation of
  cache digest size
- stats for additions, deletions, collisions, etc.
- polish",232,data/crawl/squid/hunk_6447.cpp,,,data/crawl/squid/old_hunk_6447.cpp,data/crawl/squid/new_hunk_6447.cpp,-1,3,,"storeAppendPrintf(e, ""\t added: %d rejected: %d ( %.2f %%) del-ed: %d\n"",
	    sd_stats.add_count, 
	    sd_stats.rej_count,
		xpercent(sd_stats.rej_count, sd_stats.rej_count + sd_stats.add_count),
	    sd_stats.del_count);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""\\t"", ""added"", ""%d"", ""rejected"", ""%d"", ""%"", ""2f"", ""%%"", ""del"", ""ed"", ""%d\\n"", ""sd_stats"", ""add_count"", ""sd_stats"", ""rej_count"", ""xpercent"", ""sd_stats"", ""rej_count"", ""sd_stats"", ""rej_count"", ""sd_stats"", ""add_count"", ""sd_stats"", ""del_count""]]",[-45720816781997758075],6661,"42 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6a78c18e34cfeeb6ec4e045145dd3d1c32c1e773,29 Jul 1998,"Fixed some restart bugs with dnsservers.   Because of switch to
events, we were calling the dnsShutdownServers func AFTER the
new dnsservers had been allocated.  Using a non-NULL callback
data when registering the event fixes this.

Also added fatal() checks for too few running dnsservers and too many
queued IP/FQDN lookups.",87,data/crawl/squid/hunk_6326.cpp,,,data/crawl/squid/old_hunk_6326.cpp,data/crawl/squid/new_hunk_6326.cpp,-1,6,,"fatal(""Too many queued DNS lookups"");","[""addLog""]","[[], [""fatal"", ""Too"", ""many"", ""queued"", ""DNS"", ""lookups""]]",[-16689355757844038674],6660,0:00:00
https://github.com/squid-cache/squid/commit/6a78c18e34cfeeb6ec4e045145dd3d1c32c1e773,29 Jul 1998,"Fixed some restart bugs with dnsservers.   Because of switch to
events, we were calling the dnsShutdownServers func AFTER the
new dnsservers had been allocated.  Using a non-NULL callback
data when registering the event fixes this.

Also added fatal() checks for too few running dnsservers and too many
queued IP/FQDN lookups.",87,data/crawl/squid/hunk_6323.cpp,,,data/crawl/squid/old_hunk_6323.cpp,data/crawl/squid/new_hunk_6323.cpp,-1,13,,"fatal(""Too few DNSSERVER processes are running"");","[""addLog""]","[[], [""fatal"", ""Too"", ""few"", ""DNSSERVER"", ""processes"", ""are"", ""running""]]",[-27371787301548636945],6659,0:00:00
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,464,,"printf(""driver finished.\n"");","[""addLog""]","[[], [""printf"", ""driver"", ""finished"", ""\\n""]]",[10937235630725012141],6658,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,454,,"printf(""hash_delete error\n"");","[""addLog""]","[[], [""printf"", ""hash_delete"", ""error\\n""]]",[6171682263091252971],6657,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,452,,"printf(""deleting %s from %d\n"", todelete, hid);","[""addLog""]","[[], [""printf"", ""deleting"", ""%s"", ""from"", ""%d\\n"", ""todelete"", ""hid""]]",[4009515419176151352],6656,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,437,,"printf(""Inserting '%s' for item %p to hash table: %d\n"",
	    buf, buf, hid);","[""addLog""]","[[], [""printf"", ""Inserting"", ""%s"", ""for"", ""item"", ""%p"", ""to"", ""hash"", ""table"", ""%d\\n"", ""buf"", ""buf"", ""hid""]]",[2120647982279806496],6655,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,433,,"printf(""done creating hash table: %d\n"", hid);","[""addLog""]","[[], [""printf"", ""done"", ""creating"", ""hash"", ""table"", ""%d\\n"", ""hid""]]",[3391781315007474814],6654,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,430,,"printf(""hash_create error.\n"");","[""addLog""]","[[], [""printf"", ""hash_create"", ""error"", ""\\n""]]",[14569196363983418386],6653,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,428,,"printf(""creating hash table\n"");","[""addLog""]","[[], [""printf"", ""creating"", ""hash"", ""table\\n""]]",[19631342285717887761],6652,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/14c63c25b47a0a77fdf10807933f3e11a7baee42,27 Feb 1998,membanger to be used with MEM_GEN_TRACE files,731,data/crawl/squid/hunk_6670.cpp,,,data/crawl/squid/old_hunk_6670.cpp,data/crawl/squid/new_hunk_6670.cpp,-1,426,,"printf(""init\n"");","[""addLog""]","[[], [""printf"", ""init\\n""]]",[4283994461307984809],6651,"86 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2af947760f5e7a92ab3bf260744c55ce19ac073,11 Jul 1996,redirector up to snuff,639,data/crawl/squid/hunk_7697.cpp,,,data/crawl/squid/old_hunk_7697.cpp,data/crawl/squid/new_hunk_7697.cpp,-1,114,,"storeAppendPrintf(sentry, ""{use histogram:}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""use"", ""histogram"", ""\\n""]]",[-1512619810490720141],6650,"384 days, 0:00:00"
https://github.com/squid-cache/squid/commit/08086a53bcf91a4529ad9b88677c2aa5a7105d22,16 Jul 1996,abort if all the redirectors close,7,data/crawl/squid/hunk_7688.cpp,,,data/crawl/squid/old_hunk_7688.cpp,data/crawl/squid/new_hunk_7688.cpp,-1,4,,"fatal_dump(""All redirectors have exited!"");","[""addLog""]","[[], [""fatal_dump"", ""All"", ""redirectors"", ""have"", ""exited""]]",[15506471005322002107],6649,"395 days, 12:00:00"
https://github.com/squid-cache/squid/commit/2c4f7ab251a01835052ec9e0e9cfb80fb45dcc1f,24 Sep 1998,add hash_last(),101,data/crawl/squid/hunk_6256.cpp,,,data/crawl/squid/old_hunk_6256.cpp,data/crawl/squid/new_hunk_6256.cpp,3,3,"storeAppendPrintf(sentry, ""store_files_cleaned = %d\n"",
	f->store_files_cleaned);","storeAppendPrintf(sentry, ""swap_files_cleaned = %d\n"",
	f->swap_files_cleaned);","[""updateVariable"", ""updateContent""]","[[""store_files_cleaned"", ""store_files_cleaned""], [""swap_files_cleaned"", ""swap_files_cleaned""]]",[-24213249133141418830],6648,0:00:00
https://github.com/squid-cache/squid/commit/15576b6a58a24ed2705d6228d0fde8cfcef26cae,07 Feb 1998,remove brackets from cachemgr output,390,data/crawl/squid/hunk_6824.cpp,,,data/crawl/squid/old_hunk_6824.cpp,data/crawl/squid/new_hunk_6824.cpp,4,-1,"storeAppendPrintf(sentry, ""{Redirector Statistics:}\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Redirector"", ""Statistics"", ""\\n""], []]",[-2388355921916353954],6647,"122 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e1e641f9d4e49c04986d40c28dac687552749af8,15 Sep 1998,"relocate all-redirectors-have-exited check.
removed NRedirectorsOpen == 0 assertion",8,data/crawl/squid/hunk_6281.cpp,,,data/crawl/squid/old_hunk_6281.cpp,data/crawl/squid/new_hunk_6281.cpp,4,-1,"fatal_dump(""All redirectors have exited!"");",,"[""removeLog""]","[[""fatal_dump"", ""All"", ""redirectors"", ""have"", ""exited""], []]",[-15506471005322002107],6646,"12 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d2af947760f5e7a92ab3bf260744c55ce19ac073,11 Jul 1996,redirector up to snuff,639,data/crawl/squid/hunk_7697.cpp,,,data/crawl/squid/old_hunk_7697.cpp,data/crawl/squid/new_hunk_7697.cpp,-1,103,,"storeAppendPrintf(sentry, ""{Redirector Statistics:}\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Redirector"", ""Statistics"", ""\\n""]]",[2388355921916353954],6645,"410 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b1b56fbd783058afdee690b8bd67449f50d9fba2,03 Apr 1998,new dns cachemgr output,34,data/crawl/squid/hunk_6518.cpp,,,data/crawl/squid/old_hunk_6518.cpp,data/crawl/squid/new_hunk_6518.cpp,-1,4,,"storeAppendPrintf(sentry, ""%7s\t%7s\t%11s\t%s\t%7s\t%7s\n"",
	""#"",
	""FD"",
	""# Requests"",
	""Flags"",
	""Time"",
	""Offset"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s\\t%7s\\t%11s\\t%s\\t%7s\\t%7s\\n"", ""FD"", ""Requests"", ""Flags"", ""Time"", ""Offset""]]",[17200637322797013196],6644,"95 days, 0:00:00"
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6251.cpp,,,data/crawl/squid/old_hunk_6251.cpp,data/crawl/squid/new_hunk_6251.cpp,3,-1,"storeAppendPrintf(sentry, ""pending queue length: %d\n"", queue_length);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""pending"", ""queue"", ""length"", ""%d\\n"", ""queue_length""], []]",[-24554605888135001151],6643,0:00:00
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6248.cpp,,,data/crawl/squid/old_hunk_6248.cpp,data/crawl/squid/new_hunk_6248.cpp,20,-1,"fatal(""Too many queued DNS lookups"");",,"[""removeLog""]","[[""fatal"", ""Too"", ""many"", ""queued"", ""DNS"", ""lookups""], []]",[16689355757844038674],6642,0:00:00
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6253.cpp,,,data/crawl/squid/old_hunk_6253.cpp,data/crawl/squid/new_hunk_6253.cpp,145,-1,"storeAppendPrintf(sentry, ""use histogram:\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""use"", ""histogram"", ""\\n""], []]",[1512619810490720141],6641,0:00:00
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6243.cpp,,,data/crawl/squid/old_hunk_6243.cpp,data/crawl/squid/new_hunk_6243.cpp,214,47,"fatal_dump(""authenticateStart: NULL handler"");",assert(handler);,"[""updateLog"", ""removeContent"", ""addVariable""]","[[""fatal_dump"", ""authenticateStart"", ""NULL""], [""assert""]]",[21379231521988458832],6640,0:00:00
https://github.com/squid-cache/squid/commit/dba79ac56de7e563b80a5cac8678ee41ffa0d4a6,12 Nov 1998,Squid SNMP code rewrite,1686,data/crawl/squid/hunk_6235.cpp,,,data/crawl/squid/old_hunk_6235.cpp,data/crawl/squid/new_hunk_6235.cpp,16,-1,"storeAppendPrintf(entry, ""%s %s %s %s%s\n"",
		    name, cp->name,
		    head->allow ? ""Allow"" : ""Deny"",
		    l->op ? null_string : ""!"",
		    l->acl->name);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""%s"", ""%s%s\\n"", ""name"", ""cp"", ""name"", ""head"", ""allow"", ""Allow"", ""Deny"", ""l"", ""op"", ""null_string"", ""l"", ""acl"", ""name""], []]",[-10054000873263661766],6639,0:00:00
https://github.com/squid-cache/squid/commit/df087e68072817c5ce2202dbcf2ebfd1221db43a,08 Apr 1998,windows NT fixes (barf),450,data/crawl/squid/hunk_6487.cpp,,,data/crawl/squid/old_hunk_6487.cpp,data/crawl/squid/new_hunk_6487.cpp,-1,11,,"fprintf(stderr, ""-s is not supported on this resolver\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""s"", ""is"", ""not"", ""supported"", ""on"", ""this"", ""resolver\\n""]]",[-9055878808435272472],6638,"109 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6e5ae4a4f3314309a6e851cf295e157e40aab01c,12 Jan 1999,"Small change of Squid output for FTP
Henrik Nordstrom
Andrew Filonov <aef@shu.smolensk.su>",43,data/crawl/squid/hunk_6198.cpp,,,data/crawl/squid/old_hunk_6198.cpp,data/crawl/squid/new_hunk_6198.cpp,-1,20,,"storeAppendPrintf(e, ""%c"", ftpState->title_url[k++]);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%c"", ""ftpState"", ""title_url[k"", ""]""]]",[20025760452776012787],6637,0:00:00
https://github.com/squid-cache/squid/commit/6e5ae4a4f3314309a6e851cf295e157e40aab01c,12 Jan 1999,"Small change of Squid output for FTP
Henrik Nordstrom
Andrew Filonov <aef@shu.smolensk.su>",43,data/crawl/squid/hunk_6198.cpp,,,data/crawl/squid/old_hunk_6198.cpp,data/crawl/squid/new_hunk_6198.cpp,-1,15,,"storeAppendPrintf(e, ""%c"", ftpState->title_url[k]);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%c"", ""ftpState"", ""title_url[k]""]]",[15019211266183550861],6636,0:00:00
https://github.com/squid-cache/squid/commit/c68e9c6b55d5f316a13904483017913a78a4f7b2,12 Nov 1998,2.1 branch merge,3372,data/crawl/squid/hunk_6226.cpp,,,data/crawl/squid/old_hunk_6226.cpp,data/crawl/squid/new_hunk_6226.cpp,-1,23,,"httpHeaderPutStrf(&rep->header, HDR_WWW_AUTHENTICATE,
	    proxy_auth_challenge_fmt, Config.proxyAuthRealm);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""HDR_WWW_AUTHENTICATE"", ""proxy_auth_challenge_fmt"", ""Config"", ""proxyAuthRealm""]]",[1219914597358558908],6635,"30 days, 12:00:00"
https://github.com/squid-cache/squid/commit/f715bd3a2544e5c1ddd91e931000f725d2091cff,04 Aug 1998,Configurable proxy-auth realm string (Bob Franklin),25,data/crawl/squid/hunk_6313.cpp,,,data/crawl/squid/old_hunk_6313.cpp,data/crawl/squid/new_hunk_6313.cpp,-1,3,,"httpHeaderPutStrf(&rep->header, HDR_PROXY_AUTHENTICATE, proxy_auth_challenge_fmt, Config.proxyAuthRealm);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""HDR_PROXY_AUTHENTICATE"", ""proxy_auth_challenge_fmt"", ""Config"", ""proxyAuthRealm""]]",[-5625760115274389363],6634,"80 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6165.cpp,,,data/crawl/squid/old_hunk_6165.cpp,data/crawl/squid/new_hunk_6165.cpp,-1,90,,"storeAppendPrintf(sentry, ""Not used yet."");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Not"", ""used"", ""yet""]]",[10673142881662984130],6633,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6165.cpp,,,data/crawl/squid/old_hunk_6165.cpp,data/crawl/squid/new_hunk_6165.cpp,-1,100,,"storeAppendPrintf(sentry, ""\t\tRate: %d\n"", rate->individual.restore_bps);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\t\\tRate"", ""%d\\n"", ""rate"", ""individual"", ""restore_bps""]]",[5241027730013828207],6632,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6165.cpp,,,data/crawl/squid/old_hunk_6165.cpp,data/crawl/squid/new_hunk_6165.cpp,-1,99,,"storeAppendPrintf(sentry, ""\t\tMax: %d\n"", rate->individual.max_bytes);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\t\\tMax"", ""%d\\n"", ""rate"", ""individual"", ""max_bytes""]]",[17330750759199346676],6631,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6165.cpp,,,data/crawl/squid/old_hunk_6165.cpp,data/crawl/squid/new_hunk_6165.cpp,-1,98,,"storeAppendPrintf(sentry, ""\tIndividual:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\tIndividual"", ""\\n""]]",[1571582944602162551],6630,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6165.cpp,,,data/crawl/squid/old_hunk_6165.cpp,data/crawl/squid/new_hunk_6165.cpp,-1,95,,"storeAppendPrintf(sentry, ""\tIndividual:\n\t\tDisabled.\n\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\tIndividual"", ""\\n\\t\\tDisabled"", ""\\n\\n""]]",[963377115780707463],6629,0:00:00
https://github.com/squid-cache/squid/commit/447e176bc0560af9b837d744877f154af7fe92c9,14 Aug 1998,Luyers finished delay pools patch,540,data/crawl/squid/hunk_6312.cpp,,,data/crawl/squid/old_hunk_6312.cpp,data/crawl/squid/new_hunk_6312.cpp,-1,39,,"fatalf(""delayBytesWanted: Invalid class %d\n"", class);","[""addLog""]","[[], [""fatalf"", ""delayBytesWanted"", ""Invalid"", ""class"", ""%d\\n"", ""class""]]",[21516186932988850730],6628,"84 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c8366e06dda8d12145c0532b907aad3e35062502,30 Jun 1999,diskd compile fixes,29,data/crawl/squid/hunk_6100.cpp,,,data/crawl/squid/old_hunk_6100.cpp,data/crawl/squid/new_hunk_6100.cpp,5,5,"fprintf(stderr, ""FATAL: %s\n"", message);","fprintf(stderr, ""FATAL: pid %d %s\n"", (int) getpid(), message);","[""updateContent"", ""addVariable""]","[[], [""pid"", ""%d"", ""int"", ""getpid""]]",[-591694301434598510],6627,0:00:00
https://github.com/squid-cache/squid/commit/9bc73deb181f454f4e5597c67c5b6b40fd4d0f58,04 Oct 1999,2.3 branch merge,3942,data/crawl/squid/hunk_6093.cpp,,,data/crawl/squid/old_hunk_6093.cpp,data/crawl/squid/new_hunk_6093.cpp,5,5,"fprintf(stderr, ""FATAL: pid %d %s\n"", (int) getpid(), message);","fprintf(stderr, ""FATAL: %s\n"", message);","[""removeVariable"", ""updateContent""]","[[""pid"", ""%d"", ""int"", ""getpid""], []]",[591694301434598510],6626,0:00:00
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6046.cpp,,,data/crawl/squid/old_hunk_6046.cpp,data/crawl/squid/new_hunk_6046.cpp,-1,146,,"fprintf(stderr, ""%d FD %d: "", (int) mypid, fs->fd);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%d"", ""FD"", ""%d"", ""int"", ""mypid"", ""fs"", ""fd""]]",[-26355200059149090861],6625,0:00:00
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6046.cpp,,,data/crawl/squid/old_hunk_6046.cpp,data/crawl/squid/new_hunk_6046.cpp,-1,136,,"fprintf(stderr, ""%d FD %d, offset %d: "", (int) mypid, fs->fd, r->offset);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%d"", ""FD"", ""%d"", ""offset"", ""%d"", ""int"", ""mypid"", ""fs"", ""fd"", ""r"", ""offset""]]",[-13868897255681432771],6624,0:00:00
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6045.cpp,,,data/crawl/squid/old_hunk_6045.cpp,data/crawl/squid/new_hunk_6045.cpp,-1,753,,"fatal(""storeCossDirParse: invalid size value"");","[""addLog""]","[[], [""fatal"", ""storeCossDirParse"", ""invalid"", ""size"", ""value""]]",[-27578349261546309526],6623,0:00:00
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6048.cpp,,,data/crawl/squid/old_hunk_6048.cpp,data/crawl/squid/new_hunk_6048.cpp,-1,1627,,"storeAppendPrintf(sentry, ""Filesystem Space in use: %d/%d KB (%d%%)\n"",
            fsbtoblk((sfs.f_blocks - sfs.f_bfree), sfs.f_frsize, 1024),
            fsbtoblk(sfs.f_blocks, sfs.f_frsize, 1024),
            percent(sfs.f_blocks - sfs.f_bfree, sfs.f_blocks));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Filesystem"", ""Space"", ""in"", ""use"", ""%d/%d"", ""KB"", ""%d%%"", ""\\n"", ""fsbtoblk"", ""sfs"", ""f_blocks"", ""sfs"", ""f_bfree"", ""sfs"", ""f_frsize"", ""1024"", ""fsbtoblk"", ""sfs"", ""f_blocks"", ""sfs"", ""f_frsize"", ""1024"", ""percent"", ""sfs"", ""f_blocks"", ""sfs"", ""f_bfree"", ""sfs"", ""f_blocks""]]",[-22115632525380332169],6622,0:00:00
https://github.com/squid-cache/squid/commit/0e4e0e7d10a5f46b03ad9e31ab0ff156643edbb8,22 May 1999,"Continuing the process of supporting multiple filesystem types.  Now
the I/O operations are function pointers in the SwapDir structure.

Moved UFS-specific parsing out of cache_cf.c and into store_dir_ufs.c.
Then had to make some cache_cf.c functions global.

Removed some remaining bits of USE_ASYNC_IO code.",292,data/crawl/squid/hunk_6110.cpp,,,data/crawl/squid/old_hunk_6110.cpp,data/crawl/squid/new_hunk_6110.cpp,-1,29,,"fatalf(""Unknown cache_dir type '%s'\n"", type_str);","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""cache_dir"", ""type"", ""%s"", ""\\n"", ""type_str""]]",[-1483333499295964032],6621,"173 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6a566b9c9fa4d40f154a60497e332bc9067b4fc8,09 Jun 2000,"Modular policy implementation. See programmers guide for API details.

This also includes Adrians improved store I/O callback handler model.",3040,data/crawl/squid/hunk_6006.cpp,,,data/crawl/squid/old_hunk_6006.cpp,data/crawl/squid/new_hunk_6006.cpp,-1,60,,"fatal(""Heap Replacement: Unknown StoreEntry node type"");","[""addLog""]","[[], [""fatal"", ""Heap"", ""Replacement"", ""Unknown"", ""StoreEntry"", ""node"", ""type""]]",[-7271558282186230812],6620,0:00:00
https://github.com/squid-cache/squid/commit/23dc8acafc3dd7a63df446c9712ca11394757cb4,26 Jun 2000,"DW:
 - Added store swapin and swapout counters.
 - Changed the location of 'swap_files_cleaned' in StatCounters structure.",44,data/crawl/squid/hunk_5992.cpp,,,data/crawl/squid/old_hunk_5992.cpp,data/crawl/squid/new_hunk_5992.cpp,3,7,"storeAppendPrintf(sentry, ""swap_files_cleaned = %d\n"",
	f->swap_files_cleaned);","storeAppendPrintf(sentry, ""swap.files_cleaned = %d\n"",
	f->swap.files_cleaned);","[""updateVariable"", ""updateContent"", ""addVariable""]","[[""swap_files_cleaned"", ""swap_files_cleaned""], [""swap"", ""files_cleaned"", ""swap"", ""files_cleaned""]]",[6965924377237808200],6619,0:00:00
https://github.com/squid-cache/squid/commit/111b16cf035d5a7ae8f9e51edb47b0359db33e97,05 Oct 2000,"DW:
 - Removed stdio from net_db.c as suggested by Jens-S. Voeckler.",110,data/crawl/squid/hunk_5972.cpp,,,data/crawl/squid/old_hunk_5972.cpp,data/crawl/squid/new_hunk_5972.cpp,4,4,"fprintf(fp, ""\n"");","snprintf(rbuf + ro, RBUF_SZ - ro, ""\n"");","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""fprintf"", ""fp""], [""snprintf"", ""rbuf"", ""ro"", ""RBUF_SZ"", ""ro""]]",[-5788974271948228355],6618,0:00:00
https://github.com/squid-cache/squid/commit/186477c1163c0718cf127587c1ad63a1e61906d9,01 Nov 2000,"DW:
 - Changed occurances of

        struct _foo {
            /* first two items must be same as hash_link */
            char *key;
            foo *next;
            ...
        };

   to

        struct _foo {
            hash_link hash;     /* must be first */
            ...
        };",385,data/crawl/squid/hunk_5958.cpp,,,data/crawl/squid/old_hunk_5958.cpp,data/crawl/squid/new_hunk_5958.cpp,3,3,"storeAppendPrintf(sentry, "" %s"", x->name);","storeAppendPrintf(sentry, "" %s"", hashKeyStr(&x->hash));","[""updateVariable"", ""addVariable""]","[[""x"", ""name""], [""hashKeyStr"", ""&x"", ""hash""]]",[17869657441361125622],6617,0:00:00
https://github.com/squid-cache/squid/commit/10270faab2bc84e50cde13431a6e6d1932966e5f,05 Nov 2000,"Cross-site scripting fixes by Robert Collins and Henrik Nordstrom

Everywhere where Squid inserts text received from the network into
a HTML page (error pages, FTP listings, Gopher listings, ...) care
must be taken to ensure that the text is properly encoded as HTML,
or a malicious user might be able to insert script code or other
HTML tags, and exploit the web browser of any user visiting their
page or clicking on that funny link received in a email..",78,data/crawl/squid/hunk_5950.cpp,,,data/crawl/squid/old_hunk_5950.cpp,data/crawl/squid/new_hunk_5950.cpp,17,18,"storeAppendPrintf(e, ""%c"", ftpState->title_url[k++]);","storeAppendPrintf(e, ""%c"", title[k++]);","[""updateVariable"", ""removeVariable""]","[[""ftpState"", ""title_url[k""], [""title[k""]]",[-19434422821196147371],6616,0:00:00
https://github.com/squid-cache/squid/commit/10270faab2bc84e50cde13431a6e6d1932966e5f,05 Nov 2000,"Cross-site scripting fixes by Robert Collins and Henrik Nordstrom

Everywhere where Squid inserts text received from the network into
a HTML page (error pages, FTP listings, Gopher listings, ...) care
must be taken to ensure that the text is properly encoded as HTML,
or a malicious user might be able to insert script code or other
HTML tags, and exploit the web browser of any user visiting their
page or clicking on that funny link received in a email..",78,data/crawl/squid/hunk_5950.cpp,,,data/crawl/squid/old_hunk_5950.cpp,data/crawl/squid/new_hunk_5950.cpp,12,13,"storeAppendPrintf(e, ""%c"", ftpState->title_url[k]);","storeAppendPrintf(e, ""%c"", title[k]);","[""updateVariable"", ""removeVariable""]","[[""ftpState"", ""title_url[k]""], [""title[k]""]]",[-931880703634394427],6615,0:00:00
https://github.com/squid-cache/squid/commit/b3de4c9b210bf6f6b93577e9179b440f59be586d,05 Jan 2001,"A hack to support array types in Squid's Config structure.  Mostly this
is to eliminate compiler warnings.  The compiler wants us to write
   parse_bar(&Config.bar[0]);
rather than
   parse_bar(&Config.bar);",17,data/crawl/squid/hunk_5930.cpp,,,data/crawl/squid/old_hunk_5930.cpp,data/crawl/squid/new_hunk_5930.cpp,3,3,"fprintf(fp, ""\tfree_%s(&%s);\n"", entry->type, entry->loc);","fprintf(fp, ""\tfree_%s(&%s%s);\n"",
	    entry->type, entry->loc,
	    entry->array_flag ? ""[0]"" : """");","[""addContent"", ""addVariable""]","[[""&%s""], [""&%s%s"", ""entry"", ""array_flag"", ""[0]""]]",[19580881337582745350],6614,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5912.cpp,,,data/crawl/squid/old_hunk_5912.cpp,data/crawl/squid/new_hunk_5912.cpp,-1,701,,"fatal(""Invalid authenticate state for NTLMStart"");","[""addLog""]","[[], [""fatal"", ""Invalid"", ""authenticate"", ""state"", ""for"", ""NTLMStart""]]",[-21171954645048328152],6613,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5912.cpp,,,data/crawl/squid/old_hunk_5912.cpp,data/crawl/squid/new_hunk_5912.cpp,-1,289,,"httpHeaderPutStrf(&rep->header, type, ""NTLM"");","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""type"", ""NTLM""]]",[-8090161193889355831],6612,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5906.cpp,,,data/crawl/squid/old_hunk_5906.cpp,data/crawl/squid/new_hunk_5906.cpp,-1,303,,"printf(""ERR %s\n"", user);","[""addLog""]","[[], [""printf"", ""ERR"", ""%s\\n"", ""user""]]",[16799966826793604356],6611,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5905.cpp,,,data/crawl/squid/old_hunk_5905.cpp,data/crawl/squid/new_hunk_5905.cpp,-1,436,,"fprintf(stderr, ""SMB_Logon_server: Couldn't allocate packet\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SMB_Logon_server"", ""Couldn"", ""t"", ""allocate"", ""packet\\n""]]",[-20029027935438814705],6610,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5894.cpp,,,data/crawl/squid/old_hunk_5894.cpp,data/crawl/squid/new_hunk_5894.cpp,-1,67,,"fputs(buf, p);","[""addLog""]","[[], [""fputs"", ""buf"", ""p""]]",[-3173597624094778370],6609,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5893.cpp,,,data/crawl/squid/old_hunk_5893.cpp,data/crawl/squid/new_hunk_5893.cpp,-1,185,,"fprintf(stderr, ""ERROR: failed to release PAM authenticator\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""failed"", ""to"", ""release"", ""PAM"", ""authenticator\\n""]]",[-20015993346212209768],6608,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5893.cpp,,,data/crawl/squid/old_hunk_5893.cpp,data/crawl/squid/new_hunk_5893.cpp,-1,139,,"fprintf(stderr, ""authenticator: Unexpected input '%s'\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""authenticator"", ""Unexpected"", ""input"", ""%s"", ""\\n"", ""buf""]]",[-20281078129703161784],6607,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,698,,"fprintf(stderr, ""Tree disconnect successful ...\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Tree"", ""disconnect"", ""successful"", ""\\n""]]",[-10455339582062958758],6606,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,682,,"fprintf(stderr, ""SMB_TDis failed with errorclass = %i, Error Code = %i\n"",
	    CVAL(SMB_Hdr(pkt), SMB_hdr_rcls_offset),
	    SVAL(SMB_Hdr(pkt), SMB_hdr_err_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SMB_TDis"", ""failed"", ""with"", ""errorclass"", ""%i"", ""Error"", ""Code"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_rcls_offset"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_err_offset""]]",[17608266999179787676],6605,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,656,,"fprintf(stderr, ""Error sending TDis request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""sending"", ""TDis"", ""request\\n""]]",[1669284990908647174],6604,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,598,,"fprintf(stderr, ""TConn succeeded, with TID=%i, Max Xmit=%i\n"",
	tree->tid, tree->mbs);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""TConn"", ""succeeded"", ""with"", ""TID"", ""%i"", ""Max"", ""Xmit"", ""%i\\n"", ""tree"", ""tid"", ""tree"", ""mbs""]]",[-190786774051843867],6603,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,581,,"fprintf(stderr, ""SMB_TCon failed with errorclass = %i, Error Code = %i\n"",
	    CVAL(SMB_Hdr(pkt), SMB_hdr_rcls_offset),
	    SVAL(SMB_Hdr(pkt), SMB_hdr_err_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SMB_TCon"", ""failed"", ""with"", ""errorclass"", ""%i"", ""Error"", ""Code"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_rcls_offset"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_err_offset""]]",[17608263999045787280],6602,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,551,,"fprintf(stderr, ""Error sending TCon request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""sending"", ""TCon"", ""request\\n""]]",[1669291990818646766],6601,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,473,,"fprintf(stderr, ""Bad parameter passed to SMB_TreeConnect\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Bad"", ""parameter"", ""passed"", ""to"", ""SMB_TreeConnect\\n""]]",[-28283292331581745939],6600,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,444,,"fprintf(stderr, ""gethostname in SMB_Get_My_Name returned error:"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""gethostname"", ""in"", ""SMB_Get_My_Name"", ""returned"", ""error""]]",[-6056458175703647334],6599,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,423,,"fprintf(stderr, ""Protocol selected is: %i:%s\n"", prot, Prots[prot]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Protocol"", ""selected"", ""is"", ""%i"", ""%s\\n"", ""prot"", ""Prots[prot]""]]",[568566326311284656],6598,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,416,,"fprintf(stderr, ""  wct = %i\n"", CVAL(SMB_Hdr(pkt), SMB_hdr_wct_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""wct"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_wct_offset""]]",[11639558928581341257],6597,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,415,,"fprintf(stderr, ""Unknown NegProt response format ... Ignored\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Unknown"", ""NegProt"", ""response"", ""format"", ""Ignored\\n""]]",[-21955897165561237654],6596,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,339,,"fprintf(stderr, ""None of our protocols was accepted ... "");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""None"", ""of"", ""our"", ""protocols"", ""was"", ""accepted""]]",[-22867513539682129949],6595,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,325,,"fprintf(stderr, ""SMB_Negotiate failed with errorclass = %i, Error Code = %i\n"",
	    CVAL(SMB_Hdr(pkt), SMB_hdr_rcls_offset),
	    SVAL(SMB_Hdr(pkt), SMB_hdr_err_offset));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""SMB_Negotiate"", ""failed"", ""with"", ""errorclass"", ""%i"", ""Error"", ""Code"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_rcls_offset"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_err_offset""]]",[20240467983439335349],6594,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,314,,"fprintf(stderr, ""Error receiving response to negotiate\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""negotiate\\n""]]",[-10989357414161367393],6593,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5904.cpp,,,data/crawl/squid/old_hunk_5904.cpp,data/crawl/squid/new_hunk_5904.cpp,-1,301,,"fprintf(stderr, ""Error sending negotiate protocol\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""sending"", ""negotiate"", ""protocol\\n""]]",[-6277015129624988613],6592,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,461,,"fprintf(stderr, ""Getting packet.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Getting"", ""packet"", ""\\n""]]",[-16512603769435458569],6591,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,308,,"fprintf(fd, ""RFCNB SESSION KEEP ALIVE: Length = %i\n"",
	    RFCNB_Pkt_Len(pkt->data));","[""addLog""]","[[], [""fprintf"", ""fd"", ""RFCNB"", ""SESSION"", ""KEEP"", ""ALIVE"", ""Length"", ""%i\\n"", ""RFCNB_Pkt_Len"", ""pkt"", ""data""]]",[11811773037032704824],6590,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,299,,"fprintf(fd, ""RFCNB SESSION RETARGET: Length = %i\n"",
	    RFCNB_Pkt_Len(pkt->data));","[""addLog""]","[[], [""fprintf"", ""fd"", ""RFCNB"", ""SESSION"", ""RETARGET"", ""Length"", ""%i\\n"", ""RFCNB_Pkt_Len"", ""pkt"", ""data""]]",[14889725013713008903],6589,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,292,,"fprintf(fd, ""   Error = %x\n"", CVAL(pkt->data, RFCNB_Pkt_Error_Offset));","[""addLog""]","[[], [""fprintf"", ""fd"", ""Error"", ""%x\\n"", ""CVAL"", ""pkt"", ""data"", ""RFCNB_Pkt_Error_Offset""]]",[4754144509928670694],6588,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,290,,"fprintf(fd, ""   Protocol Error, short Reject packet!\n"");","[""addLog""]","[[], [""fprintf"", ""fd"", ""Protocol"", ""Error"", ""short"", ""Reject"", ""packet"", ""\\n""]]",[213439437028480387],6587,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,286,,"fprintf(fd, ""RFCNB SESSION REJECT: Length = %i\n"",
	    RFCNB_Pkt_Len(pkt->data));","[""addLog""]","[[], [""fprintf"", ""fd"", ""RFCNB"", ""SESSION"", ""REJECT"", ""Length"", ""%i\\n"", ""RFCNB_Pkt_Len"", ""pkt"", ""data""]]",[-820721139258317966],6586,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,280,,"fprintf(fd, ""RFCNB SESSION ACK: Length = %i\n"",
	    RFCNB_Pkt_Len(pkt->data));","[""addLog""]","[[], [""fprintf"", ""fd"", ""RFCNB"", ""SESSION"", ""ACK"", ""Length"", ""%i\\n"", ""RFCNB_Pkt_Len"", ""pkt"", ""data""]]",[8738986985758851235],6585,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,274,,"fprintf(fd, ""  Calling Name: %s\n"", lname);","[""addLog""]","[[], [""fprintf"", ""fd"", ""Calling"", ""Name"", ""%s\\n"", ""lname""]]",[-12850645637521568098],6584,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,272,,"fprintf(fd, ""  Called Name: %s\n"", lname);","[""addLog""]","[[], [""fprintf"", ""fd"", ""Called"", ""Name"", ""%s\\n"", ""lname""]]",[-9566888668036683348],6583,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,269,,"fprintf(fd, ""SESSION REQUEST: Length = %i\n"",
	    RFCNB_Pkt_Len(pkt->data));","[""addLog""]","[[], [""fprintf"", ""fd"", ""SESSION"", ""REQUEST"", ""Length"", ""%i\\n"", ""RFCNB_Pkt_Len"", ""pkt"", ""data""]]",[-3187120721537859483],6582,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,251,,"fprintf(fd, ""SESSION MESSAGE: Length = %i\n"", RFCNB_Pkt_Len(pkt->data));","[""addLog""]","[[], [""fprintf"", ""fd"", ""SESSION"", ""MESSAGE"", ""Length"", ""%i\\n"", ""RFCNB_Pkt_Len"", ""pkt"", ""data""]]",[-8126994675341144173],6581,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,245,,"fprintf(fd, ""RFCNB Pkt %s:"", dirn);","[""addLog""]","[[], [""fprintf"", ""fd"", ""RFCNB"", ""Pkt"", ""%s"", ""dirn""]]",[-2429762932651283989],6580,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5902.cpp,,,data/crawl/squid/old_hunk_5902.cpp,data/crawl/squid/new_hunk_5902.cpp,-1,174,,"fprintf(fd, ""\n"");","[""addLog""]","[[], [""fprintf"", ""fd"", ""\\n""]]",[-5179306325123647008],6579,0:00:00
https://github.com/squid-cache/squid/commit/b6a2f15e25349145c5f0f4737d4f5ef1cd8b6ad2,15 Apr 1999,SQUID_2_2 branch merge,3534,data/crawl/squid/hunk_6146.cpp,,,data/crawl/squid/old_hunk_6146.cpp,data/crawl/squid/new_hunk_6146.cpp,8,-1,"fatal_dump(""Cannot cd to swap directory?"");",,"[""removeLog""]","[[""fatal_dump"", ""Cannot"", ""cd"", ""to"", ""swap"", ""directory""], []]",[10293767358945213303],6578,"328 days, 0:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5892.cpp,,,data/crawl/squid/old_hunk_5892.cpp,data/crawl/squid/new_hunk_5892.cpp,-1,112,,"fprintf(stderr, ""cannot stat %s\n"", argv[1]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""cannot"", ""stat"", ""%s\\n"", ""argv[1]""]]",[-9992788649957119247],6577,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/de3ee917a46bbf69275684c808627e2e4ec69e01,21 Feb 2001,"cachemgr fix for http_header_access and header_replacement
by Robert Collins

Specifically neither produce output that can be put into a squid.conf
file...",15,data/crawl/squid/hunk_5861.cpp,,,data/crawl/squid/old_hunk_5861.cpp,data/crawl/squid/new_hunk_5861.cpp,7,6,"storeAppendPrintf(entry, ""\t%s: %s"", httpHeaderNameById(i),
	    header[i].replacement);","storeAppendPrintf(entry, ""%s %s %s\n"", name, httpHeaderNameById(i),
	    header[i].replacement);","[""updateContent"", ""addVariable""]","[[""\\t%s""], [""%s"", ""%s\\n"", ""name""]]",[7144772321524469053],6576,0:00:00
https://github.com/squid-cache/squid/commit/de3ee917a46bbf69275684c808627e2e4ec69e01,21 Feb 2001,"cachemgr fix for http_header_access and header_replacement
by Robert Collins

Specifically neither produce output that can be put into a squid.conf
file...",15,data/crawl/squid/hunk_5860.cpp,,,data/crawl/squid/old_hunk_5860.cpp,data/crawl/squid/new_hunk_5860.cpp,6,-1,"storeAppendPrintf(entry, ""\t"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""\\t""], []]",[-3924684621819481210],6575,0:00:00
https://github.com/squid-cache/squid/commit/b6a2f15e25349145c5f0f4737d4f5ef1cd8b6ad2,15 Apr 1999,SQUID_2_2 branch merge,3534,data/crawl/squid/hunk_6141.cpp,,,data/crawl/squid/old_hunk_6141.cpp,data/crawl/squid/new_hunk_6141.cpp,-1,19,,"fprintf(f, ""%d\n"", sizeof(void *));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""void"", ""*""]]",[-11360315636553856409],6574,"341 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8e8d4f300e0fcfdea4ea69b89ba87301346b4cca,10 Feb 2001,"The ""maxobjsize"" parameter moved to an optional cache_dir option.

This was done by implementing a generic option parser for cache_dir
where each FS-type can include their own options if needed.

squid.conf syntax changes:

maxobjsize argument now an option
the Q1 and Q2 arguments to diskd now options

Generic cache_dir syntax

  cache_dir type path [fs-parameters] [optins]

Common options available to all stores

   max-size=n (the former maxobjsize argument)
   read-only

diskd options
   Q1=n, Q2=n (the former Q1 and Q2 arguments)


Implementation details:

Each option is defined by a struct cache_dir_option with the members
  name   option name
  parse  function that parses the option argument

The parse functions are called with the arguments
  parse_function(SwapDir *sd, const char *optionname,
		  const char *optionvalue, int reconfiguring)


The FS cache_dir parser (both initial and reconfigure) must call
parse_cachedir_options after parsing all it's FS-specific arguments.

  parse_cachedir_options(SwapDir *sd, struct cache_dir_option *options,
			  int reconfiguring)

options is an array of FS-specific options, terminated with a entry where
name is NULL.

The list of common options shared by all stores is defined in cache_cf.c",386,data/crawl/squid/hunk_5868.cpp,,,data/crawl/squid/old_hunk_5868.cpp,data/crawl/squid/new_hunk_5868.cpp,9,-1,"fatal(""storeDiskdDirParse: invalid magic2 value"");",,"[""removeLog""]","[[""fatal"", ""storeDiskdDirParse"", ""invalid"", ""magic2"", ""value""], []]",[8762154747394679386],6573,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8e8d4f300e0fcfdea4ea69b89ba87301346b4cca,10 Feb 2001,"The ""maxobjsize"" parameter moved to an optional cache_dir option.

This was done by implementing a generic option parser for cache_dir
where each FS-type can include their own options if needed.

squid.conf syntax changes:

maxobjsize argument now an option
the Q1 and Q2 arguments to diskd now options

Generic cache_dir syntax

  cache_dir type path [fs-parameters] [optins]

Common options available to all stores

   max-size=n (the former maxobjsize argument)
   read-only

diskd options
   Q1=n, Q2=n (the former Q1 and Q2 arguments)


Implementation details:

Each option is defined by a struct cache_dir_option with the members
  name   option name
  parse  function that parses the option argument

The parse functions are called with the arguments
  parse_function(SwapDir *sd, const char *optionname,
		  const char *optionvalue, int reconfiguring)


The FS cache_dir parser (both initial and reconfigure) must call
parse_cachedir_options after parsing all it's FS-specific arguments.

  parse_cachedir_options(SwapDir *sd, struct cache_dir_option *options,
			  int reconfiguring)

options is an array of FS-specific options, terminated with a entry where
name is NULL.

The list of common options shared by all stores is defined in cache_cf.c",386,data/crawl/squid/hunk_5868.cpp,,,data/crawl/squid/old_hunk_5868.cpp,data/crawl/squid/new_hunk_5868.cpp,5,-1,"fatal(""storeDiskdDirParse: invalid magic1 value"");",,"[""removeLog""]","[[""fatal"", ""storeDiskdDirParse"", ""invalid"", ""magic1"", ""value""], []]",[8762154747394679389],6572,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/505e35db6f84bcad19f8d366753a77955dc842d2,04 Jun 1998,"Replaced 'cache_host_acl' with 'cache_host_access' so its just like the
other ACL access lists.",113,data/crawl/squid/hunk_6371.cpp,,,data/crawl/squid/old_hunk_6371.cpp,data/crawl/squid/new_hunk_6371.cpp,-1,7,,"storeAppendPrintf(entry, "" %s%s"",
		l->op ? null_string : ""!"",
		l->acl->name);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s%s"", ""l"", ""op"", ""null_string"", ""l"", ""acl"", ""name""]]",[16107525661293422335],6571,"575 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c94af0b96468ba69e7b8253488a699efd16a49cb,10 Aug 2001,"COSS fixes from diskio.
This code is now stable, but <2gb and sync.
Next, >2gb.",193,data/crawl/squid/hunk_5807.cpp,,,data/crawl/squid/old_hunk_5807.cpp,data/crawl/squid/new_hunk_5807.cpp,-1,5,,"fatal(""COSS requires max-size to be set to something other than -1!\n"");","[""addLog""]","[[], [""fatal"", ""COSS"", ""requires"", ""max"", ""size"", ""to"", ""be"", ""set"", ""to"", ""something"", ""other"", ""than"", ""1"", ""\\n""]]",[6478755802956658214],6570,0:00:00
https://github.com/squid-cache/squid/commit/2887ac99ff51e31af06f8c862f1600110e53dd03,12 Aug 2001,"Commit the basic code to implement async io via posix aio.
only read is done at the moment - write and sync haven't been
implemented yet.",105,data/crawl/squid/hunk_5803.cpp,,,data/crawl/squid/old_hunk_5803.cpp,data/crawl/squid/new_hunk_5803.cpp,-1,15,,"fatal(""Aiee! out of aiocb slots!\n"");","[""addLog""]","[[], [""fatal"", ""Aiee"", ""out"", ""of"", ""aiocb"", ""slots"", ""\\n""]]",[-14025089344181988516],6569,0:00:00
https://github.com/squid-cache/squid/commit/32754419a27c336e2469c7af600096aa6fdc39ab,24 Oct 2001,format fixes,200,data/crawl/squid/hunk_5734.cpp,,,data/crawl/squid/old_hunk_5734.cpp,data/crawl/squid/new_hunk_5734.cpp,3,3,"storeAppendPrintf(entry, ""%s %d %s"", name, bs->maxsize,
		head->allow ? ""Allow"" : ""Deny"");","storeAppendPrintf(entry, ""%s %ld %s"", name, (long int) bs->maxsize,
		head->allow ? ""Allow"" : ""Deny"");","[""updateContent"", ""addVariable""]","[[""%d""], [""%ld"", ""long"", ""int""]]",[-6359622888960138661],6568,0:00:00
https://github.com/squid-cache/squid/commit/38650cc81be0886a91af673bd41576066e11b2a8,24 Oct 2001,format fixes,117,data/crawl/squid/hunk_5746.cpp,,,data/crawl/squid/old_hunk_5746.cpp,data/crawl/squid/new_hunk_5746.cpp,3,3,"storeAppendPrintf(s, ""\tdefer: n %d, until %d\n"",
		conn->defer.n, conn->defer.until);","storeAppendPrintf(s, ""\tdefer: n %d, until %ld\n"",
		conn->defer.n, (long int)conn->defer.until);","[""updateContent"", ""addVariable""]","[[""%d\\n""], [""%ld\\n"", ""long"", ""int""]]",[-9994225909338810349],6567,0:00:00
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,769,,"storeAppendPrintf(sentry, ""HTTP Messages handled per comm_poll_http_incoming() call:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""HTTP"", ""Messages"", ""handled"", ""per"", ""comm_poll_http_incoming"", ""call"", ""\\n""]]",[28037420321787097118],6566,"626 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ef523f990009da27ce7bbac6ceb4b96301d09eb9,16 Apr 1999,"comm_incoming crap for internal DNS

Semi-better retransmit algorithm.  Use nameserver % num_sends",145,data/crawl/squid/hunk_6138.cpp,,,data/crawl/squid/old_hunk_6138.cpp,data/crawl/squid/new_hunk_6138.cpp,-1,4,,"storeAppendPrintf(sentry, ""DNS Messages handled per comm_poll_dns_incoming() call:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""DNS"", ""Messages"", ""handled"", ""per"", ""comm_poll_dns_incoming"", ""call"", ""\\n""]]",[11814887229675089924],6565,"491 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,763,,"storeAppendPrintf(sentry, ""ICP Messages handled per comm_poll_icp_incoming() call:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""ICP"", ""Messages"", ""handled"", ""per"", ""comm_poll_icp_incoming"", ""call"", ""\\n""]]",[17952605922830638338],6564,"626 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7e3ce7b9132c5b7796d7eec8194ec8d417d86361,31 Dec 1999,merge changes from SQUID_2_3 branch,2495,data/crawl/squid/hunk_6080.cpp,,,data/crawl/squid/old_hunk_6080.cpp,data/crawl/squid/new_hunk_6080.cpp,-1,17,,"fatalf(""bad return value from commDeferRead(FD %d)\n"", i);","[""addLog""]","[[], [""fatalf"", ""bad"", ""return"", ""value"", ""from"", ""commDeferRead"", ""FD"", ""%d"", ""\\n"", ""i""]]",[-3488724790638796820],6563,"362 days, 0:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5893.cpp,,,data/crawl/squid/old_hunk_5893.cpp,data/crawl/squid/new_hunk_5893.cpp,-1,161,,"fprintf(stderr, ""ERROR: failed to create PAM authenticator\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""failed"", ""to"", ""create"", ""PAM"", ""authenticator\\n""]]",[-18643874290554917814],6562,"182 days, 0:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5893.cpp,,,data/crawl/squid/old_hunk_5893.cpp,data/crawl/squid/new_hunk_5893.cpp,-1,175,,"fprintf(stdout, ""OK\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""OK\\n""]]",[-13937555640283875909],6561,"223 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4e2c57a0431489369bd9869aff83772eee1c0ef9,30 Mar 2002,SASL auth helper by Ian Castle,173,data/crawl/squid/hunk_5688.cpp,,,data/crawl/squid/old_hunk_5688.cpp,data/crawl/squid/new_hunk_5688.cpp,-1,72,,"fprintf( stderr, ""authenticator: Unexpected input '%s'\n"", line );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""authenticator"", ""Unexpected"", ""input"", ""%s"", ""\\n"", ""line""]]",[-14637057020941096890],6560,0:00:00
https://github.com/squid-cache/squid/commit/d96ceb8e4214ec5c04de85ee9814a87be33956c3,06 Apr 2002,"* Commit Andres Kroonmaa's chunked memory pool allocator
* bootstrap",2866,data/crawl/squid/hunk_5680.cpp,,,data/crawl/squid/old_hunk_5680.cpp,data/crawl/squid/new_hunk_5680.cpp,5,5,"storeAppendPrintf(sentry, ""\tTotal free:            %6d KB %d%%\n"",
	t >> 10, percent(t, mp.arena));","storeAppendPrintf(sentry, ""\tTotal free:            %6d KB %d%%\n"",
	t >> 10, percent(t, mp.arena + mp.hblkhd));","[""addVariable""]","[[], [""mp"", ""hblkhd""]]",[-4611073784348660412],6559,0:00:00
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,428,,"fprintf(f, ""%d\n"", sizeof(u_int64_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""u_int64_t""]]",[-7922969409867035317],6558,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,389,,"fprintf(f, ""%d\n"", sizeof(uint64_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""uint64_t""]]",[-10871295476171264403],6557,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,350,,"fprintf(f, ""%d\n"", sizeof(int64_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""int64_t""]]",[2448077763263589001],6556,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,311,,"fprintf(f, ""%d\n"", sizeof(u_int32_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""u_int32_t""]]",[5523635663285515702],6555,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,272,,"fprintf(f, ""%d\n"", sizeof(uint32_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""uint32_t""]]",[4575451597511287016],6554,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,233,,"fprintf(f, ""%d\n"", sizeof(int32_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""int32_t""]]",[-2552061237549412356],6553,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,194,,"fprintf(f, ""%d\n"", sizeof(u_int16_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""u_int16_t""]]",[3523625663267515724],6552,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,155,,"fprintf(f, ""%d\n"", sizeof(uint16_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""uint16_t""]]",[2575433597429286894],6551,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,116,,"fprintf(f, ""%d\n"", sizeof(int16_t));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""int16_t""]]",[-4552071237567412346],6550,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77d6bd889ba22dc9de04e697b0545782378cf858,26 Feb 2001,"From Chemolli Francesco:

Support for the types int16_t, int32_t, int64_t and their unsigned
counterparts u_int16_t, u_int32_t, u_int64_t. Legacy support for num32
is provided, but I recommend we deprecate num* types and (where struct
packing is useful) we move in time fully to the new types.",2083,data/crawl/squid/hunk_5857.cpp,,,data/crawl/squid/old_hunk_5857.cpp,data/crawl/squid/new_hunk_5857.cpp,-1,77,,"fprintf(f, ""%d\n"", sizeof(__int64));","[""addLog""]","[[], [""fprintf"", ""f"", ""%d\\n"", ""sizeof"", ""__int64""]]",[-366467775559753470],6549,"205 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a2f30fc74c0f2ba7b662833a6f12d5233c07c3f2,23 May 2002,"new config.guess, dated 2002-03-04, from autoconf-2.53",254,data/crawl/squid/hunk_5653.cpp,,,data/crawl/squid/old_hunk_5653.cpp,data/crawl/squid/new_hunk_5653.cpp,19,-1,"printf (""%s-pc-linux-gnulibc1\n"", argv[1]);",,"[""removeLog""]","[[""printf"", ""%s"", ""pc"", ""linux"", ""gnulibc1\\n"", ""argv[1]""], []]",[-11866109334529106382],6548,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5885.cpp,,,data/crawl/squid/old_hunk_5885.cpp,data/crawl/squid/new_hunk_5885.cpp,-1,56,,"fprintf(stderr, ""\nUnable to connect to LDAP server:%s port:%d\n"",
		ldapServer, LDAP_PORT);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""LDAP"", ""server"", ""%s"", ""port"", ""%d\\n"", ""ldapServer"", ""LDAP_PORT""]]",[-1845135886420068900],6547,"265 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/hunk_5838.cpp,,,data/crawl/squid/old_hunk_5838.cpp,data/crawl/squid/new_hunk_5838.cpp,-1,28,,"fprintf(stderr, ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd options\n\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\tIf"", ""you"", ""need"", ""to"", ""bind"", ""as"", ""a"", ""user"", ""to"", ""perform"", ""searches"", ""then"", ""use"", ""the\\n\\t"", ""D"", ""binddn"", ""w"", ""bindpasswd"", ""options\\n\\n""]]",[-21723973618091670876],6546,"216 days, 12:00:00"
https://github.com/squid-cache/squid/commit/50f87883baf7672dc324038f4256b507cb16c877,17 Apr 2001,"More LDAP options
    -R		Do not follow referrals
    -a ...	specifies when to dereference aliases

Also be more tolerant for minor search failures, accepting partial results.
Microsoft Active Directory returns partial results due to a referral in
the user definition.",50,data/crawl/squid/hunk_5836.cpp,,,data/crawl/squid/old_hunk_5836.cpp,data/crawl/squid/new_hunk_5836.cpp,-1,4,,"fprintf(stderr, ""\t-a never|always|search|find\n\t\t\t\twhen to dereference aliases\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""a"", ""never"", ""always"", ""search"", ""find\\n\\t\\t\\t\\twhen"", ""to"", ""dereference"", ""aliases\\n""]]",[-11146516176042788410],6545,"216 days, 0:00:00"
https://github.com/squid-cache/squid/commit/50f87883baf7672dc324038f4256b507cb16c877,17 Apr 2001,"More LDAP options
    -R		Do not follow referrals
    -a ...	specifies when to dereference aliases

Also be more tolerant for minor search failures, accepting partial results.
Microsoft Active Directory returns partial results due to a referral in
the user definition.",50,data/crawl/squid/hunk_5836.cpp,,,data/crawl/squid/old_hunk_5836.cpp,data/crawl/squid/new_hunk_5836.cpp,-1,3,,"fprintf(stderr, ""\t-R\t\t\tdo not follow referrals\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""R\\t\\t\\tdo"", ""not"", ""follow"", ""referrals\\n""]]",[-4631610688282656088],6544,"216 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/hunk_5838.cpp,,,data/crawl/squid/old_hunk_5838.cpp,data/crawl/squid/new_hunk_5838.cpp,-1,24,,"fprintf(stderr, ""\t-w bindpasswd\t\tpassword for binddn\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""w"", ""bindpasswd\\t\\tpassword"", ""for"", ""binddn\\n""]]",[-20996528363116112049],6543,"216 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/hunk_5838.cpp,,,data/crawl/squid/old_hunk_5838.cpp,data/crawl/squid/new_hunk_5838.cpp,-1,23,,"fprintf(stderr, ""\t-D binddn\t\tDN to bind as to perform searches\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""D"", ""binddn\\t\\tDN"", ""to"", ""bind"", ""as"", ""to"", ""perform"", ""searches\\n""]]",[-12647030441262777009],6542,"216 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c4c1f30c338b17d0e13807c5fd47374be47a3493,16 Apr 2001,Added support for persistent LDAP connections,127,data/crawl/squid/hunk_5838.cpp,,,data/crawl/squid/old_hunk_5838.cpp,data/crawl/squid/new_hunk_5838.cpp,-1,22,,"fprintf(stderr, ""\t-s base|one|sub\t\tsearch scope\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""s"", ""base"", ""one"", ""sub\\t\\tsearch"", ""scope\\n""]]",[-3711046901917112876],6541,"216 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/hunk_7234.cpp,,,data/crawl/squid/old_hunk_7234.cpp,data/crawl/squid/new_hunk_7234.cpp,-1,46,,"storeAppendPrintf(e, ""</ADDRESS></BODY></HTML>\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""/ADDRESS"", ""/BODY"", ""/HTML"", ""\\n""]]",[4728870564532490563],6540,"938 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3fdadc70bf49427e4830bec1560ec76f09256685,26 May 1997,mostly done inlining all FTP requsts,1679,data/crawl/squid/hunk_7234.cpp,,,data/crawl/squid/old_hunk_7234.cpp,data/crawl/squid/new_hunk_7234.cpp,-1,40,,"storeAppendPrintf(e, ""<ADDRESS>\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""ADDRESS"", ""\\n""]]",[-3565031264689621166],6539,"938 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb7d6bd6cbfc077ca677fa41253a29a1f1f9c6fb,15 Jul 2002,"Cleanup of Gopher HTML code to use a common header format, and the
standard Squid signature.",59,data/crawl/squid/hunk_5624.cpp,,,data/crawl/squid/old_hunk_5624.cpp,data/crawl/squid/new_hunk_5624.cpp,-1,9,,"storeAppendPrintf(e, title, substring);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""title"", ""substring""]]",[363019237628138938],6538,0:00:00
https://github.com/squid-cache/squid/commit/429d7b01dda4ee715f5dc2327a18b10657e40635,20 Jul 2002,"winbind helpers cleanup by Guido

- wb_ntlmauth (ntlm): Fixed error message on wrong command line
- wb_auth (basic): Added same command line handling and fix to Squid
potential DoS issue as wb_ntlmauth.
- wb_group (External ACL): Added same command line handling and fix to
Squid potential DoS issue as wb_ntlmauth.",96,data/crawl/squid/hunk_5614.cpp,,,data/crawl/squid/old_hunk_5614.cpp,data/crawl/squid/new_hunk_5614.cpp,-1,6,,"fprintf(stderr,""Usage: %s [-d] [-h]\n""
	    	"" -d      enable debugging\n""
		"" -h      this message\n"",
		program);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Usage"", ""%s"", ""["", ""d]"", ""["", ""h]\\n"", ""d"", ""enable"", ""debugging\\n"", ""h"", ""this"", ""message\\n"", ""program""]]",[23205508201027029269],6537,0:00:00
https://github.com/squid-cache/squid/commit/fab7a87efecd0ee96094fb21db85441374d9ba62,07 Jan 2002,"Large rewrite to support one-shot mode of operation (one user per PAM
connection, no connection cache).

Have also added a man page describing it's use.",233,data/crawl/squid/hunk_5699.cpp,,,data/crawl/squid/old_hunk_5699.cpp,data/crawl/squid/new_hunk_5699.cpp,-1,56,,"fprintf(stderr, ""Unknown option '%s'\n"", argv[optind]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Unknown"", ""option"", ""%s"", ""\\n"", ""argv[optind]""]]",[-18437110933072029326],6536,"108 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8370dcf2948e69d6914b1f38a6c81cdacce1e0b1,04 Jun 2002,TLS encryption support by Michael Cunningham,52,data/crawl/squid/hunk_5650.cpp,,,data/crawl/squid/old_hunk_5650.cpp,data/crawl/squid/new_hunk_5650.cpp,-1,3,,"fprintf(stderr, ""\t-v 1|2\t\t\tLDAP version\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""v"", ""1"", ""2\\t\\t\\tLDAP"", ""version\\n""]]",[-21218519462745272872],6535,"46 days, 12:00:00"
https://github.com/squid-cache/squid/commit/2246b73298f50a6d4ecdf84e5759a1da2fa9c98b,28 May 1998,"- removed ascii headers from reply and request structures
- added more http headers
- fixed content of entity-headers array
- do not update headers with 304 that are not allowed by HTTP/1.1
- moved routines common for request and replies to HttpMsg.c
- rewrote clientBuildReply* and other client_side functions
  using new header interface
- code cleanup
- do not cut off ""; parameter"" from ""digitized"" Content-Type
  http fields
- Added X-Request-URI for persistent connection debugging",794,data/crawl/squid/hunk_6406.cpp,,,data/crawl/squid/old_hunk_6406.cpp,data/crawl/squid/new_hunk_6406.cpp,-1,35,,"httpHeaderPutStrf(hdr, HDR_X_CACHE, ""%s from %s"",
	is_hit ? ""HIT"" : ""MISS"", getMyHostname());","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr"", ""HDR_X_CACHE"", ""%s"", ""from"", ""%s"", ""is_hit"", ""HIT"", ""MISS"", ""getMyHostname""]]",[-1145198758666488786],6534,"785 days, 12:00:00"
https://github.com/squid-cache/squid/commit/29b8d8d6366760bd4b285d6f6d56042439e55e50,15 Sep 2002,fix headers to allow inclusion into C++ source,1555,data/crawl/squid/hunk_5577.cpp,,,data/crawl/squid/old_hunk_5577.cpp,data/crawl/squid/new_hunk_5577.cpp,4,4,"storeAppendPrintf(entry, "" %s%s"",
		    l->op ? null_string : ""!"",
		    l->acl->name);","storeAppendPrintf(entry, "" %s%s"",
		    l->op ? null_string : ""!"",
		    l->_acl->name);","[""updateVariable""]","[[""acl""], [""_acl""]]",[5848854120940305982],6533,0:00:00
https://github.com/squid-cache/squid/commit/12e137b0e48abcee9185f2ed456afecd41c2c79b,03 Oct 2002,split async io counters into started and finished to give better visibility on outstanding requests,121,data/crawl/squid/hunk_5559.cpp,,,data/crawl/squid/old_hunk_5559.cpp,data/crawl/squid/new_hunk_5559.cpp,12,12,"storeAppendPrintf(sentry, ""queue\t%d\n"", squidaio_get_queue_len());","storeAppendPrintf(sentry, ""queue\t%d\t-\n"", squidaio_get_queue_len());","[""updateContent""]","[[""queue\\t%d\\n""], [""queue\\t%d\\t"", ""\\n""]]",[11776070748106334],6532,0:00:00
https://github.com/squid-cache/squid/commit/8b9a2d90ea7dd109aa00cdad99033384c64db312,28 Nov 1997,Add counter for cachemgr output,8,data/crawl/squid/hunk_6909.cpp,,,data/crawl/squid/old_hunk_6909.cpp,data/crawl/squid/new_hunk_6909.cpp,-1,3,,"storeAppendPrintf(sentry, ""%d cbdata entries\n"", cbdataCount);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%d"", ""cbdata"", ""entries\\n"", ""cbdataCount""]]",[8772467633393369014],6531,"896 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e48ed43391a35b15066e876ca69755a5582dc26b,25 Oct 2002,cbdata history for cbdata debug mode,162,data/crawl/squid/hunk_5501.cpp,,,data/crawl/squid/old_hunk_5501.cpp,data/crawl/squid/new_hunk_5501.cpp,-1,31,,"storeAppendPrintf(where, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""where"", ""\\n""]]",[3995915360435094291],6530,0:00:00
https://github.com/squid-cache/squid/commit/6b53c3926e3c3712886d780bc903488591f73fe7,03 May 2000,"hno squid-2.3.DEVEL3.squid.conf_template_update-4.patch
Squid-2.3.DEVEL3: Major update of squid.conf template generation

A major update on how squid.conf is generated from cf.data.pre and
some related changes.

* Default lines are generated from the compiled default settings (less
  duplication in cf.data.pre)
* Non-enabled functions gets a note telling that the directive isn't enabled
  and what configure option (or defined) that is required to enable it.

Some cleanup of how some defines are used..",588,data/crawl/squid/hunk_6058.cpp,,,data/crawl/squid/old_hunk_6058.cpp,data/crawl/squid/new_hunk_6058.cpp,-1,13,,"fprintf(fp, ""\t}\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\t"", ""\\n""]]",[-5167530254375540690],6529,"471 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5486.cpp,,,data/crawl/squid/old_hunk_5486.cpp,data/crawl/squid/new_hunk_5486.cpp,-1,116,,"fatalf(""Failed to set SSL cipher suite '%s': %s\n"",
		cipher, ERR_error_string(ssl_error, NULL));","[""addLog""]","[[], [""fatalf"", ""Failed"", ""to"", ""set"", ""SSL"", ""cipher"", ""suite"", ""%s"", ""%s\\n"", ""cipher"", ""ERR_error_string"", ""ssl_error"", ""NULL""]]",[-9112559239306279508],6528,0:00:00
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5484.cpp,,,data/crawl/squid/old_hunk_5484.cpp,data/crawl/squid/new_hunk_5484.cpp,-1,21,,"fatal(""unknown external_acl format error"");","[""addLog""]","[[], [""fatal"", ""unknown"", ""external_acl"", ""format"", ""error""]]",[7503529408969980762],6527,0:00:00
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5483.cpp,,,data/crawl/squid/old_hunk_5483.cpp,data/crawl/squid/new_hunk_5483.cpp,-1,7,,"storeAppendPrintf(sentry, "" %%USER_CERT_%s"", format->header);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%%USER_CERT_%s"", ""format"", ""header""]]",[12013805193580684723],6526,0:00:00
https://github.com/squid-cache/squid/commit/4d6d905e8b4d4271702d50d56863fe37f8f52e42,12 Oct 2002,extract duplicate ufs code to ufscommon.c/h,6553,data/crawl/squid/hunk_5548.cpp,,,data/crawl/squid/old_hunk_5548.cpp,data/crawl/squid/new_hunk_5548.cpp,-1,888,,"fatal(""commonUfsDirCloseTmpSwapLog: Failed to open swap log."");","[""addLog""]","[[], [""fatal"", ""commonUfsDirCloseTmpSwapLog"", ""Failed"", ""to"", ""open"", ""swap"", ""log""]]",[-13294787753322104408],6525,"38 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4d6d905e8b4d4271702d50d56863fe37f8f52e42,12 Oct 2002,extract duplicate ufs code to ufscommon.c/h,6553,data/crawl/squid/hunk_5548.cpp,,,data/crawl/squid/old_hunk_5548.cpp,data/crawl/squid/new_hunk_5548.cpp,-1,883,,"fatal(""commonUfsDirCloseTmpSwapLog: rename failed"");","[""addLog""]","[[], [""fatal"", ""commonUfsDirCloseTmpSwapLog"", ""rename"", ""failed""]]",[-23077252140658217855],6524,"38 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6044.cpp,,,data/crawl/squid/old_hunk_6044.cpp,data/crawl/squid/new_hunk_6044.cpp,-1,1807,,"fatal(""storeAufsDirParse: invalid level 1 directories value"");","[""addLog""]","[[], [""fatal"", ""storeAufsDirParse"", ""invalid"", ""level"", ""1"", ""directories"", ""value""]]",[-20381767880830507793],6523,"484 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6044.cpp,,,data/crawl/squid/old_hunk_6044.cpp,data/crawl/squid/new_hunk_6044.cpp,-1,1803,,"fatal(""storeAufsDirParse: invalid size value"");","[""addLog""]","[[], [""fatal"", ""storeAufsDirParse"", ""invalid"", ""size"", ""value""]]",[-31223036232158628979],6522,"484 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5472.cpp,,,data/crawl/squid/old_hunk_5472.cpp,data/crawl/squid/new_hunk_5472.cpp,-1,28,,"fatal (""Attempt to get a StoreIO from the NULL store!\n"");","[""addLog""]","[[], [""fatal"", ""Attempt"", ""to"", ""get"", ""a"", ""StoreIO"", ""from"", ""the"", ""NULL"", ""store"", ""\\n""]]",[-5257834271153246970],6521,0:00:00
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6047.cpp,,,data/crawl/squid/old_hunk_6047.cpp,data/crawl/squid/new_hunk_6047.cpp,-1,399,,"fatal(""shmat failed"");","[""addLog""]","[[], [""fatal"", ""shmat"", ""failed""]]",[-7429966131967231156],6520,"484 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6047.cpp,,,data/crawl/squid/old_hunk_6047.cpp,data/crawl/squid/new_hunk_6047.cpp,-1,394,,"fatal(""shmget failed"");","[""addLog""]","[[], [""fatal"", ""shmget"", ""failed""]]",[-6810427592387860720],6519,"484 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5469.cpp,,,data/crawl/squid/old_hunk_5469.cpp,data/crawl/squid/new_hunk_5469.cpp,41,42,"storeAppendPrintf(e, "" Q2=%d"", diskdinfo->magic2);","storeAppendPrintf(e, "" Q2=%d"", IO->magic2);","[""updateVariable""]","[[""diskdinfo""], [""IO""]]",[4776487161100257370],6518,0:00:00
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5464.cpp,,,data/crawl/squid/old_hunk_5464.cpp,data/crawl/squid/new_hunk_5464.cpp,49,43,"storeAppendPrintf(sentry, ""Pending operations: %d out of %d\n"", cs->aq.aq_numpending, MAX_ASYNCOP);","storeAppendPrintf(&sentry, ""Pending operations: %d out of %d\n"", aq.aq_numpending, MAX_ASYNCOP);","[""removeVariable"", ""addVariable""]","[[""sentry"", ""cs""], [""&sentry""]]",[3257005708990499141],6517,0:00:00
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5464.cpp,,,data/crawl/squid/old_hunk_5464.cpp,data/crawl/squid/new_hunk_5464.cpp,39,33,"storeAppendPrintf(sentry, ""Current Size: %d KB\n"", SD->cur_size);","storeAppendPrintf(&sentry, ""Current Size: %d KB\n"", cur_size);","[""removeVariable"", ""addVariable""]","[[""sentry"", ""SD""], [""&sentry""]]",[3254957696686480478],6516,0:00:00
https://github.com/squid-cache/squid/commit/b67e2c8c4da9890e0f3d27d501edf6a0c0fdf1c9,05 Feb 2003,"Summary: Merge from delay-class-4
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-19
     Document finished aspects of delay pools.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-18
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-17
     Fixs to handle HEAD changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-16
     Merge from head.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-15
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-14
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-13
     Separate out code for DelayBucket and DelayId.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-12
     More class split outs.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-11
     More class splitting

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-10
     Splitting classes out to one per file.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-9
     Starting consolidation of delay pools hierarchy.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-8
     Snapshot

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-7
     Finally got composite structure sorted - class one and two delay pools in it.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-6
     snapshotting more refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-5
     More refactoring - no functionality changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-4
     Another refactoring snapshot.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-3
     Snapshot of delay pools refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-2
     Refactor delay pools code to not cause globals recompiles on most changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.",12710,data/crawl/squid/hunk_5432.cpp,,,data/crawl/squid/old_hunk_5432.cpp,data/crawl/squid/new_hunk_5432.cpp,765,-1,"storeAppendPrintf(sentry, ""Not used yet."");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Not"", ""used"", ""yet""], []]",[-10673142881662984130],6515,0:00:00
https://github.com/squid-cache/squid/commit/b67e2c8c4da9890e0f3d27d501edf6a0c0fdf1c9,05 Feb 2003,"Summary: Merge from delay-class-4
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-19
     Document finished aspects of delay pools.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-18
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-17
     Fixs to handle HEAD changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-16
     Merge from head.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-15
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-14
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-13
     Separate out code for DelayBucket and DelayId.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-12
     More class split outs.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-11
     More class splitting

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-10
     Splitting classes out to one per file.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-9
     Starting consolidation of delay pools hierarchy.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-8
     Snapshot

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-7
     Finally got composite structure sorted - class one and two delay pools in it.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-6
     snapshotting more refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-5
     More refactoring - no functionality changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-4
     Another refactoring snapshot.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-3
     Snapshot of delay pools refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-2
     Refactor delay pools code to not cause globals recompiles on most changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.",12710,data/crawl/squid/hunk_5432.cpp,,,data/crawl/squid/old_hunk_5432.cpp,data/crawl/squid/new_hunk_5432.cpp,775,-1,"storeAppendPrintf(sentry, ""\t\tRate: %d\n"", rate->individual.restore_bps);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\t\\tRate"", ""%d\\n"", ""rate"", ""individual"", ""restore_bps""], []]",[-5241027730013828207],6514,0:00:00
https://github.com/squid-cache/squid/commit/b67e2c8c4da9890e0f3d27d501edf6a0c0fdf1c9,05 Feb 2003,"Summary: Merge from delay-class-4
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-19
     Document finished aspects of delay pools.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-18
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-17
     Fixs to handle HEAD changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-16
     Merge from head.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-15
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-14
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-13
     Separate out code for DelayBucket and DelayId.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-12
     More class split outs.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-11
     More class splitting

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-10
     Splitting classes out to one per file.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-9
     Starting consolidation of delay pools hierarchy.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-8
     Snapshot

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-7
     Finally got composite structure sorted - class one and two delay pools in it.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-6
     snapshotting more refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-5
     More refactoring - no functionality changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-4
     Another refactoring snapshot.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-3
     Snapshot of delay pools refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-2
     Refactor delay pools code to not cause globals recompiles on most changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.",12710,data/crawl/squid/hunk_5432.cpp,,,data/crawl/squid/old_hunk_5432.cpp,data/crawl/squid/new_hunk_5432.cpp,774,-1,"storeAppendPrintf(sentry, ""\t\tMax: %d\n"", rate->individual.max_bytes);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\t\\tMax"", ""%d\\n"", ""rate"", ""individual"", ""max_bytes""], []]",[-17330750759199346676],6513,0:00:00
https://github.com/squid-cache/squid/commit/b67e2c8c4da9890e0f3d27d501edf6a0c0fdf1c9,05 Feb 2003,"Summary: Merge from delay-class-4
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-19
     Document finished aspects of delay pools.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-18
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-17
     Fixs to handle HEAD changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-16
     Merge from head.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-15
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-14
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-13
     Separate out code for DelayBucket and DelayId.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-12
     More class split outs.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-11
     More class splitting

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-10
     Splitting classes out to one per file.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-9
     Starting consolidation of delay pools hierarchy.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-8
     Snapshot

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-7
     Finally got composite structure sorted - class one and two delay pools in it.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-6
     snapshotting more refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-5
     More refactoring - no functionality changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-4
     Another refactoring snapshot.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-3
     Snapshot of delay pools refactoring.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-2
     Refactor delay pools code to not cause globals recompiles on most changes.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-20
     Fix make dist.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-21
     Implement class 4 delay pools

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-22
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--delay-class-4--3.0--patch-23
     Merge from HEAD, and shutdown delaypools at shutdown.",12710,data/crawl/squid/hunk_5432.cpp,,,data/crawl/squid/old_hunk_5432.cpp,data/crawl/squid/new_hunk_5432.cpp,615,-1,"fatalf(""delayBytesWanted: Invalid class %d\n"", delay_class);",,"[""removeLog""]","[[""fatalf"", ""delayBytesWanted"", ""Invalid"", ""class"", ""%d\\n"", ""delay_class""], []]",[-11657005473029996960],6512,0:00:00
https://github.com/squid-cache/squid/commit/59715b38e9e43d20a1092ee0d67c316365726e95,30 Jan 1999,luyer's mega delay pools rewrite -- without ugly delayPoolsReconfigure(),1419,data/crawl/squid/hunk_6161.cpp,,,data/crawl/squid/old_hunk_6161.cpp,data/crawl/squid/new_hunk_6161.cpp,-1,43,,"storeAppendPrintf(entry, ""%s 0\n"", name);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""0\\n"", ""name""]]",[1040633713334197220],6511,"733 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8000a96583c4cafed5d348fafaaed771f117287a,12 Feb 2003,"Summary: Merge of ACL refactoring.

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-9
     Refactoring (again!)

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-8
     More refactoring.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-7
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-6
     More refactoring.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-5
     More refactoring of ACL's.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-4
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-3
     Still more refactoring steps.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-2
     More refactoring.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-1
     Bootstrap, and start refactoring.",12159,data/crawl/squid/hunk_5419.cpp,,,data/crawl/squid/old_hunk_5419.cpp,data/crawl/squid/new_hunk_5419.cpp,-1,29,,"fatal (""unused"");","[""addLog""]","[[], [""fatal"", ""unused""]]",[-10808439327566762997],6510,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5910.cpp,,,data/crawl/squid/old_hunk_5910.cpp,data/crawl/squid/new_hunk_5910.cpp,-1,6,,"fatal(""AclLookupProxyAuthDone: Old code floating around somewhere.\nMake clean and if that doesn't work, report a bug to the squid developers.\n"");","[""addLog""]","[[], [""fatal"", ""AclLookupProxyAuthDone"", ""Old"", ""code"", ""floating"", ""around"", ""somewhere"", ""\\nMake"", ""clean"", ""and"", ""if"", ""that"", ""doesn"", ""t"", ""work"", ""report"", ""a"", ""bug"", ""to"", ""the"", ""squid"", ""developers"", ""\\n""]]",[31539841372898536781],6509,"383 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6782.cpp,,,data/crawl/squid/old_hunk_6782.cpp,data/crawl/squid/new_hunk_6782.cpp,35,-1,"storeAppendPrintf(sentry, ""FETCHES    : %8d %3d%%\n"",
	    e->stats.fetches,
	    percent(e->stats.fetches, e->stats.pings_acked));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""FETCHES"", ""%8d"", ""%3d%%\\n"", ""e"", ""stats"", ""fetches"", ""percent"", ""e"", ""stats"", ""fetches"", ""e"", ""stats"", ""pings_acked""], []]",[4306623850088843647],6508,"910 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4807186940395788653d89a174fa3e8f9cdc1c3c,25 Feb 2003,"Summary: Merge final stage1 ACL refactoring.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-23
     ACL tidyups within new framework.",1862,data/crawl/squid/hunk_5344.cpp,,,data/crawl/squid/old_hunk_5344.cpp,data/crawl/squid/new_hunk_5344.cpp,-1,118,,"fatal(""aclParseUserMaxIP: Malformed ACL\n"");","[""addLog""]","[[], [""fatal"", ""aclParseUserMaxIP"", ""Malformed"", ""ACL\\n""]]",[1444639019846540504],6507,0:00:00
https://github.com/squid-cache/squid/commit/82b045dccfccc9cd8222529d7d603fbcaeaf1c53,26 Feb 2003,"Summary: Merge in digest fixes for #543
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-2
     Fixup digest password helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-1
     Digest auth fixes for #543 - Sean Burfords helper fix, refactor digest auth.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-99",829,data/crawl/squid/hunk_5334.cpp,,,data/crawl/squid/old_hunk_5334.cpp,data/crawl/squid/new_hunk_5334.cpp,-1,12,,"fatal (""unusable\n"");","[""addLog""]","[[], [""fatal"", ""unusable\\n""]]",[-7868195606522130728],6506,0:00:00
https://github.com/squid-cache/squid/commit/7ba688188e2e958eafba86a7bf5b41db55ea2007,01 Mar 2003,"Added LDAP URI support, contributed by Juerg Michel",36,data/crawl/squid/hunk_5326.cpp,,,data/crawl/squid/old_hunk_5326.cpp,data/crawl/squid/new_hunk_5326.cpp,-1,4,,"fprintf(stderr, ""\t-H URI\t\t\tLDAPURI (defaults to ldap://localhost)\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""H"", ""URI\\t\\t\\tLDAPURI"", ""defaults"", ""to"", ""ldap"", ""//localhost"", ""\\n""]]",[-2200521962967077286],6505,0:00:00
https://github.com/squid-cache/squid/commit/7ba688188e2e958eafba86a7bf5b41db55ea2007,01 Mar 2003,"Added LDAP URI support, contributed by Juerg Michel",36,data/crawl/squid/hunk_5326.cpp,,,data/crawl/squid/old_hunk_5326.cpp,data/crawl/squid/new_hunk_5326.cpp,8,12,"fprintf(stderr, ""\t-v 1|2\t\t\tLDAP version\n"");","fprintf(stderr, ""\t-v 2|3\t\t\tLDAP version\n"");","[""updateContent""]","[[""1"", ""2\\t\\t\\tLDAP""], [""2"", ""3\\t\\t\\tLDAP""]]",[13900948296449975672],6504,0:00:00
https://github.com/squid-cache/squid/commit/954a851376707ccc1938b682bf1bae206779a2ee,01 Mar 2003,-W secretfile by Christoph Lechleitner <lech@ibcl.net>,108,data/crawl/squid/hunk_5317.cpp,,,data/crawl/squid/old_hunk_5317.cpp,data/crawl/squid/new_hunk_5317.cpp,3,3,"fprintf(stderr, ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd options\n\n"");","fprintf(stderr, ""\tIf you need to bind as a user to perform searches then use the\n\t-D binddn -w bindpasswd or -D binddn -W secretfile options\n\n"");","[""updateContent""]","[[], [""or"", ""D"", ""binddn"", ""W"", ""secretfile""]]",[656574629914495197],6503,0:00:00
https://github.com/squid-cache/squid/commit/954a851376707ccc1938b682bf1bae206779a2ee,01 Mar 2003,-W secretfile by Christoph Lechleitner <lech@ibcl.net>,108,data/crawl/squid/hunk_5316.cpp,,,data/crawl/squid/old_hunk_5316.cpp,data/crawl/squid/new_hunk_5316.cpp,-1,3,,"fprintf(stderr, ""\t-W secretfile\t\tread password for binddn from file secretfile\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""W"", ""secretfile\\t\\tread"", ""password"", ""for"", ""binddn"", ""from"", ""file"", ""secretfile\\n""]]",[-16135613133508774014],6502,0:00:00
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5309.cpp,,,data/crawl/squid/old_hunk_5309.cpp,data/crawl/squid/new_hunk_5309.cpp,-1,7,,"fprintf(stderr, ""\t-t timelimit\t\tsearch time limit\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""t"", ""timelimit\\t\\tsearch"", ""time"", ""limit\\n""]]",[-18586248740913457925],6501,0:00:00
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5309.cpp,,,data/crawl/squid/old_hunk_5309.cpp,data/crawl/squid/new_hunk_5309.cpp,-1,6,,"fprintf(stderr, ""\t-c timeout\t\tconnect timeout\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""c"", ""timeout\\t\\tconnect"", ""timeout\\n""]]",[-6024974905476982393],6500,0:00:00
https://github.com/squid-cache/squid/commit/653b264eeed1a764bf6bcde2b7704f888cbf9cd7,02 Mar 2003,"David J N Begley <d.begley@uws.edu.au>

 - Netscape API support for LDAP over SSL (-E option)

 - Timeout options (-t and -c)",253,data/crawl/squid/hunk_5309.cpp,,,data/crawl/squid/old_hunk_5309.cpp,data/crawl/squid/new_hunk_5309.cpp,-1,4,,"fprintf(stderr, ""\t-E sslcertpath\t\tenable LDAP over SSL\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""E"", ""sslcertpath\\t\\tenable"", ""LDAP"", ""over"", ""SSL\\n""]]",[-10594442034749042805],6499,0:00:00
https://github.com/squid-cache/squid/commit/1b3db6d92da76719fef67d8dec547908f971c5b6,24 Dec 2001,"Break out the comm code into a more ""modular"" format - poll code
in comm_poll.c, select code in comm_select.c . Rename some of the relevant
#defines (HAVE_POLL/USE_POLL) whilst I'm at it to make things consistent.",2017,data/crawl/squid/hunk_5704.cpp,,,data/crawl/squid/old_hunk_5704.cpp,data/crawl/squid/new_hunk_5704.cpp,170,-1,"fatalf(""bad return value from commDeferRead(FD %d)\n"", i);",,"[""removeLog""]","[[""fatalf"", ""bad"", ""return"", ""value"", ""from"", ""commDeferRead"", ""FD"", ""%d"", ""\\n"", ""i""], []]",[3488724790638796820],6498,"217 days, 12:00:00"
https://github.com/squid-cache/squid/commit/43ae1d95a7add005149cc7a82fae6609d40f3b44,10 Mar 2003,"Summary: Merge ESI to HEAD.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-9
     merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-8
     Merge with HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-7
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-6
     ESI custom parser implementation

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-5
     Fix problems from last merge and tweak parser.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-4
     Bootstrap, plus update to deal with HEAD changes

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-3
     Merge from HEAD

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-30
     Fixup merged for gcc2

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-2
     Merge from HEAD (typename fix)

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-20
     Refactor ESI code to clarify reentrancy bugs.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-21
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-22
     Fix broken merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-23
     Merged from head to avert conflicts.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-26
     Bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-27
     Fixup from merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-28
     ESI Tweaks

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-29
     Merge recent HEAD changes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-1
     Import CVS esi tag

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-10
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-11
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-12
     Updated after head merge + bugfixes.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-13
     Prevent bogus compile warnings on TrieNode.cci

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-14
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-15
     Fix breakage after head merge.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-16
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-17
     bootstrapped.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-18
     Merge parser fix from HEAD.

  * robertc@squid-cache.org--squid/squid--esi--3.0--patch-19
     Fixup ESI (again!)

  * robertc@squid-cache.org--squid/squid--esi--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-18",27101,data/crawl/squid/hunk_5275.cpp,,,data/crawl/squid/old_hunk_5275.cpp,data/crawl/squid/new_hunk_5275.cpp,-1,357,,"storeAppendPrintf(sentry, ""%2d\t %-20s\t %5d\t %6.2f\n"",
                          id, name, count, xdiv(count, dump_stat->scParsedCount));","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%2d\\t"", ""%"", ""20s\\t"", ""%5d\\t"", ""%6"", ""2f\\n"", ""id"", ""name"", ""count"", ""xdiv"", ""count"", ""dump_stat"", ""scParsedCount""]]",[14423007792914159424],6497,0:00:00
https://github.com/squid-cache/squid/commit/82b045dccfccc9cd8222529d7d603fbcaeaf1c53,26 Feb 2003,"Summary: Merge in digest fixes for #543
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-2
     Fixup digest password helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-1
     Digest auth fixes for #543 - Sean Burfords helper fix, refactor digest auth.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-99",829,data/crawl/squid/hunk_5329.cpp,,,data/crawl/squid/old_hunk_5329.cpp,data/crawl/squid/new_hunk_5329.cpp,-1,23,,"fprintf(stderr, ""cannot stat %s\n"", passwdfile);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""cannot"", ""stat"", ""%s\\n"", ""passwdfile""]]",[-17969571524081036001],6496,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/82b045dccfccc9cd8222529d7d603fbcaeaf1c53,26 Feb 2003,"Summary: Merge in digest fixes for #543
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-2
     Fixup digest password helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-1
     Digest auth fixes for #543 - Sean Burfords helper fix, refactor digest auth.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-99",829,data/crawl/squid/hunk_5329.cpp,,,data/crawl/squid/old_hunk_5329.cpp,data/crawl/squid/new_hunk_5329.cpp,-1,19,,"fprintf(stderr, ""  -c   accept HHA1 passwords rather than plaintext in passwordfile\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""c"", ""accept"", ""HHA1"", ""passwords"", ""rather"", ""than"", ""plaintext"", ""in"", ""passwordfile\\n""]]",[-16898237242499810096],6495,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/82b045dccfccc9cd8222529d7d603fbcaeaf1c53,26 Feb 2003,"Summary: Merge in digest fixes for #543
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-2
     Fixup digest password helper.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--patch-1
     Digest auth fixes for #543 - Sean Burfords helper fix, refactor digest auth.

  * robertc@squid-cache.org--squid/squid--digest-auth--3.0--base-0
     tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-99",829,data/crawl/squid/hunk_5328.cpp,,,data/crawl/squid/old_hunk_5328.cpp,data/crawl/squid/new_hunk_5328.cpp,-1,13,,"fprintf(stderr, ""digest_pw_auth: ignoring %s password for %s\n"",
			""plaintext"", user);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""digest_pw_auth"", ""ignoring"", ""%s"", ""password"", ""for"", ""%s\\n"", ""plaintext"", ""user""]]",[-23962674246672305710],6494,"17 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2d70df7262cac3e29d34bed03b758695f5961b74,01 Feb 2001,"Major update from auth_rewrite

Robert Collins:

Digest (RFC2617) proxy authentication implementation

Chemolli Francesco:

Several bugs in NTLM authentication when dealing with untrusted
domains, wrong passwords, helper arguments and more have been fixed",2527,data/crawl/squid/hunk_5873.cpp,,,data/crawl/squid/old_hunk_5873.cpp,data/crawl/squid/new_hunk_5873.cpp,-1,88,,"fprintf(stderr, ""digest_pw_auth: cannot create hash table\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""digest_pw_auth"", ""cannot"", ""create"", ""hash"", ""table\\n""]]",[-16689609371367577049],6493,"394 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7690e8eb7e104d50d4b4b5214369673202d1941c,12 Sep 1996,"cleanup based on HP-UX CC
-k signal option",153,data/crawl/squid/hunk_7593.cpp,,,data/crawl/squid/old_hunk_7593.cpp,data/crawl/squid/new_hunk_7593.cpp,-1,16,,"fprintf(stderr, ""%s: ERROR: Could not send "", appname);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Could"", ""not"", ""send"", ""appname""]]",[3562800791171750006],6492,"1208 days, 12:00:00"
https://github.com/squid-cache/squid/commit/88a03fda9908a38f21bcdb88c461206c9ec8bb67,06 Feb 2003,add missing files,304,data/crawl/squid/hunk_5425.cpp,,,data/crawl/squid/old_hunk_5425.cpp,data/crawl/squid/new_hunk_5425.cpp,-1,84,,"storeAppendPrintf (sentry, ""Not used yet.\n\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Not"", ""used"", ""yet"", ""\\n\\n""]]",[5511519340983568830],6491,"51 days, 12:00:00"
https://github.com/squid-cache/squid/commit/be753325ab460e945d00846dc6f34869b36c4f13,15 Feb 2003,"First batch of rproxy merges

New cache_peer options for reverse proxy setups

   originserver
   name=XXX
   forceddomain=XXX

Cleanup of authentication forwarding, and added gatewaying proxy->reverseproxy
when the same Squid is acting as both proxy and reverseproxy with authentication",321,data/crawl/squid/hunk_5397.cpp,,,data/crawl/squid/old_hunk_5397.cpp,data/crawl/squid/new_hunk_5397.cpp,-1,31,,"httpHeaderPutStrf(hdr_out, HDR_AUTHORIZATION, ""Basic %s"",
		base64_encode(loginbuf));","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr_out"", ""HDR_AUTHORIZATION"", ""Basic"", ""%s"", ""base64_encode"", ""loginbuf""]]",[4153229444962023281],6490,"66 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5234.cpp,,,data/crawl/squid/old_hunk_5234.cpp,data/crawl/squid/new_hunk_5234.cpp,-1,118,,"storeAppendPrintf(entry, ""%s squid"", log->filename);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""squid"", ""log"", ""filename""]]",[2095200602186377685],6489,0:00:00
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5461.cpp,,,data/crawl/squid/old_hunk_5461.cpp,data/crawl/squid/new_hunk_5461.cpp,69,-1,"fatal(""storeAufsDirParse: invalid level 2 directories value"");",,"[""removeLog""]","[[""fatal"", ""storeAufsDirParse"", ""invalid"", ""level"", ""2"", ""directories"", ""value""], []]",[20381767880702507406],6488,"103 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5461.cpp,,,data/crawl/squid/old_hunk_5461.cpp,data/crawl/squid/new_hunk_5461.cpp,61,-1,"fatal(""storeAufsDirParse: invalid size value"");",,"[""removeLog""]","[[""fatal"", ""storeAufsDirParse"", ""invalid"", ""size"", ""value""], []]",[31223036232158628979],6487,"103 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5470.cpp,,,data/crawl/squid/old_hunk_5470.cpp,data/crawl/squid/new_hunk_5470.cpp,22,-1,"fatal(""storeDiskdDirReconfigure: invalid level 2 directories value"");",,"[""removeLog""]","[[""fatal"", ""storeDiskdDirReconfigure"", ""invalid"", ""level"", ""2"", ""directories"", ""value""], []]",[15808245304560283223],6486,"103 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5470.cpp,,,data/crawl/squid/old_hunk_5470.cpp,data/crawl/squid/new_hunk_5470.cpp,18,-1,"fatal(""storeDiskdDirReconfigure: invalid level 1 directories value"");",,"[""removeLog""]","[[""fatal"", ""storeDiskdDirReconfigure"", ""invalid"", ""level"", ""1"", ""directories"", ""value""], []]",[15808245304688283610],6485,"103 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,14,,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
	""write"", diskd_stats.write.ops, diskd_stats.write.success, diskd_stats.write.fail);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s"", ""%7d"", ""%7d"", ""%7d\\n"", ""write"", ""diskd_stats"", ""write"", ""ops"", ""diskd_stats"", ""write"", ""success"", ""diskd_stats"", ""write"", ""fail""]]",[22516082997460694746],6484,"550 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,12,,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
	""read"", diskd_stats.read.ops, diskd_stats.read.success, diskd_stats.read.fail);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s"", ""%7d"", ""%7d"", ""%7d\\n"", ""read"", ""diskd_stats"", ""read"", ""ops"", ""diskd_stats"", ""read"", ""success"", ""diskd_stats"", ""read"", ""fail""]]",[-36675435542570104518],6483,"550 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,10,,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
	""unlink"", diskd_stats.unlink.ops, diskd_stats.unlink.success, diskd_stats.unlink.fail);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s"", ""%7d"", ""%7d"", ""%7d\\n"", ""unlink"", ""diskd_stats"", ""unlink"", ""ops"", ""diskd_stats"", ""unlink"", ""success"", ""diskd_stats"", ""unlink"", ""fail""]]",[-9926261277360285818],6482,"550 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,8,,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
	""close"", diskd_stats.close.ops, diskd_stats.close.success, diskd_stats.close.fail);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s"", ""%7d"", ""%7d"", ""%7d\\n"", ""close"", ""diskd_stats"", ""close"", ""ops"", ""diskd_stats"", ""close"", ""success"", ""diskd_stats"", ""close"", ""fail""]]",[15079877643947319934],6481,"550 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,6,,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
	""create"", diskd_stats.create.ops, diskd_stats.create.success, diskd_stats.create.fail);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s"", ""%7d"", ""%7d"", ""%7d\\n"", ""create"", ""diskd_stats"", ""create"", ""ops"", ""diskd_stats"", ""create"", ""success"", ""diskd_stats"", ""create"", ""fail""]]",[-39649784662971112254],6480,"550 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b09fabb6ff73de8aa1f7fb1c1d607d78dbbe1ae7,16 Jul 2000,"DW:
 - Add some more counters.  These track success and failure of
   disk operations.",52,data/crawl/squid/hunk_5986.cpp,,,data/crawl/squid/old_hunk_5986.cpp,data/crawl/squid/new_hunk_5986.cpp,-1,4,,"storeAppendPrintf(sentry, ""%7s %7d %7d %7d\n"",
	""open"", diskd_stats.open.ops, diskd_stats.open.success, diskd_stats.open.fail);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%7s"", ""%7d"", ""%7d"", ""%7d\\n"", ""open"", ""diskd_stats"", ""open"", ""ops"", ""diskd_stats"", ""open"", ""success"", ""diskd_stats"", ""open"", ""fail""]]",[-12742640810051175286],6479,"550 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,84,-1,"fatal(""msgget failed"");",,"[""removeLog""]","[[""fatal"", ""msgget"", ""failed""], []]",[9228573894909806285],6478,0:00:00
https://github.com/squid-cache/squid/commit/2246b73298f50a6d4ecdf84e5759a1da2fa9c98b,28 May 1998,"- removed ascii headers from reply and request structures
- added more http headers
- fixed content of entity-headers array
- do not update headers with 304 that are not allowed by HTTP/1.1
- moved routines common for request and replies to HttpMsg.c
- rewrote clientBuildReply* and other client_side functions
  using new header interface
- code cleanup
- do not cut off ""; parameter"" from ""digitized"" Content-Type
  http fields
- Added X-Request-URI for persistent connection debugging",794,data/crawl/squid/hunk_6409.cpp,,,data/crawl/squid/old_hunk_6409.cpp,data/crawl/squid/new_hunk_6409.cpp,-1,3,,"httpHeaderPutStrf(hdr_out, HDR_HOST, ""%s:%d"",
		orig_request->host, (int) orig_request->port);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr_out"", ""HDR_HOST"", ""%s"", ""%d"", ""orig_request"", ""host"", ""int"", ""orig_request"", ""port""]]",[14444787479066876461],6477,"941 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d3b3ab859857da0851f9c7de916b6df261ba43ae,27 Dec 2002,apply unify io patch to simplify IO code for diskd/aufs/ufs,7586,data/crawl/squid/hunk_5479.cpp,,,data/crawl/squid/old_hunk_5479.cpp,data/crawl/squid/new_hunk_5479.cpp,188,-1,"fatal(""commonUfsDirCloseTmpSwapLog: unlink failed"");",,"[""removeLog""]","[[""fatal"", ""commonUfsDirCloseTmpSwapLog"", ""unlink"", ""failed""], []]",[18278368217137848100],6476,"109 days, 12:00:00"
https://github.com/squid-cache/squid/commit/35516333b6bdd23d476a6f3d344b9a71dc47e0ff,04 Aug 2003,"Cut out unwanted regex interfaces from GNUregex.c
 - emacs related stuff
 - BSD 4.2 regex interface
 - old GNU regex interface
leaving only the POSIX interface which is what we use",446,data/crawl/squid/hunk_5195.cpp,,,data/crawl/squid/old_hunk_5195.cpp,data/crawl/squid/new_hunk_5195.cpp,25,-1,"printf(""/%d"", mcnt);",,"[""removeLog""]","[[""printf"", ""/%d"", ""mcnt""], []]",[-1332014071425927468],6475,0:00:00
https://github.com/squid-cache/squid/commit/55e44db9113a48dea68b11a3636dc3d6154e8835,14 Aug 2003,"Summary: Swallow request bodies even when denying access.
Keywords:

* Assert when destroying requests with body connections.
* Move ClientBody class definition to client_side.h
* Encapsulate comm_close calls from ClientSocketContext.
* When closing a client socket, if there is a body, swallow it.
* When swalling a request body, if the connection needs to close, do so.",103,data/crawl/squid/hunk_5193.cpp,,,data/crawl/squid/old_hunk_5193.cpp,data/crawl/squid/new_hunk_5193.cpp,-1,3,,initiateClose();,"[""addLog""]","[[], [""initiateClose""]]",[2310980032292553174],6474,0:00:00
https://github.com/squid-cache/squid/commit/1a2248431aee8579727981a35527c2663852fc5d,28 Aug 2003,"ported COSS enhancements from squid-2.5 code (dated ~ July 25-29, 2003).",564,data/crawl/squid/hunk_5183.cpp,,,data/crawl/squid/old_hunk_5183.cpp,data/crawl/squid/new_hunk_5183.cpp,12,7,"fatal(""Aiee! out of aiocb slots!\n"");","debug(79, 1) (""WARNING: out of aiocb slots!\n"");","[""updateLog"", ""moveLog"", ""updateContent"", ""addContent""]","[[""fatal"", ""Aiee""], [""debug"", ""79"", ""1"", ""WARNING""]]",[11113744927373523470],6473,0:00:00
https://github.com/squid-cache/squid/commit/e4a67a801853cb8b1837e224dec8cd135442b7e9,06 Sep 2003,"Summary: Allow -DPURIFY to build.
Keywords:

Allow -DPURIFY to build.",70,data/crawl/squid/hunk_5179.cpp,,,data/crawl/squid/old_hunk_5179.cpp,data/crawl/squid/new_hunk_5179.cpp,-1,5,,"fatal (""over 100 errors sending to the daemon - aborting\n"");","[""addLog""]","[[], [""fatal"", ""over"", ""100"", ""errors"", ""sending"", ""to"", ""the"", ""daemon"", ""aborting\\n""]]",[-20476113453257831374],6472,0:00:00
https://github.com/squid-cache/squid/commit/a4d7e961fbbb97a65961535f2eccd715150ee25b,13 Sep 2003,"From 2.5: Make SQUID_MAXFD always an multiple of 64 to guarantee there is no rounding
errors in bitfield arithmetics of the fd_set macros. For example GLIBC has
bugs causing a fd_set overflow if the size is not an even multiple of a
machie word (64 bits on 64 bit platforms)",12,data/crawl/squid/hunk_5177.cpp,,,data/crawl/squid/old_hunk_5177.cpp,data/crawl/squid/new_hunk_5177.cpp,3,3,"fprintf (fp, ""%d\n"", i);","fprintf (fp, ""%d\n"", i & ~0x3F);","[""addContent"", ""addVariable""]","[[], [""&"", ""0x3F""]]",[-3495018541108921558],6471,12:00:00
https://github.com/squid-cache/squid/commit/1958420ab5c704cef4debfc8300b7a756cedc002,15 Aug 2004,"external_acl helpers updated to use the new protocol format based
on URL-escaped strings rather than quoted words..",333,data/crawl/squid/hunk_5146.cpp,,,data/crawl/squid/old_hunk_5146.cpp,data/crawl/squid/new_hunk_5146.cpp,-1,30,,"fprintf(stderr, ""%s: Invalid request\n"", argv[0]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""Invalid"", ""request\\n"", ""argv[0]""]]",[-14205886888525048147],6470,0:00:00
https://github.com/squid-cache/squid/commit/1958420ab5c704cef4debfc8300b7a756cedc002,15 Aug 2004,"external_acl helpers updated to use the new protocol format based
on URL-escaped strings rather than quoted words..",333,data/crawl/squid/hunk_5145.cpp,,,data/crawl/squid/old_hunk_5145.cpp,data/crawl/squid/new_hunk_5145.cpp,-1,7,,"fprintf(stderr, ""%s: ERROR: Too large..: %s\n"", argv[0], line);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Too"", ""large"", ""%s\\n"", ""argv[0]"", ""line""]]",[-2520549332920755081],6469,0:00:00
https://github.com/squid-cache/squid/commit/f5691f9c44e06c13e6970ff31f0fe540650f787e,30 Aug 2004,/tmp/cvsZKn66v,12787,data/crawl/squid/hunk_5132.cpp,,,data/crawl/squid/old_hunk_5132.cpp,data/crawl/squid/new_hunk_5132.cpp,27,-1,"fatal (""unusable\n"");",,"[""removeLog""]","[[""fatal"", ""unusable\\n""], []]",[7868195606522130728],6468,0:00:00
https://github.com/squid-cache/squid/commit/d8f10d6ad810fec71d79f63336da847228441bfb,22 Dec 2004,Bug #1118: Squid sends requests to redirectors with shutdown flag on,63,data/crawl/squid/hunk_5096.cpp,,,data/crawl/squid/old_hunk_5096.cpp,data/crawl/squid/new_hunk_5096.cpp,7,9,"fatalf(""Too few %s processes are running"", hlp->id_name);","fatalf(""Too few %s processes are running\n"", hlp->id_name);","[""updateContent""]","[[""running""], [""running\\n""]]",[7481285087206984508],6467,0:00:00
https://github.com/squid-cache/squid/commit/5ea33fce1749c26148150d7f0d0959334c6b91ba,22 Dec 2004,Bug #1168: Forward port of 2.5 patch for handle crashing helpers more gracefully,32,data/crawl/squid/hunk_5089.cpp,,,data/crawl/squid/old_hunk_5089.cpp,data/crawl/squid/new_hunk_5089.cpp,-1,7,,"fatalf(""The %s helpers are crashing too rapidly, need help!\n"", hlp->id_name);","[""addLog""]","[[], [""fatalf"", ""The"", ""%s"", ""helpers"", ""are"", ""crashing"", ""too"", ""rapidly"", ""need"", ""help"", ""\\n"", ""hlp"", ""id_name""]]",[-1144953548313843161],6466,0:00:00
https://github.com/squid-cache/squid/commit/5ea33fce1749c26148150d7f0d0959334c6b91ba,22 Dec 2004,Bug #1168: Forward port of 2.5 patch for handle crashing helpers more gracefully,32,data/crawl/squid/hunk_5089.cpp,,,data/crawl/squid/old_hunk_5089.cpp,data/crawl/squid/new_hunk_5089.cpp,4,4,"fatalf(""Too few %s processes are running\n"", hlp->id_name);","debug(80, 0) (""Too few %s processes are running\n"", hlp->id_name);","[""updateLog"", ""moveLog"", ""addContent""]","[[""fatalf""], [""debug"", ""80"", ""0""]]",[1089018975632339177],6465,0:00:00
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5057.cpp,,,data/crawl/squid/old_hunk_5057.cpp,data/crawl/squid/new_hunk_5057.cpp,-1,11,,auth_user_request->setDenyMessage(reply);,"[""addLog""]","[[], [""auth_user_request"", ""setDenyMessage"", ""reply""]]",[6720371840594190053],6464,0:00:00
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5049.cpp,,,data/crawl/squid/old_hunk_5049.cpp,data/crawl/squid/new_hunk_5049.cpp,9,9,"printf(""ERR\n"");","printf(""ERR Wrong password\n"");","[""updateContent""]","[[""ERR\\n""], [""ERR"", ""Wrong"", ""password\\n""]]",[-5591343104109682799],6463,0:00:00
https://github.com/squid-cache/squid/commit/4b0f5de8653310c14d9adbccdd27ae8de543d088,06 May 2005,"Bug #1166: Configuration confusing when empty acls are encountered
Bug #1255: http_access line with unknown acls

This patch makes Squid very strict about access configuration errors.
Previously Squid ignored most errors, now it rejects the configuraiton
with an description of the error seen.",258,data/crawl/squid/hunk_5040.cpp,,,data/crawl/squid/old_hunk_5040.cpp,data/crawl/squid/new_hunk_5040.cpp,3,-1,"fatal(""aclParseUserMaxIP: Malformed ACL\n"");",,"[""removeLog""]","[[""fatal"", ""aclParseUserMaxIP"", ""Malformed"", ""ACL\\n""], []]",[-1444639019846540504],6462,0:00:00
https://github.com/squid-cache/squid/commit/7b724b86a8a2f18bb51f87e968de315a0ecddeb6,14 Apr 1999,initial working implementation of internal DNS!,633,data/crawl/squid/hunk_6159.cpp,,,data/crawl/squid/old_hunk_6159.cpp,data/crawl/squid/new_hunk_6159.cpp,-1,263,,"fatal(""Could not create a DNS socket"");","[""addLog""]","[[], [""fatal"", ""Could"", ""not"", ""create"", ""a"", ""DNS"", ""socket""]]",[1692271683703932066],6461,"1111 days, 0:00:00"
https://github.com/squid-cache/squid/commit/97b131b6130450dd8a7f30cfa87f9d0ac18de508,02 Jul 2005,"Samba-2.X is declared unsupported by the Samba team. Remove the old
winbind helpers to reduce confusion. People wanting winbind integration
really should use Samba-3.X these days.",4319,data/crawl/squid/hunk_5018.cpp,,,data/crawl/squid/old_hunk_5018.cpp,data/crawl/squid/new_hunk_5018.cpp,312,-1,"fprintf(stderr, ""%s: ERROR: Too large..: %s\n"", argv[0], buf);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Too"", ""large"", ""%s\\n"", ""argv[0]"", ""buf""], []]",[8164570441682819975],6460,0:00:00
https://github.com/squid-cache/squid/commit/d20b1cd0386b841df75fe2b06e321f468d8655c6,16 May 2000,"DW:
 - Synced HEAD with SQUID_2_3 branch as of SQUID_2_3_STABLE3.  Can't
   say it was fun.  I wouldn't be surprised if some conflicts got
   resolved incorrectly.",2641,data/crawl/squid/hunk_6019.cpp,,,data/crawl/squid/old_hunk_6019.cpp,data/crawl/squid/new_hunk_6019.cpp,-1,42,,"fatal(""Could not determine fully qualified hostname.  Please set 'visible_hostname'\n"");","[""addLog""]","[[], [""fatal"", ""Could"", ""not"", ""determine"", ""fully"", ""qualified"", ""hostname"", ""Please"", ""set"", ""visible_hostname"", ""\\n""]]",[21476799052309954207],6459,"940 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4955.cpp,,,data/crawl/squid/old_hunk_4955.cpp,data/crawl/squid/new_hunk_4955.cpp,182,-1,"fatal(""Invalid authenticate state for NTLMStart"");",,"[""removeLog""]","[[""fatal"", ""Invalid"", ""authenticate"", ""state"", ""for"", ""NTLMStart""], []]",[21171954645048328152],6458,0:00:00
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4951.cpp,,,data/crawl/squid/old_hunk_4951.cpp,data/crawl/squid/new_hunk_4951.cpp,-1,353,,"httpHeaderPutStrf(&rep->header, type, ""Negotiate %s"", negotiate_request->server_blob);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""type"", ""Negotiate"", ""%s"", ""negotiate_request"", ""server_blob""]]",[-16773970435113967854],6457,0:00:00
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4944.cpp,,,data/crawl/squid/old_hunk_4944.cpp,data/crawl/squid/new_hunk_4944.cpp,-1,261,,"printf(""AF %s %s\n"",c,cred);","[""addLog""]","[[], [""printf"", ""AF"", ""%s"", ""%s\\n"", ""c"", ""cred""]]",[18872928208238411468],6456,0:00:00
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4947.cpp,,,data/crawl/squid/old_hunk_4947.cpp,data/crawl/squid/new_hunk_4947.cpp,-1,214,,"fprintf(stderr, ""No newline in '%s'\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""No"", ""newline"", ""in"", ""%s"", ""\\n"", ""buf""]]",[-18626837259027111099],6455,0:00:00
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5886.cpp,,,data/crawl/squid/old_hunk_5886.cpp,data/crawl/squid/new_hunk_5886.cpp,-1,104,,"puts(""OK"");","[""addLog""]","[[], [""puts"", ""OK""]]",[4156745859220976650],6454,"878 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0a706c69511e3ef1b978db23498daf740db75483,09 Jan 2003,"date: 2003/01/08 20:55:46;  author: wessels;  state: Exp;  lines: +12 -7
Some nitpicks and cleanup relating to cache manager helper stats and
user authentication:
- debugging statement in helperStatefulDefer() reported wrong function name
- formatted some comments for 80 columns
- added ""program name"" to helpeStats() output
- fixed formatting for helperStatefulStats() so columns line up again
- added authentication type (basic/digest/ntml) to cachemgr menu description
- ran gindent",21,data/crawl/squid/hunk_5453.cpp,,,data/crawl/squid/old_hunk_5453.cpp,data/crawl/squid/new_hunk_5453.cpp,-1,3,,"storeAppendPrintf(sentry, ""program: %s\n"",
	hlp->cmdline->key);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""program"", ""%s\\n"", ""hlp"", ""cmdline"", ""key""]]",[30445718953000698725],6453,"513 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7da10d2bc6a00bfbac4d7e7335a2acdfe33a650a,07 Nov 2005,Handle crashing auth helper more gracefully in negotiate/ntlm,22,data/crawl/squid/hunk_4936.cpp,,,data/crawl/squid/old_hunk_4936.cpp,data/crawl/squid/new_hunk_4936.cpp,7,3,"fatal(""authenticateNTLMHandleReply: called with no result string\n"");","debug(29, 1) (""authenticateNTLMHandleReply: Helper '%p' crashed!.\n"", lastserver);","[""updateLog"", ""moveLog"", ""updateContent"", ""addContent"", ""addVariable""]","[[""fatal"", ""called"", ""with"", ""no"", ""result"", ""string\\n""], [""debug"", ""29"", ""1"", ""Helper"", ""%p"", ""crashed"", ""\\n"", ""lastserver""]]",[14009787677904221979],6452,0:00:00
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4929.cpp,,,data/crawl/squid/old_hunk_4929.cpp,data/crawl/squid/new_hunk_4929.cpp,-1,395,,"buf.Printf(""Comm(%d)"", connection);","[""addLog""]","[[], [""buf"", ""Printf"", ""Comm"", ""%d"", ""connection""]]",[15277834671268445314],6451,0:00:00
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4928.cpp,,,data/crawl/squid/old_hunk_4928.cpp,data/crawl/squid/new_hunk_4928.cpp,-1,75,,"buf.Printf(""Host: %s:%d\r\n"", s.host.buf(), s.port);","[""addLog""]","[[], [""buf"", ""Printf"", ""Host"", ""%s"", ""%d\\r\\n"", ""s"", ""host"", ""buf"", ""s"", ""port""]]",[22592627612707107619],6450,0:00:00
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4926.cpp,,,data/crawl/squid/old_hunk_4926.cpp,data/crawl/squid/new_hunk_4926.cpp,-1,805,,stopReceiving();,"[""addLog""]","[[], [""stopReceiving""]]",[-7301041899547781865],6449,0:00:00
https://github.com/squid-cache/squid/commit/625672046a6efd88726bcc9bde2c9fbcf236fb5c,28 Dec 2005,Bootstrapped,12493,data/crawl/squid/hunk_4895.cpp,,,data/crawl/squid/old_hunk_4895.cpp,data/crawl/squid/new_hunk_4895.cpp,-1,4,,puts (dlerror ());,"[""addLog""]","[[], [""puts"", ""dlerror""]]",[6708123453220136283],6448,0:00:00
https://github.com/squid-cache/squid/commit/c8be6d7b5c7b735484df330a38987ee8fa79e6ac,24 Sep 2002,Client side refactoring - no functionality changes,2627,data/crawl/squid/hunk_5569.cpp,,,data/crawl/squid/old_hunk_5569.cpp,data/crawl/squid/new_hunk_5569.cpp,19,-1,"storeAppendPrintf(s, ""\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""s"", ""\\n""], []]",[-5193143779093595017],6447,"599 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8ddcc35dff76f783eb73d51a685850384117f457,16 Dec 1998,forwarding statistics,51,data/crawl/squid/hunk_6200.cpp,,,data/crawl/squid/old_hunk_6200.cpp,data/crawl/squid/new_hunk_6200.cpp,-1,32,,"storeAppendPrintf(s, ""\t%d"", FwdReplyCodes[j][i]);","[""addLog""]","[[], [""storeAppendPrintf"", ""s"", ""\\t%d"", ""FwdReplyCodes[j][i]""]]",[-7071452347212330517],6446,"1288 days, 0:00:00"
https://github.com/squid-cache/squid/commit/8ddcc35dff76f783eb73d51a685850384117f457,16 Dec 1998,forwarding statistics,51,data/crawl/squid/hunk_6200.cpp,,,data/crawl/squid/old_hunk_6200.cpp,data/crawl/squid/new_hunk_6200.cpp,-1,30,,"storeAppendPrintf(s, ""%3d"", i);","[""addLog""]","[[], [""storeAppendPrintf"", ""s"", ""%3d"", ""i""]]",[410801906505891884],6445,"1288 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9977e14bd04aaeef6911557ada1447b0fc50abd0,16 Dec 1998,fwd stats polishing,38,data/crawl/squid/hunk_6199.cpp,,,data/crawl/squid/old_hunk_6199.cpp,data/crawl/squid/new_hunk_6199.cpp,-1,9,,"storeAppendPrintf(s, ""\ttry#%d"", j + 1);","[""addLog""]","[[], [""storeAppendPrintf"", ""s"", ""\\ttry"", ""%d"", ""j"", ""1""]]",[-2593327316465775669],6444,"1288 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9977e14bd04aaeef6911557ada1447b0fc50abd0,16 Dec 1998,fwd stats polishing,38,data/crawl/squid/hunk_6199.cpp,,,data/crawl/squid/old_hunk_6199.cpp,data/crawl/squid/new_hunk_6199.cpp,-1,7,,"storeAppendPrintf(s, ""Status"");","[""addLog""]","[[], [""storeAppendPrintf"", ""s"", ""Status""]]",[-540009101124091183],6443,"1288 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6f0aab861682a3d9c8f72228b0ac01eac5e52526,24 Jan 2006,Started converting ftp.cc to use more C++ class methods,714,data/crawl/squid/hunk_4886.cpp,,,data/crawl/squid/old_hunk_4886.cpp,data/crawl/squid/new_hunk_4886.cpp,86,95,"storeAppendPrintf(e, ""<PRE>\n"");","storeAppendPrintf(entry, ""</PRE>\n"");","[""updateVariable""]","[[""e"", ""PRE""], [""entry"", ""/PRE""]]",[-11927136948032101437],6442,0:00:00
https://github.com/squid-cache/squid/commit/253caccb08f5a5a23ec0c9b89272145213c09ec0,26 Jan 2006,"The purpose of this change is to add ICAP RESPMOD support for FTP responses.

I created a ""ServerStateData"" class which has common elements of both
HttpStateData and FtpStateData.  It becomes a base class for both
of them.  ICAP now uses the ServerStateData methods.",643,data/crawl/squid/hunk_4884.cpp,,,data/crawl/squid/old_hunk_4884.cpp,data/crawl/squid/new_hunk_4884.cpp,88,101,"storeAppendPrintf(entry, ""</PRE>\n"");","printfReplyBody(""<HR noshade size=\""1px\"">\n"");","[""updateLog"", ""removeVariable""]","[[""storeAppendPrintf"", ""entry"", ""/PRE""], [""printfReplyBody"", ""HR"", ""noshade"", ""size"", ""\\"", ""1px\\""]]",[2373935654350072244],6441,0:00:00
https://github.com/squid-cache/squid/commit/beed27a22dcbf485815b572eeac2b68a5a672f78,02 Apr 2006,"Bug #1504: misleading error message message for bad/unresolveable cache_peer name

Forward port of 2.5 changes.",73,data/crawl/squid/hunk_4875.cpp,,,data/crawl/squid/old_hunk_4875.cpp,data/crawl/squid/new_hunk_4875.cpp,4,4,"mb.Printf(""%s"", err->host);","mb.Printf(""%s"", r->hier.host);","[""updateVariable"", ""addVariable""]","[[""err""], [""r"", ""hier""]]",[10850723213029140737],6440,0:00:00
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5156.cpp,,,data/crawl/squid/old_hunk_5156.cpp,data/crawl/squid/new_hunk_5156.cpp,52,-1,"fprintf( stderr, ""Could not Activate TLS connection\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Could"", ""not"", ""Activate"", ""TLS"", ""connection\\n""], []]",[94042995092749779],6439,"316 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5156.cpp,,,data/crawl/squid/old_hunk_5156.cpp,data/crawl/squid/new_hunk_5156.cpp,46,-1,"fprintf( stderr, ""Could not set LDAP_OPT_PROTOCOL_VERSION %d\n"",
                        version );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Could"", ""not"", ""set"", ""LDAP_OPT_PROTOCOL_VERSION"", ""%d\\n"", ""version""], []]",[-14165094135550653739],6438,"316 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5156.cpp,,,data/crawl/squid/old_hunk_5156.cpp,data/crawl/squid/new_hunk_5156.cpp,30,-1,"fprintf(stderr, ""\nUnable to connect to LDAP server:%s port:%d\n"",
		    ldapServer, port);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""LDAP"", ""server"", ""%s"", ""port"", ""%d\\n"", ""ldapServer"", ""port""], []]",[-3824874482844155251],6437,"316 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5156.cpp,,,data/crawl/squid/old_hunk_5156.cpp,data/crawl/squid/new_hunk_5156.cpp,23,-1,"fprintf(stderr, ""\nUnable to connect to SSL LDAP server: %s port:%d\n"",
			    ldapServer, port);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""SSL"", ""LDAP"", ""server"", ""%s"", ""port"", ""%d\\n"", ""ldapServer"", ""port""], []]",[-3455699060833364420],6436,"316 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5156.cpp,,,data/crawl/squid/old_hunk_5156.cpp,data/crawl/squid/new_hunk_5156.cpp,16,-1,"fprintf(stderr, ""\nUnable to initialise SSL with cert path %s\n"",
			    sslpath);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""initialise"", ""SSL"", ""with"", ""cert"", ""path"", ""%s\\n"", ""sslpath""], []]",[-8616501409148837831],6435,"316 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b627c18a2c5d9a5418aba959cae9b2f48e61fd10,17 Jul 2004,Updated LDAP helpers,388,data/crawl/squid/hunk_5156.cpp,,,data/crawl/squid/old_hunk_5156.cpp,data/crawl/squid/new_hunk_5156.cpp,8,-1,"fprintf(stderr, ""\nUnable to connect to LDAPURI:%s\n"", ldapServer);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""\\nUnable"", ""to"", ""connect"", ""to"", ""LDAPURI"", ""%s\\n"", ""ldapServer""], []]",[968658030135572842],6434,"316 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/hunk_4968.cpp,,,data/crawl/squid/old_hunk_4968.cpp,data/crawl/squid/new_hunk_4968.cpp,-1,3,,"mb->Printf(""%s\n"", w->key);","[""addLog""]","[[], [""mb"", ""Printf"", ""%s\\n"", ""w"", ""key""]]",[22035595571378515708],6433,"109 days, 0:00:00"
https://github.com/squid-cache/squid/commit/137ee196e3be76d5b96458b603e3d9aa78e314f1,31 May 1998,"- Replaced ""complex"" (offset accounting) calls to snprintf() with MemBuf.
- cleanup",545,data/crawl/squid/hunk_6384.cpp,,,data/crawl/squid/old_hunk_6384.cpp,data/crawl/squid/new_hunk_6384.cpp,-1,3,,"fatalf(""Bungled %s line %d: %s"",
	cfg_filename, config_lineno, config_input_line);","[""addLog""]","[[], [""fatalf"", ""Bungled"", ""%s"", ""line"", ""%d"", ""%s"", ""cfg_filename"", ""config_lineno"", ""config_input_line""]]",[36399673581523345217],6432,"1442 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a9925b40bf8179ee4468c997960413a6d510abf5,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,903,data/crawl/squid/hunk_4842.cpp,,,data/crawl/squid/old_hunk_4842.cpp,data/crawl/squid/new_hunk_4842.cpp,-1,16,,pe->getReply();,"[""addLog""]","[[], [""pe"", ""getReply""]]",[-1241114362315085081],6431,0:00:00
https://github.com/squid-cache/squid/commit/a9925b40bf8179ee4468c997960413a6d510abf5,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,903,data/crawl/squid/hunk_4840.cpp,,,data/crawl/squid/old_hunk_4840.cpp,data/crawl/squid/new_hunk_4840.cpp,-1,8,,"hdr_out->putStr(HDR_HOST, orig_request->host);","[""addLog""]","[[], [""hdr_out"", ""putStr"", ""HDR_HOST"", ""orig_request"", ""host""]]",[2378139491246630316],6430,0:00:00
https://github.com/squid-cache/squid/commit/4daf94197f026ad450d3a84f6bf4762b8975ca88,23 May 2006,"Fix a memory corruption when building the magic Vary marker object headers

somehow this cast made things go very bad. Luckily it isn't needed as
we already hold a reference to the reply a few lines earlier.",6,data/crawl/squid/hunk_4815.cpp,,,data/crawl/squid/old_hunk_4815.cpp,data/crawl/squid/new_hunk_4815.cpp,3,-1,pe->getReply();,,"[""removeLog""]","[[""pe"", ""getReply""], []]",[1241114362315085081],6429,0:00:00
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,771,,"storeAppendPrintf(sentry, ""HTTP Messages handled per comm_select_http_incoming() call:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""HTTP"", ""Messages"", ""handled"", ""per"", ""comm_select_http_incoming"", ""call"", ""\\n""]]",[30378957463200746489],6428,"1442 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ef523f990009da27ce7bbac6ceb4b96301d09eb9,16 Apr 1999,"comm_incoming crap for internal DNS

Semi-better retransmit algorithm.  Use nameserver % num_sends",145,data/crawl/squid/hunk_6138.cpp,,,data/crawl/squid/old_hunk_6138.cpp,data/crawl/squid/new_hunk_6138.cpp,-1,6,,"storeAppendPrintf(sentry, ""DNS Messages handled per comm_select_dns_incoming() call:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""DNS"", ""Messages"", ""handled"", ""per"", ""comm_select_dns_incoming"", ""call"", ""\\n""]]",[13579659345014966049],6427,"1308 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6a98830880e6218baef702470777098e2d895f06,21 Jul 1998,forked comm_select.c from comm.c,1233,data/crawl/squid/hunk_6338.cpp,,,data/crawl/squid/old_hunk_6338.cpp,data/crawl/squid/new_hunk_6338.cpp,-1,765,,"storeAppendPrintf(sentry, ""ICP Messages handled per comm_select_icp_incoming() call:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""ICP"", ""Messages"", ""handled"", ""per"", ""comm_select_icp_incoming"", ""call"", ""\\n""]]",[7700910912818219009],6426,"1442 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0b0cfcf2551cc75038f51612a0f2f738628dc52c,02 Jul 2006,Forward port of WCCPv2 support and latest WCCPv1 changes from 2.6.,2405,data/crawl/squid/hunk_4802.cpp,,,data/crawl/squid/old_hunk_4802.cpp,data/crawl/squid/new_hunk_4802.cpp,-1,1902,,"storeAppendPrintf(e, ""%ssrc_ip_alt_hash"", comma ? "","" : """");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%ssrc_ip_alt_hash"", ""comma""]]",[18945722798622765847],6425,0:00:00
https://github.com/squid-cache/squid/commit/b5b86e2c1eab6e4a90c6843d20b3b6d28e5c6c12,22 Jul 1999,Correctly deal with multiple caches,125,data/crawl/squid/hunk_6099.cpp,,,data/crawl/squid/old_hunk_6099.cpp,data/crawl/squid/new_hunk_6099.cpp,-1,15,,"fatal(""Unable to getsockname on WCCP out socket"");","[""addLog""]","[[], [""fatal"", ""Unable"", ""to"", ""getsockname"", ""on"", ""WCCP"", ""out"", ""socket""]]",[5865329681165822785],6424,"1268 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b5b86e2c1eab6e4a90c6843d20b3b6d28e5c6c12,22 Jul 1999,Correctly deal with multiple caches,125,data/crawl/squid/hunk_6099.cpp,,,data/crawl/squid/old_hunk_6099.cpp,data/crawl/squid/new_hunk_6099.cpp,-1,10,,"fatal(""Unable to connect WCCP out socket"");","[""addLog""]","[[], [""fatal"", ""Unable"", ""to"", ""connect"", ""WCCP"", ""out"", ""socket""]]",[7842912790810741343],6423,"1268 days, 12:00:00"
https://github.com/squid-cache/squid/commit/320e9f3612daa1eee96a476d0092a25b934f4330,27 Apr 1999,WCCP functionality for Squid,930,data/crawl/squid/hunk_6125.cpp,,,data/crawl/squid/old_hunk_6125.cpp,data/crawl/squid/new_hunk_6125.cpp,-1,140,,"fatal(""Cannot open wccp Port"");","[""addLog""]","[[], [""fatal"", ""Cannot"", ""open"", ""wccp"", ""Port""]]",[-5595549084306699922],6422,"1311 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a553a5a35d4f6bf515fc77867e66276f42d04fe1,07 Aug 2006,"Create an explicit EventLoop class which can be used to run an event loop
outside of main.cc - i.e. for test cases. Refactor the event module into two
sections - EventScheduler which schedules events, and EventDispatcher which
dispatches events unconditionally. Refactor the signal handling code in
main to use an event dispatcher too, making the loop cleaner.",1848,data/crawl/squid/hunk_4783.cpp,,,data/crawl/squid/old_hunk_4783.cpp,data/crawl/squid/new_hunk_4783.cpp,-1,96,,theLoop.stop();,"[""addLog""]","[[], [""theLoop"", ""stop""]]",[-8369492412151735424],6421,"2 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a553a5a35d4f6bf515fc77867e66276f42d04fe1,07 Aug 2006,"Create an explicit EventLoop class which can be used to run an event loop
outside of main.cc - i.e. for test cases. Refactor the event module into two
sections - EventScheduler which schedules events, and EventDispatcher which
dispatches events unconditionally. Refactor the signal handling code in
main to use an event dispatcher too, making the loop cleaner.",1848,data/crawl/squid/hunk_4781.cpp,,,data/crawl/squid/old_hunk_4781.cpp,data/crawl/squid/new_hunk_4781.cpp,32,-1,"fatal_dump(""MAIN: Internal error -- this should never happen."");",,"[""removeLog""]","[[""fatal_dump"", ""MAIN"", ""Internal"", ""error"", ""this"", ""should"", ""never"", ""happen""], []]",[18383739867664462038],6420,"2 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4946.cpp,,,data/crawl/squid/old_hunk_4946.cpp,data/crawl/squid/new_hunk_4946.cpp,-1,75,,"fprintf(stderr, ""ntlm-auth[%d]: "",getpid());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ntlm"", ""auth[%d]"", ""getpid""]]",[-9655032389557404923],6419,"143 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6e785d853c1867e4b7aea26b0add938b39897a69,31 Oct 2005,"Windows port: addition of native authentication helpers.

- mswin_auth: 		Basic helper
- mswin_ntlm_auth: 	NTLM helper
- mswin_negotiate_auth: Negotiate helper

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",2901,data/crawl/squid/hunk_4944.cpp,,,data/crawl/squid/old_hunk_4944.cpp,data/crawl/squid/new_hunk_4944.cpp,-1,96,,"fprintf(stderr,
	""Usage: %s [-d] [-v] [-h]\n""
	"" -d  enable debugging.\n""
        "" -v  enable verbose NTLM packet debugging.\n""
	"" -h  this message\n\n"",
	my_program_name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Usage"", ""%s"", ""["", ""d]"", ""["", ""v]"", ""["", ""h]\\n"", ""d"", ""enable"", ""debugging"", ""\\n"", ""v"", ""enable"", ""verbose"", ""NTLM"", ""packet"", ""debugging"", ""\\n"", ""h"", ""this"", ""message\\n\\n"", ""my_program_name""]]",[-19941283037180204258],6418,"143 days, 12:00:00"
https://github.com/squid-cache/squid/commit/36584579a9d2e78ae4106ea5cec4976a096de85b,13 Mar 2005,"Bug #1257: compile warnings due to pid_t not being an int

Forward port of 2.5 patch and added use of debugs() where applicable",23,data/crawl/squid/hunk_5077.cpp,,,data/crawl/squid/old_hunk_5077.cpp,data/crawl/squid/new_hunk_5077.cpp,3,3,"fprintf(stderr, ""ntlm-auth[%d]: Timeout during authentication.\n"", getpid());","fprintf(stderr, ""ntlm-auth[%ld]: Timeout during authentication.\n"", (long)getpid());","[""updateContent"", ""addVariable""]","[[""auth[%d]""], [""auth[%ld]"", ""long""]]",[10118911498824314933],6417,"266 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b04654945673550e4d527cd79bcf7bab3409b7e4,07 Apr 2005,Added per thread usage info in cachemgr Async IO Function Counters.,27,data/crawl/squid/hunk_5063.cpp,,,data/crawl/squid/old_hunk_5063.cpp,data/crawl/squid/new_hunk_5063.cpp,-1,15,,"storeAppendPrintf(sentry, ""#\tID\t# Requests\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\tID\\t"", ""Requests\\n""]]",[8194622206143574933],6416,"259 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b04654945673550e4d527cd79bcf7bab3409b7e4,07 Apr 2005,Added per thread usage info in cachemgr Async IO Function Counters.,27,data/crawl/squid/hunk_5063.cpp,,,data/crawl/squid/old_hunk_5063.cpp,data/crawl/squid/new_hunk_5063.cpp,-1,13,,"storeAppendPrintf(sentry, ""\n\nThreads Status:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\n\\nThreads"", ""Status"", ""\\n""]]",[5051386184041672194],6415,"259 days, 0:00:00"
https://github.com/squid-cache/squid/commit/595c79732716913858c8b6c0b301fa4672564616,07 Sep 2006,Windows port: Added Windows threads support to DiskThreads Disk module,1272,data/crawl/squid/hunk_4752.cpp,,,data/crawl/squid/old_hunk_4752.cpp,data/crawl/squid/new_hunk_4752.cpp,-1,612,,"fatal(""Couldn't push queue"");","[""addLog""]","[[], [""fatal"", ""Couldn"", ""t"", ""push"", ""queue""]]",[-2482845866887331203],6414,0:00:00
https://github.com/squid-cache/squid/commit/cd748f27e5282c445ef4e13a0e2eabd19b6b906f,03 May 2000,"MODIO_1 commit. This change (including documentation) implements a more
modular storage directory system, which leaves object replacement and IO
up to the storage modules.

There is a lot of repeated code in the FS modules and some tidying up
is in the pipeline.

The documentation for this new API is in doc/Programming-Guide/prog-guide.sgml .",14498,data/crawl/squid/hunk_6042.cpp,,,data/crawl/squid/old_hunk_6042.cpp,data/crawl/squid/new_hunk_6042.cpp,-1,192,,"fprintf(stderr, ""Thread creation failed\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Thread"", ""creation"", ""failed\\n""]]",[-11900499686379701240],6413,"1159 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9c8434f6a8753d321762ff58685cb1ff0364b4a7,14 Sep 2006,"Windows port: split Windows service code into WinSvc.cc, allowing correct execution of make check",1963,data/crawl/squid/hunk_4751.cpp,,,data/crawl/squid/old_hunk_4751.cpp,data/crawl/squid/new_hunk_4751.cpp,132,-1,"fprintf(stderr, ""RegCloseKey %d\n"", (int) rv);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""RegCloseKey"", ""%d\\n"", ""int"", ""rv""], []]",[13964991524264781003],6412,0:00:00
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,446,,"fprintf(stderr, ""StartServiceCtrlDispatcher error = %ld\n"",
                    GetLastError());","[""addLog""]","[[], [""fprintf"", ""stderr"", ""StartServiceCtrlDispatcher"", ""error"", ""%ld\\n"", ""GetLastError""]]",[-15141737662235801812],6411,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,436,,"fprintf(stderr, ""Bad Service Parameter: %s\n"", argv[1]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Bad"", ""Service"", ""Parameter"", ""%s\\n"", ""argv[1]""]]",[-10344790016938012624],6410,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,415,,"printf(""  Wait Hint: %ld\n"", ssStatus.dwWaitHint);","[""addLog""]","[[], [""printf"", ""Wait"", ""Hint"", ""%ld\\n"", ""ssStatus"", ""dwWaitHint""]]",[19317442497146412908],6409,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,414,,"printf(""  Check Point: %ld\n"", ssStatus.dwCheckPoint);","[""addLog""]","[[], [""printf"", ""Check"", ""Point"", ""%ld\\n"", ""ssStatus"", ""dwCheckPoint""]]",[-1256790467540788750],6408,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,412,,"printf(""  Service Specific Exit Code: %ld\n"",
                   ssStatus.dwServiceSpecificExitCode);","[""addLog""]","[[], [""printf"", ""Service"", ""Specific"", ""Exit"", ""Code"", ""%ld\\n"", ""ssStatus"", ""dwServiceSpecificExitCode""]]",[18140658492809293212],6407,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,411,,"printf(""  Exit Code: %ld\n"", ssStatus.dwWin32ExitCode);","[""addLog""]","[[], [""printf"", ""Exit"", ""Code"", ""%ld\\n"", ""ssStatus"", ""dwWin32ExitCode""]]",[22858854831581527440],6406,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,410,,"printf(""  Controls Accepted: 0x%lx\n"", ssStatus.dwControlsAccepted);","[""addLog""]","[[], [""printf"", ""Controls"", ""Accepted"", ""0x%lx\\n"", ""ssStatus"", ""dwControlsAccepted""]]",[17710171042922590636],6405,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,409,,"printf(""  Current State: 0x%lx\n"", ssStatus.dwCurrentState);","[""addLog""]","[[], [""printf"", ""Current"", ""State"", ""0x%lx\\n"", ""ssStatus"", ""dwCurrentState""]]",[15574618889590672524],6404,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,408,,"printf(""  Service Type: 0x%lx\n"", ssStatus.dwServiceType);","[""addLog""]","[[], [""printf"", ""Service"", ""Type"", ""0x%lx\\n"", ""ssStatus"", ""dwServiceType""]]",[20150784739377180034],6403,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,407,,"printf(""\nStatus of %s Service:\n"", WIN32_Service_name);","[""addLog""]","[[], [""printf"", ""\\nStatus"", ""of"", ""%s"", ""Service"", ""\\n"", ""WIN32_Service_name""]]",[12232254655465740411],6402,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,402,,"fprintf(stderr, ""%s: ERROR: Could not Control Service %s\n"",
                    appname, WIN32_Service_name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Could"", ""not"", ""Control"", ""Service"", ""%s\\n"", ""appname"", ""WIN32_Service_name""]]",[14610209532071689463],6401,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,393,,"fprintf(stderr, ""%s: ERROR: Could not open Service %s\n"", appname,
                WIN32_Service_name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Could"", ""not"", ""open"", ""Service"", ""%s\\n"", ""appname"", ""WIN32_Service_name""]]",[18079543569373335187],6400,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,319,,"fprintf(stderr, ""CreateService failed\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""CreateService"", ""failed\\n""]]",[-20387067007984670057],6399,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,317,,"printf(""Don't forget to edit squid.conf before starting it.\n\n"");","[""addLog""]","[[], [""printf"", ""Don"", ""t"", ""forget"", ""to"", ""edit"", ""squid"", ""conf"", ""before"", ""starting"", ""it"", ""\\n\\n""]]",[6271469254997766867],6398,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,314,,"printf
            (""To run, start it from the Services Applet of Control Panel.\n"");","[""addLog""]","[[], [""printf"", ""To"", ""run"", ""start"", ""it"", ""from"", ""the"", ""Services"", ""Applet"", ""of"", ""Control"", ""Panel"", ""\\n""]]",[-13852713155740126990],6397,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,311,,"printf(""installed successfully as %s Windows System Service.\n"",
                   WIN32_Service_name);","[""addLog""]","[[], [""printf"", ""installed"", ""successfully"", ""as"", ""%s"", ""Windows"", ""System"", ""Service"", ""\\n"", ""WIN32_Service_name""]]",[11372176681377384363],6396,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,308,,"printf(""Squid Cache version %s for %s\n"", version_string,
                   CONFIG_HOST_TYPE);","[""addLog""]","[[], [""printf"", ""Squid"", ""Cache"", ""version"", ""%s"", ""for"", ""%s\\n"", ""version_string"", ""CONFIG_HOST_TYPE""]]",[-4935056387123843478],6395,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,258,,"fprintf(stderr, ""Can't get executable path\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Can"", ""t"", ""get"", ""executable"", ""path\\n""]]",[-12200881939712585114],6394,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,217,,"printf(""Service %s deleted successfully.\n"",
                       WIN32_Service_name);","[""addLog""]","[[], [""printf"", ""Service"", ""%s"", ""deleted"", ""successfully"", ""\\n"", ""WIN32_Service_name""]]",[15324645909636283837],6393,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,215,,"fprintf(stderr, ""DeleteService failed.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""DeleteService"", ""failed"", ""\\n""]]",[-17762220787764812022],6392,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5265.cpp,,,data/crawl/squid/old_hunk_5265.cpp,data/crawl/squid/new_hunk_5265.cpp,-1,195,,"fprintf(stderr, ""OpenService failed\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""OpenService"", ""failed\\n""]]",[-14145636681122136471],6391,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,229,,"fprintf(stderr, ""RegCloseKey HKLM\\%s, %d\n"", REGKEY, (int) rv);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""RegCloseKey"", ""HKLM\\\\%s"", ""%d\\n"", ""REGKEY"", ""int"", ""rv""]]",[-15587179598092841180],6390,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,217,,"fprintf(stderr, ""Registry stored HKLM\\%s\\%s value %s\n"",
                REGKEY,
                key,
                type == REG_SZ ? value : (unsigned char *) ""(not displayable)"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Registry"", ""stored"", ""HKLM\\\\%s\\\\%s"", ""value"", ""%s\\n"", ""REGKEY"", ""key"", ""type"", ""REG_SZ"", ""value"", ""unsigned"", ""char"", ""*"", ""not"", ""displayable""]]",[2357888911587133298],6389,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,214,,"fprintf(stderr, ""RegQueryValueEx(key %s),%d\n"", key, (int) rv);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""RegQueryValueEx"", ""key"", ""%s"", ""%d\\n"", ""key"", ""int"", ""rv""]]",[150726254741681836],6388,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,200,,"fprintf(stderr, ""RegOpenKeyEx HKLM\\%s, %d\n"", REGKEY, (int) rv);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""RegOpenKeyEx"", ""HKLM\\\\%s"", ""%d\\n"", ""REGKEY"", ""int"", ""rv""]]",[-8467889701044292624],6387,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,193,,"fprintf(stderr, ""Registry does not contain key %s after creation\n"",
                    REGKEY);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Registry"", ""does"", ""not"", ""contain"", ""key"", ""%s"", ""after"", ""creation\\n"", ""REGKEY""]]",[-20638689201541593864],6386,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/376f789235172572975727f5909b012af5c710e7,21 Apr 2003,"From Guido:

 - new service support core functions
 - changed platform identification from ""Windows .NET"" to ""Windows Server 2003""
 - include/squid_windows.h: New file, needed to prevent naming conflicts
   between Windows includes and Squid",811,data/crawl/squid/hunk_5264.cpp,,,data/crawl/squid/old_hunk_5264.cpp,data/crawl/squid/new_hunk_5264.cpp,-1,126,,"fprintf(stderr, ""RegCreateKeyEx(%s),%d\n"", keys[index], (int) rv);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""RegCreateKeyEx"", ""%s"", ""%d\\n"", ""keys[index]"", ""int"", ""rv""]]",[-26557078750273797366],6385,"621 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5f8252d203092b380f73e997be7097282c793077,06 Apr 2007,"	- ICAP-unrelated improvements from the squid3-icap branch on SF
	  (see further below for ICAP-specific improvements):

	- Replaced BodyReader with BodyPipe. BodyReader was a
	  collection of function pointers augmented with body size
	  calculation logic. BodyReader was used to deliver request
	  body (of a known size) from the client side to the server
	  side. Reference counting was used to communicate abort
	  conditions to the other side (it did not work well because
	  decreasing the reference count does not have any side-effects
	  if the count remains positive). Direct calls between sides
	  sometimes resulted in a call-me-when-I-am-calling-you ""loops""
	  and related bugs.

	  BodyPipe is used to deliver request or response body (possibly
	  of unknown size) from the body producer to the body consumer.
	  A producer can be the client side (for virgin requests), the
	  server side (for virgin replies), or the ICAP side (for
	  adapted messages). A consumer can be the client side (for
	  adapted responses, including responses in a request
	  satisfaction mode), the server side (for adapted requests),
	  and the ICAP side (for virgin requests and responses).

	  BodyPipe uses asynchronous calls for communication between
	  sides to avoid call-me-when-I-am-calling-you ""loops"".

	  BodyPipe has methods to communicate normal termination and
	  abort conditions to the other side. The use of those methods
	  is mandatory. Reference counting is used only as a garbage
	  collection mechanism.

	  BodyPipe is used to read request bodies, including requests
	  for which there is no consumer and the connection is in a
	  'closing' state. BodyPipe can auto-consume body so that a
	  'closing' connection does not have to rely on the body
	  consumer presence when eating up remaining body data.

	  If auto-consumption is turned on and the pipe starts
	  consuming before a real consumer is attached to the pipe, the
	  setConsumerIfNotLate call fails, and the real consumer has to
	  handle the failure.

	  The new BodyPipe approach should make support for HTTP/1.1
	  chunked requests easier. Only a few places in the pipe-related
	  code assume that the request size is known.

	- Removed ClientBody as unused, replaced by BodyReader, then
	  BodyPipe.

	- Moved HttpRequest::body_reader to HttpMsg::body_pipe so that
	  all HTTP message bodies can be communicated via pipes. This
	  is needed for the server side to supply response bodies to
	  ICAP and for the ICAP side to supply adapted message bodies
	  to others.

	- When cleaning HttpRequest or HttpReply, reset body_pipe to
	  NULL instead of asserting that it is already NULL. BodyPipes
	  are owned and maintained by other objects and HttpMsg is used
	  only as a mechanism to pass the pipe pointer from the body
	  producer to the consumer. To maintain guarantees similar to
	  the old code, the BodyPipe destructor asserts that both the
	  producer and the consumer are gone when the pipe is
	  destructed.

	- When appending body data, do not append more than the known
	  body size. This fixes the following assertion when POSTing
	  from IE in my tests: assertion failed: client_side.cc:3205:
	  ""bodySizeLeft() > 0"".

	  I suspect IE or some Javascripts running on IE were appending
	  extra CRLF to a POST, exposing the bug, and triggering the
	  above assertion.

	- WARNING: Ftp-specific BodyPipe changes are untested, but the
	  old code probably did not work well with ICAP either.  More
	  testing is needed.

	- Moved more common server-side code from http.* and ftp.* into
	  Server.*.  Most ICAP-related code is in the Server class now.

	  The code move to the Server class and migration to BodyPipe
	  exposed several FTP/HTTP inconsistencies and bugs. I marked
	  those I could not fix with XXXs.

	- Distinguish the end of communication with the origin server
	  from the end of communication with ICAP. Clean them up
	  separately when possible. Terminate when both are completed
	  (or aborted).

	- Polished persistentConnStatus() to avoid calling
	  statusIfComplete() until really necessary (and appropriate).
	  This makes debugging easier to understand for some.

	- Use auto-consumption feature to consume data from closing
	  connections for which there is no real body consumer.

	- Use BodyPipe for maintaining the ""closing"" state of a
	  connection instead of in.abortedSize. This change ""removes"" a
	  few memory leaks and an assertion, but does need more work,
	  especially when the regular BodyPipe consumer leaves early
	  and does not consume the request body.

	- The client stream code sometimes marks the ""closing""
	  connection as STREAM_UNPLANNED_COMPLETE, leading to a
	  double-close. I do not yet understand why. There is now code
	  to ignore multiple attempts to enter the ""closing"" state.



	- ICAP improvements from the squid3-icap branch on SF, including:

	- Added icap_service_failure_limit squid.conf option. The limit
	  specifies the number of failures that Squid tolerates when
	  establishing a new TCP connection with an ICAP service. If
	  the number of failures exceeds the limit, the ICAP service is
	  not used for new ICAP requests until it is time to refresh
	  its OPTIONS. The per-service failure counter is reset to zero
	  each time Squid fetches new service OPTIONS.

	  A negative value disables the limit.

	  The limit used to be hardcoded to 10.

	  (based on the patch by Axel Westerhold)

	- Added icap_service_revival_delay squid.conf option.  The
	  delay specifies the number of seconds to wait after an ICAP
	  OPTIONS request failure before requesting the options again.
	  The failed ICAP service is considered ""down"" until fresh
	  OPTIONS are fetched.

	  The actual delay cannot be smaller than the [still] hardcoded
	  minimum delay of 60 seconds.

	  (based on the patch by Axel Westerhold)

	- Added icap_client_username_header and
	  icap_client_username_encode squid.conf options to control how
	  the authenticated client username should be sent to the ICAP
	  service. (based on the patch by Axel Westerhold)

	- Handle REQMOD transaction failures where we cannot proceed
	  with the normal request flow.

	- Use ICAPInitiator API to send ""success"" or ""abort"" messages
	  to ICAP transaction initiator. Store virgin and adapted
	  metadata as public fields (if the newly added ICAPInOut type)
	  that the initiator can access when receiving our ""successful
	  adaptation"" message. This keeps messages simple.

	- Using ICAPInitiator API and a ""universal"" BodyPipe API makes
	  it possible to exchange bodies directly with client- or
	  server-side code without ICAPClient* translators, which are
	  now gone along with the ICAPInitXaction function in
	  ICAPClient.

	- Added ICAPInitiator interface that classes initiating ICAP
	  transactions must now support. The API currently has just two
	  methods: one for receiving adapted message headers
	  (indicating a successful ICAP transaction, at least to the
	  point of fetching adapted headers) and one for receiving a
	  notification of an aborted ICAP transaction.

	  Most ICAP initiators (or their close relatives) will also need
	  to implement BodyConsumer and/or BodyProducer APIs to exchange
	  virgin and/or adapted HTTP message bodies with the initiated
	  ICAP transaction. However, that activity is not addressed in
	  this API.  New AsyncCall API is used to declare the callback
	  wrappers.

	- Use BodyPipe instead of MsgPipe for receiving virgin and
	  sending adapted message bodies. BodyPipe is not much
	  different from MsgPipeBody, but it is better to use a
	  ""universal"" class that the rest of Squid code now uses.  One
	  complication is that BodyPipes are currently not created for
	  messages with zero-size bodies. The code had to be changed to
	  not assume that a zero-size body comes with a pipe.

	- Deleted MsgPipe and related classes. Message pipes had two
	  purposes: coordinate HTTP message adaptation (start, get the
	  adapted headers, abort) and exchange HTTP message bodies. The
	  latter is now done via BodyPipe API. The former can be
	  implemented directly in ICAPModXact.

	  Deleted ICAPClient* and related classes as (my) design
	  failure.

	  The original idea behind message pipes and ICAPClient* classes
	  was to isolate ICAP code from the Squid core. The core code
	  was supposed to use ICAPClient* classes for all ICAP-related
	  needs, and ICAPClient* classes were supposed to translate core
	  needs into ""ICAP needs"" and use message pipes to communicate
	  with asynchronously running ICAP transactions. The latter part
	  worked fine, but the former did not.

	  The core code still did a lot of ICAP-specific work on its
	  own. This could be because ICAP processing affects the flow so
	  much or because the core code had not been refactored enough
	  to minimize ICAP interactions.  Whatever the reason, we ended
	  up with a lot of complex code/logic coordinating the core code
	  and ICAPClient* classes. While ICAPClient* classes were
	  ""translating"", they could not hide the key actions or events
	  (such as message body exchange or transaction aborts) from the
	  core. The core code still had to support those actions or
	  handle those events.  Thus, every major action or event was
	  handled twice:  once in the core side code and once in a
	  ICAPClient* class.

	  Removing ICAPClient* ""translation"" step simplified the code
	  and possibly improved performance. As for the ""ICAP
	  separation"" goal, the current exposure to the ICAPModXact
	  class can be hidden by a generic ""Message Adaptation
	  Transaction"" class if we need to support more adaptation
	  protocols. The core code should not be affected much by such a
	  change.

	- ClientHttpRequest: Support the new ICAPInitiator API and talk
	  to ICAPModXact directly instead of using ICAPClient* classes,
	  which are now gone.

	- ConnStateData: Use BodyPipe for delivering virgin request
	  bodies to the server or ICAP side. Implement the BodyProducer
	  interface.  ClientHttpRequest: Use BodyPipe instead of
	  BodyReader when receiving request bodies (from client side or
	  ICAP).  Implement the BodyConsumer interface.  See the first
	  BodyPipe CVS log message for the rationale.

	- Use BodyPipe for delivering virgin reply bodies to ICAP and
	  receiving adapted reply bodies from ICAP. Implement the
	  BodyProducer interface.

	  Use BodyPipe instead of BodyReader when receiving request
	  bodies (from client side or ICAP).  Implement the BodyConsumer
	  interface.

	- Replaced never-failing doIcap() with startIcap() that fails
	  if we cannot select an ICAP service or the selected service
	  is not usable. Rearranged
	  ClientRequestContext::icapAclCheckDone() to bypass ICAP
	  errors when possible.  Now, ClientRequestContext::startIcap()
	  is very similar to Server::startIcap(). Same for
	  icapAclCheckDone().  Made
	  ClientHttpRequest::handleIcapFailure() public because
	  ClientRequestContext::icapAclCheckDone() calls it.

	- Polished TTL handling to make sure we use the default TTL
	  when the ICAP server did not provide an explicit value or if
	  we failed to communicate with the server. The latter case may
	  not have been handled correctly before.

	- The minimum options update gap (currently hard-coded) must be
	  smaller than the default options TTL. Otherwise, we get stale
	  options and down ICAP services around the update time because
	  we cannot update soon enough.

	- Support asynchronous transaction start. This allows for a
	  better handling of startup errors (or at least makes them
	  similar to other transaction errors).

	- Call a swanSong() method upon expected transaction
	  termination (including aborts). This allows for proper and
	  prompt [partial] transaction cleanup, without waiting for the
	  destructor to be called. The destruction may be delayed by
	  refcounting if we have other transaction users waiting for
	  some transaction notifications.

	- Do not reuse a connection if we are still reading or writing
	  (even if no actual I/O is scheduled). The old code would
	  reuse such connections, and read/write leftovers from aborted
	  transactions from/to the ICAP server.

	- Do not send last-chunk in ICAP Preview with a null-body. It is
	  possible that the old code would send the last-chunk under
	  some Preview conditions with null-body, but I am not sure.

	- Fixed HttpStateData memory leak visible when no RESPMOD
	  services are enabled.  ICAPAccessCheck constructor was
	  cbdata-locking HttpStateData, but was not releasing the lock
	  when there was no matching service class, leading to an
	  HttpStateData leak. Furthermore, ICAPAccessCheck would then
	  call HttpStateData back without validating the cbdata
	  pointer, probably calling wrong or invalid HttpStateData.

	- Fixed ""is it too late to bypass?"" conditions in
	  ClientHttpRequest::handleIcapFailure(). We should be able to
	  bypass more often now. However, handleIcapFailure() still has
	  the old bug: it does not check whether the service is
	  optional. The current fix implies that now Squid may bypass
	  essential services more often.

	- Call storeEntry()->complete() when ending request
	  satisfaction. Without this call, we may keep the connection
	  open, which does not work with responses that mark the end of
	  their body by closing a connection. (Christos Tsantilas)

	- Fixed ieof condition detection. Squid was sending last-chunk
	  without ieof bit and was sending two last chunks when doing
	  preview (Tsantilas Christos).

	- When ICAP server wants the entire virgin body and sends 100
	  Continue after Preview, do not stop backing up virgin body
	  data for echoing if we promised to support 204 No Content
	  responses outside of Preview. If we allow 204s, 100 Continue
	  may be followed by a 204 No Content and we will need the
	  entire virgin body to echo back.

	- Rewrote MemBufClaim into a VirginBodyAct class to simplify
	  and clarify code in hope to minimize the number of bugs like
	  the one mentioned above. MemBufClaim was protecting an area
	  of virgin body pipe content and, as a side effect, was
	  providing the transaction with the content pointer for the
	  write or send actions.

	  Now VirginBodyAct just maintains the activity offset and the
	  transaction code uses that to consume virgin body correctly.
	  The size of the area is no longer maintained because it was
	  usually unknown or unused; and when it was known and used
	  (i.e., Preview), it could be taken from the preview state
	  object anyway.  Renamed and documented VirginBodyAct-related
	  methods to clarify the intent.

	- When sending last-chunk in Preview, send ieof extension if we
	  wrote the entire body. The old code would not send ieof if we
	  wrote as many bytes as promised in the Preview header, even
	  if we promised to write everything.  This would mislead
	  compliant ICAP servers that do not look at the Content-Length
	  header and reply with 100 Continue, expecting more body data.

	- Do not reset Preview size to zero when expecting a virgin
	  body of unknown size. A Squid user reported that this change
	  works.

	- Polished debugging: Instead of using pointers, use unique ICAP
	  transaction IDs.  This helps with isolating a transaction in a
	  large log, where pointers may be reused many times. Print
	  connection descriptor like most of the core code does. Other
	  minor improvements.",4655,data/crawl/squid/hunk_4678.cpp,,,data/crawl/squid/old_hunk_4678.cpp,data/crawl/squid/new_hunk_4678.cpp,9,-1,stopReceiving();,,"[""removeLog""]","[[""stopReceiving""], []]",[7301041899547781865],6384,0:00:00
https://github.com/squid-cache/squid/commit/0353e7241e73894b614e9c07277adae642f9da2e,06 Mar 2003,"Summary: Merge String loss fix.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-10
     Track all created strings.

  * robertc@squid-cache.org--squid/squid--comms--3.0--patch-9
     More tuning.",423,data/crawl/squid/hunk_5287.cpp,,,data/crawl/squid/old_hunk_5287.cpp,data/crawl/squid/new_hunk_5287.cpp,-1,57,,"storeAppendPrintf(entry, ""%lu entries, %lu reported from MemPool\n"", (unsigned long) Instance().entries.elements, (unsigned long) memStringCount());","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%lu"", ""entries"", ""%lu"", ""reported"", ""from"", ""MemPool\\n"", ""unsigned"", ""long"", ""Instance"", ""entries"", ""elements"", ""unsigned"", ""long"", ""memStringCount""]]",[-2217334323894795720],6383,"767 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7ed0602b28c0cc2f7e55e4e9238f5202aa3e386a,29 Dec 2005,Split digest_pw_auth into digest_pw_auth and digest_ldap_auth,1425,data/crawl/squid/hunk_4891.cpp,,,data/crawl/squid/old_hunk_4891.cpp,data/crawl/squid/new_hunk_4891.cpp,-1,69,,"printf(""ERR No such user\n"");","[""addLog""]","[[], [""printf"", ""ERR"", ""No"", ""such"", ""user\\n""]]",[11392756792819906018],6382,"271 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,486,,"fprintf(stderr, ""%s| %s: User %s authenticated\n"", LogTime(), PROGRAM, (char *)output_token.value);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""User"", ""%s"", ""authenticated\\n"", ""LogTime"", ""PROGRAM"", ""char"", ""*"", ""output_token"", ""value""]]",[-6941698923594257972],6381,0:00:00
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,373,,"fprintf(stdout, ""NA received type %d NTLM token\n"",(int) *((unsigned char *)input_token.value + sizeof ntlmProtocol));","[""addLog""]","[[], [""fprintf"", ""stdout"", ""NA"", ""received"", ""type"", ""%d"", ""NTLM"", ""token\\n"", ""int"", ""*"", ""unsigned"", ""char"", ""*"", ""input_token"", ""value"", ""sizeof"", ""ntlmProtocol""]]",[-33578579756254989034],6380,0:00:00
https://github.com/squid-cache/squid/commit/a1d716fa625a38f5409f61022f98c3b96b84142d,29 Oct 2005,Spell check.,4,data/crawl/squid/hunk_4949.cpp,,,data/crawl/squid/old_hunk_4949.cpp,data/crawl/squid/new_hunk_4949.cpp,3,3,"auth_user_request->denyMessage(""Authenication in progress"");","auth_user_request->denyMessage(""Authentication in progress"");","[""updateContent""]","[[""Authenication""], [""Authentication""]]",[-5763591340059079501],6379,"306 days, 12:00:00"
https://github.com/squid-cache/squid/commit/47f6e231eb0dcf02f69a97a3adebc10ae744fefb,13 Aug 2007,"Author: wessels & Christos Tsantilas
Import squid3-largeobj branch, fixing proxying and caching of >2GB objects

this patch converts all variables referring to object sizes & offsets to
64-bits, and gets rid of a lot of related casts.

The cache format is also updated to use 64-bit offsets, using a format
compatible with Squid-2.6.",1589,data/crawl/squid/hunk_4494.cpp,,,data/crawl/squid/old_hunk_4494.cpp,data/crawl/squid/new_hunk_4494.cpp,4,4,"mb->Printf(""\tinmem_hi: %d\n"", (int) data_hdr.endOffset());","mb->Printf(""\tinmem_hi: %""PRId64""\n"", data_hdr.endOffset());","[""removeVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""%d\\n"", ""int""], [""%"", ""PRId64"", ""\\n""]]",[8659607761916738540],6378,0:00:00
https://github.com/squid-cache/squid/commit/47f6e231eb0dcf02f69a97a3adebc10ae744fefb,13 Aug 2007,"Author: wessels & Christos Tsantilas
Import squid3-largeobj branch, fixing proxying and caching of >2GB objects

this patch converts all variables referring to object sizes & offsets to
64-bits, and gets rid of a lot of related casts.

The cache format is also updated to use 64-bit offsets, using a format
compatible with Squid-2.6.",1589,data/crawl/squid/hunk_4494.cpp,,,data/crawl/squid/old_hunk_4494.cpp,data/crawl/squid/new_hunk_4494.cpp,5,5,"mb->Printf(""\tswapout: %d bytes queued\n"",
               (int) swapout.queue_offset);","mb->Printf(""\tswapout: %""PRId64"" bytes queued\n"",
               swapout.queue_offset);","[""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""%d"", ""int""], [""%"", ""PRId64""]]",[14788043902068298888],6377,0:00:00
https://github.com/squid-cache/squid/commit/ee1394034ae6d0c148944ba013ce2d485b2ea57b,17 Aug 2007,"64-bit disk I/O, using off_t / size_t where appropriate",98,data/crawl/squid/hunk_4487.cpp,,,data/crawl/squid/old_hunk_4487.cpp,data/crawl/squid/new_hunk_4487.cpp,10,10,"fprintf(stderr, ""%d WRITE %d,%d,%d\n"", (int) mypid,
            fs->fd, wrtlen, r->offset);","fprintf(stderr, ""%d WRITE %d,%d,%""PRId64""\n"", (int) mypid,
            fs->fd, wrtlen, (int64_t)r->offset);","[""updateContent"", ""addContent"", ""addVariable""]","[[""%d\\n""], [""%"", ""PRId64"", ""\\n"", ""int64_t""]]",[7089029205356821259],6376,0:00:00
https://github.com/squid-cache/squid/commit/077fe5816c428aa8aae518ac560c10c1a5e1c030,21 Sep 2007,"Misc Formatting & cleanups
Some comment corrections
Some irrelevant typedef cleanups",111,data/crawl/squid/hunk_4457.cpp,,,data/crawl/squid/old_hunk_4457.cpp,data/crawl/squid/new_hunk_4457.cpp,8,8,"storeAppendPrintf(e, ""%2d\t %-20s\t %5d\t %6.3f\t %6.3f\n"",
                          f->id, f->name.buf(), f->stat.aliveCount,
                          xpercent(f->stat.errCount, f->stat.parsCount),
                          xpercent(f->stat.repCount, f->stat.seenCount));","storeAppendPrintf(e, ""%2d\t %-25s\t %5d\t %6.3f\t %6.3f\n"",
                          f->id, f->name.buf(), f->stat.aliveCount,
                          xpercent(f->stat.errCount, f->stat.parsCount),
                          xpercent(f->stat.repCount, f->stat.seenCount));","[""updateContent""]","[[""20s\\t""], [""25s\\t""]]",[-2999864999004998501],6375,0:00:00
https://github.com/squid-cache/squid/commit/41d93087a0a99fa4a4c34eba4cf25606229567ff,14 Dec 2007,"Import IPAddress class and unit-tests from squid3-ipv6 branch

This class forms the basis of the IPv6 capable code for squid",2385,data/crawl/squid/hunk_4444.cpp,,,data/crawl/squid/old_hunk_4444.cpp,data/crawl/squid/new_hunk_4444.cpp,-1,588,,"printf(""\nADDRINFO: %x %x %x %x %x %x "",
		  p[0],p[1],p[2],p[3],p[4],p[5] );","[""addLog""]","[[], [""printf"", ""\\nADDRINFO"", ""%x"", ""%x"", ""%x"", ""%x"", ""%x"", ""%x"", ""p[0]"", ""p[1]"", ""p[2]"", ""p[3]"", ""p[4]"", ""p[5]""]]",[34944910071963810791],6374,0:00:00
https://github.com/squid-cache/squid/commit/b8cbc8363d25ef804f33376bfe5276a71e13d2a8,18 Apr 1999,"Added rfc1035BuildPTRQuery()

Changed rfc1035AnswersUnpack() to unpack DNS names into character
buffers so that the upper layers don't have to.   This is the switch
statement inside that function that exectues different copies
based on the record type.",119,data/crawl/squid/hunk_6136.cpp,,,data/crawl/squid/old_hunk_6136.cpp,data/crawl/squid/new_hunk_6136.cpp,-1,24,,"fprintf(stderr, ""can't print answer type %d\n"",
			    (int) answers[i].type);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""can"", ""t"", ""print"", ""answer"", ""type"", ""%d\\n"", ""int"", ""answers[i]"", ""type""]]",[-20887627230986489171],6373,"1581 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b8cbc8363d25ef804f33376bfe5276a71e13d2a8,18 Apr 1999,"Added rfc1035BuildPTRQuery()

Changed rfc1035AnswersUnpack() to unpack DNS names into character
buffers so that the upper layers don't have to.   This is the switch
statement inside that function that exectues different copies
based on the record type.",119,data/crawl/squid/hunk_6136.cpp,,,data/crawl/squid/old_hunk_6136.cpp,data/crawl/squid/new_hunk_6136.cpp,-1,13,,"printf(""%d answers\n"", n);","[""addLog""]","[[], [""printf"", ""%d"", ""answers\\n"", ""n""]]",[15407037849866405185],6372,"1581 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fb29421b28c6150682d9e81aefa0c2df2df689bb,14 Apr 1999,adding rfc1035.c - DNS,491,data/crawl/squid/hunk_6160.cpp,,,data/crawl/squid/old_hunk_6160.cpp,data/crawl/squid/new_hunk_6160.cpp,-1,474,,"printf(""ERROR, ID mismatch (%#hx, %#hx)\n"", sid, rid);","[""addLog""]","[[], [""printf"", ""ERROR"", ""ID"", ""mismatch"", ""%"", ""hx"", ""%"", ""hx"", ""\\n"", ""sid"", ""rid""]]",[14896558406565691660],6371,"1583 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fb29421b28c6150682d9e81aefa0c2df2df689bb,14 Apr 1999,adding rfc1035.c - DNS,491,data/crawl/squid/hunk_6160.cpp,,,data/crawl/squid/old_hunk_6160.cpp,data/crawl/squid/new_hunk_6160.cpp,-1,476,,"printf(""ERROR %d\n"", rfc1035_errno);","[""addLog""]","[[], [""printf"", ""ERROR"", ""%d\\n"", ""rfc1035_errno""]]",[13093585953920806563],6370,"1583 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fb29421b28c6150682d9e81aefa0c2df2df689bb,14 Apr 1999,adding rfc1035.c - DNS,491,data/crawl/squid/hunk_6160.cpp,,,data/crawl/squid/old_hunk_6160.cpp,data/crawl/squid/new_hunk_6160.cpp,-1,455,,"printf(""TIMEOUT\n"");","[""addLog""]","[[], [""printf"", ""TIMEOUT\\n""]]",[15516084845984908385],6369,"1583 days, 0:00:00"
https://github.com/squid-cache/squid/commit/0710cbcd89ad70d205b1aa53384976830d8dc471,14 Dec 2007,"Import RFC 3596 library extenstions from squid3-ipv6 branch.

This library extends the rfc1035 DNS resolver built into squid to handle
RFC 3596 IPv6 extensions for DNS. Namely the AAAA and PTR records.",466,data/crawl/squid/hunk_4442.cpp,,,data/crawl/squid/old_hunk_4442.cpp,data/crawl/squid/new_hunk_4442.cpp,-1,242,,"fprintf(stderr, ""usage: %s [-6|-4] ip port\n"", argv[0]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""usage"", ""%s"", ""["", ""6"", ""4]"", ""ip"", ""port\\n"", ""argv[0]""]]",[-13074344889207801967],6368,0:00:00
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/hunk_4435.cpp,,,data/crawl/squid/old_hunk_4435.cpp,data/crawl/squid/new_hunk_4435.cpp,5,5,"storeAppendPrintf(s, ""\tme: %s:%d\n"",
                              inet_ntoa(conn->me.sin_addr),
                              ntohs(conn->me.sin_port));","storeAppendPrintf(s, ""\tme: %s:%d\n"",
                              conn->me.NtoA(buf,MAX_IPSTRLEN),
                              conn->me.GetPort());","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""addVariable""]","[[""inet_ntoa"", ""sin_addr"", ""ntohs"", ""sin_port""], [""NtoA"", ""buf"", ""MAX_IPSTRLEN"", ""GetPort""]]",[-14131268765468484045],6367,0:00:00
https://github.com/squid-cache/squid/commit/4d62b0af15beebfff0127c2e3c5134a8c3679021,21 Nov 1998,2.1 branch merge,166,data/crawl/squid/hunk_6208.cpp,,,data/crawl/squid/old_hunk_6208.cpp,data/crawl/squid/new_hunk_6208.cpp,-1,16,,"fprintf(stderr, ""Too many -s options, only %d are allowed\n"",	
			MAXNS);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Too"", ""many"", ""s"", ""options"", ""only"", ""%d"", ""are"", ""allowed\\n"", ""MAXNS""]]",[-11357842607344951248],6366,"1655 days, 12:00:00"
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/hunk_4412.cpp,,,data/crawl/squid/old_hunk_4412.cpp,data/crawl/squid/new_hunk_4412.cpp,47,49,"storeAppendPrintf(entry, ""%s %s"", name, inet_ntoa(l->addr));","storeAppendPrintf(entry, ""%s %s"", name, l->addr.NtoA(buf,MAX_IPSTRLEN));","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""inet_ntoa""], [""NtoA"", ""buf"", ""MAX_IPSTRLEN""]]",[-12710812813841780372],6365,0:00:00
https://github.com/squid-cache/squid/commit/cc192b5087ebbd5c214fcacdf26f117e4f15241b,15 Dec 2007,"Import IPv6 support from squid3-ipv6 branch to 3-HEAD.

This patch fully enables squid to handle IPv6 on internally supported
protocols which have IPv6 capability.
see 3.1 Release Notes for full details on the IPv6 changes.
also see squid.conf generated from this point for configuration changes.

TODO: Release-Notes fro 3.1 have yet to be created. The mentioned details
      documentation will come in a later patch.",9997,data/crawl/squid/hunk_4406.cpp,,,data/crawl/squid/old_hunk_4406.cpp,data/crawl/squid/new_hunk_4406.cpp,5,5,"fprintf(stderr, ""%s| %s: error while resolving ip address with getnameinfo: %s\n"", LogTime(), PROGRAM, gai_strerror(rc));","fprintf(stderr, ""%s| %s: error while resolving ip address with getnameinfo: %s\n"", LogTime(), PROGRAM, xgai_strerror(rc));","[""updateVariable""]","[[""gai_strerror""], [""xgai_strerror""]]",[2238227337298578263],6364,0:00:00
https://github.com/squid-cache/squid/commit/bebc043b8df7953e06b2a66ad7b88b362fbc59b5,27 Dec 2007,"Remove the default cache_dir location and the null store type

Many people gets confused by the builtin cache_dir location, thinking
that if there is no cache_dir in squid.conf then there is no on-disk cache.
This removes the builtin default.

By removing the builtin default we can also remove the ""null"" cache_dir
type whos purpose is only to override the builtin default.",410,data/crawl/squid/hunk_4398.cpp,,,data/crawl/squid/old_hunk_4398.cpp,data/crawl/squid/new_hunk_4398.cpp,76,-1,"fatal (""Attempt to get a StoreIO from the NULL store!\n"");",,"[""removeLog""]","[[""fatal"", ""Attempt"", ""to"", ""get"", ""a"", ""StoreIO"", ""from"", ""the"", ""NULL"", ""store"", ""\\n""], []]",[5257834271153246970],6363,0:00:00
https://github.com/squid-cache/squid/commit/a95856a0e5aaaa8b7c588c6052f7dad7127974e2,25 Aug 1997,misc fixes,84,data/crawl/squid/hunk_7053.cpp,,,data/crawl/squid/old_hunk_7053.cpp,data/crawl/squid/new_hunk_7053.cpp,4,-1,"fatal(""No cache_dir's specified in config file"");",,"[""removeLog""]","[[""fatal"", ""No"", ""cache_dir"", ""s"", ""specified"", ""in"", ""config"", ""file""], []]",[5002055989006717529],6362,"1888 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6b2936d5f814e1bbf9619ef82e46a3ac8ab649fb,18 Mar 2005,"From ssl-2.5 2004/04/18 01:09:07

sslcontext parameter, for controlling the SSL Session cache context ID",29,data/crawl/squid/hunk_5075.cpp,,,data/crawl/squid/old_hunk_5075.cpp,data/crawl/squid/new_hunk_5075.cpp,-1,4,,"storeAppendPrintf(e, "" sslcontext=%s"", s->sslcontext);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""sslcontext"", ""%s"", ""s"", ""sslcontext""]]",[4512707690062211733],6361,"530 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5482.cpp,,,data/crawl/squid/old_hunk_5482.cpp,data/crawl/squid/new_hunk_5482.cpp,-1,48,,"storeAppendPrintf(e, "" sslflags=%s"", s->sslflags);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""sslflags"", ""%s"", ""s"", ""sslflags""]]",[14925440976705579641],6360,"946 days, 12:00:00"
https://github.com/squid-cache/squid/commit/35105e4ba73df707e582ef6fb2a55d1133a37392,17 Apr 2003,"dhparams=/path/to/file.pem https_port option to specify DH parameters
for forward-secrecy in encryption (practically denies decryption even
if the private key is known from what I understand).",56,data/crawl/squid/hunk_5266.cpp,,,data/crawl/squid/old_hunk_5266.cpp,data/crawl/squid/new_hunk_5266.cpp,-1,4,,"storeAppendPrintf(e, "" dhparams=%s"", s->dhfile);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""dhparams"", ""%s"", ""s"", ""dhfile""]]",[7434341468065256817],6359,"881 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a82a4fe446707715ba97e5e9a51f1bf9178b0814,19 Mar 2005,"From ssl-2.5 2004/12/02 00:53:40

Basic support for CRL lists",136,data/crawl/squid/hunk_5071.cpp,,,data/crawl/squid/old_hunk_5071.cpp,data/crawl/squid/new_hunk_5071.cpp,-1,4,,"storeAppendPrintf(e, "" crlfile=%s"", s->crlfile);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""crlfile"", ""%s"", ""s"", ""crlfile""]]",[22939110181803402459],6358,"530 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5482.cpp,,,data/crawl/squid/old_hunk_5482.cpp,data/crawl/squid/new_hunk_5482.cpp,-1,46,,"storeAppendPrintf(e, "" capath=%s"", s->capath);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""capath"", ""%s"", ""s"", ""capath""]]",[11859293668491330937],6357,"946 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5482.cpp,,,data/crawl/squid/old_hunk_5482.cpp,data/crawl/squid/new_hunk_5482.cpp,-1,44,,"storeAppendPrintf(e, "" cafile=%s"", s->cafile);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""cafile"", ""%s"", ""s"", ""cafile""]]",[18965929520452225931],6356,"946 days, 12:00:00"
https://github.com/squid-cache/squid/commit/79d4ccdf0a8c242f24a40d774d2c7d4dcdf28047,20 Oct 2001,"SSL update from the ""ssl"" branch at SourceForge

* Several SSL tweaking options
  - SSL version per https_port, no longer a global setting
  - supported chipers, per https_port
  - supported protocols, per https_port
  - connection shutdown method

* Fix the bug reported by Noel Burton-Krahn where SSL connections
  could get hung with data pending in the SSL internal buffers. Mostly
  seen on large POST/PUT requests, but could in theory appear on any
  request larger than 4K.",315,data/crawl/squid/hunk_5753.cpp,,,data/crawl/squid/old_hunk_5753.cpp,data/crawl/squid/new_hunk_5753.cpp,-1,14,,"storeAppendPrintf(e, "" cipher=%s"", s->cipher);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""cipher"", ""%s"", ""s"", ""cipher""]]",[-627383025728602375],6355,"1153 days, 0:00:00"
https://github.com/squid-cache/squid/commit/79d4ccdf0a8c242f24a40d774d2c7d4dcdf28047,20 Oct 2001,"SSL update from the ""ssl"" branch at SourceForge

* Several SSL tweaking options
  - SSL version per https_port, no longer a global setting
  - supported chipers, per https_port
  - supported protocols, per https_port
  - connection shutdown method

* Fix the bug reported by Noel Burton-Krahn where SSL connections
  could get hung with data pending in the SSL internal buffers. Mostly
  seen on large POST/PUT requests, but could in theory appear on any
  request larger than 4K.",315,data/crawl/squid/hunk_5753.cpp,,,data/crawl/squid/old_hunk_5753.cpp,data/crawl/squid/new_hunk_5753.cpp,-1,12,,"storeAppendPrintf(e, "" options=%s"", s->options);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""options"", ""%s"", ""s"", ""options""]]",[7893954684300028237],6354,"1153 days, 0:00:00"
https://github.com/squid-cache/squid/commit/79d4ccdf0a8c242f24a40d774d2c7d4dcdf28047,20 Oct 2001,"SSL update from the ""ssl"" branch at SourceForge

* Several SSL tweaking options
  - SSL version per https_port, no longer a global setting
  - supported chipers, per https_port
  - supported protocols, per https_port
  - connection shutdown method

* Fix the bug reported by Noel Burton-Krahn where SSL connections
  could get hung with data pending in the SSL internal buffers. Mostly
  seen on large POST/PUT requests, but could in theory appear on any
  request larger than 4K.",315,data/crawl/squid/hunk_5753.cpp,,,data/crawl/squid/old_hunk_5753.cpp,data/crawl/squid/new_hunk_5753.cpp,-1,10,,"storeAppendPrintf(e, "" version=%d"", s->version);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""version"", ""%d"", ""s"", ""version""]]",[9558444992649947300],6353,"1153 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7ad6e4e64c71376d504e1e1727b2c7b7930898d,07 Dec 2002,"SSL support update

 - Support for outgoing SSL connetions
   - SSL encrypted peers
   - https:// gatewaying for clients not supporting SSL
     or URLs rewritten via a redirector to https://...

 - Client certificate support

 - Hardware crypto SSL acceleration support via OpenSSL engine

 - SSL key/certificate now read while parsing squid.conf to
   support secure key protection and chroot.

 - A few minor bugfixes/optimizations",1106,data/crawl/squid/hunk_5482.cpp,,,data/crawl/squid/old_hunk_5482.cpp,data/crawl/squid/new_hunk_5482.cpp,-1,34,,"storeAppendPrintf(e, "" cert=%s"", s->cert);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""cert"", ""%s"", ""s"", ""cert""]]",[16132876345930463543],6352,"946 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c99de60701b56be31c01be2045d204ed411e33ca,01 Nov 2006,"	- Many ICAP fixes from Alex Rousskov accumulated on the
	  sourceforge squid3-icap branch since 2006/10, including:

        - Polished ICAP service selection code and implemented bypass of
          optional services. The code implements icap_class
          configuration directive which is currently used as a ""set of
          interchangeable ICAP services"". Squid2 and current squid.conf
          may imply otherwise.

        - Support Transfer-* ICAP OPTIONS response header. If Squid
          knows that a service does not want the URL, Squid will not use
          the service, even if it is an essential service with
          bypass=0. Note that we may make this decision before we know
          what the service wants. Eventually, ACLs should initiate and
          wait for the OPTIONS transaction for yet-unprobed services.

        - When ICAP transactions fail to connect to the service many
          times, the service is suspended until the next OPTIONS
          update. The limit is currently hard-coded to 10. Suspended
          service is a down service and will be skipped by the ACL
          service selection algorithm.

        - Rewrote the code updating ICAP service options. We no longer
          mark the service being updated as ""down"". Only presence of
          valid and fresh options is important. We also try to update
          the options before they expire to avoid any service downtime
          or use of stale options.

        - Report interesting changes in the ICAP service state, some
          with debugging level one to alert the cache administrator.

        - When cloning a request during an ICAP 204 ""No Content"" REQMOD
          response, preserve the client address so that the rest of the
          code has access to it. This change appears to fix Squid Bug
          #1712.

        - After ICAP 100 Continue, expect new ICAP headers instead of
          HTTP headers. Reset ICAP message object to be ready to parse
          ICAP headers again. (Tsantilas Christos
          <chtsanti@users.sourceforge.net>)

        - The ieof HTTP chunk-extension was written after chunk-data
          instead of being written after the chunk-size. (Tsantilas
          Christos <chtsanti@users.sourceforge.net>)

        - Merged common code from the ICAPClientReqmodPrecache and
          ICAPClientReqmodPrecache classes into the newly added
          ICAPClientVector class.  The specific vectors do not have a
          common owner (yet?) because ServerStateData and
          ClientHttpRequest do not have a common base class. Thus,
          ICAPClientVector has to rely on its kids to communicate with
          their owners. However, at least 50% of the logic was common
          and has been moved. Eventually, we may want to create a
          simple ICAPOwner API that ServerStateData and
          ClientHttpRequest can implement and ICAPClientVector can rely
          on. This will make the code simpler and more efficient.  The
          big merge was motivated by a couple of bugs that were found
          in one vector class but that did not exist or behaved
          differently in the other vector, mostly likely due to natural
          diversion of used-to-be identical code.

        - Rewrote communication between a server-side ICAPClient*mod*
          vector and its owner.  When a server-side ICAPClient*mod*
          vector was notifying its owner of more adapted data, the
          owner could delete the vector (by calling icap->ownerAbort)
          if the store entry was not willing to accept the data.  The
          same deletion could happen when a vector was notifying the
          owner of a successful termination. In all those cases, the
          vector did not expect to be deleted and could continue to do
          something, causing segmentation faults.  Now, when more data
          is available, the vector calls its owner and checks the
          return value of the call. If it is false, the vector knows it
          has been deleted and quits. When vector terminates, it calls
          its owner and trusts the owner to always delete the vector.
          The ""check return value and quit"" design is not perfect, but
          we are paying the price for isolating the vectors from their
          owners while using direct calls between them (instead of
          MsgPipe or a similar less efficient indirect approach we use
          elsewhere).

        - Renamed doIcap to startIcap and moved more common code there.
          Changed its return type to bool. We now handle three cases
          when ICAP ACLs call back:  1) No service was selected
          (because there was no applicable service or because all
          applicable services were broken and optional). We proceed as
          if ICAP was not configured.  2) The selected essential
          service is broken. This is a fatal transaction error and we
          return an ""ICAP protocol error"" HTTP error response. We could
          proceed with the ICAP stuff, but it saves a lot of cycles to
          abort early.  3) The selected service is not broken. We
          proceed with the ICAP stuff.  The old code did not detect
          case #2, even though there was code to handle that case (with
          dangerous XXX suggestions that are now gone).  The code
          should probably be polished further to move common ftp/http
          logic from icapAclCheckDone()s into ServerStateData.

        - Make sure there is an accept callback when we are accepting.
          If there is no callback and we accept, we will silently leak
          the accepted FD.  When we are running out of FDs, there is
          often no accept callback.  The old code, when running out of
          FDs, would create lots of ""orphaned"" or ""forgotten"" FDs that
          will eventually get into a CLOSED_WAIT state and remain there
          until Squid quits.  The new code does not call accept() if
          there is no accept callback and does not register the accept
          FD for reading if the AcceptLimiter is deferring, because
          when the AcceptLimiter kicks in, it will register the accept
          FD for reading. There are most likely other places/cases
          where accept FD should not be registered for reading.

        - When an exception is caught, mark the ICAP connection as
          non-reusable so that it is not recycled while a write is
          pending but simply closed instead. Our write callback will
          still be called, unfortunately, because there is no way to
          clear the callback without invalidating its data (i.e., the
          transaction pointer).  This change prevents pconn.cc:253:
          ""!comm_has_incomplete_write(fd)"" assertion from firing when
          things go wrong (e.g., the ICAP server cannot be contacted to
          retrieve OPTIONS).  Not all exceptions caught by the ICAP
          xaction should lead to the ICAP connection termination, but
          it is very difficult if not impossible to reliably detect
          exceptional conditions when it is safe to reuse the ICAP
          connection, and it is probably not worth it anyway.

        - Added Tsantilas Christos <chtsanti@users.sourceforge.net>
          to CONTRIBUTORS for fixing ICAP bugs.

        - Polished debugging.",2091,data/crawl/squid/hunk_4733.cpp,,,data/crawl/squid/old_hunk_4733.cpp,data/crawl/squid/new_hunk_4733.cpp,-1,18,,"suspend(""too many failures"");","[""addLog""]","[[], [""suspend"", ""too"", ""many"", ""failures""]]",[-4129503642083642598],6351,"252 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e4aedcd7ba4f1c67f46abb76d87f442e9830c5c3,25 Mar 1998,adding,1873,data/crawl/squid/hunk_6582.cpp,,,data/crawl/squid/old_hunk_6582.cpp,data/crawl/squid/new_hunk_6582.cpp,-1,570,,"printf (""mips-sony-bsd\n"");","[""addLog""]","[[], [""printf"", ""mips"", ""sony"", ""bsd\\n""]]",[2553307903029636181],6350,"1824 days, 0:00:00"
https://github.com/squid-cache/squid/commit/774c051c0de35e84451b1752874015654c7b48d0,22 Nov 2005,Adding ICAP library files,6049,data/crawl/squid/hunk_4925.cpp,,,data/crawl/squid/old_hunk_4925.cpp,data/crawl/squid/new_hunk_4925.cpp,-1,329,,"storeAppendPrintf(entry, ""%s %s\n"", name, (*i)->key.buf());","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s\\n"", ""name"", ""*i"", ""key"", ""buf""]]",[14867700258963789652],6349,"429 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b297bcd06f78f38f83aca7053f93b53d40e7ff4f,15 Mar 2008,"Properly build a cloned reply, and skip reading of large headers

more work remains to fix up the other paths (cache hits, IMS, Vary?)",198,data/crawl/squid/hunk_4353.cpp,,,data/crawl/squid/old_hunk_4353.cpp,data/crawl/squid/new_hunk_4353.cpp,36,-1,"fatal (""clientReplyContext::sendMoreData: Unreachable code reached \n"");",,"[""removeLog""]","[[""fatal"", ""clientReplyContext"", ""sendMoreData"", ""Unreachable"", ""code"", ""reached"", ""\\n""], []]",[-1677454505947847211],6348,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/64bdef96ce94ed48c38fd37e063fdbd7cf8cce5f,30 Mar 2008,"Moved configuration options that do not depend on the adaptation method
from ICAP/ICAPConfig to adaptation/Config. ICAP and eCAP will not share
the same base configuration but will share the same base configuration code
(i.e., there will be two independent ICAPConfig and ecap::Config objects,
but they will have a common parent).

Implemented delayed creation of adaptation services. We used to create
ICAPServiceRep objects when parsing the configuration file.
Create-as-you-parse is imperfect for several reasons, especially if the
services are dynamically loaded as is the case with eCAP. We now remember the
service configuration and then create the actual service object _after_ the
configuration has been parsed and loadable modules, if any, have been loaded.

No functional changes are expected from this change.",1120,data/crawl/squid/hunk_4337.cpp,,,data/crawl/squid/old_hunk_4337.cpp,data/crawl/squid/new_hunk_4337.cpp,-1,382,,"storeAppendPrintf(entry, ""%s %s_%s %s %d %s\n"", name, cfg.key.buf(),
            cfg.methodStr(), cfg.vectPointStr(), cfg.bypass, cfg.uri.buf());","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s_%s"", ""%s"", ""%d"", ""%s\\n"", ""name"", ""cfg"", ""key"", ""buf"", ""cfg"", ""methodStr"", ""cfg"", ""vectPointStr"", ""cfg"", ""bypass"", ""cfg"", ""uri"", ""buf""]]",[8275548490987375526],6347,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0bef8dd7255b92e0f0de92ddb516f6eb2eb59dd2,30 Mar 2008,"Renamed types and members after moving adaptation-method-agnostic APIs to the
Adaptation namespace and adding support for delayed adaptation service
creation.",148,data/crawl/squid/hunk_4335.cpp,,,data/crawl/squid/old_hunk_4335.cpp,data/crawl/squid/new_hunk_4335.cpp,5,5,"buf.Printf(""Host: %s:%d\r\n"", s.host.buf(), s.port);","buf.Printf(""Host: %s:%d\r\n"", s.cfg().host.buf(), s.cfg().port);","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[], [""cfg"", ""cfg""]]",[-1598062591627235054],6346,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0bef8dd7255b92e0f0de92ddb516f6eb2eb59dd2,30 Mar 2008,"Renamed types and members after moving adaptation-method-agnostic APIs to the
Adaptation namespace and adding support for delayed adaptation service
creation.",148,data/crawl/squid/hunk_4335.cpp,,,data/crawl/squid/old_hunk_4335.cpp,data/crawl/squid/new_hunk_4335.cpp,4,4,"buf.Printf(""OPTIONS %s ICAP/1.0\r\n"", s.uri.buf());","buf.Printf(""OPTIONS %s ICAP/1.0\r\n"", s.cfg().uri.buf());","[""moveVariable"", ""addVariable""]","[[], [""cfg""]]",[-799031295813617527],6345,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/64bdef96ce94ed48c38fd37e063fdbd7cf8cce5f,30 Mar 2008,"Moved configuration options that do not depend on the adaptation method
from ICAP/ICAPConfig to adaptation/Config. ICAP and eCAP will not share
the same base configuration but will share the same base configuration code
(i.e., there will be two independent ICAPConfig and ecap::Config objects,
but they will have a common parent).

Implemented delayed creation of adaptation services. We used to create
ICAPServiceRep objects when parsing the configuration file.
Create-as-you-parse is imperfect for several reasons, especially if the
services are dynamically loaded as is the case with eCAP. We now remember the
service configuration and then create the actual service object _after_ the
configuration has been parsed and loadable modules, if any, have been loaded.

No functional changes are expected from this change.",1120,data/crawl/squid/hunk_4336.cpp,,,data/crawl/squid/old_hunk_4336.cpp,data/crawl/squid/new_hunk_4336.cpp,352,-1,"fatalf(""Did not find ICAP class '%s' referenced on line %d\n"",
               aKey.buf(), config_lineno);",,"[""removeLog""]","[[""fatalf"", ""Did"", ""not"", ""find"", ""ICAP"", ""class"", ""%s"", ""referenced"", ""on"", ""line"", ""%d\\n"", ""aKey"", ""buf"", ""config_lineno""], []]",[-23416213931012236585],6344,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/64bdef96ce94ed48c38fd37e063fdbd7cf8cce5f,30 Mar 2008,"Moved configuration options that do not depend on the adaptation method
from ICAP/ICAPConfig to adaptation/Config. ICAP and eCAP will not share
the same base configuration but will share the same base configuration code
(i.e., there will be two independent ICAPConfig and ecap::Config objects,
but they will have a common parent).

Implemented delayed creation of adaptation services. We used to create
ICAPServiceRep objects when parsing the configuration file.
Create-as-you-parse is imperfect for several reasons, especially if the
services are dynamically loaded as is the case with eCAP. We now remember the
service configuration and then create the actual service object _after_ the
configuration has been parsed and loadable modules, if any, have been loaded.

No functional changes are expected from this change.",1120,data/crawl/squid/hunk_4336.cpp,,,data/crawl/squid/old_hunk_4336.cpp,data/crawl/squid/new_hunk_4336.cpp,339,-1,"storeAppendPrintf(entry, ""%s %s\n"", name, (*i)->key.buf());",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s\\n"", ""name"", ""*i"", ""key"", ""buf""], []]",[-14867700258963789652],6343,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/64bdef96ce94ed48c38fd37e063fdbd7cf8cce5f,30 Mar 2008,"Moved configuration options that do not depend on the adaptation method
from ICAP/ICAPConfig to adaptation/Config. ICAP and eCAP will not share
the same base configuration but will share the same base configuration code
(i.e., there will be two independent ICAPConfig and ecap::Config objects,
but they will have a common parent).

Implemented delayed creation of adaptation services. We used to create
ICAPServiceRep objects when parsing the configuration file.
Create-as-you-parse is imperfect for several reasons, especially if the
services are dynamically loaded as is the case with eCAP. We now remember the
service configuration and then create the actual service object _after_ the
configuration has been parsed and loadable modules, if any, have been loaded.

No functional changes are expected from this change.",1120,data/crawl/squid/hunk_4336.cpp,,,data/crawl/squid/old_hunk_4336.cpp,data/crawl/squid/new_hunk_4336.cpp,310,-1,"storeAppendPrintf(entry, ""%s %s_%s %s %d %s\n"", name, r->key.buf(),
                          r->methodStr(), r->vectPointStr(), r->bypass, r->uri.buf());",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s_%s"", ""%s"", ""%d"", ""%s\\n"", ""name"", ""r"", ""key"", ""buf"", ""r"", ""methodStr"", ""r"", ""vectPointStr"", ""r"", ""bypass"", ""r"", ""uri"", ""buf""], []]",[-12270705043015682616],6342,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/04f874690ce86ba252f172a34d374ad38d1edea5,08 Apr 2008,Move need_linux_tproxy to a property of the Interception manager,183,data/crawl/squid/hunk_4326.cpp,,,data/crawl/squid/old_hunk_4326.cpp,data/crawl/squid/new_hunk_4326.cpp,-1,26,,"IPInterceptor.StopTransparency(""Missing needed capability support."");","[""addLog""]","[[], [""IPInterceptor"", ""StopTransparency"", ""Missing"", ""needed"", ""capability"", ""support""]]",[19422512612443402713],6341,"8 days, 0:00:00"
https://github.com/squid-cache/squid/commit/04f874690ce86ba252f172a34d374ad38d1edea5,08 Apr 2008,Move need_linux_tproxy to a property of the Interception manager,183,data/crawl/squid/hunk_4326.cpp,,,data/crawl/squid/old_hunk_4326.cpp,data/crawl/squid/new_hunk_4326.cpp,-1,16,,"IPInterceptor.StopTransparency(""Error enabling needed capabilities."");","[""addLog""]","[[], [""IPInterceptor"", ""StopTransparency"", ""Error"", ""enabling"", ""needed"", ""capabilities""]]",[16953699030959064077],6340,"8 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2ad20b4f9eaac9470dc18d4ad9153aa29b4f8422,09 Apr 2008,"Make transparency flags always-present. Rename flags 'transparent' to 'intercepted'

This minimizes the differences in code between multiple supported types of
transparency and interception.

The flag renaming is pure code cleanup, making the names much more descriptive
of the actual meaning of the flags.

TODO: currently remaining 'tproxy' flag needs changing to 'spoof_client_ip'

TODO: testing of code changes.

TODO: failover mechanism between two netfilter suported methods.",122,data/crawl/squid/hunk_4322.cpp,,,data/crawl/squid/old_hunk_4322.cpp,data/crawl/squid/new_hunk_4322.cpp,4,4,"storeAppendPrintf(e, "" transparent"");","storeAppendPrintf(e, "" intercept"");","[""updateContent""]","[[""transparent""], [""intercept""]]",[-2470343994809172362],6339,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a9925b40bf8179ee4468c997960413a6d510abf5,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,903,data/crawl/squid/hunk_4837.cpp,,,data/crawl/squid/old_hunk_4837.cpp,data/crawl/squid/new_hunk_4837.cpp,-1,31,,"hdr_out->putStr(HDR_X_FORWARDED_FOR, strFwd.buf());","[""addLog""]","[[], [""hdr_out"", ""putStr"", ""HDR_X_FORWARDED_FOR"", ""strFwd"", ""buf""]]",[-12933192661661450107],6338,"367 days, 0:00:00"
https://github.com/squid-cache/squid/commit/736a9a4df38fb23926e09c7b3c1cfb34c4b1779b,31 Oct 2005,"Windows port: addition of native external ACL helper.

- mswin_check_lm_group:  Windows domain groups membership check
                         (Based on Windows Lan Manager framework)

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",1343,data/crawl/squid/hunk_4939.cpp,,,data/crawl/squid/old_hunk_4939.cpp,data/crawl/squid/new_hunk_4939.cpp,-1,60,,"fprintf(stderr, ""%s[%d]: "", myname, mypid);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s[%d]"", ""myname"", ""mypid""]]",[-19957182019804867126],6337,"464 days, 12:00:00"
https://github.com/squid-cache/squid/commit/736a9a4df38fb23926e09c7b3c1cfb34c4b1779b,31 Oct 2005,"Windows port: addition of native external ACL helper.

- mswin_check_lm_group:  Windows domain groups membership check
                         (Based on Windows Lan Manager framework)

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",1343,data/crawl/squid/hunk_4938.cpp,,,data/crawl/squid/old_hunk_4938.cpp,data/crawl/squid/new_hunk_4938.cpp,-1,540,,"fprintf(stderr, ""%s Can't read machine domain\n"", myname);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""Can"", ""t"", ""read"", ""machine"", ""domain\\n"", ""myname""]]",[-12245317477140391123],6336,"464 days, 12:00:00"
https://github.com/squid-cache/squid/commit/736a9a4df38fb23926e09c7b3c1cfb34c4b1779b,31 Oct 2005,"Windows port: addition of native external ACL helper.

- mswin_check_lm_group:  Windows domain groups membership check
                         (Based on Windows Lan Manager framework)

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",1343,data/crawl/squid/hunk_4938.cpp,,,data/crawl/squid/old_hunk_4938.cpp,data/crawl/squid/new_hunk_4938.cpp,-1,502,,"fprintf(stderr, ""%s Unknown option: -%c. Exiting\n"", myname, opt);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""Unknown"", ""option"", ""%c"", ""Exiting\\n"", ""myname"", ""opt""]]",[-5167440251014052868],6335,"464 days, 12:00:00"
https://github.com/squid-cache/squid/commit/736a9a4df38fb23926e09c7b3c1cfb34c4b1779b,31 Oct 2005,"Windows port: addition of native external ACL helper.

- mswin_check_lm_group:  Windows domain groups membership check
                         (Based on Windows Lan Manager framework)

Supported build environment:

- Cygwin
- MSYS + MinGW
- MS VisualStudio C++ 2005",1343,data/crawl/squid/hunk_4938.cpp,,,data/crawl/squid/old_hunk_4938.cpp,data/crawl/squid/new_hunk_4938.cpp,-1,439,,"fprintf(stderr, ""%s NetUserGetGroups() failed.'\n"", myname);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""NetUserGetGroups"", ""failed"", ""\\n"", ""myname""]]",[-17474047509400514334],6334,"464 days, 12:00:00"
https://github.com/squid-cache/squid/commit/63104e28d3eef6502550733c16b04c982c0e1776,11 Jul 2008,copy carp.cc to peer_userhash.cc and peer_sourcehash.cc,454,data/crawl/squid/hunk_4265.cpp,,,data/crawl/squid/old_hunk_4265.cpp,data/crawl/squid/new_hunk_4265.cpp,-1,220,,"storeAppendPrintf(sentry, ""%24s %10x %10f %10f %10f\n"",
                          p->name, p->carp.hash,
                          p->carp.load_multiplier,
                          p->carp.load_factor,
                          sumfetches ? (double) p->stats.fetches / sumfetches : -1.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%24s"", ""%10x"", ""%10f"", ""%10f"", ""%10f\\n"", ""p"", ""name"", ""p"", ""carp"", ""hash"", ""p"", ""carp"", ""load_multiplier"", ""p"", ""carp"", ""load_factor"", ""sumfetches"", ""double"", ""p"", ""stats"", ""fetches"", ""/"", ""sumfetches"", ""1"", ""0""]]",[28716339615727585681],6333,0:00:00
https://github.com/squid-cache/squid/commit/f7e1d9ce938bdf65747a119f063b3faa3d9ba9d9,11 Jul 2008,The needed glue and function renames to integrate userhash and soucehash,242,data/crawl/squid/hunk_4261.cpp,,,data/crawl/squid/old_hunk_4261.cpp,data/crawl/squid/new_hunk_4261.cpp,-1,10,,"storeAppendPrintf(sentry, "" sourcehash"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""sourcehash""]]",[13456601144098761739],6332,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/f7e1d9ce938bdf65747a119f063b3faa3d9ba9d9,11 Jul 2008,The needed glue and function renames to integrate userhash and soucehash,242,data/crawl/squid/hunk_4261.cpp,,,data/crawl/squid/old_hunk_4261.cpp,data/crawl/squid/new_hunk_4261.cpp,-1,7,,"storeAppendPrintf(sentry, "" userhash"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""userhash""]]",[-1248503893836483949],6331,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/f7e1d9ce938bdf65747a119f063b3faa3d9ba9d9,11 Jul 2008,The needed glue and function renames to integrate userhash and soucehash,242,data/crawl/squid/hunk_4261.cpp,,,data/crawl/squid/old_hunk_4261.cpp,data/crawl/squid/new_hunk_4261.cpp,-1,4,,"storeAppendPrintf(sentry, "" carp"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""carp""]]",[11542197183133705300],6330,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/f7e1d9ce938bdf65747a119f063b3faa3d9ba9d9,11 Jul 2008,The needed glue and function renames to integrate userhash and soucehash,242,data/crawl/squid/hunk_4260.cpp,,,data/crawl/squid/old_hunk_4260.cpp,data/crawl/squid/new_hunk_4260.cpp,-1,11,,"fatalf(""parse_peer: non-parent sourcehash peer %s/%d\n"", p->host, p->http_port);","[""addLog""]","[[], [""fatalf"", ""parse_peer"", ""non"", ""parent"", ""sourcehash"", ""peer"", ""%s/%d\\n"", ""p"", ""host"", ""p"", ""http_port""]]",[52085279935869630301],6329,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/f7e1d9ce938bdf65747a119f063b3faa3d9ba9d9,11 Jul 2008,The needed glue and function renames to integrate userhash and soucehash,242,data/crawl/squid/hunk_4260.cpp,,,data/crawl/squid/old_hunk_4260.cpp,data/crawl/squid/new_hunk_4260.cpp,-1,5,,"fatalf(""parse_peer: non-parent userhash peer %s/%d\n"", p->host, p->http_port);","[""addLog""]","[[], [""fatalf"", ""parse_peer"", ""non"", ""parent"", ""userhash"", ""peer"", ""%s/%d\\n"", ""p"", ""host"", ""p"", ""http_port""]]",[37380174897934384613],6328,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/c70281f8bdba2a5f525ddea764667975bbd79eb3,22 Jul 2008,"Cleanups: shuffle ErrorState functions into methods.

No other changes than namespace moves.",228,data/crawl/squid/hunk_4249.cpp,,,data/crawl/squid/old_hunk_4249.cpp,data/crawl/squid/new_hunk_4249.cpp,19,19,"mb.Printf(""%s %s HTTP/%d.%d\n"",
                      RequestMethodStr(r->method),
                      r->urlpath.size() ? r->urlpath.buf() : ""/"",
                      r->http_ver.major, r->http_ver.minor);","mb.Printf(""%s %s HTTP/%d.%d\n"",
                      RequestMethodStr(request->method),
                      request->urlpath.size() ? request->urlpath.buf() : ""/"",
                      request->http_ver.major, request->http_ver.minor);","[""updateVariable""]","[[""r"", ""r"", ""r"", ""r"", ""r""], [""request"", ""request"", ""request"", ""request"", ""request""]]",[-9533800145018408355],6327,0:00:00
https://github.com/squid-cache/squid/commit/c70281f8bdba2a5f525ddea764667975bbd79eb3,22 Jul 2008,"Cleanups: shuffle ErrorState functions into methods.

No other changes than namespace moves.",228,data/crawl/squid/hunk_4246.cpp,,,data/crawl/squid/old_hunk_4246.cpp,data/crawl/squid/new_hunk_4246.cpp,29,29,"mb.Printf(""(%d) %s"", err->xerrno, strerror(err->xerrno));","mb.Printf(""(%d) %s"", xerrno, strerror(xerrno));","[""removeVariable"", ""addVariable""]","[[""err"", ""err""], []]",[6102284641630666036],6326,0:00:00
https://github.com/squid-cache/squid/commit/8eb28163c0f4a842e4ad80d5c3907d17e3dcbf64,09 Aug 2008,"Bug 2379: obsolete dns_testnames option

Removes the dns_testnames squid.conf option and all related code.

Obsoletes -D command line option which existed only for the purpose of
turning dns_testnames off. Scheduled for absolute removal in Squid
3.2. But should be assumed as non-existing from 3.1 onwards.",57,data/crawl/squid/hunk_4242.cpp,,,data/crawl/squid/old_hunk_4242.cpp,data/crawl/squid/new_hunk_4242.cpp,11,-1,"fatal(""ipcache_init: DNS name lookup tests failed."");",,"[""removeLog""]","[[""fatal"", ""ipcache_init"", ""DNS"", ""name"", ""lookup"", ""tests"", ""failed""], []]",[39169918527781651479],6325,12:00:00
https://github.com/squid-cache/squid/commit/4f4fa8157d4837aada53582861fa9efff6491d8a,01 Sep 2008,Checkpoint HTCP merge.,360,data/crawl/squid/hunk_4228.cpp,,,data/crawl/squid/old_hunk_4228.cpp,data/crawl/squid/new_hunk_4228.cpp,-1,13,,"fatalf(""parse_peer: can't set htcp-no-clr and htcp-only-clr simultaneously"");","[""addLog""]","[[], [""fatalf"", ""parse_peer"", ""can"", ""t"", ""set"", ""htcp"", ""no"", ""clr"", ""and"", ""htcp"", ""only"", ""clr"", ""simultaneously""]]",[21038964246641495832],6324,0:00:00
https://github.com/squid-cache/squid/commit/6e1d409c65c63e90343e9156a43dbbc87ff96e59,11 Sep 2008,"Cleaned up ConnStateData's closing and destruction.

1) Despite its name and the ""if (open) close"" use in ConnStateData destructor,
ConnStateData::close() was not closing anything. It was called from the Comm
close handler and from the destructor and would attempt to immediately delete
the ConnStateData object. Protecting code in deleteThis() may have prevented
the actual [double] delete from happening, but it is difficult to say exactly
what was going on when close() was being called from the destructor.

I converted ConnStateData::close to swanSong, which is the standard AsyncJob
cleanup method. As before, the method does not close anything (which may be
wrong). The swanSong method is never called directly by the user code. It is
called by lower layers just before the job is destroyed.

We may need to add Comm closing code to swanSong. For now, the updated
ConnStateData destructor will warn if ConnStateData forgot to close
the connection. The destructor will also warn if swanSong was not called,
which would mean that the job object is being deleted incorrectly.


2) Polished ClientSocketContext::writeComplete to distinguish
STREAM_UNPLANNED_COMPLETE from STREAM_FAILED closing state. This helps when
looking at stack traces.


3) Added an XXX comment about duplicated code.


4) Documented ClientSocketContext::initiateClose purpose and context.",29,data/crawl/squid/hunk_4225.cpp,,,data/crawl/squid/old_hunk_4225.cpp,data/crawl/squid/new_hunk_4225.cpp,6,3,"initiateClose(""STREAM_UNPLANNED_COMPLETE|STREAM_FAILED"");","initiateClose(""STREAM_UNPLANNED_COMPLETE"");","[""updateContent""]","[[""STREAM_FAILED""], []]",[3085963687330655591],6323,12:00:00
https://github.com/squid-cache/squid/commit/ccb2461629f5ed95f6cf1e24893d3a3068fcd728,13 Sep 2008,Updates auto-save,18,data/crawl/squid/hunk_4216.cpp,,,data/crawl/squid/old_hunk_4216.cpp,data/crawl/squid/new_hunk_4216.cpp,-1,11,,"httpHeaderPutStrf(&rep->header, HDR_CONTENT_LANGUAGE, ""en"");","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""HDR_CONTENT_LANGUAGE"", ""en""]]",[499558517842474346],6322,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ccb2461629f5ed95f6cf1e24893d3a3068fcd728,13 Sep 2008,Updates auto-save,18,data/crawl/squid/hunk_4216.cpp,,,data/crawl/squid/old_hunk_4216.cpp,data/crawl/squid/new_hunk_4216.cpp,-1,6,,"httpHeaderPutStrf(&rep->header, HDR_CONTENT_LANGUAGE, ""%s"", err_language);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""HDR_CONTENT_LANGUAGE"", ""%s"", ""err_language""]]",[4034035064471382903],6321,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5bf33a09d279fd519bf356975be6e55f955c3e2d,13 Sep 2008,"Set Content-Language and Vary headers on negotiated errors

It's also polite to send the proper Content-Language.
Error page language-negotiation requires us to send the Vary header.",36,data/crawl/squid/hunk_4215.cpp,,,data/crawl/squid/old_hunk_4215.cpp,data/crawl/squid/new_hunk_4215.cpp,-1,13,,"httpHeaderPutStrf(&rep->header, HDR_VARY, ""Accept-Language"");","[""addLog""]","[[], [""httpHeaderPutStrf"", ""&rep"", ""header"", ""HDR_VARY"", ""Accept"", ""Language""]]",[-27758946439854485837],6320,"4 days, 0:00:00"
https://github.com/squid-cache/squid/commit/451c478622c1a61110811c3043eceabe1bd52aaf,12 Sep 2008,reply and assignment methods are not actually linked,87,data/crawl/squid/hunk_4222.cpp,,,data/crawl/squid/old_hunk_4222.cpp,data/crawl/squid/new_hunk_4222.cpp,-1,39,,"storeAppendPrintf(e, ""%s mask\n"", label);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%s"", ""mask\\n"", ""label""]]",[998743031190025684],6319,"5 days, 12:00:00"
https://github.com/squid-cache/squid/commit/451c478622c1a61110811c3043eceabe1bd52aaf,12 Sep 2008,reply and assignment methods are not actually linked,87,data/crawl/squid/hunk_4222.cpp,,,data/crawl/squid/old_hunk_4222.cpp,data/crawl/squid/new_hunk_4222.cpp,-1,36,,"storeAppendPrintf(e, ""%s hash\n"", label);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%s"", ""hash\\n"", ""label""]]",[4439531265018932300],6318,"5 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e313ab0aa78bcb1330577f050cd0f06ba2fdf7c6,10 Sep 2008,Friendly WCCPv2 method config,84,data/crawl/squid/hunk_4227.cpp,,,data/crawl/squid/old_hunk_4227.cpp,data/crawl/squid/new_hunk_4227.cpp,-1,39,,"storeAppendPrintf(e, ""%s l2\n"", label);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%s"", ""l2\\n"", ""label""]]",[2913227151504063712],6317,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e313ab0aa78bcb1330577f050cd0f06ba2fdf7c6,10 Sep 2008,Friendly WCCPv2 method config,84,data/crawl/squid/hunk_4227.cpp,,,data/crawl/squid/old_hunk_4227.cpp,data/crawl/squid/new_hunk_4227.cpp,-1,36,,"storeAppendPrintf(e, ""%s gre\n"", label);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""%s"", ""gre\\n"", ""label""]]",[-2538537717342581857],6316,"6 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6e92b048e29b6576c1bc0be9bf18140aef5a3f95,22 Sep 2008,"Call failed(ERR_FTP_FAILURE, 0) when data channel is closed unexpectidly,
to force control channel closure. Apparently, FtpStateData does not close
that channel when cleaning up.

Added and polished comments.",13,data/crawl/squid/hunk_4212.cpp,,,data/crawl/squid/old_hunk_4212.cpp,data/crawl/squid/new_hunk_4212.cpp,-1,16,,"failed(ERR_FTP_FAILURE, 0);","[""addLog""]","[[], [""failed"", ""ERR_FTP_FAILURE"", ""0""]]",[-11611541700384122136],6315,12:00:00
https://github.com/squid-cache/squid/commit/d9572179194cba721c4dab65f14581e5ad8a1c1c,23 Jun 2002,"external acl support. A mechanism where flexible ACL checks can be driven
by external helpers.",1022,data/crawl/squid/hunk_5638.cpp,,,data/crawl/squid/old_hunk_5638.cpp,data/crawl/squid/new_hunk_5638.cpp,-1,297,,"storeAppendPrintf(sentry, "" %%{%s:%s}"", format->header, format->member);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%%"", ""%s"", ""%s"", ""format"", ""header"", ""format"", ""member""]]",[12951319293946202013],6314,"1142 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d9572179194cba721c4dab65f14581e5ad8a1c1c,23 Jun 2002,"external acl support. A mechanism where flexible ACL checks can be driven
by external helpers.",1022,data/crawl/squid/hunk_5638.cpp,,,data/crawl/squid/old_hunk_5638.cpp,data/crawl/squid/new_hunk_5638.cpp,-1,293,,"storeAppendPrintf(sentry, "" %%{%s}"", format->header);","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""%%"", ""%s"", ""format"", ""header""]]",[3131119357339662664],6313,"1142 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ea76d91e0b7d12414eb047f145bbf437f4c34d4d,29 Sep 2008,"Polished code by introducing two explicit and mostly independent states
(proxying virgin body and proxying adapted body) as well as a flag to
check for virgin body content access after the pipe was invalidated.",240,data/crawl/squid/hunk_4198.cpp,,,data/crawl/squid/old_hunk_4198.cpp,data/crawl/squid/new_hunk_4198.cpp,-1,4,,"mustStop(""adaptationAborted"");","[""addLog""]","[[], [""mustStop"", ""adaptationAborted""]]",[-1568400234765993140],6312,12:00:00
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4184.cpp,,,data/crawl/squid/old_hunk_4184.cpp,data/crawl/squid/new_hunk_4184.cpp,17,17,"fprintf(stdout, ""NA No token to return to continue\n"");","fprintf(stdout, ""NA %s\n"",token);","[""updateContent"", ""addVariable""]","[[""No"", ""to"", ""return"", ""to"", ""continue\\n""], [""%s\\n""]]",[6781769196105687938],6311,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4177.cpp,,,data/crawl/squid/old_hunk_4177.cpp,data/crawl/squid/new_hunk_4177.cpp,9,9,"fprintf(stderr, ""%s| %s: Got '%s' from squid (length: %d).\n"", LogTime(), PROGRAM, buf?buf:""NULL"",length);","fprintf(stderr, ""%s| %s: Got '%s' from squid (length: %d).\n"", LogTime(), PROGRAM, buf,length);","[""moveVariable"", ""removeVariable"", ""removeContent""]","[[""buf"", ""NULL""], []]",[3839534270286458121],6310,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,13,32,"fprintf(stdout, ""default SPN is HTTP/fqdn@DEFAULT_REALM\n"");","fprintf(stdout, ""BH hostname error\n"");","[""updateContent""]","[[""default"", ""SPN"", ""is"", ""HTTP/fqdn"", ""DEFAULT_REALM\\n""], [""BH"", ""hostname"", ""error\\n""]]",[2944909987115973973],6309,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,12,15,"fprintf(stdout, ""Can be set to GSS_C_NO_NAME to allow any entry from keytab\n"");","fprintf(stderr, ""The SPN can be set to GSS_C_NO_NAME to allow any entry from keytab\n"");","[""updateVariable"", ""updateContent""]","[[""stdout"", ""Can""], [""stderr"", ""The"", ""SPN"", ""can""]]",[-1864400356647439745],6308,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,11,13,"fprintf(stdout, ""SPN = service principal name\n"");","fprintf(stderr, ""-s service principal name\n"");","[""updateVariable"", ""updateContent""]","[[""stdout"", ""SPN""], [""stderr"", ""s""]]",[369181436732835403],6307,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,10,10,"fprintf(stdout, ""squid_kerb_auth -d [-s SPN]\n"");","fprintf(stderr, ""squid_kerb_auth [-d] [-i] [-s SPN] [-h]\n"");","[""updateVariable"", ""updateContent""]","[[""stdout"", ""d"", ""SPN]\\n""], [""stderr"", ""d]"", ""["", ""i]"", ""["", ""SPN]"", ""["", ""h]\\n""]]",[6469574754496635586],6306,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/ba4fe07c9fd5f35cd2ca588b9e58ba685e2d2557,03 Oct 2008,Import new helper code.,1831,data/crawl/squid/hunk_4175.cpp,,,data/crawl/squid/old_hunk_4175.cpp,data/crawl/squid/new_hunk_4175.cpp,9,9,"fprintf(stdout, ""Usage: \n"");","fprintf(stderr, ""Usage: \n"");","[""updateVariable""]","[[""stdout""], [""stderr""]]",[6000001000175],6305,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/70d1b64c05b0453cbd5541db8095a12bf390b613,13 Oct 2008,Remove several unnecessary uses of putStrf and a compile error,8,data/crawl/squid/hunk_4067.cpp,,,data/crawl/squid/old_hunk_4067.cpp,data/crawl/squid/new_hunk_4067.cpp,17,17,"httpHeaderPutStrf(&rep->header, HDR_CONTENT_LANGUAGE, ""en"");","rep->header.putStr(HDR_CONTENT_LANGUAGE, ""en"");","[""addLog"", ""removeVariable"", ""removeLog""]","[[""httpHeaderPutStrf"", ""&rep""], [""rep"", ""putStr""]]",[-3050469503700037925],6304,0:00:00
https://github.com/squid-cache/squid/commit/0ea5c60cf6445b3163cc541bb2b45ab8b616c4fb,16 Oct 2008,Prevent linking and performing checks for not-configured auth methods (bug 2489),43,data/crawl/squid/hunk_4065.cpp,,,data/crawl/squid/old_hunk_4065.cpp,data/crawl/squid/new_hunk_4065.cpp,-1,10,,"fprintf(stderr,""Skipping unknown authentication scheme '%s'.\n"", 
                params[scheme].name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Skipping"", ""unknown"", ""authentication"", ""scheme"", ""%s"", ""\\n"", ""params[scheme]"", ""name""]]",[-43743832057587395133],6303,12:00:00
https://github.com/squid-cache/squid/commit/0ea5c60cf6445b3163cc541bb2b45ab8b616c4fb,16 Oct 2008,Prevent linking and performing checks for not-configured auth methods (bug 2489),43,data/crawl/squid/hunk_4064.cpp,,,data/crawl/squid/old_hunk_4064.cpp,data/crawl/squid/new_hunk_4064.cpp,3,-1,"fatalf(""Unknown authentication scheme '%s'.\n"", type_str);",,"[""removeLog""]","[[""fatalf"", ""Unknown"", ""authentication"", ""scheme"", ""%s"", ""\\n"", ""type_str""], []]",[14800519309887117090],6302,12:00:00
https://github.com/squid-cache/squid/commit/12f45551aa4cd1a157722d040b9d5f9b38f18116,08 Nov 2008,"IPAddress tests and corrections.

Fixes two cases where GetSockAddr did not set sin*_len properly

Fixes configure tests for sin*_len

TODO: still to find and fix where we are getting on FreeBSD:
 SYS SS_LEN=16
 SQD SS_LEN=0    (should be 16)",68,data/crawl/squid/hunk_4054.cpp,,,data/crawl/squid/old_hunk_4054.cpp,data/crawl/squid/new_hunk_4054.cpp,-1,33,,"printf(""\nSYS SS_LEN=%d\nSQD SS_LEN=%d\n"",((struct sockaddr_storage*)expect->ai_addr)->ss_len,
           ((struct sockaddr_storage*)ipval->ai_addr)->ss_len );","[""addLog""]","[[], [""printf"", ""\\nSYS"", ""SS_LEN"", ""%d\\nSQD"", ""SS_LEN"", ""%d\\n"", ""struct"", ""sockaddr_storage*"", ""expect"", ""ai_addr"", ""ss_len"", ""struct"", ""sockaddr_storage*"", ""ipval"", ""ai_addr"", ""ss_len""]]",[-28083088864157364770],6301,0:00:00
https://github.com/squid-cache/squid/commit/12f45551aa4cd1a157722d040b9d5f9b38f18116,08 Nov 2008,"IPAddress tests and corrections.

Fixes two cases where GetSockAddr did not set sin*_len properly

Fixes configure tests for sin*_len

TODO: still to find and fix where we are getting on FreeBSD:
 SYS SS_LEN=16
 SQD SS_LEN=0    (should be 16)",68,data/crawl/squid/hunk_4053.cpp,,,data/crawl/squid/old_hunk_4053.cpp,data/crawl/squid/new_hunk_4053.cpp,7,7,"printf(""\nSQD-ADDRINFO: %x %x %x %x %x %x "",
           p[0],p[1],p[2],p[3],p[4],p[5] );","printf(""\nSQD-ADDRINFO: %2x %2x %2x %2x %2x %2x"",
           p[0],p[1],p[2],p[3],p[4],p[5] );","[""updateContent""]","[[""%x"", ""%x"", ""%x"", ""%x"", ""%x"", ""%x""], [""%2x"", ""%2x"", ""%2x"", ""%2x"", ""%2x"", ""%2x""]]",[-28651811062390079094],6300,0:00:00
https://github.com/squid-cache/squid/commit/a9925b40bf8179ee4468c997960413a6d510abf5,07 May 2006,Converted most other httpHeader*() functions to HttpHeader class methods.,903,data/crawl/squid/hunk_4837.cpp,,,data/crawl/squid/old_hunk_4837.cpp,data/crawl/squid/new_hunk_4837.cpp,-1,38,,"hdr_out->putStr(HDR_HOST, orig_request->peer_domain);","[""addLog""]","[[], [""hdr_out"", ""putStr"", ""HDR_HOST"", ""orig_request"", ""peer_domain""]]",[-4977278106915381522],6299,"466 days, 12:00:00"
https://github.com/squid-cache/squid/commit/575cb92731154882b346410366e1ad49c16d3b3e,19 Nov 2008,Import initial code,314,data/crawl/squid/hunk_4050.cpp,,,data/crawl/squid/old_hunk_4050.cpp,data/crawl/squid/new_hunk_4050.cpp,-1,63,,"storeAppendPrintf(entry, "" miss-mask=%2x"", preserve_miss_tos_mask);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""miss"", ""mask"", ""%2x"", ""preserve_miss_tos_mask""]]",[-17975796826970123251],6298,"17 days, 12:00:00"
https://github.com/squid-cache/squid/commit/575cb92731154882b346410366e1ad49c16d3b3e,19 Nov 2008,Import initial code,314,data/crawl/squid/hunk_4050.cpp,,,data/crawl/squid/old_hunk_4050.cpp,data/crawl/squid/new_hunk_4050.cpp,-1,60,,"storeAppendPrintf(entry, "" disable-preserve-miss"");","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""disable"", ""preserve"", ""miss""]]",[-18883107819221956665],6297,"17 days, 12:00:00"
https://github.com/squid-cache/squid/commit/575cb92731154882b346410366e1ad49c16d3b3e,19 Nov 2008,Import initial code,314,data/crawl/squid/hunk_4050.cpp,,,data/crawl/squid/old_hunk_4050.cpp,data/crawl/squid/new_hunk_4050.cpp,-1,57,,"storeAppendPrintf(entry, "" parent-hit=%2x"", tos_parent_hit);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""parent"", ""hit"", ""%2x"", ""tos_parent_hit""]]",[-20364353045639613613],6296,"17 days, 12:00:00"
https://github.com/squid-cache/squid/commit/575cb92731154882b346410366e1ad49c16d3b3e,19 Nov 2008,Import initial code,314,data/crawl/squid/hunk_4050.cpp,,,data/crawl/squid/old_hunk_4050.cpp,data/crawl/squid/new_hunk_4050.cpp,-1,54,,"storeAppendPrintf(entry, "" sibling-hit=%2x"", tos_sibling_hit);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""sibling"", ""hit"", ""%2x"", ""tos_sibling_hit""]]",[154879772627979421],6295,"17 days, 12:00:00"
https://github.com/squid-cache/squid/commit/575cb92731154882b346410366e1ad49c16d3b3e,19 Nov 2008,Import initial code,314,data/crawl/squid/hunk_4050.cpp,,,data/crawl/squid/old_hunk_4050.cpp,data/crawl/squid/new_hunk_4050.cpp,-1,50,,"storeAppendPrintf(entry, "" local-hit=%2x"", tos_local_hit);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""local"", ""hit"", ""%2x"", ""tos_local_hit""]]",[-16247138471038499271],6294,"17 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c63e5f01514cbc26e4cf0bea75d2134e8c7916d2,06 Jan 2009,"Untangle CacheManager reports from log_fqdn

The fqdnFromAddr() call depends on log_fqdn to generate the FQDN. But
CacheManager needs to always display it whenever available. This removes
the call indirection, dependency and makes Name: field only display when
a name is available.

see Bug 2557 for more details.",6,data/crawl/squid/hunk_4020.cpp,,,data/crawl/squid/old_hunk_4020.cpp,data/crawl/squid/new_hunk_4020.cpp,3,4,"storeAppendPrintf(sentry, ""Name:    %s\n"", fqdnFromAddr(c->addr));","storeAppendPrintf(sentry, ""Name:    %s\n"", name);","[""removeVariable"", ""addVariable""]","[[""fqdnFromAddr"", ""c"", ""addr""], [""name""]]",[-9937693644189345390],6293,12:00:00
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/hunk_4013.cpp,,,data/crawl/squid/old_hunk_4013.cpp,data/crawl/squid/new_hunk_4013.cpp,24,36,"storeAppendPrintf(entry, ""\n"");","snprintf(p, 1, ""\n"");","[""updateVariable"", ""updateLog"", ""addContent""]","[[""storeAppendPrintf"", ""entry""], [""snprintf"", ""p"", ""1""]]",[-9620718947959649137],6292,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/hunk_4013.cpp,,,data/crawl/squid/old_hunk_4013.cpp,data/crawl/squid/new_hunk_4013.cpp,19,29,"storeAppendPrintf(entry, "" disable-preserve-miss"");","snprintf(p, 22, "" disable-preserve-miss"");","[""updateVariable"", ""updateLog"", ""addContent""]","[[""storeAppendPrintf"", ""entry""], [""snprintf"", ""p"", ""22""]]",[-9614318915781610235],6291,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/hunk_4013.cpp,,,data/crawl/squid/old_hunk_4013.cpp,data/crawl/squid/new_hunk_4013.cpp,16,25,"storeAppendPrintf(entry, "" parent-hit=%2x"", tos_parent_hit);","snprintf(p, 16, "" parent-hit=%2x"", tos_parent_hit);","[""updateVariable"", ""updateLog"", ""addContent""]","[[""storeAppendPrintf"", ""entry""], [""snprintf"", ""p"", ""16""]]",[-9614446916550611386],6290,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/hunk_4013.cpp,,,data/crawl/squid/old_hunk_4013.cpp,data/crawl/squid/new_hunk_4013.cpp,13,21,"storeAppendPrintf(entry, "" sibling-hit=%2x"", tos_sibling_hit);","snprintf(p, 17, "" sibling-hit=%2x"", tos_sibling_hit);","[""updateVariable"", ""updateLog"", ""addContent""]","[[""storeAppendPrintf"", ""entry""], [""snprintf"", ""p"", ""17""]]",[-9614446916550611387],6289,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/dbe6f864fefb40f9326c5a527550f1d9c590a0fe,10 Jan 2009,Fix build errors in layer-02,47,data/crawl/squid/hunk_4013.cpp,,,data/crawl/squid/old_hunk_4013.cpp,data/crawl/squid/new_hunk_4013.cpp,6,12,"storeAppendPrintf(entry, ""%s"", name);","snprintf(p, 10, ""%s"", name);","[""updateVariable"", ""updateLog"", ""addContent""]","[[""storeAppendPrintf"", ""entry""], [""snprintf"", ""p"", ""10""]]",[-9614446916550611392],6288,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/5b4117d8c4e8fa922453364ba410b1876452c9ba,30 Jan 2009,Verified and converted more String users.,55,data/crawl/squid/hunk_3961.cpp,,,data/crawl/squid/old_hunk_3961.cpp,data/crawl/squid/new_hunk_3961.cpp,4,6,"buf.Printf(""Host: %s:%d\r\n"", s.cfg().host.buf(), s.cfg().port);","buf.Printf(""Host: %.*s:%d\r\n"", host.size(), host.rawBuf(), s.cfg().port);","[""updateVariable"", ""removeVariable"", ""updateContent""]","[[""%s"", ""buf"", ""s"", ""cfg""], [""%"", ""*s"", ""size"", ""host"", ""rawBuf""]]",[9340148467246749098],6287,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/5b4117d8c4e8fa922453364ba410b1876452c9ba,30 Jan 2009,Verified and converted more String users.,55,data/crawl/squid/hunk_3961.cpp,,,data/crawl/squid/old_hunk_3961.cpp,data/crawl/squid/new_hunk_3961.cpp,3,4,"buf.Printf(""OPTIONS %s ICAP/1.0\r\n"", s.cfg().uri.buf());","buf.Printf(""OPTIONS %.*s ICAP/1.0\r\n"", uri.size(), uri.rawBuf());","[""updateVariable"", ""removeVariable"", ""updateContent""]","[[""%s"", ""s"", ""cfg"", ""buf""], [""%"", ""*s"", ""size"", ""uri"", ""rawBuf""]]",[-1080724857384521019],6286,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/9c1758979642a98efb26932161362c6a957eaa34,31 Jan 2009,Verified and converted more String users.,16,data/crawl/squid/hunk_3960.cpp,,,data/crawl/squid/old_hunk_3960.cpp,data/crawl/squid/new_hunk_3960.cpp,4,4,"buf.Printf(""Host: %s:%d\r\n"", s.host.buf(), s.port);","buf.Printf(""Host: %.*s:%d\r\n"", s.host.size(), s.host.rawBuf(), s.port);","[""updateVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""buf""], [""%"", ""*s"", ""size"", ""host"", ""rawBuf"", ""s""]]",[8541117200873220119],6285,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9c1758979642a98efb26932161362c6a957eaa34,31 Jan 2009,Verified and converted more String users.,16,data/crawl/squid/hunk_3960.cpp,,,data/crawl/squid/old_hunk_3960.cpp,data/crawl/squid/new_hunk_3960.cpp,3,3,"buf.Printf(""%s %s ICAP/1.0\r\n"", s.methodStr(), s.uri.buf());","buf.Printf(""%s %.*s ICAP/1.0\r\n"", s.methodStr(), s.uri.size(), s.uri.rawBuf());","[""updateVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""buf""], [""%"", ""*s"", ""size"", ""s"", ""uri"", ""rawBuf""]]",[-1879756123758049998],6284,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9b558d8af0aac1d453f395e5bd719780ad6954c4,09 Feb 2009,"Implemented String.psize() (for printf())
Changed String storage size from 'unsigned short int' to size_t
Implemented String.rfind()
Implemented String.substr() and related tests
Made String.set() private, it's ready to be removed unless there's any dissent
Converted ftp.cc to use rfind in place of rpos",154,data/crawl/squid/hunk_3906.cpp,,,data/crawl/squid/old_hunk_3906.cpp,data/crawl/squid/new_hunk_3906.cpp,3,3,"mb->Printf(""\r\n--%.*s\r\n"", boundary.size(), boundary.rawBuf());","mb->Printf(""\r\n--%.*s\r\n"", boundary.psize(), boundary.rawBuf());","[""updateVariable""]","[[""size""], [""psize""]]",[1618675270841124783],6283,0:00:00
https://github.com/squid-cache/squid/commit/b41978659e2ba47813ce143d6141e553d1fdb431,12 Feb 2009,"unsafeBuf is no more.
Reverted shortening of size_type to unisgned int, due to issue with std::string::npos.",42,data/crawl/squid/hunk_3890.cpp,,,data/crawl/squid/old_hunk_3890.cpp,data/crawl/squid/new_hunk_3890.cpp,3,3,"storeAppendPrintf(entry, ""%s %.*s_%s %s %d %.*s\n"", name, cfg.key.size(), cfg.key.rawBuf(),
                          cfg.methodStr(), cfg.vectPointStr(), cfg.bypass, cfg.uri.size(), cfg.uri.rawBuf());","storeAppendPrintf(entry, ""%s "" SQUIDSTRINGPH ""_%s %s %d "" SQUIDSTRINGPH ""\n"",
            name,
            SQUIDSTRINGPRINT(cfg.key),
            cfg.methodStr(), cfg.vectPointStr(), cfg.bypass,
            SQUIDSTRINGPRINT(cfg.uri));","[""moveVariable"", ""removeVariable"", ""addContent"", ""removeContent"", ""addVariable""]","[[""%"", ""*s_%s"", ""%"", ""*s\\n"", ""size"", ""key"", ""rawBuf"", ""cfg"", ""size"", ""cfg"", ""uri"", ""rawBuf""], [""SQUIDSTRINGPH"", ""_%s"", ""SQUIDSTRINGPH"", ""\\n"", ""SQUIDSTRINGPRINT"", ""SQUIDSTRINGPRINT""]]",[-28928326602686305833],6282,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/826a1fed8f0691b3e55764cfa31432640f963835,12 Feb 2009,"Migrated *printf's to SQUIDSTRINGPH and SQUIDSTRINGPRINT macros
de-inlined String::{find,rfind,pos,rpos}",195,data/crawl/squid/hunk_3881.cpp,,,data/crawl/squid/old_hunk_3881.cpp,data/crawl/squid/new_hunk_3881.cpp,5,5,"buf.Printf(""Host: %.*s:%d\r\n"", host.size(), host.rawBuf(), s.cfg().port);","buf.Printf(""Host: "" SQUIDSTRINGPH "":%d\r\n"", SQUIDSTRINGPRINT(host), s.cfg().port);","[""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""%"", ""*s"", ""size"", ""host"", ""rawBuf""], [""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT""]]",[-18516956952481728125],6281,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/826a1fed8f0691b3e55764cfa31432640f963835,12 Feb 2009,"Migrated *printf's to SQUIDSTRINGPH and SQUIDSTRINGPRINT macros
de-inlined String::{find,rfind,pos,rpos}",195,data/crawl/squid/hunk_3881.cpp,,,data/crawl/squid/old_hunk_3881.cpp,data/crawl/squid/new_hunk_3881.cpp,3,3,"buf.Printf(""OPTIONS %.*s ICAP/1.0\r\n"", uri.size(), uri.rawBuf());","buf.Printf(""OPTIONS "" SQUIDSTRINGPH "" ICAP/1.0\r\n"", SQUIDSTRINGPRINT(uri));","[""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""%"", ""*s"", ""size"", ""uri"", ""rawBuf""], [""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT""]]",[-8096083627850458008],6280,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2c1fd83748fef54a01cf9c18078d65b38d9c7eba,12 Feb 2009,"Implemented String::npos to parametrize 'search not found' results
Converted some printf to macro-based.",25,data/crawl/squid/hunk_3888.cpp,,,data/crawl/squid/old_hunk_3888.cpp,data/crawl/squid/new_hunk_3888.cpp,3,3,"buf.Printf(""%s %.*s ICAP/1.0\r\n"", s.methodStr(), s.uri.size(), s.uri.rawBuf());","buf.Printf(""%s "" SQUIDSTRINGPH "" ICAP/1.0\r\n"", s.methodStr(), SQUIDSTRINGPRINT(s.uri));","[""moveVariable"", ""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""%"", ""*s"", ""size"", ""s"", ""uri"", ""rawBuf""], [""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT""]]",[-8096083642570502282],6279,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/bb7907027442f83ae89b12a93dc1a6239c6a837a,11 Feb 2009,"defined printf-helping macros,
reverted some unnecessary renamings
further unsafeBuf conversions.",96,data/crawl/squid/hunk_3893.cpp,,,data/crawl/squid/old_hunk_3893.cpp,data/crawl/squid/new_hunk_3893.cpp,3,3,"storeAppendPrintf(entry, "" %s:"", tag.unsafeBuf());","storeAppendPrintf(entry, "" "" SQUIDSTRINGPH , SQUIDSTRINGPRINT(tag));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""unsafeBuf""], [""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT""]]",[-12388124474740603688],6278,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/26cc52cbc9e1fd39c10c08f3d51a1017ed6e7686,20 Feb 2009,"Renamed ICAP source files from icap/ICAPFoo.{cc,h} to icap/Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1233,data/crawl/squid/hunk_3845.cpp,,,data/crawl/squid/old_hunk_3845.cpp,data/crawl/squid/new_hunk_3845.cpp,-1,48,,"buf.Printf(""Host: "" SQUIDSTRINGPH "":%d\r\n"", SQUIDSTRINGPRINT(host), s.cfg().port);","[""addLog""]","[[], [""buf"", ""Printf"", ""Host"", ""SQUIDSTRINGPH"", ""%d\\r\\n"", ""SQUIDSTRINGPRINT"", ""host"", ""s"", ""cfg"", ""port""]]",[11817756535844893538],6277,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/26cc52cbc9e1fd39c10c08f3d51a1017ed6e7686,20 Feb 2009,"Renamed ICAP source files from icap/ICAPFoo.{cc,h} to icap/Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1233,data/crawl/squid/hunk_3845.cpp,,,data/crawl/squid/old_hunk_3845.cpp,data/crawl/squid/new_hunk_3845.cpp,-1,46,,"buf.Printf(""OPTIONS "" SQUIDSTRINGPH "" ICAP/1.0\r\n"", SQUIDSTRINGPRINT(uri));","[""addLog""]","[[], [""buf"", ""Printf"", ""OPTIONS"", ""SQUIDSTRINGPH"", ""ICAP/1"", ""0\\r\\n"", ""SQUIDSTRINGPRINT"", ""uri""]]",[-8740637694297218803],6276,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/26cc52cbc9e1fd39c10c08f3d51a1017ed6e7686,20 Feb 2009,"Renamed ICAP source files from icap/ICAPFoo.{cc,h} to icap/Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1233,data/crawl/squid/hunk_3844.cpp,,,data/crawl/squid/old_hunk_3844.cpp,data/crawl/squid/new_hunk_3844.cpp,9,9,"buf.Printf(""%s: %s\r\n"", TheICAPConfig.client_username_header,
                       value);","buf.Printf(""%s: %s\r\n"", TheConfig.client_username_header,
                       value);","[""updateVariable""]","[[""TheICAPConfig""], [""TheConfig""]]",[-5214375939227093195],6275,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/26cc52cbc9e1fd39c10c08f3d51a1017ed6e7686,20 Feb 2009,"Renamed ICAP source files from icap/ICAPFoo.{cc,h} to icap/Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1233,data/crawl/squid/hunk_3834.cpp,,,data/crawl/squid/old_hunk_3834.cpp,data/crawl/squid/new_hunk_3834.cpp,48,-1,"buf.Printf(""Host: "" SQUIDSTRINGPH "":%d\r\n"", SQUIDSTRINGPRINT(host), s.cfg().port);",,"[""removeLog""]","[[""buf"", ""Printf"", ""Host"", ""SQUIDSTRINGPH"", ""%d\\r\\n"", ""SQUIDSTRINGPRINT"", ""host"", ""s"", ""cfg"", ""port""], []]",[-11817756535844893538],6274,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/26cc52cbc9e1fd39c10c08f3d51a1017ed6e7686,20 Feb 2009,"Renamed ICAP source files from icap/ICAPFoo.{cc,h} to icap/Foo.{cc,h}.

Placed ICAP names into Adaptation::Icap namespace, renaming ICAPFoo to
Adaptation::Icap::Foo.",1233,data/crawl/squid/hunk_3834.cpp,,,data/crawl/squid/old_hunk_3834.cpp,data/crawl/squid/new_hunk_3834.cpp,46,-1,"buf.Printf(""OPTIONS "" SQUIDSTRINGPH "" ICAP/1.0\r\n"", SQUIDSTRINGPRINT(uri));",,"[""removeLog""]","[[""buf"", ""Printf"", ""OPTIONS"", ""SQUIDSTRINGPH"", ""ICAP/1"", ""0\\r\\n"", ""SQUIDSTRINGPRINT"", ""uri""], []]",[8740637694297218803],6273,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/29cb1a9a08f9443a8b8ec75994cb9e506fe21f27,04 Apr 2009,The debug mode option '-d' was not documented in LDAP helpers usage message,2,data/crawl/squid/hunk_3798.cpp,,,data/crawl/squid/old_hunk_3798.cpp,data/crawl/squid/new_hunk_3798.cpp,-1,3,,"fprintf(stderr, ""\t-d\t\t\tenable debug mode\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""d\\t\\t\\tenable"", ""debug"", ""mode\\n""]]",[-3511835091227355539],6272,0:00:00
https://github.com/squid-cache/squid/commit/b0dd28bab816231b7a6145ee4417bedc0d0d0023,25 Feb 2003,"Summary: Merge final stage1 ACL refactoring.
Keywords:

Patches applied:

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-25
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-24
     Merge from HEAD.

  * robertc@squid-cache.org--squid/squid--acl--3.0--patch-23
     ACL tidyups within new framework.",4390,data/crawl/squid/hunk_5341.cpp,,,data/crawl/squid/old_hunk_5341.cpp,data/crawl/squid/new_hunk_5341.cpp,-1,86,,"fatal (""cloning of ACLASN not implemented"");","[""addLog""]","[[], [""fatal"", ""cloning"", ""of"", ""ACLASN"", ""not"", ""implemented""]]",[-13663414492368200408],6271,"1137 days, 0:00:00"
https://github.com/squid-cache/squid/commit/69c8d152a96194425a102472e9408ffd9ecc200a,11 Sep 1998,added asndb cachemgr output,51,data/crawl/squid/hunk_6284.cpp,,,data/crawl/squid/old_hunk_6284.cpp,data/crawl/squid/new_hunk_6284.cpp,-1,6,,"storeAppendPrintf(sentry, ""Address    \tAS Numbers\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Address"", ""\\tAS"", ""Numbers\\n""]]",[928166613288019374],6270,"1951 days, 0:00:00"
https://github.com/squid-cache/squid/commit/68924b6db6e4dfe2e74495543c075714803812aa,31 May 2009,"Author: Henrik Nordstrom <henrik@henriknordstrom.net>
Bug #2407: Spelling error in http_port tcpkeepalive option

One of the new parameters according to the docs is ""keepalive"". However, when
using this option you'll get a ""Bungled squid.conf in line ..."". That's because
when parsing the configuration Squid is looking for the keyword ""tcpkeepalive""
instead of ""keepalive"" as stated in the docs.

Selected to fix the docs instead of code as having it named keepalive is too
easily confused with HTTP keep-alive / persistent connections.


2009-05-25: Also mistakes on spelling of config dump.",6,data/crawl/squid/hunk_3763.cpp,,,data/crawl/squid/old_hunk_3763.cpp,data/crawl/squid/new_hunk_3763.cpp,5,5,"storeAppendPrintf(e, "" tcp_keepalive"");","storeAppendPrintf(e, "" tcpkeepalive"");","[""updateContent""]","[[""tcp_keepalive""], [""tcpkeepalive""]]",[4559254105560999062],6269,0:00:00
https://github.com/squid-cache/squid/commit/0a51587682d1b9ff2ad6a8fbb741d41ccb895d09,26 Mar 2009,Changed select loops counter from int to unsigned long int.,22,data/crawl/squid/hunk_3805.cpp,,,data/crawl/squid/old_hunk_3805.cpp,data/crawl/squid/new_hunk_3805.cpp,3,3,"storeAppendPrintf(sentry, ""\tSelect loop called: %d times, %0.3f ms avg\n"",
                      statCounter.select_loops, 1000.0 * runtime / statCounter.select_loops);","storeAppendPrintf(sentry, ""\tSelect loop called: %ld times, %0.3f ms avg\n"",
                      statCounter.select_loops, 1000.0 * runtime / statCounter.select_loops);","[""updateContent""]","[[""%d""], [""%ld""]]",[-4775301843693679707],6268,"47 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a553a5a35d4f6bf515fc77867e66276f42d04fe1,07 Aug 2006,"Create an explicit EventLoop class which can be used to run an event loop
outside of main.cc - i.e. for test cases. Refactor the event module into two
sections - EventScheduler which schedules events, and EventDispatcher which
dispatches events unconditionally. Refactor the signal handling code in
main to use an event dispatcher too, making the loop cleaner.",1848,data/crawl/squid/hunk_4777.cpp,,,data/crawl/squid/old_hunk_4777.cpp,data/crawl/squid/new_hunk_4777.cpp,-1,109,,stop();,"[""addLog""]","[[], [""stop""]]",[-1840386907510881204],6267,"535 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d974a0723c00b59328754bbd964e34fdd03a890a,17 Jul 2009,"Bug 2680 regression: Crash after rotate with no helpers running

Regression from bug 2276 fix. n_running was used instead of n_active.
Also documents the relevant counters to prevent this recurring.",30,data/crawl/squid/hunk_3704.cpp,,,data/crawl/squid/old_hunk_3704.cpp,data/crawl/squid/new_hunk_3704.cpp,3,3,"storeAppendPrintf(sentry, ""   S = SHUTDOWN\n"");","storeAppendPrintf(sentry, ""   S = SHUTDOWN PENDING\n"");","[""updateContent""]","[[""SHUTDOWN\\n""], [""SHUTDOWN"", ""PENDING\\n""]]",[5782306439145948962],6266,0:00:00
https://github.com/squid-cache/squid/commit/d974a0723c00b59328754bbd964e34fdd03a890a,17 Jul 2009,"Bug 2680 regression: Crash after rotate with no helpers running

Regression from bug 2276 fix. n_running was used instead of n_active.
Also documents the relevant counters to prevent this recurring.",30,data/crawl/squid/hunk_3703.cpp,,,data/crawl/squid/old_hunk_3703.cpp,data/crawl/squid/new_hunk_3703.cpp,3,3,"storeAppendPrintf(sentry, ""number running: %d of %d\n"",
                      hlp->n_running, hlp->n_to_start);","storeAppendPrintf(sentry, ""number active: %d of %d (%d shutting down)\n"",
                      hlp->n_active, hlp->n_to_start, (hlp->n_running - hlp->n_active) );","[""updateContent"", ""addVariable""]","[[""running"", ""%d\\n""], [""active"", ""%d"", ""%d"", ""shutting"", ""down"", ""\\n"", ""n_active"", ""hlp"", ""hlp"", ""n_active""]]",[-21820597324884949671],6265,0:00:00
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/hunk_3700.cpp,,,data/crawl/squid/old_hunk_3700.cpp,data/crawl/squid/new_hunk_3700.cpp,-1,26,,"fatal(""StoreEntry::setPulicKey. Not implemented."");","[""addLog""]","[[], [""fatal"", ""StoreEntry"", ""setPulicKey"", ""Not"", ""implemented""]]",[-5346853906588702888],6264,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/hunk_3700.cpp,,,data/crawl/squid/old_hunk_3700.cpp,data/crawl/squid/new_hunk_3700.cpp,-1,20,,"fatal(""StoreEntry::timestampsSet. Not implemented."");","[""addLog""]","[[], [""fatal"", ""StoreEntry"", ""timestampsSet"", ""Not"", ""implemented""]]",[-2860225327935109051],6263,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/hunk_3699.cpp,,,data/crawl/squid/old_hunk_3699.cpp,data/crawl/squid/new_hunk_3699.cpp,9,9,"fatal(""Not implemented"");","fatal(""storeAppendVPrintf: Not implemented"");","[""updateContent""]","[[], [""storeAppendVPrintf""]]",[3227955763591095296],6262,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/hunk_3699.cpp,,,data/crawl/squid/old_hunk_3699.cpp,data/crawl/squid/new_hunk_3699.cpp,3,3,"fatal(""Not implemented"");","fatal(""storeAppendPrintf: Not implemented"");","[""updateContent""]","[[], [""storeAppendPrintf""]]",[5181367693625444383],6261,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/hunk_3698.cpp,,,data/crawl/squid/old_hunk_3698.cpp,data/crawl/squid/new_hunk_3698.cpp,-1,14,,"fatal(""statHistCount: Not implemented"");","[""addLog""]","[[], [""fatal"", ""statHistCount"", ""Not"", ""implemented""]]",[-4662650133473074772],6260,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0f9db2d67591759c0b85658564013246599e7f63,26 Jul 2009,"Add Unit-Tests for HttpReply

Just the basics for some needed right now. This needs to be expanded.

Also, required to break some of the mime header parsing calls out into
mime_header.cc in preparation for splitting the icon handling from the
header handling and reduce dependencies on the new tests.",656,data/crawl/squid/hunk_3698.cpp,,,data/crawl/squid/old_hunk_3698.cpp,data/crawl/squid/new_hunk_3698.cpp,-1,8,,"fatal(""statHistDump: Not implemented"");","[""addLog""]","[[], [""fatal"", ""statHistDump"", ""Not"", ""implemented""]]",[-9684074428778075342],6259,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/dcb802aa7ae3d63d5897bbe9260abc6533f48717,04 Aug 2009,"Bug #2648: stateful helpers stuck in reserved if client disconnects while helper busy

Note: May depend on the other stateful helper cleanups.",72,data/crawl/squid/hunk_3683.cpp,,,data/crawl/squid/old_hunk_3683.cpp,data/crawl/squid/new_hunk_3683.cpp,28,-1,"fatal(""helperStatefulHandleRead: unknown stateful helper callback result.\n"");",,"[""removeLog""]","[[""fatal"", ""helperStatefulHandleRead"", ""unknown"", ""stateful"", ""helper"", ""callback"", ""result"", ""\\n""], []]",[16056450529631063150],6258,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/dcb802aa7ae3d63d5897bbe9260abc6533f48717,04 Aug 2009,"Bug #2648: stateful helpers stuck in reserved if client disconnects while helper busy

Note: May depend on the other stateful helper cleanups.",72,data/crawl/squid/hunk_3683.cpp,,,data/crawl/squid/old_hunk_3683.cpp,data/crawl/squid/new_hunk_3683.cpp,6,-1,"fatal(""helperStatefulHandleRead: either a non-state aware callback was give to the stateful helper routines, or an uninitialised callback response was received.\n"");",,"[""removeLog""]","[[""fatal"", ""helperStatefulHandleRead"", ""either"", ""a"", ""non"", ""state"", ""aware"", ""callback"", ""was"", ""give"", ""to"", ""the"", ""stateful"", ""helper"", ""routines"", ""or"", ""an"", ""uninitialised"", ""callback"", ""response"", ""was"", ""received"", ""\\n""], []]",[2977755774442763167],6257,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/86ea30a69b4b6a1501ecf931b80248d85cd52693,03 Aug 2009,"Remove support for deferred state in stateful helpers

the deferred state were previously used for the challenge reuse mode
in NTLM, but is since long unused as it was both incompatible with
NTLMv2 and also not very stable for authentication.",283,data/crawl/squid/hunk_3687.cpp,,,data/crawl/squid/old_hunk_3687.cpp,data/crawl/squid/new_hunk_3687.cpp,3,-1,"storeAppendPrintf(sentry, ""   D = DEFERRED\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""D"", ""DEFERRED\\n""], []]",[-10317540200380591792],6256,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/766743af0e72dc241510f65bc660dbd2eaca9420,13 Aug 2009,"Windows port: fix mswin_negotiate_auth.exe crash when executing a LocalCall authentication with verbose debug enabled

- Also ran indent",414,data/crawl/squid/hunk_3658.cpp,,,data/crawl/squid/old_hunk_3658.cpp,data/crawl/squid/new_hunk_3658.cpp,-1,125,,"fprintf(stderr, ""No data available.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""No"", ""data"", ""available"", ""\\n""]]",[-31602915378819014971],6255,0:00:00
https://github.com/squid-cache/squid/commit/ea21d49788dbca1dfa77822fa736c79c813d5648,04 Aug 2009,Unify memory_cache_first/disk into a single memory_cache_mode directive,73,data/crawl/squid/hunk_3684.cpp,,,data/crawl/squid/old_hunk_3684.cpp,data/crawl/squid/new_hunk_3684.cpp,-1,41,,"storeAppendPrintf(entry, ""network"");","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""network""]]",[-3483576670683512643],6254,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ea21d49788dbca1dfa77822fa736c79c813d5648,04 Aug 2009,Unify memory_cache_first/disk into a single memory_cache_mode directive,73,data/crawl/squid/hunk_3684.cpp,,,data/crawl/squid/old_hunk_3684.cpp,data/crawl/squid/new_hunk_3684.cpp,-1,39,,"storeAppendPrintf(entry, ""disk"");","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""disk""]]",[-4905767093261955533],6253,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ea21d49788dbca1dfa77822fa736c79c813d5648,04 Aug 2009,Unify memory_cache_first/disk into a single memory_cache_mode directive,73,data/crawl/squid/hunk_3684.cpp,,,data/crawl/squid/old_hunk_3684.cpp,data/crawl/squid/new_hunk_3684.cpp,-1,37,,"storeAppendPrintf(entry, ""always"");","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""always""]]",[4876492427515736193],6252,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/hunk_3627.cpp,,,data/crawl/squid/old_hunk_3627.cpp,data/crawl/squid/new_hunk_3627.cpp,78,-1,"httpHeaderPutStrf(hdr_out, HDR_AUTHORIZATION, ""Basic %s"",
                              base64_encode(orig_request->peer_login));",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""hdr_out"", ""HDR_AUTHORIZATION"", ""Basic"", ""%s"", ""base64_encode"", ""orig_request"", ""peer_login""], []]",[-19571167517780228532],6251,12:00:00
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/hunk_3627.cpp,,,data/crawl/squid/old_hunk_3627.cpp,data/crawl/squid/new_hunk_3627.cpp,53,-1,"hdr_out->putStr(HDR_AUTHORIZATION, auth);",,"[""removeLog""]","[[""hdr_out"", ""putStr"", ""HDR_AUTHORIZATION"", ""auth""], []]",[-1778347086537125829],6250,12:00:00
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/hunk_3627.cpp,,,data/crawl/squid/old_hunk_3627.cpp,data/crawl/squid/new_hunk_3627.cpp,34,-1,"httpHeaderPutStrf(hdr_out, HDR_PROXY_AUTHORIZATION, ""Basic %s"",
                              base64_encode(orig_request->peer_login));",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""hdr_out"", ""HDR_PROXY_AUTHORIZATION"", ""Basic"", ""%s"", ""base64_encode"", ""orig_request"", ""peer_login""], []]",[-18865267603287543529],6249,12:00:00
https://github.com/squid-cache/squid/commit/a0e95c7e26b33cb3df67c566e0daf382738da3ea,27 Aug 2009,"Cleanup of auth header special case forwarding logics

The code dealing with our special case auth header forwarding/synthesising
had grown quite hairy and partially duplicated from all additions. This
cleans up the code moving this logics to a new function and unifying
WWW & Proxy auth cases.",186,data/crawl/squid/hunk_3622.cpp,,,data/crawl/squid/old_hunk_3622.cpp,data/crawl/squid/new_hunk_3622.cpp,-1,63,,"httpHeaderPutStrf(hdr_out, header, ""Basic %s"",
			  base64_encode(loginbuf));","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr_out"", ""header"", ""Basic"", ""%s"", ""base64_encode"", ""loginbuf""]]",[-6335661435216381791],6248,0:00:00
https://github.com/squid-cache/squid/commit/ee0b94f4b7d2c3281a98eff2706f8e32d812bee3,26 Aug 2009,"Rework the auth forwarding special cases

The auth forwarding special cases had grown a bit hairy with a lot
of duplicated code between WWW-Auth and Proxy-Auth and far from trivial
to follow code logics.

This change breaks this logic out to a separate function shared
in both modes, selecing mode based on type of peer.

Also moves PROXYPASS back into the land of undocumented features. This
is a feature which most would only get confused by and which can cause
significant security issues if used wrongly.",184,data/crawl/squid/hunk_3626.cpp,,,data/crawl/squid/old_hunk_3626.cpp,data/crawl/squid/new_hunk_3626.cpp,-1,32,,"hdr_out->putStr(header, auth);","[""addLog""]","[[], [""hdr_out"", ""putStr"", ""header"", ""auth""]]",[-8710543793641279243],6247,12:00:00
https://github.com/squid-cache/squid/commit/96e03dd843bf82abfefbb46b3275154853ada1d4,28 Aug 2009,"Cleanup: Remove more traces of old squid debug()() macro

There is now no reason for any of the Squid internal code to contain 'debug()'

TODO: Just the ESI code remaining on the old system.
  It's debug seems to be incrementally building a single line to display
  objects parsed. But using multiple nested calls to dump it.
  VERY nasty. They need to be made writing to a buffer instead.",78,data/crawl/squid/hunk_3618.cpp,,,data/crawl/squid/old_hunk_3618.cpp,data/crawl/squid/new_hunk_3618.cpp,-1,10,,"fprintf(stderr, ""Fatal: %s"", message);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Fatal"", ""%s"", ""message""]]",[-25714727152405944387],6246,0:00:00
https://github.com/squid-cache/squid/commit/fdbb3b19d56573065b7e392e27161ae77ce85aaa,11 Jul 2009,"Add url_rewrite helper section

 - Introduces --enable-url-rewrite-helpers configure option
   identical to other helper options. Selects which of the new helpers to build.

 - Adds a fake url_rewrite program in C++ binary and shell scripts formats
   each perform no re-write but can log all requests made.

TODO:
 * add other helpers for various purposes.
 * make these demo/debug helpers capable of concurrent requests",253,data/crawl/squid/hunk_3751.cpp,,,data/crawl/squid/old_hunk_3751.cpp,data/crawl/squid/new_hunk_3751.cpp,-1,104,,"fprintf(stdout,""\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""\\n""]]",[-13913885213698345581],6245,"27 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fdbb3b19d56573065b7e392e27161ae77ce85aaa,11 Jul 2009,"Add url_rewrite helper section

 - Introduces --enable-url-rewrite-helpers configure option
   identical to other helper options. Selects which of the new helpers to build.

 - Adds a fake url_rewrite program in C++ binary and shell scripts formats
   each perform no re-write but can log all requests made.

TODO:
 * add other helpers for various purposes.
 * make these demo/debug helpers capable of concurrent requests",253,data/crawl/squid/hunk_3751.cpp,,,data/crawl/squid/old_hunk_3751.cpp,data/crawl/squid/new_hunk_3751.cpp,-1,30,,"fprintf(stderr,
            ""Usage: %s [-d] [-v] [-h]\n""
            "" -d  enable debugging.\n""
            "" -h  this message\n\n"",
            my_program_name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Usage"", ""%s"", ""["", ""d]"", ""["", ""v]"", ""["", ""h]\\n"", ""d"", ""enable"", ""debugging"", ""\\n"", ""h"", ""this"", ""message\\n\\n"", ""my_program_name""]]",[-8919842937044454803],6244,"27 days, 12:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3583.cpp,,,data/crawl/squid/old_hunk_3583.cpp,data/crawl/squid/new_hunk_3583.cpp,13,12,".Printf(""\r\n"");",mimeGetContentEncoding(gopherState->request);,"[""updateLog"", ""removeContent"", ""addVariable"", ""removeLog""]","[[""Printf"", ""\\r\\n""], [""mimeGetContentEncoding"", ""gopherState"", ""request""]]",[-435689516880344692],6243,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3582.cpp,,,data/crawl/squid/old_hunk_3582.cpp,data/crawl/squid/new_hunk_3582.cpp,21,-1,"mb.Printf(""Content-Type: video/mpeg\r\n"");",,"[""removeLog""]","[[""mb"", ""Printf"", ""Content"", ""Type"", ""video/mpeg\\r\\n""], []]",[-9193989740658784083],6242,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3582.cpp,,,data/crawl/squid/old_hunk_3582.cpp,data/crawl/squid/new_hunk_3582.cpp,17,-1,"mb.Printf(""Content-Type: audio/basic\r\n"");",,"[""removeLog""]","[[""mb"", ""Printf"", ""Content"", ""Type"", ""audio/basic\\r\\n""], []]",[88978266346472216],6241,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3582.cpp,,,data/crawl/squid/old_hunk_3582.cpp,data/crawl/squid/new_hunk_3582.cpp,11,-1,"mb.Printf(""Content-Type: image/gif\r\n"");",,"[""removeLog""]","[[""mb"", ""Printf"", ""Content"", ""Type"", ""image/gif\\r\\n""], []]",[-566673743170070987],6240,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3582.cpp,,,data/crawl/squid/old_hunk_3582.cpp,data/crawl/squid/new_hunk_3582.cpp,3,-1,"mb.Printf(""Content-Type: text/html\r\n"");",,"[""removeLog""]","[[""mb"", ""Printf"", ""Content"", ""Type"", ""text/html\\r\\n""], []]",[-6341656542888061992],6239,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3581.cpp,,,data/crawl/squid/old_hunk_3581.cpp,data/crawl/squid/new_hunk_3581.cpp,34,-1,"mb.Printf(""HTTP/1.0 200 OK Gatewaying\r\n""
              ""Server: Squid/%s\r\n""
              ""Date: %s\r\n"",
              version_string, mkrfc1123(squid_curtime));",,"[""removeLog""]","[[""mb"", ""Printf"", ""HTTP/1"", ""0"", ""200"", ""OK"", ""Gatewaying\\r\\n"", ""Server"", ""Squid/%s\\r\\n"", ""Date"", ""%s\\r\\n"", ""version_string"", ""mkrfc1123"", ""squid_curtime""], []]",[12261880501776543362],6238,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3581.cpp,,,data/crawl/squid/old_hunk_3581.cpp,data/crawl/squid/new_hunk_3581.cpp,17,-1,"mb->Printf(""Content-Type: %s\r\n"",
               ctype ? ctype : def_ctype);",,"[""removeLog""]","[[""mb"", ""Printf"", ""Content"", ""Type"", ""%s\\r\\n"", ""ctype"", ""ctype"", ""def_ctype""], []]",[-4902108661394051662],6237,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/9969d2a86131e2a350eced6677c5fc03ad16cb5b,19 Sep 2009,"Author: Peter Pramberger <peter@pramberger.at>
Bug 2761: Gopher and double HTTP response header",66,data/crawl/squid/hunk_3581.cpp,,,data/crawl/squid/old_hunk_3581.cpp,data/crawl/squid/new_hunk_3581.cpp,15,-1,"mb->Printf(""Content-Encoding: %s\r\n"", cenc);",,"[""removeLog""]","[[""mb"", ""Printf"", ""Content"", ""Encoding"", ""%s\\r\\n"", ""cenc""], []]",[-9598600587970182652],6236,"2 days, 0:00:00"
https://github.com/squid-cache/squid/commit/47c9d60ea0f964792caa8356a4a37c1f3523958b,06 Nov 2008,"Bug 843: translation should cover FTP Directory Listings as well

Converts the FTP directory listing to using error page templates.
Which are translated, HTML strict standards compliant, and CSS styled.",300,data/crawl/squid/hunk_4058.cpp,,,data/crawl/squid/old_hunk_4058.cpp,data/crawl/squid/new_hunk_4058.cpp,-1,6,,"html->Printf(""<tr class=\""entry\""<td colspan=\""5\"">%s</td></tr>\n"", line);","[""addLog""]","[[], [""html"", ""Printf"", ""tr"", ""class"", ""\\"", ""entry\\"", ""td"", ""colspan"", ""\\"", ""5\\"", ""%s"", ""/td"", ""/tr"", ""\\n"", ""line""]]",[50877146634065337813],6235,"179 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,557,-1,"fprintf(stderr, ""%s| %s: User %s authenticated\n"", LogTime(), PROGRAM, user);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""User"", ""%s"", ""authenticated\\n"", ""LogTime"", ""PROGRAM"", ""user""], []]",[6635982612220853237],6234,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,531,-1,"fprintf(stderr, ""%s| %s: continuation needed\n"", LogTime(), PROGRAM);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""continuation"", ""needed\\n"", ""LogTime"", ""PROGRAM""], []]",[8607357028711081211],6233,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3548.cpp,,,data/crawl/squid/old_hunk_3548.cpp,data/crawl/squid/new_hunk_3548.cpp,145,-1,"fprintf(stderr, ""%s| %s: %s failed: %s\n"", LogTime(), PROGRAM, function, buf);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""%s"", ""failed"", ""%s\\n"", ""LogTime"", ""PROGRAM"", ""function"", ""buf""], []]",[13411346457197098932],6232,0:00:00
https://github.com/squid-cache/squid/commit/3ad12bdabcfe9732e94fdce1ea44f2c75a94fb58,04 Sep 2009,New squid_kerb_auth from Markus Moeller,5968,data/crawl/squid/hunk_3592.cpp,,,data/crawl/squid/old_hunk_3592.cpp,data/crawl/squid/new_hunk_3592.cpp,-1,22,,"fprintf(stdout, ""QQ\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""QQ\\n""]]",[-5628437379305328865],6231,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3ad12bdabcfe9732e94fdce1ea44f2c75a94fb58,04 Sep 2009,New squid_kerb_auth from Markus Moeller,5968,data/crawl/squid/hunk_3592.cpp,,,data/crawl/squid/old_hunk_3592.cpp,data/crawl/squid/new_hunk_3592.cpp,-1,19,,"fprintf(stdout, ""YR %s\n"", Token ? Token : ""NULL"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""YR"", ""%s\\n"", ""Token"", ""Token"", ""NULL""]]",[2776114685960105639],6230,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6989c6dcc2a01b8147d6d92ff8d3508aa3d7a647,11 Sep 2009,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos helepr updates.",33,data/crawl/squid/hunk_3588.cpp,,,data/crawl/squid/old_hunk_3588.cpp,data/crawl/squid/new_hunk_3588.cpp,-1,20,,"fprintf(stdout, ""BH Kerberos authentication not supported\n"");","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""Kerberos"", ""authentication"", ""not"", ""supported\\n""]]",[-6993364372600971097],6229,"27 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,627,,"fprintf(stderr, ""%s| %s: User %s authenticated\n"", LogTime(),
		    PROGRAM, user);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""User"", ""%s"", ""authenticated\\n"", ""LogTime"", ""PROGRAM"", ""user""]]",[-6635982612220853237],6228,0:00:00
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,449,,"fprintf(stdout, ""TT %s\n"",token);","[""addLog""]","[[], [""fprintf"", ""stdout"", ""TT"", ""%s\\n"", ""token""]]",[-411907393299904919],6227,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,422,,"fprintf(stderr, ""%s| %s: makeNegTokenTarg failed with rc=%d\n"", LogTime(), PROGRAM, rc);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""makeNegTokenTarg"", ""failed"", ""with"", ""rc"", ""%d\\n"", ""LogTime"", ""PROGRAM"", ""rc""]]",[-19420802712034584714],6226,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3545.cpp,,,data/crawl/squid/old_hunk_3545.cpp,data/crawl/squid/new_hunk_3545.cpp,-1,474,,"fprintf(stdout, ""BH received type %d NTLM token\n"",
		(int) *((unsigned char *) input_token.value +
		    sizeof ntlmProtocol));","[""addLog""]","[[], [""fprintf"", ""stdout"", ""BH"", ""received"", ""type"", ""%d"", ""NTLM"", ""token\\n"", ""int"", ""*"", ""unsigned"", ""char"", ""*"", ""input_token"", ""value"", ""sizeof"", ""ntlmProtocol""]]",[-33580115765483002823],6225,0:00:00
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,350,,"fprintf(stderr, ""%s| %s: Invalid GSS-SPNEGO query [%s]\n"", LogTime(), PROGRAM, buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""GSS"", ""SPNEGO"", ""query"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf""]]",[-25308916076387808654],6224,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,345,,"fprintf(stderr, ""%s| %s: parseNegTokenInit failed with rc=%d\n"", LogTime(), PROGRAM, rc);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""parseNegTokenInit"", ""failed"", ""with"", ""rc"", ""%d\\n"", ""LogTime"", ""PROGRAM"", ""rc""]]",[-23893375745594741414],6223,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,230,,"fprintf(stderr, ""%s| %s: Local hostname could not be determined. Please specify the service principal\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Local"", ""hostname"", ""could"", ""not"", ""be"", ""determined"", ""Please"", ""specify"", ""the"", ""service"", ""principal\\n"", ""LogTime"", ""PROGRAM""]]",[21974412835750671669],6222,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,220,,"fprintf(stderr, ""%s| %s: unknown option: -%c.\n"", LogTime(), PROGRAM, opt);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""unknown"", ""option"", ""%c"", ""\\n"", ""LogTime"", ""PROGRAM"", ""opt""]]",[-8800736611532375069],6221,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3ad12bdabcfe9732e94fdce1ea44f2c75a94fb58,04 Sep 2009,New squid_kerb_auth from Markus Moeller,5968,data/crawl/squid/hunk_3590.cpp,,,data/crawl/squid/old_hunk_3590.cpp,data/crawl/squid/new_hunk_3590.cpp,-1,164,,"fprintf(stderr, ""-r remove realm from username\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""r"", ""remove"", ""realm"", ""from"", ""username\\n""]]",[-35814785932288394085],6220,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,165,,"fprintf(stderr, ""%s| %s: User not authenticated\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""User"", ""not"", ""authenticated\\n"", ""LogTime"", ""PROGRAM""]]",[-7848350853608063440],6219,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3e5d7cdf22bea10b5f35fd5881ed2d1724ba88b2,25 Jun 2007,"Author: Markus Moeller <huaraz@moeller.plus.com>
Kerberos SPNEGO helper

Kerberos-only SPNEGO helper using MIT or Heimdal kerberos
and the refrence SPNEGO parser published by Microsoft",6172,data/crawl/squid/hunk_4543.cpp,,,data/crawl/squid/old_hunk_4543.cpp,data/crawl/squid/new_hunk_4543.cpp,-1,88,,"fprintf(stderr, ""%s| %s: error while resolving hostname '%s'\n"", LogTime(), PROGRAM, hostname);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""error"", ""while"", ""resolving"", ""hostname"", ""%s"", ""\\n"", ""LogTime"", ""PROGRAM"", ""hostname""]]",[11597186544908789104],6218,"432 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e4ae841bb56fc39cf350c84d1aa04146f7bd808d,17 Nov 2009,Fixed some cases of linkage type mismatch and parameter shadowing,128,data/crawl/squid/hunk_3537.cpp,,,data/crawl/squid/old_hunk_3537.cpp,data/crawl/squid/new_hunk_3537.cpp,27,27,"fatalf(""Failed to make swap directory %s: %s"",
               path, xstrerror());","fatalf(""Failed to make swap directory %s: %s"",
               aPath, xstrerror());","[""updateVariable""]","[[""path""], [""aPath""]]",[2566756810777070080],6217,0:00:00
https://github.com/squid-cache/squid/commit/06f0c8afe4148609e3919881ee18ffbbe0dcf804,15 Mar 2000,adding,152,data/crawl/squid/hunk_6072.cpp,,,data/crawl/squid/old_hunk_6072.cpp,data/crawl/squid/new_hunk_6072.cpp,-1,81,,"fatalf(""Cannot open %s: %s"", lf->path, xstrerror());","[""addLog""]","[[], [""fatalf"", ""Cannot"", ""open"", ""%s"", ""%s"", ""lf"", ""path"", ""xstrerror""]]",[12326428478525649570],6216,"1769 days, 12:00:00"
https://github.com/squid-cache/squid/commit/82b7abe3ff9fcee6e92696c8fbf2d66c6777ca2a,22 Nov 2009,"Author: Adrian Chadd + Tim Starling
Port from 2.7: Logging infrastructure updates.

 * Basic port of the Squid-2.7 modular logging code 
 * Adds support for async daemon helpers.
 * One daemon helper for file IO is included.
 * Adds UDP stream logging facility. (Tim Starling)

Ported by Amos Jeffries.",2427,data/crawl/squid/hunk_3510.cpp,,,data/crawl/squid/old_hunk_3510.cpp,data/crawl/squid/new_hunk_3510.cpp,-1,136,,"fatal(""I don't handle this error well!"");","[""addLog""]","[[], [""fatal"", ""I"", ""don"", ""t"", ""handle"", ""this"", ""error"", ""well""]]",[7001999352313155979],6215,0:00:00
https://github.com/squid-cache/squid/commit/a98bcbee0005004c1aa26042060eb1dd7dad482b,02 Dec 2009,"Shuffle simple math functions into SquidMath

This unlinks many depencies pulled in by tools.cc through the more
complicated permissions, and death reporting code.",230,data/crawl/squid/hunk_3491.cpp,,,data/crawl/squid/old_hunk_3491.cpp,data/crawl/squid/new_hunk_3491.cpp,3,3,"storeAppendPrintf(sentry, ""cpu_usage = %f%%\n"", dpercent(ct, dt));","storeAppendPrintf(sentry, ""cpu_usage = %f%%\n"", Math::doublePercent(ct, dt));","[""removeVariable"", ""addVariable""]","[[""dpercent""], [""Math"", ""doublePercent""]]",[-12199964483368167814],6214,0:00:00
https://github.com/squid-cache/squid/commit/a98bcbee0005004c1aa26042060eb1dd7dad482b,02 Dec 2009,"Shuffle simple math functions into SquidMath

This unlinks many depencies pulled in by tools.cc through the more
complicated permissions, and death reporting code.",230,data/crawl/squid/hunk_3485.cpp,,,data/crawl/squid/old_hunk_3485.cpp,data/crawl/squid/new_hunk_3485.cpp,10,10,"storeAppendPrintf(sentry, ""\tStorage Mem capacity:\t%4.1f%% used, %4.1f%% free\n"",
                      dpercent(mem_node::InUseCount(), store_pages_max),
                      dpercent((store_pages_max - mem_node::InUseCount()), store_pages_max));","storeAppendPrintf(sentry, ""\tStorage Mem capacity:\t%4.1f%% used, %4.1f%% free\n"",
                      Math::doublePercent(mem_node::InUseCount(), store_pages_max),
                      Math::doublePercent((store_pages_max - mem_node::InUseCount()), store_pages_max));","[""removeVariable"", ""addVariable""]","[[""dpercent"", ""dpercent""], [""Math"", ""doublePercent"", ""Math"", ""doublePercent""]]",[-24399928966736335628],6213,0:00:00
https://github.com/squid-cache/squid/commit/48d54e4daa77f1b390c3d38c0346949703fcb481,16 Dec 2009,"Run helpers on-demand

For some config backwards compatibility the maximum is kept as a single
integer first parameter to the *children directives.

Default setting changes:

 Instead of starting N helpers on startup and each reconfigure this
 makes the default zero and the configured value a maximum cap.
 The default maximum is raised from 5 to 20 for all helpers except
 for dnsservers where the maximum is raised to the old documented
 maximum of 32.

Obsoleted settings:
 url_rewrite_concurrency
  - replaced by the concurrency=N option now available on all *_children
    directives (including auth_param X children).
    To avoid compile problems this directive had to be fully dropped.

 auth_param X concurrency N
  - as above. However the option was able to be retained, as deprecated
    for future removal as well.


Behavior changes:

Whenever a request needs to use a helper and there are none available
immediately Squid tests to see if its okay to start a new one. Then does so.

The ""helpers dying too fast"" warnings and Squid closing has been modified
Squid will now not care about dying helpers if there are more that
startup=N active. If the death causes less than startup=N to be running
and is hit twice in less than 30 seconds will cause the warning message
to be doisplayed and Squid to abort same as before.

NP: that with startup=0 (the new default) helpers dying before or after
their first use will not crash Squid. But may result in a loop of
hung/failed requests and WILL result in a great many helper-failed
warnings in cache.log.

If needed we can bump the startup default back to 1 to avoid all that.
Or add a special check to kill squid if helpers die during startup and
provide a clearer log message ""Foo helper is dying before we can finish
starting it"" etc.

TODO: the current patch has no way to dynamically decrease the number of
      helpers. Only a reconfigure or helper dying can do that.",945,data/crawl/squid/hunk_3464.cpp,,,data/crawl/squid/old_hunk_3464.cpp,data/crawl/squid/new_hunk_3464.cpp,2,2,"storeAppendPrintf(sentry, ""number active: %d of %d (%d shutting down)\n"",
                      hlp->n_active, hlp->n_to_start, (hlp->n_running - hlp->n_active) );","storeAppendPrintf(sentry, ""number active: %d of %d (%d shutting down)\n"",
                      hlp->childs.n_active, hlp->childs.n_max, (hlp->childs.n_running - hlp->childs.n_active) );","[""updateVariable"", ""addVariable""]","[[""n_to_start""], [""childs"", ""childs"", ""n_max"", ""childs"", ""childs""]]",[30422362298305122727],6212,0:00:00
https://github.com/squid-cache/squid/commit/82b7abe3ff9fcee6e92696c8fbf2d66c6777ca2a,22 Nov 2009,"Author: Adrian Chadd + Tim Starling
Port from 2.7: Logging infrastructure updates.

 * Basic port of the Squid-2.7 modular logging code 
 * Adds support for async daemon helpers.
 * One daemon helper for file IO is included.
 * Adds UDP stream logging facility. (Tim Starling)

Ported by Amos Jeffries.",2427,data/crawl/squid/hunk_3506.cpp,,,data/crawl/squid/old_hunk_3506.cpp,data/crawl/squid/new_hunk_3506.cpp,-1,115,,"fprintf(fp, ""%s"", buf + 1);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""buf"", ""1""]]",[-4859322144320450882],6211,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/5a48ed18b5610e3e2d3d5250797375f4fb93dc1e,02 Jan 2010,"Basic Authentication Helper name upgrades

This nearly completes renaming and C++ compiling of the basic auth helpers.
MSNT is still pending cleanup in it's smb library code.

TODO: other helper types updated.",446,data/crawl/squid/hunk_3445.cpp,,,data/crawl/squid/old_hunk_3445.cpp,data/crawl/squid/new_hunk_3445.cpp,5,5,"fprintf(stderr, ""Example yp_auth mydomain.com passwd.byname\n"");","fprintf(stderr, ""Example basic_yp_auth mydomain.com passwd.byname\n"");","[""updateContent""]","[[""yp_auth""], [""basic_yp_auth""]]",[-4607854977406401089],6210,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,476,-1,"fprintf(stdout, ""BH makeNegTokenTarg failed with rc=%d\n"",rc);",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""makeNegTokenTarg"", ""failed"", ""with"", ""rc"", ""%d\\n"", ""rc""], []]",[22674095869709003026],6209,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,475,-1,"fprintf(stderr, ""%s| %s: makeNegTokenTarg failed with rc=%d\n"", LogTime(), PROGRAM, rc);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""makeNegTokenTarg"", ""failed"", ""with"", ""rc"", ""%d\\n"", ""LogTime"", ""PROGRAM"", ""rc""], []]",[19420802712034584714],6208,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,413,-1,"fprintf(stderr, ""%s| %s: Token is possibly a GSSAPI token\n"", LogTime(), PROGRAM);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Token"", ""is"", ""possibly"", ""a"", ""GSSAPI"", ""token\\n"", ""LogTime"", ""PROGRAM""], []]",[10652912587544659733],6207,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,402,-1,"fprintf(stdout, ""BH Invalid GSS-SPNEGO query\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""Invalid"", ""GSS"", ""SPNEGO"", ""query\\n""], []]",[20368763500999039302],6206,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,401,-1,"fprintf(stderr, ""%s| %s: Invalid GSS-SPNEGO query [%s]\n"", LogTime(), PROGRAM, buf);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""GSS"", ""SPNEGO"", ""query"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf""], []]",[25308916076387808654],6205,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,396,-1,"fprintf(stderr, ""%s| %s: parseNegTokenInit failed with rc=%d\n"", LogTime(), PROGRAM, rc);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""parseNegTokenInit"", ""failed"", ""with"", ""rc"", ""%d\\n"", ""LogTime"", ""PROGRAM"", ""rc""], []]",[23893375745594741414],6204,"32 days, 12:00:00"
https://github.com/squid-cache/squid/commit/5d8e63c9ae3b576a7b0c9c7e391c11e733ac8160,09 Feb 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
squid_kerb_auth logging clarification

add ERROR, WARNING, etc to the logging messages.",52,data/crawl/squid/hunk_3422.cpp,,,data/crawl/squid/old_hunk_3422.cpp,data/crawl/squid/new_hunk_3422.cpp,2,2,"fprintf(stderr,
                ""%s| %s: error while resolving ip address with getnameinfo: %s\n"",
                LogTime(), PROGRAM, xgai_strerror(rc));","fprintf(stderr,
                ""%s| %s: ERROR: resolving ip address with getnameinfo: %s failed\n"",
                LogTime(), PROGRAM, xgai_strerror(rc));","[""updateContent""]","[[""error"", ""while"", ""%s\\n""], [""ERROR"", ""%s"", ""failed\\n""]]",[-9424697973057449785],6203,0:00:00
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4379.cpp,,,data/crawl/squid/old_hunk_4379.cpp,data/crawl/squid/new_hunk_4379.cpp,-1,39,,"storeAppendPrintf(e, "" sslBump"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""sslBump""]]",[3847535975479246232],6202,"400 days, 0:00:00"
https://github.com/squid-cache/squid/commit/15df8349237e9eef90b030838021ad89712bf8ea,23 Nov 1997,"Move *ConnectionOpen() functionality to client_side.c and icp_v2.c.
trying to make it so HUP doesn't require closing all the connections",205,data/crawl/squid/hunk_6916.cpp,,,data/crawl/squid/old_hunk_6916.cpp,data/crawl/squid/new_hunk_6916.cpp,-1,30,,"fatal(""Cannot open HTTP Port"");","[""addLog""]","[[], [""fatal"", ""Cannot"", ""open"", ""HTTP"", ""Port""]]",[5872952252793402891],6201,"2271 days, 12:00:00"
https://github.com/squid-cache/squid/commit/42687bb299c004cd94424c85c9a0fa6bf38344bb,09 May 2010,Kill rfc1035_errno & error_message globals. We always have the error code available anyway,58,data/crawl/squid/hunk_3363.cpp,,,data/crawl/squid/old_hunk_3363.cpp,data/crawl/squid/new_hunk_3363.cpp,3,3,"printf(""ERROR %d\n"", rfc1035_errno);","printf(""ERROR %d\n"", -n);","[""updateVariable"", ""addVariable""]","[[""rfc1035_errno""], [""n""]]",[8573910639375888055],6200,0:00:00
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4954.cpp,,,data/crawl/squid/old_hunk_4954.cpp,data/crawl/squid/new_hunk_4954.cpp,-1,68,,"fatalf(""authenticateNTLMHandleReply: *** Unsupported helper response ***, '%s'\n"", reply);","[""addLog""]","[[], [""fatalf"", ""authenticateNTLMHandleReply"", ""***"", ""Unsupported"", ""helper"", ""response"", ""***"", ""%s"", ""\\n"", ""reply""]]",[-3623871199738568275],6199,"841 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4951.cpp,,,data/crawl/squid/old_hunk_4951.cpp,data/crawl/squid/new_hunk_4951.cpp,-1,501,,"fatalf(""authenticateNegotiateHandleReply: *** Unsupported helper response ***, '%s'\n"", reply);","[""addLog""]","[[], [""fatalf"", ""authenticateNegotiateHandleReply"", ""***"", ""Unsupported"", ""helper"", ""response"", ""***"", ""%s"", ""\\n"", ""reply""]]",[2877559570256363225],6198,"841 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6bf4f823fa73dbe9e91d9e3600c313e15347d5d9,23 Oct 2005,"Negotiate authentication scheme support.

Originally written for Squid-2.5 by Henrik, ported to Squid-3 by Kinkie
and bugfixed by Henrik.",2492,data/crawl/squid/hunk_4951.cpp,,,data/crawl/squid/old_hunk_4951.cpp,data/crawl/squid/new_hunk_4951.cpp,-1,474,,auth_user_request->denyMessage(arg);,"[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""arg""]]",[4747565790080841534],6197,"841 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3346.cpp,,,data/crawl/squid/old_hunk_3346.cpp,data/crawl/squid/new_hunk_3346.cpp,-1,290,,"auth_user_request->denyMessage(""Authentication in progress"");","[""addLog""]","[[], [""auth_user_request"", ""denyMessage"", ""Authentication"", ""in"", ""progress""]]",[-13487520356847963479],6196,0:00:00
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3344.cpp,,,data/crawl/squid/old_hunk_3344.cpp,data/crawl/squid/new_hunk_3344.cpp,74,-1,"auth_user_request->denyMessage(""Login successful"");",,"[""removeLog""]","[[""auth_user_request"", ""denyMessage"", ""Login"", ""successful""], []]",[-9105902704882108649],6195,0:00:00
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3344.cpp,,,data/crawl/squid/old_hunk_3344.cpp,data/crawl/squid/new_hunk_3344.cpp,69,-1,"auth_user_request->denyMessage(""NTLM authentication requires a persistent connection"");",,"[""removeLog""]","[[""auth_user_request"", ""denyMessage"", ""NTLM"", ""authentication"", ""requires"", ""a"", ""persistent"", ""connection""], []]",[18540693860504430209],6194,0:00:00
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3344.cpp,,,data/crawl/squid/old_hunk_3344.cpp,data/crawl/squid/new_hunk_3344.cpp,65,-1,"auth_user_request->denyMessage(""Authentication in progress"");",,"[""removeLog""]","[[""auth_user_request"", ""denyMessage"", ""Authentication"", ""in"", ""progress""], []]",[13487520356847963479],6193,0:00:00
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5055.cpp,,,data/crawl/squid/old_hunk_5055.cpp,data/crawl/squid/new_hunk_5055.cpp,-1,7,,digest_request->setDenyMessage(t);,"[""addLog""]","[[], [""digest_request"", ""setDenyMessage"", ""t""]]",[15362534897672714506],6192,"932 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4542b25ba0c3d195fcd2f43de2e6ba3167957156,02 Jun 2010,"Bug 2305: Multiple leaks and assertion crashes in authentication.

 * implements proper RefCounting using the RefCount.h classes for
   almost all auth objects in Squid.

 * Restructures auth objects with a simpler structure of duties and scopes.

 * Prunes away several circular and indirectly circular pointer loops

 * Adds an API to auth config for handling the mainRotate() event. To only
   shutdown helpers, fixing the loss of cached credentials on rotate.

 * Adds a username_cache page to cachemgr interface to display the current
   credentials and their TTLs to various revalidation or garbage events.


With this we end up with several global pointers for the auth schemes which
have been built into the current Squid. These are RefCount pointers, fixing
the leak of schemes on shutdown. Schemes are now also permanent structures
for the runtime of Squid, fixing leaks on reconfigure and rotate actions.

These AuthSchemes are responsible for creating auth Config objects for each
auth protocol configured in squid.conf. These config objects are now also
able to be altered with a reconfigure instead of requiring a restart.

Each HTTP request authentication attempt generates AuthUserRequest objects,
which may or may not pointer to an AuthUser set of credentials being checked.
AuthUserRequest is RefCounted instead of locked, fixing several assertion
crashes.

AuthUser is now RefCounted instead of locked. It's children inherit
these properties. This simplifies the object handling a lot and fixes
several assertions.
 * This also means AuthUser no longer needs a back-pointer to all
AuthUserRequest in order to see if its still needed alive, fixing one
circular lock loop and a few possible assertions.
 * The username cache pointers to only AuthUser objects, fixing a second
cirular lock loop and potentially leakage. Also simplifying the hash cache
handling a lot.

Non-Auth code needing a reference to authentication credentials should
hold a pointer to either an AuthUserRequest or AuthUser object. Not any
other auth object.


FUTURE WORK;
 There is still some conditions leading to auth re-challenge when they
 are not expected.
 A fair chunk of classes and enums have been shuffled into separate files
 to keep the scopes clearer. This could be increased in future when
 building the Auth namespace.
 Potential is now present for simpler TTL handling for all auth types.



This work was a collaboration between multiple interested parties over
the last year, with additional developer time and testing funded by
Netspace Online Systems.",5398,data/crawl/squid/hunk_3334.cpp,,,data/crawl/squid/old_hunk_3334.cpp,data/crawl/squid/new_hunk_3334.cpp,110,-1,"digest_request->setDenyMessage(""Incorrect password"");",,"[""removeLog""]","[[""digest_request"", ""setDenyMessage"", ""Incorrect"", ""password""], []]",[-3651971687145068688],6191,0:00:00
https://github.com/squid-cache/squid/commit/c8be6d7b5c7b735484df330a38987ee8fa79e6ac,24 Sep 2002,Client side refactoring - no functionality changes,2627,data/crawl/squid/hunk_5572.cpp,,,data/crawl/squid/old_hunk_5572.cpp,data/crawl/squid/new_hunk_5572.cpp,-1,21,,"storeAppendPrintf(output, ""\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""output"", ""\\n""]]",[-2964719264643062512],6190,"1404 days, 0:00:00"
https://github.com/squid-cache/squid/commit/ecc3091bac1697dd76c93b4349ba61f5001698d5,04 Oct 2000,"DW:
 - Simplified ipcache internals in the same manner as the fqdncache code.
   The ipcache structures have been made internal to ipcache.c.  The
   status variable is gone.  IPcache entries are added to the hash table
   only after the lookup completes.  There is no more need for
   ipcacheUnregister. etc.",430,data/crawl/squid/hunk_5973.cpp,,,data/crawl/squid/old_hunk_5973.cpp,data/crawl/squid/new_hunk_5973.cpp,8,-1,fatal_dump(tmp_error_buf);,,"[""removeLog""]","[[""fatal_dump"", ""tmp_error_buf""], []]",[17726151251914438360],6189,"1768 days, 12:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5906.cpp,,,data/crawl/squid/old_hunk_5906.cpp,data/crawl/squid/new_hunk_5906.cpp,-1,204,,"fprintf(stderr, ""ntlmDecodeAuth: header check fails\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ntlmDecodeAuth"", ""header"", ""check"", ""fails\\n""]]",[-15589273938587539073],6188,"1720 days, 12:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5906.cpp,,,data/crawl/squid/old_hunk_5906.cpp,data/crawl/squid/new_hunk_5906.cpp,-1,120,,"fprintf(stderr, ""ntlmCheckHeader: bad header signature\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ntlmCheckHeader"", ""bad"", ""header"", ""signature\\n""]]",[-18351222388485653775],6187,"1720 days, 12:00:00"
https://github.com/squid-cache/squid/commit/94439e4e1d1a662f14357ee1e16c4a9af95db94b,08 Jan 2001,"Major rewrite of proxy authentication to support other schemes than
Basic (auth_rewrite branch on SourceForge).
Contributors:
   Andy Doran
   Robert Collins
   Chemolli Francesco
   Henrik Nordstrom

For details about the new API's, see Programmers Guide.

As part of this change everything from auth_modules has been moved to
src/auth/basic/helpers",21209,data/crawl/squid/hunk_5906.cpp,,,data/crawl/squid/old_hunk_5906.cpp,data/crawl/squid/new_hunk_5906.cpp,-1,261,,"printf(""TT %s\n"", data);","[""addLog""]","[[], [""printf"", ""TT"", ""%s\\n"", ""data""]]",[4578555239133075407],6186,"1720 days, 12:00:00"
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3287.cpp,,,data/crawl/squid/old_hunk_3287.cpp,data/crawl/squid/new_hunk_3287.cpp,11,12,"fprintf( stdout, ""OK\n"" );","SEND_OK("""");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stdout"", ""OK\\n""], [""SEND_OK""]]",[11827114508404674509],6185,0:00:00
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3295.cpp,,,data/crawl/squid/old_hunk_3295.cpp,data/crawl/squid/new_hunk_3295.cpp,6,6,"printf(""ERR Wrong password\n"");","SEND_ERR(""Wrong password"");","[""updateLog"", ""updateContent""]","[[""printf"", ""ERR"", ""password\\n""], [""SEND_ERR"", ""password""]]",[-702912338452461715],6184,0:00:00
https://github.com/squid-cache/squid/commit/3c641669a1f54db30f5bd364b089d56a319a0d0f,28 Nov 2001,"Latest bugfixes from the NTLM development branch.

These include
* A memory leak in the auth infrastructure.
* Debugging and reliability fixes to the NTLMSSP helper.
* The brand spanking new winbindd helper developed by Kinkie with input from
  the SAMBA team. This helper should eliminate the occasional errors currently
  plaguing NTLM with the NTLMSSP helper. It's included for completeness, as
  it has no squid-internal changes, but the actual helper needs some serious
  user bashing to be called stable.",919,data/crawl/squid/hunk_5708.cpp,,,data/crawl/squid/old_hunk_5708.cpp,data/crawl/squid/new_hunk_5708.cpp,-1,28,,"fprintf(stderr,""Empty LM password supplied for user %s\\%s. ""
							""No-auth\n"",domain,user);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Empty"", ""LM"", ""password"", ""supplied"", ""for"", ""user"", ""%s\\\\%s"", ""No"", ""auth\\n"", ""domain"", ""user""]]",[-839344826604013263],6183,"1568 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3c641669a1f54db30f5bd364b089d56a319a0d0f,28 Nov 2001,"Latest bugfixes from the NTLM development branch.

These include
* A memory leak in the auth infrastructure.
* Debugging and reliability fixes to the NTLMSSP helper.
* The brand spanking new winbindd helper developed by Kinkie with input from
  the SAMBA team. This helper should eliminate the occasional errors currently
  plaguing NTLM with the NTLMSSP helper. It's included for completeness, as
  it has no squid-internal changes, but the actual helper needs some serious
  user bashing to be called stable.",919,data/crawl/squid/hunk_5707.cpp,,,data/crawl/squid/old_hunk_5707.cpp,data/crawl/squid/new_hunk_5707.cpp,6,-1,"fprintf(stderr, ""No auth at all. Returning no-auth\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""No"", ""auth"", ""at"", ""all"", ""Returning"", ""no"", ""auth\\n""], []]",[15157065372892297358],6182,"1568 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7b1e5eb4f69eeb46a9f4586f5c83512ecacc928a,05 Jun 2010,"Replaced blocking comm_open_listener() call for incoming and outgoing SNMP
ports with Ipc::StartListening calls, to use the ""shared listen"" feature when
doing SMP.",107,data/crawl/squid/hunk_3324.cpp,,,data/crawl/squid/old_hunk_3324.cpp,data/crawl/squid/new_hunk_3324.cpp,19,39,"fatal(""Cannot open SNMP Port"");","fatal(""Cannot open Incoming SNMP Port"");","[""updateContent""]","[[], [""Incoming""]]",[-3658564119226930972],6181,"16 days, 0:00:00"
https://github.com/squid-cache/squid/commit/013e320c6831a2b175ce7a5b4fc15e58dafdc27d,14 Jun 2010,"Support ICP and HTCP _servers_ sharing listening sockets.

Without a shared cache, the servers will report many false misses.

ICP and HTCP _clients_ cannot be supported in SMP environment unless each
process has its own address (i.e., unique IP address and/or unique [ICP] port)
because we cannot match outgoing queries and incoming responses across
processes. If ICP/HTCP support in SMP is needed, the easiest change would
be to use random source ports for sending ICP/HTCP queries. This may also
improve security by avoiding well-known source ports for UDP queries.",141,data/crawl/squid/hunk_3300.cpp,,,data/crawl/squid/old_hunk_3300.cpp,data/crawl/squid/new_hunk_3300.cpp,12,-1,"fatal(""Cannot open HTCP Socket"");",,"[""removeLog""]","[[""fatal"", ""Cannot"", ""open"", ""HTCP"", ""Socket""], []]",[-3828576806609246128],6180,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fe090a8613fa719ae354ee7e6027e3006236c8be,02 May 2010,"Replaced blocking comm_open_listener() call for HTTP ports with
Ipc::StartListening calls to use the ""shared listen"" feature when doing SMP.

TODO: convert HTTPS code the same way.",84,data/crawl/squid/hunk_3382.cpp,,,data/crawl/squid/old_hunk_3382.cpp,data/crawl/squid/new_hunk_3382.cpp,3,3,"fatal(""Cannot open HTTP Port"");","fatal(""No HTTP or HTTPS ports configured"");","[""updateContent""]","[[""Cannot"", ""open"", ""Port""], [""No"", ""or"", ""HTTPS"", ""ports"", ""configured""]]",[-11900905311244628267],6179,"33 days, 0:00:00"
https://github.com/squid-cache/squid/commit/00516be10a0d4dae63c9a0b98ab2ed8f4138389c,24 May 2010,"Replaced blocking comm_open_listener() call for HTTPS ports with
Ipc::StartListening calls, to use the ""shared listen"" feature when doing SMP.

Moved common HTTP and HTTPS port opening code into OpenedHttpSocket() and
AddOpenedHttpSocket().",88,data/crawl/squid/hunk_3354.cpp,,,data/crawl/squid/old_hunk_3354.cpp,data/crawl/squid/new_hunk_3354.cpp,-1,13,,fatal(msgIfFail);,"[""addLog""]","[[], [""fatal"", ""msgIfFail""]]",[-12734579319536127246],6178,"22 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3193.cpp,,,data/crawl/squid/old_hunk_3193.cpp,data/crawl/squid/new_hunk_3193.cpp,-1,786,,"puts( ""#"" );","[""addLog""]","[[], [""puts""]]",[4142537773861848358],6177,0:00:00
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3193.cpp,,,data/crawl/squid/old_hunk_3193.cpp,data/crawl/squid/new_hunk_3193.cpp,-1,711,,"fprintf( stderr, ""unable to resolve host %s!\n"", optarg );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""unable"", ""to"", ""resolve"", ""host"", ""%s"", ""\\n"", ""optarg""]]",[7986427115954510008],6176,0:00:00
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3193.cpp,,,data/crawl/squid/old_hunk_3193.cpp,data/crawl/squid/new_hunk_3193.cpp,-1,458,,"fprintf( stderr, ""WARNING: unable to unlink %s: %s\n"",
		   fn, strerror(errno) );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""WARNING"", ""unable"", ""to"", ""unlink"", ""%s"", ""%s\\n"", ""fn"", ""strerror"", ""errno""]]",[7435396119948429792],6175,0:00:00
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3191.cpp,,,data/crawl/squid/old_hunk_3191.cpp,data/crawl/squid/new_hunk_3191.cpp,-1,171,,"fprintf( stderr, ""# creating %s\n"", filename );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""creating"", ""%s\\n"", ""filename""]]",[-15899706780798451664],6174,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3180.cpp,,,data/crawl/squid/old_hunk_3180.cpp,data/crawl/squid/new_hunk_3180.cpp,3,3,"fprintf(stderr, ""helper: Group does not exist '%s'\n"",
                groupname);","fprintf(stderr, ""ERROR: Group does not exist '%s'\n"", groupname);","[""updateContent""]","[[""helper""], [""ERROR""]]",[9112892746385274865],6173,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3175.cpp,,,data/crawl/squid/old_hunk_3175.cpp,data/crawl/squid/new_hunk_3175.cpp,60,-1,"fprintf(stderr, ""%s[%d]: "", myname, mypid);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s[%d]"", ""myname"", ""mypid""], []]",[19957182019804867126],6172,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3172.cpp,,,data/crawl/squid/old_hunk_3172.cpp,data/crawl/squid/new_hunk_3172.cpp,73,-1,"fprintf(stderr, ""%s: ERROR: Too large..: %s\n"", argv[0], line);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Too"", ""large"", ""%s\\n"", ""argv[0]"", ""line""], []]",[2520549332920755081],6171,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3170.cpp,,,data/crawl/squid/old_hunk_3170.cpp,data/crawl/squid/new_hunk_3170.cpp,-1,254,,"fprintf(stderr, ""%s: ERROR: Input Too Large..: %s\n"", program_name, line);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Input"", ""Too"", ""Large"", ""%s\\n"", ""program_name"", ""line""]]",[-14606652758763455837],6170,0:00:00
https://github.com/squid-cache/squid/commit/43fed740b24c9b64720ba589782c48694ce55c7d,28 Jun 2010,Pull out the basic helper API definitions for sharing,250,data/crawl/squid/hunk_3292.cpp,,,data/crawl/squid/old_hunk_3292.cpp,data/crawl/squid/new_hunk_3292.cpp,3,3,"fprintf(stderr, ""Invalid Request\n"");","SEND_ERR(""Invalid Request"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Request\\n""], [""SEND_ERR"", ""Request""]]",[12545476235354964556],6169,"7 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3149.cpp,,,data/crawl/squid/old_hunk_3149.cpp,data/crawl/squid/new_hunk_3149.cpp,18,17,"fprintf(stderr, ""\nUnable to connect to SSL LDAP server: %s port:%d\n"",
                                    ldapServer, port);","fprintf(stderr, ""FATAL: Unable to connect to SSL LDAP server: %s port:%d\n"",
                                    ldapServer, port);","[""updateContent""]","[[""\\nUnable""], [""FATAL"", ""Unable""]]",[-604721142753830105],6168,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3147.cpp,,,data/crawl/squid/old_hunk_3147.cpp,data/crawl/squid/new_hunk_3147.cpp,15,15,"fprintf(stderr, ""%s: ERROR: Too large..: %s\n"", argv[0], buf);","fprintf(stderr, ""%s: ERROR: Input Too large..: %s\n"", argv[0], buf);","[""updateContent""]","[[], [""Input""]]",[-8139556017175161287],6167,0:00:00
https://github.com/squid-cache/squid/commit/c152a4473c4a3d187f67923eb83c5fe6ccd91013,12 Jul 2010,"Helpers: Naming and C++ update for external ACL helpers

 * Also adds the Fake auth helper for testing Basic authentication.
 * Also adds manual pages for most external ACL helpers

TODO: test for and fix any build issues on Windows.",2485,data/crawl/squid/hunk_3169.cpp,,,data/crawl/squid/old_hunk_3169.cpp,data/crawl/squid/new_hunk_3169.cpp,3,3,"fprintf(stderr, ""Invalid Request\n"");","SEND_ERR(""Invalid Request. No Username."");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Request\\n""], [""SEND_ERR"", ""Request"", ""No"", ""Username""]]",[7242255541100848947],6166,0:00:00
https://github.com/squid-cache/squid/commit/e0f8b7097291fc129f5090eb975832a8f16ca401,30 Jul 2010,"Bug 2994: pt 1: Open *_port directives correctly in IPv4-only mode.

Was opening snmp_port, icp_port, htcp_port under the v4-mapping assumption.
This forces the ports both listening and outgoing to IPv4-only unless
v4-mapping is actually available in the system.",30,data/crawl/squid/hunk_3116.cpp,,,data/crawl/squid/old_hunk_3116.cpp,data/crawl/squid/new_hunk_3116.cpp,-1,5,,"fatal(""SNMP port cannot be opened."");","[""addLog""]","[[], [""fatal"", ""SNMP"", ""port"", ""cannot"", ""be"", ""opened""]]",[-4901172764364796483],6165,0:00:00
https://github.com/squid-cache/squid/commit/e0f8b7097291fc129f5090eb975832a8f16ca401,30 Jul 2010,"Bug 2994: pt 1: Open *_port directives correctly in IPv4-only mode.

Was opening snmp_port, icp_port, htcp_port under the v4-mapping assumption.
This forces the ports both listening and outgoing to IPv4-only unless
v4-mapping is actually available in the system.",30,data/crawl/squid/hunk_3114.cpp,,,data/crawl/squid/old_hunk_3114.cpp,data/crawl/squid/new_hunk_3114.cpp,-1,6,,"fatal(""ICP port cannot be opened."");","[""addLog""]","[[], [""fatal"", ""ICP"", ""port"", ""cannot"", ""be"", ""opened""]]",[-10616160227703679668],6164,0:00:00
https://github.com/squid-cache/squid/commit/e0f8b7097291fc129f5090eb975832a8f16ca401,30 Jul 2010,"Bug 2994: pt 1: Open *_port directives correctly in IPv4-only mode.

Was opening snmp_port, icp_port, htcp_port under the v4-mapping assumption.
This forces the ports both listening and outgoing to IPv4-only unless
v4-mapping is actually available in the system.",30,data/crawl/squid/hunk_3112.cpp,,,data/crawl/squid/old_hunk_3112.cpp,data/crawl/squid/new_hunk_3112.cpp,-1,5,,"fatal(""HTCP port cannot be opened."");","[""addLog""]","[[], [""fatal"", ""HTCP"", ""port"", ""cannot"", ""be"", ""opened""]]",[4738780020611848114],6163,0:00:00
https://github.com/squid-cache/squid/commit/b1218840b92df2ac65c8da509fae0ec7e63a632d,13 Aug 2010,"Author: Markus Moeller <huaraz@moeller.plus.com>
Helper: ext_kerberos_ldap_group_acl: Lookup Kerberos/NTLM group via LDAP",5482,data/crawl/squid/hunk_3096.cpp,,,data/crawl/squid/old_hunk_3096.cpp,data/crawl/squid/new_hunk_3096.cpp,-1,1045,,"fprintf(stderr, ""%02x"", (unsigned char) av[n]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%02x"", ""unsigned"", ""char"", ""av[n]""]]",[-763546040624748714],6162,0:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3080.cpp,,,data/crawl/squid/old_hunk_3080.cpp,data/crawl/squid/new_hunk_3080.cpp,34,-1,"fputs( ""(unknown)\n"", stderr );",,"[""removeLog""]","[[""fputs"", ""unknown"", ""\\n"", ""stderr""], []]",[16791036293205242296],6161,0:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3080.cpp,,,data/crawl/squid/old_hunk_3080.cpp,data/crawl/squid/new_hunk_3080.cpp,32,-1,"fprintf( stderr, ""%s\n"", _sys_siglist[sig] );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s\\n"", ""_sys_siglist[sig]""], []]",[1572256004854501974],6160,0:00:00
https://github.com/squid-cache/squid/commit/ef84c0fba1eea41cbe5d05eca500b22da3b35544,19 Aug 2010,Remove diff-reducer hack in rev10754,505,data/crawl/squid/hunk_3080.cpp,,,data/crawl/squid/old_hunk_3080.cpp,data/crawl/squid/new_hunk_3080.cpp,30,-1,"fprintf( stderr, ""%s: "", msg );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""msg""], []]",[7533761602946052704],6159,0:00:00
https://github.com/squid-cache/squid/commit/691aef5aec7691fcd4cbd31e3ea14bf0a33a24ae,23 Apr 2005,"pthread_t is not always an unsigned long, a type cast is needed.",4,data/crawl/squid/hunk_5061.cpp,,,data/crawl/squid/old_hunk_5061.cpp,data/crawl/squid/new_hunk_5061.cpp,3,3,"storeAppendPrintf(sentry, ""%i\t0x%lx\t%ld\n"", i + 1, threadp->thread, threadp->requests);","storeAppendPrintf(sentry, ""%i\t0x%lx\t%ld\n"", i + 1, (unsigned long)threadp->thread, threadp->requests);","[""addVariable""]","[[], [""unsigned"", ""long""]]",[-1194457552177564325],6158,"972 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4299f876344efc8a8446f2bc0c940fadad2bff09,23 Aug 2010,"Bug #2583 fix: pure virtual method called

When a cbdata-protected class holds its own cbdata and has virtual
toCbdata(), there is a catch22 problem: we need cbdata to know whether
the pointer to the class object is valid, and we need to dereference
that pointer to get cbdata.

Added CbcPointer class to hold both a pointer to a potentially freed
class object and the cbdata pointer protecting that object. Keeping the
cbdata pointer allows us to test whether the object is still there
without dereferencing the object pointer.

Use the CbcPointer class to hold safe pointers to AsyncJobs. This
prevents ""pure virtual method called"" failures because we no longer
dereference freed job pointers.

Removed Initiator parameter from many initiatee constructors. The
Adaptation::Initiator::initiateAdaptation method now sets the initiator
of the job. This makes the constructor profile simpler and removes the
need to propagate Initiator changes through all the [nested]
constructors.

Renamed AsyncJob::AsyncStart() to AsyncJob::Start(). I had to change the
callers code anyway and it was a good opportunity to remove the
redundant ""Async"".


Special thanks to Stefan Fritsch for updating and testing an earlier
version of this patch.",1078,data/crawl/squid/hunk_3056.cpp,,,data/crawl/squid/old_hunk_3056.cpp,data/crawl/squid/new_hunk_3056.cpp,6,6,"outputBuffer.Printf("" cons%p"", theConsumer);","outputBuffer.Printf("" cons%p"", theConsumer.get());","[""removeVariable"", ""addVariable""]","[[], [""get""]]",[-5303253345844048825],6157,0:00:00
https://github.com/squid-cache/squid/commit/2fe7eff994f9cb87b4211714d77c200b5ebbcb97,17 Sep 2005,"Finish turning MemBuf into a full-fledged class.  Almost all of the
former standalone functions are now methods of MemBuf class.  The next
step may be to merge init() and clean() methods into the constructor
and destructor.",763,data/crawl/squid/hunk_4971.cpp,,,data/crawl/squid/old_hunk_4971.cpp,data/crawl/squid/new_hunk_4971.cpp,-1,3,,"mb->Printf(""\r\n"");","[""addLog""]","[[], [""mb"", ""Printf"", ""\\r\\n""]]",[2089718098006273182],6156,"901 days, 0:00:00"
https://github.com/squid-cache/squid/commit/18191440e92905de717a542b41e303cd73c119ce,24 Aug 2010,"Author: Henrik Nordstrom <henrik@nordstrom.net>
Author: Amos Jeffries <squid3@treenet.co.nz>
Collapse HTCP cache_peer options into one setting.

The list of HTCP mode options had grown a bit too large. Collapse them
all into a single htcp= option taking a list of mode flags.",93,data/crawl/squid/hunk_3043.cpp,,,data/crawl/squid/old_hunk_3043.cpp,data/crawl/squid/new_hunk_3043.cpp,10,12,"storeAppendPrintf(sentry, "" htcp-no-purge-clr"");","storeAppendPrintf(sentry, ""%sno-purge-clr"",(doneopts++>0?"","":""=""));","[""updateContent"", ""addContent"", ""addVariable""]","[[""htcp"", ""no""], [""%sno"", ""doneopts"", ""0""]]",[4611187678436319760],6155,0:00:00
https://github.com/squid-cache/squid/commit/bf1a7ece574ba696a111e941af3c1c3eb964f449,20 Jul 2010,"Author: Chad E. Naugle <chad.naugle@travimp.com>
Bug 2905: eDirectory (8.7 & 8.8) IPv4/IPv6->Username external ACL helper

Original code import.",2168,data/crawl/squid/hunk_3126.cpp,,,data/crawl/squid/old_hunk_3126.cpp,data/crawl/squid/new_hunk_3126.cpp,-1,137,,"fputs(dbuf, stdout);","[""addLog""]","[[], [""fputs"", ""dbuf"", ""stdout""]]",[-21040811309856973769],6154,"30 days, 12:00:00"
https://github.com/squid-cache/squid/commit/bf1a7ece574ba696a111e941af3c1c3eb964f449,20 Jul 2010,"Author: Chad E. Naugle <chad.naugle@travimp.com>
Bug 2905: eDirectory (8.7 & 8.8) IPv4/IPv6->Username external ACL helper

Original code import.",2168,data/crawl/squid/hunk_3126.cpp,,,data/crawl/squid/old_hunk_3126.cpp,data/crawl/squid/new_hunk_3126.cpp,-1,62,,"fputs(cbuf, stderr);","[""addLog""]","[[], [""fputs"", ""cbuf"", ""stderr""]]",[-6748753367423696763],6153,"30 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ac5de05bed05906909d7ccc894f940438b8a9967,29 Sep 2010,"Bug 3051: integer display overflow

This alters the cachemgr display formatting to use 64-bit integers
instead of 32-bit. Revealing overflows hiding behind display overflows.",302,data/crawl/squid/hunk_3017.cpp,,,data/crawl/squid/old_hunk_3017.cpp,data/crawl/squid/new_hunk_3017.cpp,5,5,"storeAppendPrintf(sentry, ""\t%6d on-disk objects\n"",
                      n_disk_objects);","storeAppendPrintf(sentry, ""\t%6ld on-disk objects\n"",
                      (long)n_disk_objects);","[""updateContent"", ""addVariable""]","[[""\\t%6d""], [""\\t%6ld"", ""long""]]",[7270058267196035803],6152,0:00:00
https://github.com/squid-cache/squid/commit/ac5de05bed05906909d7ccc894f940438b8a9967,29 Sep 2010,"Bug 3051: integer display overflow

This alters the cachemgr display formatting to use 64-bit integers
instead of 32-bit. Revealing overflows hiding behind display overflows.",302,data/crawl/squid/hunk_3016.cpp,,,data/crawl/squid/old_hunk_3016.cpp,data/crawl/squid/new_hunk_3016.cpp,20,20,"storeAppendPrintf(sentry, ""\tmemPool unaccounted:   %6d KB %3d%%\n"",
                          (t - (int) mp_stats.TheMeter->alloc.level) >> 10,
                          Math::intPercent((t - mp_stats.TheMeter->alloc.level), t));","storeAppendPrintf(sentry, ""\tmemPool unaccounted:   %6ld KB %3d%%\n"",
                          (long)((t - mp_stats.TheMeter->alloc.level) >> 10),
                          Math::intPercent((t - mp_stats.TheMeter->alloc.level), t));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%6d"", ""int""], [""%6ld"", ""long""]]",[24441871750778416335],6151,0:00:00
https://github.com/squid-cache/squid/commit/6da430a4640e07dfae7ef7a4451acc2854817014,01 Oct 2010,"Bug 3068: cache_dir capacity and usage overflows

Makes usage calculations use size_t instead of int and updates the
relevant fields storing the cache_dir capacity and usage fields as well.

This fixes Squid filling cache_dir with files >2GB in size.
Also allows Squid to store more than 2TB of data total in one dir.",55,data/crawl/squid/hunk_3006.cpp,,,data/crawl/squid/old_hunk_3006.cpp,data/crawl/squid/new_hunk_3006.cpp,5,5,"storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      100.0 * cur_size / max_size);","storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      (double)(100.0 * cur_size) / (double)max_size);","[""moveContent"", ""moveVariable"", ""addVariable""]","[[], [""double"", ""double""]]",[-8976833915472058670],6150,0:00:00
https://github.com/squid-cache/squid/commit/6ca7324f4760764b0597e7779dcffccd07e058ab,12 Oct 2010,"Author: Chad Naugle <chad.naugle@travimp.com>
eDirectory user-IP ACl string safety updates",400,data/crawl/squid/hunk_2976.cpp,,,data/crawl/squid/old_hunk_2976.cpp,data/crawl/squid/new_hunk_2976.cpp,5,4,"fputs(dbuf, stderr);","fputs(bbuf, stderr);","[""updateVariable""]","[[""dbuf""], [""bbuf""]]",[10137611812727004426],6149,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2969.cpp,,,data/crawl/squid/old_hunk_2969.cpp,data/crawl/squid/new_hunk_2969.cpp,390,-1,"fprintf(stderr, ""SMB_Logon_server: Couldn't allocate packet\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""SMB_Logon_server"", ""Couldn"", ""t"", ""allocate"", ""packet\\n""], []]",[20029027935438814705],6148,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2968.cpp,,,data/crawl/squid/old_hunk_2968.cpp,data/crawl/squid/new_hunk_2968.cpp,166,-1,"fprintf(fd, ""    %s\n"", outbuf1);",,"[""removeLog""]","[[""fprintf"", ""fd"", ""%s\\n"", ""outbuf1""], []]",[-1103988382793225785],6147,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2965.cpp,,,data/crawl/squid/old_hunk_2965.cpp,data/crawl/squid/new_hunk_2965.cpp,-1,139,,"printf(""Error in calling: %s ...\n"", err_string);","[""addLog""]","[[], [""printf"", ""Error"", ""in"", ""calling"", ""%s"", ""\\n"", ""err_string""]]",[7528727076570886787],6146,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2955.cpp,,,data/crawl/squid/old_hunk_2955.cpp,data/crawl/squid/new_hunk_2955.cpp,-1,1255,,"fprintf(stderr, ""Error receiving response to Check Dir request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""Check"", ""Dir"", ""request\\n""]]",[-10029968754704655339],6145,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2955.cpp,,,data/crawl/squid/old_hunk_2955.cpp,data/crawl/squid/new_hunk_2955.cpp,-1,565,,"fprintf(stderr, ""Error receiving response to write\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""write\\n""]]",[-22887121004651147542],6144,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2955.cpp,,,data/crawl/squid/old_hunk_2955.cpp,data/crawl/squid/new_hunk_2955.cpp,-1,240,,"fprintf(stderr, ""Error receiving response to open request\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""open"", ""request\\n""]]",[-11060493559980804330],6143,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2969.cpp,,,data/crawl/squid/old_hunk_2969.cpp,data/crawl/squid/new_hunk_2969.cpp,487,-1,"fprintf(stderr, ""SessSetupAndX response. Action = %i\n"",
            SVAL(SMB_Hdr(pkt), SMB_ssetpr_act_offset));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""SessSetupAndX"", ""response"", ""Action"", ""%i\\n"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_ssetpr_act_offset""], []]",[4441335963205359382],6142,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2969.cpp,,,data/crawl/squid/old_hunk_2969.cpp,data/crawl/squid/new_hunk_2969.cpp,469,-1,"fprintf(stderr, ""SMB_SessSetupAndX failed with errorclass = %i, Error Code = %i\n"",
                CVAL(SMB_Hdr(pkt), SMB_hdr_rcls_offset),
                SVAL(SMB_Hdr(pkt), SMB_hdr_err_offset));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""SMB_SessSetupAndX"", ""failed"", ""with"", ""errorclass"", ""%i"", ""Error"", ""Code"", ""%i\\n"", ""CVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_rcls_offset"", ""SVAL"", ""SMB_Hdr"", ""pkt"", ""SMB_hdr_err_offset""], []]",[-5891327049776777669],6141,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2969.cpp,,,data/crawl/squid/old_hunk_2969.cpp,data/crawl/squid/new_hunk_2969.cpp,459,-1,"fprintf(stderr, ""Error receiving response to SessSetupAndX\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""SessSetupAndX\\n""], []]",[17664103020917590369],6140,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2969.cpp,,,data/crawl/squid/old_hunk_2969.cpp,data/crawl/squid/new_hunk_2969.cpp,449,-1,"fprintf(stderr, ""Error sending SessSetupX request\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Error"", ""sending"", ""SessSetupX"", ""request\\n""], []]",[5811297851841865137],6139,0:00:00
https://github.com/squid-cache/squid/commit/c06f9773560ffee68bc5244403df191acee4bbfa,23 Jun 2002,"A bit of cleanups to make GCC happy, and removed some unused code.",416,data/crawl/squid/hunk_5639.cpp,,,data/crawl/squid/old_hunk_5639.cpp,data/crawl/squid/new_hunk_5639.cpp,50,-1,"fprintf(stderr, ""Error receiving response to TCon\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Error"", ""receiving"", ""response"", ""to"", ""TCon\\n""], []]",[26711466169847032482],6138,"1518 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2967.cpp,,,data/crawl/squid/old_hunk_2967.cpp,data/crawl/squid/new_hunk_2967.cpp,282,-1,"fprintf(stderr, ""Bad packet return in RFCNB_Recv... \n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Bad"", ""packet"", ""return"", ""in"", ""RFCNB_Recv"", ""\\n""], []]",[13390460590631321895],6137,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,384,-1,"fprintf(stderr, ""Pkt Len = %i, read_len = %i\n"", pkt_len, read_len);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Pkt"", ""Len"", ""%i"", ""read_len"", ""%i\\n"", ""pkt_len"", ""read_len""], []]",[-14749515261673248060],6136,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,364,-1,"fprintf(stderr, ""Frag_Len = %i, this_time = %i, this_len = %i, more = %i\n"", frag_len,
                this_time, this_len, more);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Frag_Len"", ""%i"", ""this_time"", ""%i"", ""this_len"", ""%i"", ""more"", ""%i\\n"", ""frag_len"", ""this_time"", ""this_len"", ""more""], []]",[21986929429100296154],6135,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,309,-1,"fprintf(stderr, ""Reading Pkt: Length = %i\n"", pkt_len);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Reading"", ""Pkt"", ""Length"", ""%i\\n"", ""pkt_len""], []]",[2546329978924844425],6134,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,280,-1,"fprintf(stderr, ""RFCNB KEEP ALIVE received\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""RFCNB"", ""KEEP"", ""ALIVE"", ""received\\n""], []]",[4094161876581336934],6133,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,266,-1,"fprintf(stderr, ""Connection closed reading\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Connection"", ""closed"", ""reading\\n""], []]",[3658438838238786031],6132,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,250,-1,"fprintf(stderr, ""Reading the packet, we got:"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Reading"", ""the"", ""packet"", ""we"", ""got""], []]",[31893954141555588920],6131,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,234,-1,"fprintf(stderr, ""Trying to read less than a packet:"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Trying"", ""to"", ""read"", ""less"", ""than"", ""a"", ""packet""], []]",[16752697044726255696],6130,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,205,-1,"fprintf(stderr, ""Len sent = %i ...\n"", len_sent);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Len"", ""sent"", ""%i"", ""\\n"", ""len_sent""], []]",[1761508097882951492],6129,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,173,-1,"fprintf(stderr, ""Frags = %i, tot_sent = %i\n"", i, tot_sent);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Frags"", ""%i"", ""tot_sent"", ""%i\\n"", ""i"", ""tot_sent""], []]",[-386152058147198788],6128,0:00:00
https://github.com/squid-cache/squid/commit/7c16470cc2d053ea2c540459843227dea08e8b40,16 Oct 2010,"basic_msnt_auth helper and NTLM/SMBLIB/RFCNB library polish.

Samba smblib/rfcnb code:
 * Import the latest copy which I could find a download link to.
   This source is from 1997 so I suspect there is something even newer
   we should be using. Time was tight is the only excuse for using
   these sources. Our originals were from 1995 and 1996 depending on the
   helper using it, with a mix of patches.

 * These two directories are in ours sources as lib/smblib and lib/rfcnb.
   Each has its own convenience library. Kept separate with original
   filenames to simplify future upgrades or removal.

 * Samba sources have been diffed and compared function by function
   against the copies previously in our sources. Functionality extensions
   we use have been grafted back on top of the new(er) Samba sources.
  - this was mostly around passing extra Unicode, DC hints and pre-crypted
    passwords to the login checks.
  - some files from libntlmauth have yet to be compared in fine detail,
    that will be completed today before merge.
  - some basic API function and struct definitions had to be moved to the
    API headers to prevent needing to include the *-priv.h private
    definitions externally to the library.

 * the Samba API headers have been wrapped with #ifndef safety wrappers

 * compile errors and include changes required to compile have been
   made (code stays C)

 * duplicate code in helpers/basic_auth/MSNT/* and libntlmauth/* is
   removed.

 * abuse of the smblib-priv.h and rfcnb-priv.h headers and all local
   re-definitions has been erased from our code. Replaced by includes 
   of the library API headers: rfcnb/rfcnb.h  smblib/smblib.h


libntlmauth:
 * smblib/rfcnb bits erased
 * moved to lib/ntlmauth in its much reduced form
 * built as a convenience library instead of full library",14917,data/crawl/squid/hunk_2966.cpp,,,data/crawl/squid/old_hunk_2966.cpp,data/crawl/squid/new_hunk_2966.cpp,94,-1,"fprintf(stderr, ""Discard_Rest called to discard: %i\n"", len);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Discard_Rest"", ""called"", ""to"", ""discard"", ""%i\\n"", ""len""], []]",[2698513984810611498],6127,0:00:00
https://github.com/squid-cache/squid/commit/7cfc1c9ac835daa437691a6cfe7ca82fe7c3bcdd,15 Apr 1999,"various bugs for internal DNS

also first stab at retransmission of delayed queries",132,data/crawl/squid/hunk_6156.cpp,,,data/crawl/squid/old_hunk_6156.cpp,data/crawl/squid/new_hunk_6156.cpp,-1,14,,"storeAppendPrintf(sentry, ""\nNameservers:\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""\\nNameservers"", ""\\n""]]",[5476975443759984694],6126,"2101 days, 12:00:00"
https://github.com/squid-cache/squid/commit/610ee3419c0f2cbb80e33ebfdd5d0eb5cb6995eb,30 May 2006,"Move clientCachable logic onto HttpRequest, as all the used fields in the
function where on the HttpRequest object.

Apply Gonzalo Aranas bugfix for the replacement to cachemgrRegister,
as having some options disabled/changed did not compile.",160,data/crawl/squid/hunk_4810.cpp,,,data/crawl/squid/old_hunk_4810.cpp,data/crawl/squid/new_hunk_4810.cpp,-1,19,,"storeAppendPrintf(sentry, ""Histogram of returned filedescriptors\n"");","[""addLog""]","[[], [""storeAppendPrintf"", ""sentry"", ""Histogram"", ""of"", ""returned"", ""filedescriptors\\n""]]",[8793565030453698602],6125,"800 days, 12:00:00"
https://github.com/squid-cache/squid/commit/12cf1be254530ce1179dc222dafe8964932e718f,25 Feb 1998,"- Added rudimental statistics for HTTP headers.

- Adjusted StatLogHist to a more ""generic""/flexible StatHist.
  Moved StatHist implementation into a separate file.",860,data/crawl/squid/hunk_6719.cpp,,,data/crawl/squid/old_hunk_6719.cpp,data/crawl/squid/new_hunk_6719.cpp,63,-1,"storeAppendPrintf(sentry, ""wall_time = %f\n"",
	tvSubDsec(f->timestamp, current_time));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""wall_time"", ""%f\\n"", ""tvSubDsec"", ""f"", ""timestamp"", ""current_time""], []]",[-7225499045681938401],6124,"2314 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6861.cpp,,,data/crawl/squid/old_hunk_6861.cpp,data/crawl/squid/new_hunk_6861.cpp,18,-1,"storeAppendPrintf(sentry, ""client_http.hits = %f/sec\n"",
	XAVG(client_http.hits));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""client_http"", ""hits"", ""%f/sec\\n"", ""XAVG"", ""client_http"", ""hits""], []]",[-33372811212936453129],6123,"2326 days, 12:00:00"
https://github.com/squid-cache/squid/commit/a7c05555fdb0ef180d8df2e68d53acc400bf2984,31 Jan 1998,"	- Combined various interprocess communication setup functions
	  into ipcCreate().
	- Removed some leftover ICP_HIT_OBJ things.
	- Removed cacheinfo and proto_count() and friends; these are to
	  be replaced in functionality by StatCounters and 5/60 minute
	  average views via cachemgr.
Changes to squid-1.2.beta11 (Jan 6, 1998):",997,data/crawl/squid/hunk_6861.cpp,,,data/crawl/squid/old_hunk_6861.cpp,data/crawl/squid/new_hunk_6861.cpp,16,-1,"storeAppendPrintf(sentry, ""client_http.requests = %f/sec\n"",
	XAVG(client_http.requests));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""client_http"", ""requests"", ""%f/sec\\n"", ""XAVG"", ""client_http"", ""requests""], []]",[-18600112218715778105],6122,"2326 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2919.cpp,,,data/crawl/squid/old_hunk_2919.cpp,data/crawl/squid/new_hunk_2919.cpp,57,56,"storeAppendPrintf(sentry, ""\t%6ld on-disk objects\n"",
                      (long)n_disk_objects);","storeAppendPrintf(sentry, ""\t%6.0f on-disk objects\n"",
                      stats.n_disk_objects);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""\\t%6ld"", ""long""], [""\\t%6"", ""0f"", ""stats""]]",[-2311981446863047312],6121,0:00:00
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2911.cpp,,,data/crawl/squid/old_hunk_2911.cpp,data/crawl/squid/new_hunk_2911.cpp,-1,180,,"storeAppendPrintf(entry, ""} by kid%d\n\n"", KidIdentifier);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""by"", ""kid%d\\n\\n"", ""KidIdentifier""]]",[-5031128074946964333],6120,0:00:00
https://github.com/squid-cache/squid/commit/8822ebee4947bcf883d74aa79a26e896449d0c36,28 Oct 2010,"SMP Cache Manager, Phase2 implementation.

Cache Manager actions are forwarded to Coordinator. Coordinator iterates over
Kids, aggregating their stats if possible and/or allowing each kid to dump
non-aggregatable output directly into response if needed. Non-aggregated
output is wrapped in ""by kidN { ... } by kidN"" markup to ease auto-processing.

Regressions and small output formatting changes are probably unavoidable
because stats are aggregated and passed around as doubles instead of integers
(no more overflows though!) and because many stats collection and formatting
lines had to be touched. These are steps in the right direction though, IMO.


Old code both computed and dumped stats to Store at the same time. To avoid
computing code duplication, we now collect stats in primitive Stats objects
and then either dump those to Store or send them to Coordinator for
aggregation and, eventual Store dump. What stats to collect, when to
aggregate, and when to dump is decided by action-specific Mgr::Action classes.

The Cache Manager menu now consists of ActionProfile objects. ActionProfile
maintains hard-coded information about specific actions. It uses ActionCreator
member to create Action objects when a cache manager request is received.

Added Mgr::ActionParams class to maintain action parameters, including HTTP
request details necessary for Store entry creation (in another strand) and
action-specific parameters (currently just credentials). In Phase3, this class
can be extended to supply more parameters such as kid IDs to which the action
should apply.

Added Mgr::Command that combines hard-coded ActionProfile details with
user-specified ActionParams. This simplifies many interfaces because we no
longer need to supply a long list of parameters, covering various parts of
action config.


Moved Cache Manager registration to Mgr::RegisterAction() globals to reduce
dependency on the CacheManager class, which is a singleton anyway, and which
is unused by most of the registration callers.  On the other hand, without
this change, no legacy (function-based actions) code would have been changed!


Enhanced TypedMsgHdr class to simplify storing and loading non-POD classes.
The caller can now easily handle a non-POD class as a series of put/get calls,
one for each POD member. This was necessary to send Mgr::ActionParams to
Coordinator and back. Will probably be useful for sending other complex
structures as well.


Reconfigure, shutdown, and other ""basic"" actions have been moved to
src/mgr/BasicActions.cc. Mgr::RegisterBasics() registers them.


Most of the Cache Manager code is now in src/mgr/.


Many more polishing touches.


More polishing left for future projects: Move CacheManager to Mgr namespace
and src/mgr/ directory. Use SBuf instead of String for ActionParams and
TypedMsgHdr. Rename Ipc::TypedMsgHdr to Ipc::Msg, Ipc::SocketMsg, or similar
because it maintains more than just msghdr struct. More stats aggregation,
and Phase3 changes.",6354,data/crawl/squid/hunk_2911.cpp,,,data/crawl/squid/old_hunk_2911.cpp,data/crawl/squid/new_hunk_2911.cpp,-1,177,,"storeAppendPrintf(entry, ""by kid%d {\n"", KidIdentifier);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""by"", ""kid%d"", ""\\n"", ""KidIdentifier""]]",[-6840278166809764065],6119,0:00:00
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,129,-1,"storeAppendPrintf(sentry, ""block_queue_len: %d\n"", diskd_stats.block_queue_len);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""block_queue_len"", ""%d\\n"", ""diskd_stats"", ""block_queue_len""], []]",[5726905984326187091],6118,"1327 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,128,-1,"storeAppendPrintf(sentry, ""open_fail_queue_len: %d\n"", diskd_stats.open_fail_queue_len);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""open_fail_queue_len"", ""%d\\n"", ""diskd_stats"", ""open_fail_queue_len""], []]",[7111146043948283811],6117,"1327 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,127,-1,"storeAppendPrintf(sentry, ""max_shmuse: %d\n"", diskd_stats.max_shmuse);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""max_shmuse"", ""%d\\n"", ""diskd_stats"", ""max_shmuse""], []]",[-26632339423346660253],6116,"1327 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,126,-1,"storeAppendPrintf(sentry, ""max_away: %d\n"", diskd_stats.max_away);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""max_away"", ""%d\\n"", ""diskd_stats"", ""max_away""], []]",[-22948254924291130043],6115,"1327 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,125,-1,"storeAppendPrintf(sentry, ""recv_count: %d\n"", diskd_stats.recv_count);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""recv_count"", ""%d\\n"", ""diskd_stats"", ""recv_count""], []]",[-14633075712997139321],6114,"1327 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59b2d47f54f8988d0dd74430a78b7a8599d819ff,22 Jul 2003,"Summary: Merge disk-factoring.
Keywords:

Patches applied:

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-14
   Merge of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-283-285

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-13
   Further OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-12
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-11
   And more OOification of the store drivers.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-10
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-9
   More store OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-8
   Dist missing files.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-7
   And moe OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-6
   And more OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-5
   More store FS OOification.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-4
   More OOification for the store.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-3
   OO'ing the store layer.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-2
   BUGFIX: array.cc compilation.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--patch-1
   Update to latest HEAD code.

 * robertc@squid-cache.org--squid/squid--disk-io--3.0--base-0
   tag of robertc@squid-cache.org--squid/squid--HEAD--3.0--patch-220",3732,data/crawl/squid/hunk_5203.cpp,,,data/crawl/squid/old_hunk_5203.cpp,data/crawl/squid/new_hunk_5203.cpp,124,-1,"storeAppendPrintf(sentry, ""sent_count: %d\n"", diskd_stats.sent_count);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""sent_count"", ""%d\\n"", ""diskd_stats"", ""sent_count""], []]",[4828664847466580635],6113,"1327 days, 12:00:00"
https://github.com/squid-cache/squid/commit/76a883444f22c69d4fb574cee0b9703083e776f5,04 Oct 2010,Updated 3.2 release notes,616,data/crawl/squid/hunk_2992.cpp,,,data/crawl/squid/old_hunk_2992.cpp,data/crawl/squid/new_hunk_2992.cpp,79,-1,"fprintf(stderr, ""xstrdup: tried to dup a NULL pointer!\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""xstrdup"", ""tried"", ""to"", ""dup"", ""a"", ""NULL"", ""pointer"", ""\\n""], []]",[19651270150576097542],6112,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/71a1770210b2cce304f0035b62055f5423d6f921,27 Feb 1998,"handling xrealloc added, logging starts by default from main()",14,data/crawl/squid/hunk_6669.cpp,,,data/crawl/squid/old_hunk_6669.cpp,data/crawl/squid/new_hunk_6669.cpp,-1,6,,"fprintf(tracefp, ""r:%p:%p:%d\n"",p,s,sz);","[""addLog""]","[[], [""fprintf"", ""tracefp"", ""r"", ""%p"", ""%p"", ""%d\\n"", ""p"", ""s"", ""sz""]]",[-4161047314464603172],6111,"2315 days, 0:00:00"
https://github.com/squid-cache/squid/commit/df1b20e405c3c5bd0e8de9b58a683f599d6a62da,19 Nov 2010,Fix cachemgr http_port config report hiding options,45,data/crawl/squid/hunk_2891.cpp,,,data/crawl/squid/old_hunk_2891.cpp,data/crawl/squid/new_hunk_2891.cpp,-1,42,,"storeAppendPrintf(e, "" ignore-cc"");","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""ignore"", ""cc""]]",[13247397465283335035],6110,0:00:00
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,95,,"fprintf(stderr, ""No memory leaks detected\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""No"", ""memory"", ""leaks"", ""detected\\n""]]",[-9734286523197740853],6109,"2331 days, 12:00:00"
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,93,,"fprintf(stderr, ""Total leaked memory: %d\n"", leak_sum);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Total"", ""leaked"", ""memory"", ""%d\\n"", ""leak_sum""]]",[1090480920425176742],6108,"2331 days, 12:00:00"
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,85,,"fprintf(stderr, "":%d"", malloc_line[B][I]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%d"", ""malloc_line[B][I]""]]",[-20829002662514788700],6107,"2331 days, 12:00:00"
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,84,,"fprintf(stderr, "" %s"", malloc_file[B][I]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""malloc_file[B][I]""]]",[-14996614139783100611],6106,"2331 days, 12:00:00"
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,83,,"fprintf(stderr, ""Leak found: %p"", malloc_ptrs[B][I]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Leak"", ""found"", ""%p"", ""malloc_ptrs[B][I]""]]",[-2325989577404035541],6105,"2331 days, 12:00:00"
https://github.com/squid-cache/squid/commit/33ab18e816a38d4d29aa782eefee7be4470fd1fb,14 Feb 1998,"From Henrik Nordstrom

- A built in memory leak detector. Activated when compiled with
  --enable-xmalloc-debug-trace. Squid-1.2.beta14: Option -m to turn on
  malloc tracing

- The printing of the memory tracing is turned on by using the -m option
  when starting squid, or by setting the global variable xmalloc_trace to
  true from a debugger. A useful GDB macro:

     define malloc_info
       printf ""Allocation %d from %s:%d size %d\n"", \
           malloc_number($arg0), malloc_file_name($arg0), \
           malloc_line_number($arg0), mallocblksize($arg0)
     end",212,data/crawl/squid/hunk_6807.cpp,,,data/crawl/squid/old_hunk_6807.cpp,data/crawl/squid/new_hunk_6807.cpp,-1,102,,"fprintf(stderr, ""----- Memory map ----\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Memory"", ""map"", ""\\n""]]",[-591730028667204742],6104,"2331 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7ce875eb60c3989a40a4aa5b9ba0da6a815e16dc,18 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Squid-1.2.beta15: Show memory map as a tree
      Part of my beta14 memory map patch did not make it into beta15.
      Here are the missing pieces.",86,data/crawl/squid/hunk_6802.cpp,,,data/crawl/squid/old_hunk_6802.cpp,data/crawl/squid/new_hunk_6802.cpp,-1,36,,"fprintf(stderr, ""%*s%p %s:%d size %d allocation %d ... (%d)\n"",
			    depth * 2, """",
			    malloc_ptrs[B][I], malloc_file[B][I],
			    malloc_line[B][I], malloc_size[B][I],
			    malloc_count[B][I], malloc_refs[B][I]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%*s%p"", ""%s"", ""%d"", ""size"", ""%d"", ""allocation"", ""%d"", ""%d"", ""\\n"", ""depth"", ""*"", ""2"", ""malloc_ptrs[B][I]"", ""malloc_file[B][I]"", ""malloc_line[B][I]"", ""malloc_size[B][I]"", ""malloc_count[B][I]"", ""malloc_refs[B][I]""]]",[-30585478959801514631],6103,"2329 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7ce875eb60c3989a40a4aa5b9ba0da6a815e16dc,18 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Squid-1.2.beta15: Show memory map as a tree
      Part of my beta14 memory map patch did not make it into beta15.
      Here are the missing pieces.",86,data/crawl/squid/hunk_6802.cpp,,,data/crawl/squid/old_hunk_6802.cpp,data/crawl/squid/new_hunk_6802.cpp,-1,30,,"fprintf(stderr, ""=== %d bytes\n"", sum);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%d"", ""bytes\\n"", ""sum""]]",[-14207206390608598951],6102,"2329 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7ce875eb60c3989a40a4aa5b9ba0da6a815e16dc,18 Feb 1998,"From:    Henrik Nordstrom <hno@hem.passagen.se>
Squid-1.2.beta15: Show memory map as a tree
      Part of my beta14 memory map patch did not make it into beta15.
      Here are the missing pieces.",86,data/crawl/squid/hunk_6802.cpp,,,data/crawl/squid/old_hunk_6802.cpp,data/crawl/squid/new_hunk_6802.cpp,-1,21,,"fprintf(stderr, ""%*s%p %s:%d size %d allocation %d\n"",
			    depth, """",
			    malloc_ptrs[B][I], malloc_file[B][I],
			    malloc_line[B][I], malloc_size[B][I],
			    malloc_count[B][I]);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%*s%p"", ""%s"", ""%d"", ""size"", ""%d"", ""allocation"", ""%d\\n"", ""depth"", ""malloc_ptrs[B][I]"", ""malloc_file[B][I]"", ""malloc_line[B][I]"", ""malloc_size[B][I]"", ""malloc_count[B][I]""]]",[-28946520347337305743],6101,"2329 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59272939eadbaeadbf925f3298d9ee7d7ee840d2,06 Feb 1998,"Henrik's ""full memory debugging""",108,data/crawl/squid/hunk_6838.cpp,,,data/crawl/squid/old_hunk_6838.cpp,data/crawl/squid/new_hunk_6838.cpp,-1,13,,"fprintf(stderr,"" %d\n"",xmalloc_count);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%d\\n"", ""xmalloc_count""]]",[-9382290775761783620],6100,"2335 days, 12:00:00"
https://github.com/squid-cache/squid/commit/59272939eadbaeadbf925f3298d9ee7d7ee840d2,06 Feb 1998,"Henrik's ""full memory debugging""",108,data/crawl/squid/hunk_6838.cpp,,,data/crawl/squid/old_hunk_6838.cpp,data/crawl/squid/new_hunk_6838.cpp,-1,11,,"fprintf(stderr,"" (%d %s:%d)\n"",malloc_number(p),malloc_file_name(p),malloc_line_number(p));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%d"", ""%s"", ""%d"", ""\\n"", ""malloc_number"", ""p"", ""malloc_file_name"", ""p"", ""malloc_line_number"", ""p""]]",[-14674548379399223140],6099,"2335 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e293bb20eb936e746c1f5dcfd54b79e49256bcf8,30 Sep 2006,"Bug #1784: access_log syslog results in blanks syslog lines between every access log entry.

workaround: define a custom log format.

Forward port of 2.6 patch.",59,data/crawl/squid/hunk_4741.cpp,,,data/crawl/squid/old_hunk_4741.cpp,data/crawl/squid/new_hunk_4741.cpp,24,-1,"logfilePrintf(logfile, "" [%s] [%s]\n"", ereq, erep);",,"[""removeLog""]","[[""logfilePrintf"", ""logfile"", ""[%s]"", ""[%s]\\n"", ""ereq"", ""erep""], []]",[-2243749579326389688],6098,"767 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,773,,"storeAppendPrintf(entry, ""logformat %s "", format->name);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""logformat"", ""%s"", ""format"", ""name""]]",[535866354762710868],6097,"1357 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7684c4b1a8b1fa0a54c1b6269d5dc5ae72bd4ed3,07 Jul 2003,"Custom log formats, and selective access logging. See logformat
and cache_access_log directives",1422,data/crawl/squid/hunk_5230.cpp,,,data/crawl/squid/old_hunk_5230.cpp,data/crawl/squid/new_hunk_5230.cpp,-1,556,,"logfilePrintf(logfile, ""%s\n"", mb.buf);","[""addLog""]","[[], [""logfilePrintf"", ""logfile"", ""%s\\n"", ""mb"", ""buf""]]",[9532949238227755944],6096,"1357 days, 12:00:00"
https://github.com/squid-cache/squid/commit/815eaa446eab8003b71fcb45368b9de72447d153,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Added sslproxy_cert_error ACL to be able to bypass some
        certificate validation errors. The default is to bypass
        nothing.

        Only a few SSL certificate validation errors are currently
        recognized by name, including the newly defined
        SQUID_X509_V_ERR_DOMAIN_MISMATCH error which is raised when
        Squid certificate domain validation fails.",100,data/crawl/squid/hunk_4378.cpp,,,data/crawl/squid/old_hunk_4378.cpp,data/crawl/squid/new_hunk_4378.cpp,-1,38,,"fatalf(""Unknown SSL error name '%s'"", name);","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""SSL"", ""error"", ""name"", ""%s"", ""name""]]",[1636788338292482163],6095,"517 days, 12:00:00"
https://github.com/squid-cache/squid/commit/815eaa446eab8003b71fcb45368b9de72447d153,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Added sslproxy_cert_error ACL to be able to bypass some
        certificate validation errors. The default is to bypass
        nothing.

        Only a few SSL certificate validation errors are currently
        recognized by name, including the newly defined
        SQUID_X509_V_ERR_DOMAIN_MISMATCH error which is raised when
        Squid certificate domain validation fails.",100,data/crawl/squid/hunk_4378.cpp,,,data/crawl/squid/old_hunk_4378.cpp,data/crawl/squid/new_hunk_4378.cpp,-1,35,,"fatalf(""Too small or too bug SSL error code '%s'"", name);","[""addLog""]","[[], [""fatalf"", ""Too"", ""small"", ""or"", ""too"", ""bug"", ""SSL"", ""error"", ""code"", ""%s"", ""name""]]",[4095456431433332772],6094,"517 days, 12:00:00"
https://github.com/squid-cache/squid/commit/f5eef98cd5550fbd9887b1fd72e8a1be2ddefc5a,30 Jan 2011,Shared Rock::DirMap version 1.,396,data/crawl/squid/hunk_2784.cpp,,,data/crawl/squid/old_hunk_2784.cpp,data/crawl/squid/new_hunk_2784.cpp,-1,70,,"fatal(""SharedMemory::open failed"");","[""addLog""]","[[], [""fatal"", ""SharedMemory"", ""open"", ""failed""]]",[-10009450357715478938],6093,0:00:00
https://github.com/squid-cache/squid/commit/f5eef98cd5550fbd9887b1fd72e8a1be2ddefc5a,30 Jan 2011,Shared Rock::DirMap version 1.,396,data/crawl/squid/hunk_2784.cpp,,,data/crawl/squid/old_hunk_2784.cpp,data/crawl/squid/new_hunk_2784.cpp,-1,46,,"fatal(""SharedMemory::create failed"");","[""addLog""]","[[], [""fatal"", ""SharedMemory"", ""create"", ""failed""]]",[-16736236320945463180],6092,0:00:00
https://github.com/squid-cache/squid/commit/f1eaa2540453dccde688d900e75f900c67f0dd7e,31 Jan 2011,Shared Rock::DirMap version 5.,283,data/crawl/squid/hunk_2782.cpp,,,data/crawl/squid/old_hunk_2782.cpp,data/crawl/squid/new_hunk_2782.cpp,11,15,"fatal(""SharedMemory::open failed"");",fatal(s.termedBuf());,"[""removeContent"", ""addVariable""]","[[""SharedMemory"", ""open"", ""failed""], [""s"", ""termedBuf""]]",[12000794453090522836],6091,0:00:00
https://github.com/squid-cache/squid/commit/fd23a2ca8e404419f3114678828ca87bc310f27d,01 Feb 2011,"Removed restriction on cache_dir max-size to be a multiple of pagesize.
It was specific to Mmapped DiskIO module which we no longer use.",20,data/crawl/squid/hunk_2778.cpp,,,data/crawl/squid/old_hunk_2778.cpp,data/crawl/squid/new_hunk_2778.cpp,10,-1,"fatal(""Rock store max-size should be a multiple of page size"");",,"[""removeLog""]","[[""fatal"", ""Rock"", ""store"", ""max"", ""size"", ""should"", ""be"", ""a"", ""multiple"", ""of"", ""page"", ""size""], []]",[-9403061361864848369],6090,0:00:00
https://github.com/squid-cache/squid/commit/714a769f772fe5732068bd7a4f2f5d29d4ec54f9,03 Feb 2011,Avoid assertions when mgr:storedir is requested before cache_dir has a map.,10,data/crawl/squid/hunk_2755.cpp,,,data/crawl/squid/old_hunk_2755.cpp,data/crawl/squid/new_hunk_2755.cpp,4,7,"storeAppendPrintf(&e, ""Current entries: %9d %.2f%%\n"",
        map->entryCount(), (100.0 * map->entryCount() / map->entryLimit()));","storeAppendPrintf(&e, ""Current entries: %9d %.2f%%\n"",
                map->entryCount(), (100.0 * map->entryCount() / limit));","[""removeVariable"", ""addVariable""]","[[""map"", ""entryLimit""], [""limit""]]",[-15342710095649559044],6089,0:00:00
https://github.com/squid-cache/squid/commit/1d470d8857c8302388486711a8925d18e82f501d,07 Feb 2011,"Author: Phil Oester <kernel@linuxace.com>
Bug 3115: stdio: log module segfaults if access_log is set to a directory",2,data/crawl/squid/hunk_2754.cpp,,,data/crawl/squid/old_hunk_2754.cpp,data/crawl/squid/new_hunk_2754.cpp,-1,4,,"fatalf(""Cannot open '%s' because it is a directory, not a file.\n"", path);","[""addLog""]","[[], [""fatalf"", ""Cannot"", ""open"", ""%s"", ""because"", ""it"", ""is"", ""a"", ""directory"", ""not"", ""a"", ""file"", ""\\n"", ""path""]]",[17095642847503903928],6088,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/2f1431eab290a090f81695dcbe97821693992f55,07 Feb 2011,"Bug 2870: --disable-auth does not work

This patch attempts to make it work by removing libauth.la and all component
functionality which depends on it. So far this reduces the minimal squid
binary by a further 900 KB on disk.

It also means anything which requires an authentication process wont work.
They get wrapped in USE_AUTH or if its a specific type with the relevant
HAVE_AUTH_MODULE_* wrappers.

So far this does:
 * FTP and CacheMgr dependency on --disable-auth-basic is already committed
 * cache_peer login= functionality is greatly reduced under various
   combinations of --disable-auth, --disable-auth-basic and
   --disable-auth-negotiate
 * peering userhash algorithm is removed
 * delay pools class 4 is removed
 * ACLs testing username are dropped.

Additionally since external ACL user= field is used interchangeably in
several places with a full login and with the right helper can be
considered a full side-band authentication I have disabled the
ExtUser/ext_user components as well.

NP: pinning is not strictly dependent on NTLM, we may use it for other
    things without involving auth so left most of it in. Just the logics
    which use auth to set the pinning flag are now removable.

IDENT not being an authentication mechanism is also left in.",419,data/crawl/squid/hunk_2746.cpp,,,data/crawl/squid/old_hunk_2746.cpp,data/crawl/squid/new_hunk_2746.cpp,-1,10,,"fatalf(""parse_peer: userhash requires authentication. peer %s/%d\n"", p->host, p->http_port);","[""addLog""]","[[], [""fatalf"", ""parse_peer"", ""userhash"", ""requires"", ""authentication"", ""peer"", ""%s/%d\\n"", ""p"", ""host"", ""p"", ""http_port""]]",[22167663731656608907],6087,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/431aae42efb204149e3ba82e8b314e1756292b01,15 Feb 2011,"Bug 3105: malformed Proxy-Authorization leaks memory

This simplifies the header parser for basic auth. Working towards a more
generalized model of AuthUser children. Removing two memory allocations, two
leaks and several unnecessary functions.",228,data/crawl/squid/hunk_2742.cpp,,,data/crawl/squid/old_hunk_2742.cpp,data/crawl/squid/new_hunk_2742.cpp,-1,37,,"auth_user_request->setDenyMessage(""Request denied because you provided an empty password. Users MUST have a password."");","[""addLog""]","[[], [""auth_user_request"", ""setDenyMessage"", ""Request"", ""denied"", ""because"", ""you"", ""provided"", ""an"", ""empty"", ""password"", ""Users"", ""MUST"", ""have"", ""a"", ""password""]]",[-16720659610080363062],6086,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/431aae42efb204149e3ba82e8b314e1756292b01,15 Feb 2011,"Bug 3105: malformed Proxy-Authorization leaks memory

This simplifies the header parser for basic auth. Working towards a more
generalized model of AuthUser children. Removing two memory allocations, two
leaks and several unnecessary functions.",228,data/crawl/squid/hunk_2742.cpp,,,data/crawl/squid/old_hunk_2742.cpp,data/crawl/squid/new_hunk_2742.cpp,-1,32,,"auth_user_request->setDenyMessage(""no password was present in the HTTP [proxy-]authorization header. This is most likely a browser bug"");","[""addLog""]","[[], [""auth_user_request"", ""setDenyMessage"", ""no"", ""password"", ""was"", ""present"", ""in"", ""the"", ""HTTP"", ""[proxy"", ""]authorization"", ""header"", ""This"", ""is"", ""most"", ""likely"", ""a"", ""browser"", ""bug""]]",[-10644024353310434392],6085,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/431aae42efb204149e3ba82e8b314e1756292b01,15 Feb 2011,"Bug 3105: malformed Proxy-Authorization leaks memory

This simplifies the header parser for basic auth. Working towards a more
generalized model of AuthUser children. Removing two memory allocations, two
leaks and several unnecessary functions.",228,data/crawl/squid/hunk_2741.cpp,,,data/crawl/squid/old_hunk_2741.cpp,data/crawl/squid/new_hunk_2741.cpp,85,-1,"currentRequest->setDenyMessage(""Request denied because you provided an empty password. Users MUST have a password."");",,"[""removeLog""]","[[""currentRequest"", ""setDenyMessage"", ""Request"", ""denied"", ""because"", ""you"", ""provided"", ""an"", ""empty"", ""password"", ""Users"", ""MUST"", ""have"", ""a"", ""password""], []]",[26811334352053999021],6084,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/431aae42efb204149e3ba82e8b314e1756292b01,15 Feb 2011,"Bug 3105: malformed Proxy-Authorization leaks memory

This simplifies the header parser for basic auth. Working towards a more
generalized model of AuthUser children. Removing two memory allocations, two
leaks and several unnecessary functions.",228,data/crawl/squid/hunk_2741.cpp,,,data/crawl/squid/old_hunk_2741.cpp,data/crawl/squid/new_hunk_2741.cpp,79,-1,"currentRequest->setDenyMessage(""no password was present in the HTTP [proxy-]authorization header. This is most likely a browser bug"");",,"[""removeLog""]","[[""currentRequest"", ""setDenyMessage"", ""no"", ""password"", ""was"", ""present"", ""in"", ""the"", ""HTTP"", ""[proxy"", ""]authorization"", ""header"", ""This"", ""is"", ""most"", ""likely"", ""a"", ""browser"", ""bug""], []]",[20734699095284070351],6083,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e1e90d26a3ffc69ba87262a25d23e6fa08bd5a0e,18 Dec 2010,"eCAP: (A) Support optional adapter parameters and (B) fix virgin body handling.

(A): Optional adapter-specific eCAP service parameters can be specified after
the Squid-recognized ones:

    ecap_service s1 respmod_precache ecap://...  name1=value1 name2=...

These extra parameters are passed as (name, opaque value) pairs to the
adapter, using the newly added libecap::Config API. Adapters should throw if
they cannot understand the parameters to protect users from typos in optional
Squid-recognized parameters.

Squid-recognized service parameters can also be passed to adapters. Adapters
can distinguish them from custom ones or typos because their names have host
IDs set. We currently only pass one Squid recognized service parameter called
""bypassable"", with a boolean values of ""1"" or ""0"". This tells Adapter whether
Squid can try to bypass the adapter in case of problems. In our experience,
many real adapters benefit from such knowledge because they can be less strict
and more forgiving if Squid might ignore their decisions anyway.

To support optional adapter parameters for eCAP without bothering ICAP,
we now allow ICAP and eCAP to create protocol-specific configuration objects.
ICAP code uses old defaults. eCAP implements parsing of optional adapter
parameters and sharing them with adapters

As a side effect, service configuration objects are now refcounted and each
service (once created) is responsible for its config. The global collection of
configs is emptied once the services are created.


(B) eCAP transaction wrapper code (Ecap::XactionRep) failed to pass a few test
cases when dealing with virgin bodies. The code used complex state and
mishandled several proxyingVb, nil body_pipe, and stillConsuming value
combinations. proxyingVb was especially troubling because it was not clear
whether it refers to us receiving vb from Squid core or sending vb to the
adapter. The two states are related but different because we could be
receiving vb from core but not sending it to the adapter and vice versa.

I have removed proxyingVb completely as the body pipe state alone is
sufficient to understand our dealings with Squid core. I added makingVb to
track adapter vb needs.

Also improved Ecap::XactionRep status debugging.",353,data/crawl/squid/hunk_2814.cpp,,,data/crawl/squid/old_hunk_2814.cpp,data/crawl/squid/new_hunk_2814.cpp,-1,19,,"buf.Printf("" A%d"", static_cast<int>(proxyingAb));","[""addLog""]","[[], [""buf"", ""Printf"", ""A%d"", ""static_cast"", ""int"", ""proxyingAb""]]",[3539411117056577306],6082,"40 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e1e90d26a3ffc69ba87262a25d23e6fa08bd5a0e,18 Dec 2010,"eCAP: (A) Support optional adapter parameters and (B) fix virgin body handling.

(A): Optional adapter-specific eCAP service parameters can be specified after
the Squid-recognized ones:

    ecap_service s1 respmod_precache ecap://...  name1=value1 name2=...

These extra parameters are passed as (name, opaque value) pairs to the
adapter, using the newly added libecap::Config API. Adapters should throw if
they cannot understand the parameters to protect users from typos in optional
Squid-recognized parameters.

Squid-recognized service parameters can also be passed to adapters. Adapters
can distinguish them from custom ones or typos because their names have host
IDs set. We currently only pass one Squid recognized service parameter called
""bypassable"", with a boolean values of ""1"" or ""0"". This tells Adapter whether
Squid can try to bypass the adapter in case of problems. In our experience,
many real adapters benefit from such knowledge because they can be less strict
and more forgiving if Squid might ignore their decisions anyway.

To support optional adapter parameters for eCAP without bothering ICAP,
we now allow ICAP and eCAP to create protocol-specific configuration objects.
ICAP code uses old defaults. eCAP implements parsing of optional adapter
parameters and sharing them with adapters

As a side effect, service configuration objects are now refcounted and each
service (once created) is responsible for its config. The global collection of
configs is emptied once the services are created.


(B) eCAP transaction wrapper code (Ecap::XactionRep) failed to pass a few test
cases when dealing with virgin bodies. The code used complex state and
mishandled several proxyingVb, nil body_pipe, and stillConsuming value
combinations. proxyingVb was especially troubling because it was not clear
whether it refers to us receiving vb from Squid core or sending vb to the
adapter. The two states are related but different because we could be
receiving vb from core but not sending it to the adapter and vice versa.

I have removed proxyingVb completely as the body pipe state alone is
sufficient to understand our dealings with Squid core. I added makingVb to
track adapter vb needs.

Also improved Ecap::XactionRep status debugging.",353,data/crawl/squid/hunk_2814.cpp,,,data/crawl/squid/old_hunk_2814.cpp,data/crawl/squid/new_hunk_2814.cpp,-1,4,,"buf.Printf(""M%d"", static_cast<int>(makingVb));","[""addLog""]","[[], [""buf"", ""Printf"", ""M%d"", ""static_cast"", ""int"", ""makingVb""]]",[5807745462519037038],6081,"40 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3af10ac07bfc86881f6e7437faca4ff5fbb550ec,15 Dec 2010,"Support libecap::host::xaction::blockVirgin() API, serving ERR_ACCESS_DENIED.

deny_info logic is supported for these blocked responses, with the ACL name
replaced by the adaptation service name. This allows eCAP adapters to focus on
adaptation and blocking logic while letting Squid to serve a configurable
block message, with language negotiation and such.


Merged noteAdaptationAnswer(msg) and noteAdaptationQueryAbort(bool) into
noteAdaptationAnswer(answer). The Adaptation::Answer class manages all
currently supported adaptation decisions: forward the adapted message, block
user access to the virgin response, and bypassable or fatal error.

This ""single answer hook"" design allows us to add more information to adaption
answers without rewriting all the code that forwards those answers to the
adaptation initiator. We still often use multiple methods to handle multiple
answer categories, but that ""forking"" is optional and the decision to fork is
made locally, inside each answer recepient, reducing the overall code
complexity.


Also fixed a few virgin body handling corner cases that led to unnecessary
exceptions in Adaptation::Ecap::XactionRep despite correct adapter behavior.",365,data/crawl/squid/hunk_2819.cpp,,,data/crawl/squid/old_hunk_2819.cpp,data/crawl/squid/new_hunk_2819.cpp,-1,9,,"mustStop(""blocked"");","[""addLog""]","[[], [""mustStop"", ""blocked""]]",[-7768935051605558574],6080,"42 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3af10ac07bfc86881f6e7437faca4ff5fbb550ec,15 Dec 2010,"Support libecap::host::xaction::blockVirgin() API, serving ERR_ACCESS_DENIED.

deny_info logic is supported for these blocked responses, with the ACL name
replaced by the adaptation service name. This allows eCAP adapters to focus on
adaptation and blocking logic while letting Squid to serve a configurable
block message, with language negotiation and such.


Merged noteAdaptationAnswer(msg) and noteAdaptationQueryAbort(bool) into
noteAdaptationAnswer(answer). The Adaptation::Answer class manages all
currently supported adaptation decisions: forward the adapted message, block
user access to the virgin response, and bypassable or fatal error.

This ""single answer hook"" design allows us to add more information to adaption
answers without rewriting all the code that forwards those answers to the
adaptation initiator. We still often use multiple methods to handle multiple
answer categories, but that ""forking"" is optional and the decision to fork is
made locally, inside each answer recepient, reducing the overall code
complexity.


Also fixed a few virgin body handling corner cases that led to unnecessary
exceptions in Adaptation::Ecap::XactionRep despite correct adapter behavior.",365,data/crawl/squid/hunk_2818.cpp,,,data/crawl/squid/old_hunk_2818.cpp,data/crawl/squid/new_hunk_2818.cpp,-1,31,,"abortTransaction(""timely adaptation block"");","[""addLog""]","[[], [""abortTransaction"", ""timely"", ""adaptation"", ""block""]]",[-8470589001559555923],6079,"42 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3af10ac07bfc86881f6e7437faca4ff5fbb550ec,15 Dec 2010,"Support libecap::host::xaction::blockVirgin() API, serving ERR_ACCESS_DENIED.

deny_info logic is supported for these blocked responses, with the ACL name
replaced by the adaptation service name. This allows eCAP adapters to focus on
adaptation and blocking logic while letting Squid to serve a configurable
block message, with language negotiation and such.


Merged noteAdaptationAnswer(msg) and noteAdaptationQueryAbort(bool) into
noteAdaptationAnswer(answer). The Adaptation::Answer class manages all
currently supported adaptation decisions: forward the adapted message, block
user access to the virgin response, and bypassable or fatal error.

This ""single answer hook"" design allows us to add more information to adaption
answers without rewriting all the code that forwards those answers to the
adaptation initiator. We still often use multiple methods to handle multiple
answer categories, but that ""forking"" is optional and the decision to fork is
made locally, inside each answer recepient, reducing the overall code
complexity.


Also fixed a few virgin body handling corner cases that led to unnecessary
exceptions in Adaptation::Ecap::XactionRep despite correct adapter behavior.",365,data/crawl/squid/hunk_2818.cpp,,,data/crawl/squid/old_hunk_2818.cpp,data/crawl/squid/new_hunk_2818.cpp,-1,15,,"abortTransaction(""late adaptation block"");","[""addLog""]","[[], [""abortTransaction"", ""late"", ""adaptation"", ""block""]]",[-8139058427817919875],6078,"42 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f602c423b782d0c1b4233e70a01b337dcbb824a9,14 Mar 2011,ext_kerberos_ldap_group_acl version 1.3.0sq,337,data/crawl/squid/hunk_2693.cpp,,,data/crawl/squid/old_hunk_2693.cpp,data/crawl/squid/new_hunk_2693.cpp,-1,5,,"fprintf(stderr, ""server@  - In this case server can be used for all Kerberos domains\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""server"", ""In"", ""this"", ""case"", ""server"", ""can"", ""be"", ""used"", ""for"", ""all"", ""Kerberos"", ""domains\\n""]]",[2359019322648951223],6077,0:00:00
https://github.com/squid-cache/squid/commit/8765bc8cba81d5776992f8b243447e01860d8892,27 Apr 2011,"Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.",40,data/crawl/squid/hunk_2639.cpp,,,data/crawl/squid/old_hunk_2639.cpp,data/crawl/squid/new_hunk_2639.cpp,7,8,"storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      (double)(100.0 * cur_size) / (double)max_size);","storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      Math::doublePercent(currentSizeInKB, max_size));","[""updateVariable"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""double"", ""100"", ""0"", ""*"", ""cur_size"", ""/"", ""double""], [""Math"", ""doublePercent"", ""currentSizeInKB""]]",[3574925131379787238],6076,0:00:00
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2632.cpp,,,data/crawl/squid/old_hunk_2632.cpp,data/crawl/squid/new_hunk_2632.cpp,8,7,"storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      Math::doublePercent(currentSizeInKB, max_size));","storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      Math::doublePercent(currentSize(), maxSize()));","[""removeVariable"", ""addVariable""]","[[""currentSizeInKB"", ""max_size""], [""currentSize"", ""maxSize""]]",[-16025968577689973746],6075,0:00:00
https://github.com/squid-cache/squid/commit/e4a8468d7c0a09e6c8284111c82a7940d3477754,13 May 2011,"Separate SSL error detail name and message

Currently, SSL error detail in Squid-generated error pages (%D) contains
both the error name and the explanation text. Some folks using this feature
want to render the two pieces of information differently because the error
name is not something most end-users should read or focus on.

This patch adds the ""%x"" error page formating code which prints the error name,
and removes the error name (%err_name) from SSL error detail messages.

This is a Measurement Factory project",77,data/crawl/squid/hunk_2605.cpp,,,data/crawl/squid/old_hunk_2605.cpp,data/crawl/squid/new_hunk_2605.cpp,-1,5,,"mb.Printf(""%s"", detail->errorName());","[""addLog""]","[[], [""mb"", ""Printf"", ""%s"", ""detail"", ""errorName""]]",[3667522566685898263],6074,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2dba5b8e71663816703bf9297e1184ab6bea3990,13 May 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Author: Alexey Veselovsky <alexey.veselovsky@eykontech.com>
Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2055: Honor ICAP Max-Connections

This patch implements the phase 1 of the ICAP Max-Connections feature as it is
described in squid wiki:
  http://wiki.squid-cache.org/Features/ServiceOverload

The behaviour of the patch  can be configured using on_overload and max_conn
options of the icap_service configuration parameter. Squid can be configured
to do one of the following:
  - Block: send and HTTP error response to the subscriber
  - Bypass: ignore the ""over-connected"" ICAP service
  - Wait: wait (in a FIFO queue) for an ICAP connection slot
  - Force: proceed, ignoring the Max-Connections limit 

Squid warns the first time the service become overloaded

For more information please visit the feature wiki page given above.


Technical informations:

The patch starts count a connections to the ICAP server as active when the
ModXact class receives an FD even if the fd is not really connected to the
server yet, and decrease the active connections to the server when the ModXact
object releases its fd connection.

If the Max-Connection limit is reached squid puts the request to a waiters list.
When one or more connections released squid schedules one or more waiters for
execution and remove them from waiters list.
To handle cases where a waiter gone/canceled before its execution the custom
dialer ConnWaiterDialer used.

The Options connections counted as active connections but are not limited by
the Max-Connections limit. An Option request will be executed even if the
maximum connections number is reached.


This is a Measurement Factory project",543,data/crawl/squid/hunk_2606.cpp,,,data/crawl/squid/old_hunk_2606.cpp,data/crawl/squid/new_hunk_2606.cpp,-1,33,,"disableRepeats(""ICAP service is not available"");","[""addLog""]","[[], [""disableRepeats"", ""ICAP"", ""service"", ""is"", ""not"", ""available""]]",[-3623296679770679195],6073,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2dba5b8e71663816703bf9297e1184ab6bea3990,13 May 2011,"Author: Alex Rousskov <rousskov@measurement-factory.com>
Author: Alexey Veselovsky <alexey.veselovsky@eykontech.com>
Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2055: Honor ICAP Max-Connections

This patch implements the phase 1 of the ICAP Max-Connections feature as it is
described in squid wiki:
  http://wiki.squid-cache.org/Features/ServiceOverload

The behaviour of the patch  can be configured using on_overload and max_conn
options of the icap_service configuration parameter. Squid can be configured
to do one of the following:
  - Block: send and HTTP error response to the subscriber
  - Bypass: ignore the ""over-connected"" ICAP service
  - Wait: wait (in a FIFO queue) for an ICAP connection slot
  - Force: proceed, ignoring the Max-Connections limit 

Squid warns the first time the service become overloaded

For more information please visit the feature wiki page given above.


Technical informations:

The patch starts count a connections to the ICAP server as active when the
ModXact class receives an FD even if the fd is not really connected to the
server yet, and decrease the active connections to the server when the ModXact
object releases its fd connection.

If the Max-Connection limit is reached squid puts the request to a waiters list.
When one or more connections released squid schedules one or more waiters for
execution and remove them from waiters list.
To handle cases where a waiter gone/canceled before its execution the custom
dialer ConnWaiterDialer used.

The Options connections counted as active connections but are not limited by
the Max-Connections limit. An Option request will be executed even if the
maximum connections number is reached.


This is a Measurement Factory project",543,data/crawl/squid/hunk_2606.cpp,,,data/crawl/squid/old_hunk_2606.cpp,data/crawl/squid/new_hunk_2606.cpp,-1,28,,"disableBypass(""not available"", true);","[""addLog""]","[[], [""disableBypass"", ""not"", ""available"", ""true""]]",[3123086995756103309],6072,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6152c8d8fe0dd2e874e4141ef751ad65dc7bf1c3,26 May 2011,Portability fix for OpenBSD in time quota external acl helper.,3,data/crawl/squid/hunk_2603.cpp,,,data/crawl/squid/old_hunk_2603.cpp,data/crawl/squid/new_hunk_2603.cpp,3,3,"fprintf(logfile, ""%ld %s| %s: "", now, program_name, level);","fprintf(logfile, ""%ld %s| %s: "", static_cast<long int>(now), 
              program_name, level);","[""addVariable""]","[[], [""static_cast"", ""long"", ""int""]]",[-7267402898558735395],6071,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/96e9c799d793b401a9aee746e42294e8d8c2805d,03 Mar 2011,Add some stubs and undo some problematic make optimizations,256,data/crawl/squid/hunk_2706.cpp,,,data/crawl/squid/old_hunk_2706.cpp,data/crawl/squid/new_hunk_2706.cpp,3,3,"fprintf(stderr, ""Not implemented"");","fatal(""tools.cc required"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Not"", ""implemented""], [""fatal"", ""tools"", ""cc"", ""required""]]",[14254032591148478797],6070,"53 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e0d2850571389010de240b82172cae5ee78c9da4,02 Oct 2010,Transition comm_write*() from FD to Comm::Connection,1777,data/crawl/squid/hunk_3002.cpp,,,data/crawl/squid/old_hunk_3002.cpp,data/crawl/squid/new_hunk_3002.cpp,-1,58,,"fatalf(""Lost SNMP port (%d) on FD %d"", (int)conn->local.GetPort(), conn->fd);","[""addLog""]","[[], [""fatalf"", ""Lost"", ""SNMP"", ""port"", ""%d"", ""on"", ""FD"", ""%d"", ""int"", ""conn"", ""local"", ""GetPort"", ""conn"", ""fd""]]",[24907459338955178110],6069,"129 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e0d2850571389010de240b82172cae5ee78c9da4,02 Oct 2010,Transition comm_write*() from FD to Comm::Connection,1777,data/crawl/squid/hunk_3002.cpp,,,data/crawl/squid/old_hunk_3002.cpp,data/crawl/squid/new_hunk_3002.cpp,-1,49,,"fatalf(""Cannot open SNMP %s Port"",(conn->fd == snmpIncomingConn->fd?""receiving"":""sending""));","[""addLog""]","[[], [""fatalf"", ""Cannot"", ""open"", ""SNMP"", ""%s"", ""Port"", ""conn"", ""fd"", ""snmpIncomingConn"", ""fd"", ""receiving"", ""sending""]]",[3126058313037085896],6068,"129 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e0d2850571389010de240b82172cae5ee78c9da4,02 Oct 2010,Transition comm_write*() from FD to Comm::Connection,1777,data/crawl/squid/hunk_3002.cpp,,,data/crawl/squid/old_hunk_3002.cpp,data/crawl/squid/new_hunk_3002.cpp,71,-1,"fatal(""Cannot open Outgoing SNMP Port"");",,"[""removeLog""]","[[""fatal"", ""Cannot"", ""open"", ""Outgoing"", ""SNMP"", ""Port""], []]",[-181075478816237621],6067,"129 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e0d2850571389010de240b82172cae5ee78c9da4,02 Oct 2010,Transition comm_write*() from FD to Comm::Connection,1777,data/crawl/squid/hunk_3002.cpp,,,data/crawl/squid/old_hunk_3002.cpp,data/crawl/squid/new_hunk_3002.cpp,54,-1,"fatal(""Cannot open Incoming SNMP Port"");",,"[""removeLog""]","[[""fatal"", ""Cannot"", ""open"", ""Incoming"", ""SNMP"", ""Port""], []]",[7425564651419172777],6066,"129 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cfd665298756283c633ad77e4e6737e2f54e2999,19 May 2010,Comm restructure part 2 - outbound connections,2116,data/crawl/squid/hunk_3361.cpp,,,data/crawl/squid/old_hunk_3361.cpp,data/crawl/squid/new_hunk_3361.cpp,36,40,"mb.Printf(""%d, %d\r\n"",
              state->my_peer.GetPort(),
              state->me.GetPort());","mb.Printf(""%d, %d\r\n"",
              conn->remote.GetPort(),
              conn->local.GetPort());","[""updateVariable""]","[[""state"", ""my_peer"", ""state"", ""me""], [""conn"", ""remote"", ""conn"", ""local""]]",[-7824832284880526778],6065,"197 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cfd665298756283c633ad77e4e6737e2f54e2999,19 May 2010,Comm restructure part 2 - outbound connections,2116,data/crawl/squid/hunk_3360.cpp,,,data/crawl/squid/old_hunk_3360.cpp,data/crawl/squid/new_hunk_3360.cpp,13,-1,"fatal(""Could not create a DNS socket"");",,"[""removeLog""]","[[""fatal"", ""Could"", ""not"", ""create"", ""a"", ""DNS"", ""socket""], []]",[-1692271683703932066],6064,"197 days, 0:00:00"
https://github.com/squid-cache/squid/commit/31ef19cd9d84d9a304faf45a4826a3a540a04901,09 Jun 2010,"Enforce connection re-try limit connect_retries

We used to have a maximum_single_address_tries limit which as similar
That is not dropped and the single-link retry used instead which applies
to ALL links regardless of the host IP address count since we dont know
that count any more.",60,data/crawl/squid/hunk_3317.cpp,,,data/crawl/squid/old_hunk_3317.cpp,data/crawl/squid/new_hunk_3317.cpp,4,-1,"fatal(""maximum_single_addr_tries cannot be larger than 10"");",,"[""removeLog""]","[[""fatal"", ""maximum_single_addr_tries"", ""cannot"", ""be"", ""larger"", ""than"", ""10""], []]",[12211649581919459562],6063,"186 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e24f13cdd75215b6b297ef81b44b93daf94b5f20,30 Jun 2011,"Remove the HttpStateData::orig_request member

When FwdServer::_peer is set, HttpStateData constructor creates a new special
HttpRequest, overwriting the request pointer set in the parent (ServerStateData) 
constructor to fwd->request.

This special HttpRequest sets the proper urlpath (which maybe different from
the original HttpRequest), the host (HttpRequest::SetHost/GetHost) to be the
peer hostname and inherits flags, protocol, method. Also sets the
HttpRequest::flags.proxying.

Probably this is originaly done to handle only the differences in urlpath and
the host. But this is has  as result to have two HttpRequests object in
HttpStateData, but their difference is not clear.

This patch removes the HttpStateData::orig_request member and uses only the 
HttpStateData::request member

Bugs fixed with this patch:

- Debugs() and error pages sometimes display the cache_peer hostname as the URL   requested domain name when going to an origin. Regardless of what the virtual
  host name actually is.

- The request_header_access configuration parameter does not work when
  sending requests to parent proxies.

- Squid may cache replies to requests with no-store in headers when uses a
  parent cache.

- parent caches which have been configured as ""sibling"" for specific domains
  using the neighbor_type_domain parameter are not counted.

- Probably many other


This is a Measurement Factory project",271,data/crawl/squid/hunk_2529.cpp,,,data/crawl/squid/old_hunk_2529.cpp,data/crawl/squid/new_hunk_2529.cpp,13,13,"httpHeaderPutStrf(hdr_out, HDR_HOST, ""%s:%d"",
                                  orig_request->GetHost(),
                                  (int) orig_request->port);","httpHeaderPutStrf(hdr_out, HDR_HOST, ""%s:%d"",
                                  request->GetHost(),
                                  (int) request->port);","[""updateVariable""]","[[""orig_request"", ""orig_request""], [""request"", ""request""]]",[-10844026487092080938],6062,0:00:00
https://github.com/squid-cache/squid/commit/c9fd01b4b829bc16d2691a84cdc103ac5dd15333,29 Jul 2011,"SourceLayout: generic AnyP::ProtocolVersion tag class

Protocol agnostic class to store the request-line version details.
HTTP/1.0, HTTP/1.1, ICY/1.0, WebSockets/1.0 etc

For patch reduction leaves HttpVersion as a child class for HTTP/*.* tags",169,data/crawl/squid/hunk_2517.cpp,,,data/crawl/squid/old_hunk_2517.cpp,data/crawl/squid/new_hunk_2517.cpp,3,3,"mb.Printf(""%s "" SQUIDSTRINGPH "" HTTP/%d.%d\n"",
                      RequestMethodStr(request->method),
                      SQUIDSTRINGPRINT(urlpath_or_slash),
                      request->http_ver.major, request->http_ver.minor);","mb.Printf(""%s "" SQUIDSTRINGPH "" %s/%d.%d\n"",
                      RequestMethodStr(request->method),
                      SQUIDSTRINGPRINT(urlpath_or_slash),
                      AnyP::ProtocolType_str[request->http_ver.protocol],
                      request->http_ver.major, request->http_ver.minor);","[""updateContent"", ""addVariable""]","[[""HTTP/%d""], [""%s/%d"", ""AnyP"", ""ProtocolType_str[request"", ""protocol]"", ""http_ver""]]",[-458833104310664244],6061,0:00:00
https://github.com/squid-cache/squid/commit/0a0c70cdc6ca87dff680d55d9e4d9f7be44c17ef,24 Apr 2005,"Bug #1223: Make the use of the %m error page to return auth info
messages

This patch extends the helper protocols for Basic and Digest to provide
some basic information in error responses, and makes use of the error
response already included in the NTLM helper protocol, making these
messages available as %m in error pages. Can be used if desired to
indicate why a login failed. The exact messages returned is helper
dependent.

Forward port of 2.5 patch.",68,data/crawl/squid/hunk_5051.cpp,,,data/crawl/squid/old_hunk_5051.cpp,data/crawl/squid/new_hunk_5051.cpp,-1,7,,r->auth_user_request->setDenyMessage(t);,"[""addLog""]","[[], [""r"", ""auth_user_request"", ""setDenyMessage"", ""t""]]",[13600967980912857108],6060,"1144 days, 0:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1713,-1,"storeAppendPrintf(entry, ""%s"", te->config);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""te"", ""config""], []]",[-5261554217450138221],6059,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1709,-1,"storeAppendPrintf(entry, ""{%s}"", arg);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""arg""], []]",[-5370724308728515853],6058,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1706,-1,"storeAppendPrintf(entry, "".%d"", (int) t->precision);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%d"", ""int"", ""t"", ""precision""], []]",[10961276620916630613],6057,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1703,-1,"storeAppendPrintf(entry, ""%d"", (int) t->width);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%d"", ""int"", ""t"", ""width""], []]",[5835084181075759729],6056,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1574,-1,"storeAppendPrintf(entry, ""%s"", t->data.string);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""t"", ""data"", ""string""], []]",[14068941932392998644],6055,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1570,-1,"storeAppendPrintf(entry, ""logformat %s "", format->name);",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""logformat"", ""%s"", ""format"", ""name""], []]",[-535866354762710868],6054,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1398,-1,"fatalf(""Can't parse configuration token: '%s'\n"",
               def);",,"[""removeLog""]","[[""fatalf"", ""Can"", ""t"", ""parse"", ""configuration"", ""token"", ""%s"", ""\\n"", ""def""], []]",[-10658322044005221237],6053,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1243,-1,"mb.Printf(""%*s"", (int) fmt->width, out);",,"[""removeLog""]","[[""mb"", ""Printf"", ""%*s"", ""int"", ""fmt"", ""width"", ""out""], []]",[7314084157223720897],6052,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1241,-1,"mb.Printf(""%-*s"", (int) fmt->width, out);",,"[""removeLog""]","[[""mb"", ""Printf"", ""%"", ""*s"", ""int"", ""fmt"", ""width"", ""out""], []]",[2538142304887021005],6051,"117 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7ff7a211c25688d2d6742acc7bc271f700c9dbe9,08 Aug 2011,Migrate cf_gen.cc from C-style stdio to C++ iostreams.,300,data/crawl/squid/hunk_2493.cpp,,,data/crawl/squid/old_hunk_2493.cpp,data/crawl/squid/new_hunk_2493.cpp,53,-1,"fprintf(fp,""\t};\n"");",,"[""removeLog""]","[[""fprintf"", ""fp"", ""\\t"", ""\\n""], []]",[5167530254375540690],6050,0:00:00
https://github.com/squid-cache/squid/commit/20efa1c285cf589c5e289fd4f07bf41ef3564fd6,12 Dec 2010,"SourceLayout: cleanup the various log line formatting code

Adds:

* namespace Log::Format for log display functionality. Each line formater
  is a global function inside here. The log format enum is also in here
  along with the display encoding 'gadget' functions.

* namespace Time in SquidTime.h for the related time string display
  functions. Unified the various log pretty-print httpd-style time 
  functions into Time::FormatHttpd(time_t).
 ** care has been taken to preserve the local-static optimization found
    in accessLogTime() to prevent wasted cycles re-printing the same 
    time value more than once per second.

NP: the similar but timezone-missing format is now Time::FormatStrf()
    with the same optimization applied to speed up its callers.

* namespace Math:: to avoid symbol clash with global function Log() and
  namespace Log.

* support for the Apache ""combined"" log format. Was documented earlier as
  being available but not actually present.


Obsoletes:

* forward_log directive and associated experimental code. If needed
  we can easily add another special format to dump the details.
  FWIW they are all available in the squid format anyway (timestamp,
  squid status, source peer). The documented action of dumping every 
  forwarding attempt was not working.

* referer_log and useragent_log directives and matching ./configure options.
 ** shuffled into access_log formats ""referrer"" and ""useragent"" for more
    flexibility with less directives.

* emulate_httpd_log replaced with Apache ""common"" format.

* the ""auto"" pseudo-format becomes obsolete with emulat_httpd_log.
  default is now ""squid"" format in all situations.


Code Shuffles:

* moved the logformat directive parsing into LogConfig object methods.

* shuffled the logformat parsing and token code into src/log/Tokens.h|cc
 ** this is purely to break it out of access_log.cc. namespace and scoping
    needs some work.",5091,data/crawl/squid/hunk_2860.cpp,,,data/crawl/squid/old_hunk_2860.cpp,data/crawl/squid/new_hunk_2860.cpp,1259,-1,"logfilePrintf(logfile, ""%s\n"", mb.buf);",,"[""removeLog""]","[[""logfilePrintf"", ""logfile"", ""%s\\n"", ""mb"", ""buf""], []]",[-9532949238227755944],6049,"134 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f5f9e44c983193ed18d7af76dea168173a0cc35e,27 Jan 2011,Miscellaneous useful changes from 3p1-rock (r9630) unrelated to Rock Store.,84,data/crawl/squid/hunk_2790.cpp,,,data/crawl/squid/old_hunk_2790.cpp,data/crawl/squid/new_hunk_2790.cpp,7,14,"mb.Printf(""%*s"", (int) fmt->width, out);","mb.Printf(""%*.*s"", minWidth, maxWidth, out);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%*s"", ""int"", ""fmt"", ""width""], [""%*"", ""*s"", ""minWidth"", ""maxWidth""]]",[14156439937232948778],6048,"111 days, 0:00:00"
https://github.com/squid-cache/squid/commit/f5f9e44c983193ed18d7af76dea168173a0cc35e,27 Jan 2011,Miscellaneous useful changes from 3p1-rock (r9630) unrelated to Rock Store.,84,data/crawl/squid/hunk_2790.cpp,,,data/crawl/squid/old_hunk_2790.cpp,data/crawl/squid/new_hunk_2790.cpp,5,12,"mb.Printf(""%-*s"", (int) fmt->width, out);","mb.Printf(""%-*.*s"", minWidth, maxWidth, out);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""int"", ""fmt"", ""width""], [""*"", ""minWidth"", ""maxWidth""]]",[9375762066555236606],6047,"111 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2634.cpp,,,data/crawl/squid/old_hunk_2634.cpp,data/crawl/squid/new_hunk_2634.cpp,7,6,"storeAppendPrintf(&output, ""Maximum Swap Size      : %""PRIu64"" KB\n"",
                      maxSize());","storeAppendPrintf(&output, ""Maximum Swap Size      : %""PRIu64"" KB\n"",
                      maxSize() >> 10);","[""addContent"", ""addVariable""]","[[], [""10""]]",[6272037681056609],6046,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/da9d3191b043c07215fbb771c69acc4a835d7b96,27 Apr 2011,"Remove updateSize() from Store and make it protected in SwapDir.

A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.",77,data/crawl/squid/hunk_2637.cpp,,,data/crawl/squid/old_hunk_2637.cpp,data/crawl/squid/new_hunk_2637.cpp,6,-1,"fatal(""StoreController has no independent size\n"");",,"[""removeLog""]","[[""fatal"", ""StoreController"", ""has"", ""no"", ""independent"", ""size\\n""], []]",[17146783349596625227],6045,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/hunk_2679.cpp,,,data/crawl/squid/old_hunk_2679.cpp,data/crawl/squid/new_hunk_2679.cpp,-1,93,,"storeAppendPrintf(&e, ""Writers:         %9d %6.2f%%\n"",
            writers, (100.0 * writers / locked));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Writers"", ""%9d"", ""%6"", ""2f%%\\n"", ""writers"", ""100"", ""0"", ""*"", ""writers"", ""/"", ""locked""]]",[-6087512155400589293],6044,"78 days, 12:00:00"
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/hunk_2679.cpp,,,data/crawl/squid/old_hunk_2679.cpp,data/crawl/squid/new_hunk_2679.cpp,-1,91,,"storeAppendPrintf(&e, ""Readers:         %9d %6.2f%%\n"",
            readers, (100.0 * readers / locked));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Readers"", ""%9d"", ""%6"", ""2f%%\\n"", ""readers"", ""100"", ""0"", ""*"", ""readers"", ""/"", ""locked""]]",[-3228385553864831633],6043,"78 days, 12:00:00"
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/hunk_2679.cpp,,,data/crawl/squid/old_hunk_2679.cpp,data/crawl/squid/new_hunk_2679.cpp,-1,86,,"storeAppendPrintf(&e, ""Idle:    %9d %6.2f%%\n"",
        idle, (100.0 * idle / count));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Idle"", ""%9d"", ""%6"", ""2f%%\\n"", ""idle"", ""100"", ""0"", ""*"", ""idle"", ""/"", ""count""]]",[-4306081015003892916],6042,"78 days, 12:00:00"
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/hunk_2679.cpp,,,data/crawl/squid/old_hunk_2679.cpp,data/crawl/squid/new_hunk_2679.cpp,-1,84,,"storeAppendPrintf(&e, ""Writing: %9d %6.2f%%\n"",
        writeable, (100.0 * writeable / count));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Writing"", ""%9d"", ""%6"", ""2f%%\\n"", ""writeable"", ""100"", ""0"", ""*"", ""writeable"", ""/"", ""count""]]",[28401356836327033253],6041,"78 days, 12:00:00"
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/hunk_2679.cpp,,,data/crawl/squid/old_hunk_2679.cpp,data/crawl/squid/new_hunk_2679.cpp,-1,82,,"storeAppendPrintf(&e, ""Reading: %9d %6.2f%%\n"",
        readable, (100.0 * readable / count));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Reading"", ""%9d"", ""%6"", ""2f%%\\n"", ""readable"", ""100"", ""0"", ""*"", ""readable"", ""/"", ""count""]]",[27701852635395074057],6040,"78 days, 12:00:00"
https://github.com/squid-cache/squid/commit/44c95fcf593ff4c2e27107d0f6d4091840737032,09 Apr 2011,"Split Rock-only Rock::DirMap into Rock::DirMap and reusable Ipc pieces
which a shared memory cache implementation can use:

Ipc::StoreMap is responsible for maintaining a collection of lockable slots,
each with readable/writeable/free state and a ""waiting to be free"" flag. Kids
of this class can add more metadata (in parallel structures using the same
index as primary slots). I tried extending the slots themselves, but that 
turned out to be more complex/messy.

Ipc::ReadWriteLock is a basic multiple readers, single writer lock.  Its
earlier implementation inside Rock::DirMap mixed slot locking and slot
state/flags. That simplified the caller code a little, but the current simpler
class is easier to understand and reuse.

Rock::DirMap now just adds Rock::DbCellHeader metadata to Ipc::StoreMap slots.

Simplified mapping API by reducing the number of similar-but-different
methods. For example, instead of putAt, the caller can use an
openForWriting/closeForWriting pair. This helps with moving custom metadata
manipulations outside of the reusable Ipc::StoreMap.

It would be possible to split Ipc::StoreMap further by moving Store-specific
bits outside of its slots. Currently, there is no need for that though.",1188,data/crawl/squid/hunk_2679.cpp,,,data/crawl/squid/old_hunk_2679.cpp,data/crawl/squid/new_hunk_2679.cpp,-1,77,,"storeAppendPrintf(&e, ""Available locks: %9d\n"", count);","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Available"", ""locks"", ""%9d\\n"", ""count""]]",[10076423060490463942],6039,"78 days, 12:00:00"
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2633.cpp,,,data/crawl/squid/old_hunk_2633.cpp,data/crawl/squid/new_hunk_2633.cpp,3,3,"storeAppendPrintf(&entry, "" %""PRIu64"" %d %d"", (max_size >> 10), l1, l2);","storeAppendPrintf(&entry, "" %""PRIu64"" %d %d"", maxSize() >> 20, l1, l2);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""max_size"", ""10""], [""maxSize"", ""20""]]",[-3176076191504163305],6038,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,549,,"storeAppendPrintf(&e, "" READ-ONLY"");","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""READ"", ""ONLY""]]",[-820735672030092498],6037,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,546,,"storeAppendPrintf(&e, "" SELECTED"");","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""SELECTED""]]",[1926652460407466335],6036,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,543,,"storeAppendPrintf(&e, ""Flags:"");","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Flags""]]",[11239233795413876392],6035,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,540,,"storeAppendPrintf(&e, ""Pending operations: %d out of %d\n"",
        store_open_disk_fd, Config.max_open_disk_fds);","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Pending"", ""operations"", ""%d"", ""out"", ""of"", ""%d\\n"", ""store_open_disk_fd"", ""Config"", ""max_open_disk_fds""]]",[27645512080306915259],6034,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c4e688b7b851b9accc082a210fd0efb131cc696f,12 Apr 2011,Added basic stats reporting.,23,data/crawl/squid/hunk_2658.cpp,,,data/crawl/squid/old_hunk_2658.cpp,data/crawl/squid/new_hunk_2658.cpp,-1,14,,"storeAppendPrintf(&e, ""Current entries: %9d %.2f%%\n"",
                entryCount, (100.0 * entryCount / limit));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Current"", ""entries"", ""%9d"", ""%"", ""2f%%\\n"", ""entryCount"", ""100"", ""0"", ""*"", ""entryCount"", ""/"", ""limit""]]",[17939152812405458496],6033,"77 days, 0:00:00"
https://github.com/squid-cache/squid/commit/51618c6abd19131aabcd04399765e5563e2fee15,06 Sep 2011,"Polished debugging messages to use DBG_IMPORTANT, WARNING, etc.",39,data/crawl/squid/hunk_2474.cpp,,,data/crawl/squid/old_hunk_2474.cpp,data/crawl/squid/new_hunk_2474.cpp,-1,7,,"fatalf(""Rock cache_dir at %s failed to open db file: %s"", filePath,
               xstrerror());","[""addLog""]","[[], [""fatalf"", ""Rock"", ""cache_dir"", ""at"", ""%s"", ""failed"", ""to"", ""open"", ""db"", ""file"", ""%s"", ""filePath"", ""xstrerror""]]",[-13325161431553486176],6032,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,347,,"fatalf(""Rock cache_dir failed to initialize db file: %s"", filePath);","[""addLog""]","[[], [""fatalf"", ""Rock"", ""cache_dir"", ""failed"", ""to"", ""initialize"", ""db"", ""file"", ""%s"", ""filePath""]]",[-10087827577497050811],6031,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,165,,"fatal(""Rock store requires a positive max-size"");","[""addLog""]","[[], [""fatal"", ""Rock"", ""store"", ""requires"", ""a"", ""positive"", ""max"", ""size""]]",[-2511445573136777763],6030,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/43ebbac3285cd00b3f01ebd3b4c0d9867c98913f,10 Sep 2011,"Moved squid.conf global disk_io_timeout to cache_dir-local swap-timeout.

The I/O timeout option belongs to cache_dir because not all cache_dir types
support it and because different cache_dirs may need different timeout values,
especially if some of them handle very large or otherwise unusual files.

To propagate the knowledge of the option down to DiskIO/IpcIoFile I decided
to add a DiskFile::Config class and DiskFile::configure() method. At first
glance that API does not belong to DiskFile because only IpcIoFile supports
it. However, DiskFile may be a better location for it because

  * Other specific DiskIO files may want to support the same configuration
    API.

  * Placing API in IpcIoFile would require either making Rock Store dependent
    on IpcIoFile (in terms of linking and in terms of availability) or more
    complex API with multiple inheritance, dynamic casting and such. We can
    introduce the ""more complex API"" mentioned above later if needed.

Renamed ""disk_io"" to ""swap"" timeout because the option is about the whole swap
out/in delay (something an admin may care about) and not individual I/O
(something only low-level code should know about).",110,data/crawl/squid/hunk_2469.cpp,,,data/crawl/squid/old_hunk_2469.cpp,data/crawl/squid/new_hunk_2469.cpp,-1,48,,"storeAppendPrintf(e, "" swap-timeout=%""PRId64,
                          static_cast<int64_t>(fileConfig.ioTimeout));","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""swap"", ""timeout"", ""%"", ""PRId64"", ""static_cast"", ""int64_t"", ""fileConfig"", ""ioTimeout""]]",[20147318930528290067],6029,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,157,,"fatal(""negative Rock cache_dir size value"");","[""addLog""]","[[], [""fatal"", ""negative"", ""Rock"", ""cache_dir"", ""size"", ""value""]]",[-19892525860174460993],6028,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c03c2bade2631aa8548db2b1aab1d9bd9667bdf5,01 Feb 2011,"Use Blocking DiskIO module when runnining in a no-daemon mode.

We cannot use IpcIo module in no-daemon mode because there are no diskers
to communicate with. If our implementation is correct, IpcIo module should
contain no shared map or other rock-specific manipulations and, hence,
should not be required for Rock Store to work.",18,data/crawl/squid/hunk_2777.cpp,,,data/crawl/squid/old_hunk_2777.cpp,data/crawl/squid/new_hunk_2777.cpp,-1,10,,"fatal(""Rock Store missing a required DiskIO module"");","[""addLog""]","[[], [""fatal"", ""Rock"", ""Store"", ""missing"", ""a"", ""required"", ""DiskIO"", ""module""]]",[-13394768537372903099],6027,"112 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2793.cpp,,,data/crawl/squid/old_hunk_2793.cpp,data/crawl/squid/new_hunk_2793.cpp,-1,95,,"fatal(""Rock Store db initialization error"");","[""addLog""]","[[], [""fatal"", ""Rock"", ""Store"", ""db"", ""initialization"", ""error""]]",[-9114977151103468163],6026,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e2851fe7f284898d000419098fa4971829adeb9f,27 Jan 2011,Rock Store implementation merged from the 3p1-rock branch (r9630).,2553,data/crawl/squid/hunk_2792.cpp,,,data/crawl/squid/old_hunk_2792.cpp,data/crawl/squid/new_hunk_2792.cpp,-1,137,,"fatalf(""Rock cache_dir[%d] rebuild of %s failed: %s."",
        sd->index, sd->filePath, msg);","[""addLog""]","[[], [""fatalf"", ""Rock"", ""cache_dir[%d]"", ""rebuild"", ""of"", ""%s"", ""failed"", ""%s"", ""sd"", ""index"", ""sd"", ""filePath"", ""msg""]]",[-7228532738415009027],6025,"114 days, 12:00:00"
https://github.com/squid-cache/squid/commit/078274f6c5d9547ffc6cfb2fcde9cf04ba3d8e14,07 Feb 2011,"Made Rock::Rebuild an AsyncJob because it is.

Increment StoreController::store_dirs_rebuilding early, when SwapDir is
created and before the disk db file is opened and the actual rebuild starts.
Otherwise, if one SwapDir finishes rebuild before others start,
storeRebuildComplete() will see StoreController::store_dirs_rebuilding equal
to one, and think the rebuild is over.

This was not a problem for cache_dirs using blocking I/O because they either
did not try to open some file at SwapDir::init() time or did so synchronously,
resulting in ""immediate"" StoreController::store_dirs_rebuilding increment from
Store init loop point of view.",63,data/crawl/squid/hunk_2745.cpp,,,data/crawl/squid/old_hunk_2745.cpp,data/crawl/squid/new_hunk_2745.cpp,-1,7,,"mustStop(""non-disker"");","[""addLog""]","[[], [""mustStop"", ""non"", ""disker""]]",[-4728106322975519727],6024,"109 days, 0:00:00"
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2627.cpp,,,data/crawl/squid/old_hunk_2627.cpp,data/crawl/squid/new_hunk_2627.cpp,3,3,"storeAppendPrintf(&entry, "" %lu"", (max_size >> 10));","storeAppendPrintf(&entry, "" %""PRIu64, maxSize() >> 20);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%lu"", ""max_size"", ""10""], [""%"", ""PRIu64"", ""maxSize"", ""20""]]",[8831920183529050756],6023,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/35a1b223314eddb67b631cb0224d6e03a2360c77,13 Sep 2011,"SMP Caching: Core changes, IPC primitives, Shared memory cache, and Rock Store

Core changes
------------

* Added MemObject::expectedReplySize() and used it instead of object_sz.

When deciding whether an object with a known content length can be
swapped out, do not wait until the object is completely received and its
size (mem_obj->object_sz) becomes known (while asking the store to
recheck in vain with every incoming chunk). Instead, use the known
content length, if any, to make the decision.

This optimizes the common case where the complete object is eventually
received and swapped out, preventing accumulating potentially large
objects in RAM while waiting for the end of the response. Should not
affect objects with unknown content length.

Side-effect1: probably fixes several cases of unknowingly using negative
(unknown) mem_obj->object_sz in calculations. I added a few assertions
to double check some of the remaining object_sz/objectLen() uses.

Side-effect2: When expectedReplySize() is stored on disk as StoreEntry
metadata, it may help to detect truncated entries when the writer
process dies before completing the swapout.


* Removed mem->swapout.memnode in favor of mem->swapout.queue_offset.

The code used swapout.memnode pointer to keep track of the last page
that was swapped out. The code was semi-buggy because it could reset the
pointer to NULL if no new data came in before the call to doPages().
Perhaps the code relied on the assumption that the caller will never
doPages if there is no new data, but I am not sure that assumption was
correct in all cases (it could be that I broke the calling code, of course).

Moreover, the page pointer was kept without any protection from page
disappearing during asynchronous swapout. There were ""Evil hack time""
comments discussing how the page might disappear.

Fortunately, we already have mem->swapout.queue_offset that can be fed
to getBlockContainingLocation to find the page that needs to be swapped
out. There is no need to keep the page pointer around. The
queue_offset-based math is the same so we are not adding any overheads
by using that offset (in fact, we are removing some minor computations).


* Added ""close how?"" parameter to storeClose() and friends.

The old code would follow the same path when closing swapout activity
for an aborted entry and when completing a perfectly healthy swapout. In
non-shared case, that could have been OK because the abort code would
then release the entry, removing any half-written entry from the index
and the disk (but I am not sure that release happened fast enough in
100% of cases).

When the index and disk storage is shared among workers, such
""temporary"" inconsistencies result in truncated responses being
delivered by other workers to the user because once the swapout activity
is closed, other workers can start using the entry.

By adding the ""close how?"" parameter to closing methods we allow the
core and SwapDir-specific code to handle aborted swapouts appropriately.

Since swapin code is ""read only"", we do not currently distinguish
between aborted and fully satisfied readers: The readerGone enum value
applies to both cases. If needed, the SwapDir reading code can make that
distinction by analyzing how much was actually swapped in.


* Moved ""can you store this entry?"" code to virtual SwapDir::canStore().

The old code had some of the tests in SwapDir-specific canStore()
methods and some in storeDirSelect*() methods. This resulted in
inconsistencies, code duplication, and extra calculation overheads.
Making this call virtual allows individual cache_dir types to do custom
access controls.

The same method is used for cache_dir load reporting (if it returns
true). Load management needs more work, but the current code is no worse
than the old one in this aspect, and further improvements are outside
this change scope.


* Minimized from-disk StoreEntry loading/unpacking code duplication.

Moved common (and often rather complex!) code from store modules into
storeRebuildLoadEntry, storeRebuildParseEntry, and storeRebuildKeepEntry.


* Do not set object_sz when the entry is aborted because the true object
size (HTTP reply headers + body) is not known in this case. Setting
object_sz may fool client-side code into believing that the object is
complete.

This addresses an old RBC's complaint.


* When swapout initiation fails, mark swapout decision as
MemObject::SwapOut::swImpossible. This prevents the caller code from trying to
swap out again and again because swap_status becomes SWAPOUT_NONE.

TODO: Consider add SWAPOUT_ERROR, STORE_ERROR, and similar states. It
may solve several problems where the code sees _NONE or _OK and thinks
everything is peachy when in fact there was an error.


* Call haveParsedReplyHeaders() before entry->replaceHttpReply().

HaveParsedReplyHeaders() sets the entry public key and various flags (at 
least). ReplaceHttpReply() packs reply headers, starting swapout process.
It feels natural to adjust the entry _before_ we pack/swap it, but I may be
missing some side-effects here.

The change was necessary because we started calling checkCachable() from
swapoutPossible(). If haveParsedReplyHeaders() is not called before we swap
out checks, the entry will still have the private key and will be declared
impossible to cache.


* Extracted the write-to-store step from StoreEntry::replaceHttpReply().

This allows the caller to set the reply for the entry and then update the
entry and the reply before writing them to store. For example, the server-side
haveParsedReplyHeaders() code needs to set the entry timestamps and make the
entry key public before the entry starts swapping out, but the same code also
needs access to entry->getReply() and such for timestampsSet() and similar
code to work correctly.

TODO: Calls to StoreEntry::replaceHttpReply() do not have to be modified
because replaceHttpReply() does write by default. However, it is likely that
callers other than ServerStateData::setFinalReply() should take advantage of
the new split interface because they call timestampsSet() and such after
replaceHttpReply().


* Moved SwapDir::cur_size and n_disk_objects to specific SwapDirs. Removed
updateSize().  Some cache_dirs maintain their own maps and size statistics,
making the one-size-fits-all SwapDir members inappropriate.

* A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.

* Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.

Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.

Store Config.Store.avgObjectSize in bytes to avoid repeated and error-prone
KB<->bytes conversions.


* Change Config.cacheSwap.swapDirs and StoreEntry::store() type to SwapDir.

This allows using SwapDir API without dynamic_cast.


* Always call StoreEntry::abort() instead of setting ENTRY_ABORTED manually.

* Rely on entry->abort() side-effects if ENTRY_ABORTED was set.

* Added or updated comments to better document current code.

* Added operator << for dumping StoreEntry summary into the debugging
log. Needs more work to report more info (and not report yet-unknown info).

* Fixed blocking reads that were sometimes reading from random file offsets.

Core ""disk file"" reading code assumed that if the globally stored disk.offset
matches the desired offset, there is no reason to seek. This was probably done
to reduce seek overhead between consecutive reads. Unfortunately, the disk
writing code did not know about that optimization and left F->disk.offset
unchanged after writing.

This may have worked OK for UFS if it never writes to the file it reads from,
but it does not work for store modules that do both kinds of I/O at different
offsets of the same disk file.

Eventually, implement this optimization correctly or remove disk.offset.


IPC primitives
--------------

To make SMP disk and memory caching non-blocking and correct, worker and
disker processes must asynchronously communicate with each other. We are
adding a collection of classes that support such communication.

At the base of the collection is the AtomicWordT template that uses GCC atomic
primitives such as __sync_add_and_fetch() to perform atomic operations on
integral values in memory shared by multiple Squid kids. AtomicWordT is used
to implement non-blocking shared locks, queues, store tables, and page pools.

To avoid blocking or very long searches, many operations are ""optimistic"" in
nature. For example, it is possible that an atomic store map will refuse to
allocate an entry for two processes even though a blocking implementation
would have allowed one of the processes to get the map slot. We speculate that
such conflict resolution is better than blocking locks when it comes to
caching, especially if the conflicts are rare due to large number of cache
entries, fast operations, and relatively small number of kids.


TODO: Eventually, consider breaking locks left by dead kids.



Shared Memory Cache
-------------------

* Added initial shared memory cache implementation (MemStore).

The shared memory cache keeps its own compact index of cached entries using
extended Ipc::StoreMap class (MemStoreMap). The cache also strives to keep its
Root.get() results out of the store_table except during transit.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.

Allow the user to explicitly disable shared memory caching in SMP mode via
memory_cache_shared to squid.conf. Report whether mem_cache is shared.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

TODO: Better limits/separation for cache and I/O shared memory pages.
Eventually, support shared memory caching of multi-page entries.


Rock Store
----------

Rock Store uses a single [large] database-style file per cache_dir to store
cached responses and metadata. This part of the design is similar to COSS.
Rock Store does not maintain or rely on swap.state ""log"" for recovery.
Instead, the database is scanned in the background to load entries when Squid
starts. Rock Store maintains its own index of cached entries and avoids global
store_table. All entries must be max-size or smaller.

In SMP mode, each Rock cache_dir is given a dedicated Kid processes called
""disker"". All SMP workers communicate with diskers to store misses and load
hits, using shared memory pages and atomic shared memory queues. Disker blocks
when doing disk I/O but workers do not. Any Diskers:Workers ratio is supported
so that the user can find and configure the optimal number of workers and
diskers for a given number of disks and CPU cores.

In non-SMP mode, should use good old blocking disk I/O, without any diskers,
but this has not been tested recently and probably needs more work.

Feature page: http://wiki.squid-cache.org/Features/RockStore

TODO: Disk rate limit to protect Squid from disk overload. More stats.
Multiple readers? Seek optimization? Remove known max-size requirement?",8765,data/crawl/squid/hunk_2451.cpp,,,data/crawl/squid/old_hunk_2451.cpp,data/crawl/squid/new_hunk_2451.cpp,5,5,"storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      (double)(100.0 * cur_size) / (double)max_size);","storeAppendPrintf(&sentry, ""Percent Used: %0.2f%%\n"",
                      Math::doublePercent(currentSize(), maxSize()));","[""removeVariable"", ""removeContent"", ""addVariable""]","[[""double"", ""100"", ""0"", ""*"", ""cur_size"", ""/"", ""double"", ""max_size""], [""Math"", ""doublePercent"", ""currentSize"", ""maxSize""]]",[-12451043446310186508],6022,0:00:00
https://github.com/squid-cache/squid/commit/cc34568dd6d1a7fa78a4db8927f9d21437d84bbb,27 Apr 2011,"Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.",153,data/crawl/squid/hunk_2623.cpp,,,data/crawl/squid/old_hunk_2623.cpp,data/crawl/squid/new_hunk_2623.cpp,5,4,"storeAppendPrintf(&sentry, ""Maximum Size: %lu KB\n"", max_size);","storeAppendPrintf(&sentry, ""Maximum Size: %""PRIu64"" KB\n"", maxSize() >> 10);","[""removeVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""%lu"", ""max_size""], [""%"", ""PRIu64"", ""maxSize"", ""10""]]",[8838064220441106210],6021,"69 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c975f53276eb34b4ea0e9db626d98bbd605531d5,28 Aug 2011,"Disable Rock store and shared memory cache if shared memory is not available.

The patch adds support for building on systems without POSIX shared
memory (e.g. OpenBSD).  IpcIo DiskIO module and Rock store is not
enabled by default if shared memory support is not available.  If IpcIo
or Rock store is explicitly enabled, but no shared memory support is
available, fail with error during configure.  Fail with error at
runtime if shared memory cache is enabled but no shared memory support
is detected.",87,data/crawl/squid/hunk_2478.cpp,,,data/crawl/squid/old_hunk_2478.cpp,data/crawl/squid/new_hunk_2478.cpp,-1,11,,"fatal(""memory_cache_shared is on, but no support for shared memory detected"");","[""addLog""]","[[], [""fatal"", ""memory_cache_shared"", ""is"", ""on"", ""but"", ""no"", ""support"", ""for"", ""shared"", ""memory"", ""detected""]]",[-3577178566331241110],6020,"8 days, 0:00:00"
https://github.com/squid-cache/squid/commit/65b81b2712ba00ea3b47ecd0d4b730a63681550f,25 May 2011,"Detect support for __sync_add_and_fetch() and friends,
setting HAVE_ATOMIC_OPS accordingly.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

Needs more testing.",77,data/crawl/squid/hunk_2604.cpp,,,data/crawl/squid/old_hunk_2604.cpp,data/crawl/squid/new_hunk_2604.cpp,-1,8,,"fatal(""memory_cache_shared is on, but no support for atomic operations detected"");","[""addLog""]","[[], [""fatal"", ""memory_cache_shared"", ""is"", ""on"", ""but"", ""no"", ""support"", ""for"", ""atomic"", ""operations"", ""detected""]]",[5114139703971541903],6019,"55 days, 12:00:00"
https://github.com/squid-cache/squid/commit/9487bae9c1514d66499a7015e44648dd9f231d73,12 Apr 2011,"Added initial shared memory cache implementation (MemStore) and integrated it.

Like Rock Store, shared memory cache keeps its own compact index of cached
entries using extended Ipc::StoreMap class (MemStoreMap). Like Rock Store, the
cache also struggles to keep its Root.get() results out of the store_table
except during transit.

There are several XXXs and TODOs that still need to be addressed for a more
polished implementation.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.",624,data/crawl/squid/hunk_2659.cpp,,,data/crawl/squid/old_hunk_2659.cpp,data/crawl/squid/new_hunk_2659.cpp,-1,150,,"fatal(""MemStore::get(key,callback,data) should not be called"");","[""addLog""]","[[], [""fatal"", ""MemStore"", ""get"", ""key"", ""callback"", ""data"", ""should"", ""not"", ""be"", ""called""]]",[3864778167489770400],6018,"77 days, 0:00:00"
https://github.com/squid-cache/squid/commit/c4e688b7b851b9accc082a210fd0efb131cc696f,12 Apr 2011,Added basic stats reporting.,23,data/crawl/squid/hunk_2658.cpp,,,data/crawl/squid/old_hunk_2658.cpp,data/crawl/squid/new_hunk_2658.cpp,-1,7,,"storeAppendPrintf(&e, ""Maximum Size: %.0f KB\n"", Config.memMaxSize/1024.0);","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Maximum"", ""Size"", ""%"", ""0f"", ""KB\\n"", ""Config"", ""memMaxSize/1024"", ""0""]]",[16115452904683357215],6017,"77 days, 0:00:00"
https://github.com/squid-cache/squid/commit/df881a0f9a049b3853ff8d6d0bbc67666cecd6c6,15 Sep 2011,"Added max-swap-rate=swaps/sec option to Rock cache_dir.

The option limits disk access to smooth out OS disk commit activity and to
avoid blocking Rock diskers (or even other processes) on I/O. Should be used
when swap demand exceeds disk performance limits but the underlying file
system does not slow down incoming I/Os until the situation gets out of
control.

TODO: Account for the I/O rate limit when estimating whether a future I/O
will complete in time (for swap-timeout).

TODO: Consider allowing the next swap in (i.e., read) through regardless of
the limit because, unlike writes, reads do not usually accumulate in OS
buffers.",215,data/crawl/squid/hunk_2436.cpp,,,data/crawl/squid/old_hunk_2436.cpp,data/crawl/squid/new_hunk_2436.cpp,-1,43,,"storeAppendPrintf(e, "" max-swap-rate=%d"", fileConfig.ioRate);","[""addLog""]","[[], [""storeAppendPrintf"", ""e"", ""max"", ""swap"", ""rate"", ""%d"", ""fileConfig"", ""ioRate""]]",[2168093689010028722],6016,"10 days, 12:00:00"
https://github.com/squid-cache/squid/commit/be9cb908306a7cf14033aafb63fcea168600eaab,04 Oct 2011,"Add ""fake"" shared memory segment implementation.

""Fake"" shared memory segments are enabled #if a system does not
support POSIX shared memory.  Such segments use regular new to
allocate memory, it is not shared among multiple processes.  The
purpose of the change is to allow code that uses Ipc::Mem::Segment to
run in non-SMP mode (that is when only a single process, except for
master, is running) on systems without POSIX shared memory support.

Note: running SHM-using features in SMP mode still requires POSIX
shared memory support, the patch does not change that.",128,data/crawl/squid/hunk_2431.cpp,,,data/crawl/squid/old_hunk_2431.cpp,data/crawl/squid/new_hunk_2431.cpp,-1,71,,"fatalf(""%s failed"", context);","[""addLog""]","[[], [""fatalf"", ""%s"", ""failed"", ""context""]]",[-5663475199645673505],6015,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/be9cb908306a7cf14033aafb63fcea168600eaab,04 Oct 2011,"Add ""fake"" shared memory segment implementation.

""Fake"" shared memory segments are enabled #if a system does not
support POSIX shared memory.  Such segments use regular new to
allocate memory, it is not shared among multiple processes.  The
purpose of the change is to allow code that uses Ipc::Mem::Segment to
run in non-SMP mode (that is when only a single process, except for
master, is running) on systems without POSIX shared memory support.

Note: running SHM-using features in SMP mode still requires POSIX
shared memory support, the patch does not change that.",128,data/crawl/squid/hunk_2431.cpp,,,data/crawl/squid/old_hunk_2431.cpp,data/crawl/squid/new_hunk_2431.cpp,-1,56,,"fatalf(""Fake segment not found: %s"", theName.termedBuf());","[""addLog""]","[[], [""fatalf"", ""Fake"", ""segment"", ""not"", ""found"", ""%s"", ""theName"", ""termedBuf""]]",[15731515074102340704],6014,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/be9cb908306a7cf14033aafb63fcea168600eaab,04 Oct 2011,"Add ""fake"" shared memory segment implementation.

""Fake"" shared memory segments are enabled #if a system does not
support POSIX shared memory.  Such segments use regular new to
allocate memory, it is not shared among multiple processes.  The
purpose of the change is to allow code that uses Ipc::Mem::Segment to
run in non-SMP mode (that is when only a single process, except for
master, is running) on systems without POSIX shared memory support.

Note: running SHM-using features in SMP mode still requires POSIX
shared memory support, the patch does not change that.",128,data/crawl/squid/hunk_2431.cpp,,,data/crawl/squid/old_hunk_2431.cpp,data/crawl/squid/new_hunk_2431.cpp,-1,39,,"fatalf(""Duplicate fake segment creation: %s"", theName.termedBuf());","[""addLog""]","[[], [""fatalf"", ""Duplicate"", ""fake"", ""segment"", ""creation"", ""%s"", ""theName"", ""termedBuf""]]",[10663551848230666060],6013,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/c044f7a980558b4012aa77a31a6dbc34ad76735b,28 Nov 2008,"Author: Christos Tsantilas <chtsanti@users.sourceforge.net>
Bug 2527: ICAP compile error with g++ 4.3.2",2,data/crawl/squid/hunk_4048.cpp,,,data/crawl/squid/old_hunk_4048.cpp,data/crawl/squid/new_hunk_4048.cpp,3,3,buf.Printf(stopReason);,"buf.Printf(""%s"",stopReason);","[""addContent""]","[[], [""%s""]]",[4736028453042782],6012,"550 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b073fc4bde37d3b0dd2f820f90c801d7dada1338,30 Dec 2011,"Cache Manager migration support

 * Add a little bit of XHR script to the CGI cachemgr front page which
probes each of the managed proxies for http:// and https:// capabilities
and produces web links to their internal managers.

 * Reserve the template name MGR_INDEX for use by cachemgr scripts.
But do not distribute any preset template. This allows manager apps to
provide their own static template with linked scripts and objects.

 * The error page system is updated to create a blanket message
indicating missing template instead of aborting Squid if a template is
not even installed.",122,data/crawl/squid/hunk_2365.cpp,,,data/crawl/squid/old_hunk_2365.cpp,data/crawl/squid/new_hunk_2365.cpp,-1,10,,"printf(""}</script>\n"");","[""addLog""]","[[], [""printf"", ""/script"", ""\\n""]]",[2030380380745911200],6011,0:00:00
https://github.com/squid-cache/squid/commit/081edc2de252e852d0a8e02891fb36d7919a92ef,07 Jan 2012,"Cleanup: update most of the existing stub files to use the STUB.h framework

There are still several sections to be done. Including adding library API
stubs. However these are the ones which can be done immediately without 
breaking or re-writing existing unit tests.",2058,data/crawl/squid/hunk_2358.cpp,,,data/crawl/squid/old_hunk_2358.cpp,data/crawl/squid/new_hunk_2358.cpp,13,-1,"fprintf(stderr, ""Fatal: %s"", message);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Fatal"", ""%s"", ""message""], []]",[25714727152405944387],6010,0:00:00
https://github.com/squid-cache/squid/commit/65d448bc848526838ea2d5cea65d72a341896f08,25 Apr 2012,"SourceLayout: port config and select-loop priority polishing

- renames http_port_list to AnyP::PortCfg
- de-duplicate https_port_list into AnyP::PortCfg
- shuffles related globals and defines into anyp/PortCfg.*
- renames MAXHTTPPORTS to MAXTCPLISTENPORTS to suit its actual coverage of HTTP and HTTPS ports.
- shuffled config port clone function into a method.
- rename ICP/HTCP/SNMP API functions to consistent *OpenPorts() and *ClosePorts()


  NP:following applies to incoming_* and *_poll_cnt directives.
- renames *_icp_* to *_udp_*
- renames *_http_* to *_tcp_*
- shuffles duplicated struct SquidConf options into a shared structure
- shuffles related defines into comm/Loops.h
- documents options better

- various other cosmetic syntax tweaks and polish

One bug fix:
  comm_dns_incoming was not being propigated in StatsHist copy/clone.
  Now is. I seem to remember mention of something similar being zero before,
  but can't find the bug report.",1098,data/crawl/squid/hunk_2322.cpp,,,data/crawl/squid/old_hunk_2322.cpp,data/crawl/squid/new_hunk_2322.cpp,15,15,"storeAppendPrintf(sentry, ""HTTP Messages handled per comm_select_http_incoming() call:\n"");","storeAppendPrintf(sentry, ""HTTP Messages handled per comm_select_tcp_incoming() call:\n"");","[""updateContent""]","[[""comm_select_http_incoming""], [""comm_select_tcp_incoming""]]",[-11014821049465247678],6009,0:00:00
https://github.com/squid-cache/squid/commit/65d448bc848526838ea2d5cea65d72a341896f08,25 Apr 2012,"SourceLayout: port config and select-loop priority polishing

- renames http_port_list to AnyP::PortCfg
- de-duplicate https_port_list into AnyP::PortCfg
- shuffles related globals and defines into anyp/PortCfg.*
- renames MAXHTTPPORTS to MAXTCPLISTENPORTS to suit its actual coverage of HTTP and HTTPS ports.
- shuffled config port clone function into a method.
- rename ICP/HTCP/SNMP API functions to consistent *OpenPorts() and *ClosePorts()


  NP:following applies to incoming_* and *_poll_cnt directives.
- renames *_icp_* to *_udp_*
- renames *_http_* to *_tcp_*
- shuffles duplicated struct SquidConf options into a shared structure
- shuffles related defines into comm/Loops.h
- documents options better

- various other cosmetic syntax tweaks and polish

One bug fix:
  comm_dns_incoming was not being propigated in StatsHist copy/clone.
  Now is. I seem to remember mention of something similar being zero before,
  but can't find the bug report.",1098,data/crawl/squid/hunk_2322.cpp,,,data/crawl/squid/old_hunk_2322.cpp,data/crawl/squid/new_hunk_2322.cpp,11,11,"storeAppendPrintf(sentry, ""ICP Messages handled per comm_select_icp_incoming() call:\n"");","storeAppendPrintf(sentry, ""ICP Messages handled per comm_select_udp_incoming() call:\n"");","[""updateContent""]","[[""comm_select_icp_incoming""], [""comm_select_udp_incoming""]]",[7669300460943962457],6008,0:00:00
https://github.com/squid-cache/squid/commit/95dc7ff44bb6598cf09020f2ac9b66f0cb28f8e5,17 Jul 2012,Changed increment operators from postfix to prefix form.,541,data/crawl/squid/hunk_2264.cpp,,,data/crawl/squid/old_hunk_2264.cpp,data/crawl/squid/new_hunk_2264.cpp,4,4,"storeAppendPrintf(s, ""\ttry#%d"", j + 1);","storeAppendPrintf(s, ""\ttry#%d"", j);","[""removeVariable"", ""removeContent""]","[[""1""], []]",[-6272018864],6007,0:00:00
https://github.com/squid-cache/squid/commit/2f6fcab1f37182a2b52350efb42a63c9cf949568,18 Jul 2012,"Bug 3551: store_rebuild.cc:116: ""store_errors == 0"" assertion

Fail with an explanation instead of asserting. The assertion fails when a ufs
cache_dir's swap.state has inconsistencies AND the user starts Squid with a -S
command line option. Normally, such inconsistencies are ignored and many of
them are benign.  For example, a missing cache file with an ADD record in
swap.state is such an inconsistency.

The -S option was meant to help developers troubleshoot inconsistencies by
analyzing core dumps, but (a) admins treat assertions as Squid bugs and file
bug reports and (b) in most cases, it is really difficult to find the
inconsistency when Squid asserts after detecting all of them (and leaving the
detection context).

We now explicitly tell the admin what their options are and quit instead of
asserting.

TODO: Consider adding a ufs cache_dir option that checks for and removes
inconsistencies instead of not checking at all (default) or checking and
quitting (-S). This is difficult because some valid cache entries may look
inconsistent while they are being updated and some invalid cache entries
are not visible to Squid without a full directory scan.",8,data/crawl/squid/hunk_2192.cpp,,,data/crawl/squid/old_hunk_2192.cpp,data/crawl/squid/new_hunk_2192.cpp,-1,4,,"fatalf(""Quitting after finding %d cache index inconsistencies. "" \
                   ""Removing cache index will force its slow rebuild. "" \
                   ""Removing -S will let Squid start with an inconsistent "" \
                   ""cache index (at your own risk).\n"", store_errors);","[""addLog""]","[[], [""fatalf"", ""Quitting"", ""after"", ""finding"", ""%d"", ""cache"", ""index"", ""inconsistencies"", ""\\"", ""Removing"", ""cache"", ""index"", ""will"", ""force"", ""its"", ""slow"", ""rebuild"", ""\\"", ""Removing"", ""S"", ""will"", ""let"", ""Squid"", ""start"", ""with"", ""an"", ""inconsistent"", ""\\"", ""cache"", ""index"", ""at"", ""your"", ""own"", ""risk"", ""\\n"", ""store_errors""]]",[-68049633540404360435],6006,0:00:00
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/hunk_2178.cpp,,,data/crawl/squid/old_hunk_2178.cpp,data/crawl/squid/new_hunk_2178.cpp,17,5,"storeAppendPrintf(sentry, "" %%USER_CERT_%s"", format->header);","DUMP_EXT_ACL_TYPE_FMT(USER_CERT, "" %%USER_CERT_%s"", format->header);","[""updateVariable"", ""updateLog""]","[[""storeAppendPrintf"", ""sentry""], [""DUMP_EXT_ACL_TYPE_FMT"", ""USER_CERT""]]",[-4202360543490785724],6005,0:00:00
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/hunk_2178.cpp,,,data/crawl/squid/old_hunk_2178.cpp,data/crawl/squid/new_hunk_2178.cpp,13,6,"storeAppendPrintf(sentry, "" %%USER_CERT_%s"", format->header);","DUMP_EXT_ACL_TYPE_FMT(CA_CERT, "" %%CA_CERT_%s"", format->header);","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""storeAppendPrintf"", ""sentry"", ""%%USER_CERT_%s""], [""DUMP_EXT_ACL_TYPE_FMT"", ""CA_CERT"", ""%%CA_CERT_%s""]]",[-18601656213840574156],6004,0:00:00
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/hunk_2178.cpp,,,data/crawl/squid/old_hunk_2178.cpp,data/crawl/squid/new_hunk_2178.cpp,9,4,"storeAppendPrintf(sentry, "" %%USER_CERTCHAIN"");","DUMP_EXT_ACL_TYPE_FMT(USER_CERTCHAIN_RAW, "" %%USER_CERTCHAIN_RAW"");","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""storeAppendPrintf"", ""sentry"", ""%%USER_CERTCHAIN""], [""DUMP_EXT_ACL_TYPE_FMT"", ""USER_CERTCHAIN_RAW"", ""%%USER_CERTCHAIN_RAW""]]",[-637458935919107222],6003,0:00:00
https://github.com/squid-cache/squid/commit/7456a5c9d27ec42413ac84927c7f9158434d87ae,26 Jul 2012,Consolidate external_acl_form config dumping a bit and add missing percent dumper.,25,data/crawl/squid/hunk_2178.cpp,,,data/crawl/squid/old_hunk_2178.cpp,data/crawl/squid/new_hunk_2178.cpp,5,3,"storeAppendPrintf(sentry, "" %%USER_CERT"");","DUMP_EXT_ACL_TYPE_FMT(USER_CERT_RAW, "" %%USER_CERT_RAW"");","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""storeAppendPrintf"", ""sentry"", ""%%USER_CERT""], [""DUMP_EXT_ACL_TYPE_FMT"", ""USER_CERT_RAW"", ""%%USER_CERT_RAW""]]",[-765317581501053930],6002,0:00:00
https://github.com/squid-cache/squid/commit/0bf57f33e5b7001cc680e9d978a027f6264faa60,01 Aug 2012,More GCC 4.2 dependency fixes,48,data/crawl/squid/hunk_2081.cpp,,,data/crawl/squid/old_hunk_2081.cpp,data/crawl/squid/new_hunk_2081.cpp,-1,14,,"printf(""Ssl::Config::Config No implemented\n"");","[""addLog""]","[[], [""printf"", ""Ssl"", ""Config"", ""Config"", ""No"", ""implemented\\n""]]",[8982539660085370158],6001,0:00:00
https://github.com/squid-cache/squid/commit/95d2589c9c45dcbb5c405a4fbaed53675eeb5a2e,18 Nov 2010,"Author: Alex Rousskov, Andrew Balabohin, Christos Tsantilas
Dynamic SSL certificate generartion

This patch implements dynamic SSL certificate generartion in Squid.When
used with SSL Bump, the feature allows Squid to dynamically
generate (using a configurable CA certificate) and cache SSL
certificates for the proxied hosts.

A description for this feature can be found at:
   http://wiki.squid-cache.org/Features/DynamicSslCert

A first version of the patch posted by Alex, some months before:
  http://www.squid-cache.org/mail-archive/squid-dev/201003/0201.html

Some words about the patch:

  * ssl related source files moved under the src/ssl directory

  * Introduce the TidyPointer class similar to std::auto_ptr, which implements
    a  pointer that deletes the object it points to when the pointer's owner 
    or context is gone. It  is designed to avoid memory leaks  in the presence
    of exceptions and processing short cuts.

  * Implements ssl context cache to use with generated ssl contexts. The 
    Ssl::LocalContextStorage class stores the hostname/ssl context pairs for 
    a local listening address/port. The  Ssl::GlobalContextStorage class used 
    to store Ssl::LocalContextStorages per local listening address and handles
    squid shutdown/configure/reconfigure

  * Ssl::Helper class implements the squid part of the ssl_crtd helpers.

  * The ssl_crtd helper implemented in ssl_crtd.cc and certificate_db.* files

  * The Ssl::CertificateDb class (certificate_db.* files)  implements  a
    database of certificates on disk files. It is used by ssl_crtd helper to
    manipulate generated certificates.

  * The ssl related files included in the libraries libsslutil.a which
    contains common classes and functions and the libsquidssl.a which has
    squid related ssl objects and functions

  * Use the Ssl namespace for new ssl code

This is a Measurement Factory Project.",2858,data/crawl/squid/hunk_2895.cpp,,,data/crawl/squid/old_hunk_2895.cpp,data/crawl/squid/new_hunk_2895.cpp,-1,83,,"fatal(""SSL servers not responding for 3 minutes"");","[""addLog""]","[[], [""fatal"", ""SSL"", ""servers"", ""not"", ""responding"", ""for"", ""3"", ""minutes""]]",[10265288295909900330],6000,"333 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6d7a7410b325ea18b86ed906c1e2b810779c93f2,04 Oct 2012,Removed leftover CVS-Id markers,340,data/crawl/squid/hunk_1984.cpp,,,data/crawl/squid/old_hunk_1984.cpp,data/crawl/squid/new_hunk_1984.cpp,3,3,"printf( ""#\n# Currently active values for %s:\n# %s\n"",
                ::programname, ::RCS_ID );","printf( ""#\n# Currently active values for %s:\n"",
                ::programname);","[""removeVariable"", ""updateContent""]","[[""%s\\n"", ""RCS_ID""], []]",[-13045972254499432572],5999,12:00:00
https://github.com/squid-cache/squid/commit/6d7a7410b325ea18b86ed906c1e2b810779c93f2,04 Oct 2012,Removed leftover CVS-Id markers,340,data/crawl/squid/hunk_1983.cpp,,,data/crawl/squid/old_hunk_1983.cpp,data/crawl/squid/new_hunk_1983.cpp,3,3,"printf( ""\n%s\nUsage:\t%s\t[-a] [-c cf] [-d l] [-(f|F) fn | -(e|E) re] ""
            ""[-p h[:p]]\n\t\t[-P #] [-s] [-v] [-C dir [-H]] [-n]\n\n"",
            ::RCS_ID, ::programname );","printf( ""\nUsage:\t%s\t[-a] [-c cf] [-d l] [-(f|F) fn | -(e|E) re] ""
            ""[-p h[:p]]\n\t\t[-P #] [-s] [-v] [-C dir [-H]] [-n]\n\n"",
            ::programname );","[""removeVariable"", ""updateContent""]","[[""\\n%s\\nUsage"", ""RCS_ID""], [""\\nUsage""]]",[-17886702890374580284],5998,12:00:00
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/hunk_1982.cpp,,,data/crawl/squid/old_hunk_1982.cpp,data/crawl/squid/new_hunk_1982.cpp,15,-1,"fprintf(debug_log, ""Squid Cache (Version %s): Terminated abnormally.\n"",
            version_string);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""Squid"", ""Cache"", ""Version"", ""%s"", ""Terminated"", ""abnormally"", ""\\n"", ""version_string""], []]",[12433727906166587168],5997,12:00:00
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/hunk_1982.cpp,,,data/crawl/squid/old_hunk_1982.cpp,data/crawl/squid/new_hunk_1982.cpp,13,-1,"fprintf(stderr, ""FATAL: %s\n"", message);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""FATAL"", ""%s\\n"", ""message""], []]",[19574497941444277743],5996,12:00:00
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/hunk_1982.cpp,,,data/crawl/squid/old_hunk_1982.cpp,data/crawl/squid/new_hunk_1982.cpp,10,-1,"fprintf(debug_log, ""FATAL: %s\n"", message);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""FATAL"", ""%s\\n"", ""message""], []]",[11907917122135995086],5995,12:00:00
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/hunk_1981.cpp,,,data/crawl/squid/old_hunk_1981.cpp,data/crawl/squid/new_hunk_1981.cpp,-1,55,,"fprintf(debug_log, ""Squid Cache (Version %s): Terminated abnormally.\n"",
            version_string);","[""addLog""]","[[], [""fprintf"", ""debug_log"", ""Squid"", ""Cache"", ""Version"", ""%s"", ""Terminated"", ""abnormally"", ""\\n"", ""version_string""]]",[-12433727906166587168],5994,12:00:00
https://github.com/squid-cache/squid/commit/94739d08cbbf966d3207fca7582960fe2870db32,04 Oct 2012,Moved fatal functions out of tools.cc and into own source file in lib/fatal.cc,256,data/crawl/squid/hunk_1981.cpp,,,data/crawl/squid/old_hunk_1981.cpp,data/crawl/squid/new_hunk_1981.cpp,-1,50,,"fprintf(debug_log, ""FATAL: %s\n"", message);","[""addLog""]","[[], [""fprintf"", ""debug_log"", ""FATAL"", ""%s\\n"", ""message""]]",[-11907917122135995086],5993,12:00:00
https://github.com/squid-cache/squid/commit/7bbefa01f63575cc8104addbbc65765c5e186e5d,07 Nov 2012,"Use Notes objects for key=pair handling in HelperReply

* NTLM/Negotiate auth are expeted to return OK/ERR/BH/TT codes and key=pair.
  The old result lines are still received, but converted to the new format
  silently.

* new key accepted:
 'token=' for passing NTLM and Negotiate auth tokens

* some undocumented old tags accepted by external_acl_type are now ignored:
 'error=' replaced by 'message='
 'passwd=' replaced by 'password='
 'login=' replaced by 'user='
These were replaced some time ago and never formally documented.",317,data/crawl/squid/hunk_1950.cpp,,,data/crawl/squid/old_hunk_1950.cpp,data/crawl/squid/new_hunk_1950.cpp,28,35,auth_user_request->denyMessage(blob);,auth_user_request->denyMessage(errNote->values[0]->value.termedBuf());,"[""removeVariable"", ""addContent"", ""addVariable""]","[[""blob""], [""errNote"", ""values[0]"", ""value"", ""termedBuf""]]",[-3977919164146439671],5992,0:00:00
https://github.com/squid-cache/squid/commit/53251bc3a57a1321e2bf7b8bbc0f26ca5bfc734f,13 Nov 2012,merge from trunk r12441,16792,data/crawl/squid/hunk_1929.cpp,,,data/crawl/squid/old_hunk_1929.cpp,data/crawl/squid/new_hunk_1929.cpp,8,6,"fprintf(stderr, ""Usage:\n%s [-A|D UserGroup][-O DefaultDomain][-d]\n""
            ""-A can specify a Windows Local Group name allowed to authenticate\n""
            ""-D can specify a Windows Local Group name not allowed to authenticate\n""
            ""-O can specify the default Domain against to authenticate\n""
            ""-d enable debugging.\n""
            ""-h this message\n\n"",
            my_program_name);","fprintf(stderr, ""Usage:\n%s [-A|D UserGroup][-O DefaultDomain][-d]\n""
            ""-A can specify a Windows Local Group name allowed to authenticate\n""
            ""-D can specify a Windows Local Group name not allowed to authenticate\n""
            ""-O can specify the default Domain against to authenticate\n""
            ""-d enable debugging.\n""
            ""-h this message\n\n"",
            name);","[""updateVariable""]","[[""my_program_name""], [""name""]]",[-1202192614971270799],5991,0:00:00
https://github.com/squid-cache/squid/commit/4a77bb4e0e2b3d9da201a01e843467f57cb88b08,24 Nov 2012,Amos requested changes,256,data/crawl/squid/hunk_1902.cpp,,,data/crawl/squid/old_hunk_1902.cpp,data/crawl/squid/new_hunk_1902.cpp,3,3,"fatal(""SSL servers not responding for 3 minutes"");","fatal(""ssl_crtvd queue being overloaded for long time"");","[""updateContent""]","[[""SSL"", ""servers"", ""not"", ""responding"", ""3"", ""minutes""], [""ssl_crtvd"", ""queue"", ""being"", ""overloaded"", ""long"", ""time""]]",[3594822499813893252],5990,0:00:00
https://github.com/squid-cache/squid/commit/bcb9f68855ed476199bcfb749641bfdc0c065eec,04 Dec 2012,merge from trunk r12500,2102,data/crawl/squid/hunk_1854.cpp,,,data/crawl/squid/old_hunk_1854.cpp,data/crawl/squid/new_hunk_1854.cpp,-1,16,,"fprintf(stderr, ""digest_file_auth: missing user name at line %u in '%s'\n"", lineCount, passwordFile);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""digest_file_auth"", ""missing"", ""user"", ""name"", ""at"", ""line"", ""%u"", ""in"", ""%s"", ""\\n"", ""lineCount"", ""passwordFile""]]",[5708589278656383728],5989,0:00:00
https://github.com/squid-cache/squid/commit/b2d7d4beac04fd6d0ec2e5bd5ba03cb68943d6ed,16 Jan 2013,"squidpurge: display friendly errors on missing command line options

Currently the tool will crash with a segmentation fault if any one of
several command switches which are expected to have a mandatory argument
are in fact followed by nothing.
 Detect these cases and display a message about what is missing.

 Detected by Coverity Scan. Issue 740378",31,data/crawl/squid/hunk_1797.cpp,,,data/crawl/squid/old_hunk_1797.cpp,data/crawl/squid/new_hunk_1797.cpp,-1,19,,"fprintf( stderr, ""%c requires a regex pattern argument!\n"", option );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c"", ""requires"", ""a"", ""regex"", ""pattern"", ""argument"", ""\\n"", ""option""]]",[-38554215623888027321],5988,0:00:00
https://github.com/squid-cache/squid/commit/814f9a2eab3f8f5c78c7ea654700cd7dc1bc5046,03 Feb 2013,"Fix several uninitialized object members in unit tests

 Detected by Coverity Scan. Issues 740581, 740582, 740583, 740584",30,data/crawl/squid/hunk_1785.cpp,,,data/crawl/squid/old_hunk_1785.cpp,data/crawl/squid/new_hunk_1785.cpp,4,-1,"printf(""Ssl::Config::Config No implemented\n"");",,"[""removeLog""]","[[""printf"", ""Ssl"", ""Config"", ""Config"", ""No"", ""implemented\\n""], []]",[-8982539660085370158],5987,0:00:00
https://github.com/squid-cache/squid/commit/02c8dde5cc20d7594afac26284c0119167d19721,11 Feb 2013,"SourceLayout: Shuffle and collate the log result codes symbols

This collates all the small definitions spread around Squid for defining
and handling the TCP_* and UDP_* result code tags logged by Squid.

* log_type enumeration shuffled from enums.h
* log_type increment operator shuffled from client_db
* log_type strings shuffled from Format:: and built automatically
* is-HIT lookup test shuffled from ICP

Due to LogTags.cc being automatically built from the enum list we define
the shuffled functions as inline. This is not a problem due to their small
size. When the LogTags type is converted to a class thay can be de-inlined.",251,data/crawl/squid/hunk_1781.cpp,,,data/crawl/squid/old_hunk_1781.cpp,data/crawl/squid/new_hunk_1781.cpp,1,1,"storeAppendPrintf(sentry,
                              ""        %-20.20s %7d %3d%%\n"",
                              Format::log_tags[l],
                              c->Http.result_hist[l],
                              Math::intPercent(c->Http.result_hist[l], c->Http.n_requests));","storeAppendPrintf(sentry,
                              ""        %-20.20s %7d %3d%%\n"",
                              LogTags_str[l],
                              c->Http.result_hist[l],
                              Math::intPercent(c->Http.result_hist[l], c->Http.n_requests));","[""updateVariable"", ""removeVariable""]","[[""Format"", ""log_tags[l]""], [""LogTags_str[l]""]]",[-8841229894577852715],5986,0:00:00
https://github.com/squid-cache/squid/commit/d33e847ce7ca7f334ef1dccece5bf6fa42feedf9,19 Apr 2010,"Author: Dhaval Varia <dhavalkvaria@gmail.com>
TCP logging capability

Enable Squid to send log lines to a remote server over TCP.

This permits logging to bypass the failures implicit with UDP packets.

TODO:
 * example daemon to receive the log traffic via TCP
 * handle TCP failures mid-transaction
 * handle full TCP buffers",283,data/crawl/squid/hunk_3392.cpp,,,data/crawl/squid/old_hunk_3392.cpp,data/crawl/squid/new_hunk_3392.cpp,-1,174,,"fatalf(""Invalid TCP logging address '%s'\n"", lf->path);","[""addLog""]","[[], [""fatalf"", ""Invalid"", ""TCP"", ""logging"", ""address"", ""%s"", ""\\n"", ""lf"", ""path""]]",[-15998919467314472544],5985,"559 days, 0:00:00"
https://github.com/squid-cache/squid/commit/82b7abe3ff9fcee6e92696c8fbf2d66c6777ca2a,22 Nov 2009,"Author: Adrian Chadd + Tim Starling
Port from 2.7: Logging infrastructure updates.

 * Basic port of the Squid-2.7 modular logging code 
 * Adds support for async daemon helpers.
 * One daemon helper for file IO is included.
 * Adds UDP stream logging facility. (Tim Starling)

Ported by Amos Jeffries.",2427,data/crawl/squid/hunk_3514.cpp,,,data/crawl/squid/old_hunk_3514.cpp,data/crawl/squid/new_hunk_3514.cpp,126,-1,"fatalf(""Cannot open '%s' for writing.\n""
                       ""\tThe parent directory must be writeable by the\n""
                       ""\tuser '%s', which is the cache_effective_user\n""
                       ""\tset in squid.conf."", path, Config.effectiveUser);",,"[""removeLog""]","[[""fatalf"", ""Cannot"", ""open"", ""%s"", ""for"", ""writing"", ""\\n"", ""\\tThe"", ""parent"", ""directory"", ""must"", ""be"", ""writeable"", ""by"", ""the\\n"", ""\\tuser"", ""%s"", ""which"", ""is"", ""the"", ""cache_effective_user\\n"", ""\\tset"", ""in"", ""squid"", ""conf"", ""path"", ""Config"", ""effectiveUser""], []]",[-3071125531774423807],5984,"633 days, 0:00:00"
https://github.com/squid-cache/squid/commit/82b7abe3ff9fcee6e92696c8fbf2d66c6777ca2a,22 Nov 2009,"Author: Adrian Chadd + Tim Starling
Port from 2.7: Logging infrastructure updates.

 * Basic port of the Squid-2.7 modular logging code 
 * Adds support for async daemon helpers.
 * One daemon helper for file IO is included.
 * Adds UDP stream logging facility. (Tim Starling)

Ported by Amos Jeffries.",2427,data/crawl/squid/hunk_3514.cpp,,,data/crawl/squid/old_hunk_3514.cpp,data/crawl/squid/new_hunk_3514.cpp,122,-1,"fatalf(""Cannot open '%s' because\n""
                       ""\tthe parent directory does not exist.\n""
                       ""\tPlease create the directory.\n"", path);",,"[""removeLog""]","[[""fatalf"", ""Cannot"", ""open"", ""%s"", ""because\\n"", ""\\tthe"", ""parent"", ""directory"", ""does"", ""not"", ""exist"", ""\\n"", ""\\tPlease"", ""create"", ""the"", ""directory"", ""\\n"", ""path""], []]",[-1166021827210040158],5983,"633 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1754.cpp,,,data/crawl/squid/old_hunk_1754.cpp,data/crawl/squid/new_hunk_1754.cpp,18,22,"storeAppendPrintf(entry, ""\n"");",wordlistDestroy(&lines);,"[""updateVariable"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""storeAppendPrintf"", ""entry"", ""\\n""], [""wordlistDestroy"", ""&lines""]]",[-3381203888913771330],5982,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1754.cpp,,,data/crawl/squid/old_hunk_1754.cpp,data/crawl/squid/new_hunk_1754.cpp,15,-1,"storeAppendPrintf(entry, ""%s "", Ssl::bumpMode(sb->allow.kind));",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""Ssl"", ""bumpMode"", ""sb"", ""allow"", ""kind""], []]",[-13922051435011257693],5981,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1753.cpp,,,data/crawl/squid/old_hunk_1753.cpp,data/crawl/squid/new_hunk_1753.cpp,22,19,"storeAppendPrintf(entry, ""\n"");","aclParseAccessLine(cfg_directive, LegacyParser, head);","[""updateVariable"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""storeAppendPrintf"", ""entry"", ""\\n""], [""aclParseAccessLine"", ""cfg_directive"", ""LegacyParser"", ""head""]]",[3474875733453744446],5980,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1753.cpp,,,data/crawl/squid/old_hunk_1753.cpp,data/crawl/squid/new_hunk_1753.cpp,18,12,"storeAppendPrintf(entry, ""%s %s"",
                          name,
                          l->allow ? ""Allow"" : ""Deny"");","dump_wordlist(entry, lines);","[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""storeAppendPrintf"", ""%s"", ""%s"", ""name"", ""l"", ""allow"", ""Allow"", ""Deny""], [""dump_wordlist"", ""lines""]]",[7782690655297505449],5979,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1753.cpp,,,data/crawl/squid/old_hunk_1753.cpp,data/crawl/squid/new_hunk_1753.cpp,6,5,"storeAppendPrintf(entry, "" %s%s"",
                          l->op ? null_string : ""!"",
                          l->_acl->name);",wordlistDestroy(&values);,"[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""storeAppendPrintf"", ""entry"", ""%s%s"", ""l"", ""op"", ""null_string"", ""l"", ""_acl"", ""name""], [""wordlistDestroy"", ""&values""]]",[-18998403630877164485],5978,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1752.cpp,,,data/crawl/squid/old_hunk_1752.cpp,data/crawl/squid/new_hunk_1752.cpp,19,6,"storeAppendPrintf(entry, ""%s "", v->key);","storeAppendPrintf(entry, ""%s "", word->key);","[""updateVariable""]","[[""v""], [""word""]]",[-3668921474724384787],5977,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1751.cpp,,,data/crawl/squid/old_hunk_1751.cpp,data/crawl/squid/new_hunk_1751.cpp,-1,73,,"ctxTree.Printf(""%s %s"", cfg_directive, label);","[""addLog""]","[[], [""ctxTree"", ""Printf"", ""%s"", ""%s"", ""cfg_directive"", ""label""]]",[78828581701807399],5976,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1751.cpp,,,data/crawl/squid/old_hunk_1751.cpp,data/crawl/squid/new_hunk_1751.cpp,-1,64,,"ctxLine.Printf(""(%s %s line)"", cfg_directive, label);","[""addLog""]","[[], [""ctxLine"", ""Printf"", ""%s"", ""%s"", ""line"", ""cfg_directive"", ""label""]]",[496266979652663115],5975,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1751.cpp,,,data/crawl/squid/old_hunk_1751.cpp,data/crawl/squid/new_hunk_1751.cpp,-1,28,,"ctxBuf.Printf(""%s#%d"", directive, ruleId);","[""addLog""]","[[], [""ctxBuf"", ""Printf"", ""%s"", ""%d"", ""directive"", ""ruleId""]]",[265076709881841043],5974,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1749.cpp,,,data/crawl/squid/old_hunk_1749.cpp,data/crawl/squid/new_hunk_1749.cpp,-1,74,,"lineCtx.Printf(""(%s line #%d)"", name, lineId);","[""addLog""]","[[], [""lineCtx"", ""Printf"", ""%s"", ""line"", ""%d"", ""name"", ""lineId""]]",[-2156007022240409318],5973,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f58d7d7a975665078c7a748faf88188a34252ae,13 May 2013,"Major ACL handling update, including the following changes:

* Expressiveness: Two new Boolean ACLs (all-of and any-of) that allow admins
  to group ACLs as needed, to express complex conditions more naturally, with
  fewer squid.conf lines. Conditions such as ""(a or b) and (c or d)"" are
  easily expressed now. Explicit groups of ACLs of different types can now be
  configured, named, and used in any ACL expression.

* Correctness and performance: When a slow ACL (that has suspended checks to
  wait for an async lookup) is ready to resume checking, resume checking from
  that ACL, instead of rechecking all ACLs for the same action (or the same
  squid.conf directive) again.

* Internals: Store ACL-related configurations as an expression tree, streamlining
  the code and clearing the way for future math-style/natural ACL conditions
  support.",1696,data/crawl/squid/hunk_1749.cpp,,,data/crawl/squid/old_hunk_1749.cpp,data/crawl/squid/new_hunk_1749.cpp,-1,57,,"wholeCtx.Printf(""(%s lines)"", name);","[""addLog""]","[[], [""wholeCtx"", ""Printf"", ""%s"", ""lines"", ""name""]]",[7606425805528478266],5972,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/133906f560762d68bc2c8eb677584dcd4ccae8f2,04 Jun 2013,"Bug 2066: squid does not do chdir() after chroot()

The earlier workaround applied only fixed 1 of the 3 places performing
chroot().
 This makes chroot and chdir integral parts of setting up Squids running
directory and alters teh chroot() calls to be mainSetCwnd() calls. Which
fixes several potential problems with core dumps from squid -z or -k
executions ending up in unexpected locations, regardless of whether
chroot() and coredump_dir are configured.

 Detected by Coverity Scan. Issue 740335.",44,data/crawl/squid/hunk_1705.cpp,,,data/crawl/squid/old_hunk_1705.cpp,data/crawl/squid/new_hunk_1705.cpp,5,3,"fatal(""failed to chroot"");",mainSetCwd();,"[""updateLog"", ""removeContent""]","[[""fatal"", ""failed"", ""to"", ""chroot""], [""mainSetCwd""]]",[14299995205023066435],5971,0:00:00
https://github.com/squid-cache/squid/commit/bce61b006f1ea12de90966ae6b7ff88372d905cf,01 Aug 2013,"Add dns_multicast_local to control mDNS operation

Enable admin control over whether mDNS operates or not. Set the default
to OFF due to .arpa reverse-DNS requests causing a rise in traffic from
this feature even on networks without mDNS responders setup.

Also, polish cachemgr idns report to show for queued queries which
resolver type and query the entry is involving. mDNS can cause a queue
to exist as some lookups timeout on the mDNS resolvers.",52,data/crawl/squid/hunk_1693.cpp,,,data/crawl/squid/old_hunk_1693.cpp,data/crawl/squid/new_hunk_1693.cpp,17,19,"storeAppendPrintf(sentry, ""DNS jumbo-grams: not working\n"");","storeAppendPrintf(sentry, ""\nDNS jumbo-grams: not working\n"");","[""updateContent""]","[[""DNS""], [""\\nDNS""]]",[1698993661374556400],5970,0:00:00
https://github.com/squid-cache/squid/commit/73656056cdcface25c015c755e9a3688acd404fc,30 Sep 2013,"Remove COSS

This storage type has been superceded by Rock storage since 3.2.",3034,data/crawl/squid/hunk_1683.cpp,,,data/crawl/squid/old_hunk_1683.cpp,data/crawl/squid/new_hunk_1683.cpp,1049,-1,"fatal(""COSS requires max-size to be set to something other than -1!\n"");",,"[""removeLog""]","[[""fatal"", ""COSS"", ""requires"", ""max"", ""size"", ""to"", ""be"", ""set"", ""to"", ""something"", ""other"", ""than"", ""1"", ""\\n""], []]",[-6478755802956658214],5969,0:00:00
https://github.com/squid-cache/squid/commit/73656056cdcface25c015c755e9a3688acd404fc,30 Sep 2013,"Remove COSS

This storage type has been superceded by Rock storage since 3.2.",3034,data/crawl/squid/hunk_1683.cpp,,,data/crawl/squid/old_hunk_1683.cpp,data/crawl/squid/new_hunk_1683.cpp,1036,-1,"fatal(""storeCossDirParse: invalid size value"");",,"[""removeLog""]","[[""fatal"", ""storeCossDirParse"", ""invalid"", ""size"", ""value""], []]",[27578349261546309526],5968,0:00:00
https://github.com/squid-cache/squid/commit/73656056cdcface25c015c755e9a3688acd404fc,30 Sep 2013,"Remove COSS

This storage type has been superceded by Rock storage since 3.2.",3034,data/crawl/squid/hunk_1683.cpp,,,data/crawl/squid/old_hunk_1683.cpp,data/crawl/squid/new_hunk_1683.cpp,991,-1,"storeAppendPrintf(&sentry, ""\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""&sentry"", ""\\n""], []]",[-9350268740893478495],5967,0:00:00
https://github.com/squid-cache/squid/commit/17852883df926d74fb04fe5d2bbfa281090574a8,01 Oct 2013,"Remove dnsserver and external DNS helper API

The external DNS helper API places limits on Squid DNS lookups per second
low enough to noticably affect the HTTP requests per second which can be
served.

Request for comments about proposed removal 2 years ago produced feedback
stating that the helper was needed for local name resolution. This is
now available since 3.4 mDNS extensions.

A more recent request for reasons for keeping the helper API have
produced only two responses over the period of several months. Both
indicating that the API is no longer necessary for the business cases of
a year or so ago.

As such and because the helper fails to operate sufficiently on several
major operating systems and the API is difficult to maintain it is being
removed as of Squid-3.5.",1269,data/crawl/squid/hunk_1681.cpp,,,data/crawl/squid/old_hunk_1681.cpp,data/crawl/squid/new_hunk_1681.cpp,428,-1,"fprintf(stderr, ""Too many -s options, only %d are allowed\n"", MAXNS);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Too"", ""many"", ""s"", ""options"", ""only"", ""%d"", ""are"", ""allowed\\n"", ""MAXNS""], []]",[11357842607344951248],5966,0:00:00
https://github.com/squid-cache/squid/commit/bd34f258a4b0bc46f2f65ea4b1331881693b9869,03 Apr 1998,"Changed squid/dnsserver communication to single-line replies.  Removed
all the unused cruft.",455,data/crawl/squid/hunk_6521.cpp,,,data/crawl/squid/old_hunk_6521.cpp,data/crawl/squid/new_hunk_6521.cpp,29,-1,"printf(""$alive\n"");",,"[""removeLog""]","[[""printf"", ""alive\\n""], []]",[-8819062403088672437],5965,"2830 days, 0:00:00"
https://github.com/squid-cache/squid/commit/12b91c99f1a92940deca96f1a2cae3eca079324e,02 Dec 2005,"A few changes related to how the ICAP request header is built:

 - Added 'icap_persistent_connections' directive to squid.conf to turn
   on/off ICAP server connection reuse.

 - Renamed 'icap_send_auth_user' directive to 'icap_send_client_username'

 - Removed 'icap_auth_scheme' directive since it is not currently used.

 - Fixed ICAPModXact::makeRequestHeaders() to add X-Client-IP and
   X-Client-Username only when those options are enabled in squid.conf.",71,data/crawl/squid/hunk_4904.cpp,,,data/crawl/squid/old_hunk_4904.cpp,data/crawl/squid/new_hunk_4904.cpp,-1,12,,"buf.Printf(""Connection: close\r\n"");","[""addLog""]","[[], [""buf"", ""Printf"", ""Connection"", ""close\\r\\n""]]",[8698708085008139558],5964,"1438 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fa2301d26b90cbd1298eb7740e8827c7746cd9d2,01 Jan 2014,"Initial Large Rock and Collapsed Forwarding support.

Large Rock: Support disk (and shared memory) caching of responses exceeding
one db slot (or one shared memory page) in size. A single db slot/page size is
still limited to 32KB (smaller values can be configured for disk caches using
the newly added cache_dir slot-size option). Removal of old rock cache dir
(followed by squid-z) is required -- the on-disk db structure has changed.

Collapsed Forwarding: Optionally merge concurrent cachable requests for the
same URI earlier: After the request headers have been parsed (as before), but
now _before_ the response headers have been received. Merging of requests
received by different SMP workers is supported. Controlled by the new
collapsed_forwarding directive in squid.conf. Disabled by default because all
but one of the merged requests have to be delayed (until the response headers
are received) for the merging to work, which may be worse than forwarding all
concurrent requests immediately. The overall feature idea and request
eligibility conditions are based on Collapsed Forwarding in Squid2.


Summary of other important changes (merged branch log contains the details):

* Tightened StoreEntry locking. Split StoreEntry::lock() into ""just lock"" and
  ""update entry reference time"" interfaces, addressing an old XXX.  Improved
  entry lock/unlock debugging. Needs more work.

* Adjusted StoreIOState::write() API to allow callers detect write errors.

* Simplified MemObject::write() API to remove an essentially unused callback.

* Mark client streams that sent everything as STREAM_COMPLETE. The old code
  used STREAM_UNPLANNED_COMPLETE if the completed stream was associated with a
  non-persistent connection, which did not make sense to me and, IIRC, led to
  store entry aborts even though the entries were not damaged in any way.

* mem_hdr::hasContigousContentRange() now returns true for empty ranges.

* Support ""appending"" ReadWriteLock state that can be shared by readers and
  the writer. The writer promises not to update key metadata (except growing
  object size and next pointers) and readers promise to be careful when
  reading growing slices.

* Fixed StoreEntry::mayStartSwapOut() logic to handle terminated swapouts.

* Improved STORE_MEM_CLIENT detection and documented known (and mostly old)
  StoreEntry::storeClientType() problems.

* Removed StoreEntry::hidden_mem_obj hack.

* Polished StoreEntry debugging to report more info, less noise. Use e: prefix.

* Added a script to extract store entry(ies) debugging from cache.log.",6196,data/crawl/squid/hunk_1645.cpp,,,data/crawl/squid/old_hunk_1645.cpp,data/crawl/squid/new_hunk_1645.cpp,-1,28,,"createError(""write"");","[""addLog""]","[[], [""createError"", ""write""]]",[1574950929732431149],5963,0:00:00
https://github.com/squid-cache/squid/commit/fa2301d26b90cbd1298eb7740e8827c7746cd9d2,01 Jan 2014,"Initial Large Rock and Collapsed Forwarding support.

Large Rock: Support disk (and shared memory) caching of responses exceeding
one db slot (or one shared memory page) in size. A single db slot/page size is
still limited to 32KB (smaller values can be configured for disk caches using
the newly added cache_dir slot-size option). Removal of old rock cache dir
(followed by squid-z) is required -- the on-disk db structure has changed.

Collapsed Forwarding: Optionally merge concurrent cachable requests for the
same URI earlier: After the request headers have been parsed (as before), but
now _before_ the response headers have been received. Merging of requests
received by different SMP workers is supported. Controlled by the new
collapsed_forwarding directive in squid.conf. Disabled by default because all
but one of the merged requests have to be delayed (until the response headers
are received) for the merging to work, which may be worse than forwarding all
concurrent requests immediately. The overall feature idea and request
eligibility conditions are based on Collapsed Forwarding in Squid2.


Summary of other important changes (merged branch log contains the details):

* Tightened StoreEntry locking. Split StoreEntry::lock() into ""just lock"" and
  ""update entry reference time"" interfaces, addressing an old XXX.  Improved
  entry lock/unlock debugging. Needs more work.

* Adjusted StoreIOState::write() API to allow callers detect write errors.

* Simplified MemObject::write() API to remove an essentially unused callback.

* Mark client streams that sent everything as STREAM_COMPLETE. The old code
  used STREAM_UNPLANNED_COMPLETE if the completed stream was associated with a
  non-persistent connection, which did not make sense to me and, IIRC, led to
  store entry aborts even though the entries were not damaged in any way.

* mem_hdr::hasContigousContentRange() now returns true for empty ranges.

* Support ""appending"" ReadWriteLock state that can be shared by readers and
  the writer. The writer promises not to update key metadata (except growing
  object size and next pointers) and readers promise to be careful when
  reading growing slices.

* Fixed StoreEntry::mayStartSwapOut() logic to handle terminated swapouts.

* Improved STORE_MEM_CLIENT detection and documented known (and mostly old)
  StoreEntry::storeClientType() problems.

* Removed StoreEntry::hidden_mem_obj hack.

* Polished StoreEntry debugging to report more info, less noise. Use e: prefix.

* Added a script to extract store entry(ies) debugging from cache.log.",6196,data/crawl/squid/hunk_1645.cpp,,,data/crawl/squid/old_hunk_1645.cpp,data/crawl/squid/new_hunk_1645.cpp,30,-1,"fatal(""Rock Store db creation error"");",,"[""removeLog""]","[[""fatal"", ""Rock"", ""Store"", ""db"", ""creation"", ""error""], []]",[1759631197158767042],5962,0:00:00
https://github.com/squid-cache/squid/commit/35a1b223314eddb67b631cb0224d6e03a2360c77,13 Sep 2011,"SMP Caching: Core changes, IPC primitives, Shared memory cache, and Rock Store

Core changes
------------

* Added MemObject::expectedReplySize() and used it instead of object_sz.

When deciding whether an object with a known content length can be
swapped out, do not wait until the object is completely received and its
size (mem_obj->object_sz) becomes known (while asking the store to
recheck in vain with every incoming chunk). Instead, use the known
content length, if any, to make the decision.

This optimizes the common case where the complete object is eventually
received and swapped out, preventing accumulating potentially large
objects in RAM while waiting for the end of the response. Should not
affect objects with unknown content length.

Side-effect1: probably fixes several cases of unknowingly using negative
(unknown) mem_obj->object_sz in calculations. I added a few assertions
to double check some of the remaining object_sz/objectLen() uses.

Side-effect2: When expectedReplySize() is stored on disk as StoreEntry
metadata, it may help to detect truncated entries when the writer
process dies before completing the swapout.


* Removed mem->swapout.memnode in favor of mem->swapout.queue_offset.

The code used swapout.memnode pointer to keep track of the last page
that was swapped out. The code was semi-buggy because it could reset the
pointer to NULL if no new data came in before the call to doPages().
Perhaps the code relied on the assumption that the caller will never
doPages if there is no new data, but I am not sure that assumption was
correct in all cases (it could be that I broke the calling code, of course).

Moreover, the page pointer was kept without any protection from page
disappearing during asynchronous swapout. There were ""Evil hack time""
comments discussing how the page might disappear.

Fortunately, we already have mem->swapout.queue_offset that can be fed
to getBlockContainingLocation to find the page that needs to be swapped
out. There is no need to keep the page pointer around. The
queue_offset-based math is the same so we are not adding any overheads
by using that offset (in fact, we are removing some minor computations).


* Added ""close how?"" parameter to storeClose() and friends.

The old code would follow the same path when closing swapout activity
for an aborted entry and when completing a perfectly healthy swapout. In
non-shared case, that could have been OK because the abort code would
then release the entry, removing any half-written entry from the index
and the disk (but I am not sure that release happened fast enough in
100% of cases).

When the index and disk storage is shared among workers, such
""temporary"" inconsistencies result in truncated responses being
delivered by other workers to the user because once the swapout activity
is closed, other workers can start using the entry.

By adding the ""close how?"" parameter to closing methods we allow the
core and SwapDir-specific code to handle aborted swapouts appropriately.

Since swapin code is ""read only"", we do not currently distinguish
between aborted and fully satisfied readers: The readerGone enum value
applies to both cases. If needed, the SwapDir reading code can make that
distinction by analyzing how much was actually swapped in.


* Moved ""can you store this entry?"" code to virtual SwapDir::canStore().

The old code had some of the tests in SwapDir-specific canStore()
methods and some in storeDirSelect*() methods. This resulted in
inconsistencies, code duplication, and extra calculation overheads.
Making this call virtual allows individual cache_dir types to do custom
access controls.

The same method is used for cache_dir load reporting (if it returns
true). Load management needs more work, but the current code is no worse
than the old one in this aspect, and further improvements are outside
this change scope.


* Minimized from-disk StoreEntry loading/unpacking code duplication.

Moved common (and often rather complex!) code from store modules into
storeRebuildLoadEntry, storeRebuildParseEntry, and storeRebuildKeepEntry.


* Do not set object_sz when the entry is aborted because the true object
size (HTTP reply headers + body) is not known in this case. Setting
object_sz may fool client-side code into believing that the object is
complete.

This addresses an old RBC's complaint.


* When swapout initiation fails, mark swapout decision as
MemObject::SwapOut::swImpossible. This prevents the caller code from trying to
swap out again and again because swap_status becomes SWAPOUT_NONE.

TODO: Consider add SWAPOUT_ERROR, STORE_ERROR, and similar states. It
may solve several problems where the code sees _NONE or _OK and thinks
everything is peachy when in fact there was an error.


* Call haveParsedReplyHeaders() before entry->replaceHttpReply().

HaveParsedReplyHeaders() sets the entry public key and various flags (at 
least). ReplaceHttpReply() packs reply headers, starting swapout process.
It feels natural to adjust the entry _before_ we pack/swap it, but I may be
missing some side-effects here.

The change was necessary because we started calling checkCachable() from
swapoutPossible(). If haveParsedReplyHeaders() is not called before we swap
out checks, the entry will still have the private key and will be declared
impossible to cache.


* Extracted the write-to-store step from StoreEntry::replaceHttpReply().

This allows the caller to set the reply for the entry and then update the
entry and the reply before writing them to store. For example, the server-side
haveParsedReplyHeaders() code needs to set the entry timestamps and make the
entry key public before the entry starts swapping out, but the same code also
needs access to entry->getReply() and such for timestampsSet() and similar
code to work correctly.

TODO: Calls to StoreEntry::replaceHttpReply() do not have to be modified
because replaceHttpReply() does write by default. However, it is likely that
callers other than ServerStateData::setFinalReply() should take advantage of
the new split interface because they call timestampsSet() and such after
replaceHttpReply().


* Moved SwapDir::cur_size and n_disk_objects to specific SwapDirs. Removed
updateSize().  Some cache_dirs maintain their own maps and size statistics,
making the one-size-fits-all SwapDir members inappropriate.

* A new SwapDir public method swappedOut() added. It is called from
storeSwapOutFileClosed() to notify SwapDir that an object was swapped
out.

* Change SwapDir::max_size to bytes, make it protected, use maxSize() instead.

Change SwapDir::cur_size to bytes, make it private, use currentSize() instead.

Store Config.Store.avgObjectSize in bytes to avoid repeated and error-prone
KB<->bytes conversions.


* Change Config.cacheSwap.swapDirs and StoreEntry::store() type to SwapDir.

This allows using SwapDir API without dynamic_cast.


* Always call StoreEntry::abort() instead of setting ENTRY_ABORTED manually.

* Rely on entry->abort() side-effects if ENTRY_ABORTED was set.

* Added or updated comments to better document current code.

* Added operator << for dumping StoreEntry summary into the debugging
log. Needs more work to report more info (and not report yet-unknown info).

* Fixed blocking reads that were sometimes reading from random file offsets.

Core ""disk file"" reading code assumed that if the globally stored disk.offset
matches the desired offset, there is no reason to seek. This was probably done
to reduce seek overhead between consecutive reads. Unfortunately, the disk
writing code did not know about that optimization and left F->disk.offset
unchanged after writing.

This may have worked OK for UFS if it never writes to the file it reads from,
but it does not work for store modules that do both kinds of I/O at different
offsets of the same disk file.

Eventually, implement this optimization correctly or remove disk.offset.


IPC primitives
--------------

To make SMP disk and memory caching non-blocking and correct, worker and
disker processes must asynchronously communicate with each other. We are
adding a collection of classes that support such communication.

At the base of the collection is the AtomicWordT template that uses GCC atomic
primitives such as __sync_add_and_fetch() to perform atomic operations on
integral values in memory shared by multiple Squid kids. AtomicWordT is used
to implement non-blocking shared locks, queues, store tables, and page pools.

To avoid blocking or very long searches, many operations are ""optimistic"" in
nature. For example, it is possible that an atomic store map will refuse to
allocate an entry for two processes even though a blocking implementation
would have allowed one of the processes to get the map slot. We speculate that
such conflict resolution is better than blocking locks when it comes to
caching, especially if the conflicts are rare due to large number of cache
entries, fast operations, and relatively small number of kids.


TODO: Eventually, consider breaking locks left by dead kids.



Shared Memory Cache
-------------------

* Added initial shared memory cache implementation (MemStore).

The shared memory cache keeps its own compact index of cached entries using
extended Ipc::StoreMap class (MemStoreMap). The cache also strives to keep its
Root.get() results out of the store_table except during transit.

Eventually, the non-shared/local memory cache should also be implemented
using a MemStore-like class, I think. This will allow to clearly isolate
local from shared memory cache code.

Allow the user to explicitly disable shared memory caching in SMP mode via
memory_cache_shared to squid.conf. Report whether mem_cache is shared.

Disable shared memory caching by default if atomic operations are not
supported. Prohibit shared memory caching if atomic operations are not
supported.

TODO: Better limits/separation for cache and I/O shared memory pages.
Eventually, support shared memory caching of multi-page entries.


Rock Store
----------

Rock Store uses a single [large] database-style file per cache_dir to store
cached responses and metadata. This part of the design is similar to COSS.
Rock Store does not maintain or rely on swap.state ""log"" for recovery.
Instead, the database is scanned in the background to load entries when Squid
starts. Rock Store maintains its own index of cached entries and avoids global
store_table. All entries must be max-size or smaller.

In SMP mode, each Rock cache_dir is given a dedicated Kid processes called
""disker"". All SMP workers communicate with diskers to store misses and load
hits, using shared memory pages and atomic shared memory queues. Disker blocks
when doing disk I/O but workers do not. Any Diskers:Workers ratio is supported
so that the user can find and configure the optimal number of workers and
diskers for a given number of disks and CPU cores.

In non-SMP mode, should use good old blocking disk I/O, without any diskers,
but this has not been tested recently and probably needs more work.

Feature page: http://wiki.squid-cache.org/Features/RockStore

TODO: Disk rate limit to protect Squid from disk overload. More stats.
Multiple readers? Seek optimization? Remove known max-size requirement?",8765,data/crawl/squid/hunk_2438.cpp,,,data/crawl/squid/old_hunk_2438.cpp,data/crawl/squid/new_hunk_2438.cpp,-1,64,,"storeAppendPrintf(&e, ""Current entries: %""PRId64"" %.2f%%\n"",
                              currentCount(), (100.0 * currentCount() / limit));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Current"", ""entries"", ""%"", ""PRId64"", ""%"", ""2f%%\\n"", ""currentCount"", ""100"", ""0"", ""*"", ""currentCount"", ""/"", ""limit""]]",[14363340019230894414],5961,"420 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fa2301d26b90cbd1298eb7740e8827c7746cd9d2,01 Jan 2014,"Initial Large Rock and Collapsed Forwarding support.

Large Rock: Support disk (and shared memory) caching of responses exceeding
one db slot (or one shared memory page) in size. A single db slot/page size is
still limited to 32KB (smaller values can be configured for disk caches using
the newly added cache_dir slot-size option). Removal of old rock cache dir
(followed by squid-z) is required -- the on-disk db structure has changed.

Collapsed Forwarding: Optionally merge concurrent cachable requests for the
same URI earlier: After the request headers have been parsed (as before), but
now _before_ the response headers have been received. Merging of requests
received by different SMP workers is supported. Controlled by the new
collapsed_forwarding directive in squid.conf. Disabled by default because all
but one of the merged requests have to be delayed (until the response headers
are received) for the merging to work, which may be worse than forwarding all
concurrent requests immediately. The overall feature idea and request
eligibility conditions are based on Collapsed Forwarding in Squid2.


Summary of other important changes (merged branch log contains the details):

* Tightened StoreEntry locking. Split StoreEntry::lock() into ""just lock"" and
  ""update entry reference time"" interfaces, addressing an old XXX.  Improved
  entry lock/unlock debugging. Needs more work.

* Adjusted StoreIOState::write() API to allow callers detect write errors.

* Simplified MemObject::write() API to remove an essentially unused callback.

* Mark client streams that sent everything as STREAM_COMPLETE. The old code
  used STREAM_UNPLANNED_COMPLETE if the completed stream was associated with a
  non-persistent connection, which did not make sense to me and, IIRC, led to
  store entry aborts even though the entries were not damaged in any way.

* mem_hdr::hasContigousContentRange() now returns true for empty ranges.

* Support ""appending"" ReadWriteLock state that can be shared by readers and
  the writer. The writer promises not to update key metadata (except growing
  object size and next pointers) and readers promise to be careful when
  reading growing slices.

* Fixed StoreEntry::mayStartSwapOut() logic to handle terminated swapouts.

* Improved STORE_MEM_CLIENT detection and documented known (and mostly old)
  StoreEntry::storeClientType() problems.

* Removed StoreEntry::hidden_mem_obj hack.

* Polished StoreEntry debugging to report more info, less noise. Use e: prefix.

* Added a script to extract store entry(ies) debugging from cache.log.",6196,data/crawl/squid/hunk_1647.cpp,,,data/crawl/squid/old_hunk_1647.cpp,data/crawl/squid/new_hunk_1647.cpp,-1,6,,"storeAppendPrintf(&e, ""Used slots:      %9d %.2f%%\n"",
                                  usedSlots, (100.0 * usedSlots / limit));","[""addLog""]","[[], [""storeAppendPrintf"", ""&e"", ""Used"", ""slots"", ""%9d"", ""%"", ""2f%%\\n"", ""usedSlots"", ""100"", ""0"", ""*"", ""usedSlots"", ""/"", ""limit""]]",[-8376104729506686106],5960,0:00:00
https://github.com/squid-cache/squid/commit/06260232598e33ad77118fcdeda33717173fc441,13 Feb 2014,Bug 4026: SSL and adaptation_access does not handle aborted connections,207,data/crawl/squid/hunk_1610.cpp,,,data/crawl/squid/old_hunk_1610.cpp,data/crawl/squid/new_hunk_1610.cpp,66,60,"fatalf(""parse_wccp2_service_ports: port value '%s' isn't valid (1..65535)\n"", port);","fatalf(""parse_wccp2_service_ports: port value '%s' isn't valid (1..65535)\n"", tmp);","[""updateVariable""]","[[""port""], [""tmp""]]",[-5637794708503497213],5959,0:00:00
https://github.com/squid-cache/squid/commit/95c25f6682acfdbb45b3056bc8aa247e3fc4c88e,16 Feb 2014,"squidclient: support verbosity levels

This makes the -v option repeatable. By default no debug is displayed.
Each time -v is repeated the level of debug message verbosity is raised.

Three levels of verbosity are currently defined:
 0 - no output except ERROR messages.
 1 - display HTTP request sent
 2 - display actions taken connecting to server",105,data/crawl/squid/hunk_1604.cpp,,,data/crawl/squid/old_hunk_1604.cpp,data/crawl/squid/new_hunk_1604.cpp,62,51,"fprintf(stderr, ""Connected to: %s (%s)\n"", hostname, iaddr.toStr(ipbuf, MAX_IPSTRLEN));","debugVerbose(2, ""Connected to: "" << hostname << "" ("" << iaddr << "")"");","[""moveContent"", ""updateLog"", ""moveVariable"", ""removeVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""\\n"", ""toStr"", ""ipbuf"", ""MAX_IPSTRLEN""], [""debugVerbose"", ""2""]]",[12372780201389925814],5958,0:00:00
https://github.com/squid-cache/squid/commit/95c25f6682acfdbb45b3056bc8aa247e3fc4c88e,16 Feb 2014,"squidclient: support verbosity levels

This makes the -v option repeatable. By default no debug is displayed.
Each time -v is repeated the level of debug message verbosity is raised.

Three levels of verbosity are currently defined:
 0 - no output except ERROR messages.
 1 - display HTTP request sent
 2 - display actions taken connecting to server",105,data/crawl/squid/hunk_1604.cpp,,,data/crawl/squid/old_hunk_1604.cpp,data/crawl/squid/new_hunk_1604.cpp,37,-1,"fprintf(stderr, ""client: ERROR: Cannot resolve %s: Host unknown.\n"", hostname);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""client"", ""ERROR"", ""Cannot"", ""resolve"", ""%s"", ""Host"", ""unknown"", ""\\n"", ""hostname""], []]",[-14961183109610632870],5957,0:00:00
https://github.com/squid-cache/squid/commit/95ba9ef030988980219c23e3f95abdf30563df99,16 Mar 2014,Remove XMALLOC_TRACE and all references to sbrk(2),348,data/crawl/squid/hunk_1584.cpp,,,data/crawl/squid/old_hunk_1584.cpp,data/crawl/squid/new_hunk_1584.cpp,5,-1,"storeAppendPrintf(sentry, ""\tProcess Data Segment Size via sbrk(): %.0f KB\n"",
                      stats.proc_data_seg / 1024);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tProcess"", ""Data"", ""Segment"", ""Size"", ""via"", ""sbrk"", ""%"", ""0f"", ""KB\\n"", ""stats"", ""proc_data_seg"", ""/"", ""1024""], []]",[4361111679131633204],5956,12:00:00
https://github.com/squid-cache/squid/commit/95ba9ef030988980219c23e3f95abdf30563df99,16 Mar 2014,Remove XMALLOC_TRACE and all references to sbrk(2),348,data/crawl/squid/hunk_1583.cpp,,,data/crawl/squid/old_hunk_1583.cpp,data/crawl/squid/new_hunk_1583.cpp,7,-1,"fatal(""Need to configure --enable-xmalloc-debug-trace to use -m option"");",,"[""removeLog""]","[[""fatal"", ""Need"", ""to"", ""configure"", ""enable"", ""xmalloc"", ""debug"", ""trace"", ""to"", ""use"", ""m"", ""option""], []]",[-8377785382164987977],5955,12:00:00
https://github.com/squid-cache/squid/commit/ec2436ff0a68ced694ec8e68f04f9cbfce2e7596,18 Jan 2003,templatify arrays,375,data/crawl/squid/hunk_5447.cpp,,,data/crawl/squid/old_hunk_5447.cpp,data/crawl/squid/new_hunk_5447.cpp,-1,197,,"fatal (""domain error"");","[""addLog""]","[[], [""fatal"", ""domain"", ""error""]]",[11742947046656841780],5954,"2038 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,60,-1,"fprintf(debug_log, ""\tbytes used in maintaining the free tree:\t%d\n"",
            mp.treeoverhead);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tbytes"", ""used"", ""in"", ""maintaining"", ""the"", ""free"", ""tree"", ""\\t%d\\n"", ""mp"", ""treeoverhead""], []]",[4437604774626414335],5953,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,57,-1,"fprintf(debug_log, ""\tnumber of ordinary blocks allocated:\t%d\n"",
            mp.allocated);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tnumber"", ""of"", ""ordinary"", ""blocks"", ""allocated"", ""\\t%d\\n"", ""mp"", ""allocated""], []]",[8680093383938280547],5952,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,54,-1,"fprintf(debug_log, ""\tspace (including overhead) allocated in ord. blks:\t%d\n"",
            mp.uordbytes);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tspace"", ""including"", ""overhead"", ""allocated"", ""in"", ""ord"", ""blks"", ""\\t%d\\n"", ""mp"", ""uordbytes""], []]",[-1626640044612799957],5951,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,51,-1,"fprintf(debug_log, ""\tsmall block rounding factor:\t%d\n"",
            mp.grain);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tsmall"", ""block"", ""rounding"", ""factor"", ""\\t%d\\n"", ""mp"", ""grain""], []]",[7646364347420526518],5950,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,48,-1,"fprintf(debug_log, ""\tnumber of small blocks in a holding block:\t%d\n"",
            mp.nlblks);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tnumber"", ""of"", ""small"", ""blocks"", ""in"", ""a"", ""holding"", ""block"", ""\\t%d\\n"", ""mp"", ""nlblks""], []]",[32449563171746089574],5949,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,45,-1,"fprintf(debug_log, ""\tmax size of small blocks:\t%d\n"",
            mp.mxfast);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tmax"", ""size"", ""of"", ""small"", ""blocks"", ""\\t%d\\n"", ""mp"", ""mxfast""], []]",[35088113408219765843],5948,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,40,-1,"fprintf(debug_log, ""\tTotal free:            %6d KB %d%%\n"",
            t >> 10, Math::intPercent(t, mp.arena));",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tTotal"", ""free"", ""%6d"", ""KB"", ""%d%%\\n"", ""t"", ""10"", ""Math"", ""intPercent"", ""t"", ""mp"", ""arena""], []]",[26563108913685024918],5947,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,35,-1,"fprintf(debug_log, ""\tTotal in use:          %6d KB %d%%\n"",
            t >> 10, Math::intPercent(t, mp.arena));",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tTotal"", ""in"", ""use"", ""%6d"", ""KB"", ""%d%%\\n"", ""t"", ""10"", ""Math"", ""intPercent"", ""t"", ""mp"", ""arena""], []]",[28661396896443626667],5946,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,30,-1,"fprintf(debug_log, ""\tFree Ordinary blocks:  %6ld KB\n"",
            (long)mp.fordblks >> 10);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tFree"", ""Ordinary"", ""blocks"", ""%6ld"", ""KB\\n"", ""long"", ""mp"", ""fordblks"", ""10""], []]",[-3696458613398606106],5945,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,27,-1,"fprintf(debug_log, ""\tFree Small blocks:     %6ld KB\n"",
            (long)mp.fsmblks >> 10);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tFree"", ""Small"", ""blocks"", ""%6ld"", ""KB\\n"", ""long"", ""mp"", ""fsmblks"", ""10""], []]",[-851347067915971090],5944,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,24,-1,"fprintf(debug_log, ""\tHolding blocks:        %6ld KB %6ld blks\n"",
            (long)mp.hblkhd >> 10, (long)mp.hblks);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tHolding"", ""blocks"", ""%6ld"", ""KB"", ""%6ld"", ""blks\\n"", ""long"", ""mp"", ""hblkhd"", ""10"", ""long"", ""mp"", ""hblks""], []]",[-16637744034500243513],5943,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,21,-1,"fprintf(debug_log, ""\tSmall blocks:          %6ld KB %6ld blks\n"",
            (long)mp.usmblks >> 10, (long)mp.smblks);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tSmall"", ""blocks"", ""%6ld"", ""KB"", ""%6ld"", ""blks\\n"", ""long"", ""mp"", ""usmblks"", ""10"", ""long"", ""mp"", ""smblks""], []]",[-11182242598704048855],5942,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,18,-1,"fprintf(debug_log, ""\tOrdinary blocks:       %6ld KB %6ld blks\n"",
            (long)mp.uordblks >> 10, (long)mp.ordblks);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\tOrdinary"", ""blocks"", ""%6ld"", ""KB"", ""%6ld"", ""blks\\n"", ""long"", ""mp"", ""uordblks"", ""10"", ""long"", ""mp"", ""ordblks""], []]",[-25666444452083495121],5941,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,15,-1,"fprintf(debug_log, ""\ttotal space in arena:  %6ld KB\n"",
            (long)mp.arena >> 10);",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""\\ttotal"", ""space"", ""in"", ""arena"", ""%6ld"", ""KB\\n"", ""long"", ""mp"", ""arena"", ""10""], []]",[-8169537094661904368],5940,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1568.cpp,,,data/crawl/squid/old_hunk_1568.cpp,data/crawl/squid/new_hunk_1568.cpp,13,-1,"fprintf(debug_log, ""Memory usage for "" APP_SHORTNAME "" via mallinfo():\n"");",,"[""removeLog""]","[[""fprintf"", ""debug_log"", ""Memory"", ""usage"", ""for"", ""APP_SHORTNAME"", ""via"", ""mallinfo"", ""\\n""], []]",[15983539200800316853],5939,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,84,-1,"storeAppendPrintf(sentry, ""\tmemPool unaccounted:   %6.0f KB %3.0f%%\n"",
                          (t - stats.mem_pool_allocated) / 1024,
                          Math::doublePercent(iFree, t));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tmemPool"", ""unaccounted"", ""%6"", ""0f"", ""KB"", ""%3"", ""0f%%\\n"", ""t"", ""stats"", ""mem_pool_allocated"", ""/"", ""1024"", ""Math"", ""doublePercent"", ""iFree"", ""t""], []]",[-23117677697911464902],5938,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,79,-1,"storeAppendPrintf(sentry, ""\tmemPool accounted:     %6.0f KB %3.0f%%\n"",
                          stats.mem_pool_allocated / 1024,
                          Math::doublePercent(stats.mem_pool_allocated, t));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tmemPool"", ""accounted"", ""%6"", ""0f"", ""KB"", ""%3"", ""0f%%\\n"", ""stats"", ""mem_pool_allocated"", ""/"", ""1024"", ""Math"", ""doublePercent"", ""stats"", ""mem_pool_allocated"", ""t""], []]",[-17143081602212288408],5937,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,65,-1,"storeAppendPrintf(sentry, ""\tTotal accounted:       %6.0f KB %3.0f%%\n"",
                      stats.total_accounted / 1024, Math::doublePercent(stats.total_accounted, t));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tTotal"", ""accounted"", ""%6"", ""0f"", ""KB"", ""%3"", ""0f%%\\n"", ""stats"", ""total_accounted"", ""/"", ""1024"", ""Math"", ""doublePercent"", ""stats"", ""total_accounted"", ""t""], []]",[15429019081346183167],5936,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,55,-1,"storeAppendPrintf(sentry, ""\tbytes used in maintaining the free tree:\t%.0f\n"",
                      stats.mp_treeoverhead);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tbytes"", ""used"", ""in"", ""maintaining"", ""the"", ""free"", ""tree"", ""\\t%"", ""0f\\n"", ""stats"", ""mp_treeoverhead""], []]",[-11142334043727656599],5935,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,52,-1,"storeAppendPrintf(sentry, ""\tnumber of ordinary blocks allocated:\t%.0f\n"",
                      stats.mp_allocated);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tnumber"", ""of"", ""ordinary"", ""blocks"", ""allocated"", ""\\t%"", ""0f\\n"", ""stats"", ""mp_allocated""], []]",[-9950130031576322525],5934,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,49,-1,"storeAppendPrintf(sentry, ""\tspace (including overhead) allocated in ord. blks:\t%.0f\n""
                      ,stats.mp_uordbytes);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tspace"", ""including"", ""overhead"", ""allocated"", ""in"", ""ord"", ""blks"", ""\\t%"", ""0f\\n"", ""stats"", ""mp_uordbytes""], []]",[-26557395624662448517],5933,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,47,-1,"storeAppendPrintf(sentry, ""\tsmall block rounding factor:\t%.0f\n"", stats.mp_grain);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tsmall"", ""block"", ""rounding"", ""factor"", ""\\t%"", ""0f\\n"", ""stats"", ""mp_grain""], []]",[-20624358704110470222],5932,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,44,-1,"storeAppendPrintf(sentry, ""\tnumber of small blocks in a holding block:\t%.0f\n"",
                      stats.mp_nlblks);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tnumber"", ""of"", ""small"", ""blocks"", ""in"", ""a"", ""holding"", ""block"", ""\\t%"", ""0f\\n"", ""stats"", ""mp_nlblks""], []]",[13964139412169167520],5931,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,42,-1,"storeAppendPrintf(sentry, ""\tmax size of small blocks:\t%.0f\n"", stats.mp_mxfast);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tmax"", ""size"", ""of"", ""small"", ""blocks"", ""\\t%"", ""0f\\n"", ""stats"", ""mp_mxfast""], []]",[10009231251425043875],5930,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,37,-1,"storeAppendPrintf(sentry, ""\tTotal size:            %6.0f KB\n"",
                      t / 1024);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tTotal"", ""size"", ""%6"", ""0f"", ""KB\\n"", ""t"", ""/"", ""1024""], []]",[574638977980686102],5929,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,32,-1,"storeAppendPrintf(sentry, ""\tTotal free:            %6.0f KB %.0f%%\n"",
                      t / 1024, Math::doublePercent(t, stats.mp_arena + stats.mp_hblkhd));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tTotal"", ""free"", ""%6"", ""0f"", ""KB"", ""%"", ""0f%%\\n"", ""t"", ""/"", ""1024"", ""Math"", ""doublePercent"", ""t"", ""stats"", ""mp_arena"", ""stats"", ""mp_hblkhd""], []]",[9786769578400036968],5928,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,27,-1,"storeAppendPrintf(sentry, ""\tTotal in use:          %6.0f KB %.0f%%\n"",
                      t / 1024, Math::doublePercent(t, stats.mp_arena + stats.mp_hblkhd));",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tTotal"", ""in"", ""use"", ""%6"", ""0f"", ""KB"", ""%"", ""0f%%\\n"", ""t"", ""/"", ""1024"", ""Math"", ""doublePercent"", ""t"", ""stats"", ""mp_arena"", ""stats"", ""mp_hblkhd""], []]",[11885057561158638717],5927,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,22,-1,"storeAppendPrintf(sentry, ""\tFree Ordinary blocks:  %6.0f KB\n"",
                      stats.mp_fordblks / 1024);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tFree"", ""Ordinary"", ""blocks"", ""%6"", ""0f"", ""KB\\n"", ""stats"", ""mp_fordblks"", ""/"", ""1024""], []]",[-10150840200879831285],5926,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,19,-1,"storeAppendPrintf(sentry, ""\tFree Small blocks:     %6.0f KB\n"",
                      stats.mp_fsmblks / 1024);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tFree"", ""Small"", ""blocks"", ""%6"", ""0f"", ""KB\\n"", ""stats"", ""mp_fsmblks"", ""/"", ""1024""], []]",[-3787712041626260371],5925,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,16,-1,"storeAppendPrintf(sentry, ""\tHolding blocks:        %6.0f KB %6.0f blks\n"",
                      stats.mp_hblkhd / 1024, stats.mp_hblks);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tHolding"", ""blocks"", ""%6"", ""0f"", ""KB"", ""%6"", ""0f"", ""blks\\n"", ""stats"", ""mp_hblkhd"", ""/"", ""1024"", ""stats"", ""mp_hblks""], []]",[-3058022245175031284],5924,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,13,-1,"storeAppendPrintf(sentry, ""\tSmall blocks:          %6.0f KB %6.0f blks\n"",
                      stats.mp_usmblks / 1024, stats.mp_smblks);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tSmall"", ""blocks"", ""%6"", ""0f"", ""KB"", ""%6"", ""0f"", ""blks\\n"", ""stats"", ""mp_usmblks"", ""/"", ""1024"", ""stats"", ""mp_smblks""], []]",[-12361897320007719158],5923,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,10,-1,"storeAppendPrintf(sentry, ""\tOrdinary blocks:       %6.0f KB %6.0f blks\n"",
                      stats.mp_uordblks / 1024, stats.mp_ordblks);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tOrdinary"", ""blocks"", ""%6"", ""0f"", ""KB"", ""%6"", ""0f"", ""blks\\n"", ""stats"", ""mp_uordblks"", ""/"", ""1024"", ""stats"", ""mp_ordblks""], []]",[-6027658247339076144],5922,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,7,-1,"storeAppendPrintf(sentry, ""\tTotal space in arena:  %6.0f KB\n"",
                      stats.mp_arena / 1024);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\tTotal"", ""space"", ""in"", ""arena"", ""%6"", ""0f"", ""KB\\n"", ""stats"", ""mp_arena"", ""/"", ""1024""], []]",[-11412024203849660947],5921,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/4572073a324773cc5fe7dc4057d3eabb5dce45d1,17 Mar 2014,Remove all code referring to mallinfo(3),271,data/crawl/squid/hunk_1567.cpp,,,data/crawl/squid/old_hunk_1567.cpp,data/crawl/squid/new_hunk_1567.cpp,5,-1,"storeAppendPrintf(sentry, ""Memory usage for %s via mallinfo():\n"",APP_SHORTNAME);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Memory"", ""usage"", ""for"", ""%s"", ""via"", ""mallinfo"", ""\\n"", ""APP_SHORTNAME""], []]",[3650913822186346232],5920,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/e72876256bfa7ef6d4060947ce08b31cd505a369,07 Mar 2014,Convert ConnStateData::In::buf to an SBuf,126,data/crawl/squid/hunk_1585.cpp,,,data/crawl/squid/old_hunk_1585.cpp,data/crawl/squid/new_hunk_1585.cpp,3,3,"storeAppendPrintf(s, ""\tin: buf %p, offset %ld, size %ld\n"",
                              conn->in.buf, (long int) conn->in.notYetUsed, (long int) conn->in.allocatedSize);","storeAppendPrintf(s, ""\tin: buf %p, used %ld, free %ld\n"",
                              conn->in.buf.c_str(), (long int) conn->in.buf.length(), (long int) conn->in.buf.spaceSize());","[""updateVariable"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""offset"", ""size"", ""notYetUsed"", ""allocatedSize""], [""used"", ""free"", ""c_str"", ""buf"", ""length"", ""buf"", ""spaceSize""]]",[11759551581990471576],5919,"8 days, 12:00:00"
https://github.com/squid-cache/squid/commit/dfad5100f30862632628277b0860e8c7f57f33b3,12 Apr 2014,More conversions; now builds,87,data/crawl/squid/hunk_1541.cpp,,,data/crawl/squid/old_hunk_1541.cpp,data/crawl/squid/new_hunk_1541.cpp,14,12,"mb.Printf("" %s"", arg->key);","s.Printf("" %s"", arg->key);","[""updateLog""]","[[""mb""], [""s""]]",[-13952069101081717],5918,0:00:00
https://github.com/squid-cache/squid/commit/dfad5100f30862632628277b0860e8c7f57f33b3,12 Apr 2014,More conversions; now builds,87,data/crawl/squid/hunk_1541.cpp,,,data/crawl/squid/old_hunk_1541.cpp,data/crawl/squid/new_hunk_1541.cpp,11,8,"mb.Printf(""%s"", acl->def->name);",(SBuf(acl->def->name);,"[""addLog"", ""removeContent"", ""removeLog""]","[[""mb"", ""Printf"", ""%s""], [""SBuf""]]",[-9096470574643612590],5917,0:00:00
https://github.com/squid-cache/squid/commit/dfad5100f30862632628277b0860e8c7f57f33b3,12 Apr 2014,More conversions; now builds,87,data/crawl/squid/hunk_1539.cpp,,,data/crawl/squid/old_hunk_1539.cpp,data/crawl/squid/new_hunk_1539.cpp,11,7,"storeAppendPrintf(entry, ""%s "", word->key);","entry->append(i->rawContent(), i->length());","[""addLog"", ""updateVariable"", ""moveVariable"", ""removeVariable"", ""removeContent"", ""addVariable"", ""removeLog""]","[[""storeAppendPrintf"", ""%s"", ""word"", ""key""], [""append"", ""i"", ""rawContent"", ""i"", ""length""]]",[-3565010422423315136],5916,0:00:00
https://github.com/squid-cache/squid/commit/9b859d6f6217cd95f114d184facebc4015b0ea19,12 Apr 2014,"Interim. Remove useless wordlist.h and SBufList.h includes, more SBufList conversions",122,data/crawl/squid/hunk_1542.cpp,,,data/crawl/squid/old_hunk_1542.cpp,data/crawl/squid/new_hunk_1542.cpp,-1,11,,"s.Printf(""%d"", limit);","[""addLog""]","[[], [""s"", ""Printf"", ""%d"", ""limit""]]",[6998163688246880198],5915,0:00:00
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/hunk_1546.cpp,,,data/crawl/squid/old_hunk_1546.cpp,data/crawl/squid/new_hunk_1546.cpp,-1,16,,"sb.Printf(""%d-%d"", element.start, element.end-1);","[""addLog""]","[[], [""sb"", ""Printf"", ""%d"", ""%d"", ""element"", ""start"", ""element"", ""end"", ""1""]]",[-8663878316470563323],5914,12:00:00
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/hunk_1546.cpp,,,data/crawl/squid/old_hunk_1546.cpp,data/crawl/squid/new_hunk_1546.cpp,-1,14,,"sb.Printf(""%d"", element.start);","[""addLog""]","[[], [""sb"", ""Printf"", ""%d"", ""element"", ""start""]]",[1986732946095713913],5913,12:00:00
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/hunk_1545.cpp,,,data/crawl/squid/old_hunk_1545.cpp,data/crawl/squid/new_hunk_1545.cpp,-1,12,,"rv.Printf(""%d-%d"", status1, status2);","[""addLog""]","[[], [""rv"", ""Printf"", ""%d"", ""%d"", ""status1"", ""status2""]]",[-7082387250247571946],5912,12:00:00
https://github.com/squid-cache/squid/commit/8966008ba2d61288cc91c9b7e201fddeaf520552,11 Apr 2014,Interim. Refactor ACL::dump to SBufList instead of wordlist*,242,data/crawl/squid/hunk_1544.cpp,,,data/crawl/squid/old_hunk_1544.cpp,data/crawl/squid/new_hunk_1544.cpp,-1,12,,"s.Printf(""%d"", ldata->element);","[""addLog""]","[[], [""s"", ""Printf"", ""%d"", ""ldata"", ""element""]]",[4840519784852425282],5911,12:00:00
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1375.cpp,,,data/crawl/squid/old_hunk_1375.cpp,data/crawl/squid/new_hunk_1375.cpp,14,9,"storeAppendPrintf(entry, ""\n%s %s keep_alive %s\n"", name, ""ntlm"", keep_alive ? ""on"" : ""off"");","storeAppendPrintf(entry, ""%s ntlm keep_alive %s\n"", name, keep_alive ? ""on"" : ""off"");","[""updateContent"", ""removeContent""]","[[""\\n%s""], []]",[5161623540654415274],5910,0:00:00
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1345.cpp,,,data/crawl/squid/old_hunk_1345.cpp,data/crawl/squid/new_hunk_1345.cpp,9,9,"storeAppendPrintf(sentry,""Service Name: %s\n"", service_name);",SQUIDSBUFPRINT(service_name);,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""storeAppendPrintf"", ""sentry"", ""Service"", ""Name"", ""%s\\n""], [""SQUIDSBUFPRINT""]]",[-13055689665980448312],5909,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1345.cpp,,,data/crawl/squid/old_hunk_1345.cpp,data/crawl/squid/new_hunk_1345.cpp,3,3,"storeAppendPrintf(sentry,""\nRunning as %s Windows System Service on %s\n"",
                          Service_name, WIN32_OS_string);","storeAppendPrintf(sentry,""\nRunning as "" SQUIDSBUFPH "" Windows System Service on %s\n"",
                          SQUIDBUFPRINT(service_name), WIN32_OS_string);","[""updateVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""%s"", ""Service_name""], [""SQUIDSBUFPH"", ""SQUIDBUFPRINT"", ""service_name""]]",[13138555306269701660],5908,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1344.cpp,,,data/crawl/squid/old_hunk_1344.cpp,data/crawl/squid/new_hunk_1344.cpp,3,3,"printf(""Service Name: %s\n"", service_name);",SQUIDSBUFPRINT(service_name);,"[""updateLog"", ""removeContent""]","[[""printf"", ""Service"", ""Name"", ""%s\\n""], [""SQUIDSBUFPRINT""]]",[-14224284335821252037],5907,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1343.cpp,,,data/crawl/squid/old_hunk_1343.cpp,data/crawl/squid/new_hunk_1343.cpp,-1,13,,"fatal(""A service name is required for the -n option"");","[""addLog""]","[[], [""fatal"", ""A"", ""service"", ""name"", ""is"", ""required"", ""for"", ""the"", ""n"", ""option""]]",[-16682936928836781457],5906,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1343.cpp,,,data/crawl/squid/old_hunk_1343.cpp,data/crawl/squid/new_hunk_1343.cpp,-1,10,,"fatalf(""Service name (-n option) must be limited to 32 characters but got %u"", service_name.length());","[""addLog""]","[[], [""fatalf"", ""Service"", ""name"", ""n"", ""option"", ""must"", ""be"", ""limited"", ""to"", ""32"", ""characters"", ""but"", ""got"", ""%u"", ""service_name"", ""length""]]",[10065668742628401412],5905,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1343.cpp,,,data/crawl/squid/old_hunk_1343.cpp,data/crawl/squid/new_hunk_1343.cpp,-1,8,,"fatalf(""Expected alphanumeric service name for the -n option but got: "" SQUIDSBUFPH, SQUIDSBUFPRINT(service_name));","[""addLog""]","[[], [""fatalf"", ""Expected"", ""alphanumeric"", ""service"", ""name"", ""for"", ""the"", ""n"", ""option"", ""but"", ""got"", ""SQUIDSBUFPH"", ""SQUIDSBUFPRINT"", ""service_name""]]",[20872305973606847936],5904,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1375.cpp,,,data/crawl/squid/old_hunk_1375.cpp,data/crawl/squid/new_hunk_1375.cpp,7,-1,"storeAppendPrintf(entry, ""%s %s"", name, ""ntlm"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""name"", ""ntlm""], []]",[4410757366150936668],5903,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d1f3d8f885784c89a822c35ddf6537aab3a3b925,06 Aug 2014,merge from trunk r13526,34418,data/crawl/squid/hunk_1291.cpp,,,data/crawl/squid/old_hunk_1291.cpp,data/crawl/squid/new_hunk_1291.cpp,16,9,"storeAppendPrintf(entry, ""%s %s keep_alive %s\n"", name, ""ntlm"", keep_alive ? ""on"" : ""off"");","storeAppendPrintf(entry, ""%s ntlm keep_alive %s\n"", name, keep_alive ? ""on"" : ""off"");","[""updateContent"", ""removeContent""]","[[""%s""], []]",[-4736028453042782],5902,0:00:00
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1374.cpp,,,data/crawl/squid/old_hunk_1374.cpp,data/crawl/squid/new_hunk_1374.cpp,7,-1,"storeAppendPrintf(entry, ""%s %s"", name, ""negotiate"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""name"", ""negotiate""], []]",[3575485793157778682],5901,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ec980001a1ef8e8c98b57557835c10a223433942,31 May 2014,"Cleanup: de-duplicate auth_param realm configuration

Move realm parse and config dump logics to Auth::Config base object.
This de-duplicates Basic, Digest (and future schemes ie Bearer) config
processing code.  Also makes realm available to NTLM and Negotiate
schemes, although at present it remains unused by those schemes.

Also, convert the realm parameter string to an SBuf. Removing the need
for some memory maintenance code.",63,data/crawl/squid/hunk_1380.cpp,,,data/crawl/squid/old_hunk_1380.cpp,data/crawl/squid/new_hunk_1380.cpp,8,8,"httpHeaderPutStrf(&rep->header, hdrType, ""Digest realm=\""%s\"", nonce=\""%s\"", qop=\""%s\"", stale=%s"", digestAuthRealm, authenticateDigestNonceNonceb64(nonce), QOP_AUTH, stale ? ""true"" : ""false"");","httpHeaderPutStrf(&rep->header, hdrType, ""Digest realm=\"""" SQUIDSBUFPH ""\"", nonce=\""%s\"", qop=\""%s\"", stale=%s"",
                      SQUIDSBUFPRINT(realm), authenticateDigestNonceNonceb64(nonce), QOP_AUTH, stale ? ""true"" : ""false"");","[""updateVariable"", ""addContent"", ""updateContent"", ""addVariable""]","[[""%s\\"", ""digestAuthRealm""], [""SQUIDSBUFPH"", ""\\"", ""SQUIDSBUFPRINT"", ""realm""]]",[-2228081973403018496],5900,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1373.cpp,,,data/crawl/squid/old_hunk_1373.cpp,data/crawl/squid/new_hunk_1373.cpp,8,13,"storeAppendPrintf(entry, ""%s %s"", name, ""digest"");","storeAppendPrintf(entry, ""%s digest utf8 %s\n"", name, utf8 ? ""on"" : ""off"");","[""moveContent"", ""updateContent"", ""addContent"", ""addVariable""]","[[""%s""], [""utf8"", ""%s\\n"", ""utf8"", ""on"", ""off""]]",[23226950631263767211],5899,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1372.cpp,,,data/crawl/squid/old_hunk_1372.cpp,data/crawl/squid/new_hunk_1372.cpp,7,-1,"storeAppendPrintf(entry, ""%s %s"", name, ""basic"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""name"", ""basic""], []]",[8766986006470311312],5898,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ec980001a1ef8e8c98b57557835c10a223433942,31 May 2014,"Cleanup: de-duplicate auth_param realm configuration

Move realm parse and config dump logics to Auth::Config base object.
This de-duplicates Basic, Digest (and future schemes ie Bearer) config
processing code.  Also makes realm available to NTLM and Negotiate
schemes, although at present it remains unused by those schemes.

Also, convert the realm parameter string to an SBuf. Removing the need
for some memory maintenance code.",63,data/crawl/squid/hunk_1377.cpp,,,data/crawl/squid/old_hunk_1377.cpp,data/crawl/squid/new_hunk_1377.cpp,4,4,"httpHeaderPutStrf(&rep->header, hdrType, ""Basic realm=\""%s\"""", basicAuthRealm);","httpHeaderPutStrf(&rep->header, hdrType, ""Basic realm=\"""" SQUIDSBUFPH ""\"""", SQUIDSBUFPRINT(realm));","[""updateVariable"", ""updateContent"", ""addContent"", ""addVariable""]","[[""%s\\"", ""basicAuthRealm""], [""SQUIDSBUFPH"", ""\\"", ""SQUIDSBUFPRINT"", ""realm""]]",[-1986401751729014183],5897,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ec980001a1ef8e8c98b57557835c10a223433942,31 May 2014,"Cleanup: de-duplicate auth_param realm configuration

Move realm parse and config dump logics to Auth::Config base object.
This de-duplicates Basic, Digest (and future schemes ie Bearer) config
processing code.  Also makes realm available to NTLM and Negotiate
schemes, although at present it remains unused by those schemes.

Also, convert the realm parameter string to an SBuf. Removing the need
for some memory maintenance code.",63,data/crawl/squid/hunk_1376.cpp,,,data/crawl/squid/old_hunk_1376.cpp,data/crawl/squid/new_hunk_1376.cpp,-1,3,,"storeAppendPrintf(entry, ""%s %s realm "" SQUIDSBUFPH ""\n"", name, scheme->type(), SQUIDSBUFPRINT(realm));","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""realm"", ""SQUIDSBUFPH"", ""\\n"", ""name"", ""scheme"", ""type"", ""SQUIDSBUFPRINT"", ""realm""]]",[-11146865452651975138],5896,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3616c90cbfa0c2dac5a985c4c406df55f7caa89a,31 May 2014,"Cleanup: de-duplicate auth_param program parameter code

Moves the ""program"" parse and dump code into Auth::Config.

Also, changes API to Auth::Config::dump() to not dump any config settings
for schemes which are not configured with a ""program"". Including scheme
specific settings.

Also, fixes missing Digest ""utf8"" parameter in config dump.",119,data/crawl/squid/hunk_1370.cpp,,,data/crawl/squid/old_hunk_1370.cpp,data/crawl/squid/new_hunk_1370.cpp,-1,10,,"storeAppendPrintf(entry, ""%s %s"", name, scheme->type());","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%s"", ""name"", ""scheme"", ""type""]]",[-2156865728530222672],5895,"33 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1341.cpp,,,data/crawl/squid/old_hunk_1341.cpp,data/crawl/squid/new_hunk_1341.cpp,20,20,"printf(""\nStatus of %s Service:\n"", service_name);","printf(""\nStatus of "" SQUIDSBUFPH "" Service:\n"", SQUIDSBUFPRINT(service_name));","[""addLog"", ""updateLog"", ""addContent"", ""removeContent"", ""addVariable""]","[[""%s""], [""SQUIDSBUFPH"", ""SQUIDSBUFPRINT""]]",[4754650398254255184],5894,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1340.cpp,,,data/crawl/squid/old_hunk_1340.cpp,data/crawl/squid/new_hunk_1340.cpp,3,3,"printf(""installed successfully as %s Windows System Service.\n"", service_name);",SQUIDSBUFPRINT(service_name);,"[""updateLog"", ""removeContent""]","[[""printf"", ""installed"", ""successfully"", ""as"", ""%s"", ""Windows"", ""System"", ""Service"", ""\\n""], [""SQUIDSBUFPRINT""]]",[-9837387723153645253],5893,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/d5f21615719ee41caf8841e0480dd5affdc9b707,14 Jul 2014,"Validate -n service name parameter value

Service name is used for path prefixes in SHM/UDS sockets, Windows
service name, Unix/Linux/BSD daemon names, and file path segments.

Restrict service names to a max 32 character alphanumeric value in order
to accommodate as widely portable names as possible in all these cases.",98,data/crawl/squid/hunk_1338.cpp,,,data/crawl/squid/old_hunk_1338.cpp,data/crawl/squid/new_hunk_1338.cpp,3,3,"printf(""Service %s deleted successfully.\n"", service_name);",SQUIDSBUFPRINT(service_name);,"[""updateLog"", ""removeContent""]","[[""printf"", ""Service"", ""%s"", ""deleted"", ""successfully"", ""\\n""], [""SQUIDSBUFPRINT""]]",[-13789856951412544727],5892,"11 days, 12:00:00"
https://github.com/squid-cache/squid/commit/7d341c2c9eb7ec506645fdcce6f94d656ea5413c,27 Jun 2014,Cleanup: simplify libTrie,288,data/crawl/squid/hunk_1355.cpp,,,data/crawl/squid/old_hunk_1355.cpp,data/crawl/squid/new_hunk_1355.cpp,35,-1,"fprintf(stderr, ""Could not find User-Agent\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Could"", ""not"", ""find"", ""User"", ""Agent\\n""], []]",[-10512210024886632924],5891,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7d341c2c9eb7ec506645fdcce6f94d656ea5413c,27 Jun 2014,Cleanup: simplify libTrie,288,data/crawl/squid/hunk_1355.cpp,,,data/crawl/squid/old_hunk_1355.cpp,data/crawl/squid/new_hunk_1355.cpp,31,-1,"fprintf(stderr, ""Could add duplicate User-Agent\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Could"", ""add"", ""duplicate"", ""User"", ""Agent\\n""], []]",[-13909107325841701579],5890,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/7d341c2c9eb7ec506645fdcce6f94d656ea5413c,27 Jun 2014,Cleanup: simplify libTrie,288,data/crawl/squid/hunk_1355.cpp,,,data/crawl/squid/old_hunk_1355.cpp,data/crawl/squid/new_hunk_1355.cpp,27,-1,"fprintf(stderr,""Could not add User-Agent\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Could"", ""not"", ""add"", ""User"", ""Agent\\n""], []]",[-12474821137430514673],5889,"20 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6ad1457463368c12a610b2399a8356b0564d0e7a,13 Jul 2014,"ntlm_sspi_auth: fix various build errors

* Fix MinGW portability build errors

* Upgrade to current helper protocol.

Also, add SEND_TT helper macro for NTLM helpers",138,data/crawl/squid/hunk_1349.cpp,,,data/crawl/squid/old_hunk_1349.cpp,data/crawl/squid/new_hunk_1349.cpp,-1,14,,"fprintf(stdout, ""OK user=\""%s\\%s\"""", domain, user);","[""addLog""]","[[], [""fprintf"", ""stdout"", ""OK"", ""user"", ""\\"", ""%s\\\\%s\\"", ""domain"", ""user""]]",[13789755347171303691],5888,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6ad1457463368c12a610b2399a8356b0564d0e7a,13 Jul 2014,"ntlm_sspi_auth: fix various build errors

* Fix MinGW portability build errors

* Upgrade to current helper protocol.

Also, add SEND_TT helper macro for NTLM helpers",138,data/crawl/squid/hunk_1348.cpp,,,data/crawl/squid/old_hunk_1348.cpp,data/crawl/squid/new_hunk_1348.cpp,24,24,"printf(""TT %s\n"",c);",SEND_TT(c);,"[""updateLog"", ""removeContent""]","[[""printf"", ""TT"", ""%s\\n""], [""SEND_TT""]]",[-15507664015351607101],5887,"12 days, 0:00:00"
https://github.com/squid-cache/squid/commit/e7ce227f301a8f1ab73487d19da899fde7c18858,05 Aug 2014,"Polished for the official review, addressing several TODOs.

Use 1.1 version for FTP ports because FTP commands are sent on a
""persistent by default"" connection, just like HTTP/1.1.

Cleaned up Ftp::CtrlChannel, Ftp::DataChannel, and Ftp::Client object
construction and destruction.

Do not insist on USER command when intercepting FTP. Interception support
may still not work for other reasons, but USER does not seem to be required
since Squid gets request destination from the intercepted connection info.",695,data/crawl/squid/hunk_1313.cpp,,,data/crawl/squid/old_hunk_1313.cpp,data/crawl/squid/new_hunk_1313.cpp,3,3,"header.putStr(HDR_FTP_PRE, httpHeaderQuoteString(W->key).termedBuf());","header.putStr(HDR_FTP_PRE, httpHeaderQuoteString(W->key).c_str());","[""updateVariable""]","[[""termedBuf""], [""c_str""]]",[-6334456970231064875],5886,"1 day, 0:00:00"
https://github.com/squid-cache/squid/commit/1ab04517e705e2aaa2afc9d45bb3dcb45e6030da,07 Aug 2014,"Converted some of the new FTP code to use SBuf and Tokenizer
instead of MemBuf, String, and c-string manipulations.",496,data/crawl/squid/hunk_1267.cpp,,,data/crawl/squid/old_hunk_1267.cpp,data/crawl/squid/new_hunk_1267.cpp,8,7,"mb.Printf(""%s%s"", cmd.termedBuf(), Ftp::crlf);","buf.Printf(""%s%s"", cmd.termedBuf(), Ftp::crlf);","[""updateLog""]","[[""mb""], [""buf""]]",[313072133005114869],5885,0:00:00
https://github.com/squid-cache/squid/commit/92ae4c86c14b2c6346ee32550d472eb57fd1caea,04 Aug 2014,"Major source layout change: Moved FTP code into servers/, clients/, and ftp/.

  src/servers/FtpServer.*   # new FTP server, relaying FTP
  src/servers/HttpServer.*  # old ConnStateData parts conflicting w/ FtpServer
  src/clients/FtpClient.*   # code shared by old and new FTP clients
  src/clients/FtpGateway.*  # old FTP client, translating back to HTTP
  src/clients/FtpNative.*   # new FTP client, relaying FTP
  src/ftp/*                 # FTP stuff shared by clients and servers

This change attempts to preserve code in moved files to the extent possible:
Only copied or added code was polished. Future changes will polish moved code.

Unfortunately, bzr does not track code changes across file splits, so the code
moved from ConnStateData (client_side.cc) into HttpServer and FtpServer
classes appears as removed and added in bzr diff. If you want to see the
branch log for the FtpServer or HttpServer code added in this revision, look
in the previous branch revision of client_side.cc.",4548,data/crawl/squid/hunk_1328.cpp,,,data/crawl/squid/old_hunk_1328.cpp,data/crawl/squid/new_hunk_1328.cpp,1281,-1,"header.putStr(HDR_FTP_REASON, msg);",,"[""removeLog""]","[[""header"", ""putStr"", ""HDR_FTP_REASON"", ""msg""], []]",[-4605338337015075621],5884,"1 day, 12:00:00"
https://github.com/squid-cache/squid/commit/3bd97e7e4fa0fe45ef229aa9abb552d51c0bd4f2,12 Jul 2014,Split PROXY protocol parse into v1 and v2 methods,337,data/crawl/squid/hunk_1351.cpp,,,data/crawl/squid/old_hunk_1351.cpp,data/crawl/squid/new_hunk_1351.cpp,-1,52,,"proxyProtocolError(tok.atEnd()?""PROXY/1.0 error: invalid protocol family"":NULL);","[""addLog""]","[[], [""proxyProtocolError"", ""tok"", ""atEnd"", ""PROXY/1"", ""0"", ""error"", ""invalid"", ""protocol"", ""family"", ""NULL""]]",[-6411332611857061514],5883,"15 days, 12:00:00"
https://github.com/squid-cache/squid/commit/1689cdbc1355cd1281cd3bdc791c1b13cec462fe,12 Aug 2014,Performance optimizations and polish,92,data/crawl/squid/hunk_1232.cpp,,,data/crawl/squid/old_hunk_1232.cpp,data/crawl/squid/new_hunk_1232.cpp,21,-1,"proxyProtocolError(in.buf.length() > 107? ""PROXY/1.0 error: missing CRLF"":NULL);",,"[""removeLog""]","[[""proxyProtocolError"", ""in"", ""buf"", ""length"", ""107"", ""PROXY/1"", ""0"", ""error"", ""missing"", ""CRLF"", ""NULL""], []]",[-27540090278766768736],5882,12:00:00
https://github.com/squid-cache/squid/commit/1689cdbc1355cd1281cd3bdc791c1b13cec462fe,12 Aug 2014,Performance optimizations and polish,92,data/crawl/squid/hunk_1232.cpp,,,data/crawl/squid/old_hunk_1232.cpp,data/crawl/squid/new_hunk_1232.cpp,12,-1,"proxyProtocolError(""PROXY/1.0 error: missing CR"");",,"[""removeLog""]","[[""proxyProtocolError"", ""PROXY/1"", ""0"", ""error"", ""missing"", ""CR""], []]",[-18111147772876735559],5881,12:00:00
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1255.cpp,,,data/crawl/squid/old_hunk_1255.cpp,data/crawl/squid/new_hunk_1255.cpp,-1,649,,"request->header.putStr(HDR_FTP_ARGUMENTS, params.c_str());","[""addLog""]","[[], [""request"", ""header"", ""putStr"", ""HDR_FTP_ARGUMENTS"", ""params"", ""c_str""]]",[-12891989420141091774],5880,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1255.cpp,,,data/crawl/squid/old_hunk_1255.cpp,data/crawl/squid/new_hunk_1255.cpp,-1,648,,"request->header.putStr(HDR_FTP_COMMAND, cmd.c_str());","[""addLog""]","[[], [""request"", ""header"", ""putStr"", ""HDR_FTP_COMMAND"", ""cmd"", ""c_str""]]",[-4887081017303346744],5879,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/hunk_1228.cpp,,,data/crawl/squid/old_hunk_1228.cpp,data/crawl/squid/new_hunk_1228.cpp,-1,58,,abortRequestParsing(errUri);,"[""addLog""]","[[], [""abortRequestParsing"", ""errUri""]]",[-615668499119407073],5878,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8cb327e93a064e9886ccb57a4a85088976fe86c2,11 Aug 2014,"Fixed reporting of malformed -n values on the command line.

Test case: $ squid -n ' '
FATAL: Expected alphanumeric service name for the -n option but got: squid",6,data/crawl/squid/hunk_1236.cpp,,,data/crawl/squid/old_hunk_1236.cpp,data/crawl/squid/new_hunk_1236.cpp,-1,6,,"fatalf(""Garbage after alphanumeric service name in the -n option value: %s"", optarg);","[""addLog""]","[[], [""fatalf"", ""Garbage"", ""after"", ""alphanumeric"", ""service"", ""name"", ""in"", ""the"", ""n"", ""option"", ""value"", ""%s"", ""optarg""]]",[-11702706294966760169],5877,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/8cb327e93a064e9886ccb57a4a85088976fe86c2,11 Aug 2014,"Fixed reporting of malformed -n values on the command line.

Test case: $ squid -n ' '
FATAL: Expected alphanumeric service name for the -n option but got: squid",6,data/crawl/squid/hunk_1236.cpp,,,data/crawl/squid/old_hunk_1236.cpp,data/crawl/squid/new_hunk_1236.cpp,4,4,"fatalf(""Expected alphanumeric service name for the -n option but got: "" SQUIDSBUFPH, SQUIDSBUFPRINT(service_name));","fatalf(""Expected alphanumeric service name for the -n option but got: %s"", optarg);","[""updateVariable"", ""removeVariable"", ""updateContent""]","[[""SQUIDSBUFPH"", ""SQUIDSBUFPRINT"", ""service_name""], [""%s"", ""optarg""]]",[-10851372947184613018],5876,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1252.cpp,,,data/crawl/squid/old_hunk_1252.cpp,data/crawl/squid/new_hunk_1252.cpp,-1,498,,"buf.Printf(""%s%s"", cmd.termedBuf(), Ftp::crlf);","[""addLog""]","[[], [""buf"", ""Printf"", ""%s%s"", ""cmd"", ""termedBuf"", ""Ftp"", ""crlf""]]",[21145089189143264005],5875,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1252.cpp,,,data/crawl/squid/old_hunk_1252.cpp,data/crawl/squid/new_hunk_1252.cpp,-1,496,,"buf.Printf(""%s %s%s"", cmd.termedBuf(), params.termedBuf(), Ftp::crlf);","[""addLog""]","[[], [""buf"", ""Printf"", ""%s"", ""%s%s"", ""cmd"", ""termedBuf"", ""params"", ""termedBuf"", ""Ftp"", ""crlf""]]",[24129078830910212260],5874,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1252.cpp,,,data/crawl/squid/old_hunk_1252.cpp,data/crawl/squid/new_hunk_1252.cpp,-1,471,,"abortTransaction(""Internal error: FTP relay request with no command"");","[""addLog""]","[[], [""abortTransaction"", ""Internal"", ""error"", ""FTP"", ""relay"", ""request"", ""with"", ""no"", ""command""]]",[-15627042902845683154],5873,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1252.cpp,,,data/crawl/squid/old_hunk_1252.cpp,data/crawl/squid/new_hunk_1252.cpp,-1,393,,"reply->header.putStr(HDR_FTP_PRE, httpHeaderQuoteString(W->key).c_str());","[""addLog""]","[[], [""reply"", ""header"", ""putStr"", ""HDR_FTP_PRE"", ""httpHeaderQuoteString"", ""W"", ""key"", ""c_str""]]",[-11322583016474365019],5872,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1251.cpp,,,data/crawl/squid/old_hunk_1251.cpp,data/crawl/squid/new_hunk_1251.cpp,20,-1,"mustStop(""FtpStateData::abortTransaction"");",,"[""removeLog""]","[[""mustStop"", ""FtpStateData"", ""abortTransaction""], []]",[11011187553986895606],5871,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1250.cpp,,,data/crawl/squid/old_hunk_1250.cpp,data/crawl/squid/new_hunk_1250.cpp,265,-1,"abortTransaction(""zero control reply read"");",,"[""removeLog""]","[[""abortTransaction"", ""zero"", ""control"", ""reply"", ""read""], []]",[15868666021114446515],5870,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1250.cpp,,,data/crawl/squid/old_hunk_1250.cpp,data/crawl/squid/new_hunk_1250.cpp,234,-1,"abortTransaction(""entry aborted during control reply read"");",,"[""removeLog""]","[[""abortTransaction"", ""entry"", ""aborted"", ""during"", ""control"", ""reply"", ""read""], []]",[29038949042844960413],5869,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1249.cpp,,,data/crawl/squid/old_hunk_1249.cpp,data/crawl/squid/new_hunk_1249.cpp,90,-1,"abortTransaction(""entry aborted during dataRead"");",,"[""removeLog""]","[[""abortTransaction"", ""entry"", ""aborted"", ""during"", ""dataRead""], []]",[14041970511130099506],5868,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1248.cpp,,,data/crawl/squid/old_hunk_1248.cpp,data/crawl/squid/new_hunk_1248.cpp,7,-1,"(abortOnBadEntry(""entry went bad while waiting for a timeout"");",,"[""removeLog""]","[[""abortOnBadEntry"", ""entry"", ""went"", ""bad"", ""while"", ""waiting"", ""for"", ""a"", ""timeout""], []]",[6015737064028494462],5867,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1247.cpp,,,data/crawl/squid/old_hunk_1247.cpp,data/crawl/squid/new_hunk_1247.cpp,12,-1,"mustStop(""FtpStateData::ctrlClosed"");",,"[""removeLog""]","[[""mustStop"", ""FtpStateData"", ""ctrlClosed""], []]",[6481123461370255207],5866,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1244.cpp,,,data/crawl/squid/old_hunk_1244.cpp,data/crawl/squid/new_hunk_1244.cpp,-1,994,,"mustStop(""Ftp::Client::abortTransaction"");","[""addLog""]","[[], [""mustStop"", ""Ftp"", ""Client"", ""abortTransaction""]]",[-15200642082246892159],5865,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1244.cpp,,,data/crawl/squid/old_hunk_1244.cpp,data/crawl/squid/new_hunk_1244.cpp,-1,825,,"mustStop(""Ftp::Client::ctrlClosed"");","[""addLog""]","[[], [""mustStop"", ""Ftp"", ""Client"", ""ctrlClosed""]]",[-10670577989630251760],5864,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1244.cpp,,,data/crawl/squid/old_hunk_1244.cpp,data/crawl/squid/new_hunk_1244.cpp,-1,337,,"abortTransaction(""entry aborted during control reply read"");","[""addLog""]","[[], [""abortTransaction"", ""entry"", ""aborted"", ""during"", ""control"", ""reply"", ""read""]]",[-29038949042844960413],5863,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b3cb9958457df8c623387c426359e5bce58c84e4,11 Aug 2014,"Initial native FTP Relay support.

* Added ftp_port directive telling Squid to relay native FTP commands.
* Active and passive FTP support on the user-facing side;
  require passive connections to come from the control connection src IP.
* IPv6 support (EPSV and, on the user-facing side, EPRT).
* Intelligent adaptation of relayed FTP FEAT responses.
* Relaying of multi-line FTP control responses using various formats.
* Support relaying of FTP MLSD and MLST commands (RFC 3659).
* Several Microsoft FTP server compatibility features.
* ICAP/eCAP support (at individual FTP command/response level).
* Optional ""current FTP directory"" tracking (cannot be 100% reliable due to
  symbolic links and such, but is helpful in some common use cases).
* FTP origin control connection is pinned to the FTP user connection.
* No caching support -- no reliable Request URIs for that (see above).
* Significant FTP code restructuring on the server-facing side.
* Initial steps towards HTTP code restructuring on the client-facing side.

See merged revisions commit log for details.",7287,data/crawl/squid/hunk_1243.cpp,,,data/crawl/squid/old_hunk_1243.cpp,data/crawl/squid/new_hunk_1243.cpp,5,6,"fatal(""No HTTP or HTTPS ports configured"");","fatal(""No HTTP, HTTPS, or FTP ports configured"");","[""updateContent""]","[[], [""FTP""]]",[-4177197833218190687],5862,"7 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/hunk_1225.cpp,,,data/crawl/squid/old_hunk_1225.cpp,data/crawl/squid/new_hunk_1225.cpp,-1,10,,"csd->abortRequestParsing(""error:unsupported-request-method"");","[""addLog""]","[[], [""csd"", ""abortRequestParsing"", ""error"", ""unsupported"", ""request"", ""method""]]",[192712572626876571],5861,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/hunk_1223.cpp,,,data/crawl/squid/old_hunk_1223.cpp,data/crawl/squid/new_hunk_1223.cpp,-1,3,,"csd->abortRequestParsing(""error:invalid-request"");","[""addLog""]","[[], [""csd"", ""abortRequestParsing"", ""error"", ""invalid"", ""request""]]",[3826909698557543550],5860,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eacfca83ef8fa0e610644539cee10dbdc150bcff,19 Aug 2014,"Do not assert on native FTP ERR_TOO_BIG. Do not check for ERR_TOO_BIG twice.

The assertion occurred because both the FTP request parser and the generic
ConnStateData::checkHeaderLimits() code would try to write their own error
message to the user. Reworked all error reporting code in the FTP parser to
avoid writing early responses (that were bypassing the overall transaction
flow with various negative side effects such as lack of logging).

Removed ConnStateData::checkHeaderLimits(): We already have protocol-specific
checks for huge HTTP and FTP requests. There is no point in duplicating them.
Centralizing them sounds like a good idea, but a general checkHeaderLimits()
cannot produce protocol-specific errors messages that we need, so it hurts
more than it helps. Moreover, checkHeaderLimits() was handling errors
differently than protocol parsing code, making the code more complex overall.

All that remains from the checkHeaderLimits() code now is a single Must(),
checking that the protocol parsers did what they were supposed to do: Return
NULL to request more data after checking any applicable limits. If parsers do
not (a Squid bug!), the ConnStateData job gets killed (and connection gets
closed) as the last resort.

Added clientReplyContext::setReplyToReply() and
StoreEntry::storeErrorResponse() to handle storing of a response to an FTP
command parsing error. The old code was using ErrorState to store parsing
errors, but ErrorState is still HTTP-specific and cannot relay the right FTP
codes/reasons to the user. The setReplyToReply() sounds silly but it matches
the existing setReplyTo*() naming scheme well.

Make sure parsed native FTP command tokens are not even close to the String
buffer limit. These checks are not a firm guarantee, but are better than
nothing until we replace String.

Handle ClientSocketContext registration centrally because all parsers need it.

Call quitAfterError() on fatal native FTP errors. Probably not necessary due
to fssError handling code that closes the FTP control connection, but adds
helpful debugging and brings us closer to the HTTP error handling code.

Described ConnStateData::clientParseRequests().",305,data/crawl/squid/hunk_1221.cpp,,,data/crawl/squid/old_hunk_1221.cpp,data/crawl/squid/new_hunk_1221.cpp,-1,3,,"conn->abortRequestParsing(""error:invalid-request"");","[""addLog""]","[[], [""conn"", ""abortRequestParsing"", ""error"", ""invalid"", ""request""]]",[10099321292482107507],5859,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/3bd97e7e4fa0fe45ef229aa9abb552d51c0bd4f2,12 Jul 2014,Split PROXY protocol parse into v1 and v2 methods,337,data/crawl/squid/hunk_1351.cpp,,,data/crawl/squid/old_hunk_1351.cpp,data/crawl/squid/new_hunk_1351.cpp,-1,97,,"proxyProtocolError(""PROXY/1.0 error: invalid dst-IP address"");","[""addLog""]","[[], [""proxyProtocolError"", ""PROXY/1"", ""0"", ""error"", ""invalid"", ""dst"", ""IP"", ""address""]]",[-5151170607502140641],5858,"26 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3bd97e7e4fa0fe45ef229aa9abb552d51c0bd4f2,12 Jul 2014,Split PROXY protocol parse into v1 and v2 methods,337,data/crawl/squid/hunk_1351.cpp,,,data/crawl/squid/old_hunk_1351.cpp,data/crawl/squid/new_hunk_1351.cpp,-1,36,,"proxyProtocolError(""PROXY protocol error: invalid header"");","[""addLog""]","[[], [""proxyProtocolError"", ""PROXY"", ""protocol"", ""error"", ""invalid"", ""header""]]",[3080275356647560419],5857,"26 days, 0:00:00"
https://github.com/squid-cache/squid/commit/3bd97e7e4fa0fe45ef229aa9abb552d51c0bd4f2,12 Jul 2014,Split PROXY protocol parse into v1 and v2 methods,337,data/crawl/squid/hunk_1351.cpp,,,data/crawl/squid/old_hunk_1351.cpp,data/crawl/squid/new_hunk_1351.cpp,-1,6,,mustStop(msg);,"[""addLog""]","[[], [""mustStop"", ""msg""]]",[-2674481189511874069],5856,"26 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d3d92daafd6ebda0b0969b0f715af49e6b399d92,05 Aug 2014,"Updated configuration options

* Replace proxy-surrogate fag with require-proxy-header

* Revert follow_x_forwarded_for linkage with PROXY protocol.
  Add proxy_protocol_access directive for PROXY ACLs instead.

* set fast default for proxy_protocol_access when none configured.",102,data/crawl/squid/hunk_1318.cpp,,,data/crawl/squid/old_hunk_1318.cpp,data/crawl/squid/new_hunk_1318.cpp,-1,11,,"proxyProtocolError(""PROXY client not permitted by default ACL"");","[""addLog""]","[[], [""proxyProtocolError"", ""PROXY"", ""client"", ""not"", ""permitted"", ""by"", ""default"", ""ACL""]]",[24731452697702004997],5855,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2eb6054faf2503474cb500cdc4cb87aed073744b,29 Oct 2014,"negotiate_kerberos_auth: output group= kv-pair

Output group= if negotiate_kerberos_auth can retrieve AD groups from
Kerberos ticket for further processing by squid to external helpers.",24,data/crawl/squid/hunk_1170.cpp,,,data/crawl/squid/old_hunk_1170.cpp,data/crawl/squid/new_hunk_1170.cpp,6,11,"fprintf(stderr, ""%s| %s: INFO: User %s authenticated\n"", LogTime(),
                        PROGRAM, rfc1738_escape(user));","fprintf(stderr, ""%s| %s: INFO: User %s authenticated\n"", LogTime(),
                        PROGRAM, rfc_user);","[""updateVariable"", ""removeVariable""]","[[""rfc1738_escape"", ""user""], [""rfc_user""]]",[-13757836828617939792],5854,0:00:00
https://github.com/squid-cache/squid/commit/6825b101b1773a3f5abcdc00010cdbce03cb5d63,09 Nov 2014,"Make helper queue size configurable, with consistent defaults and better overflow handling.

This patch adds a queue-size=N option to helpers configuration. This
option allows users to configure the maximum number of queued requests
to busy helpers. We also adjusted the default queue size limits to be
more consistent across all helpers and made Squid more robust on some
queue overflows:

- external_acl helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows, then the ACL returns ACCESS_DUNNO.

    Unpatched code uses the number of running children as the maximum
    queue size. If the queue is overloaded, then the ACL returns ACCESS_DUNNO.

-redirector/storeID helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows and redirector_bypass configuration option
    is set, then redirector is bypassed. Otherwise, if overloading
    persists for more than 3 minutes squid quits with a FATAL message.
    If the redirector_bypass/storeID_bypass is set then the default queue_size
    is set to 0 for backward compatibility.

    Unpatched code uses 2*number-of-running-children as the maximum queue size.
    If the redirector_bypass/storeID_bypass is set then helper bypassed if all
    of the children are busy.
    If the queue is overloaded and redirector_bypass/storeID_bypass is not set
    then squid quits with a FATAL message.

- ssl_crtd/ssl_crtd_validator helpers.
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows, then helpers are bypassed. If overloading persists
    for more than 3 minutes squid quits with a FATAL message.

    The default size limit and overflow behavior has not changed.

- Authentication helpers
    Make the maximum queue size configurable via queue-size.
    Default to 2*maximum-number-of-children.
    If the queue overflows and overloading persists for more than 3 minutes,
    then squid quits with a FATAL message.

    The default size limit and overflow behavior has not changed.

This is a Measurement Factory project",321,data/crawl/squid/hunk_1158.cpp,,,data/crawl/squid/old_hunk_1158.cpp,data/crawl/squid/new_hunk_1158.cpp,7,-1,"fatalf(""Too many queued %s requests"", hlp->id_name);",,"[""removeLog""]","[[""fatalf"", ""Too"", ""many"", ""queued"", ""%s"", ""requests"", ""hlp"", ""id_name""], []]",[11959563550754262868],5853,0:00:00
https://github.com/squid-cache/squid/commit/4ebcf1ceefe28d5320166e5bad97a72ef7944c5c,27 Sep 2013,"negotiate_kerberos_auth: upgrade to present group= keys

Use the new kv-pair protocol extensions for emitting group details
directly at the time of authentication. group=X key-value pair is
used to emit the Kerberos SIDS values presented by MS Active
Directory environments.

Also, update the Hiemdal library support for recent library versions.

Also, polish the Kerberos and LDAP Group related code to avoid memory
leaks and improve C++ coding style.",1392,data/crawl/squid/hunk_1691.cpp,,,data/crawl/squid/old_hunk_1691.cpp,data/crawl/squid/new_hunk_1691.cpp,-1,50,,"fprintf(stderr, ""%s| %s: ERROR: %s: %s\n"", LogTime(), PROGRAM, function, errmsg);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""ERROR"", ""%s"", ""%s\\n"", ""LogTime"", ""PROGRAM"", ""function"", ""errmsg""]]",[-3629167607061028940],5852,"224 days, 0:00:00"
https://github.com/squid-cache/squid/commit/aadbbd7d080ef1662bfd7ea568edbb29f25fdd72,30 Dec 2014,"Crypto-NG: Base64 crypto replacement

The existing Squid base64 code had ambiguous copyright licensing. In
particular it only referenced a dead URL for source copyright
ownership details. In all likelihood this was for an Open Source
implementation, but we dont have sufficient record of the original
license terms to be certain without a long investigation.

It has also been heavily modified and customized over the decades
since importing whih complicates the issue a lot.

It also does not match any of the common industry context-based API
patterns for encoders/decoders.


This patch replaces that logic with GPLv2 licensed code from the
Nettle crypto library. Either linking the library dynamically or in
its absence embedding the logic via our libmiscencoding library.

It also updates all code to the new API, and as a byproduct removes
several layers of deprecated wrapper functions which have grown in
over the years.",839,data/crawl/squid/hunk_1097.cpp,,,data/crawl/squid/old_hunk_1097.cpp,data/crawl/squid/new_hunk_1097.cpp,-1,5,,"httpHeaderPutStrf(hdr_out, header, ""Basic %.*s"", blen, loginbuf);","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr_out"", ""header"", ""Basic"", ""%"", ""*s"", ""blen"", ""loginbuf""]]",[-4607372450720250634],5851,0:00:00
https://github.com/squid-cache/squid/commit/24804af2c9929f4bda4281d36dfdfacfd20cbb6b,31 Dec 2014,"negotiate_sspi_auth: fix various build errors

* fix convenience library dependency detection

* convert to new base64 coding API

* remove goto's",81,data/crawl/squid/hunk_1077.cpp,,,data/crawl/squid/old_hunk_1077.cpp,data/crawl/squid/new_hunk_1077.cpp,-1,11,,"fprintf(stderr, ""ERROR: base64 decoding failed for: '%s'\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""ERROR"", ""base64"", ""decoding"", ""failed"", ""for"", ""%s"", ""\\n"", ""buf""]]",[-18460778426510115996],5850,0:00:00
https://github.com/squid-cache/squid/commit/ced8def38409d2e3f76af4428a823678e46d24eb,01 Jan 2015,"Cleanup: fix most 'unused parameter' warnings

... and several bugs hidden by lack of this check:

* url_rewrite_timeout parser/dumper using wrong cf.data.pre
  parameter definition.

* url_rewrite_timeout parser/dumper using wrong object for
  state data.
  Global a Config object instead of parameter object.
  Preventing future use of multiple Config objects. There is
  more to be done as the Timeout value itself is not stored
  as part of the object apparently detailing the timeout.

* request_header_add directive dump() omitting directive
  name in mgr:config output.

* dead code as HTCP packet handlers for NOP, MON, SET

* mime icons download operation incorrectly initialized.
  was using the 'view' access parameter to set download
  access permission.

* peerCountHandleIcpReply() assertions testing validity
  after pointers already used. This would lead to segfault
  on errors, now leading to assertion logging.


Only the default built code was checked and updated at this
time. There are 62 known warnings still appearing due to
parameters being only used inside conditional code, possibly
more issues in code not enabled in this build and certainly
a lot more in the stubs and unit tests which were not checked.",786,data/crawl/squid/hunk_1067.cpp,,,data/crawl/squid/old_hunk_1067.cpp,data/crawl/squid/new_hunk_1067.cpp,43,43,"storeAppendPrintf(entry, "" response=\""%s\"""", Config.onUrlRewriteTimeout.response);","storeAppendPrintf(entry, "" response=\""%s\"""", config.response);","[""updateVariable"", ""removeVariable""]","[[""Config"", ""onUrlRewriteTimeout""], [""config""]]",[6644738104762074372],5849,0:00:00
https://github.com/squid-cache/squid/commit/ed7f56150f25fdd768b7c99d0ea052304fe2e98b,20 Feb 1998,"make all the OBJH functions static, etc",302,data/crawl/squid/hunk_6782.cpp,,,data/crawl/squid/old_hunk_6782.cpp,data/crawl/squid/new_hunk_6782.cpp,55,-1,"storeAppendPrintf(sentry, ""DOMAIN LIST: "");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""DOMAIN"", ""LIST""], []]",[-20444842400479138936],5848,"3106 days, 0:00:00"
https://github.com/squid-cache/squid/commit/79d4ccdf0a8c242f24a40d774d2c7d4dcdf28047,20 Oct 2001,"SSL update from the ""ssl"" branch at SourceForge

* Several SSL tweaking options
  - SSL version per https_port, no longer a global setting
  - supported chipers, per https_port
  - supported protocols, per https_port
  - connection shutdown method

* Fix the bug reported by Noel Burton-Krahn where SSL connections
  could get hung with data pending in the SSL internal buffers. Mostly
  seen on large POST/PUT requests, but could in theory appear on any
  request larger than 4K.",315,data/crawl/squid/hunk_5755.cpp,,,data/crawl/squid/old_hunk_5755.cpp,data/crawl/squid/new_hunk_5755.cpp,-1,123,,"fatalf(""Unknown SSL option '%s'"", option);","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""SSL"", ""option"", ""%s"", ""option""]]",[6261211349979421884],5847,"2450 days, 0:00:00"
https://github.com/squid-cache/squid/commit/84ae6223b79d41ce4918928b6374baccc72c4e80,25 Jan 2015,"Revert HttpMsg::parse API from MemBuf to c-string

It is simpler and more performant to incrementally convert the I/O
buffers to SBuf using c-string export to legacy code than MemBuf.

HttpMsg::parse API did not really make much use of MemBuf, so we can
remove that and avoid performance regressions later in ICAP I/O buffer
conversion.",263,data/crawl/squid/hunk_1044.cpp,,,data/crawl/squid/old_hunk_1044.cpp,data/crawl/squid/new_hunk_1044.cpp,-1,9,,"mustStop(""unknown ICAP I/O read error"");","[""addLog""]","[[], [""mustStop"", ""unknown"", ""ICAP"", ""I/O"", ""read"", ""error""]]",[-25400331232163992070],5846,"31 days, 0:00:00"
https://github.com/squid-cache/squid/commit/a9423eea589bc093dfb0e32deb5f34d2c635b89f,21 Apr 2015,CBDATA: use class Lock for reference counting,44,data/crawl/squid/hunk_910.cpp,,,data/crawl/squid/old_hunk_910.cpp,data/crawl/squid/new_hunk_910.cpp,3,3,"storeAppendPrintf(sentry, ""%d cbdata entries\n"", cbdataCount);","storeAppendPrintf(sentry, ""%"" PRIu64 "" cbdata entries\n"", cbdataCount);","[""addContent"", ""updateContent"", ""addVariable""]","[[""%d""], [""%"", ""PRIu64""]]",[7232694531339534371],5845,0:00:00
https://github.com/squid-cache/squid/commit/20148bf2fb019708e44acd7f0670818eb6535ede,22 Apr 2015,Revert rev.14029,44,data/crawl/squid/hunk_907.cpp,,,data/crawl/squid/old_hunk_907.cpp,data/crawl/squid/new_hunk_907.cpp,3,3,"storeAppendPrintf(sentry, ""%"" PRIu64 "" cbdata entries\n"", cbdataCount);","storeAppendPrintf(sentry, ""%d cbdata entries\n"", cbdataCount);","[""removeVariable"", ""updateContent"", ""removeContent""]","[[""%"", ""PRIu64""], [""%d""]]",[-7232694531339534371],5844,0:00:00
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1032.cpp,,,data/crawl/squid/old_hunk_1032.cpp,data/crawl/squid/new_hunk_1032.cpp,-1,10,,"p->Printf(Http1StatusLineFormat, version.major, version.minor, status(), reason());","[""addLog""]","[[], [""p"", ""Printf"", ""Http1StatusLineFormat"", ""version"", ""major"", ""version"", ""minor"", ""status"", ""reason""]]",[2376661629906503829],5843,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1032.cpp,,,data/crawl/squid/old_hunk_1032.cpp,data/crawl/squid/new_hunk_1032.cpp,-1,3,,"p->Printf(IcyStatusLineFormat, status(), reason());","[""addLog""]","[[], [""p"", ""Printf"", ""IcyStatusLineFormat"", ""status"", ""reason""]]",[-8877715264555547091],5842,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1029.cpp,,,data/crawl/squid/old_hunk_1029.cpp,data/crawl/squid/new_hunk_1029.cpp,-1,3,,"p->Printf(SQUIDSBUFPH "" %s HTTP/%d.%d\r\n"",
              SQUIDSBUFPRINT(method.image()),
              packableURI(full_uri),
              http_ver.major, http_ver.minor);","[""addLog""]","[[], [""p"", ""Printf"", ""SQUIDSBUFPH"", ""%s"", ""HTTP/%d"", ""%d\\r\\n"", ""SQUIDSBUFPRINT"", ""method"", ""image"", ""packableURI"", ""full_uri"", ""http_ver"", ""major"", ""http_ver"", ""minor""]]",[-9467927400313583789],5841,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1028.cpp,,,data/crawl/squid/old_hunk_1028.cpp,data/crawl/squid/new_hunk_1028.cpp,-1,3,,"p->Printf(SQUIDSBUFPH "" "" SQUIDSTRINGPH "" HTTP/%d.%d\r\n"",
              SQUIDSBUFPRINT(method.image()), SQUIDSTRINGPRINT(urlpath),
              http_ver.major, http_ver.minor);","[""addLog""]","[[], [""p"", ""Printf"", ""SQUIDSBUFPH"", ""SQUIDSTRINGPH"", ""HTTP/%d"", ""%d\\r\\n"", ""SQUIDSBUFPRINT"", ""method"", ""image"", ""SQUIDSTRINGPRINT"", ""urlpath"", ""http_ver"", ""major"", ""http_ver"", ""minor""]]",[-1397880125173530560],5840,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1027.cpp,,,data/crawl/squid/old_hunk_1027.cpp,data/crawl/squid/new_hunk_1027.cpp,-1,19,,"p->Printf("";"" SQUIDSTRINGPH, SQUIDSTRINGPRINT(target));","[""addLog""]","[[], [""p"", ""Printf"", ""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT"", ""target""]]",[-9077602781423477937],5839,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1027.cpp,,,data/crawl/squid/old_hunk_1027.cpp,data/crawl/squid/new_hunk_1027.cpp,-1,12,,"p->Printf(""=\"""" SQUIDSTRINGPH ""\"""", SQUIDSTRINGPRINT(content_));","[""addLog""]","[[], [""p"", ""Printf"", ""\\"", ""SQUIDSTRINGPH"", ""\\"", ""SQUIDSTRINGPRINT"", ""content_""]]",[1404584141389066326],5838,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1027.cpp,,,data/crawl/squid/old_hunk_1027.cpp,data/crawl/squid/new_hunk_1027.cpp,-1,9,,"p->Printf(""=%d"", (int) max_age);","[""addLog""]","[[], [""p"", ""Printf"", ""%d"", ""int"", ""max_age""]]",[-8500830365794018438],5837,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1027.cpp,,,data/crawl/squid/old_hunk_1027.cpp,data/crawl/squid/new_hunk_1027.cpp,-1,3,,"p->Printf((pcount ? "", "" SQUIDSTRINGPH : SQUIDSTRINGPH),
                         SQUIDSTRINGPRINT(ScFieldsInfo[flag].name));","[""addLog""]","[[], [""p"", ""Printf"", ""pcount"", ""SQUIDSTRINGPH"", ""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT"", ""ScFieldsInfo[flag]"", ""name""]]",[-9091417885935417465],5836,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1026.cpp,,,data/crawl/squid/old_hunk_1026.cpp,data/crawl/squid/new_hunk_1026.cpp,-1,7,,"packer->Printf(""%"" PRId64 ""-%"" PRId64, offset, offset + length - 1);","[""addLog""]","[[], [""packer"", ""Printf"", ""%"", ""PRId64"", ""%"", ""PRId64"", ""offset"", ""offset"", ""length"", ""1""]]",[34418805337471966369],5835,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1026.cpp,,,data/crawl/squid/old_hunk_1026.cpp,data/crawl/squid/new_hunk_1026.cpp,-1,5,,"packer->Printf(""%"" PRId64 ""-"", offset);","[""addLog""]","[[], [""packer"", ""Printf"", ""%"", ""PRId64"", ""offset""]]",[13309811026416167631],5834,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1026.cpp,,,data/crawl/squid/old_hunk_1026.cpp,data/crawl/squid/new_hunk_1026.cpp,-1,3,,"packer->Printf(""-%"" PRId64,  length);","[""addLog""]","[[], [""packer"", ""Printf"", ""%"", ""PRId64"", ""length""]]",[14699823011110799082],5833,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1025.cpp,,,data/crawl/squid/old_hunk_1025.cpp,data/crawl/squid/new_hunk_1025.cpp,-1,5,,"p->Printf(""/%"" PRId64, range->elength);","[""addLog""]","[[], [""p"", ""Printf"", ""/%"", ""PRId64"", ""range"", ""elength""]]",[4996163073457638955],5832,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1025.cpp,,,data/crawl/squid/old_hunk_1025.cpp,data/crawl/squid/new_hunk_1025.cpp,-1,3,,"p->Printf(""/*"");","[""addLog""]","[[], [""p"", ""Printf"", ""/*""]]",[7243425605343659885],5831,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1024.cpp,,,data/crawl/squid/old_hunk_1024.cpp,data/crawl/squid/new_hunk_1024.cpp,-1,5,,"p->Printf(""bytes %"" PRId64 ""-%"" PRId64,
                     spec->offset, spec->offset + spec->length - 1);","[""addLog""]","[[], [""p"", ""Printf"", ""bytes"", ""%"", ""PRId64"", ""%"", ""PRId64"", ""spec"", ""offset"", ""spec"", ""offset"", ""spec"", ""length"", ""1""]]",[33333980895791996333],5830,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1024.cpp,,,data/crawl/squid/old_hunk_1024.cpp,data/crawl/squid/new_hunk_1024.cpp,-1,3,,"p->Printf(""*"");","[""addLog""]","[[], [""p"", ""Printf"", ""*""]]",[7237409574576621747],5829,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1023.cpp,,,data/crawl/squid/old_hunk_1023.cpp,data/crawl/squid/new_hunk_1023.cpp,-1,3,,"p->Printf((pcount ? "", "" SQUIDSTRINGPH : SQUIDSTRINGPH),
                     SQUIDSTRINGPRINT(other));","[""addLog""]","[[], [""p"", ""Printf"", ""pcount"", ""SQUIDSTRINGPH"", ""SQUIDSTRINGPH"", ""SQUIDSTRINGPRINT"", ""other""]]",[-1946100465659953972],5828,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1022.cpp,,,data/crawl/squid/old_hunk_1022.cpp,data/crawl/squid/new_hunk_1022.cpp,-1,20,,"p->Printf(""=%d"", (int) minFresh());","[""addLog""]","[[], [""p"", ""Printf"", ""%d"", ""int"", ""minFresh""]]",[-5183899013173655959],5827,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1022.cpp,,,data/crawl/squid/old_hunk_1022.cpp,data/crawl/squid/new_hunk_1022.cpp,-1,17,,"p->Printf(""=%d"", (int) maxStale());","[""addLog""]","[[], [""p"", ""Printf"", ""%d"", ""int"", ""maxStale""]]",[8207589281074295674],5826,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1022.cpp,,,data/crawl/squid/old_hunk_1022.cpp,data/crawl/squid/new_hunk_1022.cpp,-1,11,,"p->Printf(""=%d"", (int) sMaxAge());","[""addLog""]","[[], [""p"", ""Printf"", ""%d"", ""int"", ""sMaxAge""]]",[-5460747625656949564],5825,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1022.cpp,,,data/crawl/squid/old_hunk_1022.cpp,data/crawl/squid/new_hunk_1022.cpp,-1,8,,"p->Printf(""=%d"", (int) maxAge());","[""addLog""]","[[], [""p"", ""Printf"", ""%d"", ""int"", ""maxAge""]]",[-5703379641896401018],5824,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d2a739f519b9863bb1920a5a1353c4c6827415b0,03 Mar 2015,Shuffle packerPrintf() to be Packer::Printf method,69,data/crawl/squid/hunk_1022.cpp,,,data/crawl/squid/old_hunk_1022.cpp,data/crawl/squid/new_hunk_1022.cpp,-1,3,,"p->Printf((pcount ? "", %s"": ""%s"") , CcAttrs[flag].name);","[""addLog""]","[[], [""p"", ""Printf"", ""pcount"", ""%s"", ""%s"", ""CcAttrs[flag]"", ""name""]]",[8327898105088171353],5823,"27 days, 0:00:00"
https://github.com/squid-cache/squid/commit/4391cd1518d101223e810f8e5e620c871b535245,05 Mar 2015,"Rename Packable::Printf as Packable::appendf

It performs append semantics not replace semantics, and this also paves
the way for SBuf integration.",451,data/crawl/squid/hunk_922.cpp,,,data/crawl/squid/old_hunk_922.cpp,data/crawl/squid/new_hunk_922.cpp,9,9,"outputBuffer.Printf("" %d+%d"", (int)theBuf.contentSize(), (int)theBuf.spaceSize());","outputBuffer.appendf("" %u+%u"", theBuf.contentSize(), theBuf.spaceSize());","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""Printf"", ""%d"", ""%d"", ""int"", ""int""], [""appendf"", ""%u"", ""%u""]]",[14707410958118928288],5822,"26 days, 12:00:00"
https://github.com/squid-cache/squid/commit/0f33a01dca1796a4d73eff791a911bb1fb709cc0,27 Apr 2015,"Make StoreEntry provide Packable interface

Preparation for removal of C-style storeAppendPrintf()
functions and Packer wrapper class.",57,data/crawl/squid/hunk_792.cpp,,,data/crawl/squid/old_hunk_792.cpp,data/crawl/squid/new_hunk_792.cpp,-1,12,,fatalf( xstrerror(errno));,"[""addLog""]","[[], [""fatalf"", ""xstrerror"", ""errno""]]",[17567734820066566823],5821,0:00:00
https://github.com/squid-cache/squid/commit/1fab834457cac20a8dd64038d0d5aa97dcff0ac9,18 May 2015,Fix build errors in rev.14057 and rev.14058,6,data/crawl/squid/hunk_789.cpp,,,data/crawl/squid/old_hunk_789.cpp,data/crawl/squid/new_hunk_789.cpp,10,10,fatalf( xstrerror(errno));,fatal(xstrerr(errno));,"[""updateVariable"", ""updateLog""]","[[""fatalf"", ""xstrerror""], [""fatal"", ""xstrerr""]]",[-14975703561865561642],5820,0:00:00
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,13,-1,"storeAppendPrintf(e, "" version=%d"", s->version);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""version"", ""%d"", ""s"", ""version""], []]",[-9558444992649947300],5819,"1328 days, 0:00:00"
https://github.com/squid-cache/squid/commit/1071ffed56172406d771265af76d8273ffcdb89e,26 May 2015,"Replace Packer object API with Packable API

Majority of thost patch is symbol renaming to unify the
class method names to the Packable API names.

There is effectively no logical change in this patch
despite appearances because it replaces the Packer object
which provides methods which are just wrappers pointing
to static functions which are in turn wrappers pointing
to storage buffer object methods. With direct calls to
those storage object methods (renamed).

We can now interchangebly use MemBuf or StoreEntry objects
with the packInto(Packable *) functions. Or any other
object which inherits and implements the Packable API.

We also gain 0.1% in performance (+2 RPS) by avoiding the
layers of wrapper funcions and Packer object allocate / 
deallocate cycles.",1141,data/crawl/squid/hunk_780.cpp,,,data/crawl/squid/old_hunk_780.cpp,data/crawl/squid/new_hunk_780.cpp,-1,26,,fatal(xstrerr(errno));,"[""addLog""]","[[], [""fatal"", ""xstrerr"", ""errno""]]",[2592031258201005181],5818,0:00:00
https://github.com/squid-cache/squid/commit/74addf6ce98ca89de0d44d51bccc45c69d728f1f,10 Oct 1998,Moved many common dns/redirect/authenticate functions into helper.c,2045,data/crawl/squid/hunk_6244.cpp,,,data/crawl/squid/old_hunk_6244.cpp,data/crawl/squid/new_hunk_6244.cpp,171,-1,"storeAppendPrintf(sentry, ""\nFlags key:\n\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""\\nFlags"", ""key"", ""\\n\\n""], []]",[-4873806497635168928],5817,"3041 days, 0:00:00"
https://github.com/squid-cache/squid/commit/bf3e8d5a0de0f6f59996d1a8fb88402ba2273ede,05 Jun 2015,"SourceLayout: convert helper stats display to Packable API

Requires unifying the classes Helper::Request queues which incidentally
also brings stateful helpers closer to concurrency support",192,data/crawl/squid/hunk_692.cpp,,,data/crawl/squid/old_hunk_692.cpp,data/crawl/squid/new_hunk_692.cpp,69,-1,"storeAppendPrintf(sentry, ""   S = SHUTDOWN PENDING\n"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""S"", ""SHUTDOWN"", ""PENDING\\n""], []]",[-18908474404010787604],5816,0:00:00
https://github.com/squid-cache/squid/commit/bf3e8d5a0de0f6f59996d1a8fb88402ba2273ede,05 Jun 2015,"SourceLayout: convert helper stats display to Packable API

Requires unifying the classes Helper::Request queues which incidentally
also brings stateful helpers closer to concurrency support",192,data/crawl/squid/hunk_692.cpp,,,data/crawl/squid/old_hunk_692.cpp,data/crawl/squid/new_hunk_692.cpp,22,-1,"storeAppendPrintf(sentry, ""program: %s\n"",
                      hlp->cmdline->key);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""program"", ""%s\\n"", ""hlp"", ""cmdline"", ""key""], []]",[-30445718953000698725],5815,0:00:00
https://github.com/squid-cache/squid/commit/5c51bffba7a4fba9ef7b39f381d991e4e02ee490,09 Jun 2015,"Bug 1961 partial: Move HttpRequest host:port to class URL

Moves the host:port authority details into class URL for more
modular URI management. Add URL::authority() member to generate
authority-form URIs from the class URL stored details.

Also, shuffle urlDefaultPort() to AnyP::UriScheme::defaultPort()",626,data/crawl/squid/hunk_688.cpp,,,data/crawl/squid/old_hunk_688.cpp,data/crawl/squid/new_hunk_688.cpp,8,-1,"httpHeaderPutStrf(hdr_out, HDR_HOST, ""%s:%d"",
                                  request->GetHost(),
                                  (int) request->port);",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""hdr_out"", ""HDR_HOST"", ""%s"", ""%d"", ""request"", ""GetHost"", ""int"", ""request"", ""port""], []]",[945318900776274290],5814,0:00:00
https://github.com/squid-cache/squid/commit/5c51bffba7a4fba9ef7b39f381d991e4e02ee490,09 Jun 2015,"Bug 1961 partial: Move HttpRequest host:port to class URL

Moves the host:port authority details into class URL for more
modular URI management. Add URL::authority() member to generate
authority-form URIs from the class URL stored details.

Also, shuffle urlDefaultPort() to AnyP::UriScheme::defaultPort()",626,data/crawl/squid/hunk_688.cpp,,,data/crawl/squid/old_hunk_688.cpp,data/crawl/squid/new_hunk_688.cpp,6,4,"hdr_out->putStr(HDR_HOST, request->GetHost());","hdr_out->putStr(HDR_HOST, authority.c_str());","[""updateVariable""]","[[""request"", ""GetHost""], [""authority"", ""c_str""]]",[-6342573481631189721],5813,0:00:00
https://github.com/squid-cache/squid/commit/75777642f21a186519599a5f62c4dae3df984c00,02 Jun 2015,Remove unused Atomic::Word and GNU atomics,171,data/crawl/squid/hunk_697.cpp,,,data/crawl/squid/old_hunk_697.cpp,data/crawl/squid/new_hunk_697.cpp,8,-1,"fatal(""memory_cache_shared is on, but no support for atomic operations detected"");",,"[""removeLog""]","[[""fatal"", ""memory_cache_shared"", ""is"", ""on"", ""but"", ""no"", ""support"", ""for"", ""atomic"", ""operations"", ""detected""], []]",[-5114139703971541903],5812,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b24e9ae70856a19ae8b79c764d456518ae0cf4fb,26 Mar 2015,"Move Ssl::parse_flags to Security::ParseFlags

... in preparation for making PeerOptions used by both server and client
configuation.",153,data/crawl/squid/hunk_918.cpp,,,data/crawl/squid/old_hunk_918.cpp,data/crawl/squid/new_hunk_918.cpp,55,-1,"fatalf(""Unknown ssl flag '%s'"", flag);",,"[""removeLog""]","[[""fatalf"", ""Unknown"", ""ssl"", ""flag"", ""%s"", ""flag""], []]",[-665749761150933206],5811,"53 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6bd62757606d944e54904bfc8555fcbece9958a6,21 Mar 2015,"Shuffle Ssl::parse_options to Security::ParseOptions

The function itself is generic, the options array entries are all
conditional so library agnostic.

Adjust the context creation functions to receive pre-parsed options
instead of the string to avoid circular dependency between libsquidssl
and libsecurity.",444,data/crawl/squid/hunk_921.cpp,,,data/crawl/squid/old_hunk_921.cpp,data/crawl/squid/new_hunk_921.cpp,184,-1,"fatalf(""Unknown SSL option '%s'"", option);",,"[""removeLog""]","[[""fatalf"", ""Unknown"", ""SSL"", ""option"", ""%s"", ""option""], []]",[-6261211349979421884],5810,"55 days, 12:00:00"
https://github.com/squid-cache/squid/commit/c62717bdac6c981fd58c07ed38b49cd3852613f0,30 Jun 2015,"Move tls-options= parser into Security::PeerOptions

It no longer needs to be called by the SSL code, so can be a private
member without OpenSSL library dependency.

Also, remove c_str() performance regression by upgrading to use
::Parser::Tokenizer.",93,data/crawl/squid/hunk_669.cpp,,,data/crawl/squid/old_hunk_669.cpp,data/crawl/squid/new_hunk_669.cpp,-1,5,,"fatalf(""Unknown TLS option '"" SQUIDSBUFPH ""'"", SQUIDSBUFPRINT(tok.remaining()));","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""TLS"", ""option"", ""SQUIDSBUFPH"", ""SQUIDSBUFPRINT"", ""tok"", ""remaining""]]",[14770035583713574852],5809,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,34,-1,"storeAppendPrintf(e, "" sslflags=%s"", s->sslflags);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""sslflags"", ""%s"", ""s"", ""sslflags""], []]",[-14925440976705579641],5808,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,28,-1,"storeAppendPrintf(e, "" crlfile=%s"", s->crlfile);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""crlfile"", ""%s"", ""s"", ""crlfile""], []]",[-22939110181803402459],5807,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,25,-1,"storeAppendPrintf(e, "" capath=%s"", s->capath);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""capath"", ""%s"", ""s"", ""capath""], []]",[-11859293668491330937],5806,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,22,-1,"storeAppendPrintf(e, "" cafile=%s"", s->cafile);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""cafile"", ""%s"", ""s"", ""cafile""], []]",[-18965929520452225931],5805,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,19,-1,"storeAppendPrintf(e, "" cipher=%s"", s->cipher);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""cipher"", ""%s"", ""s"", ""cipher""], []]",[627383025728602375],5804,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,16,-1,"storeAppendPrintf(e, "" options=%s"", s->options);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""options"", ""%s"", ""s"", ""options""], []]",[-7893954684300028237],5803,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/154dc8842fca8ee7a35553a44c2fe82fecb3786c,12 Feb 2008,"Importing SslBump feature from Squid3 ssl-bump branch:

        Parse/dump the newly added sslBump http_port option. The option
        does not imply an accelerated port because it only accelerates
        after intercepting a CONNECT request.

        Configure SSL Context if SSL certificate or key are specified
        for an HTTP port.",236,data/crawl/squid/hunk_4380.cpp,,,data/crawl/squid/old_hunk_4380.cpp,data/crawl/squid/new_hunk_4380.cpp,7,-1,"storeAppendPrintf(e, "" cert=%s"", s->cert);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""cert"", ""%s"", ""s"", ""cert""], []]",[-16132876345930463543],5802,"1352 days, 12:00:00"
https://github.com/squid-cache/squid/commit/9136993377e9decfef076b4fa8b14ee03f4c8a09,11 Jun 2015,"Convert enum LogTags into class LogTags

- enum sequence re-typed to LogTags_ot
- logTagsIsATcpHit() function converted to method LogTags::isTcpHit()
- strings array lookup converted to method LogTags::c_str()
- constructors and assignment assure valid values, no more need for
  external asserts before logging.",173,data/crawl/squid/hunk_686.cpp,,,data/crawl/squid/old_hunk_686.cpp,data/crawl/squid/new_hunk_686.cpp,3,3,"storeAppendPrintf(s, ""logType %s\n"", LogTags_str[http->logType]);","storeAppendPrintf(s, ""logType %s\n"", http->logType.c_str());","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""LogTags_str[http"", ""logType]""], [""http"", ""logType"", ""c_str""]]",[16264547057607872496],5801,"16 days, 0:00:00"
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_626.cpp,,,data/crawl/squid/old_hunk_626.cpp,data/crawl/squid/new_hunk_626.cpp,6,6,"header.putStr(HDR_FTP_ARGUMENTS, """");","header.putStr(Http::HdrType::FTP_ARGUMENTS, """");","[""removeVariable"", ""addVariable""]","[[""HDR_FTP_ARGUMENTS""], [""Http"", ""HdrType"", ""FTP_ARGUMENTS""]]",[12213792289752032158],5800,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_626.cpp,,,data/crawl/squid/old_hunk_626.cpp,data/crawl/squid/new_hunk_626.cpp,4,4,"header.putStr(HDR_FTP_COMMAND, ""PASV"");","header.putStr(Http::HdrType::FTP_COMMAND, ""PASV"");","[""removeVariable"", ""addVariable""]","[[""HDR_FTP_COMMAND""], [""Http"", ""HdrType"", ""FTP_COMMAND""]]",[6067555520411879372],5799,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_611.cpp,,,data/crawl/squid/old_hunk_611.cpp,data/crawl/squid/new_hunk_611.cpp,16,16,"rep->header.putStr(HDR_CONTENT_LANGUAGE, ""en"");","rep->header.putStr(Http::HdrType::CONTENT_LANGUAGE, ""en"");","[""removeVariable"", ""addVariable""]","[[""HDR_CONTENT_LANGUAGE""], [""Http"", ""HdrType"", ""CONTENT_LANGUAGE""]]",[1626935096847391812],5798,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_614.cpp,,,data/crawl/squid/old_hunk_614.cpp,data/crawl/squid/new_hunk_614.cpp,3,3,"reply->header.putStr(HDR_CONTENT_ENCODING, mime_enc);","reply->header.putStr(Http::HdrType::CONTENT_ENCODING, mime_enc);","[""removeVariable"", ""addVariable""]","[[""HDR_CONTENT_ENCODING""], [""Http"", ""HdrType"", ""CONTENT_ENCODING""]]",[9051340907168150958],5797,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_616.cpp,,,data/crawl/squid/old_hunk_616.cpp,data/crawl/squid/new_hunk_616.cpp,8,8,"hdr_out->putStr(HDR_VIA, strVia.termedBuf());","hdr_out->putStr(Http::HdrType::VIA, strVia.termedBuf());","[""removeVariable"", ""addVariable""]","[[""HDR_VIA""], [""Http"", ""HdrType"", ""VIA""]]",[1945226063156498928],5796,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_600.cpp,,,data/crawl/squid/old_hunk_600.cpp,data/crawl/squid/new_hunk_600.cpp,4,4,"httpHeaderPutStrf(hdr, HDR_CONTENT_TYPE,
                              ""multipart/byteranges; boundary=\"""" SQUIDSTRINGPH ""\"""",
                              SQUIDSTRINGPRINT(http->range_iter.boundary));","httpHeaderPutStrf(hdr, Http::HdrType::CONTENT_TYPE,
                              ""multipart/byteranges; boundary=\"""" SQUIDSTRINGPH ""\"""",
                              SQUIDSTRINGPRINT(http->range_iter.boundary));","[""removeVariable"", ""addVariable""]","[[""HDR_CONTENT_TYPE""], [""Http"", ""HdrType"", ""CONTENT_TYPE""]]",[22912001061348578708],5795,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_596.cpp,,,data/crawl/squid/old_hunk_596.cpp,data/crawl/squid/new_hunk_596.cpp,3,3,"hdr->putStr(HDR_SERVER, APP_FULLNAME);","hdr->putStr(Http::HdrType::SERVER, APP_FULLNAME);","[""removeVariable"", ""addVariable""]","[[""HDR_SERVER""], [""Http"", ""HdrType"", ""SERVER""]]",[16194839928274547414],5794,0:00:00
https://github.com/squid-cache/squid/commit/789217a2d102b1c99734afd7d48e4d4210ec009d,04 Aug 2015,"Renamed http_hdr_type to Http::HdrType, fixed some HdrType-int implicit conversions",1702,data/crawl/squid/hunk_601.cpp,,,data/crawl/squid/old_hunk_601.cpp,data/crawl/squid/new_hunk_601.cpp,3,3,"hdr->putStr(HDR_WARNING, tbuf);","hdr->putStr(Http::HdrType::WARNING, tbuf);","[""removeVariable"", ""addVariable""]","[[""HDR_WARNING""], [""Http"", ""HdrType"", ""WARNING""]]",[7832491314551335464],5793,0:00:00
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,378,-1,"fprintf(stdout, ""BH Invalid negotiate request\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""Invalid"", ""negotiate"", ""request\\n""], []]",[18267803172806194414],5792,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,377,-1,"fprintf(stderr, ""%s| %s: Invalid negotiate request [%s]\n"", LogTime(), PROGRAM, buf);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""negotiate"", ""request"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf""], []]",[24305751704748737954],5791,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,359,-1,"fprintf(stdout, ""BH quit command\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""quit"", ""command\\n""], []]",[2382764984285885200],5790,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,316,-1,"fprintf(stderr, ""%s| %s: Invalid request\n"", LogTime(), PROGRAM);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""request\\n"", ""LogTime"", ""PROGRAM""], []]",[11683222101142235699],5789,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,306,-1,"fprintf(stdout, ""BH Oversized message\n"");",,"[""removeLog""]","[[""fprintf"", ""stdout"", ""BH"", ""Oversized"", ""message\\n""], []]",[13401837287885866005],5788,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,305,-1,"fprintf(stderr, ""%s| %s: Oversized message\n"", LogTime(), PROGRAM);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Oversized"", ""message\\n"", ""LogTime"", ""PROGRAM""], []]",[10148544130211447693],5787,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,312,-1,"fprintf(stderr, ""%s| %s: Got '%s' from squid (length: %d).\n"", LogTime(), PROGRAM, buf,length);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""Got"", ""%s"", ""from"", ""squid"", ""length"", ""%d"", ""\\n"", ""LogTime"", ""PROGRAM"", ""buf"", ""length""], []]",[3528819456225505226],5786,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/77721eb240367f9d4bd82638f118c811f2e93349,05 Nov 2009,"Author: Markus Moeller huaraz@moeller.plus.com>
Update squid_kerb_auth helper

 * remove sub configure again (too many issues)

Also, by Amso Jeffries
 * naming update to negotiate_kerberos_auth
 * polished helper detection rules in configure",10781,data/crawl/squid/hunk_3547.cpp,,,data/crawl/squid/old_hunk_3547.cpp,data/crawl/squid/new_hunk_3547.cpp,286,-1,"fprintf(stderr, ""%s| %s: fgets() failed! dying..... errno=%d (%s)\n"", LogTime(), PROGRAM, ferror(stdin),
                            strerror(ferror(stdin)));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""%s"", ""fgets"", ""failed"", ""dying"", ""errno"", ""%d"", ""%s"", ""\\n"", ""LogTime"", ""PROGRAM"", ""ferror"", ""stdin"", ""strerror"", ""ferror"", ""stdin""], []]",[20226450349386740227],5785,"1068 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,403,,"fprintf(stderr, ""%s| %s: Return '%s'\n"",
                    LogTime(), PROGRAM, buff);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Return"", ""%s"", ""\\n"", ""LogTime"", ""PROGRAM"", ""buff""]]",[-4984282105989616312],5784,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,401,,"fprintf(stdout,""%s"",buff);","[""addLog""]","[[], [""fprintf"", ""stdout"", ""%s"", ""buff""]]",[-12601965087582735048],5783,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,396,,"fprintf(stderr, ""%s| %s: Error reading Kerberos helper response\n"",
                        LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Error"", ""reading"", ""Kerberos"", ""helper"", ""response\\n"", ""LogTime"", ""PROGRAM""]]",[-4723970024690683777],5782,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,391,,"fprintf(stderr,
                            ""fgets() failed! dying..... errno=%d (%s)\n"",
                            ferror(FDKOUT), strerror(ferror(FDKOUT)));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""fgets"", ""failed"", ""dying"", ""errno"", ""%d"", ""%s"", ""\\n"", ""ferror"", ""FDKOUT"", ""strerror"", ""ferror"", ""FDKOUT""]]",[-23130862641428667756],5781,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,388,,"fprintf(FDKIN, ""%s\n"",buf);","[""addLog""]","[[], [""fprintf"", ""FDKIN"", ""%s\\n"", ""buf""]]",[-679212945824533377],5780,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,385,,"fprintf(stderr, ""%s| %s: received Kerberos token\n"",
                        LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""received"", ""Kerberos"", ""token\\n"", ""LogTime"", ""PROGRAM""]]",[-3556440401682959523],5779,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,363,,"fprintf(stderr, ""%s| %s: Error reading NTLM helper response\n"",
                        LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Error"", ""reading"", ""NTLM"", ""helper"", ""response\\n"", ""LogTime"", ""PROGRAM""]]",[-13450300038191209057],5778,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,358,,"fprintf(stderr,
                            ""fgets() failed! dying..... errno=%d (%s)\n"",
                            ferror(FDNOUT), strerror(ferror(FDNOUT)));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""fgets"", ""failed"", ""dying"", ""errno"", ""%d"", ""%s"", ""\\n"", ""ferror"", ""FDNOUT"", ""strerror"", ""ferror"", ""FDNOUT""]]",[-17130652640382666338],5777,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,355,,"fprintf(FDNIN, ""%s\n"",buf);","[""addLog""]","[[], [""fprintf"", ""FDNIN"", ""%s\\n"", ""buf""]]",[-679209945724533170],5776,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,352,,"fprintf(stderr, ""%s| %s: received type %d NTLM token\n"",
                        LogTime(), PROGRAM, (int) *((unsigned char *) token +
                                                    sizeof ntlmProtocol));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""received"", ""type"", ""%d"", ""NTLM"", ""token\\n"", ""LogTime"", ""PROGRAM"", ""int"", ""*"", ""unsigned"", ""char"", ""*"", ""token"", ""sizeof"", ""ntlmProtocol""]]",[-14761247642423624596],5775,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/aadbbd7d080ef1662bfd7ea568edbb29f25fdd72,30 Dec 2014,"Crypto-NG: Base64 crypto replacement

The existing Squid base64 code had ambiguous copyright licensing. In
particular it only referenced a dead URL for source copyright
ownership details. In all likelihood this was for an Open Source
implementation, but we dont have sufficient record of the original
license terms to be certain without a long investigation.

It has also been heavily modified and customized over the decades
since importing whih complicates the issue a lot.

It also does not match any of the common industry context-based API
patterns for encoders/decoders.


This patch replaces that logic with GPLv2 licensed code from the
Nettle crypto library. Either linking the library dynamically or in
its absence embedding the logic via our libmiscencoding library.

It also updates all code to the new API, and as a byproduct removes
several layers of deprecated wrapper functions which have grown in
over the years.",839,data/crawl/squid/hunk_1091.cpp,,,data/crawl/squid/old_hunk_1091.cpp,data/crawl/squid/new_hunk_1091.cpp,-1,19,,"fprintf(stderr, ""%s| %s: Invalid base64 token [%s]\n"", LogTime(), PROGRAM, buf+3);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Invalid"", ""base64"", ""token"", ""[%s]\\n"", ""LogTime"", ""PROGRAM"", ""buf"", ""3""]]",[-5372266154016776204],5774,"127 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,342,,"fprintf(stderr, ""%s| %s: Error allocating memory for token\n"", LogTime(), PROGRAM);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Error"", ""allocating"", ""memory"", ""for"", ""token\\n"", ""LogTime"", ""PROGRAM""]]",[6193949009428647455],5773,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb3dea38c796fbf091b023e98e832b053c750453,15 Apr 2011,"negotiate_wrapper_auth: version 1.0.1

A helper to perform Negotaite authentication in both its Negotiate/NTLM
and Negotiate/Kerberos forms.
Makes use of additional Squid helpers after unwrapping the header token.",516,data/crawl/squid/hunk_2654.cpp,,,data/crawl/squid/old_hunk_2654.cpp,data/crawl/squid/new_hunk_2654.cpp,-1,338,,"fprintf(stderr, ""%s| %s: Decode '%s' (decoded length: %d).\n"",
                    LogTime(), PROGRAM, buf + 3, (int) length);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""Decode"", ""%s"", ""decoded"", ""length"", ""%d"", ""\\n"", ""LogTime"", ""PROGRAM"", ""buf"", ""3"", ""int"", ""length""]]",[-8963563524286375559],5772,"805 days, 0:00:00"
https://github.com/squid-cache/squid/commit/971003b0b122cfb0b48c21202e7b3cdd8374c785,26 Sep 2015,"Fix cache_peer login=PASS(THRU) after CVE-2015-5400

The patch for CVE-2015-5400 converts all non-200 peer responses
into 502 Bad Gateway responses when relaying a CONNECT to a peer.

This happens to break login=PASS and login=PASSTHRU behaviour
which relies on the 401 and 407 status being relayed transparently.

We need to relay the auth server responses as-is when login= is
set to PASS or PASSTHRU but then unconditionally close the
connections to prevent CVE-2015-5400 from occuring.",42,data/crawl/squid/hunk_569.cpp,,,data/crawl/squid/old_hunk_569.cpp,data/crawl/squid/new_hunk_569.cpp,3,3,"informUserOfPeerError(""huge CONNECT response from peer"");","informUserOfPeerError(""huge CONNECT response from peer"", 0);","[""addContent""]","[[], [""0""]]",[6144018481],5771,0:00:00
https://github.com/squid-cache/squid/commit/0caa282007102ca0fd2ee97178e222fadc1b3f8c,25 Sep 2015,Display username cache key in cache manager report,9,data/crawl/squid/hunk_572.cpp,,,data/crawl/squid/old_hunk_572.cpp,data/crawl/squid/new_hunk_572.cpp,11,11,"storeAppendPrintf(output, ""%-15s %-9s %-9d %-9d %s\n"",
                          Auth::Type_str[auth_user->auth_type],
                          CredentialState_str[auth_user->credentials()],
                          auth_user->ttl(),
                          static_cast<int32_t>(auth_user->expiretime - squid_curtime + ::Config.authenticateTTL),
                          auth_user->username()
                         );","storeAppendPrintf(output, ""%-15s %-9s %-9d %-9d %s\t"" SQUIDSBUFPH ""\n"",
                          Auth::Type_str[auth_user->auth_type],
                          CredentialState_str[auth_user->credentials()],
                          auth_user->ttl(),
                          static_cast<int32_t>(auth_user->expiretime - squid_curtime + ::Config.authenticateTTL),
                          auth_user->username(),
                          SQUIDSBUFPRINT(auth_user->userKey())
                         );","[""updateContent"", ""addContent"", ""addVariable""]","[[""%s\\n""], [""%s\\t"", ""SQUIDSBUFPH"", ""\\n"", ""SQUIDSBUFPRINT"", ""auth_user"", ""userKey""]]",[16934003893846475150],5770,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/0caa282007102ca0fd2ee97178e222fadc1b3f8c,25 Sep 2015,Display username cache key in cache manager report,9,data/crawl/squid/hunk_572.cpp,,,data/crawl/squid/old_hunk_572.cpp,data/crawl/squid/new_hunk_572.cpp,3,3,"storeAppendPrintf(output, ""\n%-15s %-9s %-9s %-9s %s\n"",
                      ""Type"",
                      ""State"",
                      ""Check TTL"",
                      ""Cache TTL"",
                      ""Username"");","storeAppendPrintf(output, ""\n%-15s %-9s %-9s %-9s %s\t%s\n"",
                      ""Type"",
                      ""State"",
                      ""Check TTL"",
                      ""Cache TTL"",
                      ""Username"", ""Key"");","[""updateContent"", ""addContent""]","[[""%s\\n""], [""%s\\t%s\\n"", ""Key""]]",[8809333121076691718],5769,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d21237557c861059520981bb99b42f54bc9d7ff7,03 Sep 2015,Migrate cachemgr action to UserNameCache,46,data/crawl/squid/hunk_582.cpp,,,data/crawl/squid/old_hunk_582.cpp,data/crawl/squid/new_hunk_582.cpp,7,4,"storeAppendPrintf(output, ""Next Garbage Collection in %d seconds.\n"",
                      static_cast<int32_t>(last_discard + ::Config.authenticateGCInterval - squid_curtime));","storeAppendPrintf(output, ""Cached Usernames: %d"", static_cast<int32_t>(userlist.size()));","[""updateVariable"", ""moveVariable"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""Next"", ""Garbage"", ""Collection"", ""in"", ""seconds"", ""\\n"", ""last_discard"", ""Config"", ""authenticateGCInterval"", ""squid_curtime""], [""Cached"", ""Usernames"", ""userlist"", ""size""]]",[8068786384572661806],5768,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d21237557c861059520981bb99b42f54bc9d7ff7,03 Sep 2015,Migrate cachemgr action to UserNameCache,46,data/crawl/squid/hunk_582.cpp,,,data/crawl/squid/old_hunk_582.cpp,data/crawl/squid/new_hunk_582.cpp,6,3,"storeAppendPrintf(output, ""Cached Usernames: %d of %d\n"", proxy_auth_username_cache->count, proxy_auth_username_cache->size);",authenticateCachedUsersList();,"[""updateLog"", ""removeVariable"", ""removeContent""]","[[""storeAppendPrintf"", ""output"", ""Cached"", ""Usernames"", ""%d"", ""of"", ""%d\\n"", ""proxy_auth_username_cache"", ""count"", ""proxy_auth_username_cache"", ""size""], [""authenticateCachedUsersList""]]",[-2467527697564230888],5767,"14 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fbdf945d33765c02929795b8354c6cdd55d67ba4,02 Oct 2015,Cleanup various spelling errors,22,data/crawl/squid/hunk_562.cpp,,,data/crawl/squid/old_hunk_562.cpp,data/crawl/squid/new_hunk_562.cpp,3,3,"fprintf(stderr, ""server1a@domain1:server1b@domain1:server2@domain2:server3@:server4 - A list is build with a colon as seperator\n"");","fprintf(stderr, ""server1a@domain1:server1b@domain1:server2@domain2:server3@:server4 - A list is build with a colon as separator\n"");","[""updateContent""]","[[""seperator\\n""], [""separator\\n""]]",[5727306902760472380],5766,0:00:00
https://github.com/squid-cache/squid/commit/474f076ef246eb4c9acab986180d82dcafd3e583,10 Oct 2015,"Shuffle tls-dh= options to libsecurity

* create class ServerOptions derived from class PeerOptions to hold
  server-specific configuration settings.

* split DH, ECDH, and DH params settings during configuration instead of
  on every context initialization.",258,data/crawl/squid/hunk_559.cpp,,,data/crawl/squid/old_hunk_559.cpp,data/crawl/squid/new_hunk_559.cpp,7,-1,"storeAppendPrintf(e, "" tls-dh=%s"", s->tls_dh);",,"[""removeLog""]","[[""storeAppendPrintf"", ""e"", ""tls"", ""dh"", ""%s"", ""s"", ""tls_dh""], []]",[-11984864398691570101],5765,12:00:00
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/hunk_698.cpp,,,data/crawl/squid/old_hunk_698.cpp,data/crawl/squid/new_hunk_698.cpp,65,-1,"fatal(""unknown external_acl format error"");",,"[""removeLog""]","[[""fatal"", ""unknown"", ""external_acl"", ""format"", ""error""], []]",[-7503529408969980762],5764,"67 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/hunk_698.cpp,,,data/crawl/squid/old_hunk_698.cpp,data/crawl/squid/new_hunk_698.cpp,19,-1,"storeAppendPrintf(sentry, "" %%<h{%s:%s}"", format->header, format->member);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%%"", ""h"", ""%s"", ""%s"", ""format"", ""header"", ""format"", ""member""], []]",[-12951319307258242054],5763,"67 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/hunk_698.cpp,,,data/crawl/squid/old_hunk_698.cpp,data/crawl/squid/new_hunk_698.cpp,15,-1,"storeAppendPrintf(sentry, "" %%<h{%s}"", format->header);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%%"", ""h"", ""%s"", ""format"", ""header""], []]",[-3131119370651702705],5762,"67 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/hunk_698.cpp,,,data/crawl/squid/old_hunk_698.cpp,data/crawl/squid/new_hunk_698.cpp,11,-1,"storeAppendPrintf(sentry, "" %%>ha{%s:%s}"", format->header, format->member);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%%"", ""ha"", ""%s"", ""%s"", ""format"", ""header"", ""format"", ""member""], []]",[-12964631373922322168],5761,"67 days, 12:00:00"
https://github.com/squid-cache/squid/commit/4e56d7f6084e46d23cee970286ea57b01b04b4d4,29 May 2015,"Convert external_acl_type directive format tokens

Use libformat tokenizer and string assembler mechanisms instead of
custom code for external helpers. This allows any logformat code and
transaction data to be used by the external ACL helper.

The old helper format tokens are added to the libformat for backward
compatibility.

Known issue:
  all access lists which use an exetrnal_acl_type helper now require
  setting up the ACL Checklist with an AccessLogEntry referencing any
  special token data the old format tokens needed.",733,data/crawl/squid/hunk_698.cpp,,,data/crawl/squid/old_hunk_698.cpp,data/crawl/squid/new_hunk_698.cpp,7,-1,"storeAppendPrintf(sentry, "" %%>ha{%s}"", format->header);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""%%"", ""ha"", ""%s"", ""format"", ""header""], []]",[-3144431437315782819],5760,"67 days, 12:00:00"
https://github.com/squid-cache/squid/commit/e02f963ce8082f66bc3656e16112f91d5b937d06,18 Nov 2015,"Bug 4368: A simpler and more robust HTTP request line parser.

The primary changes are: Removed incremental parsing and revised parsing
sequence to accept virtually any URI (by default and also configurable
as before).

Also doubled hard-coded 16-character method length limit.

No changes to parsing HTTP header fields (a.k.a. the MIME block) were
intended.

Known side effects:

* Drastically simpler code.
* Some unit test case adjustments.
* The new parser no longer treats some request lines ending with
  ""HTTP/1.1"" as HTTP/0.9 requests for URIs that end with ""HTTP/1.1"".
* The new parser no longer re-allocates character sets while parsing
  each request.

Intentional Changes:

* Removal of incremental request line parsing.

Squid parsed the request line incrementally. That optimization was
unnecessary:
  - most request lines are short enough to fit into one network I/O,
  - the long lines contain only a single long field (the URI), and
  - the user code must not use incomplete parsing results anyway.

Incremental parsing made code much more complex and possibly slower than
necessary.

The only place where incremental parsing of request lines potentially
makes sense is the URI field itself, and only if we want to accept URIs
exceeding request buffer capacity. Neither the old code, nor the
simplified one do that right now.


* Accept virtually any request-target (when allowed).

1. relaxed_header_parser allows whitespace in request-target.
2. relaxed_header_parser combined with USE_HTTP_VIOLATIONS now allows
   any characters except non-whitespace CTL characters (see RFC 5234
   appendix B.1) in the message request-target (aka URI).

#2 being the default build and configuration situation allows virtually
any URI that Squid can isolate by stripping method (prefix) and
HTTP/version (suffix) off the request line. This approach allows Squid to
forward slightly malformed (in numerous ways) URIs instead of misplacing
on the Squid admin the burden of explaining why something does not work
going through Squid but works fine when going directly or through another
popular proxy (or through an older version of Squid!).

URIs in what Squid considers an HTTP/0.9 request obey the same rules.
Whether the rules should differ for HTTP/0 is debatable, but the current
implementation is the simplest possible one, and the code makes it easy
to add complex rules.


* Code simplification.

RequestParser::parseRequestFirstLine() is now a simple sequence of
sequential if statements. There is no longer a path dedicated for the
strict parser. The decisions about parsing individual fields and
delimiters are mostly isolated to the corresponding methods.


* Unit test cases adjustments.

Removal of incremental request line parsing means that we should not
check parsed fields when parsing fails or has not completed yet.

Some test cases made arguably weird decisions apparently to accommodate
the old parser. The expectations of those test cases are more natural now.

Also, added optional (and disabled by default) debugging, to help pin-point
failures to test sub-cases that CPPUNIT cannot see.

Changing request methods to ""none"" in test sub-cases with invalid input
was not technically necessary because the new code ignores the method
when parsing fails, but it may help whoever would decide to reduce test
code duplication (by replacing hand-written expected outcomes for failed
test cases with a constant assignment or function call).",687,data/crawl/squid/hunk_518.cpp,,,data/crawl/squid/old_hunk_518.cpp,data/crawl/squid/new_hunk_518.cpp,7,-1,"printf(""TEST @%d, in=%u: "" SQUIDSBUFPH ""\n"", line, input.length(), SQUIDSBUFPRINT(input));",,"[""removeLog""]","[[""printf"", ""TEST"", ""%d"", ""in"", ""%u"", ""SQUIDSBUFPH"", ""\\n"", ""line"", ""input"", ""length"", ""SQUIDSBUFPRINT"", ""input""], []]",[-11668271068217464555],5759,"13 days, 0:00:00"
https://github.com/squid-cache/squid/commit/fcc444e3db9ac978f7ab74d77f56dfe2c499652b,07 Nov 2015,"Split core Server operations from ConnStateData

This improves the servers/libserver.la class hierarchy in
preparation for HTTP/2 and other non-HTTP/1.1 protocol support.

The basic I/O functionality of ConnStateData is moved to Server
class and a set of virtual methods designed to allow for child
class implementation of data processing operations.

No logic is changed in this patch, just symbol renaming and
moving of method logics as-is into libservers.la",647,data/crawl/squid/hunk_546.cpp,,,data/crawl/squid/old_hunk_546.cpp,data/crawl/squid/new_hunk_546.cpp,2,2,"storeAppendPrintf(s, ""\tin: buf %p, used %ld, free %ld\n"",
                              conn->in.buf.c_str(), (long int) conn->in.buf.length(), (long int) conn->in.buf.spaceSize());","storeAppendPrintf(s, ""\tin: buf %p, used %ld, free %ld\n"",
                              conn->inBuf.rawContent(), (long int) conn->inBuf.length(), (long int) conn->inBuf.spaceSize());","[""updateVariable"", ""removeVariable""]","[[""in"", ""buf"", ""c_str"", ""in"", ""buf"", ""in"", ""buf""], [""inBuf"", ""rawContent"", ""inBuf"", ""inBuf""]]",[-18168544405400053205],5758,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/42a5dae8b02fdd0925abfe982d5345110463275d,07 Dec 2015,"Cleanup: pass PeerOptions to sslCreateClientContext()

... to reduce context creation code and simplify upcoming libsecurity
migration steps.",24,data/crawl/squid/hunk_485.cpp,,,data/crawl/squid/old_hunk_485.cpp,data/crawl/squid/new_hunk_485.cpp,15,-1,"fatalf(""Failed to allocate SSL context: %s\n"",
               ERR_error_string(ssl_error, NULL));",,"[""removeLog""]","[[""fatalf"", ""Failed"", ""to"", ""allocate"", ""SSL"", ""context"", ""%s\\n"", ""ERR_error_string"", ""ssl_error"", ""NULL""], []]",[3205522229705907561],5757,"3 days, 12:00:00"
https://github.com/squid-cache/squid/commit/21cd322727eaea02c573b2f5727e2e6ee6aba614,08 Dec 2015,"Refactor ClientSocketContext write(2) using Server:: write methods

Writing to the client connection is scoped as an action for class Server
and its child classes. There is no need for ClientSocketContext to be
providing the callback handlers and performing I/O error handling.

With Server providing the current write handler we can move from
CBDATA callbacks to AsyncCall. Initial testing indicates this has some
minor performance benefit.",127,data/crawl/squid/hunk_484.cpp,,,data/crawl/squid/old_hunk_484.cpp,data/crawl/squid/new_hunk_484.cpp,-1,25,,pipeline.front();,"[""addLog""]","[[], [""pipeline"", ""front""]]",[-11952880401463365318],5756,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/885f0ecf9b7d028ee78a680b25ecd73712ffe53c,05 Dec 2015,Cleanup TLS: shuffle context creation to libsecurity,83,data/crawl/squid/hunk_487.cpp,,,data/crawl/squid/old_hunk_487.cpp,data/crawl/squid/new_hunk_487.cpp,-1,26,,"fatal(""Failed to allocate TLS client context: No TLS library\n"");","[""addLog""]","[[], [""fatal"", ""Failed"", ""to"", ""allocate"", ""TLS"", ""client"", ""context"", ""No"", ""TLS"", ""library\\n""]]",[-12278005017212920364],5755,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/885f0ecf9b7d028ee78a680b25ecd73712ffe53c,05 Dec 2015,Cleanup TLS: shuffle context creation to libsecurity,83,data/crawl/squid/hunk_487.cpp,,,data/crawl/squid/old_hunk_487.cpp,data/crawl/squid/new_hunk_487.cpp,-1,22,,"fatalf(""Failed to allocate TLS client context: error=%d\n"", x);","[""addLog""]","[[], [""fatalf"", ""Failed"", ""to"", ""allocate"", ""TLS"", ""client"", ""context"", ""error"", ""%d\\n"", ""x""]]",[18170391452902056583],5754,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/885f0ecf9b7d028ee78a680b25ecd73712ffe53c,05 Dec 2015,Cleanup TLS: shuffle context creation to libsecurity,83,data/crawl/squid/hunk_487.cpp,,,data/crawl/squid/old_hunk_487.cpp,data/crawl/squid/new_hunk_487.cpp,-1,16,,"fatalf(""Failed to allocate TLS client context: %s\n"", x);","[""addLog""]","[[], [""fatalf"", ""Failed"", ""to"", ""allocate"", ""TLS"", ""client"", ""context"", ""%s\\n"", ""x""]]",[9885269667964676197],5753,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/fcc444e3db9ac978f7ab74d77f56dfe2c499652b,07 Nov 2015,"Split core Server operations from ConnStateData

This improves the servers/libserver.la class hierarchy in
preparation for HTTP/2 and other non-HTTP/1.1 protocol support.

The basic I/O functionality of ConnStateData is moved to Server
class and a set of virtual methods designed to allow for child
class implementation of data processing operations.

No logic is changed in this patch, just symbol renaming and
moving of method logics as-is into libservers.la",647,data/crawl/squid/hunk_544.cpp,,,data/crawl/squid/old_hunk_544.cpp,data/crawl/squid/new_hunk_544.cpp,11,11,"proxyProtocolError(in.buf.length() > 107? ""PROXY/1.0 error: missing CRLF"" : NULL);","proxyProtocolError(inBuf.length() > 107? ""PROXY/1.0 error: missing CRLF"" : NULL);","[""updateVariable"", ""removeVariable""]","[[""in"", ""buf""], [""inBuf""]]",[-8480006314502522670],5752,"18 days, 12:00:00"
https://github.com/squid-cache/squid/commit/21cd322727eaea02c573b2f5727e2e6ee6aba614,08 Dec 2015,"Refactor ClientSocketContext write(2) using Server:: write methods

Writing to the client connection is scoped as an action for class Server
and its child classes. There is no need for ClientSocketContext to be
providing the callback handlers and performing I/O error handling.

With Server providing the current write handler we can move from
CBDATA callbacks to AsyncCall. Initial testing indicates this has some
minor performance benefit.",127,data/crawl/squid/hunk_482.cpp,,,data/crawl/squid/old_hunk_482.cpp,data/crawl/squid/new_hunk_482.cpp,3,3,"fatal(""Hit unreachable code in clientWriteComplete\n"");","fatal(""Hit unreachable code in ClientSocketContext::writeComplete\n"");","[""updateContent""]","[[""clientWriteComplete\\n""], [""ClientSocketContext"", ""writeComplete\\n""]]",[-4898555348342993915],5751,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/83b40f50d8bd32363c7c43d0260b23e3206fbdc1,25 Nov 2015,"Cleanup: Refactor ConnStateData pipeline handling

This refactors the request pipeline management API to use std::list
instead of a custom linked-list with accessors spread over both
ConnStateData and ClientSocketContext.

To do this a new class Pipeline is created with methods wrapping
std::list API and extending it slightly to meet the HTTP/1.1 pipeline
behaviours and perform basic stats gathering. The pipeline management
methods and state variables are moved inside this class.

ClientSocketContext was performing several layering violations in
relation to ConnStateData when one transaction ended and the next needed
starting. Treating the pipeline properly as a std::list forced removal
of that violation.

* actions for starting or resuming a transaction on the connection are
now moved to ConnStateData::kick(). Which gets called after each
transaction completes.
 - with some further cleanup it can be called at any point the
ConnStateData needs to resume processing. However, that is left out of
scope for this patch.

* the ClientSocketContext scope now ends when the finished() method is
used to mark completion of these contexts transactions. Which will mark
itself done and de-register from the Pipeline queue. The ConnStateData
kick() method still needs to be called to resume other transactions
processing.

* the queue is now holding RefCounted Pointers. So that the
ClientSocketContext destructor no longer needs to be careful of
registrations, and the queue entries are guaranteed to still exist while
queued.

* The old freeAllContexts() and notifyAllContexts(int) members of
ConnStateData have been combined into Pipeline::terminateAll(int).



The ClientSocketContext and ConnStateData documentation is updated to
describe what they do in regards to connection and transaction processing.


Initial testing revealed CONNECT tunnels always being logged as ABORTED.
This turns out to be techincally correct, since the only way a tunnel
can finish is for client or server to just close the connection.
However, it is not right to log these as abnormal aborts. Instead, I
have now made the context be finished() just prior to the
TunnelStateData being destroyed. That way normal closure should show up
only as TUNNEL, but timeouts and I/O errors should still be recorded as
abnormal.


Two potential bugs have been highlighted:

* The on_unsupported_protocol handling function appears to be a bit
broken. It pop()'s contexts off the pipeline directly without going
through the proper finished() process to release their state data. I
have highlighted that with an XXX and comment.

* The ssl-bump handling logic switching to TLS begins with a terminateAll(0)
run on all active contexts. It does not check whether there is any existing
pipeline of requests waiting to be processed. And the action prematurely
purges the bumped CONNECT message context, which should be closed properly
and logged as successful.",582,data/crawl/squid/hunk_490.cpp,,,data/crawl/squid/old_hunk_490.cpp,data/crawl/squid/new_hunk_490.cpp,8,8,"initiateClose(""STREAM_COMPLETE NOKEEPALIVE"");",finished();,"[""updateLog"", ""removeContent""]","[[""initiateClose"", ""STREAM_COMPLETE"", ""NOKEEPALIVE""], [""finished""]]",[8496373688227724293],5750,"9 days, 12:00:00"
https://github.com/squid-cache/squid/commit/94c86ca4ced2078f739c0c74a31f5bad9fa8f858,18 Nov 2015,ext_unix_group_acl: Add support via -r flag to strip @REALM from usernames,13,data/crawl/squid/hunk_519.cpp,,,data/crawl/squid/old_hunk_519.cpp,data/crawl/squid/new_hunk_519.cpp,-1,3,,"fprintf(stderr,
            ""-r			Strip Kerberos realm from usernames\n"");
}

int;","[""addLog""]","[[], [""fprintf"", ""stderr"", ""r"", ""Strip"", ""Kerberos"", ""realm"", ""from"", ""usernames\\n"", ""int""]]",[-17687010202151829343],5749,"13 days, 0:00:00"
https://github.com/squid-cache/squid/commit/37c7518a41d2426542b3bda94d32986c79c03837,06 Nov 2015,"Allow unlimited LDAP search filter for ext_ldap_group_acl helper.

The LDAP search filter in ext_ldap_group_acl is limited to 256 characters.
In some environments the user DN or group filter can be larger than this
limitation.
This patch uses dynamic allocated buffers for LDAP search filters.

This is a Measurement Factory project",225,data/crawl/squid/hunk_548.cpp,,,data/crawl/squid/old_hunk_548.cpp,data/crawl/squid/new_hunk_548.cpp,177,-1,"fprintf(stderr, PROGRAM_NAME "": WARNING: User '%s' not found in '%s'\n"", login, searchbase);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""User"", ""%s"", ""not"", ""found"", ""in"", ""%s"", ""\\n"", ""login"", ""searchbase""], []]",[652222363118987845],5748,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/37c7518a41d2426542b3bda94d32986c79c03837,06 Nov 2015,"Allow unlimited LDAP search filter for ext_ldap_group_acl helper.

The LDAP search filter in ext_ldap_group_acl is limited to 256 characters.
In some environments the user DN or group filter can be larger than this
limitation.
This patch uses dynamic allocated buffers for LDAP search filters.

This is a Measurement Factory project",225,data/crawl/squid/hunk_548.cpp,,,data/crawl/squid/old_hunk_548.cpp,data/crawl/squid/new_hunk_548.cpp,168,148,"fprintf(stderr, PROGRAM_NAME "": WARNING: SSL error %d (%s)\n"", sslerr, ldapssl_err2string(sslerr));","debug(""user filter '%s', searchbase '%s'\n"", filter.c_str(), searchbase.c_str());","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""WARNING"", ""SSL"", ""error"", ""%d"", ""sslerr"", ""ldapssl_err2string"", ""sslerr""], [""debug"", ""user"", ""filter"", ""searchbase"", ""%s"", ""filter"", ""c_str"", ""searchbase"", ""c_str""]]",[46269809388562088925],5747,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/37c7518a41d2426542b3bda94d32986c79c03837,06 Nov 2015,"Allow unlimited LDAP search filter for ext_ldap_group_acl helper.

The LDAP search filter in ext_ldap_group_acl is limited to 256 characters.
In some environments the user DN or group filter can be larger than this
limitation.
This patch uses dynamic allocated buffers for LDAP search filters.

This is a Measurement Factory project",225,data/crawl/squid/hunk_548.cpp,,,data/crawl/squid/old_hunk_548.cpp,data/crawl/squid/new_hunk_548.cpp,105,71,"fprintf(stderr, PROGRAM_NAME "": ERROR: Failed to construct LDAP search filter. filter=\""%s\"", user=\""%s\"", group=\""%s\""\n"", filter, member, group);",searchBaseStream.str();,"[""addLog"", ""removeVariable"", ""removeContent"", ""removeLog""]","[[""fprintf"", ""stderr"", ""PROGRAM_NAME"", ""ERROR"", ""Failed"", ""to"", ""construct"", ""LDAP"", ""search"", ""filter"", ""filter"", ""\\"", ""%s\\"", ""user"", ""\\"", ""%s\\"", ""group"", ""\\"", ""%s\\"", ""\\n"", ""filter"", ""member"", ""group""], [""searchBaseStream"", ""str""]]",[-1037921730804843840],5746,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/37c7518a41d2426542b3bda94d32986c79c03837,06 Nov 2015,"Allow unlimited LDAP search filter for ext_ldap_group_acl helper.

The LDAP search filter in ext_ldap_group_acl is limited to 256 characters.
In some environments the user DN or group filter can be larger than this
limitation.
This patch uses dynamic allocated buffers for LDAP search filters.

This is a Measurement Factory project",225,data/crawl/squid/hunk_548.cpp,,,data/crawl/squid/old_hunk_548.cpp,data/crawl/squid/new_hunk_548.cpp,82,-1,"fprintf(stderr, ""ERROR: Filter too large\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""ERROR"", ""Filter"", ""too"", ""large\\n""], []]",[-1201216559385159430],5745,"19 days, 0:00:00"
https://github.com/squid-cache/squid/commit/435c72b07c5b7ebf782049cd2b50abe79a6f7db5,15 Jan 2016,"Bug 4005: Dynamic certificate cache exceeds dynamic_cert_mem_cache_size

* disable the use of system CA by default to verify client connection
  certificates. Since the use of client certificates is rare.

* no change to verification of upstream server or peer certificates.
  Since the use of system CA to sign server certificates is common.

* the new ""default-ca"" configuration option and its documentation are
  updated to make the situation more obvious amongst the other TLS options
  changes in Squid-4.

* the action of the sslflags=NO_DEFAULT_CA is already deprecated, so no
  change when it is used. On port lines it now merely sets the default.

It may be a good idea to also disable system CA use for cache_peer and
ICAPS connections. For now they are left unchanged.",75,data/crawl/squid/hunk_408.cpp,,,data/crawl/squid/old_hunk_408.cpp,data/crawl/squid/new_hunk_408.cpp,-1,9,,"fatalf(""ERROR: previous default-ca settings conflict with %s"", token);","[""addLog""]","[[], [""fatalf"", ""ERROR"", ""previous"", ""default"", ""ca"", ""settings"", ""conflict"", ""with"", ""%s"", ""token""]]",[38334019282850093747],5744,0:00:00
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,25 Jan 2016,"Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends ""150 Opening..."" to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends ""451 Forbidden"" to the FTP client.
 * The FTP server sends ""500 OOPS: setsockopt: linger"" to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project.",221,data/crawl/squid/hunk_400.cpp,,,data/crawl/squid/old_hunk_400.cpp,data/crawl/squid/new_hunk_400.cpp,11,10,"writeCustomReply(451, ""Server error; transfer aborted"");",userDataCompletionCheckpoint(451);,"[""updateLog"", ""removeContent""]","[[""writeCustomReply"", ""Server"", ""error"", ""transfer"", ""aborted""], [""userDataCompletionCheckpoint""]]",[-3986962145599181620],5743,0:00:00
https://github.com/squid-cache/squid/commit/92cfc72f72e0dfd7509337fdee2104d15cb4000f,25 Jan 2016,"Invalid FTP connection handling on blocked content.

FTP client gets stuck after the following chain of events:
 * Client requests a file that will be blocked by ICAP.
 * Squid starts downloading the file from the FTP server
   and sends ""150 Opening..."" to the FTP client.
 * Squid aborts the data connection with the FTP server
   as soon as the ICAP service blocks it.
 * Squid sends ""451 Forbidden"" to the FTP client.
 * The FTP server sends ""500 OOPS: setsockopt: linger"" to Squid.
 * Squid terminates the control connection to the FTP server.
 * Squid establishes a new control connection to the FTP server
   but does not authenticate itself.
 * Further commands from the FTP client do not work any more.

The above and many similar problems exist because Squid handles
FTP client-to-squid and squid-to-FTP server data connections
independently from each other. In many cases, one connection does
not get notified about the problems with the other connection.

This patch:
  - Add Ftp::MasterState::userDataDone to record received
    the FTP client final response status code to sent (or to be send)
    to the client.
  - The Ftp::MasterState::waitForOriginData flag to hold status of the
    squid-to-server side. If the squid-to-server side is not finishes
    yet this is true.
  - Send a control reply to the FTP client only after the data transfered
    on both server and client sides.
  - Split Client::abortTransaction to Client::abortOnData and to
    Client::abortAll()
  - Implement the Ftp::Relay::abortOnData() and Ftp::Relay::Abort()
    (i.e., StoreEntry abort handler) to avoid closing the control
    connection when the data connection is closed unexpectedly.

This is a Measurement Factory project.",221,data/crawl/squid/hunk_398.cpp,,,data/crawl/squid/old_hunk_398.cpp,data/crawl/squid/new_hunk_398.cpp,-1,6,,abortAll(reason);,"[""addLog""]","[[], [""abortAll"", ""reason""]]",[-1798597281080182211],5742,0:00:00
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_417.cpp,,,data/crawl/squid/old_hunk_417.cpp,data/crawl/squid/new_hunk_417.cpp,-1,483,,"httpHeaderPutStrf(hdr, Http::HdrType::CONTENT_TYPE,
                              ""multipart/byteranges; boundary=\"""" SQUIDSTRINGPH ""\"""",
                              SQUIDSTRINGPRINT(http->range_iter.boundary));","[""addLog""]","[[], [""httpHeaderPutStrf"", ""hdr"", ""Http"", ""HdrType"", ""CONTENT_TYPE"", ""multipart/byteranges"", ""boundary"", ""\\"", ""SQUIDSTRINGPH"", ""\\"", ""SQUIDSTRINGPRINT"", ""http"", ""range_iter"", ""boundary""]]",[21143325136975783723],5741,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_417.cpp,,,data/crawl/squid/old_hunk_417.cpp,data/crawl/squid/new_hunk_417.cpp,-1,253,,"fatal (""unreachable code\n"");","[""addLog""]","[[], [""fatal"", ""unreachable"", ""code\\n""]]",[-11845206034455773657],5740,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_417.cpp,,,data/crawl/squid/old_hunk_417.cpp,data/crawl/squid/new_hunk_417.cpp,-1,93,,"initiateClose(""STREAM_UNPLANNED_COMPLETE"");","[""addLog""]","[[], [""initiateClose"", ""STREAM_UNPLANNED_COMPLETE""]]",[9768814549245201169],5739,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_416.cpp,,,data/crawl/squid/old_hunk_416.cpp,data/crawl/squid/new_hunk_416.cpp,45,-1,"initiateClose(""STREAM_FAILED"");",,"[""removeLog""]","[[""initiateClose"", ""STREAM_FAILED""], []]",[774983655038102417],5738,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_416.cpp,,,data/crawl/squid/old_hunk_416.cpp,data/crawl/squid/new_hunk_416.cpp,41,-1,"initiateClose(""STREAM_UNPLANNED_COMPLETE"");",,"[""removeLog""]","[[""initiateClose"", ""STREAM_UNPLANNED_COMPLETE""], []]",[-9768814549245201169],5737,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_416.cpp,,,data/crawl/squid/old_hunk_416.cpp,data/crawl/squid/new_hunk_416.cpp,19,-1,"initiateClose(""failure or true request status"");",,"[""removeLog""]","[[""initiateClose"", ""failure"", ""or"", ""true"", ""request"", ""status""], []]",[6969606714274698964],5736,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_415.cpp,,,data/crawl/squid/old_hunk_415.cpp,data/crawl/squid/new_hunk_415.cpp,158,-1,"fatal (""unreachable code\n"");",,"[""removeLog""]","[[""fatal"", ""unreachable"", ""code\\n""], []]",[11845206034455773657],5735,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/d6fdeb417b427cf8140f1b82c9777b713383dcd6,09 Jan 2016,Shuffle Http::StreamContext methods to libsquid-http.la,1479,data/crawl/squid/hunk_414.cpp,,,data/crawl/squid/old_hunk_414.cpp,data/crawl/squid/new_hunk_414.cpp,94,-1,"httpHeaderPutStrf(hdr, Http::HdrType::CONTENT_TYPE,
                              ""multipart/byteranges; boundary=\"""" SQUIDSTRINGPH ""\"""",
                              SQUIDSTRINGPRINT(http->range_iter.boundary));",,"[""removeLog""]","[[""httpHeaderPutStrf"", ""hdr"", ""Http"", ""HdrType"", ""CONTENT_TYPE"", ""multipart/byteranges"", ""boundary"", ""\\"", ""SQUIDSTRINGPH"", ""\\"", ""SQUIDSTRINGPRINT"", ""http"", ""range_iter"", ""boundary""], []]",[-21143325136975783723],5734,"11 days, 0:00:00"
https://github.com/squid-cache/squid/commit/39f6946553d9da5d2ee174448b05b8603c57006a,13 May 2016,merge from trunk-r14667,3158,data/crawl/squid/hunk_263.cpp,,,data/crawl/squid/old_hunk_263.cpp,data/crawl/squid/new_hunk_263.cpp,2,2,"storeAppendPrintf(sentry, ""IPcache Entries In Use:  %d\n"",
                      memInUse(MEM_IPCACHE_ENTRY));","storeAppendPrintf(sentry, ""IPcache Entries In Use:  %d\n"",
                      ipcache_entry::UseCount());","[""removeVariable"", ""addVariable""]","[[""memInUse"", ""MEM_IPCACHE_ENTRY""], [""ipcache_entry"", ""UseCount""]]",[-12799315290253497123],5733,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/39f6946553d9da5d2ee174448b05b8603c57006a,13 May 2016,merge from trunk-r14667,3158,data/crawl/squid/hunk_261.cpp,,,data/crawl/squid/old_hunk_261.cpp,data/crawl/squid/new_hunk_261.cpp,-1,25,,"fatalf(""shared_memory_locking on but failed to mlock(%s, %"" PRId64 ""): %s\n"",
               theName.termedBuf(),static_cast<int64_t>(theSize), xstrerr(savedError));","[""addLog""]","[[], [""fatalf"", ""shared_memory_locking"", ""on"", ""but"", ""failed"", ""to"", ""mlock"", ""%s"", ""%"", ""PRId64"", ""%s\\n"", ""theName"", ""termedBuf"", ""static_cast"", ""int64_t"", ""theSize"", ""xstrerr"", ""savedError""]]",[4467300852808184852],5732,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/39f6946553d9da5d2ee174448b05b8603c57006a,13 May 2016,merge from trunk-r14667,3158,data/crawl/squid/hunk_258.cpp,,,data/crawl/squid/old_hunk_258.cpp,data/crawl/squid/new_hunk_258.cpp,22,24,"fatalf(""Ipc::Mem::Segment::create failed to ftruncate(%s): %s\n"",
               theName.termedBuf(), xstrerr(savedError));","fatalf(""Ipc::Mem::Segment::create failed to ftruncate(%s): %s\n"",
               theName.termedBuf(), xstrerr(xerrno));","[""updateVariable""]","[[""savedError""], [""xerrno""]]",[2617411435797190167],5731,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/39f6946553d9da5d2ee174448b05b8603c57006a,13 May 2016,merge from trunk-r14667,3158,data/crawl/squid/hunk_250.cpp,,,data/crawl/squid/old_hunk_250.cpp,data/crawl/squid/new_hunk_250.cpp,2,2,"storeAppendPrintf(sentry, ""FQDNcache Entries In Use: %d\n"",
                      memInUse(MEM_FQDNCACHE_ENTRY));","storeAppendPrintf(sentry, ""FQDNcache Entries In Use: %d\n"",
                      fqdncache_entry::UseCount());","[""removeVariable"", ""addVariable""]","[[""memInUse"", ""MEM_FQDNCACHE_ENTRY""], [""fqdncache_entry"", ""UseCount""]]",[-12751165572427847079],5730,"5 days, 0:00:00"
https://github.com/squid-cache/squid/commit/1a210de4cfe348c315f1334f4303ee73a45ef7cf,23 Jul 2016,"Collapse internal revalidation requests (SMP-unaware caches).

... also address Bug 4311 and partially address Bug 2833 and Bug 4471.

Extend collapsed_forwarding functionality to internal revalidation
requests. This implementation does not support Vary-controlled cache
objects and is limited to SMP-unaware caching environments, where each
Squid worker knows nothing about requests and caches handled by other
workers. However, it also lays critical groundwork for future SMP-aware
collapsed revalidation support.

Prior to these changes, multiple concurrent HTTP requests for the same
stale cached object always resulted in multiple internal revalidation
requests sent by Squid to the origin server. Those internal requests
were likely to result in multiple competing Squid cache updates, causing
cache misses and/or more internal revalidation requests, negating
collapsed forwarding savings.

Internal cache revalidation requests are collapsed if and only if
collapsed_forwarding is enabled. There is no option to control just
revalidation collapsing because there is no known use case for it.

* Public revalidation keys

Each Store entry has a unique key. Keys are used to find entries in the
Store (both already cached/swapped_out entries and not). Public keys are
normally tied to the request method and target URI. Same request
properties normally lead to the same public key, making cache hits
possible. If we were to calculate a public key for an internal
revalidation request, it would have been the same as the public key of
the stale cache entry being revalidated. Adding a revalidation response
to Store would have purged that being-revalidated cached entry, even if
the revalidation response itself was not cachable.

To avoid purging being-revalidated cached entries, the old code used
private keys for internal revalidation requests. Private keys are always
unique and cannot accidentally purge a public entry. On the other hand,
for concurrent [revalidation] requests to find the store entry to
collapse on, that store entry has to have a public key!

We resolved this conflict by adding ""scope"" to public keys:

* Regular/old public keys have default empty scope (that does not affect
  key generation). The code not dealing with collapsed revalidation
  continues to work as before. All entries stored in caches continue to
  have the same keys (with an empty scope).

* When collapsed forwarding is enabled, collapsable internal
  revalidation requests get public keys with a ""revalidation"" scope
  (that is fed to the MD5 hash when the key is generated). Such a
  revalidation request can find a matching store entry created by
  another revalidation request (and collapse on it), but cannot clash
  with the entry being revalidated (because that entry key is using a
  different [empty] scope).

This change not only enables collapsing of internal revalidation
requests within one worker, but opens the way for SMP-aware workers to
share information about collapsed revalidation requests, similar to how
those workers already share information about being-swapped-out cache
entries.


After receiving the revalidation response, each collapsed revalidation
request may call updateOnNotModified() to update the stale entry [with
the same revalidation response!]. Concurrent entry updates would have
wasted many resources, especially for disk-cached entries that support
header updates, and may have purged being-revalidated entries due to
locking conflicts among updating transactions. To minimize these
problems, we adjusted header and entry metadata updating logic to skip
the update if nothing have changed since the last update.


Also fixed Bug 4311: Collapsed forwarding deadlocks for SMP Squids using
SMP-unaware caches. Collapsed transactions stalled without getting a
response because they were waiting for the shared ""transients"" table
updates. The table was created by Store::Controller but then abandoned (not
updated) by SMP-unaware caches. Now, the transients table is not created
at all unless SMP-aware caches are present. This fix should also address
complaints about shared memory being used for Squid instances without
SMP-aware caches.

A combination of SMP-aware and SMP-unaware caches is still not supported
and is likely to stall collapsed transactions if they are enabled. Note
that, by default, the memory cache is SMP-aware in SMP environments.",437,data/crawl/squid/hunk_158.cpp,,,data/crawl/squid/old_hunk_158.cpp,data/crawl/squid/new_hunk_158.cpp,-1,66,,"rep->header.putStr(Http::HdrType::HDR_X_ACCELERATOR_VARY, vary.termedBuf());","[""addLog""]","[[], [""rep"", ""header"", ""putStr"", ""Http"", ""HdrType"", ""HDR_X_ACCELERATOR_VARY"", ""vary"", ""termedBuf""]]",[814484456151971239],5729,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/1a210de4cfe348c315f1334f4303ee73a45ef7cf,23 Jul 2016,"Collapse internal revalidation requests (SMP-unaware caches).

... also address Bug 4311 and partially address Bug 2833 and Bug 4471.

Extend collapsed_forwarding functionality to internal revalidation
requests. This implementation does not support Vary-controlled cache
objects and is limited to SMP-unaware caching environments, where each
Squid worker knows nothing about requests and caches handled by other
workers. However, it also lays critical groundwork for future SMP-aware
collapsed revalidation support.

Prior to these changes, multiple concurrent HTTP requests for the same
stale cached object always resulted in multiple internal revalidation
requests sent by Squid to the origin server. Those internal requests
were likely to result in multiple competing Squid cache updates, causing
cache misses and/or more internal revalidation requests, negating
collapsed forwarding savings.

Internal cache revalidation requests are collapsed if and only if
collapsed_forwarding is enabled. There is no option to control just
revalidation collapsing because there is no known use case for it.

* Public revalidation keys

Each Store entry has a unique key. Keys are used to find entries in the
Store (both already cached/swapped_out entries and not). Public keys are
normally tied to the request method and target URI. Same request
properties normally lead to the same public key, making cache hits
possible. If we were to calculate a public key for an internal
revalidation request, it would have been the same as the public key of
the stale cache entry being revalidated. Adding a revalidation response
to Store would have purged that being-revalidated cached entry, even if
the revalidation response itself was not cachable.

To avoid purging being-revalidated cached entries, the old code used
private keys for internal revalidation requests. Private keys are always
unique and cannot accidentally purge a public entry. On the other hand,
for concurrent [revalidation] requests to find the store entry to
collapse on, that store entry has to have a public key!

We resolved this conflict by adding ""scope"" to public keys:

* Regular/old public keys have default empty scope (that does not affect
  key generation). The code not dealing with collapsed revalidation
  continues to work as before. All entries stored in caches continue to
  have the same keys (with an empty scope).

* When collapsed forwarding is enabled, collapsable internal
  revalidation requests get public keys with a ""revalidation"" scope
  (that is fed to the MD5 hash when the key is generated). Such a
  revalidation request can find a matching store entry created by
  another revalidation request (and collapse on it), but cannot clash
  with the entry being revalidated (because that entry key is using a
  different [empty] scope).

This change not only enables collapsing of internal revalidation
requests within one worker, but opens the way for SMP-aware workers to
share information about collapsed revalidation requests, similar to how
those workers already share information about being-swapped-out cache
entries.


After receiving the revalidation response, each collapsed revalidation
request may call updateOnNotModified() to update the stale entry [with
the same revalidation response!]. Concurrent entry updates would have
wasted many resources, especially for disk-cached entries that support
header updates, and may have purged being-revalidated entries due to
locking conflicts among updating transactions. To minimize these
problems, we adjusted header and entry metadata updating logic to skip
the update if nothing have changed since the last update.


Also fixed Bug 4311: Collapsed forwarding deadlocks for SMP Squids using
SMP-unaware caches. Collapsed transactions stalled without getting a
response because they were waiting for the shared ""transients"" table
updates. The table was created by Store::Controller but then abandoned (not
updated) by SMP-unaware caches. Now, the transients table is not created
at all unless SMP-aware caches are present. This fix should also address
complaints about shared memory being used for Squid instances without
SMP-aware caches.

A combination of SMP-aware and SMP-unaware caches is still not supported
and is likely to stall collapsed transactions if they are enabled. Note
that, by default, the memory cache is SMP-aware in SMP environments.",437,data/crawl/squid/hunk_158.cpp,,,data/crawl/squid/old_hunk_158.cpp,data/crawl/squid/new_hunk_158.cpp,-1,57,,"rep->header.putStr(Http::HdrType::VARY, vary.termedBuf());","[""addLog""]","[[], [""rep"", ""header"", ""putStr"", ""Http"", ""HdrType"", ""VARY"", ""vary"", ""termedBuf""]]",[-8134077890312363753],5728,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/1a210de4cfe348c315f1334f4303ee73a45ef7cf,23 Jul 2016,"Collapse internal revalidation requests (SMP-unaware caches).

... also address Bug 4311 and partially address Bug 2833 and Bug 4471.

Extend collapsed_forwarding functionality to internal revalidation
requests. This implementation does not support Vary-controlled cache
objects and is limited to SMP-unaware caching environments, where each
Squid worker knows nothing about requests and caches handled by other
workers. However, it also lays critical groundwork for future SMP-aware
collapsed revalidation support.

Prior to these changes, multiple concurrent HTTP requests for the same
stale cached object always resulted in multiple internal revalidation
requests sent by Squid to the origin server. Those internal requests
were likely to result in multiple competing Squid cache updates, causing
cache misses and/or more internal revalidation requests, negating
collapsed forwarding savings.

Internal cache revalidation requests are collapsed if and only if
collapsed_forwarding is enabled. There is no option to control just
revalidation collapsing because there is no known use case for it.

* Public revalidation keys

Each Store entry has a unique key. Keys are used to find entries in the
Store (both already cached/swapped_out entries and not). Public keys are
normally tied to the request method and target URI. Same request
properties normally lead to the same public key, making cache hits
possible. If we were to calculate a public key for an internal
revalidation request, it would have been the same as the public key of
the stale cache entry being revalidated. Adding a revalidation response
to Store would have purged that being-revalidated cached entry, even if
the revalidation response itself was not cachable.

To avoid purging being-revalidated cached entries, the old code used
private keys for internal revalidation requests. Private keys are always
unique and cannot accidentally purge a public entry. On the other hand,
for concurrent [revalidation] requests to find the store entry to
collapse on, that store entry has to have a public key!

We resolved this conflict by adding ""scope"" to public keys:

* Regular/old public keys have default empty scope (that does not affect
  key generation). The code not dealing with collapsed revalidation
  continues to work as before. All entries stored in caches continue to
  have the same keys (with an empty scope).

* When collapsed forwarding is enabled, collapsable internal
  revalidation requests get public keys with a ""revalidation"" scope
  (that is fed to the MD5 hash when the key is generated). Such a
  revalidation request can find a matching store entry created by
  another revalidation request (and collapse on it), but cannot clash
  with the entry being revalidated (because that entry key is using a
  different [empty] scope).

This change not only enables collapsing of internal revalidation
requests within one worker, but opens the way for SMP-aware workers to
share information about collapsed revalidation requests, similar to how
those workers already share information about being-swapped-out cache
entries.


After receiving the revalidation response, each collapsed revalidation
request may call updateOnNotModified() to update the stale entry [with
the same revalidation response!]. Concurrent entry updates would have
wasted many resources, especially for disk-cached entries that support
header updates, and may have purged being-revalidated entries due to
locking conflicts among updating transactions. To minimize these
problems, we adjusted header and entry metadata updating logic to skip
the update if nothing have changed since the last update.


Also fixed Bug 4311: Collapsed forwarding deadlocks for SMP Squids using
SMP-unaware caches. Collapsed transactions stalled without getting a
response because they were waiting for the shared ""transients"" table
updates. The table was created by Store::Controller but then abandoned (not
updated) by SMP-unaware caches. Now, the transients table is not created
at all unless SMP-aware caches are present. This fix should also address
complaints about shared memory being used for Squid instances without
SMP-aware caches.

A combination of SMP-aware and SMP-unaware caches is still not supported
and is likely to stall collapsed transactions if they are enabled. Note
that, by default, the memory cache is SMP-aware in SMP environments.",437,data/crawl/squid/hunk_157.cpp,,,data/crawl/squid/old_hunk_157.cpp,data/crawl/squid/new_hunk_157.cpp,46,19,"rep->header.putStr(Http::HdrType::HDR_X_ACCELERATOR_VARY, vary.termedBuf());",forcePublicKey(newKey);,"[""addLog"", ""removeVariable"", ""addVariable"", ""removeLog""]","[[""rep"", ""header"", ""putStr"", ""Http"", ""HdrType"", ""HDR_X_ACCELERATOR_VARY"", ""vary"", ""termedBuf""], [""forcePublicKey"", ""newKey""]]",[14179122037915579811],5727,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/1a210de4cfe348c315f1334f4303ee73a45ef7cf,23 Jul 2016,"Collapse internal revalidation requests (SMP-unaware caches).

... also address Bug 4311 and partially address Bug 2833 and Bug 4471.

Extend collapsed_forwarding functionality to internal revalidation
requests. This implementation does not support Vary-controlled cache
objects and is limited to SMP-unaware caching environments, where each
Squid worker knows nothing about requests and caches handled by other
workers. However, it also lays critical groundwork for future SMP-aware
collapsed revalidation support.

Prior to these changes, multiple concurrent HTTP requests for the same
stale cached object always resulted in multiple internal revalidation
requests sent by Squid to the origin server. Those internal requests
were likely to result in multiple competing Squid cache updates, causing
cache misses and/or more internal revalidation requests, negating
collapsed forwarding savings.

Internal cache revalidation requests are collapsed if and only if
collapsed_forwarding is enabled. There is no option to control just
revalidation collapsing because there is no known use case for it.

* Public revalidation keys

Each Store entry has a unique key. Keys are used to find entries in the
Store (both already cached/swapped_out entries and not). Public keys are
normally tied to the request method and target URI. Same request
properties normally lead to the same public key, making cache hits
possible. If we were to calculate a public key for an internal
revalidation request, it would have been the same as the public key of
the stale cache entry being revalidated. Adding a revalidation response
to Store would have purged that being-revalidated cached entry, even if
the revalidation response itself was not cachable.

To avoid purging being-revalidated cached entries, the old code used
private keys for internal revalidation requests. Private keys are always
unique and cannot accidentally purge a public entry. On the other hand,
for concurrent [revalidation] requests to find the store entry to
collapse on, that store entry has to have a public key!

We resolved this conflict by adding ""scope"" to public keys:

* Regular/old public keys have default empty scope (that does not affect
  key generation). The code not dealing with collapsed revalidation
  continues to work as before. All entries stored in caches continue to
  have the same keys (with an empty scope).

* When collapsed forwarding is enabled, collapsable internal
  revalidation requests get public keys with a ""revalidation"" scope
  (that is fed to the MD5 hash when the key is generated). Such a
  revalidation request can find a matching store entry created by
  another revalidation request (and collapse on it), but cannot clash
  with the entry being revalidated (because that entry key is using a
  different [empty] scope).

This change not only enables collapsing of internal revalidation
requests within one worker, but opens the way for SMP-aware workers to
share information about collapsed revalidation requests, similar to how
those workers already share information about being-swapped-out cache
entries.


After receiving the revalidation response, each collapsed revalidation
request may call updateOnNotModified() to update the stale entry [with
the same revalidation response!]. Concurrent entry updates would have
wasted many resources, especially for disk-cached entries that support
header updates, and may have purged being-revalidated entries due to
locking conflicts among updating transactions. To minimize these
problems, we adjusted header and entry metadata updating logic to skip
the update if nothing have changed since the last update.


Also fixed Bug 4311: Collapsed forwarding deadlocks for SMP Squids using
SMP-unaware caches. Collapsed transactions stalled without getting a
response because they were waiting for the shared ""transients"" table
updates. The table was created by Store::Controller but then abandoned (not
updated) by SMP-unaware caches. Now, the transients table is not created
at all unless SMP-aware caches are present. This fix should also address
complaints about shared memory being used for Squid instances without
SMP-aware caches.

A combination of SMP-aware and SMP-unaware caches is still not supported
and is likely to stall collapsed transactions if they are enabled. Note
that, by default, the memory cache is SMP-aware in SMP environments.",437,data/crawl/squid/hunk_157.cpp,,,data/crawl/squid/old_hunk_157.cpp,data/crawl/squid/new_hunk_157.cpp,37,16,"rep->header.putStr(Http::HdrType::VARY, vary.termedBuf());","!storeKeyHashCmp(key, newKey);","[""addLog"", ""removeVariable"", ""addVariable"", ""removeLog""]","[[""rep"", ""header"", ""putStr"", ""Http"", ""HdrType"", ""VARY"", ""vary"", ""termedBuf""], [""storeKeyHashCmp"", ""key"", ""newKey""]]",[13893915046768551035],5726,"4 days, 12:00:00"
https://github.com/squid-cache/squid/commit/ae3ac744d5c7682da3cae796ba2f0fa204cc494d,27 Jul 2016,TLS: do not hang when 'connector' fails,2,data/crawl/squid/hunk_156.cpp,,,data/crawl/squid/old_hunk_156.cpp,data/crawl/squid/new_hunk_156.cpp,-1,4,,"mustStop(""Security::PeerConnector TLS socket initialize failed"");","[""addLog""]","[[], [""mustStop"", ""Security"", ""PeerConnector"", ""TLS"", ""socket"", ""initialize"", ""failed""]]",[-6006443342477954325],5725,"2 days, 12:00:00"
https://github.com/squid-cache/squid/commit/831e953c433124a8e8313e3fc585fee186f742bd,12 Jul 2016,Bug 4534: assertion failure in xcalloc when using many cache_dir,183,data/crawl/squid/hunk_160.cpp,,,data/crawl/squid/old_hunk_160.cpp,data/crawl/squid/new_hunk_160.cpp,8,8,"storeAppendPrintf(e, ""\t deletion attempts: %d\n"",
                      cd->del_count
                     );","storeAppendPrintf(e, ""\t deletion attempts: %"" PRIu64 ""\n"",
                      cd->del_count
                     );","[""updateContent"", ""addContent"", ""addVariable""]","[[""%d\\n""], [""%"", ""PRIu64"", ""\\n""]]",[1104258391187974023],5724,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/831e953c433124a8e8313e3fc585fee186f742bd,12 Jul 2016,Bug 4534: assertion failure in xcalloc when using many cache_dir,183,data/crawl/squid/hunk_160.cpp,,,data/crawl/squid/old_hunk_160.cpp,data/crawl/squid/new_hunk_160.cpp,3,3,"storeAppendPrintf(e, ""\t entries: count: %d capacity: %d util: %d%%\n"",
                      cd->count,
                      cd->capacity,
                      xpercentInt(cd->count, cd->capacity)
                     );","storeAppendPrintf(e, ""\t entries: count: %"" PRIu64 "" capacity: %"" PRIu64 "" util: %d%%\n"",
                      cd->count,
                      cd->capacity,
                      xpercentInt(cd->count, cd->capacity)
                     );","[""updateContent"", ""addContent"", ""addVariable""]","[[""%d"", ""%d""], [""%"", ""PRIu64"", ""%"", ""PRIu64""]]",[14465389062679068742],5723,"10 days, 0:00:00"
https://github.com/squid-cache/squid/commit/55369ae649646901d3038c63217386174d01eb7b,22 Oct 2015,"Fetch missing certificates.

Many web servers do not have complete certificate chains. Many browsers
use certificate extensions of the server certificate and download the
missing intermediate certificates automatically from the Internet.

This patch adds a similar feature to Squid:
   - Parse Server Hello messages and extract certificates chain.
   - Check whether the issuers of each certificate exist in the chain.
   - If not, retrieve the issuer certificate URI from Authority Info
     extension of the certificate (if it is provided) and download the
     certificate.
   - Store downloaded certificates in Squid object cache, just like any
     other HTTP object.

Implementation highlights:
  - A new Downloader class allows Squid subsystems to download objects
    via HTTP. These downloads are not backed by a proxy user.
  - Add support for an internal database of intermediate pre-loaded
    certificates to be used to complete incomplete chains.
  - Ssl::HandshakeParser parses TLS records and TLS Handshake messages.
  - Ssl::PeerConnector now uses the Downloader objects to download
    missing certificates.",1181,data/crawl/squid/hunk_553.cpp,,,data/crawl/squid/old_hunk_553.cpp,data/crawl/squid/new_hunk_553.cpp,-1,88,,"request->header.putStr(Http::HdrType::HOST, request->url.host());","[""addLog""]","[[], [""request"", ""header"", ""putStr"", ""Http"", ""HdrType"", ""HOST"", ""request"", ""url"", ""host""]]",[8982126471591930796],5722,"142 days, 0:00:00"
https://github.com/squid-cache/squid/commit/597504bff07370f493d7150333cde579c9ee8b27,27 Jul 2015,"purge: convert metadata matching to std::regex

* converting the REList class to inline methods.
 - constructor now throws as a side effect of rexp member construction.

NOTE: uses std::regex_match for matching, which will only succeed if the
  pattern(s) given are designed to match the entire URL TLV data field.
  If this causes problems, move to regex_search which does not require
  prefix or suffix to match.",99,data/crawl/squid/hunk_638.cpp,,,data/crawl/squid/old_hunk_638.cpp,data/crawl/squid/new_hunk_638.cpp,-1,12,,"fprintf(stderr, ""%s:%lu: invalid regular expression\n"", optarg, lineno);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%lu"", ""invalid"", ""regular"", ""expression\\n"", ""optarg"", ""lineno""]]",[-37920854530838474060],5721,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/597504bff07370f493d7150333cde579c9ee8b27,27 Jul 2015,"purge: convert metadata matching to std::regex

* converting the REList class to inline methods.
 - constructor now throws as a side effect of rexp member construction.

NOTE: uses std::regex_match for matching, which will only succeed if the
  pattern(s) given are designed to match the entire URL TLV data field.
  If this causes problems, move to regex_search which does not require
  prefix or suffix to match.",99,data/crawl/squid/hunk_637.cpp,,,data/crawl/squid/old_hunk_637.cpp,data/crawl/squid/new_hunk_637.cpp,-1,11,,"fprintf(stderr, ""%c contains invalid regular expression: %s\n"", option, optarg);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c"", ""contains"", ""invalid"", ""regular"", ""expression"", ""%s\\n"", ""option"", ""optarg""]]",[-22393255325246936138],5720,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/597504bff07370f493d7150333cde579c9ee8b27,27 Jul 2015,"purge: convert metadata matching to std::regex

* converting the REList class to inline methods.
 - constructor now throws as a side effect of rexp member construction.

NOTE: uses std::regex_match for matching, which will only succeed if the
  pattern(s) given are designed to match the entire URL TLV data field.
  If this causes problems, move to regex_search which does not require
  prefix or suffix to match.",99,data/crawl/squid/hunk_636.cpp,,,data/crawl/squid/old_hunk_636.cpp,data/crawl/squid/new_hunk_636.cpp,40,-1,"fprintf( stderr, ""unable to execute re \""%s\""\n+ on line \""%s\"": %s\n"",
                 data, check, buffer );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""unable"", ""to"", ""execute"", ""re"", ""\\"", ""%s\\"", ""\\n"", ""on"", ""line"", ""\\"", ""%s\\"", ""%s\\n"", ""data"", ""check"", ""buffer""], []]",[12868624580167603209],5719,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/597504bff07370f493d7150333cde579c9ee8b27,27 Jul 2015,"purge: convert metadata matching to std::regex

* converting the REList class to inline methods.
 - constructor now throws as a side effect of rexp member construction.

NOTE: uses std::regex_match for matching, which will only succeed if the
  pattern(s) given are designed to match the entire URL TLV data field.
  If this causes problems, move to regex_search which does not require
  prefix or suffix to match.",99,data/crawl/squid/hunk_636.cpp,,,data/crawl/squid/old_hunk_636.cpp,data/crawl/squid/new_hunk_636.cpp,21,-1,"fprintf( stderr, ""unable to compile re \""%s\"": %s\n"", what, buffer );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""unable"", ""to"", ""compile"", ""re"", ""\\"", ""%s\\"", ""%s\\n"", ""what"", ""buffer""], []]",[3281625968545951533],5718,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2056c6a6b3b59f54afb222f73bcf9486ab6051ff,27 Jul 2015,purge: Convert squid.conf parser to std::regex,140,data/crawl/squid/hunk_641.cpp,,,data/crawl/squid/old_hunk_641.cpp,data/crawl/squid/new_hunk_641.cpp,17,9,"fprintf( debug, ""# match from %d-%d on line %s"",
                                      (int)subs[0].rm_so, (int)subs[0].rm_eo,
                                      line );","fprintf( debug, ""# match '%s' on line %s"", subs[0].str().c_str(), line);","[""updateVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""from"", ""%d"", ""%d"", ""int"", ""rm_so"", ""int"", ""subs[0]"", ""rm_eo""], [""%s"", ""str"", ""c_str""]]",[18700499392016040342],5717,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2056c6a6b3b59f54afb222f73bcf9486ab6051ff,27 Jul 2015,purge: Convert squid.conf parser to std::regex,140,data/crawl/squid/hunk_641.cpp,,,data/crawl/squid/old_hunk_641.cpp,data/crawl/squid/new_hunk_641.cpp,8,-1,"fprintf( stderr, ""while matching \""%s\"" against %s%s\n"",
                         expression, line, buffer );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""while"", ""matching"", ""\\"", ""%s\\"", ""against"", ""%s%s\\n"", ""expression"", ""line"", ""buffer""], []]",[-2788216991202310185],5716,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/2056c6a6b3b59f54afb222f73bcf9486ab6051ff,27 Jul 2015,purge: Convert squid.conf parser to std::regex,140,data/crawl/squid/hunk_640.cpp,,,data/crawl/squid/old_hunk_640.cpp,data/crawl/squid/new_hunk_640.cpp,9,-1,"fprintf( stderr, ""regular expression \""%s\"": %s\n"", expression, buffer );",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""regular"", ""expression"", ""\\"", ""%s\\"", ""%s\\n"", ""expression"", ""buffer""], []]",[23498982089002190601],5715,"241 days, 0:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3193.cpp,,,data/crawl/squid/old_hunk_3193.cpp,data/crawl/squid/new_hunk_3193.cpp,-1,202,,"fprintf( stderr, ""unable to execute re \""%s\""\n+ on line \""%s\"": %s\n"",
	     data, check, buffer );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""unable"", ""to"", ""execute"", ""re"", ""\\"", ""%s\\"", ""\\n"", ""on"", ""line"", ""\\"", ""%s\\"", ""%s\\n"", ""data"", ""check"", ""buffer""]]",[-12868624580167603209],5714,"1168 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3193.cpp,,,data/crawl/squid/old_hunk_3193.cpp,data/crawl/squid/new_hunk_3193.cpp,-1,183,,"fprintf( stderr, ""unable to compile re \""%s\"": %s\n"", what, buffer );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""unable"", ""to"", ""compile"", ""re"", ""\\"", ""%s\\"", ""%s\\n"", ""what"", ""buffer""]]",[-3281625968545951533],5713,"1168 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3190.cpp,,,data/crawl/squid/old_hunk_3190.cpp,data/crawl/squid/new_hunk_3190.cpp,-1,101,,"fprintf( stderr, ""while matching \""%s\"" against %s%s\n"",
		 expression, line, buffer );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""while"", ""matching"", ""\\"", ""%s\\"", ""against"", ""%s%s\\n"", ""expression"", ""line"", ""buffer""]]",[2788216991202310185],5712,"1168 days, 12:00:00"
https://github.com/squid-cache/squid/commit/eb1f6bfa7c19555c72c72c7102cac62d8417ee2f,08 Jul 2010,"Author: Jens-S. V�ckler <voeckler@rvs.uni-hannover.de>
Import squid cache 'purge' tool

Just the original code import for crediting the original author.

TODO:
 - patch to fix build problems in modern systems
 - upgrade to cope with current cache_dir formats
 - bundle and distribute updated tool",3295,data/crawl/squid/hunk_3190.cpp,,,data/crawl/squid/old_hunk_3190.cpp,data/crawl/squid/new_hunk_3190.cpp,-1,76,,"fprintf( stderr, ""regular expression \""%s\"": %s\n"", expression, buffer );","[""addLog""]","[[], [""fprintf"", ""stderr"", ""regular"", ""expression"", ""\\"", ""%s\\"", ""%s\\n"", ""expression"", ""buffer""]]",[-23498982089002190601],5711,"1168 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/hunk_114.cpp,,,data/crawl/squid/old_hunk_114.cpp,data/crawl/squid/new_hunk_114.cpp,9,-1,"storeAppendPrintf(entry, ""%s ntlm keep_alive %s\n"", name, keep_alive ? ""on"" : ""off"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""ntlm"", ""keep_alive"", ""%s\\n"", ""name"", ""keep_alive"", ""on"", ""off""], []]",[-2565911168582275027],5710,12:00:00
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/hunk_113.cpp,,,data/crawl/squid/old_hunk_113.cpp,data/crawl/squid/new_hunk_113.cpp,9,-1,"storeAppendPrintf(entry, ""%s negotiate keep_alive %s\n"", name, keep_alive ? ""on"" : ""off"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""negotiate"", ""keep_alive"", ""%s\\n"", ""name"", ""keep_alive"", ""on"", ""off""], []]",[-3401182741575433013],5709,12:00:00
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/hunk_112.cpp,,,data/crawl/squid/old_hunk_112.cpp,data/crawl/squid/new_hunk_112.cpp,3,-1,"storeAppendPrintf(entry, ""%s digest utf8 %s\n"", name, utf8 ? ""on"" : ""off"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""digest"", ""utf8"", ""%s\\n"", ""name"", ""utf8"", ""on"", ""off""], []]",[-20501869205042293250],5708,12:00:00
https://github.com/squid-cache/squid/commit/b2b09838674dab260d6727026697da81afee70b4,20 Dec 2016,De-duplicate shared auth parameters keep_alive and utf8,144,data/crawl/squid/hunk_111.cpp,,,data/crawl/squid/old_hunk_111.cpp,data/crawl/squid/new_hunk_111.cpp,3,-1,"storeAppendPrintf(entry, ""%s basic utf8 %s\n"", name, utf8 ? ""on"" : ""off"");",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""basic"", ""utf8"", ""%s\\n"", ""name"", ""utf8"", ""on"", ""off""], []]",[-14459964624793455899],5707,12:00:00
https://github.com/squid-cache/squid/commit/5bfc3dbd3b2f44d27b807a36ae94e063778e018a,10 Dec 2016,"Added auth_schemes to control schemes presence and order in 401s/407s.

The new squid.conf directive may be used to customize authentication
schemes presence and order in Squid's HTTP 401 (Unauthorized) and 407
(Proxy Authentication Required) responses. The defaults remain the same.",235,data/crawl/squid/hunk_115.cpp,,,data/crawl/squid/old_hunk_115.cpp,data/crawl/squid/new_hunk_115.cpp,-1,8,,"fatalf(""auth_schemes: required authentication method '%s' is not configured"", proxy_auth);","[""addLog""]","[[], [""fatalf"", ""auth_schemes"", ""required"", ""authentication"", ""method"", ""%s"", ""is"", ""not"", ""configured"", ""proxy_auth""]]",[-3174685343921212292],5706,"5 days, 12:00:00"
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/hunk_84.cpp,,,data/crawl/squid/old_hunk_84.cpp,data/crawl/squid/new_hunk_84.cpp,5,-1,auth_user_request->denyMessage(errNote.c_str());,,"[""removeLog""]","[[""auth_user_request"", ""denyMessage"", ""errNote"", ""c_str""], []]",[722369976778917829],5705,0:00:00
https://github.com/squid-cache/squid/commit/cc488ec94560163ed6ee80f11077ee234cad657c,24 Dec 2016,"GnuTLS support for options= parameters

Use new Pointer to store PeerOptions::parsedOptions.

Migrate OpenSSL options= logic into libsecurity

Also, some API polishing for PeerOptions API.",166,data/crawl/squid/hunk_102.cpp,,,data/crawl/squid/old_hunk_102.cpp,data/crawl/squid/new_hunk_102.cpp,-1,11,,"fatalf(""Unknown TLS option '%s'"", err);","[""addLog""]","[[], [""fatalf"", ""Unknown"", ""TLS"", ""option"", ""%s"", ""err""]]",[-204188894663230612],5704,"21 days, 12:00:00"
https://github.com/squid-cache/squid/commit/b58d2a22b31ec12c7070dfca849359bb726a1f12,24 Jan 2017,Cleanup: convert Delay Pool classes to MEMPROXY,328,data/crawl/squid/hunk_94.cpp,,,data/crawl/squid/old_hunk_94.cpp,data/crawl/squid/new_hunk_94.cpp,15,-1,"storeAppendPrintf(sentry, ""Memory Used: %d bytes\n"", (int) DelayPools::MemoryUsed);",,"[""removeLog""]","[[""storeAppendPrintf"", ""sentry"", ""Memory"", ""Used"", ""%d"", ""bytes\\n"", ""int"", ""DelayPools"", ""MemoryUsed""], []]",[-20010407864835808745],5703,"6 days, 0:00:00"
https://github.com/squid-cache/squid/commit/6f9a30f86fd6046d371dbdeab23a2781219f0a04,30 Jan 2017,"Fix Auth::UserRequest::denyMessage() misuse.

This method was improperly used in contexts where actually
Auth::UserRequest::setDenyMessage() expected. Probably the reason was
that both denyMessage() and getDenyMessage() were not constant,
provoking such 'misuse'.

Also placed some common code into UserRequest::denyMessageFromHelper(),
eliminating code duplication. Though there are still many places
where code is duplicated inside auth/ntlm/UserRequest.cc and
auth/negotiate/UserRequest.cc.",69,data/crawl/squid/hunk_76.cpp,,,data/crawl/squid/old_hunk_76.cpp,data/crawl/squid/new_hunk_76.cpp,-1,11,,setDenyMessage(messageNote.c_str());,"[""addLog""]","[[], [""setDenyMessage"", ""messageNote"", ""c_str""]]",[-226304927560905051],5702,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_87.cpp,,,data/crawl/squid/old_hunk_87.cpp,data/crawl/squid/new_hunk_87.cpp,-1,174,,"fatalf(""FATAL: Missing annotation kv pair"");","[""addLog""]","[[], [""fatalf"", ""FATAL"", ""Missing"", ""annotation"", ""kv"", ""pair""]]",[4385817703251897094],5701,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_87.cpp,,,data/crawl/squid/old_hunk_87.cpp,data/crawl/squid/new_hunk_87.cpp,-1,142,,"fatalf(""FATAL: Missing note value"");","[""addLog""]","[[], [""fatalf"", ""FATAL"", ""Missing"", ""note"", ""value""]]",[-5998824402352469382],5700,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_87.cpp,,,data/crawl/squid/old_hunk_87.cpp,data/crawl/squid/new_hunk_87.cpp,-1,136,,"fatalf(""FATAL: Missing note key"");","[""addLog""]","[[], [""fatalf"", ""FATAL"", ""Missing"", ""note"", ""key""]]",[10605660967497066978],5699,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_87.cpp,,,data/crawl/squid/old_hunk_87.cpp,data/crawl/squid/new_hunk_87.cpp,-1,72,,"storeAppendPrintf(entry, ""%s %.*s %s"",
                          k, key().length(), key().rawContent(), ConfigParser::QuoteString(SBufToString(v->value())));","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""%s"", ""%"", ""*s"", ""%s"", ""k"", ""key"", ""length"", ""key"", ""rawContent"", ""ConfigParser"", ""QuoteString"", ""SBufToString"", ""v"", ""value""]]",[29694995795933971076],5698,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_87.cpp,,,data/crawl/squid/old_hunk_87.cpp,data/crawl/squid/new_hunk_87.cpp,91,-1,"storeAppendPrintf(entry, ""%s "" SQUIDSTRINGPH "" %s"",
                              key, SQUIDSTRINGPRINT((*m)->key), ConfigParser::QuoteString((*v)->value));",,"[""removeLog""]","[[""storeAppendPrintf"", ""entry"", ""%s"", ""SQUIDSTRINGPH"", ""%s"", ""key"", ""SQUIDSTRINGPRINT"", ""*m"", ""key"", ""ConfigParser"", ""QuoteString"", ""*v"", ""value""], []]",[561083083629220026],5697,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/75d473407acdbf2d79f7a49b4d98083b95b83b9a,30 Jan 2017,"author: Eduard Bagdasaryan <eduard.bagdasaryan@measurement-factory.com>
Two new ACLs implemented: annotate_transaction and annotate_client.

Both ACLs always match and are useful for their side effect, immediately
adding a key-value pair to the current transaction annotation
(annotate_transaction) or to the current client-to-Squid connection
annotation (annotate_client).  Connection annotations are propagated to
the current and all future master transactions on the annotated
connection. Before this patch only 'clt_conn_tag' annotation tag could
be used for a connection annotation.

To reuse the existing notes parsing code, I had to refactor Note, Notes
and NotePairs classes:

* Made data members private and adjusted to follow 'rule of three'.
  Having public assess to containers with pointers may cause memory
  problems: for example ExternalACLEntry::update() called directly
  notes.entries.clear() without deleting the pointers.
* None-fatal check for 'special' characters inside note name.
* Used SBufs instead of Strings and const char* where possible.
* Adjusted ACLNoteStrategy::matchNotes() to avoid 'expanding quoted values'
  code duplication inside

Also fixed acl quoted flag parameters syntax. The old code improperly
required quoting both flag and its parameter, e.g., ""-m= ,"" whereas
only parameter should be quoted: -m="" ,"".

Also moved UpdateRequestNotes() from Notes.cc to HttpRequest.cc to
resolve dependency problems while bulding unit tests.

TODO: transaction annotation matching code (ACLNoteData) performs
parsing in its own way, using ACLStringData::parse(), lacking special
characters/reserved keywords checks. Consider reusing the existing
Notes parsing code instead.",999,data/crawl/squid/hunk_87.cpp,,,data/crawl/squid/old_hunk_87.cpp,data/crawl/squid/new_hunk_87.cpp,74,113,"fatalf(""%s:%d: meta key \""%s\"" is a reserved %s name"",
                       cfg_filename, config_lineno, note->key.termedBuf(),
                       descr ? descr : """");","fatalf(""%s:%d: meta key \""%.*s\"" is a reserved %s name"",
                       cfg_filename, config_lineno, key.length(), key.rawContent(),
                       descr ? descr : """");","[""updateVariable"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s\\"", ""note"", ""termedBuf""], [""%"", ""*s\\"", ""length"", ""key"", ""rawContent""]]",[34190132613708413875],5696,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b27668ec6cfce0b56ca6d8ef4b887207f4ecc6b7,19 Feb 2017,"Add response delay pools feature for Squid-to-client speed limiting.

The feature restricts Squid-to-client bandwidth only.  It applies to
both cache hits and misses.

  * Rationale *

  This may be useful for specific response(s) bandwidth limiting.
  There are situations when doing this is hardly possible
  (or impossible) by means of netfilter/iptables operating with
  TCP/IP packets and IP addresses information for filtering. In other
  words, sometimes it is problematic to 'extract' a single response from
  TCP/IP data flow at system level. For example, a single Squid-to-client
  TCP connection can transmit multiple responses (persistent connections,
  pipelining or HTTP/2 connection multiplexing) or be encrypted
  (HTTPS proxy mode).

  * Description *

  When Squid starts delivering the final HTTP response to a client,
  Squid checks response_delay_pool_access rules (supporting fast ACLs
  only), in the order they were declared. The first rule with a
  matching ACL wins.  If (and only if) an ""allow"" rule won, Squid
  assigns the response to the corresponding named delay pool.

  If a response is assigned to a delay pool, the response becomes
  subject to the configured bucket and aggregate bandwidth limits of
  that pool, similar to the current ""class 2"" server-side delay pools,
  but with a brand new, dedicated ""individual"" filled bucket assigned to
  the matched response.

  The new feature serves the same purpose as the existing client-side
  pools: both features limit Squid-to-client bandwidth. Their common
  interface was placed into a new base BandwidthBucket class.  The
  difference is that client-side pools do not aggregate clients and
  always use one bucket per client IP. It is possible that a response
  becomes a subject of both these pools. In such situations only matched
  response delay pool will be used for Squid-to-client speed limiting.

  * Limitations *

  The accurate SMP support (with the aggregate bucket shared among
  workers) is outside this patch scope. In SMP configurations,
  Squid should automatically divide the aggregate_speed_limit and
  max_aggregate_size values among the configured number of Squid
  workers. 

  * Also: *

  Fixed ClientDelayConfig which did not perform cleanup on
  destruction, causing memory problems detected by Valgrind. It was not
  possible to fix this with minimal changes because of linker problems
  with SquidConfig while checking with test-builds.sh. So I had
  to refactor ClientDelayConfig module, separating configuration code
  (old ClientDelayConfig class) from configured data (a new
  ClientDelayPools class) and minimizing dependencies with SquidConfig.",1109,data/crawl/squid/hunk_51.cpp,,,data/crawl/squid/old_hunk_51.cpp,data/crawl/squid/new_hunk_51.cpp,12,12,"storeAppendPrintf(sentry, ""Address: %s\n"", hashKeyStr(&c->hash));","storeAppendPrintf(sentry, ""Address: %s\n"", hashKeyStr(hash));","[""removeVariable"", ""addVariable""]","[[""&c""], []]",[-4864029222043795],5695,12:00:00
https://github.com/squid-cache/squid/commit/46e791c629e44630fe6e1df32bb0d73f10b1299d,08 Feb 2017,"digest_ldap_auth: Add -r option to clamp the realm to a fixed value

Some historic Digest Auth implementations do not include the realm in the
digest password attribute. The password is effectively stored as ""HA1""
instead of ""REALM:HA1"".

The realm cannot simply be ignored due to:
 1) the realm is both the salting value used within the hash and the
scope limitation on what inputs from HTTP are used to compare against
the A1, and
 2) Squid does not itself verify the realm received was the one offered
and leaves the comparison to the backend system. There is some
possibility the authentication system is using multiple security realms
and Squids realm string is just an offer.


Not having realm tied to the credentials in the backend storage leaves
this particular helper with no other option but to trust the realm sent
(probably) over clear-text by any client/attacker actually matches the
salting. That allows remote senders to manipulate the realm string they
send to perform a collision attack against the stored password.
 They no longer have to find and prove knowledge of the password. But
just find a collision for its hash vs arbitrary realm strings.

Old Digest systems are not the safest things to begin with. They also
tend to use MD5 hashing which was the only one available for many years
and relatively easy to find collisions for.


To resolve all these problems allow the -l parameter to accept an empty
string ('-l """" ') when the -r option provides a fixed realm.

Also, fix several typos in the help text.",25,data/crawl/squid/hunk_53.cpp,,,data/crawl/squid/old_hunk_53.cpp,data/crawl/squid/new_hunk_53.cpp,-1,7,,"fprintf(stderr, ""\t-r filtered realm\t\t\tonly honor Squid requests for this realm. Mandatory if the password is alone in\n\t\t\t\t\t\tthe password attribute, acting as the implicit realm\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\t"", ""r"", ""filtered"", ""realm\\t\\t\\tonly"", ""honor"", ""Squid"", ""requests"", ""for"", ""this"", ""realm"", ""Mandatory"", ""if"", ""the"", ""password"", ""is"", ""alone"", ""in\\n\\t\\t\\t\\t\\t\\tthe"", ""password"", ""attribute"", ""acting"", ""as"", ""the"", ""implicit"", ""realm\\n""]]",[-42330768901208094744],5694,"6 days, 0:00:00"
https://github.com/squid-cache/squid/commit/46e791c629e44630fe6e1df32bb0d73f10b1299d,08 Feb 2017,"digest_ldap_auth: Add -r option to clamp the realm to a fixed value

Some historic Digest Auth implementations do not include the realm in the
digest password attribute. The password is effectively stored as ""HA1""
instead of ""REALM:HA1"".

The realm cannot simply be ignored due to:
 1) the realm is both the salting value used within the hash and the
scope limitation on what inputs from HTTP are used to compare against
the A1, and
 2) Squid does not itself verify the realm received was the one offered
and leaves the comparison to the backend system. There is some
possibility the authentication system is using multiple security realms
and Squids realm string is just an offer.


Not having realm tied to the credentials in the backend storage leaves
this particular helper with no other option but to trust the realm sent
(probably) over clear-text by any client/attacker actually matches the
salting. That allows remote senders to manipulate the realm string they
send to perform a collision attack against the stored password.
 They no longer have to find and prove knowledge of the password. But
just find a collision for its hash vs arbitrary realm strings.

Old Digest systems are not the safest things to begin with. They also
tend to use MD5 hashing which was the only one available for many years
and relatively easy to find collisions for.


To resolve all these problems allow the -l parameter to accept an empty
string ('-l """" ') when the -r option provides a fixed realm.

Also, fix several typos in the help text.",25,data/crawl/squid/hunk_53.cpp,,,data/crawl/squid/old_hunk_53.cpp,data/crawl/squid/new_hunk_53.cpp,6,6,"fprintf(stderr, ""\t-l password realm delimiter(REQUIRED)\tCharater(s) that devides the password attribute\n\t\t\t\t\t\tin realm and password tokens, default ':' realm:password\n"");","fprintf(stderr, ""\t-l password realm delimiter(REQUIRED)\tCharacter(s) that divides the password attribute\n\t\t\t\t\t\tin realm and password tokens, default ':' realm:password, could be\n\t\t\t\t\t\tempty string if the password is alone in the password attribute\n"");","[""updateContent""]","[[""\\tCharater"", ""devides"", ""password\\n""], [""\\tCharacter"", ""divides"", ""password"", ""could"", ""be\\n\\t\\t\\t\\t\\t\\tempty"", ""string"", ""if"", ""the"", ""password"", ""is"", ""alone"", ""in"", ""the"", ""password"", ""attribute\\n""]]",[-33956360195853114003],5693,"6 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b5db97e7aa415bd1630a7d47d59d7ea88aa0d17b,14 Feb 2017,"Fix memory leak and parse handling error introduced by r15024.

* Do not leak Note::Value::Value::valueFormat.
* Throw if annotation value parsing failures.

Detected by Coverity Scan:
 * CID 1399758:  Error handling issues (CHECKED_RETURN)
 * CID 1399759:  Resource leaks (CTOR_DTOR_LEAK)",8,data/crawl/squid/hunk_52.cpp,,,data/crawl/squid/old_hunk_52.cpp,data/crawl/squid/new_hunk_52.cpp,-1,14,,"exceptionMsg.Printf(""failed to parse annotation value %s"", theValue.c_str());","[""addLog""]","[[], [""exceptionMsg"", ""Printf"", ""failed"", ""to"", ""parse"", ""annotation"", ""value"", ""%s"", ""theValue"", ""c_str""]]",[-28827324347155546862],5692,"3 days, 0:00:00"
https://github.com/squid-cache/squid/commit/b27668ec6cfce0b56ca6d8ef4b887207f4ecc6b7,19 Feb 2017,"Add response delay pools feature for Squid-to-client speed limiting.

The feature restricts Squid-to-client bandwidth only.  It applies to
both cache hits and misses.

  * Rationale *

  This may be useful for specific response(s) bandwidth limiting.
  There are situations when doing this is hardly possible
  (or impossible) by means of netfilter/iptables operating with
  TCP/IP packets and IP addresses information for filtering. In other
  words, sometimes it is problematic to 'extract' a single response from
  TCP/IP data flow at system level. For example, a single Squid-to-client
  TCP connection can transmit multiple responses (persistent connections,
  pipelining or HTTP/2 connection multiplexing) or be encrypted
  (HTTPS proxy mode).

  * Description *

  When Squid starts delivering the final HTTP response to a client,
  Squid checks response_delay_pool_access rules (supporting fast ACLs
  only), in the order they were declared. The first rule with a
  matching ACL wins.  If (and only if) an ""allow"" rule won, Squid
  assigns the response to the corresponding named delay pool.

  If a response is assigned to a delay pool, the response becomes
  subject to the configured bucket and aggregate bandwidth limits of
  that pool, similar to the current ""class 2"" server-side delay pools,
  but with a brand new, dedicated ""individual"" filled bucket assigned to
  the matched response.

  The new feature serves the same purpose as the existing client-side
  pools: both features limit Squid-to-client bandwidth. Their common
  interface was placed into a new base BandwidthBucket class.  The
  difference is that client-side pools do not aggregate clients and
  always use one bucket per client IP. It is possible that a response
  becomes a subject of both these pools. In such situations only matched
  response delay pool will be used for Squid-to-client speed limiting.

  * Limitations *

  The accurate SMP support (with the aggregate bucket shared among
  workers) is outside this patch scope. In SMP configurations,
  Squid should automatically divide the aggregate_speed_limit and
  max_aggregate_size values among the configured number of Squid
  workers. 

  * Also: *

  Fixed ClientDelayConfig which did not perform cleanup on
  destruction, causing memory problems detected by Valgrind. It was not
  possible to fix this with minimal changes because of linker problems
  with SquidConfig while checking with test-builds.sh. So I had
  to refactor ClientDelayConfig module, separating configuration code
  (old ClientDelayConfig class) from configured data (a new
  ClientDelayPools class) and minimizing dependencies with SquidConfig.",1109,data/crawl/squid/hunk_50.cpp,,,data/crawl/squid/old_hunk_50.cpp,data/crawl/squid/new_hunk_50.cpp,-1,104,,"storeAppendPrintf(entry, ""response_delay_pool parameters %"" PRId64 "" %"" PRId64 "" %"" PRId64 "" %"" PRId64 "" %d\n"",
                      individualRestore, individualMaximum, aggregateRestore, aggregateMaximum, initialBucketLevel);","[""addLog""]","[[], [""storeAppendPrintf"", ""entry"", ""response_delay_pool"", ""parameters"", ""%"", ""PRId64"", ""%"", ""PRId64"", ""%"", ""PRId64"", ""%"", ""PRId64"", ""%d\\n"", ""individualRestore"", ""individualMaximum"", ""aggregateRestore"", ""aggregateMaximum"", ""initialBucketLevel""]]",[33644276115130802244],5691,12:00:00
https://github.com/squid-cache/squid/commit/b27668ec6cfce0b56ca6d8ef4b887207f4ecc6b7,19 Feb 2017,"Add response delay pools feature for Squid-to-client speed limiting.

The feature restricts Squid-to-client bandwidth only.  It applies to
both cache hits and misses.

  * Rationale *

  This may be useful for specific response(s) bandwidth limiting.
  There are situations when doing this is hardly possible
  (or impossible) by means of netfilter/iptables operating with
  TCP/IP packets and IP addresses information for filtering. In other
  words, sometimes it is problematic to 'extract' a single response from
  TCP/IP data flow at system level. For example, a single Squid-to-client
  TCP connection can transmit multiple responses (persistent connections,
  pipelining or HTTP/2 connection multiplexing) or be encrypted
  (HTTPS proxy mode).

  * Description *

  When Squid starts delivering the final HTTP response to a client,
  Squid checks response_delay_pool_access rules (supporting fast ACLs
  only), in the order they were declared. The first rule with a
  matching ACL wins.  If (and only if) an ""allow"" rule won, Squid
  assigns the response to the corresponding named delay pool.

  If a response is assigned to a delay pool, the response becomes
  subject to the configured bucket and aggregate bandwidth limits of
  that pool, similar to the current ""class 2"" server-side delay pools,
  but with a brand new, dedicated ""individual"" filled bucket assigned to
  the matched response.

  The new feature serves the same purpose as the existing client-side
  pools: both features limit Squid-to-client bandwidth. Their common
  interface was placed into a new base BandwidthBucket class.  The
  difference is that client-side pools do not aggregate clients and
  always use one bucket per client IP. It is possible that a response
  becomes a subject of both these pools. In such situations only matched
  response delay pool will be used for Squid-to-client speed limiting.

  * Limitations *

  The accurate SMP support (with the aggregate bucket shared among
  workers) is outside this patch scope. In SMP configurations,
  Squid should automatically divide the aggregate_speed_limit and
  max_aggregate_size values among the configured number of Squid
  workers. 

  * Also: *

  Fixed ClientDelayConfig which did not perform cleanup on
  destruction, causing memory problems detected by Valgrind. It was not
  possible to fix this with minimal changes because of linker problems
  with SquidConfig while checking with test-builds.sh. So I had
  to refactor ClientDelayConfig module, separating configuration code
  (old ClientDelayConfig class) from configured data (a new
  ClientDelayPools class) and minimizing dependencies with SquidConfig.",1109,data/crawl/squid/hunk_49.cpp,,,data/crawl/squid/old_hunk_49.cpp,data/crawl/squid/new_hunk_49.cpp,24,32,"storeAppendPrintf(entry, ""%s %d\n"", name, (int)pools.size());","storeAppendPrintf(entry, ""%s %d\n"", name, static_cast<int>(pools_.size()));","[""updateVariable"", ""moveVariable"", ""removeVariable""]","[[""pools""], [""static_cast"", ""pools_""]]",[9398466892426568605],5690,12:00:00
https://github.com/squid-cache/squid/commit/e99fa721fc2a16026d284336fabe66db4518c3e5,23 May 2017,"Make PID file check/creation atomic to avoid associated race conditions.

After this change, if N Squid instances are concurrently started shortly
after time TS, then exactly one Squid instance (X) will run (and have
the corresponding PID file). If another Squid instance has already been
running (with the corresponding PID file) at TS, then X will be that
""old"" Squid instance. If no Squid instances were running at TS, then X
will be one of those new N Squids started after TS.

Lack of atomic PID file operations caused unexpected Squid behavior:
* Mismatch between started Squid instance and stored PID file.
* Unexpected crashes due to failed allocation of shared resources,
  such as listening TCP ports or shared memory segments.

A new File class guarantees atomic PID file operations using locks. We
tried to generalize/reuse Ssl::Lock from the certificate generation
helper, but that was a bad idea: Helpers cannot use a lot of Squid code
(e.g., debugs(), TextException, SBuf, and enter_suid()), and the old
Ssl::Lock class cannot support shared locking without a major rewrite.

File locks on Solaris cannot work well (see bug #4212 comment #14), but
those problems do not affect PID file management code. Solaris- and
Windows-specific File code has not been tested and may not build.

Failure to write a PID file is now fatal. It used to be fatal only when
Squid was started with the -C command line option. In the increasingly
SMP world, running without a PID file leads to difficult-to-triage
errors. An admin who does not care about PID files should disable them.

Squid now exits with a non-zero error code if another Squid is running.


Also removed PID file rewriting during reconfiguration in non-daemon
mode. Squid daemons do not support PID file reconfiguration since trunk
r13867, but that revision (accidentally?) left behind half-broken
reconfiguration code for non-daemon mode. Fixing that code is difficult,
and supporting PID reconfigure in non-daemons is probably unnecessary.

Also fixed ""is Squid running?"" check when kill(0) does not have
permissions to signal the other instance. This does happen when Squid is
started (e.g., on the command line) by a different user than the user
Squid normally runs as or, perhaps, when the other Squid instance enters
a privileged section at the time of the check (untested). The bug could
result in undelivered signals or multiple running Squid instances.

These changes do not alter partially broken enter/leave_suid() behavior
of main.cc. That old code will need to be fixed separately!

PID file-related cache.log messages have changed slightly to improve
consistency with other DBG_IMPORTANT messages and to simplify code.
Squid no longer lies about creating a non-configured PID file. TODO:
Consider lowering the importance of these benign/boring messages.


* Terminal errors should throw instead of calling exit()

Squid used to call exit() in many PID-related error cases. Using exit()
as an error handling mechanism creates several problems:

1. exit() does not unwind the stack, possibly executing atexit()
   handlers in the wrong (e.g., privileged) context, possibly leaving
   some RAII-controller resources in bad state, and complicating triage;
2. Using exit() complicates code by adding a yet another error handling
   mechanism to the (appropriate) exceptions and assertions.
3. Spreading exit() calls around the code obscures unreachable code
   areas, complicates unifying exit codes, and confuses code checkers.

Long-term, it is best to use exceptions for nearly all error handling.
Reaching that goal will take time, but we can and should move in that
direction: The adjusted SquidMainSafe() treats exceptions as fatal
errors, without dumping core or assuming that no exception can reach
SquidMainSafe() on purpose. This trivial-looking change significantly
simplified (and otherwise improved) PID-file handling code!

The fatal()-related code suffers from similar (and other) problems, but
we did not need to touch it.

TODO: Audit catch(...) and exit() cases [in main.cc] to take advantage
of the new SquidMainSafe() code supporting the throw-on-errors approach.",1038,data/crawl/squid/hunk_33.cpp,,,data/crawl/squid/old_hunk_33.cpp,data/crawl/squid/new_hunk_33.cpp,30,-1,"fprintf(stderr, ""%s: ERROR: Could not send "", APP_SHORTNAME);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""ERROR"", ""Could"", ""not"", ""send"", ""APP_SHORTNAME""], []]",[-8346943337819867353],5689,0:00:00
https://github.com/squid-cache/squid/commit/4ec218d55249c6edd2a4fe4511212a721c98394b,22 Jul 2017,"Cleaned up net_db structures. Made Coverity happier? (#27)

Fixes false positive by Coverity Scan. Issue 1415048 (RESOURCE_LEAK)?

No runtime testing.",22,data/crawl/squid/hunk_12.cpp,,,data/crawl/squid/old_hunk_12.cpp,data/crawl/squid/new_hunk_12.cpp,3,3,"storeAppendPrintf(sentry, "" %s"", hashKeyStr(&x->hash));","storeAppendPrintf(sentry, "" %s"", hashKeyStr(x));","[""removeVariable"", ""addVariable""]","[[""&x"", ""hash""], [""x""]]",[-7804452891477761235],5688,0:00:00
https://github.com/squid-cache/squid/commit/cf487124163a9a460ad78f5a482a5fd90fcf9cce,02 Nov 2017,"Move TLS/SSL http_port config values to libsecurity (#51)

These are most of the minor shuffling prerequisite for the proposal to allow generate-host-certificates to set a CA filename. These are required in libsecurity in order to prevent circular dependencies between libsecurity, libssl and libanyp.

Also contains some improvements to how configuration errors are displayed for these affected settings and some bugs fixed where the configured values were handled incorrectly.",608,data/crawl/squid/hunk_10.cpp,,,data/crawl/squid/old_hunk_10.cpp,data/crawl/squid/new_hunk_10.cpp,-1,36,,"fatalf(""%s_port %s initialization error"", portType, port.s.toUrl(buf, sizeof(buf)));","[""addLog""]","[[], [""fatalf"", ""%s_port"", ""%s"", ""initialization"", ""error"", ""portType"", ""port"", ""s"", ""toUrl"", ""buf"", ""sizeof"", ""buf""]]",[17945467262283022975],5687,"45 days, 12:00:00"
