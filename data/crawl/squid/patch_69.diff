----++++src/security/PeerOptions.cc
@@ -198,6 +198,8 @@ Security::PeerOptions::createBlankContext() const
     Security::ContextPtr t = nullptr;
 
 #if USE_OPENSSL
+    Ssl::Initialize();
+
 #if (OPENSSL_VERSION_NUMBER &gt;= 0x10100000L)
     t = SSL_CTX_new(TLS_client_method());
 #else
----++++src/security/ServerOptions.cc
@@ -10,6 +10,9 @@
 #include &quot;base/Packable.h&quot;
 #include &quot;globals.h&quot;
 #include &quot;security/ServerOptions.h&quot;
+#if USE_OPENSSL
+#include &quot;ssl/support.h&quot;
+#endif
 
 #if HAVE_OPENSSL_ERR_H
 #include &lt;openssl/err.h&gt;
@@ -96,6 +99,8 @@ Security::ServerOptions::createBlankContext() const
     Security::ContextPtr t = nullptr;
 
 #if USE_OPENSSL
+    Ssl::Initialize();
+
 #if (OPENSSL_VERSION_NUMBER &gt;= 0x10100000L)
     t = SSL_CTX_new(TLS_server_method());
 #else
----++++src/ssl/support.cc
@@ -430,9 +430,8 @@ ssl_free_SBuf(void *, void *ptr, CRYPTO_EX_DATA *,
     delete buf;
 }
 
-/// \ingroup ServerProtocolSSLInternal
-static void
-ssl_initialize(void)
+void
+Ssl::Initialize(void)
 {
     static bool initialized = false;
     if (initialized)
@@ -443,22 +442,22 @@ ssl_initialize(void)
     SSLeay_add_ssl_algorithms();
 
 #if HAVE_OPENSSL_ENGINE_H
-    if (Config.SSL.ssl_engine) {
+    if (::Config.SSL.ssl_engine) {
         ENGINE *e;
-        if (!(e = ENGINE_by_id(Config.SSL.ssl_engine)))
-            fatalf("Unable to find SSL engine '%s'\n", Config.SSL.ssl_engine);
+        if (!(e = ENGINE_by_id(::Config.SSL.ssl_engine)))
+            fatalf("Unable to find SSL engine '%s'\n", ::Config.SSL.ssl_engine);
 
         if (!ENGINE_set_default(e, ENGINE_METHOD_ALL)) {
             const int ssl_error = ERR_get_error();
             fatalf(&quot;Failed to initialise SSL engine: %s\n&quot;, ERR_error_string(ssl_error, NULL));
         }
     }
 #else
-    if (Config.SSL.ssl_engine)
+    if (::Config.SSL.ssl_engine)
         fatalf(&quot;Your OpenSSL has no SSL engine support\n&quot;);
 #endif
 
-    const char *defName = Config.SSL.certSignHash ? Config.SSL.certSignHash : SQUID_SSL_SIGN_HASH_IF_NONE;
+    const char *defName = ::Config.SSL.certSignHash ? ::Config.SSL.certSignHash : SQUID_SSL_SIGN_HASH_IF_NONE;
     Ssl::DefaultSignHash = EVP_get_digestbyname(defName);
     if (!Ssl::DefaultSignHash)
         fatalf(&quot;Sign hash &#39;%s&#39; is not supported\n&quot;, defName);
@@ -560,8 +559,6 @@ configureSslContext(Security::ContextPtr sslContext, AnyP::PortCfg &amp;port)
 Security::ContextPtr
 sslCreateServerContext(AnyP::PortCfg &amp;port)
 {
-    ssl_initialize();
-
     Security::ContextPtr sslContext(port.secure.createBlankContext());
     if (!sslContext)
         return nullptr;
@@ -636,7 +633,7 @@ ssl_next_proto_cb(SSL *s, unsigned char **out, unsigned char *outlen, const unsi
 Security::ContextPtr
 sslCreateClientContext(const char *certfile, const char *keyfile, const char *cipher, long options, long fl)
 {
-    ssl_initialize();
+    Ssl::Initialize();
 
 #if (OPENSSL_VERSION_NUMBER &gt;= 0x10100000L)
     Security::ContextPtr sslContext(SSL_CTX_new(TLS_client_method()));
----++++src/ssl/support.h
@@ -56,6 +56,10 @@ class PortCfg;
 
 namespace Ssl
 {
+/// initialize the SSL library global state.
+/// call before generating any SSL context
+void Initialize();
+
 /// Squid defined error code (&lt;0),  an error code returned by SSL X509 api, or SSL_ERROR_NONE
 typedef int ssl_error_t;
 
----++++GitHub