@@ -1,7 +1,7 @@
 #
 #  Makefile for the Squid Object Cache server
 #
-#  $Id: Makefile.in,v 1.59 1996/12/03 00:46:11 wessels Exp $
+#  $Id: Makefile.in,v 1.60 1996/12/03 20:26:46 wessels Exp $
 #
 #  Uncomment and customize the following to suit your needs:
 #
@@ -111,7 +111,6 @@ OBJS	 	= \
 		store_clean.o \
 		storetoString.o \
 		tools.o \
-		timestamps.o \
 		url.o \
 		wais.o \
 		useragent.o \
@@ -1,5 +1,5 @@
 /*
- * $Id: acl.cc,v 1.67 1996/11/26 19:05:10 wessels Exp $
+ * $Id: acl.cc,v 1.68 1996/12/03 20:26:47 wessels Exp $
  *
  * DEBUG: section 28    Access Control
  * AUTHOR: Duane Wessels
@@ -220,7 +220,7 @@ decode_addr(const char *asc, struct in_addr *addr, struct in_addr *mask)
 	break;
     case 1:			/* a significant bits value for a mask */
 	if (a1 >= 0 && a1 < 33) {
-	    addr->s_addr = htonl(0xfffffffful << (32 - a1));
+	    addr->s_addr = a1 ? htonl(0xfffffffful << (32 - a1)) : 0;
 	    break;
 	}
     default:
@@ -1,5 +1,5 @@
 /*
- * $Id: cache_cf.cc,v 1.150 1996/12/02 07:06:54 wessels Exp $
+ * $Id: cache_cf.cc,v 1.151 1996/12/03 20:26:48 wessels Exp $
  *
  * DEBUG: section 3     Configuration File Parsing
  * AUTHOR: Harvest Derived
@@ -381,7 +381,7 @@ addToIPACL(ip_acl ** list, const char *ip_str, ip_access_type access)
 		    ip_str);
 		return;
 	    }
-	    lmask.s_addr = htonl(0xfffffffful << (32 - m1));
+	    lmask.s_addr = m1 ? htonl(0xfffffffful << (32 - m1)) : 0;
 	    break;
 
 	case 8:
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.69 1996/11/27 22:19:18 wessels Exp $
+ * $Id: client_side.cc,v 1.70 1996/12/03 20:26:49 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -458,7 +458,7 @@ icpHandleIMSReply(int fd, StoreEntry * entry, void *data)
 	entry = icpState->entry = oldentry;
 	if (mime_headers_end(hbuf)) {
 	    httpParseReplyHeaders(hbuf, entry->mem_obj->reply);
-	    timestampsSet(entry);
+	    storeTimestampsSet(entry);
 	} else {
 	    debug(33, 1, "icpHandleIMSReply: No end-of-headers, len=%d\n", len);
 	    debug(33, 1, "  --> '%s'\n", entry->url);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: comm.cc,v 1.114 1996/12/03 00:46:12 wessels Exp $
+ * $Id: comm.cc,v 1.115 1996/12/03 20:26:51 wessels Exp $
  *
  * DEBUG: section 5     Socket Functions
  * AUTHOR: Harvest Derived
@@ -668,7 +668,7 @@ comm_select_incoming(void)
     /* TO FIX: repoll ICP connection here */
 }
 
-#else 
+#else
 
 static void
 comm_select_incoming(void)
@@ -1317,9 +1317,12 @@ examine_select(fd_set * readfds, fd_set * writefds)
 	    continue;
 	}
 	f = &fd_table[fd];
+	debug(5, 0, "FD %d: %s\n", xstrerror());
 	debug(5, 0, "WARNING: FD %d has handlers, but it's invalid.\n", fd);
-	debug(5, 0, "FD %d is a %s\n", fd, fdstatTypeStr[fdstatGetType(fd)]);
-	debug(5, 0, "--> %s\n", fd_note(fd, NULL));
+	debug(5, 0, "FD %d is a %s called '%s'\n",
+	    fd,
+	    fdstatTypeStr[fdstatGetType(fd)],
+	    fd_note(fd, NULL));
 	debug(5, 0, "lifetm:%p tmout:%p read:%p write:%p\n",
 	    f->lifetime_handler,
 	    f->timeout_handler,
@@ -1,6 +1,6 @@
 
 /*
- * $Id: ftp.cc,v 1.89 1996/12/02 05:55:07 wessels Exp $
+ * $Id: ftp.cc,v 1.90 1996/12/03 20:26:52 wessels Exp $
  *
  * DEBUG: section 9     File Transfer Protocol (FTP)
  * AUTHOR: Harvest Derived
@@ -237,7 +237,7 @@ ftpProcessReplyHeader(FtpStateData * data, const char *buf, int size)
 	    data->reply_hdr);
 	/* Parse headers into reply structure */
 	httpParseReplyHeaders(data->reply_hdr, reply);
-	timestampsSet(entry);
+	storeTimestampsSet(entry);
 	/* Check if object is cacheable or not based on reply code */
 	if (reply->code)
 	    debug(11, 3, "ftpProcessReplyHeader: HTTP CODE: %d\n", reply->code);
@@ -358,7 +358,7 @@ ftpReadReply(int fd, FtpStateData * data)
 	    BIT_RESET(entry->flag, ENTRY_CACHABLE);
 	    storeReleaseRequest(entry);
 	} else if (!(entry->flag & DELETE_BEHIND)) {
-	    timestampsSet(entry);
+	    storeTimestampsSet(entry);
 	}
 	/* update fdstat and fdtable */
 	storeComplete(entry);
@@ -1,5 +1,5 @@
 /*
- * $Id: gopher.cc,v 1.69 1996/11/30 23:09:51 wessels Exp $
+ * $Id: gopher.cc,v 1.70 1996/12/03 20:26:53 wessels Exp $
  *
  * DEBUG: section 10    Gopher
  * AUTHOR: Harvest Derived
@@ -800,7 +800,7 @@ gopherReadReply(int fd, GopherStateData * data)
 	if (data->conversion != NORMAL)
 	    gopherEndHTML(data);
 	if (!(entry->flag & DELETE_BEHIND))
-	    timestampsSet(entry);
+	    storeTimestampsSet(entry);
 	BIT_RESET(entry->flag, DELAY_SENDING);
 	storeComplete(entry);
 	comm_close(fd);
@@ -1,5 +1,5 @@
 /*
- * $Id: http.cc,v 1.124 1996/12/03 17:00:11 wessels Exp $
+ * $Id: http.cc,v 1.125 1996/12/03 20:26:53 wessels Exp $
  *
  * DEBUG: section 11    Hypertext Transfer Protocol (HTTP)
  * AUTHOR: Harvest Derived
@@ -260,7 +260,8 @@ httpParseReplyHeaders(const char *buf, struct _http_reply *reply)
     char *headers = NULL;
     char *t = NULL;
     char *s = NULL;
-    int delta;
+    time_t delta;
+    size_t l;
 
     ReplyHeaderStats.parsed++;
     headers = xstrdup(buf);
@@ -277,8 +278,12 @@ httpParseReplyHeaders(const char *buf, struct _http_reply *reply)
 	    }
 	} else if (!strncasecmp(t, "Content-type:", 13)) {
 	    if ((t = strchr(t, ' '))) {
-		t++;
-		xstrncpy(reply->content_type, t, HTTP_REPLY_FIELD_SZ);
+		while (isspace(*t))
+		    t++;
+		l = strcspn(t, crlf) + 1;
+		if (l > HTTP_REPLY_FIELD_SZ)
+		    l = HTTP_REPLY_FIELD_SZ;
+		xstrncpy(reply->content_type, t, l);
 		ReplyHeaderStats.ctype++;
 	    }
 	} else if (!strncasecmp(t, "Content-length:", 15)) {
@@ -289,20 +294,24 @@ httpParseReplyHeaders(const char *buf, struct _http_reply *reply)
 	    }
 	} else if (!strncasecmp(t, "Date:", 5)) {
 	    if ((t = strchr(t, ' '))) {
-		t++;
-		xstrncpy(reply->date, t, HTTP_REPLY_FIELD_SZ);
+		reply->date = parse_rfc1123(++t);
 		ReplyHeaderStats.date++;
 	    }
 	} else if (!strncasecmp(t, "Expires:", 8)) {
 	    if ((t = strchr(t, ' '))) {
-		t++;
-		xstrncpy(reply->expires, t, HTTP_REPLY_FIELD_SZ);
+		reply->expires = parse_rfc1123(++t);
+		/*
+		 * The HTTP/1.0 specs says that robust implementations
+		 * should consider bad or malformed Expires header as
+		 * equivalent to "expires immediately."
+		 */
+		if (reply->expires == -1)
+		    reply->expires = squid_curtime;
 		ReplyHeaderStats.exp++;
 	    }
 	} else if (!strncasecmp(t, "Last-Modified:", 14)) {
 	    if ((t = strchr(t, ' '))) {
-		t++;
-		xstrncpy(reply->last_modified, t, HTTP_REPLY_FIELD_SZ);
+		reply->last_modified = parse_rfc1123(++t);
 		ReplyHeaderStats.lm++;
 	    }
 	} else if (!strncasecmp(t, "Cache-Control:", 14)) {
@@ -332,22 +341,15 @@ httpParseReplyHeaders(const char *buf, struct _http_reply *reply)
 		ReplyHeaderStats.cc[SCC_PROXYREVALIDATE]++;
 	    } else if (!strncasecmp(t, "max-age", 7)) {
 		if ((t = strchr(t, '='))) {
-		    delta = atoi(++t);
+		    delta = (time_t) atoi(++t);
+		    reply->expires = squid_curtime + delta;
 		    EBIT_SET(reply->cache_control, SCC_MAXAGE);
 		    ReplyHeaderStats.cc[SCC_MAXAGE]++;
-		    strcpy(reply->expires, mkrfc1123(squid_curtime + delta));
 		}
 	    }
 	}
 	t = strtok(NULL, "\n");
     }
-#if LOG_TIMESTAMPS
-    fprintf(timestamp_log, "T %9d D %9d L %9d E %9d\n",
-	squid_curtime,
-	parse_rfc1123(reply->date),
-	parse_rfc1123(reply->last_modified),
-	parse_rfc1123(reply->expires));
-#endif /* LOG_TIMESTAMPS */
     safe_free(headers);
 }
 
@@ -395,7 +397,7 @@ httpProcessReplyHeader(HttpStateData * httpState, const char *buf, int size)
 	    httpState->reply_hdr);
 	/* Parse headers into reply structure */
 	httpParseReplyHeaders(httpState->reply_hdr, reply);
-	timestampsSet(entry);
+	storeTimestampsSet(entry);
 	/* Check if object is cacheable or not based on reply code */
 	if (reply->code)
 	    debug(11, 3, "httpProcessReplyHeader: HTTP CODE: %d\n", reply->code);
@@ -411,13 +413,13 @@ httpProcessReplyHeader(HttpStateData * httpState, const char *buf, int size)
 		httpMakePrivate(entry);
 	    else if (EBIT_TEST(reply->cache_control, SCC_NOCACHE))
 		httpMakePrivate(entry);
-	    else if (*reply->date)
+	    else if (reply->date > -1)
 		httpMakePublic(entry);
-	    else if (*reply->last_modified)
+	    else if (reply->last_modified > -1)
 		httpMakePublic(entry);
 	    else if (!httpState->neighbor)
 		httpMakePublic(entry);
-	    else if (*reply->expires)
+	    else if (reply->expires > -1)
 		httpMakePublic(entry);
 	    else if (entry->mem_obj->request->protocol != PROTO_HTTP)
 		/* XXX Remove this check after a while.  DW 8/21/96
@@ -430,7 +432,7 @@ httpProcessReplyHeader(HttpStateData * httpState, const char *buf, int size)
 	    break;
 	    /* Responses that only are cacheable if the server says so */
 	case 302:		/* Moved temporarily */
-	    if (*reply->expires)
+	    if (reply->expires > -1)
 		httpMakePublic(entry);
 	    else
 		httpMakePrivate(entry);
@@ -1,5 +1,5 @@
 /*
- * $Id: main.cc,v 1.122 1996/12/02 05:54:41 wessels Exp $
+ * $Id: main.cc,v 1.123 1996/12/03 20:26:57 wessels Exp $
  *
  * DEBUG: section 1     Startup and Main Loop
  * AUTHOR: Harvest Derived
@@ -439,10 +439,10 @@ serverConnectionsOpen(void)
 	    ttl = 0;
 	    x = sizeof(char);
 	    getsockopt(vizSock, IPPROTO_IP, IP_MULTICAST_TTL, &ttl, &x);
-	    debug(0,0,"vizSock on FD %d, ttl=%d\n", vizSock, (int) ttl);
+	    debug(0, 0, "vizSock on FD %d, ttl=%d\n", vizSock, (int) ttl);
 	}
 #else
-	debug(1,0,"vizSock: Could not join multicast group\n");
+	debug(1, 0, "vizSock: Could not join multicast group\n");
 #endif
 	memset((char *) &Config.vizHack.S, '\0', sizeof(struct sockaddr_in));
 	Config.vizHack.S.sin_family = AF_INET;
@@ -1,6 +1,6 @@
 
 /*
- * $Id: squid.h,v 1.81 1996/12/03 00:46:13 wessels Exp $
+ * $Id: squid.h,v 1.82 1996/12/03 20:26:58 wessels Exp $
  *
  * AUTHOR: Duane Wessels
  *
@@ -352,7 +352,6 @@ extern int objcacheStart _PARAMS((int, const char *, StoreEntry *));
 extern void send_announce _PARAMS((void *unused));
 extern int sslStart _PARAMS((int fd, const char *, request_t *, char *, int *sz));
 extern const char *storeToString _PARAMS((const StoreEntry *));
-extern void timestampsSet _PARAMS((StoreEntry *));
 extern int waisStart _PARAMS((int, const char *, method_t, char *, StoreEntry *));
 extern void storeDirClean _PARAMS((void *unused));
 extern int passStart _PARAMS((int fd,
@@ -367,4 +366,6 @@ extern void identStart _PARAMS((int, icpStateData *,
 extern const char *const dash_str;
 extern const char *const null_string;
 
+#define OR(A,B) (A ? A : B)
+
 #endif /* SQUID_H */
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stat.cc,v 1.110 1996/12/02 05:55:10 wessels Exp $
+ * $Id: stat.cc,v 1.111 1996/12/03 20:26:59 wessels Exp $
  *
  * DEBUG: section 18    Cache Manager Statistics
  * AUTHOR: Harvest Derived
@@ -1053,13 +1053,12 @@ log_append(const cacheinfo * obj,
     int http_code,
     int msec,
     const char *ident,
-#if !LOG_FULL_HEADERS
-    const struct _hierarchyLogData *hierData
-#else
     const struct _hierarchyLogData *hierData,
+#if LOG_FULL_HEADERS
     const char *request_hdr,
-    const char *reply_hdr
+    const char *reply_hdr,
 #endif				/* LOG_FULL_HEADERS */
+    const char *content_type
 )
 {
 #if LOG_FULL_HEADERS
@@ -1073,6 +1072,9 @@ log_append(const cacheinfo * obj,
     const char *hier_host = dash_str;
     int hier_timeout = 0;
 
+    if (obj->logfile_status != LOG_ENABLE)
+	return;
+
     if (Config.Log.log_fqdn)
 	client = fqdncache_gethostbyaddr(caddr, 0);
     if (client == NULL)
@@ -1084,62 +1086,63 @@ log_append(const cacheinfo * obj,
 	method = dash_str;
     if (!url)
 	url = dash_str;
+    if (!content_type)
+	content_type = dash_str;
     if (!ident || ident[0] == '\0')
 	ident = dash_str;
     if (hierData) {
 	hier_code = hierData->code;
 	hier_host = hierData->host ? hierData->host : dash_str;
 	hier_timeout = hierData->timeout;
     }
-    if (obj->logfile_status == LOG_ENABLE) {
-	if (Config.commonLogFormat)
-	    sprintf(tmp, "%s %s - [%s] \"%s %s\" %s %d\n",
-		client,
-		ident,
-		mkhttpdlogtime(&squid_curtime),
-		method,
-		url,
-		action,
-		size);
-	else
-	    sprintf(tmp, "%9d.%03d %6d %s %s/%03d %d %s %s %s %s%s/%s\n",
-		(int) current_time.tv_sec,
-		(int) current_time.tv_usec / 1000,
-		msec,
-		client,
-		action,
-		http_code,
-		size,
-		method,
-		url,
-		ident,
-		hier_timeout ? "TIMEOUT_" : null_string,
-		hier_strings[hier_code],
-		hier_host);
+    if (Config.commonLogFormat)
+	sprintf(tmp, "%s %s - [%s] \"%s %s\" %s %d\n",
+	    client,
+	    ident,
+	    mkhttpdlogtime(&squid_curtime),
+	    method,
+	    url,
+	    action,
+	    size);
+    else
+	sprintf(tmp, "%9d.%03d %6d %s %s/%03d %d %s %s %s %s%s/%s %s\n",
+	    (int) current_time.tv_sec,
+	    (int) current_time.tv_usec / 1000,
+	    msec,
+	    client,
+	    action,
+	    http_code,
+	    size,
+	    method,
+	    url,
+	    ident,
+	    hier_timeout ? "TIMEOUT_" : null_string,
+	    hier_strings[hier_code],
+	    hier_host,
+	    content_type);
 #if LOG_FULL_HEADERS
-	if (Config.logMimeHdrs) {
-	    int msize = strlen(tmp);
-	    char *ereq = log_quote(request_hdr);
-	    char *erep = log_quote(reply_hdr);
+    if (Config.logMimeHdrs) {
+	int msize = strlen(tmp);
+	char *ereq = log_quote(request_hdr);
+	char *erep = log_quote(reply_hdr);
 
-	    if (msize + strlen(ereq) + strlen(erep) + 7 <= sizeof(tmp))
-		sprintf(tmp + msize - 1, " [%s] [%s]\n", ereq, erep);
-	    else
-		debug(18, 1, "log_append: Long headers not logged.\n");
-	    safe_free(ereq);
-	    safe_free(erep);
-	}
-#endif /* LOG_FULL_HEADERS */
-	x = file_write(obj->logfile_fd,
-	    xstrdup(tmp),
-	    strlen(tmp),
-	    obj->logfile_access,
-	    NULL,
-	    NULL,
-	    xfree);
-	if (x != DISK_OK)
-	    debug(18, 1, "log_append: File write failed.\n");
+	if (msize + strlen(ereq) + strlen(erep) + 7 <= sizeof(tmp))
+	    sprintf(tmp + msize - 1, " [%s] [%s]\n", ereq, erep);
+	else
+	    debug(18, 1, "log_append: Long headers not logged.\n");
+	safe_free(ereq);
+	safe_free(erep);
     }
+#endif /* LOG_FULL_HEADERS */
+    x = file_write(obj->logfile_fd,
+	xstrdup(tmp),
+	strlen(tmp),
+	obj->logfile_access,
+	NULL,
+	NULL,
+	xfree);
+    if (x != DISK_OK)
+	debug(18, 1, "log_append: File write failed.\n");
 }
 
 static void
@@ -1,6 +1,6 @@
 
 /*
- * $Id: store.cc,v 1.173 1996/12/02 03:32:03 wessels Exp $
+ * $Id: store.cc,v 1.174 1996/12/03 20:27:01 wessels Exp $
  *
  * DEBUG: section 20    Storeage Manager
  * AUTHOR: Harvest Derived
@@ -283,6 +283,9 @@ new_MemObject(void)
 {
     MemObject *mem = get_free_mem_obj();
     mem->reply = xcalloc(1, sizeof(struct _http_reply));
+    mem->reply->date = -1;
+    mem->reply->expires = -1;
+    mem->reply->last_modified = -1;
     meta_data.mem_obj_count++;
     meta_data.misc += sizeof(struct _http_reply);
     debug(20, 3, "new_MemObject: returning %p\n", mem);
@@ -437,11 +440,11 @@ storeSetMemStatus(StoreEntry * e, mem_status_t status)
 
 /* -------------------------------------------------------------------------- */
 
+#ifdef OLD_CODE
 static char *
 time_describe(time_t t)
 {
     LOCAL_ARRAY(char, buf, 128);
-
     if (t < 60) {
 	sprintf(buf, "%ds", (int) t);
     } else if (t < 3600) {
@@ -459,33 +462,31 @@ time_describe(time_t t)
     }
     return buf;
 }
+#endif
 
 static void
 storeLog(int tag, const StoreEntry * e)
 {
     LOCAL_ARRAY(char, logmsg, MAX_URL << 1);
-    time_t t = -1;
-    int expect_len = 0;
-    int actual_len = 0;
-    int code = 0;
+    MemObject *mem = e->mem_obj;
+    struct _http_reply *reply;
     if (storelog_fd < 0)
 	return;
-    if (-1 < e->expires)
-	t = e->expires - squid_curtime;
-    if (e->mem_obj) {
-	code = e->mem_obj->reply->code;
-	expect_len = (int) e->mem_obj->reply->content_length;
-	actual_len = (int) e->mem_obj->e_current_len - e->mem_obj->reply->hdr_sz;
-    }
-    sprintf(logmsg, "%9d.%03d %-7s %4d %9d [%3s] %d/%d %s\n",
+    if (mem == NULL)
+	return;
+    reply = mem->reply;
+    sprintf(logmsg, "%9d.%03d %-7s %4d %9d %9d %9d %s %d/%d %s %s\n",
 	(int) current_time.tv_sec,
 	(int) current_time.tv_usec / 1000,
 	storeLogTags[tag],
-	code,
-	(int) t,
-	time_describe(t),
-	expect_len,
-	actual_len,
+	reply->code,
+	(int) reply->date,
+	(int) reply->last_modified,
+	(int) reply->expires,
+	reply->content_type[0] ? reply->content_type : "unknown",
+	reply->content_length,
+	mem->e_current_len - mem->reply->hdr_sz,
+	RequestMethodStr[e->method],
 	e->key);
     file_write(storelog_fd,
 	xstrdup(logmsg),
@@ -790,7 +791,7 @@ storeCreateEntry(const char *url,
     mem->data = new_MemObjectData();
     e->refcount = 0;
     e->lastref = squid_curtime;
-    e->timestamp = 0;		/* set in timestampsSet() */
+    e->timestamp = 0;		/* set in storeTimestampsSet() */
     e->ping_status = PING_NONE;
 
     /* allocate client list */
@@ -1092,6 +1093,10 @@ storeSwapInHandle(int fd_notused, const char *buf, int len, int flag, StoreEntry
     debug(20, 5, "storeSwapInHandle: e->e_current_len = %d\n", mem->e_current_len);
     debug(20, 5, "storeSwapInHandle: e->object_len    = %d\n", e->object_len);
 
+    if (len && mem->swap_offset == 0)
+	httpParseReplyHeaders(buf, mem->reply);
+    /* Assumes we got all the headers in one read() */
+
     /* always call these, even if len == 0 */
     mem->swap_offset += len;
     storeAppend(e, buf, len);
@@ -2825,3 +2830,17 @@ storeFirstClientFD(MemObject * mem)
     }
     return -1;
 }
+
+void
+storeTimestampsSet(StoreEntry * entry)
+{
+    time_t served_date = -1;
+    struct _http_reply *reply = entry->mem_obj->reply;
+    served_date = reply->date > -1 ? reply->date : squid_curtime;
+    entry->expires = reply->expires;
+    if (reply->last_modified > -1)
+	entry->lastmod = reply->last_modified;
+    else
+	entry->lastmod = served_date;
+    entry->timestamp = served_date;
+}