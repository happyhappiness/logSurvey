----++++src/aggregation.c
@@ -403,9 +403,10 @@ static int agg_instance_read(agg_instance_t *inst, cdtime_t t) /* {{{ */
     READ_FUNC(average, (inst-&gt;sum / ((gauge_t)inst-&gt;num)));
     READ_FUNC(min, inst-&gt;min);
     READ_FUNC(max, inst-&gt;max);
-    READ_FUNC(stddev, sqrt((((gauge_t)inst-&gt;num) * inst-&gt;squares_sum) -
-                           (inst-&gt;sum * inst-&gt;sum)) /
-                          ((gauge_t)inst-&gt;num));
+    READ_FUNC(stddev,
+              sqrt((((gauge_t)inst-&gt;num) * inst-&gt;squares_sum) -
+                   (inst-&gt;sum * inst-&gt;sum)) /
+                  ((gauge_t)inst-&gt;num));
   }
 
   /* Reset internal state. */
@@ -504,11 +505,7 @@ static int agg_config_handle_group_by(oconfig_item_t const *ci, /* {{{ */
 
 static int agg_config_aggregation(oconfig_item_t *ci) /* {{{ */
 {
-  aggregation_t *agg;
-  _Bool is_valid;
-  int status;
-
-  agg = calloc(1, sizeof(*agg));
+  aggregation_t *agg = calloc(1, sizeof(*agg));
   if (agg == NULL) {
     ERROR(&quot;aggregation plugin: calloc failed.&quot;);
     return -1;
@@ -523,49 +520,55 @@ static int agg_config_aggregation(oconfig_item_t *ci) /* {{{ */
 
   for (int i = 0; i &lt; ci-&gt;children_num; i++) {
     oconfig_item_t *child = ci-&gt;children + i;
+    int status = 0;
 
     if (strcasecmp(&quot;Host&quot;, child-&gt;key) == 0)
-      cf_util_get_string_buffer(child, agg-&gt;ident.host,
-                                sizeof(agg-&gt;ident.host));
+      status = cf_util_get_string_buffer(child, agg-&gt;ident.host,
+                                         sizeof(agg-&gt;ident.host));
     else if (strcasecmp(&quot;Plugin&quot;, child-&gt;key) == 0)
-      cf_util_get_string_buffer(child, agg-&gt;ident.plugin,
-                                sizeof(agg-&gt;ident.plugin));
+      status = cf_util_get_string_buffer(child, agg-&gt;ident.plugin,
+                                         sizeof(agg-&gt;ident.plugin));
     else if (strcasecmp(&quot;PluginInstance&quot;, child-&gt;key) == 0)
-      cf_util_get_string_buffer(child, agg-&gt;ident.plugin_instance,
-                                sizeof(agg-&gt;ident.plugin_instance));
+      status = cf_util_get_string_buffer(child, agg-&gt;ident.plugin_instance,
+                                         sizeof(agg-&gt;ident.plugin_instance));
     else if (strcasecmp(&quot;Type&quot;, child-&gt;key) == 0)
-      cf_util_get_string_buffer(child, agg-&gt;ident.type,
-                                sizeof(agg-&gt;ident.type));
+      status = cf_util_get_string_buffer(child, agg-&gt;ident.type,
+                                         sizeof(agg-&gt;ident.type));
     else if (strcasecmp(&quot;TypeInstance&quot;, child-&gt;key) == 0)
-      cf_util_get_string_buffer(child, agg-&gt;ident.type_instance,
-                                sizeof(agg-&gt;ident.type_instance));
+      status = cf_util_get_string_buffer(child, agg-&gt;ident.type_instance,
+                                         sizeof(agg-&gt;ident.type_instance));
     else if (strcasecmp(&quot;SetHost&quot;, child-&gt;key) == 0)
-      cf_util_get_string(child, &amp;agg-&gt;set_host);
+      status = cf_util_get_string(child, &amp;agg-&gt;set_host);
     else if (strcasecmp(&quot;SetPlugin&quot;, child-&gt;key) == 0)
-      cf_util_get_string(child, &amp;agg-&gt;set_plugin);
+      status = cf_util_get_string(child, &amp;agg-&gt;set_plugin);
     else if (strcasecmp(&quot;SetPluginInstance&quot;, child-&gt;key) == 0)
-      cf_util_get_string(child, &amp;agg-&gt;set_plugin_instance);
+      status = cf_util_get_string(child, &amp;agg-&gt;set_plugin_instance);
     else if (strcasecmp(&quot;SetTypeInstance&quot;, child-&gt;key) == 0)
-      cf_util_get_string(child, &amp;agg-&gt;set_type_instance);
+      status = cf_util_get_string(child, &amp;agg-&gt;set_type_instance);
     else if (strcasecmp(&quot;GroupBy&quot;, child-&gt;key) == 0)
-      agg_config_handle_group_by(child, agg);
+      status = agg_config_handle_group_by(child, agg);
     else if (strcasecmp(&quot;CalculateNum&quot;, child-&gt;key) == 0)
-      cf_util_get_boolean(child, &amp;agg-&gt;calc_num);
+      status = cf_util_get_boolean(child, &amp;agg-&gt;calc_num);
     else if (strcasecmp(&quot;CalculateSum&quot;, child-&gt;key) == 0)
-      cf_util_get_boolean(child, &amp;agg-&gt;calc_sum);
+      status = cf_util_get_boolean(child, &amp;agg-&gt;calc_sum);
     else if (strcasecmp(&quot;CalculateAverage&quot;, child-&gt;key) == 0)
-      cf_util_get_boolean(child, &amp;agg-&gt;calc_average);
+      status = cf_util_get_boolean(child, &amp;agg-&gt;calc_average);
     else if (strcasecmp(&quot;CalculateMinimum&quot;, child-&gt;key) == 0)
-      cf_util_get_boolean(child, &amp;agg-&gt;calc_min);
+      status = cf_util_get_boolean(child, &amp;agg-&gt;calc_min);
     else if (strcasecmp(&quot;CalculateMaximum&quot;, child-&gt;key) == 0)
-      cf_util_get_boolean(child, &amp;agg-&gt;calc_max);
+      status = cf_util_get_boolean(child, &amp;agg-&gt;calc_max);
     else if (strcasecmp(&quot;CalculateStddev&quot;, child-&gt;key) == 0)
-      cf_util_get_boolean(child, &amp;agg-&gt;calc_stddev);
+      status = cf_util_get_boolean(child, &amp;agg-&gt;calc_stddev);
     else
       WARNING(&quot;aggregation plugin: The \&quot;%s\&quot; key is not allowed inside &quot;
               &quot;&lt;Aggregation /&gt; blocks and will be ignored.&quot;,
               child-&gt;key);
-  }
+
+    if (status != 0) {
+      sfree(agg);
+      return status;
+    }
+  } /* for (int i = 0; i &lt; ci-&gt;children_num; i++) */
 
   if (agg_is_regex(agg-&gt;ident.host))
     agg-&gt;regex_fields |= LU_GROUP_BY_HOST;
@@ -577,7 +580,7 @@ static int agg_config_aggregation(oconfig_item_t *ci) /* {{{ */
     agg-&gt;regex_fields |= LU_GROUP_BY_TYPE_INSTANCE;
 
   /* Sanity checking */
-  is_valid = 1;
+  _Bool is_valid = 1;
   if (strcmp(&quot;/.*/&quot;, agg-&gt;ident.type) == 0) /* {{{ */
   {
     ERROR(&quot;aggregation plugin: It appears you did not specify the required &quot;
@@ -631,13 +634,12 @@ static int agg_config_aggregation(oconfig_item_t *ci) /* {{{ */
     is_valid = 0;
   } /* }}} */
 
-  if (!is_valid) /* {{{ */
-  {
+  if (!is_valid) { /* {{{ */
     sfree(agg);
     return -1;
   } /* }}} */
 
-  status = lookup_add(lookup, &amp;agg-&gt;ident, agg-&gt;group_by, agg);
+  int status = lookup_add(lookup, &amp;agg-&gt;ident, agg-&gt;group_by, agg);
   if (status != 0) {
     ERROR(&quot;aggregation plugin: lookup_add failed with status %i.&quot;, status);
     sfree(agg);
----++++src/libcollectdclient/network_parse_test.c
@@ -412,6 +412,7 @@ static int test_parse_values() {
   return ret;
 }
 
+#if HAVE_GCRYPT_H
 static int test_verify_sha256() {
   int ret = 0;
 
@@ -441,7 +442,9 @@ static int test_verify_sha256() {
 
   return ret;
 }
+#endif
 
+#if HAVE_GCRYPT_H
 static int test_decrypt_aes256() {
   char const *iv_str = &quot;4cbe2a747c9f9dcfa0e66f0c2fa74875&quot;;
   uint8_t iv[16] = {0};
@@ -480,12 +483,11 @@ static int test_decrypt_aes256() {
 
   return 0;
 }
+#endif
 
 int main(void) {
   int ret = 0;
 
-  printf(&quot;libcollectdclient/server_test.c\n&quot;);
-
   int status;
   if ((status = test_network_parse())) {
     ret = status;
@@ -500,12 +502,14 @@ int main(void) {
     ret = status;
   }
 
+#if HAVE_GCRYPT_H
   if ((status = test_verify_sha256())) {
     ret = status;
   }
   if ((status = test_decrypt_aes256())) {
     ret = status;
   }
+#endif
 
   return ret;
 }
----++++src/ping.c
@@ -81,11 +81,11 @@ static double ping_interval = 1.0;
 static double ping_timeout = 0.9;
 static int ping_max_missed = -1;
 
+static pthread_mutex_t ping_lock = PTHREAD_MUTEX_INITIALIZER;
+static pthread_cond_t ping_cond = PTHREAD_COND_INITIALIZER;
 static int ping_thread_loop = 0;
 static int ping_thread_error = 0;
 static pthread_t ping_thread_id;
-static pthread_mutex_t ping_lock = PTHREAD_MUTEX_INITIALIZER;
-static pthread_cond_t ping_cond = PTHREAD_COND_INITIALIZER;
 
 static const char *config_keys[] = {&quot;Host&quot;,    &quot;SourceAddress&quot;,
 #ifdef HAVE_OPING_1_3
@@ -224,8 +224,6 @@ static int ping_dispatch_all(pingobj_t *pingobj) /* {{{ */
 
 static void *ping_thread(void *arg) /* {{{ */
 {
-  pingobj_t *pingobj = NULL;
-
   struct timeval tv_begin;
   struct timeval tv_end;
   struct timespec ts_wait;
@@ -235,11 +233,10 @@ static void *ping_thread(void *arg) /* {{{ */
 
   c_complain_t complaint = C_COMPLAIN_INIT_STATIC;
 
-  pthread_mutex_lock(&amp;ping_lock);
-
-  pingobj = ping_construct();
+  pingobj_t *pingobj = ping_construct();
   if (pingobj == NULL) {
     ERROR(&quot;ping plugin: ping_construct failed.&quot;);
+    pthread_mutex_lock(&amp;ping_lock);
     ping_thread_error = 1;
     pthread_mutex_unlock(&amp;ping_lock);
     return (void *)-1;
@@ -276,6 +273,7 @@ static void *ping_thread(void *arg) /* {{{ */
 
   if (count == 0) {
     ERROR(&quot;ping plugin: No host could be added to ping object. Giving up.&quot;);
+    pthread_mutex_lock(&amp;ping_lock);
     ping_thread_error = 1;
     pthread_mutex_unlock(&amp;ping_lock);
     return (void *)-1;
@@ -291,8 +289,8 @@ static void *ping_thread(void *arg) /* {{{ */
     ts_int.tv_nsec = (long)(temp_nsec * 1000000000L);
   }
 
+  pthread_mutex_lock(&amp;ping_lock);
   while (ping_thread_loop &gt; 0) {
-    int status;
     _Bool send_successful = 0;
 
     if (gettimeofday(&amp;tv_begin, NULL) &lt; 0) {
@@ -303,7 +301,7 @@ static void *ping_thread(void *arg) /* {{{ */
 
     pthread_mutex_unlock(&amp;ping_lock);
 
-    status = ping_send(pingobj);
+    int status = ping_send(pingobj);
     if (status &lt; 0) {
       c_complain(LOG_ERR, &amp;complaint, &quot;ping plugin: ping_send failed: %s&quot;,
                  ping_get_error(pingobj));
----++++src/target_set.c
@@ -353,6 +353,7 @@ static int ts_invoke(const data_set_t *ds, value_list_t *vl, /* {{{ */
     int status = meta_data_toc(data-&gt;meta, &amp;meta_toc);
     if (status &lt; 0) {
       ERROR(&quot;Target `set&#39;: meta_data_toc failed with status %d.&quot;, status);
+      meta_data_destroy(new_meta);
       return status;
     }
     size_t meta_entries = (size_t)status;
----++++src/virt.c
@@ -444,12 +444,10 @@ static void init_block_info(struct lv_block_info *binfo) {
 #ifdef HAVE_BLOCK_STATS_FLAGS
 
 #define GET_BLOCK_INFO_VALUE(NAME, FIELD)                                      \
-  do {                                                                         \
-    if (!strcmp(param[i].field, NAME)) {                                       \
-      binfo-&gt;FIELD = param[i].value.l;                                         \
-      continue;                                                                \
-    }                                                                          \
-  } while (0)
+  if (!strcmp(param[i].field, NAME)) {                                         \
+    binfo-&gt;FIELD = param[i].value.l;                                           \
+    continue;                                                                  \
+  }
 
 static int get_block_info(struct lv_block_info *binfo,
                           virTypedParameterPtr param, int nparams) {
----++++GitHub