@@ -446,7 +446,7 @@ Adaptation::Ecap::XactionRep::status() const
             buf.append(" A.", 3);
     }
 
-    buf.Printf(" ecapx%d]", id);
+    buf.Printf(" %s%u]", id.Prefix, id.value);
 
     buf.terminate();
 
@@ -538,7 +538,7 @@ const char *Adaptation::Icap::Xaction::status() const
     buf.append("/", 1);
     fillDoneStatus(buf);
 
-    buf.Printf(" icapx%d]", id);
+    buf.Printf(" %s%u]", id.Prefix, id.value);
 
     buf.terminate();
 
@@ -7,17 +7,17 @@
 #include "base/AsyncCallQueue.h"
 #include "cbdata.h"
 
-unsigned int AsyncCall::TheLastId = 0;
+InstanceIdDefinitions(AsyncCall, "call");
 
 
 /* AsyncCall */
 
 AsyncCall::AsyncCall(int aDebugSection, int aDebugLevel,
                      const char *aName): name(aName), debugSection(aDebugSection),
-        debugLevel(aDebugLevel), id(++TheLastId), theNext(0), isCanceled(NULL)
+        debugLevel(aDebugLevel), theNext(0), isCanceled(NULL)
 {
     debugs(debugSection, debugLevel, "The AsyncCall " << name << " constructed, this=" << this <<
-           " [call" << id << ']');
+           " [" << id << ']');
 }
 
 AsyncCall::~AsyncCall()
@@ -29,7 +29,7 @@ void
 AsyncCall::make()
 {
     debugs(debugSection, debugLevel, HERE << "make call " << name <<
-           " [call"<< id << ']');
+           " [" << id << ']');
     if (canFire()) {
         fire();
         return;
@@ -39,15 +39,15 @@ AsyncCall::make()
         isCanceled = "unknown reason";
 
     debugs(debugSection, debugLevel, HERE << "will not call " << name <<
-           " [call"<< id << ']' << " because of " << isCanceled);
+           " [" << id << ']' << " because of " << isCanceled);
 }
 
 bool
 AsyncCall::cancel(const char *reason)
 {
     if (isCanceled)
         debugs(debugSection, debugLevel, HERE << "will not call " << name <<
-               " [call"<< id << ']' << " also because " << reason);
+               " [" << id << ']' << " also because " << reason);
     isCanceled = reason;
     return false;
 }
@@ -73,7 +73,7 @@ bool
 ScheduleCall(const char *fileName, int fileLine, AsyncCall::Pointer &call)
 {
     debugs(call->debugSection, call->debugLevel, fileName << "(" << fileLine <<
-           ") will call " << *call << " [call"<< call->id << ']' );
+           ") will call " << *call << " [" << call->id << ']' );
     AsyncCallQueue::Instance().schedule(call);
     return true;
 }
@@ -6,6 +6,7 @@
 #define SQUID_ASYNCCALL_H
 
 //#include "cbdata.h"
+#include "base/InstanceId.h"
 #include "event.h"
 //#include "TextException.h"
 
@@ -69,7 +70,7 @@ class AsyncCall: public RefCountable
     const char *const name;
     const int debugSection;
     const int debugLevel;
-    const unsigned int id;
+    const InstanceId<AsyncCall> id;
 
 protected:
     virtual bool canFire();
@@ -80,7 +81,6 @@ class AsyncCall: public RefCountable
 
 private:
     const char *isCanceled; // set to the cancelation reason by cancel()
-    static unsigned int TheLastId;
 };
 
 inline
@@ -10,8 +10,7 @@
 #include "cbdata.h"
 #include "MemBuf.h"
 
-
-unsigned int AsyncJob::TheLastId = 0;
+InstanceIdDefinitions(AsyncJob, "job");
 
 AsyncJob::Pointer AsyncJob::Start(AsyncJob *j)
 {
@@ -20,16 +19,16 @@ AsyncJob::Pointer AsyncJob::Start(AsyncJob *j)
     return job;
 }
 
-AsyncJob::AsyncJob(const char *aTypeName): typeName(aTypeName), inCall(NULL), id(++TheLastId)
+AsyncJob::AsyncJob(const char *aTypeName): typeName(aTypeName), inCall(NULL)
 {
     debugs(93,5, "AsyncJob constructed, this=" << this <<
-           " type=" << typeName << " [job" << id << ']');
+           " type=" << typeName << " [" << id << ']');
 }
 
 AsyncJob::~AsyncJob()
 {
     debugs(93,5, "AsyncJob destructed, this=" << this <<
-           " type=" << typeName << " [job" << id << ']');
+           " type=" << typeName << " [" << id << ']');
 }
 
 void AsyncJob::start()
@@ -156,7 +155,7 @@ const char *AsyncJob::status() const
         buf.Printf("Stopped, reason:");
         buf.Printf("%s",stopReason);
     }
-    buf.Printf(" job%d]", id);
+    buf.Printf(" %s%u]", id.Prefix, id.value);
     buf.terminate();
 
     return buf.content();
@@ -6,6 +6,7 @@
 #define SQUID_ASYNC_JOB_H
 
 #include "base/AsyncCall.h"
+#include "base/InstanceId.h"
 
 template <class Cbc>
 class CbcPointer;
@@ -63,10 +64,7 @@ class AsyncJob
     const char *stopReason; ///< reason for forcing done() to be true
     const char *typeName; ///< kid (leaf) class name, for debugging
     AsyncCall::Pointer inCall; ///< the asynchronous call being handled, if any
-    const unsigned int id; ///< unique ID across all strand jobs, unless wraps
-
-private:
-    static unsigned int TheLastId; ///< makes job IDs unique until it wraps
+    const InstanceId<AsyncJob> id; ///< job identifier
 };
 
 #endif /* SQUID_ASYNC_JOB_H */