@@ -1,6 +1,6 @@
 
 /*
- * $Id: HttpHeaderTools.cc,v 1.27 2000/03/06 16:23:28 wessels Exp $
+ * $Id: HttpHeaderTools.cc,v 1.28 2001/01/04 21:09:00 wessels Exp $
  *
  * DEBUG: section 66    HTTP Header Tools
  * AUTHOR: Alex Rousskov
@@ -391,3 +391,39 @@ httpHeaderStrCmp(const char *h1, const char *h2, int len)
     /* NOTREACHED */
     return 0;
 }
+
+/*
+ * httpHdrMangle checks the anonymizer (header_access) configuration.
+ * Returns 1 if the header is allowed.
+ */
+int
+httpHdrMangle(HttpHeaderEntry * e, request_t * request)
+{
+    /* check with anonymizer tables */
+    header_mangler *hm;
+    aclCheck_t *checklist;
+    assert(e);
+    hm = &Config.header_access[e->id];
+    checklist = aclChecklistCreate(hm->access_list,
+	request, NULL);
+    /* aclCheckFast returns 1 for allow. */
+    if (1 == aclCheckFast(hm->access_list, checklist))
+	return 1;
+    /* It was denied; Do we replace it with something else? */
+    if (NULL == hm->replacement)
+	return 0;
+    /* yes, we do */
+    stringReset(&e->value, hm->replacement);
+    return 1;
+}
+
+/* Mangles headers for a list of headers. */
+void
+httpHdrMangleList(HttpHeader * l, request_t * request)
+{
+    HttpHeaderEntry *e;
+    HttpHeaderPos p = HttpHeaderInitPos;
+    while ((e = httpHeaderGetEntry(l, &p)))
+	if (0 == httpHdrMangle(e, request))
+	    httpHeaderDelAt(l, p);
+}
@@ -1,6 +1,6 @@
 
 /*
- * $Id: HttpRequest.cc,v 1.26 2000/03/06 16:23:28 wessels Exp $
+ * $Id: HttpRequest.cc,v 1.27 2001/01/04 21:09:00 wessels Exp $
  *
  * DEBUG: section 73    HTTP Request
  * AUTHOR: Duane Wessels
@@ -141,26 +141,16 @@ httpRequestPrefixLen(const request_t * req)
 	req->header.len + 2;
 }
 
-/* returns true if header is allowed to be passed on */
+/*
+ * Returns true if HTTP allows us to pass this header on.  Does not
+ * check anonymizer (aka header_access) configuration.
+ */
 int
 httpRequestHdrAllowed(const HttpHeaderEntry * e, String * strConn)
 {
     assert(e);
-    /* check with anonymizer tables */
-    if (CBIT_TEST(Config.anonymize_headers, e->id))
-	return 0;
     /* check connection header */
     if (strConn && strListIsMember(strConn, strBuf(e->name), ','))
 	return 0;
     return 1;
 }
-
-/* returns true if header is allowed to be passed on */
-int
-httpRequestHdrAllowedByName(http_hdr_type id)
-{
-    /* check with anonymizer tables */
-    if (CBIT_TEST(Config.anonymize_headers, id))
-	return 0;
-    return 1;
-}
@@ -1,6 +1,6 @@
 
 /*
- * $Id: cache_cf.cc,v 1.363 2001/01/04 03:42:34 wessels Exp $
+ * $Id: cache_cf.cc,v 1.364 2001/01/04 21:09:00 wessels Exp $
  *
  * DEBUG: section 3     Configuration File Parsing
  * AUTHOR: Harvest Derived
@@ -55,8 +55,6 @@ static const char *const B_MBYTES_STR = "MB";
 static const char *const B_GBYTES_STR = "GB";
 
 static const char *const list_sep = ", \t\n\r";
-static int http_header_first;
-static int http_header_allowed = 0;
 
 static void update_maxobjsize(void);
 static void configDoConfigure(void);
@@ -74,9 +72,15 @@ static size_t parseBytesUnits(const char *unit);
 static void free_all(void);
 static void requirePathnameExists(const char *name, const char *path);
 static OBJH dump_config;
-static void dump_http_header(StoreEntry * entry, const char *name, HttpHeaderMask header);
-static void parse_http_header(HttpHeaderMask * header);
-static void free_http_header(HttpHeaderMask * header);
+static void dump_http_header_access(StoreEntry * entry, const char *name, header_mangler header[]);
+static void parse_http_header_access(header_mangler header[]);
+static void free_http_header_access(header_mangler header[]);
+static void dump_http_header_replace(StoreEntry * entry, const char *name, header_mangler header[]);
+static void parse_http_header_replace(header_mangler * header);
+static void free_http_header_replace(header_mangler * header);
+static void parse_denyinfo(acl_deny_info_list ** var);
+static void dump_denyinfo(StoreEntry * entry, const char *name, acl_deny_info_list * var);
+static void free_denyinfo(acl_deny_info_list ** var);
 static void parse_sockaddr_in_list(sockaddr_in_list **);
 static void dump_sockaddr_in_list(StoreEntry *, const char *, const sockaddr_in_list *);
 static void free_sockaddr_in_list(sockaddr_in_list **);
@@ -226,7 +230,6 @@ parseConfigFile(const char *file_name)
 	cfg_filename = token + 1;
     memset(config_input_line, '\0', BUFSIZ);
     config_lineno = 0;
-    http_header_first = 0;
     while (fgets(config_input_line, BUFSIZ, fp)) {
 	config_lineno++;
 	if ((token = strchr(config_input_line, '\n')))
@@ -778,62 +781,124 @@ parse_delay_pool_access(delayConfig * cfg)
 #endif
 
 static void
-dump_http_header(StoreEntry * entry, const char *name, HttpHeaderMask header)
+dump_http_header_access(StoreEntry * entry, const char *name, header_mangler header[])
 {
     int i;
-    for (i = 0; i < HDR_OTHER; i++) {
-	if (http_header_allowed && !CBIT_TEST(header, i))
-	    storeAppendPrintf(entry, "%s allow %s\n", name, httpHeaderNameById(i));
-	else if (!http_header_allowed && CBIT_TEST(header, i))
-	    storeAppendPrintf(entry, "%s deny %s\n", name, httpHeaderNameById(i));
+    storeAppendPrintf(entry, "%s:", name);
+    for (i = 0; i < HDR_ENUM_END; i++) {
+	if (header[i].access_list != NULL) {
+	    storeAppendPrintf(entry, "\t");
+	    dump_acl_access(entry, httpHeaderNameById(i),
+		header[i].access_list);
+	}
     }
 }
 
 static void
-parse_http_header(HttpHeaderMask * header)
+parse_http_header_access(header_mangler header[])
 {
-    int allowed, id;
+    int id, i;
     char *t = NULL;
     if ((t = strtok(NULL, w_space)) == NULL) {
 	debug(3, 0) ("%s line %d: %s\n",
 	    cfg_filename, config_lineno, config_input_line);
-	debug(3, 0) ("parse_http_header: missing 'allow' or 'deny'.\n");
+	debug(3, 0) ("parse_http_header_access: missing header name.\n");
 	return;
     }
-    if (!strcmp(t, "allow"))
-	allowed = 1;
-    else if (!strcmp(t, "deny"))
-	allowed = 0;
-    else {
+    /* Now lookup index of header. */
+    id = httpHeaderIdByNameDef(t, strlen(t));
+    if (strcmp(t, "All") == 0)
+	id = HDR_ENUM_END;
+    else if (strcmp(t, "Other") == 0)
+	id = HDR_OTHER;
+    else if (id == -1) {
 	debug(3, 0) ("%s line %d: %s\n",
 	    cfg_filename, config_lineno, config_input_line);
-	debug(3, 0) ("parse_http_header: expecting 'allow' or 'deny', got '%s'.\n", t);
+	debug(3, 0) ("parse_http_header_access: unknown header name %s.\n", t);
 	return;
     }
-    if (!http_header_first) {
-	http_header_first = 1;
-	if (allowed) {
-	    http_header_allowed = 1;
-	    httpHeaderMaskInit(header, 0xFF);
-	} else {
-	    http_header_allowed = 0;
-	    httpHeaderMaskInit(header, 0);
+    if (id != HDR_ENUM_END) {
+	parse_acl_access(&header[id].access_list);
+    } else {
+	char *next_string = t + strlen(t);
+	*next_string = ' ';
+	for (i = 0; i < HDR_ENUM_END; i++) {
+	    char *new_string = xstrdup(next_string);
+	    strtok(new_string, " ");
+	    parse_acl_access(&header[i].access_list);
+	    safe_free(new_string);
 	}
     }
-    while ((t = strtok(NULL, w_space))) {
-	if ((id = httpHeaderIdByNameDef(t, strlen(t))) == -1)
-	    debug(3, 0) ("parse_http_header: Ignoring unknown header '%s'\n", t);
-	else if (allowed)
-	    CBIT_CLR(*header, id);
-	else
-	    CBIT_SET(*header, id);
+}
+
+static void
+free_http_header_access(header_mangler header[])
+{
+    int i;
+    for (i = 0; i < HDR_ENUM_END; i++) {
+	free_acl_access(&header[i].access_list);
     }
 }
 
 static void
-free_http_header(HttpHeaderMask * header)
+dump_http_header_replace(StoreEntry * entry, const char *name, header_mangler
+    header[])
 {
-    httpHeaderMaskInit(header, 0);
+    int i;
+    storeAppendPrintf(entry, "%s:", name);
+    for (i = 0; i < HDR_ENUM_END; i++) {
+	if (NULL == header[i].replacement)
+	    continue;
+	storeAppendPrintf(entry, "\t%s: %s", httpHeaderNameById(i),
+	    header[i].replacement);
+    }
+}
+
+static void
+parse_http_header_replace(header_mangler header[])
+{
+    int id, i;
+    char *t = NULL;
+    if ((t = strtok(NULL, w_space)) == NULL) {
+	debug(3, 0) ("%s line %d: %s\n",
+	    cfg_filename, config_lineno, config_input_line);
+	debug(3, 0) ("parse_http_header_replace: missing header name.\n");
+	return;
+    }
+    /* Now lookup index of header. */
+    id = httpHeaderIdByNameDef(t, strlen(t));
+    if (strcmp(t, "All") == 0)
+	id = HDR_ENUM_END;
+    else if (strcmp(t, "Other") == 0)
+	id = HDR_OTHER;
+    else if (id == -1) {
+	debug(3, 0) ("%s line %d: %s\n",
+	    cfg_filename, config_lineno, config_input_line);
+	debug(3, 0) ("parse_http_header_replace: unknown header name %s.\n",
+	    t);
+	return;
+    }
+    if (id != HDR_ENUM_END) {
+	if (header[id].replacement != NULL)
+	    safe_free(header[id].replacement);
+	header[id].replacement = xstrdup(t + strlen(t) + 1);
+    } else {
+	for (i = 0; i < HDR_ENUM_END; i++) {
+	    if (header[i].replacement != NULL)
+		safe_free(header[i].replacement);
+	    header[i].replacement = xstrdup(t + strlen(t) + 1);
+	}
+    }
+}
+
+static void
+free_http_header_replace(header_mangler header[])
+{
+    int i;
+    for (i = 0; i < HDR_ENUM_END; i++) {
+	if (header[i].replacement != NULL)
+	    safe_free(header[i].replacement);
+    }
 }
 
 static void
@@ -1,6 +1,6 @@
 
 #
-# $Id: cf.data.pre,v 1.203 2001/01/01 23:09:59 wessels Exp $
+# $Id: cf.data.pre,v 1.204 2001/01/04 21:09:00 wessels Exp $
 #
 #
 # SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
@@ -2531,59 +2531,79 @@ DOC_START
 	and firewall_ip.
 DOC_END
 
-NAME: anonymize_headers
-TYPE: http_header
-LOC: Config.anonymize_headers
+NAME: header_access
+TYPE: http_header_access[]
+LOC: Config.header_access
 DEFAULT: none
 DOC_START
-	Usage: anonymize_headers allow|deny header_name ...
-
-	This option replaces the old 'http_anonymizer' option with
-	something that is much more configurable.  You may now
-	specify exactly which headers are to be allowed, or which
-	are to be removed from outgoing requests.
-
-	There are two methods of using this option.  You may either
-	allow specific headers (thus denying all others), or you
-	may deny specific headers (thus allowing all others).
-
-	For example, to achieve the same behavior as the old
+	Usage: header_access header_name allow|deny [!]aclname ...
+  
+	This option replaces the old 'anonymize_headers' and the
+	older 'http_anonymizer' option with something that is much
+	more configurable. This new method creates a list of ACLs
+	for each header, allowing you very fine-tuned header
+	mangling.
+
+	You can only specify known headers for the header name.
+	Other headers are reclassified as 'Other'. You can also
+	refer to all the headers with 'All'.
+  
+	For example, to achieve the same behaviour as the old
 	'http_anonymizer standard' option, you should use:
+  
+		header_access From deny all
+		header_access Referer deny all
+		header_access Server deny all
+		header_access User-Agent deny all
+		header_access WWW-Authenticate deny all
+		header_access Link deny all
 
-		anonymize_headers deny From Referer Server
-		anonymize_headers deny User-Agent WWW-Authenticate Link
-		
 	Or, to reproduce the old 'http_anonymizer paranoid' feature
 	you should use:
-
-		anonymize_headers allow Allow Authorization Cache-Control
-		anonymize_headers allow Content-Encoding Content-Length
-		anonymize_headers allow Content-Type Date Expires Host
-		anonymize_headers allow If-Modified-Since Last-Modified
-		anonymize_headers allow Location Pragma Accept
-		anonymize_headers allow Accept-Encoding Accept-Language
-		anonymize_headers allow Content-Language Mime-Version
-		anonymize_headers allow Retry-After Title Connection
-		anonymize_headers allow Proxy-Connection
-
-	NOTE: You can not mix "allow" and "deny".  All 'anonymize_headers'
-	lines must have the same second argument.
-
+  
+		header_access Allow allow all
+		header_access Authorization allow all
+		header_access Cache-Control allow all
+		header_access Content-Encoding allow all
+		header_access Content-Length allow all
+		header_access Content-Type allow all
+		header_access Date allow all
+		header_access Expires allow all
+		header_access Host allow all
+		header_access If-Modified-Since allow all
+		header_access Last-Modified allow all
+		header_access Location allow all
+		header_access Pragma allow all
+		header_access Accept allow all
+		header_access Charset allow all
+		header_access Accept-Encoding allow all
+		header_access Accept-Language allow all
+		header_access Content-Language allow all
+		header_access Mime-Version allow all
+		header_access Retry-After allow all
+		header_access Title allow all
+		header_access Connection allow all
+		header_access Proxy-Connection allow all
+		header_access All deny all
+  
 	By default, all headers are allowed (no anonymizing is
 	performed).
 DOC_END
 
-NAME: fake_user_agent
-TYPE: eol
-LOC: Config.fake_ua
+NAME: header_replace
+TYPE: http_header_replace[]
+LOC: Config.header_access
 DEFAULT: none
 DOC_START
-	If you filter the User-Agent header with 'anonymize_headers' it
-	may cause some Web servers to refuse your request.  Use this to
-	fake one up.  For example:
-
-	fake_user_agent Nutscrape/1.0 (CP/M; 8-bit)
-	(credit to Paul Southworth pauls@etext.org for this one!)
+	Usage:   header_replace header_name message
+	Example: header_replace User-Agent Nutscrape/1.0 (CP/M; 8-bit)
+  
+	This option allows you to change the contents of headers
+	denied with header_access above, by replacing them with
+	some fixed string. This replaces the old fake_user_agent
+	option.
+  
+	By default, headers are removed if denied.
 DOC_END
 
 NAME: icon_directory
@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.519 2001/01/02 00:09:55 wessels Exp $
+ * $Id: client_side.cc,v 1.520 2001/01/04 21:09:01 wessels Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -1299,6 +1299,7 @@ clientBuildReplyHeader(clientHttpRequest * http, HttpReply * rep)
     httpHeaderPutStr(hdr, HDR_X_REQUEST_URI,
 	http->entry->mem_obj->url ? http->entry->mem_obj->url : http->uri);
 #endif
+    httpHdrMangleList(hdr, request);
 }
 
 static HttpReply *
@@ -1,6 +1,6 @@
 
 /*
- * $Id: http.cc,v 1.372 2001/01/02 20:51:17 wessels Exp $
+ * $Id: http.cc,v 1.373 2001/01/04 21:09:01 wessels Exp $
  *
  * DEBUG: section 11    Hypertext Transfer Protocol (HTTP)
  * AUTHOR: Harvest Derived
@@ -650,6 +650,8 @@ httpBuildRequestHeader(request_t * request,
     const HttpHeader *hdr_in = &orig_request->header;
     int we_do_ranges;
     const HttpHeaderEntry *e;
+    String strVia;
+    String strFwd;
     HttpHeaderPos pos = HttpHeaderInitPos;
     httpHeaderInit(hdr_out, hoRequest);
     /* append our IMS header */
@@ -744,28 +746,21 @@ httpBuildRequestHeader(request_t * request,
 	}
     }
 
-    /* append fake user agent if configured and 
-     * the real one is not supplied by the client */
-    if (Config.fake_ua && !httpHeaderHas(hdr_out, HDR_USER_AGENT))
-	httpHeaderPutStr(hdr_out, HDR_USER_AGENT, Config.fake_ua);
-
     /* append Via */
-    if (httpRequestHdrAllowedByName(HDR_VIA)) {
-	String strVia = httpHeaderGetList(hdr_in, HDR_VIA);
-	snprintf(bbuf, BBUF_SZ, "%d.%d %s",
-	    orig_request->http_ver.major,
-	    orig_request->http_ver.minor, ThisCache);
-	strListAdd(&strVia, bbuf, ',');
-	httpHeaderPutStr(hdr_out, HDR_VIA, strBuf(strVia));
-	stringClean(&strVia);
-    }
+    strVia = httpHeaderGetList(hdr_in, HDR_VIA);
+    snprintf(bbuf, BBUF_SZ, "%d.%d %s",
+	orig_request->http_ver.major,
+	orig_request->http_ver.minor, ThisCache);
+    strListAdd(&strVia, bbuf, ',');
+    httpHeaderPutStr(hdr_out, HDR_VIA, strBuf(strVia));
+    stringClean(&strVia);
+
     /* append X-Forwarded-For */
-    if (httpRequestHdrAllowedByName(HDR_X_FORWARDED_FOR)) {
-	String strFwd = httpHeaderGetList(hdr_in, HDR_X_FORWARDED_FOR);
-	strListAdd(&strFwd, (cfd < 0 ? "unknown" : fd_table[cfd].ipaddr), ',');
-	httpHeaderPutStr(hdr_out, HDR_X_FORWARDED_FOR, strBuf(strFwd));
-	stringClean(&strFwd);
-    }
+    strFwd = httpHeaderGetList(hdr_in, HDR_X_FORWARDED_FOR);
+    strListAdd(&strFwd, (cfd < 0 ? "unknown" : fd_table[cfd].ipaddr), ',');
+    httpHeaderPutStr(hdr_out, HDR_X_FORWARDED_FOR, strBuf(strFwd));
+    stringClean(&strFwd);
+
     /* append Host if not there already */
     if (!httpHeaderHas(hdr_out, HDR_HOST)) {
 	/* use port# only if not default */
@@ -814,6 +809,8 @@ httpBuildRequestHeader(request_t * request,
 	    httpHeaderPutStr(hdr_out, HDR_CONNECTION, "keep-alive");
 	}
     }
+    /* Now mangle the headers. */
+    httpHdrMangleList(hdr_out, request);
     stringClean(&strConnection);
 }
 
@@ -1,6 +1,6 @@
 
 /*
- * $Id: protos.h,v 1.390 2001/01/02 01:41:30 wessels Exp $
+ * $Id: protos.h,v 1.391 2001/01/04 21:09:01 wessels Exp $
  *
  *
  * SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
@@ -433,6 +433,7 @@ extern HttpHeaderEntry *httpHeaderEntryClone(const HttpHeaderEntry * e);
 extern void httpHeaderEntryPackInto(const HttpHeaderEntry * e, Packer * p);
 /* store report about current header usage and other stats */
 extern void httpHeaderStoreReport(StoreEntry * e);
+extern void httpHdrMangleList(HttpHeader *, request_t *);
 
 /* Http Msg (currently in HttpReply.c @?@ ) */
 extern int httpMsgIsPersistent(http_version_t http_ver, const HttpHeader * hdr);
@@ -1,6 +1,6 @@
 
 /*
- * $Id: structs.h,v 1.370 2001/01/02 01:41:31 wessels Exp $
+ * $Id: structs.h,v 1.371 2001/01/04 21:09:02 wessels Exp $
  *
  *
  * SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
@@ -94,6 +94,11 @@ struct _String {
     char *buf;
 };
 
+struct _header_mangler {
+    acl_access *access_list;
+    char *replacement;
+};
+
 struct _http_version_t {
     unsigned int major;
     unsigned int minor;
@@ -466,7 +471,6 @@ struct _SquidConfig {
 	int n_allocated;
 	int n_configured;
     } cacheSwap;
-    char *fake_ua;
     struct {
 	char *directory;
     } icons;
@@ -500,7 +504,7 @@ struct _SquidConfig {
 	char *encode_key;
     } mcast_miss;
 #endif
-    HttpHeaderMask anonymize_headers;
+    header_mangler header_access[HDR_ENUM_END];
     char *coredump_dir;
     char *chroot_dir;
 #if USE_CACHE_DIGESTS
@@ -1,6 +1,6 @@
 
 /*
- * $Id: typedefs.h,v 1.111 2000/11/13 12:25:13 adrian Exp $
+ * $Id: typedefs.h,v 1.112 2001/01/04 21:09:02 wessels Exp $
  *
  *
  * SQUID Internet Object Cache  http://squid.nlanr.net/Squid/
@@ -135,6 +135,7 @@ typedef struct _SwapDir SwapDir;
 typedef struct _request_flags request_flags;
 typedef struct _helper_flags helper_flags;
 typedef struct _http_state_flags http_state_flags;
+typedef struct _header_mangler header_mangler;
 typedef struct _request_t request_t;
 typedef struct _AccessLogEntry AccessLogEntry;
 typedef struct _cachemgr_passwd cachemgr_passwd;