@@ -67,6 +67,7 @@ static void cachemgrStateFree(cachemgrStateData * mgr);
 static char *cachemgrPasswdGet(cachemgr_passwd *, const char *);
 static const char *cachemgrActionProtection(const CacheManagerAction * at);
 static OBJH cachemgrShutdown;
+static OBJH cachemgrReconfigure;
 static OBJH cachemgrMenu;
 static OBJH cachemgrOfflineToggle;
 
@@ -79,6 +80,9 @@ CacheManager::CacheManager()
     registerAction("shutdown",
                    "Shut Down the Squid Process",
                    cachemgrShutdown, 1, 1);
+    registerAction("reconfigure",
+                     "Reconfigure the Squid Process",
+                     cachemgrReconfigure, 1, 1);
     registerAction("offline_toggle",
                    "Toggle offline_mode setting",
                    cachemgrOfflineToggle, 1, 1);
@@ -359,6 +363,15 @@ cachemgrShutdown(StoreEntry * entryunused)
     shut_down(0);
 }
 
+/// \ingroup CacheManagerInternal
+static void
+cachemgrReconfigure(StoreEntry * sentry)
+{
+    debug(16, 0) ("Reconfigure by command.\n");
+    storeAppendPrintf(sentry, "Reconfiguring Squid Process ....");
+    reconfigure(SIGHUP);
+}
+
 /// \ingroup CacheManagerInternal
 static void
 cachemgrOfflineToggle(StoreEntry * sentry)
@@ -13,6 +13,10 @@ void
 shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 /* end stubs */
 
 /* init memory pools */
@@ -18,6 +18,10 @@ void
 shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 /* end stubs */
 
 /* init legacy static-initialized modules */
@@ -21,6 +21,10 @@ void
 shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 /* end stubs */
 
 /* init legacy static-initialized modules */
@@ -16,6 +16,10 @@ void
 shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 /* end stubs */
 
 /* init memory pools */
@@ -16,6 +16,10 @@ void
 shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 /* end stubs */
 
 /* init memory pools */
@@ -53,6 +53,10 @@ void
 shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 SQUIDCEXTERN void httpHeaderPutStr(HttpHeader * hdr, http_hdr_type type, const char *str)
 {
     fatal ("dummy function\n");
@@ -48,6 +48,10 @@
 void shut_down(int)
 {}
 
+void
+reconfigure(int)
+{}
+
 #if WHENITMINIMAL
 void
 eventAdd(const char *name, EVH * func, void *arg, double when, int, bool cbdata)