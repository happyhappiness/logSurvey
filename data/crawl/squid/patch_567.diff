@@ -152,15 +152,12 @@ ProxyAuthLookup::checkForAsync(ACLChecklist *cl)const
 }
 
 void
-ProxyAuthLookup::LookupDone(void *data, char *result)
+ProxyAuthLookup::LookupDone(void *data)
 {
     ACLFilledChecklist *checklist = Filled(static_cast<ACLChecklist*>(data));
 
     assert (checklist->asyncState() == ProxyAuthLookup::Instance());
 
-    if (result != NULL)
-        fatal("AclLookupProxyAuthDone: Old code floating around somewhere.\nMake clean and if that doesn't work, report a bug to the squid developers.\n");
-
     if (checklist->auth_user_request == NULL || !checklist->auth_user_request->valid() || checklist->conn() == NULL) {
         /* credentials could not be checked either way
          * restart the whole process */
@@ -50,7 +50,7 @@ class ProxyAuthLookup : public ACLChecklist::AsyncState
 
 private:
     static ProxyAuthLookup instance_;
-    static void LookupDone(void *data, char *result);
+    static void LookupDone(void *data);
 };
 
 class ACLProxyAuth : public ACL
@@ -15,7 +15,7 @@ namespace Auth
 class StateData
 {
 public:
-    StateData(const UserRequest::Pointer &r, RH *h, void *d) :
+    StateData(const UserRequest::Pointer &r, AUTHCB *h, void *d) :
             data(cbdataReference(d)),
             auth_user_request(r),
             handler(h) {}
@@ -27,7 +27,7 @@ class StateData
 
     void *data;
     UserRequest::Pointer auth_user_request;
-    RH *handler;
+    AUTHCB *handler;
 
 private:
     CBDATA_CLASS2(StateData);
@@ -63,7 +63,7 @@ Auth::UserRequest::username() const
 
 /* send the initial data to an authenticator module */
 void
-Auth::UserRequest::start(RH * handler, void *data)
+Auth::UserRequest::start(AUTHCB * handler, void *data)
 {
     assert(handler);
     assert(data);
@@ -66,6 +66,9 @@ class AuthUserIP
     time_t ip_expiretime;
 };
 
+// TODO: make auth schedule AsyncCalls?
+typedef void AUTHCB(void*);
+
 namespace Auth
 {
 
@@ -156,7 +159,7 @@ class UserRequest : public RefCountable
      * \param handler	Handler to process the callback when its run
      * \param data	CBDATA for handler
      */
-    virtual void module_start(RH *handler, void *data) = 0;
+    virtual void module_start(AUTHCB *handler, void *data) = 0;
 
     // User credentials object this UserRequest is managing
     virtual User::Pointer user() {return _auth_user;}
@@ -186,7 +189,7 @@ class UserRequest : public RefCountable
     /// Add the appropriate [Proxy-]Authenticate header to the given reply
     static void addReplyAuthHeader(HttpReply * rep, UserRequest::Pointer auth_user_request, HttpRequest * request, int accelerated, int internal);
 
-    void start( RH * handler, void *data);
+    void start(AUTHCB *handler, void *data);
     char const * denyMessage(char const * const default_message = NULL);
 
     /** Possibly overrideable in future */
@@ -77,7 +77,7 @@ Auth::Basic::UserRequest::module_direction()
 
 /* send the initial data to a basic authenticator module */
 void
-Auth::Basic::UserRequest::module_start(RH * handler, void *data)
+Auth::Basic::UserRequest::module_start(AUTHCB * handler, void *data)
 {
     assert(user()->auth_type == Auth::AUTH_BASIC);
     Auth::Basic::User *basic_auth = dynamic_cast<Auth::Basic::User *>(user().getRaw());
@@ -86,7 +86,7 @@ Auth::Basic::UserRequest::module_start(RH * handler, void *data)
 
     if (static_cast<Auth::Basic::Config*>(Auth::Config::Find("basic"))->authenticateProgram == NULL) {
         debugs(29, DBG_CRITICAL, "ERROR: No Basic authentication program configured.");
-        handler(data, NULL);
+        handler(data);
         return;
     }
 
@@ -124,10 +124,10 @@ Auth::Basic::UserRequest::module_start(RH * handler, void *data)
     int sz = snprintf(buf, sizeof(buf), "%s %s\n", username, pass);
     if (sz<=0) {
         debugs(9, DBG_CRITICAL, "ERROR: Basic Authentication Failure. Can not build helper validation request.");
-        handler(data, NULL);
+        handler(data);
     } else if (static_cast<size_t>(sz) >= sizeof(buf)) {
         debugs(9, DBG_CRITICAL, "ERROR: Basic Authentication Failure. user:password exceeds " << sizeof(buf) << " bytes.");
-        handler(data, NULL);
+        handler(data);
     } else
         helperSubmit(basicauthenticators, buf, Auth::Basic::UserRequest::HandleReply,
                      new Auth::StateData(this, handler, data));
@@ -171,15 +171,15 @@ Auth::Basic::UserRequest::HandleReply(void *data, char *reply)
     basic_auth->expiretime = squid_curtime;
 
     if (cbdataReferenceValidDone(r->data, &cbdata))
-        r->handler(cbdata, NULL);
+        r->handler(cbdata);
 
     cbdataReferenceDone(r->data);
 
     while (basic_auth->auth_queue) {
         tmpnode = basic_auth->auth_queue->next;
 
         if (cbdataReferenceValidDone(basic_auth->auth_queue->data, &cbdata))
-            basic_auth->auth_queue->handler(cbdata, NULL);
+            basic_auth->auth_queue->handler(cbdata);
 
         xfree(basic_auth->auth_queue);
 
@@ -26,7 +26,7 @@ class UserRequest : public Auth::UserRequest
     virtual int authenticated() const;
     virtual void authenticate(HttpRequest * request, ConnStateData *conn, http_hdr_type type);
     virtual Auth::Direction module_direction();
-    virtual void module_start(RH *, void *);
+    virtual void module_start(AUTHCB *, void *);
 
 private:
     static HLPCB HandleReply;
@@ -20,7 +20,7 @@ class BasicAuthQueueNode
 public:
     BasicAuthQueueNode *next;
     Auth::UserRequest::Pointer auth_user_request;
-    RH *handler;
+    AUTHCB *handler;
     void *data;
 };
 
@@ -245,7 +245,7 @@ Auth::Digest::UserRequest::addAuthenticationInfoTrailer(HttpReply * rep, int acc
 
 /* send the initial data to a digest authenticator module */
 void
-Auth::Digest::UserRequest::module_start(RH * handler, void *data)
+Auth::Digest::UserRequest::module_start(AUTHCB * handler, void *data)
 {
     char buf[8192];
 
@@ -254,7 +254,7 @@ Auth::Digest::UserRequest::module_start(RH * handler, void *data)
 
     if (static_cast<Auth::Digest::Config*>(Auth::Config::Find("digest"))->authenticateProgram == NULL) {
         debugs(29, DBG_CRITICAL, "ERROR: No Digest authentication program configured.");
-        handler(data, NULL);
+        handler(data);
         return;
     }
 
@@ -309,7 +309,7 @@ Auth::Digest::UserRequest::HandleReply(void *data, char *reply)
     }
 
     if (cbdataReferenceValidDone(replyData->data, &cbdata))
-        replyData->handler(cbdata, NULL);
+        replyData->handler(cbdata);
 
     delete replyData;
 }
@@ -34,7 +34,7 @@ class UserRequest : public Auth::UserRequest
     virtual void addAuthenticationInfoTrailer(HttpReply * rep, int accel);
 #endif
 
-    virtual void module_start(RH *, void *);
+    virtual void module_start(AUTHCB *, void *);
 
     char *nonceb64;             /* "dcd98b7102dd2f0e8b11d0f600bfb0c093" */
     char *cnonce;               /* "0a4f113b" */
@@ -79,7 +79,7 @@ Auth::Negotiate::UserRequest::module_direction()
 }
 
 void
-Auth::Negotiate::UserRequest::module_start(RH * handler, void *data)
+Auth::Negotiate::UserRequest::module_start(AUTHCB * handler, void *data)
 {
     static char buf[MAX_AUTHTOKEN_LEN];
 
@@ -91,7 +91,7 @@ Auth::Negotiate::UserRequest::module_start(RH * handler, void *data)
 
     if (static_cast<Auth::Negotiate::Config*>(Auth::Config::Find("negotiate"))->authenticateProgram == NULL) {
         debugs(29, DBG_CRITICAL, "ERROR: No Negotiate authentication program configured.");
-        handler(data, NULL);
+        handler(data);
         return;
     }
 
@@ -360,7 +360,7 @@ Auth::Negotiate::UserRequest::HandleReply(void *data, void *lastserver, char *re
     }
 
     lm_request->request = NULL;
-    r->handler(r->data, NULL);
+    r->handler(r->data);
     delete r;
 }
 
@@ -27,7 +27,7 @@ class UserRequest : public Auth::UserRequest
     virtual void authenticate(HttpRequest * request, ConnStateData * conn, http_hdr_type type);
     virtual Direction module_direction();
     virtual void onConnectionClose(ConnStateData *);
-    virtual void module_start(RH *, void *);
+    virtual void module_start(AUTHCB *, void *);
 
     virtual void addAuthenticationInfoHeader(HttpReply * rep, int accel);
 
@@ -77,7 +77,7 @@ Auth::Ntlm::UserRequest::module_direction()
 }
 
 void
-Auth::Ntlm::UserRequest::module_start(RH * handler, void *data)
+Auth::Ntlm::UserRequest::module_start(AUTHCB * handler, void *data)
 {
     static char buf[MAX_AUTHTOKEN_LEN];
 
@@ -86,7 +86,7 @@ Auth::Ntlm::UserRequest::module_start(RH * handler, void *data)
 
     if (static_cast<Auth::Ntlm::Config*>(Auth::Config::Find("ntlm"))->authenticateProgram == NULL) {
         debugs(29, DBG_CRITICAL, "ERROR: NTLM Start: no NTLM program configured.");
-        handler(data, NULL);
+        handler(data);
         return;
     }
 
@@ -340,6 +340,6 @@ Auth::Ntlm::UserRequest::HandleReply(void *data, void *lastserver, char *reply)
         HTTPMSGUNLOCK(lm_request->request);
         lm_request->request = NULL;
     }
-    r->handler(r->data, NULL);
+    r->handler(r->data);
     delete r;
 }
@@ -27,7 +27,7 @@ class UserRequest : public Auth::UserRequest
     virtual void authenticate(HttpRequest * request, ConnStateData * conn, http_hdr_type type);
     virtual Auth::Direction module_direction();
     virtual void onConnectionClose(ConnStateData *);
-    virtual void module_start(RH *, void *);
+    virtual void module_start(AUTHCB *, void *);
 
     virtual const char * connLastHeader();
 