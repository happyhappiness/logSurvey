     }
 }
 
-/*
- * Decode a ascii representation (asc) of a IP adress, and place
- * adress and netmask information in addr and mask.
- * This function should NOT be called if 'asc' is a hostname!
- */
-static int
-decode_addr(const char *asc, struct in_addr *addr, struct in_addr *mask)
-{
-    u_int32_t a;
-    int a1 = 0, a2 = 0, a3 = 0, a4 = 0;
-
-    switch (sscanf(asc, "%d.%d.%d.%d", &a1, &a2, &a3, &a4)) {
-    case 4:			/* a dotted quad */
-	if (!safe_inet_addr(asc, addr)) {
-	    debug(28, 0) ("decode_addr: unsafe IP address: '%s'\n", asc);
-	    fatal("decode_addr: unsafe IP address");
-	}
-	break;
-    case 1:			/* a significant bits value for a mask */
-	if (a1 >= 0 && a1 < 33) {
-	    addr->s_addr = a1 ? htonl(0xfffffffful << (32 - a1)) : 0;
-	    break;
-	}
-    default:
-	debug(28, 0) ("decode_addr: Invalid IP address '%s'\n", asc);
-	return 0;		/* This is not valid address */
-    }
-
-    if (mask != NULL) {		/* mask == NULL if called to decode a netmask */
-
-	/* Guess netmask */
-	a = (u_int32_t) ntohl(addr->s_addr);
-	if (!(a & 0xFFFFFFFFul))
-	    mask->s_addr = htonl(0x00000000ul);
-	else if (!(a & 0x00FFFFFF))
-	    mask->s_addr = htonl(0xFF000000ul);
-	else if (!(a & 0x0000FFFF))
-	    mask->s_addr = htonl(0xFFFF0000ul);
-	else if (!(a & 0x000000FF))
-	    mask->s_addr = htonl(0xFFFFFF00ul);
-	else
-	    mask->s_addr = htonl(0xFFFFFFFFul);
-    }
-    return 1;
-}
-
-
-#define SCAN_ACL1       "%[0123456789.]-%[0123456789.]/%[0123456789.]"
-#define SCAN_ACL2       "%[0123456789.]-%[0123456789.]%c"
-#define SCAN_ACL3       "%[0123456789.]/%[0123456789.]"
-#define SCAN_ACL4       "%[0123456789.]%c"
-
-static acl_ip_data *
-aclParseIpData(const char *t)
-{
-    LOCAL_ARRAY(char, addr1, 256);
-    LOCAL_ARRAY(char, addr2, 256);
-    LOCAL_ARRAY(char, mask, 256);
-    acl_ip_data *q = (acl_ip_data *)memAllocate(MEM_ACL_IP_DATA);
-    acl_ip_data *r;
-    acl_ip_data **Q;
-    struct hostent *hp;
-    char **x;
-    char c;
-    debug(28, 5) ("aclParseIpData: %s\n", t);
-    if (!strcasecmp(t, "all")) {
-	q->addr1.s_addr = 0;
-	q->addr2.s_addr = 0;
-	q->mask.s_addr = 0;
-	return q;
-    }
-    if (sscanf(t, SCAN_ACL1, addr1, addr2, mask) == 3) {
-	(void) 0;
-    } else if (sscanf(t, SCAN_ACL2, addr1, addr2, &c) == 2) {
-	mask[0] = '\0';
-    } else if (sscanf(t, SCAN_ACL3, addr1, mask) == 2) {
-	addr2[0] = '\0';
-    } else if (sscanf(t, SCAN_ACL4, addr1, &c) == 1) {
-	addr2[0] = '\0';
-	mask[0] = '\0';
-    } else if (sscanf(t, "%[^/]/%s", addr1, mask) == 2) {
-	addr2[0] = '\0';
-    } else if (sscanf(t, "%s", addr1) == 1) {
-	/*
-	 * Note, must use plain gethostbyname() here because at startup
-	 * ipcache hasn't been initialized
-	 */
-	if ((hp = gethostbyname(addr1)) == NULL) {
-	    debug(28, 0) ("aclParseIpData: Bad host/IP: '%s'\n", t);
-	    safe_free(q);
-	    return NULL;
-	}
-	Q = &q;
-	for (x = hp->h_addr_list; x != NULL && *x != NULL; x++) {
-	    if ((r = *Q) == NULL)
-		r = *Q = (acl_ip_data *)memAllocate(MEM_ACL_IP_DATA);
-	    xmemcpy(&r->addr1.s_addr, *x, sizeof(r->addr1.s_addr));
-	    r->addr2.s_addr = 0;
-	    r->mask.s_addr = no_addr.s_addr;	/* 255.255.255.255 */
-	    Q = &r->next;
-	    debug(28, 3) ("%s --> %s\n", addr1, inet_ntoa(r->addr1));
-	}
-	return q;
-    } else {
-	debug(28, 0) ("aclParseIpData: Bad host/IP: '%s'\n", t);
-	safe_free(q);
-	return NULL;
-    }
-    /* Decode addr1 */
-    if (!decode_addr(addr1, &q->addr1, &q->mask)) {
-	debug(28, 0) ("%s line %d: %s\n",
-	    cfg_filename, config_lineno, config_input_line);
-	debug(28, 0) ("aclParseIpData: Ignoring invalid IP acl entry: unknown first address '%s'\n", addr1);
-	safe_free(q);
-	return NULL;
-    }
-    /* Decode addr2 */
-    if (*addr2 && !decode_addr(addr2, &q->addr2, &q->mask)) {
-	debug(28, 0) ("%s line %d: %s\n",
-	    cfg_filename, config_lineno, config_input_line);
-	debug(28, 0) ("aclParseIpData: Ignoring invalid IP acl entry: unknown second address '%s'\n", addr2);
-	safe_free(q);
-	return NULL;
-    }
-    /* Decode mask */
-    if (*mask && !decode_addr(mask, &q->mask, NULL)) {
-	debug(28, 0) ("%s line %d: %s\n",
-	    cfg_filename, config_lineno, config_input_line);
-	debug(28, 0) ("aclParseIpData: Ignoring invalid IP acl entry: unknown netmask '%s'\n", mask);
-	safe_free(q);
-	return NULL;
-    }
-    if ((q->addr1.s_addr & q->mask.s_addr) != q->addr1.s_addr ||
-	(q->addr2.s_addr & q->mask.s_addr) != q->addr2.s_addr)
-	debug(28, 0) ("aclParseIpData: WARNING: Netmask masks away part of the specified IP in '%s'\n", t);
-    q->addr1.s_addr &= q->mask.s_addr;
-    q->addr2.s_addr &= q->mask.s_addr;
-    /* 1.2.3.4/255.255.255.0  --> 1.2.3.0 */
-    return q;
-}
-
-/******************/
-/* aclParseIpList */
-/******************/
-
-static void
-aclParseIpList(void *curlist)
-{
-    char *t = NULL;
-    splayNode **Top = (splayNode **)curlist;
-    acl_ip_data *q = NULL;
-    while ((t = strtokFile())) {
-	q = aclParseIpData(t);
-	while (q != NULL) {
-	    *Top = splay_insert(q, *Top, aclIpNetworkCompare);
-	    q = q->next;
-	}
-    }
-}
-
 static void
 aclParseTimeSpec(void *curlist)
 {
