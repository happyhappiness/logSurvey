url,date,title,changes,file_name,reason_for_consistence,is_trivial,old_hunk_file,new_hunk_file,old_loc,new_loc,old_log,new_log,edit_types,edit_words,edit_feature,cluster,wait_time
https://github.com/git/git/commit/33e92e47c5b3eaa66d375cb94c3cfd1a0946bf93,10 Mar 2011,"i18n: git-init basic messages

Change the user visible strings in init-db.c to use gettext
localizations. This only converts messages which needed to be changed
from ""foo"" to _(""foo""), and didn't need any TRANSLATORS comments.

I haven't marked the messages in init_db_usage or init_db_options for
translation, since that would require additional changes in
parse-options.c. Those can be done later.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_4761.cpp,,,data/crawl/git/old_hunk_4761.cpp,data/crawl/git/new_hunk_4761.cpp,10,10,"die_errno (""Cannot access work tree '%s'"",
				   get_git_work_tree());","die_errno (_(""Cannot access work tree '%s'""),
				   get_git_work_tree());","[""addVariable""]","[[], [""_""]]",[12160036574],6568,"657 days, 10:59:52.291220"
https://github.com/git/git/commit/e84d7b74c6e59fac20209c4759791f39afc0e25b,10 Mar 2011,"i18n: git-clone basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_4750.cpp,,,data/crawl/git/old_hunk_4750.cpp,data/crawl/git/new_hunk_4750.cpp,3,3,"die(""unable to write new index file"");","(_(""unable to write new index file"");","[""addLog"", ""updateLog""]","[[""die""], [""_""]]",[1925086820363511413],6566,"414 days, 23:19:14.716981"
https://github.com/git/git/commit/d824cbba02a4061400a0e382f9bd241fbbff34f0,27 Jun 2009,"Convert existing die(..., strerror(errno)) to die_errno()

Change calls to die(..., strerror(errno)) to use the new die_errno().

In the process, also make slight style adjustments: at least state
_something_ about the function that failed (instead of just printing
the pathname), and put paths in single quotes.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5937.cpp,,,data/crawl/git/old_hunk_5937.cpp,data/crawl/git/new_hunk_5937.cpp,3,3,"die(""write error (%s)"", strerror(errno));","die_errno(""write error"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""%s"", ""strerror"", ""errno""], [""die_errno""]]",[-17402433408053273391],6565,"50 days, 16:00:00"
https://github.com/git/git/commit/c3428da87f625d22b7f0ea1e1fb7028264943da3,30 Oct 2007,"Make builtin-for-each-ref.c use parse-opts.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",138,data/crawl/git/hunk_7863.cpp,,,data/crawl/git/old_hunk_7863.cpp,data/crawl/git/new_hunk_7863.cpp,9,9,"die(""malformatted format string %s"", sp);","error(""malformatted format string %s"", sp);","[""updateLog""]","[[""die""], [""error""]]",[10210225593202855182],6564,"2462 days, 14:47:26.511627"
https://github.com/git/git/commit/6e59e9c0a658c619d390ed93466e457d4b80f0fe,09 May 2016,"builtin/am.c: use error_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_2093.cpp,,,data/crawl/git/old_hunk_2093.cpp,data/crawl/git/new_hunk_2093.cpp,3,3,"error(_(""could not open '%s' for reading: %s""), *paths,
				strerror(errno));","error_errno(_(""could not open '%s' for reading""), *paths);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""%s"", ""strerror"", ""errno""], [""error_errno""]]",[-22273121909024948375],6563,"4 days, 21:43:47.027027"
https://github.com/git/git/commit/0721c314a5c8fddc877140ab5a333c42c62f780d,27 Jun 2009,"Use die_errno() instead of die() when checking syscalls

Lots of die() calls did not actually report the kind of error, which
can leave the user confused as to the real problem.  Use die_errno()
where we check a system/library call that sets errno on failure, or
one of the following that wrap such calls:

  Function              Passes on error from
  --------              --------------------
  odb_pack_keep         open
  read_ancestry         fopen
  read_in_full          xread
  strbuf_read           xread
  strbuf_read_file      open or strbuf_read_file
  strbuf_readlink       readlink
  write_in_full         xwrite

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",153,data/crawl/git/hunk_5853.cpp,,,data/crawl/git/old_hunk_5853.cpp,data/crawl/git/new_hunk_5853.cpp,3,3,"die(""unable to write temp-file"");","die_errno(""unable to write temp-file"");","[""updateLog""]","[[""die""], [""die_errno""]]",[-4657290980438519867],6562,0:00:00
https://github.com/git/git/commit/674d1727305211f7ade4ade70440220f74f55162,10 Sep 2007,"Rework pretty_print_commit to use strbufs instead of custom buffers.

  Also remove the ""len"" parameter, as:
  (1) it was used as a max boundary, and every caller used ~0u
  (2) we check for final NUL no matter what, so it doesn't help for speed.

  As a result most of the pp_* function takes 3 arguments less, and we need
a lot less local variables, this makes the code way more readable, and
easier to extend if needed.

  This patch also fixes some spacing and cosmetic issues.

  This patch also fixes (as a side effect) a memory leak intoruced in
builtin-archive.c at commit df4a394f (fmt was xmalloc'ed and not free'd)

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",490,data/crawl/git/hunk_8099.cpp,,,data/crawl/git/old_hunk_8099.cpp,data/crawl/git/new_hunk_8099.cpp,13,12,"printf(""%s%s%s"", msgbuf, extra, sep);","printf(""%s%s%s"", msgbuf.buf, extra, sep);","[""removeVariable"", ""addVariable""]","[[], [""buf""]]",[327024216826240860],6561,"1611 days, 21:31:02.068965"
https://github.com/git/git/commit/49df4b0298ea87ec737221c35ac74f8e6ee108c9,10 Mar 2011,"i18n: git-branch basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_4713.cpp,,,data/crawl/git/old_hunk_4713.cpp,data/crawl/git/new_hunk_4713.cpp,3,3,"error(""some refs could not be read"");","(_(""some refs could not be read"");","[""addLog"", ""updateLog""]","[[""error""], [""_""]]",[-8285138772839343769],6560,"572 days, 9:36:00"
https://github.com/git/git/commit/d70d7a8a4d1e985dea02713a3b1fda3a08d4325e,25 May 2015,"show_reference(): rewrite to take an object_id argument

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_3187.cpp,,,data/crawl/git/old_hunk_3187.cpp,data/crawl/git/new_hunk_3187.cpp,14,14,"printf(""%s (%s) -> %s (%s)\n"", refname, typename(obj_type),
			       sha1_to_hex(sha1), typename(repl_type));","printf(""%s (%s) -> %s (%s)\n"", refname, typename(obj_type),
			       oid_to_hex(oid), typename(repl_type));","[""updateVariable""]","[[""sha1_to_hex"", ""sha1""], [""oid_to_hex"", ""oid""]]",[11698201631503247408],6559,"522 days, 21:07:12"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,98,,"printf(""\n    "");","[""addLog""]","[[], [""printf"", ""\\n""]]",[7249185625612668815],6558,"770 days, 8:00:00"
https://github.com/git/git/commit/8a2fce1895c058945d8e2dbd8cb7456cc7450ad8,31 Aug 2008,"merge-recursive: introduce merge_options

This makes it possible to avoid passing the labels of branches as
arguments to merge_recursive(), merge_trees() and
merge_recursive_generic().

It also takes care of subtree merge, output buffering, verbosity, and
rename limits - these were global variables till now in
merge-recursive.c.

A new function, named init_merge_options(), is introduced as well, it
clears the struct merge_info, then initializes with default values,
finally updates the default values based on the config and environment
variables.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",361,data/crawl/git/hunk_6825.cpp,,,data/crawl/git/old_hunk_6825.cpp,data/crawl/git/new_hunk_6825.cpp,4,4,"output(5, ""found %u common ancestor(s):"", commit_list_count(ca));","output(o, 5, ""found %u common ancestor(s):"", commit_list_count(ca));","[""addVariable""]","[[], [""o""]]",[14208042734],6557,4:00:00
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7311.cpp,,,data/crawl/git/old_hunk_7311.cpp,data/crawl/git/new_hunk_7311.cpp,56,56,"printf(""(%d%%)\n"", similarity_index(p));","fprintf(file, ""(%d%%)\n"", similarity_index(p));","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""file""]]",[-12951079412526217197],6556,"1429 days, 4:00:00"
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2539.cpp,,,data/crawl/git/old_hunk_2539.cpp,data/crawl/git/new_hunk_2539.cpp,1,1,"error(""Unable to determine requirements ""
		     ""of type %s for %s"",
		     typename(obj->type), sha1_to_hex(obj->sha1));","error(""Unable to determine requirements ""
		     ""of type %s for %s"",
		     typename(obj->type), oid_to_hex(&obj->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""obj"", ""sha1""], [""oid_to_hex"", ""&obj"", ""oid""]]",[-584189701047962819],6555,"35 days, 16:00:00"
https://github.com/git/git/commit/3d51e1b5b84bde24f9a19e3cee603f0b57f62001,18 Feb 2008,"check return code of prepare_revision_walk

A failure in prepare_revision_walk can be caused by
a not parseable object.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_7470.cpp,,,data/crawl/git/old_hunk_7470.cpp,data/crawl/git/new_hunk_7470.cpp,-1,4,,"die(""revision walk setup failed"");","[""addLog""]","[[], [""die"", ""revision"", ""walk"", ""setup"", ""failed""]]",[-17150171470043991342],6554,"610 days, 0:51:25.714285"
https://github.com/git/git/commit/81c634e94f2fef0cec295f7554080c82bd6aeeb7,17 Oct 2016,"pkt-line: rename packet_write() to packet_write_fmt()

packet_write() should be called packet_write_fmt() because it is a
printf-like function that takes a format string as first parameter.

packet_write_fmt() should be used for text strings only. Arbitrary
binary data should use a new packet_write() function that is introduced
in a subsequent patch.

Suggested-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/hunk_1040.cpp,,,data/crawl/git/old_hunk_1040.cpp,data/crawl/git/new_hunk_1040.cpp,7,7,"packet_write(1, ""%s %s^{}\n"", oid_to_hex(&peeled), refname_nons);","packet_write_fmt(1, ""%s %s^{}\n"", oid_to_hex(&peeled), refname_nons);","[""updateLog""]","[[""packet_write""], [""packet_write_fmt""]]",[-9191134811627887892],6553,0:00:00
https://github.com/git/git/commit/12da1d1f6ffcd546a892a33302bb34fd37169022,28 Mar 2013,"Implement line-history search (git log -L)

This is a rewrite of much of Bo's work, mainly in an effort to split
it into smaller, easier to understand routines.

The algorithm is built around the struct range_set, which encodes a
series of line ranges as intervals [a,b).  This is used in two
contexts:

* A set of lines we are tracking (which will change as we dig through
  history).
* To encode diffs, as pairs of ranges.

The main routine is range_set_map_across_diff().  It processes the
diff between a commit C and some parent P.  It determines which diff
hunks are relevant to the ranges tracked in C, and computes the new
ranges for P.

The algorithm is then simply to process history in topological order
from newest to oldest, computing ranges and (partial) diffs.  At
branch points, we need to merge the ranges we are watching.  We will
find that many commits do not affect the chosen ranges, and mark them
TREESAME (in addition to those already filtered by pathspec limiting).
Another pass of history simplification then gets rid of such commits.

This is wired as an extra filtering pass in the log machinery.  This
currently only reduces code duplication, but should allow for other
simplifications and options to be used.

Finally, we hook a diff printer into the output chain.  Ideally we
would wire directly into the diff logic, to optionally use features
like word diff.  However, that will require some major reworking of
the diff chain, so we completely replace the output with our own diff
for now.

As this was a GSoC project, and has quite some history by now, many
people have helped.  In no particular order, thanks go to

  Jakub Narebski <jnareb@gmail.com>
  Jens Lehmann <Jens.Lehmann@web.de>
  Jonathan Nieder <jrnieder@gmail.com>
  Junio C Hamano <gitster@pobox.com>
  Ramsay Jones <ramsay@ramsay1.demon.co.uk>
  Will Palmer <wmpalmer@gmail.com>

Apologies to everyone I forgot.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2158,data/crawl/git/hunk_3794.cpp,,,data/crawl/git/old_hunk_3794.cpp,data/crawl/git/new_hunk_3794.cpp,-1,302,,"printf(""%ld\n"", f(15));","[""addLog""]","[[], [""printf"", ""%ld\\n"", ""f"", ""15""]]",[4978724980882016412],6552,"15 days, 19:00:00"
https://github.com/git/git/commit/debca9d2fe784193dc2d9f98b5edac605ddfefbb,14 Feb 2018,"object: rename function 'typename' to 'type_name'

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/hunk_63.cpp,,,data/crawl/git/old_hunk_63.cpp,data/crawl/git/new_hunk_63.cpp,1,1,"error(""Unable to determine requirements ""
		     ""of type %s for %s"",
		     typename(obj->type), oid_to_hex(&obj->oid));","error(""Unable to determine requirements ""
		     ""of type %s for %s"",
		     type_name(obj->type), oid_to_hex(&obj->oid));","[""removeVariable"", ""addVariable""]","[[""typename""], [""type_name""]]",[-2477744965360508998],6551,0:00:00
https://github.com/git/git/commit/bc9204d4ef6e0672389fdfb0d398fa9a39dba3d5,01 Aug 2016,"merge-recursive: flush output buffer before printing error messages

The data structure passed to the recursive merge machinery has a feature
where the caller can ask for the output to be buffered into a strbuf, by
setting the field 'buffer_output'.

Previously, we died without flushing, losing accumulated output.  With
this patch, we show the output first, and only then print the error
message.

Currently, the only user of that buffering is merge_recursive() itself,
to avoid the progress output to interfere.

In the next patches, we will introduce a new buffer_output mode that
forces merge_recursive() to retain the output buffer for further
processing by the caller. If the caller asked for that, we will then
also write the error messages into the output buffer. This is necessary
to give the caller more control not only how to react in case of errors
but also control how/if to display the error messages.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_1642.cpp,,,data/crawl/git/old_hunk_1642.cpp,data/crawl/git/new_hunk_1642.cpp,3,3,"error(_(""Unable to write index.""));","err(o, _(""Unable to write index.""));","[""updateLog"", ""addVariable""]","[[""error""], [""err"", ""o""]]",[-11336281091606670627],6550,"8 days, 20:43:38.181818"
https://github.com/git/git/commit/4d7b0efc5e2eea1923803dd9c5d5d1288c99cd00,24 Jun 2016,"log-tree: respect diffopt's configured output file stream

The diff options already know how to print the output anywhere else
than stdout. The same is needed for log output in general, e.g.
when writing patches to files in `git format-patch`. Let's allow
users to use log_tree_commit() *without* changing global state via
freopen().

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/hunk_1800.cpp,,,data/crawl/git/old_hunk_1800.cpp,data/crawl/git/new_hunk_1800.cpp,11,11,"printf(""\n%s\n"", opt->break_bar);","fprintf(opt->diffopt.file, ""\n%s\n"", opt->break_bar);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""diffopt"", ""file"", ""opt""]]",[-3512011818810243570],6549,"38 days, 12:00:00"
https://github.com/git/git/commit/b5b644a93adb41bca590a3cdfd9b64ccf3614f50,02 Dec 2007,"git-commit: clean up die messages

These are three types of cleanups here:

  1. remove newline from die message (die/report adds it
     already)
  2. typo: s/merger/merge/
  3. the old ""* no commit message?  aborting commit."" is now
     prepended with ""fatal: "", making the asterisk look a
     little funny. Let's just remove it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/hunk_7715.cpp,,,data/crawl/git/old_hunk_7715.cpp,data/crawl/git/new_hunk_7715.cpp,9,9,"die(""invalid commit: %s\n"", use_message);","die(""invalid commit: %s"", use_message);","[""updateContent""]","[[""%s\\n""], [""%s""]]",[-6140229210961666644],6548,"347 days, 3:25:42.857142"
https://github.com/git/git/commit/01904572a5cf869983fab454f552542f16b1fe1f,09 Mar 2008,"Move 'unpack_trees()' over to 'traverse_trees()' interface

This not only deletes more code than it adds, it gets rid of a
singularly hard-to-understand function (unpack_trees_rec()), and
replaces it with a set of smaller and simpler functions that use the
generic tree traversal mechanism to walk over one or more git trees in
parallel.

It's still not the most wonderful interface, and by no means is the new
code easy to understand either, but it's at least a bit less opaque.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",530,data/crawl/git/hunk_7330.cpp,,,data/crawl/git/old_hunk_7330.cpp,data/crawl/git/new_hunk_7330.cpp,226,-1,"fprintf(stderr, ""\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""\\n""], []]",[13913879213697345406],6547,"396 days, 4:48:00"
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2528.cpp,,,data/crawl/git/old_hunk_2528.cpp,data/crawl/git/new_hunk_2528.cpp,6,6,"error(_(""Cannot get commit message for %s""),
			sha1_to_hex(commit->object.sha1));","error(_(""Cannot get commit message for %s""),
			oid_to_hex(&commit->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""commit"", ""sha1""], [""oid_to_hex"", ""&commit"", ""oid""]]",[6065387720634484985],6546,0:00:00
https://github.com/git/git/commit/23e7a312e115e4cbeda3d944b8020e014f0f908a,09 May 2016,"bisect.c: use die_errno() and warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_2094.cpp,,,data/crawl/git/old_hunk_2094.cpp,data/crawl/git/new_hunk_2094.cpp,3,3,"warning(""could not create file '%s': %s"",
			filename, strerror(errno));","warning_errno(""could not create file '%s'"",
			      filename);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""warning"", ""%s"", ""strerror"", ""errno""], [""warning_errno""]]",[-9558594043159494063],6545,0:00:00
https://github.com/git/git/commit/33e92e47c5b3eaa66d375cb94c3cfd1a0946bf93,10 Mar 2011,"i18n: git-init basic messages

Change the user visible strings in init-db.c to use gettext
localizations. This only converts messages which needed to be changed
from ""foo"" to _(""foo""), and didn't need any TRANSLATORS comments.

I haven't marked the messages in init_db_usage or init_db_options for
translation, since that would require additional changes in
parse-options.c. Those can be done later.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_4761.cpp,,,data/crawl/git/old_hunk_4761.cpp,data/crawl/git/new_hunk_4761.cpp,3,3,"die_errno (""Cannot access current working directory"");","(_(""Cannot access current working directory"");","[""addLog"", ""updateLog""]","[[""die_errno""], [""_""]]",[6582377800802031280],6544,"793 days, 2:31:34.736842"
https://github.com/git/git/commit/b05c6dff8aa8af5a03717e8d863b911cede213a0,10 Feb 2008,"Send unpack-trees debugging output to stderr

This is to keep git-stash from getting confused if you're debugging
unpack-trees.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",14,data/crawl/git/hunk_7498.cpp,,,data/crawl/git/old_hunk_7498.cpp,data/crawl/git/new_hunk_7498.cpp,17,17,"printf(""Added %d entries\n"", ret);","fprintf(stderr, ""Added %d entries\n"", ret);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""stderr""]]",[-21163064839310014221],6543,"1577 days, 18:21:10.588235"
https://github.com/git/git/commit/993a21b0a05bf2e2063c58e5722c29f5747e39d4,18 Jul 2016,"fsck: refactor how to describe objects

In many places, we refer to objects via their SHA-1s. Let's abstract
that into a function.

For the moment, it does nothing else than what we did previously: print
out the 40-digit hex string. But that will change over the course of the
next patches.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_1696.cpp,,,data/crawl/git/old_hunk_1696.cpp,data/crawl/git/new_hunk_1696.cpp,2,2,"fprintf(stderr, ""Checking %s %s\n"",
			typename(obj->type), oid_to_hex(&obj->oid));","fprintf(stderr, ""Checking %s %s\n"",
			typename(obj->type), describe_object(obj));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&obj"", ""oid""], [""describe_object"", ""obj""]]",[9186781888045856668],6542,"26 days, 12:00:00"
https://github.com/git/git/commit/1146f17e2ce6054b502a46bafc102312c60a8380,11 May 2015,"verify_refname_available(): report errors via a ""struct strbuf *err""

It shouldn't be spewing errors directly to stderr.

For now, change its callers to spew the errors to stderr.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",50,data/crawl/git/hunk_3228.cpp,,,data/crawl/git/old_hunk_3228.cpp,data/crawl/git/new_hunk_3228.cpp,3,3,"error(""cannot process '%s' and '%s' at the same time"",
				      refname, extra_refname);","strbuf_addf(err, ""cannot process '%s' and '%s' at the same time"",
					    refname, extra_refname);","[""updateLog"", ""addVariable""]","[[""error""], [""strbuf_addf"", ""err""]]",[-13908682699128854880],6541,"49 days, 19:12:00"
https://github.com/git/git/commit/7101e10ce7ba917d1b7a6ff73e0008c2be4a43ed,21 Oct 2016,"transport: pass summary_width down the callchain

The callchain that originates at transport_print_push_status()
eventually hits a single leaf function, print_ref_status(), that is
used to show from what old object to what new object a ref got
updated, and the width of the part that shows old and new object
names used a constant TRANSPORT_SUMMARY_WIDTH.

Teach the callchain to pass the width down from the top instead.
This allows a future enhancement to compute the necessary display
width before calling down this callchain.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/hunk_969.cpp,,,data/crawl/git/old_hunk_969.cpp,data/crawl/git/new_hunk_969.cpp,48,52,"print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,
						 ""atomic push failed"", porcelain);","print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,
				 ""atomic push failed"", porcelain, summary_width);","[""addVariable""]","[[], [""summary_width""]]",[-5873888663119224184],6540,0:00:00
https://github.com/git/git/commit/5070b49e529e2df30ec2e33073267d281450dde6,26 May 2008,"builtin-fast-export: Only output a single parent per line

According to the git-fast-import man-page, you can only put a single
committish per merge: line, like this:

  merge :10
  merge :11

However, git-fast-export puts all parents on a single line, like this:

  merge :10 :11

This changes fast-export to output a single parent per line.  Otherwise
neither git-fast-import nor bzr-fast-import can read its output.

[jc: fix-up to remove excess LF in the output that makes fast-import barf]

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_7126.cpp,,,data/crawl/git/old_hunk_7126.cpp,data/crawl/git/new_hunk_7126.cpp,10,-1,"printf(""\n"");",,"[""removeLog""]","[[""printf"", ""\\n""], []]",[-7249185625612668815],6539,"921 days, 3:12:00"
https://github.com/git/git/commit/aa7e44bf571717aeb4435e6605391d51f3117047,02 Jun 2007,"Unify write_index_file functions

This patch unifies the write_index_file functions in
builtin-pack-objects.c and index-pack.c.  As the name
""index"" is overloaded in git, move in the direction of
using ""idx"" and ""pack idx"" when refering to the pack index.
There should be no change in functionality.

Signed-off-by: Geert Bosch <bosch@gnat.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",586,data/crawl/git/hunk_8348.cpp,,,data/crawl/git/old_hunk_8348.cpp,data/crawl/git/new_hunk_8348.cpp,3,3,"bad_object(delta_obj->offset, ""failed to apply delta"");","bad_object(delta_obj->idx.offset, ""failed to apply delta"");","[""addVariable""]","[[], [""idx""]]",[-7555364370844764442],6538,0:00:00
https://github.com/git/git/commit/3c624a30fa3f047d401e08cf019d39b3a79095ea,08 Mar 2011,"commit: refer to commit template as s->fp

Instead of maintaining a local variable for it, use s->fp to keep
track of where the commit message template should be written.

This prepares us to take advantage of the status_printf functions,
which use a struct wt_status instead of a FILE pointer to determine
where to send their output.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_4797.cpp,,,data/crawl/git/old_hunk_4797.cpp,data/crawl/git/new_hunk_4797.cpp,37,37,"fprintf(fp, ""#\n"");","fprintf(s->fp, ""#\n"");","[""removeVariable"", ""addVariable""]","[[], [""s""]]",[14720044274],6537,0:00:00
https://github.com/git/git/commit/4d7b0efc5e2eea1923803dd9c5d5d1288c99cd00,24 Jun 2016,"log-tree: respect diffopt's configured output file stream

The diff options already know how to print the output anywhere else
than stdout. The same is needed for log output in general, e.g.
when writing patches to files in `git format-patch`. Let's allow
users to use log_tree_commit() *without* changing global state via
freopen().

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/hunk_1800.cpp,,,data/crawl/git/old_hunk_1800.cpp,data/crawl/git/new_hunk_1800.cpp,13,13,"maybe_flush_or_die(stdout, ""stdout"");","maybe_flush_or_die(opt->diffopt.file, ""stdout"");","[""removeVariable"", ""addVariable""]","[[""stdout""], [""opt"", ""diffopt"", ""file""]]",[17651059020500770826],6536,"38 days, 12:00:00"
https://github.com/git/git/commit/2db69de81deea4682579d0b9e6da40b4e9558c05,10 Aug 2015,"lockfile: move documentation to lockfile.h and lockfile.c

Rearrange/rewrite it somewhat to fit its new environment.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",563,data/crawl/git/hunk_2921.cpp,,,data/crawl/git/old_hunk_2921.cpp,data/crawl/git/new_hunk_2921.cpp,101,-1,`die();,,"[""removeLog""]","[[""die""], []]",[1925086808203474839],6535,"643 days, 18:51:25.714285"
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7309.cpp,,,data/crawl/git/old_hunk_7309.cpp,data/crawl/git/new_hunk_7309.cpp,3,3,"printf(""* Unmerged path %s\n"", name);","fprintf(o->file, ""* Unmerged path %s\n"", name);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""o"", ""file""]]",[-12951079398318174463],6534,0:00:00
https://github.com/git/git/commit/131f9a108bba5a8b0bcba072696653ab3199911a,21 Aug 2008,"Fix ""git-merge -s bogo"" help text

It does not make much sense to reuse the output code from ""git help"" to
show the list of commands to the standard output while giving the error
message before that to the standard error stream.  This makes the output
consistent to that of the 1.6.0 version of ""git merge"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_6881.cpp,,,data/crawl/git/old_hunk_6881.cpp,data/crawl/git/new_hunk_6881.cpp,-1,12,,"fprintf(stderr, "".\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\n""]]",[-13913879213697345406],6533,"1415 days, 5:32:18.461538"
https://github.com/git/git/commit/e84d7b74c6e59fac20209c4759791f39afc0e25b,10 Mar 2011,"i18n: git-clone basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_4739.cpp,,,data/crawl/git/old_hunk_4739.cpp,data/crawl/git/new_hunk_4739.cpp,3,3,"printf(""done.\n"");","(_(""done.\n"");","[""addLog"", ""updateLog""]","[[""printf""], [""_""]]",[-7237409542704525881],6532,"605 days, 12:55:23.076923"
https://github.com/git/git/commit/1146f17e2ce6054b502a46bafc102312c60a8380,11 May 2015,"verify_refname_available(): report errors via a ""struct strbuf *err""

It shouldn't be spewing errors directly to stderr.

For now, change its callers to spew the errors to stderr.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",50,data/crawl/git/hunk_3231.cpp,,,data/crawl/git/old_hunk_3231.cpp,data/crawl/git/new_hunk_3231.cpp,-1,12,,"error(""%s"", err.buf);","[""addLog""]","[[], [""error"", ""%s"", ""err"", ""buf""]]",[5565756709463330967],6531,"200 days, 22:09:13.846153"
https://github.com/git/git/commit/9c7304e3e39ed397b3cc6566573333e2698a52b4,01 Jun 2010,"print the usage string on stdout instead of stderr

When -h is used, print usage messages on stdout.  If a command is invoked with
wrong arguments then print the usage messages on stderr.

Signed-off-by: Giuseppe Scrivano <gscrivano@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_5212.cpp,,,data/crawl/git/old_hunk_5212.cpp,data/crawl/git/new_hunk_5212.cpp,66,68,"fprintf(stderr, ""%*s%s\n"", pad + USAGE_GAP, """", opts->help);","fprintf(outfile, ""%*s%s\n"", pad + USAGE_GAP, """", opts->help);","[""updateVariable""]","[[""stderr""], [""outfile""]]",[4871638349643850843],6530,0:00:00
https://github.com/git/git/commit/7999b2cf772956466baa8925491d6fb1b0963292,20 Nov 2015,"Add several uses of get_object_hash.

Convert most instances where the sha1 member of struct object is
dereferenced to use get_object_hash.  Most instances that are passed to
functions that have versions taking struct object_id, such as
get_sha1_hex/get_oid_hex, or instances that can be trivially converted
to use struct object_id instead, are not converted.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",506,data/crawl/git/hunk_2595.cpp,,,data/crawl/git/old_hunk_2595.cpp,data/crawl/git/new_hunk_2595.cpp,10,10,"error(opts->action == REPLAY_REVERT
		      ? _(""could not revert %s... %s"")
		      : _(""could not apply %s... %s""),
		      find_unique_abbrev(commit->object.sha1, DEFAULT_ABBREV),
		      msg.subject);","error(opts->action == REPLAY_REVERT
		      ? _(""could not revert %s... %s"")
		      : _(""could not apply %s... %s""),
		      find_unique_abbrev(get_object_hash(commit->object), DEFAULT_ABBREV),
		      msg.subject);","[""removeVariable"", ""addVariable""]","[[""sha1""], [""get_object_hash""]]",[6595616598757751107],6529,0:00:00
https://github.com/git/git/commit/ed1c9977cb1b63e4270ad8bdf967a2d02580aa08,20 Nov 2015,"Remove get_object_hash.

Convert all instances of get_object_hash to use an appropriate reference
to the hash member of the oid member of struct object.  This provides no
functional change, as it is essentially a macro substitution.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",504,data/crawl/git/hunk_2434.cpp,,,data/crawl/git/old_hunk_2434.cpp,data/crawl/git/new_hunk_2434.cpp,10,10,"error(opts->action == REPLAY_REVERT
		      ? _(""could not revert %s... %s"")
		      : _(""could not apply %s... %s""),
		      find_unique_abbrev(get_object_hash(commit->object), DEFAULT_ABBREV),
		      msg.subject);","error(opts->action == REPLAY_REVERT
		      ? _(""could not revert %s... %s"")
		      : _(""could not apply %s... %s""),
		      find_unique_abbrev(commit->object.oid.hash, DEFAULT_ABBREV),
		      msg.subject);","[""removeVariable"", ""addVariable""]","[[""get_object_hash""], [""oid"", ""hash""]]",[7179401814361534313],6528,0:00:00
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7311.cpp,,,data/crawl/git/old_hunk_7311.cpp,data/crawl/git/new_hunk_7311.cpp,54,54,"fputs("" rewrite "", stdout);","fputs("" rewrite "", file);","[""updateVariable""]","[[""stdout""], [""file""]]",[8211991426784797199],6527,"1531 days, 6:00:00"
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/hunk_1538.cpp,,,data/crawl/git/old_hunk_1538.cpp,data/crawl/git/new_hunk_1538.cpp,-1,15,,self.environment.get_logger();,"[""addLog""]","[[], [""self"", ""environment"", ""get_logger""]]",[7565568221648516235],6526,"11 days, 12:00:00"
https://github.com/git/git/commit/95235f5ba1a9398c8503b809370ece18bba72ba2,24 Jun 2016,"format-patch: avoid freopen()

We just taught the relevant functions to respect the diffopt.file field,
to allow writing somewhere else than stdout. Let's make use of it.

Technically, we do not need to avoid that call in a builtin: we assume
that builtins (as opposed to library functions) are stand-alone programs
that may do with their (global) state. Yet, we want to be able to reuse
that code in properly lib-ified code, e.g. when converting scripts into
builtins.

Further, while we did not *have* to touch the cmd_show() and cmd_cherry()
code paths (because they do not want to write anywhere but stdout as of
yet), it just makes sense to be consistent, making it easier and safer to
move the code later.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/hunk_1785.cpp,,,data/crawl/git/old_hunk_1785.cpp,data/crawl/git/new_hunk_1785.cpp,3,3,"printf(""\n--%s%s--\n\n\n"",
				       mime_boundary_leader,
				       rev.mime_boundary);","fprintf(rev.diffopt.file, ""\n--%s%s--\n\n\n"",
				       mime_boundary_leader,
				       rev.mime_boundary);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""diffopt"", ""file"", ""rev""]]",[-6890178356471817606],6525,"38 days, 12:00:00"
https://github.com/git/git/commit/d7e92806cdc5ca78c4db879c68f91c70ff9e1ade,15 Dec 2007,"Move fetch_ref from http-push.c and http-walker.c to http.c

Make the necessary changes to be ok with their difference, and rename the
function http_fetch_ref.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/hunk_7637.cpp,,,data/crawl/git/old_hunk_7637.cpp,data/crawl/git/new_hunk_7637.cpp,79,-1,"error(""Unable to start request"");",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""start"", ""request""], []]",[-14866092711229707640],6524,"441 days, 0:00:00"
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2519.cpp,,,data/crawl/git/old_hunk_2519.cpp,data/crawl/git/new_hunk_2519.cpp,3,3,"die(""bad object %s"", sha1_to_hex(tag->tagged->sha1));","die(""bad object %s"", oid_to_hex(&tag->tagged->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""tag"", ""sha1""], [""oid_to_hex"", ""&tag"", ""oid""]]",[5046064861470326807],6523,0:00:00
https://github.com/git/git/commit/d96a53996b6c02b96a9a2b4eed9eac4e9d661a38,31 Jul 2015,"sequencer: replace write_cherry_pick_head with update_ref

Now update_ref (via write_pseudoref) does almost exactly what
write_cherry_pick_head did, so we can remove write_cherry_pick_head
and just use update_ref.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_3011.cpp,,,data/crawl/git/old_hunk_3011.cpp,data/crawl/git/new_hunk_3011.cpp,16,-1,"die_errno(_(""Could not write to '%s'""), filename);",,"[""removeLog""]","[[""die_errno"", ""_"", ""Could"", ""not"", ""write"", ""to"", ""%s"", ""filename""], []]",[-8775406943295227196],6522,"340 days, 10:54:32.727272"
https://github.com/git/git/commit/e84d7b74c6e59fac20209c4759791f39afc0e25b,10 Mar 2011,"i18n: git-clone basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_4749.cpp,,,data/crawl/git/old_hunk_4749.cpp,data/crawl/git/new_hunk_4749.cpp,3,3,"warning(""remote HEAD refers to nonexistent ref, ""
				""unable to checkout.\n"");","(_(""remote HEAD refers to nonexistent ref, ""
				""unable to checkout.\n"");","[""addLog"", ""updateLog""]","[[""warning""], [""_""]]",[4387977570525017931],6521,"913 days, 15:16:21.818181"
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2478.cpp,,,data/crawl/git/old_hunk_2478.cpp,data/crawl/git/new_hunk_2478.cpp,3,3,"printf(""  %-6s %o %s %s\n"", desc[entry->stage], entry->mode, sha1_to_hex(entry->blob->object.sha1), entry->path);","printf(""  %-6s %o %s %s\n"", desc[entry->stage], entry->mode, oid_to_hex(&entry->blob->object.oid), entry->path);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1"", ""entry""], [""oid_to_hex"", ""&entry"", ""oid""]]",[3937963313461094703],6520,"486 days, 8:43:38.181818"
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7301.cpp,,,data/crawl/git/old_hunk_7301.cpp,data/crawl/git/new_hunk_7301.cpp,5,5,"printf(""%d\t%d\t"", file->added, file->deleted);","fprintf(options->file,
				""%d\t%d\t"", file->added, file->deleted);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""options"", ""file""]]",[-11597153945239488240],6519,0:00:00
https://github.com/git/git/commit/12da1d1f6ffcd546a892a33302bb34fd37169022,28 Mar 2013,"Implement line-history search (git log -L)

This is a rewrite of much of Bo's work, mainly in an effort to split
it into smaller, easier to understand routines.

The algorithm is built around the struct range_set, which encodes a
series of line ranges as intervals [a,b).  This is used in two
contexts:

* A set of lines we are tracking (which will change as we dig through
  history).
* To encode diffs, as pairs of ranges.

The main routine is range_set_map_across_diff().  It processes the
diff between a commit C and some parent P.  It determines which diff
hunks are relevant to the ranges tracked in C, and computes the new
ranges for P.

The algorithm is then simply to process history in topological order
from newest to oldest, computing ranges and (partial) diffs.  At
branch points, we need to merge the ranges we are watching.  We will
find that many commits do not affect the chosen ranges, and mark them
TREESAME (in addition to those already filtered by pathspec limiting).
Another pass of history simplification then gets rid of such commits.

This is wired as an extra filtering pass in the log machinery.  This
currently only reduces code duplication, but should allow for other
simplifications and options to be used.

Finally, we hook a diff printer into the output chain.  Ideally we
would wire directly into the diff logic, to optionally use features
like word diff.  However, that will require some major reworking of
the diff chain, so we completely replace the output with our own diff
for now.

As this was a GSoC project, and has quite some history by now, many
people have helped.  In no particular order, thanks go to

  Jakub Narebski <jnareb@gmail.com>
  Jens Lehmann <Jens.Lehmann@web.de>
  Jonathan Nieder <jrnieder@gmail.com>
  Junio C Hamano <gitster@pobox.com>
  Ramsay Jones <ramsay@ramsay1.demon.co.uk>
  Will Palmer <wmpalmer@gmail.com>

Apologies to everyone I forgot.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2158,data/crawl/git/hunk_3794.cpp,,,data/crawl/git/old_hunk_3794.cpp,data/crawl/git/new_hunk_3794.cpp,-1,54,,"printf(""%d\n"", f(15));","[""addLog""]","[[], [""printf"", ""%d\\n"", ""f"", ""15""]]",[13388629844954367807],6518,"23 days, 0:00:00"
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2533.cpp,,,data/crawl/git/old_hunk_2533.cpp,data/crawl/git/new_hunk_2533.cpp,6,6,"error(""Object %s not a tree"",
			     sha1_to_hex(item->object.sha1));","error(""Object %s not a tree"",
			     oid_to_hex(&item->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""item"", ""sha1""], [""oid_to_hex"", ""&item"", ""oid""]]",[20499381312255292725],6517,0:00:00
https://github.com/git/git/commit/eb8fdbff3c26639912e73a01cfa2a86ce787d4b2,12 May 2016,"builtin/apply: avoid parameter shadowing 'linenr' global

Let's just rename the global 'state_linenr' as it will become
'state->linenr' in a following patch.

This also avoid errors when compiling with -Wshadow and makes
it safer to later move global variables into a ""state"" struct.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_1996.cpp,,,data/crawl/git/old_hunk_1996.cpp,data/crawl/git/new_hunk_1996.cpp,3,3,"die(_(""patch with only garbage at line %d""), linenr);","die(_(""patch with only garbage at line %d""), state_linenr);","[""updateVariable""]","[[""linenr""], [""state_linenr""]]",[14223080916151947064],6516,0:00:00
https://github.com/git/git/commit/d7263d097c4510d864f8c9ff808bc9b377f0bf8f,01 Jun 2016,"builtin/apply: move 'state_linenr' global into 'struct apply_state'

To libify the apply functionality the 'state_linenr' variable should
not be static and global to the file. Let's move it into
'struct apply_state'.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_1965.cpp,,,data/crawl/git/old_hunk_1965.cpp,data/crawl/git/new_hunk_1965.cpp,3,3,"die(_(""patch with only garbage at line %d""), state_linenr);","die(_(""patch with only garbage at line %d""), state->linenr);","[""removeVariable"", ""addVariable""]","[[""state_linenr""], [""state"", ""linenr""]]",[-11889008665354965638],6515,0:00:00
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1228.cpp,,,data/crawl/git/old_hunk_1228.cpp,data/crawl/git/new_hunk_1228.cpp,5,5,"die(_(""patch with only garbage at line %d""), linenr);","die(_(""patch with only garbage at line %d""), state->linenr);","[""removeVariable"", ""addVariable""]","[[], [""state""]]",[2334072250796981426],6514,0:00:00
https://github.com/git/git/commit/6003303a1e5086a9f28f18469a8a72ad22f75c86,26 Jul 2016,"merge-recursive: switch to returning errors instead of dying

The recursive merge machinery is supposed to be a library function, i.e.
it should return an error when it fails. Originally the functions were
part of the builtin ""merge-recursive"", though, where it was simpler to
call die() and be done with error handling.

The existing callers were already prepared to detect negative return
values to indicate errors and to behave as previously: exit with code 128
(which is the same thing that die() does, after printing the message).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_1654.cpp,,,data/crawl/git/old_hunk_1654.cpp,data/crawl/git/new_hunk_1654.cpp,12,15,"die_errno(_(""failed to symlink '%s'""), path);","error_errno(_(""failed to symlink '%s'""), path);","[""updateLog""]","[[""die_errno""], [""error_errno""]]",[5339537092231180198],6513,"32 days, 16:48:00"
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7038.cpp,,,data/crawl/git/old_hunk_7038.cpp,data/crawl/git/new_hunk_7038.cpp,98,77,"printf("" into %s\n"", current_branch);","strbuf_addf(out, "" into %s\n"", current_branch);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addf"", ""out""]]",[-5674764520144063431],6512,0:00:00
https://github.com/git/git/commit/c455c87c5cd42bbbe586b31cea1143132f3a39e4,22 Jul 2008,"Rename path_list to string_list

The name path_list was correct for the first usage of that data structure,
but it really is a general-purpose string list.

$ perl -i -pe 's/path-list/string-list/g' $(git grep -l path-list)
$ perl -i -pe 's/path_list/string_list/g' $(git grep -l path_list)
$ git mv path-list.h string-list.h
$ git mv path-list.c string-list.c
$ perl -i -pe 's/has_path/has_string/g' $(git grep -l has_path)
$ perl -i -pe 's/path/string/g' string-list.[ch]
$ git mv Documentation/technical/api-path-list.txt \
	Documentation/technical/api-string-list.txt
$ perl -i -pe 's/strdup_paths/strdup_strings/g' $(git grep -l strdup_paths)

... and then fix all users of string-list to access the member ""string""
instead of ""path"".

Documentation/technical/api-string-list.txt needed some rewrapping, too.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1109,data/crawl/git/hunk_6969.cpp,,,data/crawl/git/old_hunk_6969.cpp,data/crawl/git/new_hunk_6969.cpp,11,11,"printf(""%s (%d):\n"", log->list.items[i].path, onelines->nr);","printf(""%s (%d):\n"", log->list.items[i].string, onelines->nr);","[""updateVariable""]","[[""path""], [""string""]]",[-13310468656260978836],6511,0:00:00
https://github.com/git/git/commit/7b5201a60d8f00e7026a3fc4cfdd7852caa9882f,19 Mar 2009,"Do not name ""repo"" struct ""remote"" in push_http.c

This patch is a first step in getting http-push to use http authentication
via prompts.  The patch renames remote to repo so that it doesn't get
confusing with the same remote that is passed around when using http.

Signed-off-by: Amos King <amos.l.king@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/hunk_6364.cpp,,,data/crawl/git/old_hunk_6364.cpp,data/crawl/git/new_hunk_6364.cpp,4,4,"fprintf(stderr,
			""Unable to fetch ref %s from %s\n"",
			ls->dentry_name, remote->url);","fprintf(stderr,
			""Unable to fetch ref %s from %s\n"",
			ls->dentry_name, repo->url);","[""updateVariable""]","[[""remote""], [""repo""]]",[1111433356180913260],6510,"11 days, 2:40:00"
https://github.com/git/git/commit/eca2a8f0236a3b5b2c3afca2643d433a51a205fe,24 Mar 2009,"builtin-apply: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6332.cpp,,,data/crawl/git/old_hunk_6332.cpp,data/crawl/git/new_hunk_6332.cpp,3,3,"fprintf(stderr,
			""warning: truncating .rej filename to %.*s.rej"",
			cnt - 1, patch->new_name);","warning(""truncating .rej filename to %.*s.rej"",
			cnt - 1, patch->new_name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr""], []]",[13925655284445451766],6509,"17 days, 18:40:00"
https://github.com/git/git/commit/1965ff744a7e4cdefcc467991182b779f3c9d0e8,28 Jun 2009,"add --porcelain option to git-push

If --porcelain is used git-push will produce machine-readable output.  The
output status line for each ref will be tab-separated and sent to stdout instead
of stderr.  The full symbolic names of the refs will be given.  For example

$ git push --dry-run --porcelain master :foobar 2>/dev/null \
  | perl -pe 's/\t/ TAB /g'

= TAB refs/heads/master:refs/heads/master TAB [up to date]
- TAB :refs/heads/foobar TAB [deleted]

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/hunk_5796.cpp,,,data/crawl/git/old_hunk_5796.cpp,data/crawl/git/new_hunk_5796.cpp,34,34,"print_ref_status('!', ""[remote failure]"", ref,
				ref->deletion ? NULL : ref->peer_ref,
				""remote failed to report status"");","print_ref_status('!', ""[remote failure]"", ref,
						 ref->deletion ? NULL : ref->peer_ref,
						 ""remote failed to report status"", porcelain);","[""addVariable""]","[[], [""porcelain""]]",[-9178377914075802934],6508,0:00:00
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7310.cpp,,,data/crawl/git/old_hunk_7310.cpp,data/crawl/git/new_hunk_7310.cpp,11,11,"printf(""%c%c"", p->status, inter_name_termination);","fprintf(opt->file, ""%c%c"", p->status, inter_name_termination);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""opt"", ""file""]]",[-8816032784486576557],6507,"1697 days, 2:40:00"
https://github.com/git/git/commit/97ca7ca8ba3acbc7166fb7ff40819696ed20e8c6,26 Jan 2017,"fsck: move typename() printing to its own function

When an object has a problem, we mention its type. But we do
so by feeding the result of typename() directly to
fprintf(). This is potentially dangerous because typename()
can return NULL for some type values (like OBJ_NONE).

It's doubtful that this can be triggered in practice with
the current code, so this is probably not fixing a bug. But
it future-proofs us against modifications that make things
like OBJ_NONE more likely (and gives future patches a
central point to handle them).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/hunk_798.cpp,,,data/crawl/git/old_hunk_798.cpp,data/crawl/git/new_hunk_798.cpp,3,3,"printf(""tagged %s %s"", typename(tag->tagged->type),
				describe_object(tag->tagged));","printf(""tagged %s %s"", printable_type(tag->tagged),
				describe_object(tag->tagged));","[""removeVariable"", ""addVariable""]","[[""typename"", ""type""], [""printable_type""]]",[1053907418365229037],6506,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2479.cpp,,,data/crawl/git/old_hunk_2479.cpp,data/crawl/git/new_hunk_2479.cpp,13,13,"printf(""%s\n"", find_unique_abbrev(sha1, DEFAULT_ABBREV));","printf(""%s\n"", find_unique_abbrev(oid->hash, DEFAULT_ABBREV));","[""removeVariable"", ""addVariable""]","[[""sha1""], [""oid"", ""hash""]]",[13775018413119285420],6505,"261 days, 5:20:00"
https://github.com/git/git/commit/880c0aef0fa8229ff4d3bc96f1f221ebf36443fe,09 May 2016,"builtin/mailsplit.c: use error_errno()

There's one change, in split_mbox(), where an error() without strerror()
as argument is converted to error_errno(). This is correct because the
previous call is fopen (not shown in the context lines), which should
set errno if it returns NULL.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_2084.cpp,,,data/crawl/git/old_hunk_2084.cpp,data/crawl/git/new_hunk_2084.cpp,3,3,"error(""cannot open mbox %s"", file);","error_errno(""cannot open mbox %s"", file);","[""updateLog""]","[[""error""], [""error_errno""]]",[-9527979481410194851],6504,"212 days, 5:20:00"
https://github.com/git/git/commit/160baa0d9cbdfcdb6251aa5ede77c59c0d53edfd,13 Mar 2010,"notes: implement 'git notes copy --stdin'

This implements a mass-copy command that takes a sequence of lines in
the format

  <from-sha1> SP <to-sha1> [ SP <rest> ] LF

on stdin, and copies each <from-sha1>'s notes to the <to-sha1>.  The
<rest> is ignored.  The intent, of course, is that this can read the
same input that the 'post-rewrite' hook gets.

The copy_note() function is exposed for everyone's and in particular
the next commit's use.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Acked-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/hunk_5354.cpp,,,data/crawl/git/old_hunk_5354.cpp,data/crawl/git/new_hunk_5354.cpp,-1,12,,"error(""too many parameters"");","[""addLog""]","[[], [""error"", ""too"", ""many"", ""parameters""]]",[1057589751800871355],6503,"62 days, 6:00:00"
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,25,,"status_printf_ln(s, c, """");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c""]]",[-4482959075080447975],6502,0:00:00
https://github.com/git/git/commit/b78281f7215c0236da6bd5c04ec5e500c83fd101,14 Sep 2007,"diff --no-index: do not forget to run diff_setup_done()

Code inspection by Linus found this.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_8081.cpp,,,data/crawl/git/old_hunk_8081.cpp,data/crawl/git/new_hunk_8081.cpp,-1,4,,"die(""diff_setup_done failed"");","[""addLog""]","[[], [""die"", ""diff_setup_done"", ""failed""]]",[-9741318228225318585],6501,"657 days, 3:00:00"
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4269.cpp,,,data/crawl/git/old_hunk_4269.cpp,data/crawl/git/new_hunk_4269.cpp,110,110,"error(""unable to restore logfile %s from ""TMP_RENAMED_LOG"": %s"",
			oldref, strerror(errno));","error(""unable to restore logfile %s from ""TMP_RENAMED_LOG"": %s"",
			oldrefname, strerror(errno));","[""updateVariable""]","[[""oldref""], [""oldrefname""]]",[-2738408914677833511],6500,0:00:00
https://github.com/git/git/commit/e910bb1e79d53d43d07013b4d7e58c9f3ec53c8d,07 Sep 2016,"notes-merge: convert struct notes_merge_pair to struct object_id

Convert each of this structure's members from an unsigned char array to
a struct object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",127,data/crawl/git/hunk_1464.cpp,,,data/crawl/git/old_hunk_1464.cpp,data/crawl/git/new_hunk_1464.cpp,23,23,"printf(""Concatenating unique lines in local and remote ""
				""notes for %s\n"", sha1_to_hex(p->obj));","printf(""Concatenating unique lines in local and remote ""
				""notes for %s\n"", oid_to_hex(&p->obj));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""p""], [""oid_to_hex"", ""&p""]]",[5727636110885726295],6499,0:00:00
https://github.com/git/git/commit/dde75cb0561fa8a6bbb2de4c3662dbcc33728938,01 Aug 2016,"merge-recursive: write the commit title in one go

In 66a155b (Enable output buffering in merge-recursive., 2007-01-14), we
changed the code such that it prints the output in one go, to avoid
interfering with the progress output.

Let's make sure that the same holds true when outputting the commit
title: previously, we used several printf() statements to stdout and
assumed that stdout's buffer is large enough to hold the entire
commit title.

Apart from making that speculation unnecessary, we change the code to
add the message to the output buffer before flushing for another reason:
the next commit will introduce a new level of output buffering, where
the caller can request the output not to be flushed, but to be retained
for further processing.

This latter feature will be needed when teaching the sequencer to do
rebase -i's brunt work: it wants to control the output of the
cherry-picks (i.e. recursive merges).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_1627.cpp,,,data/crawl/git/old_hunk_1627.cpp,data/crawl/git/new_hunk_1627.cpp,18,18,"printf(""%.*s\n"", len, title);","strbuf_addf(&o->obuf, ""%.*s\n"", len, title);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addf"", ""&o"", ""obuf""]]",[-9816832474693083965],6498,"19 days, 12:00:00"
https://github.com/git/git/commit/9db56f71b91153f4076a796c80c61f00edd8b700,11 Nov 2008,"Fix non-literal format in printf-style calls

These were found using gcc 4.3.2-1ubuntu11 with the warning:

    warning: format not a string literal and no format arguments

Incorporated suggestions from Brandon Casey <casey@nrlssc.navy.mil>.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_6633.cpp,,,data/crawl/git/old_hunk_6633.cpp,data/crawl/git/new_hunk_6633.cpp,3,3,error(message);,"error(""%s"", message);","[""addContent""]","[[], [""%s""]]",[4736028453042782],6497,"398 days, 15:00:00"
https://github.com/git/git/commit/d96a53996b6c02b96a9a2b4eed9eac4e9d661a38,31 Jul 2015,"sequencer: replace write_cherry_pick_head with update_ref

Now update_ref (via write_pseudoref) does almost exactly what
write_cherry_pick_head did, so we can remove write_cherry_pick_head
and just use update_ref.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_3011.cpp,,,data/crawl/git/old_hunk_3011.cpp,data/crawl/git/new_hunk_3011.cpp,14,-1,"die_errno(_(""Could not open '%s' for writing""), filename);",,"[""removeLog""]","[[""die_errno"", ""_"", ""Could"", ""not"", ""open"", ""%s"", ""for"", ""writing"", ""filename""], []]",[8963619331342303412],6496,"364 days, 0:00:00"
https://github.com/git/git/commit/8acb3297f34fd04bb8f3a35ace3667b59236286e,19 Aug 2007,"Generate crash reports on die in fast-import

As fast-import is quite strict about its input and die()'s anytime
something goes wrong it can be difficult for a frontend developer
to troubleshoot why fast-import rejected their input, or to even
determine what input command it rejected.

This change introduces a custom handler for Git's die() routine.
When we receive a die() for any reason (fast-import or a lower level
core Git routine we called) the error is first dumped onto stderr
and then a more extensive crash report file is prepared in GIT_DIR.
Finally we exit the process with status 128, just like the stock
builtin die handler.

An internal flag is set to prevent any further die()'s that may be
invoked during the crash report generator from causing us to enter
into an infinite loop.  We shouldn't die() from our crash report
handler, but just in case someone makes a future code change we are
prepared to gaurd against small mistakes turning into huge problems
for the end-user.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",93,data/crawl/git/hunk_8143.cpp,,,data/crawl/git/old_hunk_8143.cpp,data/crawl/git/new_hunk_8143.cpp,-1,75,,"fputs(""-------------------\n"", rpt);","[""addLog""]","[[], [""fputs"", ""\\n"", ""rpt""]]",[-2731965694143889490],6495,"51 days, 17:08:34.285714"
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_8185.cpp,,,data/crawl/git/old_hunk_8185.cpp,data/crawl/git/new_hunk_8185.cpp,-1,18,,"die (""Too long path: %.*s"", 60, path);","[""addLog""]","[[], [""die"", ""Too"", ""long"", ""path"", ""%"", ""*s"", ""60"", ""path""]]",[10848113208999003329],6494,"288 days, 10:17:08.571428"
https://github.com/git/git/commit/e7a7be8831b159b9a7331b34c3ec6915d4a72190,26 Jul 2007,"git_mkstemp(): be careful not to overflow the path buffer.

If user's TMPDIR is insanely long, return negative after
setting errno to ENAMETOOLONG, pretending that the underlying
mkstemp() choked on a temporary file path that is too long.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_8198.cpp,,,data/crawl/git/old_hunk_8198.cpp,data/crawl/git/new_hunk_8198.cpp,3,3,"die(""unable to create temp-file"");","die(""unable to create temp-file: %s"", strerror(errno));","[""updateContent"", ""addVariable""]","[[], [""%s"", ""strerror"", ""errno""]]",[12745142427614753524],6493,"439 days, 20:34:17.142857"
https://github.com/git/git/commit/663af3422a648e87945e4d8c0cc3e13671f2bbde,21 Sep 2007,"Full rework of quote_c_style and write_name_quoted.

* quote_c_style works on a strbuf instead of a wild buffer.
* quote_c_style is now clever enough to not add double quotes if not needed.

* write_name_quoted inherits those advantages, but also take a different
  set of arguments. Now instead of asking for quotes or not, you pass a
  ""terminator"". If it's \0 then we assume you don't want to escape, else C
  escaping is performed. In any case, the terminator is also appended to the
  stream. It also no longer takes the prefix/prefix_len arguments, as it's
  seldomly used, and makes some optimizations harder.

* write_name_quotedpfx is created to work like write_name_quoted and take
  the prefix/prefix_len arguments.

Thanks to those API changes, diff.c has somehow lost weight, thanks to the
removal of functions that were wrappers around the old write_name_quoted
trying to give it a semantics like the new one, but performing a lot of
allocations for this goal. Now we always write directly to the stream, no
intermediate allocation is performed.

As a side effect of the refactor in builtin-apply.c, the length of the bar
graphs in diffstats are not affected anymore by the fact that the path was
clipped.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",641,data/crawl/git/hunk_7983.cpp,,,data/crawl/git/old_hunk_7983.cpp,data/crawl/git/new_hunk_7983.cpp,46,11,"printf(""%s "",
		       diff_unique_abbrev(p->two->sha1, abbrev));","printf(""%s "", diff_unique_abbrev(p->two->sha1, opt->abbrev));","[""removeVariable"", ""addVariable""]","[[], [""opt""]]",[4135046628039640640],6492,"702 days, 20:34:17.142857"
https://github.com/git/git/commit/04427ac8483f61dcb01a48c78a821f5042c88195,26 Oct 2008,"refactor userdiff textconv code

The original implementation of textconv put the conversion
into fill_mmfile. This was a bad idea for a number of
reasons:

 - it made the semantics of fill_mmfile unclear. In some
   cases, it was allocating data (if a text conversion
   occurred), and in some cases not (if we could use the
   data directly from the filespec). But the caller had
   no idea which had happened, and so didn't know whether
   the memory should be freed

 - similarly, the caller had no idea if a text conversion
   had occurred, and so didn't know whether the contents
   should be treated as binary or not. This meant that we
   incorrectly guessed that text-converted content was
   binary and didn't actually show it (unless the user
   overrode us with ""diff.foo.binary = false"", which then
   created problems in plumbing where the text conversion
   did _not_ occur)

 - not all callers of fill_mmfile want the text contents. In
   particular, we don't really want diffstat, whitespace
   checks, patch id generation, etc, to look at the
   converted contents.

This patch pulls the conversion code directly into
builtin_diff, so that we only see the conversion when
generating an actual patch. We also then know whether we are
doing a conversion, so we can check the binary-ness and free
the data from the mmfile appropriately (the previous version
leaked quite badly when text conversion was used)

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_6673.cpp,,,data/crawl/git/old_hunk_6673.cpp,data/crawl/git/new_hunk_6673.cpp,-1,14,,"die(""unable to read files to diff"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""]]",[-7517484640717457377],6491,"283 days, 13:42:51.428571"
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4269.cpp,,,data/crawl/git/old_hunk_4269.cpp,data/crawl/git/new_hunk_4269.cpp,84,84,"error(""unable to write current sha1 into %s"", newref);","error(""unable to write current sha1 into %s"", newrefname);","[""updateVariable""]","[[""newref""], [""newrefname""]]",[2773223809715939883],6490,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4791.cpp,,,data/crawl/git/old_hunk_4791.cpp,data/crawl/git/new_hunk_4791.cpp,-1,3,,"status_printf(s, color(WT_STATUS_HEADER, s), ""\t"");","[""addLog""]","[[], [""status_printf"", ""s"", ""color"", ""WT_STATUS_HEADER"", ""s"", ""\\t""]]",[9500334430214577577],6489,"157 days, 3:25:42.857142"
https://github.com/git/git/commit/62525ef78e8aec776f44da525030d76b52f14a57,06 Oct 2008,"make prefix_path() never return NULL

There are 9 places where prefix_path is called, and only in one of
them the returned pointer was checked to be non-zero and only to
call exit(128) as it is usually done by die(). In other 8 places,
the returned value was not checked and it caused SIGSEGV when a
path outside of the working tree was used. For instance, running
  git update-index --add /some/path/outside
caused SIGSEGV.

This patch changes prefix_path() to die if the path is outside of
the repository, so it never returns NULL.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",9,data/crawl/git/hunk_6707.cpp,,,data/crawl/git/old_hunk_6707.cpp,data/crawl/git/new_hunk_6707.cpp,3,3,"error(""'%s' is outside repository"", orig);","die(""'%s' is outside repository"", orig);","[""updateLog""]","[[""error""], [""die""]]",[-10210225593202855182],6488,"1573 days, 6:51:25.714285"
https://github.com/git/git/commit/ef1177d18e35c030c37aa533002a11d98361e6b9,26 Jul 2016,"die(""bug""): report bugs consistently

The vast majority of error messages in Git's source code which report a
bug use the convention to prefix the message with ""BUG:"".

As part of cleaning up merge-recursive to stop die()ing except in case of
detected bugs, let's just make the remainder of the bug reports consistent
with the de facto rule.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_1672.cpp,,,data/crawl/git/old_hunk_1672.cpp,data/crawl/git/new_hunk_1672.cpp,3,3,"die(_(""Unprocessed path??? %s""),
				    entries->items[i].string);","die(_(""BUG: unprocessed path??? %s""),
				    entries->items[i].string);","[""updateContent""]","[[""Unprocessed""], [""BUG"", ""unprocessed""]]",[327024216826240861],6487,"12 days, 20:34:17.142857"
https://github.com/git/git/commit/d7e6b6a8dcc8a98a4dcf6bc291f1e68b1acaecae,02 May 2017,"fast-import: convert internal structs to struct object_id

Convert struct tree_entry_ms, struct branch, struct tag, and struct
hash_list to use struct object_id by changing the definition and
applying the following semantic patch, plus the standard object_id
transforms:

@@
struct tree_entry_ms E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tree_entry_ms *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct branch E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct branch *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct tag E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tag *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct hash_list E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct hash_list *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/hunk_602.cpp,,,data/crawl/git/old_hunk_602.cpp,data/crawl/git/new_hunk_602.cpp,15,15,"die(""The commit %s is corrupt"", sha1_to_hex(b->sha1));","die(""The commit %s is corrupt"", oid_to_hex(&b->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""b"", ""sha1""], [""oid_to_hex"", ""&b"", ""oid""]]",[11703065648181253471],6486,0:00:00
https://github.com/git/git/commit/d616813d75b888b7c29bbad19808fe5cffa5380c,13 Aug 2007,"git-add: Add support for --refresh option.

This allows to refresh only a subset of the project files, based on
the specified pathspecs.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_8170.cpp,,,data/crawl/git/old_hunk_8170.cpp,data/crawl/git/new_hunk_8170.cpp,-1,12,,"die(""index file corrupt"");","[""addLog""]","[[], [""die"", ""index"", ""file"", ""corrupt""]]",[-18800083462689974984],6485,"1181 days, 20:34:17.142857"
https://github.com/git/git/commit/fc045fe7d4fa220f19274715c936636fe0516ea3,13 Feb 2018,"Mark messages for translations

Small changes in messages to fit the style and typography of rest.
Reuse already translated messages if possible.
Do not translate messages aimed at developers of git.
Fix unit tests depending on the original string.
Use `test_i18ngrep` for tests with translatable strings.
Change and verify rest of tests via `make GETTEXT_POISON=1 test`.

Signed-off-by: Alexander Shopov <ash@kambanaria.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_90.cpp,,,data/crawl/git/old_hunk_90.cpp,data/crawl/git/new_hunk_90.cpp,3,3,"die_errno(""Could not come back to cwd"");","die_errno(_(""cannot come back to cwd""));","[""updateContent"", ""addVariable""]","[[""Could"", ""not""], [""_"", ""cannot""]]",[-14315143501418834449],6484,0:00:00
https://github.com/git/git/commit/debca9d2fe784193dc2d9f98b5edac605ddfefbb,14 Feb 2018,"object: rename function 'typename' to 'type_name'

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/hunk_60.cpp,,,data/crawl/git/old_hunk_60.cpp,data/crawl/git/new_hunk_60.cpp,1,1,"error(""%.*s: expected %s type, but the object ""
				      ""dereferences to %s type"",
				      namelen, name, typename(expected_type),
				      typename(o->type));","error(""%.*s: expected %s type, but the object ""
				      ""dereferences to %s type"",
				      namelen, name, type_name(expected_type),
				      type_name(o->type));","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""typename"", ""typename""], [""type_name"", ""type_name""]]",[-4955489930721017996],6483,0:00:00
https://github.com/git/git/commit/95bf4bd4f7280312571e642339f3571310d0d660,04 Jan 2008,"git-clean: make ""Would remove ..."" path relative to cwd again

The rewrite changed the output to use the path relative to the
top of the work tree without a good reason.  This fixes it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_7608.cpp,,,data/crawl/git/old_hunk_7608.cpp,data/crawl/git/new_hunk_7608.cpp,22,27,"printf(""Removing %s\n"", ent->name);","printf(""Removing %s\n"",
				       ent->name + prefix_offset);","[""addVariable""]","[[], [""prefix_offset""]]",[2150067401993000303],6482,0:00:00
https://github.com/git/git/commit/a7269e5cb703083efb084ba19bc703ebc915aa5c,11 Feb 2008,"convert.c: guard config parser from value=NULL

filter.*.smudge and filter.*.clean configuration variables expect a
string value.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_7490.cpp,,,data/crawl/git/old_hunk_7490.cpp,data/crawl/git/new_hunk_7490.cpp,10,10,"error(""%s: lacks value"", var);",config_error_nonbool(var);,"[""updateLog"", ""removeContent""]","[[""error"", ""%s"", ""lacks"", ""value""], [""config_error_nonbool""]]",[-69406853232319889],6481,16:00:00
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7038.cpp,,,data/crawl/git/old_hunk_7038.cpp,data/crawl/git/new_hunk_7038.cpp,77,61,printf(subsep);,"strbuf_addstr(out, subsep);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addstr"", ""out""]]",[-4801477527192140132],6480,0:00:00
https://github.com/git/git/commit/782c2d65c24066a5d83453efb52763bc34c10f81,16 Feb 2008,"Build in checkout

The only differences in behavior should be:

 - git checkout -m with non-trivial merging won't print out
   merge-recursive messages (see the change in t7201-co.sh)

 - git checkout -- paths... will give a sensible error message if
   HEAD is invalid as a commit.

 - some intermediate states which were written to disk in the shell
   version (in particular, index states) are only kept in memory in
   this version, and therefore these can no longer be revealed by
   later write operations becoming impossible.

 - when we change branches, we discard MERGE_MSG, SQUASH_MSG, and
   rr-cache/MERGE_RR, like reset always has.

I'm not 100% sure I got the merge recursive setup exactly right; the
base for a non-trivial merge in the shell code doesn't seem
theoretically justified to me, but I tried to match it anyway, and the
tests all pass this way.

Other than these items, the results should be identical to the shell
version, so far as I can tell.

[jc: squashed lock-file fix from Dscho in]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",489,data/crawl/git/hunk_7475.cpp,,,data/crawl/git/old_hunk_7475.cpp,data/crawl/git/new_hunk_7475.cpp,-1,284,,"die(""unable to write new index file"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""write"", ""new"", ""index"", ""file""]]",[9643391217927606253],6479,"63 days, 8:00:00"
https://github.com/git/git/commit/d75307084da5f89329de190bb9b4a3196cec1d0e,05 Jan 2009,"remove trailing LF in die() messages

LF at the end of format strings given to die() is redundant because
die already adds one on its own.

Signed-off-by: Alexander Potashev <aspotashev@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_6559.cpp,,,data/crawl/git/old_hunk_6559.cpp,data/crawl/git/new_hunk_6559.cpp,3,3,"die(""Zero packs found!\n"");","die(""Zero packs found!"");","[""updateContent""]","[[""\\n""], []]",[-11776070748106360],6478,0:00:00
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,91,,"printf(""merges with remote %s\n"", merge->items[0].string);","[""addLog""]","[[], [""printf"", ""merges"", ""with"", ""remote"", ""%s\\n"", ""merge"", ""items[0]"", ""string""]]",[-4303492420749202182],6477,"18 days, 0:00:00"
https://github.com/git/git/commit/a2cf9f445e9074df1a45f5179cef0d4bb8647dd8,26 Dec 2007,"git-name-rev: add a --(no-)undefined option.

Rework get_rev_name to return NULL rather than ""undefined"" when a
reference is undefined. If --undefined is passed (default), git-name-rev
prints ""undefined"" for the name, else it die()s.

Make git-describe use --no-undefined when calling git-name-rev so
that --contains behavior matches the standard git-describe one.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_7616.cpp,,,data/crawl/git/old_hunk_7616.cpp,data/crawl/git/new_hunk_7616.cpp,-1,24,,"printf(""%s\n"", name);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""name""]]",[9215796307133573166],6476,"234 days, 20:00:00"
https://github.com/git/git/commit/714fddf2fc50cd5abb11d75837e6340edb9601f6,08 Apr 2009,"Change double quotes to single quotes in message

Most of the time when we give branch name in the message, we quote it
inside a pair of single-quotes.  git-checkout uses double-quotes; this
patch corrects the inconsistency.

Signed-off-by: Jari Aalto <jari.aalto@cante.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_6280.cpp,,,data/crawl/git/old_hunk_6280.cpp,data/crawl/git/new_hunk_6280.cpp,3,3,"fprintf(stderr, ""Note: moving to \""%s\"" which isn't a local branch\nIf you want to create a new branch from this checkout, you may do so\n(now or later) by using -b with the checkout command again. Example:\n  git checkout -b <new_branch_name>\n"", new->name);","fprintf(stderr, ""Note: moving to '%s' which isn't a local branch\nIf you want to create a new branch from this checkout, you may do so\n(now or later) by using -b with the checkout command again. Example:\n  git checkout -b <new_branch_name>\n"", new->name);","[""updateContent""]","[[""\\"", ""%s\\""], [""%s""]]",[4775301831892644278],6475,"2 days, 12:00:00"
https://github.com/git/git/commit/74f16b0c6fece88f585f9556fa1d3a7406e7a42e,14 Jun 2008,"mask necessary whitespace policy violations in test scripts

All of these violations are necessary parts of the tests
(which are generally checking the behavior of trailing
whitespace, or contain diff fragments with empty lines).

Our solution is two-fold:

  1. Process input with whitespace problems using tr. This
     has the added bonus that it becomes very obvious where
     the bogus whitespace is intended to go.

  2. Move large diff fragments into their own supplemental
     files. This gets rid of the whitespace problem, since
     supplemental files are not checked, and it also makes
     the test script a bit easier to read.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",267,data/crawl/git/hunk_7086.cpp,,,data/crawl/git/old_hunk_7086.cpp,data/crawl/git/new_hunk_7086.cpp,-1,21,,"printf(""%d"", num);","[""addLog""]","[[], [""printf"", ""%d"", ""num""]]",[12503247723739103219],6474,"82 days, 4:00:00"
https://github.com/git/git/commit/d43e90732bbc8eae6cbfd18f61ca6c82c8920732,29 Nov 2010,"entry.c: remove ""checkout-index"" from error messages

Back then when entry.c was part of checkout-index (or checkout-cache
at that time [1]). It makes sense to print the command name in error
messages. Nowadays entry.c is in libgit and can be used by any
commands, printing ""git checkout-index: blah"" does no more than
confusion. The error messages without it still give enough information.

[1] 12dccc1 (Make fiel checkout function available to the git library - 2005-06-05)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_4924.cpp,,,data/crawl/git/old_hunk_4924.cpp,data/crawl/git/new_hunk_4924.cpp,9,9,"error(""git checkout-index: cannot create subproject directory %s"", path);","error(""cannot create subproject directory %s"", path);","[""updateContent""]","[[""git"", ""checkout"", ""index""], []]",[4453837068525385472],6473,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4792.cpp,,,data/crawl/git/old_hunk_4792.cpp,data/crawl/git/new_hunk_4792.cpp,-1,13,,"status_printf_ln(s, color(WT_STATUS_HEADER, s), """");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""color"", ""WT_STATUS_HEADER"", ""s""]]",[6845972134648319543],6472,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4786.cpp,,,data/crawl/git/old_hunk_4786.cpp,data/crawl/git/new_hunk_4786.cpp,39,40,"fprintf(s->fp,
				""%s""
				""# Committer: %s\n"",
				ident_shown++ ? """" : ""#\n"",
				committer_ident.buf);","status_printf_ln(s, GIT_COLOR_NORMAL,
				""%s""
				""Committer: %s"",
				ident_shown++ ? """" : ""\n"",
				committer_ident.buf);","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""%s\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL"", ""%s""]]",[3607396239774366475],6471,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4790.cpp,,,data/crawl/git/old_hunk_4790.cpp,data/crawl/git/new_hunk_4790.cpp,36,36,"fprintf(s->fp, ""\n"");","status_printf_more(s, GIT_COLOR_NORMAL, ""\n"");","[""updateLog"", ""removeVariable"", ""addVariable""]","[[""fprintf"", ""fp""], [""status_printf_more"", ""GIT_COLOR_NORMAL""]]",[20501433586089975788],6470,0:00:00
https://github.com/git/git/commit/0569e9b8cea20d5eedfec66730a9711a0907ab0d,24 May 2008,"""git diff"": do not ignore index without --no-index

Even if ""foo"" and/or ""bar"" does not exist in index, ""git diff foo bar""
should not change behaviour drastically from ""git diff foo bar baz"" or
""git diff foo"".  A feature that ""sometimes works and is handy"" is an
unreliable cute hack.

""git diff foo bar"" outside a git repository continues to work as a more
colourful alternative to ""diff -u"" as before.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",621,data/crawl/git/hunk_7133.cpp,,,data/crawl/git/old_hunk_7133.cpp,data/crawl/git/new_hunk_7133.cpp,300,-1,"die(""diff_setup_done failed"");",,"[""removeLog""]","[[""die"", ""diff_setup_done"", ""failed""], []]",[9741318228225318585],6469,"1309 days, 4:00:00"
https://github.com/git/git/commit/64c0d71ce91696dfe5beb4b51e3233e56c857290,13 May 2008,"Improve reporting of errors in config file routines

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_7179.cpp,,,data/crawl/git/old_hunk_7179.cpp,data/crawl/git/new_hunk_7179.cpp,3,3,"fprintf(stderr, ""Invalid pattern: %s\n"",
					value_regex);","error(""invalid pattern: %s"", value_regex);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Invalid"", ""%s\\n""], [""error"", ""invalid"", ""%s""]]",[16070564858483165465],6468,"849 days, 0:00:00"
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2888.cpp,,,data/crawl/git/old_hunk_2888.cpp,data/crawl/git/new_hunk_2888.cpp,17,16,"die(_(""Error wrapping up %s.""), todo_file);","die(_(""Error wrapping up %s.""), git_path_todo_file());","[""removeVariable"", ""addVariable""]","[[""todo_file""], [""git_path_todo_file""]]",[-210441503875058068],6467,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2505.cpp,,,data/crawl/git/old_hunk_2505.cpp,data/crawl/git/new_hunk_2505.cpp,7,7,"fprintf(stderr, ""MOVE %s failed, aborting (%d/%ld)\n"",
				sha1_to_hex(request->obj->sha1),
				request->curl_result, request->http_code);","fprintf(stderr, ""MOVE %s failed, aborting (%d/%ld)\n"",
				oid_to_hex(&request->obj->oid),
				request->curl_result, request->http_code);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1"", ""request""], [""oid_to_hex"", ""&request"", ""oid""]]",[21360397726923635681],6466,0:00:00
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2006.cpp,,,data/crawl/git/old_hunk_2006.cpp,data/crawl/git/new_hunk_2006.cpp,22,26,"printf(""quiet: %d\n"", quiet);","show(&expect, &ret, ""quiet: %d"", quiet);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%d\\n""], [""show"", ""&expect"", ""&ret"", ""%d""]]",[-21424789886093274075],6465,0:00:00
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1429.cpp,,,data/crawl/git/old_hunk_1429.cpp,data/crawl/git/new_hunk_1429.cpp,19,21,"die(_(""merge returned no commit""));","err(o, _(""merge returned no commit""));","[""updateLog"", ""addVariable""]","[[""die""], [""err"", ""o""]]",[-1126055498403815445],6464,0:00:00
https://github.com/git/git/commit/b36045c1dc43e36f6fb84b041b59317b7f02b58c,10 Aug 2016,"http-backend: buffer headers before sending

Avoid waking up the readers for unnecessary context switches for
each line of header data being written, as all the headers are
written in short succession.

It is unlikely any HTTP/1.x server would want to read a CGI
response one-line-at-a-time and trickle each to the client.
Instead, I'd expect HTTP servers want to minimize syscall and
TCP/IP framing overhead by trying to send all of its response
headers in a single syscall or even combining the headers and
first chunk of the body with MSG_MORE or writev.

Verified by strace-ing response parsing on the CGI side.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_1587.cpp,,,data/crawl/git/old_hunk_1587.cpp,data/crawl/git/new_hunk_1587.cpp,10,10,"not_found(""Repository not exported: '%s'"", dir);","not_found(&hdr, ""Repository not exported: '%s'"", dir);","[""addVariable""]","[[], [""&hdr""]]",[-8147347704673570168],6463,"15 days, 0:00:00"
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/hunk_1540.cpp,,,data/crawl/git/old_hunk_1540.cpp,data/crawl/git/new_hunk_1540.cpp,-1,10,,self.get_logger();,"[""addLog""]","[[], [""self"", ""get_logger""]]",[2890257155482881115],6462,"11 days, 12:00:00"
https://github.com/git/git/commit/0a7b357737e3352ce1b0385313c1efc1b2564dbb,24 Jun 2016,"shortlog: support outputting to streams other than stdout

This will be needed to avoid freopen() in `git format-patch`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_1787.cpp,,,data/crawl/git/old_hunk_1787.cpp,data/crawl/git/new_hunk_1787.cpp,16,18,"printf(""      %s\n"", msg);","fprintf(log->file, ""      %s\n"", msg);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""log"", ""file""]]",[-5437866247109003464],6461,"38 days, 12:00:00"
https://github.com/git/git/commit/e923a8abe9b9e1ada28153160fb86a144162b06e,17 Jun 2016,"i18n: standardise messages

Standardise messages in order to save translators some work.

Nuances fixed in this commit:
""failed to read %s""
""read of %s failed""

""detach the HEAD at named commit""
""detach HEAD at named commit""

""removing '%s' failed""
""failed to remove '%s'""

""index file corrupt""
""corrupt index file""

""failed to read %s""
""read of %s failed""

""detach the HEAD at named commit""
""detach HEAD at named commit""

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_1825.cpp,,,data/crawl/git/old_hunk_1825.cpp,data/crawl/git/new_hunk_1825.cpp,3,3,"error(_(""read of %s failed""), patch->old_name);","error(_(""failed to read %s""), patch->old_name);","[""updateContent""]","[[""of""], [""to""]]",[640003845005640],6460,"42 days, 0:00:00"
https://github.com/git/git/commit/88a21979c5717e3f37b9691e90b6dbf2b94c751a,09 Mar 2011,"fetch/pull: recurse into submodules when necessary

To be able to access all commits of populated submodules referenced by the
superproject it is sufficient to only then let ""git fetch"" recurse into a
submodule when the new commits fetched in the superproject record new
commits for it. Having these commits present is extremely useful when
using the ""--submodule"" option to ""git diff"" (which is what ""git gui"" and
""gitk"" do since 1.6.6), as all submodule commits needed for creating a
descriptive output can be accessed. Also merging submodule commits (added
in 1.7.3) depends on the submodule commits in question being present to
work. Last but not least this enables disconnected operation when using
submodules, as all commits necessary for a successful ""git submodule
update -N"" will have been fetched automatically. So we choose this mode as
the default for fetch and pull.

Before a new or changed ref from upstream is updated in update_local_ref()
""git rev-list <new-sha1> --not --branches --remotes"" is used to determine
all newly fetched commits. These are then walked and diffed against their
parent(s) to see if a submodule has been changed. If that is the case, its
path is stored to be fetched after the superproject fetch is completed.

Using the ""--recurse-submodules"" or the ""--no-recurse-submodules"" option
disables the examination of the fetched refs because the result will be
ignored anyway.

There is currently no infrastructure for storing deleted and new
submodules in the .git directory of the superproject. That's why fetch and
pull for now only fetch submodules that are already checked out and are
not renamed.

In t7403 the ""--no-recurse-submodules"" argument had to be added to ""git
pull"" to avoid failure because of the moved upstream submodule repo.

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/hunk_4767.cpp,,,data/crawl/git/old_hunk_4767.cpp,data/crawl/git/new_hunk_4767.cpp,-1,13,,"die(""bad %s argument: %s"", opt, arg);","[""addLog""]","[[], [""die"", ""bad"", ""%s"", ""argument"", ""%s"", ""opt"", ""arg""]]",[-5003021781308979205],6459,"1306 days, 4:00:00"
https://github.com/git/git/commit/cb71f8bdb5a105cd5b66142b887989d9addc82d0,24 Apr 2017,"PRItime: introduce a new ""printf format"" for timestamps

Currently, Git's source code treats all timestamps as if they were
unsigned longs. Therefore, it is okay to write ""%lu"" when printing them.

There is a substantial problem with that, though: at least on Windows,
time_t is *larger* than unsigned long, and hence we will want to switch
away from the ill-specified `unsigned long` data type.

So let's introduce the pseudo format ""PRItime"" (currently simply being
defined to ""lu"") to make it easier to change the data type used for
timestamps.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_642.cpp,,,data/crawl/git/old_hunk_642.cpp,data/crawl/git/new_hunk_642.cpp,3,3,"printf(""committer %s <%s@%s> %lu +0000\n"",
		   *author ? author : ""nobody"",
		   *author ? author : ""nobody"",
		   *uuid ? uuid : ""local"", timestamp);","printf(""committer %s <%s@%s> %""PRItime"" +0000\n"",
		   *author ? author : ""nobody"",
		   *author ? author : ""nobody"",
		   *uuid ? uuid : ""local"", timestamp);","[""addContent"", ""addVariable""]","[[""%lu""], [""%"", ""PRItime""]]",[7127844621736664168],6458,0:00:00
https://github.com/git/git/commit/9a42c03cb71eaa9d41ba67275de38c997a791c32,12 Sep 2017,"shell: drop git-cvsserver support by default

The git-cvsserver script is old and largely unmaintained
these days. But git-shell allows untrusted users to run it
out of the box, significantly increasing its attack surface.

Let's drop it from git-shell's list of internal handlers so
that it cannot be run by default.  This is not backwards
compatible. But given the age and development activity on
CVS-related parts of Git, this is likely to impact very few
users, while helping many more (i.e., anybody who runs
git-shell and had no intention of supporting CVS).

There's no configuration mechanism in git-shell for us to
add a boolean and flip it to ""off"". But there is a mechanism
for adding custom commands, and adding CVS support here is
fairly trivial. Let's document it to give guidance to
anybody who really is still running cvsserver.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_242.cpp,,,data/crawl/git/old_hunk_242.cpp,data/crawl/git/new_hunk_242.cpp,10,-1,"die(""git-cvsserver only handles server: %s"", arg);",,"[""removeLog""]","[[""die"", ""git"", ""cvsserver"", ""only"", ""handles"", ""server"", ""%s"", ""arg""], []]",[12430851741948940614],6457,"9 days, 0:00:00"
https://github.com/git/git/commit/c8a3ea1f2972cb18715f06f99973c594b329c472,22 Feb 2018,"checkout: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/hunk_16.cpp,,,data/crawl/git/old_hunk_16.cpp,data/crawl/git/new_hunk_16.cpp,4,4,"die(_(""Cannot switch branch to a non-commit '%s'""),
		    new->name);","die(_(""Cannot switch branch to a non-commit '%s'""),
		    new_branch_info->name);","[""removeVariable"", ""addVariable""]","[[""new""], [""new_branch_info""]]",[383663773832696774],6456,0:00:00
https://github.com/git/git/commit/0bcff6121d68d8733e9b572eba357bcd8e91e23e,12 Mar 2007,"First version of a new script to submit changes back to perforce from git repositories.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",208,data/crawl/git/hunk_8423.cpp,,,data/crawl/git/old_hunk_8423.cpp,data/crawl/git/new_hunk_8423.cpp,-1,77,,die(msg);,"[""addLog""]","[[], [""die"", ""msg""]]",[4462070844842881441],6455,"38 days, 4:48:00"
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_8314.cpp,,,data/crawl/git/old_hunk_8314.cpp,data/crawl/git/new_hunk_8314.cpp,-1,69,,"die(""Unable to read current working directory"");","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""read"", ""current"", ""working"", ""directory""]]",[-13498077676133175965],6454,"11 days, 4:48:00"
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/hunk_8181.cpp,,,data/crawl/git/old_hunk_8181.cpp,data/crawl/git/new_hunk_8181.cpp,71,-1,"die(""Unable to read current working directory"");",,"[""removeLog""]","[[""die"", ""Unable"", ""to"", ""read"", ""current"", ""working"", ""directory""], []]",[13498077676133175965],6453,0:00:00
https://github.com/git/git/commit/1fb328947c8e3ace9df7d2d5374e26e2510a4e93,08 Mar 2008,"git-clean: correct printing relative path

When the given path contains '..' then git-clean incorrectly printed names
of files. This patch changes cmd_clean to use quote_path_relative().
Also, ""failed to remove ..."" message used absolutely path, but not it is
corrected to use relative path.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_7333.cpp,,,data/crawl/git/old_hunk_7333.cpp,data/crawl/git/new_hunk_7333.cpp,19,16,"printf(""Not removing %s\n"",
				       directory.buf + prefix_offset);","printf(""Not removing %s\n"", qname);","[""removeVariable"", ""addVariable""]","[[""directory"", ""buf"", ""prefix_offset""], [""qname""]]",[280287864387649706],6452,0:00:00
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6878.cpp,,,data/crawl/git/old_hunk_6878.cpp,data/crawl/git/new_hunk_6878.cpp,8,8,"output(2, ""Added %s"", path);","output(2, ""Adding %s"", path);","[""updateContent""]","[[""Added""], [""Adding""]]",[-3435560128246074786],6451,0:00:00
https://github.com/git/git/commit/05ac6b34e2c2adda5cb85dd0bdacb47fe5db953e,05 Mar 2009,"improve missing repository error message

Certain remote commands, when asked to do something in a
particular directory that was not actually a git repository,
would say ""unable to chdir or not a git archive"". The
""chdir"" bit is an unnecessary detail, and the term ""git
archive"" is much less common these days than ""git repository"".

So let's switch them all to:

  fatal: '%s' does not appear to be a git repository

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_6421.cpp,,,data/crawl/git/old_hunk_6421.cpp,data/crawl/git/new_hunk_6421.cpp,3,3,"die(""'%s': unable to chdir or not a git archive"", dir);","die(""'%s' does not appear to be a git repository"", dir);","[""updateContent""]","[[""unable"", ""chdir"", ""or"", ""archive""], [""does"", ""appear"", ""be"", ""repository""]]",[-31903778132293611473],6450,"15 days, 14:24:00"
https://github.com/git/git/commit/f389c808b6774fb0a1fc54cf2563a7b3038dd1d4,30 Oct 2007,"Rework make_usage to print the usage message immediately

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",47,data/crawl/git/hunk_7877.cpp,,,data/crawl/git/old_hunk_7877.cpp,data/crawl/git/new_hunk_7877.cpp,-1,39,,"fprintf(stderr, "" ..."");","[""addLog""]","[[], [""fprintf"", ""stderr""]]",[-13925655284445451766],6449,"209 days, 14:24:00"
https://github.com/git/git/commit/c29727d5241be0fee2265fbbe65d1b275b01dc1c,19 Sep 2007,"Add fetch methods to transport library.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",305,data/crawl/git/hunk_8034.cpp,,,data/crawl/git/old_hunk_8034.cpp,data/crawl/git/new_hunk_8034.cpp,-1,62,,"error(""Unable to start request"");","[""addLog""]","[[], [""error"", ""Unable"", ""to"", ""start"", ""request""]]",[14866092711229707640],6448,"393 days, 0:00:00"
https://github.com/git/git/commit/d6617c7cdebc20fe007e983f70b44a223dd52c28,30 Nov 2007,"Error out when user doesn't have access permission to the repository

Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>",31,data/crawl/git/hunk_7727.cpp,,,data/crawl/git/old_hunk_7727.cpp,data/crawl/git/new_hunk_7727.cpp,-1,7,,"error(""cannot open %s: %s\n"", filename, strerror(errno));","[""addLog""]","[[], [""error"", ""cannot"", ""open"", ""%s"", ""%s\\n"", ""filename"", ""strerror"", ""errno""]]",[19383622588692013371],6447,"163 days, 9:36:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,427,,"die(""Failed to resolve '%s' as a valid ref."", object_ref);","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""resolve"", ""%s"", ""as"", ""a"", ""valid"", ""ref"", ""object_ref""]]",[-3113607416360487782],6446,"716 days, 14:24:00"
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7661.cpp,,,data/crawl/git/old_hunk_7661.cpp,data/crawl/git/new_hunk_7661.cpp,-1,101,,"fputs(reset, stream);","[""addLog""]","[[], [""fputs"", ""reset"", ""stream""]]",[-19549131848656771817],6445,"168 days, 14:24:00"
https://github.com/git/git/commit/180619a58572b17de0ebeb96989e0aa832765186,17 Nov 2010,"notes.h/c: Propagate combine_notes_fn return value to add_note() and beyond

The combine_notes_fn functions uses a non-zero return value to indicate
failure. However, this return value was converted to a call to die()
in note_tree_insert().

Instead, propagate this return value out to add_note(), and return it
from there to enable the caller to handle errors appropriately.

Existing add_note() callers are updated to die() upon failure, thus
preserving the current behaviour. The only exceptions are copy_note()
and notes_cache_put() where we are able to propagate the add_note()
return value instead.

This patch has been improved by the following contributions:
- Jonathan Nieder: Future-proof by always checking add_note() return value
- Jonathan Nieder: Improve clarity of final if-condition in note_tree_insert()

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",80,data/crawl/git/hunk_4961.cpp,,,data/crawl/git/old_hunk_4961.cpp,data/crawl/git/new_hunk_4961.cpp,-1,4,,"die(""BUG: combine_notes_overwrite failed"");","[""addLog""]","[[], [""die"", ""BUG"", ""combine_notes_overwrite"", ""failed""]]",[-2659693736017767201],6444,0:00:00
https://github.com/git/git/commit/840383b2c2bd7179604f5c2595bf95e22a4e0c84,02 Apr 2010,"textconv: refactor calls to run_textconv

This patch adds a fill_textconv wrapper, which centralizes
some minor logic like error checking and handling the case
of no-textconv.

In addition to dropping the number of lines, this will make
it easier in future patches to handle multiple types of
textconv.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_5297.cpp,,,data/crawl/git/old_hunk_5297.cpp,data/crawl/git/new_hunk_5297.cpp,14,-1,"die(""unable to read files to diff"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""], []]",[7517484640717457377],6443,"65 days, 4:48:00"
https://github.com/git/git/commit/7fb1011e610a28518959b1d2d48cea17ecc32048,21 Sep 2007,"Rework unquote_c_style to work on a strbuf.

If the gain is not obvious in the diffstat, the resulting code is more
readable, _and_ in checkout-index/update-index we now reuse the same buffer
to unquote strings instead of always freeing/mallocing.

This also is more coherent with the next patch that reworks quoting
functions.

The quoting function is also made more efficient scanning for backslashes
and treating portions of strings without a backslash at once.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",379,data/crawl/git/hunk_7991.cpp,,,data/crawl/git/old_hunk_7991.cpp,data/crawl/git/new_hunk_7991.cpp,-1,12,,"die(""line is badly quoted"");","[""addLog""]","[[], [""die"", ""line"", ""is"", ""badly"", ""quoted""]]",[-5376509924267512556],6442,"513 days, 4:48:00"
https://github.com/git/git/commit/06f59e9f5daa06fc4bd51cf4c508b3edd3ed514a,01 Jul 2007,"Don't fflush(stdout) when it's not helpful

This patch arose from a discussion started by Jim Meyering's patch
whose intention was to provide better diagnostics for failed writes.
Linus proposed a better way to do things, which also had the added
benefit that adding a fflush() to git-log-* operations and incremental
git-blame operations could improve interactive respose time feel, at
the cost of making things a bit slower when we aren't piping the
output to a downstream program.

This patch skips the fflush() calls when stdout is a regular file, or
if the environment variable GIT_FLUSH is set to ""0"".  This latter can
speed up a command such as:

GIT_FLUSH=0 strace -c -f -e write time git-rev-list HEAD | wc -l

a tiny amount.

Signed-off-by: ""Theodore Ts'o"" <tytso@mit.edu>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_8255.cpp,,,data/crawl/git/old_hunk_8255.cpp,data/crawl/git/new_hunk_8255.cpp,-1,3,,"maybe_flush_or_die(stdout, ""stdout"");","[""addLog""]","[[], [""maybe_flush_or_die"", ""stdout"", ""stdout""]]",[-25128539947613561338],6441,"943 days, 14:24:00"
https://github.com/git/git/commit/b4fb09e4da53bfc6c720337142af5db3204736d5,10 Aug 2015,"lockfile: add accessor get_lock_file_path()

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_2914.cpp,,,data/crawl/git/old_hunk_2914.cpp,data/crawl/git/new_hunk_2914.cpp,2,2,"die_errno(""failed to write to %s"",
				  shallow_lock->filename.buf);","die_errno(""failed to write to %s"",
				  get_lock_file_path(shallow_lock));","[""removeVariable"", ""addVariable""]","[[""filename"", ""buf""], [""get_lock_file_path""]]",[3557264256543125690],6440,0:00:00
https://github.com/git/git/commit/a5adaced2e13c135d5d9cc65be9eb95aa3bacedf,23 Sep 2015,"transport: add a protocol-whitelist environment variable

If we are cloning an untrusted remote repository into a
sandbox, we may also want to fetch remote submodules in
order to get the complete view as intended by the other
side. However, that opens us up to attacks where a malicious
user gets us to clone something they would not otherwise
have access to (this is not necessarily a problem by itself,
but we may then act on the cloned contents in a way that
exposes them to the attacker).

Ideally such a setup would sandbox git entirely away from
high-value items, but this is not always practical or easy
to set up (e.g., OS network controls may block multiple
protocols, and we would want to enable some but not others).

We can help this case by providing a way to restrict
particular protocols. We use a whitelist in the environment.
This is more annoying to set up than a blacklist, but
defaults to safety if the set of protocols git supports
grows). If no whitelist is specified, we continue to default
to allowing all protocols (this is an ""unsafe"" default, but
since the minority of users will want this sandboxing
effect, it is the only sensible one).

A note on the tests: ideally these would all be in a single
test file, but the git-daemon and httpd test infrastructure
is an all-or-nothing proposition rather than a test-by-test
prerequisite. By putting them all together, we would be
unable to test the file-local code on machines without
apache.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",255,data/crawl/git/hunk_2791.cpp,,,data/crawl/git/old_hunk_2791.cpp,data/crawl/git/new_hunk_2791.cpp,-1,13,,"die(""transport '%s' not allowed"", type);","[""addLog""]","[[], [""die"", ""transport"", ""%s"", ""not"", ""allowed"", ""type""]]",[615898744279357072],6439,"5 days, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2753.cpp,,,data/crawl/git/old_hunk_2753.cpp,data/crawl/git/new_hunk_2753.cpp,-1,4,,"die(""unable to generate diff for %s"", pair->one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""for"", ""%s"", ""pair"", ""one"", ""path""]]",[-4176965545503248889],6438,"1 day, 14:24:00"
https://github.com/git/git/commit/f4113cac0c88b4f36ee6f3abf3218034440a68e3,25 Sep 2015,"http: limit redirection to protocol-whitelist

Previously, libcurl would follow redirection to any protocol
it was compiled for support with. This is desirable to allow
redirection from HTTP to HTTPS. However, it would even
successfully allow redirection from HTTP to SFTP, a protocol
that git does not otherwise support at all. Furthermore
git's new protocol-whitelisting could be bypassed by
following a redirect within the remote helper, as it was
only enforced at transport selection time.

This patch limits redirects within libcurl to HTTP, HTTPS,
FTP and FTPS. If there is a protocol-whitelist present, this
list is limited to those also allowed by the whitelist. As
redirection happens from within libcurl, it is impossible
for an HTTP redirect to a protocol implemented within
another remote helper.

When the curl version git was compiled with is too old to
support restrictions on protocol redirection, we warn the
user if GIT_ALLOW_PROTOCOL restrictions were requested. This
is a little inaccurate, as even without that variable in the
environment, we would still restrict SFTP, etc, and we do
not warn in that case. But anything else means we would
literally warn every time git accesses an http remote.

This commit includes a test, but it is not as robust as we
would hope. It redirects an http request to ftp, and checks
that curl complained about the protocol, which means that we
are relying on curl's specific error message to know what
happened. Ideally we would redirect to a working ftp server
and confirm that we can clone without protocol restrictions,
and not with them. But we do not have a portable way of
providing an ftp server, nor any other protocol that curl
supports (https is the closest, but we would have to deal
with certificates).

[jk: added test and version warning]

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_2756.cpp,,,data/crawl/git/old_hunk_2756.cpp,data/crawl/git/new_hunk_2756.cpp,-1,15,,"warning(""protocol restrictions not applied to curl redirects because\n""
			""your curl version is too old (>= 7.19.4)"");","[""addLog""]","[[], [""warning"", ""protocol"", ""restrictions"", ""not"", ""applied"", ""to"", ""curl"", ""redirects"", ""because\\n"", ""your"", ""curl"", ""version"", ""is"", ""too"", ""old"", ""7"", ""19"", ""4""]]",[29988564774754874644],6437,"4 days, 0:00:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2752.cpp,,,data/crawl/git/old_hunk_2752.cpp,data/crawl/git/new_hunk_2752.cpp,-1,5,,"error(""unable to generate patch-id diff for %s"",
				     p->one->path);","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""generate"", ""patch"", ""id"", ""diff"", ""for"", ""%s"", ""p"", ""one"", ""path""]]",[-2764243341565386310],6436,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2751.cpp,,,data/crawl/git/old_hunk_2751.cpp,data/crawl/git/new_hunk_2751.cpp,-1,5,,"die(""unable to generate checkdiff for %s"", one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""checkdiff"", ""for"", ""%s"", ""one"", ""path""]]",[5053751810269539490],6435,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2750.cpp,,,data/crawl/git/old_hunk_2750.cpp,data/crawl/git/new_hunk_2750.cpp,-1,5,,"die(""unable to generate diffstat for %s"", one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diffstat"", ""for"", ""%s"", ""one"", ""path""]]",[6606585774228532893],6434,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2749.cpp,,,data/crawl/git/old_hunk_2749.cpp,data/crawl/git/new_hunk_2749.cpp,-1,5,,"die(""unable to generate diff for %s"", one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""for"", ""%s"", ""one"", ""path""]]",[-8319515319368097233],6433,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2748.cpp,,,data/crawl/git/old_hunk_2748.cpp,data/crawl/git/new_hunk_2748.cpp,-1,5,,"die(""unable to generate word diff"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""word"", ""diff""]]",[-16093571376105777497],6432,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2744.cpp,,,data/crawl/git/old_hunk_2744.cpp,data/crawl/git/new_hunk_2744.cpp,-1,4,,"die(""unable to generate diff"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff""]]",[-12424649916485438141],6431,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2743.cpp,,,data/crawl/git/old_hunk_2743.cpp,data/crawl/git/new_hunk_2743.cpp,-1,4,,"die(""unable to generate diff (%s)"",
		    sha1_to_hex(parent->commit->object.sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""%s"", ""sha1_to_hex"", ""parent"", ""commit"", ""object"", ""sha1""]]",[-21160447067534889346],6430,"1 day, 14:24:00"
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2742.cpp,,,data/crawl/git/old_hunk_2742.cpp,data/crawl/git/new_hunk_2742.cpp,-1,4,,"die(""unable to generate diff (%s -> %s)"",
		    sha1_to_hex(parent->commit->object.sha1),
		    sha1_to_hex(target->commit->object.sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""%s"", ""%s"", ""sha1_to_hex"", ""parent"", ""commit"", ""object"", ""sha1"", ""sha1_to_hex"", ""target"", ""commit"", ""object"", ""sha1""]]",[-32607916652648448424],6429,"1 day, 14:24:00"
https://github.com/git/git/commit/c69f2395ba6f4bc96542d6d52987989992331226,21 Oct 2015,"mailinfo: introduce ""struct mailinfo"" to hold globals

In this first step, move only 'email' and 'name' fields in there and
remove the corresponding globals.  In subsequent patches, more
globals will be moved to this and the structure will be passed
around as a new parameter to more functions.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_2646.cpp,,,data/crawl/git/old_hunk_2646.cpp,data/crawl/git/new_hunk_2646.cpp,5,5,"fprintf(fout, ""Email: %s\n"", email.buf);","fprintf(fout, ""Email: %s\n"", mi->email.buf);","[""addVariable""]","[[], [""mi""]]",[13952083821125996],6428,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2537.cpp,,,data/crawl/git/old_hunk_2537.cpp,data/crawl/git/new_hunk_2537.cpp,2,2,"packet_write(1, ""unshallow %s"",
					sha1_to_hex(object->sha1));","packet_write(1, ""unshallow %s"",
					oid_to_hex(&object->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""object"", ""sha1""], [""oid_to_hex"", ""&object"", ""oid""]]",[14257883057111613689],6427,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2528.cpp,,,data/crawl/git/old_hunk_2528.cpp,data/crawl/git/new_hunk_2528.cpp,2,2,"error(_(""%s: cannot parse parent commit %s""),
			action_name(opts), sha1_to_hex(parent->object.sha1));","error(_(""%s: cannot parse parent commit %s""),
			action_name(opts), oid_to_hex(&parent->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""parent"", ""sha1""], [""oid_to_hex"", ""&parent"", ""oid""]]",[22308005776989869171],6426,0:00:00
https://github.com/git/git/commit/2cd85c40a9f396bb24f7861c832acd52e61c4780,07 Feb 2009,"Make test-path-utils more robust against incorrect use

Previously, this test utility happily returned with exit code 0 if garbage
was thrown at it. Now it reports failure if an unknown function name was
given on the command line.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_6493.cpp,,,data/crawl/git/old_hunk_6493.cpp,data/crawl/git/new_hunk_6493.cpp,-1,12,,"fprintf(stderr, ""%s: unknown function name: %s\n"", argv[0],
		argv[1] ? argv[1] : ""(there was none)"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""unknown"", ""function"", ""name"", ""%s\\n"", ""argv[0]"", ""argv[1]"", ""argv[1]"", ""there"", ""was"", ""none""]]",[-15405150782460864296],6425,"1033 days, 19:12:00"
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2006.cpp,,,data/crawl/git/old_hunk_2006.cpp,data/crawl/git/new_hunk_2006.cpp,30,34,"printf(""arg %02d: %s\n"", i, argv[i]);","show(&expect, &ret, ""arg %02d: %s"", i, argv[i]);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%s\\n""], [""show"", ""&expect"", ""&ret"", ""%s""]]",[-21424806886155274011],6424,0:00:00
https://github.com/git/git/commit/99d1a9861ae88595e7386c453b6b38573a8a570c,07 Sep 2016,"cache: convert struct cache_entry to use struct object_id

Convert struct cache_entry to use struct object_id by applying the
following semantic patch and the object_id transforms from contrib, plus
the actual change to the struct:

@@
struct cache_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct cache_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",148,data/crawl/git/hunk_1490.cpp,,,data/crawl/git/old_hunk_1490.cpp,data/crawl/git/new_hunk_1490.cpp,0,0,"fprintf(o, ""%s%06o %s %d\t%s\n"",
			label,
			ce->ce_mode,
			sha1_to_hex(ce->sha1),
			ce_stage(ce),
			ce->name);","fprintf(o, ""%s%06o %s %d\t%s\n"",
			label,
			ce->ce_mode,
			oid_to_hex(&ce->oid),
			ce_stage(ce),
			ce->name);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1"", ""ce""], [""oid_to_hex"", ""&ce"", ""oid""]]",[5788908227509637815],6423,0:00:00
https://github.com/git/git/commit/fb33b62ca6e6dbfa8a5330cb0535fe122e250b5f,08 Sep 2016,"diff.c: use diff_options directly

The value of `ecbdata->opt` is accessible via the short variable `o`
already, so let's use that instead.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1440.cpp,,,data/crawl/git/old_hunk_1440.cpp,data/crawl/git/new_hunk_1440.cpp,4,4,"fputs(""~\n"", ecbdata->opt->file);","fputs(""~\n"", o->file);","[""updateVariable"", ""removeVariable""]","[[""ecbdata"", ""opt""], [""o""]]",[-12852298264307791651],6422,0:00:00
https://github.com/git/git/commit/58f233ce1ed67bbc31a429fde5c65d5050fdbd7d,22 Jun 2015,"initial_ref_transaction_commit(): function for initial ref creation

""git clone"" uses shortcuts when creating the initial set of
references:

* It writes them directly to packed-refs.

* It doesn't lock the individual references (though it does lock the
  packed-refs file).

* It doesn't check for refname conflicts between two new references or
  between one new reference and any hypothetical old ones.

* It doesn't create reflog entries for the reference creations.

This functionality was implemented in builtin/clone.c. But really that
file shouldn't have such intimate knowledge of how references are
stored. So provide a new function in the refs API,
initial_ref_transaction_commit(), which can be used for initial
reference creation. The new function is based on the ref_transaction
interface.

This means that we can make some other functions private to the refs
module. That will be done in a followup commit.

It would seem to make sense to add a test here that there are no
existing references, because that is how the function *should* be
used. But in fact, the ""testgit"" remote helper appears to call it
*after* having set up refs/remotes/<name>/HEAD and
refs/remotes/<name>/master, so we can't be so strict. For now, the
function trusts its caller to only call it when it makes sense. Future
commits will add some more limited sanity checks.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/hunk_3125.cpp,,,data/crawl/git/old_hunk_3125.cpp,data/crawl/git/new_hunk_3125.cpp,-1,15,,"die(""%s"", err.buf);","[""addLog""]","[[], [""die"", ""%s"", ""err"", ""buf""]]",[-4644468883739524215],6421,"237 days, 19:12:00"
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/hunk_815.cpp,,,data/crawl/git/old_hunk_815.cpp,data/crawl/git/new_hunk_815.cpp,-1,63,,"error(""expected ' ', got '%c'"", *p);","[""addLog""]","[[], [""error"", ""expected"", ""got"", ""%c"", ""*p""]]",[12131691030932058946],6420,0:00:00
https://github.com/git/git/commit/ebaa79f462c48e0ed0341d9c8f9c97de557afcfd,07 Mar 2010,"Make report() from usage.c public as vreportf() and use it.

There exist already a number of static functions named 'report', therefore,
the function name was changed.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_5375.cpp,,,data/crawl/git/old_hunk_5375.cpp,data/crawl/git/new_hunk_5375.cpp,-1,9,,"vreportf(""fatal: "", err, params);","[""addLog""]","[[], [""vreportf"", ""fatal"", ""err"", ""params""]]",[-13998640651250250069],6419,"520 days, 9:36:00"
https://github.com/git/git/commit/4a32b2e08be8daf965949956e8ea16718797a031,11 May 2015,"lock_ref_sha1_basic(): report errors via a ""struct strbuf *err""

For now, change the callers to spew the error to stderr like before.
But soon we will change them to incorporate the reason for the failure
into their own error messages.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",44,data/crawl/git/hunk_3220.cpp,,,data/crawl/git/old_hunk_3220.cpp,data/crawl/git/new_hunk_3220.cpp,4,-1,"error(""%s"", err.buf);",,"[""removeLog""]","[[""error"", ""%s"", ""err"", ""buf""], []]",[-5565756709463330967],6418,"159 days, 19:12:00"
https://github.com/git/git/commit/7acaaac275a1d338f7b2540779b7ea60f3f0667c,12 Dec 2011,"revert: allow single-pick in the middle of cherry-pick sequence

After messing up a difficult conflict resolution in the middle of a
cherry-pick sequence, it can be useful to be able to

	git checkout HEAD . && git cherry-pick that-one-commit

to restart the conflict resolution. The current code however errors out
saying that another cherry-pick is already in progress.

Suggested-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_4256.cpp,,,data/crawl/git/old_hunk_4256.cpp,data/crawl/git/new_hunk_4256.cpp,-1,16,,"die(_(""revision walk setup failed""));","[""addLog""]","[[], [""die"", ""_"", ""revision"", ""walk"", ""setup"", ""failed""]]",[-17150171457883954768],6417,"1381 days, 19:12:00"
https://github.com/git/git/commit/b14f27f91770e0f99f64135348977a0ce1c7993a,30 Mar 2017,"Tenth batch for 2.13

Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_711.cpp,,,data/crawl/git/old_hunk_711.cpp,data/crawl/git/new_hunk_711.cpp,-1,5,,"die(""BUG"");","[""addLog""]","[[], [""die"", ""BUG""]]",[-1598062591377233978],6416,"66 days, 4:48:00"
https://github.com/git/git/commit/63ecb99e0d05bd4b73d14f439e489e70176fad43,07 Sep 2016,"builtin/cat-file: convert some static functions to struct object_id

Convert all of the static functions that are not callbacks to use struct
object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_1469.cpp,,,data/crawl/git/old_hunk_1469.cpp,data/crawl/git/new_hunk_1469.cpp,9,9,"die(""%s not a valid tag"", sha1_to_hex(sha1));","die(""%s not a valid tag"", oid_to_hex(&oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1""], [""oid_to_hex"", ""&oid""]]",[-584189701027962881],6415,"247 days, 14:24:00"
https://github.com/git/git/commit/4a59fd131229968b08af9bdf221c341f54c52983,30 Oct 2007,"Add a simple option parser.

The option parser takes argc, argv, an array of struct option
and a usage string.  Each of the struct option elements in the array
describes a valid option, its type and a pointer to the location where the
value is written.  The entry point is parse_options(), which scans through
the given argv, and matches each option there against the list of valid
options.  During the scan, argv is rewritten to only contain the
non-option command line arguments and the number of these is returned.

Aggregation of single switches is allowed:
  -rC0 is the same as -r -C 0 (supposing that -C wants an arg).

Every long option automatically support the option with the same name,
prefixed with 'no-' to unset the switch. It assumes that initial value for
strings are ""NULL"" and for integers is ""0"".

Long options are supported either with '=' or without:
  --some-option=foo is the same as --some-option foo

Acked-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",206,data/crawl/git/hunk_7880.cpp,,,data/crawl/git/old_hunk_7880.cpp,data/crawl/git/new_hunk_7880.cpp,-1,50,,"opterror(opt, ""takes no value"", flags);","[""addLog""]","[[], [""opterror"", ""opt"", ""takes"", ""no"", ""value"", ""flags""]]",[9810004746429070805],6414,"3 days, 6:00:00"
https://github.com/git/git/commit/039bc64e886716593d59910694a6c8ed5b72c515,14 Nov 2007,"core.excludesfile clean-up

There are inconsistencies in the way commands currently handle
the core.excludesfile configuration variable.  The problem is
the variable is too new to be noticed by anything other than
git-add and git-status.

 * git-ls-files does not notice any of the ""ignore"" files by
   default, as it predates the standardized set of ignore files.
   The calling scripts established the convention to use
   .git/info/exclude, .gitignore, and later core.excludesfile.

 * git-add and git-status know about it because they call
   add_excludes_from_file() directly with their own notion of
   which standard set of ignore files to use.  This is just a
   stupid duplication of code that need to be updated every time
   the definition of the standard set of ignore files is
   changed.

 * git-read-tree takes --exclude-per-directory=<gitignore>,
   not because the flexibility was needed.  Again, this was
   because the option predates the standardization of the ignore
   files.

 * git-merge-recursive uses hardcoded per-directory .gitignore
   and nothing else.  git-clean (scripted version) does not
   honor core.* because its call to underlying ls-files does not
   know about it.  git-clean in C (parked in 'pu') doesn't either.

We probably could change git-ls-files to use the standard set
when no excludes are specified on the command line and ignore
processing was asked, or something like that, but that will be a
change in semantics and might break people's scripts in a subtle
way.  I am somewhat reluctant to make such a change.

On the other hand, I think it makes perfect sense to fix
git-read-tree, git-merge-recursive and git-clean to follow the
same rule as other commands.  I do not think of a valid use case
to give an exclude-per-directory that is nonstandard to
read-tree command, outside a ""negative"" test in the t1004 test
script.

This patch is the first step to untangle this mess.

The next step would be to teach read-tree, merge-recursive and
clean (in C) to use setup_standard_excludes().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/hunk_7786.cpp,,,data/crawl/git/old_hunk_7786.cpp,data/crawl/git/new_hunk_7786.cpp,5,-1,"die(""core.excludesfile without value"");",,"[""removeLog""]","[[""die"", ""core"", ""excludesfile"", ""without"", ""value""], []]",[16385074991810110218],6413,"1 day, 12:00:00"
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_8185.cpp,,,data/crawl/git/old_hunk_8185.cpp,data/crawl/git/new_hunk_8185.cpp,-1,38,,"die (""Could not get current working directory"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""get"", ""current"", ""working"", ""directory""]]",[-5754901273999352896],6412,"166 days, 0:00:00"
https://github.com/git/git/commit/4a59fd131229968b08af9bdf221c341f54c52983,30 Oct 2007,"Add a simple option parser.

The option parser takes argc, argv, an array of struct option
and a usage string.  Each of the struct option elements in the array
describes a valid option, its type and a pointer to the location where the
value is written.  The entry point is parse_options(), which scans through
the given argv, and matches each option there against the list of valid
options.  During the scan, argv is rewritten to only contain the
non-option command line arguments and the number of these is returned.

Aggregation of single switches is allowed:
  -rC0 is the same as -r -C 0 (supposing that -C wants an arg).

Every long option automatically support the option with the same name,
prefixed with 'no-' to unset the switch. It assumes that initial value for
strings are ""NULL"" and for integers is ""0"".

Long options are supported either with '=' or without:
  --some-option=foo is the same as --some-option foo

Acked-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",206,data/crawl/git/hunk_7880.cpp,,,data/crawl/git/old_hunk_7880.cpp,data/crawl/git/new_hunk_7880.cpp,-1,73,,"opterror(opt, ""requires a value"", flags);","[""addLog""]","[[], [""opterror"", ""opt"", ""requires"", ""a"", ""value"", ""flags""]]",[4855220492352704229],6411,"63 days, 6:00:00"
https://github.com/git/git/commit/21a02980f9025c3a338fb897796542ddef8707d1,11 Aug 2007,"builtin-bundle - use buffered reads for bundle header

This eliminates all use of byte-at-a-time reading of data in this
function: as Junio noted, a bundle file is seekable so we can
reset the file position to the first part of the pack-file using lseek
after reading the header.

Signed-off-by: Mark Levedahl <mdl123@verizon.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_8172.cpp,,,data/crawl/git/old_hunk_8172.cpp,data/crawl/git/new_hunk_8172.cpp,-1,7,,"error(""could not open '%s'"", path);","[""addLog""]","[[], [""error"", ""could"", ""not"", ""open"", ""%s"", ""path""]]",[25625554630532546828],6410,"103 days, 0:00:00"
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6876.cpp,,,data/crawl/git/old_hunk_6876.cpp,data/crawl/git/new_hunk_6876.cpp,3,3,"output(1, ""Renamed %s => %s"", ren1_src, ren1_dst);","output(1, ""Renaming %s => %s"", ren1_src, ren1_dst);","[""updateContent""]","[[""Renamed""], [""Renaming""]]",[11505642716263261134],6409,0:00:00
https://github.com/git/git/commit/b449f4cfc972929b638b90d375b8960c37790618,07 Sep 2007,"Rework strbuf API and semantics.

  The gory details are explained in strbuf.h. The change of semantics this
patch enforces is that the embeded buffer has always a '\0' character after
its last byte, to always make it a C-string. The offs-by-one changes are all
related to that very change.

  A strbuf can be used to store byte arrays, or as an extended string
library. The `buf' member can be passed to any C legacy string function,
because strbuf operations always ensure there is a terminating \0 at the end
of the buffer, not accounted in the `len' field of the structure.

  A strbuf can be used to generate a string/buffer whose final size is not
really known, and then ""strbuf_detach"" can be used to get the built buffer,
and keep the wrapping ""strbuf"" structure usable for further work again.

  Other interesting feature: strbuf_grow(sb, size) ensure that there is
enough allocated space in `sb' to put `size' new octets of data in the
buffer. It helps avoiding reallocating data for nothing when the problem the
strbuf helps to solve has a known typical size.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",208,data/crawl/git/hunk_8112.cpp,,,data/crawl/git/old_hunk_8112.cpp,data/crawl/git/new_hunk_8112.cpp,-1,51,,"die(""this should not happen, your snprintf is broken"");","[""addLog""]","[[], [""die"", ""this"", ""should"", ""not"", ""happen"", ""your"", ""snprintf"", ""is"", ""broken""]]",[3989400890770091760],6408,"136 days, 6:00:00"
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_8314.cpp,,,data/crawl/git/old_hunk_8314.cpp,data/crawl/git/new_hunk_8314.cpp,-1,57,,"die(""Cannot come back to cwd"");","[""addLog""]","[[], [""die"", ""Cannot"", ""come"", ""back"", ""to"", ""cwd""]]",[2972916337112490771],6407,"132 days, 18:00:00"
https://github.com/git/git/commit/47d32af2338418275ab6b53a737952af22289d97,05 Dec 2008,"Make some of fwrite/fclose/write/close failures visible

So that full filesystem conditions or permissions problems won't go
unnoticed.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_6602.cpp,,,data/crawl/git/old_hunk_6602.cpp,data/crawl/git/new_hunk_6602.cpp,3,3,"fputs(buf, out);","ferr_puts(buf, out, &wrerror);","[""updateLog"", ""addVariable""]","[[""fputs""], [""ferr_puts"", ""&wrerror""]]",[2815787135398758277],6406,0:00:00
https://github.com/git/git/commit/7fcda9201e192413c2e63fe35ce6664dbc81705d,14 Feb 2009,"log: do not print ellipses with --abbrev-commit

'git log --abbrev-commit' added an ellipsis to all commit names that
were abbreviated.  This was particularly annoying if you wanted to
cut&paste the sha1 from the terminal, since selecting by word would
pick up '...'  too.

So use find_unique_abbrev() instead of diff_unique_abbrev() in all
log-related commit sha1 printing routines, and also change the
formatting of the 'Merge: parent1 parent2' line output via
pretty_print_commit().

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_6475.cpp,,,data/crawl/git/old_hunk_6475.cpp,data/crawl/git/new_hunk_6475.cpp,8,8,"printf("" (from %s)"",
			       diff_unique_abbrev(parent->object.sha1,
						  abbrev_commit));","printf("" (from %s)"",
			       find_unique_abbrev(parent->object.sha1,
						  abbrev_commit));","[""updateVariable""]","[[""diff_unique_abbrev""], [""find_unique_abbrev""]]",[-15327468049184241908],6405,0:00:00
https://github.com/git/git/commit/dc6ebd4cc5028d59146e02e30f7945ee91974e6e,14 Feb 2009,"Clean up use of ANSI color sequences

Remove the literal ANSI escape sequences and replace them by readable
constants.

Signed-off-by: Arjen Laarhoven <arjen@yaph.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_6472.cpp,,,data/crawl/git/old_hunk_6472.cpp,data/crawl/git/new_hunk_6472.cpp,3,3,"fputs(COLOR_RESET, fp);","fputs(GIT_COLOR_RESET, fp);","[""updateVariable""]","[[""COLOR_RESET""], [""GIT_COLOR_RESET""]]",[-1220738430315281631],6404,"29 days, 0:00:00"
https://github.com/git/git/commit/d64ec16c2af4ddcf3985d11d5dc28a15db181de5,22 Feb 2009,"git config: reorganize to use parseopt

This patch has benefited from comments by Johannes
Schindelin and Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",349,data/crawl/git/hunk_6452.cpp,,,data/crawl/git/old_hunk_6452.cpp,data/crawl/git/new_hunk_6452.cpp,-1,128,,"die(""No such section!"");","[""addLog""]","[[], [""die"", ""No"", ""such"", ""section""]]",[3894481257286126227],6403,"25 days, 0:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,18,-1,"printf(""boundary\n"");",,"[""removeLog""]","[[""printf"", ""boundary\\n""], []]",[-10842371902386641873],6402,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,16,-1,"printf(""summary %s\n"", ci.summary);",,"[""removeLog""]","[[""printf"", ""summary"", ""%s\\n"", ""ci"", ""summary""], []]",[1692078277376969815],6401,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,14,-1,"printf(""committer-tz %s\n"", ci.committer_tz);",,"[""removeLog""]","[[""printf"", ""committer"", ""tz"", ""%s\\n"", ""ci"", ""committer_tz""], []]",[-15557117962594673029],6400,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,13,-1,"printf(""committer-time %lu\n"", ci.committer_time);",,"[""removeLog""]","[[""printf"", ""committer"", ""time"", ""%lu\\n"", ""ci"", ""committer_time""], []]",[-9140932468087020566],6399,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,12,-1,"printf(""committer-mail %s\n"", ci.committer_mail);",,"[""removeLog""]","[[""printf"", ""committer"", ""mail"", ""%s\\n"", ""ci"", ""committer_mail""], []]",[-11469225420089458937],6398,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,11,-1,"printf(""committer %s\n"", ci.committer);",,"[""removeLog""]","[[""printf"", ""committer"", ""%s\\n"", ""ci"", ""committer""], []]",[-20736564298734649037],6397,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,10,-1,"printf(""author-tz %s\n"", ci.author_tz);",,"[""removeLog""]","[[""printf"", ""author"", ""tz"", ""%s\\n"", ""ci"", ""author_tz""], []]",[-11780382062627515401],6396,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,9,-1,"printf(""author-time %lu\n"", ci.author_time);",,"[""removeLog""]","[[""printf"", ""author"", ""time"", ""%lu\\n"", ""ci"", ""author_time""], []]",[-8071503845071645430],6395,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,8,-1,"printf(""author-mail %s\n"", ci.author_mail);",,"[""removeLog""]","[[""printf"", ""author"", ""mail"", ""%s\\n"", ""ci"", ""author_mail""], []]",[-12399810797356084557],6394,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6696.cpp,,,data/crawl/git/old_hunk_6696.cpp,data/crawl/git/new_hunk_6696.cpp,7,-1,"printf(""author %s\n"", ci.author);",,"[""removeLog""]","[[""printf"", ""author"", ""%s\\n"", ""ci"", ""author""], []]",[-21335696175581738521],6393,"91 days, 12:00:00"
https://github.com/git/git/commit/52e7787609d18af76a8c1befb0a06123fb7ce89e,08 Mar 2009,"archive: use parseopt for local-only options

Replace the hand-rolled parsers that find and remove --remote and --exec
by a parseopt parser that also handles --output.

All three options only have a meaning if no remote server is used or on
the local side.  They must be rejected by upload-archive and should not
be sent to the server by archive.

We can't use a single parser for both remote and local side because the
remote end possibly understands a different set of options than the
local side.  A local parser would then wrongly accuse options valid on
the other side as being incorrect.

This patch implements a very forgiving parser that understands only the
three options mentioned above.  All others are passed to the normal,
complete parser in archive.c (running either locally in archive, or
remotely in upload-archive).  This normal parser definition contains
dummy entries for the three options, in order for them to appear in the
help screen.

The parseopt parser allows multiple occurrences of --remote and --exec
unlike the previous one; the one specified last wins.  This looseness
is acceptable, I think.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_6401.cpp,,,data/crawl/git/old_hunk_6401.cpp,data/crawl/git/new_hunk_6401.cpp,21,-1,"die(""Multiple --remote specified"");",,"[""removeLog""]","[[""die"", ""Multiple"", ""remote"", ""specified""], []]",[2650849895126707544],6392,"18 days, 0:00:00"
https://github.com/git/git/commit/52e7787609d18af76a8c1befb0a06123fb7ce89e,08 Mar 2009,"archive: use parseopt for local-only options

Replace the hand-rolled parsers that find and remove --remote and --exec
by a parseopt parser that also handles --output.

All three options only have a meaning if no remote server is used or on
the local side.  They must be rejected by upload-archive and should not
be sent to the server by archive.

We can't use a single parser for both remote and local side because the
remote end possibly understands a different set of options than the
local side.  A local parser would then wrongly accuse options valid on
the other side as being incorrect.

This patch implements a very forgiving parser that understands only the
three options mentioned above.  All others are passed to the normal,
complete parser in archive.c (running either locally in archive, or
remotely in upload-archive).  This normal parser definition contains
dummy entries for the three options, in order for them to appear in the
help screen.

The parseopt parser allows multiple occurrences of --remote and --exec
unlike the previous one; the one specified last wins.  This looseness
is acceptable, I think.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_6400.cpp,,,data/crawl/git/old_hunk_6400.cpp,data/crawl/git/new_hunk_6400.cpp,24,-1,"die(""multiple --exec specified"");",,"[""removeLog""]","[[""die"", ""multiple"", ""exec"", ""specified""], []]",[208571014590695797],6391,"18 days, 0:00:00"
https://github.com/git/git/commit/38ef7507d1dce87d68f177a6209d716339fee854,10 May 2009,"rev-list: remove stringed output flag from ""show_bisect_vars""

Because it was used only by ""git bisect--helper --next-vars"" but
the ""--next-vars"" option has been removed.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_6047.cpp,,,data/crawl/git/old_hunk_6047.cpp,data/crawl/git/new_hunk_6047.cpp,12,10,"print_var_int(""bisect_all"", all, stringed);","print_var_int(""bisect_all"", all);","[""removeVariable""]","[[""stringed""], []]",[219731985431600472],6390,0:00:00
https://github.com/git/git/commit/f766b36783c7ceeb0427f5e1af862b9a67ae1c4c,10 Aug 2009,"Make git_status_config() file scope static to builtin-commit.c

Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_5727.cpp,,,data/crawl/git/old_hunk_5727.cpp,data/crawl/git/new_hunk_5727.cpp,18,-1,"die(""bad config variable '%s'"", var);",,"[""removeLog""]","[[""die"", ""bad"", ""config"", ""variable"", ""%s"", ""var""], []]",[9496819659983532027],6389,"96 days, 0:00:00"
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5367.cpp,,,data/crawl/git/old_hunk_5367.cpp,data/crawl/git/new_hunk_5367.cpp,3,3,"opt->output(opt, name, strlen(name));","output_color(opt, name, strlen(name), opt->color_filename);","[""addLog"", ""addVariable"", ""removeLog""]","[[""output""], [""output_color"", ""color_filename""]]",[16665995650376328503],6388,0:00:00
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7661.cpp,,,data/crawl/git/old_hunk_7661.cpp,data/crawl/git/new_hunk_7661.cpp,-1,98,,"fputs(ws, stream);","[""addLog""]","[[], [""fputs"", ""ws"", ""stream""]]",[-12653304646146055541],6387,"210 days, 18:00:00"
https://github.com/git/git/commit/980bde389491e65df3a6f26f755064013b65740c,06 May 2010,"wt-status: take advice.statusHints seriously

Currently, status gives a lot of hints even when advice.statusHints is
false. Change this so that all hints depend on the config variable.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_5248.cpp,,,data/crawl/git/old_hunk_5248.cpp,data/crawl/git/new_hunk_5248.cpp,11,17,"printf(""nothing to commit (working directory clean)\n"");","printf(""nothing to commit%s\n"", advice_status_hints
				? "" (working directory clean)"" : """");","[""moveContent"", ""addContent"", ""updateContent"", ""addVariable""]","[[""commit"", ""\\n""], [""commit%s\\n"", ""advice_status_hints""]]",[-5941178066197355441],6386,0:00:00
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5228.cpp,,,data/crawl/git/old_hunk_5228.cpp,data/crawl/git/new_hunk_5228.cpp,18,27,"fprintf(data->o->file, ""%s:%d: %s.\n"",
			data->filename, data->lineno, err);","fprintf(data->o->file, ""%s%s:%d: %s.\n"",
			line_prefix, data->filename, data->lineno, err);","[""updateContent"", ""addVariable""]","[[""%s""], [""%s%s"", ""line_prefix""]]",[6142700296909322384],6385,0:00:00
https://github.com/git/git/commit/4297c0aeb5cc6b9c1c87d770c91e09ac2a837320,01 Jun 2010,"Make --color-words work well with --graph

'--color-words' algorithm can be described as:

  1. collect a the minus/plus lines of a diff hunk, divided into
     minus-lines and plus-lines;

  2. break both minus-lines and plus-lines into words and
     place them into two mmfile_t with one word for each line;

  3. use xdiff to run diff on the two mmfile_t to get the words level diff;

And for the common parts of the both file, we output the plus side text.
diff_words->current_plus is used to trace the current position of the plus file
which printed. diff_words->last_minus is used to trace the last minus word
printed.

For '--graph' to work with '--color-words', we need to output the graph prefix
on each line of color words output. Generally, there are two conditions on
which we should output the prefix.

  1. diff_words->last_minus == 0 &&
     diff_words->current_plus == diff_words->plus.text.ptr

     that is: the plus text must start as a new line, and if there is no minus
     word printed, a graph prefix must be printed.

  2. diff_words->current_plus > diff_words->plus.text.ptr &&
     *(diff_words->current_plus - 1) == '\n'

     that is: a graph prefix must be printed following a '\n'

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_5218.cpp,,,data/crawl/git/old_hunk_5218.cpp,data/crawl/git/new_hunk_5218.cpp,-1,5,,"fputs(line_prefix, diff_words->opt->file);","[""addLog""]","[[], [""fputs"", ""line_prefix"", ""diff_words"", ""opt"", ""file""]]",[5714044452188591426],6384,0:00:00
https://github.com/git/git/commit/9db56f71b91153f4076a796c80c61f00edd8b700,11 Nov 2008,"Fix non-literal format in printf-style calls

These were found using gcc 4.3.2-1ubuntu11 with the warning:

    warning: format not a string literal and no format arguments

Incorporated suggestions from Brandon Casey <casey@nrlssc.navy.mil>.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_6632.cpp,,,data/crawl/git/old_hunk_6632.cpp,data/crawl/git/new_hunk_6632.cpp,3,3,printf(hunk_mark);,"fputs(hunk_mark, stdout);","[""updateLog"", ""addVariable""]","[[""printf""], [""fputs"", ""stdout""]]",[-19459554220258205535],6383,"146 days, 18:00:00"
https://github.com/git/git/commit/9951d3b37ec7298384640b11d07a990ef031fe83,22 Dec 2010,"setup: clean up setup_discovered_git_dir()

If core.bare is true, discard the discovered worktree, move back to
original cwd.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/hunk_4889.cpp,,,data/crawl/git/old_hunk_4889.cpp,data/crawl/git/new_hunk_4889.cpp,-1,14,,"die_errno(""Could not come back to cwd"");","[""addLog""]","[[], [""die_errno"", ""Could"", ""not"", ""come"", ""back"", ""to"", ""cwd""]]",[12630768870252841927],6382,"15 days, 0:00:00"
https://github.com/git/git/commit/e0335fcdad28da578904bb33fcf1dfbcdf172599,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4799.cpp,,,data/crawl/git/old_hunk_4799.cpp,data/crawl/git/new_hunk_4799.cpp,-1,42,,"fprintf(s->fp, ""%s"", trail);","[""addLog""]","[[], [""fprintf"", ""s"", ""fp"", ""%s"", ""trail""]]",[-2832314789479961611],6381,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4787.cpp,,,data/crawl/git/old_hunk_4787.cpp,data/crawl/git/new_hunk_4787.cpp,-1,28,,"status_printf_ln(s, c, ""  (use \""git rm --cached <file>...\"" to unstage)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""rm"", ""cached"", ""file"", ""\\"", ""to"", ""unstage""]]",[-15201283050760329550],6380,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4787.cpp,,,data/crawl/git/old_hunk_4787.cpp,data/crawl/git/new_hunk_4787.cpp,-1,26,,"status_printf_ln(s, c, ""  (use \""git reset %s <file>...\"" to unstage)"", s->reference);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""reset"", ""%s"", ""file"", ""\\"", ""to"", ""unstage"", ""s"", ""reference""]]",[-20323559769709462841],6379,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4786.cpp,,,data/crawl/git/old_hunk_4786.cpp,data/crawl/git/new_hunk_4786.cpp,46,47,"fprintf(s->fp, ""#\n"");","status_printf_ln(s, GIT_COLOR_NORMAL, """");","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL""]]",[9735849379987926759],6378,0:00:00
https://github.com/git/git/commit/b449f4cfc972929b638b90d375b8960c37790618,07 Sep 2007,"Rework strbuf API and semantics.

  The gory details are explained in strbuf.h. The change of semantics this
patch enforces is that the embeded buffer has always a '\0' character after
its last byte, to always make it a C-string. The offs-by-one changes are all
related to that very change.

  A strbuf can be used to store byte arrays, or as an extended string
library. The `buf' member can be passed to any C legacy string function,
because strbuf operations always ensure there is a terminating \0 at the end
of the buffer, not accounted in the `len' field of the structure.

  A strbuf can be used to generate a string/buffer whose final size is not
really known, and then ""strbuf_detach"" can be used to get the built buffer,
and keep the wrapping ""strbuf"" structure usable for further work again.

  Other interesting feature: strbuf_grow(sb, size) ensure that there is
enough allocated space in `sb' to put `size' new octets of data in the
buffer. It helps avoiding reallocating data for nothing when the problem the
strbuf helps to solve has a known typical size.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",208,data/crawl/git/hunk_8109.cpp,,,data/crawl/git/old_hunk_8109.cpp,data/crawl/git/new_hunk_8109.cpp,3,3,"fprintf(stderr, ""%.*s\n"", path->len, path->buf);","fprintf(stderr, ""%.*s\n"", (int)path->len, path->buf);","[""addVariable""]","[[], [""int""]]",[-7555364370854764664],6377,"669 days, 18:00:00"
https://github.com/git/git/commit/04a74b6cfa5ef4870263f84ac94a488d9f2ef14a,12 Apr 2013,"fast-export: fix argument name in error messages

The --signed-tags argument is plural, while error messages referred
to --signed-tag (singular).  Tweak error messages to correspond to the
argument.

Signed-off-by: Paul Price <price@astro.princeton.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_3723.cpp,,,data/crawl/git/old_hunk_3723.cpp,data/crawl/git/new_hunk_3723.cpp,2,2,"die (""Encountered signed tag %s; use ""
				     ""--signed-tag=<mode> to handle it."",
				     sha1_to_hex(tag->object.sha1));","die (""Encountered signed tag %s; use ""
				     ""--signed-tags=<mode> to handle it."",
				     sha1_to_hex(tag->object.sha1));","[""updateContent""]","[[""tag""], [""tags""]]",[3809293156734039860],6376,0:00:00
https://github.com/git/git/commit/bc554df8c90e3592e8cd70460032b524fb6f03bc,16 Apr 2013,"i18n: branch: mark strings for translation

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_3703.cpp,,,data/crawl/git/old_hunk_3703.cpp,data/crawl/git/new_hunk_3703.cpp,18,18,"printf(rebasing ?
			       ""Branch %s set up to track local ref %s by rebasing.\n"" :
			       ""Branch %s set up to track local ref %s.\n"",
			       local, remote);","printf_ln(rebasing ?
				  _(""Branch %s set up to track local ref %s by rebasing."") :
				  _(""Branch %s set up to track local ref %s.""),
				  local, remote);","[""moveContent"", ""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""\\n"", ""\\n""], [""printf_ln"", ""_"", ""_""]]",[-381491535906003308],6375,0:00:00
https://github.com/git/git/commit/72b103fec7af967d295410c2fd3899bc6e8386e2,20 Oct 2009,"reflog-walk: refactor the branch@{num} formatting

We'll use the same output in an upcoming commit, so refactor its
formatting (which was duplicated anyway) into a separate function.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_5639.cpp,,,data/crawl/git/old_hunk_5639.cpp,data/crawl/git/new_hunk_5639.cpp,14,16,"printf(""%s"", show_date(info->timestamp,
						       info->tz,
						       dmode));","strbuf_addstr(sb, show_date(info->timestamp, info->tz, dmode));","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""%s""], [""strbuf_addstr"", ""sb""]]",[-8926540095244690536],6374,"640 days, 18:00:00"
https://github.com/git/git/commit/ab292bc4f30dd29d3d111b040b9e982f20b9ceb7,01 May 2013,"repack_without_ref(): silence errors for dangling packed refs

Stop emitting an error message when deleting a packed reference if we
find another dangling packed reference that is overridden by a loose
reference.  See the previous commit for a longer explanation of the
issue.

We have to be careful to make sure that the invalid packed reference
really *is* overridden by a loose reference; otherwise what we have
found is repository corruption, which we *should* report.

Please note that this approach is vulnerable to a race condition
similar to the race conditions already known to affect packed
references [1]:

* Process 1 tries to peel packed reference X as part of deleting
  another packed reference.  It discovers that X does not refer to a
  valid object (because the object that it referred to has been
  garbage collected).

* Process 2 tries to delete reference X.  It starts by deleting the
  loose reference X.

* Process 1 checks whether there is a loose reference X.  There is not
  (it has just been deleted by process 2), so process 1 reports a
  spurious error ""X does not point to a valid object!""

The worst case seems relatively harmless, and the fix is identical to
the fix that will be needed for the other race conditions (namely
holding a lock on the packed-refs file during *all* reference
deletions), so we leave the cleaning up of all of them as a future
project.

[1] http://thread.gmane.org/gmane.comp.version-control.git/211956

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3678.cpp,,,data/crawl/git/old_hunk_3678.cpp,data/crawl/git/new_hunk_3678.cpp,-1,14,,"die(""Internal error"");","[""addLog""]","[[], [""die"", ""Internal"", ""error""]]",[-136877529961074285],6373,"12 days, 12:00:00"
https://github.com/git/git/commit/43f9d9f3a6c6004853fcc7b283dafc3590478498,29 Jun 2015,"bisect: replace hardcoded ""bad|good"" by variables

To add new tags like old/new and have keywords less confusing, the
first step is to avoid hardcoding the keywords.

The default mode is still bad/good.

Signed-off-by: Antoine Delaite <antoine.delaite@ensimag.grenoble-inp.fr>
Signed-off-by: Louis Stuber <stuberl@ensimag.grenoble-inp.fr>
Signed-off-by: Valentin Duperray <Valentin.Duperray@ensimag.imag.fr>
Signed-off-by: Franck Jonas <Franck.Jonas@ensimag.imag.fr>
Signed-off-by: Lucien Kong <Lucien.Kong@ensimag.imag.fr>
Signed-off-by: Thomas Nguy <Thomas.Nguy@ensimag.imag.fr>
Signed-off-by: Huynh Khoi Nguyen Nguyen <Huynh-Khoi-Nguyen.Nguyen@ensimag.imag.fr>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/hunk_3080.cpp,,,data/crawl/git/old_hunk_3080.cpp,data/crawl/git/new_hunk_3080.cpp,3,3,"printf(""%s is the first bad commit\n"", bisect_rev_hex);","printf(""%s is the first %s commit\n"", bisect_rev_hex,
			term_bad);","[""updateContent"", ""addVariable""]","[[""bad""], [""%s"", ""term_bad""]]",[-3723910629214378574],6372,0:00:00
https://github.com/git/git/commit/88b291fe9db645366853fc759d497342c130fd35,05 Aug 2015,"builtin-am: support automatic notes copying

Since eb2151b (rebase: support automatic notes copying, 2010-03-12),
git-am.sh supported automatic notes copying in --rebasing mode by
invoking ""git notes copy"" once it has finished applying all the patches.

Re-implement this feature in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_2945.cpp,,,data/crawl/git/old_hunk_2945.cpp,data/crawl/git/new_hunk_2945.cpp,-1,45,,"error(invalid_line, sb.buf);","[""addLog""]","[[], [""error"", ""invalid_line"", ""sb"", ""buf""]]",[464052160062312994],6371,0:00:00
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2746.cpp,,,data/crawl/git/old_hunk_2746.cpp,data/crawl/git/new_hunk_2746.cpp,-1,4,,"die(""unable to generate diff for %s"", name);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""for"", ""%s"", ""name""]]",[-20763690208373284692],6370,6:00:00
https://github.com/git/git/commit/f4e54d02b894064d370e461385b48701485672bd,20 Nov 2015,"Convert struct ref to use object_id.

Use struct object_id in three fields in struct ref and convert all the
necessary places that use it.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",302,data/crawl/git/hunk_2613.cpp,,,data/crawl/git/old_hunk_2613.cpp,data/crawl/git/new_hunk_2613.cpp,2,2,"packet_buf_write(&preamble, ""%s %s\n"",
				 sha1_to_hex(ref->old_sha1), ref->name);","packet_buf_write(&preamble, ""%s %s\n"",
				 oid_to_hex(&ref->old_oid), ref->name);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""old_sha1"", ""ref""], [""oid_to_hex"", ""&ref"", ""old_oid""]]",[-2301430063212631767],6369,0:00:00
https://github.com/git/git/commit/d0d2344ad84cde7fddedc1e141296607af673454,14 Jan 2016,"trailer: allow to write to files other than stdout

Use fprintf instead of printf in trailer.c in order to allow printing
to a file other than stdout. This will be needed to support in-place
editing in git interpret-trailers.

Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_2330.cpp,,,data/crawl/git/old_hunk_2330.cpp,data/crawl/git/new_hunk_2330.cpp,6,6,"printf(""\n"");","fprintf(outfile, ""\n"");","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""outfile""]]",[-16291426489666163378],6368,0:00:00
https://github.com/git/git/commit/2dac9b5637abe580e8b8ea36e00dbbf28ec99af6,01 Mar 2016,"run_processes_parallel: treat output of children as byte array

We do not want the output to be interrupted by a NUL byte, so we
cannot use raw fputs. Introduce strbuf_write to avoid having long
arguments in run-command.c.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_2215.cpp,,,data/crawl/git/old_hunk_2215.cpp,data/crawl/git/new_hunk_2215.cpp,7,7,"fputs(pp->buffered_output.buf, stderr);","strbuf_write(&pp->buffered_output, stderr);","[""updateLog"", ""removeVariable"", ""addVariable""]","[[""fputs"", ""pp"", ""buf""], [""strbuf_write"", ""&pp""]]",[-4080672003692102410],6367,0:00:00
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,40,,"die(""corrupt MERGE_RR"");","[""addLog""]","[[], [""die"", ""corrupt"", ""MERGE_RR""]]",[-3834673031445325428],6366,"963 days, 18:00:00"
https://github.com/git/git/commit/9990080c9db0e4cb1dc0f981d85983edbf2a6f68,05 Aug 2015,"builtin-am: implement --skip

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07), git-am
supported resuming from a failed patch application by skipping the
current patch. Re-implement this feature by introducing am_skip().

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",123,data/crawl/git/hunk_2972.cpp,,,data/crawl/git/old_hunk_2972.cpp,data/crawl/git/new_hunk_2972.cpp,-1,89,,"die(_(""unable to write new index file""));","[""addLog""]","[[], [""die"", ""_"", ""unable"", ""to"", ""write"", ""new"", ""index"", ""file""]]",[9643391230087642827],6365,"78 days, 18:00:00"
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7044.cpp,,,data/crawl/git/old_hunk_7044.cpp,data/crawl/git/new_hunk_7044.cpp,15,-1,"die (""Too long path: %.*s"", 60, path);",,"[""removeLog""]","[[""die"", ""Too"", ""long"", ""path"", ""%"", ""*s"", ""60"", ""path""], []]",[-10848113208999003329],6364,"757 days, 12:00:00"
https://github.com/git/git/commit/b6aec868afb17acdbd486c09602a658e14c98602,25 Apr 2016,"match-trees: convert several leaf functions to use struct object_id

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_2117.cpp,,,data/crawl/git/old_hunk_2117.cpp,data/crawl/git/new_hunk_2117.cpp,13,13,"die(""%s is not a tree"", sha1_to_hex(hash));","die(""%s is not a tree"", oid_to_hex(hash));","[""updateVariable""]","[[""sha1_to_hex""], [""oid_to_hex""]]",[5722772095999725640],6363,"67 days, 12:00:00"
https://github.com/git/git/commit/19247e5510279f018f8358a72b38cc5aa62fac8a,21 Sep 2007,"nfv?asprintf are broken without va_copy, workaround them.

* drop nfasprintf.
* move nfvasprintf into imap-send.c back, and let it work on a 8k buffer,
  and die() in case of overflow. It should be enough for imap commands, if
  someone cares about imap-send, he's welcomed to fix it properly.
* replace nfvasprintf use in merge-recursive with a copy of the strbuf_addf
  logic, it's one place, we'll live with it.
  To ease the change, output_buffer string list is replaced with a strbuf ;)
* rework trace.c to call vsnprintf itself.  It's used to format strerror()s
  and git command names, it should never be more than a few octets long, let
  it work on a 8k static buffer with vsnprintf or die loudly.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",180,data/crawl/git/hunk_7997.cpp,,,data/crawl/git/old_hunk_7997.cpp,data/crawl/git/new_hunk_7997.cpp,38,-1,"fputs(""  "", stdout);",,"[""removeLog""]","[[""fputs"", ""stdout""], []]",[12222144665393643080],6362,"1714 days, 12:00:00"
https://github.com/git/git/commit/0d2b664efd815a3f6432723adb41732d90cc9be1,18 Jun 2016,"verify_signed_buffer: use pipe_command

This is shorter and should make the function easier to
follow. But more importantly, it removes the possibility of
any deadlocks based on reading or writing to gpg.

It's not clear if such a deadlock is possible in practice.

We do write the whole payload before reading anything, so we
could deadlock there. However, in practice gpg will need to
read our whole input to verify the signature, so it will
drain our payload first. It could write an error to stderr
before reading, but it's unlikely that such an error
wouldn't be followed by it immediately exiting, or that the
error would actually be larger than a pipe buffer.

On the writing side, we drain stderr (with the
human-readable output) in its entirety before reading stdout
(with the status-fd data). Running strace on ""gpg --verify""
does show interleaved output on the two descriptors:

  write(2, ""gpg: "", 5)                    = 5
  write(2, ""Signature made Thu 16 Jun 2016 0""..., 73) = 73
  write(1, ""[GNUPG:] SIG_ID tQw8KGcs9rBfLvAj""..., 66) = 66
  write(1, ""[GNUPG:] GOODSIG 69808639F9430ED""..., 60) = 60
  write(2, ""gpg: "", 5)                    = 5
  write(2, ""Good signature from \""Jeff King <""..., 47) = 47
  write(2, ""\n"", 1)                       = 1
  write(2, ""gpg: "", 5)                    = 5
  write(2, ""                aka \""Jeff King <""..., 49) = 49
  write(2, ""\n"", 1)                       = 1
  write(1, ""[GNUPG:] VALIDSIG C49CE24156AF08""..., 135) = 135
  write(1, ""[GNUPG:] TRUST_ULTIMATE\n"", 24) = 24

The second line written to stdout there contains the
signer's UID, which can be arbitrarily long. If it fills the
pipe buffer, then gpg would block writing to its stdout,
while we are blocked trying to read its stderr.

In practice, GPG seems to limit UIDs to 2048 bytes, so
unless your pipe buffer size is quite small, or unless gpg
does not enforce the limit under some conditions, this seems
unlikely in practice.

Still, it is not hard for us to be cautious and just use
pipe_command.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_1816.cpp,,,data/crawl/git/old_hunk_1816.cpp,data/crawl/git/new_hunk_1816.cpp,9,-1,"error(_(""could not run gpg.""));",,"[""removeLog""]","[[""error"", ""_"", ""could"", ""not"", ""run"", ""gpg""], []]",[-16943766940633133958],6361,"41 days, 12:00:00"
https://github.com/git/git/commit/90cf590f53f2939a47ca7b397e270e8228699829,18 Jul 2016,"fsck: optionally show more helpful info for broken links

When reporting broken links between commits/trees/blobs, it would be
quite helpful at times if the user would be told how the object is
supposed to be reachable.

With the new --name-objects option, git-fsck will try to do exactly
that: name the objects in a way that shows how they are reachable.

For example, when some reflog got corrupted and a blob is missing that
should not be, the user might want to remove the corresponding reflog
entry. This option helps them find that entry: `git fsck` will now
report something like this:

	broken link from    tree b5eb6ff...  (refs/stash@{<date>}~37:)
	              to    blob ec5cf80...

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/hunk_1686.cpp,,,data/crawl/git/old_hunk_1686.cpp,data/crawl/git/new_hunk_1686.cpp,6,6,"error(""object %s: %s"", oid_to_hex(&obj->oid), message);","error(""object %s: %s"", describe_object(o, obj), message);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&obj"", ""oid""], [""describe_object"", ""o"", ""obj""]]",[9186781902253899402],6360,"26 days, 12:00:00"
https://github.com/git/git/commit/0fe5043dad74352c08447eb1913df0b6c3f2731c,20 Jun 2016,"dir_iterator: new API for iterating over a directory tree

The iterator interface is modeled on that for references, though no
vtable is necessary because there is (so far?) only one type of
dir_iterator.

There are obviously a lot of features that could easily be added to this
class:

* Skip/include directory paths in the iteration
* Shallow/deep iteration
* Letting the caller decide which subdirectories to recurse into (e.g.,
  via a dir_iterator_advance_into() function)
* Option to iterate in sorted order
* Option to iterate over directory paths before vs. after their contents

But these are not needed for the current patch series, so I refrain.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/hunk_1807.cpp,,,data/crawl/git/old_hunk_1807.cpp,data/crawl/git/new_hunk_1807.cpp,-1,173,,"warning(""error closing directory %s: %s"",
				iter->base.path.buf, strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""closing"", ""directory"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[17142171633324015428],6359,"40 days, 12:00:00"
https://github.com/git/git/commit/a0d12c4433e25e87b67df78b45635df8a098fb23,28 Jun 2016,"diff: convert struct diff_filespec to struct object_id

Convert struct diff_filespec's sha1 member to use a struct object_id
called ""oid"" instead.  The following Coccinelle semantic patch was used
to implement this, followed by the transformations in object_id.cocci:

@@
struct diff_filespec o;
@@
- o.sha1
+ o.oid.hash

@@
struct diff_filespec *p;
@@
- p->sha1
+ p->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",275,data/crawl/git/hunk_1753.cpp,,,data/crawl/git/old_hunk_1753.cpp,data/crawl/git/new_hunk_1753.cpp,15,16,"die(""unable to read %s"", sha1_to_hex(s->sha1));","die(""unable to read %s"", oid_to_hex(&s->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""s"", ""sha1""], [""oid_to_hex"", ""&s"", ""oid""]]",[11703065646005246913],6358,"36 days, 12:00:00"
https://github.com/git/git/commit/58142c09a4fe825912e5a2ebfa1ba5f7f6d8beb5,08 Jul 2016,"worktree: add ""lock"" command

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/hunk_1712.cpp,,,data/crawl/git/old_hunk_1712.cpp,data/crawl/git/new_hunk_1712.cpp,-1,22,,"die(_(""The main working tree cannot be locked or unlocked""));","[""addLog""]","[[], [""die"", ""_"", ""The"", ""main"", ""working"", ""tree"", ""cannot"", ""be"", ""locked"", ""or"", ""unlocked""]]",[-14693829877517019606],6357,"31 days, 12:00:00"
https://github.com/git/git/commit/58142c09a4fe825912e5a2ebfa1ba5f7f6d8beb5,08 Jul 2016,"worktree: add ""lock"" command

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/hunk_1712.cpp,,,data/crawl/git/old_hunk_1712.cpp,data/crawl/git/new_hunk_1712.cpp,-1,20,,"die(_(""'%s' is not a working tree""), av[0]);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""not"", ""a"", ""working"", ""tree"", ""av[0]""]]",[5613726092763663557],6356,"31 days, 12:00:00"
https://github.com/git/git/commit/993a21b0a05bf2e2063c58e5722c29f5747e39d4,18 Jul 2016,"fsck: refactor how to describe objects

In many places, we refer to objects via their SHA-1s. Let's abstract
that into a function.

For the moment, it does nothing else than what we did previously: print
out the 40-digit hex string. But that will change over the course of the
next patches.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_1697.cpp,,,data/crawl/git/old_hunk_1697.cpp,data/crawl/git/new_hunk_1697.cpp,11,12,"printf("" (%s) in %s\n"", tag->tag, oid_to_hex(&tag->object.oid));","printf("" (%s) in %s\n"", tag->tag,
				describe_object(&tag->object));","[""updateVariable"", ""removeVariable""]","[[""oid_to_hex"", ""oid""], [""describe_object""]]",[-3095609444505353559],6355,"26 days, 12:00:00"
https://github.com/git/git/commit/993a21b0a05bf2e2063c58e5722c29f5747e39d4,18 Jul 2016,"fsck: refactor how to describe objects

In many places, we refer to objects via their SHA-1s. Let's abstract
that into a function.

For the moment, it does nothing else than what we did previously: print
out the 40-digit hex string. But that will change over the course of the
next patches.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_1690.cpp,,,data/crawl/git/old_hunk_1690.cpp,data/crawl/git/new_hunk_1690.cpp,2,2,"printf(""broken link from %7s %s\n"",
				 typename(parent->type), oid_to_hex(&parent->oid));","printf(""broken link from %7s %s\n"",
				 typename(parent->type), describe_object(parent));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&parent"", ""oid""], [""describe_object"", ""parent""]]",[-13705413589991975322],6354,"26 days, 12:00:00"
https://github.com/git/git/commit/a2f05c94545a5409d4a90fcad5d495d3d758b218,21 Sep 2016,"i18n: i18n: diff: mark die messages for translation

While marking individual messages for translation, consolidate some
messages ""option 'foo' requires a value"" that is used for many
options into one by introducing a helper function to die with the
message with the option name embedded in it, and ask the translators
to localize that single message instead.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_1109.cpp,,,data/crawl/git/old_hunk_1109.cpp,data/crawl/git/new_hunk_1109.cpp,3,3,"die(""Option '--stat-count' requires a value"");","die_want_option(""--stat-count"");","[""updateLog"", ""updateContent""]","[[""die"", ""Option"", ""requires"", ""a"", ""value""], [""die_want_option""]]",[14351150598384128366],6353,0:00:00
https://github.com/git/git/commit/d5e3b01e5bd6b06c06dbd5d1e2257d57e6b1deb7,26 Oct 2016,"diff_unique_abbrev: rename to diff_aligned_abbrev

The word ""align"" describes how the function actually differs
from find_unique_abbrev, and will make it less confusing
when we add more diff-specific abbrevation functions that do
not do this alignment.

Since this is a globally available function, let's also move
its descriptive comment to the header file, where we
typically document function interfaces.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_957.cpp,,,data/crawl/git/old_hunk_957.cpp,data/crawl/git/new_hunk_957.cpp,4,4,"fprintf(opt->file, ""%s "",
			diff_unique_abbrev(p->two->oid.hash, opt->abbrev));","fprintf(opt->file, ""%s "",
			diff_aligned_abbrev(p->two->oid.hash, opt->abbrev));","[""updateVariable""]","[[""diff_unique_abbrev""], [""diff_aligned_abbrev""]]",[-460560245539399350],6352,0:00:00
https://github.com/git/git/commit/d6cece51b83db5d8a523c4ba857013c4242e310e,26 Oct 2016,"diff_aligned_abbrev: use ""struct oid""

Since we're modifying this function anyway, it's a good time
to update it to the more modern ""struct oid"". We can also
drop some of the magic numbers in favor of GIT_SHA1_HEXSZ,
along with some descriptive comments.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_955.cpp,,,data/crawl/git/old_hunk_955.cpp,data/crawl/git/new_hunk_955.cpp,4,4,"fprintf(opt->file, ""%s "",
			diff_aligned_abbrev(p->two->oid.hash, opt->abbrev));","fprintf(opt->file, ""%s "",
			diff_aligned_abbrev(&p->two->oid, opt->abbrev));","[""removeVariable"", ""addVariable""]","[[""p"", ""hash""], [""&p""]]",[-7794724862729762997],6351,0:00:00
https://github.com/git/git/commit/2ace9727be2b04ce9fbc5939466da38be7fd8496,10 May 2009,"bisect: move common bisect functionality to ""bisect_common""

So we can easily reuse the code in a later patch.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_6050.cpp,,,data/crawl/git/old_hunk_6050.cpp,data/crawl/git/new_hunk_6050.cpp,6,-1,"die(""revision walk setup failed"");",,"[""removeLog""]","[[""die"", ""revision"", ""walk"", ""setup"", ""failed""], []]",[17150171470043991342],6350,"1849 days, 18:00:00"
https://github.com/git/git/commit/cd4f77beb7c7dcb996e08f1eae566802d4056a6c,07 Sep 2016,"builtin/cat-file: convert struct expand_data to use struct object_id

Convert struct cache_entry to use struct object_id by applying the
following semantic patch and the object_id transforms from contrib,
plus the actual change to the struct:

@@
struct expand_data E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct expand_data *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct expand_data E1;
@@
- E1.delta_base_sha1
+ E1.delta_base_oid.hash

@@
struct expand_data *E1;
@@
- E1->delta_base_sha1
+ E1->delta_base_oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_1472.cpp,,,data/crawl/git/old_hunk_1472.cpp,data/crawl/git/new_hunk_1472.cpp,4,4,"printf(""%s missing\n"", obj_name ? obj_name : sha1_to_hex(data->sha1));","printf(""%s missing\n"",
		       obj_name ? obj_name : oid_to_hex(&data->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""data"", ""sha1""], [""oid_to_hex"", ""&data"", ""oid""]]",[17825156889419106439],6349,"182 days, 6:00:00"
https://github.com/git/git/commit/04aea8d4df199836da3802f08cb5738eae66fa6c,23 May 2017,"files-backend: use `die(""BUG: ..."")`, not `die(""internal error: ..."")`

The former is by far more common in our codebase.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_456.cpp,,,data/crawl/git/old_hunk_456.cpp,data/crawl/git/new_hunk_456.cpp,3,3,"die(""internal error: packed-refs not locked"");","die(""BUG: packed-refs not locked"");","[""updateContent""]","[[""internal"", ""error""], [""BUG""]]",[-1461185061416159693],6348,0:00:00
https://github.com/git/git/commit/8d4240d3c8a2d31b7bedda8408c0b3c217c76998,23 May 2017,"ref_transaction_commit(): check for valid `transaction->state`

Move the check that `transaction->state` is valid from
`files_transaction_commit()` to `ref_transaction_commit()`, where
other future reference backends can benefit from it as well.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_450.cpp,,,data/crawl/git/old_hunk_450.cpp,data/crawl/git/new_hunk_450.cpp,-1,11,,"die(""BUG: unexpected reference transaction state"");","[""addLog""]","[[], [""die"", ""BUG"", ""unexpected"", ""reference"", ""transaction"", ""state""]]",[-8330239050724135068],6347,0:00:00
https://github.com/git/git/commit/586801650824f0f7b62c34a206b6a60ffbcd8be0,27 Sep 2007,"Introduce entry point add_interactive and add_files_to_cache

This refactors builtin-add.c a little to provide a unique entry point
for launching git add --interactive, which will be used by
builtin-commit too.  If we later want to make add --interactive a
builtin or change how it is launched, we just start from this function.

It also exports the private function update() which is used to
add all modified paths to the index as add_files_to_cache().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_7956.cpp,,,data/crawl/git/old_hunk_7956.cpp,data/crawl/git/new_hunk_7956.cpp,4,-1,"die(""index file corrupt"");",,"[""removeLog""]","[[""die"", ""index"", ""file"", ""corrupt""], []]",[18800083462689974984],6346,"1690 days, 18:00:00"
https://github.com/git/git/commit/d566209e7fecffb61a3209766cc937bf027e2c6c,14 Mar 2007,"Auto-detect the current git branch before submitting back to perforce.

Signed-off-by: Simon Hausmann <simon@lst.de>",15,data/crawl/git/hunk_8422.cpp,,,data/crawl/git/old_hunk_8422.cpp,data/crawl/git/new_hunk_8422.cpp,3,-1,die(msg);,,"[""removeLog""]","[[""die"", ""msg""], []]",[-4462070844842881441],6345,"28 days, 0:00:00"
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/hunk_8181.cpp,,,data/crawl/git/old_hunk_8181.cpp,data/crawl/git/new_hunk_8181.cpp,59,-1,"die(""Cannot come back to cwd"");",,"[""removeLog""]","[[""die"", ""Cannot"", ""come"", ""back"", ""to"", ""cwd""], []]",[-2972916337112490771],6344,0:00:00
https://github.com/git/git/commit/b888d61c8308027433df9c243fa551f42db1c76a,19 Sep 2007,"Make fetch a builtin

Thanks to Johannes Schindelin for review and fixes, and Julian
Phillips for the original C translation.

This changes a few small bits of behavior:

branch.<name>.merge is parsed as if it were the lhs of a fetch
refspec, and does not have to exactly match the actual lhs of a
refspec, so long as it is a valid abbreviation for the same ref.

branch.<name>.merge is no longer ignored if the remote is configured
with a branches/* file. Neither behavior is useful, because there can
only be one ref that gets fetched, but this is more consistant.

Also, fetch prints different information to standard out.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",586,data/crawl/git/hunk_8028.cpp,,,data/crawl/git/old_hunk_8028.cpp,data/crawl/git/new_hunk_8028.cpp,-1,197,,"fprintf(stderr, ""  old...new: %s...%s\n"", oldh, newh);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""old"", ""new"", ""%s"", ""%s\\n"", ""oldh"", ""newh""]]",[-2558279091299684270],6343,0:00:00
https://github.com/git/git/commit/f26a0012262106e0c7e92d8d07f00611112d3a8d,19 Sep 2007,"Enable wt-status output to a given FILE pointer.

Still defaults to stdout, but you can now override wt_status.fp after
calling wt_status_prepare().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_8000.cpp,,,data/crawl/git/old_hunk_8000.cpp,data/crawl/git/new_hunk_8000.cpp,14,14,"printf(""%s"", trail);","fprintf(fp, ""%s"", trail);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""fp""]]",[-12428491950736315843],6342,0:00:00
https://github.com/git/git/commit/387e7e19d7eb5444be8da8e99ed7491989dc1cbb,30 Sep 2007,"strbuf_read_file enhancement, and use it.

* make strbuf_read_file take a size hint (works like strbuf_read)
* use it in a couple of places.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_7953.cpp,,,data/crawl/git/old_hunk_7953.cpp,data/crawl/git/new_hunk_7953.cpp,17,15,"die(""could not open '%s': %s"",
						argv[i], strerror(errno));","die(""could not open or read '%s': %s"",
						argv[i], strerror(errno));","[""updateContent""]","[[], [""or"", ""read""]]",[-5980861953503027899],6341,0:00:00
https://github.com/git/git/commit/cc41fa8da9b9e9d23221d3be47a80409a89732d4,21 Oct 2007,"upload-pack: Use start_command() to run pack-objects in create_pack_file().

This gets rid of an explicit fork/exec.

Since upload-pack has to coordinate two processes (rev-list and
pack-objects), we cannot use the normal finish_command(), but have to
monitor the processes explicitly. Hence, the waitpid() call remains.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",105,data/crawl/git/hunk_7911.cpp,,,data/crawl/git/old_hunk_7911.cpp,data/crawl/git/new_hunk_7911.cpp,6,-1,"die(""git-upload-pack: unable to create pipe"");",,"[""removeLog""]","[[""die"", ""git"", ""upload"", ""pack"", ""unable"", ""to"", ""create"", ""pipe""], []]",[-4496245101335907190],6340,0:00:00
https://github.com/git/git/commit/546bb5823249678bc6ad11e65661d896ed83448a,21 Oct 2007,"Use the asyncronous function infrastructure to run the content filter.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/hunk_7900.cpp,,,data/crawl/git/old_hunk_7900.cpp,data/crawl/git/new_hunk_7900.cpp,29,35,"error(""external filter %s failed %d"", cmd, -status);","error(""external filter %s failed %d"", params->cmd, -status);","[""removeVariable"", ""addVariable""]","[[], [""params""]]",[-3959264395539707084],6339,0:00:00
https://github.com/git/git/commit/0ba956d331e4c14fb1600a62044492c6c27af71a,22 May 2007,"git-status: respect core.excludesFile

git-add reads this variable, and honours the contents of that file if that
exists. Match this behaviour in git-status, too.

Noticed by Evan Carroll on IRC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <junkio@cox.net>",39,data/crawl/git/hunk_8392.cpp,,,data/crawl/git/old_hunk_8392.cpp,data/crawl/git/new_hunk_8392.cpp,-1,5,,"die(""core.excludesfile without value"");","[""addLog""]","[[], [""die"", ""core"", ""excludesfile"", ""without"", ""value""]]",[-16385074991810110218],6338,"118 days, 8:00:00"
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,113,,"die(""unable to write new_index file"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""write"", ""new_index"", ""file""]]",[8173742603575151997],6337,0:00:00
https://github.com/git/git/commit/84ef033832af9e0be886214c70b2006b08630072,26 Nov 2007,"Print the real filename that we failed to open.

When we fail to open a temporary file to be renamed to something else,
we reported the final filename, not the temporary file we failed to
open.

Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_7734.cpp,,,data/crawl/git/old_hunk_7734.cpp,data/crawl/git/new_hunk_7734.cpp,2,2,"error(""Unable to open local file %s for pack"",
			     filename);","error(""Unable to open local file %s for pack"",
			     tmpfile);","[""updateVariable""]","[[""filename""], [""tmpfile""]]",[2937615253489856979],6336,0:00:00
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,531,,"die(""could not parse HEAD commit"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""parse"", ""HEAD"", ""commit""]]",[18740313307260266870],6335,"28 days, 8:00:00"
https://github.com/git/git/commit/525ab63950e324823dd45423104cdcf5e46e2610,18 Feb 2008,"merge-recursive: split low-level merge functions out.

This moves low-level merge functions out of merge-recursive.c and
places them in a new separate file, ll-merge.c

Signed-off-by: Junio C Hamano <gitster@pobox.com>",777,data/crawl/git/hunk_7454.cpp,,,data/crawl/git/old_hunk_7454.cpp,data/crawl/git/new_hunk_7454.cpp,-1,298,,"error(""%s: lacks value"", var);","[""addLog""]","[[], [""error"", ""%s"", ""lacks"", ""value"", ""var""]]",[-11666679747693175274],6334,0:00:00
https://github.com/git/git/commit/a2cf9f445e9074df1a45f5179cef0d4bb8647dd8,26 Dec 2007,"git-name-rev: add a --(no-)undefined option.

Rework get_rev_name to return NULL rather than ""undefined"" when a
reference is undefined. If --undefined is passed (default), git-name-rev
prints ""undefined"" for the name, else it die()s.

Make git-describe use --no-undefined when calling git-name-rev so
that --contains behavior matches the standard git-describe one.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_7616.cpp,,,data/crawl/git/old_hunk_7616.cpp,data/crawl/git/new_hunk_7616.cpp,-1,26,,"printf(""undefined\n"");","[""addLog""]","[[], [""printf"", ""undefined\\n""]]",[13857179632628051140],6333,"22 days, 16:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,86,,"die(""invalid %s"", typename(type));","[""addLog""]","[[], [""die"", ""invalid"", ""%s"", ""typename"", ""type""]]",[-6158566318841511646],6332,"1 day, 16:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,42,,"die(""Error in object"");","[""addLog""]","[[], [""die"", ""Error"", ""in"", ""object""]]",[1289218037553243970],6331,"1 day, 16:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,36,,"die(""object of unexpected type"");","[""addLog""]","[[], [""die"", ""object"", ""of"", ""unexpected"", ""type""]]",[-12377671224712674084],6330,"1 day, 16:00:00"
https://github.com/git/git/commit/30415d50cccef0ec22bb4a6d58138760b142758d,19 Sep 2007,"Move bundle specific stuff into bundle.[ch]

The transport specific stuff was moved into libgit.a, and the
bundle specific stuff will not be left behind.

This is a big code move, with one exception: the function
unbundle() no longer outputs the list of refs.  You have to call
list_bundle_refs() yourself for that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",735,data/crawl/git/hunk_8032.cpp,,,data/crawl/git/old_hunk_8032.cpp,data/crawl/git/new_hunk_8032.cpp,-1,138,,error(message);,"[""addLog""]","[[], [""error"", ""message""]]",[1438504816784457873],6329,"57 days, 8:00:00"
https://github.com/git/git/commit/ef00d150e4f9959bf083adf92419b5053ba11584,19 Mar 2008,"Tighten refspec processing

This changes the pattern matching code to not store the required final
/ before the *, and then to require each side to be a valid ref (or
empty). In particular, any refspec that looks like it should be a
pattern but doesn't quite meet the requirements will be found to be
invalid as a fallback non-pattern.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_7287.cpp,,,data/crawl/git/old_hunk_7287.cpp,data/crawl/git/new_hunk_7287.cpp,-1,19,,"die(""Invalid refspec '%s'"", refspec[i]);","[""addLog""]","[[], [""die"", ""Invalid"", ""refspec"", ""%s"", ""refspec[i]""]]",[-12201031270585522521],6328,"2 days, 8:00:00"
https://github.com/git/git/commit/7b15f872f23855de59bd06b0ebdbbc47b27b781b,26 Apr 2008,"help: use man viewer path from ""man.<tool>.path"" config var

This patch implements reading values from ""man.<tool>.path""
configuration variables, and using these values as pathes to
the man viewer <tool>s when lauching them.

This makes it possible to use different version of the tools
than the one on the current PATH, or maybe a custom script.

In this patch we also try to launch ""konqueror"" using
""kfmclient"" even if a path to a konqueror binary is given
in ""man.konqueror.path"".

The ""man_viewer_list"" becomes a simple string list to simplify
things for the following patches.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/hunk_7243.cpp,,,data/crawl/git/old_hunk_7243.cpp,data/crawl/git/new_hunk_7243.cpp,-1,50,,"warning(""failed to exec '%s': %s"", path, strerror(errno));","[""addLog""]","[[], [""warning"", ""failed"", ""to"", ""exec"", ""%s"", ""%s"", ""path"", ""strerror"", ""errno""]]",[-961838208399860249],6327,0:00:00
https://github.com/git/git/commit/b1b359699a24a89f773cccdf35801bc6fc15ade8,27 Apr 2008,"rev-parse: teach ""--verify"" to be quiet when using ""-q"" or ""--quiet""

Currently ""git rev-parse --verify <something>"" is often used with
its error output redirected to /dev/null. This patch makes it
easier to do that.

The -q|--quiet option is designed to work the same way as it does
for ""git symbolic-ref"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_7235.cpp,,,data/crawl/git/old_hunk_7235.cpp,data/crawl/git/new_hunk_7235.cpp,8,8,"die(""Needed a single revision"");",die_no_single_rev(quiet);,"[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""Needed"", ""a"", ""single"", ""revision""], [""die_no_single_rev"", ""quiet""]]",[-4681614280892900198],6326,0:00:00
https://github.com/git/git/commit/a8128ed62858063e29edc066b14b8b0fa6257cc2,06 May 2008,"git-cat-file: Add --batch option

--batch is similar to --batch-check, except that the contents of each object is
also printed. The output's form is:

<sha1> SP <type> SP <size> LF
<contents> LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/hunk_7199.cpp,,,data/crawl/git/old_hunk_7199.cpp,data/crawl/git/new_hunk_7199.cpp,46,62,"error(""git-cat-file: Can't use --batch-check when an object (\""%s\"") is specified"", obj_name);","error(""git-cat-file: Can't use %s when an object (\""%s\"") is specified"", arg, obj_name);","[""updateContent"", ""addVariable""]","[[""batch"", ""check""], [""%s"", ""arg""]]",[7036868627382014443],6325,0:00:00
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_8313.cpp,,,data/crawl/git/old_hunk_8313.cpp,data/crawl/git/new_hunk_8313.cpp,-1,77,,"die(""Not a git repository"");","[""addLog""]","[[], [""die"", ""Not"", ""a"", ""git"", ""repository""]]",[563808574802145930],6324,"136 days, 8:00:00"
https://github.com/git/git/commit/e9039dd35194b7c1cf4ecd479928638166b8458f,11 Jun 2008,"Consolidate SHA1 object file close

This consolidates the common operations for closing the new temporary file
that we have written, before we move it into place with the final name.

There's some common code there (make it read-only and check for errors on
close), but more importantly, this also gives a single place to add an
fsync_or_die() call if we want to add a safe mode.

This was triggered due to Denis Bueno apparently twice being able to
corrupt his git repository on OS X due to an unlucky combination of kernel
crashes and a not-very-robust filesystem.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_7098.cpp,,,data/crawl/git/old_hunk_7098.cpp,data/crawl/git/new_hunk_7098.cpp,5,-1,"die(""unable to write sha1 file"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""write"", ""sha1"", ""file""], []]",[-10681450186952387702],6323,"1 day, 0:00:00"
https://github.com/git/git/commit/f2dc849e9c5fe363ad089f6c3f2b7b3d79fd6a6f,03 Dec 2007,"Add 'git fast-export', the sister of 'git fast-import'

This program dumps (parts of) a git repository in the format that
fast-import understands.

For clarity's sake, it does not use the 'inline' method of specifying
blobs in the commits, but builds the blobs before building the commits.

Since signed tags' signatures will not necessarily be valid (think
transformations after the export, or excluding revisions, changing
the history), there are 4 modes to handle them: abort (default),
ignore, warn and strip.  The latter just turns the tags into
unsigned ones.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",616,data/crawl/git/hunk_7711.cpp,,,data/crawl/git/old_hunk_7711.cpp,data/crawl/git/new_hunk_7711.cpp,-1,100,,"die (""Could not read blob %s"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""read"", ""blob"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[2582327435247193049],6322,"66 days, 8:00:00"
https://github.com/git/git/commit/5817da01434a24e693ea4d5ba6680d488f5f543f,08 Jul 2008,"git-blame: migrate to incremental parse-option [1/2]

This step merely moves the parser to an incremental version, still using
parse_revisions.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_7023.cpp,,,data/crawl/git/old_hunk_7023.cpp,data/crawl/git/new_hunk_7023.cpp,-1,113,,"error(""unknown option `%s'"", ctx.argv[0]);","[""addLog""]","[[], [""error"", ""unknown"", ""option"", ""%s"", ""ctx"", ""argv[0]""]]",[5936802647489237526],6321,16:00:00
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,119,,"fputs("">>>>>>>\n"", out);","[""addLog""]","[[], [""fputs"", ""\\n"", ""out""]]",[646200843525684552],6320,0:00:00
https://github.com/git/git/commit/91c8d5905c33e9d7c9014a1c6c7cec8eb86584df,27 Jun 2007,"detect close failure on just-written file handles

I audited git for potential undetected write failures.
In the cases fixed below, the diagnostics I add mimic the diagnostics
used in surrounding code, even when that means not reporting
the precise strerror(errno) cause of the error.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_8262.cpp,,,data/crawl/git/old_hunk_8262.cpp,data/crawl/git/new_hunk_8262.cpp,-1,4,,"die(""unable to write rerere record"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""write"", ""rerere"", ""record""]]",[14264890760065462695],6319,"252 days, 16:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7006.cpp,,,data/crawl/git/old_hunk_7006.cpp,data/crawl/git/new_hunk_7006.cpp,97,-1,"fputs("">>>>>>>\n"", out);",,"[""removeLog""]","[[""fputs"", ""\\n"", ""out""], []]",[-646200843525684552],6318,0:00:00
https://github.com/git/git/commit/30415d50cccef0ec22bb4a6d58138760b142758d,19 Sep 2007,"Move bundle specific stuff into bundle.[ch]

The transport specific stuff was moved into libgit.a, and the
bundle specific stuff will not be left behind.

This is a big code move, with one exception: the function
unbundle() no longer outputs the list of refs.  You have to call
list_bundle_refs() yourself for that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",735,data/crawl/git/hunk_8030.cpp,,,data/crawl/git/old_hunk_8030.cpp,data/crawl/git/new_hunk_8030.cpp,71,-1,"error(""could not open '%s'"", path);",,"[""removeLog""]","[[""error"", ""could"", ""not"", ""open"", ""%s"", ""path""], []]",[-25625554630532546828],6317,"98 days, 8:00:00"
https://github.com/git/git/commit/c09df8a74e8b5e106ad853cbb1e52f36b3663386,19 Jul 2008,"Add ANSI control code emulation for the Windows console

This adds only the minimum necessary to keep git pull/merge's diffstat from
wrapping. Notably absent is support for the K (erase) operation, and support
for POSIX write.

Signed-off-by: Peter Harris <git@peter.is-a-geek.org>
Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",358,data/crawl/git/hunk_6982.cpp,,,data/crawl/git/old_hunk_6982.cpp,data/crawl/git/new_hunk_6982.cpp,-1,274,,"fputs(str, stream);","[""addLog""]","[[], [""fputs"", ""str"", ""stream""]]",[-13037712159664983763],6316,0:00:00
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6875.cpp,,,data/crawl/git/old_hunk_6875.cpp,data/crawl/git/new_hunk_6875.cpp,3,3,"output(1, ""CONFLICT (rename/add): Renamed %s->%s in %s. ""
				       ""%s added in %s"",
				       ren1_src, ren1_dst, branch1,
				       ren1_dst, branch2);","output(1, ""CONFLICT (rename/add): Rename %s->%s in %s. ""
				       ""%s added in %s"",
				       ren1_src, ren1_dst, branch1,
				       ren1_dst, branch2);","[""updateContent""]","[[""Renamed""], [""Rename""]]",[-896520578059266289],6315,0:00:00
https://github.com/git/git/commit/85e72830697a23dd6b1af8b6bfb3c1a7be60dfae,31 Aug 2008,"cast pid_t's to uintmax_t to improve portability

Some systems (like e.g. OpenSolaris) define pid_t as long,
therefore all our sprintf that use %i/%d cause a compiler warning
beacuse of the implicit long->int cast. To make sure that
we fit the limits, we display pids as PRIuMAX and cast them explicitly
to uintmax_t.

Signed-off-by: David Soria Parra <dsp@php.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_6759.cpp,,,data/crawl/git/old_hunk_6759.cpp,data/crawl/git/new_hunk_6759.cpp,4,4,"fprintf(rpt, ""    parent process     : %d\n"", getppid());","fprintf(rpt, ""    parent process     : %""PRIuMAX""\n"", (uintmax_t) getppid());","[""updateContent"", ""addContent"", ""addVariable""]","[[""%d\\n""], [""%"", ""PRIuMAX"", ""\\n"", ""uintmax_t""]]",[-5387691416187429150],6314,0:00:00
https://github.com/git/git/commit/34292bddb861f3cb52a524fdce67234430a744fe,07 Jan 2009,"Introduce the diff option '--patience'

This commit teaches Git to produce diff output using the patience diff
algorithm with the diff option '--patience'.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",175,data/crawl/git/hunk_6539.cpp,,,data/crawl/git/old_hunk_6539.cpp,data/crawl/git/new_hunk_6539.cpp,-1,77,,"printf(""%d\n"", foo);","[""addLog""]","[[], [""printf"", ""%d\\n"", ""foo""]]",[9205159961022081327],6313,0:00:00
https://github.com/git/git/commit/8415d5c7ef63237f6efab0c9aef0b0fdbcbfda25,14 Feb 2009,"Teach the ""@{-1} syntax to ""git branch""

This teaches the new ""@{-1} syntax to refer to the previous branch to ""git
branch"".  After looking at somebody's faulty patch series on a topic
branch too long, if you decide it is not worth merging, you can just say:

    $ git checkout master
    $ git branch -D @{-1}

to get rid of it without having to type the name of the topic you now hate
so much for wasting a lot of your time.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_6469.cpp,,,data/crawl/git/old_hunk_6469.cpp,data/crawl/git/new_hunk_6469.cpp,16,16,"printf(""Deleted %sbranch %s (%s).\n"", remote, argv[i],
				find_unique_abbrev(sha1, DEFAULT_ABBREV));","printf(""Deleted %sbranch %s (%s).\n"", remote,
			       bname.buf,
			       find_unique_abbrev(sha1, DEFAULT_ABBREV));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""argv[i]""], [""bname"", ""buf""]]",[-7934297328373509210],6312,0:00:00
https://github.com/git/git/commit/f76734902bba47afff622068524a0c38f642d769,05 Nov 2007,"more terse push output

This changes the output of send-pack to match the new,
more terse fetch output. It looks like this:

To git://host.tld/path/to/repo
 + f3325dc...3b91d1c hasforce -> mirror/hasforce (forced update)
   f3325dc..bb022dc  master -> mirror/master
 ! [rejected]        needsforce -> mirror/needsforce (non-fast forward)
 * [new branch]      newbranch -> mirror/newbranch
 * [new tag]         v1.0 -> v1.0

instead of:

updating 'refs/heads/mirror/hasforce' using 'refs/heads/hasforce'
  from f3325dca9c4a34d74012c0e159254f454930cec7
  to   3b91d1c310ca9d7b547b85466dd876e143498304
updating 'refs/heads/mirror/master' using 'refs/heads/master'
  from f3325dca9c4a34d74012c0e159254f454930cec7
  to   bb022dc363d5c2aa9aa3026beb9706d44fbe1328
error: remote 'refs/heads/mirror/needsforce' is not an ancestor of
 local  'refs/heads/needsforce'.
 Maybe you are not up-to-date and need to pull first?
updating 'refs/heads/mirror/newbranch' using 'refs/heads/newbranch'
  from 0000000000000000000000000000000000000000
  to   3b91d1c310ca9d7b547b85466dd876e143498304
updating 'refs/tags/v1.0'
  from 0000000000000000000000000000000000000000
  to   bb022dc363d5c2aa9aa3026beb9706d44fbe1328

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_7834.cpp,,,data/crawl/git/old_hunk_7834.cpp,data/crawl/git/new_hunk_7834.cpp,-1,10,,"fprintf(stderr, ""To %s\n"", dest);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""To"", ""%s\\n"", ""dest""]]",[-16584513600167938763],6311,"167 days, 8:00:00"
https://github.com/git/git/commit/c1beba5b479a39143ebef96ba10103bbd9a70089,05 Feb 2008,"git-apply --whitespace=fix: fix whitespace fuzz introduced by previous run

When you have more than one patch series, an earlier one of which
tries to introduce whitespace breakages and a later one of which
has such a new line in its context, ""git-apply --whitespace=fix""
will apply and fix the whitespace breakages in the earlier one,
making the resulting file not to match the context of the later
patch.

A short demonstration is in the new test, t4125.

For example, suppose the first patch is:

    diff a/hello.txt b/hello.txt
    --- a/hello.txt
    +++ b/hello.txt
    @@ -20,3 +20,3 @@
     Hello world.$
    -How Are you$
    -Today?$
    +How are you $
    +today? $

to fix broken case in the string, but it introduces unwanted
trailing whitespaces to the result (pretend you are looking at
""cat -e"" output of the patch --- '$' signs are not in the patch
but are shown to make the EOL stand out).  And the second patch
is to change the wording of the greeting further:

    diff a/hello.txt b/hello.txt
    --- a/hello.txt
    +++ b/hello.txt
    @@ -18,5 +18,5 @@
     Greetings $

    -Hello world.$
    +Hello, everybody. $
     How are you $
    -today? $
    +these days? $

If you apply the first one with --whitespace=fix, you will get
this as the result:

    Hello world.$
    How are you$
    today?$

and this does not match the preimage of the second patch, which
demands extra whitespace after ""How are you"" and ""today?"".

This series is about teaching ""git apply --whitespace=fix"" to
cope with this situation better.  If the patch does not apply,
it rewrites the second patch like this and retries:

    diff a/hello.txt b/hello.txt
    --- a/hello.txt
    +++ b/hello.txt
    @@ -18,5 +18,5 @@
     Greetings$

    -Hello world.$
    +Hello, everybody.$
     How are you$
    -today?$
    +these days?$

This is done by rewriting the preimage lines in the hunk
(i.e. the lines that begin with ' ' or '-'), using the same
whitespace fixing rules as it is using to apply the patches, so
that it can notice what it did to the previous ones in the
series.

A careful reader may notice that the first patch in the example
did not touch the ""Greetings"" line, so the trailing whitespace
that is in the original preimage of the second patch is not from
the series.  Is rewriting this context line a problem?

If you think about it, you will realize that the reason for the
difference is because the submitter's tree was based on an
earlier version of the file that had whitespaces wrong on that
""Greetings"" line, and the change that introduced the ""Greetings""
line was added independently of this two-patch series to our
tree already with an earlier ""git apply --whitespace=fix"".

So it may appear this logic is rewriting too much, it is not
so.  It is just rewriting what we would have rewritten in the
past.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",236,data/crawl/git/hunk_7534.cpp,,,data/crawl/git/old_hunk_7534.cpp,data/crawl/git/new_hunk_7534.cpp,-1,56,,"die(""oops"");","[""addLog""]","[[], [""die"", ""oops""]]",[-1936985164076898722],6310,"280 days, 16:00:00"
https://github.com/git/git/commit/7d66f21a1bfd2d6ea8b1e234befbcc187111cee6,06 Sep 2008,"for-each-ref: `:short` format for `refname`

Tries to shorten the refname to a non-ambiguous name.

Szeder Gábor noticed that the git bash completion takes a
tremendous amount of time to strip leading components from
heads and tags refs (i.e. refs/heads, refs/tags, ...). He
proposed a new atom called 'refbasename' which removes at
most two leading components from the ref name.

I myself, proposed a more dynamic solution, which strips off
common leading components with the matched pattern.

But the current bash solution and both proposals suffer from
one mayor problem: ambiguous refs.

A ref is ambiguous, if it resolves to more than one full refs.
I.e. given the refs refs/heads/xyzzy and refs/tags/xyzzy. The
(short) ref xyzzy can point to both refs.

( Note: Its irrelevant whether the referenced objects are the
  same or not. )

This proposal solves this by checking for ambiguity of the
shorten ref name.

The shortening is done with the same rules for resolving refs
but in the reverse order. The short name is checked if it
resolves to a different ref.

To continue the above example, the output would be like this:

heads/xyzzy
xyzzy

So, if you want just tags, xyzzy is not ambiguous, because it
will resolve to a tag. If you need the heads you get a also
a non-ambiguous short form of the ref.

To integrate this new format into the bash completion to get
only non-ambiguous refs is beyond the scope of this patch.

Signed-off-by: Bert Wesarg <bert.wesarg@googlemail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",180,data/crawl/git/hunk_6746.cpp,,,data/crawl/git/old_hunk_6746.cpp,data/crawl/git/new_hunk_6746.cpp,-1,13,,"die(""invalid rule in ref_rev_parse_rules: %s"", rule);","[""addLog""]","[[], [""die"", ""invalid"", ""rule"", ""in"", ""ref_rev_parse_rules"", ""%s"", ""rule""]]",[-20849995018331249634],6309,"144 days, 8:00:00"
https://github.com/git/git/commit/b02bd65f679024ce25afeddf7e96d6d7aea5fca6,19 Feb 2008,"Export some email and pretty-printing functions

These will be used for generating the cover letter in addition to the
patch emails.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/hunk_7443.cpp,,,data/crawl/git/old_hunk_7443.cpp,data/crawl/git/new_hunk_7443.cpp,26,-1,"printf(""In-Reply-To: <%s>\nReferences: <%s>\n"",
			       opt->ref_message_id, opt->ref_message_id);",,"[""removeLog""]","[[""printf"", ""In"", ""Reply"", ""To"", ""%s"", ""\\nReferences"", ""%s"", ""\\n"", ""opt"", ""ref_message_id"", ""opt"", ""ref_message_id""], []]",[4801155634190395202],6308,"262 days, 16:00:00"
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6396.cpp,,,data/crawl/git/old_hunk_6396.cpp,data/crawl/git/new_hunk_6396.cpp,-1,40,,"fprintf(stderr, ""Everything up-to-date\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Everything"", ""up"", ""to"", ""date\\n""]]",[1517109462172770441],6307,"11 days, 16:00:00"
https://github.com/git/git/commit/d797257eb280b67dd1f7153a66b03453c0fb927a,08 Apr 2009,"rev-list: remove last static vars used in ""show_commit""

This patch removes the last static variables that were used in
the ""show_commit"" function.

To do that, we create a new ""rev_list_info"" struct that we will pass
in the ""void *data"" argument to ""show_commit"".

This means that we have to change the first argument to
""show_bisect_vars"" too.

While at it, we also remove a ""struct commit_list *list"" variable
in ""cmd_rev_list"" that is not really needed.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_6282.cpp,,,data/crawl/git/old_hunk_6282.cpp,data/crawl/git/new_hunk_6282.cpp,3,3,"printf(""%s%c"", buf.buf, hdr_termination);","printf(""%s%c"", buf.buf, info->hdr_termination);","[""removeVariable"", ""addVariable""]","[[], [""info""]]",[-6492726066479515808],6306,"1 day, 16:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,53,,"printf(""%s/HEAD set to %s\n"", argv[0], head_name);","[""addLog""]","[[], [""printf"", ""%s/HEAD"", ""set"", ""to"", ""%s\\n"", ""argv[0]"", ""head_name""]]",[9483644788860981355],6305,"18 days, 0:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,51,,"error(""Could not setup %s"", buf.buf);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""setup"", ""%s"", ""buf"", ""buf""]]",[21036176822395032889],6304,"18 days, 0:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,49,,"error(""Not a valid ref: %s"", buf2.buf);","[""addLog""]","[[], [""error"", ""Not"", ""a"", ""valid"", ""ref"", ""%s"", ""buf2"", ""buf""]]",[7988624750055475651],6303,"18 days, 0:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,40,,"error(""Could not delete %s"", buf.buf);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""delete"", ""%s"", ""buf"", ""buf""]]",[23343098699209300814],6302,"18 days, 0:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,33,,"fprintf(stderr, ""  git remote set-head %s %s\n"",
					argv[0], states.heads.items[i].string);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""git"", ""remote"", ""set"", ""head"", ""%s"", ""%s\\n"", ""argv[0]"", ""states"", ""heads"", ""items[i]"", ""string""]]",[-25266797292225718961],6301,"18 days, 0:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,30,,"error(""Multiple remote HEAD branches. ""
					""Please choose one explicitly with:"");","[""addLog""]","[[], [""error"", ""Multiple"", ""remote"", ""HEAD"", ""branches"", ""Please"", ""choose"", ""one"", ""explicitly"", ""with""]]",[28156887796994635716],6300,"18 days, 0:00:00"
https://github.com/git/git/commit/bc14fac825d9728c311aaa9d0aecf4960d4a3103,27 Feb 2009,"builtin-remote: add set-head subcommand

Provide a porcelain command for setting and deleting
$GIT_DIR/remotes/<remote>/HEAD.

While we're at it, document what $GIT_DIR/remotes/<remote>/HEAD is all
about.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6439.cpp,,,data/crawl/git/old_hunk_6439.cpp,data/crawl/git/new_hunk_6439.cpp,-1,28,,"error(""Cannot determine remote HEAD"");","[""addLog""]","[[], [""error"", ""Cannot"", ""determine"", ""remote"", ""HEAD""]]",[5712853761021175814],6299,"18 days, 0:00:00"
https://github.com/git/git/commit/e5dcbfd9ab7028c464909f26f523b85c1de912a2,27 Feb 2009,"builtin-remote: new show output style for push refspecs

The existing output of ""git remote show <remote>"" with respect to push
ref specs is basically just to show the raw refspec. This patch teaches
the command to interpret the refspecs and show how each branch will be
pushed to the destination. The output gives the user an idea of what
""git push"" should do if it is run w/o any arguments.

Example new output:

1a. Typical output with no push refspec (i.e. matching branches only)

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master pushes to master (up to date)
    next   pushes to next   (local out of date)

1b. Same as above, w/o querying the remote:

$ git remote show origin -n
* remote origin
  [...]
  Local ref configured for 'git push' (status not queried):
    (matching) pushes to (matching)

2a. With a forcing refspec (+), and a new topic
    (something like push = refs/heads/*:refs/heads/*):

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master     pushes to master    (fast forwardable)
    new-topic  pushes to new-topic (create)
    next       pushes to next      (local out of date)
    pu         forces to pu        (up to date)

2b. Same as above, w/o querying the remote

$ git remote show origin -n
* remote origin
  [...]
  Local refs configured for 'git push' (status not queried):
    master     pushes to master
    new-topic  pushes to new-topic
    next       pushes to next
    pu         forces to pu

3. With a remote configured as a mirror:

* remote backup
  [...]
  Local refs will be mirrored by 'git push'

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_6433.cpp,,,data/crawl/git/old_hunk_6433.cpp,data/crawl/git/new_hunk_6433.cpp,-1,10,,"printf(""  Local ref%s configured for 'git push'%s:\n"",
				info.list->nr > 1 ? ""s"" : """",
				no_query ? "" (status not queried)"" : """");","[""addLog""]","[[], [""printf"", ""Local"", ""ref%s"", ""configured"", ""for"", ""git"", ""push"", ""%s"", ""\\n"", ""info"", ""list"", ""nr"", ""1"", ""s"", ""no_query"", ""status"", ""not"", ""queried""]]",[-9818775689412511434],6298,"18 days, 0:00:00"
https://github.com/git/git/commit/e5dcbfd9ab7028c464909f26f523b85c1de912a2,27 Feb 2009,"builtin-remote: new show output style for push refspecs

The existing output of ""git remote show <remote>"" with respect to push
ref specs is basically just to show the raw refspec. This patch teaches
the command to interpret the refspecs and show how each branch will be
pushed to the destination. The output gives the user an idea of what
""git push"" should do if it is run w/o any arguments.

Example new output:

1a. Typical output with no push refspec (i.e. matching branches only)

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master pushes to master (up to date)
    next   pushes to next   (local out of date)

1b. Same as above, w/o querying the remote:

$ git remote show origin -n
* remote origin
  [...]
  Local ref configured for 'git push' (status not queried):
    (matching) pushes to (matching)

2a. With a forcing refspec (+), and a new topic
    (something like push = refs/heads/*:refs/heads/*):

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master     pushes to master    (fast forwardable)
    new-topic  pushes to new-topic (create)
    next       pushes to next      (local out of date)
    pu         forces to pu        (up to date)

2b. Same as above, w/o querying the remote

$ git remote show origin -n
* remote origin
  [...]
  Local refs configured for 'git push' (status not queried):
    master     pushes to master
    new-topic  pushes to new-topic
    next       pushes to next
    pu         forces to pu

3. With a remote configured as a mirror:

* remote backup
  [...]
  Local refs will be mirrored by 'git push'

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_6433.cpp,,,data/crawl/git/old_hunk_6433.cpp,data/crawl/git/new_hunk_6433.cpp,-1,4,,"printf(""  Local refs will be mirrored by 'git push'\n"");","[""addLog""]","[[], [""printf"", ""Local"", ""refs"", ""will"", ""be"", ""mirrored"", ""by"", ""git"", ""push"", ""\\n""]]",[-5219004361333927508],6297,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6437.cpp,,,data/crawl/git/old_hunk_6437.cpp,data/crawl/git/new_hunk_6437.cpp,-1,9,,"printf(""  Remote branch%s:%s\n"",
			       info.list->nr > 1 ? ""es"" : """",
				no_query ? "" (status not queried)"" : """");","[""addLog""]","[[], [""printf"", ""Remote"", ""branch%s"", ""%s\\n"", ""info"", ""list"", ""nr"", ""1"", ""es"", ""no_query"", ""status"", ""not"", ""queried""]]",[11433880693998978241],6296,"18 days, 0:00:00"
https://github.com/git/git/commit/e61e0cc6b7061d7e791e1c9722b9c4a6d85d629c,27 Feb 2009,"builtin-remote: teach show to display remote HEAD

This is in preparation for teaching remote how to set
refs/remotes/<remote>/HEAD to match what HEAD is set to at <remote>, but
is useful in its own right.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_6441.cpp,,,data/crawl/git/old_hunk_6441.cpp,data/crawl/git/new_hunk_6441.cpp,-1,22,,"printf(""  HEAD branch (remote HEAD is ambiguous,""
			       "" may be one of the following):\n"");","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""remote"", ""HEAD"", ""is"", ""ambiguous"", ""may"", ""be"", ""one"", ""of"", ""the"", ""following"", ""\\n""]]",[14755362550905509643],6295,"18 days, 0:00:00"
https://github.com/git/git/commit/e61e0cc6b7061d7e791e1c9722b9c4a6d85d629c,27 Feb 2009,"builtin-remote: teach show to display remote HEAD

This is in preparation for teaching remote how to set
refs/remotes/<remote>/HEAD to match what HEAD is set to at <remote>, but
is useful in its own right.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_6441.cpp,,,data/crawl/git/old_hunk_6441.cpp,data/crawl/git/new_hunk_6441.cpp,-1,20,,"printf(""  HEAD branch: %s\n"", states.heads.items[0].string);","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""%s\\n"", ""states"", ""heads"", ""items[0]"", ""string""]]",[1874899908499647180],6294,"18 days, 0:00:00"
https://github.com/git/git/commit/e61e0cc6b7061d7e791e1c9722b9c4a6d85d629c,27 Feb 2009,"builtin-remote: teach show to display remote HEAD

This is in preparation for teaching remote how to set
refs/remotes/<remote>/HEAD to match what HEAD is set to at <remote>, but
is useful in its own right.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_6441.cpp,,,data/crawl/git/old_hunk_6441.cpp,data/crawl/git/new_hunk_6441.cpp,-1,18,,"printf(""  HEAD branch: (unknown)\n"");","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""unknown"", ""\\n""]]",[4410971448933888432],6293,"18 days, 0:00:00"
https://github.com/git/git/commit/e61e0cc6b7061d7e791e1c9722b9c4a6d85d629c,27 Feb 2009,"builtin-remote: teach show to display remote HEAD

This is in preparation for teaching remote how to set
refs/remotes/<remote>/HEAD to match what HEAD is set to at <remote>, but
is useful in its own right.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_6441.cpp,,,data/crawl/git/old_hunk_6441.cpp,data/crawl/git/new_hunk_6441.cpp,-1,16,,"printf(""  HEAD branch: (not queried)\n"");","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""not"", ""queried"", ""\\n""]]",[21714058396433734975],6292,"18 days, 0:00:00"
https://github.com/git/git/commit/e5dcbfd9ab7028c464909f26f523b85c1de912a2,27 Feb 2009,"builtin-remote: new show output style for push refspecs

The existing output of ""git remote show <remote>"" with respect to push
ref specs is basically just to show the raw refspec. This patch teaches
the command to interpret the refspecs and show how each branch will be
pushed to the destination. The output gives the user an idea of what
""git push"" should do if it is run w/o any arguments.

Example new output:

1a. Typical output with no push refspec (i.e. matching branches only)

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master pushes to master (up to date)
    next   pushes to next   (local out of date)

1b. Same as above, w/o querying the remote:

$ git remote show origin -n
* remote origin
  [...]
  Local ref configured for 'git push' (status not queried):
    (matching) pushes to (matching)

2a. With a forcing refspec (+), and a new topic
    (something like push = refs/heads/*:refs/heads/*):

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master     pushes to master    (fast forwardable)
    new-topic  pushes to new-topic (create)
    next       pushes to next      (local out of date)
    pu         forces to pu        (up to date)

2b. Same as above, w/o querying the remote

$ git remote show origin -n
* remote origin
  [...]
  Local refs configured for 'git push' (status not queried):
    master     pushes to master
    new-topic  pushes to new-topic
    next       pushes to next
    pu         forces to pu

3. With a remote configured as a mirror:

* remote backup
  [...]
  Local refs will be mirrored by 'git push'

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_6432.cpp,,,data/crawl/git/old_hunk_6432.cpp,data/crawl/git/new_hunk_6432.cpp,-1,45,,"printf(""    %-*s %s to %-*s (%s)\n"", show_info->width, src,
			push_info->forced ? ""forces"" : ""pushes"",
			show_info->width2, push_info->dest, status);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""%s"", ""to"", ""%"", ""*s"", ""%s"", ""\\n"", ""show_info"", ""width"", ""src"", ""push_info"", ""forced"", ""forces"", ""pushes"", ""show_info"", ""width2"", ""push_info"", ""dest"", ""status""]]",[1418436381094439139],6291,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,95,,"printf(""    %-*s %s %s\n"", show_info->width, """", also,
		       merge->items[i].string);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""%s"", ""%s\\n"", ""show_info"", ""width"", ""also"", ""merge"", ""items[i]"", ""string""]]",[4919852120229295522],6290,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,85,,"printf(""rebases onto remote %s\n"", merge->items[0].string);","[""addLog""]","[[], [""printf"", ""rebases"", ""onto"", ""remote"", ""%s\\n"", ""merge"", ""items[0]"", ""string""]]",[-669821993052392287],6289,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,83,,"printf(""    %-*s "", show_info->width, item->string);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""show_info"", ""width"", ""item"", ""string""]]",[-9656136315463205032],6288,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,78,,"error(""invalid branch.%s.merge; cannot rebase onto > 1 branch"",
			item->string);","[""addLog""]","[[], [""error"", ""invalid"", ""branch"", ""%s"", ""merge"", ""cannot"", ""rebase"", ""onto"", ""1"", ""branch"", ""item"", ""string""]]",[-24872726705739602049],6287,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,39,,"printf(fmt, arg);","[""addLog""]","[[], [""printf"", ""fmt"", ""arg""]]",[4513291450875470040],6286,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6436.cpp,,,data/crawl/git/old_hunk_6436.cpp,data/crawl/git/new_hunk_6436.cpp,-1,38,,"printf(""    %-*s"", info->width, name);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""info"", ""width"", ""name""]]",[-5613883366320046784],6285,"18 days, 0:00:00"
https://github.com/git/git/commit/e5dcbfd9ab7028c464909f26f523b85c1de912a2,27 Feb 2009,"builtin-remote: new show output style for push refspecs

The existing output of ""git remote show <remote>"" with respect to push
ref specs is basically just to show the raw refspec. This patch teaches
the command to interpret the refspecs and show how each branch will be
pushed to the destination. The output gives the user an idea of what
""git push"" should do if it is run w/o any arguments.

Example new output:

1a. Typical output with no push refspec (i.e. matching branches only)

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master pushes to master (up to date)
    next   pushes to next   (local out of date)

1b. Same as above, w/o querying the remote:

$ git remote show origin -n
* remote origin
  [...]
  Local ref configured for 'git push' (status not queried):
    (matching) pushes to (matching)

2a. With a forcing refspec (+), and a new topic
    (something like push = refs/heads/*:refs/heads/*):

$ git remote show origin
* remote origin
  [...]
  Local refs configured for 'git push':
    master     pushes to master    (fast forwardable)
    new-topic  pushes to new-topic (create)
    next       pushes to next      (local out of date)
    pu         forces to pu        (up to date)

2b. Same as above, w/o querying the remote

$ git remote show origin -n
* remote origin
  [...]
  Local refs configured for 'git push' (status not queried):
    master     pushes to master
    new-topic  pushes to new-topic
    next       pushes to next
    pu         forces to pu

3. With a remote configured as a mirror:

* remote backup
  [...]
  Local refs will be mirrored by 'git push'

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_6433.cpp,,,data/crawl/git/old_hunk_6433.cpp,data/crawl/git/new_hunk_6433.cpp,9,-1,"printf(""    %s%s%s%s\n"",
				       spec->force ? ""+"" : """",
				       abbrev_branch(spec->src),
				       spec->dst ? "":"" : """",
				       spec->dst ? abbrev_branch(spec->dst) : """");",,"[""removeLog""]","[[""printf"", ""%s%s%s%s\\n"", ""spec"", ""force"", ""abbrev_branch"", ""spec"", ""src"", ""spec"", ""dst"", ""spec"", ""dst"", ""abbrev_branch"", ""spec"", ""dst""], []]",[7830419231332256697],6284,"18 days, 0:00:00"
https://github.com/git/git/commit/7ecbbf877c9a0716ccccd25609b01023eecd27c0,27 Feb 2009,"builtin-remote: new show output style

The existing output of ""git remote show <remote>"" is too verbose for the
information it provides. This patch teaches it to provide more
information in less space.

The output for push refspecs is addressed in the next patch.

Before the patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branch merged with 'git pull' while on branch master
    master
  Remote branch merged with 'git pull' while on branch next
    next
  Remote branches merged with 'git pull' while on branch octopus
    foo bar baz frotz
  New remote branch (next fetch will store in remotes/origin)
    html
  Stale tracking branch (use 'git remote prune')
    bogus
  Tracked remote branches
    maint
    man
    master
    next
    pu
    todo

After this patch:

$ git remote show origin
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: master
  Remote branches:
    bogus  stale (use 'git remote prune' to remove)
    html   new (next fetch will store in remotes/origin)
    maint  tracked
    man    tracked
    master tracked
    next   tracked
    pu     tracked
    todo   tracked
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

$ git remote show origin -n
* remote origin
  URL: git://git.kernel.org/pub/scm/git/git.git
  HEAD branch: (not queried)
  Remote branches: (status not queried)
    bogus
    maint
    man
    master
    next
    pu
    todo
  Local branches configured for 'git pull':
    master  rebases onto remote master
    next    rebases onto remote next
    octopus  merges with remote foo
                and with remote bar
                and with remote baz
                and with remote frotz

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_6434.cpp,,,data/crawl/git/old_hunk_6434.cpp,data/crawl/git/new_hunk_6434.cpp,3,3,"warning(""more than one branch.%s"", key);","warning(""more than one %s"", orig_key);","[""updateVariable"", ""updateContent""]","[[""branch"", ""key""], [""orig_key""]]",[-10968043938809492745],6283,"18 days, 0:00:00"
https://github.com/git/git/commit/d64ec16c2af4ddcf3985d11d5dc28a15db181de5,22 Feb 2009,"git config: reorganize to use parseopt

This patch has benefited from comments by Johannes
Schindelin and Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",349,data/crawl/git/hunk_6452.cpp,,,data/crawl/git/old_hunk_6452.cpp,data/crawl/git/new_hunk_6452.cpp,71,-1,"fprintf(stderr, ""No such section!\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""No"", ""such"", ""section"", ""\\n""], []]",[8094311148207744340],6282,"16 days, 16:00:00"
https://github.com/git/git/commit/aec0c1bbfb2d42659bb710bd79f8228ac59e1b0c,04 Mar 2009,"git-archive: add --output=<file> to send output to a file

When archiving a repository there is no way to specify a file as output.
This patch adds a new option ""--output"" that redirects the output to a
file instead of stdout.

Signed-off-by: Carlos Manuel Duclos Vergara <carlos.duclos@nokia.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_6424.cpp,,,data/crawl/git/old_hunk_6424.cpp,data/crawl/git/new_hunk_6424.cpp,-1,10,,"die(""could not redirect output"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""redirect"", ""output""]]",[1379184243362453572],6281,"14 days, 16:00:00"
https://github.com/git/git/commit/aec0c1bbfb2d42659bb710bd79f8228ac59e1b0c,04 Mar 2009,"git-archive: add --output=<file> to send output to a file

When archiving a repository there is no way to specify a file as output.
This patch adds a new option ""--output"" that redirects the output to a
file instead of stdout.

Signed-off-by: Carlos Manuel Duclos Vergara <carlos.duclos@nokia.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_6424.cpp,,,data/crawl/git/old_hunk_6424.cpp,data/crawl/git/new_hunk_6424.cpp,-1,7,,"die(""could not create archive file: %s "", output_file);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""create"", ""archive"", ""file"", ""%s"", ""output_file""]]",[5874220029144586385],6280,"14 days, 16:00:00"
https://github.com/git/git/commit/2d07f6d4b728d19d115b89123224268718f34efd,30 Mar 2009,"builtin-fast-export.c: turn error into warning

fast-import doesn't have a syntax to support tree-objects (and some other
object-types), so fast-export shouldn't handle them. However, aborting the
operation is a bit drastic. This patch turns the error into a warning instead.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_6314.cpp,,,data/crawl/git/old_hunk_6314.cpp,data/crawl/git/new_hunk_6314.cpp,3,3,"die (""Unexpected object of type %s"",
			     typename(e->item->type));","warning(""%s: Unexpected object of type %s, skipping."",
				e->name,
				typename(e->item->type));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die""], [""warning"", ""%s"", ""skipping"", ""name"", ""e""]]",[-6684398009615584926],6279,"11 days, 8:00:00"
https://github.com/git/git/commit/c0582c53bcf4e83bba70e1ad23abbad31f96ebc8,30 Mar 2009,"builtin-fast-export.c: fix crash on tagged trees

If a tag object points to a tree (or another unhandled type), the commit-
pointer is left uninitialized and later dereferenced. This patch adds a
default case to the switch that issues a warning and skips the object.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_6312.cpp,,,data/crawl/git/old_hunk_6312.cpp,data/crawl/git/new_hunk_6312.cpp,-1,4,,"warning(""Tag points to object of unexpected type %s, skipping."",
					typename(tag->object.type));","[""addLog""]","[[], [""warning"", ""Tag"", ""points"", ""to"", ""object"", ""of"", ""unexpected"", ""type"", ""%s"", ""skipping"", ""typename"", ""tag"", ""object"", ""type""]]",[-11097522688205797961],6278,"11 days, 8:00:00"
https://github.com/git/git/commit/1bf072e3661eeef8d9721079a332e804b5678c7e,05 Apr 2009,"bisect--helper: implement ""git bisect--helper""

This patch implements a new ""git bisect--helper"" builtin plumbing
command that will be used to migrate ""git-bisect.sh"" to C.

We start by implementing only the ""--next-vars"" option that will
read bisect refs from ""refs/bisect/"", and then compute the next
bisect step, and output shell variables ready to be eval'ed by
the shell.

At this step, ""git bisect--helper"" ignores the paths that may
have been put in ""$GIT_DIR/BISECT_NAMES"". This will be fixed in a
later patch.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/hunk_6301.cpp,,,data/crawl/git/old_hunk_6301.cpp,data/crawl/git/new_hunk_6301.cpp,-1,18,,"die(""reading bisect refs failed"");","[""addLog""]","[[], [""die"", ""reading"", ""bisect"", ""refs"", ""failed""]]",[-26378220174760074425],6277,"14 days, 8:00:00"
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5981.cpp,,,data/crawl/git/old_hunk_5981.cpp,data/crawl/git/new_hunk_5981.cpp,73,-1,"fprintf(stderr,
				""Resuming fetch of index for pack %s at byte %ld\n"",
				hex, prev_posn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resuming"", ""fetch"", ""of"", ""index"", ""for"", ""pack"", ""%s"", ""at"", ""byte"", ""%ld\\n"", ""hex"", ""prev_posn""], []]",[28777896022701260200],6276,0:00:00
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5981.cpp,,,data/crawl/git/old_hunk_5981.cpp,data/crawl/git/new_hunk_5981.cpp,51,-1,"error(""Unable to open local file %s for pack index"",
			    tmpfile);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""open"", ""local"", ""file"", ""%s"", ""for"", ""pack"", ""index"", ""tmpfile""], []]",[228075361391450385],6275,0:00:00
https://github.com/git/git/commit/4e2715fb9878235cb696f765695eef38078b0b7a,09 Jun 2009,"Simplify some 'fprintf(stderr); return -1;' by using 'return error()'

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_5958.cpp,,,data/crawl/git/old_hunk_5958.cpp,data/crawl/git/new_hunk_5958.cpp,12,12,"fprintf(stderr,
			""emacsclient version '%d' too old (< 22).\n"",
			version);","error(""emacsclient version '%d' too old (< 22)."",
			version);","[""updateLog"", ""removeVariable""]","[[""fprintf"", ""stderr"", ""\\n""], [""error""]]",[22199017998696725749],6274,0:00:00
https://github.com/git/git/commit/2ff4d1ab9ef6660c88020ddaadc410157e130cdc,22 Jun 2009,"receive-pack: do not send error details to the client

If the objects that a client pushes to the server cannot be processed for
any reason, an error is reported back to the client via the git protocol.
We used to send quite detailed information if a system call failed if
unpack-objects is run. This can be regarded as an information leak. Now we
do not send any error details like we already do in the case where
index-pack failed.

Errors in system calls as well as the exit code of unpack-objects and
index-pack are now reported to stderr; in the case of a local push or via
ssh these messages still go to the client, but that is OK since these forms
of access to the server assume that the client can be trusted. If
receive-pack is run from git-daemon, then the daemon should put the error
messages into the syslog.

With this reasoning a new status report is added for the post-update-hook;
untrusted (i.e. daemon's) clients cannot observe its status anyway, others
may want to know failure details.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_5940.cpp,,,data/crawl/git/old_hunk_5940.cpp,data/crawl/git/new_hunk_5940.cpp,23,23,"error(""%s exited with error code %d"", hook_name, -code);","error(""%s exited with error code %d"", cmd_name, -code);","[""updateVariable""]","[[""hook_name""], [""cmd_name""]]",[2663642743231910546],6273,0:00:00
https://github.com/git/git/commit/d824cbba02a4061400a0e382f9bd241fbbff34f0,27 Jun 2009,"Convert existing die(..., strerror(errno)) to die_errno()

Change calls to die(..., strerror(errno)) to use the new die_errno().

In the process, also make slight style adjustments: at least state
_something_ about the function that failed (instead of just printing
the pathname), and put paths in single quotes.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5927.cpp,,,data/crawl/git/old_hunk_5927.cpp,data/crawl/git/new_hunk_5927.cpp,3,3,"die(""'%s': %s"", arg, strerror(errno));","die_errno(""failed to stat '%s'"", arg);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""%s"", ""strerror"", ""errno""], [""die_errno"", ""failed"", ""to"", ""stat""]]",[-28044884680992620299],6272,0:00:00
https://github.com/git/git/commit/0721c314a5c8fddc877140ab5a333c42c62f780d,27 Jun 2009,"Use die_errno() instead of die() when checking syscalls

Lots of die() calls did not actually report the kind of error, which
can leave the user confused as to the real problem.  Use die_errno()
where we check a system/library call that sets errno on failure, or
one of the following that wrap such calls:

  Function              Passes on error from
  --------              --------------------
  odb_pack_keep         open
  read_ancestry         fopen
  read_in_full          xread
  strbuf_read           xread
  strbuf_read_file      open or strbuf_read_file
  strbuf_readlink       readlink
  write_in_full         xwrite

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",153,data/crawl/git/hunk_5831.cpp,,,data/crawl/git/old_hunk_5831.cpp,data/crawl/git/new_hunk_5831.cpp,18,19,"die(""Could open %s for writing"", git_path(""MERGE_MODE""));","die_errno(""Could not open '%s' for writing"",
				  git_path(""MERGE_MODE""));","[""updateLog"", ""updateContent""]","[[""die""], [""die_errno"", ""not""]]",[603811159956978205],6271,0:00:00
https://github.com/git/git/commit/5dd06d38795b2f6d05f851b25c814732238f8df1,02 Jul 2009,"grep: move context hunk mark handling into show_line()

Move last_shown into struct grep_opt, to make it available in
show_line(), and then make the function handle the printing of hunk
marks for context lines in a central place.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_5792.cpp,,,data/crawl/git/old_hunk_5792.cpp,data/crawl/git/new_hunk_5792.cpp,27,-1,"fputs(hunk_mark, stdout);",,"[""removeLog""]","[[""fputs"", ""hunk_mark"", ""stdout""], []]",[19802619654197182391],6270,0:00:00
https://github.com/git/git/commit/5dd06d38795b2f6d05f851b25c814732238f8df1,02 Jul 2009,"grep: move context hunk mark handling into show_line()

Move last_shown into struct grep_opt, to make it available in
show_line(), and then make the function handle the printing of hunk
marks for context lines in a central place.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_5791.cpp,,,data/crawl/git/old_hunk_5791.cpp,data/crawl/git/new_hunk_5791.cpp,-1,5,,"fputs(""--\n"", stdout);","[""addLog""]","[[], [""fputs"", ""\\n"", ""stdout""]]",[-12210368594645536720],6269,0:00:00
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5981.cpp,,,data/crawl/git/old_hunk_5981.cpp,data/crawl/git/new_hunk_5981.cpp,28,-1,"error(""Unable to verify pack %s is available"",
				     hex);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""verify"", ""pack"", ""%s"", ""is"", ""available"", ""hex""], []]",[-2124037517676676439],6268,"32 days, 8:00:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,81,,"printf(""%s\n"", refname);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""refname""]]",[20968797248952880790],6267,"499 days, 0:00:00"
https://github.com/git/git/commit/9f67d2e8279e1885ef2b4681c19cef8534259783,27 Oct 2009,"Teach ""git describe"" --dirty option

With the --dirty option, git describe works on HEAD but append s""-dirty""
iff the contents of the work tree differs from HEAD.  E.g.

  $ git describe --dirty
  v1.6.5-15-gc274db7
  $ echo >> Makefile
  $ git describe --dirty
  v1.6.5-15-gc274db7-dirty

The --dirty option can also be used to specify what is appended, instead
of the default string ""-dirty"".

  $ git describe --dirty=.mod
  v1.6.5-15-gc274db7.mod

Many build scripts use `git describe` to produce a version number based on
the description of HEAD (on which the work tree is based) + saying that if
the build contains uncommitted changes.  This patch helps the writing of
such scripts since `git describe --dirty` does directly the intended thing.

Three possiblities were considered while discussing this new feature:

1. Describe the work tree by default and describe HEAD only if ""HEAD"" is
   explicitly specified

     Pro: does the right thing by default (both for users and for scripts)
     Pro: other git commands that works on the work tree by default
     Con: breaks existing scripts used by the Linux kernel and other projects

2. Use --worktree instead of --dirty

     Pro: does what it says: ""git describe --worktree"" describes the work tree
     Con: other commands do not require a --worktree option when working
          on the work tree (it often is the default mode for them)
     Con: unusable with an optional value: ""git describe --worktree=.mod""
	  is quite unintuitive.

3. Use --dirty as in this patch

     Pro: makes sense to specify an optional value (what the dirty mark is)
     Pro: does not have any of the big cons of previous alternatives
	  * does not break scripts
	  * is not inconsistent with other git commands

This patch takes the third approach.

Signed-off-by: Jean Privat <jean@pryen.org>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_5630.cpp,,,data/crawl/git/old_hunk_5630.cpp,data/crawl/git/new_hunk_5630.cpp,-1,4,,"printf(""%s"", dirty);","[""addLog""]","[[], [""printf"", ""%s"", ""dirty""]]",[10953896129393814250],6266,0:00:00
https://github.com/git/git/commit/72b103fec7af967d295410c2fd3899bc6e8386e2,20 Oct 2009,"reflog-walk: refactor the branch@{num} formatting

We'll use the same output in an upcoming commit, so refactor its
formatting (which was duplicated anyway) into a separate function.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_5639.cpp,,,data/crawl/git/old_hunk_5639.cpp,data/crawl/git/new_hunk_5639.cpp,18,18,"printf(""%d"", commit_reflog->reflogs->nr
				       - 2 - commit_reflog->recno);","strbuf_addf(sb, ""%d"", commit_reflog->reflogs->nr
			    - 2 - commit_reflog->recno);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addf"", ""sb""]]",[-9795091059743571053],6265,"3 days, 16:00:00"
https://github.com/git/git/commit/c985ddf318a8c41c6e1abc8bebd058b31c7413c1,30 Dec 2009,"git count-objects: handle packs bigger than 4G

Use off_t to count sizes of packs and objects to avoid overflow after
4Gb.

Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_5453.cpp,,,data/crawl/git/old_hunk_5453.cpp,data/crawl/git/new_hunk_5453.cpp,11,11,"printf(""%lu objects, %lu kilobytes\n"",
		       loose, loose_size / 1024);","printf(""%lu objects, %lu kilobytes\n"",
		       loose, (unsigned long) (loose_size / 1024));","[""addVariable""]","[[], [""unsigned"", ""long""]]",[-1194457552177564325],6264,0:00:00
https://github.com/git/git/commit/e96980ef8164f266308ea5fec536863a629866dc,13 Jun 2007,"builtin-add: simplify (and increase accuracy of) exclude handling

Previously, the code would always set up the excludes, and then manually
pick through the pathspec we were given, assuming that non-added but
existing paths were just ignored. This was mostly correct, but would
erroneously mark a totally empty directory as 'ignored'.

Instead, we now use the collect_ignored option of dir_struct, which
unambiguously tells us whether a path was ignored. This simplifies the
code, and means empty directories are now just not mentioned at all.

Furthermore, we now conditionally ask dir_struct to respect excludes,
depending on whether the '-f' flag has been set. This means we don't have
to pick through the result, checking for an 'ignored' flag; ignored entries
were either added or not in the first place.

We can safely get rid of the special 'ignored' flags to dir_entry, which
were not used anywhere else.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Jonas Fonseca <fonseca@diku.dk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_8284.cpp,,,data/crawl/git/old_hunk_8284.cpp,data/crawl/git/new_hunk_8284.cpp,-1,4,,"die(""pathspec '%s' did not match any files"",
					pathspec[i]);","[""addLog""]","[[], [""die"", ""pathspec"", ""%s"", ""did"", ""not"", ""match"", ""any"", ""files"", ""pathspec[i]""]]",[20776966181493873256],6263,"347 days, 0:00:00"
https://github.com/git/git/commit/0cf8581e330e7140c9f5c94a53d441187c0f8ff9,31 Aug 2008,"checkout -m: recreate merge when checking out of unmerged index

This teaches git-checkout to recreate a merge out of unmerged
index entries while resolving conflicts.

With this patch, checking out an unmerged path from the index
now have the following possibilities:

 * Without any option, an attempt to checkout an unmerged path
   will atomically fail (i.e. no other cleanly-merged paths are
   checked out either);

 * With ""-f"", other cleanly-merged paths are checked out, and
   unmerged paths are ignored;

 * With ""--ours"" or ""--theirs, the contents from the specified
   stage is checked out;

 * With ""-m"" (we should add ""--merge"" as synonym), the 3-way merge
   is recreated from the staged object names and checked out.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/hunk_6841.cpp,,,data/crawl/git/old_hunk_6841.cpp,data/crawl/git/new_hunk_6841.cpp,-1,17,,"die(""unable to read blob object %s"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""blob"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-9553306293856305338],6262,"178 days, 8:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,613,-1,"die(""unable to read blob object %s"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""read"", ""blob"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""], []]",[9553306293856305338],6261,"356 days, 16:00:00"
https://github.com/git/git/commit/1b22b6c897efa8aec6eeb51f72a73d507d5e336f,17 Feb 2010,"refactor duplicated encode_header in pack-objects and fast-import

The following function is duplicated:

  encode_header

Move this function to sha1_file.c and rename it 'encode_in_pack_object_header',
as suggested by Junio C Hamano

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_5413.cpp,,,data/crawl/git/old_hunk_5413.cpp,data/crawl/git/new_hunk_5413.cpp,12,-1,"die(""bad type %d"", type);",,"[""removeLog""]","[[""die"", ""bad"", ""type"", ""%d"", ""type""], []]",[-3034749881290590620],6260,"2 days, 0:00:00"
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,755,,"die(""failed to read the cache"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""read"", ""the"", ""cache""]]",[-26720264961997095624],6259,"228 days, 16:00:00"
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5233.cpp,,,data/crawl/git/old_hunk_5233.cpp,data/crawl/git/new_hunk_5233.cpp,-1,49,,"fputs(line_prefix, file);","[""addLog""]","[[], [""fputs"", ""line_prefix"", ""file""]]",[-4007682152638190063],6258,0:00:00
https://github.com/git/git/commit/765c22588d9e410bf0100c4991b1945134da6959,07 Jul 2010,"fix git branch -m in presence of cross devices

When you have for example a bare repository stored on NFS, and that you
create new workdirs locally (using contrib's git-new-workdir), logs/refs
is a symlink to a different device. Hence when the reflogs are renamed,
all must happen below logs/refs or one gets cross device rename errors
like:

  git branch -m foo
  error: unable to move logfile logs/refs/heads/master to tmp-renamed-log: Invalid cross-device link
  fatal: Branch rename failed

The fix is hence to use logs/refs/.tmp-renamed-log as a temporary log
name, instead of just tmp-renamed-log.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_5138.cpp,,,data/crawl/git/old_hunk_5138.cpp,data/crawl/git/new_hunk_5138.cpp,4,4,"error(""unable to restore logfile %s from tmp-renamed-log: %s"",
			oldref, strerror(errno));","error(""unable to restore logfile %s from ""TMP_RENAMED_LOG"": %s"",
			oldref, strerror(errno));","[""updateContent"", ""addContent"", ""addVariable""]","[[""tmp"", ""renamed"", ""log""], [""TMP_RENAMED_LOG""]]",[-1349003959744958850],6257,0:00:00
https://github.com/git/git/commit/8030e44215fe8f34edd57d711a35f2f0f97a0423,28 Mar 2010,"Add support for GIT_ONE_FILESYSTEM

This patch makes git pay attention to the GIT_ONE_FILESYSTEM environment
variable. When that variable is set, git will stop searching for a
GIT_DIR when it attempts to cross a filesystem boundary.

When working in an environment with too many automount points to make
maintaining a GIT_CEILING_DIRECTORIES list enjoyable, GIT_ONE_FILESYSTEM
gives the option of turning all such attempts off with one setting.

Signed-off-by: Lars R. Damerow <lars@pixar.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_5330.cpp,,,data/crawl/git/old_hunk_5330.cpp,data/crawl/git/new_hunk_5330.cpp,-1,11,,"die_errno(""Cannot come back to cwd"");","[""addLog""]","[[], [""die_errno"", ""Cannot"", ""come"", ""back"", ""to"", ""cwd""]]",[-1684374643326029096],6256,"83 days, 0:00:00"
https://github.com/git/git/commit/6eb1b437933e075bd84c5cdcf5de95ed4db4820f,03 Sep 2008,"cherry-pick/revert: make direct internal call to merge_tree()

Refactored merge-recursive interface may still not be ideal but it already
allows us to make a direct call to merge_tree().

One regression is that the status message is lost as there is no way to
flush them from outside the refactored library code yet.

[jc: initial version by Miklos, with moderate amount of fixup by me]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_6752.cpp,,,data/crawl/git/old_hunk_6752.cpp,data/crawl/git/new_hunk_6752.cpp,-1,4,,"die(""git %s: failed to read the index"", me);","[""addLog""]","[[], [""die"", ""git"", ""%s"", ""failed"", ""to"", ""read"", ""the"", ""index"", ""me""]]",[-31641561397605786481],6255,"478 days, 8:00:00"
https://github.com/git/git/commit/620a6cd42ed5ea94684b22714181bf03871733dd,06 Nov 2007,"builtin-reset: avoid forking ""update-index --refresh""

Instead of forking update-index, call refresh_cache() directly.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/hunk_7822.cpp,,,data/crawl/git/old_hunk_7822.cpp,data/crawl/git/new_hunk_7822.cpp,-1,13,,"error(""Could not read index"");","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""read"", ""index""]]",[7355526128184762786],6254,"481 days, 16:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,128,-1,"die(""this should not happen, your snprintf is broken"");",,"[""removeLog""]","[[""die"", ""this"", ""should"", ""not"", ""happen"", ""your"", ""snprintf"", ""is"", ""broken""], []]",[-3989400890770091760],6253,"606 days, 0:00:00"
https://github.com/git/git/commit/a8dd2e7d2bd7472b4e02b07aeef795de9c74f3e7,20 Oct 2009,"fast-import: Add support for importing commit notes

Introduce a 'notemodify' subcommand of the 'commit' command. This subcommand
is similar to 'filemodify', except that no mode is supplied (all notes have
mode 0644), and the path is set to the hex SHA1 of the given ""comittish"".

This enables fast import of note objects along with their associated commits,
since the notes can now be named using the mark references of their
corresponding commits.

The patch also includes a test case of the added functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",299,data/crawl/git/hunk_5647.cpp,,,data/crawl/git/old_hunk_5647.cpp,data/crawl/git/new_hunk_5647.cpp,-1,23,,"die(""Invalid SHA1: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Invalid"", ""SHA1"", ""%s"", ""command_buf"", ""buf""]]",[-7969690232472827722],6252,"300 days, 8:00:00"
https://github.com/git/git/commit/9297f77e6d350f33de961e149dc33c77e7392db4,08 Mar 2010,"git status: Show detailed dirty status of submodules in long format

Since 1.7.0 there are three reasons a submodule is considered modified
against the work tree: It contains new commits, modified content or
untracked content. Lets show all reasons in the long format of git status,
so the user can better asses the nature of the modification. This change
does not affect the short and porcelain formats.

Two new members are added to ""struct wt_status_change_data"" to store the
information gathered by run_diff_files(). wt-status.c uses the new flag
DIFF_OPT_DIRTY_SUBMODULES to tell diff-lib.c it wants to get detailed
dirty information about submodules.

A hint line for submodules is printed in the dirty header when dirty
submodules are present.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/hunk_5360.cpp,,,data/crawl/git/old_hunk_5360.cpp,data/crawl/git/new_hunk_5360.cpp,-1,7,,"fprintf(s->fp, ""\n"");","[""addLog""]","[[], [""fprintf"", ""s"", ""fp"", ""\\n""]]",[-5179306310403602754],6251,"243 days, 8:00:00"
https://github.com/git/git/commit/502681cd7dcf87e067eba61da176388467606a2c,10 Mar 2011,"i18n: git-fetch formatting messages

Translate some of the formatting messages that appear on git-fetch
showing how branches/tags etc. were updated.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_4625.cpp,,,data/crawl/git/old_hunk_4625.cpp,data/crawl/git/new_hunk_4625.cpp,10,10,"fprintf(stderr, "" x %-*s %-*s -> %s\n"",
				TRANSPORT_SUMMARY_WIDTH, ""[deleted]"",
				REFCOL_WIDTH, ""(none)"", prettify_refname(ref->name));","fprintf(stderr, "" x %-*s %-*s -> %s\n"",
				TRANSPORT_SUMMARY_WIDTH, _(""[deleted]""),
				REFCOL_WIDTH, _(""(none)""), prettify_refname(ref->name));","[""addVariable""]","[[], [""_"", ""_""]]",[24320073148],6250,0:00:00
https://github.com/git/git/commit/5289bae17f24805cc8507129e21d794b0b56264c,05 Apr 2009,"patch-ids: use the new generic ""sha1_pos"" function to lookup sha1

instead of the specific one from which the new one has been copied.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_6306.cpp,,,data/crawl/git/old_hunk_6306.cpp,data/crawl/git/new_hunk_6306.cpp,77,-1,"die(""oops"");",,"[""removeLog""]","[[""die"", ""oops""], []]",[1936985164076898722],6249,"329 days, 16:00:00"
https://github.com/git/git/commit/a0be62c100897573ef1575ec0d5e8b215e9dcafe,15 Mar 2012,"notes-merge: use opendir/readdir instead of using read_directory()

notes_merge_commit() only needs to list all entries (non-recursively)
under a directory, which can be easily accomplished with
opendir/readdir and would be more lightweight than read_directory().

read_directory() is designed to list paths inside a working
directory. Using it outside of its scope may lead to undesired effects.

Apparently, one of the undesired effects of read_directory() is that it
doesn't deal with being given absolute paths. This creates problems for
notes_merge_commit() when git_path() returns an absolute path, which
happens when the current working directory is in a subdirectory of the
.git directory.

Originally-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Updated-by:  Johan Herland <johan@herland.net>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_4171.cpp,,,data/crawl/git/old_hunk_4171.cpp,data/crawl/git/new_hunk_4171.cpp,43,51,"die(""Failed to add resolved note '%s' to notes tree"",
			    ent->name);","die(""Failed to add resolved note '%s' to notes tree"",
			    path.buf);","[""updateVariable""]","[[""ent"", ""name""], [""path"", ""buf""]]",[11687294798661121052],6248,0:00:00
https://github.com/git/git/commit/1c88a6d17492b197b9b3298cbc34efa804928302,11 Sep 2012,"Sync with 1.7.11.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",961,data/crawl/git/hunk_4110.cpp,,,data/crawl/git/old_hunk_4110.cpp,data/crawl/git/new_hunk_4110.cpp,4,-1,"die(_(""diff_setup_done failed""));",,"[""removeLog""]","[[""die"", ""_"", ""diff_setup_done"", ""failed""], []]",[9741318216065282011],6247,0:00:00
https://github.com/git/git/commit/1c88a6d17492b197b9b3298cbc34efa804928302,11 Sep 2012,"Sync with 1.7.11.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",961,data/crawl/git/hunk_4105.cpp,,,data/crawl/git/old_hunk_4105.cpp,data/crawl/git/new_hunk_4105.cpp,4,-1,"die(""diff-setup"");",,"[""removeLog""]","[[""die"", ""diff"", ""setup""], []]",[11856510276232376596],6246,0:00:00
https://github.com/git/git/commit/5085a4e2e81f295a93df9b4bd98813d771f18a3c,04 Nov 2012,"Add new remote-hg transport helper

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>",391,data/crawl/git/hunk_4028.cpp,,,data/crawl/git/old_hunk_4028.cpp,data/crawl/git/new_hunk_4028.cpp,-1,21,,"die(msg, *args);","[""addLog""]","[[], [""die"", ""msg"", ""*args""]]",[2346119658525871849],6245,"8 days, 0:00:00"
https://github.com/git/git/commit/f538a91e3c58bb0882be895eec099e51a74dfac4,14 Jan 2013,"git-clean: Display more accurate delete messages

(1) Only print out the names of the files and directories that got
    actually deleted. Also do not mention that we are not removing
    directories when the user did not ask us to do so with '-d'.
(2) Show ignore message for skipped untracked git repositories.

Consider the following repo layout:

  test.git/
    |-- tracked_dir/
    |     |-- some_tracked_file
    |     |-- some_untracked_file
    |-- tracked_file
    |-- untracked_file
    |-- untracked_foo/
    |     |-- bar/
    |     |     |-- bar.txt
    |     |-- emptydir/
    |     |-- frotz.git/
    |           |-- frotz.tx
    |-- untracked_some.git/
          |-- some.txt

Suppose the user issues 'git clean -fd' from the test.git directory.

When -d option is used and untracked directory 'foo' contains a
subdirectory 'frotz.git' that is managed by a different git repository
therefore it will not be removed.

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Removing untracked_foo/
  Removing untracked_some.git/

The message displayed to the user is slightly misleading. The foo/
directory has not been removed because of foo/frotz.git still exists.
On the other hand the subdirectories 'bar' and 'emptydir' have been
deleted but they're not mentioned anywhere. Also, untracked_some.git
has not been removed either.

This behaviour is the result of the way the deletion of untracked
directories are reported. In the current implementation they are
deleted recursively but only the name of the top most directory is
printed out. The calling function does not know about any
subdirectories that could not be removed during the recursion.

Improve the way the deleted directories are reported back to
the user:
  (1) Create a recursive delete function 'remove_dirs' in builtin/clean.c
      to run in both dry_run and delete modes with the delete logic as
      follows:
        (a) Check if the current directory to be deleted is an untracked
            git repository. If it is and --force --force option is not set
            do not touch this directory, print ignore message, set dir_gone
            flag to false for the caller and return.
        (b) Otherwise for each item in current directory:
              (i)   If current directory cannot be accessed, print warning,
                    set dir_gone flag to false and return.
              (ii)  If the item is a subdirectory recurse into it,
                    check for the returned value of the dir_gone flag.
                    If the subdirectory is gone, add the name of the deleted
                    directory to a list of successfully removed items 'dels'.
                    Else set the dir_gone flag as the current directory
                    cannot be removed because we have at least one subdirectory
                    hanging around.
              (iii) If it is a file try to remove it. If success add the
                    file name to the 'dels' list, else print error and set
                    dir_gone flag to false.
        (c) After we finished deleting all items in the current directory and
            the dir_gone flag is still true, remove the directory itself.
            If failed set the dir_gone flag to false.

        (d) If the current directory cannot be deleted because the dir_gone flag
            has been set to false, print out all the successfully deleted items
            for this directory from the 'dels' list.
        (e) We're done with the current directory, return.

  (2) Modify the cmd_clean() function to:
        (a) call the recursive delete function 'remove_dirs()' for each
            topmost directory it wants to remove
        (b) check for the returned value of dir_gone flag. If it's true
            print the name of the directory as being removed.

Consider the output of the improved version:

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Skipping repository untracked_foo/frotz.git
  Removing untracked_foo/bar
  Removing untracked_foo/emptydir
  Skipping repository untracked_some.git/

Now it displays only the file and directory names that got actually
deleted and shows the name of the untracked git repositories it ignored.

Reported-by: Soren Brinkmann <soren.brinkmann@xilinx.com>

Signed-off-by: Zoltan Klinger <zoltan.klinger@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/hunk_3956.cpp,,,data/crawl/git/old_hunk_3956.cpp,data/crawl/git/new_hunk_3956.cpp,-1,90,,"warning(_(msg_warn_remove_failed), quoted.buf);","[""addLog""]","[[], [""warning"", ""_"", ""msg_warn_remove_failed"", ""quoted"", ""buf""]]",[-9651235084034928584],6244,0:00:00
https://github.com/git/git/commit/8efb8899cfe866dddb3659b9e0a94232161db65e,23 Feb 2013,"branch: segfault fixes and validation

branch_get() can return NULL (so far on detached HEAD only) but some
code paths in builtin/branch.c cannot deal with that and cause
segfaults.

While at there, make sure to bail out when the user gives 2 or more
branches with --set-upstream-to or --unset-upstream, where only the
first branch is processed and the rest silently dropped.

Reported-by: Per Cederqvist <cederp@opera.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_3853.cpp,,,data/crawl/git/old_hunk_3853.cpp,data/crawl/git/new_hunk_3853.cpp,-1,7,,"die(_(""no such branch '%s'""), argv[0]);","[""addLog""]","[[], [""die"", ""_"", ""no"", ""such"", ""branch"", ""%s"", ""argv[0]""]]",[-9065361529187312190],6243,0:00:00
https://github.com/git/git/commit/1a15d00bb910de0a86981f0d75836feac71d1fe0,02 Apr 2013,"branch: mention start_name in set-upstream error messages

If we refuse a branch operation because the tracking
start_name the user gave us is bogus, we just print
something like:

 fatal: Cannot setup tracking information; start point is not a branch

If we mention the actual name we tried to use, that may help
the user figure out why it didn't work (e.g., if they gave
us the arguments in the wrong order).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_3773.cpp,,,data/crawl/git/old_hunk_3773.cpp,data/crawl/git/new_hunk_3773.cpp,18,18,die(_(upstream_not_branch));,"die(_(upstream_not_branch), start_name);","[""addVariable""]","[[], [""start_name""]]",[5413323660893179868],6242,0:00:00
https://github.com/git/git/commit/9d3f002f21f78576f3c31ae94ce78de54e305c95,18 Apr 2013,"pretty: share code between format_decoration and show_decorations

This also adds color support to format_decorations()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_3691.cpp,,,data/crawl/git/old_hunk_3691.cpp,data/crawl/git/new_hunk_3691.cpp,28,33,"fputs(color_commit, stdout);","strbuf_addstr(sb, color_commit);","[""updateVariable"", ""updateLog""]","[[""fputs"", ""stdout""], [""strbuf_addstr"", ""sb""]]",[10537750153466557781],6241,0:00:00
https://github.com/git/git/commit/384f122b7c6dd2b52cc6029afee16560c38850ae,27 Jun 2007,"Don't ignore a pack-refs write failure

Without this, if the size of refs_file at that point is ever an exact
multiple of BUFSIZ, then an EIO or ENOSPC error on the final write would
not be diagnosed.

It's not worth worrying about EPIPE here.
Although theoretically possible that someone kill this process
with a manual SIGPIPE, it's not at all likely.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_8260.cpp,,,data/crawl/git/old_hunk_8260.cpp,data/crawl/git/new_hunk_8260.cpp,-1,4,,"die(""failed to write ref-pack file"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file""]]",[2465556903396734540],6240,"831 days, 0:00:00"
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7073.cpp,,,data/crawl/git/old_hunk_7073.cpp,data/crawl/git/new_hunk_7073.cpp,107,-1,"die(""failed to write ref-pack file"");",,"[""removeLog""]","[[""die"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file""], []]",[-2465556903396734540],6239,"1184 days, 16:00:00"
https://github.com/git/git/commit/267055f8609ff3e3134765395569b87269699c0a,14 Jun 2013,"git-remote-mediawiki: turn double-negated expressions into simple expressions

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_3603.cpp,,,data/crawl/git/old_hunk_3603.cpp,data/crawl/git/new_hunk_3603.cpp,-1,9,,defined($cmd[2]);,"[""addLog""]","[[], [""defined"", ""cmd[2]""]]",[-9231112729123354990],6238,0:00:00
https://github.com/git/git/commit/9f69d297703bff37c5506276c2565c721347e03f,20 Jun 2013,"refs: implement simple transactions for the packed-refs file

Handle simple transactions for the packed-refs file at the
packed_ref_cache level via new functions lock_packed_refs(),
commit_packed_refs(), and rollback_packed_refs().

Only allow the packed ref cache to be modified (via add_packed_ref())
while the packed refs file is locked.

Change clone to add the new references within a transaction.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_3587.cpp,,,data/crawl/git/old_hunk_3587.cpp,data/crawl/git/new_hunk_3587.cpp,-1,43,,"die(""internal error: packed-refs not locked"");","[""addLog""]","[[], [""die"", ""internal"", ""error"", ""packed"", ""refs"", ""not"", ""locked""]]",[-7395412776274315401],6237,0:00:00
https://github.com/git/git/commit/f3f47a1e8ddbecb0865be3d4c5dfef609cb58867,18 Oct 2012,"status: add --long output format option

You can currently set the output format to --short or
--porcelain. There is no --long, because we default to it
already. However, you may want to override an alias that
uses ""--short"" to get back to the default.

This requires a little bit of refactoring, because currently
we use STATUS_FORMAT_LONG internally to mean the same as
""the user did not specify anything"". By expanding the enum
to include STATUS_FORMAT_NONE, we can distinguish between
the implicit and explicit cases. This effects these
conditions:

  1. The user has asked for NUL termination. With NONE, we
     currently default to turning on the porcelain mode.
     With an explicit --long, we would in theory use NUL
     termination with the long mode, but it does not support
     it. So we can just complain and die.

  2. When an output format is given to ""git commit"", we
     default to ""--dry-run"". This behavior would now kick in
     when ""--long"" is given, too.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_4030.cpp,,,data/crawl/git/old_hunk_4030.cpp,data/crawl/git/new_hunk_4030.cpp,-1,7,,"die(_(""--long and -z are incompatible""));","[""addLog""]","[[], [""die"", ""_"", ""long"", ""and"", ""z"", ""are"", ""incompatible""]]",[788434968233387692],6236,"83 days, 0:00:00"
https://github.com/git/git/commit/42063f95a0f285382458f357bd256df252000ef1,18 Jul 2013,"apply, entry: speak of submodules instead of subprojects

There are only four (with some generous rounding) instances in the
current source code where we speak of ""subproject"" instead of
""submodule"".  They are as follows:

* one error message in git-apply and two in entry.c

* the patch format for submodule changes

The latter was introduced in 0478675 (Expose subprojects as special
files to ""git diff"" machinery, 2007-04-15), apparently before the
terminology was settled.  We can of course not change the patch
format.

Let's at least change the error messages to consistently call them
""submodule"".

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_3512.cpp,,,data/crawl/git/old_hunk_3512.cpp,data/crawl/git/new_hunk_3512.cpp,5,5,"error(""cannot create subproject directory %s"", path);","error(""cannot create submodule directory %s"", path);","[""updateContent""]","[[""subproject""], [""submodule""]]",[-1295014317215517592],6235,0:00:00
https://github.com/git/git/commit/6035d6aad8ca11954c0d7821f6f3e7c047039c8f,28 May 2013,"fetch-pack: prepare updated shallow file before fetching the pack

index-pack --strict looks up and follows parent commits. If shallow
information is not ready by the time index-pack is run, index-pack may
be led to non-existent objects. Make fetch-pack save shallow file to
disk before invoking index-pack.

git learns new global option --shallow-file to pass on the alternate
shallow file path. Undocumented (and not even support --shallow-file=
syntax) because it's unlikely to be used again elsewhere.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_3635.cpp,,,data/crawl/git/old_hunk_3635.cpp,data/crawl/git/new_hunk_3635.cpp,-1,13,,"die_errno(""failed to write to %s"", shallow_lock.filename);","[""addLog""]","[[], [""die_errno"", ""failed"", ""to"", ""write"", ""to"", ""%s"", ""shallow_lock"", ""filename""]]",[-19593625764134513660],6234,"93 days, 0:00:00"
https://github.com/git/git/commit/7c2b3029df45a74d0ebd11afcc94259791cfb90d,08 Apr 2009,"make get_short_ref a public function

Often we want to shorten a full ref name to something ""prettier""
to show a user. For example, ""refs/heads/master"" is often shown
simply as ""master"", or ""refs/remotes/origin/master"" is shown as
""origin/master"".

Many places in the code use a very simple formula: skip common
prefixes like refs/heads, refs/remotes, etc. This is codified in
the prettify_ref function.

for-each-ref has a more correct (but more expensive) approach:
consider the ref lookup rules, and try shortening as much as
possible while remaining unambiguous.

This patch makes the latter strategy globally available as
shorten_unambiguous_ref.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",205,data/crawl/git/hunk_6275.cpp,,,data/crawl/git/old_hunk_6275.cpp,data/crawl/git/new_hunk_6275.cpp,13,-1,"die(""invalid rule in ref_rev_parse_rules: %s"", rule);",,"[""removeLog""]","[[""die"", ""invalid"", ""rule"", ""in"", ""ref_rev_parse_rules"", ""%s"", ""rule""], []]",[20849995018331249634],6233,"580 days, 16:00:00"
https://github.com/git/git/commit/d048a96ee9bec968be0bdc9c43ffce61169545be,10 Nov 2007,"print warning/error/fatal messages in one shot

Not doing so is likely to create a messed up display when sent over the
sideband protocol.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_7807.cpp,,,data/crawl/git/old_hunk_7807.cpp,data/crawl/git/new_hunk_7807.cpp,5,-1,"fputs(""\n"", stderr);",,"[""removeLog""]","[[""fputs"", ""\\n"", ""stderr""], []]",[12210362594644536545],6232,"1544 days, 0:00:00"
https://github.com/git/git/commit/05d5667fec9650b049f47edd8cca23a43b135365,06 May 2008,"git-cat-file: Add --batch-check option

This new option allows multiple objects to be specified on stdin. For each
object specified, a line of the following form is printed:

<sha1> SP <type> SP <size> LF

If the object does not exist in the repository, a line of the following form is
printed:

<object> SP missing LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/hunk_7201.cpp,,,data/crawl/git/old_hunk_7201.cpp,data/crawl/git/new_hunk_7201.cpp,-1,13,,"printf(""%s missing\n"", obj_name);","[""addLog""]","[[], [""printf"", ""%s"", ""missing\\n"", ""obj_name""]]",[641205645218682399],6231,"879 days, 0:00:00"
https://github.com/git/git/commit/a5481a6c9438cbd9c246cfa59ff49c31a0926fb6,29 Jun 2015,"convert ""enum date_mode"" into a struct

In preparation for adding date modes that may carry extra
information beyond the mode itself, this patch converts the
date_mode enum into a struct.

Most of the conversion is fairly straightforward; we pass
the struct as a pointer and dereference the type field where
necessary. Locations that declare a date_mode can use a ""{}""
constructor.  However, the tricky case is where we use the
enum labels as constants, like:

  show_date(t, tz, DATE_NORMAL);

Ideally we could say:

  show_date(t, tz, &{ DATE_NORMAL });

but of course C does not allow that. Likewise, we cannot
cast the constant to a struct, because we need to pass an
actual address. Our options are basically:

  1. Manually add a ""struct date_mode d = { DATE_NORMAL }""
     definition to each caller, and pass ""&d"". This makes
     the callers uglier, because they sometimes do not even
     have their own scope (e.g., they are inside a switch
     statement).

  2. Provide a pre-made global ""date_normal"" struct that can
     be passed by address. We'd also need ""date_rfc2822"",
     ""date_iso8601"", and so forth. But at least the ugliness
     is defined in one place.

  3. Provide a wrapper that generates the correct struct on
     the fly. The big downside is that we end up pointing to
     a single global, which makes our wrapper non-reentrant.
     But show_date is already not reentrant, so it does not
     matter.

This patch implements 3, along with a minor macro to keep
the size of the callers sane.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_3087.cpp,,,data/crawl/git/old_hunk_3087.cpp,data/crawl/git/new_hunk_3087.cpp,1,1,"warning(""Log for '%.*s' only goes ""
						""back to %s."", len, str,
						show_date(co_time, co_tz, DATE_RFC2822));","warning(""Log for '%.*s' only goes ""
						""back to %s."", len, str,
						show_date(co_time, co_tz, DATE_MODE(RFC2822)));","[""updateVariable"", ""addVariable""]","[[""DATE_RFC2822""], [""DATE_MODE"", ""RFC2822""]]",[-9205868866225676263],6230,0:00:00
https://github.com/git/git/commit/85c62395b152f99e8867aaf84cea93dddc03243c,01 Dec 2010,"fast-import: let importers retrieve blobs

New objects written by fast-import are not available immediately.
Until a checkpoint has been started and finishes writing the pack
index, any new blobs will not be accessible using standard git tools.

So introduce a new way to access them: a ""cat-blob"" command in the
command stream requests for fast-import to print a blob to stdout or a
file descriptor specified by the argument to --cat-blob-fd.  The value
for cat-blob-fd cannot be specified in the stream because that would
be a layering violation: the decision of where to direct a stream has
to be made when fast-import is started anyway, so we might as well
make the stream format is independent of that detail.

Output uses the same format as ""git cat-file --batch"".

Thanks to Sverre Rabbelier and Sam Vilain for guidance in designing
the protocol.

Based-on-patch-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Acked-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",331,data/crawl/git/hunk_4915.cpp,,,data/crawl/git/old_hunk_4915.cpp,data/crawl/git/new_hunk_4915.cpp,-1,63,,"die(""Unknown mark: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Unknown"", ""mark"", ""%s"", ""command_buf"", ""buf""]]",[-10901404190645779587],6229,"586 days, 16:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7006.cpp,,,data/crawl/git/old_hunk_7006.cpp,data/crawl/git/new_hunk_7006.cpp,18,-1,"die(""corrupt MERGE_RR"");",,"[""removeLog""]","[[""die"", ""corrupt"", ""MERGE_RR""], []]",[3834673031445325428],6228,"856 days, 16:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,280,,"fprintf(stderr, ""Resolved '%s' using ""
						""previous resolution.\n"", path);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Resolved"", ""%s"", ""using"", ""previous"", ""resolution"", ""\\n"", ""path""]]",[-12015661553728219539],6227,"1713 days, 8:00:00"
https://github.com/git/git/commit/c12172d2eab91b79b8181b04ab5a5332a96e34a8,06 May 2008,"Add history graph API

This new API allows the commit history to be displayed as a text-based
graphical representation.

Signed-off-by: Adam Simpkins <adam@adamsimpkins.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1206,data/crawl/git/hunk_7210.cpp,,,data/crawl/git/old_hunk_7210.cpp,data/crawl/git/new_hunk_7210.cpp,-1,124,,"fputs(sb.buf, stdout);","[""addLog""]","[[], [""fputs"", ""sb"", ""buf"", ""stdout""]]",[-11880400360132269299],6226,"1484 days, 8:00:00"
https://github.com/git/git/commit/74e8bc59cb324d2d7a55c90195db004219770eec,29 Apr 2015,"merge: handle FETCH_HEAD internally

The collect_parents() function now is responsible for

 1. parsing the commits given on the command line into a list of
    commits to be merged;

 2. filtering these parents into independent ones; and

 3. optionally calling fmt_merge_msg() via prepare_merge_message()
    to prepare an auto-generated merge log message, using fake
    contents that FETCH_HEAD would have had if these commits were
    fetched from the current repository with ""git pull . $args...""

Make ""git merge FETCH_HEAD"" to be the same as the traditional

    git merge ""$(git fmt-merge-msg <.git/FETCH_HEAD)"" $commits

invocation of the command in ""git pull"", where $commits are the ones
that appear in FETCH_HEAD that are not marked as not-for-merge, by
making it do a bit more, specifically:

 - noticing ""FETCH_HEAD"" is the only ""commit"" on the command line
   and picking the commits that are not marked as not-for-merge as
   the list of commits to be merged (substitute for step #1 above);

 - letting the resulting list fed to step #2 above;

 - doing the step #3 above, using the contents of the FETCH_HEAD
   instead of fake contents crafted from the list of commits parsed
   in the step #1 above.

Note that this changes the semantics.  ""git merge FETCH_HEAD"" has
always behaved as if the first commit in the FETCH_HEAD file were
directly specified on the command line, creating a two-way merge
whose auto-generated merge log said ""merge commit xyz"".  With this
change, if the previous fetch was to grab multiple branches (e.g.
""git fetch $there topic-a topic-b""), the new world order is to
create an octopus, behaving as if ""git pull $there topic-a topic-b""
were run.  This is a deliberate change to make that happen, and
can be seen in the changes to t3033 tests.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/hunk_3252.cpp,,,data/crawl/git/old_hunk_3252.cpp,data/crawl/git/new_hunk_3252.cpp,-1,15,,"die_errno(_(""could not open '%s' for reading""), filename);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""filename""]]",[-8010569130806384168],6225,"49 days, 8:00:00"
https://github.com/git/git/commit/6b3c4c05475d206fafd650d8d27c82a8b051ac30,15 Dec 2011,"merge: abort if fails to commit

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_4240.cpp,,,data/crawl/git/old_hunk_4240.cpp,data/crawl/git/new_hunk_4240.cpp,-1,4,,"die(_(""failed to write commit object""));","[""addLog""]","[[], [""die"", ""_"", ""failed"", ""to"", ""write"", ""commit"", ""object""]]",[-2679410035935555555],6224,"443 days, 0:00:00"
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2887.cpp,,,data/crawl/git/old_hunk_2887.cpp,data/crawl/git/new_hunk_2887.cpp,13,13,"error(_(""stored pre-cherry-pick HEAD file '%s' is corrupt""),
			filename);","error(_(""stored pre-cherry-pick HEAD file '%s' is corrupt""),
			git_path_head_file());","[""removeVariable"", ""addVariable""]","[[""filename""], [""git_path_head_file""]]",[11725196564012454239],6223,0:00:00
https://github.com/git/git/commit/314eeb6e483350cc7ef0bee0498ff24a12346495,16 Aug 2010,"cherry-pick/revert: Use advise() for hints

When cherry-pick fails after picking a large series of commits, it can
be hard to pick out the error message and advice.  Prefix the advice
with “hint: ” to help.

Before:

    error: could not apply 7ab78c9... foo
      After resolving the conflicts,
    mark the corrected paths with 'git add <paths>' or 'git rm <paths>'
    and commit the result with:

            git commit -c 7ab78c9a7898b87127365478431289cb98f8d98f

After:

    error: could not apply 7ab78c9... foo
    hint: after resolving the conflicts, mark the corrected paths
    hint: with 'git add <paths>' or 'git rm <paths>'
    hint: and commit the result with 'git commit -c 7ab78c9'

Noticed-by: Thomas Rast <trast@student.ethz.ch>
Encouraged-by: Sverre Rabbelier <srabbelier@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_5047.cpp,,,data/crawl/git/old_hunk_5047.cpp,data/crawl/git/new_hunk_5047.cpp,-1,8,,"fprintf(stderr, ""%s\n"", msg);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""msg""]]",[-1393532391984386060],6222,"771 days, 0:00:00"
https://github.com/git/git/commit/368aa52952deb631b38a89837c4abbb00c5261c1,06 Jan 2013,"add git-check-ignore sub-command

This works in a similar manner to git-check-attr.

Thanks to Jeff King and Junio C Hamano for the idea:
http://thread.gmane.org/gmane.comp.version-control.git/108671/focus=108815

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",908,data/crawl/git/hunk_3971.cpp,,,data/crawl/git/old_hunk_3971.cpp,data/crawl/git/new_hunk_3971.cpp,-1,66,,"die(_(""index file corrupt""));","[""addLog""]","[[], [""die"", ""_"", ""index"", ""file"", ""corrupt""]]",[-18800083450529938410],6221,"355 days, 0:00:00"
https://github.com/git/git/commit/11a458befcd7662fbe6d2d53c76d49ae2b0fe219,28 Sep 2015,Sync with 2.4.10,495,data/crawl/git/hunk_2714.cpp,,,data/crawl/git/old_hunk_2714.cpp,data/crawl/git/new_hunk_2714.cpp,-1,5,,"die(""unable to generate combined diff for %s"",
		    oid_to_hex(parent));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""combined"", ""diff"", ""for"", ""%s"", ""oid_to_hex"", ""parent""]]",[-21971983877063028230],6220,"2 days, 16:00:00"
https://github.com/git/git/commit/173aef7c2ee9aa0021dad7c70d30f9099be4a134,21 Oct 2015,"mailinfo: move global ""FILE *fin, *fout"" to struct mailinfo

This requires us to pass ""struct mailinfo"" to more functions
throughout the codepath that read input lines.  Incidentally,
later steps are helped by this patch passing the struct to
more callchains.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_2645.cpp,,,data/crawl/git/old_hunk_2645.cpp,data/crawl/git/new_hunk_2645.cpp,11,11,"fprintf(fout, ""%s: %s\n"", header[i], hdr->buf);","fprintf(mi->output, ""%s: %s\n"", header[i], hdr->buf);","[""removeVariable"", ""addVariable""]","[[""fout""], [""mi"", ""output""]]",[-7634381561822703665],6219,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2476.cpp,,,data/crawl/git/old_hunk_2476.cpp,data/crawl/git/new_hunk_2476.cpp,3,3,"printf(""%s\n"", sha1_to_hex(result->item->object.sha1));","printf(""%s\n"", oid_to_hex(&result->item->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""result"", ""sha1""], [""oid_to_hex"", ""&result"", ""oid""]]",[15777640492074807929],6218,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2531.cpp,,,data/crawl/git/old_hunk_2531.cpp,data/crawl/git/new_hunk_2531.cpp,2,2,"die(""unable to parse commit %s"",
			    sha1_to_hex(c->object.sha1));","die(""unable to parse commit %s"",
			    oid_to_hex(&c->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""c"", ""sha1""], [""oid_to_hex"", ""&c"", ""oid""]]",[11703065648053253089],6217,0:00:00
https://github.com/git/git/commit/08a3651fe7f3163acbac461e0daf370329a1d332,01 Dec 2015,"Make error message after failing commit_lock_file() less confusing

The error message after a failing commit_lock_file() call sometimes
looks like this, causing confusion:

  $ git remote add remote git@server.com/repo.git
  error: could not commit config file .git/config
  # Huh?!
  # I didn't want to commit anything, especially not my config file!

While in the narrow context of the lockfile module using the verb
'commit' in the error message makes perfect sense, in the broader
context of git the word 'commit' already has a very specific meaning,
hence the confusion.

Reword these error messages to say ""could not write"" instead of ""could
not commit"".

While at it, include strerror in the error messages after writing the
config file or the credential store fails to provide some information
about the cause of the failure, and update the style of the error
message after writing the reflog fails to match surrounding error
messages (i.e. no '' around the pathname and no () around the error
description).

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Jeff King <peff@peff.net>",13,data/crawl/git/hunk_2369.cpp,,,data/crawl/git/old_hunk_2369.cpp,data/crawl/git/new_hunk_2369.cpp,3,3,"die_errno(""unable to commit credential store"");","die_errno(""unable to write credential store: %s"",
			  strerror(errno));","[""updateContent"", ""addVariable""]","[[""commit""], [""write"", ""%s"", ""strerror"", ""errno""]]",[17218746474383709611],6216,0:00:00
https://github.com/git/git/commit/92bcbb9b338dd27f0fd4245525093c4bce867f3d,14 Dec 2015,"ident: loosen getpwuid error in non-strict mode

If the user has not specified an identity and we have to
turn to getpwuid() to find the username or gecos field, we
die immediately when getpwuid fails (e.g., because the user
does not exist). This is OK for making a commit, where we
have set IDENT_STRICT and would want to bail on bogus input.

But for something like a reflog, where the ident is ""best
effort"", it can be pain. For instance, even running ""git
clone"" with a UID that is not in /etc/passwd will result in
git barfing, just because we can't find an ident to put in
the reflog.

Instead of dying in xgetpwuid_self, we can instead return a
fallback value, and set a ""bogus"" flag. For the username in
an email, we already have a ""default_email_is_bogus"" flag.
For the name field, we introduce (and check) a matching
""default_name_is_bogus"" flag. As a bonus, this means you now
get the usual ""tell me who you are"" advice instead of just a
""no such user"" error.

No tests, as this is dependent on configuration outside of
git's control. However, I did confirm that it behaves
sensibly when I delete myself from the local /etc/passwd
(reflogs get written, and commits complain).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_2362.cpp,,,data/crawl/git/old_hunk_2362.cpp,data/crawl/git/new_hunk_2362.cpp,-1,14,,"fputs(env_hint, stderr);","[""addLog""]","[[], [""fputs"", ""env_hint"", ""stderr""]]",[-4100799420109202734],6215,"72 days, 16:00:00"
https://github.com/git/git/commit/503253771e93fd9f29c9f0773223d456677452c4,10 May 2009,"rev-parse: add --sq-quote to shell quote arguments

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_6045.cpp,,,data/crawl/git/old_hunk_6045.cpp,data/crawl/git/new_hunk_6045.cpp,-1,9,,"printf(""%s\n"", buf.buf);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""buf"", ""buf""]]",[14036423227931753601],6214,"1704 days, 16:00:00"
https://github.com/git/git/commit/f30afdabbfb9feeec402d351935879caf8b298ad,11 May 2016,"mingw: introduce the 'core.hideDotFiles' setting

On Unix (and Linux), files and directories whose names start with a dot
are usually not shown by default. This convention is used by Git: the
.git/ directory should be left alone by regular users, and only accessed
through Git itself.

On Windows, no such convention exists. Instead, there is an explicit flag
to mark files or directories as hidden.

In the early days, Git for Windows did not mark the .git/ directory (or
for that matter, any file or directory whose name starts with a dot)
hidden. This lead to quite a bit of confusion, and even loss of data.

Consequently, Git for Windows introduced the core.hideDotFiles setting,
with three possible values: true, false, and dotGitOnly, defaulting to
marking only the .git/ directory as hidden.

The rationale: users do not need to access .git/ directly, and indeed (as
was demonstrated) should not really see that directory, either. However,
not all dot files should be hidden by default, as e.g. Eclipse does not
show them (and the user would therefore be unable to see, say, a
.gitattributes file).

In over five years since the last attempt to bring this patch into core
Git, a slightly buggy version of this patch has served Git for Windows'
users well: no single report indicated problems with the hidden .git/
directory, and the stream of problems caused by the previously non-hidden
.git/ directory simply stopped. The bugs have been fixed during the
process of getting this patch upstream.

Note that there is a funny quirk we have to pay attention to when
creating hidden files: we use Win32's _wopen() function which
transmogrifies its arguments and hands off to Win32's CreateFile()
function. That latter function errors out with ERROR_ACCESS_DENIED (the
equivalent of EACCES) when the equivalent of the O_CREAT flag was passed
and the file attributes (including the hidden flag) do not match an
existing file's. And _wopen() accepts no parameter that would be
transmogrified into said hidden flag. Therefore, we simply try again
without O_CREAT.

A slightly different method is required for our fopen()/freopen()
function as we cannot even *remove* the implicit O_CREAT flag.
Therefore, we briefly mark existing files as unhidden when opening them
via fopen()/freopen().

The ERROR_ACCESS_DENIED error can also be triggered by opening a file
that is marked as a system file (which is unlikely to be tracked in
Git), and by trying to create a file that has *just* been deleted and is
awaiting the last open handles to be released (which would be handled
better by the ""Try again?"" logic, a story for a different patch series,
though). In both cases, it does not matter much if we try again without
the O_CREAT flag, read: it does not hurt, either.

For details how ERROR_ACCESS_DENIED can be triggered, see
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858

Original-patch-by: Erik Faye-Lund <kusmabite@gmail.com>
Initial-Test-By: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_2002.cpp,,,data/crawl/git/old_hunk_2002.cpp,data/crawl/git/new_hunk_2002.cpp,-1,37,,"warning(""could not mark '%s' as hidden."", filename);","[""addLog""]","[[], [""warning"", ""could"", ""not"", ""mark"", ""%s"", ""as"", ""hidden"", ""filename""]]",[-348907046865675555],6213,0:00:00
https://github.com/git/git/commit/d3621de789ab57739f48b065751089d828b50240,31 May 2016,"t4051: rewrite, add more tests

Remove the tests that checked against a fixed result and replace them
with more focused checks of desired properties of the created diffs.
That way we get more detailed and meaningful diagnostics.

Store test file contents in files in a subdirectory in order to avoid
cluttering the test script with them.

Use tagged commits to store the changes to test diff -W against instead
of using changes to the worktree.  Use the worktree instead to try and
apply the generated patch in order to validate it.

Document unwanted features: trailing empty lines, too much context for
appended functions, insufficient context at the end with -U0.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",314,data/crawl/git/hunk_1967.cpp,,,data/crawl/git/old_hunk_1967.cpp,data/crawl/git/new_hunk_1967.cpp,73,-1,"printf(""Hello world.\n"");",,"[""removeLog""]","[[""printf"", ""Hello"", ""world"", ""\\n""], []]",[-3892504892495328741],6212,0:00:00
https://github.com/git/git/commit/292ce46b60e2c12450c5c21044acf9c41bd837df,31 Oct 2009,"remote-helpers: Fetch more than one ref in a batch

Some network protocols (e.g. native git://) are able to fetch more
than one ref at a time and reduce the overall transfer cost by
combining the requests into a single exchange.  Instead of feeding
each fetch request one at a time to the helper, feed all of them
at once so the helper can decide whether or not it should batch them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_5602.cpp,,,data/crawl/git/old_hunk_5602.cpp,data/crawl/git/new_hunk_5602.cpp,-1,24,,"warning(""%s unexpectedly said: '%s'"", data->name, buf.buf);","[""addLog""]","[[], [""warning"", ""%s"", ""unexpectedly"", ""said"", ""%s"", ""data"", ""name"", ""buf"", ""buf""]]",[-22419270005600688005],6211,"805 days, 16:00:00"
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_1919.cpp,,,data/crawl/git/old_hunk_1919.cpp,data/crawl/git/new_hunk_1919.cpp,4,3,"fprintf(stderr, ""got ack (%d) %s\n"", ack,
					sha1_to_hex(result_sha1));","print_verbose(args, ""got ack (%d) %s"", ack,
				      sha1_to_hex(result_sha1));","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""fprintf"", ""stderr"", ""%s\\n""], [""print_verbose"", ""args"", ""%s""]]",[1778747922789140436],6210,0:00:00
https://github.com/git/git/commit/b4da9d62f91d66ab97815007105b42a2aa5846b5,28 Jun 2016,"merge-recursive: convert leaf functions to use struct object_id

Convert all but two of the static functions in this file to use struct
object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",236,data/crawl/git/hunk_1738.cpp,,,data/crawl/git/old_hunk_1738.cpp,data/crawl/git/new_hunk_1738.cpp,2,2,"die(_(""do not know what to do with %06o %s '%s'""),
			    mode, sha1_to_hex(sha), path);","die(_(""do not know what to do with %06o %s '%s'""),
			    mode, oid_to_hex(oid), path);","[""updateVariable""]","[[""sha1_to_hex"", ""sha""], [""oid_to_hex"", ""oid""]]",[10226994146018156962],6209,0:00:00
https://github.com/git/git/commit/2010aabd91eec0e8b074774e924e5264a522a923,13 Apr 2016,"i18n: branch: unmark string for translation

Unmark strings for translation for command help/hint.
These strings can not be translated, just copied.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_2153.cpp,,,data/crawl/git/old_hunk_2153.cpp,data/crawl/git/new_hunk_2153.cpp,4,4,"fprintf(stderr, _(""    git branch --set-upstream-to %s\n""), branch->name);","fprintf(stderr, ""    git branch --set-upstream-to %s\n"", branch->name);","[""removeVariable""]","[[""_""], []]",[-12160036574],6208,"34 days, 16:00:00"
https://github.com/git/git/commit/38f460caa26e5dd06c3e874e30ea0ec5beb49b56,05 Aug 2016,"trace: use warning() for printing trace errors

Right now we just fprintf() straight to stderr, which can
make the output hard to distinguish. It would be helpful to
give it one of our usual prefixes like ""error:"", ""warning:"",
etc.

It doesn't make sense to use error() here, as the trace code
is ""optional"" debugging code. If something goes wrong, we
should warn the user, but saying ""error"" implies the actual
git operation had a problem. So warning() is the only sane
choice.

Note that this does end up calling warn_routine() to do the
formatting. This is probably a good thing, since they are
clearly trying to hook messages before they make it to
stderr. However, it also means that in theory somebody who
tries to trace from their warn_routine() could cause a loop.
This seems rather unlikely in practice (we've never even
overridden the default warn_builtin routine before, and
recent discussions to do so would just install a noop
routine).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_1619.cpp,,,data/crawl/git/old_hunk_1619.cpp,data/crawl/git/new_hunk_1619.cpp,3,3,"fprintf(stderr, ""%s: write error (%s)\n"", err_msg, strerror(errno));","warning(""%s: write error (%s)"", err_msg, strerror(errno));","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""\\n""], [""warning""]]",[9525901655332364049],6207,0:00:00
https://github.com/git/git/commit/84b4202d804c7faec76f3eab22744b6288c63481,24 Jun 2013,"status/commit: make sure --porcelain is not affected by user-facing config

The recent addition of status.branch started affecting what is shown
when ""git status --porcelain"" is run by mistake.  Identify the
configuration items that should be ignored under ""--porcelain""
option, introduce a ""deferred config"" mechanism to keep the values
read from the configuration, and decide what value to use only after
we read both from configuration and command line.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_3563.cpp,,,data/crawl/git/old_hunk_3563.cpp,data/crawl/git/new_hunk_3563.cpp,-1,4,,"die(""BUG: finalize_deferred_config() should have been called"");","[""addLog""]","[[], [""die"", ""BUG"", ""finalize_deferred_config"", ""should"", ""have"", ""been"", ""called""]]",[8020215930678866075],6206,"379 days, 8:00:00"
https://github.com/git/git/commit/90875eca5a0b227e6a1be3ccece0a3da5e72017f,07 Sep 2016,"apply: use error_errno() where possible

To avoid possible mistakes and to uniformly show the errno
related messages, let's use error_errno() where possible.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_1505.cpp,,,data/crawl/git/old_hunk_1505.cpp,data/crawl/git/new_hunk_1505.cpp,3,3,"error(_(""%s: %s""), old_name, strerror(errno));","error_errno(""%s"", old_name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""_"", ""%s"", ""strerror"", ""errno""], [""error_errno""]]",[-22273121921184984949],6205,0:00:00
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1428.cpp,,,data/crawl/git/old_hunk_1428.cpp,data/crawl/git/new_hunk_1428.cpp,13,19,"die(_(""Unprocessed path??? %s""),
				    entries->items[i].string);","die(""BUG: unprocessed path??? %s"",
				    entries->items[i].string);","[""removeVariable"", ""updateContent""]","[[""_"", ""Unprocessed""], [""BUG"", ""unprocessed""]]",[327024204666204287],6204,0:00:00
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1412.cpp,,,data/crawl/git/old_hunk_1412.cpp,data/crawl/git/new_hunk_1412.cpp,15,19,"die(_(""do not know what to do with %06o %s '%s'""),
			    mode, sha1_to_hex(sha), path);","err(o,
				  _(""do not know what to do with %06o %s '%s'""),
				  mode, oid_to_hex(oid), path);","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""die"", ""sha1_to_hex"", ""sha""], [""err"", ""o"", ""oid_to_hex"", ""oid""]]",[9100938647614341517],6203,0:00:00
https://github.com/git/git/commit/63e95beb085ce8ae359d728ec0a54c3dcfe741f5,17 Apr 2016,"submodule: port resolve_relative_url from shell to C

Later on we want to automatically call `git submodule init` from
other commands, such that the users don't have to initialize the
submodule themselves.  As these other commands are written in C
already, we'd need the init functionality in C, too.  The
`resolve_relative_url` function is a large part of that init
functionality, so start by porting this function to C.

To create the tests in t0060, the function `resolve_relative_url`
was temporarily enhanced to write all inputs and output to disk
when running the test suite. The added tests in this patch are
a small selection thereof.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",336,data/crawl/git/hunk_2150.cpp,,,data/crawl/git/old_hunk_2150.cpp,data/crawl/git/new_hunk_2150.cpp,-1,22,,"die(_(""Expecting a full ref name, got %s""), refname);","[""addLog""]","[[], [""die"", ""_"", ""Expecting"", ""a"", ""full"", ""ref"", ""name"", ""got"", ""%s"", ""refname""]]",[1341172299883274211],6202,"84 days, 8:00:00"
https://github.com/git/git/commit/63e95beb085ce8ae359d728ec0a54c3dcfe741f5,17 Apr 2016,"submodule: port resolve_relative_url from shell to C

Later on we want to automatically call `git submodule init` from
other commands, such that the users don't have to initialize the
submodule themselves.  As these other commands are written in C
already, we'd need the init functionality in C, too.  The
`resolve_relative_url` function is a large part of that init
functionality, so start by porting this function to C.

To create the tests in t0060, the function `resolve_relative_url`
was temporarily enhanced to write all inputs and output to disk
when running the test suite. The added tests in this patch are
a small selection thereof.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",336,data/crawl/git/hunk_2150.cpp,,,data/crawl/git/old_hunk_2150.cpp,data/crawl/git/new_hunk_2150.cpp,-1,15,,"die(_(""No such ref: %s""), ""HEAD"");","[""addLog""]","[[], [""die"", ""_"", ""No"", ""such"", ""ref"", ""%s"", ""HEAD""]]",[4809814377360680227],6201,"84 days, 8:00:00"
https://github.com/git/git/commit/68d03e4a6e448aa557f52adef92595ac4d6cd4bd,07 Jul 2010,"Implement automatic fast-forward merge for submodules

This implements a simple merge strategy for submodule hashes. We check
whether one side of the merge candidates is already contained in the
other and then merge automatically.

If both sides contain changes we search for a merge in the submodule.
In case a single one exists we check that out and suggest it as the
merge resolution. A list of candidates is returned when we find multiple
merges that contain both sides of the changes.

This is useful for a workflow in which the developers can publish topic
branches in submodules and a separate maintainer merges them. In case
the developers always wait until their branch gets merged before tracking
them in the superproject all merges of branches that contain submodule
changes will be resolved automatically. If developers choose to track
their feature branch the maintainer might get a conflict but git will
search the submodule for a merge and suggest it/them as a resolution.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",300,data/crawl/git/hunk_5135.cpp,,,data/crawl/git/old_hunk_5135.cpp,data/crawl/git/new_hunk_5135.cpp,-1,69,,"fprintf(stderr, ""%s\n"", sb.buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""sb"", ""buf""]]",[-7438945739769368559],6200,"1479 days, 8:00:00"
https://github.com/git/git/commit/93b3df6f147fa2bf10116aaeb3597e0b6becaf35,21 Oct 2016,"sequencer: start error messages consistently with lower case

Quite a few error messages touched by this developer during the work to
speed up rebase -i started with an upper case letter, violating our
current conventions. Instead of sneaking in this fix (and forgetting
quite a few error messages), let's just have one wholesale patch fixing
all of the error messages in the sequencer.

While at it, the funny ""error: Error wrapping up..."" was changed to a
less funny, but more helpful, ""error: failed to finalize..."".

Pointed out by Junio Hamano.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_989.cpp,,,data/crawl/git/old_hunk_989.cpp,data/crawl/git/new_hunk_989.cpp,10,10,"error(_(""Error wrapping up '%s'.""), todo_path);","error(_(""failed to finalize '%s'.""), todo_path);","[""updateContent""]","[[""Error"", ""wrapping"", ""up""], [""failed"", ""to"", ""finalize""]]",[-27092735287447155464],6199,0:00:00
https://github.com/git/git/commit/b798671fa935492ce511766bc99fb26b2892499b,15 Aug 2007,"merge-recursive: do not rudely die on binary merge

When you try to merge a path that involves binary file-level
merge, merge-recursive died rudely without cleaning up its own
mess.  A files added by the merge were left in the working tree,
but the index was not written out (because it just punted and
died), so it was cumbersome for the user to retry it by first
running ""git reset --hard"".

This changes merge-recursive to still warn but do the ""binary""
merge for such a path; leave the ""our"" version in the working
tree, but still keep the path unmerged so that the user can sort
it out.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/hunk_8164.cpp,,,data/crawl/git/old_hunk_8164.cpp,data/crawl/git/new_hunk_8164.cpp,5,5,"error(""Cannot merge binary files: %s vs. %s\n"",
			name1, name2);","warning(""Cannot merge binary files: %s vs. %s\n"",
			name1, name2);","[""updateLog""]","[[""error""], [""warning""]]",[-12673116343364361700],6198,"1204 days, 16:00:00"
https://github.com/git/git/commit/3a429d0af342d85ef6d561e3a60ae8793a34ae78,21 May 2015,"remote.c: report specific errors from branch_get_upstream

When the previous commit introduced the branch_get_upstream
helper, there was one call-site that could not be converted:
the one in sha1_name.c, which gives detailed error messages
for each possible failure.

Let's teach the helper to optionally report these specific
errors. This lets us convert another callsite, and means we
can use the helper in other locations that want to give the
same error messages.

The logic and error messages come straight from sha1_name.c,
with the exception that we start each error with a lowercase
letter, as is our usual style (note that a few tests need
updated as a result).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_3195.cpp,,,data/crawl/git/old_hunk_3195.cpp,data/crawl/git/new_hunk_3195.cpp,-1,18,,"error_buf(err, _(""HEAD does not point to a branch""));","[""addLog""]","[[], [""error_buf"", ""err"", ""_"", ""HEAD"", ""does"", ""not"", ""point"", ""to"", ""a"", ""branch""]]",[-20856229981494321644],6197,"199 days, 16:00:00"
https://github.com/git/git/commit/1e1ea69fa4e5fb20baefe9e5422527e971d56a86,15 Jun 2015,"pull: implement skeletal builtin pull

For the purpose of rewriting git-pull.sh into a C builtin, implement a
skeletal builtin/pull.c that redirects to $GIT_EXEC_PATH/git-pull.sh if
the environment variable _GIT_USE_BUILTIN_PULL is not defined. This
allows us to fall back on the functional git-pull.sh when running the
test suite for tests that depend on a working git-pull implementation.

This redirection should be removed when all the features of git-pull.sh
have been re-implemented in builtin/pull.c.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_3155.cpp,,,data/crawl/git/old_hunk_3155.cpp,data/crawl/git/new_hunk_3155.cpp,-1,26,,"die_errno(""could not exec %s"", path);","[""addLog""]","[[], [""die_errno"", ""could"", ""not"", ""exec"", ""%s"", ""path""]]",[6105684898101537902],6196,"211 days, 0:00:00"
https://github.com/git/git/commit/bc9204d4ef6e0672389fdfb0d398fa9a39dba3d5,01 Aug 2016,"merge-recursive: flush output buffer before printing error messages

The data structure passed to the recursive merge machinery has a feature
where the caller can ask for the output to be buffered into a strbuf, by
setting the field 'buffer_output'.

Previously, we died without flushing, losing accumulated output.  With
this patch, we show the output first, and only then print the error
message.

Currently, the only user of that buffering is merge_recursive() itself,
to avoid the progress output to interfere.

In the next patches, we will introduce a new buffer_output mode that
forces merge_recursive() to retain the output buffer for further
processing by the caller. If the caller asked for that, we will then
also write the error messages into the output buffer. This is necessary
to give the caller more control not only how to react in case of errors
but also control how/if to display the error messages.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_1628.cpp,,,data/crawl/git/old_hunk_1628.cpp,data/crawl/git/new_hunk_1628.cpp,-1,6,,"fputs(o->obuf.buf, stdout);","[""addLog""]","[[], [""fputs"", ""o"", ""obuf"", ""buf"", ""stdout""]]",[-11907005790095783284],6195,"69 days, 8:00:00"
https://github.com/git/git/commit/b1456605c26eb6bd991b70b0ca0a3ce0f02473e9,18 Jun 2015,"pull: remove redirection to git-pull.sh

At the beginning of the rewrite of git-pull.sh to C, we introduced a
redirection to git-pull.sh if the environment variable
_GIT_USE_BUILTIN_PULL was not defined in order to not break test scripts
that relied on a functional git-pull.

Now that all of git-pull's functionality has been re-implemented in
builtin/pull.c, remove this redirection, and retire the old git-pull.sh
into contrib/examples/.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_3137.cpp,,,data/crawl/git/old_hunk_3137.cpp,data/crawl/git/new_hunk_3137.cpp,7,-1,"die_errno(""could not exec %s"", path);",,"[""removeLog""]","[[""die_errno"", ""could"", ""not"", ""exec"", ""%s"", ""path""], []]",[-6105684898101537902],6194,"209 days, 16:00:00"
https://github.com/git/git/commit/7b9c0a69a5f64fffb5de8b49a96f41ac35b4a84f,07 Jul 2008,"git-commit-tree: make it usable from other builtins

Move all functionality (except option parsing) from cmd_commit_tree() to
commit_tree(), so that other builtins can use it without a child
process.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_7034.cpp,,,data/crawl/git/old_hunk_7034.cpp,data/crawl/git/new_hunk_7034.cpp,17,-1,"die(""Not a valid object name %s"", argv[1]);",,"[""removeLog""]","[[""die"", ""Not"", ""a"", ""valid"", ""object"", ""name"", ""%s"", ""argv[1]""], []]",[13136887408697166590],6193,"1046 days, 16:00:00"
https://github.com/git/git/commit/b44ebb19e3234c5dffe9869ceac5408bb44c2e20,09 Apr 2008,"Add platform-independent .git ""symlink""

This patch allows .git to be a regular textfile containing the path of
the real git directory (prefixed with ""gitdir: ""), which can be useful on
platforms lacking support for real symlinks.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7269.cpp,,,data/crawl/git/old_hunk_7269.cpp,data/crawl/git/new_hunk_7269.cpp,-1,32,,"die(""No path in gitfile: %s"", path);","[""addLog""]","[[], [""die"", ""No"", ""path"", ""in"", ""gitfile"", ""%s"", ""path""]]",[10252895552164965996],6192,"1943 days, 16:00:00"
https://github.com/git/git/commit/b44ebb19e3234c5dffe9869ceac5408bb44c2e20,09 Apr 2008,"Add platform-independent .git ""symlink""

This patch allows .git to be a regular textfile containing the path of
the real git directory (prefixed with ""gitdir: ""), which can be useful on
platforms lacking support for real symlinks.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7269.cpp,,,data/crawl/git/old_hunk_7269.cpp,data/crawl/git/new_hunk_7269.cpp,-1,28,,"die(""Invalid gitfile format: %s"", path);","[""addLog""]","[[], [""die"", ""Invalid"", ""gitfile"", ""format"", ""%s"", ""path""]]",[833715539263737418],6191,"1943 days, 16:00:00"
https://github.com/git/git/commit/b44ebb19e3234c5dffe9869ceac5408bb44c2e20,09 Apr 2008,"Add platform-independent .git ""symlink""

This patch allows .git to be a regular textfile containing the path of
the real git directory (prefixed with ""gitdir: ""), which can be useful on
platforms lacking support for real symlinks.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7269.cpp,,,data/crawl/git/old_hunk_7269.cpp,data/crawl/git/new_hunk_7269.cpp,-1,25,,"die(""Error reading %s"", path);","[""addLog""]","[[], [""die"", ""Error"", ""reading"", ""%s"", ""path""]]",[6728088579270477266],6190,"1943 days, 16:00:00"
https://github.com/git/git/commit/b0176ce6b5d954a747dc4d0c5a8593ed576714c4,22 Mar 2017,"builtin/describe: introduce --broken flag

git-describe tells you the version number you're at, or errors out, e.g.
when you run it outside of a repository, which may happen when downloading
a tar ball instead of using git to obtain the source code.

To keep this property of only erroring out, when not in a repository,
severe (submodule) errors must be downgraded to reporting them gently
instead of having git-describe error out completely.

To achieve that a flag '--broken' is introduced, which is in the same
vein as '--dirty' but uses an actual child process to check for dirtiness.
When that child dies unexpectedly, we'll append '-broken' instead of
'-dirty'.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_754.cpp,,,data/crawl/git/old_hunk_754.cpp,data/crawl/git/new_hunk_754.cpp,4,4,"printf(""%s"", dirty);","printf(""%s"", suffix);","[""updateVariable""]","[[""dirty""], [""suffix""]]",[-4864275975251276912],6189,0:00:00
https://github.com/git/git/commit/6a338149f623f493525324bc0f8d7bb9257cb840,24 Mar 2017,"tag: implicitly supply --list given another list-like option

Change the ""tag"" command to implicitly turn on its --list mode when
provided with a list-like option such as --contains, --points-at etc.

This is for consistency with how ""branch"" works. When ""branch"" is
given a list-like option, such as --contains, it implicitly provides
--list. Before this change ""tag"" would error out on those sorts of
invocations. I.e. while both of these worked for ""branch"":

    git branch --contains v2.8.0 <pattern>
    git branch --list --contains v2.8.0 <pattern>

Only the latter form worked for ""tag"":

    git tag --contains v2.8.0 '*rc*'
    git tag --list --contains v2.8.0 '*rc*'

Now ""tag"", like ""branch"", will implicitly supply --list when a
list-like option is provided, and no other conflicting non-list
options (such as -d) are present on the command-line.

Spelunking through the history via:

    git log --reverse -p -G'only allowed with' -- '*builtin*tag*c'

Reveals that there was no good reason for not allowing this in the
first place. The --contains option added in 32c35cfb1e (""git-tag: Add
--contains option"", 2009-01-26) made this an error. All the other
subsequent list-like options that were added copied its pattern of
making this usage an error.

The only tests that break as a result of this change are tests that
were explicitly checking that this ""branch-like"" usage wasn't
permitted. Change those failing tests to check that this invocation
mode is permitted, add extra tests for the list-like options we
weren't testing, and tests to ensure that e.g. we don't toggle the
list mode in the presence of other conflicting non-list options.

With this change errors messages such as ""--contains option is only
allowed with -l"" don't make sense anymore, since options like
--contain turn on -l. Instead we error out when list-like options such
as --contain are used in conjunction with conflicting options such as
-d or -v.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/hunk_746.cpp,,,data/crawl/git/old_hunk_746.cpp,data/crawl/git/new_hunk_746.cpp,7,7,"die(_(""--points-at option is only allowed with -l.""));","die(_(""--points-at option is only allowed in list mode""));","[""updateContent""]","[[""with"", ""l""], [""in"", ""list"", ""mode""]]",[1332390235334753967],6188,0:00:00
https://github.com/git/git/commit/9fd750461befcaf984d5966606308c8cd6912f3c,08 May 2017,"Convert the verify_pack callback to struct object_id

Make the verify_pack_callback take a pointer to struct object_id.
Change the pack checksum to use GIT_MAX_RAWSZ, even though it is not
strictly an object ID.  Doing so ensures resilience against future hash
size changes, and allows us to remove hard-coded assumptions about how
big the buffer needs to be.

Also, use a union to convert the pointer from nth_packed_object_sha1 to
to a pointer to struct object_id.  This behavior is compatible with GCC
and clang and explicitly sanctioned by C11.  The alternatives are to
just perform a cast, which would run afoul of strict aliasing rules, but
should just work, and changing the pointer into an instance of struct
object_id and copying the value.  The latter operation could seriously
bloat memory usage on fsck, which already uses a lot of memory on some
repositories.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_526.cpp,,,data/crawl/git/old_hunk_526.cpp,data/crawl/git/new_hunk_526.cpp,6,6,"error(""packed %s from %s is corrupt"",
				    sha1_to_hex(entries[i].sha1), p->pack_name);","error(""packed %s from %s is corrupt"",
				    oid_to_hex(entries[i].oid.oid), p->pack_name);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1""], [""oid_to_hex"", ""oid"", ""oid""]]",[15833248259517887995],6187,0:00:00
https://github.com/git/git/commit/5590215b1392b4f094f60d7db7a3c796b8bc9aae,09 Jan 2017,"pathspec: create strip submodule slash helpers

Factor out the logic responsible for stripping the trailing slash on
pathspecs referencing submodules into its own function.

Signed-off-by: Brandon Williams <bmwill@google.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/hunk_865.cpp,,,data/crawl/git/old_hunk_865.cpp,data/crawl/git/new_hunk_865.cpp,-1,35,,"die(_(""Pathspec '%s' is in submodule '%.*s'""),
			    item->original, ce_len, ce->name);","[""addLog""]","[[], [""die"", ""_"", ""Pathspec"", ""%s"", ""is"", ""in"", ""submodule"", ""%"", ""*s"", ""item"", ""original"", ""ce_len"", ""ce"", ""name""]]",[-30603480383882539853],6186,"41 days, 0:00:00"
https://github.com/git/git/commit/8a43b36ac225304f31730465c9c8e8ba77695a7d,14 Jun 2013,"git-remote-mediawiki: add newline in the end of die() error messages

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_3608.cpp,,,data/crawl/git/old_hunk_3608.cpp,data/crawl/git/new_hunk_3608.cpp,3,3,"die(""Unknown error from mw_push_file()"");","die(""Unknown error from mw_push_file()\n"");","[""updateContent""]","[[], [""\\n""]]",[11776070748106360],6185,"950 days, 0:00:00"
https://github.com/git/git/commit/8449528deb6826fac5e6a9a312b45b4522ef7ebb,24 May 2017,"blame: move stat counters to scoreboard

Statistic counters are used in parts of blame that are being moved to
libgit, and should be accessible via the scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_437.cpp,,,data/crawl/git/old_hunk_437.cpp,data/crawl/git/new_hunk_437.cpp,5,5,"printf(""num commits: %d\n"", num_commits);","printf(""num commits: %d\n"", sb.num_commits);","[""removeVariable"", ""addVariable""]","[[], [""sb""]]",[14720088435132921],6184,0:00:00
https://github.com/git/git/commit/ffcabccf5df17f12997feedafefeb5589b8c0511,11 Sep 2012,"blame $path: avoid getting fooled by case insensitive filesystems

""git blame MAKEFILE"" run in a history that has ""Makefile"" but not
MAKEFILE can get confused on a case insensitive filesystem, because
the check we run to see if there is a corresponding file in the
working tree with lstat(""MAKEFILE"") succeeds.  In addition to that
check, we have to make sure that the given path also exists in the
commit we start digging history from (i.e. ""HEAD"").

Note that this reveals the breakage in a test added in cd8ae20
(git-blame shouldn't crash if run in an unmerged tree, 2007-10-18),
which expects the entire merge-in-progress path to be blamed to the
working tree when it did not exist in our tree.  As it is clear in
the log message of that commit, the old breakage was that it was
causing an internal error and the fix was about avoiding it.

Just check that the command does not die an uncontrolled death.  For
this particular case, the blame should fail, as the history for the
file in that contents has not been committed yet at the point in the
test.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4125.cpp,,,data/crawl/git/old_hunk_4125.cpp,data/crawl/git/new_hunk_4125.cpp,4,-1,"die(""No such ref: HEAD"");",,"[""removeLog""]","[[""die"", ""No"", ""such"", ""ref"", ""HEAD""], []]",[-4805078336747600871],6183,"572 days, 8:00:00"
https://github.com/git/git/commit/ffcabccf5df17f12997feedafefeb5589b8c0511,11 Sep 2012,"blame $path: avoid getting fooled by case insensitive filesystems

""git blame MAKEFILE"" run in a history that has ""Makefile"" but not
MAKEFILE can get confused on a case insensitive filesystem, because
the check we run to see if there is a corresponding file in the
working tree with lstat(""MAKEFILE"") succeeds.  In addition to that
check, we have to make sure that the given path also exists in the
commit we start digging history from (i.e. ""HEAD"").

Note that this reveals the breakage in a test added in cd8ae20
(git-blame shouldn't crash if run in an unmerged tree, 2007-10-18),
which expects the entire merge-in-progress path to be blamed to the
working tree when it did not exist in our tree.  As it is clear in
the log message of that commit, the old breakage was that it was
causing an internal error and the fix was about avoiding it.

Just check that the command does not die an uncontrolled death.  For
this particular case, the blame should fail, as the history for the
file in that contents has not been committed yet at the point in the
test.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4124.cpp,,,data/crawl/git/old_hunk_4124.cpp,data/crawl/git/new_hunk_4124.cpp,-1,9,,"die(""no such ref: HEAD"");","[""addLog""]","[[], [""die"", ""no"", ""such"", ""ref"", ""HEAD""]]",[4805078336747600871],6182,"572 days, 8:00:00"
https://github.com/git/git/commit/ffcabccf5df17f12997feedafefeb5589b8c0511,11 Sep 2012,"blame $path: avoid getting fooled by case insensitive filesystems

""git blame MAKEFILE"" run in a history that has ""Makefile"" but not
MAKEFILE can get confused on a case insensitive filesystem, because
the check we run to see if there is a corresponding file in the
working tree with lstat(""MAKEFILE"") succeeds.  In addition to that
check, we have to make sure that the given path also exists in the
commit we start digging history from (i.e. ""HEAD"").

Note that this reveals the breakage in a test added in cd8ae20
(git-blame shouldn't crash if run in an unmerged tree, 2007-10-18),
which expects the entire merge-in-progress path to be blamed to the
working tree when it did not exist in our tree.  As it is clear in
the log message of that commit, the old breakage was that it was
causing an internal error and the fix was about avoiding it.

Just check that the command does not die an uncontrolled death.  For
this particular case, the blame should fail, as the history for the
file in that contents has not been committed yet at the point in the
test.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4124.cpp,,,data/crawl/git/old_hunk_4124.cpp,data/crawl/git/new_hunk_4124.cpp,-1,11,,"die(""no such path '%s' in HEAD"", path);","[""addLog""]","[[], [""die"", ""no"", ""such"", ""path"", ""%s"", ""in"", ""HEAD"", ""path""]]",[12351473903259394770],6181,"1041 days, 0:00:00"
https://github.com/git/git/commit/aedcb7dc75e5c260f20bebe14925f3ac4841b03d,25 Sep 2015,"branch.c: use 'ref-filter' APIs

Make 'branch.c' use 'ref-filter' APIs for iterating through refs
sorting. This removes most of the code used in 'branch.c' replacing it
with calls to the 'ref-filter' library.

Make 'branch.c' use the 'filter_refs()' function provided by 'ref-filter'
to filter out tags based on the options set.

We provide a sorting option provided for 'branch.c' by using the
sorting options provided by 'ref-filter'. Also by default, we sort by
'refname'.  Since 'HEAD' is alphabatically before 'refs/...' we end up
with an array consisting of the 'HEAD' ref then the local branches and
finally the remote-tracking branches.

Also remove the 'ignore' variable from ref_array_item as it was
previously used for the '--merged' option and now that is handled by
ref-filter.

Modify some of the tests in t1430 to check the stderr for a warning
regarding the broken ref. This is done as ref-filter throws a warning
for broken refs rather than directly printing them.

Add tests and documentation for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2772.cpp,,,data/crawl/git/old_hunk_2772.cpp,data/crawl/git/new_hunk_2772.cpp,28,-1,"die(_(""revision walk setup failed""));",,"[""removeLog""]","[[""die"", ""_"", ""revision"", ""walk"", ""setup"", ""failed""], []]",[17150171457883954768],6180,"405 days, 8:00:00"
https://github.com/git/git/commit/700fd28e4f3ecd6e7b5f8f2098e62ffef9ab958b,30 Oct 2015,"blame: allow blame --reverse --first-parent when it makes sense

Allow combining --reverse and --first-parent if initial commit of
specified range is at the first-parent chain starting from the final
commit. Disable the prepare_revision_walk()'s builtin children
collection, instead picking only the ones which are along the first
parent chain.

Signed-off-by: Max Kirillov <max@max630.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2625.cpp,,,data/crawl/git/old_hunk_2625.cpp,data/crawl/git/new_hunk_2625.cpp,-1,14,,"die(""BUG: not unique item in first-parent chain"");","[""addLog""]","[[], [""die"", ""BUG"", ""not"", ""unique"", ""item"", ""in"", ""first"", ""parent"", ""chain""]]",[-5086867976014952884],6179,"382 days, 0:00:00"
https://github.com/git/git/commit/12da1d1f6ffcd546a892a33302bb34fd37169022,28 Mar 2013,"Implement line-history search (git log -L)

This is a rewrite of much of Bo's work, mainly in an effort to split
it into smaller, easier to understand routines.

The algorithm is built around the struct range_set, which encodes a
series of line ranges as intervals [a,b).  This is used in two
contexts:

* A set of lines we are tracking (which will change as we dig through
  history).
* To encode diffs, as pairs of ranges.

The main routine is range_set_map_across_diff().  It processes the
diff between a commit C and some parent P.  It determines which diff
hunks are relevant to the ranges tracked in C, and computes the new
ranges for P.

The algorithm is then simply to process history in topological order
from newest to oldest, computing ranges and (partial) diffs.  At
branch points, we need to merge the ranges we are watching.  We will
find that many commits do not affect the chosen ranges, and mark them
TREESAME (in addition to those already filtered by pathspec limiting).
Another pass of history simplification then gets rid of such commits.

This is wired as an extra filtering pass in the log machinery.  This
currently only reduces code duplication, but should allow for other
simplifications and options to be used.

Finally, we hook a diff printer into the output chain.  Ideally we
would wire directly into the diff logic, to optionally use features
like word diff.  However, that will require some major reworking of
the diff chain, so we completely replace the output with our own diff
for now.

As this was a GSoC project, and has quite some history by now, many
people have helped.  In no particular order, thanks go to

  Jakub Narebski <jnareb@gmail.com>
  Jens Lehmann <Jens.Lehmann@web.de>
  Jonathan Nieder <jrnieder@gmail.com>
  Junio C Hamano <gitster@pobox.com>
  Ramsay Jones <ramsay@ramsay1.demon.co.uk>
  Will Palmer <wmpalmer@gmail.com>

Apologies to everyone I forgot.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2158,data/crawl/git/hunk_3790.cpp,,,data/crawl/git/old_hunk_3790.cpp,data/crawl/git/new_hunk_3790.cpp,-1,454,,"die(""Non commit %s?"", revs->pending.objects[i].name);","[""addLog""]","[[], [""die"", ""Non"", ""commit"", ""%s"", ""revs"", ""pending"", ""objects[i]"", ""name""]]",[-7659942789565175390],6178,"1012 days, 16:00:00"
https://github.com/git/git/commit/9ae97018fb2e7f30ab92fdc2965d1dcff2c5c296,25 Sep 2015,"use strip_suffix and xstrfmt to replace suffix

When we want to convert ""foo.pack"" to ""foo.idx"", we do it by
duplicating the original string and then munging the bytes
in place. Let's use strip_suffix and xstrfmt instead, which
has several advantages:

  1. It's more clear what the intent is.

  2. It does not implicitly rely on the fact that
     strlen("".idx"") <= strlen("".pack"") to avoid an overflow.

  3. We communicate the assumption that the input file ends
     with "".pack"" (and get a run-time check that this is so).

  4. We drop calls to strcpy, which makes auditing the code
     base easier.

Likewise, we can do this to convert "".pack"" to "".bitmap"",
avoiding some manual memory computation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_2761.cpp,,,data/crawl/git/old_hunk_2761.cpp,data/crawl/git/new_hunk_2761.cpp,-1,10,,"die(""BUG: pack_name does not end in .pack"");","[""addLog""]","[[], [""die"", ""BUG"", ""pack_name"", ""does"", ""not"", ""end"", ""in"", ""pack""]]",[4253690570284068605],6177,"232 days, 16:00:00"
https://github.com/git/git/commit/d131b7afea58f47721dafd013ab6aff4adfc42dd,02 Mar 2011,"sha1_file.c: Don't retain open fds on small packs

If a pack file is small enough that its entire contents fits within
one mmap window, mmap the file and then immediately close its file
descriptor.  This reduces the number of file descriptors that are
needed to read from repositories with many tiny pack files, such
as one that has received 1000 pushes (and created 1000 small pack
files) since its last repack.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_4810.cpp,,,data/crawl/git/old_hunk_4810.cpp,data/crawl/git/new_hunk_4810.cpp,-1,5,,"die(""packfile %s cannot be accessed"", p->pack_name);","[""addLog""]","[[], [""die"", ""packfile"", ""%s"", ""cannot"", ""be"", ""accessed"", ""p"", ""pack_name""]]",[-3986520777584758644],6176,"1577 days, 8:00:00"
https://github.com/git/git/commit/8eca0b47ff1598a6d163df9358c0e0c9bd92d4c8,24 Jun 2008,"implement some resilience against pack corruptions

We should be able to fall back to loose objects or alternative packs when
a pack becomes corrupted.  This is especially true when an object exists
in one pack only as a delta but its base object is corrupted.  Currently
there is no way to retrieve the former object even if the later is
available in another pack or loose.

This patch allows for a delta to be resolved (with a performance cost)
using a base object from a source other than the pack where that delta
is located.  Same thing for non-delta objects: rather than failing
outright, a search is made in other packs or used loose when the
currently active pack has it but corrupted.

Of course git will become extremely noisy with error messages when that
happens.  However, if the operation succeeds nevertheless, a simple
'git repack -a -f -d' will ""fix"" the corrupted repository given that all
corrupted objects have a good duplicate somewhere in the object store,
possibly manually copied from another source.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/hunk_7059.cpp,,,data/crawl/git/old_hunk_7059.cpp,data/crawl/git/new_hunk_7059.cpp,-1,32,,"error(""failed to unpack compressed delta ""
		      ""at offset %""PRIuMAX"" from %s"",
		      (uintmax_t)curpos, p->pack_name);","[""addLog""]","[[], [""error"", ""failed"", ""to"", ""unpack"", ""compressed"", ""delta"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""]]",[5603733488353824519],6175,"1694 days, 16:00:00"
https://github.com/git/git/commit/958f964691a250d9a7173f1c0a4c03fd9e71e2aa,17 Apr 2017,"refs: split `ref_cache` code into separate files

The `ref_cache` code is currently too tightly coupled to
`files-backend`, making the code harder to understand and making it
awkward for new code to use `ref_cache` (as we indeed have planned).
Start loosening that coupling by splitting `ref_cache` into a separate
module.

This commit moves code, adds declarations, and changes the visibility
of some functions, but doesn't change any code.

The modules are still too tightly coupled, but the situation will be
improved in subsequent commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1500,data/crawl/git/hunk_662.cpp,,,data/crawl/git/old_hunk_662.cpp,data/crawl/git/new_hunk_662.cpp,196,-1,"die(""Reference has invalid format: '%s'"", refname);",,"[""removeLog""]","[[""die"", ""Reference"", ""has"", ""invalid"", ""format"", ""%s"", ""refname""], []]",[354143934257542070],6174,"60 days, 0:00:00"
https://github.com/git/git/commit/3b34934dcaa4e643a3691ba1f10db054adf60ffb,30 Jan 2018,"match-trees: convert splice_tree to object_id

Convert the definition of static recursive splice_tree function to use
struct object_id and adjust single caller.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_137.cpp,,,data/crawl/git/old_hunk_137.cpp,data/crawl/git/new_hunk_137.cpp,11,11,"die(""entry %.*s not found in tree %s"",
		    toplen, prefix, sha1_to_hex(hash1));","die(""entry %.*s not found in tree %s"", toplen, prefix,
		    oid_to_hex(oid1));","[""updateVariable""]","[[""sha1_to_hex"", ""hash1""], [""oid_to_hex"", ""oid1""]]",[8870251068818184513],6173,0:00:00
https://github.com/git/git/commit/efdfe11f4f1f901db1ebfa7ebda6337293a2e5c5,22 Feb 2018,"replace: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_7.cpp,,,data/crawl/git/old_hunk_7.cpp,data/crawl/git/new_hunk_7.cpp,9,9,"error(""new commit is the same as the old one: '%s'"", oid_to_hex(&old));","error(""new commit is the same as the old one: '%s'"", oid_to_hex(&old_oid));","[""updateVariable""]","[[""&old""], [""&old_oid""]]",[3537147147019379151],6172,0:00:00
https://github.com/git/git/commit/5751f49010ec54164b93529e31165e71f5996856,21 May 2007,"Move remote parsing into a library file out of builtin-push.

The new parser is different from the one in builtin-push in two ways:
the default is to use the current branch's remote, if there is one,
before ""origin""; and config is used in preference to remotes.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",436,data/crawl/git/hunk_8406.cpp,,,data/crawl/git/old_hunk_8406.cpp,data/crawl/git/new_hunk_8406.cpp,67,-1,"error(""more than %d URL's specified, ignoring the rest"", MAX_URI);",,"[""removeLog""]","[[""error"", ""more"", ""than"", ""%d"", ""URL"", ""s"", ""specified"", ""ignoring"", ""the"", ""rest"", ""MAX_URI""], []]",[13665103778046776350],6171,0:00:00
https://github.com/git/git/commit/654aaa37ab5c70650bdd16d57b56c2d0f9aa43cf,24 May 2007,"Refactor fast-import branch creation from existing commit

To resolve a corner case uncovered by Simon Hausmann I need to
reuse the logic for the SHA-1 expression version of the 'from '
command within the mark version of the 'from ' command.  This change
doesn't alter any functionality, but is merely breaking the common
code out to a function that I can reuse.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",58,data/crawl/git/hunk_8385.cpp,,,data/crawl/git/old_hunk_8385.cpp,data/crawl/git/new_hunk_8385.cpp,25,-1,"die(""The commit %s is corrupt"", sha1_to_hex(b->sha1));",,"[""removeLog""]","[[""die"", ""The"", ""commit"", ""%s"", ""is"", ""corrupt"", ""sha1_to_hex"", ""b"", ""sha1""], []]",[11325061639317482350],6170,0:00:00
https://github.com/git/git/commit/654aaa37ab5c70650bdd16d57b56c2d0f9aa43cf,24 May 2007,"Refactor fast-import branch creation from existing commit

To resolve a corner case uncovered by Simon Hausmann I need to
reuse the logic for the SHA-1 expression version of the 'from '
command within the mark version of the 'from ' command.  This change
doesn't alter any functionality, but is merely breaking the common
code out to a function that I can reuse.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",58,data/crawl/git/hunk_8385.cpp,,,data/crawl/git/old_hunk_8385.cpp,data/crawl/git/new_hunk_8385.cpp,22,-1,"die(""Not a valid commit: %s"", from);",,"[""removeLog""]","[[""die"", ""Not"", ""a"", ""valid"", ""commit"", ""%s"", ""from""], []]",[804818152896557361],6169,0:00:00
https://github.com/git/git/commit/c94bf41c9a78dc1c084f2a2895f95b6b6d8f79b1,03 Jun 2007,"git-apply: what is detected and fixed is not just trailing spaces.

But we kept saying ""trailing whitespace"" all the same.  Reword the
error messages a bit.

Signed-off-by: Junio C Hamano <junkio@cox.net>",17,data/crawl/git/hunk_8335.cpp,,,data/crawl/git/old_hunk_8335.cpp,data/crawl/git/new_hunk_8335.cpp,13,13,"fprintf(stderr, ""warning: %d line%s add%s trailing""
				"" whitespaces.\n"",
				whitespace_error,
				whitespace_error == 1 ? """" : ""s"",
				whitespace_error == 1 ? ""s"" : """");","fprintf(stderr, ""warning: %d line%s add%s whitespace errors.\n"",
				whitespace_error,
				whitespace_error == 1 ? """" : ""s"",
				whitespace_error == 1 ? ""s"" : """");","[""updateContent"", ""removeContent""]","[[""trailing"", ""whitespaces""], [""whitespace"", ""errors""]]",[-4896878778409733641],6168,0:00:00
https://github.com/git/git/commit/3af51928ab7cefa35048e3a5a9e78a127749d405,06 Jun 2007,"pack-check: Sort entries by pack offset before unpacking them.

Because of the way objects are sorted in a pack, unpacking them in
disk order is much more efficient than random access. Tests on the
Wine repository show a gain in pack validation time of about 35%.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_8316.cpp,,,data/crawl/git/old_hunk_8316.cpp,data/crawl/git/new_hunk_8316.cpp,23,27,"error(""packed %s from %s is corrupt"",
				    sha1_to_hex(sha1), p->pack_name);","error(""packed %s from %s is corrupt"",
				    sha1_to_hex(entries[i].sha1), p->pack_name);","[""addVariable""]","[[], [""entries[i]""]]",[-4404340920996770385],6167,0:00:00
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_8314.cpp,,,data/crawl/git/old_hunk_8314.cpp,data/crawl/git/new_hunk_8314.cpp,-1,52,,"die(""Cannot change directory to $%s '%s'"",
			GIT_DIR_ENVIRONMENT, gitdirenv);","[""addLog""]","[[], [""die"", ""Cannot"", ""change"", ""directory"", ""to"", ""%s"", ""%s"", ""GIT_DIR_ENVIRONMENT"", ""gitdirenv""]]",[-13336148212960830689],6166,0:00:00
https://github.com/git/git/commit/493c774e58a05bbbac06e4ae1654ca3d24e4e5cf,06 Jun 2007,"rev-parse: introduce --is-bare-repository

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_8315.cpp,,,data/crawl/git/old_hunk_8315.cpp,data/crawl/git/new_hunk_8315.cpp,-1,4,,"printf(""%s\n"", is_bare_repository() ? ""true""
						: ""false"");","[""addLog""]","[[], [""printf"", ""%s\\n"", ""is_bare_repository"", ""true"", ""false""]]",[19968682023284076473],6165,0:00:00
https://github.com/git/git/commit/f4f51add2712293b7bc9e7aaebf6a589bb37c7c7,06 Jun 2007,"setup_git_directory: fix segfault if repository is found in cwd

Additionally there was a similar part calling setenv and getenv
in the same way which missed a check if getenv succeeded.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_8310.cpp,,,data/crawl/git/old_hunk_8310.cpp,data/crawl/git/new_hunk_8310.cpp,-1,4,,"die(""getenv after setenv failed"");","[""addLog""]","[[], [""die"", ""getenv"", ""after"", ""setenv"", ""failed""]]",[-20748739487793949337],6164,0:00:00
https://github.com/git/git/commit/54a8ad925cfac90bb4141c9904b1f97f0c5b83d4,09 Jun 2007,"remote.c: refactor match_explicit_refs()

This does not change functionality; just splits one block that
is deeply nested and indented out of a huge loop into a separate
function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",159,data/crawl/git/hunk_8298.cpp,,,data/crawl/git/old_hunk_8298.cpp,data/crawl/git/new_hunk_8298.cpp,37,36,"error(""src refspec %s matches more than one."",
			      rs[i].src);","error(""src refspec %s matches more than one."",
		      rs->src);","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""rs[i]""], [""rs""]]",[2448453124578158112],6163,0:00:00
https://github.com/git/git/commit/9f30855d0ff5206e85e45f0307be9d18ffda41d3,05 Jun 2007,"merge-recursive: refuse to merge binary files

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_8323.cpp,,,data/crawl/git/old_hunk_8323.cpp,data/crawl/git/new_hunk_8323.cpp,-1,6,,"error(""Cannot merge binary files: %s vs. %s\n"",
			name1, name2);","[""addLog""]","[[], [""error"", ""Cannot"", ""merge"", ""binary"", ""files"", ""%s"", ""vs"", ""%s\\n"", ""name1"", ""name2""]]",[11482154405344774250],6162,"5 days, 12:00:00"
https://github.com/git/git/commit/7cbf2f24ee8430fbf48a2c6f106f22adf9df62e1,16 Jun 2007,"Do not use h_errno after connect(2): the function does not set it

Randal L. Schwartz noticed compilation problems on SunOS, which made
me look at the code again. The thing is, h_errno is not used by
connect(2), it is only for functions from netdb.h, like gethostbyname.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_8281.cpp,,,data/crawl/git/old_hunk_8281.cpp,data/crawl/git/new_hunk_8281.cpp,3,3,"fprintf(stderr, ""%s[%d: %s]: net=%s, errno=%s\n"",
				host,
				cnt,
				inet_ntoa(*(struct in_addr *)&sa.sin_addr),
				hstrerror(h_errno),
				strerror(saved_errno));","fprintf(stderr, ""%s[%d: %s]: errno=%s\n"",
				host,
				cnt,
				inet_ntoa(*(struct in_addr *)&sa.sin_addr),
				strerror(saved_errno));","[""removeVariable"", ""updateContent""]","[[""net"", ""%s"", ""hstrerror"", ""h_errno""], []]",[448963206568031702],6161,0:00:00
https://github.com/git/git/commit/c9b50e6307aa9931e18b6cd4d00de817b8e4a4c2,29 Mar 2007,"Fix the docs for git-p4 submit and turn git-p4 submit --master=foo into
simply git-p4 submit mytopicbranch.

Signed-off-by: Simon Hausmann <hausmann@kde.org>",41,data/crawl/git/hunk_8412.cpp,,,data/crawl/git/old_hunk_8412.cpp,data/crawl/git/new_hunk_8412.cpp,-1,7,,"die(""Detecting current git branch failed!"");","[""addLog""]","[[], [""die"", ""Detecting"", ""current"", ""git"", ""branch"", ""failed""]]",[-31310291257216045315],6160,"42 days, 12:00:00"
https://github.com/git/git/commit/51a2640afdd12475642728dc3576966abe0dba6d,15 Apr 2007,"Handle patch errors in git-p4 submit better.

Signed-off-by: Simon Hausmann <simon@lst.de>",38,data/crawl/git/hunk_8411.cpp,,,data/crawl/git/old_hunk_8411.cpp,data/crawl/git/new_hunk_8411.cpp,-1,23,,"die(""Please resolve and submit the conflict manually and continue afterwards with git-p4 submit --continue"");","[""addLog""]","[[], [""die"", ""Please"", ""resolve"", ""and"", ""submit"", ""the"", ""conflict"", ""manually"", ""and"", ""continue"", ""afterwards"", ""with"", ""git"", ""p4"", ""submit"", ""continue""]]",[28162736179951678947],6159,"34 days, 0:00:00"
https://github.com/git/git/commit/66a2f523958129e9b697d30ed44a5174010cb42a,23 May 2007,"Catch p4 errors in rollback early enough (before deleting refs!)

Signed-off-by: Simon Hausmann <shausman@trolltech.com>",3,data/crawl/git/hunk_8386.cpp,,,data/crawl/git/old_hunk_8386.cpp,data/crawl/git/new_hunk_8386.cpp,-1,4,,"die(""Problems executing p4"");","[""addLog""]","[[], [""die"", ""Problems"", ""executing"", ""p4""]]",[-1902215463677450836],6158,"15 days, 0:00:00"
https://github.com/git/git/commit/125b7630521918b75c136bd95309054d3f6d9da5,25 Jun 2007,"diff: round down similarity index

Rounding down the printed (dis)similarity index allows us to use
""100%"" as a special value that indicates complete rewrites and
fully equal file contents, respectively.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/hunk_8271.cpp,,,data/crawl/git/old_hunk_8271.cpp,data/crawl/git/new_hunk_8271.cpp,2,2,"printf("" rewrite %s (%d%%)\n"", name,
				(int)(0.5 + p->score * 100.0/MAX_SCORE));","printf("" rewrite %s (%d%%)\n"", name,
			       similarity_index(p));","[""updateVariable"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""int"", ""0"", ""5"", ""score"", ""*"", ""100"", ""0/MAX_SCORE""], [""similarity_index""]]",[9315068146075688588],6157,0:00:00
https://github.com/git/git/commit/2275d502114c71045af991697048191fed88aac4,27 Jun 2007,"config: Add --null/-z option for null-delimted output

Use \n as delimiter between key and value and \0 as
delimiter after each key/value pair. This should be
easily parsable output.

Signed-off-by: Frank Lichtenheld <frank@lichtenheld.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/hunk_8268.cpp,,,data/crawl/git/old_hunk_8268.cpp,data/crawl/git/new_hunk_8268.cpp,3,3,"printf(""%s\n"", vptr);","printf(""%s%c"", vptr, term);","[""updateContent"", ""addVariable""]","[[""%s\\n""], [""%s%c"", ""term""]]",[2314058222080390756],6156,0:00:00
https://github.com/git/git/commit/dbd21447361364d646f3972738a475a92f711513,03 Jul 2007,"format-patch: Add format.subjectprefix config option

This change lets you use the format.subjectprefix config option to override the
default subject prefix.

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",79,data/crawl/git/hunk_8250.cpp,,,data/crawl/git/old_hunk_8250.cpp,data/crawl/git/new_hunk_8250.cpp,-1,5,,"die(""format.subjectprefix without value"");","[""addLog""]","[[], [""die"", ""format"", ""subjectprefix"", ""without"", ""value""]]",[-12083052749618482126],6155,12:00:00
https://github.com/git/git/commit/f39a946a1fb0fa4856cd0027b9da3603a1b06fdc,10 Jul 2007,"Support wholesale directory renames in fast-import

Some source material (e.g. Subversion dump files) perform directory
renames without telling us exactly which files in that subdirectory
were moved.  This makes it hard for a frontend to convert such data
formats to a fast-import stream, as all the frontend has on hand
is ""Rename a/ to b/"" with no details about what files are in a/,
unless the frontend also kept track of all files.

The new 'R' subcommand within a commit allows the frontend to
rename either a file or an entire subdirectory, without needing to
know the object's SHA-1 or the specific files contained within it.
The rename is performed as efficiently as possible internally,
making it cheaper than a 'D'/'M' pair for a file rename.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",187,data/crawl/git/hunk_8226.cpp,,,data/crawl/git/old_hunk_8226.cpp,data/crawl/git/new_hunk_8226.cpp,-1,23,,"die(""Missing space after source: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Missing"", ""space"", ""after"", ""source"", ""%s"", ""command_buf"", ""buf""]]",[3145402299493290639],6154,0:00:00
https://github.com/git/git/commit/e317cfafd247b279055e9ee64a6a982043bd06e7,21 Jul 2007,"builtin-tag.c: Fix two memory leaks and minor notation changes.

A repeated call to read_sha1_file was not freing memory
when the buffer was allocated but returned size was zero.

Also, now the program does not allow many -F or -m options,
which was a bug too because it was not freing the memory
allocated for any previous -F or -m options.

Tests are provided for ensuring that only one option
-F or -m is given. Also, another test is shipped here,
to check that ""git tag"" fails when a non-existing file
is passed to the -F option, something that git-tag.sh
allowed creating the tag with an empty message.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/hunk_8210.cpp,,,data/crawl/git/old_hunk_8210.cpp,data/crawl/git/new_hunk_8210.cpp,-1,4,,"die(""only one -F or -m option is allowed."");","[""addLog""]","[[], [""die"", ""only"", ""one"", ""F"", ""or"", ""m"", ""option"", ""is"", ""allowed""]]",[-2896179038426083744],6153,0:00:00
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,210,,"error(""could not run gpg."");","[""addLog""]","[[], [""error"", ""could"", ""not"", ""run"", ""gpg""]]",[16943766928473097384],6152,"3 days, 12:00:00"
https://github.com/git/git/commit/283884422f35594db9eab491d3f8c91e49f9d62f,30 Jul 2007,"symbolic-ref, update-ref: do not refuse reflog message with LF

Earlier these tools refused to create a reflog entry when the
message given by the calling Porcelain had a LF in it, partially
to keep the file format integrity of reflog file, which is
one-entry-per-line.  These tools should not be dictating such a
policy.

Instead, let the codepath to write out the reflog entry worry
about the format integrity and allow messages with LF in them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_8189.cpp,,,data/crawl/git/old_hunk_8189.cpp,data/crawl/git/new_hunk_8189.cpp,4,-1,"die(""Refusing to perform update with \\n in message."");",,"[""removeLog""]","[[""die"", ""Refusing"", ""to"", ""perform"", ""update"", ""with"", ""\\\\n"", ""in"", ""message""], []]",[11325732569063279554],6151,0:00:00
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/hunk_8181.cpp,,,data/crawl/git/old_hunk_8181.cpp,data/crawl/git/new_hunk_8181.cpp,54,-1,"die(""Cannot change directory to $%s '%s'"",
			GIT_DIR_ENVIRONMENT, gitdirenv);",,"[""removeLog""]","[[""die"", ""Cannot"", ""change"", ""directory"", ""to"", ""%s"", ""%s"", ""GIT_DIR_ENVIRONMENT"", ""gitdirenv""], []]",[13336148212960830689],6150,0:00:00
https://github.com/git/git/commit/7647b17f1d7a98362f8bdbe48b30d94ed655229c,15 Aug 2007,"Use xmkstemp() instead of mkstemp()

xmkstemp() performs error checking and prints a standard error message when
an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_8160.cpp,,,data/crawl/git/old_hunk_8160.cpp,data/crawl/git/new_hunk_8160.cpp,5,-1,"die(""unable to create temp-file"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""temp"", ""file""], []]",[705575598582292109],6149,0:00:00
https://github.com/git/git/commit/7647b17f1d7a98362f8bdbe48b30d94ed655229c,15 Aug 2007,"Use xmkstemp() instead of mkstemp()

xmkstemp() performs error checking and prints a standard error message when
an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_8158.cpp,,,data/crawl/git/old_hunk_8158.cpp,data/crawl/git/new_hunk_8158.cpp,5,-1,"die(""Can't create %s: %s"", tmpfile, strerror(errno));",,"[""removeLog""]","[[""die"", ""Can"", ""t"", ""create"", ""%s"", ""%s"", ""tmpfile"", ""strerror"", ""errno""], []]",[444892091573036719],6148,0:00:00
https://github.com/git/git/commit/aa7e44bf571717aeb4435e6605391d51f3117047,02 Jun 2007,"Unify write_index_file functions

This patch unifies the write_index_file functions in
builtin-pack-objects.c and index-pack.c.  As the name
""index"" is overloaded in git, move in the direction of
using ""idx"" and ""pack idx"" when refering to the pack index.
There should be no change in functionality.

Signed-off-by: Geert Bosch <bosch@gnat.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",586,data/crawl/git/hunk_8342.cpp,,,data/crawl/git/old_hunk_8342.cpp,data/crawl/git/new_hunk_8342.cpp,29,-1,"die(""unable to create %s: %s\n"", tmpname, strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""%s"", ""%s\\n"", ""tmpname"", ""strerror"", ""errno""], []]",[-23094754164138738382],6147,"37 days, 0:00:00"
https://github.com/git/git/commit/f34f2b0b384b42f7a0d0d92966c145b05fe55217,16 Aug 2007,"Fix read-tree merging more than 3 trees using 3-way merge

For multi-base merges, we allowed read-tree -m to take more than
three trees (the last two are our and their branches, and all the
earlier ones, typically one but potentially more, are used as the
merge base).  Unfortunately, the conversion done by commit 933bf40
broke this.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_8154.cpp,,,data/crawl/git/old_hunk_8154.cpp,data/crawl/git/new_hunk_8154.cpp,-1,4,,"die(""I cannot read more than %d trees"", MAX_TREES);","[""addLog""]","[[], [""die"", ""I"", ""cannot"", ""read"", ""more"", ""than"", ""%d"", ""trees"", ""MAX_TREES""]]",[-3912694685578555372],6146,12:00:00
https://github.com/git/git/commit/3d9f037c60ceae1bd60ee3c861564812a89b05b1,05 Sep 2007,"Function for updating refs.

A function intended to be called from builtins updating refs
by locking them before write, specially those that came from
scripts using ""git update-ref"".

[jc: with minor fixups]

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_8125.cpp,,,data/crawl/git/old_hunk_8125.cpp,data/crawl/git/new_hunk_8125.cpp,-1,23,,"die(str, refname);","[""addLog""]","[[], [""die"", ""str"", ""refname""]]",[5292160224462343340],6145,0:00:00
https://github.com/git/git/commit/3d9f037c60ceae1bd60ee3c861564812a89b05b1,05 Sep 2007,"Function for updating refs.

A function intended to be called from builtins updating refs
by locking them before write, specially those that came from
scripts using ""git update-ref"".

[jc: with minor fixups]

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_8125.cpp,,,data/crawl/git/old_hunk_8125.cpp,data/crawl/git/new_hunk_8125.cpp,-1,22,,"error(str, refname);","[""addLog""]","[[], [""error"", ""str"", ""refname""]]",[15502385817665198522],6144,0:00:00
https://github.com/git/git/commit/b449f4cfc972929b638b90d375b8960c37790618,07 Sep 2007,"Rework strbuf API and semantics.

  The gory details are explained in strbuf.h. The change of semantics this
patch enforces is that the embeded buffer has always a '\0' character after
its last byte, to always make it a C-string. The offs-by-one changes are all
related to that very change.

  A strbuf can be used to store byte arrays, or as an extended string
library. The `buf' member can be passed to any C legacy string function,
because strbuf operations always ensure there is a terminating \0 at the end
of the buffer, not accounted in the `len' field of the structure.

  A strbuf can be used to generate a string/buffer whose final size is not
really known, and then ""strbuf_detach"" can be used to get the built buffer,
and keep the wrapping ""strbuf"" structure usable for further work again.

  Other interesting feature: strbuf_grow(sb, size) ensure that there is
enough allocated space in `sb' to put `size' new octets of data in the
buffer. It helps avoiding reallocating data for nothing when the problem the
strbuf helps to solve has a known typical size.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",208,data/crawl/git/hunk_8112.cpp,,,data/crawl/git/old_hunk_8112.cpp,data/crawl/git/new_hunk_8112.cpp,-1,25,,"die(""you want to use way too much memory"");","[""addLog""]","[[], [""die"", ""you"", ""want"", ""to"", ""use"", ""way"", ""too"", ""much"", ""memory""]]",[-23080602614325183519],6143,"5 days, 0:00:00"
https://github.com/git/git/commit/917c9a713397b16671ed5b1f1c159515bcfa389e,17 Sep 2007,"New strbuf APIs: splice and attach.

* strbuf_splice replace a portion of the buffer with another.
* strbuf_attach replace a strbuf buffer with the given one, that should be
  malloc'ed. Then it enforces strbuf's invariants. If alloc > len, then this
  function has negligible cost, else it will perform a realloc, possibly
  with a cost.

Also some style issues are fixed now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/hunk_8078.cpp,,,data/crawl/git/old_hunk_8078.cpp,data/crawl/git/new_hunk_8078.cpp,-1,19,,"die(""`pos' is too far after the end of the buffer"");","[""addLog""]","[[], [""die"", ""pos"", ""is"", ""too"", ""far"", ""after"", ""the"", ""end"", ""of"", ""the"", ""buffer""]]",[-15633573900666038127],6142,0:00:00
https://github.com/git/git/commit/80bffaf7fbe09ef62ecb9a6ffea70ac0171b456c,12 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8084.cpp,,,data/crawl/git/old_hunk_8084.cpp,data/crawl/git/new_hunk_8084.cpp,-1,9,,"die(""ls-files --with-tree is incompatible with -s or -u"");","[""addLog""]","[[], [""die"", ""ls"", ""files"", ""with"", ""tree"", ""is"", ""incompatible"", ""with"", ""s"", ""or"", ""u""]]",[-10018229190101635562],6141,"3 days, 0:00:00"
https://github.com/git/git/commit/80bffaf7fbe09ef62ecb9a6ffea70ac0171b456c,12 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8083.cpp,,,data/crawl/git/old_hunk_8083.cpp,data/crawl/git/new_hunk_8083.cpp,-1,41,,"die(""unable to read tree entries %s"", tree_name);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""tree"", ""entries"", ""%s"", ""tree_name""]]",[-887800072658202415],6140,"3 days, 0:00:00"
https://github.com/git/git/commit/80bffaf7fbe09ef62ecb9a6ffea70ac0171b456c,12 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8083.cpp,,,data/crawl/git/old_hunk_8083.cpp,data/crawl/git/new_hunk_8083.cpp,-1,23,,"die(""bad tree-ish %s"", tree_name);","[""addLog""]","[[], [""die"", ""bad"", ""tree"", ""ish"", ""%s"", ""tree_name""]]",[-12380831501129429837],6139,"3 days, 0:00:00"
https://github.com/git/git/commit/80bffaf7fbe09ef62ecb9a6ffea70ac0171b456c,12 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8083.cpp,,,data/crawl/git/old_hunk_8083.cpp,data/crawl/git/new_hunk_8083.cpp,-1,20,,"die(""tree-ish %s not found."", tree_name);","[""addLog""]","[[], [""die"", ""tree"", ""ish"", ""%s"", ""not"", ""found"", ""tree_name""]]",[-2393910506039786222],6138,"3 days, 0:00:00"
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_8038.cpp,,,data/crawl/git/old_hunk_8038.cpp,data/crawl/git/new_hunk_8038.cpp,-1,105,,"error(""%s died with strange error"", argv[0]);","[""addLog""]","[[], [""error"", ""%s"", ""died"", ""with"", ""strange"", ""error"", ""argv[0]""]]",[6010646412580812064],6137,0:00:00
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_8038.cpp,,,data/crawl/git/old_hunk_8038.cpp,data/crawl/git/new_hunk_8038.cpp,-1,99,,"error(""unable to exec %s"", argv[0]);","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""exec"", ""%s"", ""argv[0]""]]",[10517722405981025127],6136,0:00:00
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_8038.cpp,,,data/crawl/git/old_hunk_8038.cpp,data/crawl/git/new_hunk_8038.cpp,-1,97,,"error(""unable to fork for %s"", argv[0]);","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""fork"", ""for"", ""%s"", ""argv[0]""]]",[10495219703938108806],6135,0:00:00
https://github.com/git/git/commit/30415d50cccef0ec22bb4a6d58138760b142758d,19 Sep 2007,"Move bundle specific stuff into bundle.[ch]

The transport specific stuff was moved into libgit.a, and the
bundle specific stuff will not be left behind.

This is a big code move, with one exception: the function
unbundle() no longer outputs the list of refs.  You have to call
list_bundle_refs() yourself for that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",735,data/crawl/git/hunk_8030.cpp,,,data/crawl/git/old_hunk_8030.cpp,data/crawl/git/new_hunk_8030.cpp,145,-1,error(message);,,"[""removeLog""]","[[""error"", ""message""], []]",[-1438504816784457873],6134,0:00:00
https://github.com/git/git/commit/c29727d5241be0fee2265fbbe65d1b275b01dc1c,19 Sep 2007,"Add fetch methods to transport library.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",305,data/crawl/git/hunk_8034.cpp,,,data/crawl/git/old_hunk_8034.cpp,data/crawl/git/new_hunk_8034.cpp,-1,103,,"die(""Cannot fetch from '%s' without curl ..."", transport->url);","[""addLog""]","[[], [""die"", ""Cannot"", ""fetch"", ""from"", ""%s"", ""without"", ""curl"", ""transport"", ""url""]]",[-5742909372898188850],6133,0:00:00
https://github.com/git/git/commit/28b91f8ad9e4791b5c35ca6bffbb78725b4e5bbf,19 Sep 2007,"Rename remote.uri to remote.url within remote handling internals

Anyplace we talk about the address of a remote repository we always
refer to it as a URL, especially in the configuration file and
.git/remotes where we call it ""remote.$n.url"" or start the first
line with ""URL:"".  Calling this value a uri within the internal C
code just doesn't jive well with our commonly accepted terms.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_8013.cpp,,,data/crawl/git/old_hunk_8013.cpp,data/crawl/git/new_hunk_8013.cpp,10,10,"error(""failed to push to '%s'"", remote->uri[i]);","error(""failed to push to '%s'"", remote->url[i]);","[""updateVariable""]","[[""uri[i]""], [""url[i]""]]",[-2999880999026998247],6132,0:00:00
https://github.com/git/git/commit/f26a0012262106e0c7e92d8d07f00611112d3a8d,19 Sep 2007,"Enable wt-status output to a given FILE pointer.

Still defaults to stdout, but you can now override wt_status.fp after
calling wt_status_prepare().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_8002.cpp,,,data/crawl/git/old_hunk_8002.cpp,data/crawl/git/new_hunk_8002.cpp,3,3,"printf(""# No changes\n"");","fprintf(s->fp, ""# No changes\n"");","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""s"", ""fp""]]",[-12428491936016271569],6131,0:00:00
https://github.com/git/git/commit/19247e5510279f018f8358a72b38cc5aa62fac8a,21 Sep 2007,"nfv?asprintf are broken without va_copy, workaround them.

* drop nfasprintf.
* move nfvasprintf into imap-send.c back, and let it work on a 8k buffer,
  and die() in case of overflow. It should be enough for imap commands, if
  someone cares about imap-send, he's welcomed to fix it properly.
* replace nfvasprintf use in merge-recursive with a copy of the strbuf_addf
  logic, it's one place, we'll live with it.
  To ease the change, output_buffer string list is replaced with a strbuf ;)
* rework trace.c to call vsnprintf itself.  It's used to format strerror()s
  and git command names, it should never be more than a few octets long, let
  it work on a 8k static buffer with vsnprintf or die loudly.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",180,data/crawl/git/hunk_7999.cpp,,,data/crawl/git/old_hunk_7999.cpp,data/crawl/git/new_hunk_7999.cpp,-1,40,,"die(""unreasonnable trace length"");","[""addLog""]","[[], [""die"", ""unreasonnable"", ""trace"", ""length""]]",[10022591019137606337],6130,0:00:00
https://github.com/git/git/commit/663af3422a648e87945e4d8c0cc3e13671f2bbde,21 Sep 2007,"Full rework of quote_c_style and write_name_quoted.

* quote_c_style works on a strbuf instead of a wild buffer.
* quote_c_style is now clever enough to not add double quotes if not needed.

* write_name_quoted inherits those advantages, but also take a different
  set of arguments. Now instead of asking for quotes or not, you pass a
  ""terminator"". If it's \0 then we assume you don't want to escape, else C
  escaping is performed. In any case, the terminator is also appended to the
  stream. It also no longer takes the prefix/prefix_len arguments, as it's
  seldomly used, and makes some optimizations harder.

* write_name_quotedpfx is created to work like write_name_quoted and take
  the prefix/prefix_len arguments.

Thanks to those API changes, diff.c has somehow lost weight, thanks to the
removal of functions that were wrappers around the old write_name_quoted
trying to give it a semantics like the new one, but performing a lot of
allocations for this goal. Now we always write directly to the stream, no
intermediate allocation is performed.

As a side effect of the refactor in builtin-apply.c, the length of the bar
graphs in diffstats are not affected anymore by the fact that the path was
clipped.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",641,data/crawl/git/hunk_7986.cpp,,,data/crawl/git/old_hunk_7986.cpp,data/crawl/git/new_hunk_7986.cpp,-1,137,,"fputs(name, fp);","[""addLog""]","[[], [""fputs"", ""name"", ""fp""]]",[-7654144263964643242],6129,0:00:00
https://github.com/git/git/commit/663af3422a648e87945e4d8c0cc3e13671f2bbde,21 Sep 2007,"Full rework of quote_c_style and write_name_quoted.

* quote_c_style works on a strbuf instead of a wild buffer.
* quote_c_style is now clever enough to not add double quotes if not needed.

* write_name_quoted inherits those advantages, but also take a different
  set of arguments. Now instead of asking for quotes or not, you pass a
  ""terminator"". If it's \0 then we assume you don't want to escape, else C
  escaping is performed. In any case, the terminator is also appended to the
  stream. It also no longer takes the prefix/prefix_len arguments, as it's
  seldomly used, and makes some optimizations harder.

* write_name_quotedpfx is created to work like write_name_quoted and take
  the prefix/prefix_len arguments.

Thanks to those API changes, diff.c has somehow lost weight, thanks to the
removal of functions that were wrappers around the old write_name_quoted
trying to give it a semantics like the new one, but performing a lot of
allocations for this goal. Now we always write directly to the stream, no
intermediate allocation is performed.

As a side effect of the refactor in builtin-apply.c, the length of the bar
graphs in diffstats are not affected anymore by the fact that the path was
clipped.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",641,data/crawl/git/hunk_7984.cpp,,,data/crawl/git/old_hunk_7984.cpp,data/crawl/git/new_hunk_7984.cpp,12,11,"printf("" %s %s\n"", newdelete, name);","printf("" %s "", newdelete);","[""removeVariable"", ""updateContent""]","[[""%s\\n"", ""name""], []]",[-1978386752269010711],6128,0:00:00
https://github.com/git/git/commit/a2f8028d3d661b314d5a784764f2f5f9e4c2dde0,02 Jul 2007,"Make '!' aliases more useful

When an alias starts with an exclamation mark, the rest is interpreted
as a shell command. However, all arguments passed to git used to be
ignored.

Now you can have an alias like

	$ git config alias.e '!echo'

and

	$ git e Hello World

does what you expect it to do.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_8251.cpp,,,data/crawl/git/old_hunk_8251.cpp,data/crawl/git/new_hunk_8251.cpp,-1,16,,"die(""Too many or long arguments"");","[""addLog""]","[[], [""die"", ""Too"", ""many"", ""or"", ""long"", ""arguments""]]",[-7410788784410661785],6127,"40 days, 12:00:00"
https://github.com/git/git/commit/7a98869935a3682b5ff9679c92bf9bc12f87d8c5,19 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_8062.cpp,,,data/crawl/git/old_hunk_8062.cpp,data/crawl/git/new_hunk_8062.cpp,-1,6,,"die (""need a filename"");","[""addLog""]","[[], [""die"", ""need"", ""a"", ""filename""]]",[-12761271675917370736],6126,"3 days, 12:00:00"
https://github.com/git/git/commit/7a98869935a3682b5ff9679c92bf9bc12f87d8c5,19 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_8061.cpp,,,data/crawl/git/old_hunk_8061.cpp,data/crawl/git/new_hunk_8061.cpp,-1,5,,"die (""Could not add %s to temporary index"", name);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""add"", ""%s"", ""to"", ""temporary"", ""index"", ""name""]]",[3547274368176631606],6125,"3 days, 12:00:00"
https://github.com/git/git/commit/7a98869935a3682b5ff9679c92bf9bc12f87d8c5,19 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_8061.cpp,,,data/crawl/git/old_hunk_8061.cpp,data/crawl/git/new_hunk_8061.cpp,7,10,"fputs(name, stdout);","die (""Could not write temporary index to %s"", filename);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""addContent""]","[[""fputs"", ""name"", ""stdout""], [""die"", ""Could"", ""not"", ""write"", ""temporary"", ""index"", ""to"", ""%s"", ""filename""]]",[24782695481820883169],6124,"3 days, 12:00:00"
https://github.com/git/git/commit/7a98869935a3682b5ff9679c92bf9bc12f87d8c5,19 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_8061.cpp,,,data/crawl/git/old_hunk_8061.cpp,data/crawl/git/new_hunk_8061.cpp,3,3,"printf(""%06o %s	"",patch->old_mode, sha1_to_hex(sha1_ptr));
		if;","make_cache_entry(patch->old_mode, sha1_ptr, name, 0, 0);","[""updateLog"", ""removeVariable"", ""updateContent"", ""addContent"", ""addVariable"", ""removeLog""]","[[""printf"", ""%06o"", ""%s"", ""sha1_to_hex"", ""if""], [""make_cache_entry"", ""name"", ""0"", ""0""]]",[-13777821902971928447],6123,"3 days, 12:00:00"
https://github.com/git/git/commit/cd547b4886c5338a70eb8a674bfc40eac5cab3d9,01 Oct 2007,"fetch/push: readd rsync support

We lost rsync support when transitioning from shell to C.  Support it
again (even if the transport is technically deprecated, some people just
do not have any chance to use anything else).

Also, add a test to t5510.  Since rsync transport is not configured by
default on most machines, and especially not such that you can write to
rsync://127.0.0.1$(pwd)/, it is disabled by default; you can enable it by
setting the environment variable TEST_RSYNC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/hunk_7949.cpp,,,data/crawl/git/old_hunk_7949.cpp,data/crawl/git/new_hunk_7949.cpp,-1,173,,"die (""Could not run rsync to get refs"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""run"", ""rsync"", ""to"", ""get"", ""refs""]]",[-1680571651316806381],6122,0:00:00
https://github.com/git/git/commit/cd547b4886c5338a70eb8a674bfc40eac5cab3d9,01 Oct 2007,"fetch/push: readd rsync support

We lost rsync support when transitioning from shell to C.  Support it
again (even if the transport is technically deprecated, some people just
do not have any chance to use anything else).

Also, add a test to t5510.  Since rsync transport is not configured by
default on most machines, and especially not such that you can write to
rsync://127.0.0.1$(pwd)/, it is disabled by default; you can enable it by
setting the environment variable TEST_RSYNC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/hunk_7949.cpp,,,data/crawl/git/old_hunk_7949.cpp,data/crawl/git/new_hunk_7949.cpp,-1,302,,"die (""Could not make temporary directory"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""make"", ""temporary"", ""directory""]]",[7401961502993053969],6121,0:00:00
https://github.com/git/git/commit/ccfc02a30057a5fa7376e1fc8e8c3fe5478556f4,16 Oct 2007,"Fix compilation when NO_CURL is defined

There were a few places which did not cope well without curl.  This
fixes all of them.  We still need to link against the walker.o part
of the library as some parts of transport.o still call into there
even though we don't have HTTP support enabled.

If compiled with NO_CURL=1 we now get the following useful error
message:

  $ git-fetch http://www.example.com/git
  error: git was compiled without libcurl support.
  fatal: Don't know how to fetch from http://www.example.com/git

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/hunk_7940.cpp,,,data/crawl/git/old_hunk_7940.cpp,data/crawl/git/new_hunk_7940.cpp,14,-1,"die(""Cannot fetch from '%s' without curl ..."", transport->url);",,"[""removeLog""]","[[""die"", ""Cannot"", ""fetch"", ""from"", ""%s"", ""without"", ""curl"", ""transport"", ""url""], []]",[5742909372898188850],6120,0:00:00
https://github.com/git/git/commit/b516968ff62ec153e008d033c153affd7ba9ddc6,21 May 2007,"Update local tracking refs when pushing

This also adds a --remote option to send-pack, which specifies the
configured remote being used. It is provided automatically by
git-push, and must match the url (which is still needed, since there
could be multiple urls).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",64,data/crawl/git/hunk_8402.cpp,,,data/crawl/git/old_hunk_8402.cpp,data/crawl/git/new_hunk_8402.cpp,-1,12,,"error(""Failed to delete"");","[""addLog""]","[[], [""error"", ""Failed"", ""to"", ""delete""]]",[677248472710611288],6119,"75 days, 0:00:00"
https://github.com/git/git/commit/dc1bfdcd1a8af81885f1831c5e6dcfe5cf61372e,21 Oct 2007,"Use start_command() to run content filters instead of explicit fork/exec.

The previous code already used finish_command() to wait for the process
to terminate, but did not use start_command() to run it.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",30,data/crawl/git/hunk_7916.cpp,,,data/crawl/git/old_hunk_7916.cpp,data/crawl/git/new_hunk_7916.cpp,9,-1,"error(""cannot create pipe to run external filter %s"", cmd);",,"[""removeLog""]","[[""error"", ""cannot"", ""create"", ""pipe"", ""to"", ""run"", ""external"", ""filter"", ""%s"", ""cmd""], []]",[-13999988256736183527],6118,0:00:00
https://github.com/git/git/commit/4d00bda2aa9dd8cd6ec4015832b80eb1273d46d7,02 Nov 2007,"make the pack index version configurable

It is a good idea to use pack index version 2 all the time since it has
proper protection against propagation of certain pack corruptions when
repacking which is not possible with index version 1, as demonstrated
in test t5302.

Hence this config option.

The default is still pack index version 1.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_7858.cpp,,,data/crawl/git/old_hunk_7858.cpp,data/crawl/git/new_hunk_7858.cpp,-1,8,,"die(""bad pack.indexversion=%d"", pack_idx_default_version);","[""addLog""]","[[], [""die"", ""bad"", ""pack"", ""indexversion"", ""%d"", ""pack_idx_default_version""]]",[-6202847426478760921],6117,0:00:00
https://github.com/git/git/commit/2d4177c01c238071777db5b1fbd8a14efb62ce02,19 Sep 2007,"Make fetch-pack a builtin with an internal API

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_8041.cpp,,,data/crawl/git/old_hunk_8041.cpp,data/crawl/git/new_hunk_8041.cpp,-1,16,,"printf(""%s %s\n"",
		       sha1_to_hex(ref->old_sha1), ref->name);","[""addLog""]","[[], [""printf"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""ref"", ""old_sha1"", ""ref"", ""name""]]",[15075716309524597745],6116,"22 days, 12:00:00"
https://github.com/git/git/commit/2d4177c01c238071777db5b1fbd8a14efb62ce02,19 Sep 2007,"Make fetch-pack a builtin with an internal API

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_8040.cpp,,,data/crawl/git/old_hunk_8040.cpp,data/crawl/git/new_hunk_8040.cpp,4,-1,"printf(""%s %s\n"",
		       sha1_to_hex(ref->old_sha1), ref->name);",,"[""removeLog""]","[[""printf"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""ref"", ""old_sha1"", ""ref"", ""name""], []]",[-15075716309524597745],6115,"22 days, 12:00:00"
https://github.com/git/git/commit/00ae82895e7f30e52ff12edc1076409c7c53d99e,04 Nov 2007,"errors: ""strict subset"" -> ""ancestor""

The term ""ancestor"" is a bit more intuitive (and more consistent with
the documentation) than the term ""strict subset"".

Also, remove superfluous ""ref"", capitalize, and add some carriage
returns, changing:

    error: remote 'refs/heads/master' is not a strict subset of local ref 'refs/heads/master'. maybe you are not up-to-date and need to pull first?
    error: failed to push to 'ssh://linux-nfs.org/~bfields/exports/git.git'

to:

    error: remote 'refs/heads/master' is not an ancestor of
    local 'refs/heads/master'.
    Maybe you are not up-to-date and need to pull first?
    error: failed to push to 'ssh://linux-nfs.org/~bfields/exports/git.git'

Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_7845.cpp,,,data/crawl/git/old_hunk_7845.cpp,data/crawl/git/new_hunk_7845.cpp,3,3,"error(""remote '%s' is not a strict ""
				      ""subset of local ref '%s'. ""
				      ""maybe you are not up-to-date and ""
				      ""need to pull first?"",
				      ref->name,
				      ref->peer_ref->name);","error(""remote '%s' is not an ancestor of\n""
				      "" local  '%s'.\n""
				      "" Maybe you are not up-to-date and ""
				      ""need to pull first?"",
				      ref->name,
				      ref->peer_ref->name);","[""updateContent""]","[[""a"", ""strict"", ""subset"", ""of"", ""maybe"", ""ref""], [""an"", ""ancestor"", ""of\\n"", ""\\n"", ""Maybe""]]",[-2300796360634784439],6114,0:00:00
https://github.com/git/git/commit/4234a76167b12a7669dae0e6386c62e712b9dcf5,13 Jun 2007,"Extend --pretty=oneline to cover the first paragraph,

so that an ugly commit message like this can be
handled sanely.

Currently, --pretty=oneline and --pretty=email (hence
format-patch) take and use only the first line of the commit log
message.  This changes them to:

 - Take the first paragraph, where the definition of the first
   paragraph is ""skip all blank lines from the beginning, and
   then grab everything up to the next empty line"".

 - Replace all line breaks with a whitespace.

This change would not affect a well-behaved commit message that
adheres to the convention of ""single line summary, a blank line,
and then body of message"", as its first paragraph always
consists of a single line.  Commit messages from different
culture, such as the ones imported from CVS/SVN, can however get
chomped with the existing behaviour at the first linebreak in
the middle of sentence right now, which would become much easier
to see with this change.

The Subject: and --pretty=oneline output would become very long
and unsightly for non-conforming commits, but their messages are
already ugly anyway, and thischange at least avoids the loss of
information.

The Subject: line from a multi-line paragraph is folded using
RFC2822 line folding rules at the places where line breaks were
in the original.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",393,data/crawl/git/hunk_8287.cpp,,,data/crawl/git/old_hunk_8287.cpp,data/crawl/git/new_hunk_8287.cpp,-1,42,,"die(""bad parent line in commit"");","[""addLog""]","[[], [""die"", ""bad"", ""parent"", ""line"", ""in"", ""commit""]]",[4756367968810073483],6113,"72 days, 12:00:00"
https://github.com/git/git/commit/4234a76167b12a7669dae0e6386c62e712b9dcf5,13 Jun 2007,"Extend --pretty=oneline to cover the first paragraph,

so that an ugly commit message like this can be
handled sanely.

Currently, --pretty=oneline and --pretty=email (hence
format-patch) take and use only the first line of the commit log
message.  This changes them to:

 - Take the first paragraph, where the definition of the first
   paragraph is ""skip all blank lines from the beginning, and
   then grab everything up to the next empty line"".

 - Replace all line breaks with a whitespace.

This change would not affect a well-behaved commit message that
adheres to the convention of ""single line summary, a blank line,
and then body of message"", as its first paragraph always
consists of a single line.  Commit messages from different
culture, such as the ones imported from CVS/SVN, can however get
chomped with the existing behaviour at the first linebreak in
the middle of sentence right now, which would become much easier
to see with this change.

The Subject: and --pretty=oneline output would become very long
and unsightly for non-conforming commits, but their messages are
already ugly anyway, and thischange at least avoids the loss of
information.

The Subject: line from a multi-line paragraph is folded using
RFC2822 line folding rules at the places where line breaks were
in the original.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",393,data/crawl/git/hunk_8288.cpp,,,data/crawl/git/old_hunk_8288.cpp,data/crawl/git/new_hunk_8288.cpp,54,-1,"die(""bad parent line in commit"");",,"[""removeLog""]","[[""die"", ""bad"", ""parent"", ""line"", ""in"", ""commit""], []]",[-4756367968810073483],6112,"72 days, 12:00:00"
https://github.com/git/git/commit/4175e9e3a8734be1e96e385b0fa2428b86ed5809,13 Jun 2007,"More static

There still are quite a few symbols that ought to be static.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_8283.cpp,,,data/crawl/git/old_hunk_8283.cpp,data/crawl/git/new_hunk_8283.cpp,16,-1,"die(""you wascally wabbit, you"");",,"[""removeLog""]","[[""die"", ""you"", ""wascally"", ""wabbit"", ""you""], []]",[9219069277110239650],6111,"72 days, 12:00:00"
https://github.com/git/git/commit/93fc05eb9ef505a05d9ce9415177697449afc8ad,05 Nov 2007,"Split off the pretty print stuff into its own file

The file commit.c got quite large, but it does not have to be: the
code concerning pretty printing is pretty well contained.  In fact,
this commit just splits it off into pretty.c, leaving commit.c with
just 672 lines.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1443,data/crawl/git/hunk_7839.cpp,,,data/crawl/git/old_hunk_7839.cpp,data/crawl/git/new_hunk_7839.cpp,353,-1,"die(""invalid interp table!"");",,"[""removeLog""]","[[""die"", ""invalid"", ""interp"", ""table""], []]",[6654303790039194692],6110,"2 days, 0:00:00"
https://github.com/git/git/commit/8f67f8aefb1b751073f8b36fae8be8f72eb93f4a,12 Nov 2007,"Make the diff_options bitfields be an unsigned with explicit masks.

reverse_diff was a bit-value in disguise, it's merged in the flags now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",304,data/crawl/git/hunk_7802.cpp,,,data/crawl/git/old_hunk_7802.cpp,data/crawl/git/new_hunk_7802.cpp,3,3,"printf(""%s"",
		       diff_get_color(opt->diffopt.color_diff, DIFF_RESET));","printf(""%s"", diff_get_color_opt(&opt->diffopt, DIFF_RESET));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""diff_get_color"", ""opt"", ""color_diff""], [""diff_get_color_opt"", ""&opt""]]",[-13659688181993164244],6109,0:00:00
https://github.com/git/git/commit/8f67f8aefb1b751073f8b36fae8be8f72eb93f4a,12 Nov 2007,"Make the diff_options bitfields be an unsigned with explicit masks.

reverse_diff was a bit-value in disguise, it's merged in the flags now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",304,data/crawl/git/hunk_7794.cpp,,,data/crawl/git/old_hunk_7794.cpp,data/crawl/git/new_hunk_7794.cpp,14,12,"printf(""%stree %s%s\n\n"",
					diff_get_color(rev.diffopt.color_diff,
						DIFF_COMMIT),
					name,
					diff_get_color(rev.diffopt.color_diff,
						DIFF_RESET));","printf(""%stree %s%s\n\n"",
					diff_get_color_opt(&rev.diffopt, DIFF_COMMIT),
					name,
					diff_get_color_opt(&rev.diffopt, DIFF_RESET));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""diff_get_color"", ""rev"", ""color_diff"", ""diff_get_color"", ""rev"", ""color_diff""], [""diff_get_color_opt"", ""&rev"", ""diff_get_color_opt"", ""&rev""]]",[-20563101288969180752],6108,0:00:00
https://github.com/git/git/commit/396865859918e9c7bf8ce74aae137c57da134610,19 Nov 2007,"Make builtin-tag.c use parse_options.

Also, this removes those tests ensuring that repeated
-m options don't allocate memory more than once, because now
this is done after parsing options, using the last one
when more are given. The same for -F.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/hunk_7762.cpp,,,data/crawl/git/old_hunk_7762.cpp,data/crawl/git/new_hunk_7762.cpp,63,56,"die(""could not open or read '%s': %s"",
						argv[i], strerror(errno));","die(""could not open or read '%s': %s"",
						msgfile, strerror(errno));","[""updateVariable"", ""moveVariable"", ""removeVariable""]","[[""argv[i]""], [""msgfile""]]",[6944018412522166514],6107,0:00:00
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,283,,"die(""invalid commit: %s\n"", use_message);","[""addLog""]","[[], [""die"", ""invalid"", ""commit"", ""%s\\n"", ""use_message""]]",[333822369845314492],6106,0:00:00
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7659.cpp,,,data/crawl/git/old_hunk_7659.cpp,data/crawl/git/new_hunk_7659.cpp,80,-1,"fputs(reset, stdout);",,"[""removeLog""]","[[""fputs"", ""reset"", ""stdout""], []]",[19102739776393221864],6105,0:00:00
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7659.cpp,,,data/crawl/git/old_hunk_7659.cpp,data/crawl/git/new_hunk_7659.cpp,78,-1,"fputs(set, stdout);",,"[""removeLog""]","[[""fputs"", ""set"", ""stdout""], []]",[12591320087386433989],6104,0:00:00
https://github.com/git/git/commit/d7e92806cdc5ca78c4db879c68f91c70ff9e1ade,15 Dec 2007,"Move fetch_ref from http-push.c and http-walker.c to http.c

Make the necessary changes to be ok with their difference, and rename the
function http_fetch_ref.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/hunk_7637.cpp,,,data/crawl/git/old_hunk_7637.cpp,data/crawl/git/new_hunk_7637.cpp,75,-1,"error(""Couldn't get %s for %s\n%s"",
				    url, ref, curl_errorstr);",,"[""removeLog""]","[[""error"", ""Couldn"", ""t"", ""get"", ""%s"", ""for"", ""%s\\n%s"", ""url"", ""ref"", ""curl_errorstr""], []]",[4403159742839886129],6103,0:00:00
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,102,,"die(""failed to unpack HEAD tree object"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""unpack"", ""HEAD"", ""tree"", ""object""]]",[-14559189493892719456],6102,"25 days, 12:00:00"
https://github.com/git/git/commit/7a51ed66f653c248993b3c4a61932e47933d835e,21 Jan 2008,"Make on-disk index representation separate from in-core one

This converts the index explicitly on read and write to its on-disk
format, allowing the in-core format to contain more flags, and be
simpler.

In particular, the in-core format is now host-endian (as opposed to the
on-disk one that is network endian in order to be able to be shared
across machines) and as a result we can dispense with all the
htonl/ntohl on accesses to the cache_entry fields.

This will make it easier to make use of various temporary flags that do
not exist in the on-disk format.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",386,data/crawl/git/hunk_7562.cpp,,,data/crawl/git/old_hunk_7562.cpp,data/crawl/git/new_hunk_7562.cpp,1,1,"fprintf(o, ""%s%06o %s %d\t%s\n"",
			label,
			ntohl(ce->ce_mode),
			sha1_to_hex(ce->sha1),
			ce_stage(ce),
			ce->name);","fprintf(o, ""%s%06o %s %d\t%s\n"",
			label,
			ce->ce_mode,
			sha1_to_hex(ce->sha1),
			ce_stage(ce),
			ce->name);","[""removeVariable""]","[[""ntohl""], []]",[5902733383000589524],6101,0:00:00
https://github.com/git/git/commit/3a9f0f41db87e197708f84aeb2487bc983f99c9c,26 Jan 2008,"parse-options: catch likely typo in presense of aggregated options.

If options are aggregated, and that the whole token is an exact
prefix of a long option that is longer than 2 letters, reject
it.  This is to prevent a common typo:

	$ git commit -amend

to get interpreted as ""commit all with message 'end'"".

The typo check isn't performed if there is no aggregation,
because the stuck form is the recommended one.  If we have `-o`
being a valid short option that takes an argument, and --option
a long one, then we _MUST_ accept -option as ""'o' option with
argument 'ption'"", which is our official recommended form.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_7546.cpp,,,data/crawl/git/old_hunk_7546.cpp,data/crawl/git/new_hunk_7546.cpp,-1,17,,"error (""did you mean `--%s` (with two dashes ?)"", arg);","[""addLog""]","[[], [""error"", ""did"", ""you"", ""mean"", ""%s"", ""with"", ""two"", ""dashes"", ""arg""]]",[-21030662975124121772],6100,0:00:00
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,214,,"fprintf(fp, ""# %s\n"", only_include_assumed);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s\\n"", ""only_include_assumed""]]",[5187317682148199510],6099,"37 days, 12:00:00"
https://github.com/git/git/commit/5f0657374344a5d8cf5ce5a9920a08c0be422194,23 Dec 2007,"Allow selection of different cleanup modes for commit messages

Although we traditionally stripped away excess blank lines, trailing
whitespaces and lines that begin with ""#"" from the commit log message,
sometimes the message just has to be the way user wants it.

For instance, a commit message template can contain lines that begin with
""#"", the message must be kept as close to its original source as possible
if you are converting from a foreign SCM, or maybe the message has a shell
script including its comments for future reference.

The cleanup modes are default, verbatim, whitespace and strip. The
default mode depends on if the message is being edited and will either
strip whitespace and comments (if editor active) or just strip the
whitespace (for where the message is given explicitely).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_7619.cpp,,,data/crawl/git/old_hunk_7619.cpp,data/crawl/git/new_hunk_7619.cpp,-1,7,,"fprintf(fp, ""be kept.\n""
			""# You can remove them yourself if you want to)\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""be"", ""kept"", ""\\n"", ""You"", ""can"", ""remove"", ""them"", ""yourself"", ""if"", ""you"", ""want"", ""to"", ""\\n""]]",[-22314877347187529993],6098,"22 days, 12:00:00"
https://github.com/git/git/commit/5f0657374344a5d8cf5ce5a9920a08c0be422194,23 Dec 2007,"Allow selection of different cleanup modes for commit messages

Although we traditionally stripped away excess blank lines, trailing
whitespaces and lines that begin with ""#"" from the commit log message,
sometimes the message just has to be the way user wants it.

For instance, a commit message template can contain lines that begin with
""#"", the message must be kept as close to its original source as possible
if you are converting from a foreign SCM, or maybe the message has a shell
script including its comments for future reference.

The cleanup modes are default, verbatim, whitespace and strip. The
default mode depends on if the message is being edited and will either
strip whitespace and comments (if editor active) or just strip the
whitespace (for where the message is given explicitely).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_7619.cpp,,,data/crawl/git/old_hunk_7619.cpp,data/crawl/git/new_hunk_7619.cpp,-1,5,,"fprintf(fp, ""not be included)\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""not"", ""be"", ""included"", ""\\n""]]",[191829790627588797],6097,"22 days, 12:00:00"
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,200,,"fprintf(fp,
			""#\n""
			""# It looks like you may be committing a MERGE.\n""
			""# If this is not correct, please remove the file\n""
			""#	%s\n""
			""# and try again.\n""
			""#\n"",
			git_path(""MERGE_HEAD""));","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\n"", ""It"", ""looks"", ""like"", ""you"", ""may"", ""be"", ""committing"", ""a"", ""MERGE"", ""\\n"", ""If"", ""this"", ""is"", ""not"", ""correct"", ""please"", ""remove"", ""the"", ""file\\n"", ""%s\\n"", ""and"", ""try"", ""again"", ""\\n"", ""\\n"", ""git_path"", ""MERGE_HEAD""]]",[8003666030470462448],6096,"37 days, 12:00:00"
https://github.com/git/git/commit/21e5ad50fc5e7277c74cfbb3cf6502468e840f86,06 Feb 2008,"safecrlf: Add mechanism to warn about irreversible crlf conversions

CRLF conversion bears a slight chance of corrupting data.
autocrlf=true will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.

If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
git that this file is binary and git will handle the file
appropriately.

Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.

This patch adds a mechanism that can either warn the user about
an irreversible conversion or can even refuse to convert.  The
mechanism is controlled by the variable core.safecrlf, with the
following values:

 - false: disable safecrlf mechanism
 - warn: warn about irreversible conversions
 - true: refuse irreversible conversions

The default is to warn.  Users are only affected by this default
if core.autocrlf is set.  But the current default of git is to
leave core.autocrlf unset, so users will not see warnings unless
they deliberately chose to activate the autocrlf mechanism.

The safecrlf mechanism's details depend on the git command.  The
general principles when safecrlf is active (not false) are:

 - we warn/error out if files in the work tree can modified in an
   irreversible way without giving the user a chance to backup the
   original file.

 - for read-only operations that do not modify files in the work tree
   we do not not print annoying warnings.

There are exceptions.  Even though...

 - ""git add"" itself does not touch the files in the work tree, the
   next checkout would, so the safety triggers;

 - ""git apply"" to update a text file with a patch does touch the files
   in the work tree, but the operation is about text files and CRLF
   conversion is about fixing the line ending inconsistencies, so the
   safety does not trigger;

 - ""git diff"" itself does not touch the files in the work tree, it is
   often run to inspect the changes you intend to next ""git add"".  To
   catch potential problems early, safety triggers.

The concept of a safety check was originally proposed in a similar
way by Linus Torvalds.  Thanks to Dimitry Potapov for insisting
on getting the naked LF/autocrlf=true case right.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>",200,data/crawl/git/hunk_7514.cpp,,,data/crawl/git/old_hunk_7514.cpp,data/crawl/git/new_hunk_7514.cpp,-1,29,,"die(""LF would be replaced by CRLF in %s"", path);","[""addLog""]","[[], [""die"", ""LF"", ""would"", ""be"", ""replaced"", ""by"", ""CRLF"", ""in"", ""%s"", ""path""]]",[3131313320454241892],6095,0:00:00
https://github.com/git/git/commit/21e5ad50fc5e7277c74cfbb3cf6502468e840f86,06 Feb 2008,"safecrlf: Add mechanism to warn about irreversible crlf conversions

CRLF conversion bears a slight chance of corrupting data.
autocrlf=true will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.

If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
git that this file is binary and git will handle the file
appropriately.

Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.

This patch adds a mechanism that can either warn the user about
an irreversible conversion or can even refuse to convert.  The
mechanism is controlled by the variable core.safecrlf, with the
following values:

 - false: disable safecrlf mechanism
 - warn: warn about irreversible conversions
 - true: refuse irreversible conversions

The default is to warn.  Users are only affected by this default
if core.autocrlf is set.  But the current default of git is to
leave core.autocrlf unset, so users will not see warnings unless
they deliberately chose to activate the autocrlf mechanism.

The safecrlf mechanism's details depend on the git command.  The
general principles when safecrlf is active (not false) are:

 - we warn/error out if files in the work tree can modified in an
   irreversible way without giving the user a chance to backup the
   original file.

 - for read-only operations that do not modify files in the work tree
   we do not not print annoying warnings.

There are exceptions.  Even though...

 - ""git add"" itself does not touch the files in the work tree, the
   next checkout would, so the safety triggers;

 - ""git apply"" to update a text file with a patch does touch the files
   in the work tree, but the operation is about text files and CRLF
   conversion is about fixing the line ending inconsistencies, so the
   safety does not trigger;

 - ""git diff"" itself does not touch the files in the work tree, it is
   often run to inspect the changes you intend to next ""git add"".  To
   catch potential problems early, safety triggers.

The concept of a safety check was originally proposed in a similar
way by Linus Torvalds.  Thanks to Dimitry Potapov for insisting
on getting the naked LF/autocrlf=true case right.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>",200,data/crawl/git/hunk_7514.cpp,,,data/crawl/git/old_hunk_7514.cpp,data/crawl/git/new_hunk_7514.cpp,-1,27,,"warning(""LF will be replaced by CRLF in %s"", path);","[""addLog""]","[[], [""warning"", ""LF"", ""will"", ""be"", ""replaced"", ""by"", ""CRLF"", ""in"", ""%s"", ""path""]]",[1196836515131853272],6094,0:00:00
https://github.com/git/git/commit/6f084a56fcb3543d88d252bb49c1d2bbf2bd0cf3,11 Jul 2007,"branch --track: code cleanup and saner handling of local branches

This patch cleans up some complicated code, and replaces it with a
cleaner version, using code from remote.[ch], which got extended a
little in the process.  This also enables us to fix two cases:

The earlier ""fix"" to setup tracking only when the original ref started
with ""refs/remotes"" is wrong.  You are absolutely allowed to use a
separate layout for your tracking branches.  The correct fix, of course,
is to set up tracking information only when there is a matching
remote.<nick>.fetch line containing a colon.

Another corner case was not handled properly.  If two remotes write to
the original ref, just warn the user and do not set up tracking.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",201,data/crawl/git/hunk_8221.cpp,,,data/crawl/git/old_hunk_8221.cpp,data/crawl/git/new_hunk_8221.cpp,-1,62,,"printf(""Branch %s set up to track remote branch %s.\n"",
			       new_ref, orig_ref);","[""addLog""]","[[], [""printf"", ""Branch"", ""%s"", ""set"", ""up"", ""to"", ""track"", ""remote"", ""branch"", ""%s"", ""\\n"", ""new_ref"", ""orig_ref""]]",[-13298520321536466144],6093,"107 days, 0:00:00"
https://github.com/git/git/commit/6f084a56fcb3543d88d252bb49c1d2bbf2bd0cf3,11 Jul 2007,"branch --track: code cleanup and saner handling of local branches

This patch cleans up some complicated code, and replaces it with a
cleaner version, using code from remote.[ch], which got extended a
little in the process.  This also enables us to fix two cases:

The earlier ""fix"" to setup tracking only when the original ref started
with ""refs/remotes"" is wrong.  You are absolutely allowed to use a
separate layout for your tracking branches.  The correct fix, of course,
is to set up tracking information only when there is a matching
remote.<nick>.fetch line containing a colon.

Another corner case was not handled properly.  If two remotes write to
the original ref, just warn the user and do not set up tracking.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",201,data/crawl/git/hunk_8221.cpp,,,data/crawl/git/old_hunk_8221.cpp,data/crawl/git/new_hunk_8221.cpp,-1,43,,"error(""Tracking not set up: name too long: %s"",
				new_ref);","[""addLog""]","[[], [""error"", ""Tracking"", ""not"", ""set"", ""up"", ""name"", ""too"", ""long"", ""%s"", ""new_ref""]]",[18924370032151710907],6092,"107 days, 0:00:00"
https://github.com/git/git/commit/79a1e6b432d7d7ffaf2079d4cf895583502ca923,17 Feb 2008,"checkout: notice when the switched branch is behind or forked

When you are switching to a branch that is marked to merge from
somewhere else, e.g. when you have:

    [branch ""next""]
            remote = upstream
            merge = refs/heads/next
    [remote ""upstream""]
            url = ...
            fetch = refs/heads/*:refs/remotes/linus/*

and you say ""git checkout next"", the branch you checked out
may be behind, and you may want to update from the upstream
before continuing to work.

This patch makes the command to check the upstream (in this
example, ""refs/remotes/linus/next"") and our branch ""next"", and:

    (1) if they match, nothing happens;

    (2) if you are ahead (i.e. the upstream is a strict ancestor
        of you), one line message tells you so;

    (3) otherwise, you are either behind or you and the upstream
        have forked.  One line message will tell you which and
        then you will see a ""log --pretty=oneline --left-right"".

We could enhance this with an option that tells the command to
check if there is no local change, and automatically fast
forward when you are truly behind.  But I ripped out that change
because I was unsure what the right way should be to allow users
to control it (issues include that checkout should not become
automatically interactive).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",136,data/crawl/git/hunk_7474.cpp,,,data/crawl/git/old_hunk_7474.cpp,data/crawl/git/new_hunk_7474.cpp,-1,32,,"error(""'%s' not string"", var);","[""addLog""]","[[], [""error"", ""%s"", ""not"", ""string"", ""var""]]",[635716111731425706],6091,0:00:00
https://github.com/git/git/commit/a301b0c8f2627f0c0f4c6fd1015c6140a875d0b4,19 Feb 2008,"list-objects.c::process_tree/blob: check for NULL

As these functions are directly called with the result
from lookup_tree/blob, they must handle NULL.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_7451.cpp,,,data/crawl/git/old_hunk_7451.cpp,data/crawl/git/new_hunk_7451.cpp,-1,4,,"die(""bad tree object"");","[""addLog""]","[[], [""die"", ""bad"", ""tree"", ""object""]]",[-4368289389156625390],6090,0:00:00
https://github.com/git/git/commit/a301b0c8f2627f0c0f4c6fd1015c6140a875d0b4,19 Feb 2008,"list-objects.c::process_tree/blob: check for NULL

As these functions are directly called with the result
from lookup_tree/blob, they must handle NULL.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_7450.cpp,,,data/crawl/git/old_hunk_7450.cpp,data/crawl/git/new_hunk_7450.cpp,-1,4,,"die(""bad blob object"");","[""addLog""]","[[], [""die"", ""bad"", ""blob"", ""object""]]",[-5363385443103342885],6089,0:00:00
https://github.com/git/git/commit/dec38c81657f02624752a65c24d72613316713f5,19 Feb 2008,"check return value from parse_commit() in various functions

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_7446.cpp,,,data/crawl/git/old_hunk_7446.cpp,data/crawl/git/new_hunk_7446.cpp,-1,4,,"die(""invalid commit"");","[""addLog""]","[[], [""die"", ""invalid"", ""commit""]]",[-5725474708587731184],6088,0:00:00
https://github.com/git/git/commit/569012bf91ddb25220483e8912e079ce8a501525,19 Feb 2008,"Clean up reporting differences on branch switch

This also changes it such that:

$ git checkout

will give the same information without changing branches. This is good
for finding out if the fetch you did recently had anything to say
about the branch you've been on, whose name you don't remember at the
moment.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_7444.cpp,,,data/crawl/git/old_hunk_7444.cpp,data/crawl/git/new_hunk_7444.cpp,32,-1,"error(""'%s' not string"", var);",,"[""removeLog""]","[[""error"", ""%s"", ""not"", ""string"", ""var""], []]",[-635716111731425706],6087,0:00:00
https://github.com/git/git/commit/91c8d5905c33e9d7c9014a1c6c7cec8eb86584df,27 Jun 2007,"detect close failure on just-written file handles

I audited git for potential undetected write failures.
In the cases fixed below, the diagnostics I add mimic the diagnostics
used in surrounding code, even when that means not reporting
the precise strerror(errno) cause of the error.

Signed-off-by: Jim Meyering <jim@meyering.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_8261.cpp,,,data/crawl/git/old_hunk_8261.cpp,data/crawl/git/new_hunk_8261.cpp,-1,4,,"error(""%s: write error: %s"", dst, strerror(errno));","[""addLog""]","[[], [""error"", ""%s"", ""write"", ""error"", ""%s"", ""dst"", ""strerror"", ""errno""]]",[36197878814034625690],6086,"121 days, 12:00:00"
https://github.com/git/git/commit/552bcac3f9f34833cf546f8c197da4c1985a0b84,26 Feb 2008,"Add API access to shortlog

Shortlog is gives a pretty simple API for cases where you're already
identifying all of the individual commits. Make this available to
other code instead of requiring them to use the revision API and
command line.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",174,data/crawl/git/hunk_7405.cpp,,,data/crawl/git/old_hunk_7405.cpp,data/crawl/git/new_hunk_7405.cpp,24,28,"printf(""%s (%d):\n"", list.items[i].path, onelines->nr);","printf(""%s (%d):\n"", log->list.items[i].path, onelines->nr);","[""addVariable""]","[[], [""log""]]",[7513213165417213733],6085,0:00:00
https://github.com/git/git/commit/552bcac3f9f34833cf546f8c197da4c1985a0b84,26 Feb 2008,"Add API access to shortlog

Shortlog is gives a pretty simple API for cases where you're already
identifying all of the individual commits. Make this available to
other code instead of requiring them to use the revision API and
command line.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",174,data/crawl/git/hunk_7403.cpp,,,data/crawl/git/old_hunk_7403.cpp,data/crawl/git/new_hunk_7403.cpp,33,29,"insert_one_record(list, author, !*buffer ? ""<none>"" : buffer);","insert_one_record(log, author, !*buffer ? ""<none>"" : buffer);","[""updateVariable""]","[[""list""], [""log""]]",[1542167839817907897],6084,0:00:00
https://github.com/git/git/commit/271b8d25b25e49b367087440e093e755e5f35aa9,26 Feb 2008,"builtin-fsck: move away from object-refs to fsck_walk

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_7395.cpp,,,data/crawl/git/old_hunk_7395.cpp,data/crawl/git/new_hunk_7395.cpp,-1,26,,"printf(""broken link from %7s %s\n"",
				 typename(parent->type), sha1_to_hex(parent->sha1));","[""addLog""]","[[], [""printf"", ""broken"", ""link"", ""from"", ""%7s"", ""%s\\n"", ""typename"", ""parent"", ""type"", ""sha1_to_hex"", ""parent"", ""sha1""]]",[8409268443830626518],6083,0:00:00
https://github.com/git/git/commit/d4fe07f14975b87fa26776792a95f411473cfb46,04 Feb 2008,"git-fsck: report missing author/commit line in a commit as an error

A zero commit date could be caused by:
* a missing author line
* a missing commiter line
* a malformed email address in the commiter line
* a malformed commit date

Simply reporting it as zero commit date is missleading.

Additionally, it upgrades the message to an error (instead of an printf).

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_7544.cpp,,,data/crawl/git/old_hunk_7544.cpp,data/crawl/git/new_hunk_7544.cpp,4,-1,"printf(""bad commit date in %s\n"",
		       sha1_to_hex(commit->object.sha1));",,"[""removeLog""]","[[""printf"", ""bad"", ""commit"", ""date"", ""in"", ""%s\\n"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""], []]",[-4452104212873104058],6082,"11 days, 0:00:00"
https://github.com/git/git/commit/5f4347bba39ddb147b06913ac263fc46954d2d0b,01 Mar 2008,"add storage size output to 'git verify-pack -v'

This can possibly break external scripts that depend on the previous
output, but those script can't possibly be critical to Git usage, and
fixing them should be trivial.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_7363.cpp,,,data/crawl/git/old_hunk_7363.cpp,data/crawl/git/new_hunk_7363.cpp,6,6,"printf(""%-6s %lu %""PRIuMAX"" %u %s\n"",
			       type, size, (uintmax_t)offset,
			       delta_chain_length, sha1_to_hex(base_sha1));","printf(""%-6s %lu %lu %""PRIuMAX"" %u %s\n"",
			       type, size, store_size, (uintmax_t)offset,
			       delta_chain_length, sha1_to_hex(base_sha1));","[""updateContent"", ""addVariable""]","[[], [""%lu"", ""store_size""]]",[4351643544696135770],6081,0:00:00
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_7355.cpp,,,data/crawl/git/old_hunk_7355.cpp,data/crawl/git/new_hunk_7355.cpp,28,-1,"printf(""undefined\n"");",,"[""removeLog""]","[[""printf"", ""undefined\\n""], []]",[-13857179632628051140],6080,0:00:00
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_7355.cpp,,,data/crawl/git/old_hunk_7355.cpp,data/crawl/git/new_hunk_7355.cpp,26,-1,"printf(""%s\n"", name);",,"[""removeLog""]","[[""printf"", ""%s\\n"", ""name""], []]",[-9215796307133573166],6079,0:00:00
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,78,,"die(""invalid blob object"");","[""addLog""]","[[], [""die"", ""invalid"", ""blob"", ""object""]]",[-13820003109678427625],6078,"2 days, 12:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,71,,"die(""failed to write object"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""object""]]",[-7008615597472179642],6077,"2 days, 12:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,44,,"die(""Error on reachable objects of %s"", sha1_to_hex(obj->sha1));","[""addLog""]","[[], [""die"", ""Error"", ""on"", ""reachable"", ""objects"", ""of"", ""%s"", ""sha1_to_hex"", ""obj"", ""sha1""]]",[14196641705019683526],6076,"2 days, 12:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,30,,"die(""object type mismatch"");","[""addLog""]","[[], [""die"", ""object"", ""type"", ""mismatch""]]",[-5760857528678889796],6075,"2 days, 12:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7374.cpp,,,data/crawl/git/old_hunk_7374.cpp,data/crawl/git/new_hunk_7374.cpp,-1,17,,"die(""failed to write object %s"", sha1_to_hex(obj->sha1));","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""object"", ""%s"", ""sha1_to_hex"", ""obj"", ""sha1""]]",[-6895037254374087973],6074,"2 days, 12:00:00"
https://github.com/git/git/commit/d5ef408b9afb5b4417f4e7e1593a96302d666650,29 Feb 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7373.cpp,,,data/crawl/git/old_hunk_7373.cpp,data/crawl/git/new_hunk_7373.cpp,-1,10,,"die(""object %s tried to add buffer twice!"", sha1_to_hex(object->sha1));","[""addLog""]","[[], [""die"", ""object"", ""%s"", ""tried"", ""to"", ""add"", ""buffer"", ""twice"", ""sha1_to_hex"", ""object"", ""sha1""]]",[-10679620190162992623],6073,"2 days, 12:00:00"
https://github.com/git/git/commit/1fb328947c8e3ace9df7d2d5374e26e2510a4e93,08 Mar 2008,"git-clean: correct printing relative path

When the given path contains '..' then git-clean incorrectly printed names
of files. This patch changes cmd_clean to use quote_path_relative().
Also, ""failed to remove ..."" message used absolutely path, but not it is
corrected to use relative path.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_7333.cpp,,,data/crawl/git/old_hunk_7333.cpp,data/crawl/git/new_hunk_7333.cpp,31,27,"printf(""Removing %s\n"",
				       ent->name + prefix_offset);","printf(""Removing %s\n"", qname);","[""removeVariable"", ""addVariable""]","[[""ent"", ""name"", ""prefix_offset""], [""qname""]]",[9167277983642731493],6072,0:00:00
https://github.com/git/git/commit/649499845c274dc15809fe3c9162408c334fec57,12 Mar 2008,"help: add ""man.viewer"" config var to use ""woman"" or ""konqueror""

This patch makes it possible to view man pages using other tools
than the ""man"" program. It also implements support for emacs'
""woman"" and konqueror with the man KIO slave to view man pages.

Note that ""emacsclient"" is used with option ""-e"" to launch ""woman""
on emacs and this works only on versions >= 22.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_7324.cpp,,,data/crawl/git/old_hunk_7324.cpp,data/crawl/git/new_hunk_7324.cpp,-1,38,,"fprintf(stderr,
			""emacsclient version '%d' too old (< 22).\n"",
			version);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""emacsclient"", ""version"", ""%d"", ""too"", ""old"", ""22"", ""\\n"", ""version""]]",[-3417096826747127833],6071,0:00:00
https://github.com/git/git/commit/649499845c274dc15809fe3c9162408c334fec57,12 Mar 2008,"help: add ""man.viewer"" config var to use ""woman"" or ""konqueror""

This patch makes it possible to view man pages using other tools
than the ""man"" program. It also implements support for emacs'
""woman"" and konqueror with the man KIO slave to view man pages.

Note that ""emacsclient"" is used with option ""-e"" to launch ""woman""
on emacs and this works only on versions >= 22.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_7324.cpp,,,data/crawl/git/old_hunk_7324.cpp,data/crawl/git/new_hunk_7324.cpp,-1,29,,"fprintf(stderr, ""Failed to parse emacsclient version.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Failed"", ""to"", ""parse"", ""emacsclient"", ""version"", ""\\n""]]",[-21724683284417682690],6070,0:00:00
https://github.com/git/git/commit/649499845c274dc15809fe3c9162408c334fec57,12 Mar 2008,"help: add ""man.viewer"" config var to use ""woman"" or ""konqueror""

This patch makes it possible to view man pages using other tools
than the ""man"" program. It also implements support for emacs'
""woman"" and konqueror with the man KIO slave to view man pages.

Note that ""emacsclient"" is used with option ""-e"" to launch ""woman""
on emacs and this works only on versions >= 22.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_7324.cpp,,,data/crawl/git/old_hunk_7324.cpp,data/crawl/git/new_hunk_7324.cpp,-1,16,,"fprintf(stderr, ""Failed to start emacsclient.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Failed"", ""to"", ""start"", ""emacsclient"", ""\\n""]]",[-16908381944583080980],6069,0:00:00
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7312.cpp,,,data/crawl/git/old_hunk_7312.cpp,data/crawl/git/new_hunk_7312.cpp,18,18,"fputs(options->stat_sep, stdout);","fputs(options->stat_sep, options->file);","[""removeVariable"", ""addVariable""]","[[""stdout""], [""options"", ""file""]]",[9565916894071526156],6068,0:00:00
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7296.cpp,,,data/crawl/git/old_hunk_7296.cpp,data/crawl/git/new_hunk_7296.cpp,5,5,"printf(""%s+++ %s%s%s\n"",
		       meta, ecbdata->label_path[1], reset, name_b_tab);","fprintf(ecbdata->file, ""%s+++ %s%s%s\n"",
			meta, ecbdata->label_path[1], reset, name_b_tab);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""file"", ""ecbdata""]]",[-4233827762050023452],6067,0:00:00
https://github.com/git/git/commit/ef00d150e4f9959bf083adf92419b5053ba11584,19 Mar 2008,"Tighten refspec processing

This changes the pattern matching code to not store the required final
/ before the *, and then to require each side to be a valid ref (or
empty). In particular, any refspec that looks like it should be a
pattern but doesn't quite meet the requirements will be found to be
invalid as a fallback non-pattern.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_7288.cpp,,,data/crawl/git/old_hunk_7288.cpp,data/crawl/git/new_hunk_7288.cpp,5,8,"die(""* refusing to create funny ref '%s' locally"",
			    rm->peer_ref->name);","error(""* Ignoring funny ref '%s' locally"",
				      (*rmp)->peer_ref->name);","[""updateVariable"", ""updateLog"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""die"", ""refusing"", ""to"", ""create"", ""rm""], [""error"", ""Ignoring"", ""*rmp""]]",[19676948840073081451],6066,"3 days, 12:00:00"
https://github.com/git/git/commit/e0aaf781f656671694a0aa04d8a665bd4d7956e6,31 Mar 2008,"mktag.c: improve verification of tagger field and tests

Since nearly its birth, git's tags have included a ""tagger"" field which
describes the name of tagger, email of tagger, and date and time of tagging.
But, this field was only loosely tested by git-mktag. Provide some thorough
testing for this field and also ensure that the tag header is separated
from the tag body by an empty line to reduce the convenience of creating
a flawed tag.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_7277.cpp,,,data/crawl/git/old_hunk_7277.cpp,data/crawl/git/new_hunk_7277.cpp,-1,33,,"error(""char"" PD_FMT "": malformed tag timestamp"",
			tagger_line - buffer);","[""addLog""]","[[], [""error"", ""char"", ""PD_FMT"", ""malformed"", ""tag"", ""timestamp"", ""tagger_line"", ""buffer""]]",[16402799615672186275],6065,0:00:00
https://github.com/git/git/commit/94c89ba662e964c544fdb171dc8dd33f95b97942,10 Nov 2007,"git-push: plumb in --mirror mode

Plumb in the --mirror mode for git-push.

Signed-off-by: Andy Whitcroft <apw@shadowen.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_7808.cpp,,,data/crawl/git/old_hunk_7808.cpp,data/crawl/git/new_hunk_7808.cpp,-1,15,,"error(""--all and --mirror are incompatible"");","[""addLog""]","[[], [""error"", ""all"", ""and"", ""mirror"", ""are"", ""incompatible""]]",[-2666191584206365492],6064,"81 days, 12:00:00"
https://github.com/git/git/commit/a8128ed62858063e29edc066b14b8b0fa6257cc2,06 May 2008,"git-cat-file: Add --batch option

--batch is similar to --batch-check, except that the contents of each object is
also printed. The output's form is:

<sha1> SP <type> SP <size> LF
<contents> LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/hunk_7200.cpp,,,data/crawl/git/old_hunk_7200.cpp,data/crawl/git/new_hunk_7200.cpp,4,4,"error(""git-cat-file: Can't specify a type (\""%s\"") with --batch-check"", arg);","error(""git-cat-file: Can't specify a type (\""%s\"") with %s"", arg, batch ? ""--batch"" : ""--batch-check"");","[""updateContent"", ""addContent"", ""addVariable""]","[[], [""%s"", ""batch"", ""batch""]]",[-17040850226491103944],6063,0:00:00
https://github.com/git/git/commit/a45d46ba72a8be16eeb30f608620bac7d9296803,06 May 2008,"Preparation to call determine_author_info from prepare_to_commit

Reorder functions definitions such that determine_author_info is
defined before prepare_to_commit. No code changes.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_7198.cpp,,,data/crawl/git/old_hunk_7198.cpp,data/crawl/git/new_hunk_7198.cpp,22,-1,"die(""invalid commit: %s"", use_message);",,"[""removeLog""]","[[""die"", ""invalid"", ""commit"", ""%s"", ""use_message""], []]",[5806406841116352152],6062,0:00:00
https://github.com/git/git/commit/a45d46ba72a8be16eeb30f608620bac7d9296803,06 May 2008,"Preparation to call determine_author_info from prepare_to_commit

Reorder functions definitions such that determine_author_info is
defined before prepare_to_commit. No code changes.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_7197.cpp,,,data/crawl/git/old_hunk_7197.cpp,data/crawl/git/new_hunk_7197.cpp,-1,22,,"die(""invalid commit: %s"", use_message);","[""addLog""]","[[], [""die"", ""invalid"", ""commit"", ""%s"", ""use_message""]]",[-5806406841116352152],6061,0:00:00
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,193,,"fprintf(fp, ""\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\n""]]",[-5179306325123647028],6060,"82 days, 12:00:00"
https://github.com/git/git/commit/c998ae9baa1cc5f507646da9850731de634d2ee7,11 May 2008,"Allow tracking branches to set up rebase by default.

Change cd67e4d4 introduced a new configuration parameter that told
pull to automatically perform a rebase instead of a merge.  This
change provides a configuration option to enable this feature
automatically when creating a new branch.

If the variable branch.autosetuprebase applies for a branch that's
being created, that branch will have branch.<name>.rebase set to true.

Signed-off-by: Dustin Sallings <dustin@spy.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/hunk_7189.cpp,,,data/crawl/git/old_hunk_7189.cpp,data/crawl/git/new_hunk_7189.cpp,-1,15,,"error(""Malformed value for %s"", var);","[""addLog""]","[[], [""error"", ""Malformed"", ""value"", ""for"", ""%s"", ""var""]]",[-4128216410369146697],6059,"1 day, 0:00:00"
https://github.com/git/git/commit/c998ae9baa1cc5f507646da9850731de634d2ee7,11 May 2008,"Allow tracking branches to set up rebase by default.

Change cd67e4d4 introduced a new configuration parameter that told
pull to automatically perform a rebase instead of a merge.  This
change provides a configuration option to enable this feature
automatically when creating a new branch.

If the variable branch.autosetuprebase applies for a branch that's
being created, that branch will have branch.<name>.rebase set to true.

Signed-off-by: Dustin Sallings <dustin@spy.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/hunk_7188.cpp,,,data/crawl/git/old_hunk_7188.cpp,data/crawl/git/new_hunk_7188.cpp,-1,8,,"printf(""This branch will rebase on pull.\n"");","[""addLog""]","[[], [""printf"", ""This"", ""branch"", ""will"", ""rebase"", ""on"", ""pull"", ""\\n""]]",[3887307495621787849],6058,"1 day, 0:00:00"
https://github.com/git/git/commit/64c0d71ce91696dfe5beb4b51e3233e56c857290,13 May 2008,"Improve reporting of errors in config file routines

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_7180.cpp,,,data/crawl/git/old_hunk_7180.cpp,data/crawl/git/new_hunk_7180.cpp,3,3,"fprintf(stderr, ""invalid config file\n"");","error(""invalid config file %s"", config_filename);","[""updateLog"", ""removeVariable"", ""addContent"", ""removeContent"", ""addVariable""]","[[""fprintf"", ""stderr"", ""file\\n""], [""error"", ""file"", ""%s"", ""config_filename""]]",[20154963409876704864],6057,0:00:00
https://github.com/git/git/commit/960b8ad1b1824b1b82c2b09a000c2119f97633a0,13 May 2008,"Make the exit code of add_file_to_index actually useful

Update the programs which used the function (as add_file_to_cache).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_7170.cpp,,,data/crawl/git/old_hunk_7170.cpp,data/crawl/git/new_hunk_7170.cpp,-1,5,,"die(""updating files failed"");","[""addLog""]","[[], [""die"", ""updating"", ""files"", ""failed""]]",[-6310176972184449224],6056,0:00:00
https://github.com/git/git/commit/08cdfb13374f31b0c1c47444f55042e7b72c3190,17 Sep 2007,"pack-objects --keep-unreachable

This new option is meant to be used in conjunction with the
options ""git repack -a -d"" usually invokes the underlying
pack-objects with.  When this option is given, objects unreachable
from the refs in packs named with --unpacked= option are added
to the resulting pack, in addition to the reachable objects that
are not in packs marked with *.keep files.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/hunk_8067.cpp,,,data/crawl/git/old_hunk_8067.cpp,data/crawl/git/new_hunk_8067.cpp,-1,77,,"die(""cannot open pack index"");","[""addLog""]","[[], [""die"", ""cannot"", ""open"", ""pack"", ""index""]]",[-7044094521612382728],6055,"120 days, 0:00:00"
https://github.com/git/git/commit/cce8d6fdb4d7170a73763586daf6ac4f6b8fce2c,25 May 2008,"mailsplit and mailinfo: gracefully handle NUL characters

The function fgets() has a big problem with NUL characters: it reads
them, but nobody will know if the NUL comes from the file stream, or
was appended at the end of the line.

So implement a custom read_line_with_nul() function.

Noticed by Tommy Thorn.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_7129.cpp,,,data/crawl/git/old_hunk_7129.cpp,data/crawl/git/new_hunk_7129.cpp,5,5,"(fputs(buf, output);","(fwrite(buf, 1, len, output);","[""updateLog"", ""addContent"", ""addVariable""]","[[""fputs""], [""fwrite"", ""1"", ""len""]]",[3824838143360454774],6054,0:00:00
https://github.com/git/git/commit/b7d9681974e61959f10c7b2c1063b7781c5b904e,06 Jun 2008,"Print info about ""git help COMMAND"" on git's main usage pages

Git's main usage pages did not show ""git help"" as a way to get more
information on a specific subcommand. This patch adds an info line after
the list of git commands currently printed by ""git"", ""git help"", ""git
--help"" and ""git help --all"".

Signed-off-by: Teemu Likonen <tlikonen@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_7113.cpp,,,data/crawl/git/old_hunk_7113.cpp,data/crawl/git/new_hunk_7113.cpp,-1,10,,"printf(""\n%s\n"", git_more_info_string);","[""addLog""]","[[], [""printf"", ""\\n%s\\n"", ""git_more_info_string""]]",[-881586346879553522],6053,0:00:00
https://github.com/git/git/commit/df6a7ff7ac55d320afa1b8a59393122d6ca0f6c4,19 Jun 2008,"builtin-fast-export: Add importing and exporting of revision marks

This adds the --import-marks and --export-marks to fast-export. These import
and export the marks used to for all revisions exported in a similar fashion
to what fast-import does. The format is the same as fast-import, so you can
create a bidirectional importer / exporter by using the same marks file on
both sides.

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/hunk_7076.cpp,,,data/crawl/git/old_hunk_7076.cpp,data/crawl/git/new_hunk_7076.cpp,-1,47,,"die(""corrupt mark line: %s"", line);","[""addLog""]","[[], [""die"", ""corrupt"", ""mark"", ""line"", ""%s"", ""line""]]",[-6525197999651347646],6052,0:00:00
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8370.cpp,,,data/crawl/git/old_hunk_8370.cpp,data/crawl/git/new_hunk_8370.cpp,-1,24,,"die(""unable to overwrite old ref-pack file (%s)"", strerror(errno));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""overwrite"", ""old"", ""ref"", ""pack"", ""file"", ""%s"", ""strerror"", ""errno""]]",[27842291131279808820],6051,"194 days, 12:00:00"
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8370.cpp,,,data/crawl/git/old_hunk_8370.cpp,data/crawl/git/new_hunk_8370.cpp,-1,22,,"die(""failed to write ref-pack file (%s)"", strerror(errno));","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file"", ""%s"", ""strerror"", ""errno""]]",[15210699331011488064],6050,"194 days, 12:00:00"
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8370.cpp,,,data/crawl/git/old_hunk_8370.cpp,data/crawl/git/new_hunk_8370.cpp,-1,18,,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled \n"");","[""addLog""]","[[], [""fprintf"", ""cbdata"", ""refs_file"", ""pack"", ""refs"", ""with"", ""peeled"", ""\\n""]]",[-10649476022701472277],6049,"194 days, 12:00:00"
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8370.cpp,,,data/crawl/git/old_hunk_8370.cpp,data/crawl/git/new_hunk_8370.cpp,-1,14,,"die(""unable to create ref-pack file structure (%s)"",
		    strerror(errno));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""create"", ""ref"", ""pack"", ""file"", ""structure"", ""%s"", ""strerror"", ""errno""]]",[18097291555123731738],6048,"194 days, 12:00:00"
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8371.cpp,,,data/crawl/git/old_hunk_8371.cpp,data/crawl/git/new_hunk_8371.cpp,17,-1,"die(""unable to overwrite old ref-pack file (%s)"", strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""overwrite"", ""old"", ""ref"", ""pack"", ""file"", ""%s"", ""strerror"", ""errno""], []]",[-27842291131279808820],6047,"194 days, 12:00:00"
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8371.cpp,,,data/crawl/git/old_hunk_8371.cpp,data/crawl/git/new_hunk_8371.cpp,10,-1,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled \n"");",,"[""removeLog""]","[[""fprintf"", ""cbdata"", ""refs_file"", ""pack"", ""refs"", ""with"", ""peeled"", ""\\n""], []]",[10649476022701472277],6046,"194 days, 12:00:00"
https://github.com/git/git/commit/99b5a79e1329468bee26ae3bd9070c47418279d0,27 May 2007,"Make the pack-refs interfaces usable from outside

This just basically creates a ""pack_refs()"" function that could be used by
anybody. You pass it in the flags you want as a bitmask (PACK_REFS_ALL and
PACK_REFS_PRUNE), and it will do all the heavy lifting.

Of course, it's still static, and it's all in the builtin-pack-refs.c
file, so it's not actually visible to the outside, but the next step would
be to just move it all to a library file (probably refs.c) and expose it.

Then we could easily make ""git gc"" do this too.

While I did it, I also made it check the return value of the fflush and
fsync stage, to make sure that we don't overwrite the old packed-refs file
with something that got truncated due to write errors!

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",66,data/crawl/git/hunk_8371.cpp,,,data/crawl/git/old_hunk_8371.cpp,data/crawl/git/new_hunk_8371.cpp,6,-1,"die(""unable to create ref-pack file structure (%s)"",
		    strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""ref"", ""pack"", ""file"", ""structure"", ""%s"", ""strerror"", ""errno""], []]",[-18097291555123731738],6045,"194 days, 12:00:00"
https://github.com/git/git/commit/ffe659f94d793375fca97dd296422fc10c155016,30 Oct 2007,"parse-options: make some arguments optional, add callbacks.

* add the possibility to use callbacks to parse some options, this can
  help implementing new options kinds with great flexibility. struct option
  gains a callback pointer and a `defval' where callbacks user can put
  either integers or pointers. callbacks also can use the `value' pointer
  for anything, preferably to the pointer to the final storage for the value
  though.

* add a `flag' member to struct option to make explicit that this option may
  have an optional argument. The semantics depends on the option type. For
  INTEGERS, it means that if the switch is not used in its
  --long-form=<value> form, and that there is no token after it or that the
  token does not starts with a digit, then it's assumed that the switch has
  no argument. For STRING or CALLBACK it works the same, except that the
  condition is that the next atom starts with a dash. This is needed to
  implement backward compatible behaviour with existing ways to parse the
  command line. Its use for new options is discouraged.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/hunk_7876.cpp,,,data/crawl/git/old_hunk_7876.cpp,data/crawl/git/new_hunk_7876.cpp,-1,17,,"fprintf(stderr, "" [...]"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""["", ""]""]]",[-13925655260893380928],6044,"118 days, 12:00:00"
https://github.com/git/git/commit/ffe659f94d793375fca97dd296422fc10c155016,30 Oct 2007,"parse-options: make some arguments optional, add callbacks.

* add the possibility to use callbacks to parse some options, this can
  help implementing new options kinds with great flexibility. struct option
  gains a callback pointer and a `defval' where callbacks user can put
  either integers or pointers. callbacks also can use the `value' pointer
  for anything, preferably to the pointer to the final storage for the value
  though.

* add a `flag' member to struct option to make explicit that this option may
  have an optional argument. The semantics depends on the option type. For
  INTEGERS, it means that if the switch is not used in its
  --long-form=<value> form, and that there is no token after it or that the
  token does not starts with a digit, then it's assumed that the switch has
  no argument. For STRING or CALLBACK it works the same, except that the
  condition is that the next atom starts with a dash. This is needed to
  implement backward compatible behaviour with existing ways to parse the
  command line. Its use for new options is discouraged.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/hunk_7876.cpp,,,data/crawl/git/old_hunk_7876.cpp,data/crawl/git/new_hunk_7876.cpp,-1,12,,"fprintf(stderr, "" [<%s>]"", opts->argh);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""["", ""%s"", ""]"", ""opts"", ""argh""]]",[-16768521551179362836],6043,"118 days, 12:00:00"
https://github.com/git/git/commit/ffe659f94d793375fca97dd296422fc10c155016,30 Oct 2007,"parse-options: make some arguments optional, add callbacks.

* add the possibility to use callbacks to parse some options, this can
  help implementing new options kinds with great flexibility. struct option
  gains a callback pointer and a `defval' where callbacks user can put
  either integers or pointers. callbacks also can use the `value' pointer
  for anything, preferably to the pointer to the final storage for the value
  though.

* add a `flag' member to struct option to make explicit that this option may
  have an optional argument. The semantics depends on the option type. For
  INTEGERS, it means that if the switch is not used in its
  --long-form=<value> form, and that there is no token after it or that the
  token does not starts with a digit, then it's assumed that the switch has
  no argument. For STRING or CALLBACK it works the same, except that the
  condition is that the next atom starts with a dash. This is needed to
  implement backward compatible behaviour with existing ways to parse the
  command line. Its use for new options is discouraged.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/hunk_7876.cpp,,,data/crawl/git/old_hunk_7876.cpp,data/crawl/git/new_hunk_7876.cpp,-1,4,,"fprintf(stderr, "" [<n>]"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""["", ""n"", ""]""]]",[-13925655246813338577],6042,"118 days, 12:00:00"
https://github.com/git/git/commit/f21a47b27ceef8ff2f6f218d5b7266d5fd9e2e93,15 Aug 2007,"Introduces xmkstemp()

This is a wrapper for mkstemp() that performs error checking and
calls die() when an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_8161.cpp,,,data/crawl/git/old_hunk_8161.cpp,data/crawl/git/new_hunk_8161.cpp,-1,9,,"die(""Unable to create temporary file: %s"", strerror(errno));","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""create"", ""temporary"", ""file"", ""%s"", ""strerror"", ""errno""]]",[12826327041575062213],6041,"156 days, 12:00:00"
https://github.com/git/git/commit/f57882505efe05990102a0d96b37c09baadae03d,28 Jun 2007,"git-log: detect dup and fdopen failure

This defines xdup() and xfdopen() in git-compat-util.h to give
us error-catching variants of them without cluttering the code
too much.

Signed-off-by: Jim Meyering <jim@meyering.net>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_8259.cpp,,,data/crawl/git/old_hunk_8259.cpp,data/crawl/git/new_hunk_8259.cpp,-1,15,,"die(""Out of memory? fdopen failed: %s"", strerror(errno));","[""addLog""]","[[], [""die"", ""Out"", ""of"", ""memory"", ""fdopen"", ""failed"", ""%s"", ""strerror"", ""errno""]]",[19602419132735017333],6040,"180 days, 12:00:00"
https://github.com/git/git/commit/f57882505efe05990102a0d96b37c09baadae03d,28 Jun 2007,"git-log: detect dup and fdopen failure

This defines xdup() and xfdopen() in git-compat-util.h to give
us error-catching variants of them without cluttering the code
too much.

Signed-off-by: Jim Meyering <jim@meyering.net>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_8259.cpp,,,data/crawl/git/old_hunk_8259.cpp,data/crawl/git/new_hunk_8259.cpp,-1,7,,"die(""dup failed: %s"", strerror(errno));","[""addLog""]","[[], [""die"", ""dup"", ""failed"", ""%s"", ""strerror"", ""errno""]]",[78056356597204166],6039,"180 days, 12:00:00"
https://github.com/git/git/commit/99093238bbf2cd886debf7bdb91478cb405ef66d,25 Jun 2008,"optimize verify-pack a bit

Using find_pack_entry_one() to get object offsets is rather suboptimal
when nth_packed_object_offset() can be used directly.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_7054.cpp,,,data/crawl/git/old_hunk_7054.cpp,data/crawl/git/new_hunk_7054.cpp,5,-1,"die(""internal error pack-check find-pack-entry-one"");",,"[""removeLog""]","[[""die"", ""internal"", ""error"", ""pack"", ""check"", ""find"", ""pack"", ""entry"", ""one""], []]",[-13449018377605609811],6038,0:00:00
https://github.com/git/git/commit/ddcf786fd7d5755711439371dcfd9a7ba1dfa7a5,26 May 2007,"fixes to output of git-verify-pack -v

Now that the default delta depth is 50, it is a good idea to also bump
MAX_CHAIN to 50.

While at it, make the display a bit prettier by making the MAX_CHAIN
limit inclusive, and display the number of deltas that are above that
limit at the end instead of the beginning.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",19,data/crawl/git/hunk_8374.cpp,,,data/crawl/git/old_hunk_8374.cpp,data/crawl/git/new_hunk_8374.cpp,-1,17,,"printf(""chain length > %d: %d object%s\n"", MAX_CHAIN,
		       chain_histogram[0], chain_histogram[0] > 1 ? ""s"" : """");","[""addLog""]","[[], [""printf"", ""chain"", ""length"", ""%d"", ""%d"", ""object%s\\n"", ""MAX_CHAIN"", ""chain_histogram[0]"", ""chain_histogram[0]"", ""1"", ""s""]]",[46670005765220949593],6037,"198 days, 0:00:00"
https://github.com/git/git/commit/8e21d63b02f1b26f7695ca515e51e4622a995af2,25 Jun 2008,"clone: create intermediate directories of destination repo

The shell version used to use ""mkdir -p"" to create the repo
path, but the C version just calls ""mkdir"". Let's replicate
the old behavior. We have to create the git and worktree
leading dirs separately; while most of the time, the
worktree dir contains the git dir (as .git), the user can
override this using GIT_WORK_TREE.

We can reuse safe_create_leading_directories, but we need to
make a copy of our const buffer to do so. Since
merge-recursive uses the same pattern, we can factor this
out into a global function. This has two other cleanup
advantages for merge-recursive:

  1. mkdir_p wasn't a very good name. ""mkdir -p foo/bar"" actually
     creates bar, but this function just creates the leading
     directories.

  2. mkdir_p took a mode argument, but it was completely
     ignored.

Acked-by: Daniel Barkalow <barkalow@iabervon.org>

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_7056.cpp,,,data/crawl/git/old_hunk_7056.cpp,data/crawl/git/new_hunk_7056.cpp,-1,4,,"die(""could not create leading directories of '%s'"", git_dir);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""create"", ""leading"", ""directories"", ""of"", ""%s"", ""git_dir""]]",[9727168409805839874],6036,0:00:00
https://github.com/git/git/commit/8e21d63b02f1b26f7695ca515e51e4622a995af2,25 Jun 2008,"clone: create intermediate directories of destination repo

The shell version used to use ""mkdir -p"" to create the repo
path, but the C version just calls ""mkdir"". Let's replicate
the old behavior. We have to create the git and worktree
leading dirs separately; while most of the time, the
worktree dir contains the git dir (as .git), the user can
override this using GIT_WORK_TREE.

We can reuse safe_create_leading_directories, but we need to
make a copy of our const buffer to do so. Since
merge-recursive uses the same pattern, we can factor this
out into a global function. This has two other cleanup
advantages for merge-recursive:

  1. mkdir_p wasn't a very good name. ""mkdir -p foo/bar"" actually
     creates bar, but this function just creates the leading
     directories.

  2. mkdir_p took a mode argument, but it was completely
     ignored.

Acked-by: Daniel Barkalow <barkalow@iabervon.org>

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_7055.cpp,,,data/crawl/git/old_hunk_7055.cpp,data/crawl/git/new_hunk_7055.cpp,-1,4,,"die(""could not create leading directories of '%s'"",
					work_tree);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""create"", ""leading"", ""directories"", ""of"", ""%s"", ""work_tree""]]",[7335277410049705398],6035,0:00:00
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7044.cpp,,,data/crawl/git/old_hunk_7044.cpp,data/crawl/git/new_hunk_7044.cpp,37,-1,"die (""Could not get current working directory"");",,"[""removeLog""]","[[""die"", ""Could"", ""not"", ""get"", ""current"", ""working"", ""directory""], []]",[5754901273999352896],6034,0:00:00
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_8185.cpp,,,data/crawl/git/old_hunk_8185.cpp,data/crawl/git/new_hunk_8185.cpp,-1,64,,"die (""Could not change back to '%s'"", cwd);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""change"", ""back"", ""to"", ""%s"", ""cwd""]]",[7042323910304625250],6033,"166 days, 0:00:00"
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_8185.cpp,,,data/crawl/git/old_hunk_8185.cpp,data/crawl/git/new_hunk_8185.cpp,-1,54,,"die (""Invalid symlink: %s"", buf);","[""addLog""]","[[], [""die"", ""Invalid"", ""symlink"", ""%s"", ""buf""]]",[-3533586999573817185],6032,"166 days, 0:00:00"
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_8185.cpp,,,data/crawl/git/old_hunk_8185.cpp,data/crawl/git/new_hunk_8185.cpp,-1,43,,"die (""Too long path name: '%s/%s'"",
						buf, last_elem);","[""addLog""]","[[], [""die"", ""Too"", ""long"", ""path"", ""name"", ""%s/%s"", ""buf"", ""last_elem""]]",[902185929137706479],6031,"166 days, 0:00:00"
https://github.com/git/git/commit/e5392c51469c25851f9c6e53165d75fc61901768,01 Aug 2007,"Add is_absolute_path() and make_absolute_path()

This patch adds convenience functions to work with absolute paths.
The function is_absolute_path() should help the efforts to integrate
the MinGW fork.

Note that make_absolute_path() returns a pointer to a static buffer.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_8185.cpp,,,data/crawl/git/old_hunk_8185.cpp,data/crawl/git/new_hunk_8185.cpp,-1,35,,"die (""Could not switch to '%s'"", buf);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""switch"", ""to"", ""%s"", ""buf""]]",[15034998833640817032],6030,"166 days, 0:00:00"
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7038.cpp,,,data/crawl/git/old_hunk_7038.cpp,data/crawl/git/new_hunk_7038.cpp,88,-1,printf(subsep);,,"[""removeLog""]","[[""printf"", ""subsep""], []]",[-10084909125597494171],6029,0:00:00
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,1113,,"printf(""Rewinding the tree to pristine...\n"");","[""addLog""]","[[], [""printf"", ""Rewinding"", ""the"", ""tree"", ""to"", ""pristine"", ""\\n""]]",[12364896792726054540],6028,0:00:00
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,1139,,"die(""Could open %s for writing"", git_path(""MERGE_MSG""));","[""addLog""]","[[], [""die"", ""Could"", ""open"", ""%s"", ""for"", ""writing"", ""git_path"", ""MERGE_MSG""]]",[3730892144240057575],6027,0:00:00
https://github.com/git/git/commit/334f4831e5a779d42e521b770a26eae1ecb27e86,18 Oct 2007,"send-pack: don't update tracking refs on error

Previously, we updated the tracking refs (which match refs we
are pushing) while generating the list of refs to send.
However, at that point we don't know whether the refs were
accepted.

Instead, we now wait until we get a response code from the
server. If an error was indicated, we don't update any local
tracking refs. Technically some refs could have been updated
on the remote, but since the local ref update is just an
optimization to avoid an extra fetch, we are better off
erring on the side of correctness.

The user-visible message is now generated much later in the
program, and has been tweaked to make more sense.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",50,data/crawl/git/hunk_7926.cpp,,,data/crawl/git/old_hunk_7926.cpp,data/crawl/git/new_hunk_7926.cpp,11,-1,"error(""Failed to delete"");",,"[""removeLog""]","[[""error"", ""Failed"", ""to"", ""delete""], []]",[-677248472710611288],6026,"132 days, 0:00:00"
https://github.com/git/git/commit/1cc6985ca7dd3aaab0617ec0fd00d4eb0b424465,09 Jul 2008,"parse-options: add PARSE_OPT_LASTARG_DEFAULT flag

If you set this for a given option, and the optoin appears without an
argument on the command line, then the `defval' is used as its argument.

Note that this flag is meaningless in presence of OPTARG or NOARG flags.
(in the current implementation it will be ignored, but don't rely on it).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_7020.cpp,,,data/crawl/git/old_hunk_7020.cpp,data/crawl/git/new_hunk_7020.cpp,4,3,"opterror(opt, ""requires a value"", flags);","(get_arg(p, opt, flags, &arg);","[""addLog"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""opterror"", ""requires"", ""a"", ""value""], [""get_arg"", ""p"", ""&arg""]]",[1885579575956042384],6025,0:00:00
https://github.com/git/git/commit/694a577519a762d12b8a53e76b6f1dd3ccf25e7d,23 Nov 2007,"git-branch --contains=commit

This teaches git-branch to limit its listing to branches that
are descendants to the named commit.

When you are using many topic branches, you often would want to
see which branch already includes a commit, so that you know
which can and cannot be rewound without disrupting other people.

One thing that sometimes happens to me is:

 * Somebody sends a patch that is a good maint material.  I
   apply it to 'maint':

     $ git checkout maint
     $ git am -3 -s obvious-fix.patch

 * Then somebody else sends another patch that is possibly a
   good maint material, but I'd want to cook it in 'next' to be
   extra sure.  I fork a topic from 'maint' and apply the patch:

     $ git checkout -b xx/maint-fix-foo
     $ git am -3 -s ,xx-maint-fix-foo.patch

 * A minor typo is found in the ""obvious-fix.patch"".

The above happens without pushing the results out, so I can
freely recover from it by amending 'maint', as long as I do not
forget to rebase the topics that were forked previously.

With this patch, I can do this to find out which topic
branches already contain the faulty commit:

    $ git branch --contains=maint^
      xx/maint-fix-foo

so I can rebase the xx/maint-fix-foo branch before merging it
to 'next'.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/hunk_7737.cpp,,,data/crawl/git/old_hunk_7737.cpp,data/crawl/git/new_hunk_7737.cpp,-1,11,,"die(""malformed object name %s"", arg);","[""addLog""]","[[], [""die"", ""malformed"", ""object"", ""name"", ""%s"", ""arg""]]",[-6246458296801365212],6024,"114 days, 12:00:00"
https://github.com/git/git/commit/14ec9cbdae1991a14aa1cce251e44ea5cfee5ade,09 Jul 2008,"git-shortlog: migrate to parse-options partially.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/hunk_7012.cpp,,,data/crawl/git/old_hunk_7012.cpp,data/crawl/git/new_hunk_7012.cpp,12,-1,die(wrap_arg_usage);,,"[""removeLog""]","[[""die"", ""wrap_arg_usage""], []]",[-3081824583732820880],6023,0:00:00
https://github.com/git/git/commit/6b61ec0564993d2e60f7eb56c0f0fd9c313d5e2c,09 Jul 2008,"revisions: refactor handle_revision_opt into parse_revision_opt.

It seems we're using handle_revision_opt the same way each time, have a
wrapper around it that does the 9-liner we copy each time instead.

handle_revision_opt can be static in the module for now, it's always
possible to make it public again if needed.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_7010.cpp,,,data/crawl/git/old_hunk_7010.cpp,data/crawl/git/new_hunk_7010.cpp,13,-1,"error(""unknown option `%s'"", ctx.argv[0]);",,"[""removeLog""]","[[""error"", ""unknown"", ""option"", ""%s"", ""ctx"", ""argv[0]""], []]",[-5936802647489237526],6022,0:00:00
https://github.com/git/git/commit/b4372ef136b0a5a2c1dbd88a11dd72b478d0e0a5,07 Jul 2007,"Enable ""git rerere"" by the config variable rerere.enabled

Earlier, ""git rerere"" was enabled by creating the directory
.git/rr-cache.  That is definitely not in line with most other
features, which are enabled by a config variable.

So, check the config variable ""rerere.enabled"". If it is set
to ""false"" explicitely, do not activate rerere, even if
.git/rr-cache exists. This should help when you want to disable
rerere temporarily.

If ""rerere.enabled"" is not set at all, fall back to detection
of the directory .git/rr-cache.

[jc: with minimum tweaks]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8231.cpp,,,data/crawl/git/old_hunk_8231.cpp,data/crawl/git/new_hunk_8231.cpp,-1,26,,"die(""Could not create directory %s"", rr_cache);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""create"", ""directory"", ""%s"", ""rr_cache""]]",[2777152365766598166],6021,"184 days, 12:00:00"
https://github.com/git/git/commit/75336878c795b746b1c67b736c96f5ef8a2b3f02,29 Feb 2008,"Write index file on any checkout of files

We need to rewrite the index file when we check out files, even if we
haven't modified the blob info by reading from another tree, so that
we get the stat cache to include the fact that we just modified the
file so it doesn't need to be refreshed.

While we're at it, move everything that needs to be done to check out
some paths from a tree (or the current index) into checkout_paths().

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_7369.cpp,,,data/crawl/git/old_hunk_7369.cpp,data/crawl/git/new_hunk_7369.cpp,12,-1,"die(""unable to write new index file"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""write"", ""new"", ""index"", ""file""], []]",[-9643391217927606253],6020,"66 days, 0:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7006.cpp,,,data/crawl/git/old_hunk_7006.cpp,data/crawl/git/new_hunk_7006.cpp,46,-1,"die(""unable to write rerere record"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""write"", ""rerere"", ""record""], []]",[-14264890760065462695],6019,0:00:00
https://github.com/git/git/commit/562e25abea9f1f2d443053279c009a88d81a592b,15 Jul 2008,"archive: centralize archive entry writing

Add the exported function write_archive_entries() to archive.c, which uses
the new ability of read_tree_recursive() to pass a context pointer to its
callback in order to centralize previously duplicated code.

The new callback function write_archive_entry() does the work that every
archiver backend needs to do: loading file contents, entering subdirectories,
handling file attributes, constructing the full path of the entry.  All that
done, it calls the backend specific write_archive_entry_fn_t function.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",287,data/crawl/git/hunk_6993.cpp,,,data/crawl/git/old_hunk_6993.cpp,data/crawl/git/new_hunk_6993.cpp,-1,45,,"fprintf(stderr, ""%.*s\n"", (int)path.len, path.buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s\\n"", ""int"", ""path"", ""len"", ""path"", ""buf""]]",[3115201096558472877],6018,0:00:00
https://github.com/git/git/commit/562e25abea9f1f2d443053279c009a88d81a592b,15 Jul 2008,"archive: centralize archive entry writing

Add the exported function write_archive_entries() to archive.c, which uses
the new ability of read_tree_recursive() to pass a context pointer to its
callback in order to centralize previously duplicated code.

The new callback function write_archive_entry() does the work that every
archiver backend needs to do: loading file contents, entering subdirectories,
handling file attributes, constructing the full path of the entry.  All that
done, it calls the backend specific write_archive_entry_fn_t function.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",287,data/crawl/git/hunk_6992.cpp,,,data/crawl/git/old_hunk_6992.cpp,data/crawl/git/new_hunk_6992.cpp,7,-1,"die(""cannot read %s"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""cannot"", ""read"", ""%s"", ""sha1_to_hex"", ""sha1""], []]",[13051767246605351755],6017,0:00:00
https://github.com/git/git/commit/328a4750b155df9de29cac007c74e2412d244620,17 Jun 2008,"path-list documentation: document all functions and data structures

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/hunk_7080.cpp,,,data/crawl/git/old_hunk_7080.cpp,data/crawl/git/new_hunk_7080.cpp,-1,41,,"printf(""%s\n"", list.items[i].path);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""list"", ""items[i]"", ""path""]]",[24294684506666469527],6016,"17 days, 12:00:00"
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,114,,"fprintf(stderr, ""Available strategies are:%s.\n"", err.buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Available"", ""strategies"", ""are"", ""%s"", ""\\n"", ""err"", ""buf""]]",[-33112305456315715984],6015,"7 days, 0:00:00"
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,113,,"fprintf(stderr, ""Could not find merge strategy '%s'.\n"", name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Could"", ""not"", ""find"", ""merge"", ""strategy"", ""%s"", ""\\n"", ""name""]]",[-3832776917505481148],6014,"7 days, 0:00:00"
https://github.com/git/git/commit/f01913e4190bed98f918ec575229943a0ee47d83,30 Nov 2007,"Add ""--expire <time>"" option to 'git prune'

Earlier, 'git prune' would prune all loose unreachable objects.
This could be quite dangerous, as the objects could be used in
an ongoing operation.

This patch adds a mode to expire only loose, unreachable objects
which are older than a certain time.  For example, by

	git prune --expire 14.days

you can prune only those objects which are loose, unreachable
and older than 14 days (and thus probably outdated).

The implementation uses st.st_mtime rather than st.st_ctime,
because it can be tested better, using 'touch -d <time>' (and
omitting the test when the platform does not support that
command line switch).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_7721.cpp,,,data/crawl/git/old_hunk_7721.cpp,data/crawl/git/new_hunk_7721.cpp,-1,11,,"error(""Could not stat '%s'"", fullpath);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""stat"", ""%s"", ""fullpath""]]",[24085478664867623507],6013,"119 days, 0:00:00"
https://github.com/git/git/commit/782c2d65c24066a5d83453efb52763bc34c10f81,16 Feb 2008,"Build in checkout

The only differences in behavior should be:

 - git checkout -m with non-trivial merging won't print out
   merge-recursive messages (see the change in t7201-co.sh)

 - git checkout -- paths... will give a sensible error message if
   HEAD is invalid as a commit.

 - some intermediate states which were written to disk in the shell
   version (in particular, index states) are only kept in memory in
   this version, and therefore these can no longer be revealed by
   later write operations becoming impossible.

 - when we change branches, we discard MERGE_MSG, SQUASH_MSG, and
   rr-cache/MERGE_RR, like reset always has.

I'm not 100% sure I got the merge recursive setup exactly right; the
base for a non-trivial merge in the shell code doesn't seem
theoretically justified to me, but I tried to match it anyway, and the
tests all pass this way.

Other than these items, the results should be identical to the shell
version, so far as I can tell.

[jc: squashed lock-file fix from Dscho in]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",489,data/crawl/git/hunk_7475.cpp,,,data/crawl/git/old_hunk_7475.cpp,data/crawl/git/new_hunk_7475.cpp,-1,451,,"die(""git checkout: -f and -m are incompatible"");","[""addLog""]","[[], [""die"", ""git"", ""checkout"", ""f"", ""and"", ""m"", ""are"", ""incompatible""]]",[-1496901409729145129],6012,"80 days, 0:00:00"
https://github.com/git/git/commit/782c2d65c24066a5d83453efb52763bc34c10f81,16 Feb 2008,"Build in checkout

The only differences in behavior should be:

 - git checkout -m with non-trivial merging won't print out
   merge-recursive messages (see the change in t7201-co.sh)

 - git checkout -- paths... will give a sensible error message if
   HEAD is invalid as a commit.

 - some intermediate states which were written to disk in the shell
   version (in particular, index states) are only kept in memory in
   this version, and therefore these can no longer be revealed by
   later write operations becoming impossible.

 - when we change branches, we discard MERGE_MSG, SQUASH_MSG, and
   rr-cache/MERGE_RR, like reset always has.

I'm not 100% sure I got the merge recursive setup exactly right; the
base for a non-trivial merge in the shell code doesn't seem
theoretically justified to me, but I tried to match it anyway, and the
tests all pass this way.

Other than these items, the results should be identical to the shell
version, so far as I can tell.

[jc: squashed lock-file fix from Dscho in]

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",489,data/crawl/git/hunk_7475.cpp,,,data/crawl/git/old_hunk_7475.cpp,data/crawl/git/new_hunk_7475.cpp,-1,448,,"die(""git checkout: --track and --no-track require -b"");","[""addLog""]","[[], [""die"", ""git"", ""checkout"", ""track"", ""and"", ""no"", ""track"", ""require"", ""b""]]",[6029095078545334860],6011,"80 days, 0:00:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,55,,"die(""could not read message file '%s': %s"",
						path, strerror(errno));","[""addLog""]","[[], [""die"", ""could"", ""not"", ""read"", ""message"", ""file"", ""%s"", ""%s"", ""path"", ""strerror"", ""errno""]]",[14821107430248006862],6010,"186 days, 0:00:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,48,,"die(""There was a problem with the editor %s."", editor);","[""addLog""]","[[], [""die"", ""There"", ""was"", ""a"", ""problem"", ""with"", ""the"", ""editor"", ""%s"", ""editor""]]",[-1951240705956417976],6009,"186 days, 0:00:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,32,,"fprintf(stderr,
		""Terminal is dumb but no VISUAL nor EDITOR defined.\n""
		""Please supply the message using either -m or -F option.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Terminal"", ""is"", ""dumb"", ""but"", ""no"", ""VISUAL"", ""nor"", ""EDITOR"", ""defined"", ""\\n"", ""Please"", ""supply"", ""the"", ""message"", ""using"", ""either"", ""m"", ""or"", ""F"", ""option"", ""\\n""]]",[-17720787072534516268],6008,"186 days, 0:00:00"
https://github.com/git/git/commit/7198203ae37c11327c0d01f1e37f3e74381755a9,26 Jul 2008,"editor.c: Libify launch_editor()

This patch removes exit()/die() calls and builtin-specific messages
from launch_editor(), so that it can be used as a general libgit.a
function to launch an editor.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_6932.cpp,,,data/crawl/git/old_hunk_6932.cpp,data/crawl/git/new_hunk_6932.cpp,-1,4,,"fprintf(stderr,
			""Please supply the message using either -m or -F option.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Please"", ""supply"", ""the"", ""message"", ""using"", ""either"", ""m"", ""or"", ""F"", ""option"", ""\\n""]]",[-7747082831477977172],6007,0:00:00
https://github.com/git/git/commit/489e351ea03e78746bad0c0ad4fcf4a63920256d,15 Jul 2008,"archive: remove extra arguments parsing code

Replace the code that calls backend specific argument parsers by a
simple flag mechanism.  This reduces code size and complexity.

We can add back such a mechanism (based on incremental parse_opt(),
perhaps) when we need it.  The compression level parameter, though,
is going to be shared by future compressing backends like tgz.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_6987.cpp,,,data/crawl/git/old_hunk_6987.cpp,data/crawl/git/new_hunk_6987.cpp,-1,7,,"die(""Argument not supported for format '%s': -%d"",
					format, compression_level);","[""addLog""]","[[], [""die"", ""Argument"", ""not"", ""supported"", ""for"", ""format"", ""%s"", ""%d"", ""format"", ""compression_level""]]",[7975582116994584616],6006,"5 days, 12:00:00"
https://github.com/git/git/commit/1b9a9467f8b9a8da2fe58d10ae16779492aa7737,06 Jun 2008,"Use nonrelative paths instead of absolute paths for cloned repositories

Particularly for the ""alternates"" file, if one will be created, we
want a path that doesn't depend on the current directory, but we want
to retain any symlinks in the path as given and any in the user's view
of the current directory when the path was given.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/hunk_7110.cpp,,,data/crawl/git/old_hunk_7110.cpp,data/crawl/git/new_hunk_7110.cpp,-1,32,,"die(""Cannot determine the current working directory"");","[""addLog""]","[[], [""die"", ""Cannot"", ""determine"", ""the"", ""current"", ""working"", ""directory""]]",[-18417254768304551014],6005,"25 days, 0:00:00"
https://github.com/git/git/commit/e8b55fab6237b30494aa1905c3209d5bf5494a29,02 Aug 2008,"builtin-name-rev.c: split deeply nested part from the main function

The main function of this command implementation tries to do too many
things.  Split out a handling of single input line into a separate
function to reduce nesting level and clutter.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_6906.cpp,,,data/crawl/git/old_hunk_6906.cpp,data/crawl/git/new_hunk_6906.cpp,36,-1,"printf("" (%s)"", name);",,"[""removeLog""]","[[""printf"", ""%s"", ""name""], []]",[-3075567096171906522],6004,12:00:00
https://github.com/git/git/commit/cb97cc9fef60ea2ff1ce51cf575314c04488dbfd,05 Jan 2008,"builtin-reflog.c: fix typo that accesses an unset variable

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_7607.cpp,,,data/crawl/git/old_hunk_7607.cpp,data/crawl/git/new_hunk_7607.cpp,3,3,"error(""Not a reflog: %s"", ref);","error(""Not a reflog: %s"", argv[i]);","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""ref""], [""argv[i]""]]",[-18449673267390868],6003,"112 days, 12:00:00"
https://github.com/git/git/commit/df0daf8ac0fce4bb98d5aff9295535a1606d2fad,18 Aug 2008,"git-daemon: call logerror() instead of error()

Use logerror(), not error(), so that the messages won't be lost,
especially when running the daemon with its log sent to the syslog
facility.

Signed-off-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_6889.cpp,,,data/crawl/git/old_hunk_6889.cpp,data/crawl/git/new_hunk_6889.cpp,3,3,"error(""poll failed, resuming: %s"",
				      strerror(errno));","logerror(""Poll failed, resuming: %s"",
				      strerror(errno));","[""updateLog"", ""updateContent""]","[[""error"", ""poll""], [""logerror"", ""Poll""]]",[-8448944381644221939],6002,0:00:00
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6876.cpp,,,data/crawl/git/old_hunk_6876.cpp,data/crawl/git/new_hunk_6876.cpp,5,5,"output(2, ""Auto-merged %s"", ren1_dst);","output(2, ""Auto-merging %s"", ren1_dst);","[""updateContent""]","[[""merged""], [""merging""]]",[787777882735808692],6001,0:00:00
https://github.com/git/git/commit/abeb40e5aa5b4a39799ae1caad241c8c7708053a,30 Aug 2008,"improve reliability of fixup_pack_header_footer()

Currently, this function has the potential to read corrupted pack data
from disk and give it a valid SHA1 checksum.  Let's add the ability to
validate SHA1 checksum of existing data along the way, including before
and after any arbitrary point in the pack.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6858.cpp,,,data/crawl/git/old_hunk_6858.cpp,data/crawl/git/new_hunk_6858.cpp,18,39,"die(""Failed seeking to start: %s"", strerror(errno));","die(""Failed seeking to start of %s: %s"", pack_name, strerror(errno));","[""updateContent"", ""addVariable""]","[[], [""of"", ""%s"", ""pack_name""]]",[8323425245676669625],6000,0:00:00
https://github.com/git/git/commit/38901a48375952ab6c02f22bddfa19ac2bec2c36,31 Aug 2008,"checkout --ours/--theirs: allow checking out one side of a conflicting merge

This lets you to check out 'our' (or 'their') version of an
unmerged path out of the index while resolving conflicts.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_6846.cpp,,,data/crawl/git/old_hunk_6846.cpp,data/crawl/git/new_hunk_6846.cpp,-1,25,,"error(""path '%s' does not have %s version"",
		     ce->name,
		     (stage == 2) ? ""our"" : ""their"");","[""addLog""]","[[], [""error"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""%s"", ""version"", ""ce"", ""name"", ""stage"", ""2"", ""our"", ""their""]]",[29534638648382695343],5999,0:00:00
https://github.com/git/git/commit/20b178de7b20a0ebf02b8da3b4791c06fc8e3a63,20 Dec 2007,"Improved submodule merge support

When merging conflicting submodule changes from a supermodule, generate
a conflict message saying what went wrong. Also leave the tree in a state
where git status shows the conflict, and git submodule status gives the user
enough information to do the merge manally. Previously this would just fail.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_7625.cpp,,,data/crawl/git/old_hunk_7625.cpp,data/crawl/git/new_hunk_7625.cpp,-1,7,,"output(1, ""CONFLICT (submodule): Merge conflict in %s ""
			       ""- needs %s"", path, sha1_to_hex(b.sha1));","[""addLog""]","[[], [""output"", ""1"", ""CONFLICT"", ""submodule"", ""Merge"", ""conflict"", ""in"", ""%s"", ""needs"", ""%s"", ""path"", ""sha1_to_hex"", ""b"", ""sha1""]]",[-112762431116338243],5998,"127 days, 12:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,991,,"output(2, ""Auto-merging %s"", ren1_dst);","[""addLog""]","[[], [""output"", ""2"", ""Auto"", ""merging"", ""%s"", ""ren1_dst""]]",[-17344062129893604923],5997,0:00:00
https://github.com/git/git/commit/ff72af00f86cbbaaab57c886c70f9799715ca02f,11 Dec 2007,"Support a merge with conflicting gitlink change

merge-recursive did not support merging trees that have conflicting
changes in submodules they contain, and died.  Support it exactly the
same way as how it handles conflicting symbolic link changes --- mark it
as a conflict, take the tentative result from the current side, and
letting the caller resolve the conflict, without dying in merge_file()
function.

Also reword the error message issued when merge_file() has to die
because it sees a tree entry of type it does not support yet.

[jc: fixed up initial draft by Finn Arne Gangstad]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_7676.cpp,,,data/crawl/git/old_hunk_7676.cpp,data/crawl/git/new_hunk_7676.cpp,-1,12,,"die(""unsupported object type in the tree"");","[""addLog""]","[[], [""die"", ""unsupported"", ""object"", ""type"", ""in"", ""the"", ""tree""]]",[-11115034271164745861],5996,"132 days, 0:00:00"
https://github.com/git/git/commit/20b178de7b20a0ebf02b8da3b4791c06fc8e3a63,20 Dec 2007,"Improved submodule merge support

When merging conflicting submodule changes from a supermodule, generate
a conflict message saying what went wrong. Also leave the tree in a state
where git status shows the conflict, and git submodule status gives the user
enough information to do the merge manally. Previously this would just fail.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_7624.cpp,,,data/crawl/git/old_hunk_7624.cpp,data/crawl/git/new_hunk_7624.cpp,-1,4,,"die(""cannot read object %s '%s': It is a submodule!"",
			    sha1_to_hex(sha), path);","[""addLog""]","[[], [""die"", ""cannot"", ""read"", ""object"", ""%s"", ""%s"", ""It"", ""is"", ""a"", ""submodule"", ""sha1_to_hex"", ""sha"", ""path""]]",[-18923520020323435169],5995,"127 days, 12:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,515,,"error(msg, path, "": perhaps a D/F conflict?"");","[""addLog""]","[[], [""error"", ""msg"", ""path"", ""perhaps"", ""a"", ""D/F"", ""conflict""]]",[29861704676970919802],5994,0:00:00
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,516,,"die(""Error building trees"");","[""addLog""]","[[], [""die"", ""Error"", ""building"", ""trees""]]",[17586083037598925326],5993,"141 days, 0:00:00"
https://github.com/git/git/commit/19247e5510279f018f8358a72b38cc5aa62fac8a,21 Sep 2007,"nfv?asprintf are broken without va_copy, workaround them.

* drop nfasprintf.
* move nfvasprintf into imap-send.c back, and let it work on a 8k buffer,
  and die() in case of overflow. It should be enough for imap commands, if
  someone cares about imap-send, he's welcomed to fix it properly.
* replace nfvasprintf use in merge-recursive with a copy of the strbuf_addf
  logic, it's one place, we'll live with it.
  To ease the change, output_buffer string list is replaced with a strbuf ;)
* rework trace.c to call vsnprintf itself.  It's used to format strerror()s
  and git command names, it should never be more than a few octets long, let
  it work on a 8k static buffer with vsnprintf or die loudly.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",180,data/crawl/git/hunk_7997.cpp,,,data/crawl/git/old_hunk_7997.cpp,data/crawl/git/new_hunk_7997.cpp,-1,19,,"fputs(obuf.buf, stdout);","[""addLog""]","[[], [""fputs"", ""obuf"", ""buf"", ""stdout""]]",[-11907005804303826018],5992,"172 days, 12:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,990,-1,"output(2, ""Auto-merging %s"", ren1_dst);",,"[""removeLog""]","[[""output"", ""2"", ""Auto"", ""merging"", ""%s"", ""ren1_dst""], []]",[17344062129893604923],5991,0:00:00
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,514,-1,"error(msg, path, "": perhaps a D/F conflict?"");",,"[""removeLog""]","[[""error"", ""msg"", ""path"", ""perhaps"", ""a"", ""D/F"", ""conflict""], []]",[-29861704676970919802],5990,0:00:00
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_7518.cpp,,,data/crawl/git/old_hunk_7518.cpp,data/crawl/git/new_hunk_7518.cpp,27,-1,"die(""Error building trees"");",,"[""removeLog""]","[[""die"", ""Error"", ""building"", ""trees""], []]",[-17586083037598925326],5989,"103 days, 12:00:00"
https://github.com/git/git/commit/8a2fce1895c058945d8e2dbd8cb7456cc7450ad8,31 Aug 2008,"merge-recursive: introduce merge_options

This makes it possible to avoid passing the labels of branches as
arguments to merge_recursive(), merge_trees() and
merge_recursive_generic().

It also takes care of subtree merge, output buffering, verbosity, and
rename limits - these were global variables till now in
merge-recursive.c.

A new function, named init_merge_options(), is introduced as well, it
clears the struct merge_info, then initializes with default values,
finally updates the default values based on the config and environment
variables.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",361,data/crawl/git/hunk_6821.cpp,,,data/crawl/git/old_hunk_6821.cpp,data/crawl/git/new_hunk_6821.cpp,16,16,"output(1, ""CONFLICT (delete/modify): %s deleted in %s ""
				       ""and modified in %s. Version %s of %s left in tree."",
				       path, branch2,
				       branch1, branch1, path);","output(o, 1, ""CONFLICT (delete/modify): %s deleted in %s ""
				       ""and modified in %s. Version %s of %s left in tree."",
				       path, o->branch2,
				       o->branch1, o->branch1, path);","[""removeVariable"", ""addVariable""]","[[], [""o"", ""o"", ""o"", ""o""]]",[56832170936],5988,0:00:00
https://github.com/git/git/commit/83caecca2f0805d440099d19011fdedc2b3467a5,01 Oct 2008,"git grep: Add ""-z/--null"" option as in GNU's grep.

Here's a trivial patch that adds ""-z"" and ""--null"" options to ""git
grep"". It was discussed on the mailing-list that git's ""-z""
convention should be used instead of GNU grep's ""-Z"".
So things like 'git grep -l -z ""$FOO"" | xargs -0 sed -i ""s/$FOO/$BOO/""'
do work now.

Signed-off-by: Raphael Zimmerer <killekulla@rdrz.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/hunk_6718.cpp,,,data/crawl/git/old_hunk_6718.cpp,data/crawl/git/new_hunk_6718.cpp,3,3,"printf(""%s\n"", name);","show_name(opt, name);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""%s\\n""], [""show_name"", ""opt""]]",[-7288110719436356639],5987,0:00:00
https://github.com/git/git/commit/73118f89b81f5a3ed1bb56e2517627d56e9ebdfb,31 Aug 2008,"merge-recursive.c: Add more generic merge_recursive_generic()

merge_recursive_generic() takes, in comparison to to merge_recursive(),
no commit (""struct commit *"") arguments but SHA ids (""unsigned char *""),
and no commit list of bases but an array of refs (""const char **"").

This makes it more generic in the case that it can also take the SHA
of a tree to merge trees without commits, for the bases, the head
and the remote.

merge_recursive_generic() also handles locking and updating of the
index, which is a common use case of merge_recursive().

This patch also rewrites builtin-merge-recursive.c to make use of
merge_recursive_generic().  By doing this, I stumbled over the
limitation of 20 bases and I've added a warning if this limitation
is exceeded.

This patch qualifies make_virtual_commit() as static again because
this function is not needed anymore outside merge-recursive.c.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_6829.cpp,,,data/crawl/git/old_hunk_6829.cpp,data/crawl/git/new_hunk_6829.cpp,-1,51,,"error(""Unable to write index."");","[""addLog""]","[[], [""error"", ""Unable"", ""to"", ""write"", ""index""]]",[15102046054076746924],5986,"16 days, 12:00:00"
https://github.com/git/git/commit/d09e2cd5516473753cb067e723293fab180e0b1b,06 Oct 2008,"do not segfault if make_cache_entry failed

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",5,data/crawl/git/hunk_6706.cpp,,,data/crawl/git/old_hunk_6706.cpp,data/crawl/git/new_hunk_6706.cpp,-1,4,,"die(""make_cache_entry failed for path '%s'"",
				    one->path);","[""addLog""]","[[], [""die"", ""make_cache_entry"", ""failed"", ""for"", ""path"", ""%s"", ""one"", ""path""]]",[-890889822803427385],5985,0:00:00
https://github.com/git/git/commit/d09e2cd5516473753cb067e723293fab180e0b1b,06 Oct 2008,"do not segfault if make_cache_entry failed

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",5,data/crawl/git/hunk_6705.cpp,,,data/crawl/git/old_hunk_6705.cpp,data/crawl/git/new_hunk_6705.cpp,-1,4,,"die(""make_cache_entry failed for path '%s'"", name);","[""addLog""]","[[], [""die"", ""make_cache_entry"", ""failed"", ""for"", ""path"", ""%s"", ""name""]]",[-13335064711808614844],5984,0:00:00
https://github.com/git/git/commit/7e7abea96b8140c592a46293f5e33aae0683c7ac,12 Oct 2008,"print an error message for invalid path

If verification of path failed, it is always better to print an
error message saying this than relying on the caller function to
print a meaningful error message (especially when the callee already
prints error message for another situation).

Because the callers of add_index_entry_with_check() did not print
any error message, it resulted that the user would not notice the
problem when checkout of an invalid path failed.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",8,data/crawl/git/hunk_6698.cpp,,,data/crawl/git/old_hunk_6698.cpp,data/crawl/git/new_hunk_6698.cpp,-1,4,,"error(""Invalid path '%s'"", path);","[""addLog""]","[[], [""error"", ""Invalid"", ""path"", ""%s"", ""path""]]",[8445380911383275829],5983,0:00:00
https://github.com/git/git/commit/9ed36cfa35cfbd09c454f12194a91cd50ba284d1,20 Feb 2008,"branch: optionally setup branch.*.merge from upstream local branches

""git branch"" and ""git checkout -b"" now honor --track option even when
the upstream branch is local.  Previously --track was silently ignored
when forking from a local branch.  Also the command did not error out
when --track was explicitly asked for but the forked point specified
was not an existing branch (i.e. when there is no way to set up the
tracking configuration), but now it correctly does.

The configuration setting branch.autosetupmerge can now be set to
""always"", which is equivalent to using --track from the command line.
Setting branch.autosetupmerge to ""true"" will retain the former behavior
of only setting up branch.*.merge for remote upstream branches.

Includes test cases for the new functionality.

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/hunk_7438.cpp,,,data/crawl/git/old_hunk_7438.cpp,data/crawl/git/new_hunk_7438.cpp,-1,4,,"die(""Cannot setup tracking information; starting point is not a branch."");","[""addLog""]","[[], [""die"", ""Cannot"", ""setup"", ""tracking"", ""information"", ""starting"", ""point"", ""is"", ""not"", ""a"", ""branch""]]",[-13583089949870744539],5982,"120 days, 0:00:00"
https://github.com/git/git/commit/211c89682eeef310f39022b91e88d07cd5784953,01 Mar 2008,"Make git-remote a builtin

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/hunk_7362.cpp,,,data/crawl/git/old_hunk_7362.cpp,data/crawl/git/new_hunk_7362.cpp,-1,309,,"error(""Could not remove config section '%s'"", buf.buf);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""remove"", ""config"", ""section"", ""%s"", ""buf"", ""buf""]]",[24017358688279476899],5981,"124 days, 12:00:00"
https://github.com/git/git/commit/beece9dab8e26c98062351536ce0d871a066790e,12 Nov 2008,"git send-email: ask less questions when --compose is used.

When --compose is used, we can grab the From/Subject/In-Reply-To from the
edited summary, let it be so and don't ask the user silly questions.

The summary templates gets quite revamped, and includes the list of
patches subjects that are going to be sent with this batch.

When having a body full of empty lines, the summary isn't sent. Document
that in the git-send-email manpage fully.

Note: It doesn't deal with To/Cc/Bcc yet.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/hunk_6621.cpp,,,data/crawl/git/old_hunk_6621.cpp,data/crawl/git/new_hunk_6621.cpp,-1,12,,"die(""the editor exited uncleanly, aborting everything"");","[""addLog""]","[[], [""die"", ""the"", ""editor"", ""exited"", ""uncleanly"", ""aborting"", ""everything""]]",[7707374053350256772],5980,0:00:00
https://github.com/git/git/commit/331fcb598ec0127fd89c992361bc573dcd3a4a63,01 Dec 2008,"git add --intent-to-add: do not let an empty blob be committed by accident

Writing a tree out of an index with an ""intent to add"" entry is blocked.
This implies that you cannot ""git commit"" from such a state; however you
can still do ""git commit -a"" or ""git commit $that_path"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_6606.cpp,,,data/crawl/git/old_hunk_6606.cpp,data/crawl/git/new_hunk_6606.cpp,3,3,"die(""%s: error building trees; the index is unmerged?"", me);","die(""%s: error building trees"", me);","[""updateContent""]","[[""the"", ""index"", ""is"", ""unmerged""], []]",[7848365903348785310],5979,0:00:00
https://github.com/git/git/commit/b96524f83aa6ba7bd08fb59bb0aa07453a984a8d,08 Dec 2008,"builtin-checkout.c: check error return from read_cache()

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_6591.cpp,,,data/crawl/git/old_hunk_6591.cpp,data/crawl/git/new_hunk_6591.cpp,-1,5,,"error(""corrupt index file"");","[""addLog""]","[[], [""error"", ""corrupt"", ""index"", ""file""]]",[-8589857869487119802],5978,0:00:00
https://github.com/git/git/commit/34292bddb861f3cb52a524fdce67234430a744fe,07 Jan 2009,"Introduce the diff option '--patience'

This commit teaches Git to produce diff output using the patience diff
algorithm with the diff option '--patience'.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",175,data/crawl/git/hunk_6539.cpp,,,data/crawl/git/old_hunk_6539.cpp,data/crawl/git/new_hunk_6539.cpp,-1,76,,"printf(""Your answer is: "");","[""addLog""]","[[], [""printf"", ""Your"", ""answer"", ""is""]]",[3293781976823011190],5977,0:00:00
https://github.com/git/git/commit/bde30540169dd625cbd862ff6f38bc8224ec081c,09 Apr 2008,"git-gc --auto: add pre-auto-gc hook

If such a hook is available and exits with a non-zero status, then
git-gc --auto won't run.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_7266.cpp,,,data/crawl/git/old_hunk_7266.cpp,data/crawl/git/new_hunk_7266.cpp,-1,27,,"warning(""%s exited due to uncaught signal"", argv[0]);","[""addLog""]","[[], [""warning"", ""%s"", ""exited"", ""due"", ""to"", ""uncaught"", ""signal"", ""argv[0]""]]",[6886008756878022294],5976,"142 days, 0:00:00"
https://github.com/git/git/commit/bde30540169dd625cbd862ff6f38bc8224ec081c,09 Apr 2008,"git-gc --auto: add pre-auto-gc hook

If such a hook is available and exits with a non-zero status, then
git-gc --auto won't run.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_7266.cpp,,,data/crawl/git/old_hunk_7266.cpp,data/crawl/git/new_hunk_7266.cpp,-1,22,,"warning(""Could not spawn %s"", argv[0]);","[""addLog""]","[[], [""warning"", ""Could"", ""not"", ""spawn"", ""%s"", ""argv[0]""]]",[7894034535750416282],5975,"142 days, 0:00:00"
https://github.com/git/git/commit/3473f3035d04957ca24d3ccc232f4263b26d6bb8,06 Feb 2008,"git-commit: support variable number of hook arguments

This is a preparatory patch to allow using run_hook for the
prepare-commit-msg hook.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_7520.cpp,,,data/crawl/git/old_hunk_7520.cpp,data/crawl/git/new_hunk_7520.cpp,-1,16,,"die (""run_hook(): too many arguments"");","[""addLog""]","[[], [""die"", ""run_hook"", ""too"", ""many"", ""arguments""]]",[-9417533275540226569],5974,"173 days, 12:00:00"
https://github.com/git/git/commit/e43a6fd3e94888d76779ad79fb568ed180e5fcdf,20 Feb 2009,"More friendly message when locking the index fails.

Just saying that index.lock exists doesn't tell the user _what_ to do
to fix the problem. We should give an indication that it's normally
safe to delete index.lock after making sure git isn't running here.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_6457.cpp,,,data/crawl/git/old_hunk_6457.cpp,data/crawl/git/new_hunk_6457.cpp,7,-1,"die(""unable to create '%s.lock': %s"", path, strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""%s"", ""lock"", ""%s"", ""path"", ""strerror"", ""errno""], []]",[-20353369118174050859],5973,"6 days, 12:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,84,,"print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,
					""non-fast forward"");","[""addLog""]","[[], [""print_ref_status"", ""[rejected]"", ""ref"", ""ref"", ""peer_ref"", ""non"", ""fast"", ""forward""]]",[20569579982590242502],5972,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,80,,"print_ref_status('=', ""[up to date]"", ref,
					ref->peer_ref, NULL);","[""addLog""]","[[], [""print_ref_status"", ""[up"", ""to"", ""date]"", ""ref"", ""ref"", ""peer_ref"", ""NULL""]]",[6697836592414420473],5971,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,76,,"print_ref_status('!', ""[rejected]"", ref, NULL,
					""remote does not support deleting refs"");","[""addLog""]","[[], [""print_ref_status"", ""[rejected]"", ""ref"", ""NULL"", ""remote"", ""does"", ""not"", ""support"", ""deleting"", ""refs""]]",[-5182291302473503198],5970,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,73,,"print_ref_status('X', ""[no match]"", ref, NULL, NULL);","[""addLog""]","[[], [""print_ref_status"", ""X"", ""[no"", ""match]"", ""ref"", ""NULL"", ""NULL""]]",[15623782043512259446],5969,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,51,,"print_ref_status(type, quickref, ref, ref->peer_ref, msg);","[""addLog""]","[[], [""print_ref_status"", ""type"", ""quickref"", ""ref"", ""ref"", ""peer_ref"", ""msg""]]",[24275515658880494598],5968,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,30,,"print_ref_status('*',
			(!prefixcmp(ref->name, ""refs/tags/"") ? ""[new tag]"" :
			  ""[new branch]""),
			ref, ref->peer_ref, NULL);","[""addLog""]","[[], [""print_ref_status"", ""*"", ""prefixcmp"", ""ref"", ""name"", ""refs/tags/"", ""[new"", ""tag]"", ""[new"", ""branch]"", ""ref"", ""ref"", ""peer_ref"", ""NULL""]]",[16717067869529064642],5967,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,28,,"print_ref_status('-', ""[deleted]"", ref, NULL, NULL);","[""addLog""]","[[], [""print_ref_status"", ""[deleted]"", ""ref"", ""NULL"", ""NULL""]]",[-4163962946958414140],5966,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,12,,"fputs(msg, stderr);","[""addLog""]","[[], [""fputs"", ""msg"", ""stderr""]]",[-5834981012346286625],5965,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,11,,"fputs("" ("", stderr);","[""addLog""]","[[], [""fputs"", ""stderr""]]",[-12222138665392642905],5964,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,9,,"fputs(prettify_ref(to), stderr);","[""addLog""]","[[], [""fputs"", ""prettify_ref"", ""to"", ""stderr""]]",[-17432424811187718123],5963,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,7,,"fprintf(stderr, ""%s -> %s"", prettify_ref(from), prettify_ref(to));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""prettify_ref"", ""from"", ""prettify_ref"", ""to""]]",[-24861161991844434283],5962,"239 days, 0:00:00"
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7777.cpp,,,data/crawl/git/old_hunk_7777.cpp,data/crawl/git/new_hunk_7777.cpp,-1,5,,"fprintf(stderr, "" %c %-*s "", flag, SUMMARY_WIDTH, summary);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c"", ""%"", ""*s"", ""flag"", ""SUMMARY_WIDTH"", ""summary""]]",[-27842522839188031532],5961,"239 days, 0:00:00"
https://github.com/git/git/commit/334f4831e5a779d42e521b770a26eae1ecb27e86,18 Oct 2007,"send-pack: don't update tracking refs on error

Previously, we updated the tracking refs (which match refs we
are pushing) while generating the list of refs to send.
However, at that point we don't know whether the refs were
accepted.

Instead, we now wait until we get a response code from the
server. If an error was indicated, we don't update any local
tracking refs. Technically some refs could have been updated
on the remote, but since the local ref update is just an
optimization to avoid an extra fetch, we are better off
erring on the side of correctness.

The user-visible message is now generated much later in the
program, and has been tweaked to make more sense.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",50,data/crawl/git/hunk_7925.cpp,,,data/crawl/git/old_hunk_7925.cpp,data/crawl/git/new_hunk_7925.cpp,-1,21,,"fprintf(stderr, ""updating local tracking ref '%s'\n"", rs.dst);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""updating"", ""local"", ""tracking"", ""ref"", ""%s"", ""\\n"", ""rs"", ""dst""]]",[-15544234398164223894],5960,"254 days, 0:00:00"
https://github.com/git/git/commit/b888d61c8308027433df9c243fa551f42db1c76a,19 Sep 2007,"Make fetch a builtin

Thanks to Johannes Schindelin for review and fixes, and Julian
Phillips for the original C translation.

This changes a few small bits of behavior:

branch.<name>.merge is parsed as if it were the lhs of a fetch
refspec, and does not have to exactly match the actual lhs of a
refspec, so long as it is a valid abbreviation for the same ref.

branch.<name>.merge is no longer ignored if the remote is configured
with a branches/* file. Neither behavior is useful, because there can
only be one ref that gets fetched, but this is more consistant.

Also, fetch prints different information to standard out.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",586,data/crawl/git/hunk_8028.cpp,,,data/crawl/git/old_hunk_8028.cpp,data/crawl/git/new_hunk_8028.cpp,-1,525,,"die(""Where do you want to fetch from today?"");","[""addLog""]","[[], [""die"", ""Where"", ""do"", ""you"", ""want"", ""to"", ""fetch"", ""from"", ""today""]]",[-7991887752285653370],5959,"269 days, 12:00:00"
https://github.com/git/git/commit/7efaeba2a8006bb52712eb90c6fbc736b9632cab,11 Mar 2009,"rsync transport: allow local paths, and fix tests

Earlier, the rsync tests were disabled by default, as they needed a
running rsyncd daemon.  This was only due to the limitation that our
rsync transport only allowed full URLs of the form

	rsync://<host>/<path>

Relaxing the URLs to allow

	rsync:<path>

permitted the change in the tests to run whenever rsync is available,
without requiring a fully configured and running rsyncd.

While at it, the tests were fixed so that they run in directories with a
space in their name.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_6387.cpp,,,data/crawl/git/old_hunk_6387.cpp,data/crawl/git/new_hunk_6387.cpp,6,6,"error(""Could not push to %s"", transport->url);","error(""Could not push to %s"",
				rsync_url(transport->url));","[""addVariable""]","[[], [""rsync_url""]]",[1639309761686454876],5958,0:00:00
https://github.com/git/git/commit/b60df87a6b39b3e9fc2fe81585a8bc55a502dcd3,22 Mar 2009,"format-patch: --numbered-files and --stdout aren't mutually exclusive

For example:

    git format-patch --numbered-files --stdout --attach HEAD~~

will create two messages with files 1 and 2 attached respectively.
Without --attach/--inline but with --stdout, --numbered-files option
can be simply ignored, because we are not creating any file ourselves.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_6349.cpp,,,data/crawl/git/old_hunk_6349.cpp,data/crawl/git/new_hunk_6349.cpp,4,-1,"die (""--numbered-files and --stdout are mutually exclusive."");",,"[""removeLog""]","[[""die"", ""numbered"", ""files"", ""and"", ""stdout"", ""are"", ""mutually"", ""exclusive""], []]",[-4215393860170679319],5957,0:00:00
https://github.com/git/git/commit/0f2d4476c12c15106be20d53c507035e157b66f1,03 Mar 2008,"revert: actually check for a dirty index

The previous code mistakenly used wt_status_prepare to check whether the
index had anything commitable in it; however, that function is just an
init function, and will never report a dirty index.

The correct way with wt_status_* would be to call wt_status_print with the
output pointing to /dev/null or similar. However, that does extra work by
both examining the working tree and spewing status information to nowhere.

Instead, let's just implement the useful subset of wt_status_print as an
""is_index_dirty"" function.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/hunk_7356.cpp,,,data/crawl/git/old_hunk_7356.cpp,data/crawl/git/new_hunk_7356.cpp,-1,6,,"die(""could not read the index"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""read"", ""the"", ""index""]]",[-4349930399654741362],5956,"202 days, 12:00:00"
https://github.com/git/git/commit/8d2dfc49b199c7da6faefd7993630f24bd37fee0,13 Apr 2009,"process_{tree,blob}: show objects without buffering

Here's a less trivial thing, and slightly more dubious one.

I was looking at that ""struct object_array objects"", and wondering why we
do that. I have honestly totally forgotten. Why not just call the ""show()""
function as we encounter the objects? Rather than add the objects to the
object_array, and then at the very end going through the array and doing a
'show' on all, just do things more incrementally.

Now, there are possible downsides to this:

 - the ""buffer using object_array"" _can_ in theory result in at least
   better I-cache usage (two tight loops rather than one more spread out
   one). I don't think this is a real issue, but in theory..

 - this _does_ change the order of the objects printed. Instead of doing a
   ""process_tree(revs, commit->tree, &objects, NULL, """");"" in the loop
   over the commits (which puts all the root trees _first_ in the object
   list, this patch just adds them to the list of pending objects, and
   then we'll traverse them in that order (and thus show each root tree
   object together with the objects we discover under it)

   I _think_ the new ordering actually makes more sense, but the object
   ordering is actually a subtle thing when it comes to packing
   efficiency, so any change in order is going to have implications for
   packing. Good or bad, I dunno.

 - There may be some reason why we did it that odd way with the object
   array, that I have simply forgotten.

Anyway, now that we don't buffer up the objects before showing them
that may actually result in lower memory usage during that whole
traverse_commit_list() phase.

This is seriously not very deeply tested. It makes sense to me, it seems
to pass all the tests, it looks ok, but...

Does anybody remember why we did that ""object_array"" thing? It used to be
an ""object_list"" a long long time ago, but got changed into the array due
to better memory usage patterns (those linked lists of obejcts are
horrible from a memory allocation standpoint). But I wonder why we didn't
do this back then. Maybe there's a reason for it.

Or maybe there _used_ to be a reason, and no longer is.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_6271.cpp,,,data/crawl/git/old_hunk_6271.cpp,data/crawl/git/new_hunk_6271.cpp,15,15,"fprintf(pack_pipe, ""%s %s\n"",
				sha1_to_hex(p->item->sha1), p->name);","fprintf(pack_pipe, ""%s %s\n"",
				sha1_to_hex(obj->sha1), name);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""p"", ""item"", ""p""], [""obj""]]",[10627778665868070289],5955,0:00:00
https://github.com/git/git/commit/8d2dfc49b199c7da6faefd7993630f24bd37fee0,13 Apr 2009,"process_{tree,blob}: show objects without buffering

Here's a less trivial thing, and slightly more dubious one.

I was looking at that ""struct object_array objects"", and wondering why we
do that. I have honestly totally forgotten. Why not just call the ""show()""
function as we encounter the objects? Rather than add the objects to the
object_array, and then at the very end going through the array and doing a
'show' on all, just do things more incrementally.

Now, there are possible downsides to this:

 - the ""buffer using object_array"" _can_ in theory result in at least
   better I-cache usage (two tight loops rather than one more spread out
   one). I don't think this is a real issue, but in theory..

 - this _does_ change the order of the objects printed. Instead of doing a
   ""process_tree(revs, commit->tree, &objects, NULL, """");"" in the loop
   over the commits (which puts all the root trees _first_ in the object
   list, this patch just adds them to the list of pending objects, and
   then we'll traverse them in that order (and thus show each root tree
   object together with the objects we discover under it)

   I _think_ the new ordering actually makes more sense, but the object
   ordering is actually a subtle thing when it comes to packing
   efficiency, so any change in order is going to have implications for
   packing. Good or bad, I dunno.

 - There may be some reason why we did it that odd way with the object
   array, that I have simply forgotten.

Anyway, now that we don't buffer up the objects before showing them
that may actually result in lower memory usage during that whole
traverse_commit_list() phase.

This is seriously not very deeply tested. It makes sense to me, it seems
to pass all the tests, it looks ok, but...

Does anybody remember why we did that ""object_array"" thing? It used to be
an ""object_list"" a long long time ago, but got changed into the array due
to better memory usage patterns (those linked lists of obejcts are
horrible from a memory allocation standpoint). But I wonder why we didn't
do this back then. Maybe there's a reason for it.

Or maybe there _used_ to be a reason, and no longer is.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_6271.cpp,,,data/crawl/git/old_hunk_6271.cpp,data/crawl/git/new_hunk_6271.cpp,10,10,"fprintf(pack_pipe, ""%s %.*s\n"", sha1_to_hex(p->item->sha1),
		       (int) (ep - p->name),
		       p->name);","fprintf(pack_pipe, ""%s %.*s\n"", sha1_to_hex(obj->sha1),
		       (int) (ep - name),
		       name);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""p"", ""item"", ""p"", ""p""], [""obj""]]",[10627778651532027168],5954,0:00:00
https://github.com/git/git/commit/34df8abaf358c83cc1447d0a81bda7848685a1c9,11 Mar 2009,"recv_sideband: Bands #2 and #3 always go to stderr

This removes the last parameter of recv_sideband, by which the callers
told which channel bands #2 and #3 should be written to.

Sayeth Shawn Pearce:

   The definition of the streams in the current sideband protocol
   are rather well defined for the one protocol that uses it,
   fetch-pack/receive-pack:

     stream #1:  pack data
     stream #2:  stderr messages, progress, meant for tty
     stream #3:  abort message, remote is dead, goodbye!

Since both callers of the function passed 2 for the parameter, we hereby
remove it and send bands #2 and #3 to stderr explicitly using fprintf.

This has the nice side-effect that these two streams pass through our
ANSI emulation layer on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_6383.cpp,,,data/crawl/git/old_hunk_6383.cpp,data/crawl/git/new_hunk_6383.cpp,-1,3,,"fprintf(stderr, ""%s: protocol error: bad band #%d\n"",
				me, band);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""protocol"", ""error"", ""bad"", ""band"", ""%d\\n"", ""me"", ""band""]]",[9773954996274490292],5953,"16 days, 12:00:00"
https://github.com/git/git/commit/34df8abaf358c83cc1447d0a81bda7848685a1c9,11 Mar 2009,"recv_sideband: Bands #2 and #3 always go to stderr

This removes the last parameter of recv_sideband, by which the callers
told which channel bands #2 and #3 should be written to.

Sayeth Shawn Pearce:

   The definition of the streams in the current sideband protocol
   are rather well defined for the one protocol that uses it,
   fetch-pack/receive-pack:

     stream #1:  pack data
     stream #2:  stderr messages, progress, meant for tty
     stream #3:  abort message, remote is dead, goodbye!

Since both callers of the function passed 2 for the parameter, we hereby
remove it and send bands #2 and #3 to stderr explicitly using fprintf.

This has the nice side-effect that these two streams pass through our
ANSI emulation layer on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_6382.cpp,,,data/crawl/git/old_hunk_6382.cpp,data/crawl/git/new_hunk_6382.cpp,-1,8,,"fprintf(stderr, ""%.*s"", l, b);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""l"", ""b""]]",[-13920279221043309811],5952,"16 days, 12:00:00"
https://github.com/git/git/commit/34df8abaf358c83cc1447d0a81bda7848685a1c9,11 Mar 2009,"recv_sideband: Bands #2 and #3 always go to stderr

This removes the last parameter of recv_sideband, by which the callers
told which channel bands #2 and #3 should be written to.

Sayeth Shawn Pearce:

   The definition of the streams in the current sideband protocol
   are rather well defined for the one protocol that uses it,
   fetch-pack/receive-pack:

     stream #1:  pack data
     stream #2:  stderr messages, progress, meant for tty
     stream #3:  abort message, remote is dead, goodbye!

Since both callers of the function passed 2 for the parameter, we hereby
remove it and send bands #2 and #3 to stderr explicitly using fprintf.

This has the nice side-effect that these two streams pass through our
ANSI emulation layer on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_6382.cpp,,,data/crawl/git/old_hunk_6382.cpp,data/crawl/git/new_hunk_6382.cpp,-1,3,,"fprintf(stderr, ""%.*s"", brk + sf, b);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""brk"", ""sf"", ""b""]]",[-13578534929604977743],5951,"16 days, 12:00:00"
https://github.com/git/git/commit/34df8abaf358c83cc1447d0a81bda7848685a1c9,11 Mar 2009,"recv_sideband: Bands #2 and #3 always go to stderr

This removes the last parameter of recv_sideband, by which the callers
told which channel bands #2 and #3 should be written to.

Sayeth Shawn Pearce:

   The definition of the streams in the current sideband protocol
   are rather well defined for the one protocol that uses it,
   fetch-pack/receive-pack:

     stream #1:  pack data
     stream #2:  stderr messages, progress, meant for tty
     stream #3:  abort message, remote is dead, goodbye!

Since both callers of the function passed 2 for the parameter, we hereby
remove it and send bands #2 and #3 to stderr explicitly using fprintf.

This has the nice side-effect that these two streams pass through our
ANSI emulation layer on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_6381.cpp,,,data/crawl/git/old_hunk_6381.cpp,data/crawl/git/new_hunk_6381.cpp,-1,12,,"fprintf(stderr, ""%s\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""buf""]]",[-7453665828204501480],5950,"16 days, 12:00:00"
https://github.com/git/git/commit/34df8abaf358c83cc1447d0a81bda7848685a1c9,11 Mar 2009,"recv_sideband: Bands #2 and #3 always go to stderr

This removes the last parameter of recv_sideband, by which the callers
told which channel bands #2 and #3 should be written to.

Sayeth Shawn Pearce:

   The definition of the streams in the current sideband protocol
   are rather well defined for the one protocol that uses it,
   fetch-pack/receive-pack:

     stream #1:  pack data
     stream #2:  stderr messages, progress, meant for tty
     stream #3:  abort message, remote is dead, goodbye!

Since both callers of the function passed 2 for the parameter, we hereby
remove it and send bands #2 and #3 to stderr explicitly using fprintf.

This has the nice side-effect that these two streams pass through our
ANSI emulation layer on Windows.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_6381.cpp,,,data/crawl/git/old_hunk_6381.cpp,data/crawl/git/new_hunk_6381.cpp,-1,3,,"fprintf(stderr, ""%s: protocol error: no band designator\n"", me);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""protocol"", ""error"", ""no"", ""band"", ""designator\\n"", ""me""]]",[-2978716739131372925],5949,"16 days, 12:00:00"
https://github.com/git/git/commit/96beef8c2efaab06f703991ed7802b8cef4c00e3,05 Apr 2009,"sha1-lookup: add new ""sha1_pos"" function to efficiently lookup sha1

This function has been copied from the ""patch_pos"" function in
""patch-ids.c"" but an additional parameter has been added.

The new parameter is a function pointer, that is used to access the
sha1 of an element in the table.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_6307.cpp,,,data/crawl/git/old_hunk_6307.cpp,data/crawl/git/new_hunk_6307.cpp,-1,87,,"die(""cannot happen -- lo and hi are identical"");","[""addLog""]","[[], [""die"", ""cannot"", ""happen"", ""lo"", ""and"", ""hi"", ""are"", ""identical""]]",[-1893634234718316761],5948,"4 days, 0:00:00"
https://github.com/git/git/commit/03a9683d22eca52bc2b2b9b09258a143e76416f6,28 Feb 2009,"Simplify is_kept_pack()

This removes --unpacked=<packfile> parameter from the revision parser, and
rewrites its use in git-repack to pass a single --kept-pack-only option
instead.

The new --kept-pack-only option means just that.  When this option is
given, is_kept_pack() that used to say ""not on the --unpacked=<packfile>
list"" now says ""the packfile has corresponding .keep file"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/hunk_6431.cpp,,,data/crawl/git/old_hunk_6431.cpp,data/crawl/git/new_hunk_6431.cpp,-1,8,,"die(""--unpacked=<packfile> no longer supported."");","[""addLog""]","[[], [""die"", ""unpacked"", ""packfile"", ""no"", ""longer"", ""supported""]]",[-252771810548275390],5947,"22 days, 0:00:00"
https://github.com/git/git/commit/e928213fb40c106650dca2632b5e830cfaffb86a,07 Mar 2009,"Use the matching function to generate the match results

This puts all of the interpretation of the pattern representation in a
single function for easy manipulation.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_6414.cpp,,,data/crawl/git/old_hunk_6414.cpp,data/crawl/git/new_hunk_6414.cpp,-1,5,,"die(""Didn't think it matches any more"");","[""addLog""]","[[], [""die"", ""Didn"", ""t"", ""think"", ""it"", ""matches"", ""any"", ""more""]]",[-13446515093465294601],5946,"18 days, 12:00:00"
https://github.com/git/git/commit/08fbdb30438fd7087c5abe15840a22fe21094515,07 Mar 2009,"Keep '*' in pattern refspecs

In order to do anything more capable with refspecs, the first step is
to keep the entire input. Additionally, validate patterns by checking
for the ref matching the rules for a pattern as given by
check_ref_format(). This requires a slight change to
check_ref_format() to make it enforce the requirement that the '*'
immediately follow a '/'.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_6413.cpp,,,data/crawl/git/old_hunk_6413.cpp,data/crawl/git/new_hunk_6413.cpp,-1,14,,"die(""Value '%s' of pattern has no '*'"", value);","[""addLog""]","[[], [""die"", ""Value"", ""%s"", ""of"", ""pattern"", ""has"", ""no"", ""*"", ""value""]]",[-29268477300436945342],5945,"18 days, 12:00:00"
https://github.com/git/git/commit/08fbdb30438fd7087c5abe15840a22fe21094515,07 Mar 2009,"Keep '*' in pattern refspecs

In order to do anything more capable with refspecs, the first step is
to keep the entire input. Additionally, validate patterns by checking
for the ref matching the rules for a pattern as given by
check_ref_format(). This requires a slight change to
check_ref_format() to make it enforce the requirement that the '*'
immediately follow a '/'.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_6413.cpp,,,data/crawl/git/old_hunk_6413.cpp,data/crawl/git/new_hunk_6413.cpp,-1,7,,"die(""Key '%s' of pattern had no '*'"", key);","[""addLog""]","[[], [""die"", ""Key"", ""%s"", ""of"", ""pattern"", ""had"", ""no"", ""*"", ""key""]]",[3940493439262127363],5944,"18 days, 12:00:00"
https://github.com/git/git/commit/cd4371208a0e9f882f6fd4b4dd28d6911848ec79,20 Mar 2009,"make oneline reflog dates more consistent with multiline format

The multiline reflog format (e.g., as shown by ""git log -g"")
will show HEAD@{<date>} rather than HEAD@{<count>} in two
situations:

  1. If the user gave branch@{<date>} syntax to specify the
     reflog

  2. If the user gave a --date=<format> specifier

It uses the ""normal"" date format in case 1, and the
user-specified format in case 2.

The oneline reflog format (e.g., ""git reflog show"" or ""git
log -g --oneline"") will show the date in the same two
circumstances. However, it _always_ shows the date as a
relative date, and it always ignores the timezone.

In case 2, it seems ridiculous to trigger the date but use a
format totally different from what the user requested.

For case 1, it is arguable that the user might want to see
the relative date by default; however, the multiline version
shows the normal format.

This patch does three things:

  - refactors the ""relative_date"" parameter to
    show_reflog_message to be an actual date_mode enum,
    since this is how it is used (it is passed to show_date)

  - uses the passed date_mode parameter in the oneline
    format (making it consistent with the multiline format)

  - does not ignore the timezone parameter in oneline mode

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/hunk_6352.cpp,,,data/crawl/git/old_hunk_6352.cpp,data/crawl/git/new_hunk_6352.cpp,13,15,"printf(""%s"", show_date(info->timestamp,
							info->tz,
							relative_date));","printf(""%s"", show_date(info->timestamp,
							info->tz,
							dmode));","[""updateVariable""]","[[""relative_date""], [""dmode""]]",[5793697268602874178],5943,"12 days, 0:00:00"
https://github.com/git/git/commit/cd4371208a0e9f882f6fd4b4dd28d6911848ec79,20 Mar 2009,"make oneline reflog dates more consistent with multiline format

The multiline reflog format (e.g., as shown by ""git log -g"")
will show HEAD@{<date>} rather than HEAD@{<count>} in two
situations:

  1. If the user gave branch@{<date>} syntax to specify the
     reflog

  2. If the user gave a --date=<format> specifier

It uses the ""normal"" date format in case 1, and the
user-specified format in case 2.

The oneline reflog format (e.g., ""git reflog show"" or ""git
log -g --oneline"") will show the date in the same two
circumstances. However, it _always_ shows the date as a
relative date, and it always ignores the timezone.

In case 2, it seems ridiculous to trigger the date but use a
format totally different from what the user requested.

For case 1, it is arguable that the user might want to see
the relative date by default; however, the multiline version
shows the normal format.

This patch does three things:

  - refactors the ""relative_date"" parameter to
    show_reflog_message to be an actual date_mode enum,
    since this is how it is used (it is passed to show_date)

  - uses the passed date_mode parameter in the oneline
    format (making it consistent with the multiline format)

  - does not ignore the timezone parameter in oneline mode

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",84,data/crawl/git/hunk_6352.cpp,,,data/crawl/git/old_hunk_6352.cpp,data/crawl/git/new_hunk_6352.cpp,4,4,"printf(""%s"", show_date(info->timestamp, 0, 1));","printf(""%s"", show_date(info->timestamp,
						       info->tz,
						       dmode));","[""removeContent"", ""addVariable""]","[[""0"", ""1""], [""info"", ""tz"", ""dmode""]]",[-6766168443801210717],5942,"12 days, 0:00:00"
https://github.com/git/git/commit/5289bae17f24805cc8507129e21d794b0b56264c,05 Apr 2009,"patch-ids: use the new generic ""sha1_pos"" function to lookup sha1

instead of the specific one from which the new one has been copied.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_6306.cpp,,,data/crawl/git/old_hunk_6306.cpp,data/crawl/git/new_hunk_6306.cpp,81,-1,"die(""cannot happen -- lo and hi are identical"");",,"[""removeLog""]","[[""die"", ""cannot"", ""happen"", ""lo"", ""and"", ""hi"", ""are"", ""identical""], []]",[1893634234718316761],5941,"4 days, 0:00:00"
https://github.com/git/git/commit/0d260f9a09a2febeb86fdada7224d271a76d2e3c,09 Mar 2009,"parseopt: prevent KEEP_UNKNOWN and STOP_AT_NON_OPTION from being used together

As suggested by Junio, disallow the flags PARSE_OPT_KEEP_UNKNOWN and
PARSE_OPT_STOP_AT_NON_OPTION to be turned on at the same time, as a
value of an unknown option could be mistakenly classified as a
non-option, stopping the parser early.  E.g.:

	git cmd --known --unknown value arg0 arg1

The parser should have stopped at ""arg0"", but it already stops at
""value"".

This patch makes parse_options() die if the two flags are used in
combination.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_6397.cpp,,,data/crawl/git/old_hunk_6397.cpp,data/crawl/git/new_hunk_6397.cpp,-1,5,,"die(""STOP_AT_NON_OPTION and KEEP_UNKNOWN don't go together"");","[""addLog""]","[[], [""die"", ""STOP_AT_NON_OPTION"", ""and"", ""KEEP_UNKNOWN"", ""don"", ""t"", ""go"", ""together""]]",[8667393928568049638],5940,"17 days, 12:00:00"
https://github.com/git/git/commit/39d8e271f42e976a61f08a4f7bc2047a682ac532,05 Apr 2009,"simplify output of conflicting merge

This simplifies the code without changing the semantics and removes
the unhelpful ""needs $sha1"" part of the conflicting submodule message.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_6305.cpp,,,data/crawl/git/old_hunk_6305.cpp,data/crawl/git/new_hunk_6305.cpp,6,-1,"output(o, 1, ""CONFLICT (submodule): Merge conflict in %s ""
			       ""- needs %s"", path, sha1_to_hex(b.sha1));",,"[""removeLog""]","[[""output"", ""o"", ""1"", ""CONFLICT"", ""submodule"", ""Merge"", ""conflict"", ""in"", ""%s"", ""needs"", ""%s"", ""path"", ""sha1_to_hex"", ""b"", ""sha1""], []]",[112762416908295509],5939,"4 days, 0:00:00"
https://github.com/git/git/commit/b079c50e03a812f5c8197b8f38e0a5fe6dd31321,22 Feb 2009,"format-patch: track several references

Currently, format-patch can only track a single reference (the
In-Reply-To:) for each mail.  To ensure proper threading, we should
list all known references for every mail.

Change the rev_info.ref_message_id field to a string_list, so that we
can append references at will, and change the output formatting
routines to print all of them in the References: header.  The last
entry in the list is implicitly assumed to be the In-Reply-To:, which
gives output consistent with RFC 2822:

   The ""References:"" field will contain the contents of the parent's
   ""References:"" field (if any) followed by the contents of the
   parent's ""Message-ID:"" field (if any).

Note that this is just preparatory work; nothing uses it yet, so all
""References:"" fields in the output are still only one deep.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_6454.cpp,,,data/crawl/git/old_hunk_6454.cpp,data/crawl/git/new_hunk_6454.cpp,-1,8,,"printf(""%s<%s>\n"", (i > 0 ? ""\t"" : ""References: ""),
			       opt->ref_message_ids->items[i].string);","[""addLog""]","[[], [""printf"", ""%s"", ""%s"", ""\\n"", ""i"", ""0"", ""\\t"", ""References"", ""opt"", ""ref_message_ids"", ""items[i]"", ""string""]]",[2613162031247947543],5938,"25 days, 0:00:00"
https://github.com/git/git/commit/b079c50e03a812f5c8197b8f38e0a5fe6dd31321,22 Feb 2009,"format-patch: track several references

Currently, format-patch can only track a single reference (the
In-Reply-To:) for each mail.  To ensure proper threading, we should
list all known references for every mail.

Change the rev_info.ref_message_id field to a string_list, so that we
can append references at will, and change the output formatting
routines to print all of them in the References: header.  The last
entry in the list is implicitly assumed to be the In-Reply-To:, which
gives output consistent with RFC 2822:

   The ""References:"" field will contain the contents of the parent's
   ""References:"" field (if any) followed by the contents of the
   parent's ""Message-ID:"" field (if any).

Note that this is just preparatory work; nothing uses it yet, so all
""References:"" fields in the output are still only one deep.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_6454.cpp,,,data/crawl/git/old_hunk_6454.cpp,data/crawl/git/new_hunk_6454.cpp,-1,6,,"printf(""In-Reply-To: <%s>\n"", opt->ref_message_ids->items[n-1].string);","[""addLog""]","[[], [""printf"", ""In"", ""Reply"", ""To"", ""%s"", ""\\n"", ""opt"", ""ref_message_ids"", ""items[n"", ""1]"", ""string""]]",[-7679435240256991198],5937,"25 days, 0:00:00"
https://github.com/git/git/commit/d5c87cb4ffc411fc12dbc261af3ed29633e49fba,24 Mar 2009,"http-push: using error() and warning() as appropriate

Change three occurences of using inconsistent error/warning reporting by
using the relevant error() / warning() calls to be consitent with the
rest of the code.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_6337.cpp,,,data/crawl/git/old_hunk_6337.cpp,data/crawl/git/new_hunk_6337.cpp,3,3,"fprintf(stderr, ""Error: cannot lock existing info/refs\n"");","error(""cannot lock existing info/refs"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Error"", ""info/refs\\n""], [""error"", ""info/refs""]]",[7509509266029151366],5936,"10 days, 0:00:00"
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/hunk_6416.cpp,,,data/crawl/git/old_hunk_6416.cpp,data/crawl/git/new_hunk_6416.cpp,-1,78,,"printf(""%.*s\n"", rest, bol);","[""addLog""]","[[], [""printf"", ""%"", ""*s\\n"", ""rest"", ""bol""]]",[10040247554738185048],5935,"18 days, 12:00:00"
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/hunk_6416.cpp,,,data/crawl/git/old_hunk_6416.cpp,data/crawl/git/new_hunk_6416.cpp,-1,58,,"printf(""%d%c"", lno, sign);","[""addLog""]","[[], [""printf"", ""%d%c"", ""lno"", ""sign""]]",[19055187051897603619],5934,"18 days, 12:00:00"
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/hunk_6416.cpp,,,data/crawl/git/old_hunk_6416.cpp,data/crawl/git/new_hunk_6416.cpp,-1,56,,"printf(""%s%c"", name, sign);","[""addLog""]","[[], [""printf"", ""%s%c"", ""name"", ""sign""]]",[7375412399495691455],5933,"18 days, 12:00:00"
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/hunk_6415.cpp,,,data/crawl/git/old_hunk_6415.cpp,data/crawl/git/new_hunk_6415.cpp,12,-1,"printf(""%.*s\n"", (int)(eol-bol), bol);",,"[""removeLog""]","[[""printf"", ""%"", ""*s\\n"", ""int"", ""eol"", ""bol"", ""bol""], []]",[-5755835118731484597],5932,"18 days, 12:00:00"
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/hunk_6415.cpp,,,data/crawl/git/old_hunk_6415.cpp,data/crawl/git/new_hunk_6415.cpp,11,-1,"printf(""%d%c"", lno, sign);",,"[""removeLog""]","[[""printf"", ""%d%c"", ""lno"", ""sign""], []]",[-19055187051897603619],5931,"18 days, 12:00:00"
https://github.com/git/git/commit/7e8f59d577e5615ceff06da0d9dde36a63608d53,07 Mar 2009,"grep: color patterns in output

Coloring matches makes them easier to spot in the output.

Add two options and two parameters: color.grep (to turn coloring on
or off), color.grep.match (to set the color of matches), --color
and --no-color (to turn coloring on or off, respectively).

The output of external greps is not changed.

This patch is based on earlier ones by Nguyễn Thái Ngọc Duy and
Thiago Alves.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",142,data/crawl/git/hunk_6415.cpp,,,data/crawl/git/old_hunk_6415.cpp,data/crawl/git/new_hunk_6415.cpp,9,-1,"printf(""%s%c"", name, sign);",,"[""removeLog""]","[[""printf"", ""%s%c"", ""name"", ""sign""], []]",[-7375412399495691455],5930,"18 days, 12:00:00"
https://github.com/git/git/commit/4857c761e35b07c12ff2ef1140e93b071b8ac4e7,10 Feb 2009,"write_entry(): cleanup of some duplicated code

The switch-cases for S_IFREG and S_IFLNK was so similar that it will
be better to do some cleanup and use the common parts of it.

And the entry.c file should now be clean for 'gcc -Wextra' warnings.

Signed-off-by: Kjetil Barvik <barvik@broadpark.no>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_6490.cpp,,,data/crawl/git/old_hunk_6490.cpp,data/crawl/git/new_hunk_6490.cpp,29,-1,"error(""git checkout-index: unable to create ""
						 ""symlink %s (%s)"", path, strerror(errno));",,"[""removeLog""]","[[""error"", ""git"", ""checkout"", ""index"", ""unable"", ""to"", ""create"", ""symlink"", ""%s"", ""%s"", ""path"", ""strerror"", ""errno""], []]",[-26328047330387432830],5929,"31 days, 0:00:00"
https://github.com/git/git/commit/4857c761e35b07c12ff2ef1140e93b071b8ac4e7,10 Feb 2009,"write_entry(): cleanup of some duplicated code

The switch-cases for S_IFREG and S_IFLNK was so similar that it will
be better to do some cleanup and use the common parts of it.

And the entry.c file should now be clean for 'gcc -Wextra' warnings.

Signed-off-by: Kjetil Barvik <barvik@broadpark.no>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_6490.cpp,,,data/crawl/git/old_hunk_6490.cpp,data/crawl/git/new_hunk_6490.cpp,23,-1,"error(""git checkout-index: unable to write file %s"",
					path);",,"[""removeLog""]","[[""error"", ""git"", ""checkout"", ""index"", ""unable"", ""to"", ""write"", ""file"", ""%s"", ""path""], []]",[-22425507421417629656],5928,"31 days, 0:00:00"
https://github.com/git/git/commit/4857c761e35b07c12ff2ef1140e93b071b8ac4e7,10 Feb 2009,"write_entry(): cleanup of some duplicated code

The switch-cases for S_IFREG and S_IFLNK was so similar that it will
be better to do some cleanup and use the common parts of it.

And the entry.c file should now be clean for 'gcc -Wextra' warnings.

Signed-off-by: Kjetil Barvik <barvik@broadpark.no>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_6490.cpp,,,data/crawl/git/old_hunk_6490.cpp,data/crawl/git/new_hunk_6490.cpp,6,-1,"error(""git checkout-index: unable to read sha1 file of %s (%s)"",
				path, sha1_to_hex(ce->sha1));",,"[""removeLog""]","[[""error"", ""git"", ""checkout"", ""index"", ""unable"", ""to"", ""read"", ""sha1"", ""file"", ""of"", ""%s"", ""%s"", ""path"", ""sha1_to_hex"", ""ce"", ""sha1""], []]",[-1792656755483742203],5927,"31 days, 0:00:00"
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/hunk_6378.cpp,,,data/crawl/git/old_hunk_6378.cpp,data/crawl/git/new_hunk_6378.cpp,-1,18,,"error(""Must be one of nothing, matching, ""
				     ""tracking or current."");","[""addLog""]","[[], [""error"", ""Must"", ""be"", ""one"", ""of"", ""nothing"", ""matching"", ""tracking"", ""or"", ""current""]]",[11068167450804801428],5926,"13 days, 12:00:00"
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/hunk_6378.cpp,,,data/crawl/git/old_hunk_6378.cpp,data/crawl/git/new_hunk_6378.cpp,-1,17,,"error(""Malformed value for %s: %s"", var, value);","[""addLog""]","[[], [""error"", ""Malformed"", ""value"", ""for"", ""%s"", ""%s"", ""var"", ""value""]]",[-12088697073719568253],5925,"13 days, 12:00:00"
https://github.com/git/git/commit/b130a72b274441bb5d687de93efef4d990c40c0a,19 Mar 2009,"MinGW: implement mmap

Add USE_WIN32_MMAP which triggers the use of windows' native
file memory mapping functionality in git_mmap()/git_munmap() functions.

As git functions currently use mmap with MAP_PRIVATE set only, this
implementation supports only that mode for now.

On Windows, offsets for memory mapped files need to match the allocation
granularity. Take this into account when calculating the packed git-
windowsize and file offsets. At the moment, the only function which makes
use of offsets in conjunction with mmap is use_pack() in sha1-file.c.

Git fast-import's code path tries to map a portion of the temporary
packfile that exceeds the current filesize, i.e. offset+length is
greater than the filesize. The NO_MMAP code worked with that since pread()
just reads the file content until EOF and returns gracefully, while
MapViewOfFile() aborts the mapping and returns 'Access Denied'.
Working around that by determining the filesize and adjusting the length
parameter.

Signed-off-by: Janos Laube <janos.dev@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_6369.cpp,,,data/crawl/git/old_hunk_6369.cpp,data/crawl/git/new_hunk_6369.cpp,-1,44,,"warning(""unable to close file mapping handle\n"");","[""addLog""]","[[], [""warning"", ""unable"", ""to"", ""close"", ""file"", ""mapping"", ""handle\\n""]]",[660920672520927259],5924,"12 days, 12:00:00"
https://github.com/git/git/commit/b130a72b274441bb5d687de93efef4d990c40c0a,19 Mar 2009,"MinGW: implement mmap

Add USE_WIN32_MMAP which triggers the use of windows' native
file memory mapping functionality in git_mmap()/git_munmap() functions.

As git functions currently use mmap with MAP_PRIVATE set only, this
implementation supports only that mode for now.

On Windows, offsets for memory mapped files need to match the allocation
granularity. Take this into account when calculating the packed git-
windowsize and file offsets. At the moment, the only function which makes
use of offsets in conjunction with mmap is use_pack() in sha1-file.c.

Git fast-import's code path tries to map a portion of the temporary
packfile that exceeds the current filesize, i.e. offset+length is
greater than the filesize. The NO_MMAP code worked with that since pread()
just reads the file content until EOF and returns gracefully, while
MapViewOfFile() aborts the mapping and returns 'Access Denied'.
Working around that by determining the filesize and adjusting the length
parameter.

Signed-off-by: Janos Laube <janos.dev@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_6369.cpp,,,data/crawl/git/old_hunk_6369.cpp,data/crawl/git/new_hunk_6369.cpp,-1,33,,"die(""Invalid usage of mmap when built with USE_WIN32_MMAP"");","[""addLog""]","[[], [""die"", ""Invalid"", ""usage"", ""of"", ""mmap"", ""when"", ""built"", ""with"", ""USE_WIN32_MMAP""]]",[-21100756105710444931],5923,"12 days, 12:00:00"
https://github.com/git/git/commit/b130a72b274441bb5d687de93efef4d990c40c0a,19 Mar 2009,"MinGW: implement mmap

Add USE_WIN32_MMAP which triggers the use of windows' native
file memory mapping functionality in git_mmap()/git_munmap() functions.

As git functions currently use mmap with MAP_PRIVATE set only, this
implementation supports only that mode for now.

On Windows, offsets for memory mapped files need to match the allocation
granularity. Take this into account when calculating the packed git-
windowsize and file offsets. At the moment, the only function which makes
use of offsets in conjunction with mmap is use_pack() in sha1-file.c.

Git fast-import's code path tries to map a portion of the temporary
packfile that exceeds the current filesize, i.e. offset+length is
greater than the filesize. The NO_MMAP code worked with that since pread()
just reads the file content until EOF and returns gracefully, while
MapViewOfFile() aborts the mapping and returns 'Access Denied'.
Working around that by determining the filesize and adjusting the length
parameter.

Signed-off-by: Janos Laube <janos.dev@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_6369.cpp,,,data/crawl/git/old_hunk_6369.cpp,data/crawl/git/new_hunk_6369.cpp,-1,27,,"die(""mmap: could not determine filesize"");","[""addLog""]","[[], [""die"", ""mmap"", ""could"", ""not"", ""determine"", ""filesize""]]",[-6419377737722156513],5922,"12 days, 12:00:00"
https://github.com/git/git/commit/05ac6b34e2c2adda5cb85dd0bdacb47fe5db953e,05 Mar 2009,"improve missing repository error message

Certain remote commands, when asked to do something in a
particular directory that was not actually a git repository,
would say ""unable to chdir or not a git archive"". The
""chdir"" bit is an unnecessary detail, and the term ""git
archive"" is much less common these days than ""git repository"".

So let's switch them all to:

  fatal: '%s' does not appear to be a git repository

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_6419.cpp,,,data/crawl/git/old_hunk_6419.cpp,data/crawl/git/new_hunk_6419.cpp,3,3,"die(""not a git archive"");","die(""'%s' does not appear to be a git repository"", buf);","[""updateContent"", ""addVariable""]","[[""archive""], [""%s"", ""does"", ""appear"", ""to"", ""be"", ""repository"", ""buf""]]",[-22460426853915015379],5921,"19 days, 12:00:00"
https://github.com/git/git/commit/5620e77e30b72e674a6bec55fd4bfdac2d5a75fd,24 Mar 2009,"builtin-show-ref: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_6324.cpp,,,data/crawl/git/old_hunk_6324.cpp,data/crawl/git/new_hunk_6324.cpp,3,3,"fprintf(stderr, ""warning: ref '%s' ignored\n"", ref);","warning(""ref '%s' ignored"", ref);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""ignored\\n""], [""ignored""]]",[17672800412672080234],5920,"10 days, 0:00:00"
https://github.com/git/git/commit/33fa4d3dfe71dec05da35e187433101486f4eac2,24 Mar 2009,"builtin-show-branch: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_6325.cpp,,,data/crawl/git/old_hunk_6325.cpp,data/crawl/git/new_hunk_6325.cpp,3,3,"fprintf(stderr, ""warning: ignoring %s; ""
			""cannot handle more than %d refs\n"",
			refname, MAX_REVS);","warning(""ignoring %s; cannot handle more than %d refs"",
			refname, MAX_REVS);","[""updateLog"", ""removeVariable"", ""updateContent"", ""removeContent""]","[[""fprintf"", ""stderr"", ""refs\\n""], [""refs""]]",[4037187641547366646],5919,"10 days, 0:00:00"
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6393.cpp,,,data/crawl/git/old_hunk_6393.cpp,data/crawl/git/new_hunk_6393.cpp,23,-1,"fprintf(stderr, ""Everything up-to-date\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Everything"", ""up"", ""to"", ""date\\n""], []]",[-1517109462172770441],5918,"17 days, 12:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6311.cpp,,,data/crawl/git/old_hunk_6311.cpp,data/crawl/git/new_hunk_6311.cpp,119,-1,"fprintf(stderr, "" %.*s"", 8, sha1_to_hex(commit->object.sha1));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%"", ""*s"", ""8"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""], []]",[18701552024235154547],5917,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6311.cpp,,,data/crawl/git/old_hunk_6311.cpp,data/crawl/git/new_hunk_6311.cpp,116,-1,"fprintf(stderr, ""%3d"", weight(p));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%3d"", ""weight"", ""p""], []]",[12350335568242920908],5916,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6311.cpp,,,data/crawl/git/old_hunk_6311.cpp,data/crawl/git/new_hunk_6311.cpp,111,-1,"fprintf(stderr, ""%c%c%c "",
			(flags & TREESAME) ? ' ' : 'T',
			(flags & UNINTERESTING) ? 'U' : ' ',
			(flags & COUNTED) ? 'C' : ' ');",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%c%c%c"", ""flags"", ""&"", ""TREESAME"", ""T"", ""flags"", ""&"", ""UNINTERESTING"", ""U"", ""flags"", ""&"", ""COUNTED"", ""C""], []]",[8125646100924237453],5915,"7 days, 0:00:00"
https://github.com/git/git/commit/b92c5f228a9c07fe339c8fd5406069602b6452f6,05 Apr 2009,"builtin-remote.c: Split out prune_remote as a separate function.

prune_remote will be used in update(), so this function was split
out to avoid code duplication.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_6296.cpp,,,data/crawl/git/old_hunk_6296.cpp,data/crawl/git/new_hunk_6296.cpp,22,27,"printf(""Pruning %s\n"", *argv);","printf(""Pruning %s\n"", remote);","[""updateVariable"", ""removeVariable""]","[[""*argv""], [""remote""]]",[-4990552208741059945],5914,"4 days, 0:00:00"
https://github.com/git/git/commit/5ad6b0252b4fff02ac8516b2ea5e3e7330dcc76f,08 Mar 2009,"Adjust js/remote-improvements and db/refspec-wildcard-in-the-middle

The latter topic changes the definition of how refspec's src and dst side
is stored in-core; it used to be that the asterisk for pattern was
omitted, but now it is included.  The former topic handcrafts an old style
refspec to feed the refspec matching machinery that lacks the asterisk and
triggers an error.

This resolves the semantic clash between the two topics early before they
need to be merged to integration branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1142,data/crawl/git/hunk_6406.cpp,,,data/crawl/git/old_hunk_6406.cpp,data/crawl/git/new_hunk_6406.cpp,80,234,"printf(""  Local branch%s pushed with 'git push'\n"",
				states.remote->push_refspec_nr > 1 ?
					""es"" : """");","printf(""  Local branch%s configured for 'git pull':\n"",
			       info.list->nr > 1 ? ""es"" : """");","[""updateVariable"", ""updateContent""]","[[""pushed"", ""with"", ""push"", ""states"", ""remote"", ""push_refspec_nr""], [""configured"", ""for"", ""pull"", ""info"", ""list"", ""nr""]]",[21932359531675160925],5913,"18 days, 0:00:00"
https://github.com/git/git/commit/5ad6b0252b4fff02ac8516b2ea5e3e7330dcc76f,08 Mar 2009,"Adjust js/remote-improvements and db/refspec-wildcard-in-the-middle

The latter topic changes the definition of how refspec's src and dst side
is stored in-core; it used to be that the asterisk for pattern was
omitted, but now it is included.  The former topic handcrafts an old style
refspec to feed the refspec matching machinery that lacks the asterisk and
triggers an error.

This resolves the semantic clash between the two topics early before they
need to be merged to integration branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1142,data/crawl/git/hunk_6406.cpp,,,data/crawl/git/old_hunk_6406.cpp,data/crawl/git/new_hunk_6406.cpp,63,214,"printf("" %s"", info->merge.items[j].string);","printf(""    %s\n"", states.heads.items[i].string);","[""updateVariable"", ""updateContent""]","[[""%s"", ""info"", ""merge"", ""items[j]""], [""%s\\n"", ""states"", ""heads"", ""items[i]""]]",[3781651687964929488],5912,"18 days, 0:00:00"
https://github.com/git/git/commit/5ad6b0252b4fff02ac8516b2ea5e3e7330dcc76f,08 Mar 2009,"Adjust js/remote-improvements and db/refspec-wildcard-in-the-middle

The latter topic changes the definition of how refspec's src and dst side
is stored in-core; it used to be that the asterisk for pattern was
omitted, but now it is included.  The former topic handcrafts an old style
refspec to feed the refspec matching machinery that lacks the asterisk and
triggers an error.

This resolves the semantic clash between the two topics early before they
need to be merged to integration branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1142,data/crawl/git/hunk_6406.cpp,,,data/crawl/git/old_hunk_6406.cpp,data/crawl/git/new_hunk_6406.cpp,58,166,"printf(""  Remote branch%s merged with 'git pull' ""
				""while on branch %s\n   "",
				info->merge.nr > 1 ? ""es"" : """",
				branch->string);","printf(""    %-*s %s to %s\n"", show_info->width, src,
			push_info->forced ? ""forces"" : ""pushes"",
			push_info->dest);","[""updateVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""Remote"", ""branch%s"", ""merged"", ""with"", ""git"", ""pull"", ""while"", ""on"", ""branch"", ""info"", ""merge"", ""nr"", ""1"", ""es"", ""branch"", ""string""], [""%"", ""*s"", ""%s"", ""to"", ""show_info"", ""width"", ""src"", ""push_info"", ""forced"", ""forces"", ""pushes"", ""push_info"", ""dest""]]",[27497801758697071537],5911,"18 days, 0:00:00"
https://github.com/git/git/commit/5ad6b0252b4fff02ac8516b2ea5e3e7330dcc76f,08 Mar 2009,"Adjust js/remote-improvements and db/refspec-wildcard-in-the-middle

The latter topic changes the definition of how refspec's src and dst side
is stored in-core; it used to be that the asterisk for pattern was
omitted, but now it is included.  The former topic handcrafts an old style
refspec to feed the refspec matching machinery that lacks the asterisk and
triggers an error.

This resolves the semantic clash between the two topics early before they
need to be merged to integration branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1142,data/crawl/git/hunk_6405.cpp,,,data/crawl/git/old_hunk_6405.cpp,data/crawl/git/new_hunk_6405.cpp,14,31,"printf(""    %s\n"", list->items[i].string);","string_list_append(abbrev_branch(refspec.src), &states->tracked);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""printf"", ""%s\\n"", ""list"", ""items[i]"", ""string""], [""string_list_append"", ""abbrev_branch"", ""refspec"", ""src"", ""&states"", ""tracked""]]",[-24254328708543997804],5910,"18 days, 0:00:00"
https://github.com/git/git/commit/5ad6b0252b4fff02ac8516b2ea5e3e7330dcc76f,08 Mar 2009,"Adjust js/remote-improvements and db/refspec-wildcard-in-the-middle

The latter topic changes the definition of how refspec's src and dst side
is stored in-core; it used to be that the asterisk for pattern was
omitted, but now it is included.  The former topic handcrafts an old style
refspec to feed the refspec matching machinery that lacks the asterisk and
triggers an error.

This resolves the semantic clash between the two topics early before they
need to be merged to integration branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",1142,data/crawl/git/hunk_6405.cpp,,,data/crawl/git/old_hunk_6405.cpp,data/crawl/git/new_hunk_6405.cpp,11,28,"printf(title, list->nr > 1 ? ""es"" : """", extra_arg);","memset(&refspec, 0, sizeof(refspec));","[""moveContent"", ""updateVariable"", ""updateLog"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""printf"", ""title"", ""list"", ""nr"", ""1"", ""es"", ""extra_arg""], [""memset"", ""&refspec"", ""0"", ""sizeof"", ""refspec""]]",[6070763629063665563],5909,"18 days, 0:00:00"
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/hunk_6376.cpp,,,data/crawl/git/old_hunk_6376.cpp,data/crawl/git/new_hunk_6376.cpp,-1,39,,"die(""You didn't specify any refspecs to push, and ""
		    ""push.default is \""nothing\""."");","[""addLog""]","[[], [""die"", ""You"", ""didn"", ""t"", ""specify"", ""any"", ""refspecs"", ""to"", ""push"", ""and"", ""push"", ""default"", ""is"", ""\\"", ""nothing\\""]]",[880699997042009940],5908,"13 days, 12:00:00"
https://github.com/git/git/commit/665d3e8f057b90d7b43d70db75b9ac5506bd204d,17 Mar 2009,"Display warning for default git push with no push.default config

If a git push without any refspecs is attempted, display a warning.
The current default behavior is to push all matching refspecs, which
may come as a surprise to new users, so the warning shows how
push.default can be configured and what the possible values are.

Traditionalists who wish to keep the current behaviour are also told
how to configure this once and never see the warning again.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_6375.cpp,,,data/crawl/git/old_hunk_6375.cpp,data/crawl/git/new_hunk_6375.cpp,-1,22,,"warning(""%s"", warn_unconfigured_push_msg[i]);","[""addLog""]","[[], [""warning"", ""%s"", ""warn_unconfigured_push_msg[i]""]]",[-8376162827190071138],5907,"13 days, 12:00:00"
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/hunk_6376.cpp,,,data/crawl/git/old_hunk_6376.cpp,data/crawl/git/new_hunk_6376.cpp,-1,13,,"die(""The current branch %s is tracking multiple branches, ""
		    ""refusing to push."", branch->name);","[""addLog""]","[[], [""die"", ""The"", ""current"", ""branch"", ""%s"", ""is"", ""tracking"", ""multiple"", ""branches"", ""refusing"", ""to"", ""push"", ""branch"", ""name""]]",[270159929619135981],5906,"13 days, 12:00:00"
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/hunk_6376.cpp,,,data/crawl/git/old_hunk_6376.cpp,data/crawl/git/new_hunk_6376.cpp,-1,10,,"die(""The current branch %s is not tracking anything."",
		    branch->name);","[""addLog""]","[[], [""die"", ""The"", ""current"", ""branch"", ""%s"", ""is"", ""not"", ""tracking"", ""anything"", ""branch"", ""name""]]",[-19336175462396006419],5905,"13 days, 12:00:00"
https://github.com/git/git/commit/521537476fe99b97bfcdf1b8f0c579061af5fd3e,17 Mar 2009,"New config push.default to decide default behavior for push

When ""git push"" is not told what refspecs to push, it pushes all matching
branches to the current remote.  For some workflows this default is not
useful, and surprises new users.  Some have even found that this default
behaviour is too easy to trigger by accident with unwanted consequences.

Introduce a new configuration variable ""push.default"" that decides what
action git push should take if no refspecs are given or implied by the
command line arguments or the current remote configuration.

Possible values are:

  'nothing'  : Push nothing;
  'matching' : Current default behaviour, push all branches that already
               exist in the current remote;
  'tracking' : Push the current branch to whatever it is tracking;
  'current'  : Push the current branch to a branch of the same name,
               i.e. HEAD.

Signed-off-by: Finn Arne Gangstad <finnag@pvv.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",109,data/crawl/git/hunk_6376.cpp,,,data/crawl/git/old_hunk_6376.cpp,data/crawl/git/new_hunk_6376.cpp,-1,8,,"die(""You are not currently on a branch."");","[""addLog""]","[[], [""die"", ""You"", ""are"", ""not"", ""currently"", ""on"", ""a"", ""branch""]]",[-6736114296216761294],5904,"13 days, 12:00:00"
https://github.com/git/git/commit/b6c29915d2efd0d2cb56eca88bd8e6b4999546dc,12 Apr 2009,"Update delta compression message to be less misleading

In the case of a small repository, pack-objects is smart enough to not
start more threads than necessary. However, the output to the user always
reports the value of the pack.threads configuration and not the real
number of threads to be used.

Signed-off-by: Dan McGee <dpmcgee@gmail.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_6274.cpp,,,data/crawl/git/old_hunk_6274.cpp,data/crawl/git/new_hunk_6274.cpp,3,3,"fprintf(stderr, ""Delta compression using %d threads.\n"",
				delta_search_threads);","fprintf(stderr, ""Delta compression using up to %d threads.\n"",
				delta_search_threads);","[""updateContent""]","[[], [""up"", ""to""]]",[29824179177269150],5903,12:00:00
https://github.com/git/git/commit/e392a852364e375e916c1dd4f87a7584b348410a,20 Mar 2009,"Produce a nicer output in case of sha1_object_info failures in ls-tree -l

An error message is already printed by sha1_object_info itself, and
the failed entries are additionally marked in the listing.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_6351.cpp,,,data/crawl/git/old_hunk_6351.cpp,data/crawl/git/new_hunk_6351.cpp,10,13,"printf(""%06o %s %s %7c\t"", mode, type,
				       abbrev ? find_unique_abbrev(sha1, abbrev)
				              : sha1_to_hex(sha1),
				       '-');","printf(""%06o %s %s %7s\t"", mode, type,
			       abbrev ? find_unique_abbrev(sha1, abbrev)
				      : sha1_to_hex(sha1),
			       size_text);","[""updateContent"", ""removeContent"", ""addVariable""]","[[""%7c\\t""], [""%7s\\t"", ""size_text""]]",[-3829945186581376382],5902,"12 days, 0:00:00"
https://github.com/git/git/commit/e392a852364e375e916c1dd4f87a7584b348410a,20 Mar 2009,"Produce a nicer output in case of sha1_object_info failures in ls-tree -l

An error message is already printed by sha1_object_info itself, and
the failed entries are additionally marked in the listing.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_6351.cpp,,,data/crawl/git/old_hunk_6351.cpp,data/crawl/git/new_hunk_6351.cpp,5,-1,"printf(""%06o %s %s %7lu\t"", mode, type,
				       abbrev ? find_unique_abbrev(sha1, abbrev)
				              : sha1_to_hex(sha1),
				       size);",,"[""removeLog""]","[[""printf"", ""%06o"", ""%s"", ""%s"", ""%7lu\\t"", ""mode"", ""type"", ""abbrev"", ""find_unique_abbrev"", ""sha1"", ""abbrev"", ""sha1_to_hex"", ""sha1"", ""size""], []]",[4064565580284811648],5901,"12 days, 0:00:00"
https://github.com/git/git/commit/1d1876e9300c56f399ea2976c5831674cd9818b1,06 Apr 2009,"Add configuration variable for sign-off to format-patch

If you regularly create patches which require a Signed-off: line you may
want to make it your default to add that line. It also helps you not to forget
to add the -s/--signoff switch.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_6295.cpp,,,data/crawl/git/old_hunk_6295.cpp,data/crawl/git/new_hunk_6295.cpp,-1,9,,"die(""bogus committer info %s"", committer);","[""addLog""]","[[], [""die"", ""bogus"", ""committer"", ""info"", ""%s"", ""committer""]]",[-7594313545213758242],5900,"3 days, 12:00:00"
https://github.com/git/git/commit/1d1876e9300c56f399ea2976c5831674cd9818b1,06 Apr 2009,"Add configuration variable for sign-off to format-patch

If you regularly create patches which require a Signed-off: line you may
want to make it your default to add that line. It also helps you not to forget
to add the -s/--signoff switch.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_6294.cpp,,,data/crawl/git/old_hunk_6294.cpp,data/crawl/git/new_hunk_6294.cpp,8,-1,"die(""bogus committer info %s"", committer);",,"[""removeLog""]","[[""die"", ""bogus"", ""committer"", ""info"", ""%s"", ""committer""], []]",[7594313545213758242],5899,"3 days, 12:00:00"
https://github.com/git/git/commit/2fd8c0a5dbc614a6a7853558e4af8298acefc96a,24 Mar 2009,"builtin-init-db: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_6327.cpp,,,data/crawl/git/old_hunk_6327.cpp,data/crawl/git/new_hunk_6327.cpp,3,3,"fprintf(stderr, ""warning: templates not found %s\n"",
			template_dir);","warning(""templates not found %s"", template_dir);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""%s\\n""], [""%s""]]",[7785426073483785122],5898,"10 days, 0:00:00"
https://github.com/git/git/commit/8db9a4b85d6b0d7424c8a19b77a5baa8529ab64c,08 Apr 2009,"for-each-ref: refactor refname handling

This code handles some special magic like *-deref and the
:short formatting specifier. The next patch will add another
field which outputs a ref and wants to use the same code.

This patch splits the ""which ref are we outputting"" from the
actual formatting. There should be no behavioral change.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_6278.cpp,,,data/crawl/git/old_hunk_6278.cpp,data/crawl/git/new_hunk_6278.cpp,17,23,"die(""unknown refname format %s"",
					    formatp);","die(""unknown %.*s format %s"",
				    (int)(formatp - name), name, formatp);","[""updateContent"", ""addVariable""]","[[""refname""], [""%"", ""*s"", ""int"", ""name"", ""name"", ""formatp""]]",[-27432674816822514644],5897,"2 days, 12:00:00"
https://github.com/git/git/commit/26284f9356f4c4d8865db8bb024121311a1f90ff,23 Mar 2009,"Improve error message about fetch into current branch

Otherwise, it is hard to guess why the fetch failed.
Make sure we at least mention that the repository must be bare.
Also the current branch is printed.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_6347.cpp,,,data/crawl/git/old_hunk_6347.cpp,data/crawl/git/new_hunk_6347.cpp,3,3,"die(""Refusing to fetch into current branch"");","die(""Refusing to fetch into current branch %s ""
			    ""of non-bare repository"", current_branch->refname);","[""updateContent"", ""addContent"", ""addVariable""]","[[], [""%s"", ""of"", ""non"", ""bare"", ""repository"", ""current_branch"", ""refname""]]",[9089604224461021492],5896,"10 days, 12:00:00"
https://github.com/git/git/commit/78509d2197ff18d1de02c27a5406328f75b95306,24 Mar 2009,"builtin-fetch-pack: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_6329.cpp,,,data/crawl/git/old_hunk_6329.cpp,data/crawl/git/new_hunk_6329.cpp,3,3,"fprintf(stderr, ""warning: no common commits\n"");","warning(""no common commits"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""commits\\n""], [""commits""]]",[17765458132512978938],5895,"10 days, 0:00:00"
https://github.com/git/git/commit/b408457f2e167aaf8e7a087b374357f4a74e9680,22 Feb 2009,"git config: trivial rename in preparation for parseopt

Essentially this replaces 'file' with 'prefix' in the cases where the
variable is used as a prefix, which is consistent with other git
commands.

When using the --list option general errors where not properly reported,
only errors related with the 'file'. Now they are reported, and 'file'
is irrelevant.

That reduces the rest of 'file' usage to nothing, therefore now only
'prefix' remains.

Suggested by Johannes Schindelin.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_6453.cpp,,,data/crawl/git/old_hunk_6453.cpp,data/crawl/git/new_hunk_6453.cpp,-1,8,,"die(""error processing config file(s)"");","[""addLog""]","[[], [""die"", ""error"", ""processing"", ""config"", ""file"", ""s""]]",[1808369745289884399],5894,"25 days, 0:00:00"
https://github.com/git/git/commit/d64ec16c2af4ddcf3985d11d5dc28a15db181de5,22 Feb 2009,"git config: reorganize to use parseopt

This patch has benefited from comments by Johannes
Schindelin and Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",349,data/crawl/git/hunk_6452.cpp,,,data/crawl/git/old_hunk_6452.cpp,data/crawl/git/new_hunk_6452.cpp,-1,38,,"error(""only one action at a time."");","[""addLog""]","[[], [""error"", ""only"", ""one"", ""action"", ""at"", ""a"", ""time""]]",[23089596241856603932],5893,"25 days, 0:00:00"
https://github.com/git/git/commit/c23873589483eb5dc753190309af8c5821169118,22 Feb 2009,"git config: don't allow --get-color* and variable type

Doing so would be incoherent since --get-color would pick a color slot
and ignore the variable type option (e.g. --bool), and the type would
require a variable name.

Suggested by Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_6448.cpp,,,data/crawl/git/old_hunk_6448.cpp,data/crawl/git/new_hunk_6448.cpp,-1,4,,"error(""--get-color and variable type are incoherent"");","[""addLog""]","[[], [""error"", ""get"", ""color"", ""and"", ""variable"", ""type"", ""are"", ""incoherent""]]",[19570661650304921684],5892,"25 days, 0:00:00"
https://github.com/git/git/commit/16c1e939856f6ced97c60beb64936d564d198be3,22 Feb 2009,"git config: don't allow multiple variable types

Only --bool, --int, or --bool-or-int can be used, but not any
combination of them.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_6449.cpp,,,data/crawl/git/old_hunk_6449.cpp,data/crawl/git/new_hunk_6449.cpp,-1,4,,"error(""only one type at a time."");","[""addLog""]","[[], [""error"", ""only"", ""one"", ""type"", ""at"", ""a"", ""time""]]",[17048796588236527456],5891,"25 days, 0:00:00"
https://github.com/git/git/commit/67052c9dcfb3ab46b18e734ea4a9117eb61fea4e,22 Feb 2009,"git config: don't allow multiple config file locations

Either --global, --system, or --file can be used, but not any
combination.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_6450.cpp,,,data/crawl/git/old_hunk_6450.cpp,data/crawl/git/new_hunk_6450.cpp,-1,4,,"error(""only one config file at a time."");","[""addLog""]","[[], [""error"", ""only"", ""one"", ""config"", ""file"", ""at"", ""a"", ""time""]]",[15554288531492939638],5890,"25 days, 0:00:00"
https://github.com/git/git/commit/b408457f2e167aaf8e7a087b374357f4a74e9680,22 Feb 2009,"git config: trivial rename in preparation for parseopt

Essentially this replaces 'file' with 'prefix' in the cases where the
variable is used as a prefix, which is consistent with other git
commands.

When using the --list option general errors where not properly reported,
only errors related with the 'file'. Now they are reported, and 'file'
is irrelevant.

That reduces the rest of 'file' usage to nothing, therefore now only
'prefix' remains.

Suggested by Johannes Schindelin.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_6453.cpp,,,data/crawl/git/old_hunk_6453.cpp,data/crawl/git/new_hunk_6453.cpp,5,5,"die(""unable to read config file %s: %s"", file,
				    strerror(errno));","die(""unable to read config file %s: %s"",
					    config_exclusive_filename, strerror(errno));","[""updateVariable""]","[[""file""], [""config_exclusive_filename""]]",[-4604070866063526290],5889,"25 days, 0:00:00"
https://github.com/git/git/commit/d64ec16c2af4ddcf3985d11d5dc28a15db181de5,22 Feb 2009,"git config: reorganize to use parseopt

This patch has benefited from comments by Johannes
Schindelin and Junio C Hamano.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",349,data/crawl/git/hunk_6451.cpp,,,data/crawl/git/old_hunk_6451.cpp,data/crawl/git/new_hunk_6451.cpp,-1,56,,"error(""wrong number of arguments"");","[""addLog""]","[[], [""error"", ""wrong"", ""number"", ""of"", ""arguments""]]",[8228718781663536884],5888,"25 days, 0:00:00"
https://github.com/git/git/commit/4f6a32f8af9cceaf0c8ccf6d00d2f100dab5a6db,05 Apr 2009,"commit: abort commit if interactive add failed

Previously we ignored the result of calling add_interactive,
which meant that if an error occurred we simply committed
whatever happened to be in the index.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_6304.cpp,,,data/crawl/git/old_hunk_6304.cpp,data/crawl/git/new_hunk_6304.cpp,-1,4,,"die(""interactive add failed"");","[""addLog""]","[[], [""die"", ""interactive"", ""add"", ""failed""]]",[-18193390144489484725],5887,"4 days, 0:00:00"
https://github.com/git/git/commit/a31dca0393fefae894b7a155ae24000107bcc383,23 Mar 2009,"check-ref-format --branch: give Porcelain a way to grok branch shorthand

The command may not be the best place to add this new feature, but

    $ git check-ref-format --branch ""@{-1}""

allows Porcelains to figure out what branch you were on before the last
branch switching.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_6343.cpp,,,data/crawl/git/old_hunk_6343.cpp,data/crawl/git/new_hunk_6343.cpp,-1,13,,"printf(""%s\n"", sb.buf + 11);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""sb"", ""buf"", ""11""]]",[13730391137221702270],5886,"10 days, 12:00:00"
https://github.com/git/git/commit/a31dca0393fefae894b7a155ae24000107bcc383,23 Mar 2009,"check-ref-format --branch: give Porcelain a way to grok branch shorthand

The command may not be the best place to add this new feature, but

    $ git check-ref-format --branch ""@{-1}""

allows Porcelains to figure out what branch you were on before the last
branch switching.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_6343.cpp,,,data/crawl/git/old_hunk_6343.cpp,data/crawl/git/new_hunk_6343.cpp,-1,12,,"die(""'%s' is not a valid branch name"", argv[2]);","[""addLog""]","[[], [""die"", ""%s"", ""is"", ""not"", ""a"", ""valid"", ""branch"", ""name"", ""argv[2]""]]",[-14096306663709100860],5885,"10 days, 12:00:00"
https://github.com/git/git/commit/cbdffe4093be77bbb1408e54eead7865dd3bc33f,24 Mar 2009,"check_ref_format(): tighten refname rules

This changes the rules for refnames to forbid:

 (1) a refname that contains ""@{"" in it.

     Some people and foreign SCM converter may have named their branches
     as frotz@24 and we still want to keep supporting it.

     However, ""git branch frotz@{24}"" is a disaster.  It cannot even
     checked out because ""git checkout frotz@{24}"" will interpret it as
     ""detach the HEAD at twenty-fourth reflog entry of the frotz branch"".

 (2) a refname that ends with a dot.

     We already reject a path component that begins with a dot, primarily
     to avoid ambiguous range interpretation.  If we allowed "".B"" as a
     valid ref, it is unclear if ""A...B"" means ""in dot-B but not in A"" or
     ""either in A or B but not in both"".

     But for this to be complete, we need also to forbid ""A."" to avoid ""in
     B but not in A-dot"".  This was not a problem in the original range
     notation, but we should have added this restriction when three-dot
     notation was introduced.

     Unlike ""no dot at the beginning of any path component"" rule, this
     rule does not have to be ""no dot at the end of any path component"",
     because you cannot abbreviate the tail end away, similar to you can
     say ""dot-B"" to mean ""refs/heads/dot-B"".

For these reasons, it is not likely people created branches with these
names on purpose, but we have allowed such names to be used for quite some
time, and it is possible that people created such branches by mistake or
by accident.

To help people with branches with such unfortunate names to recover,
we still allow ""branch -d 'bad.'"" to delete such branches, and also allow
""branch -m bad. good"" to rename them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_6320.cpp,,,data/crawl/git/old_hunk_6320.cpp,data/crawl/git/new_hunk_6320.cpp,-1,4,,"warning(""Renamed a misnamed branch '%s' away"", oldref.buf + 11);","[""addLog""]","[[], [""warning"", ""Renamed"", ""a"", ""misnamed"", ""branch"", ""%s"", ""away"", ""oldref"", ""buf"", ""11""]]",[-9407194292576116022],5884,"10 days, 0:00:00"
https://github.com/git/git/commit/03d3aada5a2a68a7acdb6286fd72155f01626e41,23 Mar 2009,"Fix branch -m @{-1} newname

The command is supposed to rename the branch we were on before switched
from to a new name, but was not aware of the short-hand notation we added
recently.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_6342.cpp,,,data/crawl/git/old_hunk_6342.cpp,data/crawl/git/new_hunk_6342.cpp,-1,14,,"die(""A branch named '%s' already exists."", newref.buf + 11);","[""addLog""]","[[], [""die"", ""A"", ""branch"", ""named"", ""%s"", ""already"", ""exists"", ""newref"", ""buf"", ""11""]]",[-8284206911797972969],5883,"10 days, 12:00:00"
https://github.com/git/git/commit/03d3aada5a2a68a7acdb6286fd72155f01626e41,23 Mar 2009,"Fix branch -m @{-1} newname

The command is supposed to rename the branch we were on before switched
from to a new name, but was not aware of the short-hand notation we added
recently.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_6342.cpp,,,data/crawl/git/old_hunk_6342.cpp,data/crawl/git/new_hunk_6342.cpp,14,11,"die(""A branch named '%s' already exists."", newname);","die(""Invalid branch name: '%s'"", newname);","[""updateContent""]","[[""A"", ""named"", ""already"", ""exists""], [""Invalid"", ""name""]]",[-5361199447690987608],5882,"10 days, 12:00:00"
https://github.com/git/git/commit/209d336ae3923f2c1783a42b12fca50f3bee0802,14 Feb 2009,"builtin-branch: improve output when displaying remote branches

When encountering a symref (typically refs/remotes/<remote>/HEAD),
display the ref target.

When displaying local and remote branches, prefix the remote branch
names with ""remotes/"" to make the remote branches clear from the local
branches. If displaying only the remote branches, the prefix is not
shown since it would be redundant.

Sample output:

$ git branch
  foo -> master
* master
  rather-long-branch-name

$ git branch -v
  foo                     -> master
* master                  51cecb2 initial
  rather-long-branch-name 51cecb2 initial

$ git branch -v --no-abbrev
  foo                     -> master
* master                  51cecb2dbb1a1902bb4df79b543c8f951ee59d83 initial
  rather-long-branch-name 51cecb2dbb1a1902bb4df79b543c8f951ee59d83 initial

$ git branch -r
  frotz/HEAD -> frotz/master
  frotz/master
  origin/HEAD -> origin/master
  origin/UNUSUAL -> refs/heads/master
  origin/master

$ git branch -a
  foo -> master
* master
  rather-long-branch-name
  remotes/frotz/HEAD -> frotz/master
  remotes/frotz/master
  remotes/origin/HEAD -> origin/master
  remotes/origin/UNUSUAL -> refs/heads/master
  remotes/origin/master

$ git branch -rv
  frotz/HEAD     -> frotz/master
  frotz/master   e1d8130 added file2
  origin/HEAD    -> origin/master
  origin/UNUSUAL -> refs/heads/master
  origin/master  e1d8130 added file2

$ git branch -av
  foo                     -> master
* master                  51cecb2 initial
  rather-long-branch-name 51cecb2 initial
  remotes/frotz/HEAD      -> frotz/master
  remotes/frotz/master    e1d8130 added file2
  remotes/origin/HEAD     -> origin/master
  remotes/origin/UNUSUAL  -> refs/heads/master
  remotes/origin/master   e1d8130 added file2

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/hunk_6476.cpp,,,data/crawl/git/old_hunk_6476.cpp,data/crawl/git/new_hunk_6476.cpp,11,-1,"printf(""%c %s%s%s\n"", c, branch_get_color(color), item->name,
		       branch_get_color(COLOR_BRANCH_RESET));",,"[""removeLog""]","[[""printf"", ""%c"", ""%s%s%s\\n"", ""c"", ""branch_get_color"", ""color"", ""item"", ""name"", ""branch_get_color"", ""COLOR_BRANCH_RESET""], []]",[13572560481677510145],5881,"29 days, 0:00:00"
https://github.com/git/git/commit/209d336ae3923f2c1783a42b12fca50f3bee0802,14 Feb 2009,"builtin-branch: improve output when displaying remote branches

When encountering a symref (typically refs/remotes/<remote>/HEAD),
display the ref target.

When displaying local and remote branches, prefix the remote branch
names with ""remotes/"" to make the remote branches clear from the local
branches. If displaying only the remote branches, the prefix is not
shown since it would be redundant.

Sample output:

$ git branch
  foo -> master
* master
  rather-long-branch-name

$ git branch -v
  foo                     -> master
* master                  51cecb2 initial
  rather-long-branch-name 51cecb2 initial

$ git branch -v --no-abbrev
  foo                     -> master
* master                  51cecb2dbb1a1902bb4df79b543c8f951ee59d83 initial
  rather-long-branch-name 51cecb2dbb1a1902bb4df79b543c8f951ee59d83 initial

$ git branch -r
  frotz/HEAD -> frotz/master
  frotz/master
  origin/HEAD -> origin/master
  origin/UNUSUAL -> refs/heads/master
  origin/master

$ git branch -a
  foo -> master
* master
  rather-long-branch-name
  remotes/frotz/HEAD -> frotz/master
  remotes/frotz/master
  remotes/origin/HEAD -> origin/master
  remotes/origin/UNUSUAL -> refs/heads/master
  remotes/origin/master

$ git branch -rv
  frotz/HEAD     -> frotz/master
  frotz/master   e1d8130 added file2
  origin/HEAD    -> origin/master
  origin/UNUSUAL -> refs/heads/master
  origin/master  e1d8130 added file2

$ git branch -av
  foo                     -> master
* master                  51cecb2 initial
  rather-long-branch-name 51cecb2 initial
  remotes/frotz/HEAD      -> frotz/master
  remotes/frotz/master    e1d8130 added file2
  remotes/origin/HEAD     -> origin/master
  remotes/origin/UNUSUAL  -> refs/heads/master
  remotes/origin/master   e1d8130 added file2

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/hunk_6476.cpp,,,data/crawl/git/old_hunk_6476.cpp,data/crawl/git/new_hunk_6476.cpp,3,3,"printf(""%c %s%-*s%s %s %s%s\n"", c, branch_get_color(color),
		       maxwidth, item->name,
		       branch_get_color(COLOR_BRANCH_RESET),
		       find_unique_abbrev(item->commit->object.sha1, abbrev),
		       stat.buf, sub);","strbuf_addf(&out, "" %s %s%s"",
			find_unique_abbrev(item->commit->object.sha1, abbrev),
			stat.buf, sub);","[""updateLog"", ""removeVariable"", ""addContent"", ""removeContent"", ""addVariable""]","[[""printf"", ""%c"", ""%s%"", ""*s%s"", ""%s%s\\n"", ""c"", ""branch_get_color"", ""color"", ""maxwidth"", ""name"", ""branch_get_color"", ""COLOR_BRANCH_RESET"", ""item""], [""strbuf_addf"", ""&out"", ""%s%s""]]",[5272640635229068261],5880,"29 days, 0:00:00"
https://github.com/git/git/commit/76aac715465b7678ca5b834ccbdcb88a3ab8a9f4,22 Mar 2009,"git-branch: display ""was sha1"" on branch deletion rather than just ""sha1""

Make it more pleasant to read about a branch deletion by adding ""was"".
Jeff King suggested this, and I ignored it.  He was right.

Update t3200 test again to match the change in output.

Signed-off-by: Brandon Casey <drafnel@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_6350.cpp,,,data/crawl/git/old_hunk_6350.cpp,data/crawl/git/new_hunk_6350.cpp,3,3,"printf(""Deleted %sbranch %s (%s).\n"", remote, argv[i],
				find_unique_abbrev(sha1, DEFAULT_ABBREV));","printf(""Deleted %sbranch %s (was %s).\n"", remote, argv[i],
				find_unique_abbrev(sha1, DEFAULT_ABBREV));","[""updateContent""]","[[], [""was""]]",[-4873397472080222404],5879,"11 days, 0:00:00"
https://github.com/git/git/commit/aa9ea77de4fffd133b3da1d36a19fd0bd11ad368,18 Mar 2009,"blame: read custom grafts given by -S before calling setup_revisions()

setup_revisions() while getting the command line arguments parses the
given commits from the command line, which means their direct parents will
not be rewritten by the custom graft file.

Call read_ancestry() early to work around this issue.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_6374.cpp,,,data/crawl/git/old_hunk_6374.cpp,data/crawl/git/new_hunk_6374.cpp,4,-1,"die(""reading graft file %s failed: %s"",
		    revs_file, strerror(errno));",,"[""removeLog""]","[[""die"", ""reading"", ""graft"", ""file"", ""%s"", ""failed"", ""%s"", ""revs_file"", ""strerror"", ""errno""], []]",[-5319161240530285790],5878,"13 days, 0:00:00"
https://github.com/git/git/commit/aa9ea77de4fffd133b3da1d36a19fd0bd11ad368,18 Mar 2009,"blame: read custom grafts given by -S before calling setup_revisions()

setup_revisions() while getting the command line arguments parses the
given commits from the command line, which means their direct parents will
not be rewritten by the custom graft file.

Call read_ancestry() early to work around this issue.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_6373.cpp,,,data/crawl/git/old_hunk_6373.cpp,data/crawl/git/new_hunk_6373.cpp,-1,4,,"die(""reading graft file %s failed: %s"",
		    revs_file, strerror(errno));","[""addLog""]","[[], [""die"", ""reading"", ""graft"", ""file"", ""%s"", ""failed"", ""%s"", ""revs_file"", ""strerror"", ""errno""]]",[5319161240530285790],5877,"13 days, 0:00:00"
https://github.com/git/git/commit/96e117099c0e4f7d508eb071f60b6275038f6f37,12 Oct 2008,"blame: show ""previous"" information in --porcelain/--incremental format

When the final blame is laid for a line to a <commit, path> pair, it also
gives a ""previous"" information to --porcelain and --incremental output
format.  It gives the parent commit of the blamed commit, _and_ a path in
that parent commit that corresponds to the blamed path --- in short, it is
the origin that would have been blamed (or passed blame through) for the
line _if_ the blamed commit did not change that line.

This unfortunately makes sanity checking of refcount quite complex, so I
ripped it out for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_6693.cpp,,,data/crawl/git/old_hunk_6693.cpp,data/crawl/git/new_hunk_6693.cpp,26,-1,"fprintf(stderr, ""%s in %s has refcnt %d, not %d\n"",
				ent->suspect->path,
				sha1_to_hex(ent->suspect->commit->object.sha1),
				ent->suspect->refcnt, found);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""in"", ""%s"", ""has"", ""refcnt"", ""%d"", ""not"", ""%d\\n"", ""ent"", ""suspect"", ""path"", ""sha1_to_hex"", ""ent"", ""suspect"", ""commit"", ""object"", ""sha1"", ""ent"", ""suspect"", ""refcnt"", ""found""], []]",[-17291519715008399635],5876,"91 days, 12:00:00"
https://github.com/git/git/commit/96e117099c0e4f7d508eb071f60b6275038f6f37,12 Oct 2008,"blame: show ""previous"" information in --porcelain/--incremental format

When the final blame is laid for a line to a <commit, path> pair, it also
gives a ""previous"" information to --porcelain and --incremental output
format.  It gives the parent commit of the blamed commit, _and_ a path in
that parent commit that corresponds to the blamed path --- in short, it is
the origin that would have been blamed (or passed blame through) for the
line _if_ the blamed commit did not change that line.

This unfortunately makes sanity checking of refcount quite complex, so I
ripped it out for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_6692.cpp,,,data/crawl/git/old_hunk_6692.cpp,data/crawl/git/new_hunk_6692.cpp,-1,5,,"printf(""previous %s "", sha1_to_hex(prev->commit->object.sha1));","[""addLog""]","[[], [""printf"", ""previous"", ""%s"", ""sha1_to_hex"", ""prev"", ""commit"", ""object"", ""sha1""]]",[8258032377208896742],5875,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,27,,"printf(""boundary\n"");","[""addLog""]","[[], [""printf"", ""boundary\\n""]]",[10842371902386641873],5874,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,25,,"printf(""summary %s\n"", ci.summary);","[""addLog""]","[[], [""printf"", ""summary"", ""%s\\n"", ""ci"", ""summary""]]",[-1692078277376969815],5873,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,24,,"printf(""committer-tz %s\n"", ci.committer_tz);","[""addLog""]","[[], [""printf"", ""committer"", ""tz"", ""%s\\n"", ""ci"", ""committer_tz""]]",[15557117962594673029],5872,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,23,,"printf(""committer-time %lu\n"", ci.committer_time);","[""addLog""]","[[], [""printf"", ""committer"", ""time"", ""%lu\\n"", ""ci"", ""committer_time""]]",[9140932468087020566],5871,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,22,,"printf(""committer-mail %s\n"", ci.committer_mail);","[""addLog""]","[[], [""printf"", ""committer"", ""mail"", ""%s\\n"", ""ci"", ""committer_mail""]]",[11469225420089458937],5870,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,21,,"printf(""committer %s\n"", ci.committer);","[""addLog""]","[[], [""printf"", ""committer"", ""%s\\n"", ""ci"", ""committer""]]",[20736564298734649037],5869,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,20,,"printf(""author-tz %s\n"", ci.author_tz);","[""addLog""]","[[], [""printf"", ""author"", ""tz"", ""%s\\n"", ""ci"", ""author_tz""]]",[11780382062627515401],5868,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,19,,"printf(""author-time %lu\n"", ci.author_time);","[""addLog""]","[[], [""printf"", ""author"", ""time"", ""%lu\\n"", ""ci"", ""author_time""]]",[8071503845071645430],5867,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,18,,"printf(""author-mail %s\n"", ci.author_mail);","[""addLog""]","[[], [""printf"", ""author"", ""mail"", ""%s\\n"", ""ci"", ""author_mail""]]",[12399810797356084557],5866,"91 days, 12:00:00"
https://github.com/git/git/commit/9991030c0c97285087e5da86cfdbaf143a8a74cb,12 Oct 2008,"git-blame: refactor code to emit ""porcelain format"" output

Both the --porcelain and --incremental format shared the same output
format but implemented with two identical codepaths.  This merges them
into one shared function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_6694.cpp,,,data/crawl/git/old_hunk_6694.cpp,data/crawl/git/new_hunk_6694.cpp,-1,17,,"printf(""author %s\n"", ci.author);","[""addLog""]","[[], [""printf"", ""author"", ""%s\\n"", ""ci"", ""author""]]",[21335696175581738521],5865,"91 days, 12:00:00"
https://github.com/git/git/commit/52e7787609d18af76a8c1befb0a06123fb7ce89e,08 Mar 2009,"archive: use parseopt for local-only options

Replace the hand-rolled parsers that find and remove --remote and --exec
by a parseopt parser that also handles --output.

All three options only have a meaning if no remote server is used or on
the local side.  They must be rejected by upload-archive and should not
be sent to the server by archive.

We can't use a single parser for both remote and local side because the
remote end possibly understands a different set of options than the
local side.  A local parser would then wrongly accuse options valid on
the other side as being incorrect.

This patch implements a very forgiving parser that understands only the
three options mentioned above.  All others are passed to the normal,
complete parser in archive.c (running either locally in archive, or
remotely in upload-archive).  This normal parser definition contains
dummy entries for the three options, in order for them to appear in the
help screen.

The parseopt parser allows multiple occurrences of --remote and --exec
unlike the previous one; the one specified last wins.  This looseness
is acceptable, I think.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_6401.cpp,,,data/crawl/git/old_hunk_6401.cpp,data/crawl/git/new_hunk_6401.cpp,23,-1,"die(""option --remote requires a value"");",,"[""removeLog""]","[[""die"", ""option"", ""remote"", ""requires"", ""a"", ""value""], []]",[20742074164705635620],5864,"18 days, 0:00:00"
https://github.com/git/git/commit/52e7787609d18af76a8c1befb0a06123fb7ce89e,08 Mar 2009,"archive: use parseopt for local-only options

Replace the hand-rolled parsers that find and remove --remote and --exec
by a parseopt parser that also handles --output.

All three options only have a meaning if no remote server is used or on
the local side.  They must be rejected by upload-archive and should not
be sent to the server by archive.

We can't use a single parser for both remote and local side because the
remote end possibly understands a different set of options than the
local side.  A local parser would then wrongly accuse options valid on
the other side as being incorrect.

This patch implements a very forgiving parser that understands only the
three options mentioned above.  All others are passed to the normal,
complete parser in archive.c (running either locally in archive, or
remotely in upload-archive).  This normal parser definition contains
dummy entries for the three options, in order for them to appear in the
help screen.

The parseopt parser allows multiple occurrences of --remote and --exec
unlike the previous one; the one specified last wins.  This looseness
is acceptable, I think.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_6400.cpp,,,data/crawl/git/old_hunk_6400.cpp,data/crawl/git/new_hunk_6400.cpp,26,-1,"die(""option --exec requires a value"");",,"[""removeLog""]","[[""die"", ""option"", ""exec"", ""requires"", ""a"", ""value""], []]",[18299795284169623873],5863,"18 days, 0:00:00"
https://github.com/git/git/commit/eca2a8f0236a3b5b2c3afca2643d433a51a205fe,24 Mar 2009,"builtin-apply: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6333.cpp,,,data/crawl/git/old_hunk_6333.cpp,data/crawl/git/new_hunk_6333.cpp,3,3,"fprintf(stderr, ""warning: squelched %d ""
				""whitespace error%s\n"",
				squelched,
				squelched == 1 ? """" : ""s"");","warning(""squelched %d ""
				""whitespace error%s"",
				squelched,
				squelched == 1 ? """" : ""s"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""error%s\\n""], [""error%s""]]",[1427264581957426722],5862,"10 days, 0:00:00"
https://github.com/git/git/commit/eca2a8f0236a3b5b2c3afca2643d433a51a205fe,24 Mar 2009,"builtin-apply: use warning() instead of fprintf(stderr, ""warning: "")

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6331.cpp,,,data/crawl/git/old_hunk_6331.cpp,data/crawl/git/new_hunk_6331.cpp,3,3,"fprintf(stderr, ""warning: %s has type %o, expected %o\n"",
			old_name, st_mode, patch->old_mode);","warning(""%s has type %o, expected %o"",
			old_name, st_mode, patch->old_mode);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""%o\\n""], [""%o""]]",[7785454073739785594],5861,"10 days, 0:00:00"
https://github.com/git/git/commit/a9f2c13685ae9040d52d53cd719a18040f1dd123,04 Mar 2009,"Make git-clone respect branch.autosetuprebase

When git-clone creates an initial branch it was not checking the
branch.autosetuprebase configuration option (which may exist in
~/.gitconfig).  Refactor the code used by ""git branch"" to create
a new branch, and use it instead of the insufficiently duplicated code
in builtin-clone.

Changes are partly, and the test is mostly, based on the previous work by
Pat Notz.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_6429.cpp,,,data/crawl/git/old_hunk_6429.cpp,data/crawl/git/new_hunk_6429.cpp,12,-1,"printf(""This branch will rebase on pull.\n"");",,"[""removeLog""]","[[""printf"", ""This"", ""branch"", ""will"", ""rebase"", ""on"", ""pull"", ""\\n""], []]",[-3887307495621787849],5860,"20 days, 0:00:00"
https://github.com/git/git/commit/a9f2c13685ae9040d52d53cd719a18040f1dd123,04 Mar 2009,"Make git-clone respect branch.autosetuprebase

When git-clone creates an initial branch it was not checking the
branch.autosetuprebase configuration option (which may exist in
~/.gitconfig).  Refactor the code used by ""git branch"" to create
a new branch, and use it instead of the insufficiently duplicated code
in builtin-clone.

Changes are partly, and the test is mostly, based on the previous work by
Pat Notz.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_6429.cpp,,,data/crawl/git/old_hunk_6429.cpp,data/crawl/git/new_hunk_6429.cpp,7,-1,"printf(""Branch %s set up to track %s branch %s.\n"", new_ref,
		tracking.remote ? ""remote"" : ""local"", orig_ref);",,"[""removeLog""]","[[""printf"", ""Branch"", ""%s"", ""set"", ""up"", ""to"", ""track"", ""%s"", ""branch"", ""%s"", ""\\n"", ""new_ref"", ""tracking"", ""remote"", ""remote"", ""local"", ""orig_ref""], []]",[22260728489932376191],5859,"20 days, 0:00:00"
https://github.com/git/git/commit/72f600832f75db626fd9290a21d02d49c92ca9ca,11 Mar 2009,"Improve ""git branch --tracking"" output

An earlier patch always spelled the full name of the ref that we track
(e.g. ""refs/heads/frotz"" instead of just ""frotz"" when we mean the branch
whose name is ""frotz"").  Worse yet, because we now use the true name of
the ref at the original repository when talk about a tracking branch that
copies from a remote, such a full name alone still does not give enough
information.

This reorganizes the verbose codepath to:

 - differentiate ""refs/heads/something"" and everything else; we say that
   the branch tracks ""branch <something>"" if it begins with ""refs/heads/"",
   and otherwise the branch tracks ""ref refs/<someother>/<something>"";

 - report the name of the remote when we talk about a tracking branch, by
   saying ""branch frotz from origin"";

 - not say ""by merging"" at the end; it is the default and is not worth
   reporting.

Signed-off-by: Junio C Hamano <junio@pobox.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_6391.cpp,,,data/crawl/git/old_hunk_6391.cpp,data/crawl/git/new_hunk_6391.cpp,-1,16,,"printf(""Branch %s set up to track %s%s.\n"",
		       local, key.buf,
		       rebasing ? "" by rebasing"" : """");","[""addLog""]","[[], [""printf"", ""Branch"", ""%s"", ""set"", ""up"", ""to"", ""track"", ""%s%s"", ""\\n"", ""local"", ""key"", ""buf"", ""rebasing"", ""by"", ""rebasing""]]",[16307141965908563845],5858,"16 days, 12:00:00"
https://github.com/git/git/commit/3b437b0dabfdff12d5dd78b9bb55a0be4e2da51c,05 Apr 2009,"bisect: implement ""read_bisect_paths"" to read paths in ""$GIT_DIR/BISECT_NAMES""

This is needed because  ""git bisect--helper"" must read bisect paths
in ""$GIT_DIR/BISECT_NAMES"", so that a bisection can be performed only
on commits that touches paths in this file.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/hunk_6299.cpp,,,data/crawl/git/old_hunk_6299.cpp,data/crawl/git/new_hunk_6299.cpp,-1,21,,"die(""Badly quoted content in file '%s': %s"",
			    filename, quoted);","[""addLog""]","[[], [""die"", ""Badly"", ""quoted"", ""content"", ""in"", ""file"", ""%s"", ""%s"", ""filename"", ""quoted""]]",[-22911574757715212418],5857,"4 days, 0:00:00"
https://github.com/git/git/commit/3b437b0dabfdff12d5dd78b9bb55a0be4e2da51c,05 Apr 2009,"bisect: implement ""read_bisect_paths"" to read paths in ""$GIT_DIR/BISECT_NAMES""

This is needed because  ""git bisect--helper"" must read bisect paths
in ""$GIT_DIR/BISECT_NAMES"", so that a bisection can be performed only
on commits that touches paths in this file.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/hunk_6299.cpp,,,data/crawl/git/old_hunk_6299.cpp,data/crawl/git/new_hunk_6299.cpp,-1,10,,"die(""Could not open file '%s': %s"", filename, strerror(errno));","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""open"", ""file"", ""%s"", ""%s"", ""filename"", ""strerror"", ""errno""]]",[16838779914754579038],5856,"4 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6310.cpp,,,data/crawl/git/old_hunk_6310.cpp,data/crawl/git/new_hunk_6310.cpp,-1,136,,"fprintf(stderr, "" %.*s"", (int)(ep - sp), sp);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""int"", ""ep"", ""sp"", ""sp""]]",[-21433275363726771400],5855,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6310.cpp,,,data/crawl/git/old_hunk_6310.cpp,data/crawl/git/new_hunk_6310.cpp,-1,128,,"fprintf(stderr, "" %.*s"", 8,
				sha1_to_hex(pp->item->object.sha1));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""8"", ""sha1_to_hex"", ""pp"", ""item"", ""object"", ""sha1""]]",[-29509153553998128601],5854,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6310.cpp,,,data/crawl/git/old_hunk_6310.cpp,data/crawl/git/new_hunk_6310.cpp,-1,126,,"fprintf(stderr, "" %.*s"", 8, sha1_to_hex(commit->object.sha1));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""8"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""]]",[-18701552024235154547],5853,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6310.cpp,,,data/crawl/git/old_hunk_6310.cpp,data/crawl/git/new_hunk_6310.cpp,-1,123,,"fprintf(stderr, ""%3d"", weight(p));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%3d"", ""weight"", ""p""]]",[-12350335568242920908],5852,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6310.cpp,,,data/crawl/git/old_hunk_6310.cpp,data/crawl/git/new_hunk_6310.cpp,-1,118,,"fprintf(stderr, ""%c%c%c "",
			(flags & TREESAME) ? ' ' : 'T',
			(flags & UNINTERESTING) ? 'U' : ' ',
			(flags & COUNTED) ? 'C' : ' ');","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c%c%c"", ""flags"", ""&"", ""TREESAME"", ""T"", ""flags"", ""&"", ""UNINTERESTING"", ""U"", ""flags"", ""&"", ""COUNTED"", ""C""]]",[-8125646100924237453],5851,"7 days, 0:00:00"
https://github.com/git/git/commit/a2ad79ced25e1b76fabec079549f521e8071ddd1,30 Mar 2009,"rev-list: move bisect related code into its own file

This patch creates new ""bisect.c"" and ""bisect.h"" files and move
bisect related code into these files.

While at it, we also remove some include directives that are not
needed any more from the beginning of ""builtin-rev-list.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",785,data/crawl/git/hunk_6310.cpp,,,data/crawl/git/old_hunk_6310.cpp,data/crawl/git/new_hunk_6310.cpp,-1,107,,"fprintf(stderr, ""%s (%d/%d)\n"", debug, counted, nr);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%d/%d"", ""\\n"", ""debug"", ""counted"", ""nr""]]",[4691681221590764187],5850,"7 days, 0:00:00"
https://github.com/git/git/commit/52e7787609d18af76a8c1befb0a06123fb7ce89e,08 Mar 2009,"archive: use parseopt for local-only options

Replace the hand-rolled parsers that find and remove --remote and --exec
by a parseopt parser that also handles --output.

All three options only have a meaning if no remote server is used or on
the local side.  They must be rejected by upload-archive and should not
be sent to the server by archive.

We can't use a single parser for both remote and local side because the
remote end possibly understands a different set of options than the
local side.  A local parser would then wrongly accuse options valid on
the other side as being incorrect.

This patch implements a very forgiving parser that understands only the
three options mentioned above.  All others are passed to the normal,
complete parser in archive.c (running either locally in archive, or
remotely in upload-archive).  This normal parser definition contains
dummy entries for the three options, in order for them to appear in the
help screen.

The parseopt parser allows multiple occurrences of --remote and --exec
unlike the previous one; the one specified last wins.  This looseness
is acceptable, I think.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_6399.cpp,,,data/crawl/git/old_hunk_6399.cpp,data/crawl/git/new_hunk_6399.cpp,-1,4,,"die(""Unexpected option --output"");","[""addLog""]","[[], [""die"", ""Unexpected"", ""option"", ""output""]]",[-15491304130016562518],5849,"18 days, 0:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,532,-1,"die(""cannot read object %s '%s': It is a submodule!"",
			    sha1_to_hex(sha), path);",,"[""removeLog""]","[[""die"", ""cannot"", ""read"", ""object"", ""%s"", ""%s"", ""It"", ""is"", ""a"", ""submodule"", ""sha1_to_hex"", ""sha"", ""path""], []]",[18923520020323435169],5848,"120 days, 12:00:00"
https://github.com/git/git/commit/f04833ef9f330612a4116401258882b38e95744e,02 May 2009,"honor repack.usedeltabaseoffset when fetching packs

If the local receiving repository has disabled the use of delta base
offset, for example to retain compatibility with older versions of
Git that predate OFS_DELTA, we shouldn't ask for ofs-delta support
when we obtain a pack from the remote server.

[ issue noticed by Shawn Pearce ]

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/hunk_6067.cpp,,,data/crawl/git/old_hunk_6067.cpp,data/crawl/git/new_hunk_6067.cpp,-1,5,,"fprintf(stderr, ""Server supports ofs-delta\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Server"", ""supports"", ""ofs"", ""delta\\n""]]",[-8844884277980313155],5847,12:00:00
https://github.com/git/git/commit/f389c808b6774fb0a1fc54cf2563a7b3038dd1d4,30 Oct 2007,"Rework make_usage to print the usage message immediately

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",47,data/crawl/git/hunk_7877.cpp,,,data/crawl/git/old_hunk_7877.cpp,data/crawl/git/new_hunk_7877.cpp,-1,25,,"fprintf(stderr, ""-%c"", opts->short_name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c"", ""opts"", ""short_name""]]",[-17532569713862857572],5846,"278 days, 12:00:00"
https://github.com/git/git/commit/3e230fa1b2ba3aa1a207c4399a1b93e41b103dfb,09 May 2009,"grep: use parseopt

Convert git-grep to parseopt.

The bitfields in struct grep_opt are converted to full ints,
increasing its size.  This shouldn't be a problem as there is only a
single instance in memory.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",434,data/crawl/git/hunk_6054.cpp,,,data/crawl/git/old_hunk_6054.cpp,data/crawl/git/new_hunk_6054.cpp,183,-1,"die(emsg_missing_argument, arg);",,"[""removeLog""]","[[""die"", ""emsg_missing_argument"", ""arg""], []]",[7277484490481743208],5845,0:00:00
https://github.com/git/git/commit/7fb1011e610a28518959b1d2d48cea17ecc32048,21 Sep 2007,"Rework unquote_c_style to work on a strbuf.

If the gain is not obvious in the diffstat, the resulting code is more
readable, _and_ in checkout-index/update-index we now reuse the same buffer
to unquote strings instead of always freeing/mallocing.

This also is more coherent with the next patch that reworks quoting
functions.

The quoting function is also made more efficient scanning for backslashes
and treating portions of strings without a backslash at once.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",379,data/crawl/git/hunk_7994.cpp,,,data/crawl/git/old_hunk_7994.cpp,data/crawl/git/new_hunk_7994.cpp,-1,8,,"die(""invalid quoting"");","[""addLog""]","[[], [""die"", ""invalid"", ""quoting""]]",[-11910922139060950655],5844,"298 days, 12:00:00"
https://github.com/git/git/commit/fe0bb5f7bce3dbcc32325c74e693a726d0c2808b,10 May 2009,"builtin-mktree.c: use a helper function to handle one line of input

The main() function used to do the whole thing; this moves the handling of
a single input line to a separate function to make it easier to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6043.cpp,,,data/crawl/git/old_hunk_6043.cpp,data/crawl/git/new_hunk_6043.cpp,-1,24,,"die(""input format error: %s"", buf);","[""addLog""]","[[], [""die"", ""input"", ""format"", ""error"", ""%s"", ""buf""]]",[1432739580940739610],5843,0:00:00
https://github.com/git/git/commit/4577e483648f50dd80faa401dc1d3eb33ffb627b,14 May 2009,"Change prettify_ref to prettify_refname

In preparation to be used when the ref object is not available

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6034.cpp,,,data/crawl/git/old_hunk_6034.cpp,data/crawl/git/new_hunk_6034.cpp,5,5,"fputs(prettify_ref(to), stderr);","fputs(prettify_refname(to->name), stderr);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""prettify_ref""], [""prettify_refname"", ""name""]]",[4669316365733369312],5842,0:00:00
https://github.com/git/git/commit/4577e483648f50dd80faa401dc1d3eb33ffb627b,14 May 2009,"Change prettify_ref to prettify_refname

In preparation to be used when the ref object is not available

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6034.cpp,,,data/crawl/git/old_hunk_6034.cpp,data/crawl/git/new_hunk_6034.cpp,3,3,"fprintf(stderr, ""%s -> %s"", prettify_ref(from), prettify_ref(to));","fprintf(stderr, ""%s -> %s"", prettify_refname(from->name), prettify_refname(to->name));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""prettify_ref"", ""prettify_ref""], [""prettify_refname"", ""name"", ""prettify_refname"", ""name""]]",[9338632731466738624],5841,0:00:00
https://github.com/git/git/commit/fe0bb5f7bce3dbcc32325c74e693a726d0c2808b,10 May 2009,"builtin-mktree.c: use a helper function to handle one line of input

The main() function used to do the whole thing; this moves the handling of
a single input line to a separate function to make it easier to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6044.cpp,,,data/crawl/git/old_hunk_6044.cpp,data/crawl/git/new_hunk_6044.cpp,28,-1,"die(""object type %s mismatch (%s)"", ptr, typename(type));",,"[""removeLog""]","[[""die"", ""object"", ""type"", ""%s"", ""mismatch"", ""%s"", ""ptr"", ""typename"", ""type""], []]",[-1148983554275742274],5840,"3 days, 0:00:00"
https://github.com/git/git/commit/fe0bb5f7bce3dbcc32325c74e693a726d0c2808b,10 May 2009,"builtin-mktree.c: use a helper function to handle one line of input

The main() function used to do the whole thing; this moves the handling of
a single input line to a separate function to make it easier to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6044.cpp,,,data/crawl/git/old_hunk_6044.cpp,data/crawl/git/new_hunk_6044.cpp,25,-1,"die(""object %s unavailable"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""object"", ""%s"", ""unavailable"", ""sha1_to_hex"", ""sha1""], []]",[15458085929420937590],5839,"3 days, 0:00:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,446,,"die(""%s: cannot update the ref"", ref);","[""addLog""]","[[], [""die"", ""%s"", ""cannot"", ""update"", ""the"", ""ref"", ""ref""]]",[-9434152385079512487],5838,"341 days, 0:00:00"
https://github.com/git/git/commit/62e09ce998dd7f6b844deb650101c743a5c4ce50,20 Jul 2007,"Make git tag a builtin.

This replaces the script ""git-tag.sh"" with ""builtin-tag.c"".

The existing test suite for ""git tag"" guarantees the compatibility
with the features provided by the script version.

There are some minor changes in the behaviour of ""git tag"" here:
""git tag -v"" now can get more than one tag to verify, like ""git tag -d"" does,
""git tag"" with no arguments prints all tags, more like ""git branch"" does,
and ""git tag -n"" also prints all tags with annotations (without needing -l).
Tests and documentation were also updated to reflect these changes.

The program is currently calling the script ""git verify-tag"" for verify.
This can be changed porting it to C and calling its functions directly
from builtin-tag.c.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",551,data/crawl/git/hunk_8213.cpp,,,data/crawl/git/old_hunk_8213.cpp,data/crawl/git/new_hunk_8213.cpp,-1,444,,"die(""%s: cannot lock the ref"", ref);","[""addLog""]","[[], [""die"", ""%s"", ""cannot"", ""lock"", ""the"", ""ref"", ""ref""]]",[2959079677332186133],5837,"341 days, 0:00:00"
https://github.com/git/git/commit/48188c259a7e6c87c20121933287b8c8ca721e3a,06 Jun 2009,"http-walker: verify remote packs

In c17fb6e (""Verify remote packs, speed up pending request queue""),
changes were made to index fetching in http-push.c, particularly the
methods fetch_index and setup_index. Since http-walker.c has similar
code for index fetching, these improvements should apply to
http-walker.c's fetch_index and setup_index.

Invocations of free() of string memory are reproduced as well.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_5996.cpp,,,data/crawl/git/old_hunk_5996.cpp,data/crawl/git/new_hunk_5996.cpp,-1,14,,"error(""Unable to verify pack %s is available"",
				     hex);","[""addLog""]","[[], [""error"", ""Unable"", ""to"", ""verify"", ""pack"", ""%s"", ""is"", ""available"", ""hex""]]",[2124037517676676439],5836,0:00:00
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5982.cpp,,,data/crawl/git/old_hunk_5982.cpp,data/crawl/git/new_hunk_5982.cpp,36,-1,"error(""%s"", curl_errorstr);",,"[""removeLog""]","[[""error"", ""%s"", ""curl_errorstr""], []]",[385681632974672444],5835,0:00:00
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5981.cpp,,,data/crawl/git/old_hunk_5981.cpp,data/crawl/git/new_hunk_5981.cpp,84,-1,"error(""Unable to get pack index %s\n%s"", url,
				    curl_errorstr);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""get"", ""pack"", ""index"", ""%s\\n%s"", ""url"", ""curl_errorstr""], []]",[-2393446781503683769],5834,0:00:00
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5981.cpp,,,data/crawl/git/old_hunk_5981.cpp,data/crawl/git/new_hunk_5981.cpp,43,-1,"fprintf(stderr, ""Getting index for pack %s\n"", hex);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Getting"", ""index"", ""for"", ""pack"", ""%s\\n"", ""hex""], []]",[17577118066913007211],5833,0:00:00
https://github.com/git/git/commit/2264dfa5c4f11e2b0e2740072208186bee361afd,06 Jun 2009,"http*: add helper methods for fetching packs

The code handling the fetching of packs in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(http_pack_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_pack_request
 - finish_http_pack_request
 - release_http_pack_request

and the new struct is http_pack_request.

Add a function, new_http_pack_request(), that deals with the details of
coming up with the filename to store the retrieved packfile, resuming a
previously aborted request, and making a new curl request. Update
http-push.c::start_fetch_packed() and http-walker.c::fetch_pack() to
use this.

Add a function, finish_http_pack_request(), that deals with renaming
the pack, advancing the pack list, and installing the pack. Update
http-push.c::finish_request() and http-walker.c::fetch_pack to use
this.

Update release_request() in http-push.c and http-walker.c to invoke
release_http_pack_request() to clean up pack request helper data.

The local_stream member of the transfer_request struct in http-push.c
has been removed, as the packfile pointer will be managed in the struct
http_pack_request.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",318,data/crawl/git/hunk_5976.cpp,,,data/crawl/git/old_hunk_5976.cpp,data/crawl/git/new_hunk_5976.cpp,29,-1,"fprintf(stderr,
				""Resuming fetch of pack %s at byte %ld\n"",
				sha1_to_hex(target->sha1), prev_posn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resuming"", ""fetch"", ""of"", ""pack"", ""%s"", ""at"", ""byte"", ""%ld\\n"", ""sha1_to_hex"", ""target"", ""sha1"", ""prev_posn""], []]",[20728982457331409251],5832,0:00:00
https://github.com/git/git/commit/5424bc557fc6414660830b470dd45774b8f5f281,06 Jun 2009,"http*: add helper methods for fetching objects (loose)

The code handling the fetching of loose objects in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(object_http_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_object_request
 - process_http_object_request
 - finish_http_object_request
 - abort_http_object_request
 - release_http_object_request

and the new struct is http_object_request.

RANGER_HEADER_SIZE and no_pragma_header is no longer made available
outside of http.c, since after the above changes, there are no other
instances of usage outside of http.c.

Remove members of the transfer_request struct in http-push.c and
http-walker.c, including filename, real_sha1 and zret, as they are used
no longer used.

Move the methods append_remote_object_url() and get_remote_object_url()
from http-push.c to http.c. Additionally, get_remote_object_url() is no
longer defined only when USE_CURL_MULTI is defined, since
non-USE_CURL_MULTI code in http.c uses it (namely, in
new_http_object_request()).

Refactor code from http-push.c::start_fetch_loose() and
http-walker.c::start_object_fetch_request() that deals with the details
of coming up with the filename to store the retrieved object, resuming
a previously aborted request, and making a new curl request, into a new
function, new_http_object_request().

Refactor code from http-walker.c::process_object_request() into the
function, process_http_object_request().

Refactor code from http-push.c::finish_request() and
http-walker.c::finish_object_request() into a new function,
finish_http_object_request(). It returns the result of the
move_temp_to_file() invocation.

Add a function, release_http_object_request(), which cleans up object
request data. http-push.c and http-walker.c invoke this function
separately; http-push.c::release_request() and
http-walker.c::release_object_request() do not invoke this function.

Add a function, abort_http_object_request(), which unlink()s the object
file and invokes release_http_object_request(). Update
http-walker.c::abort_object_request() to use this.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",767,data/crawl/git/hunk_5972.cpp,,,data/crawl/git/old_hunk_5972.cpp,data/crawl/git/new_hunk_5972.cpp,27,34,"error(""unable to write sha1 filename %s"",
			    obj_req->filename);","error(""unable to write sha1 filename %s"",
			    req->filename);","[""updateVariable""]","[[""obj_req""], [""req""]]",[9321497254034116534],5831,0:00:00
https://github.com/git/git/commit/5424bc557fc6414660830b470dd45774b8f5f281,06 Jun 2009,"http*: add helper methods for fetching objects (loose)

The code handling the fetching of loose objects in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(object_http_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_object_request
 - process_http_object_request
 - finish_http_object_request
 - abort_http_object_request
 - release_http_object_request

and the new struct is http_object_request.

RANGER_HEADER_SIZE and no_pragma_header is no longer made available
outside of http.c, since after the above changes, there are no other
instances of usage outside of http.c.

Remove members of the transfer_request struct in http-push.c and
http-walker.c, including filename, real_sha1 and zret, as they are used
no longer used.

Move the methods append_remote_object_url() and get_remote_object_url()
from http-push.c to http.c. Additionally, get_remote_object_url() is no
longer defined only when USE_CURL_MULTI is defined, since
non-USE_CURL_MULTI code in http.c uses it (namely, in
new_http_object_request()).

Refactor code from http-push.c::start_fetch_loose() and
http-walker.c::start_object_fetch_request() that deals with the details
of coming up with the filename to store the retrieved object, resuming
a previously aborted request, and making a new curl request, into a new
function, new_http_object_request().

Refactor code from http-walker.c::process_object_request() into the
function, process_http_object_request().

Refactor code from http-push.c::finish_request() and
http-walker.c::finish_object_request() into a new function,
finish_http_object_request(). It returns the result of the
move_temp_to_file() invocation.

Add a function, release_http_object_request(), which cleans up object
request data. http-push.c and http-walker.c invoke this function
separately; http-push.c::release_request() and
http-walker.c::release_object_request() do not invoke this function.

Add a function, abort_http_object_request(), which unlink()s the object
file and invokes release_http_object_request(). Update
http-walker.c::abort_object_request() to use this.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",767,data/crawl/git/hunk_5969.cpp,,,data/crawl/git/old_hunk_5969.cpp,data/crawl/git/new_hunk_5969.cpp,153,-1,"fprintf(stderr,
				""Resuming fetch of object %s at byte %ld\n"",
				hex, prev_posn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resuming"", ""fetch"", ""of"", ""object"", ""%s"", ""at"", ""byte"", ""%ld\\n"", ""hex"", ""prev_posn""], []]",[25687977966429540003],5830,0:00:00
https://github.com/git/git/commit/e3a0ca878457ecc70d0065802fcb0c6875c6b671,06 Jun 2009,"parse-options: make OPT_INTEGER's argh explicit

OPTION_INTEGER hardcodes its argh member to be ""n"", but the decision is
hidden deep in usage_with_options_internal(). Make ""n"" the default argh
for the OPT_INTEGER macro while leaving it undecided for the OPTION_INTEGER
enum.

This makes it less surprising to users that argh is ""n"" when using the
OPT_INTEGER macro.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewed-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_5966.cpp,,,data/crawl/git/old_hunk_5966.cpp,data/crawl/git/new_hunk_5966.cpp,8,-1,"fprintf(stderr, ""[<n>]"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""["", ""n"", ""]""], []]",[13925655246813338577],5829,0:00:00
https://github.com/git/git/commit/34aec9f573af8e6fbe06285d660d9e1a84950e4c,06 Jun 2009,"parse-options: simplify usage argh handling

Simplify the argh printing by simply calling usage_argh() if the option
can take an argument. Update macros defined in parse-options.h to set
the PARSE_OPT_NOARG flag.

The only other user of custom non-argument taking options is git-apply
(in this case OPTION_BOOLEAN for deprecated options). Update it to set
the PARSE_OPT_NOARG flag.

Thanks to Ren辿 Scharfe for the suggestion and starter patch.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewd-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/hunk_5965.cpp,,,data/crawl/git/old_hunk_5965.cpp,data/crawl/git/new_hunk_5965.cpp,22,-1,"fprintf(stderr, ""[...]"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""["", ""]""], []]",[13925655260893380928],5828,0:00:00
https://github.com/git/git/commit/203462347fce0eab563fe77640648a7e8ae64d3b,10 Jun 2009,"Allow push and fetch urls to be different

This introduces a config setting remote.$remotename.pushurl which is
used for pushes only. If absent remote.$remotename.url is used for
pushes and fetches as before.
This is useful, for example, in order to do passwordless fetches
(remote update) over the git transport but pushes over ssh.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/hunk_5956.cpp,,,data/crawl/git/old_hunk_5956.cpp,data/crawl/git/new_hunk_5956.cpp,10,10,"error(""failed to push some refs to '%s'"", remote->url[i]);","error(""failed to push some refs to '%s'"", url[i]);","[""removeVariable""]","[[""remote""], []]",[7106503395058069532],5827,0:00:00
https://github.com/git/git/commit/2ff4d1ab9ef6660c88020ddaadc410157e130cdc,22 Jun 2009,"receive-pack: do not send error details to the client

If the objects that a client pushes to the server cannot be processed for
any reason, an error is reported back to the client via the git protocol.
We used to send quite detailed information if a system call failed if
unpack-objects is run. This can be regarded as an information leak. Now we
do not send any error details like we already do in the case where
index-pack failed.

Errors in system calls as well as the exit code of unpack-objects and
index-pack are now reported to stderr; in the case of a local push or via
ssh these messages still go to the client, but that is OK since these forms
of access to the server assume that the client can be trusted. If
receive-pack is run from git-daemon, then the daemon should put the error
messages into the syslog.

With this reasoning a new status report is added for the post-update-hook;
untrusted (i.e. daemon's) clients cannot observe its status anyway, others
may want to know failure details.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_5940.cpp,,,data/crawl/git/old_hunk_5940.cpp,data/crawl/git/new_hunk_5940.cpp,11,11,"error(""hook execute failed"");","error(""execute of %s failed"", cmd_name);","[""updateContent"", ""addVariable""]","[[""hook""], [""of"", ""%s"", ""cmd_name""]]",[338303021388950608],5826,0:00:00
https://github.com/git/git/commit/d824cbba02a4061400a0e382f9bd241fbbff34f0,27 Jun 2009,"Convert existing die(..., strerror(errno)) to die_errno()

Change calls to die(..., strerror(errno)) to use the new die_errno().

In the process, also make slight style adjustments: at least state
_something_ about the function that failed (instead of just printing
the pathname), and put paths in single quotes.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5866.cpp,,,data/crawl/git/old_hunk_5866.cpp,data/crawl/git/new_hunk_5866.cpp,3,3,"die(""git commit-tree: read returned %s"", strerror(errno));","die_errno(""git commit-tree: failed to read"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""returned"", ""%s"", ""strerror"", ""errno""], [""die_errno"", ""failed"", ""to""]]",[-24920899524972728082],5825,0:00:00
https://github.com/git/git/commit/2944e4e6145bdfcb1a8730d7da671786d72c86ed,02 Jul 2009,"grep: add option -p/--show-function

The new option -p instructs git grep to print the previous function
definition as a context line, similar to diff -p.  Such context lines
are marked with an equal sign instead of a dash.  This option
complements the existing context options -A, -B, -C.

Function definitions are detected using the same heuristic that diff
uses.  User defined regular expressions are not supported, yet.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/hunk_5789.cpp,,,data/crawl/git/old_hunk_5789.cpp,data/crawl/git/new_hunk_5789.cpp,-1,22,,"printf(""Hello world.\n"");","[""addLog""]","[[], [""printf"", ""Hello"", ""world"", ""\\n""]]",[3892504892495328741],5824,0:00:00
https://github.com/git/git/commit/40cb4fab720807f8525fb125e6c4ddc802ee8ed1,03 Nov 2007,"Use built-in send-pack.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_7846.cpp,,,data/crawl/git/old_hunk_7846.cpp,data/crawl/git/new_hunk_7846.cpp,42,-1,"error(""%s died with strange error"", argv[0]);",,"[""removeLog""]","[[""error"", ""%s"", ""died"", ""with"", ""strange"", ""error"", ""argv[0]""], []]",[-6010646412580812064],5823,"305 days, 12:00:00"
https://github.com/git/git/commit/40cb4fab720807f8525fb125e6c4ddc802ee8ed1,03 Nov 2007,"Use built-in send-pack.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_7846.cpp,,,data/crawl/git/old_hunk_7846.cpp,data/crawl/git/new_hunk_7846.cpp,34,-1,"error(""unable to fork for %s"", argv[0]);",,"[""removeLog""]","[[""error"", ""unable"", ""to"", ""fork"", ""for"", ""%s"", ""argv[0]""], []]",[-10495219703938108806],5822,"305 days, 12:00:00"
https://github.com/git/git/commit/ae98a0089ff7f7641ed15ddd595797de56eb49f1,18 Jan 2009,"Move run_hook() from builtin-commit.c into run-command.c (libgit)

A function that runs a hook is used in several Git commands.
builtin-commit.c has the one that is most general for cases without
piping. The one in builtin-gc.c prints some useful warnings.
This patch moves a merged version of these variants into libgit and
lets the other builtins use this libified run_hook().

The run_hook() function used in receive-pack.c feeds the standard
input of the pre-receive or post-receive hooks. This function is
renamed to run_receive_hook() because the libified run_hook() cannot
handle this.

Mentored-by: Daniel Barkalow <barkalow@iabervon.org>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/hunk_6523.cpp,,,data/crawl/git/old_hunk_6523.cpp,data/crawl/git/new_hunk_6523.cpp,27,-1,"warning(""%s exited due to uncaught signal"", argv[0]);",,"[""removeLog""]","[[""warning"", ""%s"", ""exited"", ""due"", ""to"", ""uncaught"", ""signal"", ""argv[0]""], []]",[-6886008756878022294],5821,"84 days, 12:00:00"
https://github.com/git/git/commit/ae98a0089ff7f7641ed15ddd595797de56eb49f1,18 Jan 2009,"Move run_hook() from builtin-commit.c into run-command.c (libgit)

A function that runs a hook is used in several Git commands.
builtin-commit.c has the one that is most general for cases without
piping. The one in builtin-gc.c prints some useful warnings.
This patch moves a merged version of these variants into libgit and
lets the other builtins use this libified run_hook().

The run_hook() function used in receive-pack.c feeds the standard
input of the pre-receive or post-receive hooks. This function is
renamed to run_receive_hook() because the libified run_hook() cannot
handle this.

Mentored-by: Daniel Barkalow <barkalow@iabervon.org>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/hunk_6523.cpp,,,data/crawl/git/old_hunk_6523.cpp,data/crawl/git/new_hunk_6523.cpp,22,-1,"warning(""Could not spawn %s"", argv[0]);",,"[""removeLog""]","[[""warning"", ""Could"", ""not"", ""spawn"", ""%s"", ""argv[0]""], []]",[-7894034535750416282],5820,"84 days, 12:00:00"
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5775.cpp,,,data/crawl/git/old_hunk_5775.cpp,data/crawl/git/new_hunk_5775.cpp,-1,29,,"error(""waitpid is confused (%s)"", argv0);","[""addLog""]","[[], [""error"", ""waitpid"", ""is"", ""confused"", ""%s"", ""argv0""]]",[10429499216146828180],5819,0:00:00
https://github.com/git/git/commit/40cb4fab720807f8525fb125e6c4ddc802ee8ed1,03 Nov 2007,"Use built-in send-pack.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_7846.cpp,,,data/crawl/git/old_hunk_7846.cpp,data/crawl/git/new_hunk_7846.cpp,36,-1,"error(""unable to exec %s"", argv[0]);",,"[""removeLog""]","[[""error"", ""unable"", ""to"", ""exec"", ""%s"", ""argv[0]""], []]",[-10517722405981025127],5818,"305 days, 12:00:00"
https://github.com/git/git/commit/53d48885931614a43e414e1272a7f126f8d0c901,25 Jul 2009,"git init: optionally allow a directory argument

When starting a new repository, I see my students often say

    % git init newrepo

and curse git.  They could say

    % mkdir newrepo; cd newrepo; git init

but allowing it as an obvious short-cut may be nicer.

Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/hunk_5751.cpp,,,data/crawl/git/old_hunk_5751.cpp,data/crawl/git/new_hunk_5751.cpp,-1,49,,"die_errno(""cannot mkdir %s"", argv[1]);","[""addLog""]","[[], [""die_errno"", ""cannot"", ""mkdir"", ""%s"", ""argv[1]""]]",[-11425516080168209877],5817,0:00:00
https://github.com/git/git/commit/c29727d5241be0fee2265fbbe65d1b275b01dc1c,19 Sep 2007,"Add fetch methods to transport library.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",305,data/crawl/git/hunk_8033.cpp,,,data/crawl/git/old_hunk_8033.cpp,data/crawl/git/new_hunk_8033.cpp,-1,23,,"die(""Fetch failed."");","[""addLog""]","[[], [""die"", ""Fetch"", ""failed""]]",[-11689177191230687721],5816,"343 days, 0:00:00"
https://github.com/git/git/commit/fd35e42683113e367eee0bb8ac956dde3d95edde,07 Aug 2008,"Fail properly when cloning from invalid HTTP URL

Currently, when cloning from invalid HTTP URL, git clone will possibly
return curl error, then a confusing message about remote HEAD and then
return success and leave an empty repository behind, confusing either
the end-user or the automated service calling it (think repo.or.cz).

This patch changes the error() calls in get_refs_via_curl() to die()s,
akin to the other get_refs_*() functions.

Cc: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Petr Baudis <pasky@suse.cz>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/hunk_6900.cpp,,,data/crawl/git/old_hunk_6900.cpp,data/crawl/git/new_hunk_6900.cpp,-1,4,,"die(""%s not found: did you run git update-server-info on the server?"", refs_url);","[""addLog""]","[[], [""die"", ""%s"", ""not"", ""found"", ""did"", ""you"", ""run"", ""git"", ""update"", ""server"", ""info"", ""on"", ""the"", ""server"", ""refs_url""]]",[-29276283679114300153],5815,"181 days, 12:00:00"
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_7354.cpp,,,data/crawl/git/old_hunk_7354.cpp,data/crawl/git/new_hunk_7354.cpp,-1,20,,"die(""cannot describe '%s'"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""cannot"", ""describe"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-11182062032380983816],5814,"260 days, 12:00:00"
https://github.com/git/git/commit/d6293d1f2cadcdf45f8ada7847a32b51fa5bf0a6,09 Jun 2008,"Add configuration option for default untracked files mode

By default, the untracked files mode for commit/status is 'normal'

Signed-off-by: Marius Storm-Olsen <marius@trolltech.com>",54,data/crawl/git/hunk_7102.cpp,,,data/crawl/git/old_hunk_7102.cpp,data/crawl/git/new_hunk_7102.cpp,-1,13,,"error(""Invalid untracked files mode '%s'"", v);","[""addLog""]","[[], [""error"", ""Invalid"", ""untracked"", ""files"", ""mode"", ""%s"", ""v""]]",[-11650023686106562617],5813,"213 days, 12:00:00"
https://github.com/git/git/commit/33e7018c459e6583b899690cabd21c808ffd3c85,18 Aug 2009,"git-log: allow --decorate[=short|full]

Commit de435ac0 changed the behavior of --decorate from printing the
full ref (e.g., ""refs/heads/master"") to a shorter, more human-readable
version (e.g., just ""master""). While this is nice for human readers,
external tools using the output from ""git log"" may prefer the full
version.

This patch introduces an extension to --decorate to allow the caller to
specify either the short or the full versions.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_5715.cpp,,,data/crawl/git/old_hunk_5715.cpp,data/crawl/git/new_hunk_5715.cpp,-1,11,,"die(""invalid --decorate option: %s"", arg);","[""addLog""]","[[], [""die"", ""invalid"", ""decorate"", ""option"", ""%s"", ""arg""]]",[-4373137024008869434],5812,"4 days, 0:00:00"
https://github.com/git/git/commit/6957eb9a39cc765862e125edeef0dd70f359cff1,15 Sep 2009,"diff.c: shuffling code around

Move function, type, and structure definitions for fill_mmfile(),
count_trailing_blank(), check_blank_at_eof(), emit_line(),
new_blank_line_at_eof(), emit_add_line(), sane_truncate_fn, and
emit_callback up in the file, so that they can be refactored into helper
functions and reused by codepath for emitting rewrite patches.

This only moves the lines around to make the next two patches easier to
read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5678.cpp,,,data/crawl/git/old_hunk_5678.cpp,data/crawl/git/new_hunk_5678.cpp,16,-1,"fputs(reset, file);",,"[""removeLog""]","[[""fputs"", ""reset"", ""file""], []]",[10890748349608424665],5811,0:00:00
https://github.com/git/git/commit/6957eb9a39cc765862e125edeef0dd70f359cff1,15 Sep 2009,"diff.c: shuffling code around

Move function, type, and structure definitions for fill_mmfile(),
count_trailing_blank(), check_blank_at_eof(), emit_line(),
new_blank_line_at_eof(), emit_add_line(), sane_truncate_fn, and
emit_callback up in the file, so that they can be refactored into helper
functions and reused by codepath for emitting rewrite patches.

This only moves the lines around to make the next two patches easier to
read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5678.cpp,,,data/crawl/git/old_hunk_5678.cpp,data/crawl/git/new_hunk_5678.cpp,14,-1,"fputs(set, file);",,"[""removeLog""]","[[""fputs"", ""set"", ""file""], []]",[4379328660601636790],5810,0:00:00
https://github.com/git/git/commit/1b018fd9be290fd6a70ce3093ab1dc1abce74e00,29 Sep 2009,"git branch -D: give a better error message when lockfile creation fails

Previously the old error message just told the user that it was not
possible to delete the ref from the packed-refs file. Give instructions
on how to resolve the problem.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",31,data/crawl/git/hunk_5667.cpp,,,data/crawl/git/old_hunk_5667.cpp,data/crawl/git/new_hunk_5667.cpp,13,14,"die(""Unable to create '%s.lock': %s"", path, strerror(err));","strbuf_addf(&buf, ""Unable to create '%s.lock': %s"", path, strerror(err));","[""updateLog"", ""addVariable""]","[[""die""], [""strbuf_addf"", ""&buf""]]",[-8794672489787236555],5809,0:00:00
https://github.com/git/git/commit/c6e8c8005a2b1fc4cff72d279f29178767bd1a47,18 Oct 2009,"check_filename(): make verify_filename() callable without dying

Make it possible to invole the logic of verify_filename() to make sure the
pathname arguments are unambiguous without actually dying.  The caller may
want to do something different.",39,data/crawl/git/hunk_5656.cpp,,,data/crawl/git/old_hunk_5656.cpp,data/crawl/git/new_hunk_5656.cpp,15,7,"die_errno(""failed to stat '%s'"", arg);","!check_filename(prefix, arg);","[""addLog"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""die_errno"", ""failed"", ""to"", ""stat"", ""%s""], [""check_filename"", ""prefix""]]",[13164731963124402936],5808,0:00:00
https://github.com/git/git/commit/2dd625d022074bb677bdd5caa5146cabaf726123,12 Jan 2009,"Speed up git notes lookup

To avoid looking up each and every commit in the notes ref's tree
object, which is very expensive, speed things up by slurping the tree
object's contents into a hash_map.

The idea fo the hashmap singleton is from David Reiss, initial
benchmarking by Jeff King.

Note: the implementation allows for arbitrary entries in the notes
tree object, ignoring those that do not reference a valid object.  This
allows you to annotate arbitrary branches, or objects.

[jc: fixed an obvious error in initialize_hash_map()]

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_6531.cpp,,,data/crawl/git/old_hunk_6531.cpp,data/crawl/git/new_hunk_6531.cpp,-1,83,,"die(""Could not read %s for notes-index"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""read"", ""%s"", ""for"", ""notes"", ""index"", ""sha1_to_hex"", ""sha1""]]",[-5062818819348318891],5807,"140 days, 12:00:00"
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5742.cpp,,,data/crawl/git/old_hunk_5742.cpp,data/crawl/git/new_hunk_5742.cpp,24,-1,"die(""Fetch failed."");",,"[""removeLog""]","[[""die"", ""Fetch"", ""failed""], []]",[11689177191230687721],5806,"43 days, 12:00:00"
https://github.com/git/git/commit/292ce46b60e2c12450c5c21044acf9c41bd837df,31 Oct 2009,"remote-helpers: Fetch more than one ref in a batch

Some network protocols (e.g. native git://) are able to fetch more
than one ref at a time and reduce the overall transfer cost by
combining the requests into a single exchange.  Instead of feeding
each fetch request one at a time to the helper, feed all of them
at once so the helper can decide whether or not it should batch them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_5600.cpp,,,data/crawl/git/old_hunk_5600.cpp,data/crawl/git/new_hunk_5600.cpp,-1,47,,"die(""protocol error: expected sha/ref, got %s'"", p);","[""addLog""]","[[], [""die"", ""protocol"", ""error"", ""expected"", ""sha/ref"", ""got"", ""%s"", ""p""]]",[8341311652678906895],5805,0:00:00
https://github.com/git/git/commit/292ce46b60e2c12450c5c21044acf9c41bd837df,31 Oct 2009,"remote-helpers: Fetch more than one ref in a batch

Some network protocols (e.g. native git://) are able to fetch more
than one ref at a time and reduce the overall transfer cost by
combining the requests into a single exchange.  Instead of feeding
each fetch request one at a time to the helper, feed all of them
at once so the helper can decide whether or not it should batch them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_5600.cpp,,,data/crawl/git/old_hunk_5600.cpp,data/crawl/git/new_hunk_5600.cpp,-1,59,,"die(""http transport does not support %s"", buf->buf);","[""addLog""]","[[], [""die"", ""http"", ""transport"", ""does"", ""not"", ""support"", ""%s"", ""buf"", ""buf""]]",[1931507169994616342],5804,0:00:00
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5741.cpp,,,data/crawl/git/old_hunk_5741.cpp,data/crawl/git/new_hunk_5741.cpp,-1,124,,"printf(""%s %s\n"", sha1_to_hex(posn->old_sha1), posn->name);","[""addLog""]","[[], [""printf"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""posn"", ""old_sha1"", ""posn"", ""name""]]",[21847083676494160889],5803,"43 days, 12:00:00"
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5741.cpp,,,data/crawl/git/old_hunk_5741.cpp,data/crawl/git/new_hunk_5741.cpp,-1,122,,"printf(""@%s %s\n"", posn->symref, posn->name);","[""addLog""]","[[], [""printf"", ""%s"", ""%s\\n"", ""posn"", ""symref"", ""posn"", ""name""]]",[19541895361849245306],5802,"43 days, 12:00:00"
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/hunk_5589.cpp,,,data/crawl/git/old_hunk_5589.cpp,data/crawl/git/new_hunk_5589.cpp,-1,5,,"printf(""ok %s\n"", ref->name);","[""addLog""]","[[], [""printf"", ""ok"", ""%s\\n"", ""ref"", ""name""]]",[9986884482870768078],5801,0:00:00
https://github.com/git/git/commit/72b103fec7af967d295410c2fd3899bc6e8386e2,20 Oct 2009,"reflog-walk: refactor the branch@{num} formatting

We'll use the same output in an upcoming commit, so refactor its
formatting (which was duplicated anyway) into a separate function.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_5639.cpp,,,data/crawl/git/old_hunk_5639.cpp,data/crawl/git/new_hunk_5639.cpp,31,39,"printf(""} (%s)\nReflog message: %s"",
			       info->email, info->message);","printf(""Reflog: %s (%s)\nReflog message: %s"",
			       selector.buf, info->email, info->message);","[""updateContent"", ""addVariable""]","[[], [""Reflog"", ""%s"", ""selector"", ""buf""]]",[965581586731190206],5800,"5 days, 12:00:00"
https://github.com/git/git/commit/72b103fec7af967d295410c2fd3899bc6e8386e2,20 Oct 2009,"reflog-walk: refactor the branch@{num} formatting

We'll use the same output in an upcoming commit, so refactor its
formatting (which was duplicated anyway) into a separate function.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_5639.cpp,,,data/crawl/git/old_hunk_5639.cpp,data/crawl/git/new_hunk_5639.cpp,25,-1,"printf(""%s"", show_date(info->timestamp,
							info->tz,
							dmode));",,"[""removeLog""]","[[""printf"", ""%s"", ""show_date"", ""info"", ""timestamp"", ""info"", ""tz"", ""dmode""], []]",[9037300345531019091],5799,"5 days, 12:00:00"
https://github.com/git/git/commit/de1a2fdd38b138c4e4fed6412783dcb74d63d2da,05 Nov 2009,"Smart push over HTTP: client side

The git-remote-curl backend detects if the remote server supports
the git-receive-pack service, and if so, runs git-send-pack in a
pipe to dump the command and pack data as a single POST request.

The advertisements from the server that were obtained during the
discovery are passed into git-send-pack before the POST request
starts.  This permits git-send-pack to operate largely unmodified.

For smaller packs (those under 1 MiB) a HTTP/1.0 POST with a
Content-Length is used, permitting interaction with any server.
The 1 MiB limit is arbitrary, but is sufficent to fit most deltas
created by human authors against text sources with the occasional
small binary file (e.g. few KiB icon image).  The configuration
option http.postBuffer can be used to increase (or shink) this
buffer if the default is not sufficient.

For larger packs which cannot be spooled entirely into the helper's
memory space (due to http.postBuffer being too small), the POST
request requires HTTP/1.1 and sets ""Transfer-Encoding: chunked"".
This permits the client to upload an unknown amount of data in one
HTTP transaction without needing to pregenerate the entire pack
file locally.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",389,data/crawl/git/hunk_5559.cpp,,,data/crawl/git/old_hunk_5559.cpp,data/crawl/git/new_hunk_5559.cpp,10,10,"packet_write(out, ""%s %s %s"",
					old_hex, new_hex, ref->name);","packet_buf_write(&req_buf, ""%s %s %s"",
					old_hex, new_hex, ref->name);","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""packet_write"", ""out""], [""packet_buf_write"", ""&req_buf""]]",[-10015190695189371297],5798,0:00:00
https://github.com/git/git/commit/edace6f02eeae6f4a06ed1e4f6308703523d8535,31 Oct 2009,"fetch-pack: Use a strbuf to compose the want list

This change is being offered as a refactoring to make later
commits in the smart HTTP series easier.

By changing the enabled capabilities to be formatted in a strbuf
it is easier to add a new capability to the set of supported
capabilities.

By formatting the want portion of the request into a strbuf and
writing it as a whole block we can later decide to hold onto
the req_buf (instead of releasing it) to recycle in stateless
communications.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",64,data/crawl/git/hunk_5611.cpp,,,data/crawl/git/old_hunk_5611.cpp,data/crawl/git/new_hunk_5611.cpp,20,29,"packet_write(fd[1], ""deepen %d"", args.depth);","packet_buf_write(&req_buf, ""deepen %d"", args.depth);","[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""packet_write"", ""fd[1]""], [""packet_buf_write"", ""&req_buf""]]",[-3933064139455118520],5797,"2 days, 12:00:00"
https://github.com/git/git/commit/211c89682eeef310f39022b91e88d07cd5784953,01 Mar 2008,"Make git-remote a builtin

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/hunk_7362.cpp,,,data/crawl/git/old_hunk_7362.cpp,data/crawl/git/new_hunk_7362.cpp,-1,49,,"error(""Could not fetch %s"", name);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""fetch"", ""%s"", ""name""]]",[16381119796876810489],5796,"309 days, 12:00:00"
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6191.cpp,,,data/crawl/git/old_hunk_6191.cpp,data/crawl/git/new_hunk_6191.cpp,-1,28,,"die(""No such remote or remote group: %s"",
				    argv[i]);","[""addLog""]","[[], [""die"", ""No"", ""such"", ""remote"", ""or"", ""remote"", ""group"", ""%s"", ""argv[i]""]]",[-16687663433230860712],5795,"105 days, 12:00:00"
https://github.com/git/git/commit/8b3dce565084c89ceb19f7ccf0fe22ffd365f7fd,20 Nov 2009,"Teach --stdin option to ""log"" family

Move the logic to read revs from standard input that rev-list knows about
from it to revision machinery, so that all the users of setup_revisions()
can feed the list of revs from the standard input when ""--stdin"" is used
on the command line.

Allow some users of the revision machinery that want different semantics
from the ""--stdin"" option to disable it by setting an option in the
rev_info structure.

This also cleans up the kludge made to bundle.c via cut and paste.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_5490.cpp,,,data/crawl/git/old_hunk_5490.cpp,data/crawl/git/new_hunk_5490.cpp,6,-1,"die(""--stdin given twice?"");",,"[""removeLog""]","[[""die"", ""stdin"", ""given"", ""twice""], []]",[-2835650388454318567],5794,0:00:00
https://github.com/git/git/commit/6957eb9a39cc765862e125edeef0dd70f359cff1,15 Sep 2009,"diff.c: shuffling code around

Move function, type, and structure definitions for fill_mmfile(),
count_trailing_blank(), check_blank_at_eof(), emit_line(),
new_blank_line_at_eof(), emit_add_line(), sane_truncate_fn, and
emit_callback up in the file, so that they can be refactored into helper
functions and reused by codepath for emitting rewrite patches.

This only moves the lines around to make the next two patches easier to
read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5677.cpp,,,data/crawl/git/old_hunk_5677.cpp,data/crawl/git/new_hunk_5677.cpp,-1,73,,"fputs(set, file);","[""addLog""]","[[], [""fputs"", ""set"", ""file""]]",[-4379328660601636790],5793,"37 days, 0:00:00"
https://github.com/git/git/commit/952dfc6944b29582482ff50a85c04879406c06ba,05 Dec 2009,"reset: improve worktree safety valves

The existing code checked to make sure we were not in a bare
repository when doing a hard reset. However, we should take
this one step further, and make sure we are in a worktree.
Otherwise, we can end up munging files inside of '.git'.

Furthermore, we should do the same check for --merge resets,
which have the same properties. Actually, a merge reset of
HEAD^ would already complain, since further down in the code
we want a worktree. However, it is nicer to check up-front;
then we are sure we cover all cases (""git reset --merge""
would run, even though it wasn't doing anything) and we can
give a more specific message.

Add tests to t7103 to cover these cases and some missing ones.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_5474.cpp,,,data/crawl/git/old_hunk_5474.cpp,data/crawl/git/new_hunk_5474.cpp,4,5,"die(""hard reset makes no sense in a bare repository"");","die(""%s reset requires a work tree"",
		    reset_type_names[reset_type]);","[""updateContent"", ""addVariable""]","[[""hard"", ""makes"", ""no"", ""sense"", ""in"", ""bare"", ""repository""], [""%s"", ""requires"", ""work"", ""tree"", ""reset_type_names[reset_type]""]]",[-18597781307426067744],5792,0:00:00
https://github.com/git/git/commit/e5f591720caea0c6645fa9852903a1c43d7c3672,04 Dec 2009,"rerere: don't segfault on failure to open rr-cache

The rr-cache directory should always exist if we are doing
garbage collection (earlier code paths check this
explicitly), but we may not necessarily succeed in opening
it (for example, due to permissions problems). In that case,
we should print an error message rather than simply
segfaulting.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_5475.cpp,,,data/crawl/git/old_hunk_5475.cpp,data/crawl/git/new_hunk_5475.cpp,-1,4,,"die_errno(""unable to open rr-cache directory"");","[""addLog""]","[[], [""die_errno"", ""unable"", ""to"", ""open"", ""rr"", ""cache"", ""directory""]]",[-7586583087285844233],5791,12:00:00
https://github.com/git/git/commit/1456b043fc0f0a395c35d6b5e55b0dad1b6e7acc,10 Dec 2009,"Remove post-upload-hook

This hook runs after ""git fetch"" in the repository the objects are
fetched from as the user who fetched, and has security implications.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_5468.cpp,,,data/crawl/git/old_hunk_5468.cpp,data/crawl/git/new_hunk_5468.cpp,12,-1,"warning(""post-upload-hook failed"");",,"[""removeLog""]","[[""warning"", ""post"", ""upload"", ""hook"", ""failed""], []]",[-2761753975233189404],5790,12:00:00
https://github.com/git/git/commit/5eef828bc03649ba11acc05c983d72823c27f0bb,01 Feb 2010,"fast-import: Stream very large blobs directly to pack

If a blob is larger than the configured big-file-threshold, instead
of reading it into a single buffer obtained from malloc, stream it
onto the end of the current pack file.  Streaming the larger objects
into the pack avoids the 4+ GiB memory footprint that occurs when
fast-import is processing 2+ GiB blobs.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/hunk_5436.cpp,,,data/crawl/git/old_hunk_5436.cpp,data/crawl/git/new_hunk_5436.cpp,-1,43,,"die(""impossibly large object header"");","[""addLog""]","[[], [""die"", ""impossibly"", ""large"", ""object"", ""header""]]",[-28692390870752117574],5789,0:00:00
https://github.com/git/git/commit/8736a8489080509516f5f4cc1cc74de33150f397,17 Nov 2007,"send-pack: track errors for each ref

Instead of keeping the 'ret' variable, we instead have a
status flag for each ref that tracks what happened to it.
We then print the ref status after all of the refs have
been examined.

This paves the way for three improvements:
  - updating tracking refs only for non-error refs
  - incorporating remote rejection into the printed status
  - printing errors in a different order than we processed
    (e.g., consolidating non-ff errors near the end with
    a special message)

Signed-off-by: Jeff King <peff@peff.net>
Acked-by: Alex Riesen <raa.lkml@gmail.com>
Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",251,data/crawl/git/hunk_7778.cpp,,,data/crawl/git/old_hunk_7778.cpp,data/crawl/git/new_hunk_7778.cpp,4,-1,"fprintf(stderr, ""To %s\n"", dest);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""To"", ""%s\\n"", ""dest""], []]",[16584513600167938763],5788,"411 days, 12:00:00"
https://github.com/git/git/commit/f1863d0d16b9a5288671e17b7fa2eba8244ead2f,17 Feb 2010,"refactor duplicated code in builtin-send-pack.c and transport.c

The following functions are (almost) identical:

  verify_remote_names
  update_tracking_ref
  refs_pushed
  print_push_status

Move common versions of these functions to transport.c and rename
them, as suggested by Jeff King and Junio C Hamano.

These functions have been removed entirely from builtin-send-pack.c,
since they are only used internally by print_push_status():

  print_ref_status
  status_abbrev
  print_ok_ref_status
  print_one_push_status

Also, move #define SUMMARY_WIDTH to transport.h and rename it
TRANSPORT_SUMMARY_WIDTH as it is used in builtin-fetch.c and
transport.c

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Acked-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",244,data/crawl/git/hunk_5425.cpp,,,data/crawl/git/old_hunk_5425.cpp,data/crawl/git/new_hunk_5425.cpp,3,3,"fprintf(stderr, "" %c %-*s "", flag, SUMMARY_WIDTH, summary);","fprintf(stderr, "" %c %-*s "", flag, TRANSPORT_SUMMARY_WIDTH, summary);","[""updateVariable""]","[[""SUMMARY_WIDTH""], [""TRANSPORT_SUMMARY_WIDTH""]]",[8148991935633946692],5787,0:00:00
https://github.com/git/git/commit/1b22b6c897efa8aec6eeb51f72a73d507d5e336f,17 Feb 2010,"refactor duplicated encode_header in pack-objects and fast-import

The following function is duplicated:

  encode_header

Move this function to sha1_file.c and rename it 'encode_in_pack_object_header',
as suggested by Junio C Hamano

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_5415.cpp,,,data/crawl/git/old_hunk_5415.cpp,data/crawl/git/new_hunk_5415.cpp,-1,9,,"die(""bad type %d"", type);","[""addLog""]","[[], [""die"", ""bad"", ""type"", ""%d"", ""type""]]",[3034749881290590620],5786,"3 days, 0:00:00"
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,153,,"fprintf(stderr, ""(reading log message from standard input)\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""reading"", ""log"", ""message"", ""from"", ""standard"", ""input"", ""\\n""]]",[-30781081782124465752],5785,"412 days, 0:00:00"
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5364.cpp,,,data/crawl/git/old_hunk_5364.cpp,data/crawl/git/new_hunk_5364.cpp,27,26,"opt->output(opt, sign_str, 1);","output_sep(opt, sign);","[""addLog"", ""updateVariable"", ""removeContent"", ""removeLog""]","[[""output"", ""opt"", ""sign_str"", ""1""], [""output_sep"", ""sign""]]",[1052060502586906147],5784,0:00:00
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5363.cpp,,,data/crawl/git/old_hunk_5363.cpp,data/crawl/git/new_hunk_5363.cpp,-1,11,,"opt->output(opt, data, size);","[""addLog""]","[[], [""opt"", ""output"", ""opt"", ""data"", ""size""]]",[-10546821324915544076],5783,0:00:00
https://github.com/git/git/commit/211c89682eeef310f39022b91e88d07cd5784953,01 Mar 2008,"Make git-remote a builtin

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/hunk_7362.cpp,,,data/crawl/git/old_hunk_7362.cpp,data/crawl/git/new_hunk_7362.cpp,-1,541,,"error(""Unknown subcommand: %s"", argv[0]);","[""addLog""]","[[], [""error"", ""Unknown"", ""subcommand"", ""%s"", ""argv[0]""]]",[13030013239821874736],5782,"371 days, 0:00:00"
https://github.com/git/git/commit/da1fbed3fff6ed2d64399ff26d8a9ab3bcf00540,30 Mar 2010,"diff: fix textconv error zombies

To make the code simpler, run_textconv lumps all of its
error checking into one conditional. However, the
short-circuit means that an error in reading will prevent us
from calling finish_command, leaving a zombie child.
Clean up properly after errors.

Based-on-work-by: Jeff King <peff@peff.net>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_5321.cpp,,,data/crawl/git/old_hunk_5321.cpp,data/crawl/git/new_hunk_5321.cpp,9,9,"error(""error running textconv command '%s'"", pgm);","error(""error reading from textconv command '%s'"", pgm);","[""updateContent""]","[[""running""], [""reading"", ""from""]]",[1923600058499692557],5781,12:00:00
https://github.com/git/git/commit/bc84a7fbac4ce85bb93eeb57b5cb39548d286ad0,01 Apr 2010,"revert: use strbuf to refactor the code that writes the merge message

The code in this commit was written by Stephan Beyer for the sequencer
GSoC project:

    git://repo.or.cz/git/sbeyer.git

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_5315.cpp,,,data/crawl/git/old_hunk_5315.cpp,data/crawl/git/new_hunk_5315.cpp,23,21,"die (""Error wrapping up %s"", defmsg);","write_message(&msgbuf, defmsg);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""Error"", ""wrapping"", ""up"", ""%s""], [""write_message"", ""&msgbuf""]]",[-10961094466375087096],5780,0:00:00
https://github.com/git/git/commit/6eb1b437933e075bd84c5cdcf5de95ed4db4820f,03 Sep 2008,"cherry-pick/revert: make direct internal call to merge_tree()

Refactored merge-recursive interface may still not be ideal but it already
allows us to make a direct call to merge_tree().

One regression is that the status message is lost as there is no way to
flush them from outside the refactored library code yet.

[jc: initial version by Miklos, with moderate amount of fixup by me]

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_6755.cpp,,,data/crawl/git/old_hunk_6755.cpp,data/crawl/git/new_hunk_6755.cpp,-1,19,,"die(""%s: Unable to write new index file"", me);","[""addLog""]","[[], [""die"", ""%s"", ""Unable"", ""to"", ""write"", ""new"", ""index"", ""file"", ""me""]]",[9662079330201775019],5779,"287 days, 12:00:00"
https://github.com/git/git/commit/18668f5319b079cce29e19817bc352b1413e0908,31 Aug 2008,"builtin-merge: avoid run_command_v_opt() for recursive and subtree

The try_merge_strategy() function always ran the strategy in a separate
process, though this is not always necessary. The recursive and subtree
strategy can be called without a fork(). This patch adds a check, and
calls recursive in the same process without wasting resources.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/hunk_6808.cpp,,,data/crawl/git/old_hunk_6808.cpp,data/crawl/git/new_hunk_6808.cpp,5,-1,"die(""failed to read the cache"");",,"[""removeLog""]","[[""die"", ""failed"", ""to"", ""read"", ""the"", ""cache""], []]",[26720264961997095624],5778,"289 days, 0:00:00"
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,577,,"fprintf(stderr, commit_utf8_warn);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""commit_utf8_warn""]]",[-7234034791244786504],5777,"430 days, 12:00:00"
https://github.com/git/git/commit/6bb6b0341af26739ba305b20c62a433f15029049,10 Sep 2008,"builtin-commit: use commit_tree()

First, it adds less code than removes, second this allows us to use
recuce_heads() for parents, so that the parents of a merge will be
always the same with or without a conflict.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_6740.cpp,,,data/crawl/git/old_hunk_6740.cpp,data/crawl/git/new_hunk_6740.cpp,10,-1,"fprintf(stderr, commit_utf8_warn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""commit_utf8_warn""], []]",[7234034791244786504],5776,"284 days, 12:00:00"
https://github.com/git/git/commit/882749a04f828fccd795deec4d0bf10ba09ae549,14 Apr 2010,"diff: add --word-diff option that generalizes --color-words

This teaches the --color-words engine a more general interface that
supports two new modes:

* --word-diff=plain, inspired by the 'wdiff' utility (most similar to
  'wdiff -n <old> <new>'): uses delimiters [-removed-] and {+added+}

* --word-diff=porcelain, which generates an ad-hoc machine readable
  format:
  - each diff unit is prefixed by [-+ ] and terminated by newline as
    in unified diff
  - newlines in the input are output as a line consisting only of a
    tilde '~'

Both of these formats still support color if it is enabled, using it
to highlight the differences.  --color-words becomes a synonym for
--word-diff=color, which is the color-only format.  Also adds some
compatibility/convenience options.

Thanks to Junio C Hamano and Miles Bader for good ideas.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_5274.cpp,,,data/crawl/git/old_hunk_5274.cpp,data/crawl/git/new_hunk_5274.cpp,-1,5,,"fputs(""~\n"", ecbdata->file);","[""addLog""]","[[], [""fputs"", ""\\n"", ""ecbdata"", ""file""]]",[4718874482615454224],5775,0:00:00
https://github.com/git/git/commit/0974c117ff4e17e8b6300519cae0fbc67d34adaa,17 Apr 2010,"diff: use large integers for diffstat calculations

The diffstat ""added"" and ""changed"" fields generally store
line counts; however, for binary files, they store file
sizes. Since we store and print these values as ints, a
diffstat on a file larger than 2G can show a negative size.
Instead, let's use uintmax_t, which should be at least 64
bits on modern platforms.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_5267.cpp,,,data/crawl/git/old_hunk_5267.cpp,data/crawl/git/new_hunk_5267.cpp,5,6,"fprintf(options->file, ""%s%d%s"", add_c, added, reset);","fprintf(options->file, ""%s%""PRIuMAX""%s"",
				add_c, added, reset);","[""addContent"", ""updateContent"", ""addVariable""]","[[""%s%d%s""], [""%s%"", ""PRIuMAX"", ""%s""]]",[-7406981847894416400],5774,0:00:00
https://github.com/git/git/commit/0da8b2e7c80a6dd9743e5233cdc5acd836c9a8d3,17 Apr 2010,"http.c: Don't store destination name in request structures

The destination name within the object store is easily computed
on demand, reusing a static buffer held by sha1_file.c.  We don't
need to copy the entire path into the request structure for safe
keeping, when it can be easily reformatted after the download has
been completed.

This reduces the size of the per-request structure, and removes
yet another PATH_MAX based limit.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_5266.cpp,,,data/crawl/git/old_hunk_5266.cpp,data/crawl/git/new_hunk_5266.cpp,3,3,"error(""Couldn't truncate temporary file %s for %s: %s"",
					  freq->tmpfile, freq->filename, strerror(errno));","error(""Couldn't truncate temporary file %s: %s"",
					  freq->tmpfile, strerror(errno));","[""removeVariable"", ""updateContent""]","[[""for"", ""%s"", ""freq"", ""filename""], []]",[11351630581255165811],5773,0:00:00
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5226.cpp,,,data/crawl/git/old_hunk_5226.cpp,data/crawl/git/new_hunk_5226.cpp,-1,7,,"fprintf(options->file, ""%s"", msg->buf);","[""addLog""]","[[], [""fprintf"", ""options"", ""file"", ""%s"", ""msg"", ""buf""]]",[2359173507950714137],5772,0:00:00
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5225.cpp,,,data/crawl/git/old_hunk_5225.cpp,data/crawl/git/new_hunk_5225.cpp,-1,9,,"fprintf(options->file, "" %d files changed, %d insertions(+), %d deletions(-)\n"",
	       total_files, adds, dels);","[""addLog""]","[[], [""fprintf"", ""options"", ""file"", ""%d"", ""files"", ""changed"", ""%d"", ""insertions"", ""%d"", ""deletions"", ""\\n"", ""total_files"", ""adds"", ""dels""]]",[-20656035348542763272],5771,0:00:00
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5223.cpp,,,data/crawl/git/old_hunk_5223.cpp,data/crawl/git/new_hunk_5223.cpp,-1,3,,"fprintf(options->file, ""%s"", line_prefix);","[""addLog""]","[[], [""fprintf"", ""options"", ""file"", ""%s"", ""line_prefix""]]",[-4352537275951227185],5770,0:00:00
https://github.com/git/git/commit/c62f6ec341b1a768be7c9adf84d07c5b3b113a81,07 Mar 2010,"revert: add --ff option to allow fast forward when cherry-picking

As ""git merge"" fast forwards if possible, it seems sensible to
have such a feature for ""git cherry-pick"" too, especially as it
could be used in git-rebase--interactive.sh.

Maybe this option could be made the default in the long run, with
another --no-ff option to disable this default behavior, but that
could make some scripts backward incompatible and/or that would
require testing if some GIT_AUTHOR_* environment variables are
set. So we don't do that for now.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_5377.cpp,,,data/crawl/git/old_hunk_5377.cpp,data/crawl/git/new_hunk_5377.cpp,-1,11,,"die(""cherry-pick --ff cannot be used with --edit"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""edit""]]",[-1508568286979132422],5769,"43 days, 12:00:00"
https://github.com/git/git/commit/c62f6ec341b1a768be7c9adf84d07c5b3b113a81,07 Mar 2010,"revert: add --ff option to allow fast forward when cherry-picking

As ""git merge"" fast forwards if possible, it seems sensible to
have such a feature for ""git cherry-pick"" too, especially as it
could be used in git-rebase--interactive.sh.

Maybe this option could be made the default in the long run, with
another --no-ff option to disable this default behavior, but that
could make some scripts backward incompatible and/or that would
require testing if some GIT_AUTHOR_* environment variables are
set. So we don't do that for now.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_5377.cpp,,,data/crawl/git/old_hunk_5377.cpp,data/crawl/git/new_hunk_5377.cpp,-1,9,,"die(""cherry-pick --ff cannot be used with -x"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""x""]]",[3155668243154972171],5768,"43 days, 12:00:00"
https://github.com/git/git/commit/c62f6ec341b1a768be7c9adf84d07c5b3b113a81,07 Mar 2010,"revert: add --ff option to allow fast forward when cherry-picking

As ""git merge"" fast forwards if possible, it seems sensible to
have such a feature for ""git cherry-pick"" too, especially as it
could be used in git-rebase--interactive.sh.

Maybe this option could be made the default in the long run, with
another --no-ff option to disable this default behavior, but that
could make some scripts backward incompatible and/or that would
require testing if some GIT_AUTHOR_* environment variables are
set. So we don't do that for now.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_5377.cpp,,,data/crawl/git/old_hunk_5377.cpp,data/crawl/git/new_hunk_5377.cpp,-1,7,,"die(""cherry-pick --ff cannot be used with --no-commit"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""no"", ""commit""]]",[7498953861761640498],5767,"43 days, 12:00:00"
https://github.com/git/git/commit/c62f6ec341b1a768be7c9adf84d07c5b3b113a81,07 Mar 2010,"revert: add --ff option to allow fast forward when cherry-picking

As ""git merge"" fast forwards if possible, it seems sensible to
have such a feature for ""git cherry-pick"" too, especially as it
could be used in git-rebase--interactive.sh.

Maybe this option could be made the default in the long run, with
another --no-ff option to disable this default behavior, but that
could make some scripts backward incompatible and/or that would
require testing if some GIT_AUTHOR_* environment variables are
set. So we don't do that for now.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_5377.cpp,,,data/crawl/git/old_hunk_5377.cpp,data/crawl/git/new_hunk_5377.cpp,-1,5,,"die(""cherry-pick --ff cannot be used with --signoff"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""signoff""]]",[1324848834048755095],5766,"43 days, 12:00:00"
https://github.com/git/git/commit/942e7747678ecf5f118ea5b2d0c763166de21f3a,07 Jun 2010,"Add ""core.eol"" config variable

Introduce a new configuration variable, ""core.eol"", that allows the user
to set which line endings to use for end-of-line-normalized files in the
working directory.  It defaults to ""native"", which means CRLF on Windows
and LF everywhere else.

Note that ""core.autocrlf"" overrides core.eol.  This means that

[core]
	autocrlf = true

puts CRLFs in the working directory even if core.eol is set to ""lf"".

Signed-off-by: Eyvind Bernhardsen <eyvind.bernhardsen@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",239,data/crawl/git/hunk_5187.cpp,,,data/crawl/git/old_hunk_5187.cpp,data/crawl/git/new_hunk_5187.cpp,-1,13,,"error(""core.autocrlf=input conflicts with core.eol=crlf"");","[""addLog""]","[[], [""error"", ""core"", ""autocrlf"", ""input"", ""conflicts"", ""with"", ""core"", ""eol"", ""crlf""]]",[2115038850920888982],5765,0:00:00
https://github.com/git/git/commit/4bf53833dbca666f61b5177977e96d453527db20,21 Aug 2007,"Avoid using va_copy in fast-import: it seems to be unportable.

[sp: minor change to use fputs, thus reducing the patch size]

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/hunk_8139.cpp,,,data/crawl/git/old_hunk_8139.cpp,data/crawl/git/new_hunk_8139.cpp,-1,7,,"fputs(message, stderr);","[""addLog""]","[[], [""fputs"", ""message"", ""stderr""]]",[-19068772633607565375],5764,"512 days, 12:00:00"
https://github.com/git/git/commit/8acb3297f34fd04bb8f3a35ace3667b59236286e,19 Aug 2007,"Generate crash reports on die in fast-import

As fast-import is quite strict about its input and die()'s anytime
something goes wrong it can be difficult for a frontend developer
to troubleshoot why fast-import rejected their input, or to even
determine what input command it rejected.

This change introduces a custom handler for Git's die() routine.
When we receive a die() for any reason (fast-import or a lower level
core Git routine we called) the error is first dumped onto stderr
and then a more extensive crash report file is prepared in GIT_DIR.
Finally we exit the process with status 128, just like the stock
builtin die handler.

An internal flag is set to prevent any further die()'s that may be
invoked during the crash report generator from causing us to enter
into an infinite loop.  We shouldn't die() from our crash report
handler, but just in case someone makes a future code change we are
prepared to gaurd against small mistakes turning into huge problems
for the end-user.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",93,data/crawl/git/hunk_8143.cpp,,,data/crawl/git/old_hunk_8143.cpp,data/crawl/git/new_hunk_8143.cpp,-1,84,,"fputs(""fatal: "", stderr);","[""addLog""]","[[], [""fputs"", ""fatal"", ""stderr""]]",[-17169312593591255838],5763,"513 days, 12:00:00"
https://github.com/git/git/commit/ae8c79fd8fe47bfebf56ae83461cbedb934cff92,01 Apr 2010,"revert: refactor merge recursive code into its own function

The code that is used to do a recursive merge is extracted from
the revert_or_cherry_pick() function and put into a new
do_recursive_merge() function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/hunk_5312.cpp,,,data/crawl/git/old_hunk_5312.cpp,data/crawl/git/new_hunk_5312.cpp,43,-1,"fprintf(stderr, ""Finished one %s.\n"", me);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Finished"", ""one"", ""%s"", ""\\n"", ""me""], []]",[3198577654070895455],5762,"53 days, 0:00:00"
https://github.com/git/git/commit/3c9d0414ed2db0167e6c828b547be8fc9f88fccc,20 Jul 2010,"Check size of path buffer before writing into it

This prevents a buffer overrun that could otherwise be triggered by
creating a file called '.git' with contents

  gitdir: (something really long)

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_5117.cpp,,,data/crawl/git/old_hunk_5117.cpp,data/crawl/git/new_hunk_5117.cpp,-1,4,,"die(""Too long path: %.*s"", 60, suspect);","[""addLog""]","[[], [""die"", ""Too"", ""long"", ""path"", ""%"", ""*s"", ""60"", ""suspect""]]",[14427318436797820060],5761,"2 days, 12:00:00"
https://github.com/git/git/commit/b44ebb19e3234c5dffe9869ceac5408bb44c2e20,09 Apr 2008,"Add platform-independent .git ""symlink""

This patch allows .git to be a regular textfile containing the path of
the real git directory (prefixed with ""gitdir: ""), which can be useful on
platforms lacking support for real symlinks.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7270.cpp,,,data/crawl/git/old_hunk_7270.cpp,data/crawl/git/new_hunk_7270.cpp,-1,17,,"die(""Repository setup failed"");","[""addLog""]","[[], [""die"", ""Repository"", ""setup"", ""failed""]]",[-9323700510484511542],5760,"419 days, 0:00:00"
https://github.com/git/git/commit/d3b9dd136ea5735c88a831b5a0f6f2e5dd623701,27 Jul 2010,"Clarify help message when no remote is specified in fetch/pull.

The message is especially confusing when ""git fetch"" is ran from ""git
pull"", for users not aware of ""git fetch"". The new message makes it clear
that ""fetch"" means ""fetch new revisions"", and gives hint on the solution.

We don't add a advice.* configuration option since this message doesn't
appear in normal use, and shouldn't disturb advanced users.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_5102.cpp,,,data/crawl/git/old_hunk_5102.cpp,data/crawl/git/new_hunk_5102.cpp,3,3,"die(""Where do you want to fetch from today?"");","die(""No remote repository specified.  Please, specify either a URL or a\n""
		    ""remote name from which new revisions should be fetched."");","[""addContent"", ""updateContent""]","[[""Where"", ""do"", ""you"", ""want"", ""to"", ""fetch"", ""today""], [""No"", ""remote"", ""repository"", ""specified"", ""Please"", ""specify"", ""either"", ""a"", ""URL"", ""or"", ""a\\n"", ""remote"", ""name"", ""which"", ""new"", ""revisions"", ""should"", ""be"", ""fetched""]]",[14035317399176361742],5759,0:00:00
https://github.com/git/git/commit/0989fe9623dc8d98033f6acdcc0c84ec28571b19,01 Jul 2008,"Move split_cmdline() to alias.c

split_cmdline() is currently used for aliases only, but later it can be
useful for other builtins as well. Move it to alias.c for now,
indicating that originally it's for aliases, but we'll have it in libgit
this way.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_7040.cpp,,,data/crawl/git/old_hunk_7040.cpp,data/crawl/git/new_hunk_7040.cpp,50,-1,"error(""unclosed quote"");",,"[""removeLog""]","[[""error"", ""unclosed"", ""quote""], []]",[-2213359264454929381],5758,"385 days, 12:00:00"
https://github.com/git/git/commit/0989fe9623dc8d98033f6acdcc0c84ec28571b19,01 Jul 2008,"Move split_cmdline() to alias.c

split_cmdline() is currently used for aliases only, but later it can be
useful for other builtins as well. Move it to alias.c for now,
indicating that originally it's for aliases, but we'll have it in libgit
this way.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_7040.cpp,,,data/crawl/git/old_hunk_7040.cpp,data/crawl/git/new_hunk_7040.cpp,37,-1,"error(""cmdline ends with \\"");",,"[""removeLog""]","[[""error"", ""cmdline"", ""ends"", ""with"", ""\\\\""], []]",[-7757462171829417328],5757,"385 days, 12:00:00"
https://github.com/git/git/commit/e6c111b4c092c0dd24c541b9721f5bc04641dcb0,11 Aug 2010,"unpack_trees: group error messages by type

When an error is encountered, it calls add_rejected_file() which either
- directly displays the error message and stops if in plumbing mode
  (i.e. if show_all_errors is not initialized at 1)
- or stores it so that it will be displayed at the end with display_error_msgs(),

Storing the files by error type permits to have a list of files for
which there is the same error instead of having a serie of almost
identical errors.

As each bind_overlap error combines a file and an old file, a list cannot be
done, therefore, theses errors are not stored but directly displayed.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/hunk_5074.cpp,,,data/crawl/git/old_hunk_5074.cpp,data/crawl/git/new_hunk_5074.cpp,3,-1,"error(ERRORMSG(o, error_type), ce->name);",,"[""removeLog""]","[[""error"", ""ERRORMSG"", ""o"", ""error_type"", ""ce"", ""name""], []]",[-20793310391473450860],5756,0:00:00
https://github.com/git/git/commit/ad9ac6db5d58de08d0497b9184e86926377c20dd,11 Aug 2010,"split_cmdline: Allow caller to access error string

This allows the caller to add its own error message to that returned
by split_cmdline.  Thus error output following a failed split_cmdline
can be of the form

fatal: Bad alias.test string: cmdline ends with \

rather than

error: cmdline ends with \
fatal: Bad alias.test string

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_5084.cpp,,,data/crawl/git/old_hunk_5084.cpp,data/crawl/git/new_hunk_5084.cpp,3,3,"die(""Bad alias.%s string"", alias_command);","die(""Bad alias.%s string: %s"", alias_command,
			    split_cmdline_strerror(count));","[""updateContent"", ""addVariable""]","[[], [""%s"", ""split_cmdline_strerror"", ""count""]]",[16627420105816901835],5755,"8 days, 0:00:00"
https://github.com/git/git/commit/1b8cdce94f4fff2408f8ed26fe4fc2f187a46794,19 Oct 2010,"blame: Add option to show author email instead of name

Add a new option -e (or --show-email) to git-blame that will display
the author's email instead of name on each line. This option works
for both git-blame and git-annotate.

Signed-off-by: Kevin Ballard <kevin@sb.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_5005.cpp,,,data/crawl/git/old_hunk_5005.cpp,data/crawl/git/new_hunk_5005.cpp,4,10,"printf("" (%s%*s %10s"",
				       ci.author, pad, """",
				       format_time(ci.author_time,
						   ci.author_tz,
						   show_raw_time));","printf("" (%s%*s %10s"",
				       name, pad, """",
				       format_time(ci.author_time,
						   ci.author_tz,
						   show_raw_time));","[""removeVariable"", ""addVariable""]","[[""author"", ""ci""], [""name""]]",[-8149575215862489156],5754,0:00:00
https://github.com/git/git/commit/c50c4316e1eed362bee387e4cbfbe1138957f75b,22 Oct 2010,"diff: don't presume empty file when corresponding object is missing

The low-level diff code will happily produce totally bogus diff output
with a broken repository via format-patch and friends by treating missing
objects as empty files.  Let's prevent that from happening any longer.

Reported-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_5001.cpp,,,data/crawl/git/old_hunk_5001.cpp,data/crawl/git/new_hunk_5001.cpp,-1,10,,"die(""unable to read %s"", sha1_to_hex(s->sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""%s"", ""sha1_to_hex"", ""s"", ""sha1""]]",[-5787983427422152136],5753,0:00:00
https://github.com/git/git/commit/d71b8ba7c959e414d36974af890e3e2cbd2acbb9,04 Nov 2010,"commit: --fixup option for use with rebase --autosquash

This option makes it convenient to construct commit messages for use
with 'rebase --autosquash'.  The resulting commit message will be
""fixup! ..."" where ""..."" is the subject line of the specified commit
message.

Example usage:
  $ git commit --fixup HEAD~2

Signed-off-by: Pat Notz <patnotz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_4993.cpp,,,data/crawl/git/old_hunk_4993.cpp,data/crawl/git/new_hunk_4993.cpp,8,10,"die(""Option -m cannot be combined with -c/-C/-F."");","die(""Option -m cannot be combined with -c/-C/-F/--fixup."");","[""updateContent""]","[[""F""], [""F/"", ""fixup""]]",[3065894137027465175],5752,0:00:00
https://github.com/git/git/commit/fdc12114635581b6901940ddb467a78716bc12ca,04 Nov 2010,"mingw: use poll-emulation from gnulib

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/hunk_4983.cpp,,,data/crawl/git/old_hunk_4983.cpp,data/crawl/git/new_hunk_4983.cpp,35,-1,"error(""POLLIN not set"");",,"[""removeLog""]","[[""error"", ""POLLIN"", ""not"", ""set""], []]",[-18143410464162070918],5751,0:00:00
https://github.com/git/git/commit/7af46595b2667214e98da55ed2f82ce1ac2b404a,02 Jun 2010,"revert: refactor code into a do_pick_commit() function

This is needed because we are going to make it possible
to cherry-pick many commits instead of just one in the following
commits. And we will be able to do that by just calling
do_pick_commit() once for each commit to cherry-pick.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_5209.cpp,,,data/crawl/git/old_hunk_5209.cpp,data/crawl/git/new_hunk_5209.cpp,20,-1,"die(""git %s: failed to read the index"", me);",,"[""removeLog""]","[[""die"", ""git"", ""%s"", ""failed"", ""to"", ""read"", ""the"", ""index"", ""me""], []]",[31641561397605786481],5750,"80 days, 12:00:00"
https://github.com/git/git/commit/39c68542fc8d8477f2080c99efedb9dce975abc6,11 Jan 2009,"Wrap inflate and other zlib routines for better error reporting

R. Tyler Ballance reported a mysterious transient repository corruption;
after much digging, it turns out that we were not catching and reporting
memory allocation errors from some calls we make to zlib.

This one _just_ wraps things; it doesn't do the ""retry on low memory
error"" part, at least not yet. It is an independent issue from the
reporting.  Some of the errors are expected and passed back to the caller,
but we die when zlib reports it failed to allocate memory for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_6538.cpp,,,data/crawl/git/old_hunk_6538.cpp,data/crawl/git/new_hunk_6538.cpp,-1,60,,"error(""inflate: %s (%s)"", err, strm->msg ? strm->msg : ""no message"");","[""addLog""]","[[], [""error"", ""inflate"", ""%s"", ""%s"", ""err"", ""strm"", ""msg"", ""strm"", ""msg"", ""no"", ""message""]]",[16395568639775864816],5749,"334 days, 0:00:00"
https://github.com/git/git/commit/39c68542fc8d8477f2080c99efedb9dce975abc6,11 Jan 2009,"Wrap inflate and other zlib routines for better error reporting

R. Tyler Ballance reported a mysterious transient repository corruption;
after much digging, it turns out that we were not catching and reporting
memory allocation errors from some calls we make to zlib.

This one _just_ wraps things; it doesn't do the ""retry on low memory
error"" part, at least not yet. It is an independent issue from the
reporting.  Some of the errors are expected and passed back to the caller,
but we die when zlib reports it failed to allocate memory for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_6538.cpp,,,data/crawl/git/old_hunk_6538.cpp,data/crawl/git/new_hunk_6538.cpp,-1,42,,"die(""inflate: out of memory"");","[""addLog""]","[[], [""die"", ""inflate"", ""out"", ""of"", ""memory""]]",[18050271948401655394],5748,"334 days, 0:00:00"
https://github.com/git/git/commit/39c68542fc8d8477f2080c99efedb9dce975abc6,11 Jan 2009,"Wrap inflate and other zlib routines for better error reporting

R. Tyler Ballance reported a mysterious transient repository corruption;
after much digging, it turns out that we were not catching and reporting
memory allocation errors from some calls we make to zlib.

This one _just_ wraps things; it doesn't do the ""retry on low memory
error"" part, at least not yet. It is an independent issue from the
reporting.  Some of the errors are expected and passed back to the caller,
but we die when zlib reports it failed to allocate memory for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_6538.cpp,,,data/crawl/git/old_hunk_6538.cpp,data/crawl/git/new_hunk_6538.cpp,-1,31,,"error(""inflateEnd: %s"", strm->msg ? strm->msg : ""failed"");","[""addLog""]","[[], [""error"", ""inflateEnd"", ""%s"", ""strm"", ""msg"", ""strm"", ""msg"", ""failed""]]",[10022894695493755336],5747,"334 days, 0:00:00"
https://github.com/git/git/commit/39c68542fc8d8477f2080c99efedb9dce975abc6,11 Jan 2009,"Wrap inflate and other zlib routines for better error reporting

R. Tyler Ballance reported a mysterious transient repository corruption;
after much digging, it turns out that we were not catching and reporting
memory allocation errors from some calls we make to zlib.

This one _just_ wraps things; it doesn't do the ""retry on low memory
error"" part, at least not yet. It is an independent issue from the
reporting.  Some of the errors are expected and passed back to the caller,
but we die when zlib reports it failed to allocate memory for now.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_6538.cpp,,,data/crawl/git/old_hunk_6538.cpp,data/crawl/git/new_hunk_6538.cpp,-1,25,,"die(""inflateInit: %s (%s)"", err, strm->msg ? strm->msg : ""no message"");","[""addLog""]","[[], [""die"", ""inflateInit"", ""%s"", ""%s"", ""err"", ""strm"", ""msg"", ""strm"", ""msg"", ""no"", ""message""]]",[-2829093463069809656],5746,"334 days, 0:00:00"
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,197,,"die(""read-tree failed"");","[""addLog""]","[[], [""die"", ""read"", ""tree"", ""failed""]]",[-14423022079475839410],5745,"430 days, 0:00:00"
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,694,,"die(""Failed to execute internal merge"");","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""execute"", ""internal"", ""merge""]]",[-17350295029259270831],5744,"404 days, 0:00:00"
https://github.com/git/git/commit/c8c562a238071843c64ea0f3a2c85481606da379,02 Jun 2009,"refuse to merge during a merge

The following is an easy mistake to make for users coming from version
control systems with an ""update and commit""-style workflow.

        1. git pull
        2. resolve conflicts
        3. git pull

Step 3 overrides MERGE_HEAD, starting a new merge with dirty index.
IOW, probably not what the user intended. Instead, refuse to merge
again if a merge is in progress.

Reported-by: Dave Olszewski <cxreg@pobox.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_5999.cpp,,,data/crawl/git/old_hunk_5999.cpp,data/crawl/git/new_hunk_5999.cpp,-1,4,,"die(""You have not concluded your merge. (MERGE_HEAD exists)"");","[""addLog""]","[[], [""die"", ""You"", ""have"", ""not"", ""concluded"", ""your"", ""merge"", ""MERGE_HEAD"", ""exists""]]",[34285302572830010332],5743,"266 days, 12:00:00"
https://github.com/git/git/commit/a672ea6ac5a1b876bc7adfe6534b16fa2a32c94b,21 Oct 2008,"rehabilitate 'git index-pack' inside the object store

Before commit d0b92a3f6e it was possible to run 'git index-pack'
directly in the .git/objects/pack/ directory.  Restore that ability.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_6676.cpp,,,data/crawl/git/old_hunk_6676.cpp,data/crawl/git/new_hunk_6676.cpp,-1,17,,"die(""Unable to get current working directory"");","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""get"", ""current"", ""working"", ""directory""]]",[-12806260983115068574],5742,"384 days, 12:00:00"
https://github.com/git/git/commit/a6c7db1b1945d656cc0dd559d93c7b2129c65d86,19 Oct 2008,"parse-opt: migrate builtin-checkout-index.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/hunk_6679.cpp,,,data/crawl/git/old_hunk_6679.cpp,data/crawl/git/new_hunk_6679.cpp,38,-1,"die(""--stdin must be at the end"");",,"[""removeLog""]","[[""die"", ""stdin"", ""must"", ""be"", ""at"", ""the"", ""end""], []]",[12433435279927221849],5741,"389 days, 12:00:00"
https://github.com/git/git/commit/309be813c9b75fed70f3a03bf803bf47c6670cfc,07 Dec 2010,"update-index: migrate to parse-options API

--refresh and --really-refresh accept flags (like -q) and modify
an error indicator.  It might make sense to make the error
indicator global, but just pass the flags and a pointer to the error
indicator in a struct instead.

--cacheinfo wants 3 arguments.  Use the OPTION_LOWLEVEL_CALLBACK
extension to grab them and PARSE_OPT_NOARG to disallow the ""sticked""
--cacheinfo=foo form.  (The resulting message

	$ git update-index --cacheinfo=foo
	error: option `cacheinfo' takes no value

is unfortunately incorrect.)

--assume-unchanged and --no-assume-unchanged probably should use the
OPT_UYN feature; but use a callback for now so the existing MARK_FLAG
and UNMARK_FLAG values can be used.

--stdin and --index-info are still constrained to be the last argument
(implemented using the OPTION_LOWLEVEL_CALLBACK extension).

--unresolve and --again consume all arguments that come after them
(also using OPTION_LOWLEVEL_CALLBACK).

The order of options matters.  Each path on the command line is
affected only by the options that come before it.  A custom
argument-parsing loop with parse_options_step() brings that about.

In exchange for all the fuss, we get the usual perks: support for
un-sticked options, better usage error messages, more useful -h
output, and argument parsing code that should be easier to tweak
in the future.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",392,data/crawl/git/hunk_4903.cpp,,,data/crawl/git/old_hunk_4903.cpp,data/crawl/git/new_hunk_4903.cpp,-1,78,,"error(""option '%s' must be the last argument"", opt->long_name);","[""addLog""]","[[], [""error"", ""option"", ""%s"", ""must"", ""be"", ""the"", ""last"", ""argument"", ""opt"", ""long_name""]]",[-3973241517724752650],5740,0:00:00
https://github.com/git/git/commit/93a00542eaeb40c31b4de2497f5413a2fc0f36f4,26 Jul 2010,"setup: split off a function to checks working dir for .git file

The repository discovery procedure looks something like this:

	while (same filesystem) {
		check .git in working dir
		check .
		chdir(..)
	}

Add a function for the first step to make the actual code look a bit
closer to that pseudocode.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_5109.cpp,,,data/crawl/git/old_hunk_5109.cpp,data/crawl/git/new_hunk_5109.cpp,6,-1,"die(""Repository setup failed"");",,"[""removeLog""]","[[""die"", ""Repository"", ""setup"", ""failed""], []]",[9323700510484511542],5739,"74 days, 12:00:00"
https://github.com/git/git/commit/5418d96ddca8134b5abeb99430f61c062d91f722,12 Sep 2010,"vcs-svn: Fix some printf format compiler warnings

In particular, on systems that define uint32_t as an unsigned long,
gcc complains as follows:

      CC vcs-svn/fast_export.o
  vcs-svn/fast_export.c: In function `fast_export_modify':
  vcs-svn/fast_export.c:28: warning: unsigned int format, uint32_t arg (arg 2)
  vcs-svn/fast_export.c:28: warning: int format, uint32_t arg (arg 3)
  vcs-svn/fast_export.c: In function `fast_export_commit':
  vcs-svn/fast_export.c:42: warning: int format, uint32_t arg (arg 5)
  vcs-svn/fast_export.c:62: warning: int format, uint32_t arg (arg 2)
  vcs-svn/fast_export.c: In function `fast_export_blob':
  vcs-svn/fast_export.c:72: warning: int format, uint32_t arg (arg 2)
  vcs-svn/fast_export.c:72: warning: int format, uint32_t arg (arg 3)
      CC vcs-svn/svndump.o
  vcs-svn/svndump.c: In function `svndump_read':
  vcs-svn/svndump.c:260: warning: int format, uint32_t arg (arg 3)

In order to suppress the warnings we use the C99 format specifier
macros PRIo32 and PRIu32 from <inttypes.h>.

Signed-off-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Acked-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_5015.cpp,,,data/crawl/git/old_hunk_5015.cpp,data/crawl/git/new_hunk_5015.cpp,3,3,"printf(""progress Imported commit %d.\n\n"", revision);","printf(""progress Imported commit %""PRIu32"".\n\n"", revision);","[""updateContent"", ""addContent"", ""addVariable""]","[[""%d""], [""%"", ""PRIu32""]]",[7232694531336534368],5738,"64 days, 12:00:00"
https://github.com/git/git/commit/859fdabaede6733c98b1ca8df2fabce000522bf9,25 Jul 2008,"git-checkout: improve error messages, detect ambiguities.

The patch is twofold: it moves the option consistency checks just under
the parse_options call so that it doesn't get in the way of the tree
reference vs. pathspecs desambiguation.

The other part rewrites the way to understand arguments so that when
git-checkout fails it does with an understandable message. Compared to the
previous behavior we now have:

  - a better error message when doing:

        git checkout <blob reference> --

    now complains about the reference not pointing to a tree, instead of
    things like:

        error: pathspec <blob reference> did not match any file(s) known to git.
        error: pathspec '--' did not match any file(s) known to git.

  - a better error message when doing:

        git checkout <path> --

    It now complains about <path> not being a reference instead of the
    completely obscure:

        error: pathspec '--' did not match any file(s) known to git.

  - an error when -- wasn't used, and the first argument is ambiguous
    (i.e. can be interpreted as both ref and as path).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6937.cpp,,,data/crawl/git/old_hunk_6937.cpp,data/crawl/git/new_hunk_6937.cpp,-1,43,,"die(""invalid reference: %s"", arg);","[""addLog""]","[[], [""die"", ""invalid"", ""reference"", ""%s"", ""arg""]]",[-2938661177552858222],5737,"464 days, 0:00:00"
https://github.com/git/git/commit/de1a2fdd38b138c4e4fed6412783dcb74d63d2da,05 Nov 2009,"Smart push over HTTP: client side

The git-remote-curl backend detects if the remote server supports
the git-receive-pack service, and if so, runs git-send-pack in a
pipe to dump the command and pack data as a single POST request.

The advertisements from the server that were obtained during the
discovery are passed into git-send-pack before the POST request
starts.  This permits git-send-pack to operate largely unmodified.

For smaller packs (those under 1 MiB) a HTTP/1.0 POST with a
Content-Length is used, permitting interaction with any server.
The 1 MiB limit is arbitrary, but is sufficent to fit most deltas
created by human authors against text sources with the occasional
small binary file (e.g. few KiB icon image).  The configuration
option http.postBuffer can be used to increase (or shink) this
buffer if the default is not sufficient.

For larger packs which cannot be spooled entirely into the helper's
memory space (due to http.postBuffer being too small), the POST
request requires HTTP/1.1 and sets ""Transfer-Encoding: chunked"".
This permits the client to upload an unknown amount of data in one
HTTP transaction without needing to pregenerate the entire pack
file locally.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",389,data/crawl/git/hunk_5560.cpp,,,data/crawl/git/old_hunk_5560.cpp,data/crawl/git/new_hunk_5560.cpp,-1,120,,"error(""RPC failed; result=%d, HTTP code = %ld"",
			results.curl_result, results.http_code);","[""addLog""]","[[], [""error"", ""RPC"", ""failed"", ""result"", ""%d"", ""HTTP"", ""code"", ""%ld"", ""results"", ""curl_result"", ""results"", ""http_code""]]",[19791401746032207069],5736,"233 days, 12:00:00"
https://github.com/git/git/commit/24852d917104e294726c54803d5c9012997506ca,22 Feb 2011,"rev-list: --left/right-only are mutually exclusive

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_4848.cpp,,,data/crawl/git/old_hunk_4848.cpp,data/crawl/git/new_hunk_4848.cpp,-1,8,,"die(""--right-only is incompatible with --left-only"");","[""addLog""]","[[], [""die"", ""right"", ""only"", ""is"", ""incompatible"", ""with"", ""left"", ""only""]]",[-677547719811538212],5735,0:00:00
https://github.com/git/git/commit/d68565402a69fac3fe0e0653718feca7c80c178b,21 Mar 2010,"revert: clarify label on conflict hunks

When reverting a commit, the commit being merged is not the commit
to revert itself but its parent.  Add “parent of” to the conflict
hunk label to make this more clear.

The conflict hunk labels are all pieces of a single string written in
the new get_message() function.  Avoid some complication by using
mempcpy to advance a pointer as the result is written.

Also free the corresponding temporary buffer (it was leaked before).
This is not important because it is a small one-time allocation.  It
would become a memory leak if unnoticed when libifying revert.

This patch uses calls to strlen() instead of integer constants in some
places.  GCC will compute the length at compile time; I am not sure
about other compilers, but this is not performance-critical anyway.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",105,data/crawl/git/hunk_5338.cpp,,,data/crawl/git/old_hunk_5338.cpp,data/crawl/git/new_hunk_5338.cpp,10,-1,"die (""Could not read commit message of %s"",
				sha1_to_hex(commit->object.sha1));",,"[""removeLog""]","[[""die"", ""Could"", ""not"", ""read"", ""commit"", ""message"", ""of"", ""%s"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""], []]",[1994912537116882588],5734,"169 days, 0:00:00"
https://github.com/git/git/commit/37f7a8579363a98efc48dfb6964a519034fc9acc,22 Feb 2011,"Teach commit about CHERRY_PICK_HEAD

Previously the user was advised to use commit -c CHERRY_PICK_HEAD after
a conflicting cherry-pick. While this would preserve the original
commit's authorship, it would sadly discard cherry-pick's carefully
crafted MERGE_MSG (which contains the list of conflicts as well as the
original commit-id in the case of cherry-pick -x).

On the other hand, if a bare 'commit' were performed, it would preserve
the MERGE_MSG while resetting the authorship.

In other words, there was no way to simultaneously take the authorship
from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.

This change fixes that situation. A bare 'commit' will now take the
authorship from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.
If the user wishes to reset authorship, that must now be done explicitly
via --reset-author.

A side-benefit of passing commit authorship along this way is that we
can eliminate redundant authorship parsing code from revert.c.

(Also removed an unused include from revert.c)

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",262,data/crawl/git/hunk_4836.cpp,,,data/crawl/git/old_hunk_4836.cpp,data/crawl/git/new_hunk_4836.cpp,14,14,"die(""invalid commit: %s"", use_message);","die(""invalid commit: %s"", author_message);","[""updateVariable""]","[[""use_message""], [""author_message""]]",[5995498175103616133],5733,0:00:00
https://github.com/git/git/commit/37f7a8579363a98efc48dfb6964a519034fc9acc,22 Feb 2011,"Teach commit about CHERRY_PICK_HEAD

Previously the user was advised to use commit -c CHERRY_PICK_HEAD after
a conflicting cherry-pick. While this would preserve the original
commit's authorship, it would sadly discard cherry-pick's carefully
crafted MERGE_MSG (which contains the list of conflicts as well as the
original commit-id in the case of cherry-pick -x).

On the other hand, if a bare 'commit' were performed, it would preserve
the MERGE_MSG while resetting the authorship.

In other words, there was no way to simultaneously take the authorship
from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.

This change fixes that situation. A bare 'commit' will now take the
authorship from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.
If the user wishes to reset authorship, that must now be done explicitly
via --reset-author.

A side-benefit of passing commit authorship along this way is that we
can eliminate redundant authorship parsing code from revert.c.

(Also removed an unused include from revert.c)

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",262,data/crawl/git/hunk_4840.cpp,,,data/crawl/git/old_hunk_4840.cpp,data/crawl/git/new_hunk_4840.cpp,4,4,"die(""You are in the middle of a merge -- cannot amend."");","die(""You are in the middle of a %s -- cannot amend."", whence_s());","[""updateContent"", ""addVariable""]","[[""merge""], [""%s"", ""whence_s""]]",[-3421527278887937249],5732,0:00:00
https://github.com/git/git/commit/ebeb60900fbab569ed14f710a0a1abb1637ec792,26 Feb 2011,"strbuf: add strbuf_vaddf

In a variable-args function, the code for writing into a strbuf is
non-trivial. We ended up cutting and pasting it in several places
because there was no vprintf-style function for strbufs (which in turn
was held up by a lack of va_copy).

Now that we have a fallback va_copy, we can add strbuf_vaddf, the
strbuf equivalent of vsprintf. And we can clean up the cut and paste
mess.

Signed-off-by: Jeff King <peff@peff.net>
Improved-by: Christian Couder <christian.couder@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_4827.cpp,,,data/crawl/git/old_hunk_4827.cpp,data/crawl/git/new_hunk_4827.cpp,22,-1,"die(""broken vsnprintf"");",,"[""removeLog""]","[[""die"", ""broken"", ""vsnprintf""], []]",[3880449387824731461],5731,0:00:00
https://github.com/git/git/commit/85c62395b152f99e8867aaf84cea93dddc03243c,01 Dec 2010,"fast-import: let importers retrieve blobs

New objects written by fast-import are not available immediately.
Until a checkpoint has been started and finishes writing the pack
index, any new blobs will not be accessible using standard git tools.

So introduce a new way to access them: a ""cat-blob"" command in the
command stream requests for fast-import to print a blob to stdout or a
file descriptor specified by the argument to --cat-blob-fd.  The value
for cat-blob-fd cannot be specified in the stream because that would
be a layering violation: the decision of where to direct a stream has
to be made when fast-import is started anyway, so we might as well
make the stream format is independent of that detail.

Output uses the same format as ""git cat-file --batch"".

Thanks to Sverre Rabbelier and Sam Vilain for guidance in designing
the protocol.

Based-on-patch-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Acked-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",331,data/crawl/git/hunk_4915.cpp,,,data/crawl/git/old_hunk_4915.cpp,data/crawl/git/new_hunk_4915.cpp,-1,61,,"die(""Invalid mark: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Invalid"", ""mark"", ""%s"", ""command_buf"", ""buf""]]",[-14450323941845917694],5730,"43 days, 12:00:00"
https://github.com/git/git/commit/4709455db3891f6cad9a96a574296b4926f70cbe,15 Aug 2010,"Add memory pool library

Add a memory pool library implemented using C macros. The
obj_pool_gen() macro creates a type-specific memory pool.

The memory pool library is distinguished from the existing specialized
allocators in alloc.c by using a contiguous block for all allocations.
This means that on one hand, long-lived pointers have to be written as
offsets, since the base address changes as the pool grows, but on the
other hand, the entire pool can be easily written to the file system.
This could allow the memory pool to persist between runs of an
application.

For the svn importer, such a facility is useful because each svn
revision can copy trees and files from any previous revision.  The
relevant information for all revisions has to persist somehow to
support incremental runs.

[rr: minor cleanups]
[jn: added tests; removed file system backing for now]

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_5064.cpp,,,data/crawl/git/old_hunk_5064.cpp,data/crawl/git/new_hunk_5064.cpp,-1,86,,"die(""unrecognized command: %s"", command);","[""addLog""]","[[], [""die"", ""unrecognized"", ""command"", ""%s"", ""command""]]",[17794402347674723428],5729,"97 days, 12:00:00"
https://github.com/git/git/commit/e0335fcdad28da578904bb33fcf1dfbcdf172599,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4798.cpp,,,data/crawl/git/old_hunk_4798.cpp,data/crawl/git/new_hunk_4798.cpp,-1,9,,"fprintf(fp, ""%s"", GIT_COLOR_RESET);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""GIT_COLOR_RESET""]]",[-5265099989127206023],5728,0:00:00
https://github.com/git/git/commit/e0335fcdad28da578904bb33fcf1dfbcdf172599,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4798.cpp,,,data/crawl/git/old_hunk_4798.cpp,data/crawl/git/new_hunk_4798.cpp,-1,7,,"fprintf(fp, ""%s"", sb->buf);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""sb"", ""buf""]]",[-4844602062157336825],5727,0:00:00
https://github.com/git/git/commit/e0335fcdad28da578904bb33fcf1dfbcdf172599,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4798.cpp,,,data/crawl/git/old_hunk_4798.cpp,data/crawl/git/new_hunk_4798.cpp,-1,6,,"fprintf(fp, ""%s"", color);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""color""]]",[2757575891281490618],5726,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4793.cpp,,,data/crawl/git/old_hunk_4793.cpp,data/crawl/git/new_hunk_4793.cpp,11,11,"fprintf(s->fp, ""# No changes\n"");","status_printf_ln(s, GIT_COLOR_NORMAL, ""No changes"");","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""changes\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL"", ""changes""]]",[-7231624812856041221],5725,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4793.cpp,,,data/crawl/git/old_hunk_4793.cpp,data/crawl/git/new_hunk_4793.cpp,3,3,"fprintf(s->fp, ""# Untracked files not listed%s\n"",
			advice_status_hints
			? "" (use -u option to show untracked files)"" : """");","status_printf_ln(s, GIT_COLOR_NORMAL, ""Untracked files not listed%s"",
			advice_status_hints
			? "" (use -u option to show untracked files)"" : """");","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""listed%s\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL"", ""listed%s""]]",[2815881955125140143],5724,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4792.cpp,,,data/crawl/git/old_hunk_4792.cpp,data/crawl/git/new_hunk_4792.cpp,-1,12,,"status_printf_ln(s, color(WT_STATUS_HEADER, s), ""Initial commit"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""color"", ""WT_STATUS_HEADER"", ""s"", ""Initial"", ""commit""]]",[3181246093299653723],5723,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4792.cpp,,,data/crawl/git/old_hunk_4792.cpp,data/crawl/git/new_hunk_4792.cpp,-1,3,,"color(WT_STATUS_HEADER, s);","[""addLog""]","[[], [""color"", ""WT_STATUS_HEADER"", ""s""]]",[11328931222400805632],5722,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,24,,"status_printf_ln(s, c, ""  (use \""git %s <file>...\"" to include in what will be committed)"", how);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""%s"", ""file"", ""\\"", ""to"", ""include"", ""in"", ""what"", ""will"", ""be"", ""committed"", ""how""]]",[-18279236597590286934],5721,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,21,,"status_printf_ln(s, c, ""%s files:"", what);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""%s"", ""files"", ""what""]]",[-5094283434503357863],5720,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,12,,"status_printf_ln(s, c, ""  (commit or discard the untracked or modified content in submodules)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""commit"", ""or"", ""discard"", ""the"", ""untracked"", ""or"", ""modified"", ""content"", ""in"", ""submodules""]]",[-1430314476565444270],5719,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,10,,"status_printf_ln(s, c, ""  (use \""git checkout -- <file>...\"" to discard changes in working directory)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""checkout"", ""file"", ""\\"", ""to"", ""discard"", ""changes"", ""in"", ""working"", ""directory""]]",[-23675420591463795515],5718,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,9,,"status_printf_ln(s, c, ""  (use \""git add/rm <file>...\"" to update what will be committed)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""add/rm"", ""file"", ""\\"", ""to"", ""update"", ""what"", ""will"", ""be"", ""committed""]]",[-31705140548346565105],5717,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,7,,"status_printf_ln(s, c, ""  (use \""git add <file>...\"" to update what will be committed)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""add"", ""file"", ""\\"", ""to"", ""update"", ""what"", ""will"", ""be"", ""committed""]]",[-21525826275822310968],5716,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4788.cpp,,,data/crawl/git/old_hunk_4788.cpp,data/crawl/git/new_hunk_4788.cpp,-1,3,,"status_printf_ln(s, c, ""Changes not staged for commit:"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""Changes"", ""not"", ""staged"", ""for"", ""commit""]]",[-12820664531184289672],5715,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4787.cpp,,,data/crawl/git/old_hunk_4787.cpp,data/crawl/git/new_hunk_4787.cpp,-1,20,,"status_printf_ln(s, c, ""Changes to be committed:"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""Changes"", ""to"", ""be"", ""committed""]]",[-8814261699723226594],5714,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4787.cpp,,,data/crawl/git/old_hunk_4787.cpp,data/crawl/git/new_hunk_4787.cpp,-1,12,,"status_printf_ln(s, c, ""  (use \""git add/rm <file>...\"" as appropriate to mark resolution)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""add/rm"", ""file"", ""\\"", ""as"", ""appropriate"", ""to"", ""mark"", ""resolution""]]",[-39866878095508630745],5713,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4787.cpp,,,data/crawl/git/old_hunk_4787.cpp,data/crawl/git/new_hunk_4787.cpp,-1,3,,"status_printf_ln(s, c, ""Unmerged paths:"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""Unmerged"", ""paths""]]",[-7378383818092853513],5712,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4786.cpp,,,data/crawl/git/old_hunk_4786.cpp,data/crawl/git/new_hunk_4786.cpp,-1,13,,"status_printf(s, GIT_COLOR_NORMAL,
			""Please enter the commit message for your changes."");","[""addLog""]","[[], [""status_printf"", ""s"", ""GIT_COLOR_NORMAL"", ""Please"", ""enter"", ""the"", ""commit"", ""message"", ""for"", ""your"", ""changes""]]",[2074072243593821220],5711,0:00:00
https://github.com/git/git/commit/098d0e0e8e7467bea5306d5bc98b283bfe0174fb,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4786.cpp,,,data/crawl/git/old_hunk_4786.cpp,data/crawl/git/new_hunk_4786.cpp,12,12,"fprintf(s->fp,
			""\n""
			""# Please enter the commit message for your changes."");","fprintf(s->fp, ""\n"");","[""removeContent""]","[[""Please"", ""enter"", ""the"", ""commit"", ""message"", ""for"", ""your"", ""changes""], []]",[5125057050808654481],5710,0:00:00
https://github.com/git/git/commit/1df2d656cc442dc057e30b6fb130967e5ae19654,09 Mar 2011,"rev-list/log: factor out revision mark generation

Currently, we have identical code for generating revision marks ('<',
'>', '-') in 5 places.

Factor out the code to a single function get_revision_mark() for easier
maintenance and extensibility.

Note that the check for !!revs in graph.c (which gets removed
effectively by this patch) is superfluous.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_4766.cpp,,,data/crawl/git/old_hunk_4766.cpp,data/crawl/git/new_hunk_4766.cpp,-1,4,,"fputs(get_revision_mark(opt, commit), stdout);","[""addLog""]","[[], [""fputs"", ""get_revision_mark"", ""opt"", ""commit"", ""stdout""]]",[-6435780485514797482],5709,0:00:00
https://github.com/git/git/commit/adbbb31e0d3b4cc7845c6d23d21c00da51025208,09 Mar 2011,"revision.c: introduce --cherry-mark

for marking those commits which ""--cherry-pick"" would drop.
The marker for those commits is '=' because '-' denotes a boundary
commit already, even though 'git cherry' uses it.

Nonequivalent commits are denoted '+' unless '--left-right' is used.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_4763.cpp,,,data/crawl/git/old_hunk_4763.cpp,data/crawl/git/new_hunk_4763.cpp,-1,10,,"die(""--cherry-pick is incompatible with --cherry-mark"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""is"", ""incompatible"", ""with"", ""cherry"", ""mark""]]",[-17476857406887204754],5708,0:00:00
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4686.cpp,,,data/crawl/git/old_hunk_4686.cpp,data/crawl/git/new_hunk_4686.cpp,-1,6,,"error(_(""path '%s' does not have their version""), ce->name);","[""addLog""]","[[], [""error"", ""_"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""their"", ""version"", ""ce"", ""name""]]",[23060783746843047812],5707,0:00:00
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4686.cpp,,,data/crawl/git/old_hunk_4686.cpp,data/crawl/git/new_hunk_4686.cpp,-1,4,,"error(_(""path '%s' does not have our version""), ce->name);","[""addLog""]","[[], [""error"", ""_"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""our"", ""version"", ""ce"", ""name""]]",[18841748811600983788],5706,0:00:00
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4686.cpp,,,data/crawl/git/old_hunk_4686.cpp,data/crawl/git/new_hunk_4686.cpp,3,-1,"error(""path '%s' does not have %s version"",
		     ce->name,
		     (stage == 2) ? ""our"" : ""their"");",,"[""removeLog""]","[[""error"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""%s"", ""version"", ""ce"", ""name"", ""stage"", ""2"", ""our"", ""their""], []]",[-29534638648382695343],5705,0:00:00
https://github.com/git/git/commit/2da57add287c9a5b26e348c35947d6de369e77da,10 Mar 2011,"i18n: git-clean basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_4450.cpp,,,data/crawl/git/old_hunk_4450.cpp,data/crawl/git/new_hunk_4450.cpp,27,27,"printf(""Removing %s\n"", qname);","(_(""Removing %s\n"");","[""addLog"", ""updateLog"", ""removeVariable""]","[[""printf"", ""qname""], [""_""]]",[-11337034120351225766],5704,0:00:00
https://github.com/git/git/commit/d3ee177e5059c81e0e73be091741f60ebfbce520,10 Mar 2011,"i18n: git-revert ""Your local changes"" message

Translate the ""Your local changes [...]"" message without using the
`me' variable, instead split up the two messages so translators can
translate the whole messages as-is.

Reported-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4400.cpp,,,data/crawl/git/old_hunk_4400.cpp,data/crawl/git/new_hunk_4400.cpp,7,12,"die(""Your local changes would be overwritten by %s.\n"", me);","die(_(""Your local changes would be overwritten by revert.\n""));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""me""], [""_"", ""revert""]]",[6321383577464348044],5703,0:00:00
https://github.com/git/git/commit/b1b47554ae889ca76b66349819c9b95a8be5f646,11 Mar 2011,"git-log: put space after commit mark

Currently, commit marks (left, right, boundary, cherry) are output right
before the commit sha1, which makes it difficult to copy sha1s. Sample
output for ""git log --oneline --cherry"":

=049c269 t6007: test rev-list --cherry

Change this to

= 049c269 t6007: test rev-list --cherry

which matches exactly the current output of ""git log --graph"".

Leave ""git rev-list"" output as is (no space) so that they do not break.

Adjust ""git-svn"" which uses ""git log --pretty=raw --boundary"".

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_4391.cpp,,,data/crawl/git/old_hunk_4391.cpp,data/crawl/git/new_hunk_4391.cpp,3,-1,"fputs(get_revision_mark(opt, commit), stdout);",,"[""removeLog""]","[[""fputs"", ""get_revision_mark"", ""opt"", ""commit"", ""stdout""], []]",[6435780485514797482],5702,0:00:00
https://github.com/git/git/commit/752c0c24926aacbceca0d27de6ad22cbb7dd0709,20 Oct 2009,"Add the --submodule option to the diff option family

When you use the option --submodule=log you can see the submodule
summaries inlined in the diff, instead of not-quite-helpful SHA-1 pairs.

The format imitates what ""git submodule summary"" shows.

To do that, <path>/.git/objects/ is added to the alternate object
databases (if that directory exists).

This option was requested by Jens Lehmann at the GitTogether in Berlin.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",151,data/crawl/git/hunk_5638.cpp,,,data/crawl/git/old_hunk_5638.cpp,data/crawl/git/new_hunk_5638.cpp,-1,106,,"fprintf(f, ""%s"", sb.buf);","[""addLog""]","[[], [""fprintf"", ""f"", ""%s"", ""sb"", ""buf""]]",[-4857658127539415378],5701,"256 days, 0:00:00"
https://github.com/git/git/commit/c9d1c8ba059577e64fb2213cb0c5f3c4619c7519,22 Mar 2011,"vcs-svn: improve reporting of input errors

Catch input errors and exit early enough to print a reasonable
diagnosis based on errno.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",42,data/crawl/git/hunk_4358.cpp,,,data/crawl/git/old_hunk_4358.cpp,data/crawl/git/new_hunk_4358.cpp,-1,7,,"die(""invalid dump: unexpected end of file"");","[""addLog""]","[[], [""die"", ""invalid"", ""dump"", ""unexpected"", ""end"", ""of"", ""file""]]",[-30116358225153573565],5700,0:00:00
https://github.com/git/git/commit/c9d1c8ba059577e64fb2213cb0c5f3c4619c7519,22 Mar 2011,"vcs-svn: improve reporting of input errors

Catch input errors and exit early enough to print a reasonable
diagnosis based on errno.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",42,data/crawl/git/hunk_4358.cpp,,,data/crawl/git/old_hunk_4358.cpp,data/crawl/git/new_hunk_4358.cpp,-1,6,,"die_errno(""error reading dump file"");","[""addLog""]","[[], [""die_errno"", ""error"", ""reading"", ""dump"", ""file""]]",[-11404675231178047876],5699,0:00:00
https://github.com/git/git/commit/403994e83dd3ad2424f0b3084c8dc4fd1ca6374a,10 May 2010,"fmt-merge-msg: refactor merge title formatting

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_5245.cpp,,,data/crawl/git/old_hunk_5245.cpp,data/crawl/git/new_hunk_5245.cpp,-1,14,,"die(""No current branch"");","[""addLog""]","[[], [""die"", ""No"", ""current"", ""branch""]]",[-12278104512583616394],5698,"159 days, 0:00:00"
https://github.com/git/git/commit/41e6b91f01bc9bb7e1679542a8cce9bd4252fd2e,27 Mar 2011,"vcs-svn: add missing cast to printf argument

gcc -m32 correctly warns:

 vcs-svn/fast_export.c: In function 'fast_export_commit':
 vcs-svn/fast_export.c:54:2: warning: format '%llu' expects
   argument of type 'long long unsigned int', but argument 2
   has type 'unsigned int' [-Wformat]

Fix it.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",3,data/crawl/git/hunk_4349.cpp,,,data/crawl/git/old_hunk_4349.cpp,data/crawl/git/new_hunk_4349.cpp,3,3,"printf(""data %""PRIuMAX""\n"", log->len + strlen(gitsvnline));","printf(""data %""PRIuMAX""\n"",
		(uintmax_t) (log->len + strlen(gitsvnline)));","[""addVariable""]","[[], [""uintmax_t""]]",[-611667053313852018],5697,12:00:00
https://github.com/git/git/commit/3e63b21aced116badd30a279c479535449a63560,15 Mar 2011,"upload-pack: Implement no-done capability

If the client requests both multi_ack_detailed and no-done then
upload-pack is free to immediately send a PACK following its first
'ACK %s ready' message.  The upload-pack response actually winds
up being:

  ACK %s common
  ... (maybe more) ...
  ACK %s ready
  NAK
  ACK %s
  PACK.... the pack stream ....

For smart HTTP connections this saves one HTTP RPC, reducing
the overall latency for a trivial fetch.  For git:// and ssh://
a no-done option slightly reduces latency by removing one
server->client->server round-trip at the end of the common
ancestor negotiation.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4384.cpp,,,data/crawl/git/old_hunk_4384.cpp,data/crawl/git/new_hunk_4384.cpp,-1,11,,"packet_write(1, ""ACK %s\n"", last_hex);","[""addLog""]","[[], [""packet_write"", ""1"", ""ACK"", ""%s\\n"", ""last_hex""]]",[1477909362608433744],5696,"7 days, 0:00:00"
https://github.com/git/git/commit/761ecf0bc7b6cddf311f00877c59e6381cdbdeea,15 Mar 2011,"fetch-pack: Implement no-done capability

If enabled on the connection ""multi_ack_detailed no-done"" as a
pair allows the remote upload-pack process to send a PACK down
to the client as soon as a ""ACK %s ready"" message was also sent.

Over git:// and ssh:// where a bi-directional stream is in place
this has very little difference over the classical version that
waits for the client to send a ""done\n"" line by itself.  It does
slightly reduce the latency involved to start the pack stream as
there is one less round-trip from client->server required.

Over smart HTTP this avoids needing to send a final RPC that has
all of the prior common objects.  Instead the server is able to
return a pack as soon as its ready to.  For many common users the
smart HTTP fetch is now just 2 requests: GET .../info/refs, and
a POST .../git-upload-pack to not only negotiate but also receive
the pack stream.  Only users who have more than 32 local unshared
commits with the remote will need additional requests to negotiate
a common merge base.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_4387.cpp,,,data/crawl/git/old_hunk_4387.cpp,data/crawl/git/new_hunk_4387.cpp,-1,5,,"fprintf(stderr, ""Server supports no-done\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Server"", ""supports"", ""no"", ""done\\n""]]",[-27772475827318430200],5695,"7 days, 0:00:00"
https://github.com/git/git/commit/ef08ef9ea0a271e5be5844408d2496a946d6e8d9,31 Oct 2009,"remote-helpers: Support custom transport options

Some transports, like the native pack transport implemented by
fetch-pack, support useful features like depth or include tags.
These should be exposed if the underlying helper knows how to
use them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5598.cpp,,,data/crawl/git/old_hunk_5598.cpp,data/crawl/git/new_hunk_5598.cpp,-1,15,,"printf(""ok\n"");","[""addLog""]","[[], [""printf"", ""ok\\n""]]",[7225515199027138487],5694,"386 days, 0:00:00"
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4268.cpp,,,data/crawl/git/old_hunk_4268.cpp,data/crawl/git/new_hunk_4268.cpp,22,22,"error(""unable to resolve reference %s: %s"",
			orig_ref, strerror(errno));","error(""unable to resolve reference %s: %s"",
			orig_refname, strerror(errno));","[""updateVariable""]","[[""orig_ref""], [""orig_refname""]]",[1968830713410656619],5693,0:00:00
https://github.com/git/git/commit/1df9bf46d656970d0db254cb7faab0d0505802e0,12 Dec 2011,"revert: give --continue handling its own function

This makes pick_revisions() a little shorter and easier to read
straight through.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_4259.cpp,,,data/crawl/git/old_hunk_4259.cpp,data/crawl/git/new_hunk_4259.cpp,5,-1,"error(_(""No %s in progress""), action_name(opts));",,"[""removeLog""]","[[""error"", ""_"", ""No"", ""%s"", ""in"", ""progress"", ""action_name"", ""opts""], []]",[7594192244807107465],5692,0:00:00
https://github.com/git/git/commit/f206063b4b201ff48c87b886cbe21a068fcf6d49,05 Mar 2010,"git-core: Support retrieving passwords with GIT_ASKPASS

git tries to read a password from the terminal in imap-send and
when talking to a http server that requires authentication.

When a GUI is driving git, however, the end user is not paying
attention to the terminal (there may not even be a terminal).
GUI would appear to hang forever.

Fix this problem by allowing a password-retrieving command
to be specified in GIT_ASKPASS

Signed-off-by: Frank Li <lznuaa@gmail.com>
Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_5384.cpp,,,data/crawl/git/old_hunk_5384.cpp,data/crawl/git/new_hunk_5384.cpp,-1,29,,"die(""failed to read password from %s\n"", askpass);","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""read"", ""password"", ""from"", ""%s\\n"", ""askpass""]]",[-24603565022085289105],5691,"324 days, 0:00:00"
https://github.com/git/git/commit/8713feb16dd6a472828bbdcf914a1c8f5c6810a2,30 Sep 2010,"Make sure that git_getpass() never returns NULL

The result of git_getpass() is used without checking for NULL, so let's
just die() instead of returning NULL.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_5009.cpp,,,data/crawl/git/old_hunk_5009.cpp,data/crawl/git/new_hunk_5009.cpp,-1,6,,"die_errno(""Could not read password"");","[""addLog""]","[[], [""die_errno"", ""Could"", ""not"", ""read"", ""password""]]",[-6579737492449875437],5690,"219 days, 12:00:00"
https://github.com/git/git/commit/d3c58b83aee2007ca76dc5d1242c09b6f7989c76,13 Dec 2011,"move git_getpass to its own source file

This is currently in connect.c, but really has nothing to
do with the git protocol itself. Let's make a new source
file all about prompting the user, which will make it
cleaner to refactor.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/hunk_4251.cpp,,,data/crawl/git/old_hunk_4251.cpp,data/crawl/git/new_hunk_4251.cpp,19,-1,"die_errno(""Could not read password"");",,"[""removeLog""]","[[""die_errno"", ""Could"", ""not"", ""read"", ""password""], []]",[6579737492449875437],5689,0:00:00
https://github.com/git/git/commit/abca927dbef2c310056b8a1a8be5561212b3243a,12 Dec 2011,"introduce credentials API

There are a few places in git that need to get a username
and password credential from the user; the most notable one
is HTTP authentication for smart-http pushing.

Right now the only choices for providing credentials are to
put them plaintext into your ~/.netrc, or to have git prompt
you (either on the terminal or via an askpass program). The
former is not very secure, and the latter is not very
convenient.

Unfortunately, there is no ""always best"" solution for
password management. The details will depend on the tradeoff
you want between security and convenience, as well as how
git can integrate with other security systems (e.g., many
operating systems provide a keychain or password wallet for
single sign-on).

This patch provides an abstract notion of credentials as a
data item, and provides three basic operations:

  - fill (i.e., acquire from external storage or from the
    user)

  - approve (mark a credential as ""working"" for further
    storage)

  - reject (mark a credential as ""not working"", so it can
    be removed from storage)

These operations can be backed by external helper processes
that interact with system- or user-specific secure storage.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",773,data/crawl/git/hunk_4277.cpp,,,data/crawl/git/old_hunk_4277.cpp,data/crawl/git/new_hunk_4277.cpp,-1,27,,"printf(""password=%s\n"", c.password);","[""addLog""]","[[], [""printf"", ""password"", ""%s\\n"", ""c"", ""password""]]",[-1032207320873537695],5688,12:00:00
https://github.com/git/git/commit/abca927dbef2c310056b8a1a8be5561212b3243a,12 Dec 2011,"introduce credentials API

There are a few places in git that need to get a username
and password credential from the user; the most notable one
is HTTP authentication for smart-http pushing.

Right now the only choices for providing credentials are to
put them plaintext into your ~/.netrc, or to have git prompt
you (either on the terminal or via an askpass program). The
former is not very secure, and the latter is not very
convenient.

Unfortunately, there is no ""always best"" solution for
password management. The details will depend on the tradeoff
you want between security and convenience, as well as how
git can integrate with other security systems (e.g., many
operating systems provide a keychain or password wallet for
single sign-on).

This patch provides an abstract notion of credentials as a
data item, and provides three basic operations:

  - fill (i.e., acquire from external storage or from the
    user)

  - approve (mark a credential as ""working"" for further
    storage)

  - reject (mark a credential as ""not working"", so it can
    be removed from storage)

These operations can be backed by external helper processes
that interact with system- or user-specific secure storage.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",773,data/crawl/git/hunk_4277.cpp,,,data/crawl/git/old_hunk_4277.cpp,data/crawl/git/new_hunk_4277.cpp,-1,25,,"printf(""username=%s\n"", c.username);","[""addLog""]","[[], [""printf"", ""username"", ""%s\\n"", ""c"", ""username""]]",[2747773249262824747],5687,12:00:00
https://github.com/git/git/commit/38a39647b43ea57c96bd6e4a351d0d5353c805bb,22 Nov 2009,"apply: apply works outside a repository

The documentation for 'git apply' talks about applying a
patch/diff to the index and to the working tree, which seems
to imply that it will not work outside a git repository.

Actually 'git patch' works outside a repository (which can
be useful especially for applying binary or rename patches that
the standard ""patch"" utility cannot handle), so the documentation
should mention it.

Thanks to Junio for suggesting better wording.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_5487.cpp,,,data/crawl/git/old_hunk_5487.cpp,data/crawl/git/new_hunk_5487.cpp,-1,3,,"output (i.e. ""a patch"");","[""addLog""]","[[], [""output"", ""i"", ""e"", ""a"", ""patch""]]",[-12826256700713805164],5686,"378 days, 0:00:00"
https://github.com/git/git/commit/ab1900a36ef7fcfe872ff9d0803f9442e356c2f0,21 Dec 2011,"Appease Sun Studio by renaming ""tmpfile""

On Solaris the system headers define the ""tmpfile"" name, which'll
cause Git compiled with Sun Studio 12 Update 1 to whine about us
redefining the name:

    ""pack-write.c"", line 76: warning: name redefined by pragma redefine_extname declared static: tmpfile     (E_PRAGMA_REDEFINE_STATIC)
    ""sha1_file.c"", line 2455: warning: name redefined by pragma redefine_extname declared static: tmpfile    (E_PRAGMA_REDEFINE_STATIC)
    ""fast-import.c"", line 858: warning: name redefined by pragma redefine_extname declared static: tmpfile   (E_PRAGMA_REDEFINE_STATIC)
    ""builtin/index-pack.c"", line 175: warning: name redefined by pragma redefine_extname declared static: tmpfile    (E_PRAGMA_REDEFINE_STATIC)

Just renaming the ""tmpfile"" variable to ""tmp_file"" in the relevant
places is the easiest way to fix this.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_4219.cpp,,,data/crawl/git/old_hunk_4219.cpp,data/crawl/git/new_hunk_4219.cpp,4,4,"warning(""failed utime() on %s: %s"",
				tmpfile, strerror(errno));","warning(""failed utime() on %s: %s"",
				tmp_file, strerror(errno));","[""updateVariable""]","[[""tmpfile""], [""tmp_file""]]",[-43576019953935582],5685,0:00:00
https://github.com/git/git/commit/98c2924cfa84a7f30b17636bd5632e53a0fa002e,08 Jan 2012,"credentials: unable to connect to cache daemon

Error out if we just spawned the daemon and yet we cannot connect.

And always release the string buffer.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_4203.cpp,,,data/crawl/git/old_hunk_4203.cpp,data/crawl/git/new_hunk_4203.cpp,-1,6,,"die_errno(""unable to connect to cache daemon"");","[""addLog""]","[[], [""die_errno"", ""unable"", ""to"", ""connect"", ""to"", ""cache"", ""daemon""]]",[-12635757419081567643],5684,"1 day, 0:00:00"
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4266.cpp,,,data/crawl/git/old_hunk_4266.cpp,data/crawl/git/new_hunk_4266.cpp,17,17,"die(""Reference has invalid format: '%s'"", name);","die(""Reference has invalid format: '%s'"", refname);","[""updateVariable""]","[[""name""], [""refname""]]",[11753000941819307624],5683,"15 days, 12:00:00"
https://github.com/git/git/commit/2b6a5417d750d086d1da906e46de2b3ad8df6753,17 Jan 2009,"color-words: take an optional regular expression describing words

In some applications, words are not delimited by white space.  To
allow for that, you can specify a regular expression describing
what makes a word with

	git diff --color-words='[A-Za-z0-9]+'

Note that words cannot contain newline characters.

As suggested by Thomas Rast, the words are the exact matches of the
regular expression.

Note that a regular expression beginning with a '^' will match only
a word at the beginning of the hunk, not a word at the beginning of
a line, and is probably not what you want.

This commit contains a quoting fix by Thomas Rast.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/hunk_6525.cpp,,,data/crawl/git/old_hunk_6525.cpp,data/crawl/git/new_hunk_6525.cpp,-1,8,,"die (""Invalid regular expression: %s"",
							o->word_regex);","[""addLog""]","[[], [""die"", ""Invalid"", ""regular"", ""expression"", ""%s"", ""o"", ""word_regex""]]",[-12996476237912768660],5682,"576 days, 0:00:00"
https://github.com/git/git/commit/06454cb9a3bd2a34299779b147e388ff0f31c9f7,10 Apr 2012,"fast-import: tighten parsing of datarefs

The syntax for the use of mark references in fast-import
demands either a SP (space) or LF (end-of-line) after
a mark reference.  Fast-import does not complain when garbage
appears after a mark reference in some cases.

Factor out parsing of mark references and complain if
errant characters are found.  Also be a little more careful
when parsing ""inline"" and SHA1s, complaining if extra
characters appear or if the form of the dataref is unrecognized.

Buggy input can cause fast-import to produce the wrong output,
silently, without error.  This makes it difficult to track
down buggy generators of fast-import streams.  An example is
seen in the last line of this commit command:

    commit refs/heads/S2
    committer Name <name@example.com> 1112912893 -0400
    data <<COMMIT
    commit message
    COMMIT
    from :1M 100644 :103 hello.c

It is missing a newline and should be:

    [...]
    from :1
    M 100644 :103 hello.c

What fast-import does is to produce a commit with the same
contents for hello.c as in refs/heads/S2^.  What the buggy
program was expecting was the contents of blob :103.  While
the resulting commit graph looked correct, the contents in
some commits were wrong.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",397,data/crawl/git/hunk_4161.cpp,,,data/crawl/git/old_hunk_4161.cpp,data/crawl/git/new_hunk_4161.cpp,13,-1,"die(""Invalid SHA1: %s"", command_buf.buf);",,"[""removeLog""]","[[""die"", ""Invalid"", ""SHA1"", ""%s"", ""command_buf"", ""buf""], []]",[7969690232472827722],5681,0:00:00
https://github.com/git/git/commit/06454cb9a3bd2a34299779b147e388ff0f31c9f7,10 Apr 2012,"fast-import: tighten parsing of datarefs

The syntax for the use of mark references in fast-import
demands either a SP (space) or LF (end-of-line) after
a mark reference.  Fast-import does not complain when garbage
appears after a mark reference in some cases.

Factor out parsing of mark references and complain if
errant characters are found.  Also be a little more careful
when parsing ""inline"" and SHA1s, complaining if extra
characters appear or if the form of the dataref is unrecognized.

Buggy input can cause fast-import to produce the wrong output,
silently, without error.  This makes it difficult to track
down buggy generators of fast-import streams.  An example is
seen in the last line of this commit command:

    commit refs/heads/S2
    committer Name <name@example.com> 1112912893 -0400
    data <<COMMIT
    commit message
    COMMIT
    from :1M 100644 :103 hello.c

It is missing a newline and should be:

    [...]
    from :1
    M 100644 :103 hello.c

What fast-import does is to produce a commit with the same
contents for hello.c as in refs/heads/S2^.  What the buggy
program was expecting was the contents of blob :103.  While
the resulting commit graph looked correct, the contents in
some commits were wrong.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",397,data/crawl/git/hunk_4156.cpp,,,data/crawl/git/old_hunk_4156.cpp,data/crawl/git/new_hunk_4156.cpp,12,10,"die(""Invalid SHA1: %s"", command_buf.buf);","die(""Invalid dataref: %s"", command_buf.buf);","[""updateContent""]","[[""SHA1""], [""dataref""]]",[9423981306199334045],5680,0:00:00
https://github.com/git/git/commit/85c62395b152f99e8867aaf84cea93dddc03243c,01 Dec 2010,"fast-import: let importers retrieve blobs

New objects written by fast-import are not available immediately.
Until a checkpoint has been started and finishes writing the pack
index, any new blobs will not be accessible using standard git tools.

So introduce a new way to access them: a ""cat-blob"" command in the
command stream requests for fast-import to print a blob to stdout or a
file descriptor specified by the argument to --cat-blob-fd.  The value
for cat-blob-fd cannot be specified in the stream because that would
be a layering violation: the decision of where to direct a stream has
to be made when fast-import is started anyway, so we might as well
make the stream format is independent of that detail.

Output uses the same format as ""git cat-file --batch"".

Thanks to Sverre Rabbelier and Sam Vilain for guidance in designing
the protocol.

Based-on-patch-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Acked-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",331,data/crawl/git/hunk_4915.cpp,,,data/crawl/git/old_hunk_4915.cpp,data/crawl/git/new_hunk_4915.cpp,-1,65,,"die(""Garbage after mark: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Garbage"", ""after"", ""mark"", ""%s"", ""command_buf"", ""buf""]]",[-20106326633603088091],5679,"248 days, 0:00:00"
https://github.com/git/git/commit/b6312c27a06f31625d915d44531d5e728ffd8d63,11 Sep 2012,"checkout: reorder option handling

checkout operates in three different modes. On top of that it tries to
be smart by guessing the branch name for switching. This results in
messy option handling code. This patch reorders it so that

 - cmd_checkout() is responsible for parsing, preparing input and
   determining mode

 - Code of each mode is in checkout_paths() and checkout_branch(),
   where sanity checks are performed

Another slight improvement is always print branch name (or commit
name) when printing errors related ot them. This helps catch the case
where an option is mistaken as branch/commit.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",189,data/crawl/git/hunk_4099.cpp,,,data/crawl/git/old_hunk_4099.cpp,data/crawl/git/new_hunk_4099.cpp,-1,18,,"die(_(""'%s' cannot be used with '%s'""), ""-f"", ""-m"");","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""cannot"", ""be"", ""used"", ""with"", ""%s"", ""f"", ""m""]]",[-213397857692003959],5678,0:00:00
https://github.com/git/git/commit/ff919f965d20d003e3882c70de667f41a86349ac,12 Sep 2012,"string_list: add two new functions for splitting strings

Add two new functions, string_list_split() and
string_list_split_in_place().  These split a string into a string_list
on a separator character.  The first makes copies of the substrings
(leaving the input string untouched) and the second splits the
original string in place, overwriting the separator characters with
NULs and referring to the original string's memory.

These functions are similar to the strbuf_split_*() functions except
that they work with the more powerful string_list interface.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",214,data/crawl/git/hunk_4092.cpp,,,data/crawl/git/old_hunk_4092.cpp,data/crawl/git/new_hunk_4092.cpp,-1,34,,"printf(""%d\n"", i);","[""addLog""]","[[], [""printf"", ""%d\\n"", ""i""]]",[13382357807657312348],5677,0:00:00
https://github.com/git/git/commit/17bf35a3c7b46df7131681bcc5bee5f12e1caec4,14 Sep 2012,"grep: teach --debug option to dump the parse tree

Our ""grep"" allows complex boolean expressions to be formed to match
each individual line with operators like --and, '(', ')' and --not.
Introduce the ""--debug"" option to show the parse tree to help people
who want to debug and enhance it.

Also ""log"" learns ""--grep-debug"" option to do the same.  The command
line parser to the log family is a lot more limited than the general
""git grep"" parser, but it has special handling for header matching
(e.g. ""--author""), and a parse tree is valuable when working on it.

Note that ""--all-match"" is *not* any individual node in the parse
tree.  It is an instruction to the evaluator to check all the nodes
in the top-level backbone have matched and reject a document as
non-matching otherwise.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/hunk_4081.cpp,,,data/crawl/git/old_hunk_4081.cpp,data/crawl/git/new_hunk_4081.cpp,-1,14,,"fprintf(stderr, ""*)*"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""*"", ""*""]]",[-13925655273693419424],5676,0:00:00
https://github.com/git/git/commit/293ab15eea341ffe8705bac99136f2e3a286db5f,29 Sep 2012,"submodule: teach rm to remove submodules unless they contain a git directory

Currently using ""git rm"" on a submodule - populated or not - fails with
this error:

	fatal: git rm: '<submodule path>': Is a directory

This made sense in the past as there was no way to remove a submodule
without possibly removing unpushed parts of the submodule's history
contained in its .git directory too, so erroring out here protected the
user from possible loss of data.

But submodules cloned with a recent git version do not contain the .git
directory anymore, they use a gitfile to point to their git directory
which is safely stored inside the superproject's .git directory. The work
tree of these submodules can safely be removed without losing history, so
let's teach git to do so.

Using rm on an unpopulated submodule now removes the empty directory from
the work tree and the gitlink from the index. If the submodule's directory
is missing from the work tree, it will still be removed from the index.

Using rm on a populated submodule using a gitfile will apply the usual
checks for work tree modification adapted to submodules (unless forced).
For a submodule that means that the HEAD is the same as recorded in the
index, no tracked files are modified and no untracked files that aren't
ignored are present in the submodules work tree (ignored files are deemed
expendable and won't stop a submodule's work tree from being removed).
That logic has to be applied in all nested submodules too.

Using rm on a submodule which has its .git directory inside the work trees
top level directory will just error out like it did before to protect the
repository, even when forced. In the future git could either provide a
message informing the user to convert the submodule to use a gitfile or
even attempt to do the conversion itself, but that is not part of this
change.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_4067.cpp,,,data/crawl/git/old_hunk_4067.cpp,data/crawl/git/new_hunk_4067.cpp,-1,6,,"error(_(""submodule '%s' (or one of its nested ""
						     ""submodules) uses a .git directory\n""
						     ""(use 'rm -rf' if you really want to remove ""
						     ""it including all of its history)""), name);","[""addLog""]","[[], [""error"", ""_"", ""submodule"", ""%s"", ""or"", ""one"", ""of"", ""its"", ""nested"", ""submodules"", ""uses"", ""a"", ""git"", ""directory\\n"", ""use"", ""rm"", ""rf"", ""if"", ""you"", ""really"", ""want"", ""to"", ""remove"", ""it"", ""including"", ""all"", ""of"", ""its"", ""history"", ""name""]]",[-27219779680860094364],5675,0:00:00
https://github.com/git/git/commit/271fd1fc2a25ebfc1782aab0d39b613555d22315,07 Oct 2012,"remote-svn, vcs-svn: Enable fetching to private refs

The reference to update by the fast-import stream is hard-coded.  When
fetching from a remote the remote-helper shall update refs in a
private namespace, i.e. a private subdir of refs/.  This namespace is
defined by the 'refspec' capability, that the remote-helper advertises
as a reply to the 'capabilities' command.

Extend svndump and fast-export to allow passing the target ref.
Update svn-fe to be compatible.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_4053.cpp,,,data/crawl/git/old_hunk_4053.cpp,data/crawl/git/new_hunk_4053.cpp,3,3,svndump_read(NULL);,"svndump_read(NULL, ""refs/heads/master"");","[""addContent""]","[[], [""refs/heads/master""]]",[4646381863718511198],5674,0:00:00
https://github.com/git/git/commit/8e43a1d010e22a0e432de440b08cc4389d8370f9,07 Oct 2012,"remote-svn: add incremental import

Search for a note attached to the ref to update and read it's
'Revision-number:'-line. Start import from the next svn revision.

If there is no next revision in the svn repo, svnrdump terminates with
a message on stderr an non-zero return value. This looks a little
weird, but there is no other way to know whether there is a new
revision in the svn repo.

On the start of an incremental import, the parent of the first commit
in the fast-import stream is set to the branch name to update. All
following commits specify their parent by a mark number. Previous mark
files are currently not reused.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_4042.cpp,,,data/crawl/git/old_hunk_4042.cpp,data/crawl/git/new_hunk_4042.cpp,3,3,"svndump_read(NULL, ""refs/heads/master"");","svndump_read(NULL, ""refs/heads/master"", ""refs/notes/svn/revs"");","[""addContent""]","[[], [""refs/notes/svn/revs""]]",[1865546392744505728],5673,0:00:00
https://github.com/git/git/commit/18fa13d0b34b6243d3679ea78325ee33ee4d0989,26 Nov 2012,"git p4: catch p4 describe errors

Group the two calls to ""p4 describe"" into a new helper function,
and try to validate the p4 results.  The current behavior when p4
describe fails is to die with a python backtrace.  The new behavior
will print the full response.

This does not solve any particular problem, but adds more
checking in hopes of narrowing down odd behavior seen on
at least two occasions.

Based-on-patch-by: Matt Arsenault <arsenm2@gmail.com>
Reported-by: Arthur <a.foulon@amesys.fr>
Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_4013.cpp,,,data/crawl/git/old_hunk_4013.cpp,data/crawl/git/new_hunk_4013.cpp,-1,22,,str(d);,"[""addLog""]","[[], [""str"", ""d""]]",[-369175409207752229],5672,0:00:00
https://github.com/git/git/commit/4a59fd131229968b08af9bdf221c341f54c52983,30 Oct 2007,"Add a simple option parser.

The option parser takes argc, argv, an array of struct option
and a usage string.  Each of the struct option elements in the array
describes a valid option, its type and a pointer to the location where the
value is written.  The entry point is parse_options(), which scans through
the given argv, and matches each option there against the list of valid
options.  During the scan, argv is rewritten to only contain the
non-option command line arguments and the number of these is returned.

Aggregation of single switches is allowed:
  -rC0 is the same as -r -C 0 (supposing that -C wants an arg).

Every long option automatically support the option with the same name,
prefixed with 'no-' to unset the switch. It assumes that initial value for
strings are ""NULL"" and for integers is ""0"".

Long options are supported either with '=' or without:
  --some-option=foo is the same as --some-option foo

Acked-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",206,data/crawl/git/hunk_7880.cpp,,,data/crawl/git/old_hunk_7880.cpp,data/crawl/git/new_hunk_7880.cpp,-1,36,,"error(""option `%s' %s"", opt->long_name, reason);","[""addLog""]","[[], [""error"", ""option"", ""%s"", ""%s"", ""opt"", ""long_name"", ""reason""]]",[5760202870040990619],5671,"936 days, 12:00:00"
https://github.com/git/git/commit/4a59fd131229968b08af9bdf221c341f54c52983,30 Oct 2007,"Add a simple option parser.

The option parser takes argc, argv, an array of struct option
and a usage string.  Each of the struct option elements in the array
describes a valid option, its type and a pointer to the location where the
value is written.  The entry point is parse_options(), which scans through
the given argv, and matches each option there against the list of valid
options.  During the scan, argv is rewritten to only contain the
non-option command line arguments and the number of these is returned.

Aggregation of single switches is allowed:
  -rC0 is the same as -r -C 0 (supposing that -C wants an arg).

Every long option automatically support the option with the same name,
prefixed with 'no-' to unset the switch. It assumes that initial value for
strings are ""NULL"" and for integers is ""0"".

Long options are supported either with '=' or without:
  --some-option=foo is the same as --some-option foo

Acked-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",206,data/crawl/git/hunk_7880.cpp,,,data/crawl/git/old_hunk_7880.cpp,data/crawl/git/new_hunk_7880.cpp,-1,35,,"error(""option `no-%s' %s"", opt->long_name, reason);","[""addLog""]","[[], [""error"", ""option"", ""no"", ""%s"", ""%s"", ""opt"", ""long_name"", ""reason""]]",[5774282954631117634],5670,"936 days, 12:00:00"
https://github.com/git/git/commit/4a59fd131229968b08af9bdf221c341f54c52983,30 Oct 2007,"Add a simple option parser.

The option parser takes argc, argv, an array of struct option
and a usage string.  Each of the struct option elements in the array
describes a valid option, its type and a pointer to the location where the
value is written.  The entry point is parse_options(), which scans through
the given argv, and matches each option there against the list of valid
options.  During the scan, argv is rewritten to only contain the
non-option command line arguments and the number of these is returned.

Aggregation of single switches is allowed:
  -rC0 is the same as -r -C 0 (supposing that -C wants an arg).

Every long option automatically support the option with the same name,
prefixed with 'no-' to unset the switch. It assumes that initial value for
strings are ""NULL"" and for integers is ""0"".

Long options are supported either with '=' or without:
  --some-option=foo is the same as --some-option foo

Acked-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",206,data/crawl/git/hunk_7880.cpp,,,data/crawl/git/old_hunk_7880.cpp,data/crawl/git/new_hunk_7880.cpp,-1,33,,"error(""switch `%c' %s"", opt->short_name, reason);","[""addLog""]","[[], [""error"", ""switch"", ""%c"", ""%s"", ""opt"", ""short_name"", ""reason""]]",[9131850880947186541],5669,"936 days, 12:00:00"
https://github.com/git/git/commit/b4666852a06af0c969ad8f1c444d0b48c4451e76,12 Oct 2008,"check-attr: Add --stdin option

This allows multiple paths to be specified on stdin.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",100,data/crawl/git/hunk_6687.cpp,,,data/crawl/git/old_hunk_6687.cpp,data/crawl/git/new_hunk_6687.cpp,-1,19,,"maybe_flush_or_die(stdout, ""attribute to stdout"");","[""addLog""]","[[], [""maybe_flush_or_die"", ""stdout"", ""attribute"", ""to"", ""stdout""]]",[-31864502383443306560],5668,"773 days, 12:00:00"
https://github.com/git/git/commit/f538a91e3c58bb0882be895eec099e51a74dfac4,14 Jan 2013,"git-clean: Display more accurate delete messages

(1) Only print out the names of the files and directories that got
    actually deleted. Also do not mention that we are not removing
    directories when the user did not ask us to do so with '-d'.
(2) Show ignore message for skipped untracked git repositories.

Consider the following repo layout:

  test.git/
    |-- tracked_dir/
    |     |-- some_tracked_file
    |     |-- some_untracked_file
    |-- tracked_file
    |-- untracked_file
    |-- untracked_foo/
    |     |-- bar/
    |     |     |-- bar.txt
    |     |-- emptydir/
    |     |-- frotz.git/
    |           |-- frotz.tx
    |-- untracked_some.git/
          |-- some.txt

Suppose the user issues 'git clean -fd' from the test.git directory.

When -d option is used and untracked directory 'foo' contains a
subdirectory 'frotz.git' that is managed by a different git repository
therefore it will not be removed.

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Removing untracked_foo/
  Removing untracked_some.git/

The message displayed to the user is slightly misleading. The foo/
directory has not been removed because of foo/frotz.git still exists.
On the other hand the subdirectories 'bar' and 'emptydir' have been
deleted but they're not mentioned anywhere. Also, untracked_some.git
has not been removed either.

This behaviour is the result of the way the deletion of untracked
directories are reported. In the current implementation they are
deleted recursively but only the name of the top most directory is
printed out. The calling function does not know about any
subdirectories that could not be removed during the recursion.

Improve the way the deleted directories are reported back to
the user:
  (1) Create a recursive delete function 'remove_dirs' in builtin/clean.c
      to run in both dry_run and delete modes with the delete logic as
      follows:
        (a) Check if the current directory to be deleted is an untracked
            git repository. If it is and --force --force option is not set
            do not touch this directory, print ignore message, set dir_gone
            flag to false for the caller and return.
        (b) Otherwise for each item in current directory:
              (i)   If current directory cannot be accessed, print warning,
                    set dir_gone flag to false and return.
              (ii)  If the item is a subdirectory recurse into it,
                    check for the returned value of the dir_gone flag.
                    If the subdirectory is gone, add the name of the deleted
                    directory to a list of successfully removed items 'dels'.
                    Else set the dir_gone flag as the current directory
                    cannot be removed because we have at least one subdirectory
                    hanging around.
              (iii) If it is a file try to remove it. If success add the
                    file name to the 'dels' list, else print error and set
                    dir_gone flag to false.
        (c) After we finished deleting all items in the current directory and
            the dir_gone flag is still true, remove the directory itself.
            If failed set the dir_gone flag to false.

        (d) If the current directory cannot be deleted because the dir_gone flag
            has been set to false, print out all the successfully deleted items
            for this directory from the 'dels' list.
        (e) We're done with the current directory, return.

  (2) Modify the cmd_clean() function to:
        (a) call the recursive delete function 'remove_dirs()' for each
            topmost directory it wants to remove
        (b) check for the returned value of dir_gone flag. If it's true
            print the name of the directory as being removed.

Consider the output of the improved version:

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Skipping repository untracked_foo/frotz.git
  Removing untracked_foo/bar
  Removing untracked_foo/emptydir
  Skipping repository untracked_some.git/

Now it displays only the file and directory names that got actually
deleted and shows the name of the untracked git repositories it ignored.

Reported-by: Soren Brinkmann <soren.brinkmann@xilinx.com>

Signed-off-by: Zoltan Klinger <zoltan.klinger@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/hunk_3958.cpp,,,data/crawl/git/old_hunk_3958.cpp,data/crawl/git/new_hunk_3958.cpp,27,-1,"printf(_(""Would remove %s\n""), qname);",,"[""removeLog""]","[[""printf"", ""_"", ""Would"", ""remove"", ""%s\\n"", ""qname""], []]",[-6178162584540481448],5667,0:00:00
https://github.com/git/git/commit/620a6cd42ed5ea94684b22714181bf03871733dd,06 Nov 2007,"builtin-reset: avoid forking ""update-index --refresh""

Instead of forking update-index, call refresh_cache() directly.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/hunk_7822.cpp,,,data/crawl/git/old_hunk_7822.cpp,data/crawl/git/new_hunk_7822.cpp,-1,18,,"error (""Could not refresh index"");","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""refresh"", ""index""]]",[16936978621706528200],5666,"948 days, 12:00:00"
https://github.com/git/git/commit/01a19dfc1ac53011deef492b21e52bf7840cef49,15 Jan 2013,"reset.c: move lock, write and commit out of update_index_refresh()

In preparation for the/a following patch, move the locking, writing
and committing of the index file out of update_index_refresh(). The
code duplication caused will soon be taken care of. What remains of
update_index_refresh() is just one line, but it is still called from
two places, so let's leave it for now.

In the process, we expose and fix the minor UI bug that makes us print
""Could not refresh index"" when we fail to write the index file when
invoked with a pathspec. Copy the error message from the pathspec-less
codepath (""Could not write new index file."").

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_3949.cpp,,,data/crawl/git/old_hunk_3949.cpp,data/crawl/git/new_hunk_3949.cpp,14,-1,"error (""Could not refresh index"");",,"[""removeLog""]","[[""error"", ""Could"", ""not"", ""refresh"", ""index""], []]",[-16936978621706528200],5665,0:00:00
https://github.com/git/git/commit/eff80a9fd990de3605063050dae32f969ef18ba8,16 Jan 2013,"Allow custom ""comment char""

Some users do want to write a line that begin with a pound sign, #,
in their commit log message.  Many tracking system recognise
a token of #<bugid> form, for example.

The support we offer these use cases is not very friendly to the end
users.  They have a choice between

 - Don't do it.  Avoid such a line by rewrapping or indenting; and

 - Use --cleanup=whitespace but remove all the hint lines we add.

Give them a way to set a custom comment char, e.g.

    $ git -c core.commentchar=""%"" commit

so that they do not have to do either of the two workarounds.

[jc: although I started the topic, all the tests and documentation
updates, many of the call sites of the new strbuf_add_commented_*()
functions, and the change to git-submodule.sh scripted Porcelain are
from Ralf.]

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",362,data/crawl/git/hunk_3936.cpp,,,data/crawl/git/old_hunk_3936.cpp,data/crawl/git/new_hunk_3936.cpp,6,6,"status_printf(s, GIT_COLOR_NORMAL,
				_(""Please enter the commit message for your changes.""
				"" Lines starting\n""
				""with '#' will be kept; you may remove them""
				"" yourself if you want to.\n""
				""An empty message aborts the commit.\n""));","status_printf(s, GIT_COLOR_NORMAL,
				_(""Please enter the commit message for your changes.""
				  "" Lines starting\n""
				  ""with '%c' will be kept; you may remove them""
				  "" yourself if you want to.\n""
				  ""An empty message aborts the commit.\n""), comment_line_char);","[""updateContent"", ""addVariable""]","[[], [""%c"", ""comment_line_char""]]",[3571223978602947056],5664,0:00:00
https://github.com/git/git/commit/435c83323713066723e4194cd89c31bbec7011a2,05 Oct 2012,"upload-pack: use peel_ref for ref advertisements

When upload-pack advertises refs, we attempt to peel tags
and advertise the peeled version. We currently hand-roll the
tag dereferencing, and use as many optimizations as we can
to avoid loading non-tag objects into memory.

Not only has peel_ref recently learned these optimizations,
too, but it also contains an even more important one: it
has access to the ""peeled"" data from the pack-refs file.
That means we can avoid not only loading annotated tags
entirely, but also avoid doing any kind of object lookup at
all.

This cut the CPU time to advertise refs by 50% in the
linux-2.6 repo, as measured by:

  echo 0000 | git-upload-pack . >/dev/null

best-of-five, warm cache, objects and refs fully packed:

  [before]             [after]
  real    0m0.026s     real    0m0.013s
  user    0m0.024s     user    0m0.008s
  sys     0m0.000s     sys     0m0.000s

Those numbers are irrelevantly small compared to an actual
fetch. Here's a larger repo (400K refs, of which 12K are
unique, and of which only 107 are unique annotated tags):

  [before]             [after]
  real    0m0.704s     real    0m0.596s
  user    0m0.600s     user    0m0.496s
  sys     0m0.096s     sys     0m0.092s

This shows only a 15% speedup (mostly because it has fewer
actual tags to parse), but a larger absolute value (100ms,
which isn't a lot compared to a real fetch, but this
advertisement happens on every fetch, even if the client is
just finding out they are completely up to date).

In truly pathological cases, where you have a large number
of unique annotated tags, it can make an even bigger
difference. Here are the numbers for a linux-2.6 repository
that has had every seventh commit tagged (so about 50K
tags):

  [before]             [after]
  real    0m0.443s     real    0m0.097s
  user    0m0.416s     user    0m0.080s
  sys     0m0.024s     sys     0m0.012s

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4061.cpp,,,data/crawl/git/old_hunk_4061.cpp,data/crawl/git/new_hunk_4061.cpp,7,-1,"die(""git upload-pack: cannot find object %s:"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""git"", ""upload"", ""pack"", ""cannot"", ""find"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""], []]",[9786712846287803548],5663,"52 days, 12:00:00"
https://github.com/git/git/commit/42526b478e369d7e8c9a95186ad87fae9930eea5,05 Nov 2009,"Add stateless RPC options to upload-pack, receive-pack

When --stateless-rpc is passed as a command line parameter to
upload-pack or receive-pack the programs now assume they may
perform only a single read-write cycle with stdin and stdout.
This fits with the HTTP POST request processing model where a
program may read the request, write a response, and must exit.

When --advertise-refs is passed as a command line parameter only
the initial ref advertisement is output, and the program exits
immediately.  This fits with the HTTP GET request model, where
no request content is received but a response must be produced.

HTTP headers and/or environment are not processed here, but
instead are assumed to be handled by the program invoking
either service backend.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_5567.cpp,,,data/crawl/git/old_hunk_5567.cpp,data/crawl/git/new_hunk_5567.cpp,-1,7,,"die(""git upload-pack: cannot find object %s:"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""git"", ""upload"", ""pack"", ""cannot"", ""find"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-9786712846287803548],5662,"585 days, 0:00:00"
https://github.com/git/git/commit/776670519823b5c49ff4107dc9f77706fa37bb76,03 Feb 2013,"combine-diff: lift 32-way limit of combined diff

The ""raw"" format of combine-diff output is supposed to have as many
colons as there are parents at the beginning, then blob modes for
these parents, and then object names for these parents.

We weren't however prepared to handle a more than 32-way merge and
did not show the correct number of colons in such a case.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_3909.cpp,,,data/crawl/git/old_hunk_3909.cpp,data/crawl/git/new_hunk_3909.cpp,13,10,"printf(""%s%06o"", prefix, p->mode);","printf(""%06o"", p->mode);","[""removeVariable"", ""updateContent""]","[[""%s%06o"", ""prefix""], [""%06o""]]",[6909178821601311588],5661,0:00:00
https://github.com/git/git/commit/0722c805d616eb644a868a995b891470f9e5e30d,05 Feb 2013,"status: show the branch name if possible in in-progress info

The typical use-case is starting a rebase, do something else, come
back the day after, run ""git status"" or make a new commit and wonder
what in the world's going on. Which branch is being rebased is
probably the most useful tidbit to help, but the target may help
too.

Ideally, I would have loved to see ""rebasing master on
origin/master"", but the target ref name is not stored during rebase,
so this patch writes ""rebasing master on a78c8c98b"" as a
half-measure to remind future users of that potential improvement.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/hunk_3907.cpp,,,data/crawl/git/old_hunk_3907.cpp,data/crawl/git/new_hunk_3907.cpp,-1,4,,"status_printf_ln(s, color,
					 _(""You are currently rebasing branch '%s' on '%s'.""),
					 state->branch,
					 state->onto);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""color"", ""_"", ""You"", ""are"", ""currently"", ""rebasing"", ""branch"", ""%s"", ""on"", ""%s"", ""state"", ""branch"", ""state"", ""onto""]]",[-7894644087246213499],5660,0:00:00
https://github.com/git/git/commit/30997bb8f11bd6e63a582c3b4e029ca47868ad8d,12 Feb 2013,"diff.c: use diff_line_prefix() where applicable

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",115,data/crawl/git/hunk_3887.cpp,,,data/crawl/git/old_hunk_3887.cpp,data/crawl/git/new_hunk_3887.cpp,7,3,"fprintf(options->file, ""%s"", msg->buf);","fprintf(options->file, ""%s"", diff_line_prefix(options));","[""removeVariable"", ""addVariable""]","[[""msg"", ""buf""], [""diff_line_prefix"", ""options""]]",[-974902944878204782],5659,0:00:00
https://github.com/git/git/commit/41ee2ad6cbebab0429248a14ec4e02afddd60dbe,12 Feb 2013,"combine-diff.c: teach combined diffs about line prefix

When running ""git log --graph --cc -p"" the diff output for merges is not
indented by the graph structure, unlike the diffs of non-merge commits
(added in commit 7be5761 - diff.c: Output the text graph padding before
each diff line).

Fix this by teaching the combined diff code to output diff_line_prefix()
before each line.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_3883.cpp,,,data/crawl/git/old_hunk_3883.cpp,data/crawl/git/new_hunk_3883.cpp,-1,3,,"printf(""%s%c"", diff_line_prefix(opt),
				       opt->line_termination);","[""addLog""]","[[], [""printf"", ""%s%c"", ""diff_line_prefix"", ""opt"", ""opt"", ""line_termination""]]",[33329158487564255481],5658,0:00:00
https://github.com/git/git/commit/b62fb077d5504deadea931fd16075729f39b8f47,20 Feb 2013,"imap-send: the subject of SSL certificate must match the host

We did not check a valid certificate's subject at all, and would
have happily talked with a wrong host after connecting to an
incorrect address and getting a valid certificate that does not
belong to the host we intended to talk to.

Signed-off-by: Oswald Buddenhagen <ossi@kde.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3869.cpp,,,data/crawl/git/old_hunk_3869.cpp,data/crawl/git/new_hunk_3869.cpp,-1,7,,"error(""unable to get peer certificate."");","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""get"", ""peer"", ""certificate""]]",[11628568779144910496],5657,0:00:00
https://github.com/git/git/commit/b62fb077d5504deadea931fd16075729f39b8f47,20 Feb 2013,"imap-send: the subject of SSL certificate must match the host

We did not check a valid certificate's subject at all, and would
have happily talked with a wrong host after connecting to an
incorrect address and getting a valid certificate that does not
belong to the host we intended to talk to.

Signed-off-by: Oswald Buddenhagen <ossi@kde.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3868.cpp,,,data/crawl/git/old_hunk_3868.cpp,data/crawl/git/new_hunk_3868.cpp,-1,28,,"error(""certificate owner '%s' does not match hostname '%s'"",
		     cname, hostname);","[""addLog""]","[[], [""error"", ""certificate"", ""owner"", ""%s"", ""does"", ""not"", ""match"", ""hostname"", ""%s"", ""cname"", ""hostname""]]",[38268892140721167363],5656,0:00:00
https://github.com/git/git/commit/b62fb077d5504deadea931fd16075729f39b8f47,20 Feb 2013,"imap-send: the subject of SSL certificate must match the host

We did not check a valid certificate's subject at all, and would
have happily talked with a wrong host after connecting to an
incorrect address and getting a valid certificate that does not
belong to the host we intended to talk to.

Signed-off-by: Oswald Buddenhagen <ossi@kde.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3868.cpp,,,data/crawl/git/old_hunk_3868.cpp,data/crawl/git/new_hunk_3868.cpp,-1,25,,"error(""cannot get certificate common name"");","[""addLog""]","[[], [""error"", ""cannot"", ""get"", ""certificate"", ""common"", ""name""]]",[384858263041795601],5655,0:00:00
https://github.com/git/git/commit/b62fb077d5504deadea931fd16075729f39b8f47,20 Feb 2013,"imap-send: the subject of SSL certificate must match the host

We did not check a valid certificate's subject at all, and would
have happily talked with a wrong host after connecting to an
incorrect address and getting a valid certificate that does not
belong to the host we intended to talk to.

Signed-off-by: Oswald Buddenhagen <ossi@kde.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3868.cpp,,,data/crawl/git/old_hunk_3868.cpp,data/crawl/git/new_hunk_3868.cpp,-1,23,,"error(""cannot get certificate subject"");","[""addLog""]","[[], [""error"", ""cannot"", ""get"", ""certificate"", ""subject""]]",[-313266329507501098],5654,0:00:00
https://github.com/git/git/commit/8b1bd024154f0ee0d71a6befe9bbd96462e76abc,01 Mar 2013,"Make !pattern in .gitattributes non-fatal

Before 82dce99 (attr: more matching optimizations from .gitignore,
2012-10-15), .gitattributes did not have any special treatment of a
leading '!'.  The docs, however, always said

  The rules how the pattern matches paths are the same as in
  `.gitignore` files; see linkgit:gitignore[5].

By those rules, leading '!' means pattern negation.  So 82dce99
correctly determined that this kind of line makes no sense and should
be disallowed.

However, users who actually had a rule for files starting with a '!'
are in a bad position: before 82dce99 '!' matched that literal
character, so it is conceivable that users have .gitattributes with
such lines in them.  After 82dce99 the unescaped version was
disallowed in such a way that git outright refuses to run(!) most
commands in the presence of such a .gitattributes.  It therefore
becomes very hard to fix, let alone work with, such repositories.

Let's at least allow the users to fix their repos: change the fatal
error into a warning.

Reported-by: mathstuf@gmail.com
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_3831.cpp,,,data/crawl/git/old_hunk_3831.cpp,data/crawl/git/new_hunk_3831.cpp,4,4,"die(_(""Negative patterns are forbidden in git attributes\n""
			      ""Use '\\!' for literal leading exclamation.""));","warning(_(""Negative patterns are ignored in git attributes\n""
				  ""Use '\\!' for literal leading exclamation.""));","[""updateLog"", ""updateContent""]","[[""die"", ""forbidden""], [""warning"", ""ignored""]]",[-15985838761960551519],5653,0:00:00
https://github.com/git/git/commit/98f85ff4b65b565bae0592ded494d67045cbd3bf,08 Mar 2013,"reflog: add for_each_reflog_ent_reverse() API

""git checkout -"" is a short-hand for ""git checkout @{-1}"" and the
""@{nth}"" notation for a negative number is to find nth previous
checkout in the reflog of the HEAD to determine the name of the
branch the user was on.  We would want to find the nth most recent
reflog entry that matches ""checkout: moving from X to Y"" for this.

Unfortunately, reflog is implemented as an append-only file, and the
API to iterate over its entries, for_each_reflog_ent(), reads the
file in order, giving the entries from the oldest to newer.  For the
purpose of finding nth most recent one, this API forces us to record
the last n entries in a rotating buffer and give the result out only
after we read everything.  To optimize for a common case of finding
the nth most recent one for a small value of n, we also have a side
API for_each_recent_reflog_ent() that starts reading near the end of
the file, but it still has to read the entries in the ""wrong"" order.
The implementation of understanding @{-1} uses this interface.

This all becomes unnecessary if we add an API to let us iterate over
reflog entries in the reverse order, from the newest to older.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/hunk_3827.cpp,,,data/crawl/git/old_hunk_3827.cpp,data/crawl/git/new_hunk_3827.cpp,-1,39,,"error(""cannot seek back reflog for %s: %s"",
				     refname, strerror(errno));","[""addLog""]","[[], [""error"", ""cannot"", ""seek"", ""back"", ""reflog"", ""for"", ""%s"", ""%s"", ""refname"", ""strerror"", ""errno""]]",[26706076612612143981],5652,0:00:00
https://github.com/git/git/commit/b2981d06226ab0fdabf9110c3be7104110b307ae,17 Mar 2013,"sha1_name: pass object name length to diagnose_invalid_sha1_path()

The only caller of diagnose_invalid_sha1_path() extracts a substring from
an object name by creating a NUL-terminated copy of the interesting part.
Add a length parameter to the function and thus avoid the need for an
allocation, thereby simplifying the code.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_3819.cpp,,,data/crawl/git/old_hunk_3819.cpp,data/crawl/git/new_hunk_3819.cpp,11,11,"die(""Path '%s' does not exist in '%s'"",
		    filename, object_name);","die(""Path '%s' does not exist in '%.*s'"",
		    filename, object_name_len, object_name);","[""updateContent"", ""addVariable""]","[[""%s""], [""%"", ""*s"", ""object_name_len""]]",[-1826286895730317421],5651,0:00:00
https://github.com/git/git/commit/12da1d1f6ffcd546a892a33302bb34fd37169022,28 Mar 2013,"Implement line-history search (git log -L)

This is a rewrite of much of Bo's work, mainly in an effort to split
it into smaller, easier to understand routines.

The algorithm is built around the struct range_set, which encodes a
series of line ranges as intervals [a,b).  This is used in two
contexts:

* A set of lines we are tracking (which will change as we dig through
  history).
* To encode diffs, as pairs of ranges.

The main routine is range_set_map_across_diff().  It processes the
diff between a commit C and some parent P.  It determines which diff
hunks are relevant to the ranges tracked in C, and computes the new
ranges for P.

The algorithm is then simply to process history in topological order
from newest to oldest, computing ranges and (partial) diffs.  At
branch points, we need to merge the ranges we are watching.  We will
find that many commits do not affect the chosen ranges, and mark them
TREESAME (in addition to those already filtered by pathspec limiting).
Another pass of history simplification then gets rid of such commits.

This is wired as an extra filtering pass in the log machinery.  This
currently only reduces code duplication, but should allow for other
simplifications and options to be used.

Finally, we hook a diff printer into the output chain.  Ideally we
would wire directly into the diff logic, to optionally use features
like word diff.  However, that will require some major reworking of
the diff chain, so we completely replace the output with our own diff
for now.

As this was a GSoC project, and has quite some history by now, many
people have helped.  In no particular order, thanks go to

  Jakub Narebski <jnareb@gmail.com>
  Jens Lehmann <Jens.Lehmann@web.de>
  Jonathan Nieder <jrnieder@gmail.com>
  Junio C Hamano <gitster@pobox.com>
  Ramsay Jones <ramsay@ramsay1.demon.co.uk>
  Will Palmer <wmpalmer@gmail.com>

Apologies to everyone I forgot.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2158,data/crawl/git/hunk_3791.cpp,,,data/crawl/git/old_hunk_3791.cpp,data/crawl/git/new_hunk_3791.cpp,-1,37,,f(15);,"[""addLog""]","[[], [""f"", ""15""]]",[6272050737095883],5650,0:00:00
https://github.com/git/git/commit/640d0401be5f29db8c9e914d8a19dbc9b950448d,30 Jan 2013,"branch: reject -D/-d without branch name

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_3920.cpp,,,data/crawl/git/old_hunk_3920.cpp,data/crawl/git/new_hunk_3920.cpp,-1,5,,"die(_(""branch name required""));","[""addLog""]","[[], [""die"", ""_"", ""branch"", ""name"", ""required""]]",[-18182268332187100851],5649,"30 days, 12:00:00"
https://github.com/git/git/commit/e2b6aa5f1b85d5f49f0cf280162cf216e55e1eba,02 Apr 2013,"branch: factor out ""upstream is not a branch"" error messages

This message is duplicated, and is quite long. Let's factor
it out, which avoids the repetition and the long lines. It
will also make future patches easier as we tweak the
message.

While we're at it, let's also mark it for translation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_3775.cpp,,,data/crawl/git/old_hunk_3775.cpp,data/crawl/git/new_hunk_3775.cpp,10,10,"die(""Cannot setup tracking information; starting point is not a branch."");",die(_(upstream_not_branch));,"[""removeContent"", ""addVariable""]","[[""Cannot"", ""setup"", ""tracking"", ""information"", ""starting"", ""point"", ""is"", ""not"", ""a"", ""branch""], [""_"", ""upstream_not_branch""]]",[17583444800088908985],5648,0:00:00
https://github.com/git/git/commit/f7892d181752187513f10b13f2272fa46c9c8422,17 Mar 2013,"use parse_object_or_die instead of die(""bad object"")

Some call-sites do:

  o = parse_object(sha1);
  if (!o)
	  die(""bad object %s"", some_name);

We can now handle that as a one-liner, and get more
consistent output.

In the third case of this patch, it looks like we are losing
information, as the existing message also outputs the sha1
hex; however, parse_object will already have written a more
specific complaint about the sha1, so there is no point in
repeating it here.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3814.cpp,,,data/crawl/git/old_hunk_3814.cpp,data/crawl/git/new_hunk_3814.cpp,7,-1,"die(""bad object ref: %s:%s"", path, sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""bad"", ""object"", ""ref"", ""%s"", ""%s"", ""path"", ""sha1_to_hex"", ""sha1""], []]",[5799639003627607990],5647,"8 days, 12:00:00"
https://github.com/git/git/commit/c29c46fa2e21e608ce2e603649af5bf38e7969c2,18 Mar 2013,"pack-refs: add fully-peeled trait

Older versions of pack-refs did not write peel lines for
refs outside of refs/tags. This meant that on reading the
pack-refs file, we might set the REF_KNOWS_PEELED flag for
such a ref, even though we do not know anything about its
peeled value.

The previous commit updated the writer to always peel, no
matter what the ref is. That means that packed-refs files
written by newer versions of git are fine to be read by both
old and new versions of git. However, we still have the
problem of reading packed-refs files written by older
versions of git, or by other implementations which have not
yet learned the same trick.

The simplest fix would be to always unset the
REF_KNOWS_PEELED flag for refs outside of refs/tags that do
not have a peel line (if it has a peel line, we know it is
valid, but we cannot assume a missing peel line means
anything). But that loses an important optimization, as
upload-pack should not need to load the object pointed to by
refs/heads/foo to determine that it is not a tag.

Instead, we add a ""fully-peeled"" trait to the packed-refs
file. If it is set, we know that we can trust a missing peel
line to mean that a ref cannot be peeled. Otherwise, we fall
back to assuming nothing.

[commit message and tests by Jeff King <peff@peff.net>]

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/hunk_3808.cpp,,,data/crawl/git/old_hunk_3808.cpp,data/crawl/git/new_hunk_3808.cpp,3,3,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled \n"");","fprintf(cbdata.refs_file, ""# pack-refs with: peeled fully-peeled \n"");","[""updateContent""]","[[], [""fully"", ""peeled""]]",[-7231319723177387212],5646,"8 days, 0:00:00"
https://github.com/git/git/commit/75a95490474ab6e991cbbbd10d980498a9109648,17 Mar 2013,"avoid segfaults on parse_object failure

Many call-sites of parse_object assume that they will get a
non-NULL return value; this is not the case if we encounter
an error while parsing the object.

This patch adds a wrapper function around parse_object that
handles dying automatically, and uses it anywhere we
immediately try to access the return value as a non-NULL
pointer (i.e., anywhere that we would currently segfault).

This wrapper may also be useful in other places. The most
obvious one is code like:

  o = parse_object(sha1);
  if (!o)
	  die(...);

However, these should not be mechanically converted to
parse_object_or_die, as the die message is sometimes
customized. Later patches can address these sites on a
case-by-case basis.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_3815.cpp,,,data/crawl/git/old_hunk_3815.cpp,data/crawl/git/new_hunk_3815.cpp,-1,10,,"die(_(""unable to parse object: %s""), name ? name : sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""_"", ""unable"", ""to"", ""parse"", ""object"", ""%s"", ""name"", ""name"", ""sha1_to_hex"", ""sha1""]]",[-17878744095904492543],5645,"8 days, 12:00:00"
https://github.com/git/git/commit/f7892d181752187513f10b13f2272fa46c9c8422,17 Mar 2013,"use parse_object_or_die instead of die(""bad object"")

Some call-sites do:

  o = parse_object(sha1);
  if (!o)
	  die(""bad object %s"", some_name);

We can now handle that as a one-liner, and get more
consistent output.

In the third case of this patch, it looks like we are losing
information, as the existing message also outputs the sha1
hex; however, parse_object will already have written a more
specific complaint about the sha1, so there is no point in
repeating it here.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3813.cpp,,,data/crawl/git/old_hunk_3813.cpp,data/crawl/git/new_hunk_3813.cpp,5,-1,"die(""bad object: %s"", name);",,"[""removeLog""]","[[""die"", ""bad"", ""object"", ""%s"", ""name""], []]",[10844179070069672599],5644,"8 days, 12:00:00"
https://github.com/git/git/commit/f7892d181752187513f10b13f2272fa46c9c8422,17 Mar 2013,"use parse_object_or_die instead of die(""bad object"")

Some call-sites do:

  o = parse_object(sha1);
  if (!o)
	  die(""bad object %s"", some_name);

We can now handle that as a one-liner, and get more
consistent output.

In the third case of this patch, it looks like we are losing
information, as the existing message also outputs the sha1
hex; however, parse_object will already have written a more
specific complaint about the sha1, so there is no point in
repeating it here.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3812.cpp,,,data/crawl/git/old_hunk_3812.cpp,data/crawl/git/new_hunk_3812.cpp,5,-1,"die(_(""bad object %s""), arg);",,"[""removeLog""]","[[""die"", ""_"", ""bad"", ""object"", ""%s"", ""arg""], []]",[5224520841559839111],5643,"8 days, 12:00:00"
https://github.com/git/git/commit/0f33a0677d6d93b3f6d8fb7d1df62f30eb7b73a9,05 Apr 2013,"submodule: print graph output next to submodule log

When running ""git log -p --submodule=log"", the submodule log is not
indented by the graph output, although all other lines are.  Fix this by
prepending the current line prefix to each line of the submodule log.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_3759.cpp,,,data/crawl/git/old_hunk_3759.cpp,data/crawl/git/new_hunk_3759.cpp,5,6,"fprintf(f, ""Submodule %s contains modified content\n"", path);","fprintf(f, ""%sSubmodule %s contains modified content\n"",
			line_prefix, path);","[""updateContent"", ""addVariable""]","[[""Submodule""], [""%sSubmodule"", ""line_prefix""]]",[202790813550677860],5642,0:00:00
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5743.cpp,,,data/crawl/git/old_hunk_5743.cpp,data/crawl/git/new_hunk_5743.cpp,35,-1,"die(""%s not found: did you run git update-server-info on the""
		    "" server?"", refs_url);",,"[""removeLog""]","[[""die"", ""%s"", ""not"", ""found"", ""did"", ""you"", ""run"", ""git"", ""update"", ""server"", ""info"", ""on"", ""the"", ""server"", ""refs_url""], []]",[29276283679114300153],5641,"670 days, 12:00:00"
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5743.cpp,,,data/crawl/git/old_hunk_5743.cpp,data/crawl/git/new_hunk_5743.cpp,39,-1,"die(""HTTP request failed"");",,"[""removeLog""]","[[""die"", ""HTTP"", ""request"", ""failed""], []]",[4849183399772948918],5640,"670 days, 12:00:00"
https://github.com/git/git/commit/62901179cfbb86e31a4bed098cee9734a701912b,12 Apr 2013,"i18n: make the translation of -u advice in one go

The advice (consider use of -u when read_directory takes too long) is
separated into 3 different status_printf_ln() calls, and which brings
trouble for translators.

Since status_vprintf() called by status_printf_ln() can handle eol in
buffer, we could simply join these lines into one paragraph.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3724.cpp,,,data/crawl/git/old_hunk_3724.cpp,data/crawl/git/new_hunk_3724.cpp,9,-1,"status_printf_ln(s, GIT_COLOR_NORMAL,
				 _(""new files yourself (see 'git help status').""));",,"[""removeLog""]","[[""status_printf_ln"", ""s"", ""GIT_COLOR_NORMAL"", ""_"", ""new"", ""files"", ""yourself"", ""see"", ""git"", ""help"", ""status""], []]",[-13782933982585709317],5639,0:00:00
https://github.com/git/git/commit/62901179cfbb86e31a4bed098cee9734a701912b,12 Apr 2013,"i18n: make the translation of -u advice in one go

The advice (consider use of -u when read_directory takes too long) is
separated into 3 different status_printf_ln() calls, and which brings
trouble for translators.

Since status_vprintf() called by status_printf_ln() can handle eol in
buffer, we could simply join these lines into one paragraph.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3724.cpp,,,data/crawl/git/old_hunk_3724.cpp,data/crawl/git/new_hunk_3724.cpp,6,-1,"status_printf_ln(s, GIT_COLOR_NORMAL,
				 _(""may speed it up, but you have to be careful not""
				   "" to forget to add""));",,"[""removeLog""]","[[""status_printf_ln"", ""s"", ""GIT_COLOR_NORMAL"", ""_"", ""may"", ""speed"", ""it"", ""up"", ""but"", ""you"", ""have"", ""to"", ""be"", ""careful"", ""not"", ""to"", ""forget"", ""to"", ""add""], []]",[-20314274499931025725],5638,0:00:00
https://github.com/git/git/commit/62901179cfbb86e31a4bed098cee9734a701912b,12 Apr 2013,"i18n: make the translation of -u advice in one go

The advice (consider use of -u when read_directory takes too long) is
separated into 3 different status_printf_ln() calls, and which brings
trouble for translators.

Since status_vprintf() called by status_printf_ln() can handle eol in
buffer, we could simply join these lines into one paragraph.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3724.cpp,,,data/crawl/git/old_hunk_3724.cpp,data/crawl/git/new_hunk_3724.cpp,2,2,"status_printf_ln(s, GIT_COLOR_NORMAL,
				 _(""It took %.2f seconds to enumerate untracked files.""
				   ""  'status -uno'""),
				 s->untracked_in_ms / 1000.0);","status_printf_ln(s, GIT_COLOR_NORMAL,
					 _(""It took %.2f seconds to enumerate untracked files. 'status -uno'\n""
					   ""may speed it up, but you have to be careful not to forget to add\n""
					   ""new files yourself (see 'git help status').""),
					 s->untracked_in_ms / 1000.0);","[""updateContent"", ""addContent""]","[[], [""\\n"", ""may"", ""speed"", ""it"", ""up"", ""but"", ""you"", ""have"", ""to"", ""be"", ""careful"", ""not"", ""to"", ""forget"", ""to"", ""add\\n"", ""new"", ""files"", ""yourself"", ""see"", ""git"", ""help"", ""status""]]",[18252078245190940296],5637,0:00:00
https://github.com/git/git/commit/63d285c8494d03a08600bb4453fcce077ecdd517,29 Nov 2007,"per-directory-exclude: lazily read .gitignore files

Operations that walk directories or trees, which potentially need to
consult the .gitignore files, used to always try to open the .gitignore
file every time they entered a new directory, even when they ended up
not needing to call excluded() function to see if a path in the
directory is ignored.  This was done by push/pop exclude_per_directory()
functions that managed the data in a stack.

This changes the directory walking API to remove the need to call these
two functions.  Instead, the directory walk data structure caches the
data used by excluded() function the last time, and lazily reuses it as
much as possible.  Among the data the last check used, the ones from
deeper directories that the path we are checking is outside are
discarded, data from the common leading directories are reused, and then
the directories between the common directory and the directory the path
being checked is in are checked for .gitignore file.  This is very
similar to the way gitattributes are handled.

This API change also fixes ""ls-files -c -i"", which called excluded()
without setting up the gitignore data via the old push/pop functions.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_7728.cpp,,,data/crawl/git/old_hunk_7728.cpp,data/crawl/git/new_hunk_7728.cpp,-1,44,,"die(""oops in prep_exclude"");","[""addLog""]","[[], [""die"", ""oops"", ""in"", ""prep_exclude""]]",[4453539144127711411],5636,"982 days, 0:00:00"
https://github.com/git/git/commit/3d27b9b005f26b107227fc18b6648df329daee97,17 Apr 2013,"date.c: add parse_expiry_date()

""git reflog --expire=all"" tries to expire reflog entries up to the
current second, because the approxidate() parser gives the current
timestamp for anything it does not understand (and it does not know
what time ""all"" means).  When the user tells us to expire ""all"" (or
set the expiration time to ""now""), the user wants to remove all the
reflog entries (no reflog entry should record future time).

Just set it to ULONG_MAX and to let everything that is older that
timestamp expire.

While at it, allow ""now"" to be treated the same way for callers that
parse expiry date timestamp with this function.  Also use an error
reporting version of approxidate() to report misspelled date.  When
the user says e.g. ""--expire=mnoday"" to delete entries two days or
older on Wednesday, we wouldn't want the ""unknown, default to now""
logic to kick in.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_3701.cpp,,,data/crawl/git/old_hunk_3701.cpp,data/crawl/git/new_hunk_3701.cpp,-1,9,,"die(_(""'%s' is not a valid timestamp""), arg);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""not"", ""a"", ""valid"", ""timestamp"", ""arg""]]",[-2137468373127312902],5635,0:00:00
https://github.com/git/git/commit/662428f4e98a740800659081910ef8b1ef3940fa,01 May 2013,"refs: extract a function ref_resolves_to_object()

It is a nice unit of work and soon will be needed from multiple
locations.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_3681.cpp,,,data/crawl/git/old_hunk_3681.cpp,data/crawl/git/new_hunk_3681.cpp,-1,13,,"error(""%s does not point to a valid object!"", entry->name);","[""addLog""]","[[], [""error"", ""%s"", ""does"", ""not"", ""point"", ""to"", ""a"", ""valid"", ""object"", ""entry"", ""name""]]",[-22852453714588113964],5634,0:00:00
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7074.cpp,,,data/crawl/git/old_hunk_7074.cpp,data/crawl/git/new_hunk_7074.cpp,-1,46,,"fprintf(cb->refs_file, ""^%s\n"",
					sha1_to_hex(o->sha1));","[""addLog""]","[[], [""fprintf"", ""cb"", ""refs_file"", ""%s\\n"", ""sha1_to_hex"", ""o"", ""sha1""]]",[3248838430025742882],5633,"888 days, 12:00:00"
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7074.cpp,,,data/crawl/git/old_hunk_7074.cpp,data/crawl/git/new_hunk_7074.cpp,-1,40,,"fprintf(cb->refs_file, ""%s %s\n"", sha1_to_hex(sha1), path);","[""addLog""]","[[], [""fprintf"", ""cb"", ""refs_file"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""sha1"", ""path""]]",[7396124218116591211],5632,"888 days, 12:00:00"
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7073.cpp,,,data/crawl/git/old_hunk_7073.cpp,data/crawl/git/new_hunk_7073.cpp,51,-1,"fprintf(cb->refs_file, ""^%s\n"",
					sha1_to_hex(o->sha1));",,"[""removeLog""]","[[""fprintf"", ""cb"", ""refs_file"", ""%s\\n"", ""sha1_to_hex"", ""o"", ""sha1""], []]",[-3248838430025742882],5631,"888 days, 12:00:00"
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7073.cpp,,,data/crawl/git/old_hunk_7073.cpp,data/crawl/git/new_hunk_7073.cpp,45,-1,"fprintf(cb->refs_file, ""%s %s\n"", sha1_to_hex(sha1), path);",,"[""removeLog""]","[[""fprintf"", ""cb"", ""refs_file"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""sha1"", ""path""], []]",[-7396124218116591211],5630,"888 days, 12:00:00"
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3673.cpp,,,data/crawl/git/old_hunk_3673.cpp,data/crawl/git/new_hunk_3673.cpp,136,-1,"die_errno(""failed to write ref-pack file"");",,"[""removeLog""]","[[""die_errno"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file""], []]",[2191734077041785327],5629,0:00:00
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3673.cpp,,,data/crawl/git/old_hunk_3673.cpp,data/crawl/git/new_hunk_3673.cpp,130,-1,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled fully-peeled \n"");",,"[""removeLog""]","[[""fprintf"", ""cbdata"", ""refs_file"", ""pack"", ""refs"", ""with"", ""peeled"", ""fully"", ""peeled"", ""\\n""], []]",[17880795745878859489],5628,0:00:00
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3673.cpp,,,data/crawl/git/old_hunk_3673.cpp,data/crawl/git/new_hunk_3673.cpp,127,-1,"die_errno(""unable to create ref-pack file structure"");",,"[""removeLog""]","[[""die_errno"", ""unable"", ""to"", ""create"", ""ref"", ""pack"", ""file"", ""structure""], []]",[-694858147070458347],5627,0:00:00
https://github.com/git/git/commit/8dc6a373d201839859fe7924b63e57526ee2fc22,26 Feb 2011,"fast-import: add 'ls' command

Lazy fast-import frontend authors that want to rely on the backend to
keep track of the content of the imported trees _almost_ have what
they need in the 'cat-blob' command (v1.7.4-rc0~30^2~3, 2010-11-28).
But it is not quite enough, since

 (1) cat-blob can be used to retrieve the content of files, but
     not their mode, and

 (2) using cat-blob requires the frontend to keep track of a name
     (mark number or object id) for each blob to be retrieved

Introduce an 'ls' command to complement cat-blob and take care of the
remaining needs.  The 'ls' command finds what is at a given path
within a given tree-ish (tag, commit, or tree):

	'ls' SP <dataref> SP <path> LF

or in fast-import's active commit:

	'ls' SP <path> LF

The response is a single line sent through the cat-blob channel,
imitating ls-tree output.  So for example:

	FE> ls :1 Documentation
	gfi> 040000 tree 9e6c2b599341d28a2a375f8207507e0a2a627fe9	Documentation
	FE> ls 9e6c2b599341d28a2a375f8207507e0a2a627fe9 git-fast-import.txt
	gfi> 100644 blob 4f92954396e3f0f97e75b6838a5635b583708870	git-fast-import.txt
	FE> ls :1 RelNotes
	gfi> 120000 blob b942e499449d97aeb50c73ca2bdc1c6e6d528743	RelNotes
	FE> cat-blob b942e499449d97aeb50c73ca2bdc1c6e6d528743
	gfi> b942e499449d97aeb50c73ca2bdc1c6e6d528743 blob 32
	gfi> Documentation/RelNotes/1.7.4.txt

The most interesting parts of the reply are the first word, which is
a 6-digit octal mode (regular file, executable, symlink, directory,
or submodule), and the part from the second space to the tab, which is
a <dataref> that can be used in later cat-blob, ls, and filemodify (M)
commands to refer to the content (blob, tree, or commit) at that path.

If there is nothing there, the response is ""missing some/path"".

The intent is for this command to be used to read files from the
active commit, so a frontend can apply patches to them, and to copy
files and directories from previous revisions.

For example, proposed updates to svn-fe use this command in place of
its internal representation of the repository directory structure.
This simplifies the frontend a great deal and means support for
resuming an import in a separate fast-import run (i.e., incremental
import) is basically free.

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Improved-by: Junio C Hamano <gitster@pobox.com>
Improved-by: Sverre Rabbelier <srabbelier@gmail.com>",317,data/crawl/git/hunk_4821.cpp,,,data/crawl/git/old_hunk_4821.cpp,data/crawl/git/new_hunk_4821.cpp,-1,11,,"die(""object not found: %s"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""object"", ""not"", ""found"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-716883901214922058],5626,"400 days, 12:00:00"
https://github.com/git/git/commit/d0af663e42abfcd5be6f7c3db21a29e521aa4ca2,16 May 2013,"revision.c: Make --full-history consider more merges

History simplification previously always treated merges as TREESAME
if they were TREESAME to any parent.

While this was consistent with the default behaviour, this could be
extremely unhelpful when searching detailed history, and could not be
overridden. For example, if a merge had ignored a change, as if by ""-s
ours"", then:

  git log -m -p --full-history -Schange file

would successfully locate ""change""'s addition but would not locate the
merge that resolved against it.

Futher, simplify_merges could drop the actual parent that a commit
was TREESAME to, leaving it as a normal commit marked TREESAME that
isn't actually TREESAME to its remaining parent.

Now redefine a commit's TREESAME flag to be true only if a commit is
TREESAME to _all_ of its parents. This doesn't affect either the default
simplify_history behaviour (because partially TREESAME merges are turned
into normal commits), or full-history with parent rewriting (because all
merges are output). But it does affect other modes. The clearest
difference is that --full-history will show more merges - sufficient to
ensure that -m -p --full-history log searches can really explain every
change to the file, including those changes' ultimate fate in merges.

Also modify simplify_merges to recalculate TREESAME after removing
a parent. This is achieved by storing per-parent TREESAME flags on the
initial scan, so the combined flag can be easily recomputed.

This fixes some t6111 failures, but creates a couple of new ones -
we are now showing some merges that don't need to be shown.

Signed-off-by: Kevin Bracey <kevin@bracey.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",276,data/crawl/git/hunk_3653.cpp,,,data/crawl/git/old_hunk_3653.cpp,data/crawl/git/new_hunk_3653.cpp,-1,46,,"die(""compact_treesame %u"", nth_parent);","[""addLog""]","[[], [""die"", ""compact_treesame"", ""%u"", ""nth_parent""]]",[-16585711710377794416],5625,0:00:00
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/hunk_5595.cpp,,,data/crawl/git/old_hunk_5595.cpp,data/crawl/git/new_hunk_5595.cpp,-1,55,,"die(""helper %s does not support dry-run"", data->name);","[""addLog""]","[[], [""die"", ""helper"", ""%s"", ""does"", ""not"", ""support"", ""dry"", ""run"", ""data"", ""name""]]",[-23874525219880477593],5624,"649 days, 0:00:00"
https://github.com/git/git/commit/56881843d4d916a166ac4c6ba1803e5ceba9c44d,17 Nov 2010,"builtin/notes.c: Refactor creation of notes commits.

Create new function create_notes_commit() which is slightly more general than
commit_notes() (accepts multiple commit parents and does not auto-update the
notes ref). This function will be used by the notes-merge functionality in
future patches.

Also rewrite builtin/notes.c:commit_notes() to reuse this new function.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_4955.cpp,,,data/crawl/git/old_hunk_4955.cpp,data/crawl/git/new_hunk_4955.cpp,-1,26,,"die(""Failed to commit notes tree to database"");","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""commit"", ""notes"", ""tree"", ""to"", ""database""]]",[3008335514023294386],5623,"469 days, 0:00:00"
https://github.com/git/git/commit/56881843d4d916a166ac4c6ba1803e5ceba9c44d,17 Nov 2010,"builtin/notes.c: Refactor creation of notes commits.

Create new function create_notes_commit() which is slightly more general than
commit_notes() (accepts multiple commit parents and does not auto-update the
notes ref). This function will be used by the notes-merge functionality in
future patches.

Also rewrite builtin/notes.c:commit_notes() to reuse this new function.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_4955.cpp,,,data/crawl/git/old_hunk_4955.cpp,data/crawl/git/new_hunk_4955.cpp,-1,19,,"die(""Failed to find/parse commit %s"", t->ref);","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""find/parse"", ""commit"", ""%s"", ""t"", ""ref""]]",[-13273506509801657146],5622,"469 days, 0:00:00"
https://github.com/git/git/commit/56881843d4d916a166ac4c6ba1803e5ceba9c44d,17 Nov 2010,"builtin/notes.c: Refactor creation of notes commits.

Create new function create_notes_commit() which is slightly more general than
commit_notes() (accepts multiple commit parents and does not auto-update the
notes ref). This function will be used by the notes-merge functionality in
future patches.

Also rewrite builtin/notes.c:commit_notes() to reuse this new function.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_4955.cpp,,,data/crawl/git/old_hunk_4955.cpp,data/crawl/git/new_hunk_4955.cpp,-1,11,,"die(""Failed to write notes tree to database"");","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""write"", ""notes"", ""tree"", ""to"", ""database""]]",[7481939560792250473],5621,"469 days, 0:00:00"
https://github.com/git/git/commit/56881843d4d916a166ac4c6ba1803e5ceba9c44d,17 Nov 2010,"builtin/notes.c: Refactor creation of notes commits.

Create new function create_notes_commit() which is slightly more general than
commit_notes() (accepts multiple commit parents and does not auto-update the
notes ref). This function will be used by the notes-merge functionality in
future patches.

Also rewrite builtin/notes.c:commit_notes() to reuse this new function.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_4954.cpp,,,data/crawl/git/old_hunk_4954.cpp,data/crawl/git/new_hunk_4954.cpp,36,-1,"die(""Failed to commit notes tree to database"");",,"[""removeLog""]","[[""die"", ""Failed"", ""to"", ""commit"", ""notes"", ""tree"", ""to"", ""database""], []]",[-3008335514023294386],5620,"469 days, 0:00:00"
https://github.com/git/git/commit/10a3fb00ebbf19d5c22a0aa9ccd7803fe5367329,13 Jun 2013,"match-trees: factor out fill_tree_desc_strict

Deduplicate code by moving tree_desc initialization into a helper
function, fill_tree_desc_strict.  It is like fill_tree_descriptor,
except that it only accepts tree hashes and no tree references (tags,
commits).  No functional change.

Signed-off-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_3611.cpp,,,data/crawl/git/old_hunk_3611.cpp,data/crawl/git/new_hunk_3611.cpp,11,-1,"die(""%s is not a tree"", sha1_to_hex(hash1));",,"[""removeLog""]","[[""die"", ""%s"", ""is"", ""not"", ""a"", ""tree"", ""sha1_to_hex"", ""hash1""], []]",[-323041941435022297],5619,0:00:00
https://github.com/git/git/commit/10a3fb00ebbf19d5c22a0aa9ccd7803fe5367329,13 Jun 2013,"match-trees: factor out fill_tree_desc_strict

Deduplicate code by moving tree_desc initialization into a helper
function, fill_tree_desc_strict.  It is like fill_tree_descriptor,
except that it only accepts tree hashes and no tree references (tags,
commits).  No functional change.

Signed-off-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_3611.cpp,,,data/crawl/git/old_hunk_3611.cpp,data/crawl/git/new_hunk_3611.cpp,9,-1,"die(""unable to read tree (%s)"", sha1_to_hex(hash1));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""read"", ""tree"", ""%s"", ""sha1_to_hex"", ""hash1""], []]",[4792928641132806845],5618,0:00:00
https://github.com/git/git/commit/b95e66f507967fdfbf7275a94729fe09aa4b20ca,17 Jun 2013,"wt-status: give better advice when cherry-pick is in progress

When cherry-pick is in progress, 'git status' gives the advice to
run ""git commit"" to finish the cherry-pick.

However, this won't continue the sequencer, when picking a range of
commits.

Advise users to run ""git cherry-pick --continue/--abort""; they work
when picking a single commit as well.

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3598.cpp,,,data/crawl/git/old_hunk_3598.cpp,data/crawl/git/new_hunk_3598.cpp,5,5,"status_printf_ln(s, color,
				_(""  (all conflicts fixed: run \""git commit\"")""));","status_printf_ln(s, color,
				_(""  (all conflicts fixed: run \""git cherry-pick --continue\"")""));","[""updateContent""]","[[""commit\\""], [""cherry"", ""pick"", ""continue\\""]]",[-11759698121981117282],5617,0:00:00
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3674.cpp,,,data/crawl/git/old_hunk_3674.cpp,data/crawl/git/new_hunk_3674.cpp,-1,142,,"die_errno(""unable to overwrite old ref-pack file"");","[""addLog""]","[[], [""die_errno"", ""unable"", ""to"", ""overwrite"", ""old"", ""ref"", ""pack"", ""file""]]",[10439857723226535429],5616,"25 days, 0:00:00"
https://github.com/git/git/commit/7b2ecd81084adeba701c60da81eec6be478910b8,29 May 2013,"push: fail early with detached HEAD and current

Setting push.default to current adds the refspec ""HEAD"" for the
transport layer to handle.  If ""HEAD"" doesn't resolve to a branch (and
since no refspec rhs is specified), the push fails after some time with
a cryptic error message:

  $ git push
  error: unable to push to unqualified destination: HEAD
  The destination refspec neither matches an existing ref on the remote nor
  begins with refs/, and we are unable to guess a prefix based on the source ref.
  error: failed to push some refs to 'git@github.com:artagnon/git'

Fail early with a nicer error message:

  $ git push
  fatal: You are not currently on a branch.
  To push the history leading to the current (detached HEAD)
  state now, use

    git push ram HEAD:<name-of-remote-branch>

Just like in the upstream and simple cases.

Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_3628.cpp,,,data/crawl/git/old_hunk_3628.cpp,data/crawl/git/new_hunk_3628.cpp,-1,5,,"die(_(message_detached_head_die), remote->name);","[""addLog""]","[[], [""die"", ""_"", ""message_detached_head_die"", ""remote"", ""name""]]",[-5635557799187808035],5615,"13 days, 0:00:00"
https://github.com/git/git/commit/17696002086e8c6b9e998543d212e707c7d511ab,26 Jun 2013,"git-clean: add support for -i/--interactive

Show what would be done and the user must confirm before actually
cleaning.

    Would remove ...
    Would remove ...
    Would remove ...

    Remove [y/n]?

Press ""y"" to start cleaning, and press ""n"" if you want to abort.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_3554.cpp,,,data/crawl/git/old_hunk_3554.cpp,data/crawl/git/new_hunk_3554.cpp,8,8,"die(_(""clean.requireForce defaults to true and neither -n nor -f given; ""
				  ""refusing to clean""));","die(_(""clean.requireForce defaults to true and neither -i, -n nor -f given; ""
				  ""refusing to clean""));","[""updateContent""]","[[], [""i""]]",[13440040424],5614,0:00:00
https://github.com/git/git/commit/17696002086e8c6b9e998543d212e707c7d511ab,26 Jun 2013,"git-clean: add support for -i/--interactive

Show what would be done and the user must confirm before actually
cleaning.

    Would remove ...
    Would remove ...
    Would remove ...

    Remove [y/n]?

Press ""y"" to start cleaning, and press ""n"" if you want to abort.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_3553.cpp,,,data/crawl/git/old_hunk_3553.cpp,data/crawl/git/new_hunk_3553.cpp,-1,35,,"printf_ln(""Bye."");","[""addLog""]","[[], [""printf_ln"", ""Bye""]]",[7206494352972939546],5613,0:00:00
https://github.com/git/git/commit/9f93e4611f72577306e369a64d0a4da847be9751,26 Jun 2013,"git-clean: use a git-add-interactive compatible UI

Rewrite menu using a new method `list_and_choose`, which is borrowed
from `git-add--interactive.perl`. We will use this framework to add
new actions for interactive git-clean later.

Please NOTE:

 * Method `list_and_choose` return an array of integers, and
 * it is up to you to free the allocated memory of the array.
 * The array ends with EOF.
 * If user pressed CTRL-D (i.e. EOF), no selection returned.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",456,data/crawl/git/hunk_3549.cpp,,,data/crawl/git/old_hunk_3549.cpp,data/crawl/git/new_hunk_3549.cpp,-1,192,,"die(""Bad type of menu_stuff when parse choice"");","[""addLog""]","[[], [""die"", ""Bad"", ""type"", ""of"", ""menu_stuff"", ""when"", ""parse"", ""choice""]]",[-11496053205144198465],5612,"14 days, 12:00:00"
https://github.com/git/git/commit/b9612197798dbfc622c766e83b1fe4c20bffae5c,06 Apr 2011,"upload-pack: start pack-objects before async rev-list

In a pthread-enabled version of upload-pack, there's a race condition
that can cause a deadlock on the fflush(NULL) we call from run-command.

What happens is this:

  1. Upload-pack is informed we are doing a shallow clone.

  2. We call start_async() to spawn a thread that will generate rev-list
     results to feed to pack-objects. It gets a file descriptor to a
     pipe which will eventually hook to pack-objects.

  3. The rev-list thread uses fdopen to create a new output stream
     around the fd we gave it, called pack_pipe.

  4. The thread writes results to pack_pipe. Outside of our control,
     libc is doing locking on the stream. We keep writing until the OS
     pipe buffer is full, and then we block in write(), still holding
     the lock.

  5. The main thread now uses start_command to spawn pack-objects.
     Before forking, it calls fflush(NULL) to flush every stdio output
     buffer. It blocks trying to get the lock on pack_pipe.

And we have a deadlock. The thread will block until somebody starts
reading from the pipe. But nobody will read from the pipe until we
finish flushing to the pipe.

To fix this, we swap the start order: we start the
pack-objects reader first, and then the rev-list writer
after. Thus the problematic fflush(NULL) happens before we
even open the new file descriptor (and even if it didn't,
flushing should no longer block, as the reader at the end of
the pipe is now active).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_4332.cpp,,,data/crawl/git/old_hunk_4332.cpp,data/crawl/git/new_hunk_4332.cpp,8,-1,"die(""git upload-pack: unable to fork git-rev-list"");",,"[""removeLog""]","[[""die"", ""git"", ""upload"", ""pack"", ""unable"", ""to"", ""fork"", ""git"", ""rev"", ""list""], []]",[-8007487333216007127],5611,"437 days, 12:00:00"
https://github.com/git/git/commit/83786fa412662f6d7cdade9e4043882c5ad21c1a,06 Dec 2013,"config: arbitrary number of matches for --unset and --replace-all

git-config used a static match array to hold the matches we want to
unset/replace when using --unset or --replace-all.  Use a
variable-sized array instead.

This in particular fixes the symptoms git-svn had when storing large
numbers of svn-remote.*.added-placeholder entries in the config file.

While the tests are rather more paranoid than just --unset and
--replace-all, the other operations already worked.  Indeed git-svn's
usage only breaks the first time *after* creating so many entries,
when it wants to unset and re-add them all.

Reported-by: Jess Hottenstein <jess.hottenstein@gmail.com>
Signed-off-by: Thomas Rast <tr@thomasrast.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_3473.cpp,,,data/crawl/git/old_hunk_3473.cpp,data/crawl/git/new_hunk_3473.cpp,4,-1,"error(""too many matches for %s"", key);",,"[""removeLog""]","[[""error"", ""too"", ""many"", ""matches"", ""for"", ""%s"", ""key""], []]",[1266637305338802761],5610,0:00:00
https://github.com/git/git/commit/16094885ca94f72abc28a915f9aa4021e203a16d,11 Dec 2013,"smart-http: support shallow fetch/clone

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/hunk_3442.cpp,,,data/crawl/git/old_hunk_3442.cpp,data/crawl/git/new_hunk_3442.cpp,4,-1,"die(""attempt to push into a shallow repository"");",,"[""removeLog""]","[[""die"", ""attempt"", ""to"", ""push"", ""into"", ""a"", ""shallow"", ""repository""], []]",[-9325462250239823217],5609,0:00:00
https://github.com/git/git/commit/aa8f98c1bfcf162e0bd23d20c34857940f2c2256,18 Aug 2010,"merge-base --octopus to mimic show-branch --merge-base

While show-branch --merge-base does not support more than MAX_REVS
revs, git supports more with a different algorithm
(v1.6.0-rc0~51^2~13, Introduce get_octopus_merge_bases() in commit.c,
2008-06-27).  Expose that functionality.

This should help scripts to catch up with builtin merge in supporting
dodecapus.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_5046.cpp,,,data/crawl/git/old_hunk_5046.cpp,data/crawl/git/new_hunk_5046.cpp,-1,17,,"printf(""%s\n"", sha1_to_hex(result->item->object.sha1));","[""addLog""]","[[], [""printf"", ""%s\\n"", ""sha1_to_hex"", ""result"", ""item"", ""object"", ""sha1""]]",[-880886928602139155],5608,"615 days, 0:00:00"
https://github.com/git/git/commit/fff42755efc7585378ca562e54828532922371be,30 Dec 2013,"pack-bitmap: add support for bitmap indexes

A bitmap index is a `.bitmap` file that can be found inside
`$GIT_DIR/objects/pack/`, next to its corresponding packfile, and
contains precalculated reachability information for selected commits.
The full specification of the format for these bitmap indexes can be found
in `Documentation/technical/bitmap-format.txt`.

For a given commit SHA1, if it happens to be available in the bitmap
index, its bitmap will represent every single object that is reachable
from the commit itself. The nth bit in the bitmap is the nth object in
the packfile; if it's set to 1, the object is reachable.

By using the bitmaps available in the index, this commit implements
several new functions:

	- `prepare_bitmap_git`
	- `prepare_bitmap_walk`
	- `traverse_bitmap_commit_list`
	- `reuse_partial_packfile_from_bitmap`

The `prepare_bitmap_walk` function tries to build a bitmap of all the
objects that can be reached from the commit roots of a given `rev_info`
struct by using the following algorithm:

- If all the interesting commits for a revision walk are available in
the index, the resulting reachability bitmap is the bitwise OR of all
the individual bitmaps.

- When the full set of WANTs is not available in the index, we perform a
partial revision walk using the commits that don't have bitmaps as
roots, and limiting the revision walk as soon as we reach a commit that
has a corresponding bitmap. The earlier OR'ed bitmap with all the
indexed commits can now be completed as this walk progresses, so the end
result is the full reachability list.

- For revision walks with a HAVEs set (a set of commits that are deemed
uninteresting), first we perform the same method as for the WANTs, but
using our HAVEs as roots, in order to obtain a full reachability bitmap
of all the uninteresting commits. This bitmap then can be used to:

	a) limit the subsequent walk when building the WANTs bitmap
	b) finding the final set of interesting commits by performing an
	   AND-NOT of the WANTs and the HAVEs.

If `prepare_bitmap_walk` runs successfully, the resulting bitmap is
stored and the equivalent of a `traverse_commit_list` call can be
performed by using `traverse_bitmap_commit_list`; the bitmap version
of this call yields the objects straight from the packfile index
(without having to look them up or parse them) and hence is several
orders of magnitude faster.

As an extra optimization, when `prepare_bitmap_walk` succeeds, the
`reuse_partial_packfile_from_bitmap` call can be attempted: it will find
the amount of objects at the beginning of the on-disk packfile that can
be reused as-is, and return an offset into the packfile. The source
packfile can then be loaded and the bytes up to `offset` can be written
directly to the result without having to consider the entires inside the
packfile individually.

If the `prepare_bitmap_walk` call fails (e.g. because no bitmap files
are available), the `rev_info` struct is left untouched, and can be used
to perform a manual rev-walk using `traverse_commit_list`.

Hence, this new set of functions are a generic API that allows to
perform the equivalent of

	git rev-list --objects [roots...] [^uninteresting...]

for any set of commits, even if they don't have specific bitmaps
generated for them.

In further patches, we'll use this bitmap traversal optimization to
speed up the `pack-objects` and `rev-list` commands.

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1353,data/crawl/git/hunk_3413.cpp,,,data/crawl/git/old_hunk_3413.cpp,data/crawl/git/new_hunk_3413.cpp,-1,728,,"die(""BUG: failed to perform bitmap walk"");","[""addLog""]","[[], [""die"", ""BUG"", ""failed"", ""to"", ""perform"", ""bitmap"", ""walk""]]",[-13924656783887524626],5607,0:00:00
https://github.com/git/git/commit/9684afd967f61047bbf1b3a8039adf7d41916b31,19 Feb 2008,"revision.c: handle tag->tagged == NULL

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_7447.cpp,,,data/crawl/git/old_hunk_7447.cpp,data/crawl/git/new_hunk_7447.cpp,-1,4,,"die(""bad tag"");","[""addLog""]","[[], [""die"", ""bad"", ""tag""]]",[-3093293526016883090],5606,"1070 days, 12:00:00"
https://github.com/git/git/commit/d249610792c6a42a7d51c2f5790025569f6cb5fd,03 Oct 2008,"parse-opt: migrate builtin-merge-file.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",68,data/crawl/git/hunk_6712.cpp,,,data/crawl/git/old_hunk_6712.cpp,data/crawl/git/new_hunk_6712.cpp,32,15,"error(""Cannot merge binary files: %s\n"",
					argv[i + 1]);","error(""Cannot merge binary files: %s\n"",
					argv[i]);","[""removeVariable"", ""removeContent""]","[[""argv[i"", ""1]""], [""argv[i]""]]",[2207745166183016316],5605,"971 days, 12:00:00"
https://github.com/git/git/commit/a666b472c7d9e72bfacf4145405dbe8924ee153d,04 Nov 2010,"daemon: opt-out on features that require posix

Windows does not supply the POSIX-functions fork(), setuuid(), setgid(),
setsid() and initgroups(). Error out if --user or --detach is specified
when if so.

MinGW doesn't have prototypes and headers for inet_ntop and inet_pton,
so include our implementation instead. MSVC does, so avoid doing so
there.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/hunk_4978.cpp,,,data/crawl/git/old_hunk_4978.cpp,data/crawl/git/new_hunk_4978.cpp,-1,14,,"die(""--detach not supported on this platform"");","[""addLog""]","[[], [""die"", ""detach"", ""not"", ""supported"", ""on"", ""this"", ""platform""]]",[11822220414443230113],5604,"597 days, 0:00:00"
https://github.com/git/git/commit/6035d6aad8ca11954c0d7821f6f3e7c047039c8f,28 May 2013,"fetch-pack: prepare updated shallow file before fetching the pack

index-pack --strict looks up and follows parent commits. If shallow
information is not ready by the time index-pack is run, index-pack may
be led to non-existent objects. Make fetch-pack save shallow file to
disk before invoking index-pack.

git learns new global option --shallow-file to pass on the alternate
shallow file path. Undocumented (and not even support --shallow-file=
syntax) because it's unlikely to be used again elsewhere.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_3637.cpp,,,data/crawl/git/old_hunk_3637.cpp,data/crawl/git/new_hunk_3637.cpp,14,-1,"die(""shallow file was removed during fetch"");",,"[""removeLog""]","[[""die"", ""shallow"", ""file"", ""was"", ""removed"", ""during"", ""fetch""], []]",[9834852567829827657],5603,"137 days, 12:00:00"
https://github.com/git/git/commit/9ef176b55c373ba087b2d84e77b5713578891927,27 Feb 2014,"tag: support --sort=<spec>

--sort=version:refname (or --sort=v:refname for short) sorts tags as
if they are versions. --sort=-refname reverses the order (with or
without "":version"").

versioncmp() is copied from string/strverscmp.c in glibc commit
ee9247c38a8def24a59eb5cfb7196a98bef8cfdc, reformatted to Git coding
style. The implementation is under LGPL-2.1 and according to [1] I can
relicense it to GPLv2.

[1] http://www.gnu.org/licenses/gpl-faq.html#AllCompatibility

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",216,data/crawl/git/hunk_3349.cpp,,,data/crawl/git/old_hunk_3349.cpp,data/crawl/git/new_hunk_3349.cpp,-1,33,,"printf(""%s\n"", filter.tags.items[i].string);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""filter"", ""tags"", ""items[i]"", ""string""]]",[12200214712325493582],5602,0:00:00
https://github.com/git/git/commit/2f29e0c6fa5d312c4e0675b0dd23d3126b9f55fa,13 Mar 2014,"entry.c: fix possible buffer overflow in remove_subtree()

remove_subtree() manipulated path in a fixed-size buffer even though
the length of the input, let alone the length of entries within the
directory, were not known in advance.  Change the function to take a
strbuf argument and use that object as its scratch space.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_3329.cpp,,,data/crawl/git/old_hunk_3329.cpp,data/crawl/git/new_hunk_3329.cpp,25,24,"die_errno(""cannot unlink '%s'"", pathbuf);","die_errno(""cannot unlink '%s'"", path->buf);","[""removeVariable"", ""addVariable""]","[[""pathbuf""], [""path"", ""buf""]]",[-67128481319408746],5601,0:00:00
https://github.com/git/git/commit/1b32decefd840e0ca5d18eefd6472fd8624dd849,25 Mar 2014,"log: add --show-linear-break to help see non-linear history

Option explanation is in rev-list-options.txt. The interaction with -z
is left undecided.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_3318.cpp,,,data/crawl/git/old_hunk_3318.cpp,data/crawl/git/new_hunk_3318.cpp,-1,12,,"printf(""\n%s\n"", opt->break_bar);","[""addLog""]","[[], [""printf"", ""\\n%s\\n"", ""opt"", ""break_bar""]]",[8177816587078982971],5600,0:00:00
https://github.com/git/git/commit/b2c851a8e67da752d8a5dbde5a9dae6e3428a4c9,20 May 2014,"Revert ""Merge branch 'jc/graduate-remote-hg-bzr' (early part)""

Instead of showing a warning and working as before, fail and show
the message and force immediate upgrade from their upstream
repositories when these tools are run, per request from their
primary author.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4447,data/crawl/git/hunk_3297.cpp,,,data/crawl/git/old_hunk_3297.cpp,data/crawl/git/new_hunk_3297.cpp,63,-1,"die(msg, *args);",,"[""removeLog""]","[[""die"", ""msg"", ""*args""], []]",[-2346119658525871849],5599,0:00:00
https://github.com/git/git/commit/be5c9fb9049ed470e7005f159bb923a5f4de1309,26 Jan 2013,"logmsg_reencode: lazily load missing commit buffers

Usually a commit that makes it to logmsg_reencode will have
been parsed, and the commit->buffer struct member will be
valid. However, some code paths will free commit buffers
after having used them (for example, the log traversal
machinery will do so to keep memory usage down).

Most of the time this is fine; log should only show a commit
once, and then exits. However, there are some code paths
where this does not work. At least two are known:

  1. A commit may be shown as part of a regular ref, and
     then it may be shown again as part of a submodule diff
     (e.g., if a repo contains refs to both the superproject
     and subproject).

  2. A notes-cache commit may be shown during ""log --all"",
     and then later used to access a textconv cache during a
     diff.

Lazily loading in logmsg_reencode does not necessarily catch
all such cases, but it should catch most of them. Users of
the commit buffer tend to be either parsing for structure
(in which they will call parse_commit, and either we will
already have parsed, or we will load commit->buffer lazily
there), or outputting (either to the user, or fetching a
part of the commit message via format_commit_message). In
the latter case, we should always be using logmsg_reencode
anyway (and typically we do so via the pretty-print
machinery).

If there are any cases that this misses, we can fix them up
to use logmsg_reencode (or handle them on a case-by-case
basis if that is inappropriate).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_3927.cpp,,,data/crawl/git/old_hunk_3927.cpp,data/crawl/git/new_hunk_3927.cpp,-1,12,,"die(""Expected commit for '%s', got %s"",
			    sha1_to_hex(commit->object.sha1), typename(type));","[""addLog""]","[[], [""die"", ""Expected"", ""commit"", ""for"", ""%s"", ""got"", ""%s"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1"", ""typename"", ""type""]]",[1182938276743572345],5598,"251 days, 12:00:00"
https://github.com/git/git/commit/be5c9fb9049ed470e7005f159bb923a5f4de1309,26 Jan 2013,"logmsg_reencode: lazily load missing commit buffers

Usually a commit that makes it to logmsg_reencode will have
been parsed, and the commit->buffer struct member will be
valid. However, some code paths will free commit buffers
after having used them (for example, the log traversal
machinery will do so to keep memory usage down).

Most of the time this is fine; log should only show a commit
once, and then exits. However, there are some code paths
where this does not work. At least two are known:

  1. A commit may be shown as part of a regular ref, and
     then it may be shown again as part of a submodule diff
     (e.g., if a repo contains refs to both the superproject
     and subproject).

  2. A notes-cache commit may be shown during ""log --all"",
     and then later used to access a textconv cache during a
     diff.

Lazily loading in logmsg_reencode does not necessarily catch
all such cases, but it should catch most of them. Users of
the commit buffer tend to be either parsing for structure
(in which they will call parse_commit, and either we will
already have parsed, or we will load commit->buffer lazily
there), or outputting (either to the user, or fetching a
part of the commit message via format_commit_message). In
the latter case, we should always be using logmsg_reencode
anyway (and typically we do so via the pretty-print
machinery).

If there are any cases that this misses, we can fix them up
to use logmsg_reencode (or handle them on a case-by-case
basis if that is inappropriate).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_3927.cpp,,,data/crawl/git/old_hunk_3927.cpp,data/crawl/git/new_hunk_3927.cpp,-1,9,,"die(""Cannot read commit object %s"",
			    sha1_to_hex(commit->object.sha1));","[""addLog""]","[[], [""die"", ""Cannot"", ""read"", ""commit"", ""object"", ""%s"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""]]",[-14561904187827742147],5597,"251 days, 12:00:00"
https://github.com/git/git/commit/319b678a7b7c7fd03242b2b91d936f65e798cd06,31 Mar 2015,"sha1_file: squelch ""packfile cannot be accessed"" warnings

When we find an object in a packfile index, we make sure we
can still open the packfile itself (or that it is already
open), as it might have been deleted by a simultaneous
repack. If we can't access the packfile, we print a warning
for the user and tell the caller that we don't have the
object (we can then look in other packfiles, or find a loose
version, before giving up).

The warning we print to the user isn't really accomplishing
anything, and it is potentially confusing to users. In the
normal case, it is complete noise; we find the object
elsewhere, and the user does not have to care that we racily
saw a packfile index that became stale. It didn't affect the
operation at all.

A possibly more interesting case is when we later can't find
the object, and report failure to the user. In this case the
warning could be considered a clue toward that ultimate
failure. But it's not really a useful clue in practice. We
wouldn't even print it consistently (since we are racing
with another process, we might not even see the .idx file,
or we might win the race and open the packfile, completing
the operation).

This patch drops the warning entirely (not only from the
fill_pack_entry site, but also from an identical use in
pack-objects). If we did find the warning interesting in the
error case, we could stuff it away and reveal it to the user
when we later die() due to the broken object. But that
complexity just isn't worth it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_3274.cpp,,,data/crawl/git/old_hunk_3274.cpp,data/crawl/git/new_hunk_3274.cpp,4,-1,"warning(""packfile %s cannot be accessed"", p->pack_name);",,"[""removeLog""]","[[""warning"", ""packfile"", ""%s"", ""cannot"", ""be"", ""accessed"", ""p"", ""pack_name""], []]",[6449411527746265162],5596,0:00:00
https://github.com/git/git/commit/afcb6ee30acf17f4e0338c49fbab301131abfbba,02 Apr 2015,"push --signed: tighten what the receiving end can ask to sign

Instead of blindly trusting the receiving side to give us a sensible
nonce to sign, limit the length (max 256 bytes) and the alphabet
(alnum and a few selected punctuations, enough to encode in base64)
that can be used in nonce.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_3269.cpp,,,data/crawl/git/old_hunk_3269.cpp,data/crawl/git/new_hunk_3269.cpp,-1,20,,"die(""the receiving end asked to sign an invalid nonce <%.*s>"",
		    len, nonce);","[""addLog""]","[[], [""die"", ""the"", ""receiving"", ""end"", ""asked"", ""to"", ""sign"", ""an"", ""invalid"", ""nonce"", ""%"", ""*s"", ""len"", ""nonce""]]",[-802240937583680451],5595,0:00:00
https://github.com/git/git/commit/39e4ae388047bd7f6f3a4ad86ba5eba523dd0668,06 May 2015,"cat-file: teach cat-file a '--allow-unknown-type' option

'git cat-file' throws an error while trying to print the type or
size of a broken/corrupt object. This is because these objects are
usually of unknown types.

Teach git cat-file a '--allow-unknown-type' option where it prints
the type or size of a broken/corrupt object without throwing
an error.

Modify '-t' and '-s' options to call sha1_object_info_extended()
directly to support the '--allow-unknown-type' option.

Add documentation for 'cat-file --allow-unknown-type'.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>

cat-file: add documentation for '--allow-unknown-type' option.

Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_3243.cpp,,,data/crawl/git/old_hunk_3243.cpp,data/crawl/git/new_hunk_3243.cpp,-1,37,,"die(""git cat-file: could not get object info"");","[""addLog""]","[[], [""die"", ""git"", ""cat"", ""file"", ""could"", ""not"", ""get"", ""object"", ""info""]]",[-12212154866552572603],5594,0:00:00
https://github.com/git/git/commit/0269f968b7effea8a4f61f1fb0ac7e9386a9d90c,20 Apr 2015,"log -L: improve error message on malformed argument

The old message did not mention the :regex:file form.

To avoid overly long lines, split the message into two lines (in case
item->string is long, it will be the only part truncated in a narrow
terminal).

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_3259.cpp,,,data/crawl/git/old_hunk_3259.cpp,data/crawl/git/new_hunk_3259.cpp,3,3,"die(""-L argument '%s' not of the form start,end:file"",
			    item->string);","die(""-L argument not 'start,end:file' or ':funcname:file': %s"",
			    item->string);","[""updateContent""]","[[""of"", ""the"", ""form""], [""or"", ""funcname"", ""file""]]",[4637211424814524633],5593,"10 days, 12:00:00"
https://github.com/git/git/commit/06151739988601b0fe6179c6c67a0031b85b536f,26 Mar 2015,"diff-no-index: align D/F handling with that of normal Git

When a commit changes a path P that used to be a file to a directory
and creates a new path P/X in it, ""git show"" would say that file P
was removed and file P/X was created for such a commit.

However, if we compare two directories, D1 and D2, where D1 has a
file D1/P in it and D2 has a directory D2/P under which there is a
file D2/P/X, and ask ""git diff --no-index D1 D2"" to show their
differences, we simply get a refusal ""file/directory conflict"".

Surely, that may be what GNU diff does, but we can do better and it
is easy to do so.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_3275.cpp,,,data/crawl/git/old_hunk_3275.cpp,data/crawl/git/new_hunk_3275.cpp,4,8,"error(""file/directory conflict: %s, %s"", name1, name2);","noindex_filespec(NULL, 0);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""addContent"", ""removeContent""]","[[""error"", ""file/directory"", ""conflict"", ""%s"", ""%s"", ""name1"", ""name2""], [""noindex_filespec"", ""NULL"", ""0""]]",[-13660209763600879167],5592,"23 days, 0:00:00"
https://github.com/git/git/commit/a39c14af82e973ba1502888e89585b7501721ede,15 Jan 2014,"interpret_branch_name: factor out upstream handling

This function checks a few different @{}-constructs. The
early part checks for and dispatches us to helpers for each
construct, but the code for handling @{upstream} is inline.

Let's factor this out into its own function. This makes
interpret_branch_name more readable, and will make it much
simpler to further refactor the function in future patches.

While we're at it, let's also break apart the refactored
code into a few helper functions. These will be useful if we
eventually implement similar @{upstream}-like constructs.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_3390.cpp,,,data/crawl/git/old_hunk_3390.cpp,data/crawl/git/new_hunk_3390.cpp,23,-1,"die(
			_(""Upstream branch '%s' not stored as a remote-tracking branch""),
			upstream->merge[0]->src);",,"[""removeLog""]","[[""die"", ""_"", ""Upstream"", ""branch"", ""%s"", ""not"", ""stored"", ""as"", ""a"", ""remote"", ""tracking"", ""branch"", ""upstream"", ""merge[0]"", ""src""], []]",[22269886507192799490],5591,"245 days, 12:00:00"
https://github.com/git/git/commit/a39c14af82e973ba1502888e89585b7501721ede,15 Jan 2014,"interpret_branch_name: factor out upstream handling

This function checks a few different @{}-constructs. The
early part checks for and dispatches us to helpers for each
construct, but the code for handling @{upstream} is inline.

Let's factor this out into its own function. This makes
interpret_branch_name more readable, and will make it much
simpler to further refactor the function in future patches.

While we're at it, let's also break apart the refactored
code into a few helper functions. These will be useful if we
eventually implement similar @{upstream}-like constructs.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_3390.cpp,,,data/crawl/git/old_hunk_3390.cpp,data/crawl/git/new_hunk_3390.cpp,15,-1,"die(_(""HEAD does not point to a branch""));",,"[""removeLog""]","[[""die"", ""_"", ""HEAD"", ""does"", ""not"", ""point"", ""to"", ""a"", ""branch""], []]",[12840427460691034526],5590,"245 days, 12:00:00"
https://github.com/git/git/commit/556cfa3b6d316074d41cd73c4659402fdb6207c8,05 Nov 2009,"Smart fetch and push over HTTP: server side

Requests for $GIT_URL/git-receive-pack and $GIT_URL/git-upload-pack
are forwarded to the corresponding backend process by directly
executing it and leaving stdin and stdout connected to the invoking
web server.  Prior to starting the backend process the HTTP response
headers are sent, thereby freeing the backend from needing to know
about the HTTP protocol.

Requests that are encoded with Content-Encoding: gzip are
automatically inflated before being streamed into the backend.
This is primarily useful for the git-upload-pack backend, which
receives highly repetitive text data from clients that easily
compresses to 50% of its original size.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/hunk_5564.cpp,,,data/crawl/git/old_hunk_5564.cpp,data/crawl/git/new_hunk_5564.cpp,-1,79,,"die(""%s aborted reading request"", prog_name);","[""addLog""]","[[], [""die"", ""%s"", ""aborted"", ""reading"", ""request"", ""prog_name""]]",[-16415785472901842277],5589,"1014 days, 0:00:00"
https://github.com/git/git/commit/8dbf3eb6850d6d9495ace908625fe50888b111e6,27 May 2015,"diff.h: rename DIFF_PLAIN color slot to DIFF_CONTEXT

The latter is a much more descriptive name (and we support
""color.diff.context"" now). This also updates the name of any
local variables which were used to store the color.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_3172.cpp,,,data/crawl/git/old_hunk_3172.cpp,data/crawl/git/new_hunk_3172.cpp,3,3,"fputs(c_plain, stdout);","fputs(c_context, stdout);","[""updateVariable""]","[[""c_plain""], [""c_context""]]",[1179937146069954017],5588,0:00:00
https://github.com/git/git/commit/cd4f09e38341bdd17cf008ea57863e4b10ac176b,18 Sep 2013,"shortlog: ignore commits with missing authors

Most of git's traversals are robust against minor breakages
in commit data. For example, ""git log"" will still output an
entry for a commit that has a broken encoding or missing
author, and will not abort the whole operation.

Shortlog, on the other hand, will die as soon as it sees a
commit without an author, meaning that a repository with
a broken commit cannot get any shortlog output at all.

Let's downgrade this fatal error to a warning, and continue
the operation.

We simply ignore the commit and do not count it in the total
(since we do not have any author under which to file it).
Alternatively, we could output some kind of ""<empty>"" record
to collect these bogus commits. It is probably not worth it,
though; we have already warned to stderr, so the user is
aware that such bogosities exist, and any placeholder we
came up with would either be syntactically invalid, or would
potentially conflict with real data.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_3486.cpp,,,data/crawl/git/old_hunk_3486.cpp,data/crawl/git/new_hunk_3486.cpp,4,4,"die(_(""Missing author: %s""),
		    sha1_to_hex(commit->object.sha1));","warning(_(""Missing author: %s""),
		    sha1_to_hex(commit->object.sha1));","[""updateLog""]","[[""die""], [""warning""]]",[-2462890750161506518],5587,"309 days, 0:00:00"
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_3149.cpp,,,data/crawl/git/old_hunk_3149.cpp,data/crawl/git/new_hunk_3149.cpp,-1,95,,"fprintf_ln(stderr, ""    git pull <remote> <branch>"");","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""git"", ""pull"", ""remote"", ""branch""]]",[-22036620264356771374],5586,0:00:00
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_3149.cpp,,,data/crawl/git/old_hunk_3149.cpp,data/crawl/git/new_hunk_3149.cpp,-1,93,,"fprintf_ln(stderr, _(""See git-pull(1) for details.""));","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""_"", ""See"", ""git"", ""pull"", ""1"", ""for"", ""details""]]",[-11344509049249182285],5585,0:00:00
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_3149.cpp,,,data/crawl/git/old_hunk_3149.cpp,data/crawl/git/new_hunk_3149.cpp,-1,92,,"fprintf_ln(stderr, _(""Please specify which branch you want to merge with.""));","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""_"", ""Please"", ""specify"", ""which"", ""branch"", ""you"", ""want"", ""to"", ""merge"", ""with""]]",[-19860310303735260842],5584,0:00:00
https://github.com/git/git/commit/b7b314711ad28b129e6c5916eee1f2036ffa94df,18 Jun 2015,"pull --rebase: error on no merge candidate cases

Tweak the error messages printed by die_no_merge_candidates() to take
into account that we may be ""rebasing against"" rather than ""merging
with"".

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_3140.cpp,,,data/crawl/git/old_hunk_3140.cpp,data/crawl/git/new_hunk_3140.cpp,-1,4,,"fprintf_ln(stderr, _(""Please specify which branch you want to rebase against.""));","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""_"", ""Please"", ""specify"", ""which"", ""branch"", ""you"", ""want"", ""to"", ""rebase"", ""against""]]",[-12232148955813408543],5583,0:00:00
https://github.com/git/git/commit/a4cc18f2934b8d2f00c7c3e11107acb6bfafe2c6,22 Jun 2015,"verify-tag: share code with verify-commit

verify-tag was executing an entirely different codepath than
verify-commit, except for the underlying verify_signed_buffer.  Move
much of the code from check_commit_signature to a generic
check_signature function and adjust both codepaths to call it.

Update verify-tag to explicitly output the signature text, as we now
call verify_signed_buffer with strbufs to catch the output, which
prevents it from being printed automatically.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_3122.cpp,,,data/crawl/git/old_hunk_3122.cpp,data/crawl/git/new_hunk_3122.cpp,-1,16,,"fputs(sigc.gpg_output, stderr);","[""addLog""]","[[], [""fputs"", ""sigc"", ""gpg_output"", ""stderr""]]",[-11122912199341481649],5582,0:00:00
https://github.com/git/git/commit/00a09d57eb8a041e6a6b0470c53533719c049bab,25 Jun 2015,"introduce ""extensions"" form of core.repositoryformatversion

Normally we try to avoid bumps of the whole-repository
core.repositoryformatversion field. However, it is
unavoidable if we want to safely change certain aspects of
git in a backwards-incompatible way (e.g., modifying the set
of ref tips that we must traverse to generate a list of
unreachable, safe-to-prune objects).

If we were to bump the repository version for every such
change, then any implementation understanding version `X`
would also have to understand `X-1`, `X-2`, and so forth,
even though the incompatibilities may be in orthogonal parts
of the system, and there is otherwise no reason we cannot
implement one without the other (or more importantly, that
the user cannot choose to use one feature without the other,
weighing the tradeoff in compatibility only for that
particular feature).

This patch documents the existing repositoryformatversion
strategy and introduces a new format, ""1"", which lets a
repository specify that it must run with an arbitrary set of
extensions. This can be used, for example:

 - to inform git that the objects should not be pruned based
   only on the reachability of the ref tips (e.g, because it
   has ""clone --shared"" children)

 - that the refs are stored in a format besides the usual
   ""refs"" and ""packed-refs"" directories

Because we bump to format ""1"", and because format ""1""
requires that a running git knows about any extensions
mentioned, we know that older versions of the code will not
do something dangerous when confronted with these new
formats.

For example, if the user chooses to use database storage for
refs, they may set the ""extensions.refbackend"" config to
""db"". Older versions of git will not understand format ""1""
and bail. Versions of git which understand ""1"" but do not
know about ""refbackend"", or which know about ""refbackend""
but not about the ""db"" backend, will refuse to run. This is
annoying, of course, but much better than the alternative of
claiming that there are no refs in the repository, or
writing to a location that other implementations will not
read.

Note that we are only defining the rules for format 1 here.
We do not ever write format 1 ourselves; it is a tool that
is meant to be used by users and future extensions to
provide safety with older implementations.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",162,data/crawl/git/hunk_3099.cpp,,,data/crawl/git/old_hunk_3099.cpp,data/crawl/git/new_hunk_3099.cpp,7,7,"warning(""Expected git repo version <= %d, found %d"",
			GIT_REPO_VERSION, repository_format_version);","warning(""Expected git repo version <= %d, found %d"",
			GIT_REPO_VERSION_READ, repository_format_version);","[""updateVariable""]","[[""GIT_REPO_VERSION""], [""GIT_REPO_VERSION_READ""]]",[-14611831872763511162],5581,0:00:00
https://github.com/git/git/commit/a5481a6c9438cbd9c246cfa59ff49c31a0926fb6,29 Jun 2015,"convert ""enum date_mode"" into a struct

In preparation for adding date modes that may carry extra
information beyond the mode itself, this patch converts the
date_mode enum into a struct.

Most of the conversion is fairly straightforward; we pass
the struct as a pointer and dereference the type field where
necessary. Locations that declare a date_mode can use a ""{}""
constructor.  However, the tricky case is where we use the
enum labels as constants, like:

  show_date(t, tz, DATE_NORMAL);

Ideally we could say:

  show_date(t, tz, &{ DATE_NORMAL });

but of course C does not allow that. Likewise, we cannot
cast the constant to a struct, because we need to pass an
actual address. Our options are basically:

  1. Manually add a ""struct date_mode d = { DATE_NORMAL }""
     definition to each caller, and pass ""&d"". This makes
     the callers uglier, because they sometimes do not even
     have their own scope (e.g., they are inside a switch
     statement).

  2. Provide a pre-made global ""date_normal"" struct that can
     be passed by address. We'd also need ""date_rfc2822"",
     ""date_iso8601"", and so forth. But at least the ugliness
     is defined in one place.

  3. Provide a wrapper that generates the correct struct on
     the fly. The big downside is that we end up pointing to
     a single global, which makes our wrapper non-reentrant.
     But show_date is already not reentrant, so it does not
     matter.

This patch implements 3, along with a minor macro to keep
the size of the callers sane.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_3090.cpp,,,data/crawl/git/old_hunk_3090.cpp,data/crawl/git/new_hunk_3090.cpp,3,3,"printf(""%s -> %s\n"", *argv, show_date(t, 0, DATE_ISO8601));","printf(""%s -> %s\n"", *argv, show_date(t, 0, DATE_MODE(ISO8601)));","[""updateVariable"", ""addVariable""]","[[""DATE_ISO8601""], [""DATE_MODE"", ""ISO8601""]]",[-3532210244771173083],5580,0:00:00
https://github.com/git/git/commit/c990a4c11dd7bb671da1b30e14568ad986621488,06 Jul 2015,"checkout: fix bug with --to and relative HEAD

Given ""git checkout --to <path> HEAD~1"", the new worktree's HEAD should
begin life at the current branch's HEAD~1, however, it actually ends up
at HEAD~2. This happens because:

    1. git-checkout resolves HEAD~1

    2. to satisfy is_git_directory(), prepare_linked_worktree() creates
       a HEAD for the new worktree with the value of the resolved HEAD~1

    3. git-checkout re-invokes itself with the same arguments within the
       new worktree to populate the worktree

    4. the sub git-checkout resolves HEAD~1 relative to its own HEAD,
       which is the resolved HEAD~1 from the original invocation,
       resulting unexpectedly and incorrectly in HEAD~2 (relative to the
       original)

Fix this by unconditionally assigning the current worktree's HEAD as the
value of the new worktree's HEAD.

As a side-effect, this change also eliminates a dependence within
prepare_linked_checkout() upon 'struct branch_info'. The plan is to
eventually relocate ""git checkout --to"" functionality to ""git worktree
add"", and worktree.c won't have knowledge of 'struct branch_info', so
removal of this dependency is a step toward that goal.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_3068.cpp,,,data/crawl/git/old_hunk_3068.cpp,data/crawl/git/new_hunk_3068.cpp,-1,13,,"die(_(""unable to resolve HEAD""));","[""addLog""]","[[], [""die"", ""_"", ""unable"", ""to"", ""resolve"", ""HEAD""]]",[17682279093956913104],5579,0:00:00
https://github.com/git/git/commit/9559ce8368b533862584b2717532e3c25232f1c9,06 Jul 2015,"checkout: relocate --to's ""no branch specified"" check

The plan is to relocate ""git checkout --to"" functionality to ""git
worktree add"", however, this check expects a 'struct branch_info' which
git-worktree won't have at hand. It will, however, have access to its
own command-line from which it can pick up the branch name. Therefore,
as a preparatory step, rather than having prepare_linked_checkout()
perform this check, make it the caller's responsibility.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_3065.cpp,,,data/crawl/git/old_hunk_3065.cpp,data/crawl/git/new_hunk_3065.cpp,4,-1,"die(_(""no branch specified""));",,"[""removeLog""]","[[""die"", ""_"", ""no"", ""branch"", ""specified""], []]",[7769314262293877445],5578,0:00:00
https://github.com/git/git/commit/9cddf56ef13c8575ac0c68d82e6196e5b0a2900d,04 Nov 2010,"daemon: make --inetd and --detach incompatible

Since --inetd makes main return with the result of execute() before
daemonize is gets called, these two options are already incompatible.

Document it, and add an error if attempted.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_4982.cpp,,,data/crawl/git/old_hunk_4982.cpp,data/crawl/git/new_hunk_4982.cpp,4,4,"die(""--user and --group are incompatible with --inetd"");","die(""--detach, --user and --group are incompatible with --inetd"");","[""updateContent""]","[[], [""detach""]]",[-6805829946687303077],5577,"859 days, 12:00:00"
https://github.com/git/git/commit/b979d95027242455b10e6f566b0e96c5f30cc908,06 Jul 2015,"checkout: retire --to option

Now that ""git worktree add"" has achieved user-facing feature-parity with
""git checkout --to"", retire the latter.

Move the actual linked worktree creation functionality,
prepare_linked_checkout() and its helpers, verbatim from checkout.c to
worktree.c.

This effectively reverts changes to checkout.c by 529fef2 (checkout:
support checking out into a new working directory, 2014-11-30) with the
exception of merge_working_tree() and switch_branches() which still
require specialized knowledge that a the checkout is occurring in a
newly-created linked worktree (signaled to them by the private
GIT_CHECKOUT_NEW_WORKTREE environment variable).

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",312,data/crawl/git/hunk_3060.cpp,,,data/crawl/git/old_hunk_3060.cpp,data/crawl/git/new_hunk_3060.cpp,106,-1,"die(_(""unable to resolve HEAD""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""resolve"", ""HEAD""], []]",[-17682279093956913104],5576,"7 days, 0:00:00"
https://github.com/git/git/commit/a4c653dfcd05c987028b847092a1ee7e5d86a596,21 Jul 2015,"refs.c: add err arguments to reflog functions

Add an err argument to log_ref_setup that can explain the reason
for a failure. This then eliminates the need to manage errno through
this function since we can just add strerror(errno) to the err string
when meaningful. No callers relied on errno from this function for
anything else than the error message.

Also add err arguments to private functions write_ref_to_lockfile,
log_ref_write_1, commit_ref_update. This again eliminates the need to
manage errno in these functions.

Some error messages are slightly reordered.

Update of a patch by Ronnie Sahlberg.

Signed-off-by: Ronnie Sahlberg <sahlberg@google.com>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_3042.cpp,,,data/crawl/git/old_hunk_3042.cpp,data/crawl/git/new_hunk_3042.cpp,11,-1,"error(""Unable to append to %s"", log_file);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""append"", ""to"", ""%s"", ""log_file""], []]",[-13888337468491854211],5575,0:00:00
https://github.com/git/git/commit/a4c653dfcd05c987028b847092a1ee7e5d86a596,21 Jul 2015,"refs.c: add err arguments to reflog functions

Add an err argument to log_ref_setup that can explain the reason
for a failure. This then eliminates the need to manage errno through
this function since we can just add strerror(errno) to the err string
when meaningful. No callers relied on errno from this function for
anything else than the error message.

Also add err arguments to private functions write_ref_to_lockfile,
log_ref_write_1, commit_ref_update. This again eliminates the need to
manage errno in these functions.

Some error messages are slightly reordered.

Update of a patch by Ronnie Sahlberg.

Signed-off-by: Ronnie Sahlberg <sahlberg@google.com>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_3039.cpp,,,data/crawl/git/old_hunk_3039.cpp,data/crawl/git/new_hunk_3039.cpp,5,5,"error(""unable to write current sha1 into %s"", oldrefname);","error(""unable to write current sha1 into %s: %s"", oldrefname, err.buf);","[""updateContent"", ""addVariable""]","[[], [""%s"", ""err"", ""buf""]]",[-2719382075536049376],5574,0:00:00
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7007.cpp,,,data/crawl/git/old_hunk_7007.cpp,data/crawl/git/new_hunk_7007.cpp,88,-1,"fprintf(stderr, ""Recorded resolution for '%s'.\n"", path);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Recorded"", ""resolution"", ""for"", ""%s"", ""\\n"", ""path""], []]",[10836597095334299385],5573,"1285 days, 0:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7007.cpp,,,data/crawl/git/old_hunk_7007.cpp,data/crawl/git/new_hunk_7007.cpp,75,-1,"fprintf(stderr, ""Resolved '%s' using ""
						""previous resolution.\n"", path);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resolved"", ""%s"", ""using"", ""previous"", ""resolution"", ""\\n"", ""path""], []]",[12015661553728219539],5572,"1285 days, 0:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,293,,"fprintf(stderr, ""Recorded resolution for '%s'.\n"", path);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Recorded"", ""resolution"", ""for"", ""%s"", ""\\n"", ""path""]]",[-10836597095334299385],5571,"1285 days, 0:00:00"
https://github.com/git/git/commit/d96a53996b6c02b96a9a2b4eed9eac4e9d661a38,31 Jul 2015,"sequencer: replace write_cherry_pick_head with update_ref

Now update_ref (via write_pseudoref) does almost exactly what
write_cherry_pick_head did, so we can remove write_cherry_pick_head
and just use update_ref.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_3012.cpp,,,data/crawl/git/old_hunk_3012.cpp,data/crawl/git/new_hunk_3012.cpp,5,6,"write_cherry_pick_head(commit, ""REVERT_HEAD"");","update_ref(NULL, ""REVERT_HEAD"", commit->object.sha1, NULL,
			   REF_NODEREF, UPDATE_REFS_DIE_ON_ERR);","[""updateLog"", ""removeVariable"", ""addVariable""]","[[""write_cherry_pick_head""], [""update_ref"", ""NULL"", ""object"", ""sha1"", ""NULL"", ""REF_NODEREF"", ""UPDATE_REFS_DIE_ON_ERR""]]",[-20021165565370786696],5570,0:00:00
https://github.com/git/git/commit/b7dd2d20fad1036ce7da0b635a8bb14cd4230f1a,29 May 2009,"for-each-ref: Do not lookup objects when they will not be used

This makes commands such as `git for-each-ref --format='%(refname)'`,
which are used heavily by the bash_completion code, run about 6 times
faster on an uncached repository (3 s intead of 18 s on my linux-2.6
repository with several remotes).

Signed-off-by: Anders Kaseorg <andersk@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_6012.cpp,,,data/crawl/git/old_hunk_6012.cpp,data/crawl/git/new_hunk_6012.cpp,-1,16,,"die(""parse_object_buffer failed on %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);","[""addLog""]","[[], [""die"", ""parse_object_buffer"", ""failed"", ""on"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""]]",[-14653190620770538035],5569,"1128 days, 12:00:00"
https://github.com/git/git/commit/b7dd2d20fad1036ce7da0b635a8bb14cd4230f1a,29 May 2009,"for-each-ref: Do not lookup objects when they will not be used

This makes commands such as `git for-each-ref --format='%(refname)'`,
which are used heavily by the bash_completion code, run about 6 times
faster on an uncached repository (3 s intead of 18 s on my linux-2.6
repository with several remotes).

Signed-off-by: Anders Kaseorg <andersk@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_6012.cpp,,,data/crawl/git/old_hunk_6012.cpp,data/crawl/git/new_hunk_6012.cpp,-1,13,,"die(""missing object %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);","[""addLog""]","[[], [""die"", ""missing"", ""object"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""]]",[-768659222033819720],5568,"1128 days, 12:00:00"
https://github.com/git/git/commit/b7dd2d20fad1036ce7da0b635a8bb14cd4230f1a,29 May 2009,"for-each-ref: Do not lookup objects when they will not be used

This makes commands such as `git for-each-ref --format='%(refname)'`,
which are used heavily by the bash_completion code, run about 6 times
faster on an uncached repository (3 s intead of 18 s on my linux-2.6
repository with several remotes).

Signed-off-by: Anders Kaseorg <andersk@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_6011.cpp,,,data/crawl/git/old_hunk_6011.cpp,data/crawl/git/new_hunk_6011.cpp,8,-1,"die(""parse_object_buffer failed on %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);",,"[""removeLog""]","[[""die"", ""parse_object_buffer"", ""failed"", ""on"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""], []]",[14653190620770538035],5567,"1128 days, 12:00:00"
https://github.com/git/git/commit/b7dd2d20fad1036ce7da0b635a8bb14cd4230f1a,29 May 2009,"for-each-ref: Do not lookup objects when they will not be used

This makes commands such as `git for-each-ref --format='%(refname)'`,
which are used heavily by the bash_completion code, run about 6 times
faster on an uncached repository (3 s intead of 18 s on my linux-2.6
repository with several remotes).

Signed-off-by: Anders Kaseorg <andersk@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_6011.cpp,,,data/crawl/git/old_hunk_6011.cpp,data/crawl/git/new_hunk_6011.cpp,5,-1,"die(""missing object %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);",,"[""removeLog""]","[[""die"", ""missing"", ""object"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""], []]",[768659222033819720],5566,"1128 days, 12:00:00"
https://github.com/git/git/commit/3ff53df7b4cbc331d302181d2d6644f4cb860a52,05 Aug 2015,"wrapper: implement xopen()

A common usage pattern of open() is to check if it was successful, and
die() if it was not:

	int fd = open(path, O_WRONLY | O_CREAT, 0777);
	if (fd < 0)
		die_errno(_(""Could not open '%s' for writing.""), path);

Implement a wrapper function xopen() that does the above so that we can
save a few lines of code, and make the die() messages consistent.

Helped-by: Torsten Bögershausen <tboegi@web.de>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_2995.cpp,,,data/crawl/git/old_hunk_2995.cpp,data/crawl/git/new_hunk_2995.cpp,-1,34,,"die_errno(_(""could not open '%s' for reading""), path);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""path""]]",[2801591036031698434],5565,0:00:00
https://github.com/git/git/commit/3ff53df7b4cbc331d302181d2d6644f4cb860a52,05 Aug 2015,"wrapper: implement xopen()

A common usage pattern of open() is to check if it was successful, and
die() if it was not:

	int fd = open(path, O_WRONLY | O_CREAT, 0777);
	if (fd < 0)
		die_errno(_(""Could not open '%s' for writing.""), path);

Implement a wrapper function xopen() that does the above so that we can
save a few lines of code, and make the die() messages consistent.

Helped-by: Torsten Bögershausen <tboegi@web.de>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_2995.cpp,,,data/crawl/git/old_hunk_2995.cpp,data/crawl/git/new_hunk_2995.cpp,-1,32,,"die_errno(_(""could not open '%s' for writing""), path);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""writing"", ""path""]]",[1848540835495779190],5564,0:00:00
https://github.com/git/git/commit/3ff53df7b4cbc331d302181d2d6644f4cb860a52,05 Aug 2015,"wrapper: implement xopen()

A common usage pattern of open() is to check if it was successful, and
die() if it was not:

	int fd = open(path, O_WRONLY | O_CREAT, 0777);
	if (fd < 0)
		die_errno(_(""Could not open '%s' for writing.""), path);

Implement a wrapper function xopen() that does the above so that we can
save a few lines of code, and make the die() messages consistent.

Helped-by: Torsten Bögershausen <tboegi@web.de>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_2995.cpp,,,data/crawl/git/old_hunk_2995.cpp,data/crawl/git/new_hunk_2995.cpp,-1,30,,"die_errno(_(""could not open '%s' for reading and writing""), path);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""and"", ""writing"", ""path""]]",[-477628635128441935],5563,0:00:00
https://github.com/git/git/commit/38a824fe050c4da3f2e0979a94062119080a77a0,05 Aug 2015,"builtin-am: apply patch with git-apply

Implement applying the patch to the index using git-apply.

If a file is unchanged but stat-dirty, git-apply may erroneously fail to
apply patches, thinking that they conflict with a dirty working tree.

As such, since 2a6f08a (am: refresh the index at start and --resolved,
2011-08-15), git-am will refresh the index before applying patches.
Re-implement this behavior.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/hunk_2982.cpp,,,data/crawl/git/old_hunk_2982.cpp,data/crawl/git/new_hunk_2982.cpp,-1,3,,"printf_ln(_(""Applying: %.*s""), linelen(state->msg), state->msg);","[""addLog""]","[[], [""printf_ln"", ""_"", ""Applying"", ""%"", ""*s"", ""linelen"", ""state"", ""msg"", ""state"", ""msg""]]",[25433689015026522340],5562,0:00:00
https://github.com/git/git/commit/4f1b69617577309d361a006fc77d71a5cff7ec06,05 Aug 2015,"builtin-am: implement -k/--keep, --keep-non-patch

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07),
git-am.sh supported the -k/--keep option to pass the -k option to
git-mailsplit.

Since f7e5ea1 (am: learn passing -b to mailinfo, 2012-01-16), git-am.sh
supported the --keep-non-patch option to pass the -b option to
git-mailsplit.

Re-implement these two options in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_2952.cpp,,,data/crawl/git/old_hunk_2952.cpp,data/crawl/git/new_hunk_2952.cpp,-1,14,,"die(""BUG: invalid value for state->keep"");","[""addLog""]","[[], [""die"", ""BUG"", ""invalid"", ""value"", ""for"", ""state"", ""keep""]]",[-17719395119467717847],5561,0:00:00
https://github.com/git/git/commit/9b646617b8b4894490a549e4db95c1303f40bd25,05 Aug 2015,"builtin-am: implement --[no-]scissors

Since 017678b (am/mailinfo: Disable scissors processing by default,
2009-08-26), git-am supported the --[no-]scissors option, passing it to
git-mailinfo.

Re-implement support for this option in builtin/am.c.

Since the default setting of --scissors in git-mailinfo can be
configured with mailinfo.scissors (and perhaps through other settings in
the future), to be safe we make an explicit distinction between
SCISSORS_UNSET, SCISSORS_TRUE and SCISSORS_FALSE.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_2950.cpp,,,data/crawl/git/old_hunk_2950.cpp,data/crawl/git/new_hunk_2950.cpp,-1,13,,"die(""BUG: invalid value for state->scissors"");","[""addLog""]","[[], [""die"", ""BUG"", ""invalid"", ""value"", ""for"", ""state"", ""scissors""]]",[-26749376130673065133],5560,0:00:00
https://github.com/git/git/commit/5ae41c79b81a5c73939749bee19c1d1075cc0cdf,05 Aug 2015,"builtin-am: support and auto-detect StGit patches

Since c574e68 (git-am foreign patch support: StGIT support, 2009-05-27),
git-am.sh supported converting StGit patches into RFC2822 mail patches
that can be parsed with git-mailinfo.

Implement this by introducing two functions in builtin/am.c:
stgit_patch_to_mail() and split_mail_conv().

stgit_patch_to_mail() is a callback function for split_mail_conv(), and
contains the logic for converting an StGit patch into an RFC2822 mail
patch.

split_mail_conv() implements the logic to go through each file in the
`paths` list, reading from stdin where specified, and calls the callback
function to write the converted patch to the corresponding output file
in the state directory. This interface should be generic enough to
support other foreign patch formats in the future.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to auto-detect StGit patches.
Re-implement this in builtin/am.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_2941.cpp,,,data/crawl/git/old_hunk_2941.cpp,data/crawl/git/new_hunk_2941.cpp,-1,36,,"error(_(""could not open '%s' for reading: %s""),
					*paths, strerror(errno));","[""addLog""]","[[], [""error"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""%s"", ""*paths"", ""strerror"", ""errno""]]",[29045762310171194774],5559,0:00:00
https://github.com/git/git/commit/5ae41c79b81a5c73939749bee19c1d1075cc0cdf,05 Aug 2015,"builtin-am: support and auto-detect StGit patches

Since c574e68 (git-am foreign patch support: StGIT support, 2009-05-27),
git-am.sh supported converting StGit patches into RFC2822 mail patches
that can be parsed with git-mailinfo.

Implement this by introducing two functions in builtin/am.c:
stgit_patch_to_mail() and split_mail_conv().

stgit_patch_to_mail() is a callback function for split_mail_conv(), and
contains the logic for converting an StGit patch into an RFC2822 mail
patch.

split_mail_conv() implements the logic to go through each file in the
`paths` list, reading from stdin where specified, and calls the callback
function to write the converted patch to the corresponding output file
in the state directory. This interface should be generic enough to
support other foreign patch formats in the future.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to auto-detect StGit patches.
Re-implement this in builtin/am.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_2941.cpp,,,data/crawl/git/old_hunk_2941.cpp,data/crawl/git/new_hunk_2941.cpp,-1,82,,"fprintf(out, ""\n%s\n"", sb.buf);","[""addLog""]","[[], [""fprintf"", ""out"", ""\\n%s\\n"", ""sb"", ""buf""]]",[-1596771735404660450],5558,0:00:00
https://github.com/git/git/commit/94cd175cff196d2571bc2e17ad8e9f47ef4b3911,05 Aug 2015,"builtin-am: support and auto-detect mercurial patches

Since 0cfd112 (am: preliminary support for hg patches, 2011-08-29),
git-am.sh could convert mercurial patches to an RFC2822 mail patch
suitable for parsing with git-mailinfo, and queue them in the state
directory for application.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh was able to auto-detect mercurial
patches by checking if the file begins with the line:

	# HG changeset patch

Re-implement the above in builtin/am.c.

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_2935.cpp,,,data/crawl/git/old_hunk_2935.cpp,data/crawl/git/new_hunk_2935.cpp,-1,35,,"error(_(""invalid Date line""));","[""addLog""]","[[], [""error"", ""_"", ""invalid"", ""Date"", ""line""]]",[-2692076971363451595],5557,0:00:00
https://github.com/git/git/commit/5ae41c79b81a5c73939749bee19c1d1075cc0cdf,05 Aug 2015,"builtin-am: support and auto-detect StGit patches

Since c574e68 (git-am foreign patch support: StGIT support, 2009-05-27),
git-am.sh supported converting StGit patches into RFC2822 mail patches
that can be parsed with git-mailinfo.

Implement this by introducing two functions in builtin/am.c:
stgit_patch_to_mail() and split_mail_conv().

stgit_patch_to_mail() is a callback function for split_mail_conv(), and
contains the logic for converting an StGit patch into an RFC2822 mail
patch.

split_mail_conv() implements the logic to go through each file in the
`paths` list, reading from stdin where specified, and calls the callback
function to write the converted patch to the corresponding output file
in the state directory. This interface should be generic enough to
support other foreign patch formats in the future.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to auto-detect StGit patches.
Re-implement this in builtin/am.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_2941.cpp,,,data/crawl/git/old_hunk_2941.cpp,data/crawl/git/new_hunk_2941.cpp,-1,75,,"fprintf(out, ""From:%s\n"", str);","[""addLog""]","[[], [""fprintf"", ""out"", ""From"", ""%s\\n"", ""str""]]",[4197139587620904319],5556,0:00:00
https://github.com/git/git/commit/7eba6ce5c79447579689218d8dab59a8434fd7c7,10 Aug 2015,"prepare_tempfile_object(): new function, extracted from create_tempfile()

This makes the next step easier.

The old code used to use ""path"" to set the initial length of
tempfile->filename. This was not helpful because path was usually
relative whereas the value stored to filename will be absolute. So
just initialize the length to 0.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_2896.cpp,,,data/crawl/git/old_hunk_2896.cpp,data/crawl/git/new_hunk_2896.cpp,28,28,"die(""BUG: create_tempfile called for improperly-reset object"");","die(""BUG: prepare_tempfile_object called for improperly-reset object"");","[""updateContent""]","[[""create_tempfile""], [""prepare_tempfile_object""]]",[-496900719149196043],5555,0:00:00
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2885.cpp,,,data/crawl/git/old_hunk_2885.cpp,data/crawl/git/new_hunk_2885.cpp,27,25,"die(_(""Error wrapping up %s.""), head_file);","die(_(""Error wrapping up %s.""), git_path_head_file());","[""removeVariable"", ""addVariable""]","[[""head_file""], [""git_path_head_file""]]",[3668334893674024372],5554,0:00:00
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2866.cpp,,,data/crawl/git/old_hunk_2866.cpp,data/crawl/git/new_hunk_2866.cpp,16,15,"die(""unknown line in '%s': %s"", merge_head_file, line.buf);","die(""unknown line in '%s': %s"", git_path_merge_head(), line.buf);","[""removeVariable"", ""addVariable""]","[[""merge_head_file""], [""git_path_merge_head""]]",[-3753305004975964646],5553,0:00:00
https://github.com/git/git/commit/2c3aed1381f22494bc06fd66dec8292a296db10f,11 Aug 2015,"pseudoref: check return values from read_ref()

These codepaths attempt to compare the ""expected"" current value with
the actual current value, but did not check if we successfully read
the current value before comparison.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_2859.cpp,,,data/crawl/git/old_hunk_2859.cpp,data/crawl/git/new_hunk_2859.cpp,-1,4,,"die(""could not read ref '%s'"", pseudoref);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""read"", ""ref"", ""%s"", ""pseudoref""]]",[-1123543038674990151],5552,0:00:00
https://github.com/git/git/commit/7687a0541e0a6d86c5005d84057321368181c1b5,09 Oct 2012,"grep: move the configuration parsing logic to grep.[ch]

The configuration handling is a library-ish part of this program,
that is not specific to ""git grep"" command.  It should be reusable
by ""log"" and others.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",265,data/crawl/git/hunk_4036.cpp,,,data/crawl/git/old_hunk_4036.cpp,data/crawl/git/new_hunk_4036.cpp,15,-1,"die(""bad %s argument: %s"", opt, arg);",,"[""removeLog""]","[[""die"", ""bad"", ""%s"", ""argument"", ""%s"", ""opt"", ""arg""], []]",[5003021781308979205],5551,"522 days, 0:00:00"
https://github.com/git/git/commit/30261094b1f7fdcba3b7a1f396e43891cd998149,19 Aug 2015,"push: support signing pushes iff the server supports it

Add a new flag --sign=true (or --sign=false), which means the same
thing as the original --signed (or --no-signed).  Give it a third
value --sign=if-asked to tell push and send-pack to send a push
certificate if and only if the server advertised a push cert nonce.

If not, warn the user that their push may not be as secure as they
thought.

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/hunk_2843.cpp,,,data/crawl/git/old_hunk_2843.cpp,data/crawl/git/new_hunk_2843.cpp,8,-1,"die(""helper %s does not support --signed"", data->name);",,"[""removeLog""]","[[""die"", ""helper"", ""%s"", ""does"", ""not"", ""support"", ""signed"", ""data"", ""name""], []]",[14183710330991205327],5550,0:00:00
https://github.com/git/git/commit/30261094b1f7fdcba3b7a1f396e43891cd998149,19 Aug 2015,"push: support signing pushes iff the server supports it

Add a new flag --sign=true (or --sign=false), which means the same
thing as the original --signed (or --no-signed).  Give it a third
value --sign=if-asked to tell push and send-pack to send a push
certificate if and only if the server advertised a push cert nonce.

If not, warn the user that their push may not be as secure as they
thought.

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/hunk_2843.cpp,,,data/crawl/git/old_hunk_2843.cpp,data/crawl/git/new_hunk_2843.cpp,5,3,"die(""helper %s does not support dry-run"", data->name);","set_common_push_options(transport, data->name, flags);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""helper"", ""%s"", ""does"", ""not"", ""support"", ""dry"", ""run""], [""set_common_push_options"", ""transport"", ""flags""]]",[17622994009777697215],5549,0:00:00
https://github.com/git/git/commit/68c757f2199911005918aba45aa8ae0fecc72074,19 Aug 2015,"push: add a config option push.gpgSign for default signed pushes

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/hunk_2838.cpp,,,data/crawl/git/old_hunk_2838.cpp,data/crawl/git/new_hunk_2838.cpp,-1,21,,"error(""Invalid value for '%s'"", k);","[""addLog""]","[[], [""error"", ""Invalid"", ""value"", ""for"", ""%s"", ""k""]]",[-11982133147611034495],5548,0:00:00
https://github.com/git/git/commit/856665f827c31ace3f19e672f8911f7f15f2a0e2,30 Sep 2007,"parse_date_format(): convert a format name to an enum date_mode

Factor out the code to parse --date=<format> parameter to revision
walkers into a separate function, parse_date_format().  This function
is passed a string and converts it to an enum date_format:

 - ""relative""         => DATE_RELATIVE
 - ""iso8601"" or ""iso"" => DATE_ISO8601
 - ""rfc2822""          => DATE_RFC2822
 - ""short""            => DATE_SHORT
 - ""local""            => DATE_LOCAL
 - ""default""          => DATE_NORMAL

In the event that none of these strings is found, the function die()s.

Signed-off-by: Andy Parkins <andyparkins@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_7954.cpp,,,data/crawl/git/old_hunk_7954.cpp,data/crawl/git/new_hunk_7954.cpp,-1,20,,"die(""unknown date format %s"", format);","[""addLog""]","[[], [""die"", ""unknown"", ""date"", ""format"", ""%s"", ""format""]]",[-9558725370580044714],5547,"1447 days, 12:00:00"
https://github.com/git/git/commit/ee8838d157761acf4cc38f2378277dc894c10eb0,08 Sep 2015,"submodule: rewrite `module_clone` shell function in C

This reimplements the helper function `module_clone` in shell
in C as `clone`. This functionality is needed for converting
`git submodule update` later on, which we want to add threading
to.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",210,data/crawl/git/hunk_2816.cpp,,,data/crawl/git/old_hunk_2816.cpp,data/crawl/git/new_hunk_2816.cpp,-1,92,,"die(_(""could not create directory '%s'""), path);","[""addLog""]","[[], [""die"", ""_"", ""could"", ""not"", ""create"", ""directory"", ""%s"", ""path""]]",[10030788180699552994],5546,0:00:00
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3009.cpp,,,data/crawl/git/old_hunk_3009.cpp,data/crawl/git/new_hunk_3009.cpp,974,-1,"fputs(sb.buf, stdout);",,"[""removeLog""]","[[""fputs"", ""sb"", ""buf"", ""stdout""], []]",[11880400360132269299],5545,"22 days, 12:00:00"
https://github.com/git/git/commit/ac4cc866c8cddbc25b5f213286a0269318dd2485,17 Sep 2015,"tag.c: use 'ref-filter' data structures

Make 'tag.c' use 'ref-filter' data structures and make changes to
support the new data structures. This is a part of the process
of porting 'tag.c' to use 'ref-filter' APIs.

This is a temporary step before porting 'tag.c' to use 'ref-filter'
completely. As this is a temporary step, most of the code
introduced here will be removed when 'tag.c' is ported over to use
'ref-filter' APIs.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/hunk_2803.cpp,,,data/crawl/git/old_hunk_2803.cpp,data/crawl/git/new_hunk_2803.cpp,31,31,"printf(""%s\n"", filter.tags.items[i].string);","printf(""%s\n"", array.items[i]->refname);","[""updateVariable"", ""removeVariable""]","[[""filter"", ""tags"", ""string""], [""array"", ""refname""]]",[14276568734015348715],5544,0:00:00
https://github.com/git/git/commit/3efb988098858bf6b974b1e673a190f9d2965d1d,28 Sep 2015,"react to errors in xdi_diff

When we call into xdiff to perform a diff, we generally lose
the return code completely. Typically by ignoring the return
of our xdi_diff wrapper, but sometimes we even propagate
that return value up and then ignore it later.  This can
lead to us silently producing incorrect diffs (e.g., ""git
log"" might produce no output at all, not even a diff header,
for a content-level diff).

In practice this does not happen very often, because the
typical reason for xdiff to report failure is that it
malloc() failed (it uses straight malloc, and not our
xmalloc wrapper).  But it could also happen when xdiff
triggers one our callbacks, which returns an error (e.g.,
outf() in builtin/rerere.c tries to report a write failure
in this way). And the next patch also plans to add more
failure modes.

Let's notice an error return from xdiff and react
appropriately. In most of the diff.c code, we can simply
die(), which matches the surrounding code (e.g., that is
what we do if we fail to load a file for diffing in the
first place). This is not that elegant, but we are probably
better off dying to let the user know there was a problem,
rather than simply generating bogus output.

We could also just die() directly in xdi_diff, but the
callers typically have a bit more context, and can provide a
better message (and if we do later decide to pass errors up,
we're one step closer to doing so).

There is one interesting case, which is in diff_grep(). Here
if we cannot generate the diff, there is nothing to match,
and we silently return ""no hits"". This is actually what the
existing code does already, but we make it a little more
explicit.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_2747.cpp,,,data/crawl/git/old_hunk_2747.cpp,data/crawl/git/new_hunk_2747.cpp,-1,5,,"die(""unable to generate combined diff for %s"",
		    sha1_to_hex(parent));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""combined"", ""diff"", ""for"", ""%s"", ""sha1_to_hex"", ""parent""]]",[-27694755973062753870],5543,0:00:00
https://github.com/git/git/commit/a5a27c79b7e77e28462b6d089e827391b67d3e5f,20 Feb 2008,"Add a --cover-letter option to format-patch

If --cover-letter is provided, generate a cover letter message before
the patches, numbered 0.

Original patch thanks to Johannes Schindelin

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",379,data/crawl/git/hunk_7435.cpp,,,data/crawl/git/old_hunk_7435.cpp,data/crawl/git/new_hunk_7435.cpp,-1,38,,"printf(""%s\n"", sb.buf);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""sb"", ""buf""]]",[13724119099540645662],5542,"1393 days, 12:00:00"
https://github.com/git/git/commit/39afcd38196fa3594924a73896e5fa2bca21dd63,21 Oct 2015,"mailinfo: move handle_boundary() lower

This function wants to call find_boundary() and is called only from
one place without any recursing, so it becomes easier to read if it
appears after the called function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",114,data/crawl/git/hunk_2649.cpp,,,data/crawl/git/old_hunk_2649.cpp,data/crawl/git/new_hunk_2649.cpp,-1,30,,"fprintf(stderr, ""Detected mismatched boundaries, ""
					""can't recover\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Detected"", ""mismatched"", ""boundaries"", ""can"", ""t"", ""recover\\n""]]",[-14807304276460994006],5541,0:00:00
https://github.com/git/git/commit/39afcd38196fa3594924a73896e5fa2bca21dd63,21 Oct 2015,"mailinfo: move handle_boundary() lower

This function wants to call find_boundary() and is called only from
one place without any recursing, so it becomes easier to read if it
appears after the called function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",114,data/crawl/git/hunk_2648.cpp,,,data/crawl/git/old_hunk_2648.cpp,data/crawl/git/new_hunk_2648.cpp,32,-1,"fprintf(stderr, ""Detected mismatched boundaries, ""
					""can't recover\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Detected"", ""mismatched"", ""boundaries"", ""can"", ""t"", ""recover\\n""], []]",[14807304276460994006],5540,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2535.cpp,,,data/crawl/git/old_hunk_2535.cpp,data/crawl/git/new_hunk_2535.cpp,2,2,"die(""git upload-pack: not our ref %s"",
			    sha1_to_hex(o->sha1));","die(""git upload-pack: not our ref %s"",
			    oid_to_hex(&o->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""o"", ""sha1""], [""oid_to_hex"", ""&o"", ""oid""]]",[11703065646517248481],5539,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2522.cpp,,,data/crawl/git/old_hunk_2522.cpp,data/crawl/git/new_hunk_2522.cpp,2,2,"die(""cannot simplify commit %s (invalid %s)"",
					    sha1_to_hex(commit->object.sha1),
					    sha1_to_hex(p->object.sha1));","die(""cannot simplify commit %s (invalid %s)"",
					    oid_to_hex(&commit->object.oid),
					    oid_to_hex(&p->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""commit"", ""sha1"", ""sha1_to_hex"", ""p"", ""sha1""], [""oid_to_hex"", ""&commit"", ""oid"", ""oid_to_hex"", ""&p"", ""oid""]]",[17768453367023733048],5538,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2516.cpp,,,data/crawl/git/old_hunk_2516.cpp,data/crawl/git/new_hunk_2516.cpp,9,9,"die(""Commit %s doesn't have an indexed bitmap"", sha1_to_hex(root->sha1));","die(""Commit %s doesn't have an indexed bitmap"", oid_to_hex(&root->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""root"", ""sha1""], [""oid_to_hex"", ""&root"", ""oid""]]",[11448241357965484811],5537,0:00:00
https://github.com/git/git/commit/e850194c83985396435b01b70d2db00b6d3af02e,10 Dec 2015,"ident: make xgetpwuid_self() a static local helper

This function is defined in wrapper.c, but nobody besides
ident.c uses it. And nobody is likely to in the future,
either, as anything that cares about the user's name should
be going through the ident code.

Moving it here is a cleanup of the global namespace, but it
will also enable further cleanups inside ident.c.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_2364.cpp,,,data/crawl/git/old_hunk_2364.cpp,data/crawl/git/new_hunk_2364.cpp,10,-1,"die(_(""unable to look up current user in the passwd file: %s""),
		    errno ? strerror(errno) : _(""no such user""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""look"", ""up"", ""current"", ""user"", ""in"", ""the"", ""passwd"", ""file"", ""%s"", ""errno"", ""strerror"", ""errno"", ""_"", ""no"", ""such"", ""user""], []]",[-31095348350985283265],5536,"2 days, 0:00:00"
https://github.com/git/git/commit/c553c72eed64b5f7316ce227f6d5d783eae6f2ed,16 Dec 2015,"run-command: add an asynchronous parallel child processor

This allows to run external commands in parallel with ordered output
on stderr.

If we run external commands in parallel we cannot pipe the output directly
to the our stdout/err as it would mix up. So each process's output will
flow through a pipe, which we buffer. One subprocess can be directly
piped to out stdout/err for a low latency feedback to the user.

Example:
Let's assume we have 5 submodules A,B,C,D,E and each fetch takes a
different amount of time as the different submodules vary in size, then
the output of fetches in sequential order might look like this:

 time -->
 output: |---A---| |-B-| |-------C-------| |-D-| |-E-|

When we schedule these submodules into maximal two parallel processes,
a schedule and sample output over time may look like this:

process 1: |---A---| |-D-| |-E-|

process 2: |-B-| |-------C-------|

output:    |---A---|B|---C-------|DE

So A will be perceived as it would run normally in the single child
version. As B has finished by the time A is done, we can dump its whole
progress buffer on stderr, such that it looks like it finished in no
time. Once that is done, C is determined to be the visible child and
its progress will be reported in real time.

So this way of output is really good for human consumption, as it only
changes the timing, not the actual output.

For machine consumption the output needs to be prepared in the tasks,
by either having a prefix per line or per block to indicate whose tasks
output is displayed, because the output order may not follow the
original sequential ordering:

 |----A----| |--B--| |-C-|

will be scheduled to be all parallel:

process 1: |----A----|
process 2: |--B--|
process 3: |-C-|
output:    |----A----|CB

This happens because C finished before B did, so it will be queued for
output before B.

To detect when a child has finished executing, we check interleaved
with other actions (such as checking the liveliness of children or
starting new processes) whether the stderr pipe still exists. Once a
child closed its stderr stream, we assume it is terminating very soon,
and use `finish_command()` from the single external process execution
interface to collect the exit status.

By maintaining the strong assumption of stderr being open until the
very end of a child process, we can avoid other hassle such as an
implementation using `waitpid(-1)`, which is not implemented in Windows.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",523,data/crawl/git/hunk_2352.cpp,,,data/crawl/git/old_hunk_2352.cpp,data/crawl/git/new_hunk_2352.cpp,-1,271,,"fputs(pp->children[i].err.buf, stderr);","[""addLog""]","[[], [""fputs"", ""pp"", ""children[i]"", ""err"", ""buf"", ""stderr""]]",[-9220945004933533788],5535,0:00:00
https://github.com/git/git/commit/1b25892636d2f250eb2163301440ee8c8c1ac944,01 Jan 2013,"test-wildmatch: add ""perf"" command to compare wildmatch and fnmatch

It takes a text file, a pattern, a number <n> and pathname flag. Each
line in the text file is matched against the pattern <n> times. If
""pathname"" is given, FNM_PATHNAME is used.

test-wildmatch is built with -O2 and tested against glibc 2.14.1 (also
-O2) and compat/fnmatch. The input file is linux-2.6.git file list.
<n> is 2000. The complete command list is at the end.

wildmatch is beaten in the following cases. Apparently it needs some
improvement in FNM_PATHNAME case:

glibc, '*/*/*' with FNM_PATHNAME:
wildmatch 8s 1559us
fnmatch   1s 11877us or 12.65% faster

compat, '*/*/*' with FNM_PATHNAME:
wildmatch 7s 922458us
fnmatch   2s 905111us or 36.67% faster

compat, '*/*/*' without FNM_PATHNAME:
wildmatch 7s 264201us
fnmatch   2s 1897us or 27.56% faster

compat, '[a-z]*/[a-z]*/[a-z]*' with FNM_PATHNAME:
wildmatch 8s 742827us
fnmatch   0s 922943us or 10.56% faster

compat, '[a-z]*/[a-z]*/[a-z]*' without FNM_PATHNAME:
wildmatch 8s 284520us
fnmatch   0s 6936us or 0.08% faster

The rest of glibc numbers
-------------------------

'Documentation/*'
wildmatch 1s 529479us
fnmatch   1s 98263us or 71.81% slower

'drivers/*'
wildmatch 1s 988288us
fnmatch   1s 192049us or 59.95% slower

'Documentation/*' pathname
wildmatch 1s 557507us
fnmatch   1s 93696us or 70.22% slower

'drivers/*' pathname
wildmatch 2s 161626us
fnmatch   1s 230372us or 56.92% slower

'[Dd]ocu[Mn]entation/*'
wildmatch 1s 776581us
fnmatch   1s 471693us or 82.84% slower

'[Dd]o?u[Mn]en?ati?n/*'
wildmatch 1s 770770us
fnmatch   1s 555727us or 87.86% slower

'[Dd]o?u[Mn]en?ati?n/*' pathname
wildmatch 1s 783507us
fnmatch   1s 537029us or 86.18% slower

'[A-Za-z][A-Za-z]??*'
wildmatch 4s 110386us
fnmatch   4s 926306us or 119.85% slower

'[A-Za-z][A-Za-z]??'
wildmatch 3s 918114us
fnmatch   3s 686175us or 94.08% slower

'[A-Za-z][A-Za-z]??*' pathname
wildmatch 4s 453746us
fnmatch   4s 955856us or 111.27% slower

'[A-Za-z][A-Za-z]??' pathname
wildmatch 3s 896646us
fnmatch   3s 733828us or 95.82% slower

'*/*/*'
wildmatch 7s 287985us
fnmatch   1s 74083us or 14.74% slower

'[a-z]*/[a-z]*/[a-z]*' pathname
wildmatch 8s 796659us
fnmatch   1s 568409us or 17.83% slower

'[a-z]*/[a-z]*/[a-z]*'
wildmatch 8s 316559us
fnmatch   3s 430652us or 41.25% slower

The rest of compat numbers
--------------------------

'Documentation/*'
wildmatch 1s 520389us
fnmatch   0s 62579us or 4.12% slower

'drivers/*'
wildmatch 1s 955354us
fnmatch   0s 190109us or 9.72% slower

'Documentation/*' pathname
wildmatch 1s 561675us
fnmatch   0s 55336us or 3.54% slower

'drivers/*' pathname
wildmatch 2s 106100us
fnmatch   0s 219680us or 10.43% slower

'[Dd]ocu[Mn]entation/*'
wildmatch 1s 750810us
fnmatch   0s 542721us or 31.00% slower

'[Dd]o?u[Mn]en?ati?n/*'
wildmatch 1s 724791us
fnmatch   0s 538948us or 31.25% slower

'[Dd]o?u[Mn]en?ati?n/*' pathname
wildmatch 1s 731403us
fnmatch   0s 537474us or 31.04% slower

'[A-Za-z][A-Za-z]??*'
wildmatch 4s 28555us
fnmatch   1s 67297us or 26.49% slower

'[A-Za-z][A-Za-z]??'
wildmatch 3s 838279us
fnmatch   0s 880005us or 22.93% slower

'[A-Za-z][A-Za-z]??*' pathname
wildmatch 4s 379476us
fnmatch   1s 55643us or 24.10% slower

'[A-Za-z][A-Za-z]??' pathname
wildmatch 3s 830910us
fnmatch   0s 849699us or 22.18% slower

The following commands are used:

LANG=C ./test-wildmatch perf /tmp/filelist.txt 'Documentation/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt 'drivers/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt 'Documentation/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt 'drivers/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[Dd]ocu[Mn]entation/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[Dd]o?u[Mn]en?ati?n/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[Dd]o?u[Mn]en?ati?n/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[A-Za-z][A-Za-z]??' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '*/*/*' 2000
LANG=C ./test-wildmatch perf /tmp/filelist.txt '*/*/*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[a-z]*/[a-z]*/[a-z]*' 2000 pathname
LANG=C ./test-wildmatch perf /tmp/filelist.txt '[a-z]*/[a-z]*/[a-z]*' 2000

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/hunk_3978.cpp,,,data/crawl/git/old_hunk_3978.cpp,data/crawl/git/new_hunk_3978.cpp,-1,23,,"die_errno(""read"");","[""addLog""]","[[], [""die_errno"", ""read""]]",[-12577447827504150922],5534,"539 days, 12:00:00"
https://github.com/git/git/commit/c553c72eed64b5f7316ce227f6d5d783eae6f2ed,16 Dec 2015,"run-command: add an asynchronous parallel child processor

This allows to run external commands in parallel with ordered output
on stderr.

If we run external commands in parallel we cannot pipe the output directly
to the our stdout/err as it would mix up. So each process's output will
flow through a pipe, which we buffer. One subprocess can be directly
piped to out stdout/err for a low latency feedback to the user.

Example:
Let's assume we have 5 submodules A,B,C,D,E and each fetch takes a
different amount of time as the different submodules vary in size, then
the output of fetches in sequential order might look like this:

 time -->
 output: |---A---| |-B-| |-------C-------| |-D-| |-E-|

When we schedule these submodules into maximal two parallel processes,
a schedule and sample output over time may look like this:

process 1: |---A---| |-D-| |-E-|

process 2: |-B-| |-------C-------|

output:    |---A---|B|---C-------|DE

So A will be perceived as it would run normally in the single child
version. As B has finished by the time A is done, we can dump its whole
progress buffer on stderr, such that it looks like it finished in no
time. Once that is done, C is determined to be the visible child and
its progress will be reported in real time.

So this way of output is really good for human consumption, as it only
changes the timing, not the actual output.

For machine consumption the output needs to be prepared in the tasks,
by either having a prefix per line or per block to indicate whose tasks
output is displayed, because the output order may not follow the
original sequential ordering:

 |----A----| |--B--| |-C-|

will be scheduled to be all parallel:

process 1: |----A----|
process 2: |--B--|
process 3: |-C-|
output:    |----A----|CB

This happens because C finished before B did, so it will be queued for
output before B.

To detect when a child has finished executing, we check interleaved
with other actions (such as checking the liveliness of children or
starting new processes) whether the stderr pipe still exists. Once a
child closed its stderr stream, we assume it is terminating very soon,
and use `finish_command()` from the single external process execution
interface to collect the exit status.

By maintaining the strong assumption of stderr being open until the
very end of a child process, we can avoid other hassle such as an
implementation using `waitpid(-1)`, which is not implemented in Windows.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",523,data/crawl/git/hunk_2352.cpp,,,data/crawl/git/old_hunk_2352.cpp,data/crawl/git/new_hunk_2352.cpp,-1,275,,"fputs(pp->buffered_output.buf, stderr);","[""addLog""]","[[], [""fputs"", ""pp"", ""buffered_output"", ""buf"", ""stderr""]]",[-5638998729183578087],5533,0:00:00
https://github.com/git/git/commit/b9badadd06ae307c5e1e0e7c36985a1360cabc22,29 Dec 2015,"create_symref: modernize variable names

Once upon a time, create_symref() was used only to point
HEAD at a branch name, and the variable names reflect that
(e.g., calling the path git_HEAD). However, it is much more
generic these days (and has been for some time). Let's
update the variable names to make it easier to follow:

  - `ref_target` is now just `refname`. This is closer to
    the `ref` that is already in `cache.h`, but with the
    extra twist that ""name"" makes it clear this is the name
    and not a ref struct. Dropping ""target"" hopefully makes
    it clear that we are talking about the symref itself,
    not what it points to.

  - `git_HEAD` is now `ref_path`; the on-disk path
    corresponding to `ref`.

  - `refs_heads_master` is now just `target`; i.e., what the
    symref points at. This term also matches what is in
    the symlink(2) manpage (at least on Linux).

  - the buffer to hold the symref file's contents was simply
    called `ref`. It's now `buf` (admittedly also generic,
    but at least not actively introducing confusion with the
    other variable holding the refname).

Signed-off-by: Jeff King <peff@peff.net>
Reviewed-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_2346.cpp,,,data/crawl/git/old_hunk_2346.cpp,data/crawl/git/new_hunk_2346.cpp,45,44,"error(""Unable to create %s"", git_HEAD);","error(""Unable to create %s"", ref_path);","[""updateVariable""]","[[""git_HEAD""], [""ref_path""]]",[14208840960546651158],5532,0:00:00
https://github.com/git/git/commit/4be49d756894daca0e8a4477d36c6ed1096ccddc,12 Jan 2016,"checkout,clone: check return value of create_symref

It's unlikely that we would fail to create or update a
symbolic ref (especially HEAD), but if we do, we should
notice and complain. Note that there's no need to give more
details in our error message; create_symref will already
have done so.

While we're here, let's also fix a minor memory leak in
clone.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_2342.cpp,,,data/crawl/git/old_hunk_2342.cpp,data/crawl/git/new_hunk_2342.cpp,-1,4,,"die(""unable to update HEAD"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""update"", ""HEAD""]]",[5605959022436879452],5531,0:00:00
https://github.com/git/git/commit/0d0bac67ce3b3f2301702573f6acc100798d7edd,01 Feb 2016,"transport: drop support for git-over-rsync

The git-over-rsync protocol is inefficient and broken, and
has been for a long time. It transfers way more objects than
it needs (grabbing all of the remote's ""objects/"",
regardless of which objects we need). It does its own ad-hoc
parsing of loose and packed refs from the remote, but
doesn't properly override packed refs with loose ones,
leading to garbage results (e.g., expecting the other side
to have an object pointed to by a stale packed-refs entry,
or complaining that the other side has two copies of the
refs[1]).

This latter breakage means that nobody could have
successfully pulled from a moderately active repository
since cd547b4 (fetch/push: readd rsync support, 2007-10-01).

We never made an official deprecation notice in the release
notes for git's rsync protocol, but the tutorial has marked
it as such since 914328a (Update tutorial., 2005-08-30).
And on the mailing list as far back as Oct 2005, we can find
Junio mentioning it as having ""been deprecated for quite
some time.""[2,3,4]. So it was old news then; cogito had
deprecated the transport in July of 2005[5] (though it did
come back briefly when Linus broke git-http-pull!).

Of course some people professed their love of rsync through
2006, but Linus clarified in his usual gentle manner[6]:

  > Thanks!  This is why I still use rsync, even though
  > everybody and their mother tells me ""Linus says rsync is
  > deprecated.""

  No. You're using rsync because you're actively doing
  something _wrong_.

The deprecation sentiment was reinforced in 2008, with a
mention that cloning via rsync is broken (with no fix)[7].

Even the commit porting rsync over to C from shell (cd547b4)
lists it as deprecated! So between the 10 years of informal
warnings, and the fact that it has been severely broken
since 2007, it's probably safe to simply remove it without
further deprecation warnings.

[1] http://article.gmane.org/gmane.comp.version-control.git/285101
[2] http://article.gmane.org/gmane.comp.version-control.git/10093
[3] http://article.gmane.org/gmane.comp.version-control.git/17734
[4] http://article.gmane.org/gmane.comp.version-control.git/18911
[5] http://article.gmane.org/gmane.comp.version-control.git/5617
[6] http://article.gmane.org/gmane.comp.version-control.git/19354
[7] http://article.gmane.org/gmane.comp.version-control.git/103635

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",405,data/crawl/git/hunk_2300.cpp,,,data/crawl/git/old_hunk_2300.cpp,data/crawl/git/new_hunk_2300.cpp,49,-1,"die (""Could not run rsync to get refs"");",,"[""removeLog""]","[[""die"", ""Could"", ""not"", ""run"", ""rsync"", ""to"", ""get"", ""refs""], []]",[1680571651316806381],5530,0:00:00
https://github.com/git/git/commit/0d0bac67ce3b3f2301702573f6acc100798d7edd,01 Feb 2016,"transport: drop support for git-over-rsync

The git-over-rsync protocol is inefficient and broken, and
has been for a long time. It transfers way more objects than
it needs (grabbing all of the remote's ""objects/"",
regardless of which objects we need). It does its own ad-hoc
parsing of loose and packed refs from the remote, but
doesn't properly override packed refs with loose ones,
leading to garbage results (e.g., expecting the other side
to have an object pointed to by a stale packed-refs entry,
or complaining that the other side has two copies of the
refs[1]).

This latter breakage means that nobody could have
successfully pulled from a moderately active repository
since cd547b4 (fetch/push: readd rsync support, 2007-10-01).

We never made an official deprecation notice in the release
notes for git's rsync protocol, but the tutorial has marked
it as such since 914328a (Update tutorial., 2005-08-30).
And on the mailing list as far back as Oct 2005, we can find
Junio mentioning it as having ""been deprecated for quite
some time.""[2,3,4]. So it was old news then; cogito had
deprecated the transport in July of 2005[5] (though it did
come back briefly when Linus broke git-http-pull!).

Of course some people professed their love of rsync through
2006, but Linus clarified in his usual gentle manner[6]:

  > Thanks!  This is why I still use rsync, even though
  > everybody and their mother tells me ""Linus says rsync is
  > deprecated.""

  No. You're using rsync because you're actively doing
  something _wrong_.

The deprecation sentiment was reinforced in 2008, with a
mention that cloning via rsync is broken (with no fix)[7].

Even the commit porting rsync over to C from shell (cd547b4)
lists it as deprecated! So between the 10 years of informal
warnings, and the fact that it has been severely broken
since 2007, it's probably safe to simply remove it without
further deprecation warnings.

[1] http://article.gmane.org/gmane.comp.version-control.git/285101
[2] http://article.gmane.org/gmane.comp.version-control.git/10093
[3] http://article.gmane.org/gmane.comp.version-control.git/17734
[4] http://article.gmane.org/gmane.comp.version-control.git/18911
[5] http://article.gmane.org/gmane.comp.version-control.git/5617
[6] http://article.gmane.org/gmane.comp.version-control.git/19354
[7] http://article.gmane.org/gmane.comp.version-control.git/103635

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",405,data/crawl/git/hunk_2300.cpp,,,data/crawl/git/old_hunk_2300.cpp,data/crawl/git/new_hunk_2300.cpp,171,-1,"die_errno (""Could not make temporary directory"");",,"[""removeLog""]","[[""die_errno"", ""Could"", ""not"", ""make"", ""temporary"", ""directory""], []]",[-2744670522554534102],5529,0:00:00
https://github.com/git/git/commit/aac4fac1689f7d1414523d2ac96f1c737ee53b71,10 Feb 2016,"get_sha1: don't die() on bogus search strings

The get_sha1() function generally returns an error code
rather than dying, and we sometimes speculatively call it
with something that may be a revision or a pathspec, in
order to see which one it might be.

If it sees a bogus "":/"" search string, though, it complains,
without giving the caller the opportunity to recover. We can
demonstrate this in t6133 by looking for "":/*.t"", which
should mean ""*.t at the root of the tree"", but instead dies
because of the invalid regex (the ""*"" has nothing to operate
on).

We can fix this by returning an error rather than calling
die(). Unfortunately, the tradeoff is that the error message
is slightly worse in cases where we _do_ know we have a rev.
E.g., running ""git log ':/*.t' --"" before yielded:

  fatal: Invalid search pattern: *.t

and now we get only:

  fatal: bad revision ':/*.t'

There's not a simple way to fix this short of passing a
""quiet"" flag all the way through the get_sha1() stack.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_2293.cpp,,,data/crawl/git/old_hunk_2293.cpp,data/crawl/git/new_hunk_2293.cpp,8,-1,"die(""Invalid search pattern: %s"", prefix);",,"[""removeLog""]","[[""die"", ""Invalid"", ""search"", ""pattern"", ""%s"", ""prefix""], []]",[23941926938155349998],5528,0:00:00
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3009.cpp,,,data/crawl/git/old_hunk_3009.cpp,data/crawl/git/new_hunk_3009.cpp,660,-1,"die(_(""unable to parse format""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""parse"", ""format""], []]",[-2440638559342948354],5527,"99 days, 0:00:00"
https://github.com/git/git/commit/40a7551d25efac7979ee1a675c05e67313205444,17 Sep 2015,"ref-filter: introduce match_atom_name()

Introduce match_atom_name() which helps in checking if a particular
atom is the atom we're looking for and if it has a value attached to
it or not.

Use it instead of starts_with() for checking the value of %(color:...)
atom. Write a test for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Thanks-to: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_2810.cpp,,,data/crawl/git/old_hunk_2810.cpp,data/crawl/git/new_hunk_2810.cpp,-1,7,,"die(_(""expected format: %%(color:<color>)""));","[""addLog""]","[[], [""die"", ""_"", ""expected"", ""format"", ""%%"", ""color"", ""color""]]",[25987670656866354910],5526,"76 days, 12:00:00"
https://github.com/git/git/commit/ce59208293f793ae822b5bfdf4040739f1c3ccb7,17 Sep 2015,"ref-filter: implement an `align` atom

Implement an `align` atom which left-, middle-, or right-aligns the
content between %(align:...) and %(end).

The ""align:"" is followed by `<width>` and `<position>` in any order
separated by a comma, where the `<position>` is either left, right or
middle, default being left and `<width>` is the total length of the
content with alignment. If the contents length is more than the width
then no alignment is performed.  e.g. to align a refname atom to the
middle with a total width of 40 we can do:
--format=""%(align:middle,40)%(refname)%(end)"".

We introduce an `at_end` function for each element of the stack which
is to be called when the `end` atom is encountered. Using this we
implement end_align_handler() for the `align` atom, this aligns the
final strbuf by calling `strbuf_utf8_align()` from utf8.c.

Ensure that quote formatting is performed on the whole of
%(align:...)...%(end) rather than individual atoms inside. We skip
quote formatting for individual atoms when the current stack element
is handling an %(align:...) atom and perform quote formatting at the
end when we encounter the %(end) atom of the second element of then
stack.

Add documentation and tests for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",203,data/crawl/git/hunk_2808.cpp,,,data/crawl/git/old_hunk_2808.cpp,data/crawl/git/new_hunk_2808.cpp,-1,37,,"die(_(""positive width expected with the %%(align) atom""));","[""addLog""]","[[], [""die"", ""_"", ""positive"", ""width"", ""expected"", ""with"", ""the"", ""%%"", ""align"", ""atom""]]",[7314779664947736824],5525,"76 days, 12:00:00"
https://github.com/git/git/commit/ce59208293f793ae822b5bfdf4040739f1c3ccb7,17 Sep 2015,"ref-filter: implement an `align` atom

Implement an `align` atom which left-, middle-, or right-aligns the
content between %(align:...) and %(end).

The ""align:"" is followed by `<width>` and `<position>` in any order
separated by a comma, where the `<position>` is either left, right or
middle, default being left and `<width>` is the total length of the
content with alignment. If the contents length is more than the width
then no alignment is performed.  e.g. to align a refname atom to the
middle with a total width of 40 we can do:
--format=""%(align:middle,40)%(refname)%(end)"".

We introduce an `at_end` function for each element of the stack which
is to be called when the `end` atom is encountered. Using this we
implement end_align_handler() for the `align` atom, this aligns the
final strbuf by calling `strbuf_utf8_align()` from utf8.c.

Ensure that quote formatting is performed on the whole of
%(align:...)...%(end) rather than individual atoms inside. We skip
quote formatting for individual atoms when the current stack element
is handling an %(align:...) atom and perform quote formatting at the
end when we encounter the %(end) atom of the second element of then
stack.

Add documentation and tests for the same.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",203,data/crawl/git/hunk_2808.cpp,,,data/crawl/git/old_hunk_2808.cpp,data/crawl/git/new_hunk_2808.cpp,-1,9,,"die(_(""expected format: %%(align:<width>,<position>)""));","[""addLog""]","[[], [""die"", ""_"", ""expected"", ""format"", ""%%"", ""align"", ""width"", ""position""]]",[18195138398036037474],5524,"76 days, 12:00:00"
https://github.com/git/git/commit/473166b99078a2724b4fcda11a6a5327b9af60da,22 Feb 2016,"config: add 'origin_type' to config_source struct

Use the config origin_type to print more detailed error messages that
inform the user about the origin of a config error (file, stdin, blob).

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/hunk_2265.cpp,,,data/crawl/git/old_hunk_2265.cpp,data/crawl/git/new_hunk_2265.cpp,5,5,"error(_(""bad config file line %d in %s""), cf->linenr, cf->name);","error(_(""bad config line %d in %s %s""), cf->linenr, cf->origin_type, cf->name);","[""updateContent"", ""addVariable""]","[[""file""], [""%s"", ""origin_type"", ""cf""]]",[-4657385442190307757],5523,0:00:00
https://github.com/git/git/commit/b07bdd3472886cbdd412ee3e7489273522c43133,23 May 2014,"remote rm: delete remote configuration as the last

When removing a remote, delete the remote-tracking branches before
deleting the remote configuration.  This way, if the operation fails or
is aborted while deleting the remote-tracking branches, the command can
be rerun to complete the operation.

Signed-off-by: Jens LindstrÃ¶m <jl@opera.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_3294.cpp,,,data/crawl/git/old_hunk_3294.cpp,data/crawl/git/new_hunk_3294.cpp,5,-1,"error(_(""Could not remove config section '%s'""), buf.buf);",,"[""removeLog""]","[[""error"", ""_"", ""Could"", ""not"", ""remove"", ""config"", ""section"", ""%s"", ""buf"", ""buf""], []]",[-24017358700439513473],5522,"320 days, 0:00:00"
https://github.com/git/git/commit/5bf9219d01b16444b316fe764b58d15bd9265f74,26 Jan 2010,"Add xmallocz()

Add routine for allocating NUL-terminated memory block without risking
integer overflow in addition of +1 for NUL byte.

[jc: with suggestion from Bill Lear]

Signed-off-by: Ilari Liusvaara <ilari.liusvaara@elisanet.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_5444.cpp,,,data/crawl/git/old_hunk_5444.cpp,data/crawl/git/new_hunk_5444.cpp,-1,7,,"die(""Data too large to fit into virtual memory space."");","[""addLog""]","[[], [""die"", ""Data"", ""too"", ""large"", ""to"", ""fit"", ""into"", ""virtual"", ""memory"", ""space""]]",[-22484717587841981737],5521,"1109 days, 0:00:00"
https://github.com/git/git/commit/d212ca1724b1a3708a3b4cb72c58b20ef442b24f,29 Apr 2009,"git config: error when editing a repo config and not being in one

Let's throw an error on this specific case. If the user specifies the
config file, he must know what he is doing.

Teemu Likonen pointed this out.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_6091.cpp,,,data/crawl/git/old_hunk_6091.cpp,data/crawl/git/new_hunk_6091.cpp,-1,4,,"die(""not in a git directory"");","[""addLog""]","[[], [""die"", ""not"", ""in"", ""a"", ""git"", ""directory""]]",[-611552826039058093],5520,"1246 days, 12:00:00"
https://github.com/git/git/commit/a43219f2aaa39fbc53ba0aee2481e1cca3c0e649,28 Jan 2014,"rev-parse: check i before using argv[i] against argc

The --prefix, --default, and --resolve-git-dir options to
git-rev-parse require an argument, but when given no argument,
the code uses the NULL read from argv[argc] without checking,
leading to a segfault.

Instead, check first and die() with an error message.

Signed-off-by: David Sharp <dhsharp@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_3383.cpp,,,data/crawl/git/old_hunk_3383.cpp,data/crawl/git/new_hunk_3383.cpp,-1,5,,"die(""--resolve-git-dir requires an argument"");","[""addLog""]","[[], [""die"", ""resolve"", ""git"", ""dir"", ""requires"", ""an"", ""argument""]]",[-18522906862445977723],5519,"381 days, 0:00:00"
https://github.com/git/git/commit/94c8ccaaba4ac8b0225f5adeae4ff29f01951bce,25 Feb 2010,"rev-parse: --local-env-vars option

This prints the list of repo-local environment variables.

Signed-off-by: Giuseppe Bilotta <giuseppe.bilotta@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/hunk_5394.cpp,,,data/crawl/git/old_hunk_5394.cpp,data/crawl/git/new_hunk_5394.cpp,-1,6,,"printf(""%s\n"", local_repo_env[i]);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""local_repo_env[i]""]]",[17023608486125221001],5518,"1097 days, 12:00:00"
https://github.com/git/git/commit/cdc04b65b4bc8094e082ac65a7dce75a7a990163,01 Mar 2016,"submodule helper: remove double 'fatal: ' prefix

The prefix is added by die(...), so we don't have to do it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_2211.cpp,,,data/crawl/git/old_hunk_2211.cpp,data/crawl/git/new_hunk_2211.cpp,10,10,"die(_(""fatal: '%s' is not a valid submodule--helper ""
	      ""subcommand""), argv[1]);","die(_(""'%s' is not a valid submodule--helper ""
	      ""subcommand""), argv[1]);","[""updateContent""]","[[""fatal""], []]",[4947173928198612933],5517,0:00:00
https://github.com/git/git/commit/bfee614a2f5838e03378888d78e8247b8400d5ce,03 Mar 2016,"index-pack: add a helper function to derive .idx/.keep filename

These are automatically named by replacing .pack suffix in the
name of the packfile.  Add a small helper to do so, as I'll be
adding another one soonish.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_2208.cpp,,,data/crawl/git/old_hunk_2208.cpp,data/crawl/git/new_hunk_2208.cpp,15,-1,"die(_(""packfile name '%s' does not end with '.pack'""),
			    pack_name);",,"[""removeLog""]","[[""die"", ""_"", ""packfile"", ""name"", ""%s"", ""does"", ""not"", ""end"", ""with"", ""pack"", ""pack_name""], []]",[9648669204466474405],5516,0:00:00
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7007.cpp,,,data/crawl/git/old_hunk_7007.cpp,data/crawl/git/new_hunk_7007.cpp,58,-1,"fprintf(stderr, ""Recorded preimage for '%s'\n"", path);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Recorded"", ""preimage"", ""for"", ""%s"", ""\\n"", ""path""], []]",[14581070528694136707],5515,"1402 days, 12:00:00"
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,263,,"fprintf(stderr, ""Recorded preimage for '%s'\n"", path);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Recorded"", ""preimage"", ""for"", ""%s"", ""\\n"", ""path""]]",[-14581070528694136707],5514,"1402 days, 12:00:00"
https://github.com/git/git/commit/320d0b493a259db3b481f985545b244438e6c086,19 Feb 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2269.cpp,,,data/crawl/git/old_hunk_2269.cpp,data/crawl/git/new_hunk_2269.cpp,-1,24,,"die(""size_t underflow: %""PRIuMAX"" - %""PRIuMAX,
		    (uintmax_t)a, (uintmax_t)b);","[""addLog""]","[[], [""die"", ""size_t"", ""underflow"", ""%"", ""PRIuMAX"", ""%"", ""PRIuMAX"", ""uintmax_t"", ""a"", ""uintmax_t"", ""b""]]",[2408303772710145921],5513,"13 days, 0:00:00"
https://github.com/git/git/commit/320d0b493a259db3b481f985545b244438e6c086,19 Feb 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2269.cpp,,,data/crawl/git/old_hunk_2269.cpp,data/crawl/git/new_hunk_2269.cpp,-1,16,,"die(""size_t overflow: %""PRIuMAX"" * %""PRIuMAX,
		    (uintmax_t)a, (uintmax_t)b);","[""addLog""]","[[], [""die"", ""size_t"", ""overflow"", ""%"", ""PRIuMAX"", ""*"", ""%"", ""PRIuMAX"", ""uintmax_t"", ""a"", ""uintmax_t"", ""b""]]",[-369202362020308521],5512,"13 days, 0:00:00"
https://github.com/git/git/commit/320d0b493a259db3b481f985545b244438e6c086,19 Feb 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2269.cpp,,,data/crawl/git/old_hunk_2269.cpp,data/crawl/git/new_hunk_2269.cpp,-1,6,,"die(""size_t overflow: %""PRIuMAX"" + %""PRIuMAX,
		    (uintmax_t)a, (uintmax_t)b);","[""addLog""]","[[], [""die"", ""size_t"", ""overflow"", ""%"", ""PRIuMAX"", ""%"", ""PRIuMAX"", ""uintmax_t"", ""a"", ""uintmax_t"", ""b""]]",[-369202367396324692],5511,"13 days, 0:00:00"
https://github.com/git/git/commit/8a0de58a2a0cfd64944c2de9df184253286b7eac,19 Apr 2016,"i18n: builtin/pull.c: mark placeholders for translation

Some translations might also translate ""<remote>"" and ""<branch>"".

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_2147.cpp,,,data/crawl/git/old_hunk_2147.cpp,data/crawl/git/new_hunk_2147.cpp,3,3,"fprintf_ln(stderr, ""    git pull <remote> <branch>"");","fprintf_ln(stderr, ""    git pull %s %s"", _(""<remote>""), _(""<branch>""));","[""updateContent"", ""addContent"", ""addVariable""]","[[], [""%s"", ""%s"", ""_"", ""_""]]",[9472081226158712],5510,0:00:00
https://github.com/git/git/commit/2ae68fcb785a617793813abcea19893e13e436b0,27 Jul 2007,"Make verify-tag a builtin.

This replaces ""git-verify-tag.sh"" with ""builtin-verify-tag.c"".

Testing relies on the ""git tag -v"" tests calling this command.

A temporary file is needed when calling to gpg, because git is
already creating detached signatures (gpg option -b) to sign tags
(instead of leaving gpg to add the signature to the file by itself),
and those signatures need to be supplied in a separate file to be
verified by gpg.

The program uses git_mkstemp to create that temporary file needed by
gpg, instead of the previously used ""$GIT_DIR/.tmp-vtag"", in order to
allow the command to be used in read-only repositories, and also
prevent other instances of git to read or remove the same file.

Signal SIGPIPE is ignored because the program sometimes was
terminated because that signal when writing the input for gpg.

The command now can receive many tag names to be verified.
Documentation is also updated here to reflect this new behaviour.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/hunk_8194.cpp,,,data/crawl/git/old_hunk_8194.cpp,data/crawl/git/new_hunk_8194.cpp,-1,71,,"error(""tag '%s' not found."", name);","[""addLog""]","[[], [""error"", ""tag"", ""%s"", ""not"", ""found"", ""name""]]",[12942010603582959774],5509,"1596 days, 0:00:00"
https://github.com/git/git/commit/d3b9ac07eb44974bb619d71fc6c81c9f2036b96c,22 Apr 2016,"worktree.c: make find_shared_symref() return struct worktree *

This gives the caller more information and they can answer things like,
""is it the main worktree"" or ""is it the current worktree"". The latter
question is needed for the ""checkout a rebase branch"" case later.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_2124.cpp,,,data/crawl/git/old_hunk_2124.cpp,data/crawl/git/new_hunk_2124.cpp,10,10,"die(_(""A notes merge into %s is already in-progress at %s""),
			    default_notes_ref(), existing);","die(_(""A notes merge into %s is already in-progress at %s""),
			    default_notes_ref(), wt->path);","[""removeVariable"", ""addVariable""]","[[""existing""], [""wt"", ""path""]]",[520739580418354589],5508,0:00:00
https://github.com/git/git/commit/70ad8c8d8c0840fb89492063274132d28bdfbe3b,25 Apr 2016,"convert: allow core.autocrlf=input and core.eol=crlf

Even though the configuration parser errors out when core.autocrlf
is set to 'input' when core.eol is set to 'crlf', there is no need
to do so, because the core.autocrlf setting trumps core.eol.

Allow all combinations of core.crlf and core.eol and document
that core.autocrlf overrides core.eol.

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_2119.cpp,,,data/crawl/git/old_hunk_2119.cpp,data/crawl/git/new_hunk_2119.cpp,4,-1,"error(""core.autocrlf=input conflicts with core.eol=crlf"");",,"[""removeLog""]","[[""error"", ""core"", ""autocrlf"", ""input"", ""conflicts"", ""with"", ""core"", ""eol"", ""crlf""], []]",[-2115038850920888982],5507,0:00:00
https://github.com/git/git/commit/fa2ab86d18f16ab5e6d2f2cd6e8cc00460bada17,26 Apr 2016,"format-patch: add '--base' option to record base tree info

Maintainers or third party testers may want to know the exact base tree
the patch series applies to. Teach git format-patch a '--base' option
to record the base tree info and append it at the end of the first
message (either the cover letter or the first patch in the series).

The base tree info consists of the ""base commit"", which is a well-known
commit that is part of the stable part of the project history everybody
else works off of, and zero or more ""prerequisite patches"", which are
well-known patches in flight that is not yet part of the ""base commit""
that need to be applied on top of ""base commit"" in topological order
before the patches can be applied.

The ""base commit"" is shown as ""base-commit: "" followed by the 40-hex of
the commit object name.  A ""prerequisite patch"" is shown as
""prerequisite-patch-id: "" followed by the 40-hex ""patch id"", which can
be obtained by passing the patch through the ""git patch-id --stable""
command.

Imagine that on top of the public commit P, you applied well-known
patches X, Y and Z from somebody else, and then built your three-patch
series A, B, C, the history would be like:

---P---X---Y---Z---A---B---C

With ""git format-patch --base=P -3 C"" (or variants thereof, e.g. with
""--cover-letter"" of using ""Z..C"" instead of ""-3 C"" to specify the
range), the base tree information block is shown at the end of the
first message the command outputs (either the first patch, or the
cover letter), like this:

base-commit: P
prerequisite-patch-id: X
prerequisite-patch-id: Y
prerequisite-patch-id: Z

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Wu Fengguang <fengguang.wu@intel.com>
Signed-off-by: Xiaolong Ye <xiaolong.ye@intel.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",240,data/crawl/git/hunk_2116.cpp,,,data/crawl/git/old_hunk_2116.cpp,data/crawl/git/new_hunk_2116.cpp,-1,19,,"die(_(""Unknown commit %s""), base_commit);","[""addLog""]","[[], [""die"", ""_"", ""Unknown"", ""commit"", ""%s"", ""base_commit""]]",[5460137927954819561],5506,0:00:00
https://github.com/git/git/commit/3604242f080a813d6f20a7394def422d1e55b30e,17 Apr 2016,"submodule: port init from shell to C

By having the `submodule init` functionality in C, we can reference it
easier from other parts in the code in later patches. The code is split
up to have one function to initialize one submodule and a calling function
that takes care of the rest, such as argument handling and translating the
arguments to the paths of the submodules.

This is the first submodule subcommand that is fully converted to C
except for the usage string, so this is actually removing a call to
the `submodule--helper list` function, which is supposed to be used in
this transition. Instead we'll make a direct call to `module_list_compute`.

An explanation why we need to edit the prefixes in cmd_update in
git-submodule.sh in this patch:

By having no processing in the shell part, we need to convey the notion
of wt_prefix and prefix to the C parts, which former patches punted on
and did the processing of displaying path in the shell.

`wt_prefix` used to hold the path from the repository root to the current
directory, e.g. wt_prefix would be t/ if the user invoked the
`git submodule` command in ~/repo/t and ~repo is the GIT_DIR.

`prefix` used to hold the relative path from the repository root to the
operation, e.g. if you have recursive submodules, the shell script would
modify the `prefix` in each recursive step by adding the submodule path.

We will pass `wt_prefix` into the C helper via `git -C <dir>` as that
will setup git in the directory the user actually called git-submodule.sh
from. The `prefix` will be passed in via the `--prefix` option.

Having `prefix` and `wt_prefix` relative to the GIT_DIR of the
calling superproject is unfortunate with this patch as the C code doesn't
know about a possible recursion from a superproject via `submodule update
--init --recursive`.

To fix this, we change the meaning of `wt_prefix` to point to the current
project instead of the superproject and `prefix` to include any relative
paths issues in the superproject. That way `prefix` will become the leading
part for displaying paths and `wt_prefix` will be empty in recursive
calls for now.

The new notion of `wt_prefix` and `prefix` still allows us to reconstruct
the calling directory in the superproject by just traveling reverse of
`prefix`.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",185,data/crawl/git/hunk_2149.cpp,,,data/crawl/git/old_hunk_2149.cpp,data/crawl/git/new_hunk_2149.cpp,-1,31,,"die(_(""No url found for submodule path '%s' in .gitmodules""),
				displaypath);","[""addLog""]","[[], [""die"", ""_"", ""No"", ""url"", ""found"", ""for"", ""submodule"", ""path"", ""%s"", ""in"", ""gitmodules"", ""displaypath""]]",[-1534628736010313197],5505,"6 days, 0:00:00"
https://github.com/git/git/commit/cd163d4b4e190d5e5131962c1b8f84601d4736d4,16 Nov 2012,"usage.c: detect recursion in die routines and bail out immediately

It is theoretically possible for a die handler to get into a state of
infinite recursion.  For example, if a die handler called another function
which itself called die().  Let's at least detect this situation, inform the
user, and call exit.

Signed-off-by: Brandon Casey <bcasey@nvidia.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_4020.cpp,,,data/crawl/git/old_hunk_4020.cpp,data/crawl/git/new_hunk_4020.cpp,-1,4,,"fputs(""fatal: recursion detected in die_errno handler\n"",
			stderr);","[""addLog""]","[[], [""fputs"", ""fatal"", ""recursion"", ""detected"", ""in"", ""die_errno"", ""handler\\n"", ""stderr""]]",[-32687948681742527319],5504,"635 days, 0:00:00"
https://github.com/git/git/commit/6da31d7f75fa921f871eda76760b0c622d04147d,09 May 2016,"builtin/fetch.c: use error_errno()

A couple of newlines are also removed, because both error() and
error_errno() automatically append a newline.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_2090.cpp,,,data/crawl/git/old_hunk_2090.cpp,data/crawl/git/new_hunk_2090.cpp,3,3,"error(_(""cannot open %s: %s\n""), filename, strerror(errno));","error_errno(_(""cannot open %s""), filename);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""%s\\n"", ""strerror"", ""errno""], [""error_errno""]]",[-28413351119986615019],5503,0:00:00
https://github.com/git/git/commit/87d01c854bf9860c8c21814c991f58652f6b4332,16 Dec 2015,"credential-store: don't pass strerror to die_errno()

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_2358.cpp,,,data/crawl/git/old_hunk_2358.cpp,data/crawl/git/new_hunk_2358.cpp,3,3,"die_errno(""unable to write credential store: %s"",
			  strerror(errno));","die_errno(""unable to write credential store"");","[""removeVariable"", ""updateContent""]","[[""%s"", ""strerror"", ""errno""], []]",[-12745142427614753524],5502,"72 days, 12:00:00"
https://github.com/git/git/commit/200a76b74db5c2c75bcf73773cb85c5603ec038e,07 Mar 2010,"Reimplement async procedures using pthreads

On Windows, async procedures have always been run in threads, and the
implementation used Windows specific APIs. Rewrite the code to use pthreads.

A new configuration option is introduced so that the threaded implementation
can also be used on POSIX systems. Since this option is intended only as
playground on POSIX, but is mandatory on Windows, the option is not
documented.

One detail is that on POSIX it is necessary to set FD_CLOEXEC on the pipe
handles. On Windows, this is not needed because pipe handles are not
inherited to child processes, and the new calls to set_cloexec() are
effectively no-ops.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_5369.cpp,,,data/crawl/git/old_hunk_5369.cpp,data/crawl/git/new_hunk_5369.cpp,7,12,"error(""cannot create thread: %s"", strerror(errno));","error(""cannot create thread: %s"", strerror(err));","[""updateVariable""]","[[""errno""], [""err""]]",[-11336281105815713219],5501,"1127 days, 12:00:00"
https://github.com/git/git/commit/010a2dacc1acf3305e399ef1eb2e620110b95d5e,23 Jun 2008,"Extend parse-options test suite

This patch serves two purposes:
 1. test-parse-option.c should be a more complete
    example for the parse-options API, and
 2. there have been no tests for OPT_CALLBACK,
    OPT_DATE, OPT_BIT, OPT_SET_INT and OPT_SET_PTR
    before.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/hunk_7068.cpp,,,data/crawl/git/old_hunk_7068.cpp,data/crawl/git/new_hunk_7068.cpp,-1,10,,"printf(""Callback: \""%s\"", %d\n"",
		(arg ? arg : ""not set""), unset);","[""addLog""]","[[], [""printf"", ""Callback"", ""\\"", ""%s\\"", ""%d\\n"", ""arg"", ""arg"", ""not"", ""set"", ""unset""]]",[17016534472381945108],5500,"1439 days, 0:00:00"
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2006.cpp,,,data/crawl/git/old_hunk_2006.cpp,data/crawl/git/new_hunk_2006.cpp,18,22,"printf(""timestamp: %lu\n"", timestamp);","show(&expect, &ret, ""timestamp: %lu"", timestamp);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%lu\\n""], [""show"", ""&expect"", ""&ret"", ""%lu""]]",[-17790201865644601947],5499,0:00:00
https://github.com/git/git/commit/f30afdabbfb9feeec402d351935879caf8b298ad,11 May 2016,"mingw: introduce the 'core.hideDotFiles' setting

On Unix (and Linux), files and directories whose names start with a dot
are usually not shown by default. This convention is used by Git: the
.git/ directory should be left alone by regular users, and only accessed
through Git itself.

On Windows, no such convention exists. Instead, there is an explicit flag
to mark files or directories as hidden.

In the early days, Git for Windows did not mark the .git/ directory (or
for that matter, any file or directory whose name starts with a dot)
hidden. This lead to quite a bit of confusion, and even loss of data.

Consequently, Git for Windows introduced the core.hideDotFiles setting,
with three possible values: true, false, and dotGitOnly, defaulting to
marking only the .git/ directory as hidden.

The rationale: users do not need to access .git/ directly, and indeed (as
was demonstrated) should not really see that directory, either. However,
not all dot files should be hidden by default, as e.g. Eclipse does not
show them (and the user would therefore be unable to see, say, a
.gitattributes file).

In over five years since the last attempt to bring this patch into core
Git, a slightly buggy version of this patch has served Git for Windows'
users well: no single report indicated problems with the hidden .git/
directory, and the stream of problems caused by the previously non-hidden
.git/ directory simply stopped. The bugs have been fixed during the
process of getting this patch upstream.

Note that there is a funny quirk we have to pay attention to when
creating hidden files: we use Win32's _wopen() function which
transmogrifies its arguments and hands off to Win32's CreateFile()
function. That latter function errors out with ERROR_ACCESS_DENIED (the
equivalent of EACCES) when the equivalent of the O_CREAT flag was passed
and the file attributes (including the hidden flag) do not match an
existing file's. And _wopen() accepts no parameter that would be
transmogrified into said hidden flag. Therefore, we simply try again
without O_CREAT.

A slightly different method is required for our fopen()/freopen()
function as we cannot even *remove* the implicit O_CREAT flag.
Therefore, we briefly mark existing files as unhidden when opening them
via fopen()/freopen().

The ERROR_ACCESS_DENIED error can also be triggered by opening a file
that is marked as a system file (which is unlikely to be tracked in
Git), and by trying to create a file that has *just* been deleted and is
awaiting the last open handles to be released (which would be handled
better by the ""Try again?"" logic, a story for a different patch series,
though). In both cases, it does not matter much if we try again without
the O_CREAT flag, read: it does not hurt, either.

For details how ERROR_ACCESS_DENIED can be triggered, see
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858

Original-patch-by: Erik Faye-Lund <kusmabite@gmail.com>
Initial-Test-By: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_2002.cpp,,,data/crawl/git/old_hunk_2002.cpp,data/crawl/git/new_hunk_2002.cpp,-1,32,,"error(""could not unhide %s"", filename);","[""addLog""]","[[], [""error"", ""could"", ""not"", ""unhide"", ""%s"", ""filename""]]",[11517469347061187181],5498,0:00:00
https://github.com/git/git/commit/3ecc7040eff29fea0051df9faf21b0a73ee6d911,19 Aug 2015,"am --skip/--abort: merge HEAD/ORIG_HEAD tree into index

After running ""git am --abort"", and then running ""git reset --hard"",
files that were not modified would still be re-checked out.

This is because clean_index() in builtin/am.c mistakenly called the
read_tree() function, which overwrites all entries in the index,
including the stat info.

""git am --skip"" did not seem to have this issue because am_skip() called
am_run(), which called refresh_cache() to update the stat info. However,
there's still a performance penalty as the lack of stat info meant that
refresh_cache() would have to scan all files for changes.

Fix this by using unpack_trees() instead to merge the tree into the
index, so that the stat info from the index is kept.

Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/hunk_2853.cpp,,,data/crawl/git/old_hunk_2853.cpp,data/crawl/git/new_hunk_2853.cpp,14,-1,"die(_(""unable to write new index file""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""write"", ""new"", ""index"", ""file""], []]",[-9643391230087642827],5497,"143 days, 12:00:00"
https://github.com/git/git/commit/c52ce248d63a185eb0a616b361d1fd72c5c66451,13 Jun 2016,"ref_transaction_create(): disallow recursive pruning

It is nonsensical (and a little bit dangerous) to use REF_ISPRUNING
without REF_NODEREF. Forbid it explicitly. Change the one REF_ISPRUNING
caller to pass REF_NODEREF too.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",7,data/crawl/git/hunk_1934.cpp,,,data/crawl/git/old_hunk_1934.cpp,data/crawl/git/new_hunk_1934.cpp,-1,4,,"die(""BUG: REF_ISPRUNING set without REF_NODEREF"");","[""addLog""]","[[], [""die"", ""BUG"", ""REF_ISPRUNING"", ""set"", ""without"", ""REF_NODEREF""]]",[-7503022955261937900],5496,0:00:00
https://github.com/git/git/commit/e8e44de7874f6ea7cdf35b526f790cc7fa8f34e6,13 Jun 2016,"upload-pack: move shallow deepen code out of receive_needs()

This is a prep step for further refactoring. Besides reindentation and
s/shallows\./shallows->/g, no other changes are expected.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_1927.cpp,,,data/crawl/git/old_hunk_1927.cpp,data/crawl/git/new_hunk_1927.cpp,18,-1,"packet_write(1, ""shallow %s"",
						oid_to_hex(&object->oid));",,"[""removeLog""]","[[""packet_write"", ""1"", ""shallow"", ""%s"", ""oid_to_hex"", ""&object"", ""oid""], []]",[-9075868359601839608],5495,0:00:00
https://github.com/git/git/commit/e8e44de7874f6ea7cdf35b526f790cc7fa8f34e6,13 Jun 2016,"upload-pack: move shallow deepen code out of receive_needs()

This is a prep step for further refactoring. Besides reindentation and
s/shallows\./shallows->/g, no other changes are expected.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_1926.cpp,,,data/crawl/git/old_hunk_1926.cpp,data/crawl/git/new_hunk_1926.cpp,-1,19,,"packet_write(1, ""shallow %s"",
				     oid_to_hex(&object->oid));","[""addLog""]","[[], [""packet_write"", ""1"", ""shallow"", ""%s"", ""oid_to_hex"", ""&object"", ""oid""]]",[9075868359601839608],5494,0:00:00
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_1922.cpp,,,data/crawl/git/old_hunk_1922.cpp,data/crawl/git/new_hunk_1922.cpp,35,28,"fprintf(stderr, ""Server supports allow-reachable-sha1-in-want\n"");","print_verbose(args, ""Server supports allow-reachable-sha1-in-want"");","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""fprintf"", ""stderr"", ""want\\n""], [""print_verbose"", ""args"", ""want""]]",[-2217332515617139480],5493,0:00:00
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_1921.cpp,,,data/crawl/git/old_hunk_1921.cpp,data/crawl/git/new_hunk_1921.cpp,12,7,"fprintf(stderr,
			""already have %s (%s)\n"", sha1_to_hex(remote),
			ref->name);","print_verbose(args, ""already have %s (%s)"", sha1_to_hex(remote),
			      ref->name);","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""fprintf"", ""stderr"", ""\\n""], [""print_verbose"", ""args""]]",[7907201063002700720],5492,0:00:00
https://github.com/git/git/commit/d993ce1ed2f025708b0f78bed241466e35f1e8a0,14 Jun 2016,"blame: improve diagnosis for ""--reverse NEW""

""git blame --reverse OLD..NEW -- PATH"" tells us to start from the
contents in PATH at OLD and observe how each line is changed while
the history develops up to NEW, and report for each line the latest
commit up to which the line survives in the original form.

If you say ""git blame --reverse NEW -- PATH"" by mistake, we complain
about the missing OLD, but we phrased it as ""No commit to dig down
to?""  In this case, however, we are digging up from OLD, so say so.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_1874.cpp,,,data/crawl/git/old_hunk_1874.cpp,data/crawl/git/new_hunk_1874.cpp,10,10,"die(""No commit to dig down to?"");","die(""No commit to dig up from?"");","[""updateContent""]","[[""down"", ""to""], [""up"", ""from""]]",[8309247261595547984],5491,0:00:00
https://github.com/git/git/commit/e2770979fec968a25ac21e34f9082bc17a71a780,12 Dec 2011,"credentials: add ""cache"" helper

If you access repositories over smart-http using http
authentication, then it can be annoying to have git ask you
for your password repeatedly. We cache credentials in
memory, of course, but git is composed of many small
programs. Having to input your password for each one can be
frustrating.

This patch introduces a credential helper that will cache
passwords in memory for a short period of time.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",817,data/crawl/git/hunk_4272.cpp,,,data/crawl/git/old_hunk_4272.cpp,data/crawl/git/new_hunk_4272.cpp,-1,176,,"die_errno(""poll failed"");","[""addLog""]","[[], [""die_errno"", ""poll"", ""failed""]]",[-11256726469406746246],5490,"825 days, 0:00:00"
https://github.com/git/git/commit/c336bc104c47cc9c2f7caf6bce468fe00a8f6850,15 Sep 2012,Sync with 1.7.11.7,161,data/crawl/git/hunk_4079.cpp,,,data/crawl/git/old_hunk_4079.cpp,data/crawl/git/new_hunk_4079.cpp,-1,10,,"die(""failed regcomp() for pattern '%s'"", pat);","[""addLog""]","[[], [""die"", ""failed"", ""regcomp"", ""for"", ""pattern"", ""%s"", ""pat""]]",[-15465455669007534945],5489,"690 days, 12:00:00"
https://github.com/git/git/commit/63b52afaa88bf89c781fe11c6803ff1dcc47d424,24 Mar 2014,"pickaxe: merge diffcore_pickaxe_grep() and diffcore_pickaxe_count() into diffcore_pickaxe()

diffcore_pickaxe_count() initializes the regular expression or kwset for
the search term, calls pickaxe() with the callback has_changes() and
cleans up afterwards.  diffcore_pickaxe_grep() does the same, only it
doesn't support kwset and uses the callback diff_grep() instead.  Merge
the two functions to form the new diffcore_pickaxe() and thus get rid of
the duplicate regex setup and cleanup code.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_3321.cpp,,,data/crawl/git/old_hunk_3321.cpp,data/crawl/git/new_hunk_3321.cpp,17,-1,"die(""invalid regex: %s"", errbuf);",,"[""removeLog""]","[[""die"", ""invalid"", ""regex"", ""%s"", ""errbuf""], []]",[23923356513052523925],5488,"415 days, 0:00:00"
https://github.com/git/git/commit/6b9c38e14cd3abf9b95cabe8b86954f0c4e94a38,15 Jul 2016,"t0006: skip ""far in the future"" test when unsigned long is not long enough

Git's source code refers to timestamps as unsigned longs.  On 32-bit
platforms, as well as on Windows, unsigned long is not large enough
to capture dates that are ""absurdly far in the future"".

While we can fix this issue properly by replacing unsigned long with
a larger type, we want to be a bit more conservative and just skip
those tests on the maint track.

Signed-off-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1700.cpp,,,data/crawl/git/old_hunk_1700.cpp,data/crawl/git/new_hunk_1700.cpp,-1,5,,"printf(""sizeof-long: %d\n"", (int)sizeof(long));","[""addLog""]","[[], [""printf"", ""sizeof"", ""long"", ""%d\\n"", ""int"", ""sizeof"", ""long""]]",[8814044416278846860],5487,0:00:00
https://github.com/git/git/commit/b333d0d6f450d4f9c4535fd9fd6e0f4ef367507c,10 Jun 2016,"write_or_die: remove the unused write_or_whine() function

Now the last caller of this function is gone, and new ones are
unlikely to appear, because this function is doing very little that
a regular if() does not besides obfuscating the error message (and
if we ever did want something like it, we would probably prefer the
function to come back with more ""normal"" return value semantics).

Signed-off-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_1937.cpp,,,data/crawl/git/old_hunk_1937.cpp,data/crawl/git/new_hunk_1937.cpp,7,-1,"fprintf(stderr, ""%s: write error (%s)\n"",
			msg, strerror(errno));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""write"", ""error"", ""%s"", ""\\n"", ""msg"", ""strerror"", ""errno""], []]",[-22311105276561731123],5486,"28 days, 0:00:00"
https://github.com/git/git/commit/957a0fe2e59343f10f10620fab787f7e5abf3ab8,05 Aug 2016,"status: rename long-format print routines

Rename the various wt_status_print*() routines to be
wt_longstatus_print*() to make it clear that these
routines are only concerned with the normal/long
status output and reduce developer confusion as other
status formats are added in the future.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_1612.cpp,,,data/crawl/git/old_hunk_1612.cpp,data/crawl/git/new_hunk_1612.cpp,15,15,"wt_status_print_other(s, &s->ignored, _(""Ignored files""), ""add -f"");","wt_longstatus_print_other(s, &s->ignored, _(""Ignored files""), ""add -f"");","[""updateLog""]","[[""wt_status_print_other""], [""wt_longstatus_print_other""]]",[793719036921399646],5485,0:00:00
https://github.com/git/git/commit/be7e795efe35d3e50199af5452b218e5121b1713,05 Aug 2016,"status: cleanup API to wt_status_print

Refactor the API between builtin/commit.c and wt-status.[ch].

Hide the details of the various wt_*status_print() routines inside
wt-status.c behind a single (new) wt_status_print() routine.
Eliminate the switch statements from builtin/commit.c.
Allow details of new status formats to be isolated within wt-status.c

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/hunk_1597.cpp,,,data/crawl/git/old_hunk_1597.cpp,data/crawl/git/new_hunk_1597.cpp,11,-1,"die(""BUG: finalize_deferred_config() should have been called"");",,"[""removeLog""]","[[""die"", ""BUG"", ""finalize_deferred_config"", ""should"", ""have"", ""been"", ""called""], []]",[-8020215930678866075],5484,0:00:00
https://github.com/git/git/commit/fef7ba5353095e87b3bcd712fa15eb71e1f53b30,11 Aug 2016,"builtin/apply: make apply_all_patches() return 128 or 1 on error

To finish libifying the apply functionality, apply_all_patches() should not
die() or exit() in case of error, but return either 128 or 1, so that it
gives the same exit code as when die() or exit(1) is called. This way
scripts relying on the exit code don't need to be changed.

While doing that we must take care that file descriptors are properly closed
and, if needed, reset to a sensible value.

Also, according to the lockfile API, when finished with a lockfile, one
should either commit it or roll it back.

This is even more important now that the same lockfile can be passed
to init_apply_state() many times to be reused by series of calls to
the apply lib functions.

Helped-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Helped-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_1557.cpp,,,data/crawl/git/old_hunk_1557.cpp,data/crawl/git/new_hunk_1557.cpp,4,4,"die_errno(_(""can't open patch '%s'""), arg);","error(_(""can't open patch '%s': %s""), arg, strerror(errno));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die_errno""], [""error"", ""%s"", ""strerror"", ""errno""]]",[27612659001256128573],5483,0:00:00
https://github.com/git/git/commit/411481be6f27fb1ae8e2263d1e686357226391a3,24 Aug 2016,"index-pack: add --max-input-size=<size> option

When receiving a pack-file, it can be useful to abort the
`git index-pack`, if the pack-file is too big.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_1523.cpp,,,data/crawl/git/old_hunk_1523.cpp,data/crawl/git/new_hunk_1523.cpp,-1,4,,"die(_(""pack exceeds maximum allowed size""));","[""addLog""]","[[], [""die"", ""_"", ""pack"", ""exceeds"", ""maximum"", ""allowed"", ""size""]]",[10025324360913939937],5482,0:00:00
https://github.com/git/git/commit/b3dfeebb92630c54db1e4f03dbcff0e05208c4c1,11 Aug 2016,"rebase: avoid computing unnecessary patch IDs

The `rebase` family of Git commands avoid applying patches that were
already integrated upstream. They do that by using the revision walking
option that computes the patch IDs of the two sides of the rebase
(local-only patches vs upstream-only ones) and skipping those local
patches whose patch ID matches one of the upstream ones.

In many cases, this causes unnecessary churn, as already the set of
paths touched by a given commit would suffice to determine that an
upstream patch has no local equivalent.

This hurts performance in particular when there are a lot of upstream
patches, and/or large ones.

Therefore, let's introduce the concept of a ""diff-header-only"" patch ID,
compare those first, and only evaluate the ""full"" patch ID lazily.

Please note that in contrast to the ""full"" patch IDs, those
""diff-header-only"" patch IDs are prone to collide with one another, as
adjacent commits frequently touch the very same files. Hence we now
have to be careful to allow multiple hash entries with the same hash.
We accomplish that by using the hashmap_add() function that does not even
test for hash collisions.  This also allows us to evaluate the full patch ID
lazily, i.e. only when we found commits with matching diff-header-only
patch IDs.

We add a performance test that demonstrates ~1-6% improvement.  In
practice this will depend on various factors such as how many upstream
changes and how big those changes are along with whether file system
caches are cold or warm.  As Git's test suite has no way of catching
performance regressions, we also add a regression test that verifies
that the full patch ID computation is skipped when the diff-header-only
computation suffices.

Signed-off-by: Kevin Willford <kcwillford@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_1548.cpp,,,data/crawl/git/old_hunk_1548.cpp,data/crawl/git/new_hunk_1548.cpp,-1,34,,"error(""Could not get patch ID for %s"",
			oid_to_hex(&b->commit->object.oid));","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""get"", ""patch"", ""ID"", ""for"", ""%s"", ""oid_to_hex"", ""&b"", ""commit"", ""object"", ""oid""]]",[14281264280377199849],5481,"14 days, 12:00:00"
https://github.com/git/git/commit/b3dfeebb92630c54db1e4f03dbcff0e05208c4c1,11 Aug 2016,"rebase: avoid computing unnecessary patch IDs

The `rebase` family of Git commands avoid applying patches that were
already integrated upstream. They do that by using the revision walking
option that computes the patch IDs of the two sides of the rebase
(local-only patches vs upstream-only ones) and skipping those local
patches whose patch ID matches one of the upstream ones.

In many cases, this causes unnecessary churn, as already the set of
paths touched by a given commit would suffice to determine that an
upstream patch has no local equivalent.

This hurts performance in particular when there are a lot of upstream
patches, and/or large ones.

Therefore, let's introduce the concept of a ""diff-header-only"" patch ID,
compare those first, and only evaluate the ""full"" patch ID lazily.

Please note that in contrast to the ""full"" patch IDs, those
""diff-header-only"" patch IDs are prone to collide with one another, as
adjacent commits frequently touch the very same files. Hence we now
have to be careful to allow multiple hash entries with the same hash.
We accomplish that by using the hashmap_add() function that does not even
test for hash collisions.  This also allows us to evaluate the full patch ID
lazily, i.e. only when we found commits with matching diff-header-only
patch IDs.

We add a performance test that demonstrates ~1-6% improvement.  In
practice this will depend on various factors such as how many upstream
changes and how big those changes are along with whether file system
caches are cold or warm.  As Git's test suite has no way of catching
performance regressions, we also add a regression test that verifies
that the full patch ID computation is skipped when the diff-header-only
computation suffices.

Signed-off-by: Kevin Willford <kcwillford@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_1548.cpp,,,data/crawl/git/old_hunk_1548.cpp,data/crawl/git/new_hunk_1548.cpp,-1,30,,"error(""Could not get patch ID for %s"",
			oid_to_hex(&a->commit->object.oid));","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""get"", ""patch"", ""ID"", ""for"", ""%s"", ""oid_to_hex"", ""&a"", ""commit"", ""object"", ""oid""]]",[14281264280377199848],5480,"14 days, 12:00:00"
https://github.com/git/git/commit/995bc22d7f8c611e342095a211065f8585a08e65,04 Aug 2016,"pager: move pager-specific setup into the build

Allowing PAGER_ENV to be set at build-time allows us to move
pager-specific knowledge out of our build.  This allows us to
set a better default for FreeBSD more(1), which pretends not to
understand ANSI color escapes if the MORE environment variable
is left empty, but accepts the same variables as less(1)

Originally-from:
 https://public-inbox.org/git/xmqq61piw4yf.fsf@gitster.dls.corp.google.com/

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_1620.cpp,,,data/crawl/git/old_hunk_1620.cpp,data/crawl/git/new_hunk_1620.cpp,-1,18,,"die(""malformed build-time PAGER_ENV"");","[""addLog""]","[[], [""die"", ""malformed"", ""build"", ""time"", ""PAGER_ENV""]]",[-1130966396871455749],5479,"18 days, 0:00:00"
https://github.com/git/git/commit/995bc22d7f8c611e342095a211065f8585a08e65,04 Aug 2016,"pager: move pager-specific setup into the build

Allowing PAGER_ENV to be set at build-time allows us to move
pager-specific knowledge out of our build.  This allows us to
set a better default for FreeBSD more(1), which pretends not to
understand ANSI color escapes if the MORE environment variable
is left empty, but accepts the same variables as less(1)

Originally-from:
 https://public-inbox.org/git/xmqq61piw4yf.fsf@gitster.dls.corp.google.com/

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_1620.cpp,,,data/crawl/git/old_hunk_1620.cpp,data/crawl/git/new_hunk_1620.cpp,-1,11,,"die(""malformed build-time PAGER_ENV: %s"",
			split_cmdline_strerror(n));","[""addLog""]","[[], [""die"", ""malformed"", ""build"", ""time"", ""PAGER_ENV"", ""%s"", ""split_cmdline_strerror"", ""n""]]",[7552554464452287189],5478,"18 days, 0:00:00"
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1421.cpp,,,data/crawl/git/old_hunk_1421.cpp,data/crawl/git/new_hunk_1421.cpp,24,26,"error(_(""object %s is not a blob""), sha1_to_hex(sha1));","err(o, _(""object %s is not a blob""), oid_to_hex(oid));","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""error"", ""sha1_to_hex"", ""sha1""], [""err"", ""o"", ""oid_to_hex"", ""oid""]]",[361920539896576781],5477,0:00:00
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1412.cpp,,,data/crawl/git/old_hunk_1412.cpp,data/crawl/git/new_hunk_1412.cpp,12,15,"die_errno(_(""failed to symlink '%s'""), path);","err(o, _(""failed to symlink '%s': %s""),
					path, strerror(errno));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die_errno""], [""err"", ""o"", ""%s"", ""strerror"", ""errno""]]",[16276377909649457946],5476,0:00:00
https://github.com/git/git/commit/bc9204d4ef6e0672389fdfb0d398fa9a39dba3d5,01 Aug 2016,"merge-recursive: flush output buffer before printing error messages

The data structure passed to the recursive merge machinery has a feature
where the caller can ask for the output to be buffered into a strbuf, by
setting the field 'buffer_output'.

Previously, we died without flushing, losing accumulated output.  With
this patch, we show the output first, and only then print the error
message.

Currently, the only user of that buffering is merge_recursive() itself,
to avoid the progress output to interfere.

In the next patches, we will introduce a new buffer_output mode that
forces merge_recursive() to retain the output buffer for further
processing by the caller. If the caller asked for that, we will then
also write the error messages into the output buffer. This is necessary
to give the caller more control not only how to react in case of errors
but also control how/if to display the error messages.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_1629.cpp,,,data/crawl/git/old_hunk_1629.cpp,data/crawl/git/new_hunk_1629.cpp,6,3,"fputs(o->obuf.buf, stdout);","(format (printf, 3, 4);","[""addLog"", ""updateLog"", ""removeVariable"", ""addContent"", ""addVariable""]","[[""fputs"", ""o"", ""obuf"", ""buf"", ""stdout""], [""format"", ""printf"", ""3"", ""4""]]",[22024898734185097145],5475,"19 days, 12:00:00"
https://github.com/git/git/commit/bc9204d4ef6e0672389fdfb0d398fa9a39dba3d5,01 Aug 2016,"merge-recursive: flush output buffer before printing error messages

The data structure passed to the recursive merge machinery has a feature
where the caller can ask for the output to be buffered into a strbuf, by
setting the field 'buffer_output'.

Previously, we died without flushing, losing accumulated output.  With
this patch, we show the output first, and only then print the error
message.

Currently, the only user of that buffering is merge_recursive() itself,
to avoid the progress output to interfere.

In the next patches, we will introduce a new buffer_output mode that
forces merge_recursive() to retain the output buffer for further
processing by the caller. If the caller asked for that, we will then
also write the error messages into the output buffer. This is necessary
to give the caller more control not only how to react in case of errors
but also control how/if to display the error messages.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_1628.cpp,,,data/crawl/git/old_hunk_1628.cpp,data/crawl/git/new_hunk_1628.cpp,-1,19,,"error(""%s"", o->obuf.buf);","[""addLog""]","[[], [""error"", ""%s"", ""o"", ""obuf"", ""buf""]]",[8605013688750282921],5474,"19 days, 12:00:00"
https://github.com/git/git/commit/179795e51171ebf10932b553d7df72819fa4a7b5,24 Jun 2016,"line-log: respect diffopt's configured output file stream

The diff machinery can optionally output to a file stream other than
stdout, by overriding diffopt.file. In such a case, the rest of the
log tree machinery should also write to that stream.

Currently, there is no user of the line level log that wants to
redirect output to a file. Therefore, one might argue that it is
superfluous to support that now. However, it is better to be
consistent now, rather than to face hard-to-debug problems later.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_1791.cpp,,,data/crawl/git/old_hunk_1791.cpp,data/crawl/git/new_hunk_1791.cpp,-1,3,,"fprintf(rev->diffopt.file, ""%s\n"", output_prefix(&rev->diffopt));","[""addLog""]","[[], [""fprintf"", ""rev"", ""diffopt"", ""file"", ""%s\\n"", ""output_prefix"", ""&rev"", ""diffopt""]]",[11894370729432558990],5473,"38 days, 12:00:00"
https://github.com/git/git/commit/a0d12c4433e25e87b67df78b45635df8a098fb23,28 Jun 2016,"diff: convert struct diff_filespec to struct object_id

Convert struct diff_filespec's sha1 member to use a struct object_id
called ""oid"" instead.  The following Coccinelle semantic patch was used
to implement this, followed by the transformations in object_id.cocci:

@@
struct diff_filespec o;
@@
- o.sha1
+ o.oid.hash

@@
struct diff_filespec *p;
@@
- p->sha1
+ p->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",275,data/crawl/git/hunk_1761.cpp,,,data/crawl/git/old_hunk_1761.cpp,data/crawl/git/new_hunk_1761.cpp,3,3,"die(""Cannot read blob %s"", sha1_to_hex(spec->sha1));","die(""Cannot read blob %s"", oid_to_hex(&spec->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""spec"", ""sha1""], [""oid_to_hex"", ""&spec"", ""oid""]]",[8293450225945208901],5472,"36 days, 12:00:00"
https://github.com/git/git/commit/ef1177d18e35c030c37aa533002a11d98361e6b9,26 Jul 2016,"die(""bug""): report bugs consistently

The vast majority of error messages in Git's source code which report a
bug use the convention to prefix the message with ""BUG:"".

As part of cleaning up merge-recursive to stop die()ing except in case of
detected bugs, let's just make the remainder of the bug reports consistent
with the de facto rule.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_1666.cpp,,,data/crawl/git/old_hunk_1666.cpp,data/crawl/git/new_hunk_1666.cpp,3,3,"die(""Fatal: buffer too small. Please report a bug."");","die(""BUG: buffer too small. Please report a bug."");","[""updateContent""]","[[""Fatal""], [""BUG""]]",[5274198145024853794],5471,"22 days, 12:00:00"
https://github.com/git/git/commit/17966c0a63d25b1cc2dd1e98d30873e643bd581f,12 Jul 2016,"http: avoid disconnecting on 404s for loose objects

404s are common when fetching loose objects on static HTTP
servers, and reestablishing a connection for every single
404 adds additional latency.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_1709.cpp,,,data/crawl/git/old_hunk_1709.cpp,data/crawl/git/new_hunk_1709.cpp,-1,10,,"die(""BUG: curl_easy_getinfo for HTTP code failed: %s"",
				curl_easy_strerror(c));","[""addLog""]","[[], [""die"", ""BUG"", ""curl_easy_getinfo"", ""for"", ""HTTP"", ""code"", ""failed"", ""%s"", ""curl_easy_strerror"", ""c""]]",[11139467800047396648],5470,"29 days, 12:00:00"
https://github.com/git/git/commit/b36045c1dc43e36f6fb84b041b59317b7f02b58c,10 Aug 2016,"http-backend: buffer headers before sending

Avoid waking up the readers for unnecessary context switches for
each line of header data being written, as all the headers are
written in short succession.

It is unlikely any HTTP/1.x server would want to read a CGI
response one-line-at-a-time and trickle each to the client.
Instead, I'd expect HTTP servers want to minimize syscall and
TCP/IP framing overhead by trying to send all of its response
headers in a single syscall or even combining the headers and
first chunk of the body with MSG_MORE or writev.

Verified by strace-ing response parsing on the CGI side.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",220,data/crawl/git/hunk_1584.cpp,,,data/crawl/git/old_hunk_1584.cpp,data/crawl/git/new_hunk_1584.cpp,3,3,"not_found(""Cannot open '%s': %s"", p, strerror(errno));","not_found(hdr, ""Cannot open '%s': %s"", p, strerror(errno));","[""addVariable""]","[[], [""hdr""]]",[-6429308858211906203],5469,"15 days, 0:00:00"
https://github.com/git/git/commit/0581b546419627d4e82f7df8b195fa207ef42f6a,18 Jun 2016,"sign_buffer: use pipe_command

Similar to the prior commit for verify_signed_buffer, the
motivation here is both to make the code simpler, and to
avoid any possible deadlocks with gpg.

In this case we have the same ""write to stdin, then read
from stdout"" that the verify case had. This is unlikely to
be a problem in practice, since stdout has the detached
signature, which it cannot compute until it has read all of
stdin (if it were a non-detached signature, that would be a
problem, though).

We don't read from stderr at all currently. However, we will
want to in a future patch, so this also prepares us there
(and in that case gpg _does_ write before reading all of the
input, though again, it is unlikely that a key uid will fill
up a pipe buffer).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_1815.cpp,,,data/crawl/git/old_hunk_1815.cpp,data/crawl/git/new_hunk_1815.cpp,26,-1,"error(_(""gpg did not accept the data""));",,"[""removeLog""]","[[""error"", ""_"", ""gpg"", ""did"", ""not"", ""accept"", ""the"", ""data""], []]",[12641366920445121628],5468,"41 days, 12:00:00"
https://github.com/git/git/commit/90cf590f53f2939a47ca7b397e270e8228699829,18 Jul 2016,"fsck: optionally show more helpful info for broken links

When reporting broken links between commits/trees/blobs, it would be
quite helpful at times if the user would be told how the object is
supposed to be reachable.

With the new --name-objects option, git-fsck will try to do exactly
that: name the objects in a way that shows how they are reachable.

For example, when some reflog got corrupted and a blob is missing that
should not be, the user might want to remove the corresponding reflog
entry. This option helps them find that entry: `git fsck` will now
report something like this:

	broken link from    tree b5eb6ff...  (refs/stash@{<date>}~37:)
	              to    blob ec5cf80...

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/hunk_1685.cpp,,,data/crawl/git/old_hunk_1685.cpp,data/crawl/git/new_hunk_1685.cpp,3,3,"error(""Unknown object type for %s"", oid_to_hex(&obj->oid));","error(""Unknown object type for %s"", describe_object(options, obj));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&obj"", ""oid""], [""describe_object"", ""options"", ""obj""]]",[10540707355332585625],5467,"26 days, 12:00:00"
https://github.com/git/git/commit/90cf590f53f2939a47ca7b397e270e8228699829,18 Jul 2016,"fsck: optionally show more helpful info for broken links

When reporting broken links between commits/trees/blobs, it would be
quite helpful at times if the user would be told how the object is
supposed to be reachable.

With the new --name-objects option, git-fsck will try to do exactly
that: name the objects in a way that shows how they are reachable.

For example, when some reflog got corrupted and a blob is missing that
should not be, the user might want to remove the corresponding reflog
entry. This option helps them find that entry: `git fsck` will now
report something like this:

	broken link from    tree b5eb6ff...  (refs/stash@{<date>}~37:)
	              to    blob ec5cf80...

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/hunk_1684.cpp,,,data/crawl/git/old_hunk_1684.cpp,data/crawl/git/new_hunk_1684.cpp,2,2,"error(""in tree %s: entry %s has bad mode %.6o"",
					oid_to_hex(&tree->object.oid), entry.path, entry.mode);","error(""in tree %s: entry %s has bad mode %.6o"",
					describe_object(options, &tree->object), entry.path, entry.mode);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""oid""], [""describe_object"", ""options""]]",[-1741683977218624602],5466,"26 days, 12:00:00"
https://github.com/git/git/commit/d9545c7f465ed103df44cd93caddfdd265757779,11 May 2016,"fast-import: implement unpack limit

With many incremental imports, small packs become highly
inefficient due to the need to readdir scan and load many
indices to locate even a single object.  Frequent repacking and
consolidation may be prohibitively expensive in terms of disk
I/O, especially in large repositories where the initial packs
were aggressively optimized and marked with .keep files.

In those cases, users may be better served with loose objects
and relying on ""git gc --auto"".

This changes the default behavior of fast-import for small
imports found in test cases, so adjustments to t9300 were
necessary.

Signed-off-by: Eric Wong <normalperson@yhbt.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_2000.cpp,,,data/crawl/git/old_hunk_2000.cpp,data/crawl/git/new_hunk_2000.cpp,-1,8,,"die_errno(""Failed seeking to start of '%s'"", p->pack_name);","[""addLog""]","[[], [""die_errno"", ""Failed"", ""seeking"", ""to"", ""start"", ""of"", ""%s"", ""p"", ""pack_name""]]",[-3404749887042522830],5465,"60 days, 12:00:00"
https://github.com/git/git/commit/0fe5043dad74352c08447eb1913df0b6c3f2731c,20 Jun 2016,"dir_iterator: new API for iterating over a directory tree

The iterator interface is modeled on that for references, though no
vtable is necessary because there is (so far?) only one type of
dir_iterator.

There are obviously a lot of features that could easily be added to this
class:

* Skip/include directory paths in the iteration
* Shallow/deep iteration
* Letting the caller decide which subdirectories to recurse into (e.g.,
  via a dir_iterator_advance_into() function)
* Option to iterate in sorted order
* Option to iterate over directory paths before vs. after their contents

But these are not needed for the current patch series, so I refrain.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/hunk_1807.cpp,,,data/crawl/git/old_hunk_1807.cpp,data/crawl/git/new_hunk_1807.cpp,-1,190,,"die(""BUG: empty path passed to dir_iterator_begin()"");","[""addLog""]","[[], [""die"", ""BUG"", ""empty"", ""path"", ""passed"", ""to"", ""dir_iterator_begin""]]",[884506903413996206],5464,"40 days, 12:00:00"
https://github.com/git/git/commit/0fe5043dad74352c08447eb1913df0b6c3f2731c,20 Jun 2016,"dir_iterator: new API for iterating over a directory tree

The iterator interface is modeled on that for references, though no
vtable is necessary because there is (so far?) only one type of
dir_iterator.

There are obviously a lot of features that could easily be added to this
class:

* Skip/include directory paths in the iteration
* Shallow/deep iteration
* Letting the caller decide which subdirectories to recurse into (e.g.,
  via a dir_iterator_advance_into() function)
* Option to iterate in sorted order
* Option to iterate over directory paths before vs. after their contents

But these are not needed for the current patch series, so I refrain.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/hunk_1807.cpp,,,data/crawl/git/old_hunk_1807.cpp,data/crawl/git/new_hunk_1807.cpp,-1,142,,"warning(""error reading path '%s': %s"",
						iter->base.path.buf,
						strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""reading"", ""path"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[16306130349262971750],5463,"40 days, 12:00:00"
https://github.com/git/git/commit/0fe5043dad74352c08447eb1913df0b6c3f2731c,20 Jun 2016,"dir_iterator: new API for iterating over a directory tree

The iterator interface is modeled on that for references, though no
vtable is necessary because there is (so far?) only one type of
dir_iterator.

There are obviously a lot of features that could easily be added to this
class:

* Skip/include directory paths in the iteration
* Shallow/deep iteration
* Letting the caller decide which subdirectories to recurse into (e.g.,
  via a dir_iterator_advance_into() function)
* Option to iterate in sorted order
* Option to iterate over directory paths before vs. after their contents

But these are not needed for the current patch series, so I refrain.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/hunk_1807.cpp,,,data/crawl/git/old_hunk_1807.cpp,data/crawl/git/new_hunk_1807.cpp,-1,124,,"warning(""error reading directory %s: %s"",
						iter->base.path.buf, strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""reading"", ""directory"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[13505825669856932485],5462,"40 days, 12:00:00"
https://github.com/git/git/commit/0fe5043dad74352c08447eb1913df0b6c3f2731c,20 Jun 2016,"dir_iterator: new API for iterating over a directory tree

The iterator interface is modeled on that for references, though no
vtable is necessary because there is (so far?) only one type of
dir_iterator.

There are obviously a lot of features that could easily be added to this
class:

* Skip/include directory paths in the iteration
* Shallow/deep iteration
* Letting the caller decide which subdirectories to recurse into (e.g.,
  via a dir_iterator_advance_into() function)
* Option to iterate in sorted order
* Option to iterate over directory paths before vs. after their contents

But these are not needed for the current patch series, so I refrain.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",290,data/crawl/git/hunk_1807.cpp,,,data/crawl/git/old_hunk_1807.cpp,data/crawl/git/new_hunk_1807.cpp,-1,73,,"warning(""error opening directory %s: %s"",
					iter->base.path.buf, strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""opening"", ""directory"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[10801070263889322641],5461,"40 days, 12:00:00"
https://github.com/git/git/commit/3e8e32c32ef8e49bcfd715837d51aca30925fdfe,29 Jul 2016,"patch-ids: add flag to create the diff patch id using header only data

This will allow a diff patch id to be created using only the header data
so that the contents of the file will not have to be loaded.

Signed-off-by: Kevin Willford <kcwillford@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_1644.cpp,,,data/crawl/git/old_hunk_1644.cpp,data/crawl/git/new_hunk_1644.cpp,-1,8,,"error(""unable to read files to diff"");","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""]]",[2692740952485397805],5460,"21 days, 0:00:00"
https://github.com/git/git/commit/3e8e32c32ef8e49bcfd715837d51aca30925fdfe,29 Jul 2016,"patch-ids: add flag to create the diff patch id using header only data

This will allow a diff patch id to be created using only the header data
so that the contents of the file will not have to be loaded.

Signed-off-by: Kevin Willford <kcwillford@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_1643.cpp,,,data/crawl/git/old_hunk_1643.cpp,data/crawl/git/new_hunk_1643.cpp,5,-1,"error(""unable to read files to diff"");",,"[""removeLog""]","[[""error"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""], []]",[-2692740952485397805],5459,"21 days, 0:00:00"
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/hunk_1543.cpp,,,data/crawl/git/old_hunk_1543.cpp,data/crawl/git/new_hunk_1543.cpp,-1,46,,environment.get_logger();,"[""addLog""]","[[], [""environment"", ""get_logger""]]",[9405940129258397921],5458,"11 days, 12:00:00"
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/hunk_1543.cpp,,,data/crawl/git/old_hunk_1543.cpp,data/crawl/git/new_hunk_1543.cpp,-1,36,,sys.stderr.write('\n');,"[""addLog""]","[[], [""sys"", ""stderr"", ""write"", ""\\n""]]",[-276106565262721426],5457,"11 days, 12:00:00"
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/hunk_1542.cpp,,,data/crawl/git/old_hunk_1542.cpp,data/crawl/git/new_hunk_1542.cpp,-1,70,,"error(self, msg);","[""addLog""]","[[], [""error"", ""self"", ""msg""]]",[12831924530435854937],5456,"11 days, 12:00:00"
https://github.com/git/git/commit/7c5543115edf58b3b9b188f6f1377660bec10629,17 Aug 2016,"git-multimail: update to release 1.4.0

Changes are described in CHANGES.

Contributions-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Contributions-by: Irfan Adilovic <irfanadilovic@gmail.com>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1001,data/crawl/git/hunk_1542.cpp,,,data/crawl/git/old_hunk_1542.cpp,data/crawl/git/new_hunk_1542.cpp,-1,66,,"warning(self, msg);","[""addLog""]","[[], [""warning"", ""self"", ""msg""]]",[158808187071493237],5455,"11 days, 12:00:00"
https://github.com/git/git/commit/3258258f51f45efeff5ce0e9f825f347a1404efa,24 May 2016,"config: set up config_source for command-line config

When we parse a config file, we set up the global ""cf""
variable as a pointer to a ""struct config_source"" describing
the file we are parsing. This is used for error messages, as
well as for lookup functions like current_config_name().

The ""cf"" variable is NULL in two cases:

  1. When we are parsing command-line config, in which case
     there is no source file.

  2. When we are not parsing any config at all.

Callers like current_config_name() must assume we are in
case 1 if they see a NULL ""cf"". However, this means that if
they are accidentally used outside of a config parsing
callback, they will quietly return a bogus answer.

This might seem like an unlikely accident (why would you ask
for the current config file if you are not parsing config?),
but it's actually an easy mistake to make due to the
configset caching. git_config() serves the answers from a
configset cache, and any calls to current_config_name() will
claim that we are parsing command-line config, no matter
what the original source.

So let's distinguish these cases by having the command-line
config parser set up a config_source with a NULL name (which
callers already handle properly). We can use this to catch
programming errors in some cases, and to give better
messages to the user in others.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_1983.cpp,,,data/crawl/git/old_hunk_1983.cpp,data/crawl/git/new_hunk_1983.cpp,-1,11,,"die(""BUG: current_config_name called outside config callback"");","[""addLog""]","[[], [""die"", ""BUG"", ""current_config_name"", ""called"", ""outside"", ""config"", ""callback""]]",[-4887400707580452413],5454,"54 days, 0:00:00"
https://github.com/git/git/commit/1b8132d99d80ca98218c2685bbe5ba016a0a42f8,28 Jul 2016,"i18n: config: unfold error messages marked for translation

Introduced in 473166b (""config: add 'origin_type' to config_source
struct"", 2016-02-19), Git can inform the user about the origin of a
config error, but the implementation does not allow translators to
translate the keywords 'file', 'blob, 'standard input', and
'submodule-blob'. Moreover, for the second message, a reason for the
error is appended to the message, not allowing translators to translate
that reason either.

Unfold the message into several templates for each known origin_type.
That would result in better translation at the expense of code
verbosity.

Add enum config_oringin_type to ease management of the various
configuration origin types (blob, file, etc).  Previously origin type
was considered from command line if cf->origin_type == NULL, i.e.,
uninitialized. Now we set origin_type to CONFIG_ORIGIN_CMDLINE in
git_config_from_parameters() and configset_add_value().

For error message in git_parse_source(), use xstrfmt() function to
prepare the message string, instead of doing something like it's done
for die_bad_number(), because intelligibility and code conciseness are
improved for that instance.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_1649.cpp,,,data/crawl/git/old_hunk_1649.cpp,data/crawl/git/new_hunk_1649.cpp,-1,23,,"die(""BUG: unknown config origin type"");","[""addLog""]","[[], [""die"", ""BUG"", ""unknown"", ""config"", ""origin"", ""type""]]",[1866629154554188007],5453,"21 days, 12:00:00"
https://github.com/git/git/commit/3258258f51f45efeff5ce0e9f825f347a1404efa,24 May 2016,"config: set up config_source for command-line config

When we parse a config file, we set up the global ""cf""
variable as a pointer to a ""struct config_source"" describing
the file we are parsing. This is used for error messages, as
well as for lookup functions like current_config_name().

The ""cf"" variable is NULL in two cases:

  1. When we are parsing command-line config, in which case
     there is no source file.

  2. When we are not parsing any config at all.

Callers like current_config_name() must assume we are in
case 1 if they see a NULL ""cf"". However, this means that if
they are accidentally used outside of a config parsing
callback, they will quietly return a bogus answer.

This might seem like an unlikely accident (why would you ask
for the current config file if you are not parsing config?),
but it's actually an easy mistake to make due to the
configset caching. git_config() serves the answers from a
configset cache, and any calls to current_config_name() will
claim that we are parsing command-line config, no matter
what the original source.

So let's distinguish these cases by having the command-line
config parser set up a config_source with a NULL name (which
callers already handle properly). We can use this to catch
programming errors in some cases, and to give better
messages to the user in others.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_1983.cpp,,,data/crawl/git/old_hunk_1983.cpp,data/crawl/git/new_hunk_1983.cpp,-1,4,,"die(""BUG: current_config_origin_type called outside config callback"");","[""addLog""]","[[], [""die"", ""BUG"", ""current_config_origin_type"", ""called"", ""outside"", ""config"", ""callback""]]",[6096325379770103156],5452,"54 days, 0:00:00"
https://github.com/git/git/commit/3258258f51f45efeff5ce0e9f825f347a1404efa,24 May 2016,"config: set up config_source for command-line config

When we parse a config file, we set up the global ""cf""
variable as a pointer to a ""struct config_source"" describing
the file we are parsing. This is used for error messages, as
well as for lookup functions like current_config_name().

The ""cf"" variable is NULL in two cases:

  1. When we are parsing command-line config, in which case
     there is no source file.

  2. When we are not parsing any config at all.

Callers like current_config_name() must assume we are in
case 1 if they see a NULL ""cf"". However, this means that if
they are accidentally used outside of a config parsing
callback, they will quietly return a bogus answer.

This might seem like an unlikely accident (why would you ask
for the current config file if you are not parsing config?),
but it's actually an easy mistake to make due to the
configset caching. git_config() serves the answers from a
configset cache, and any calls to current_config_name() will
claim that we are parsing command-line config, no matter
what the original source.

So let's distinguish these cases by having the command-line
config parser set up a config_source with a NULL name (which
callers already handle properly). We can use this to catch
programming errors in some cases, and to give better
messages to the user in others.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_1982.cpp,,,data/crawl/git/old_hunk_1982.cpp,data/crawl/git/new_hunk_1982.cpp,-1,4,,"die(""BUG: configset_add_value has no source"");","[""addLog""]","[[], [""die"", ""BUG"", ""configset_add_value"", ""has"", ""no"", ""source""]]",[-844726279118283092],5451,"54 days, 0:00:00"
https://github.com/git/git/commit/1b8132d99d80ca98218c2685bbe5ba016a0a42f8,28 Jul 2016,"i18n: config: unfold error messages marked for translation

Introduced in 473166b (""config: add 'origin_type' to config_source
struct"", 2016-02-19), Git can inform the user about the origin of a
config error, but the implementation does not allow translators to
translate the keywords 'file', 'blob, 'standard input', and
'submodule-blob'. Moreover, for the second message, a reason for the
error is appended to the message, not allowing translators to translate
that reason either.

Unfold the message into several templates for each known origin_type.
That would result in better translation at the expense of code
verbosity.

Add enum config_oringin_type to ease management of the various
configuration origin types (blob, file, etc).  Previously origin type
was considered from command line if cf->origin_type == NULL, i.e.,
uninitialized. Now we set origin_type to CONFIG_ORIGIN_CMDLINE in
git_config_from_parameters() and configset_add_value().

For error message in git_parse_source(), use xstrfmt() function to
prepare the message string, instead of doing something like it's done
for die_bad_number(), because intelligibility and code conciseness are
improved for that instance.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_1646.cpp,,,data/crawl/git/old_hunk_1646.cpp,data/crawl/git/new_hunk_1646.cpp,-1,33,,"error(""%s"", error_msg);","[""addLog""]","[[], [""error"", ""%s"", ""error_msg""]]",[1400124805366994610],5450,"21 days, 12:00:00"
https://github.com/git/git/commit/1b8132d99d80ca98218c2685bbe5ba016a0a42f8,28 Jul 2016,"i18n: config: unfold error messages marked for translation

Introduced in 473166b (""config: add 'origin_type' to config_source
struct"", 2016-02-19), Git can inform the user about the origin of a
config error, but the implementation does not allow translators to
translate the keywords 'file', 'blob, 'standard input', and
'submodule-blob'. Moreover, for the second message, a reason for the
error is appended to the message, not allowing translators to translate
that reason either.

Unfold the message into several templates for each known origin_type.
That would result in better translation at the expense of code
verbosity.

Add enum config_oringin_type to ease management of the various
configuration origin types (blob, file, etc).  Previously origin type
was considered from command line if cf->origin_type == NULL, i.e.,
uninitialized. Now we set origin_type to CONFIG_ORIGIN_CMDLINE in
git_config_from_parameters() and configset_add_value().

For error message in git_parse_source(), use xstrfmt() function to
prepare the message string, instead of doing something like it's done
for die_bad_number(), because intelligibility and code conciseness are
improved for that instance.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_1646.cpp,,,data/crawl/git/old_hunk_1646.cpp,data/crawl/git/new_hunk_1646.cpp,-1,31,,"die(""%s"", error_msg);","[""addLog""]","[[], [""die"", ""%s"", ""error_msg""]]",[-8810100787835860572],5449,"21 days, 12:00:00"
https://github.com/git/git/commit/1b8132d99d80ca98218c2685bbe5ba016a0a42f8,28 Jul 2016,"i18n: config: unfold error messages marked for translation

Introduced in 473166b (""config: add 'origin_type' to config_source
struct"", 2016-02-19), Git can inform the user about the origin of a
config error, but the implementation does not allow translators to
translate the keywords 'file', 'blob, 'standard input', and
'submodule-blob'. Moreover, for the second message, a reason for the
error is appended to the message, not allowing translators to translate
that reason either.

Unfold the message into several templates for each known origin_type.
That would result in better translation at the expense of code
verbosity.

Add enum config_oringin_type to ease management of the various
configuration origin types (blob, file, etc).  Previously origin type
was considered from command line if cf->origin_type == NULL, i.e.,
uninitialized. Now we set origin_type to CONFIG_ORIGIN_CMDLINE in
git_config_from_parameters() and configset_add_value().

For error message in git_parse_source(), use xstrfmt() function to
prepare the message string, instead of doing something like it's done
for die_bad_number(), because intelligibility and code conciseness are
improved for that instance.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_1646.cpp,,,data/crawl/git/old_hunk_1646.cpp,data/crawl/git/new_hunk_1646.cpp,6,10,"error(_(""bad config line %d in %s %s""), cf->linenr, cf->origin_type, cf->name);","xstrfmt(_(""bad config line %d in file %s""),
				      cf->linenr, cf->name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""%s"", ""origin_type"", ""cf""], [""xstrfmt"", ""file""]]",[-4373687941258834241],5448,"21 days, 12:00:00"
https://github.com/git/git/commit/1b8132d99d80ca98218c2685bbe5ba016a0a42f8,28 Jul 2016,"i18n: config: unfold error messages marked for translation

Introduced in 473166b (""config: add 'origin_type' to config_source
struct"", 2016-02-19), Git can inform the user about the origin of a
config error, but the implementation does not allow translators to
translate the keywords 'file', 'blob, 'standard input', and
'submodule-blob'. Moreover, for the second message, a reason for the
error is appended to the message, not allowing translators to translate
that reason either.

Unfold the message into several templates for each known origin_type.
That would result in better translation at the expense of code
verbosity.

Add enum config_oringin_type to ease management of the various
configuration origin types (blob, file, etc).  Previously origin type
was considered from command line if cf->origin_type == NULL, i.e.,
uninitialized. Now we set origin_type to CONFIG_ORIGIN_CMDLINE in
git_config_from_parameters() and configset_add_value().

For error message in git_parse_source(), use xstrfmt() function to
prepare the message string, instead of doing something like it's done
for die_bad_number(), because intelligibility and code conciseness are
improved for that instance.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_1646.cpp,,,data/crawl/git/old_hunk_1646.cpp,data/crawl/git/new_hunk_1646.cpp,4,6,"die(_(""bad config line %d in %s %s""), cf->linenr, cf->origin_type, cf->name);","xstrfmt(_(""bad config line %d in blob %s""),
				      cf->linenr, cf->name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""%s"", ""origin_type"", ""cf""], [""xstrfmt"", ""blob""]]",[7665020203569478252],5447,"21 days, 12:00:00"
https://github.com/git/git/commit/3258258f51f45efeff5ce0e9f825f347a1404efa,24 May 2016,"config: set up config_source for command-line config

When we parse a config file, we set up the global ""cf""
variable as a pointer to a ""struct config_source"" describing
the file we are parsing. This is used for error messages, as
well as for lookup functions like current_config_name().

The ""cf"" variable is NULL in two cases:

  1. When we are parsing command-line config, in which case
     there is no source file.

  2. When we are not parsing any config at all.

Callers like current_config_name() must assume we are in
case 1 if they see a NULL ""cf"". However, this means that if
they are accidentally used outside of a config parsing
callback, they will quietly return a bogus answer.

This might seem like an unlikely accident (why would you ask
for the current config file if you are not parsing config?),
but it's actually an easy mistake to make due to the
configset caching. git_config() serves the answers from a
configset cache, and any calls to current_config_name() will
claim that we are parsing command-line config, no matter
what the original source.

So let's distinguish these cases by having the command-line
config parser set up a config_source with a NULL name (which
callers already handle properly). We can use this to catch
programming errors in some cases, and to give better
messages to the user in others.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_1981.cpp,,,data/crawl/git/old_hunk_1981.cpp,data/crawl/git/new_hunk_1981.cpp,2,2,"die(include_depth_advice, MAX_INCLUDE_DEPTH, path,
			    cf && cf->name ? cf->name : ""the command line"");","die(include_depth_advice, MAX_INCLUDE_DEPTH, path,
			    !cf ? ""<unknown>"" :
			    cf->name ? cf->name :
			    ""the command line"");","[""removeVariable"", ""addContent"", ""addVariable""]","[[""&&""], [""unknown""]]",[-4585537727782749613],5446,"54 days, 0:00:00"
https://github.com/git/git/commit/54307ea7c3ced760ee375483a786ec7180798aed,08 Jul 2016,"commit.c: remove print_commit_list()

The helper function tries to offer a way to conveniently show the
last one differently from others, presumably to allow you to say
something like

	A, B, and C.

while iterating over a list that has these three elements.

However, there is only one caller, and it passes the same format
string ""%s\n"" for both the last one and the other ones.  Retire the
helper function and update the caller with a simplified version.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/hunk_1714.cpp,,,data/crawl/git/old_hunk_1714.cpp,data/crawl/git/new_hunk_1714.cpp,9,-1,"printf(format, oid_to_hex(&list->item->object.oid));",,"[""removeLog""]","[[""printf"", ""format"", ""oid_to_hex"", ""&list"", ""item"", ""object"", ""oid""], []]",[-11521235776160159660],5445,"31 days, 12:00:00"
https://github.com/git/git/commit/6d308627cae4d34c058591de73ce14a52b79cf4e,08 Jul 2016,"worktree: add ""unlock"" command

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_1711.cpp,,,data/crawl/git/old_hunk_1711.cpp,data/crawl/git/new_hunk_1711.cpp,-1,22,,"die(_(""'%s' is not locked""), av[0]);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""not"", ""locked"", ""av[0]""]]",[12944752158731816887],5444,"31 days, 12:00:00"
https://github.com/git/git/commit/58142c09a4fe825912e5a2ebfa1ba5f7f6d8beb5,08 Jul 2016,"worktree: add ""lock"" command

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/hunk_1712.cpp,,,data/crawl/git/old_hunk_1712.cpp,data/crawl/git/new_hunk_1712.cpp,-1,29,,"die(_(""'%s' is already locked""), av[0]);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""already"", ""locked"", ""av[0]""]]",[-566654064609392542],5443,"31 days, 12:00:00"
https://github.com/git/git/commit/58142c09a4fe825912e5a2ebfa1ba5f7f6d8beb5,08 Jul 2016,"worktree: add ""lock"" command

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/hunk_1712.cpp,,,data/crawl/git/old_hunk_1712.cpp,data/crawl/git/new_hunk_1712.cpp,-1,27,,"die(_(""'%s' is already locked, reason: %s""),
			    av[0], old_reason);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""already"", ""locked"", ""reason"", ""%s"", ""av[0]"", ""old_reason""]]",[5445923540206722054],5442,"31 days, 12:00:00"
https://github.com/git/git/commit/92bbe7ccf1fedac825f2c6ab4c8de91dc5370fd2,03 Aug 2016,"submodule--helper: add remote-branch helper

In a later patch we want to enhance the logic for the branch selection.
Rewrite the current logic to be in C, so we can directly use C when
we enhance the logic.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_1623.cpp,,,data/crawl/git/old_hunk_1623.cpp,data/crawl/git/new_hunk_1623.cpp,-1,31,,"printf(""%s"", ret);","[""addLog""]","[[], [""printf"", ""%s"", ""ret""]]",[7999025673695671843],5441,"18 days, 12:00:00"
https://github.com/git/git/commit/92bbe7ccf1fedac825f2c6ab4c8de91dc5370fd2,03 Aug 2016,"submodule--helper: add remote-branch helper

In a later patch we want to enhance the logic for the branch selection.
Rewrite the current logic to be in C, so we can directly use C when
we enhance the logic.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_1623.cpp,,,data/crawl/git/old_hunk_1623.cpp,data/crawl/git/new_hunk_1623.cpp,-1,29,,"die(""submodule %s doesn't exist"", argv[1]);","[""addLog""]","[[], [""die"", ""submodule"", ""%s"", ""doesn"", ""t"", ""exist"", ""argv[1]""]]",[-3617941232107684191],5440,"18 days, 12:00:00"
https://github.com/git/git/commit/92bbe7ccf1fedac825f2c6ab4c8de91dc5370fd2,03 Aug 2016,"submodule--helper: add remote-branch helper

In a later patch we want to enhance the logic for the branch selection.
Rewrite the current logic to be in C, so we can directly use C when
we enhance the logic.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_1623.cpp,,,data/crawl/git/old_hunk_1623.cpp,data/crawl/git/new_hunk_1623.cpp,-1,25,,"die(""submodule--helper remote-branch takes exactly one arguments, got %d"", argc);","[""addLog""]","[[], [""die"", ""submodule"", ""helper"", ""remote"", ""branch"", ""takes"", ""exactly"", ""one"", ""arguments"", ""got"", ""%d"", ""argc""]]",[-32517820935648864067],5439,"18 days, 12:00:00"
https://github.com/git/git/commit/4d7bc52b178bffe9e484c4dcd92d5353e2ce716f,03 Aug 2016,"submodule update: allow '.' for branch value

Gerrit has a ""superproject subscription"" feature[1], that triggers a
commit in a superproject that is subscribed to its submodules.
Conceptually this Gerrit feature can be done on the client side with
Git via (except for raciness, error handling etc):

  while [ true ]; do
    git -C <superproject> submodule update --remote --force
    git -C <superproject> commit -a -m ""Update submodules""
    git -C <superproject> push
  done

for each branch in the superproject. To ease the configuration in Gerrit
a special value of ""."" has been introduced for the submodule.<name>.branch
to mean the same branch as the superproject[2], such that you can create a
new branch on both superproject and the submodule and this feature
continues to work on that new branch.

Now we find projects in the wild with such a .gitmodules file.
The .gitmodules used in these Gerrit projects do not conform
to Gits understanding of how .gitmodules should look like.
This teaches Git to deal gracefully with this syntax as well.

The redefinition of ""."" does no harm to existing projects unaware of
this change, as ""."" is an invalid branch name in Git, so we do not
expect such projects to exist.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_1622.cpp,,,data/crawl/git/old_hunk_1622.cpp,data/crawl/git/new_hunk_1622.cpp,-1,12,,"die(_(""Submodule (%s) branch configured to inherit ""
			      ""branch from superproject, but the superproject ""
			      ""is not on any branch""), sub->name);","[""addLog""]","[[], [""die"", ""_"", ""Submodule"", ""%s"", ""branch"", ""configured"", ""to"", ""inherit"", ""branch"", ""from"", ""superproject"", ""but"", ""the"", ""superproject"", ""is"", ""not"", ""on"", ""any"", ""branch"", ""sub"", ""name""]]",[-45220226411645197935],5438,"18 days, 12:00:00"
https://github.com/git/git/commit/2de26ae1dc89236ff5d0d0657b0eb884b6c331b5,01 Aug 2016,"submodule--helper: fix usage string for relative-path

Internally we call the underscore version of relative_path, but externally
we present an API with no underscores.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_1624.cpp,,,data/crawl/git/old_hunk_1624.cpp,data/crawl/git/new_hunk_1624.cpp,3,3,"die(""submodule--helper relative_path takes exactly 2 arguments, got %d"", argc);","die(""submodule--helper relative-path takes exactly 2 arguments, got %d"", argc);","[""updateContent""]","[[""relative_path""], [""relative"", ""path""]]",[7647013548923829274],5437,"19 days, 12:00:00"
https://github.com/git/git/commit/e923a8abe9b9e1ada28153160fb86a144162b06e,17 Jun 2016,"i18n: standardise messages

Standardise messages in order to save translators some work.

Nuances fixed in this commit:
""failed to read %s""
""read of %s failed""

""detach the HEAD at named commit""
""detach HEAD at named commit""

""removing '%s' failed""
""failed to remove '%s'""

""index file corrupt""
""corrupt index file""

""failed to read %s""
""read of %s failed""

""detach the HEAD at named commit""
""detach HEAD at named commit""

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_1828.cpp,,,data/crawl/git/old_hunk_1828.cpp,data/crawl/git/new_hunk_1828.cpp,3,3,"warning(_(""removing '%s' failed""), fname);","warning(_(""failed to remove '%s'""), fname);","[""updateContent""]","[[""removing""], [""to"", ""remove""]]",[-4079572091471055498],5436,"42 days, 0:00:00"
https://github.com/git/git/commit/905f27b86ac1f50c6870a064c3b5b9d82c97a145,14 Jun 2016,"repack: add --keep-unreachable option

The usual way to do a full repack (and what is done by
git-gc) is to run ""repack -Ad --unpack-unreachable=<when>"",
which will loosen any unreachable objects newer than
""<when>"", and drop any older ones.

This is a safer alternative to ""repack -ad"", because
""<when>"" becomes a grace period during which we will not
drop any new objects that are about to be referenced.
However, it isn't perfectly safe. It's always possible that
a process is about to reference an old object. Even if that
process were to take care to update the timestamp on the
object, there is no atomicity with a simultaneously running
""repack"" process.

So while unlikely, there is a small race wherein we may drop
an object that is in the process of being referenced. If you
do automated repacking on a large number of active
repositories, you may hit it eventually, and the result is a
corrupted repository.

It would be nice to fix that race in the long run, but it's
complicated.  In the meantime, there is a much simpler
strategy for automated repository maintenance: do not drop
objects at all. We already have a ""--keep-unreachable""
option in pack-objects; we just need to plumb it through
from git-repack.

Note that this _isn't_ plumbed through from git-gc, so at
this point it's strictly a tool for people doing their own
advanced repository maintenance strategy.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_1873.cpp,,,data/crawl/git/old_hunk_1873.cpp,data/crawl/git/new_hunk_1873.cpp,-1,5,,"die(_(""--keep-unreachable and -A are incompatible""));","[""addLog""]","[[], [""die"", ""_"", ""keep"", ""unreachable"", ""and"", ""A"", ""are"", ""incompatible""]]",[-5593051819424641013],5435,"43 days, 12:00:00"
https://github.com/git/git/commit/a1b467a4eee547973709ee4e1473febd8d1b4c85,17 Jun 2016,"i18n: remote: allow translations to reorder message

Before this patch, translations couldn't place the branch name
where it was better fit in the message ""and with remote <branch_name>"".
Allow translations that, instead of forcing the branch name to display
right of the message.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_1821.cpp,,,data/crawl/git/old_hunk_1821.cpp,data/crawl/git/new_hunk_1821.cpp,9,8,"printf(""    %-*s %s %s\n"", show_info->width, """", also,
		       merge->items[i].string);","printf(_(""%-*s    and with remote %s\n""), width, """",
		       merge->items[i].string);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""show_info"", ""also""], [""_"", ""and"", ""with"", ""remote""]]",[-7450439624966989720],5434,"42 days, 0:00:00"
https://github.com/git/git/commit/f6a4e61fbb647928d615a0befaec163a5d2bf4af,14 Jul 2016,"push: accept push options

This implements everything that is required on the client side to make use
of push options from the porcelain push command.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_1702.cpp,,,data/crawl/git/old_hunk_1702.cpp,data/crawl/git/new_hunk_1702.cpp,-1,5,,"die(_(""push options must not have new line characters""));","[""addLog""]","[[], [""die"", ""_"", ""push"", ""options"", ""must"", ""not"", ""have"", ""new"", ""line"", ""characters""]]",[19338182395889014130],5433,"28 days, 12:00:00"
https://github.com/git/git/commit/c57e501c51d6b76ce30658b94ee4a5dc6ac27f3e,20 May 2016,"pull: warn on --verify-signatures with --rebase

git-pull silently ignores the --verify-signatures option when
running --rebase, potentially leaving users in the belief that
the rebase operation would check for valid GPG signatures.

Implementing --verify-signatures for git-rebase was talked about,
but doubts for a valid workflow rose up.  Since you usually merge
other's branches into your branch you might have an interest that
their side has a valid GPG signature.

Rebasing, on the other hand, is to rebuild your branch on top of
other's work, in order to push the result back, and it is too late
to reject their work even if you find their commits lack acceptable
signature.

Let's warn users that the --verify-signatures option is ignored
during ""pull --rebase""; users do not wonder what would happen if
their commits lack acceptable signature that way.

Signed-off-by: Alexander Hirsch <1zeeky@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/hunk_1985.cpp,,,data/crawl/git/old_hunk_1985.cpp,data/crawl/git/new_hunk_1985.cpp,-1,5,,"warning(_(""ignoring --verify-signatures for rebase""));","[""addLog""]","[[], [""warning"", ""_"", ""ignoring"", ""verify"", ""signatures"", ""for"", ""rebase""]]",[-10191881885714386916],5432,"56 days, 0:00:00"
https://github.com/git/git/commit/e26a8c4721ceaf4c59e33bbd4e60f777b7ea9b62,14 Jun 2016,"repack: extend --keep-unreachable to loose objects

If you use ""repack -adk"" currently, we will pack all objects
that are already packed into the new pack, and then drop the
old packs. However, loose unreachable objects will be left
as-is. In theory these are meant to expire eventually with
""git prune"". But if you are using ""repack -k"", you probably
want to keep things forever and therefore do not run ""git
prune"" at all. Meaning those loose objects may build up over
time and end up fooling any object-count heuristics (such as
the one done by ""gc --auto"", though since git-gc does not
support ""repack -k"", this really applies to whatever custom
scripts people might have driving ""repack -k"").

With this patch, we instead stuff any loose unreachable
objects into the pack along with the already-packed
unreachable objects. This may seem wasteful, but it is
really no more so than using ""repack -k"" in the first place.
We are at a slight disadvantage, in that we have no useful
ordering for the result, or names to hand to the delta code.
However, this is again no worse than what ""repack -k"" is
already doing for the packed objects. The packing of these
objects doesn't matter much because they should not be
accessed frequently (unless they actually _do_ become
referenced, but then they would get moved to a different
part of the packfile during the next repack).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_1872.cpp,,,data/crawl/git/old_hunk_1872.cpp,data/crawl/git/new_hunk_1872.cpp,-1,9,,"warning(""loose object at %s could not be examined"", path);","[""addLog""]","[[], [""warning"", ""loose"", ""object"", ""at"", ""%s"", ""could"", ""not"", ""be"", ""examined"", ""path""]]",[3401631670850629771],5431,"43 days, 12:00:00"
https://github.com/git/git/commit/e78d5d49935373dabcc40c5e32aefe4956a70b97,08 Jul 2016,"use write_file_buf where applicable

There are several places where we open a file, write some
content from a strbuf, and close it. These can be simplified
with write_file_buf(). As a bonus, many of these did not
catch write problems at close() time.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_1718.cpp,,,data/crawl/git/old_hunk_1718.cpp,data/crawl/git/new_hunk_1718.cpp,6,-1,"die_errno(_(""Finishing SQUASH_MSG""));",,"[""removeLog""]","[[""die_errno"", ""_"", ""Finishing"", ""SQUASH_MSG""], []]",[3834409773858416619],5430,"31 days, 12:00:00"
https://github.com/git/git/commit/e78d5d49935373dabcc40c5e32aefe4956a70b97,08 Jul 2016,"use write_file_buf where applicable

There are several places where we open a file, write some
content from a strbuf, and close it. These can be simplified
with write_file_buf(). As a bonus, many of these did not
catch write problems at close() time.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_1718.cpp,,,data/crawl/git/old_hunk_1718.cpp,data/crawl/git/new_hunk_1718.cpp,4,-1,"die_errno(_(""Writing SQUASH_MSG""));",,"[""removeLog""]","[[""die_errno"", ""_"", ""Writing"", ""SQUASH_MSG""], []]",[14416749490606559798],5429,"31 days, 12:00:00"
https://github.com/git/git/commit/ef1177d18e35c030c37aa533002a11d98361e6b9,26 Jul 2016,"die(""bug""): report bugs consistently

The vast majority of error messages in Git's source code which report a
bug use the convention to prefix the message with ""BUG:"".

As part of cleaning up merge-recursive to stop die()ing except in case of
detected bugs, let's just make the remainder of the bug reports consistent
with the de facto rule.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_1661.cpp,,,data/crawl/git/old_hunk_1661.cpp,data/crawl/git/new_hunk_1661.cpp,3,3,"die(""bug in show-killed-files"");","die(""BUG: killed-file %.*s not found"",
						ent->len, ent->name);","[""updateContent"", ""addVariable""]","[[""bug"", ""in"", ""show"", ""files""], [""BUG"", ""file"", ""%"", ""*s"", ""not"", ""found"", ""ent"", ""len"", ""ent"", ""name""]]",[5828224657249385815],5428,"22 days, 12:00:00"
https://github.com/git/git/commit/36a4d905c36a598d17274765b57690ecfb4a23f8,24 Jun 2016,"format-patch: use stdout directly

Earlier, we freopen()ed stdout in order to write patches to files.
That forced us to duplicate stdout (naming it ""realstdout"") because we
*still* wanted to be able to report the file names.

As we do not abuse stdout that way anymore, we no longer need to
duplicate stdout, either.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_1772.cpp,,,data/crawl/git/old_hunk_1772.cpp,data/crawl/git/new_hunk_1772.cpp,3,3,"fprintf(realstdout, ""%s\n"", filename.buf + outdir_offset);","printf(""%s\n"", filename.buf + outdir_offset);","[""updateLog"", ""removeVariable""]","[[""fprintf"", ""realstdout""], [""printf""]]",[13971046858766842764],5427,"38 days, 12:00:00"
https://github.com/git/git/commit/c30364d0804e260049c0933879a3bafe01e5e57e,17 Jun 2016,"i18n: init-db: join message pieces

Join message displayed during repository initialization in one entire
sentence.  That would improve translations since it's easier translate
an entire sentence than translating each piece.

Update Icelandic translation to reflect the changes.  The Icelandic
translation of these messages is used with test
t0204-gettext-reencode-sanity.sh and not updating the translation would
fail the test.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/hunk_1820.cpp,,,data/crawl/git/old_hunk_1820.cpp,data/crawl/git/new_hunk_1820.cpp,-1,9,,"printf(get_shared_repository()
			       ? _(""Initialized empty shared Git repository in %s%s\n"")
			       : _(""Initialized empty Git repository in %s%s\n""),
			       git_dir, len && git_dir[len-1] != '/' ? ""/"" : """");","[""addLog""]","[[], [""printf"", ""get_shared_repository"", ""_"", ""Initialized"", ""empty"", ""shared"", ""Git"", ""repository"", ""in"", ""%s%s\\n"", ""_"", ""Initialized"", ""empty"", ""Git"", ""repository"", ""in"", ""%s%s\\n"", ""git_dir"", ""len"", ""&&"", ""git_dir[len"", ""1]"", ""/"", ""/""]]",[29549093012699866690],5426,"42 days, 0:00:00"
https://github.com/git/git/commit/993a21b0a05bf2e2063c58e5722c29f5747e39d4,18 Jul 2016,"fsck: refactor how to describe objects

In many places, we refer to objects via their SHA-1s. Let's abstract
that into a function.

For the moment, it does nothing else than what we did previously: print
out the 40-digit hex string. But that will change over the course of the
next patches.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_1697.cpp,,,data/crawl/git/old_hunk_1697.cpp,data/crawl/git/new_hunk_1697.cpp,10,10,"printf(""tagged %s %s"", typename(tag->tagged->type), oid_to_hex(&tag->tagged->oid));","printf(""tagged %s %s"", typename(tag->tagged->type),
				describe_object(tag->tagged));","[""updateVariable"", ""removeVariable""]","[[""oid_to_hex"", ""&tag"", ""oid""], [""describe_object"", ""tag""]]",[3556527325527567042],5425,"26 days, 12:00:00"
https://github.com/git/git/commit/a0d12c4433e25e87b67df78b45635df8a098fb23,28 Jun 2016,"diff: convert struct diff_filespec to struct object_id

Convert struct diff_filespec's sha1 member to use a struct object_id
called ""oid"" instead.  The following Coccinelle semantic patch was used
to implement this, followed by the transformations in object_id.cocci:

@@
struct diff_filespec o;
@@
- o.sha1
+ o.oid.hash

@@
struct diff_filespec *p;
@@
- p->sha1
+ p->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",275,data/crawl/git/hunk_1750.cpp,,,data/crawl/git/old_hunk_1750.cpp,data/crawl/git/new_hunk_1750.cpp,1,1,"printf(""M %06o %s "", spec->mode,
				       sha1_to_hex(anonymize ?
						   anonymize_sha1(spec->sha1) :
						   spec->sha1));","printf(""M %06o %s "", spec->mode,
				       sha1_to_hex(anonymize ?
						   anonymize_sha1(spec->oid.hash) :
						   spec->oid.hash));","[""updateVariable"", ""addVariable""]","[[""sha1"", ""sha1""], [""oid"", ""hash"", ""oid"", ""hash""]]",[27550036826238570840],5424,"36 days, 12:00:00"
https://github.com/git/git/commit/38e590ea12336bcfae0310092885743e6ba79781,20 Jul 2016,"clone: use a real progress meter for connectivity check

Because the initial connectivity check for a cloned
repository can be slow, 0781aa4 (clone: let the user know
when check_everything_connected is run, 2013-05-03) added a
""fake"" progress meter; we simply say ""Checking connectivity""
when it starts, and ""done"" at the end, with nothing between.

Since check_connected() now knows how to do a real progress
meter, we can drop our fake one and use that one instead.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_1681.cpp,,,data/crawl/git/old_hunk_1681.cpp,data/crawl/git/new_hunk_1681.cpp,9,-1,"fprintf(stderr, _(""done.\n""));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""_"", ""done"", ""\\n""], []]",[22732556845897639308],5423,"25 days, 12:00:00"
https://github.com/git/git/commit/38e590ea12336bcfae0310092885743e6ba79781,20 Jul 2016,"clone: use a real progress meter for connectivity check

Because the initial connectivity check for a cloned
repository can be slow, 0781aa4 (clone: let the user know
when check_everything_connected is run, 2013-05-03) added a
""fake"" progress meter; we simply say ""Checking connectivity""
when it starts, and ""done"" at the end, with nothing between.

Since check_connected() now knows how to do a real progress
meter, we can drop our fake one and use that one instead.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_1681.cpp,,,data/crawl/git/old_hunk_1681.cpp,data/crawl/git/new_hunk_1681.cpp,5,-1,"fprintf(stderr, _(""Checking connectivity... ""));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""_"", ""Checking"", ""connectivity""], []]",[-707430495552391425],5422,"25 days, 12:00:00"
https://github.com/git/git/commit/8f31fac365c312aa9109a7a1fc1014e56ed473d2,03 Jun 2016,"builtin/apply: add 'lock_file' pointer into 'struct apply_state'

We cannot have a 'struct lock_file' allocated on the stack, as lockfile.c
keeps a linked list of all created lock_file structures.

Also 'struct apply_state' users might later want the same 'struct lock_file'
instance to be reused by different series of calls to the apply api.

So let's add a 'struct lock_file *lock_file' pointer into 'struct apply_state'
and have the user of 'struct apply_state' allocate memory for the actual
'struct lock_file' instance.

Let's also add an argument to init_apply_state(), so that the caller can
easily supply a pointer to the allocated instance.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/hunk_1950.cpp,,,data/crawl/git/old_hunk_1950.cpp,data/crawl/git/new_hunk_1950.cpp,-1,4,,"die(""BUG: state->lock_file should not be NULL"");","[""addLog""]","[[], [""die"", ""BUG"", ""state"", ""lock_file"", ""should"", ""not"", ""be"", ""NULL""]]",[13789745763295847838],5421,"49 days, 0:00:00"
https://github.com/git/git/commit/14dc4899e535964311dfafc504dac941ecd52432,17 Jun 2016,"i18n: bisect: mark strings for translation

In the last message, involving Q_(), try to mark the message in such way
that is suited for RTL (Right to Left) languages.

Update test t6030-bisect-porcelain.sh to reflect the changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_1849.cpp,,,data/crawl/git/old_hunk_1849.cpp,data/crawl/git/new_hunk_1849.cpp,-1,8,,"printf(Q_(""Bisecting: %d revision left to test after this %s\n"",
		  ""Bisecting: %d revisions left to test after this %s\n"",
		  nr), nr, steps_msg);","[""addLog""]","[[], [""printf"", ""Q_"", ""Bisecting"", ""%d"", ""revision"", ""left"", ""to"", ""test"", ""after"", ""this"", ""%s\\n"", ""Bisecting"", ""%d"", ""revisions"", ""left"", ""to"", ""test"", ""after"", ""this"", ""%s\\n"", ""nr"", ""nr"", ""steps_msg""]]",[37891228077875911279],5420,"42 days, 0:00:00"
https://github.com/git/git/commit/14dc4899e535964311dfafc504dac941ecd52432,17 Jun 2016,"i18n: bisect: mark strings for translation

In the last message, involving Q_(), try to mark the message in such way
that is suited for RTL (Right to Left) languages.

Update test t6030-bisect-porcelain.sh to reflect the changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_1849.cpp,,,data/crawl/git/old_hunk_1849.cpp,data/crawl/git/new_hunk_1849.cpp,3,3,"printf(""Bisecting: %d revision%s left to test after this ""
	       ""(roughly %d step%s)\n"", nr, (nr == 1 ? """" : ""s""),
	       steps, (steps == 1 ? """" : ""s""));","xsnprintf(steps_msg, sizeof(steps_msg),
		  Q_(""(roughly %d step)"", ""(roughly %d steps)"", steps),
		  steps);","[""moveContent"", ""updateVariable"", ""updateLog"", ""moveVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""printf"", ""Bisecting"", ""revision%s"", ""left"", ""to"", ""test"", ""after"", ""this"", ""step%s"", ""\\n"", ""nr"", ""nr"", ""1"", ""s"", ""1"", ""s""], [""xsnprintf"", ""steps_msg"", ""sizeof"", ""steps_msg"", ""Q_"", ""step"", ""roughly"", ""steps""]]",[-14846855508532818832],5419,"42 days, 0:00:00"
https://github.com/git/git/commit/14dc4899e535964311dfafc504dac941ecd52432,17 Jun 2016,"i18n: bisect: mark strings for translation

In the last message, involving Q_(), try to mark the message in such way
that is suited for RTL (Right to Left) languages.

Update test t6030-bisect-porcelain.sh to reflect the changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_1842.cpp,,,data/crawl/git/old_hunk_1842.cpp,data/crawl/git/new_hunk_1842.cpp,-1,21,,"_(""Some %s revs are not ancestor of the %s rev.\n""
		""git bisect cannot work properly in this case.\n""
		""Maybe you mistook %s and %s revs?\n"");","[""addLog""]","[[], [""_"", ""Some"", ""%s"", ""revs"", ""are"", ""not"", ""ancestor"", ""of"", ""the"", ""%s"", ""rev"", ""\\n"", ""git"", ""bisect"", ""cannot"", ""work"", ""properly"", ""in"", ""this"", ""case"", ""\\n"", ""Maybe"", ""you"", ""mistook"", ""%s"", ""and"", ""%s"", ""revs"", ""\\n""]]",[-27325871189488331750],5418,"42 days, 0:00:00"
https://github.com/git/git/commit/54307ea7c3ced760ee375483a786ec7180798aed,08 Jul 2016,"commit.c: remove print_commit_list()

The helper function tries to offer a way to conveniently show the
last one differently from others, presumably to allow you to say
something like

	A, B, and C.

while iterating over a list that has these three elements.

However, there is only one caller, and it passes the same format
string ""%s\n"" for both the last one and the other ones.  Retire the
helper function and update the caller with a simplified version.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",19,data/crawl/git/hunk_1713.cpp,,,data/crawl/git/old_hunk_1713.cpp,data/crawl/git/new_hunk_1713.cpp,-1,5,,"printf(""%s\n"", oid_to_hex(&tried->item->object.oid));","[""addLog""]","[[], [""printf"", ""%s\\n"", ""oid_to_hex"", ""&tried"", ""item"", ""object"", ""oid""]]",[15084629179516435232],5417,"31 days, 12:00:00"
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1869.cpp,,,data/crawl/git/old_hunk_1869.cpp,data/crawl/git/new_hunk_1869.cpp,-1,14,,"error(_(""It is not possible to %s because you have unmerged files.""),
			me);","[""addLog""]","[[], [""error"", ""_"", ""It"", ""is"", ""not"", ""possible"", ""to"", ""%s"", ""because"", ""you"", ""have"", ""unmerged"", ""files"", ""me""]]",[13059711434511665232],5416,"42 days, 0:00:00"
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1869.cpp,,,data/crawl/git/old_hunk_1869.cpp,data/crawl/git/new_hunk_1869.cpp,-1,12,,"error(_(""Reverting is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Reverting"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[6489760039460019971],5415,"42 days, 0:00:00"
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1869.cpp,,,data/crawl/git/old_hunk_1869.cpp,data/crawl/git/new_hunk_1869.cpp,-1,10,,"error(_(""Pulling is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Pulling"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[17592393791092117608],5414,"42 days, 0:00:00"
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1869.cpp,,,data/crawl/git/old_hunk_1869.cpp,data/crawl/git/new_hunk_1869.cpp,-1,6,,"error(_(""Committing is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Committing"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[9795701741445913241],5413,"42 days, 0:00:00"
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1869.cpp,,,data/crawl/git/old_hunk_1869.cpp,data/crawl/git/new_hunk_1869.cpp,-1,4,,"error(_(""Cherry-picking is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Cherry"", ""picking"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[3484454274539471319],5412,"42 days, 0:00:00"
https://github.com/git/git/commit/8785c425320e9288d13f0218e591a8aa5c57479c,17 Jun 2016,"i18n: advice: internationalize message for conflicts

Mark message for translation telling the user she has conflicts to
resolve. Expose each particular use case, in order to enable translating
entire sentences which would facilitate translating into other
languages.

Change ""Pull"" to lowercase to match other instances. Update test
t5520-pull.sh, that relied on the old error message, to use the new one.

Although we loose in source code conciseness, we would gain better
translations because translators can 1) translate the entire sentence,
including those terms concerning Git (committing, merging, etc) 2) have
leeway to adapt to their languages.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1869.cpp,,,data/crawl/git/old_hunk_1869.cpp,data/crawl/git/new_hunk_1869.cpp,3,8,"error(""%s is not possible because you have unmerged files."", me);","error(_(""Merging is not possible because you have unmerged files.""));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""me""], [""_"", ""Merging""]]",[-1742723759518091246],5411,"42 days, 0:00:00"
https://github.com/git/git/commit/321459439e19517c412cab1cfbb64a2749f272c9,11 Sep 2016,"cat-file: support --textconv/--filters in batch mode

With this patch, --batch can be combined with --textconv or --filters.
For this to work, the input needs to have the form

	<object name><single white space><path>

so that the filters can be chosen appropriately.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_1169.cpp,,,data/crawl/git/old_hunk_1169.cpp,data/crawl/git/new_hunk_1169.cpp,-1,22,,"die(""could not convert '%s' %s"",
					    sha1_to_hex(sha1), data->rest);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""convert"", ""%s"", ""%s"", ""sha1_to_hex"", ""sha1"", ""data"", ""rest""]]",[-9031763742092838266],5410,0:00:00
https://github.com/git/git/commit/8354fa3d4ca50850760ceee9054e3e7a799a4d62,27 Sep 2016,"fsck: handle bad trees like other errors

Instead of dying when fsck hits a malformed tree object, log the error
like any other and continue.  Now fsck can tell the user which tree is
bad, too.

Signed-off-by: David Turner <dturner@twosigma.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/hunk_1086.cpp,,,data/crawl/git/old_hunk_1086.cpp,data/crawl/git/new_hunk_1086.cpp,15,19,"die(_(""empty filename in tree entry for tree""));","strbuf_addstr(err, _(""empty filename in tree entry""));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die"", ""for"", ""tree""], [""strbuf_addstr"", ""err""]]",[-962019501999277057],5409,0:00:00
https://github.com/git/git/commit/ea63b393ec76484690733d6f589c9e67fedbaa78,07 Oct 2016,"pull: make code more similar to the shell script again

When converting the pull command to a builtin, the
require_clean_work_tree() function was renamed and the pull-specific
parts hard-coded.

This makes it impossible to reuse the code, so let's modify the code to
make it more similar to the original shell script again.

Note: when the hint ""Please commit or stash them"" was introduced first,
Git did not have the convention of continuing error messages in lower
case, but now we do have that convention, therefore we reintroduce this
hint down-cased, obeying said convention.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_1079.cpp,,,data/crawl/git/old_hunk_1079.cpp,data/crawl/git/new_hunk_1079.cpp,22,24,"error(_(""Cannot pull with rebase: Your index contains uncommitted changes.""));","error(_(""Cannot %s: Your index contains uncommitted changes.""),
			      _(action));","[""updateContent"", ""addVariable""]","[[""pull"", ""with"", ""rebase""], [""%s"", ""_"", ""action""]]",[7992579998189109005],5408,0:00:00
https://github.com/git/git/commit/ea63b393ec76484690733d6f589c9e67fedbaa78,07 Oct 2016,"pull: make code more similar to the shell script again

When converting the pull command to a builtin, the
require_clean_work_tree() function was renamed and the pull-specific
parts hard-coded.

This makes it impossible to reuse the code, so let's modify the code to
make it more similar to the original shell script again.

Note: when the hint ""Please commit or stash them"" was introduced first,
Git did not have the convention of continuing error messages in lower
case, but now we do have that convention, therefore we reintroduce this
hint down-cased, obeying said convention.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_1079.cpp,,,data/crawl/git/old_hunk_1079.cpp,data/crawl/git/new_hunk_1079.cpp,-1,31,,"error(""%s"", hint);","[""addLog""]","[[], [""error"", ""%s"", ""hint""]]",[16089455691081186812],5407,0:00:00
https://github.com/git/git/commit/8944969c20e80f13965905ecd2ccccac36a34831,18 Jun 2015,"pull --rebase: exit early when the working directory is dirty

Re-implement the behavior introduced by f9189cf (pull --rebase: exit
early when the working directory is dirty, 2008-05-21).

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_3141.cpp,,,data/crawl/git/old_hunk_3141.cpp,data/crawl/git/new_hunk_3141.cpp,-1,60,,"error(_(""Additionally, your index contains uncommitted changes.""));","[""addLog""]","[[], [""error"", ""_"", ""Additionally"", ""your"", ""index"", ""contains"", ""uncommitted"", ""changes""]]",[-4734246095634023902],5406,"238 days, 12:00:00"
https://github.com/git/git/commit/abca927dbef2c310056b8a1a8be5561212b3243a,12 Dec 2011,"introduce credentials API

There are a few places in git that need to get a username
and password credential from the user; the most notable one
is HTTP authentication for smart-http pushing.

Right now the only choices for providing credentials are to
put them plaintext into your ~/.netrc, or to have git prompt
you (either on the terminal or via an askpass program). The
former is not very secure, and the latter is not very
convenient.

Unfortunately, there is no ""always best"" solution for
password management. The details will depend on the tradeoff
you want between security and convenience, as well as how
git can integrate with other security systems (e.g., many
operating systems provide a keychain or password wallet for
single sign-on).

This patch provides an abstract notion of credentials as a
data item, and provides three basic operations:

  - fill (i.e., acquire from external storage or from the
    user)

  - approve (mark a credential as ""working"" for further
    storage)

  - reject (mark a credential as ""not working"", so it can
    be removed from storage)

These operations can be backed by external helper processes
that interact with system- or user-specific secure storage.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",773,data/crawl/git/hunk_4276.cpp,,,data/crawl/git/old_hunk_4276.cpp,data/crawl/git/new_hunk_4276.cpp,-1,116,,"fprintf(fp, ""%s=%s\n"", key, value);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""%s\\n"", ""key"", ""value""]]",[1632670858238606504],5405,"882 days, 12:00:00"
https://github.com/git/git/commit/87cb7845fee4f23434da8b601583dab225dd85d6,17 Oct 2016,"i18n: convert mark error messages for translation

Mark error messages about CRLF for translation.

Update test to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_1009.cpp,,,data/crawl/git/old_hunk_1009.cpp,data/crawl/git/new_hunk_1009.cpp,11,13,"warning(""LF will be replaced by CRLF in %s.\nThe file will have its original line endings in your working directory."", path);","warning(_(""LF will be replaced by CRLF in %s.\n""
				  ""The file will have its original line""
				  "" endings in your working directory.""), path);","[""updateContent"", ""addContent"", ""addVariable""]","[[""\\nThe""], [""_"", ""\\n"", ""The""]]",[-1257377704870587202],5404,0:00:00
https://github.com/git/git/commit/c0246501ed02c3bd1baa0953d5a46a874edc171e,21 Oct 2016,"sequencer: future-proof read_populate_todo()

Over the next commits, we will work on improving the sequencer to the
point where it can process the todo script of an interactive rebase. To
that end, we will need to teach the sequencer to read interactive
rebase's todo file. In preparation, we consolidate all places where
that todo file is needed to call a function that we will later extend.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_1006.cpp,,,data/crawl/git/old_hunk_1006.cpp,data/crawl/git/new_hunk_1006.cpp,20,20,"error(_(""Unusable instruction sheet: %s""),
			git_path_todo_file());","error(_(""Unusable instruction sheet: %s""), todo_file);","[""removeVariable"", ""addVariable""]","[[""git_path_todo_file""], [""todo_file""]]",[210441503875058068],5403,0:00:00
https://github.com/git/git/commit/004fefa754a4aa3a99a5954da9fb805dbba8dbeb,21 Oct 2016,"sequencer: completely revamp the ""todo"" script parsing

When we came up with the ""sequencer"" idea, we really wanted to have
kind of a plumbing equivalent of the interactive rebase. Hence the
choice of words: the ""todo"" script, a ""pick"", etc.

However, when it came time to implement the entire shebang, somehow this
idea got lost and the sequencer was used as working horse for
cherry-pick and revert instead. So as not to interfere with the
interactive rebase, it even uses a separate directory to store its
state.

Furthermore, it also is stupidly strict about the ""todo"" script it
accepts: while it parses commands in a way that was *designed* to be
similar to the interactive rebase, it then goes on to *error out* if the
commands disagree with the overall action (cherry-pick or revert).

Finally, the sequencer code chose to deviate from the interactive rebase
code insofar that when it comes to writing the file with the remaining
commands, it *reformats* the ""todo"" script instead of just writing the
part of the parsed script that were not yet processed. This is not only
unnecessary churn, but might well lose information that is valuable to
the user (i.e. comments after the commands).

Let's just bite the bullet and rewrite the entire parser; the code now
becomes not only more elegant: it allows us to go on and teach the
sequencer how to parse *true* ""todo"" scripts as used by the interactive
rebase itself. In a way, the sequencer is about to grow up to do its
older brother's job. Better.

In particular, we choose to maintain the list of commands in an array
instead of a linked list: this is flexible enough to allow us later on to
even implement rebase -i's reordering of fixup!/squash! commits very
easily (and with a very nice speed bonus, at least on Windows).

While at it, do not stop at the first problem, but list *all* of the
problems. This will help the user when the sequencer will do `rebase
-i`'s work by allowing to address all issues in one go rather than going
back and forth until the todo list is valid.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",284,data/crawl/git/hunk_1004.cpp,,,data/crawl/git/old_hunk_1004.cpp,data/crawl/git/new_hunk_1004.cpp,-1,116,,"error(_(""Cannot revert during a cherry-pick.""));","[""addLog""]","[[], [""error"", ""_"", ""Cannot"", ""revert"", ""during"", ""a"", ""cherry"", ""pick""]]",[21454229367931508845],5402,0:00:00
https://github.com/git/git/commit/901707babc95950a6e6bd0fcea2070f63b704ef4,14 Dec 2016,"i18n: clean.c: match string with git-add--interactive.perl

Change strings for help to match the ones in git-add--interactive.perl.
The strings now represent one entry to translate each rather then two
entries each different only by an ending newline character.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_914.cpp,,,data/crawl/git/old_hunk_914.cpp,data/crawl/git/new_hunk_914.cpp,3,3,"printf_ln(_(""Bye.""));","printf(_(""Bye.\n""));","[""updateLog"", ""updateContent""]","[[""printf_ln""], [""printf"", ""\\n""]]",[369715489477970096],5401,0:00:00
https://github.com/git/git/commit/464931053bba771c670fa52ed6ca2eea72a55109,14 Dec 2016,"i18n: send-email: mark warnings and errors for translation

Mark warnings, errors and other messages for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_905.cpp,,,data/crawl/git/old_hunk_905.cpp,data/crawl/git/new_hunk_905.cpp,9,9,"die(""the editor exited uncleanly, aborting everything"");","(__(""the editor exited uncleanly, aborting everything"");","[""addLog"", ""updateLog""]","[[""die""], [""__""]]",[1937246881258584471],5400,0:00:00
https://github.com/git/git/commit/5a1c824f70ec261f8f9e5e039555fc80301dee0b,27 Dec 2016,"submodule: modernize ok_to_remove_submodule to use argv_array

Instead of constructing the NULL terminated array ourselves, we
should make use of the argv_array infrastructure.

While at it, adapt the error messages to reflect the actual invocation.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_883.cpp,,,data/crawl/git/old_hunk_883.cpp,data/crawl/git/new_hunk_883.cpp,18,19,"die(""'git status --porcelain -uall --ignore-submodules=none' failed in submodule %s"", path);","die(_(""'git status --porcelain -u --ignore-submodules=none' failed in submodule %s""), path);","[""updateContent"", ""addVariable""]","[[""uall""], [""_"", ""u""]]",[-6468752326236583768],5399,0:00:00
https://github.com/git/git/commit/56dc3ab04bf0f7bb8c73ebbba47469bdf8be8ac4,09 Jan 2017,"sequencer (rebase -i): implement the 'edit' command

This patch is a straight-forward reimplementation of the `edit`
operation of the interactive rebase command.

Well, not *quite* straight-forward: when stopping, the `edit`
command wants to write the `patch` file (which is not only the
patch, but includes the commit message and author information). To
that end, this patch requires the earlier work that taught the
log-tree machinery to respect the `file` setting of
rev_info->diffopt to write to a file stream different than stdout.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",117,data/crawl/git/hunk_859.cpp,,,data/crawl/git/old_hunk_859.cpp,data/crawl/git/new_hunk_859.cpp,-1,50,,"error(_(""cannot read HEAD""));","[""addLog""]","[[], [""error"", ""_"", ""cannot"", ""read"", ""HEAD""]]",[8979519521310852658],5398,0:00:00
https://github.com/git/git/commit/d048a96ee9bec968be0bdc9c43ffce61169545be,10 Nov 2007,"print warning/error/fatal messages in one shot

Not doing so is likely to create a messed up display when sent over the
sideband protocol.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_7807.cpp,,,data/crawl/git/old_hunk_7807.cpp,data/crawl/git/new_hunk_7807.cpp,3,5,"fputs(prefix, stderr);","fprintf(stderr, ""%s%s\n"", prefix, msg);","[""updateLog"", ""addContent"", ""addVariable""]","[[""fputs""], [""fprintf"", ""%s%s\\n"", ""msg""]]",[8681917895983381239],5397,"1675 days, 0:00:00"
https://github.com/git/git/commit/f6371f9210418f1beabc85b097e2a3470aeeb54d,15 Jan 2017,"sha1_file: add read_loose_object() function

It's surprisingly hard to ask the sha1_file code to open a
_specific_ incarnation of a loose object. Most of the
functions take a sha1, and loop over the various object
types (packed versus loose) and locations (local versus
alternates) at a low level.

However, some tools like fsck need to look at a specific
file. This patch gives them a function they can use to open
the loose object at a given path.

The implementation unfortunately ends up repeating bits of
related functions, but there's not a good way around it
without some major refactoring of the whole sha1_file stack.
We need to mmap the specific file, then partially read the
zlib stream to know whether we're streaming or not, and then
finally either stream it or copy the data to a buffer.

We can do that by assembling some of the more arcane
internal sha1_file functions, but we end up having to
essentially reimplement unpack_sha1_file(), along with the
streaming bits of check_sha1_signature().

Still, most of the ugliness is contained in the new
function, and the interface is clean enough that it may be
reusable (though it seems unlikely anything but git-fsck
would care about opening a specific file).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/hunk_837.cpp,,,data/crawl/git/old_hunk_837.cpp,data/crawl/git/new_hunk_837.cpp,-1,101,,"error(""sha1 mismatch for %s (expected %s)"", path,
			      sha1_to_hex(expected_sha1));","[""addLog""]","[[], [""error"", ""sha1"", ""mismatch"", ""for"", ""%s"", ""expected"", ""%s"", ""path"", ""sha1_to_hex"", ""expected_sha1""]]",[20694352320631420898],5396,0:00:00
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/hunk_815.cpp,,,data/crawl/git/old_hunk_815.cpp,data/crawl/git/new_hunk_815.cpp,-1,318,,"die(""could not obtain raw diff"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""obtain"", ""raw"", ""diff""]]",[-2312605055700372382],5395,0:00:00
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/hunk_815.cpp,,,data/crawl/git/old_hunk_815.cpp,data/crawl/git/new_hunk_815.cpp,-1,60,,"error(""expected object ID, got '%s'"", p + 1);","[""addLog""]","[[], [""error"", ""expected"", ""object"", ""ID"", ""got"", ""%s"", ""p"", ""1""]]",[7055481079999411023],5394,0:00:00
https://github.com/git/git/commit/e6dbffa67b8e4c463a8fe18e8599b8623d7f0485,05 Oct 2012,"peel_ref: do not return a null sha1

The idea of the peel_ref function is to dereference tag
objects recursively until we hit a non-tag, and return the
sha1. Conceptually, it should return 0 if it is successful
(and fill in the sha1), or -1 if there was nothing to peel.

However, the current behavior is much more confusing. For a
regular loose ref, the behavior is as described above. But
there is an optimization to reuse the peeled-ref value for a
ref that came from a packed-refs file. If we have such a
ref, we return its peeled value, even if that peeled value
is null (indicating that we know the ref definitely does
_not_ peel).

It might seem like such information is useful to the caller,
who would then know not to bother loading and trying to peel
the object. Except that they should not bother loading and
trying to peel the object _anyway_, because that fallback is
already handled by peel_ref. In other words, the whole point
of calling this function is that it handles those details
internally, and you either get a sha1, or you know that it
is not peel-able.

This patch catches the null sha1 case internally and
converts it into a -1 return value (i.e., there is nothing
to peel). This simplifies callers, which do not need to
bother checking themselves.

Two callers are worth noting:

  - in pack-objects, a comment indicates that there is a
    difference between non-peelable tags and unannotated
    tags. But that is not the case (before or after this
    patch). Whether you get a null sha1 has to do with
    internal details of how peel_ref operated.

  - in show-ref, if peel_ref returns a failure, the caller
    tries to decide whether to try peeling manually based on
    whether the REF_ISPACKED flag is set. But this doesn't
    make any sense. If the flag is set, that does not
    necessarily mean the ref came from a packed-refs file
    with the ""peeled"" extension. But it doesn't matter,
    because even if it didn't, there's no point in trying to
    peel it ourselves, as peel_ref would already have done
    so. In other words, the fallback peeling is guaranteed
    to fail.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_4063.cpp,,,data/crawl/git/old_hunk_4063.cpp,data/crawl/git/new_hunk_4063.cpp,20,-1,"printf(""%s %s^{}\n"", hex, refname);",,"[""removeLog""]","[[""printf"", ""%s"", ""%s"", ""\\n"", ""hex"", ""refname""], []]",[-8415771278981456964],5393,"785 days, 12:00:00"
https://github.com/git/git/commit/3d415425c7b6ca0d2243a4589672369e7a02fc2c,25 Jan 2017,"unpack-trees: support super-prefix option

In the future we want to support working tree operations within submodules,
e.g. ""git checkout --recurse-submodules"", which will update the submodule
to the commit as recorded in its superproject. In the submodule the
unpack-tree operation is carried out as usual, but the reporting to the
user needs to prefix any path with the superproject. The mechanism for
this is the super-prefix. (see 74866d757, git: make super-prefix option)

Add support for the super-prefix option for commands that unpack trees
by wrapping any path output in unpacking trees in the newly introduced
super_prefixed function. This new function prefixes any path with the
super-prefix if there is one.  Assuming the submodule case doesn't happen
in the majority of the cases, we'd want to have a fast behavior for no
super prefix, i.e. no reallocation/copying, but just returning path.

Another aspect of introducing the `super_prefixed` function is to consider
who owns the memory and if this is the right place where the path gets
modified. As the super prefix ought to change the output behavior only and
not the actual unpack tree part, it is fine to be that late in the line.
As we get passed in 'const char *path', we cannot change the path itself,
which means in case of a super prefix we have to copy over the path.
We need two static buffers in that function as the error messages
contain at most two paths.

For testing purposes enable it in read-tree, which has no output
of paths other than an unpack-trees.c. These are all converted in
this patch.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_803.cpp,,,data/crawl/git/old_hunk_803.cpp,data/crawl/git/new_hunk_803.cpp,3,3,"error(ERRORMSG(o, e), path.buf);","error(ERRORMSG(o, e), super_prefixed(path.buf));","[""addVariable""]","[[], [""super_prefixed""]]",[6677385002893205341],5392,0:00:00
https://github.com/git/git/commit/a93bedada88dc15b0143708e1cb87c8fe9b9c705,09 Jun 2015,"setup: add gentle version of read_gitfile

read_gitfile will die on most error cases. This makes it unsuitable
for speculative calls. Extract the core logic and provide a gentle
version that returns NULL on failure.

The first usecase of the new gentle version will be to probe for
submodules during git clean.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/hunk_3157.cpp,,,data/crawl/git/old_hunk_3157.cpp,data/crawl/git/new_hunk_3157.cpp,31,-1,"die(""No path in gitfile: %s"", path);",,"[""removeLog""]","[[""die"", ""No"", ""path"", ""in"", ""gitfile"", ""%s"", ""path""], []]",[-10252895552164965996],5391,"298 days, 12:00:00"
https://github.com/git/git/commit/a93bedada88dc15b0143708e1cb87c8fe9b9c705,09 Jun 2015,"setup: add gentle version of read_gitfile

read_gitfile will die on most error cases. This makes it unsuitable
for speculative calls. Extract the core logic and provide a gentle
version that returns NULL on failure.

The first usecase of the new gentle version will be to probe for
submodules during git clean.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/hunk_3157.cpp,,,data/crawl/git/old_hunk_3157.cpp,data/crawl/git/new_hunk_3157.cpp,27,-1,"die(""Invalid gitfile format: %s"", path);",,"[""removeLog""]","[[""die"", ""Invalid"", ""gitfile"", ""format"", ""%s"", ""path""], []]",[-833715539263737418],5390,"298 days, 12:00:00"
https://github.com/git/git/commit/a93bedada88dc15b0143708e1cb87c8fe9b9c705,09 Jun 2015,"setup: add gentle version of read_gitfile

read_gitfile will die on most error cases. This makes it unsuitable
for speculative calls. Extract the core logic and provide a gentle
version that returns NULL on failure.

The first usecase of the new gentle version will be to probe for
submodules during git clean.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/hunk_3157.cpp,,,data/crawl/git/old_hunk_3157.cpp,data/crawl/git/new_hunk_3157.cpp,24,-1,"die(""Error reading %s"", path);",,"[""removeLog""]","[[""die"", ""Error"", ""reading"", ""%s"", ""path""], []]",[-6728088579270477266],5389,"298 days, 12:00:00"
https://github.com/git/git/commit/a93bedada88dc15b0143708e1cb87c8fe9b9c705,09 Jun 2015,"setup: add gentle version of read_gitfile

read_gitfile will die on most error cases. This makes it unsuitable
for speculative calls. Extract the core logic and provide a gentle
version that returns NULL on failure.

The first usecase of the new gentle version will be to probe for
submodules during git clean.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/hunk_3157.cpp,,,data/crawl/git/old_hunk_3157.cpp,data/crawl/git/new_hunk_3157.cpp,19,-1,"die_errno(""Error opening '%s'"", path);",,"[""removeLog""]","[[""die_errno"", ""Error"", ""opening"", ""%s"", ""path""], []]",[633957807135652445],5388,"298 days, 12:00:00"
https://github.com/git/git/commit/921bdd96afc17ca055af261066eabdf026cb2195,15 Jun 2015,"setup: sanity check file size in read_gitfile_gently

read_gitfile_gently will allocate a buffer to fit the entire file that
should be read. Add a sanity check of the file size before opening to
avoid allocating a potentially huge amount of memory if we come across
a large file that someone happened to name "".git"". The limit is set to
a sufficiently unreasonable size that should never be exceeded by a
genuine .git file.

Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_3153.cpp,,,data/crawl/git/old_hunk_3153.cpp,data/crawl/git/new_hunk_3153.cpp,-1,4,,"die(""Too large to be a .git file: '%s'"", path);","[""addLog""]","[[], [""die"", ""Too"", ""large"", ""to"", ""be"", ""a"", ""git"", ""file"", ""%s"", ""path""]]",[-13302403402236549424],5387,"295 days, 12:00:00"
https://github.com/git/git/commit/a93bedada88dc15b0143708e1cb87c8fe9b9c705,09 Jun 2015,"setup: add gentle version of read_gitfile

read_gitfile will die on most error cases. This makes it unsuitable
for speculative calls. Extract the core logic and provide a gentle
version that returns NULL on failure.

The first usecase of the new gentle version will be to probe for
submodules during git clean.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Erik Elfström <erik.elfstrom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",95,data/crawl/git/hunk_3158.cpp,,,data/crawl/git/old_hunk_3158.cpp,data/crawl/git/new_hunk_3158.cpp,-1,25,,"die_errno(""Error opening '%s'"", path);","[""addLog""]","[[], [""die_errno"", ""Error"", ""opening"", ""%s"", ""path""]]",[-633957807135652445],5386,"298 days, 12:00:00"
https://github.com/git/git/commit/f6f858614003a3da794385cefdbddf00b85f7501,12 Dec 2016,"submodule: add absorb-git-dir function

When a submodule has its git dir inside the working dir, the submodule
support for checkout that we plan to add in a later patch will fail.

Add functionality to migrate the git directory to be absorbed
into the superprojects git directory.

The newly added code in this patch is structured such that other areas of
Git can also make use of it. The code in the submodule--helper is a mere
wrapper and option parser for the function
`absorb_git_dir_into_superproject`, that takes care of embedding the
submodules git directory into the superprojects git dir. That function
makes use of the more abstract function for this use case
`relocate_gitdir`, which can be used by e.g. the worktree code eventually
to move around a git directory.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",283,data/crawl/git/hunk_921.cpp,,,data/crawl/git/old_hunk_921.cpp,data/crawl/git/new_hunk_921.cpp,-1,32,,"die(_(""could not create directory '%s'""), new_git_dir);","[""addLog""]","[[], [""die"", ""_"", ""could"", ""not"", ""create"", ""directory"", ""%s"", ""new_git_dir""]]",[11745325356097174729],5385,"22 days, 12:00:00"
https://github.com/git/git/commit/f6f858614003a3da794385cefdbddf00b85f7501,12 Dec 2016,"submodule: add absorb-git-dir function

When a submodule has its git dir inside the working dir, the submodule
support for checkout that we plan to add in a later patch will fail.

Add functionality to migrate the git directory to be absorbed
into the superprojects git directory.

The newly added code in this patch is structured such that other areas of
Git can also make use of it. The code in the submodule--helper is a mere
wrapper and option parser for the function
`absorb_git_dir_into_superproject`, that takes care of embedding the
submodules git directory into the superprojects git dir. That function
makes use of the more abstract function for this use case
`relocate_gitdir`, which can be used by e.g. the worktree code eventually
to move around a git directory.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",283,data/crawl/git/hunk_921.cpp,,,data/crawl/git/old_hunk_921.cpp,data/crawl/git/new_hunk_921.cpp,-1,28,,"die(_(""could not lookup name for submodule '%s'""), path);","[""addLog""]","[[], [""die"", ""_"", ""could"", ""not"", ""lookup"", ""name"", ""for"", ""submodule"", ""%s"", ""path""]]",[-4914658082372174174],5384,"22 days, 12:00:00"
https://github.com/git/git/commit/ea194895326d10f6e255eee05ac25ab5ae096dd9,24 Mar 2017,"name-hash: add test-lazy-init-name-hash

Add t/helper/test-lazy-init-name-hash.c test code
to demonstrate performance times for lazy_init_name_hash()
using the original single-threaded and the new multi-threaded
code paths.

Includes a --dump option to dump the created hashmaps to
stdout.  You can use this to run both code paths and
confirm that they generate the same hashmaps.

Includes a --analyze option to analyze performance of both
code paths over a range of index sizes to help you find a
lower bound for the LAZY_THREAD_COST in name-hash.c.
For example, passing ""-a 4000"" will set ""istate.cache_nr""
to 4000 and then try the multi-threaded code -- probably
giving 2 threads with 2000 entries each.  It will then
run both the single-threaded (1x4000) and the multi-threaded
(2x2000) and compare the times.  It will then repeat the
test with 8000, 12000, and etc. so that you can see the
cross over.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",266,data/crawl/git/hunk_747.cpp,,,data/crawl/git/old_hunk_747.cpp,data/crawl/git/new_hunk_747.cpp,-1,233,,"die(""cannot combine dump, perf, or analyze"");","[""addLog""]","[[], [""die"", ""cannot"", ""combine"", ""dump"", ""perf"", ""or"", ""analyze""]]",[5285639163730376403],5383,0:00:00
https://github.com/git/git/commit/ea194895326d10f6e255eee05ac25ab5ae096dd9,24 Mar 2017,"name-hash: add test-lazy-init-name-hash

Add t/helper/test-lazy-init-name-hash.c test code
to demonstrate performance times for lazy_init_name_hash()
using the original single-threaded and the new multi-threaded
code paths.

Includes a --dump option to dump the created hashmaps to
stdout.  You can use this to run both code paths and
confirm that they generate the same hashmaps.

Includes a --analyze option to analyze performance of both
code paths over a range of index sizes to help you find a
lower bound for the LAZY_THREAD_COST in name-hash.c.
For example, passing ""-a 4000"" will set ""istate.cache_nr""
to 4000 and then try the multi-threaded code -- probably
giving 2 threads with 2000 entries each.  It will then
run both the single-threaded (1x4000) and the multi-threaded
(2x2000) and compare the times.  It will then repeat the
test with 8000, 12000, and etc. so that you can see the
cross over.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",266,data/crawl/git/hunk_747.cpp,,,data/crawl/git/old_hunk_747.cpp,data/crawl/git/new_hunk_747.cpp,-1,79,,"die(""non-threaded code path used"");","[""addLog""]","[[], [""die"", ""non"", ""threaded"", ""code"", ""path"", ""used""]]",[15427955451232325421],5382,0:00:00
https://github.com/git/git/commit/98718242cfd18f106dfcd7663282fb9906fd38a5,24 Mar 2017,"fast-import: use xsnprintf for formatting headers

The stream_blob() function checks the return value of
snprintf and dies. This is more simply done with
xsnprintf (and matches the similar call in store_object).

The message the user would get is less specific, but since
the point is that this _shouldn't_ ever happen, that's OK.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_744.cpp,,,data/crawl/git/old_hunk_744.cpp,data/crawl/git/new_hunk_744.cpp,5,-1,"die(""impossibly large object header"");",,"[""removeLog""]","[[""die"", ""impossibly"", ""large"", ""object"", ""header""], []]",[28692390870752117574],5381,0:00:00
https://github.com/git/git/commit/fcecf0b968b5e262200426ccf1d0b82495c261fe,27 Mar 2017,"submodule.c: port is_submodule_modified to use porcelain 2

Migrate 'is_submodule_modified' to the new porcelain format of
git-status. This conversion attempts to convert faithfully, i.e.
the behavior ought to be exactly the same.

As the output in the parsing only distinguishes between untracked files
and the rest, this is easy to port to the new format, as we only
need to identify untracked files and the rest is handled in the ""else""
case.

untracked files are indicated by only a single question mark instead of
two question marks, so the conversion is easy.

Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_741.cpp,,,data/crawl/git/old_hunk_741.cpp,data/crawl/git/new_hunk_741.cpp,3,3,"die(""'git status --porcelain' failed in submodule %s"", path);","die(""'git status --porcelain=2' failed in submodule %s"", path);","[""updateContent""]","[[], [""2""]]",[6400019251],5380,0:00:00
https://github.com/git/git/commit/a5c1efd693a09bd7d058e1370869e061f94b61ed,27 Mar 2017,"files-backend: move ""logs/"" out of TMP_RENAMED_LOG

This makes reflog path building consistent, always in the form of

    strbuf_git_path(sb, ""logs/%s"", refname);

It reduces the mental workload a bit in the next patch when that
function call is converted.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_732.cpp,,,data/crawl/git/old_hunk_732.cpp,data/crawl/git/new_hunk_732.cpp,3,3,"error(""unable to restore logfile %s from ""TMP_RENAMED_LOG"": %s"",
			oldrefname, strerror(errno));","error(""unable to restore logfile %s from logs/""TMP_RENAMED_LOG"": %s"",
			oldrefname, strerror(errno));","[""updateContent""]","[[], [""logs/""]]",[-2243997909842769431],5379,0:00:00
https://github.com/git/git/commit/f57f37e2e1bf11ab4cdfd221ad47e961ba9353a0,27 Mar 2017,"files-backend: remove the use of git_path()

Given $GIT_DIR and $GIT_COMMON_DIR, files-backend is now in charge of
deciding what goes where (*). The end goal is to pass $GIT_DIR only. A
refs ""view"" of a linked worktree is a logical ref store that combines
two files backends together.

(*) Not entirely true since strbuf_git_path_submodule() still does path
translation underneath. But that's for another patch.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_730.cpp,,,data/crawl/git/old_hunk_730.cpp,data/crawl/git/new_hunk_730.cpp,-1,12,,"die(""BUG: unknown ref type %d of ref %s"",
		    ref_type(refname), refname);","[""addLog""]","[[], [""die"", ""BUG"", ""unknown"", ""ref"", ""type"", ""%d"", ""of"", ""ref"", ""%s"", ""ref_type"", ""refname"", ""refname""]]",[14894807395794975751],5378,0:00:00
https://github.com/git/git/commit/00eebe351c4b4626a7b8e0b2dc4b7a172f3fd8d9,09 Sep 2016,"refs: create a base class ""ref_store"" for files_ref_store

We want ref_stores to be polymorphic, so invent a base class of which
files_ref_store is a derived class. For now there is exactly one
ref_store for the main repository and one for any submodules whose
references have been accessed.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",348,data/crawl/git/hunk_1178.cpp,,,data/crawl/git/old_hunk_1178.cpp,data/crawl/git/new_hunk_1178.cpp,-1,24,,"die(""BUG: ref_store for submodule '%s' initialized twice"",
			    submodule);","[""addLog""]","[[], [""die"", ""BUG"", ""ref_store"", ""for"", ""submodule"", ""%s"", ""initialized"", ""twice"", ""submodule""]]",[-5567509895110398338],5377,"99 days, 12:00:00"
https://github.com/git/git/commit/80f2a6097c403234892b884a21810411e5837853,14 Apr 2017,"t/helper: add test-ref-store to test ref-store functions

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",279,data/crawl/git/hunk_670.cpp,,,data/crawl/git/old_hunk_670.cpp,data/crawl/git/new_hunk_670.cpp,-1,221,,"die(""not sha-1"");","[""addLog""]","[[], [""die"", ""not"", ""sha"", ""1""]]",[2966839916460251362],5376,0:00:00
https://github.com/git/git/commit/3bc581b9406e1e9a3f879d379106ee1e3bc48f5c,20 Jun 2016,"refs: introduce an iterator interface

Currently, the API for iterating over references is via a family of
for_each_ref()-type functions that invoke a callback function for each
selected reference. All of these eventually call do_for_each_ref(),
which knows how to do one thing: iterate in parallel through two
ref_caches, one for loose and one for packed refs, giving loose
references precedence over packed refs. This is rather complicated code,
and is quite specialized to the files backend. It also requires callers
to encapsulate their work into a callback function, which often means
that they have to define and use a ""cb_data"" struct to manage their
context.

The current design is already bursting at the seams, and will become
even more awkward in the upcoming world of multiple reference storage
backends:

* Per-worktree vs. shared references are currently handled via a kludge
  in git_path() rather than iterating over each part of the reference
  namespace separately and merging the results. This kludge will cease
  to work when we have multiple reference storage backends.

* The current scheme is inflexible. What if we sometimes want to bypass
  the ref_cache, or use it only for packed or only for loose refs? What
  if we want to store symbolic refs in one type of storage backend and
  non-symbolic ones in another?

In the future, each reference backend will need to define its own way of
iterating over references. The crux of the problem with the current
design is that it is impossible to compose for_each_ref()-style
iterations, because the flow of control is owned by the for_each_ref()
function. There is nothing that a caller can do but iterate through all
references in a single burst, so there is no way for it to interleave
references from multiple backends and present the result to the rest of
the world as a single compound backend.

This commit introduces a new iteration primitive for references: a
ref_iterator. A ref_iterator is a polymorphic object that a reference
storage backend can be asked to instantiate. There are three functions
that can be applied to a ref_iterator:

* ref_iterator_advance(): move to the next reference in the iteration
* ref_iterator_abort(): end the iteration before it is exhausted
* ref_iterator_peel(): peel the reference currently being looked at

Iterating using a ref_iterator leaves the flow of control in the hands
of the caller, which means that ref_iterators from multiple
sources (e.g., loose and packed refs) can be composed and presented to
the world as a single compound ref_iterator.

It also means that the backend code for implementing reference iteration
will sometimes be more complicated. For example, the
cache_ref_iterator (which iterates over a ref_cache) can't use the C
stack to recurse; instead, it must manage its own stack internally as
explicit data structures. There is also a lot of boilerplate connected
with object-oriented programming in C.

Eventually, end-user callers will be able to be written in a more
natural way—managing their own flow of control rather than having to
work via callbacks. Since there will only be a few reference backends
but there are many consumers of this API, this is a good tradeoff.

More importantly, we gain composability, and especially the possibility
of writing interchangeable parts that can work with any ref_iterator.

For example, merge_ref_iterator implements a generic way of merging the
contents of any two ref_iterators. It is used to merge loose + packed
refs as part of the implementation of the files_ref_iterator. But it
will also be possible to use it to merge other pairs of reference
sources (e.g., per-worktree vs. shared refs).

Another example is prefix_ref_iterator, which can be used to trim a
prefix off the front of reference names before presenting them to the
caller (e.g., ""refs/heads/master"" -> ""master"").

In this patch, we introduce the iterator abstraction and many utilities,
and implement a reference iterator for the files ref storage backend.
(I've written several other obvious utilities, for example a generic way
to filter references being iterated over. These will probably be useful
in the future. But they are not needed for this patch series, so I am
not including them at this time.)

In a moment we will rewrite do_for_each_ref() to work via reference
iterators (allowing some special-purpose code to be discarded), and do
something similar for reflogs. In future patch series, we will expose
the ref_iterator abstraction in the public refs API so that callers can
use it directly.

Implementation note: I tried abstracting this a layer further to allow
generic iterators (over arbitrary types of objects) and generic
utilities like a generic merge_iterator. But the implementation in C was
very cumbersome, involving (in my opinion) too much boilerplate and too
much unsafe casting, some of which would have had to be done on the
caller side. However, I did put a few iterator-related constants in a
top-level header file, iterator.h, as they will be useful in a moment to
implement iteration over directory trees and possibly other types of
iterators in the future.

Signed-off-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",916,data/crawl/git/hunk_1811.cpp,,,data/crawl/git/old_hunk_1811.cpp,data/crawl/git/new_hunk_1811.cpp,-1,105,,"die(""BUG: peel called before advance for cache iterator"");","[""addLog""]","[[], [""die"", ""BUG"", ""peel"", ""called"", ""before"", ""advance"", ""for"", ""cache"", ""iterator""]]",[5961038565736824288],5375,"150 days, 12:00:00"
https://github.com/git/git/commit/202a56a92414a2142cd92f0c3fa89bfb29149388,12 Dec 2011,"is_dup_ref(): extract function from sort_ref_array()

Giving the function a name makes the code easier to understand.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_4262.cpp,,,data/crawl/git/old_hunk_4262.cpp,data/crawl/git/new_hunk_4262.cpp,-1,15,,"warning(""Duplicated ref: %s"", ref1->name);","[""addLog""]","[[], [""warning"", ""Duplicated"", ""ref"", ""%s"", ""ref1"", ""name""]]",[-17155287839272663815],5374,"976 days, 12:00:00"
https://github.com/git/git/commit/202a56a92414a2142cd92f0c3fa89bfb29149388,12 Dec 2011,"is_dup_ref(): extract function from sort_ref_array()

Giving the function a name makes the code easier to understand.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_4262.cpp,,,data/crawl/git/old_hunk_4262.cpp,data/crawl/git/new_hunk_4262.cpp,-1,13,,"die(""Duplicated ref, and SHA1s don't match: %s"",
			    ref1->name);","[""addLog""]","[[], [""die"", ""Duplicated"", ""ref"", ""and"", ""SHA1s"", ""don"", ""t"", ""match"", ""%s"", ""ref1"", ""name""]]",[-859712450994717975],5373,"976 days, 12:00:00"
https://github.com/git/git/commit/1710fbafb699a651243ea1af9d21a8b571a66965,17 Apr 2017,"commit_packed_refs(): use reference iteration

Use reference iteration rather than do_for_each_entry_in_dir() in the
definition of commit_packed_refs().

Note that an internal consistency check that was previously done in
`write_packed_entry_fn()` is not there anymore. This is actually an
improvement:

The old error message was emitted when there is an entry in the
packed-ref cache that is not `REF_KNOWS_PEELED`, and when we attempted
to peel the reference, the result was `PEEL_INVALID`,
`PEEL_IS_SYMREF`, or `PEEL_BROKEN`. Since a packed ref cannot be a
symref, `PEEL_IS_SYMREF` and `PEEL_BROKEN` can be ruled out. So we're
left with `PEEL_INVALID`.

An entry without `REF_KNOWS_PEELED` can get into the packed-refs cache
in the following two ways:

* The reference was read from a `packed-refs` file that didn't have
  the `fully-peeled` attribute. In that case, we *don't want* to emit
  an error, because the broken value is presumably a stale value of
  the reference that is now masked by a loose version of the same
  reference (which we just don't happen to be packing this time). This
  is a perfectly legitimate situation and doesn't indicate that the
  repository is corrupt. The old code incorrectly emits an error
  message in this case. (It was probably never reported as a bug
  because this scenario is rare.)

* The reference was a loose reference that was just added to the
  packed ref cache by `files_packed_refs()` via
  `pack_if_possible_fn()` in preparation for being packed. The latter
  function refuses to pack a reference for which
  `entry_resolves_to_object()` returns false, and otherwise calls
  `peel_entry()` itself and checks the return value. So an entry added
  this way should always have `REF_KNOWS_PEELED` and shouldn't trigger
  the error message in either the old code or the new.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_660.cpp,,,data/crawl/git/old_hunk_660.cpp,data/crawl/git/new_hunk_660.cpp,-1,14,,"die(""error while iterating over references"");","[""addLog""]","[[], [""die"", ""error"", ""while"", ""iterating"", ""over"", ""references""]]",[-5207743151804316394],5372,0:00:00
https://github.com/git/git/commit/a77f106c7837faf6a712ea3ac720f5c4fa2feb07,12 Jul 2013,"run-command: dup_devnull(): guard against syscalls failing

dup_devnull() did not check the return values of open() and dup2().
Fix this omission.

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_3520.cpp,,,data/crawl/git/old_hunk_3520.cpp,data/crawl/git/new_hunk_3520.cpp,-1,4,,"die_errno(_(""open /dev/null failed""));","[""addLog""]","[[], [""die_errno"", ""_"", ""open"", ""/dev/null"", ""failed""]]",[-24460229174763983806],5371,"689 days, 12:00:00"
https://github.com/git/git/commit/45afb1ca9c28855096c94926e5b16dfbcde7381f,21 Apr 2017,"run-command: block signals between fork and execve

Signal handlers of the parent firing in the forked child may
have unintended side effects.  Rather than auditing every signal
handler we have and will ever have, block signals while forking
and restore default signal handlers in the child before execve.

Restoring default signal handlers is required because
execve does not unblock signals, it only restores default
signal handlers.  So we must restore them with sigprocmask
before execve, leaving a window when signal handlers
we control can fire in the child.  Continue ignoring
ignored signals, but reset the rest to defaults.

Similarly, disable pthread cancellation to future-proof our code
in case we start using cancellation; as cancellation is
implemented with signals in glibc.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/hunk_643.cpp,,,data/crawl/git/old_hunk_643.cpp,data/crawl/git/new_hunk_643.cpp,-1,42,,"die_errno(""sigprocmask"");","[""addLog""]","[[], [""die_errno"", ""sigprocmask""]]",[-7126620251742063278],5370,0:00:00
https://github.com/git/git/commit/cb71f8bdb5a105cd5b66142b887989d9addc82d0,24 Apr 2017,"PRItime: introduce a new ""printf format"" for timestamps

Currently, Git's source code treats all timestamps as if they were
unsigned longs. Therefore, it is okay to write ""%lu"" when printing them.

There is a substantial problem with that, though: at least on Windows,
time_t is *larger* than unsigned long, and hence we will want to switch
away from the ill-specified `unsigned long` data type.

So let's introduce the pseudo format ""PRItime"" (currently simply being
defined to ""lu"") to make it easier to change the data type used for
timestamps.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_635.cpp,,,data/crawl/git/old_hunk_635.cpp,data/crawl/git/new_hunk_635.cpp,7,7,"printf(""committer-time %lu\n"", ci.committer_time);","printf(""committer-time %""PRItime""\n"", ci.committer_time);","[""updateContent"", ""addContent"", ""addVariable""]","[[""%lu\\n""], [""%"", ""PRItime"", ""\\n""]]",[4633996502033775948],5369,0:00:00
https://github.com/git/git/commit/1e65a982da0e9dd4eac440e82392a8b7c72b3def,27 Apr 2017,"date.c: abort if the system time cannot handle one of our timestamps

We are about to switch to a new data type for time stamps that is
definitely not smaller or equal, but larger or equal to time_t.

So before using the system functions to process or format timestamps,
let's make extra certain that they can handle what we feed them.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_622.cpp,,,data/crawl/git/old_hunk_622.cpp,data/crawl/git/new_hunk_622.cpp,-1,4,,"die(""Timestamp too large for this system: %""PRItime, time);","[""addLog""]","[[], [""die"", ""Timestamp"", ""too"", ""large"", ""for"", ""this"", ""system"", ""%"", ""PRItime"", ""time""]]",[200632367396451312],5368,0:00:00
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2473.cpp,,,data/crawl/git/old_hunk_2473.cpp,data/crawl/git/new_hunk_2473.cpp,2,2,"error(_(""Could not read object %s""),
					    sha1_to_hex(t->tagged->sha1));","error(_(""Could not read object %s""),
					    oid_to_hex(&t->tagged->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""t"", ""sha1""], [""oid_to_hex"", ""&t"", ""oid""]]",[11703065645877246527],5367,"264 days, 12:00:00"
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_542.cpp,,,data/crawl/git/old_hunk_542.cpp,data/crawl/git/new_hunk_542.cpp,6,6,"die(""object %s inconsistent object length (%lu vs %lu)"",
			    sha1_to_hex(src_entry->idx.sha1), sz, src_size);","die(""object %s inconsistent object length (%lu vs %lu)"",
			    oid_to_hex(&src_entry->idx.oid), sz,
			    src_size);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""src_entry"", ""sha1""], [""oid_to_hex"", ""&src_entry"", ""oid""]]",[12587417691150820885],5366,0:00:00
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_541.cpp,,,data/crawl/git/old_hunk_541.cpp,data/crawl/git/new_hunk_541.cpp,9,10,"die(""object %s inconsistent object length (%lu vs %lu)"",
			    sha1_to_hex(trg_entry->idx.sha1), sz, trg_size);","die(""object %s inconsistent object length (%lu vs %lu)"",
			    oid_to_hex(&trg_entry->idx.oid), sz,
			    trg_size);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""trg_entry"", ""sha1""], [""oid_to_hex"", ""&trg_entry"", ""oid""]]",[8730258918289841387],5365,0:00:00
https://github.com/git/git/commit/b8607f35b180a00b3f3240ff7d26d034a83fb23a,02 May 2017,"bundle: convert to struct object_id

Convert the bundle code, plus the sole external user of struct
ref_list_entry, to use struct object_id.  Include cache.h from within
bundle.h to provide the definition.  Convert some of the hash parsing
code to use parse_oid_hex to avoid needing to hard-code constant values.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_609.cpp,,,data/crawl/git/old_hunk_609.cpp,data/crawl/git/new_hunk_609.cpp,11,11,"error(""%s %s"", sha1_to_hex(e->sha1), e->name);","error(""%s %s"", oid_to_hex(&e->oid), e->name);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1"", ""e""], [""oid_to_hex"", ""&e"", ""oid""]]",[11703065647797252321],5364,"3 days, 0:00:00"
https://github.com/git/git/commit/bdab972153a73815e04e9699406433e409ed28ab,10 May 2017,"submodule: add die_in_unpopulated_submodule function

Currently 'git add' is the only command which dies when launched from an
unpopulated submodule (the place-holder directory for a submodule which
hasn't been checked out).  This is triggered implicitly by passing the
PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag to 'parse_pathspec()'.

Instead make this desire more explicit by creating a function
'die_in_unpopulated_submodule()' which dies if the provided 'prefix' has
a leading path component which matches a submodule in the the index.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_492.cpp,,,data/crawl/git/old_hunk_492.cpp,data/crawl/git/new_hunk_492.cpp,19,-1,"die(_(""Pathspec '%s' is in submodule '%.*s'""),
		    item->original, ce_len, ce->name);",,"[""removeLog""]","[[""die"", ""_"", ""Pathspec"", ""%s"", ""is"", ""in"", ""submodule"", ""%"", ""*s"", ""item"", ""original"", ""ce_len"", ""ce"", ""name""], []]",[30603480383882539853],5363,"1 day, 0:00:00"
https://github.com/git/git/commit/edcc85814c87ebd7f3b1b7d3979fac3dfb84d308,17 Oct 2016,"convert: add filter.<driver>.process option

Git's clean/smudge mechanism invokes an external filter process for
every single blob that is affected by a filter. If Git filters a lot of
blobs then the startup time of the external filter processes can become
a significant part of the overall Git execution time.

In a preliminary performance test this developer used a clean/smudge
filter written in golang to filter 12,000 files. This process took 364s
with the existing filter mechanism and 5s with the new mechanism. See
details here: https://github.com/github/git-lfs/pull/1382

This patch adds the `filter.<driver>.process` string option which, if
used, keeps the external filter process running and processes all blobs
with the packet format (pkt-line) based protocol over standard input and
standard output. The full protocol is explained in detail in
`Documentation/gitattributes.txt`.

A few key decisions:

* The long running filter process is referred to as filter protocol
  version 2 because the existing single shot filter invocation is
  considered version 1.
* Git sends a welcome message and expects a response right after the
  external filter process has started. This ensures that Git will not
  hang if a version 1 filter is incorrectly used with the
  filter.<driver>.process option for version 2 filters. In addition,
  Git can detect this kind of error and warn the user.
* The status of a filter operation (e.g. ""success"" or ""error) is set
  before the actual response and (if necessary!) re-set after the
  response. The advantage of this two step status response is that if
  the filter detects an error early, then the filter can communicate
  this and Git does not even need to create structures to read the
  response.
* All status responses are pkt-line lists terminated with a flush
  packet. This allows us to send other status fields with the same
  protocol in the future.

Helped-by: Martin-Louis Bright <mlbright@gmail.com>
Reviewed-by: Jakub Narebski <jnareb@gmail.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1092,data/crawl/git/hunk_1016.cpp,,,data/crawl/git/old_hunk_1016.cpp,data/crawl/git/new_hunk_1016.cpp,-1,115,,"error(""cannot fork to run external filter '%s'"", cmd);","[""addLog""]","[[], [""error"", ""cannot"", ""fork"", ""to"", ""run"", ""external"", ""filter"", ""%s"", ""cmd""]]",[16086558418470959885],5362,"105 days, 0:00:00"
https://github.com/git/git/commit/f514d7d177f7cabbacc3f2cda96ca211266ac2ff,15 May 2017,"convert: rename reusable sub-process functions

Do a mechanical rename of the functions that will become the reusable
sub-process module.

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_468.cpp,,,data/crawl/git/old_hunk_468.cpp,data/crawl/git/new_hunk_468.cpp,15,15,"error(""initialization for external filter '%s' failed"", cmd);","error(""initialization for subprocess '%s' failed"", cmd);","[""updateContent""]","[[""external"", ""filter""], [""subprocess""]]",[-7581375116912952374],5361,0:00:00
https://github.com/git/git/commit/8325e43b82dd0bd00c37abed45861bb8c155b022,17 Mar 2017,"Makefile: add DC_SHA1 knob

This knob lets you use the sha1dc implementation from:

      https://github.com/cr-marcstevens/sha1collisiondetection

which can detect certain types of collision attacks (even
when we only see half of the colliding pair). So it
mitigates any attack which consists of getting the ""good""
half of a collision into a trusted repository, and then
later replacing it with the ""bad"" half. The ""good"" half is
rejected by the victim's version of Git (and even if they
run an old version of Git, any sha1dc-enabled git will
complain loudly if it ever has to interact with the object).

The big downside is that it's slower than either the openssl
or block-sha1 implementations.

Here are some timings based off of linux.git:

  - compute sha1 over whole packfile
      sha1dc: 3.580s
    blk-sha1: 2.046s (-43%)
     openssl: 1.335s (-62%)

  - rev-list --all --objects
      sha1dc: 33.512s
    blk-sha1: 33.514s (+0.0%)
     openssl: 33.650s (+0.4%)

  - git log --no-merges -10000 -p
      sha1dc: 8.124s
    blk-sha1: 7.986s (-1.6%)
     openssl: 8.203s (+0.9%)

  - index-pack --verify
      sha1dc: 4m19s
    blk-sha1: 2m57s (-32%)
     openssl: 2m19s (-42%)

So overall the sha1 computation with collision detection is
about 1.75x slower than block-sha1, and 2.7x slower than
sha1. But of course most operations do more than just sha1.
Normal object access isn't really slowed at all (both the
+/- changes there are well within the run-to-run noise); any
changes are drowned out by the other work Git is doing.

The most-affected operation is `index-pack --verify`, which
is essentially just computing the sha1 on every object. This
is similar to the `index-pack` invocation that the receiver
of a push or fetch would perform. So clearly there's some
extra CPU load here.

There will also be some latency for the user, though keep in
mind that such an operation will generally be network bound
(this is about a 1.2GB packfile). Some of that extra CPU is
""free"" in the sense that we use it while the pack is
streaming in anyway. But most of it comes during the
delta-resolution phase, after the whole pack has been
received. So we can imagine that for this (quite large)
push, the user might have to wait an extra 100 seconds over
openssl (which is what we use now). If we assume they can
push to us at 20Mbit/s, that's 480s for a 1.2GB pack, which
is only 20% slower.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_762.cpp,,,data/crawl/git/old_hunk_762.cpp,data/crawl/git/new_hunk_762.cpp,-1,8,,"die(""SHA-1 appears to be part of a collision attack: %s"",
	    sha1_to_hex(hash));","[""addLog""]","[[], [""die"", ""SHA"", ""1"", ""appears"", ""to"", ""be"", ""part"", ""of"", ""a"", ""collision"", ""attack"", ""%s"", ""sha1_to_hex"", ""hash""]]",[20479438428025486282],5360,"33 days, 0:00:00"
https://github.com/git/git/commit/958f964691a250d9a7173f1c0a4c03fd9e71e2aa,17 Apr 2017,"refs: split `ref_cache` code into separate files

The `ref_cache` code is currently too tightly coupled to
`files-backend`, making the code harder to understand and making it
awkward for new code to use `ref_cache` (as we indeed have planned).
Start loosening that coupling by splitting `ref_cache` into a separate
module.

This commit moves code, adds declarations, and changes the visibility
of some functions, but doesn't change any code.

The modules are still too tightly coupled, but the situation will be
improved in subsequent commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1500,data/crawl/git/hunk_665.cpp,,,data/crawl/git/old_hunk_665.cpp,data/crawl/git/new_hunk_665.cpp,-1,57,,"die(""Reference has invalid format: '%s'"", refname);","[""addLog""]","[[], [""die"", ""Reference"", ""has"", ""invalid"", ""format"", ""%s"", ""refname""]]",[-354143934257542070],5359,"18 days, 0:00:00"
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,83,-1,"die(_(""cannot read blob %s for path %s""),
			    oid_to_hex(&o->blob_oid),
			    path);",,"[""removeLog""]","[[""die"", ""_"", ""cannot"", ""read"", ""blob"", ""%s"", ""for"", ""path"", ""%s"", ""oid_to_hex"", ""&o"", ""blob_oid"", ""path""], []]",[1291375799785715914],5358,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,72,-1,"die(_(""no such path %s in %s""), path, final_commit_name);",,"[""removeLog""]","[[""die"", ""_"", ""no"", ""such"", ""path"", ""%s"", ""in"", ""%s"", ""path"", ""final_commit_name""], []]",[-12538114078231254675],5357,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,61,-1,"die(_(""--reverse --first-parent together require range along first-parent chain""));",,"[""removeLog""]","[[""die"", ""_"", ""reverse"", ""first"", ""parent"", ""together"", ""require"", ""range"", ""along"", ""first"", ""parent"", ""chain""], []]",[-3578294121953777376],5356,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,56,-1,"die(""BUG: not unique item in first-parent chain"");",,"[""removeLog""]","[[""die"", ""BUG"", ""not"", ""unique"", ""item"", ""in"", ""first"", ""parent"", ""chain""], []]",[5086867976014952884],5355,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,34,-1,"die(_(""--reverse and --first-parent together require specified latest commit""));",,"[""removeLog""]","[[""die"", ""_"", ""reverse"", ""and"", ""first"", ""parent"", ""together"", ""require"", ""specified"", ""latest"", ""commit""], []]",[447505310699186600],5354,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,29,-1,"die(_(""cannot use --contents with final commit object name""));",,"[""removeLog""]","[[""die"", ""_"", ""cannot"", ""use"", ""contents"", ""with"", ""final"", ""commit"", ""object"", ""name""], []]",[7382967633732304868],5353,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_434.cpp,,,data/crawl/git/old_hunk_434.cpp,data/crawl/git/new_hunk_434.cpp,9,-1,"die(_(""--contents and --reverse do not blend well.""));",,"[""removeLog""]","[[""die"", ""_"", ""contents"", ""and"", ""reverse"", ""do"", ""not"", ""blend"", ""well""], []]",[478767606341805109],5352,0:00:00
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_423.cpp,,,data/crawl/git/old_hunk_423.cpp,data/crawl/git/new_hunk_423.cpp,82,-1,"die(""Non commit %s?"", revs->pending.objects[i].name);",,"[""removeLog""]","[[""die"", ""Non"", ""commit"", ""%s"", ""revs"", ""pending"", ""objects[i]"", ""name""], []]",[7659942789565175390],5351,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_433.cpp,,,data/crawl/git/old_hunk_433.cpp,data/crawl/git/new_hunk_433.cpp,-1,91,,"die(_(""cannot read blob %s for path %s""),
			    oid_to_hex(&o->blob_oid),
			    path);","[""addLog""]","[[], [""die"", ""_"", ""cannot"", ""read"", ""blob"", ""%s"", ""for"", ""path"", ""%s"", ""oid_to_hex"", ""&o"", ""blob_oid"", ""path""]]",[-1291375799785715914],5350,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_433.cpp,,,data/crawl/git/old_hunk_433.cpp,data/crawl/git/new_hunk_433.cpp,-1,80,,"die(_(""no such path %s in %s""), path, final_commit_name);","[""addLog""]","[[], [""die"", ""_"", ""no"", ""such"", ""path"", ""%s"", ""in"", ""%s"", ""path"", ""final_commit_name""]]",[12538114078231254675],5349,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_433.cpp,,,data/crawl/git/old_hunk_433.cpp,data/crawl/git/new_hunk_433.cpp,-1,69,,"die(_(""--reverse --first-parent together require range along first-parent chain""));","[""addLog""]","[[], [""die"", ""_"", ""reverse"", ""first"", ""parent"", ""together"", ""require"", ""range"", ""along"", ""first"", ""parent"", ""chain""]]",[3578294121953777376],5348,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_433.cpp,,,data/crawl/git/old_hunk_433.cpp,data/crawl/git/new_hunk_433.cpp,-1,42,,"die(_(""--reverse and --first-parent together require specified latest commit""));","[""addLog""]","[[], [""die"", ""_"", ""reverse"", ""and"", ""first"", ""parent"", ""together"", ""require"", ""specified"", ""latest"", ""commit""]]",[-447505310699186600],5347,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_433.cpp,,,data/crawl/git/old_hunk_433.cpp,data/crawl/git/new_hunk_433.cpp,-1,22,,"die(_(""cannot use --contents with final commit object name""));","[""addLog""]","[[], [""die"", ""_"", ""cannot"", ""use"", ""contents"", ""with"", ""final"", ""commit"", ""object"", ""name""]]",[-7382967633732304868],5346,0:00:00
https://github.com/git/git/commit/d0d0ef1f67c1549aa1eab55c9a4ec1c2c34fccaa,25 May 2017,"blame: create scoreboard setup function

Create function that completes setting up blame_scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_433.cpp,,,data/crawl/git/old_hunk_433.cpp,data/crawl/git/new_hunk_433.cpp,-1,11,,"die(_(""--contents and --reverse do not blend well.""));","[""addLog""]","[[], [""die"", ""_"", ""contents"", ""and"", ""reverse"", ""do"", ""not"", ""blend"", ""well""]]",[-478767606341805109],5345,0:00:00
https://github.com/git/git/commit/74e8bc59cb324d2d7a55c90195db004219770eec,29 Apr 2015,"merge: handle FETCH_HEAD internally

The collect_parents() function now is responsible for

 1. parsing the commits given on the command line into a list of
    commits to be merged;

 2. filtering these parents into independent ones; and

 3. optionally calling fmt_merge_msg() via prepare_merge_message()
    to prepare an auto-generated merge log message, using fake
    contents that FETCH_HEAD would have had if these commits were
    fetched from the current repository with ""git pull . $args...""

Make ""git merge FETCH_HEAD"" to be the same as the traditional

    git merge ""$(git fmt-merge-msg <.git/FETCH_HEAD)"" $commits

invocation of the command in ""git pull"", where $commits are the ones
that appear in FETCH_HEAD that are not marked as not-for-merge, by
making it do a bit more, specifically:

 - noticing ""FETCH_HEAD"" is the only ""commit"" on the command line
   and picking the commits that are not marked as not-for-merge as
   the list of commits to be merged (substitute for step #1 above);

 - letting the resulting list fed to step #2 above;

 - doing the step #3 above, using the contents of the FETCH_HEAD
   instead of fake contents crafted from the list of commits parsed
   in the step #1 above.

Note that this changes the semantics.  ""git merge FETCH_HEAD"" has
always behaved as if the first commit in the FETCH_HEAD file were
directly specified on the command line, creating a two-way merge
whose auto-generated merge log said ""merge commit xyz"".  With this
change, if the previous fetch was to grab multiple branches (e.g.
""git fetch $there topic-a topic-b""), the new world order is to
create an octopus, behaving as if ""git pull $there topic-a topic-b""
were run.  This is a deliberate change to make that happen, and
can be seen in the changes to t3033 tests.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/hunk_3251.cpp,,,data/crawl/git/old_hunk_3251.cpp,data/crawl/git/new_hunk_3251.cpp,13,-1,"die_errno(_(""could not open '%s' for reading""),
				  filename);",,"[""removeLog""]","[[""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""filename""], []]",[8010569130806384168],5344,"379 days, 0:00:00"
https://github.com/git/git/commit/bb246590a1b648ac23f6a22d1d9e119129ba2f03,30 May 2017,"remote-{ext,fd}: print usage message on invalid arguments

We just say ""Expected two arguments"" when we get a different
number of arguments, but we can be slightly friendlier.
People shouldn't generally be running remote helpers
themselves, but curious users might say ""git remote-ext -h"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_397.cpp,,,data/crawl/git/old_hunk_397.cpp,data/crawl/git/new_hunk_397.cpp,3,3,"die(""Expected two arguments"");",usage(usage_msg);,"[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""Expected"", ""two"", ""arguments""], [""usage"", ""usage_msg""]]",[-12063045656158584193],5343,0:00:00
https://github.com/git/git/commit/6489660b4bba7456fac0d0a41f5d6295c5900c5f,16 May 2017,"send-email: support validate hook

Currently, send-email has support for rudimentary e-mail validation.
Allow the user to add support for more validation by providing a
sendemail-validate hook.

Helped-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",69,data/crawl/git/hunk_465.cpp,,,data/crawl/git/old_hunk_465.cpp,data/crawl/git/new_hunk_465.cpp,-1,12,,"die(""chdir: $!"");","[""addLog""]","[[], [""die"", ""chdir""]]",[1018654449685725644],5342,"8 days, 12:00:00"
https://github.com/git/git/commit/f5615d246770a2796e60b06dd5e17f5e79d5dd0c,31 Oct 2009,"pkt-line: Add strbuf based functions

These routines help to work with pkt-line values inside of a strbuf,
permitting simple formatting of buffered network messages.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_5617.cpp,,,data/crawl/git/old_hunk_5617.cpp,data/crawl/git/new_hunk_5617.cpp,-1,11,,"(format (printf, 2, 3);","[""addLog""]","[[], [""format"", ""printf"", ""2"", ""3""]]",[10117892943833313091],5341,"1392 days, 0:00:00"
https://github.com/git/git/commit/a028a1930c6b4b848e8fb47cc92c30b23d99a75e,01 Mar 2016,"fetching submodules: respect `submodule.fetchJobs` config option

This allows to configure fetching and updating in parallel
without having the command line option.

This moved the responsibility to determine how many parallel processes
to start from builtin/fetch to submodule.c as we need a way to communicate
""The user did not specify the number of parallel processes in the command
line options"" in the builtin fetch. The submodule code takes care of
the precedence (CLI > config > default).

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_2216.cpp,,,data/crawl/git/old_hunk_2216.cpp,data/crawl/git/new_hunk_2216.cpp,-1,6,,"die(_(""negative values not allowed for submodule.fetchJobs""));","[""addLog""]","[[], [""die"", ""_"", ""negative"", ""values"", ""not"", ""allowed"", ""for"", ""submodule"", ""fetchJobs""]]",[-6906952615900604143],5340,"259 days, 12:00:00"
https://github.com/git/git/commit/38849a8116e690071c02eba0a8ef60a031a58080,07 Oct 2015,"sha1_file.c: add a function to release all packs

On Windows, files that are in use cannot be removed or renamed. That
means that we have to release pack files when we are about to, say,
repack them. Let's introduce a convenient function to close all the
pack files and their idx files.

While at it, we consolidate the close windows/close fd/close index
stanza in `free_pack_by_name()` into the `close_pack()` function that
is used by the new `close_all_packs()` function to avoid repeated code.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_2655.cpp,,,data/crawl/git/old_hunk_2655.cpp,data/crawl/git/new_hunk_2655.cpp,-1,16,,"die(""BUG! Want to close pack marked 'do-not-close'"");","[""addLog""]","[[], [""die"", ""BUG"", ""Want"", ""to"", ""close"", ""pack"", ""marked"", ""do"", ""not"", ""close""]]",[21108329749737689061],5339,"343 days, 0:00:00"
https://github.com/git/git/commit/c9ced051c3afa6f3da7f59b0dcb92787b2b5c702,18 Jan 2008,"Fix random fast-import errors when compiled with NO_MMAP

fast-import was relying on the fact that on most systems mmap() and
write() are synchronized by the filesystem's buffer cache.  We were
relying on the ability to mmap() 20 bytes beyond the current end
of the file, then later fill in those bytes with a future write()
call, then read them through the previously obtained mmap() address.

This isn't always true with some implementations of NFS, but it is
especially not true with our NO_MMAP=YesPlease build time option used
on some platforms.  If fast-import was built with NO_MMAP=YesPlease
we used the malloc()+pread() emulation and the subsequent write()
call does not update the trailing 20 bytes of a previously obtained
""mmap()"" (aka malloc'd) address.

Under NO_MMAP that behavior causes unpack_entry() in sha1_file.c to
be unable to read an object header (or data) that has been unlucky
enough to be written to the packfile at a location such that it
is in the trailing 20 bytes of a window previously opened on that
same packfile.

This bug has gone unnoticed for a very long time as it is highly data
dependent.  Not only does the object have to be placed at the right
position, but it also needs to be positioned behind some other object
that has been accessed due to a branch cache invalidation.  In other
words the stars had to align just right, and if you did run into
this bug you probably should also have purchased a lottery ticket.

Fortunately the workaround is a lot easier than the bug explanation.

Before we allow unpack_entry() to read data from a pack window
that has also (possibly) been modified through write() we force
all existing windows on that packfile to be closed.  By closing
the windows we ensure that any new access via the emulated mmap()
will reread the packfile, updating to the current file content.

This comes at a slight performance degredation as we cannot reuse
previously cached windows when we update the packfile.  But it
is a fairly minor difference as the window closes happen at only
two points:

 - When the packfile is finalized and its .idx is generated:

   At this stage we are getting ready to update the refs and any
   data access into the packfile is going to be random, and is
   going after only the branch tips (to ensure they are valid).
   Our existing windows (if any) are not likely to be positioned
   at useful locations to access those final tip commits so we
   probably were closing them before anyway.

 - When the branch cache missed and we need to reload:

   At this point fast-import is getting change commands for the next
   commit and it needs to go re-read a tree object it previously
   had written out to the packfile.  What windows we had (if any)
   are not likely to cover the tree in question so we probably were
   closing them before anyway.

We do try to avoid unnecessarily closing windows in the second case
by checking to see if the packfile size has increased since the
last time we called unpack_entry() on that packfile.  If the size
has not changed then we have not written additional data, and any
existing window is still vaild.  This nicely handles the cases where
fast-import is going through a branch cache reload and needs to read
many trees at once.  During such an event we are not likely to be
updating the packfile so we do not cycle the windows between reads.

With this change in place t9301-fast-export.sh (which was broken
by c3b0dec509fe136c5417422f31898b5a4e2d5e02) finally works again.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_7569.cpp,,,data/crawl/git/old_hunk_7569.cpp,data/crawl/git/new_hunk_7569.cpp,-1,9,,"die(""pack '%s' still has open windows to it"",
			    p->pack_name);","[""addLog""]","[[], [""die"", ""pack"", ""%s"", ""still"", ""has"", ""open"", ""windows"", ""to"", ""it"", ""p"", ""pack_name""]]",[4839713977149441857],5338,"1752 days, 12:00:00"
https://github.com/git/git/commit/84f80ad5e11d29b61570269a25cf447f34c5aeba,23 Aug 2017,"pack: move use_pack()

The function open_packed_git() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",604,data/crawl/git/hunk_303.cpp,,,data/crawl/git/old_hunk_303.cpp,data/crawl/git/new_hunk_303.cpp,173,-1,"die(""packfile %s cannot be accessed"", p->pack_name);",,"[""removeLog""]","[[""die"", ""packfile"", ""%s"", ""cannot"", ""be"", ""accessed"", ""p"", ""pack_name""], []]",[3986520777584758644],5337,0:00:00
https://github.com/git/git/commit/d079837eeeadc37d266113a1fd2deb0a01aaee91,27 May 2007,"Lazily open pack index files on demand

In some repository configurations the user may have many packfiles,
but all of the recent commits/trees/tags/blobs are likely to
be in the most recent packfile (the one with the newest mtime).
It is therefore common to be able to complete an entire operation
by accessing only one packfile, even if there are 25 packfiles
available to the repository.

Rather than opening and mmaping the corresponding .idx file for
every pack found, we now only open and map the .idx when we suspect
there might be an object of interest in there.

Of course we cannot known in advance which packfile contains an
object, so we still need to scan the entire packed_git list to
locate anything.  But odds are users want to access objects in the
most recently created packfiles first, and that may be all they
ever need for the current operation.

Junio observed in b867092f that placing recent packfiles before
older ones can slightly improve access times for recent objects,
without degrading it for historical object access.

This change improves upon Junio's observations by trying even harder
to avoid the .idx files that we won't need.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",55,data/crawl/git/hunk_8368.cpp,,,data/crawl/git/old_hunk_8368.cpp,data/crawl/git/new_hunk_8368.cpp,-1,4,,"error(""packfile %s index unavailable"", p->pack_name);","[""addLog""]","[[], [""error"", ""packfile"", ""%s"", ""index"", ""unavailable"", ""p"", ""pack_name""]]",[-1703578444572549037],5336,"1870 days, 12:00:00"
https://github.com/git/git/commit/09ded04b7e1f0096bb2fe356b2f5a298296151dd,02 Nov 2008,"make unpack_object_header() non fatal

It is possible to have pack corruption in the object header.  Currently
unpack_object_header() simply die() on them instead of letting the caller
deal with that gracefully.

So let's have unpack_object_header() return an error instead, and find
a better name for unpack_object_header_gently() in that context.  All
callers of unpack_object_header() are ready for it.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_6648.cpp,,,data/crawl/git/old_hunk_6648.cpp,data/crawl/git/new_hunk_6648.cpp,-1,4,,"error(""bad object header"");","[""addLog""]","[[], [""error"", ""bad"", ""object"", ""header""]]",[-2299761978805054779],5335,"1608 days, 0:00:00"
https://github.com/git/git/commit/abe601bba52ee6b0bf89d282aa1c3ef5fd89cbb0,27 Mar 2013,"sha1_file: remove recursion in unpack_entry

Similar to the recursion in packed_object_info(), this leads to
problems on stack-space-constrained systems in the presence of long
delta chains.

We proceed in three phases:

1. Dig through the delta chain, saving each delta object's offsets and
   size on an ad-hoc stack.

2. Unpack the base object at the bottom.

3. Unpack and apply the deltas from the stack.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_3799.cpp,,,data/crawl/git/old_hunk_3799.cpp,data/crawl/git/new_hunk_3799.cpp,49,-1,"error(""failed to unpack compressed delta ""
		      ""at offset %""PRIuMAX"" from %s"",
		      (uintmax_t)curpos, p->pack_name);",,"[""removeLog""]","[[""error"", ""failed"", ""to"", ""unpack"", ""compressed"", ""delta"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""], []]",[-5603733488353824519],5334,"805 days, 0:00:00"
https://github.com/git/git/commit/abe601bba52ee6b0bf89d282aa1c3ef5fd89cbb0,27 Mar 2013,"sha1_file: remove recursion in unpack_entry

Similar to the recursion in packed_object_info(), this leads to
problems on stack-space-constrained systems in the presence of long
delta chains.

We proceed in three phases:

1. Dig through the delta chain, saving each delta object's offsets and
   size on an ad-hoc stack.

2. Unpack the base object at the bottom.

3. Unpack and apply the deltas from the stack.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_3799.cpp,,,data/crawl/git/old_hunk_3799.cpp,data/crawl/git/new_hunk_3799.cpp,17,-1,"error(""failed to validate delta base reference ""
		      ""at offset %""PRIuMAX"" from %s"",
		      (uintmax_t)curpos, p->pack_name);",,"[""removeLog""]","[[""error"", ""failed"", ""to"", ""validate"", ""delta"", ""base"", ""reference"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""], []]",[-13954492206276313609],5333,"805 days, 0:00:00"
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_296.cpp,,,data/crawl/git/old_hunk_296.cpp,data/crawl/git/new_hunk_296.cpp,531,-1,"error(""unknown object type %i at offset %""PRIuMAX"" in %s"",
		      type, (uintmax_t)obj_offset, p->pack_name);",,"[""removeLog""]","[[""error"", ""unknown"", ""object"", ""type"", ""%i"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""in"", ""%s"", ""type"", ""uintmax_t"", ""obj_offset"", ""p"", ""pack_name""], []]",[-11258535130415991883],5332,0:00:00
https://github.com/git/git/commit/abe601bba52ee6b0bf89d282aa1c3ef5fd89cbb0,27 Mar 2013,"sha1_file: remove recursion in unpack_entry

Similar to the recursion in packed_object_info(), this leads to
problems on stack-space-constrained systems in the presence of long
delta chains.

We proceed in three phases:

1. Dig through the delta chain, saving each delta object's offsets and
   size on an ad-hoc stack.

2. Unpack the base object at the bottom.

3. Unpack and apply the deltas from the stack.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_3800.cpp,,,data/crawl/git/old_hunk_3800.cpp,data/crawl/git/new_hunk_3800.cpp,-1,136,,"error(""failed to read delta base object %s""
				      "" at offset %""PRIuMAX"" from %s"",
				      sha1_to_hex(base_sha1), (uintmax_t)obj_offset,
				      p->pack_name);","[""addLog""]","[[], [""error"", ""failed"", ""to"", ""read"", ""delta"", ""base"", ""object"", ""%s"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""sha1_to_hex"", ""base_sha1"", ""uintmax_t"", ""obj_offset"", ""p"", ""pack_name""]]",[4531124748786497505],5331,"805 days, 0:00:00"
https://github.com/git/git/commit/abe601bba52ee6b0bf89d282aa1c3ef5fd89cbb0,27 Mar 2013,"sha1_file: remove recursion in unpack_entry

Similar to the recursion in packed_object_info(), this leads to
problems on stack-space-constrained systems in the presence of long
delta chains.

We proceed in three phases:

1. Dig through the delta chain, saving each delta object's offsets and
   size on an ad-hoc stack.

2. Unpack the base object at the bottom.

3. Unpack and apply the deltas from the stack.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",231,data/crawl/git/hunk_3800.cpp,,,data/crawl/git/old_hunk_3800.cpp,data/crawl/git/new_hunk_3800.cpp,-1,62,,"error(""failed to validate delta base reference ""
			      ""at offset %""PRIuMAX"" from %s"",
			      (uintmax_t)curpos, p->pack_name);","[""addLog""]","[[], [""error"", ""failed"", ""to"", ""validate"", ""delta"", ""base"", ""reference"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""]]",[13954492206276313609],5330,"805 days, 0:00:00"
https://github.com/git/git/commit/0e8189e2708bc1da08c77c7e1d960f420b6890a5,02 Nov 2008,"close another possibility for propagating pack corruption

Abstract
--------

With index v2 we have a per object CRC to allow quick and safe reuse of
pack data when repacking.  This, however, doesn't currently prevent a
stealth corruption from being propagated into a new pack when _not_
reusing pack data as demonstrated by the modification to t5302 included
here.

The Context
-----------

The Git database is all checksummed with SHA1 hashes.  Any kind of
corruption can be confirmed by verifying this per object hash against
corresponding data.  However this can be costly to perform systematically
and therefore this check is often not performed at run time when
accessing the object database.

First, the loose object format is entirely compressed with zlib which
already provide a CRC verification of its own when inflating data.  Any
disk corruption would be caught already in this case.

Then, packed objects are also compressed with zlib but only for their
actual payload.  The object headers and delta base references are not
deflated for obvious performance reasons, however this leave them
vulnerable to potentially undetected disk corruptions.  Object types
are often validated against the expected type when they're requested,
and deflated size must always match the size recorded in the object header,
so those cases are pretty much covered as well.

Where corruptions could go unnoticed is in the delta base reference.
Of course, in the OBJ_REF_DELTA case,  the odds for a SHA1 reference to
get corrupted so it actually matches the SHA1 of another object with the
same size (the delta header stores the expected size of the base object
to apply against) are virtually zero.  In the OBJ_OFS_DELTA case, the
reference is a pack offset which would have to match the start boundary
of a different base object but still with the same size, and although this
is relatively much more ""probable"" than in the OBJ_REF_DELTA case, the
probability is also about zero in absolute terms.  Still, the possibility
exists as demonstrated in t5302 and is certainly greater than a SHA1
collision, especially in the OBJ_OFS_DELTA case which is now the default
when repacking.

Again, repacking by reusing existing pack data is OK since the per object
CRC provided by index v2 guards against any such corruptions. What t5302
failed to test is a full repack in such case.

The Solution
------------

As unlikely as this kind of stealth corruption can be in practice, it
certainly isn't acceptable to propagate it into a freshly created pack.
But, because this is so unlikely, we don't want to pay the run time cost
associated with extra validation checks all the time either.  Furthermore,
consequences of such corruption in anything but repacking should be rather
visible, and even if it could be quite unpleasant, it still has far less
severe consequences than actively creating bad packs.

So the best compromize is to check packed object CRC when unpacking
objects, and only during the compression/writing phase of a repack, and
only when not streaming the result.  The cost of this is minimal (less
than 1% CPU time), and visible only with a full repack.

Someone with a stats background could provide an objective evaluation of
this, but I suspect that it's bad RAM that has more potential for data
corruptions at this point, even in those cases where this extra check
is not performed.  Still, it is best to prevent a known hole for
corruption when recreating object data into a new pack.

What about the streamed pack case?  Well, any client receiving a pack
must always consider that pack as untrusty and perform full validation
anyway, hence no such stealth corruption could be propagated to remote
repositoryes already.  It is therefore worthless doing local validation
in that case.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_6653.cpp,,,data/crawl/git/old_hunk_6653.cpp,data/crawl/git/new_hunk_6653.cpp,-1,18,,"error(""bad packed object CRC for %s"",
			      sha1_to_hex(sha1));","[""addLog""]","[[], [""error"", ""bad"", ""packed"", ""object"", ""CRC"", ""for"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-12875605900424775910],5329,"1608 days, 0:00:00"
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_295.cpp,,,data/crawl/git/old_hunk_295.cpp,data/crawl/git/new_hunk_295.cpp,-1,568,,"error(""unknown object type %i at offset %""PRIuMAX"" in %s"",
		      type, (uintmax_t)obj_offset, p->pack_name);","[""addLog""]","[[], [""error"", ""unknown"", ""object"", ""type"", ""%i"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""in"", ""%s"", ""type"", ""uintmax_t"", ""obj_offset"", ""p"", ""pack_name""]]",[11258535130415991883],5328,0:00:00
https://github.com/git/git/commit/628522ec1439f414dcb1e71e300eb84a37ad1af9,09 Apr 2008,"sha1-lookup: more memory efficient search in sorted list of SHA-1

Currently, when looking for a packed object from the pack idx, a
simple binary search is used.

A conventional binary search loop looks like this:

        unsigned lo, hi;
        do {
                unsigned mi = (lo + hi) / 2;
                int cmp = ""entry pointed at by mi"" minus ""target"";
                if (!cmp)
                        return mi; ""mi is the wanted one""
                if (cmp > 0)
                        hi = mi; ""mi is larger than target""
                else
                        lo = mi+1; ""mi is smaller than target""
        } while (lo < hi);
	""did not find what we wanted""

The invariants are:

  - When entering the loop, 'lo' points at a slot that is never
    above the target (it could be at the target), 'hi' points at
    a slot that is guaranteed to be above the target (it can
    never be at the target).

  - We find a point 'mi' between 'lo' and 'hi' ('mi' could be
    the same as 'lo', but never can be as high as 'hi'), and
    check if 'mi' hits the target.  There are three cases:

     - if it is a hit, we have found what we are looking for;

     - if it is strictly higher than the target, we set it to
       'hi', and repeat the search.

     - if it is strictly lower than the target, we update 'lo'
       to one slot after it, because we allow 'lo' to be at the
       target and 'mi' is known to be below the target.

    If the loop exits, there is no matching entry.

When choosing 'mi', we do not have to take the ""middle"" but
anywhere in between 'lo' and 'hi', as long as lo <= mi < hi is
satisfied.  When we somehow know that the distance between the
target and 'lo' is much shorter than the target and 'hi', we
could pick 'mi' that is much closer to 'lo' than (hi+lo)/2,
which a conventional binary search would pick.

This patch takes advantage of the fact that the SHA-1 is a good
hash function, and as long as there are enough entries in the
table, we can expect uniform distribution.  An entry that begins
with for example ""deadbeef..."" is much likely to appear much
later than in the midway of a reasonably populated table.  In
fact, it can be expected to be near 87% (222/256) from the top
of the table.

This is a work-in-progress and has switches to allow easier
experiments and debugging.  Exporting GIT_USE_LOOKUP environment
variable enables this code.

On my admittedly memory starved machine, with a partial KDE
repository (3.0G pack with 95M idx):

    $ GIT_USE_LOOKUP=t git log -800 --stat HEAD >/dev/null
    3.93user 0.16system 0:04.09elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+55588minor)pagefaults 0swaps

Without the patch, the numbers are:

    $ git log -800 --stat HEAD >/dev/null
    4.00user 0.15system 0:04.17elapsed 99%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+60258minor)pagefaults 0swaps

In the same repository:

    $ GIT_USE_LOOKUP=t git log -2000 HEAD >/dev/null
    0.12user 0.00system 0:00.12elapsed 97%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+4241minor)pagefaults 0swaps

Without the patch, the numbers are:

    $ git log -2000 HEAD >/dev/null
    0.05user 0.01system 0:00.07elapsed 100%CPU (0avgtext+0avgdata 0maxresident)k
    0inputs+0outputs (0major+8506minor)pagefaults 0swaps

There isn't much time difference, but the number of minor faults
seems to show that we are touching much smaller number of pages,
which is expected.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",198,data/crawl/git/hunk_7268.cpp,,,data/crawl/git/old_hunk_7268.cpp,data/crawl/git/new_hunk_7268.cpp,-1,29,,"printf(""lo %u hi %u rg %u mi %u\n"",
			       lo, hi, hi - lo, mi);","[""addLog""]","[[], [""printf"", ""lo"", ""%u"", ""hi"", ""%u"", ""rg"", ""%u"", ""mi"", ""%u\\n"", ""lo"", ""hi"", ""hi"", ""lo"", ""mi""]]",[13520485624035518394],5327,"1711 days, 12:00:00"
https://github.com/git/git/commit/7fa7dc8904882a40107af71a751bad5d1572ba4c,22 Jun 2015,"delete_refs(): bail early if the packed-refs file cannot be rewritten

If we fail to delete the doomed references from the packed-refs file,
then it is unsafe to delete their loose references, because doing so
might expose a value from the packed-refs file that is obsolete and
perhaps even points at an object that has been garbage collected.

So if repack_without_refs() fails, emit a more explicit error message
and bail.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_3130.cpp,,,data/crawl/git/old_hunk_3130.cpp,data/crawl/git/new_hunk_3130.cpp,-1,16,,"error(_(""could not delete reference %s: %s""),
			      refnames->items[0].string, err.buf);","[""addLog""]","[[], [""error"", ""_"", ""could"", ""not"", ""delete"", ""reference"", ""%s"", ""%s"", ""refnames"", ""items[0]"", ""string"", ""err"", ""buf""]]",[17611366290701165846],5326,"404 days, 12:00:00"
https://github.com/git/git/commit/b6446d54ec70817ddd96b5c9668dd74a996719bf,11 Aug 2016,"builtin/apply: move check_apply_state() to apply.c

To libify `git apply` functionality we must make check_apply_state()
usable outside ""builtin/apply.c"".

Let's do that by moving it into ""apply.c"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_1561.cpp,,,data/crawl/git/old_hunk_1561.cpp,data/crawl/git/new_hunk_1561.cpp,30,-1,"error(""BUG: state->lock_file should not be NULL"");",,"[""removeLog""]","[[""error"", ""BUG"", ""state"", ""lock_file"", ""should"", ""not"", ""be"", ""NULL""], []]",[-23999971356498703020],5325,"210 days, 12:00:00"
https://github.com/git/git/commit/89f3bbdd3b1f46a5747aa5618b7742f7b3f2adef,16 Oct 2017,"refs: update ref transactions to use struct object_id

Update the ref transaction code to use struct object_id.  Remove one
NULL pointer check which was previously inserted around a dereference;
since we now pass a pointer to struct object_id directly through, the
code we're calling handles this for us.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/hunk_189.cpp,,,data/crawl/git/old_hunk_189.cpp,data/crawl/git/new_hunk_189.cpp,42,42,"die(""BUG: verify called with old_sha1 set to NULL"");","die(""BUG: verify called with old_oid set to NULL"");","[""updateContent""]","[[""old_sha1""], [""old_oid""]]",[880051635858279184],5324,0:00:00
https://github.com/git/git/commit/188960b4d68e0b77e31481592b86306a9ce37632,16 Oct 2017,"builtin/pack-objects: convert to struct object_id

This is one of the last unconverted callers to peel_ref.  While we're
fixing that, convert the rest of the file, since it will need to be
converted at some point anyway.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/hunk_175.cpp,,,data/crawl/git/old_hunk_175.cpp,data/crawl/git/new_hunk_175.cpp,10,10,"die(""expected sha1, got garbage:\n %s"", line);","die(""expected object ID, got garbage:\n %s"", line);","[""updateContent""]","[[""sha1""], [""object"", ""ID""]]",[-3230451031753780347],5323,0:00:00
https://github.com/git/git/commit/c26de08370ad5d927d93dbe6fb46103caabb889c,21 Oct 2017,"commit: check result of resolve_ref_unsafe

Add check of the resolved HEAD reference while printing of a commit summary.
resolve_ref_unsafe() may return NULL pointer if underlying calls of lstat() or
open() fail in files_read_raw_ref().
Such situation can be caused by race: file becomes inaccessible to this moment.

Signed-off-by: Andrey Okoshkin <a.okoshkin@samsung.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_157.cpp,,,data/crawl/git/old_hunk_157.cpp,data/crawl/git/new_hunk_157.cpp,-1,4,,"die_errno(_(""unable to resolve HEAD after creating commit""));","[""addLog""]","[[], [""die_errno"", ""_"", ""unable"", ""to"", ""resolve"", ""HEAD"", ""after"", ""creating"", ""commit""]]",[8614044904745424158],5322,"17 days, 0:00:00"
https://github.com/git/git/commit/356ee4659bb551cd9464b317d691827276752c2d,24 Nov 2017,"sequencer: try to commit without forking 'git commit'

If the commit message does not need to be edited then create the
commit without forking 'git commit'. Taking the best time of ten runs
with a warm cache this reduces the time taken to cherry-pick 10
commits by 27% (from 282ms to 204ms), and the time taken by 'git
rebase --continue' to pick 10 commits by 45% (from 386ms to 212ms) on
my computer running linux. Some of greater saving for rebase is
because it no longer wastes time creating the commit summary just to
throw it away.

The code to create the commit is based on builtin/commit.c. It is
simplified as it doesn't have to deal with merges and modified so that
it does not die but returns an error to make sure the sequencer exits
cleanly, as it would when forking 'git commit'

Even when not forking 'git commit' the commit message is written to a
file and CHERRY_PICK_HEAD is created unnecessarily. This could be
eliminated in future. I hacked up a version that does not write these
files and just passed an strbuf (with the wrong message for fixup and
squash commands) to do_commit() but I couldn't measure any significant
time difference when running cherry-pick or rebase. I think
eliminating the writes properly for rebase would require a bit of
effort as the code would need to be restructured.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/hunk_151.cpp,,,data/crawl/git/old_hunk_151.cpp,data/crawl/git/new_hunk_151.cpp,-1,8,,"error(_(""unable to parse commit author""));","[""addLog""]","[[], [""error"", ""_"", ""unable"", ""to"", ""parse"", ""commit"", ""author""]]",[18069910978467355497],5321,0:00:00
https://github.com/git/git/commit/4b33e60201c12f3a68441807444e3726853a3960,30 Jan 2018,"dir: convert struct sha1_stat to use object_id

Convert the declaration of struct sha1_stat. Adjust all usages of this
struct and replace hash{clr,cmp,cpy} with oid{clr,cmp,cpy} wherever
possible.  Rename it to struct oid_stat.

Rename static function load_sha1_stat to load_oid_stat.

Remove macro EMPTY_BLOB_SHA1_BIN, as it's no longer used.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/hunk_139.cpp,,,data/crawl/git/old_hunk_139.cpp,data/crawl/git/new_hunk_139.cpp,4,4,"printf(""core.excludesfile %s\n"", sha1_to_hex(uc->ss_excludes_file.sha1));","printf(""core.excludesfile %s\n"", oid_to_hex(&uc->ss_excludes_file.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""uc"", ""sha1""], [""oid_to_hex"", ""&uc"", ""oid""]]",[5786604213657616871],5320,0:00:00
https://github.com/git/git/commit/454253f059746e8c9cc96cf3af525d4827a45aa4,02 Feb 2018,"builtin/index-pack: improve hash function abstraction

Convert several uses of unsigned char [20] to struct object_id and
convert various hard-coded constants and uses of SHA-1 functions to use
the_hash_algo.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/hunk_117.cpp,,,data/crawl/git/old_hunk_117.cpp,data/crawl/git/new_hunk_117.cpp,18,18,"printf(""%s\n"", sha1_to_hex(sha1));","printf(""%s\n"", sha1_to_hex(hash));","[""updateVariable""]","[[""sha1""], [""hash""]]",[9639971785104644833],5319,0:00:00
https://github.com/git/git/commit/bc9d4dc5b07c05c7b26a4e781b7538db7c775fc3,08 Feb 2018,"correct error messages for NULL packet_read_line()

The packet_read_line() function dies if it gets an
unexpected EOF. It only returns NULL if we get a flush
packet (or technically, a zero-length ""0004"" packet, but
nobody is supposed to send those, and they are
indistinguishable from a flush in this interface).

Let's correct error messages which claim an unexpected EOF;
it's really an unexpected flush packet.

While we're here, let's also check ""!line"" instead of
""!len"" in the second case. The two events should always
coincide, but checking ""!line"" makes it more obvious that we
are not about to dereference NULL.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_107.cpp,,,data/crawl/git/old_hunk_107.cpp,data/crawl/git/new_hunk_107.cpp,4,4,"die(_(""git fetch-pack: expected ACK/NAK, got EOF""));","die(_(""git fetch-pack: expected ACK/NAK, got a flush packet""));","[""updateContent""]","[[""EOF""], [""a"", ""flush"", ""packet""]]",[1698334937504501024],5318,0:00:00
https://github.com/git/git/commit/a2551953b9619b285128c1e9cf35120fb7555d8f,23 Aug 2017,"pack: move find_pack_entry_one(), is_pack_valid()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",166,data/crawl/git/hunk_292.cpp,,,data/crawl/git/old_hunk_292.cpp,data/crawl/git/new_hunk_292.cpp,43,-1,"printf(""lo %u hi %u rg %u mi %u\n"",
			       lo, hi, hi - lo, mi);",,"[""removeLog""]","[[""printf"", ""lo"", ""%u"", ""hi"", ""%u"", ""rg"", ""%u"", ""mi"", ""%u\\n"", ""lo"", ""hi"", ""hi"", ""lo"", ""mi""], []]",[-13520485624035518394],5317,"88 days, 0:00:00"
https://github.com/git/git/commit/a2551953b9619b285128c1e9cf35120fb7555d8f,23 Aug 2017,"pack: move find_pack_entry_one(), is_pack_valid()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",166,data/crawl/git/hunk_292.cpp,,,data/crawl/git/old_hunk_292.cpp,data/crawl/git/new_hunk_292.cpp,35,-1,"printf(""%02x%02x%02x... lo %u hi %u nr %""PRIu32""\n"",
		       sha1[0], sha1[1], sha1[2], lo, hi, p->num_objects);",,"[""removeLog""]","[[""printf"", ""%02x%02x%02x"", ""lo"", ""%u"", ""hi"", ""%u"", ""nr"", ""%"", ""PRIu32"", ""\\n"", ""sha1[0]"", ""sha1[1]"", ""sha1[2]"", ""lo"", ""hi"", ""p"", ""num_objects""], []]",[-1152435954247837823],5316,"88 days, 0:00:00"
https://github.com/git/git/commit/b537e0b1cfe9b1e52fad2623c8de0de40ab12beb,22 Feb 2018,"remote: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_10.cpp,,,data/crawl/git/old_hunk_10.cpp,data/crawl/git/new_hunk_10.cpp,20,20,"die(_(""'%s' is not a valid remote name""), rename.new);","die(_(""'%s' is not a valid remote name""), rename.new_name);","[""removeVariable"", ""addVariable""]","[[""new""], [""new_name""]]",[-638607553489211481],5315,0:00:00
https://github.com/git/git/commit/878056005e94f5fea00c9ff8999f30a99bf10cae,22 Feb 2018,"sequencer: factor out strbuf_read_file_or_whine()

Reduce code duplication by factoring out a function that reads an entire
file into a strbuf, or reports errors on stderr if something goes wrong.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_4.cpp,,,data/crawl/git/old_hunk_4.cpp,data/crawl/git/new_hunk_4.cpp,11,-1,"error(_(""could not read '%s'.""), todo_file);",,"[""removeLog""]","[[""error"", ""_"", ""could"", ""not"", ""read"", ""%s"", ""todo_file""], []]",[-18762437888396338021],5314,0:00:00
https://github.com/git/git/commit/878056005e94f5fea00c9ff8999f30a99bf10cae,22 Feb 2018,"sequencer: factor out strbuf_read_file_or_whine()

Reduce code duplication by factoring out a function that reads an entire
file into a strbuf, or reports errors on stderr if something goes wrong.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_2.cpp,,,data/crawl/git/old_hunk_2.cpp,data/crawl/git/new_hunk_2.cpp,10,-1,"error(_(""could not read '%s'.""), todo_file.buf);",,"[""removeLog""]","[[""error"", ""_"", ""could"", ""not"", ""read"", ""%s"", ""todo_file"", ""buf""], []]",[-19089462105222578881],5313,0:00:00
