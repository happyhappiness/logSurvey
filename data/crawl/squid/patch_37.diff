----++++src/tests/Stub.list
@@ -48,6 +48,7 @@ STUB_SOURCE= tests/STUB.h \
 	tests/stub_libeui.cc \
 	tests/stub_libformat.cc \
 	tests/stub_libicmp.cc \
+	tests/stub_liblog.cc \
 	tests/stub_libmem.cc \
 	tests/stub_libmgr.cc \
 	tests/stub_libsecurity.cc \
----++++src/tests/stub_liblog.cc
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 1996-2016 The Squid Software Foundation and contributors
+ *
+ * Squid software is distributed under GPLv2+ license and includes
+ * contributions from numerous individuals and organizations.
+ * Please see the COPYING and CONTRIBUTORS files for details.
+ */
+
+#include &quot;squid.h&quot;
+#include &quot;fde.h&quot;
+
+#define STUB_API &quot;log/liblog.la&quot;
+#include &quot;tests/STUB.h&quot;
+
+#include &quot;log/access_log.h&quot;
+void fvdbCountVia(const char *) STUB
+void fvdbCountForw(const char *) STUB
+#if HEADERS_LOG
+void headersLog(int, int, const HttpRequestMethod &amp;, void *) STUB
+#endif
+
+#include &quot;log/Config.h&quot;
+namespace Log
+{
+void LogConfig::parseFormats() STUB
+LogConfig TheConfig;
+}
+
+//#include &quot;log/CustomLog.h&quot;
+#include &quot;log/File.h&quot;
+CBDATA_CLASS_INIT(Logfile);
+Logfile::Logfile(const char *) {STUB}
+//void Logfile::f_linestart(Logfile *) STUB
+//void Logfile::f_linewrite(Logfile *, const char *, size_t) STUB
+//void Logfile::f_lineend(Logfile *) STUB
+//void Logfile::f_flush(Logfile *) STUB
+//void Logfile::f_rotate(Logfile *, const int16_t) STUB
+//void Logfile::f_close(Logfile *) STUB
+Logfile *logfileOpen(const char *, size_t, int) STUB_RETVAL(nullptr)
+void logfileClose(Logfile *) STUB
+void logfileRotate(Logfile *, int16_t) STUB
+void logfileWrite(Logfile *, char *, size_t) STUB
+void logfileFlush(Logfile *) STUB
+void logfilePrintf(Logfile *, const char *, ...) STUB
+void logfileLineStart(Logfile *) STUB
+void logfileLineEnd(Logfile *) STUB
+
+#include &quot;log/Formats.h&quot;
+namespace Log
+{
+namespace Format
+{
+void SquidNative(const AccessLogEntryPointer &amp;, Logfile *) STUB
+void SquidIcap(const AccessLogEntryPointer &amp;, Logfile *) STUB
+void SquidUserAgent(const AccessLogEntryPointer &amp;, Logfile *) STUB
+void SquidReferer(const AccessLogEntryPointer &amp;, Logfile *) STUB
+void SquidCustom(const AccessLogEntryPointer &amp;, CustomLog *) STUB
+void HttpdCommon(const AccessLogEntryPointer &amp;, Logfile *) STUB
+void HttpdCombined(const AccessLogEntryPointer &amp;, Logfile *) STUB
+}
+}
+
+#include &quot;log/ModDaemon.h&quot;
+int logfile_mod_daemon_open(Logfile *, const char *, size_t, int) STUB_RETVAL(0)
+
+#include &quot;log/ModStdio.h&quot;
+int logfile_mod_stdio_open(Logfile *, const char *, size_t, int) STUB_RETVAL(0)
+
+#include &quot;log/ModSyslog.h&quot;
+int logfile_mod_syslog_open(Logfile *, const char *, size_t, int) STUB_RETVAL(0)
+
+#include &quot;log/ModUdp.h&quot;
+int logfile_mod_udp_open(Logfile *, const char *, size_t, int) STUB_RETVAL(0)
+
+#include &quot;log/TcpLogger.h&quot;
+namespace Log
+{
+CBDATA_CLASS_INIT(TcpLogger);
+int TcpLogger::Open(Logfile *, const char *, size_t, int) STUB_RETVAL(0)
+
+/*
+protected:
+    TcpLogger(size_t, bool, Ip::Address);
+    virtual ~TcpLogger();
+    void endGracefully();
+    void logRecord(const char *buf, size_t len);
+    void flush();
+    virtual void start() STUB
+    virtual bool doneAll() const STUB_RETVAL(true)
+    virtual void swanSong() STUB
+*/
+}
+
----++++GitHub