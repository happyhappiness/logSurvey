----++++compat/xstrerror.h
@@ -13,15 +13,9 @@
 #include &lt;errno.h&gt;
 #endif
 
-/** strerror() wrapper replacement.
- *
- * Provides the guarantee that a string is always returned.
- * Where strerror() would have provided NULL this will report the error as unknown.
- */
-#define xstrerror() xstrerr(errno)
-
 /** Provide the textual display of a system error number.
  * A string is always returned.
+ * Where strerror() would have provided NULL this will report the error as unknown.
  * On MS Windows the native Win32 errors are also translated.
  */
 extern const char * xstrerr(int error);
----++++lib/snmplib/parse.c
@@ -1089,8 +1089,9 @@ read_mib(char *filename) {
     char *p;
 
     fp = fopen(filename, &quot;r&quot;);
-    if (fp == NULL) {
-        snmplib_debug(1, &quot;init_mib: %s: %s\n&quot;, filename, xstrerror());
+    if (!fp) {
+        int xerrno = errno;
+        snmplib_debug(1, &quot;init_mib: %s: %s\n&quot;, filename, xstrerr(xerrno));
         return (NULL);
     }
     mbuf[0] = &#39;\0&#39;;
----++++src/CpuAffinitySet.cc
@@ -31,9 +31,10 @@ CpuAffinitySet::apply()
 
     bool success = false;
     if (sched_getaffinity(0, sizeof(theOrigCpuSet), &amp;theOrigCpuSet)) {
+        int xerrno = errno;
         debugs(54, DBG_IMPORTANT, &quot;ERROR: failed to get CPU affinity for &quot;
                &quot;process PID &quot; &lt;&lt; getpid() &lt;&lt; &quot;, ignoring CPU affinity for &quot;
-               "this process: " &lt;&lt; xstrerror());
+               "this process: " &lt;&lt; xstrerr(xerrno));
     } else {
         cpu_set_t cpuSet;
         memcpy(&amp;cpuSet, &amp;theCpuSet, sizeof(cpuSet));
@@ -43,8 +44,9 @@ CpuAffinitySet::apply()
                    &quot;PID &quot; &lt;&lt; getpid() &lt;&lt; &quot;, may be caused by an invalid core in &quot;
                    &quot;&#39;cpu_affinity_map&#39; or by external affinity restrictions&quot;);
         } else if (sched_setaffinity(0, sizeof(cpuSet), &amp;cpuSet)) {
+            int xerrno = errno;
             debugs(54, DBG_IMPORTANT, &quot;ERROR: failed to set CPU affinity for &quot;
-                   "process PID " &lt;&lt; getpid() &lt;&lt; ": " &lt;&lt; xstrerror());
+                   "process PID " &lt;&lt; getpid() &lt;&lt; ": " &lt;&lt; xstrerr(xerrno));
         } else
             success = true;
     }
@@ -57,9 +59,10 @@ CpuAffinitySet::undo()
 {
     if (applied()) {
         if (sched_setaffinity(0, sizeof(theOrigCpuSet), &amp;theOrigCpuSet)) {
+            int xerrno = errno;
             debugs(54, DBG_IMPORTANT, &quot;ERROR: failed to restore original CPU &quot;
                    &quot;affinity for process PID &quot; &lt;&lt; getpid() &lt;&lt; &quot;: &quot; &lt;&lt;
-                   xstrerror());
+                   xstrerr(xerrno));
         }
         CPU_ZERO(&amp;theOrigCpuSet);
     }
----++++src/DiskIO/AIO/AIODiskFile.cc
@@ -132,8 +132,9 @@ AIODiskFile::read(ReadRequest *request)
 
     /* Initiate aio */
     if (aio_read(&amp;qe-&gt;aq_e_aiocb) &lt; 0) {
-        fatalf(&quot;Aiee! aio_read() returned error (%d)  FIXME and wrap file_read !\n&quot;, errno);
-        debugs(79, DBG_IMPORTANT, &quot;WARNING: aio_read() returned error: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        fatalf(&quot;Aiee! aio_read() returned error (%d)  FIXME and wrap file_read !\n&quot;, xerrno);
+        debugs(79, DBG_IMPORTANT, &quot;WARNING: aio_read() returned error: &quot; &lt;&lt; xstrerr(xerrno));
         /* fall back to blocking method */
         //        file_read(fd, request-&gt;buf, request-&gt;len, request-&gt;offset, callback, data);
     }
@@ -190,8 +191,9 @@ AIODiskFile::write(WriteRequest *request)
 
     /* Initiate aio */
     if (aio_write(&amp;qe-&gt;aq_e_aiocb) &lt; 0) {
-        fatalf(&quot;Aiee! aio_write() returned error (%d) FIXME and wrap file_write !\n&quot;, errno);
-        debugs(79, DBG_IMPORTANT, &quot;WARNING: aio_write() returned error: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        fatalf(&quot;Aiee! aio_write() returned error (%d) FIXME and wrap file_write !\n&quot;, xerrno);
+        debugs(79, DBG_IMPORTANT, &quot;WARNING: aio_write() returned error: &quot; &lt;&lt; xstrerr(xerrno));
         /* fall back to blocking method */
         //       file_write(fd, offset, buf, len, callback, data, freefunc);
     }
----++++src/DiskIO/DiskDaemon/DiskdFile.cc
@@ -101,10 +101,11 @@ DiskdFile::create(int flags, mode_t, RefCount&lt;IORequestor&gt; callback)
                      NULL);
 
     if (x &lt; 0) {
+        int xerrno = errno;
         ioCompleted();
         errorOccured = true;
         //        IO-&gt;shm.put (shm_offset);
-        debugs(79, DBG_IMPORTANT, "storeDiskdSend CREATE: " &lt;&lt; xstrerror());
+        debugs(79, DBG_IMPORTANT, "storeDiskdSend CREATE: " &lt;&lt; xstrerr(xerrno));
         notifyClient();
         ioRequestor = NULL;
         return;
@@ -130,10 +131,11 @@ DiskdFile::read(ReadRequest *aRead)
                      aRead);
 
     if (x &lt; 0) {
+        int xerrno = errno;
         ioCompleted();
         errorOccured = true;
         //        IO-&gt;shm.put (shm_offset);
-        debugs(79, DBG_IMPORTANT, "storeDiskdSend READ: " &lt;&lt; xstrerror());
+        debugs(79, DBG_IMPORTANT, "storeDiskdSend READ: " &lt;&lt; xstrerr(xerrno));
         notifyClient();
         ioRequestor = NULL;
         return;
@@ -157,9 +159,10 @@ DiskdFile::close()
                      NULL);
 
     if (x &lt; 0) {
+        int xerrno = errno;
         ioCompleted();
         errorOccured = true;
-        debugs(79, DBG_IMPORTANT, "storeDiskdSend CLOSE: " &lt;&lt; xstrerror());
+        debugs(79, DBG_IMPORTANT, "storeDiskdSend CLOSE: " &lt;&lt; xstrerr(xerrno));
         notifyClient();
         ioRequestor = NULL;
         return;
@@ -294,9 +297,10 @@ DiskdFile::write(WriteRequest *aRequest)
                      aRequest);
 
     if (x &lt; 0) {
+        int xerrno = errno;
         ioCompleted();
         errorOccured = true;
-        debugs(79, DBG_IMPORTANT, "storeDiskdSend WRITE: " &lt;&lt; xstrerror());
+        debugs(79, DBG_IMPORTANT, "storeDiskdSend WRITE: " &lt;&lt; xstrerr(xerrno));
         //        IO-&gt;shm.put (shm_offset);
         notifyClient();
         ioRequestor = NULL;
----++++src/DiskIO/DiskDaemon/DiskdIOStrategy.cc
@@ -124,7 +124,8 @@ DiskdIOStrategy::unlinkFile(char const *path)
              shm_offset);
 
     if (x &lt; 0) {
-        debugs(79, DBG_IMPORTANT, &quot;storeDiskdSend UNLINK: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(79, DBG_IMPORTANT, &quot;storeDiskdSend UNLINK: &quot; &lt;&lt; xstrerr(xerrno));
         ::unlink(buf);      /* XXX EWW! */
         //        shm.put (shm_offset);
     }
@@ -150,14 +151,16 @@ DiskdIOStrategy::init()
     smsgid = msgget((key_t) ikey, 0700 | IPC_CREAT);
 
     if (smsgid &lt; 0) {
-        debugs(50, DBG_CRITICAL, &quot;storeDiskdInit: msgget: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(50, DBG_CRITICAL, MYNAME &lt;&lt; &quot;msgget: &quot; &lt;&lt; xstrerr(xerrno));
         fatal(&quot;msgget failed&quot;);
     }
 
     rmsgid = msgget((key_t) (ikey + 1), 0700 | IPC_CREAT);
 
     if (rmsgid &lt; 0) {
-        debugs(50, DBG_CRITICAL, &quot;storeDiskdInit: msgget: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(50, DBG_CRITICAL, MYNAME &lt;&lt; &quot;msgget: &quot; &lt;&lt; xstrerr(xerrno));
         fatal(&quot;msgget failed&quot;);
     }
 
@@ -248,14 +251,16 @@ SharedMemory::init(int ikey, int magic2)
                 nbufs * SHMBUF_BLKSZ, 0600 | IPC_CREAT);
 
     if (id &lt; 0) {
-        debugs(50, DBG_CRITICAL, &quot;storeDiskdInit: shmget: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(50, DBG_CRITICAL, MYNAME &lt;&lt; &quot;shmget: &quot; &lt;&lt; xstrerr(xerrno));
         fatal(&quot;shmget failed&quot;);
     }
 
     buf = (char *)shmat(id, NULL, 0);
 
     if (buf == (void *) -1) {
-        debugs(50, DBG_CRITICAL, &quot;storeDiskdInit: shmat: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(50, DBG_CRITICAL, MYNAME &lt;&lt; &quot;shmat: &quot; &lt;&lt; xstrerr(xerrno));
         fatal(&quot;shmat failed&quot;);
     }
 
@@ -380,7 +385,8 @@ DiskdIOStrategy::SEND(diomsg *M, int mtype, int id, size_t size, off_t offset, s
         ++diskd_stats.sent_count;
         ++away;
     } else {
-        debugs(79, DBG_IMPORTANT, &quot;storeDiskdSend: msgsnd: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(79, DBG_IMPORTANT, MYNAME &lt;&lt; &quot;msgsnd: &quot; &lt;&lt; xstrerr(xerrno));
         cbdataReferenceDone(M-&gt;callback_data);
         ++send_errors;
         assert(send_errors &lt; 100);
----++++src/DiskIO/DiskDaemon/diskd.cc
@@ -350,7 +350,7 @@ main(int argc, char *argv[])
     hash = hash_create(fsCmp, 1 &lt;&lt; 4, fsHash);
     assert(hash);
     if (fcntl(0, F_SETFL, SQUID_NONBLOCK) &lt; 0) {
-        perror(xstrerror());
+        perror(xstrerr(errno));
         return 1;
     }
     memset(&amp;sa, &#39;\0&#39;, sizeof(sa));
----++++src/DiskIO/DiskThreads/DiskThreadsDiskFile.cc
@@ -143,8 +143,7 @@ DiskThreadsDiskFile::openDone(int, const char *, int anFD, int errflag)
     fd = anFD;
 
     if (errflag || fd &lt; 0) {
-        errno = errflag;
-        debugs(79, DBG_CRITICAL, &quot;DiskThreadsDiskFile::openDone: &quot; &lt;&lt; xstrerror());
+        debugs(79, DBG_CRITICAL, MYNAME &lt;&lt; xstrerr(errflag));
         debugs(79, DBG_IMPORTANT, &quot;\t&quot; &lt;&lt; path_);
         errorOccured = true;
     } else {
----++++src/DiskIO/Mmapped/MmappedFile.cc
@@ -78,11 +78,12 @@ MmappedFile::open(int flags, mode_t, RefCount&lt;IORequestor&gt; callback)
     ioRequestor = callback;
 
     if (fd &lt; 0) {
-        debugs(79,3, HERE &lt;&lt; &quot;open error: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(79,3, &quot;open error: &quot; &lt;&lt; xstrerr(xerrno));
         error_ = true;
     } else {
         ++store_open_disk_fd;
-        debugs(79,3, HERE &lt;&lt; "FD " &lt;&lt; fd);
+        debugs(79,3, "FD " &lt;&lt; fd);
 
         // setup mapping boundaries
         struct stat sb;
----++++src/acl/external/file_userip/ext_file_userip_acl.cc
@@ -251,7 +251,8 @@ main (int argc, char *argv[])
     }
     FILE *FH = fopen(filename, &quot;r&quot;);
     if (!FH) {
-        fprintf(stderr, &quot;%s: FATAL: Unable to open file &#39;%s&#39;: %s&quot;, program_name, filename, xstrerror());
+        int xerrno = errno;
+        fprintf(stderr, &quot;%s: FATAL: Unable to open file &#39;%s&#39;: %s&quot;, program_name, filename, xstrerr(xerrno));
         exit(1);
     }
     current_entry = load_dict(FH);
----++++src/auth/basic/NCSA/basic_ncsa_auth.cc
@@ -52,8 +52,9 @@ read_passwd_file(const char *passwdfile)
     usermap.clear();
     //TODO: change to c++ streams
     f = fopen(passwdfile, &quot;r&quot;);
-    if (NULL == f) {
-        fprintf(stderr, &quot;FATAL: %s: %s\n&quot;, passwdfile, xstrerror());
+    if (!f) {
+        int xerrno = errno;
+        fprintf(stderr, &quot;FATAL: %s: %s\n&quot;, passwdfile, xstrerr(xerrno));
         exit(1);
     }
     unsigned int lineCount = 0;
----++++src/auth/basic/RADIUS/basic_radius_auth.cc
@@ -418,10 +418,11 @@ authenticate(int socket_fd, const char *username, const char *passwd)
          */
         gettimeofday(&amp;sent, NULL);
         if (send(socket_fd, (char *) auth, total_length, 0) &lt; 0) {
+            int xerrno = errno;
             // EAGAIN is expected at high traffic, just retry
             // TODO: block/sleep a few ms to let the apparently full buffer drain ?
-            if (errno != EAGAIN &amp;&amp; errno != EWOULDBLOCK)
-                fprintf(stderr,"ERROR: RADIUS send() failure: %s\n", xstrerror());
+            if (xerrno != EAGAIN &amp;&amp; xerrno != EWOULDBLOCK)
+                fprintf(stderr,"ERROR: RADIUS send() failure: %s\n", xstrerr(xerrno));
             continue;
         }
         while ((time_spent = time_since(&amp;sent)) &lt; 1000000) {
@@ -569,7 +570,8 @@ main(int argc, char **argv)
     }
 #ifdef O_NONBLOCK
     if (fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) | O_NONBLOCK) &lt; 0) {
-        fprintf(stderr,&quot;%s| ERROR: fcntl() failure: %s\n&quot;, argv[0], xstrerror());
+        int xerrno = errno;
+        fprintf(stderr,&quot;%s| ERROR: fcntl() failure: %s\n&quot;, argv[0], xstrerr(xerrno));
         exit(1);
     }
 #endif
----++++src/auth/digest/file/text_backend.cc
@@ -80,7 +80,8 @@ read_passwd_file(const char *passwordFile, int isHa1Mode)
     }
     FILE *f = fopen(passwordFile, &quot;r&quot;);
     if (!f) {
-        fprintf(stderr, &quot;digest_file_auth: cannot open password file: %s\n&quot;, xstrerror());
+        int xerrno = errno;
+        fprintf(stderr, &quot;digest_file_auth: cannot open password file: %s\n&quot;, xstrerr(xerrno));
         exit(1);
     }
     unsigned int lineCount = 0;
----++++src/cache_cf.cc
@@ -293,8 +293,8 @@ parseManyConfigFiles(char* files, int depth)
     memset(&amp;globbuf, 0, sizeof(globbuf));
     for (path = strwordtok(files, &amp;saveptr); path; path = strwordtok(NULL, &amp;saveptr)) {
         if (glob(path, globbuf.gl_pathc ? GLOB_APPEND : 0, NULL, &amp;globbuf) != 0) {
-            fatalf("Unable to find configuration file: %s: %s",
-                   path, xstrerror());
+            int xerrno = errno;
+            fatalf("Unable to find configuration file: %s: %s", path, xstrerr(xerrno));
         }
     }
     for (i = 0; i &lt; (int)globbuf.gl_pathc; ++i) {
@@ -441,8 +441,10 @@ parseOneConfigFile(const char *file_name, unsigned int depth)
         fp = fopen(file_name, &quot;r&quot;);
     }
 
-    if (fp == NULL)
-        fatalf(&quot;Unable to open configuration file: %s: %s&quot;, file_name, xstrerror());
+    if (!fp) {
+        int xerrno = errno;
+        fatalf(&quot;Unable to open configuration file: %s: %s&quot;, file_name, xstrerr(xerrno));
+    }
 
 #if _SQUID_WINDOWS_
     setmode(fileno(fp), O_TEXT);
@@ -3863,13 +3865,14 @@ requirePathnameExists(const char *name, const char *path)
     }
 
     if (stat(path, &amp;sb) &lt; 0) {
-        debugs(0, DBG_CRITICAL, (opt_parse_cfg_only?&quot;FATAL: &quot;:&quot;ERROR: &quot;) &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; path &lt;&lt; &quot;: &quot; &lt;&lt; xstrerror());
+        int xerrno = errno;
+        debugs(0, DBG_CRITICAL, (opt_parse_cfg_only?&quot;FATAL: &quot;:&quot;ERROR: &quot;) &lt;&lt; name &lt;&lt; &quot; &quot; &lt;&lt; path &lt;&lt; &quot;: &quot; &lt;&lt; xstrerr(xerrno));
         // keep going to find more issues if we are only checking the config file with &quot;-k parse&quot;
         if (opt_parse_cfg_only)
             return;
         // this is fatal if it is found during startup or reconfigure
         if (opt_send_signal == -1 || opt_send_signal == SIGHUP)
-            fatalf("%s %s: %s", name, path, xstrerror());
+            fatalf("%s %s: %s", name, path, xstrerr(xerrno));
     }
 }
 
----++++src/client_side.cc
@@ -2453,8 +2453,10 @@ ConnStateData::start()
             (transparent() || port-&gt;disable_pmtu_discovery == DISABLE_PMTU_ALWAYS)) {
 #if defined(IP_MTU_DISCOVER) &amp;&amp; defined(IP_PMTUDISC_DONT)
         int i = IP_PMTUDISC_DONT;
-        if (setsockopt(clientConnection-&gt;fd, SOL_IP, IP_MTU_DISCOVER, &amp;i, sizeof(i)) &lt; 0)
-            debugs(33, 2, &quot;WARNING: Path MTU discovery disabling failed on &quot; &lt;&lt; clientConnection &lt;&lt; &quot; : &quot; &lt;&lt; xstrerror());
+        if (setsockopt(clientConnection-&gt;fd, SOL_IP, IP_MTU_DISCOVER, &amp;i, sizeof(i)) &lt; 0) {
+            int xerrno = errno;
+            debugs(33, 2, &quot;WARNING: Path MTU discovery disabling failed on &quot; &lt;&lt; clientConnection &lt;&lt; &quot; : &quot; &lt;&lt; xstrerr(xerrno));
+        }
 #else
         static bool reported = false;
 
----++++src/clients/FtpGateway.cc
@@ -1775,8 +1775,9 @@ ftpOpenListenSocket(Ftp::Gateway * ftpState, int fallback)
         errno = 0;
         if (setsockopt(ftpState-&gt;ctrl.conn-&gt;fd, SOL_SOCKET, SO_REUSEADDR,
                        (char *) &amp;on, sizeof(on)) == -1) {
+            int xerrno = errno;
             // SO_REUSEADDR is only an optimization, no need to be verbose about error
-            debugs(9, 4, "setsockopt failed: " &lt;&lt; xstrerror());
+            debugs(9, 4, "setsockopt failed: " &lt;&lt; xstrerr(xerrno));
         }
         ftpState-&gt;ctrl.conn-&gt;flags |= COMM_REUSEADDR;
         temp-&gt;flags |= COMM_REUSEADDR;
----++++GitHub