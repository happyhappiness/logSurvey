----++++src/acl/external/AD_group/ext_ad_group_acl.cc
@@ -819,7 +819,7 @@ main(int argc, char *argv[])
                 if (strchr(buf, &#39;\n&#39;) != NULL)
                     break;
             }
-            SEND_ERR("Invalid Request. Too Long.");
+            SEND_BH(HLP_MSG("Invalid Request. Too Long."));
             continue;
         }
         if ((p = strchr(buf, &#39;\n&#39;)) != NULL)
@@ -830,7 +830,7 @@ main(int argc, char *argv[])
         debug(&quot;Got &#39;%s&#39; from Squid (length: %d).\n&quot;, buf, strlen(buf));
 
         if (buf[0] == &#39;\0&#39;) {
-            SEND_ERR("Invalid Request. No Input.");
+            SEND_BH(HLP_MSG("Invalid Request. No Input."));
             continue;
         }
         username = strtok(buf, &quot; &quot;);
@@ -842,7 +842,7 @@ main(int argc, char *argv[])
         numberofgroups = n;
 
         if (NULL == username) {
-            SEND_ERR("Invalid Request. No Username.");
+            SEND_BH(HLP_MSG("Invalid Request. No Username."));
             continue;
         }
         rfc1738_unescape(username);
----++++src/acl/external/LDAP_group/ext_ldap_group_acl.cc
@@ -471,13 +471,13 @@ main(int argc, char **argv)
                 if (strchr(buf, &#39;\n&#39;) != NULL)
                     break;
             }
-            SEND_ERR("");
+            SEND_BH(HLP_MSG("Input too large"));
             continue;
         }
         user = strtok(buf, &quot; \n&quot;);
         if (!user) {
             debug(&quot;%s: Invalid request: No Username given\n&quot;, argv[0]);
-            SEND_ERR("Invalid request. No Username");
+            SEND_BH(HLP_MSG("Invalid request. No Username"));
             continue;
         }
         rfc1738_unescape(user);
@@ -500,11 +500,12 @@ main(int argc, char **argv)
             extension_dn = strtok(NULL, &quot; \n&quot;);
             if (!extension_dn) {
                 debug(&quot;%s: Invalid request: Extension DN configured, but none sent.\n&quot;, argv[0]);
-                SEND_ERR("Invalid Request. Extension DN required.");
+                SEND_BH(HLP_MSG("Invalid Request. Extension DN required"));
                 continue;
             }
             rfc1738_unescape(extension_dn);
         }
+        const char *broken = nullptr;
         while (!found &amp;&amp; user &amp;&amp; (group = strtok(NULL, &quot; \n&quot;)) != NULL) {
             rfc1738_unescape(group);
 
@@ -514,6 +515,7 @@ main(int argc, char **argv)
                 if (strstr(ldapServer, &quot;://&quot;) != NULL) {
                     rc = ldap_initialize(&amp;ld, ldapServer);
                     if (rc != LDAP_SUCCESS) {
+                        broken = HLP_MSG(&quot;Unable to connect to LDAP server&quot;);
                         fprintf(stderr, &quot;%s: ERROR: Unable to connect to LDAPURI:%s\n&quot;, argv[0], ldapServer);
                         break;
                     }
@@ -535,7 +537,8 @@ main(int argc, char **argv)
                     } else
 #endif
                         if ((ld = ldap_init(ldapServer, port)) == NULL) {
-                            fprintf(stderr, &quot;ERROR: Unable to connect to LDAP server:%s port:%d\n&quot;, ldapServer, port);
+                            broken = HLP_MSG(&quot;Unable to connect to LDAP server&quot;);
+                            fprintf(stderr, &quot;ERROR: %s:%s port:%d\n&quot;, broken, ldapServer, port);
                             break;
                         }
                 if (connect_timeout)
@@ -546,8 +549,8 @@ main(int argc, char **argv)
                     version = LDAP_VERSION3;
                 }
                 if (ldap_set_option(ld, LDAP_OPT_PROTOCOL_VERSION, &amp;version) != LDAP_SUCCESS) {
-                    fprintf(stderr, "ERROR: Could not set LDAP_OPT_PROTOCOL_VERSION %d\n",
-                            version);
+                    broken = HLP_MSG("Could not set LDAP_OPT_PROTOCOL_VERSION");
+                    fprintf(stderr, "ERROR: %s %d\n", broken, version);
                     ldap_unbind(ld);
                     ld = NULL;
                     break;
@@ -558,7 +561,8 @@ main(int argc, char **argv)
                         fprintf(stderr, &quot;FATAL: TLS requires LDAP version 3\n&quot;);
                         exit(1);
                     } else if (ldap_start_tls_s(ld, NULL, NULL) != LDAP_SUCCESS) {
-                        fprintf(stderr, &quot;ERROR: Could not Activate TLS connection\n&quot;);
+                        broken = HLP_MSG(&quot;Could not Activate TLS connection&quot;);
+                        fprintf(stderr, &quot;ERROR: %s\n&quot;, broken);
                         ldap_unbind(ld);
                         ld = NULL;
                         break;
@@ -575,28 +579,33 @@ main(int argc, char **argv)
                 if (binddn &amp;&amp; bindpasswd &amp;&amp; *binddn &amp;&amp; *bindpasswd) {
                     rc = ldap_simple_bind_s(ld, binddn, bindpasswd);
                     if (rc != LDAP_SUCCESS) {
-                        fprintf(stderr, PROGRAM_NAME &quot;: WARNING: could not bind to binddn &#39;%s&#39;\n&quot;, ldap_err2string(rc));
+                        broken = HLP_MSG(&quot;could not bind&quot;);
+                        fprintf(stderr, PROGRAM_NAME &quot;: WARNING: %s to binddn &#39;%s&#39;\n&quot;, broken, ldap_err2string(rc));
                         ldap_unbind(ld);
                         ld = NULL;
                         break;
                     }
                 }
                 debug(&quot;Connected OK\n&quot;);
             }
-            if (searchLDAP(ld, group, user, extension_dn) == 0) {
+            int searchResult = searchLDAP(ld, group, user, extension_dn);
+            if (searchResult == 0) {
                 found = 1;
                 break;
-            } else {
+            } else if (searchResult &lt; 0){
                 if (tryagain) {
                     tryagain = 0;
                     ldap_unbind(ld);
                     ld = NULL;
                     goto recover;
                 }
+                broken = HLP_MSG(&quot;LDAP search error&quot;);
             }
         }
         if (found)
             SEND_OK(&quot;&quot;);
+        else if (broken)
+            SEND_BH(broken);
         else {
             SEND_ERR(&quot;&quot;);
         }
@@ -722,14 +731,14 @@ searchLDAPGroup(LDAP * ld, const char *group, const char *member, const char *ex
     if (!build_filter(filter, searchfilter, member, group)) {
         std::cerr &lt;&lt; PROGRAM_NAME  &lt;&lt; &quot;: ERROR: Failed to construct LDAP search filter. filter=\&quot;&quot; &lt;&lt;
                   filter.c_str() &lt;&lt; &quot;\&quot;, user=\&quot;&quot; &lt;&lt; member &lt;&lt; &quot;\&quot;, group=\&quot;&quot; &lt;&lt; group &lt;&lt; &quot;\&quot;&quot; &lt;&lt; std::endl;
-        return 1;
+        return -1;
     }
     debug(&quot;group filter &#39;%s&#39;, searchbase &#39;%s&#39;\n&quot;, filter.c_str(), searchbase.c_str());
 
     rc = ldap_search_s(ld, searchbase.c_str(), searchscope, filter.c_str(), searchattr, 1, &amp;res);
     LdapResult ldapRes(res, ldap_msgfree);
     if (!ldap_search_ok(rc))
-        return 1;
+        return -1;
 
     return ldap_first_entry(ld, ldapRes.get()) ? 0 : 1;
 }
@@ -764,7 +773,7 @@ searchLDAP(LDAP * ld, char *group, char *login, char *extension_dn)
         rc = ldap_search_s(ld, searchbase.c_str(), searchscope, filter.c_str(), searchattr, 1, &amp;res);
         LdapResult ldapRes(res, ldap_msgfree);
         if (!ldap_search_ok(rc))
-            return 1;
+            return -1;
         entry = ldap_first_entry(ld, ldapRes.get());
         if (!entry) {
             std::cerr &lt;&lt; PROGRAM_NAME &lt;&lt; &quot;: WARNING: User &#39;&quot; &lt;&lt; login &lt;&lt;
----++++src/acl/external/LM_group/ext_lm_group_acl.cc
@@ -561,7 +561,7 @@ main(int argc, char *argv[])
                 if (strchr(buf, &#39;\n&#39;) != NULL)
                     break;
             }
-            SEND_ERR("Input Too Long.");
+            SEND_BH(HLP_MSG("Input Too Long."));
             continue;
         }
         if ((p = strchr(buf, &#39;\n&#39;)) != NULL)
@@ -572,7 +572,7 @@ main(int argc, char *argv[])
         debug(&quot;Got &#39;%s&#39; from Squid (length: %d).\n&quot;, buf, strlen(buf));
 
         if (buf[0] == &#39;\0&#39;) {
-            SEND_ERR("Invalid Request.");
+            SEND_BH(HLP_MSG("Invalid Request."));
             continue;
         }
         username = strtok(buf, &quot; &quot;);
@@ -583,7 +583,7 @@ main(int argc, char *argv[])
         groups[n] = NULL;
 
         if (NULL == username) {
-            SEND_ERR("Invalid Request. No Username.");
+            SEND_BH(HLP_MSG("Invalid Request. No Username."));
             continue;
         }
         rfc1738_unescape(username);
----++++src/acl/external/SQL_session/ext_sql_session_acl.pl.in
@@ -195,7 +195,7 @@ while (&lt;&gt;) {
 
     print(stderr &quot;Received: Channel=&quot;.$cid.&quot;, UID=&#39;&quot;.$uid.&quot;&#39;\n&quot;) if ($debug);
 
-    $status = $cid . &quot; ERR message=\&quot;database error\&quot;&quot;;
+    $status = $cid . &quot; BH message=\&quot;database error\&quot;&quot;;
     my $sth = query_db($uid) || next;
     print(stderr &quot;Rows: &quot;. $sth-&gt;rows().&quot;\n&quot;) if ($debug);
     $status = $cid . &quot; ERR message=\&quot;unknown UID &#39;&quot;.$uid.&quot;&#39;\&quot;&quot;;
----++++src/acl/external/eDirectory_userip/ext_edirectory_userip_acl.cc
@@ -1758,7 +1758,7 @@ MainSafe(int argc, char **argv)
         /* No space given, but group string is required --&gt; ERR */
         if ((edui_conf.mode &amp; EDUI_MODE_GROUP) &amp;&amp; (p == NULL)) {
             debug(&quot;while() -&gt; Search group is missing. (required)\n&quot;);
-            local_printfx("ERR message=\"(Search Group Required)\"\n");
+            local_printfx("BH message=\"(Search Group Required)\"\n");
             continue;
         }
         x = 0;
@@ -1801,7 +1801,7 @@ MainSafe(int argc, char **argv)
             if (x != LDAP_ERR_SUCCESS) {
                 /* Unable to bind */
                 debug(&quot;BindLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
-                local_printfx("ERR message=\"(BindLDAP: %s - %s)\"\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                local_printfx("BH message=\"(BindLDAP: %s - %s)\"\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
                 continue;
             } else
                 debug(&quot;BindLDAP(-, %s, %s, (LDAP_AUTH_TLS)) -&gt; %s\n&quot;, edui_conf.dn, edui_conf.passwd, ErrLDAP(x));
@@ -1812,7 +1812,7 @@ MainSafe(int argc, char **argv)
                 if (x != LDAP_ERR_SUCCESS) {
                     /* Unable to bind */
                     debug(&quot;BindLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
-                    local_printfx("ERR message=\"(BindLDAP: %s - %s)\"\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                    local_printfx("BH message=\"(BindLDAP: %s - %s)\"\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
                     continue;
                 } else
                     debug(&quot;BindLDAP(-, %s, %s, (LDAP_AUTH_SIMPLE)) -&gt; %s\n&quot;, edui_conf.dn, edui_conf.passwd, ErrLDAP(x));
@@ -1822,7 +1822,7 @@ MainSafe(int argc, char **argv)
                 if (x != LDAP_ERR_SUCCESS) {
                     /* Unable to bind */
                     debug(&quot;BindLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
-                    local_printfx("ERR message=\"(BindLDAP: %s - %s)\"\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                    local_printfx("BH message=\"(BindLDAP: %s - %s)\"\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
                     continue;
                 } else
                     debug(&quot;BindLDAP(-, -, -, (LDAP_AUTH_NONE)) -&gt; %s\n&quot;, ErrLDAP(x));
@@ -1841,7 +1841,7 @@ MainSafe(int argc, char **argv)
             /* Everything failed --&gt; ERR */
             debug(&quot;while() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
             CloseLDAP(&amp;edui_ldap);
-            local_printfx("ERR message=\"(General Failure: %s)\"\n", ErrLDAP(x));
+            local_printfx("BH message=\"(General Failure: %s)\"\n", ErrLDAP(x));
             continue;
         }
         edui_ldap.err = -1;
@@ -1856,32 +1856,35 @@ MainSafe(int argc, char **argv)
                 x = ConvertIP(&amp;edui_ldap, bufb);
                 if (x &lt; 0) {
                     debug(&quot;ConvertIP() -&gt; %s\n&quot;, ErrLDAP(x));
-                    local_printfx("ERR message=\"(ConvertIP: %s)\"\n", ErrLDAP(x));
+                    local_printfx("BH message=\"(ConvertIP: %s)\"\n", ErrLDAP(x));
                 } else {
                     edui_ldap.err = -1;
                     debug(&quot;ConvertIP(-, %s) -&gt; Result[%d]: %s\n&quot;, bufb, x, edui_ldap.search_ip);
                     x = SearchFilterLDAP(&amp;edui_ldap, bufa);
                     if (x &lt; 0) {
                         debug(&quot;SearchFilterLDAP() -&gt; %s\n&quot;, ErrLDAP(x));
-                        local_printfx("ERR message=\"(SearchFilterLDAP: %s)\"\n", ErrLDAP(x));
+                        local_printfx("BH message=\"(SearchFilterLDAP: %s)\"\n", ErrLDAP(x));
                     } else {
                         /* Do Search */
                         edui_ldap.err = -1;
                         debug(&quot;SearchFilterLDAP(-, %s) -&gt; Length: %u\n&quot;, bufa, x);
                         x = SearchLDAP(&amp;edui_ldap, edui_ldap.scope, edui_ldap.search_filter, (char **) &amp;search_attrib);
                         if (x != LDAP_ERR_SUCCESS) {
                             debug(&quot;SearchLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
-                            local_printfx("ERR message=\"(SearchLDAP: %s)\"\n", ErrLDAP(x));
+                            local_printfx("BH message=\"(SearchLDAP: %s)\"\n", ErrLDAP(x));
                         } else {
                             edui_ldap.err = -1;
                             debug(&quot;SearchLDAP(-, %d, %s, -) -&gt; %s\n&quot;, edui_conf.scope, edui_ldap.search_filter, ErrLDAP(x));
                             x = SearchIPLDAP(&amp;edui_ldap);
-                            if (x != LDAP_ERR_SUCCESS) {
-                                debug("SearchIPLDAP() -&gt; %s (LDAP: %s)\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                            if (x == LDAP_ERR_NOTFOUND) {
+                                debug("SearchIPLDAP() -&gt; %s\n", ErrLDAP(x));
                                 local_printfx(&quot;ERR message=\&quot;(SearchIPLDAP: %s)\&quot;\n&quot;, ErrLDAP(x));
-                            } else {
+                            } else if (x == LDAP_ERR_SUCCESS) {
                                 debug(&quot;SearchIPLDAP(-, %s) -&gt; %s\n&quot;, edui_ldap.userid, ErrLDAP(x));
                                 local_printfx(&quot;OK user=%s\n&quot;, edui_ldap.userid);            /* Got userid --&gt; OK user=&lt;userid&gt; */
+                            } else {
+                                debug(&quot;SearchIPLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                                local_printfx(&quot;BH message=\&quot;(SearchIPLDAP: %s)\&quot;\n&quot;, ErrLDAP(x));
                             }
                         }
                         /* Clear for next query */
@@ -1890,38 +1893,41 @@ MainSafe(int argc, char **argv)
                 }
             } else {
                 debug(&quot;StringSplit() -&gt; Error: %&quot; PRIuSIZE &quot;\n&quot;, i);
-                local_printfx("ERR message=\"(StringSplit Error %" PRIuSIZE ")\"\n", i);
+                local_printfx("BH message=\"(StringSplit Error %" PRIuSIZE ")\"\n", i);
             }
         } else {
             /* No group to match against, only an IP */
             x = ConvertIP(&amp;edui_ldap, bufa);
             if (x &lt; 0) {
                 debug(&quot;ConvertIP() -&gt; %s\n&quot;, ErrLDAP(x));
-                local_printfx("ERR message=\"(ConvertIP: %s)\"\n", ErrLDAP(x));
+                local_printfx("BH message=\"(ConvertIP: %s)\"\n", ErrLDAP(x));
             } else {
                 debug(&quot;ConvertIP(-, %s) -&gt; Result[%d]: %s\n&quot;, bufa, x, edui_ldap.search_ip);
                 /* Do search */
                 x = SearchFilterLDAP(&amp;edui_ldap, NULL);
                 if (x &lt; 0) {
                     debug(&quot;SearchFilterLDAP() -&gt; %s\n&quot;, ErrLDAP(x));
-                    local_printfx("ERR message=\"(SearchFilterLDAP: %s)\"\n", ErrLDAP(x));
+                    local_printfx("BH message=\"(SearchFilterLDAP: %s)\"\n", ErrLDAP(x));
                 } else {
                     edui_ldap.err = -1;
                     debug(&quot;SearchFilterLDAP(-, NULL) -&gt; Length: %u\n&quot;, x);
                     x = SearchLDAP(&amp;edui_ldap, edui_ldap.scope, edui_ldap.search_filter, (char **) &amp;search_attrib);
                     if (x != LDAP_ERR_SUCCESS) {
                         debug(&quot;SearchLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(x));
-                        local_printfx("ERR message=\"(SearchLDAP: %s)\"\n", ErrLDAP(x));
+                        local_printfx("BH message=\"(SearchLDAP: %s)\"\n", ErrLDAP(x));
                     } else {
                         edui_ldap.err = -1;
                         debug(&quot;SearchLDAP(-, %d, %s, -) -&gt; %s\n&quot;, edui_conf.scope, edui_ldap.search_filter, ErrLDAP(x));
                         x = SearchIPLDAP(&amp;edui_ldap);
-                        if (x != LDAP_ERR_SUCCESS) {
-                            debug("SearchIPLDAP() -&gt; %s (LDAP: %s)\n", ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                        if (x == LDAP_ERR_NOTFOUND) {
+                            debug("SearchIPLDAP() -&gt; %s\n", ErrLDAP(x));
                             local_printfx(&quot;ERR message=\&quot;(SearchIPLDAP: %s)\&quot;\n&quot;, ErrLDAP(x));
-                        } else {
+                        } else if (x == LDAP_ERR_SUCCESS) {
                             debug(&quot;SearchIPLDAP(-, %s) -&gt; %s\n&quot;, edui_ldap.userid, ErrLDAP(x));
                             local_printfx(&quot;OK user=%s\n&quot;, edui_ldap.userid);                /* Got a userid --&gt; OK user=&lt;userid&gt; */
+                        } else if (x != LDAP_ERR_SUCCESS) {
+                            debug(&quot;SearchIPLDAP() -&gt; %s (LDAP: %s)\n&quot;, ErrLDAP(x), ldap_err2string(edui_ldap.err));
+                            local_printfx(&quot;BH message=\&quot;(SearchIPLDAP: %s)\&quot;\n&quot;, ErrLDAP(x));
                         }
                     }
                 }
----++++src/acl/external/file_userip/ext_file_userip_acl.cc
@@ -266,15 +266,15 @@ main (int argc, char *argv[])
                 if (strchr(line, &#39;\n&#39;) != NULL)
                     break;
             }
-            SEND_ERR("Input Too Large.");
+            SEND_BH(HLP_MSG("Input Too Large."));
             continue;
         }
         *cp = &#39;\0&#39;;
         address = strtok(line, &quot; \t&quot;);
         username = strtok(NULL, &quot; \t&quot;);
         if (!address || !username) {
             debug(&quot;%s: unable to read tokens\n&quot;, program_name);
-            SEND_ERR("Invalid Input.");
+            SEND_BH(HLP_MSG("Invalid Input."));
             continue;
         }
         rfc1738_unescape(address);
----++++src/acl/external/time_quota/ext_time_quota_acl.cc
@@ -452,7 +452,7 @@ int main(int argc, char **argv)
         // we expect the following line syntax: %LOGIN
         const char *user_key = strtok(request, &quot; \n&quot;);
         if (!user_key) {
-            SEND_BH("message=\"User name missing\"");
+            SEND_BH(HLP_MSG("User name missing"));
             continue;
         }
         processActivity(user_key);
----++++src/acl/external/unix_group/check_group.cc
@@ -203,12 +203,12 @@ main(int argc, char *argv[])
                 if (strchr(buf, &#39;\n&#39;) != NULL)
                     break;
             }
-            SEND_ERR("Username Input too large.");
+            SEND_BH(HLP_MSG("Username Input too large."));
             continue;
         }
         *p = &#39;\0&#39;;
         if ((p = strtok(buf, &quot; &quot;)) == NULL) {
-            SEND_ERR("No username given.");
+            SEND_BH(HLP_MSG("No username given."));
             continue;
         } else {
             user = p;
----++++GitHub