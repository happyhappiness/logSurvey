@@ -34,6 +34,7 @@ int cmd_clean(int argc, const char **argv, const char *prefix)
 	struct dir_struct dir;
 	const char *path, *base;
 	static const char **pathspec;
+	int prefix_offset = 0;
 	char *seen = NULL;
 	struct option options[] = {
 		OPT__QUIET(&quiet),
@@ -71,6 +72,8 @@ int cmd_clean(int argc, const char **argv, const char *prefix)
 	if (!ignored)
 		setup_standard_excludes(&dir);
 
+	if (prefix)
+		prefix_offset = strlen(prefix);
 	pathspec = get_pathspec(prefix, argv);
 	read_cache();
 
@@ -132,26 +135,32 @@ int cmd_clean(int argc, const char **argv, const char *prefix)
 		if (S_ISDIR(st.st_mode)) {
 			strbuf_addstr(&directory, ent->name);
 			if (show_only && (remove_directories || matches)) {
-				printf("Would remove %s\n", directory.buf);
+				printf("Would remove %s\n",
+				       directory.buf + prefix_offset);
 			} else if (quiet && (remove_directories || matches)) {
 				remove_dir_recursively(&directory, 0);
 			} else if (remove_directories || matches) {
-				printf("Removing %s\n", directory.buf);
+				printf("Removing %s\n",
+				       directory.buf + prefix_offset);
 				remove_dir_recursively(&directory, 0);
 			} else if (show_only) {
-				printf("Would not remove %s\n", directory.buf);
+				printf("Would not remove %s\n",
+				       directory.buf + prefix_offset);
 			} else {
-				printf("Not removing %s\n", directory.buf);
+				printf("Not removing %s\n",
+				       directory.buf + prefix_offset);
 			}
 			strbuf_reset(&directory);
 		} else {
 			if (pathspec && !matches)
 				continue;
 			if (show_only) {
-				printf("Would remove %s\n", ent->name);
+				printf("Would remove %s\n",
+				       ent->name + prefix_offset);
 				continue;
 			} else if (!quiet) {
-				printf("Removing %s\n", ent->name);
+				printf("Removing %s\n",
+				       ent->name + prefix_offset);
 			}
 			unlink(ent->name);
 		}