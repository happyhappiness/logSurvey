@@ -38,12 +38,12 @@
 #include "squid-old.h"
 #include "DelayId.h"
 
-DelayId::DelayId() {}
-
-void
-DelayId::delayRead(DeferredRead const&)
-{}
+#define STUB_API "stub_DelayId.cc"
+#include "tests/STUB.h"
 
+DelayId::DelayId() {}
 DelayId::~DelayId() {}
 
+void DelayId::delayRead(DeferredRead const&) STUB_NOP
+
 #endif /* USE_DELAY_POOLS */
@@ -2,6 +2,9 @@
 #include "HelperChildConfig.h"
 #include "globals.h"
 
+#define STUB_API "stub_HelperChildconfig.cc"
+#include "tests/STUB.h"
+
 #include <string.h>
 
 HelperChildConfig::HelperChildConfig(const unsigned int m):
@@ -26,9 +29,4 @@ HelperChildConfig::needNew() const
     return (n_max - n_active);
 }
 
-void
-HelperChildConfig::parseConfig()
-{
-    fprintf(stderr, "HelperChildConfig::parseConfig not implemented.");
-    exit(1);
-}
+void HelperChildConfig::parseConfig() STUB
@@ -6,15 +6,15 @@
 #include "tests/STUB.h"
 
 HttpRequest::HttpRequest() : HttpMsg(hoRequest) STUB
-        HttpRequest::HttpRequest(const HttpRequestMethod& method, AnyP::ProtocolType protocol, const char *aUrlpath) : HttpMsg(hoRequest) STUB
-        HttpRequest::~HttpRequest() STUB
-        void HttpRequest::packFirstLineInto(Packer * p, bool full_uri) const STUB
-        bool HttpRequest::sanityCheckStartLine(MemBuf *buf, const size_t hdr_len, http_status *error) STUB_RETVAL(false)
-        void HttpRequest::hdrCacheInit() STUB
-        void HttpRequest::reset() STUB
-        bool HttpRequest::expectingBody(const HttpRequestMethod& unused, int64_t&) const STUB_RETVAL(false)
-        void HttpRequest::initHTTP(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aUrlpath) STUB
-        bool HttpRequest::parseFirstLine(const char *start, const char *end) STUB_RETVAL(false)
-        HttpRequest * HttpRequest::clone() const STUB_RETVAL(NULL)
-        bool HttpRequest::inheritProperties(const HttpMsg *aMsg) STUB_RETVAL(false)
-        int64_t HttpRequest::getRangeOffsetLimit() STUB_RETVAL(0)
+HttpRequest::HttpRequest(const HttpRequestMethod& method, AnyP::ProtocolType protocol, const char *aUrlpath) : HttpMsg(hoRequest) STUB
+HttpRequest::~HttpRequest() STUB
+void HttpRequest::packFirstLineInto(Packer * p, bool full_uri) const STUB
+bool HttpRequest::sanityCheckStartLine(MemBuf *buf, const size_t hdr_len, http_status *error) STUB_RETVAL(false)
+void HttpRequest::hdrCacheInit() STUB
+void HttpRequest::reset() STUB
+bool HttpRequest::expectingBody(const HttpRequestMethod& unused, int64_t&) const STUB_RETVAL(false)
+void HttpRequest::initHTTP(const HttpRequestMethod& aMethod, AnyP::ProtocolType aProtocol, const char *aUrlpath) STUB
+bool HttpRequest::parseFirstLine(const char *start, const char *end) STUB_RETVAL(false)
+HttpRequest * HttpRequest::clone() const STUB_RETVAL(NULL)
+bool HttpRequest::inheritProperties(const HttpMsg *aMsg) STUB_RETVAL(false)
+int64_t HttpRequest::getRangeOffsetLimit() STUB_RETVAL(0)
@@ -1,6 +1,9 @@
 /*
  * A stub implementation of the Debug.h API.
  * For use by test binaries which do not need the full context debugging
+ *
+ * Note: it doesn't use the STUB API as the functions defined here must
+ * not abort the unit test.
  */
 #include "squid.h"
 #include "Debug.h"
@@ -26,19 +26,19 @@ bool Comm::ConnOpener::doneAll() const STUB_RETVAL(false)
 void Comm::ConnOpener::start() STUB
 void Comm::ConnOpener::swanSong() STUB
 Comm::ConnOpener::ConnOpener(Comm::ConnectionPointer &, AsyncCall::Pointer &, time_t) : AsyncJob("STUB Comm::ConnOpener") STUB
-        Comm::ConnOpener::~ConnOpener() STUB
-        void Comm::ConnOpener::setHost(const char *) STUB
-        const char * Comm::ConnOpener::getHost() const STUB_RETVAL(NULL)
+Comm::ConnOpener::~ConnOpener() STUB
+void Comm::ConnOpener::setHost(const char *) STUB
+const char * Comm::ConnOpener::getHost() const STUB_RETVAL(NULL)
 
 #include "comm/forward.h"
-        bool Comm::IsConnOpen(const Comm::ConnectionPointer &) STUB_RETVAL(false)
+bool Comm::IsConnOpen(const Comm::ConnectionPointer &) STUB_RETVAL(false)
 
 #include "comm/IoCallback.h"
-        void Comm::IoCallback::setCallback(iocb_type type, AsyncCall::Pointer &cb, char *buf, FREE *func, int sz) STUB
-        void Comm::IoCallback::selectOrQueueWrite() STUB
-        void Comm::IoCallback::cancel(const char *reason) STUB
-        void Comm::IoCallback::finish(comm_err_t code, int xerrn) STUB
-        Comm::CbEntry *Comm::iocb_table = NULL;
+void Comm::IoCallback::setCallback(iocb_type type, AsyncCall::Pointer &cb, char *buf, FREE *func, int sz) STUB
+void Comm::IoCallback::selectOrQueueWrite() STUB
+void Comm::IoCallback::cancel(const char *reason) STUB
+void Comm::IoCallback::finish(comm_err_t code, int xerrn) STUB
+Comm::CbEntry *Comm::iocb_table = NULL;
 void Comm::CallbackTableInit() STUB
 void Comm::CallbackTableDestruct() STUB
 