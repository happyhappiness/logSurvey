@@ -1,6 +1,6 @@
 
 /*
- * $Id: client_side.cc,v 1.270 1998/04/09 20:42:05 rousskov Exp $
+ * $Id: client_side.cc,v 1.271 1998/04/09 21:15:01 rousskov Exp $
  *
  * DEBUG: section 33    Client-side Routines
  * AUTHOR: Duane Wessels
@@ -605,10 +605,10 @@ clientUpdateCounters(clientHttpRequest * http)
 	debug(33,2) ("clientUpdateCounters: peer %s real/guess: %d/%d for %s!\n",
 	    H->cd_host, real_hit, guess_hit, http->request->host);
 	cacheDigestGuessStatsUpdate(&Counter.cd.guess, real_hit, guess_hit);
-	if (peer)
+	if (peer) {
 	    cacheDigestGuessStatsUpdate(&peer->digest.stats.guess,
 		real_hit, guess_hit);
-	else {
+	} else {
 	    /* temporary paranoid debug */
 	    static int max_count = 200;
 	    if (max_count > 0) {
@@ -1,6 +1,6 @@
 
 /*
- * $Id: peer_digest.cc,v 1.7 1998/04/09 20:42:06 rousskov Exp $
+ * $Id: peer_digest.cc,v 1.8 1998/04/09 21:15:02 rousskov Exp $
  *
  * DEBUG: section 72    Peer Digest Routines
  * AUTHOR: Alex Rousskov
@@ -515,9 +515,12 @@ peerDigestFetchFinish(DigestFetchState *fetch, char *buf, const char *err_msg)
     peer->digest.last_req_timestamp = squid_curtime;
     peer->digest.last_fetch_resp_time = fetch_resp_time;
     EBIT_CLR(peer->digest.flags, PD_REQUESTED);
-    /* update stats */
+    /* update global stats */
     kb_incr(&Counter.cd.kbytes_recv, (size_t)b_read);
     Counter.cd.msgs_recv++;
+    /* update peer stats */
+    kb_incr(&peer->digest.stats.kbytes_recv, (size_t)b_read);
+    peer->digest.stats.msgs_recv++;
     debug(72, 2) ("peerDigestFetchFinish: %s done; took: %d secs; expires: %s\n",
 	peer->host, fetch_resp_time, mkrfc1123(expires));
 }
@@ -1,6 +1,6 @@
 
 /*
- * $Id: stat.cc,v 1.229 1998/04/09 20:42:07 rousskov Exp $
+ * $Id: stat.cc,v 1.230 1998/04/09 21:15:02 rousskov Exp $
  *
  * DEBUG: section 18    Cache Manager Statistics
  * AUTHOR: Harvest Derived
@@ -996,14 +996,14 @@ statCountersDump(StoreEntry * sentry)
 	f->cd.msgs_sent);
     storeAppendPrintf(sentry, "cd.msgs_recv = %d\n",
 	f->cd.msgs_recv);
-    storeAppendPrintf(sentry, "cd.memory = %d\n",
-	(int)f->cd.memory.kb);
-    storeAppendPrintf(sentry, "cd.local_memory = %d\n",
-	store_digest ? store_digest->mask_size/1024 : 0);
     storeAppendPrintf(sentry, "cd.kbytes_sent = %d\n",
 	(int) f->cd.kbytes_sent.kb);
     storeAppendPrintf(sentry, "cd.kbytes_recv = %d\n",
 	(int) f->cd.kbytes_recv.kb);
+    storeAppendPrintf(sentry, "cd.memory = %d\n",
+	(int)f->cd.memory.kb);
+    storeAppendPrintf(sentry, "cd.local_memory = %d\n",
+	store_digest ? store_digest->mask_size/1024 : 0);
 #endif
 
 #if TOO_MUCH_OUTPUT
@@ -1041,6 +1041,16 @@ statPeerSelect(StoreEntry * sentry)
     storeAppendPrintf(sentry, "\nPer-peer statistics:\n");
     for (peer = getFirstPeer(); peer; peer = getNextPeer(peer)) {
 	cacheDigestGuessStatsReport(&peer->digest.stats.guess, sentry, peer->host);
+	storeAppendPrintf(sentry, "peer.msgs_sent = %d\n",
+	    peer->digest.stats.msgs_sent);
+	storeAppendPrintf(sentry, "peer.msgs_recv = %d\n",
+	    peer->digest.stats.msgs_recv);
+	storeAppendPrintf(sentry, "peer.kbytes_sent = %d\n",
+	    (int) peer->digest.stats.kbytes_sent.kb);
+	storeAppendPrintf(sentry, "peer.kbytes_recv = %d\n",
+	    (int) peer->digest.stats.kbytes_recv.kb);
+	storeAppendPrintf(sentry, "peer.local_memory = %d\n",
+	    peer->digest.cd ? peer->digest.cd->mask_size/1024 : 0);
 	storeAppendPrintf(sentry, "\n");
     }
 
@@ -1130,8 +1140,10 @@ statDigestBlob(StoreEntry * sentry)
 	(int) f->cd.memory.kb);
     storeAppendPrintf(sentry, "cd.store_memory = %d\n",
 	(int) (store_digest ? store_digest->mask_size/1024 : 0));
+    storeAppendPrintf(sentry, "\n");
 #endif
     statPeerSelect(sentry);
+    storeAppendPrintf(sentry, "\n");
     storeDigestReport(sentry);
 }
 
@@ -821,6 +821,10 @@ struct _PeerDigest {
     struct {
 	cd_guess_stats guess;
 	int used_count;
+	int msgs_sent;
+	int msgs_recv;
+	kb_t kbytes_sent;
+	kb_t kbytes_recv;
     } stats;
 };
 