@@ -410,31 +410,24 @@ static unsigned long write_object(struct sha1file *f,
 		z_stream stream;
 		unsigned long maxsize;
 		void *out;
-		if (entry->delta_data && usable_delta) {
-			buf = entry->delta_data;
+		if (!usable_delta) {
+			buf = read_sha1_file(entry->sha1, &obj_type, &size);
+			if (!buf)
+				die("unable to read %s", sha1_to_hex(entry->sha1));
+		} else if (entry->delta_data) {
 			size = entry->delta_size;
+			buf = entry->delta_data;
+			entry->delta_data = NULL;
 			obj_type = (allow_ofs_delta && entry->delta->offset) ?
 				OBJ_OFS_DELTA : OBJ_REF_DELTA;
 		} else {
 			buf = read_sha1_file(entry->sha1, &type, &size);
 			if (!buf)
 				die("unable to read %s", sha1_to_hex(entry->sha1));
-			if (size != entry->size)
-				die("object %s size inconsistency (%lu vs %lu)",
-				    sha1_to_hex(entry->sha1), size, entry->size);
-			if (usable_delta) {
-				buf = delta_against(buf, size, entry);
-				size = entry->delta_size;
-				obj_type = (allow_ofs_delta && entry->delta->offset) ?
-					OBJ_OFS_DELTA : OBJ_REF_DELTA;
-			} else {
-				/*
-				 * recover real object type in case
-				 * check_object() wanted to re-use a delta,
-				 * but we couldn't since base was in previous split pack
-				 */
-				obj_type = type;
-			}
+			buf = delta_against(buf, size, entry);
+			size = entry->delta_size;
+			obj_type = (allow_ofs_delta && entry->delta->offset) ?
+				OBJ_OFS_DELTA : OBJ_REF_DELTA;
 		}
 		/* compress the data to store and put compressed length in datalen */
 		memset(&stream, 0, sizeof(stream));