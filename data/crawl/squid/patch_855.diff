@@ -9,6 +9,8 @@ errordir = $(datadir)/errors
 ##dist-hook eveything
 
 DEFAULT_ERROR_DIR	= $(errordir)
+DEFAULT_STYLESHEET	= $(sysconfdir)/errorpage.css
+
 
 # List of automated translations possible:
 TRANSLATIONS = \
@@ -70,7 +72,15 @@ install-data-local:
 			$(INSTALL_DATA) $$f $(DESTDIR)$(DEFAULT_ERROR_DIR)/$$l; \
 		done; \
 	  fi \
-	done
+	done; \
+        $(INSTALL_DATA) $(srcdir)/errorpage.css $(DESTDIR)$(DEFAULT_STYLESHEET).default; \
+        @if test -f $(DESTDIR)$(DEFAULT_STYLESHEET) ; then \
+                echo "$@ will not overwrite existing $(DESTDIR)$(DEFAULT_STYLESHEET)" ; \
+        else \
+                echo "$(INSTALL_DATA) $(srcdir)/errorpage.css $(DESTDIR)$(DEFAULT_STYLESHEET)"; \
+                $(INSTALL_DATA) $(srcdir)/errorpage.css $(DESTDIR)$(DEFAULT_STYLESHEET); \
+        fi
+
 
 uninstall-local:
 	@ for l in $(LANGUAGES); do \
@@ -84,7 +94,8 @@ uninstall-local:
 	        	rm -f $(DESTDIR)$(DEFAULT_ERROR_DIR)/$$l/`basename $$f`; \
 		done; \
 	  fi \
-	done
+	done; \
+	rm -f $(DESTDIR)$(DEFAULT_STYLESHEET).default
 
 # undocumented hack.  You can use this target to create multi-lingual
 # error pages.  For example:
@@ -130,7 +141,8 @@ dist-hook:
 		cp -p $(srcdir)/$$lang/ERR_*  $(distdir)/$$lang \
 		  || exit 1; \
 	  fi; \
-	done
+	done; \
+	cp $(srcdir)/errorpage.css  $(distdir)/errorpage.css
 
 translate:
 	@ if test "$(PO2HTML)" != "" ; then \
@@ -0,0 +1,49 @@
+
+// page basics
+html body {
+    background-color:#ffffff;
+    font-family:verdana,sans-serif
+}
+
+// initial title
+h1 {
+}
+
+// page sub-title
+h2 {
+}
+
+// general text
+p {
+}
+
+// error brief description
+#error p {
+}
+
+// some data which may have caused the prblem
+#data {
+}
+
+// the error message received from the system or other software
+#sysmsg {
+}
+
+
+pre {
+    font-family:sans-serif
+}
+
+// horizontal lines
+hr {
+}
+
+// page footer
+#footer {
+}
+
+// special event: FTP success page titles
+ftpsuccess {
+   background-color:#00ff00;
+   width:100%
+}
@@ -1006,6 +1006,7 @@ DEFAULT_HTTP_PORT	= @CACHE_HTTP_PORT@
 DEFAULT_ICP_PORT	= @CACHE_ICP_PORT@
 DEFAULT_PREFIX		= $(prefix)
 DEFAULT_CONFIG_FILE     = $(sysconfdir)/squid.conf
+DEFAULT_CONFIG_DIR	= $(sysconfdir)
 DEFAULT_MIME_TABLE	= $(sysconfdir)/mime.conf
 DEFAULT_DNSSERVER       = $(libexecdir)/`echo dnsserver | sed '$(transform);s/$$/$(EXEEXT)/'`
 DEFAULT_LOG_PREFIX	= @DEFAULT_LOG_DIR@
@@ -1079,6 +1080,7 @@ cf.data: cf.data.pre Makefile
 	s%@DEFAULT_ICON_DIR@%$(DEFAULT_ICON_DIR)%g;\
 	s%@DEFAULT_MIB_PATH@%$(DEFAULT_MIB_PATH)%g;\
 	s%@DEFAULT_ERROR_DIR@%$(DEFAULT_ERROR_DIR)%g;\
+	s%@DEFAULT_CONFIG_DIR@%$(DEFAULT_CONFIG_DIR)%g;\
 	s%@DEFAULT_PREFIX@%$(DEFAULT_PREFIX)%g;\
 	s%@DEFAULT_HOSTS@%$(DEFAULT_HOSTS)%g;\
 	s%@[V]ERSION@%$(VERSION)%g;"\
@@ -4830,6 +4830,16 @@ DOC_START
 	of its error page translations.
 DOC_END
 
+NAME: err_page_stylesheet
+TYPE: string
+LOC: Config.errorStylesheet
+DEFAULT: @DEFAULT_CONFIG_DIR@/errorpage.css
+DOC_START
+	CSS Stylesheet to pattern the display of Squid default error pages.
+
+	For information on CSS see http://www.w3.org/Style/CSS/
+DOC_END
+
 NAME: err_html_text
 TYPE: eol
 LOC: Config.errHtmlText
@@ -122,6 +122,9 @@ static char **error_text = NULL;
 /// \ingroup ErrorPageInternal
 static int error_page_count = 0;
 
+/// \ingroup ErrorPageInternal
+static MemBuf error_stylesheet;
+
 static char *errorTryLoadText(const char *page_name, const char *dir, bool silent = false);
 static char *errorLoadText(const char *page_name);
 static const char *errorFindHardText(err_type type);
@@ -182,6 +185,17 @@ errorInitialize(void)
             }
         }
     }
+
+    error_stylesheet.reset();
+
+    // look for and load stylesheet into global MemBuf for it.
+    if(Config.errorStylesheet) {
+        char *temp = errorTryLoadText(Config.errorStylesheet,NULL);
+        if(temp) {
+            error_stylesheet.Printf("%s",temp);
+            safe_free(temp);
+        }
+    }
 }
 
 void
@@ -267,7 +281,12 @@ errorTryLoadText(const char *page_name, const char *dir, bool silent)
     ssize_t len;
     MemBuf textbuf;
 
-    snprintf(path, sizeof(path), "%s/%s", dir, page_name);
+    // maybe received compound parts, maybe an absolute page_name and no dir
+    if(dir)
+        snprintf(path, sizeof(path), "%s/%s", dir, page_name);
+    else
+        snprintf(path, sizeof(path), "%s", page_name);
+
     fd = file_open(path, O_RDONLY | O_TEXT);
 
     if (fd < 0) {
@@ -674,6 +693,11 @@ ErrorState::Convert(char token)
 
         break;
 
+    case 'l':
+        mb.append(error_stylesheet.content(), error_stylesheet.contentSize());
+        do_quote = 0;
+        break;
+
     case 'L':
         if (Config.errHtmlText) {
             mb.Printf("%s", Config.errHtmlText);
@@ -59,6 +59,7 @@
    H - server host name                         x
    i - client IP address                        x
    I - server IP address                        x
+   l - HREF link for CSS stylesheet inclusion   x
    L - HREF link for more info/contact          x
    M - Request Method                           x
    m - Error message returned by auth helper    x
@@ -552,6 +552,7 @@ struct SquidConfig
     char *errorDefaultLanguage;
     int errorLogMissingLanguages;
 #endif
+    char *errorStylesheet;
 
     struct
     {