----++++compat/debug.h
@@ -27,7 +27,7 @@ SQUIDCEXTERN int debug_enabled;
 
 #define debug(X...) \
                      if (debug_enabled) { \
-                         fprintf(stderr, "%s(%d): pid=%ld :", __FILE__, __LINE__, (long)getpid() ); \
+                         fprintf(stderr, "%s(%d): pid=%ld :", __FILE__, __LINE__, static_cast&lt;long&gt;(getpid())); \
                          fprintf(stderr,X); \
                      } else (void)0
 
----++++compat/xalloc.cc
@@ -86,7 +86,7 @@ xcalloc(size_t n, size_t sz)
     if (p == NULL) {
         if (failure_notify) {
             static char msg[128];
-            snprintf(msg, 128, "xcalloc: Unable to allocate %lu blocks of %lu bytes!\n", (unsigned long)n, (unsigned long)sz);
+            snprintf(msg, 128, "xcalloc: Unable to allocate %" PRIuSIZE " blocks of %" PRIuSIZE " bytes!\n", n, sz);
             failure_notify(msg);
         } else {
             perror(&quot;xcalloc&quot;);
@@ -117,7 +117,7 @@ xmalloc(size_t sz)
     if (p == NULL) {
         if (failure_notify) {
             static char msg[128];
-            snprintf(msg, 128, "xmalloc: Unable to allocate %lu bytes!\n", (unsigned long)sz);
+            snprintf(msg, 128, "xmalloc: Unable to allocate %" PRIuSIZE " bytes!\n", sz);
             failure_notify(msg);
         } else {
             perror(&quot;malloc&quot;);
@@ -148,7 +148,7 @@ xrealloc(void *s, size_t sz)
     if (p == NULL) {
         if (failure_notify) {
             static char msg[128];
-            snprintf(msg, 128, "xrealloc: Unable to reallocate %lu bytes!\n", (unsigned long)sz);
+            snprintf(msg, 128, "xrealloc: Unable to reallocate %" PRIuSIZE " bytes!\n", sz);
             failure_notify(msg);
         } else {
             perror(&quot;realloc&quot;);
----++++compat/xis.h
@@ -12,6 +12,24 @@
 #if HAVE_CTYPE_H
 #include &lt;ctype.h&gt;
 #endif
+
+#if __cplusplus
+#define xisspace(x) isspace(static_cast&lt;unsigned char&gt;(x))
+#define xtoupper(x) toupper(static_cast&lt;unsigned char&gt;(x))
+#define xtolower(x) tolower(static_cast&lt;unsigned char&gt;(x))
+#define xisdigit(x) isdigit(static_cast&lt;unsigned char&gt;(x))
+#define xisascii(x) isascii(static_cast&lt;unsigned char&gt;(x))
+#define xislower(x) islower(static_cast&lt;unsigned char&gt;(x))
+#define xisalpha(x) isalpha(static_cast&lt;unsigned char&gt;(x))
+#define xisprint(x) isprint(static_cast&lt;unsigned char&gt;(x))
+#define xisalnum(x) isalnum(static_cast&lt;unsigned char&gt;(x))
+#define xiscntrl(x) iscntrl(static_cast&lt;unsigned char&gt;(x))
+#define xispunct(x) ispunct(static_cast&lt;unsigned char&gt;(x))
+#define xisupper(x) isupper(static_cast&lt;unsigned char&gt;(x))
+#define xisxdigit(x) isxdigit(static_cast&lt;unsigned char&gt;(x))
+#define xisgraph(x) isgraph(static_cast&lt;unsigned char&gt;(x))
+
+#else /* ! __cplusplus */
 #define xisspace(x) isspace((unsigned char)x)
 #define xtoupper(x) toupper((unsigned char)x)
 #define xtolower(x) tolower((unsigned char)x)
@@ -26,6 +44,7 @@
 #define xisupper(x) isupper((unsigned char)x)
 #define xisxdigit(x) isxdigit((unsigned char)x)
 #define xisgraph(x) isgraph((unsigned char)x)
+#endif
 
 #endif /* _SQUID_COMPAT_XIS_H */
 
----++++compat/xstring.cc
@@ -15,10 +15,7 @@
 char *
 xstrdup(const char *s)
 {
-    size_t sz;
-    char *p;
-
-    if (s == NULL) {
+    if (!s) {
         if (failure_notify) {
             (*failure_notify) (&quot;xstrdup: tried to dup a NULL pointer!\n&quot;);
         } else {
@@ -29,8 +26,8 @@ xstrdup(const char *s)
     }
 
     /* copy string, including terminating character */
-    sz = strlen(s) + 1;
-    p = (char *)xmalloc(sz);
+    size_t sz = strlen(s) + 1;
+    char *p = static_cast&lt;char *&gt;(xmalloc(sz));
     memcpy(p, s, sz);
 
     return p;
@@ -58,10 +55,7 @@ xstrncpy(char *dst, const char *src, size_t n)
 char *
 xstrndup(const char *s, size_t n)
 {
-    size_t sz;
-    char *p;
-
-    if (s == NULL) {
+    if (!s) {
         errno = EINVAL;
         if (failure_notify) {
             (*failure_notify) (&quot;xstrndup: tried to dup a NULL pointer!\n&quot;);
@@ -71,12 +65,12 @@ xstrndup(const char *s, size_t n)
         exit(1);
     }
 
-    sz = strlen(s) + 1;
+    size_t sz = strlen(s) + 1;
     // size_t is unsigned, as mandated by c99 and c++ standards.
     if (sz &gt; n)
         sz = n;
 
-    p = xstrncpy((char *)xmalloc(sz), s, sz);
+    char *p = xstrncpy(static_cast&lt;char *&gt;(xmalloc(sz)), s, sz);
     return p;
 }
 
----++++GitHub