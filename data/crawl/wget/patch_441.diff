diff --git a/src/ChangeLog b/src/ChangeLog
index 3087c24..d66c0de 100644
--- a/src/ChangeLog
+++ b/src/ChangeLog
@@ -1,5 +1,10 @@
 2005-06-30  Hrvoje Niksic  <hniksic@xemacs.org>
 
+	* host.c (pretty_print_address): Renamed to just print_address.
+	Clarify documentation.
+
+2005-06-30  Hrvoje Niksic  <hniksic@xemacs.org>
+
 	* http.c (gethttp): Explicitly document the different cases when
 	generating the Host header.
 
diff --git a/src/connect.c b/src/connect.c
index 5ce6f1d..5278de7 100644
--- a/src/connect.c
+++ b/src/connect.c
@@ -263,7 +263,7 @@ connect_to_ip (const ip_address *ip, int port, const char *print)
      PRINT being the host name we're connecting to.  */
   if (print)
     {
-      const char *txt_addr = pretty_print_address (ip);
+      const char *txt_addr = print_address (ip);
       if (print && 0 != strcmp (print, txt_addr))
 	logprintf (LOG_VERBOSE, _("Connecting to %s|%s|:%d... "),
 		   escnonprint (print), txt_addr, port);
@@ -460,8 +460,8 @@ bind_local (const ip_address *bind_address, int *port)
 	  return -1;
 	}
       sockaddr_get_data (sa, NULL, port);
-      DEBUGP (("binding to address %s using port %i.\n", 
-	       pretty_print_address (bind_address), *port));
+      DEBUGP (("binding to address %s using port %i.\n",
+	       print_address (bind_address), *port));
     }
   if (listen (sock, 1) < 0)
     {
@@ -540,7 +540,7 @@ socket_ip_address (int sock, ip_address *ip, int endpoint)
 #ifdef HAVE_SOCKADDR_IN6_SCOPE_ID
 	ADDRESS_IPV6_SCOPE (ip) = sa6->sin6_scope_id;
 #endif
-	DEBUGP (("conaddr is: %s\n", pretty_print_address (ip)));
+	DEBUGP (("conaddr is: %s\n", print_address (ip)));
 	return true;
       }
 #endif
@@ -549,7 +549,7 @@ socket_ip_address (int sock, ip_address *ip, int endpoint)
 	struct sockaddr_in *sa = (struct sockaddr_in *)&storage;
 	ip->type = IPV4_ADDRESS;
 	ADDRESS_IPV4_IN_ADDR (ip) = sa->sin_addr;
-	DEBUGP (("conaddr is: %s\n", pretty_print_address (ip)));
+	DEBUGP (("conaddr is: %s\n", print_address (ip)));
 	return true;
       }
     default:
diff --git a/src/ftp-basic.c b/src/ftp-basic.c
index 1316523..132378c 100644
--- a/src/ftp-basic.c
+++ b/src/ftp-basic.c
@@ -419,9 +419,6 @@ ip_address_to_eprt_repr (const ip_address *addr, int port, char *buf,
 {
   int afnum;
 
-  assert (addr != NULL);
-  assert (addr->type == IPV4_ADDRESS || addr->type == IPV6_ADDRESS);
-  assert (buf != NULL);
   /* buf must contain the argument of EPRT (of the form |af|addr|port|). 
    * 4 chars for the | separators, INET6_ADDRSTRLEN chars for addr  
    * 1 char for af (1-2) and 5 chars for port (0-65535) */
@@ -429,7 +426,7 @@ ip_address_to_eprt_repr (const ip_address *addr, int port, char *buf,
 
   /* Construct the argument of EPRT (of the form |af|addr|port|). */
   afnum = (addr->type == IPV4_ADDRESS ? 1 : 2);
-  snprintf (buf, buflen, "|%d|%s|%d|", afnum, pretty_print_address (addr), port);
+  snprintf (buf, buflen, "|%d|%s|%d|", afnum, print_address (addr), port);
   buf[buflen - 1] = '\0';
 }
 
@@ -453,8 +450,6 @@ ftp_eprt (int csock, int *local_sock)
   if (!socket_ip_address (csock, &addr, ENDPOINT_LOCAL))
     return FTPSYSERR;
 
-  assert (addr.type == IPV4_ADDRESS || addr.type == IPV6_ADDRESS);
-
   /* Setting port to 0 lets the system choose a free port.  */
   port = 0;
 
@@ -698,7 +693,7 @@ ftp_lpsv (int csock, ip_address *addr, int *port)
       addr->type = IPV4_ADDRESS;
       memcpy (ADDRESS_IPV4_DATA (addr), tmp, 4);
       *port = ((tmpprt[0] << 8) & 0xff00) + tmpprt[1];
-      DEBUGP (("lpsv addr is: %s\n", pretty_print_address(addr)));
+      DEBUGP (("lpsv addr is: %s\n", print_address(addr)));
       DEBUGP (("tmpprt[0] is: %d\n", tmpprt[0]));
       DEBUGP (("tmpprt[1] is: %d\n", tmpprt[1]));
       DEBUGP (("*port is: %d\n", *port));
@@ -709,7 +704,7 @@ ftp_lpsv (int csock, ip_address *addr, int *port)
       addr->type = IPV6_ADDRESS;
       memcpy (ADDRESS_IPV6_DATA (addr), tmp, 16);
       *port = ((tmpprt[0] << 8) & 0xff00) + tmpprt[1];
-      DEBUGP (("lpsv addr is: %s\n", pretty_print_address(addr)));
+      DEBUGP (("lpsv addr is: %s\n", print_address(addr)));
       DEBUGP (("tmpprt[0] is: %d\n", tmpprt[0]));
       DEBUGP (("tmpprt[1] is: %d\n", tmpprt[1]));
       DEBUGP (("*port is: %d\n", *port));
diff --git a/src/ftp.c b/src/ftp.c
index 52755f4..1d19497 100644
--- a/src/ftp.c
+++ b/src/ftp.c
@@ -651,8 +651,7 @@ Error in server response, closing control connection.\n"));
 	  if (err==FTPOK)
 	    {
 	      DEBUGP (("trying to connect to %s port %d\n", 
-		      pretty_print_address (&passive_addr),
-		      passive_port));
+		      print_address (&passive_addr), passive_port));
 	      dtsock = connect_to_ip (&passive_addr, passive_port, NULL);
 	      if (dtsock < 0)
 		{
@@ -660,7 +659,7 @@ Error in server response, closing control connection.\n"));
 		  fd_close (csock);
 		  con->csock = -1;
 		  logprintf (LOG_VERBOSE, _("couldn't connect to %s port %d: %s\n"),
-			     pretty_print_address (&passive_addr), passive_port,
+			     print_address (&passive_addr), passive_port,
 			     strerror (save_errno));
 		  return (retryable_socket_connect_error (save_errno)
 			  ? CONERROR : CONIMPOSSIBLE);
diff --git a/src/host.c b/src/host.c
index 46dfee8..0f577e7 100644
--- a/src/host.c
+++ b/src/host.c
@@ -404,12 +404,12 @@ getaddrinfo_with_timeout (const char *node, const char *service,
 
 #endif /* ENABLE_IPV6 */
 
-/* Pretty-print ADDR.  When compiled without IPv6, this is the same as
-   inet_ntoa.  With IPv6, it either prints an IPv6 address or an IPv4
-   address.  */
+/* Return a textual representation of ADDR, i.e. the dotted quad for
+   IPv4 addresses, and the colon-separated list of hex words (with all
+   zeros omitted, etc.) for IPv6 addresses.  */
 
 const char *
-pretty_print_address (const ip_address *addr)
+print_address (const ip_address *addr)
 {
   switch (addr->type) 
     {
@@ -421,7 +421,7 @@ pretty_print_address (const ip_address *addr)
         static char buf[64];
 	if (!inet_ntop (AF_INET6, &ADDRESS_IPV6_IN6_ADDR (addr),
 			buf, sizeof (buf)))
-	  snprintf (buf, sizeof buf, "[error: %s]", strerror (errno));
+	  snprintf (buf, sizeof buf, "<error: %s>", strerror (errno));
         buf[sizeof (buf) - 1] = '\0';
         return buf;
       }
@@ -619,7 +619,7 @@ cache_store (const char *host, struct address_list *al)
       int i;
       debug_logprintf ("Caching %s =>", host);
       for (i = 0; i < al->count; i++)
-	debug_logprintf (" %s", pretty_print_address (al->addresses + i));
+	debug_logprintf (" %s", print_address (al->addresses + i));
       debug_logprintf ("\n");
     }
 }
@@ -815,8 +815,7 @@ lookup_host (const char *host, int flags)
       int printmax = al->count <= 3 ? al->count : 3;
       for (i = 0; i < printmax; i++)
 	{
-	  logprintf (LOG_VERBOSE, "%s",
-		     pretty_print_address (al->addresses + i));
+	  logputs (LOG_VERBOSE, print_address (al->addresses + i));
 	  if (i < printmax - 1)
 	    logputs (LOG_VERBOSE, ", ");
 	}
diff --git a/src/host.h b/src/host.h
index c53331e..17cfbd1 100644
--- a/src/host.h
+++ b/src/host.h
@@ -105,7 +105,7 @@ void address_list_set_connected (struct address_list *);
 bool address_list_connected_p (const struct address_list *);
 void address_list_release (struct address_list *);
 
-const char *pretty_print_address (const ip_address *);
+const char *print_address (const ip_address *);
 #ifdef ENABLE_IPV6
 bool is_valid_ipv6_address (const char *, const char *);
 #endif
diff --git a/src/mswindows.c b/src/mswindows.c
index 2890274..d1867fc 100644
--- a/src/mswindows.c
+++ b/src/mswindows.c
@@ -851,8 +851,8 @@ windows_strerror (int err)
 
 #ifdef ENABLE_IPV6
 /* An IPv6-only inet_ntop that prints with WSAAddressToString.  (Wget
-   uses inet_ntoa for IPv4 addresses -- see pretty_print_address.)
-   Prototype complies with POSIX 1003.1-2004.  */
+   uses inet_ntoa for IPv4 addresses -- see print_address.)  Prototype
+   complies with POSIX 1003.1-2004.  */
 
 const char *
 inet_ntop (int af, const void *src, char *dst, socklen_t cnt)
-- 
cgit v1.0-41-gc330

