url,date,title,changes,file_name,reason_for_consistence,is_trivial,old_hunk_file,new_hunk_file,old_loc,new_loc,old_log,new_log,edit_types,edit_words,edit_feature,cluster,wait_time,cluster_size
https://github.com/git/git/commit/fc045fe7d4fa220f19274715c936636fe0516ea3,13 Feb 2018,"Mark messages for translations

Small changes in messages to fit the style and typography of rest.
Reuse already translated messages if possible.
Do not translate messages aimed at developers of git.
Fix unit tests depending on the original string.
Use `test_i18ngrep` for tests with translatable strings.
Change and verify rest of tests via `make GETTEXT_POISON=1 test`.

Signed-off-by: Alexander Shopov <ash@kambanaria.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_72.cpp,use same text format,trivial,data/crawl/git/old_hunk_72.cpp,data/crawl/git/new_hunk_72.cpp,3,3,"fprintf(stderr, ""-c expects a configuration string\n"" );","fprintf(stderr, _(""-c expects a configuration string\n"" ));","[""addVariable""]","[[], [""_""]]",[12160036574],6568,946739.8715203427,467
https://github.com/git/git/commit/fc045fe7d4fa220f19274715c936636fe0516ea3,13 Feb 2018,"Mark messages for translations

Small changes in messages to fit the style and typography of rest.
Reuse already translated messages if possible.
Do not translate messages aimed at developers of git.
Fix unit tests depending on the original string.
Use `test_i18ngrep` for tests with translatable strings.
Change and verify rest of tests via `make GETTEXT_POISON=1 test`.

Signed-off-by: Alexander Shopov <ash@kambanaria.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_82.cpp,use same text format,trivial,data/crawl/git/old_hunk_82.cpp,data/crawl/git/new_hunk_82.cpp,3,3,"die(""unable to set up work tree using invalid config"");","(_(""unable to set up work tree using invalid config"");","[""addLog"", ""updateLog""]","[[""die""], [""_""]]",[1925086820363511413],6566,597559.2452830189,212
https://github.com/git/git/commit/7616c6ca9d3559a1768b7293c64c5a39e73bd365,09 May 2016,"sha1_file.c: use {error,die,warning}_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_2022.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_2022.cpp,data/crawl/git/new_hunk_2022.cpp,3,3,"die(""packfile %s cannot be mapped: %s"",
					p->pack_name,
					strerror(errno));","die_errno(""packfile %s cannot be mapped"",
					  p->pack_name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""%s"", ""strerror"", ""errno""], [""die_errno""]]",[-17402433408053273391],6565,72960.0,99
https://github.com/git/git/commit/55f5704da69d3e6836620f01bee0093ad5e331e8,09 Sep 2016,"sequencer: lib'ify checkout_fast_forward()

Instead of dying there, let the caller high up in the callchain
notice the error and handle it (by dying, still).

The only callers of checkout_fast_forward(), cmd_merge(),
pull_into_void(), cmd_pull() and sequencer's fast_forward_to(),
already check the return value and handle it appropriately. With this
step, we make it notice an error return from this function.

So this is a safe conversion to make checkout_fast_forward()
callable from new callers that want it not to die, without changing
the external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_1185.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_1185.cpp,data/crawl/git/new_hunk_1185.cpp,4,5,"die(_(""unable to write new index file""));","error(_(""unable to write new index file""));","[""updateLog""]","[[""die""], [""error""]]",[10210225593202855182],6564,3546167.4418604653,86
https://github.com/git/git/commit/90875eca5a0b227e6a1be3ccece0a3da5e72017f,07 Sep 2016,"apply: use error_errno() where possible

To avoid possible mistakes and to uniformly show the errno
related messages, let's use error_errno() where possible.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_1506.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_1506.cpp,data/crawl/git/new_hunk_1506.cpp,3,3,"error(""%s: %s"", new_name, strerror(errno));","error_errno(""%s"", new_name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""%s"", ""strerror"", ""errno""], [""error_errno""]]",[-22273121909024948375],6563,7063.783783783784,74
https://github.com/git/git/commit/0721c314a5c8fddc877140ab5a333c42c62f780d,27 Jun 2009,"Use die_errno() instead of die() when checking syscalls

Lots of die() calls did not actually report the kind of error, which
can leave the user confused as to the real problem.  Use die_errno()
where we check a system/library call that sets errno on failure, or
one of the following that wrap such calls:

  Function              Passes on error from
  --------              --------------------
  odb_pack_keep         open
  read_ancestry         fopen
  read_in_full          xread
  strbuf_read           xread
  strbuf_read_file      open or strbuf_read_file
  strbuf_readlink       readlink
  write_in_full         xwrite

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",153,data/crawl/git/hunk_5806.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_5806.cpp,data/crawl/git/new_hunk_5806.cpp,3,3,"die (""Could not get current working directory"");","die_errno (""Could not get current working directory"");","[""updateLog""]","[[""die""], [""die_errno""]]",[-4657290980438519867],6562,0.0,62
https://github.com/git/git/commit/6cd4a8982dbde0b6fee26faba2873c475af50a28,30 Mar 2017,"avoid using mksnpath for refs

Like the previous commit, we'd like to avoid the assumption
that refs fit into PATH_MAX-sized buffers. These callsites
have an extra twist, though: they write the refnames using
mksnpath. This does two things beyond a regular snprintf:

  1. It quietly writes ""/bad-path/"" when truncation occurs.
     This saves the caller having to check the error code,
     but if you aren't actually feeding the result to a
     system call (and we aren't here), it's questionable.

  2. It calls cleanup_path(), which removes leading
     instances of ""./"".  That's questionable when dealing
     with refnames, as we could silently canonicalize a
     syntactically bogus refname into a valid one.

Let's convert each case to use a strbuf. This is preferable
to xstrfmt() because we can reuse the same buffer as we
loop.

Signed-off-by: Jeff King <peff@peff.net>",44,data/crawl/git/hunk_700.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_700.cpp,data/crawl/git/new_hunk_700.cpp,21,22,"warning(""ignoring dangling symref %s."", fullref);","warning(""ignoring dangling symref %s."", fullref.buf);","[""removeVariable"", ""addVariable""]","[[], [""buf""]]",[327024216826240860],6561,2321131.0344827585,58
https://github.com/git/git/commit/d1d42bf5980b2d31f43f4a54c3d98d19f879b919,14 Oct 2016,"i18n: apply: mark error messages for translation

Mark error messages for translation passed to error() and die()
functions.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_1044.cpp,use same text format,trivial,data/crawl/git/old_hunk_1044.cpp,data/crawl/git/new_hunk_1044.cpp,3,3,"error(""--reject and --3way cannot be used together."");","(_(""--reject and --3way cannot be used together."");","[""addLog"", ""updateLog""]","[[""error""], [""_""]]",[-8285138772839343769],6560,824256.0,50
https://github.com/git/git/commit/3fc7281ffa2533820d26809223c7181256b88fe2,30 Jan 2018,"sha1_file: convert write_loose_object to object_id

Convert the definition and declaration of static write_loose_object
function to struct object_id.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_118.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_118.cpp,data/crawl/git/new_hunk_118.cpp,3,3,"die(""unable to deflate new object %s (%d)"", sha1_to_hex(sha1), ret);","die(""unable to deflate new object %s (%d)"", oid_to_hex(oid),
		    ret);","[""updateVariable""]","[[""sha1_to_hex"", ""sha1""], [""oid_to_hex"", ""oid""]]",[11698201631503247408],6559,752947.2,50
https://github.com/git/git/commit/a9f8a37584a6d3e4702ce115476bebda20d871d3,07 Oct 2017,"submodule: port submodule subcommand 'status' from shell to C

This aims to make git-submodule 'status' a built-in. Hence, the function
cmd_status() is ported from shell to C. This is done by introducing
four functions: module_status(), submodule_status_cb(),
submodule_status() and print_status().

The function module_status() acts as the front-end of the subcommand.
It parses subcommand's options and then calls the function
module_list_compute() for computing the list of submodules. Then
this functions calls for_each_listed_submodule() looping through the
list obtained.

Then for_each_listed_submodule() calls submodule_status_cb() for each of
the submodule in its list. The function submodule_status_cb() calls
submodule_status() after passing appropriate arguments to the funciton.
Function submodule_status() is responsible for generating the status
each submodule it is called for, and then calls print_status().

Finally, the function print_status() handles the printing of submodule's
status.

Function set_name_rev() is also ported from git-submodule to the
submodule--helper builtin function compute_rev_name(), which now
generates the value of the revision name as required.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Prathamesh Chavan <pc44800@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",259,data/crawl/git/hunk_198.cpp,use same text,non-trivial,data/crawl/git/old_hunk_198.cpp,data/crawl/git/new_hunk_198.cpp,-1,21,,"printf(""\n"");","[""addLog""]","[[], [""printf"", ""\\n""]]",[7249185625612668815],6558,1109280.0,33
https://github.com/git/git/commit/c7d849243a4be2c60ff48cc42ea8b0518bb7f27f,05 Sep 2008,"merge-recursive: move the global obuf to struct merge_options

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>",38,data/crawl/git/hunk_6748.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_6748.cpp,data/crawl/git/new_hunk_6748.cpp,13,11,"fputs(obuf.buf, stdout);","fputs(o->obuf.buf, stdout);","[""addVariable""]","[[], [""o""]]",[14208042734],6557,240.0,30
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1279.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_1279.cpp,data/crawl/git/new_hunk_1279.cpp,3,4,"printf(""%s%s\n"", pathname, S_ISDIR(mode) ? ""/"" : """");","fprintf(file, ""%s%s\n"", pathname, S_ISDIR(mode) ? ""/"" : """");","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""file""]]",[-12951079412526217197],6556,2058000.0,30
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_533.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_533.cpp,data/crawl/git/new_hunk_533.cpp,2,2,"printf(""%s %-6s %lu %lu %""PRIuMAX,
		       sha1_to_hex(obj->idx.sha1),
		       typename(obj->real_type), obj->size,
		       (unsigned long)(obj[1].idx.offset - obj->idx.offset),
		       (uintmax_t)obj->idx.offset);","printf(""%s %-6s %lu %lu %""PRIuMAX,
		       oid_to_hex(&obj->idx.oid),
		       typename(obj->real_type), obj->size,
		       (unsigned long)(obj[1].idx.offset - obj->idx.offset),
		       (uintmax_t)obj->idx.offset);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1"", ""obj""], [""oid_to_hex"", ""&obj"", ""oid""]]",[-584189701047962819],6555,51360.0,30
https://github.com/git/git/commit/aacc5c1a81c004efccff8075edb78acdf5f15264,02 May 2017,"submodule: refactor logic to determine changed submodules

There are currently two instances (fetch and push) where we want to
determine if submodules have changed given some revision specification.
These two instances don't use the same logic to generate a list of
changed submodules and as a result there is a fair amount of code
duplication.

This patch refactors these two code paths such that they both use the
same logic to generate a list of changed submodules.  This also makes it
easier for future callers to be able to reuse this logic as they only
need to create an argv_array with the revision specification to be using
during the revision walk.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/hunk_615.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_615.cpp,data/crawl/git/new_hunk_615.cpp,-1,68,,"die(""revision walk setup failed"");","[""addLog""]","[[], [""die"", ""revision"", ""walk"", ""setup"", ""failed""]]",[-17150171470043991342],6554,878451.4285714285,28
https://github.com/git/git/commit/81c634e94f2fef0cec295f7554080c82bd6aeeb7,17 Oct 2016,"pkt-line: rename packet_write() to packet_write_fmt()

packet_write() should be called packet_write_fmt() because it is a
printf-like function that takes a format string as first parameter.

packet_write_fmt() should be used for text strings only. Arbitrary
binary data should use a new packet_write() function that is introduced
in a subsequent patch.

Suggested-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/hunk_1024.cpp,invoke same method,trivial,data/crawl/git/old_hunk_1024.cpp,data/crawl/git/new_hunk_1024.cpp,3,3,"packet_write(fd[1], ""argument --format=%s\n"", format);","packet_write_fmt(fd[1], ""argument --format=%s\n"", format);","[""updateLog""]","[[""packet_write""], [""packet_write_fmt""]]",[-9191134811627887892],6553,0.0,26
https://github.com/git/git/commit/18d472db6fe3909537ceb7e0c54cf01fa3466b8f,09 Jul 2013,"t4211: fix broken test when one -L range is subset of another

t4211 attempts to test multiple git-log -L ranges where one range is a
superset of the other, and falsely succeeds because its ""expected""
output is incorrect.

Overlapping -L ranges handed to git-log are coalesced by
line-log.c:sort_and_merge_range_set() into a set of non-overlapping,
disjoint ranges. When one range is a subset of another,
sort_and_merge_range_set() should coalesce both ranges to the superset
range, but instead the coalesced range often is incorrectly truncated to
the end of the subset range. For example, ranges 2-8 and 3-4 are
coalesced incorrectly to 2-4.

One can observe this incorrect behavior with git-log -L using the test
repository created by t4211. The superset/subset ranges t4211 employs
are 4-$ and 8-12 (where $ represents end-of-file). The coalesced range
should be 4-$. Manually invoking git-log with the same ranges the test
employs, we see:

  % git log -L 4:a.c simple |
    awk '/^commit [0-9a-f]{40}/ { print substr($2,1,7) }'
  4659538
  100b61a
  39b6eb2
  a6eb826
  f04fb20
  de4c48a

  % git log -L 8,12:a.c simple | awk ...
  f04fb20
  de4c48a

  % git log -L 4:a.c -L 8,12:a.c simple | awk ...
  a6eb826
  f04fb20
  de4c48a

This last output is incorrect. 8-12 is a subset of 4-$, hence the output
of the coalesced range should be the same as the 4-$ output shown first.
In fact, the above incorrect output is the truncated bogus range 4-12:

  % git log -L 4,12:a.c simple | awk ...
  a6eb826
  f04fb20
  de4c48a

Fix the test to correctly fail in the presence of the
sort_and_merge_range_set() coalescing bug. Do so by changing the
""expected"" output to the commits mentioned in the 4-$ output above.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/hunk_3534.cpp,block change,non-trivial,data/crawl/git/old_hunk_3534.cpp,data/crawl/git/new_hunk_3534.cpp,-1,25,,"printf(""%ld\n"", f(15));","[""addLog""]","[[], [""printf"", ""%ld\\n"", ""f"", ""15""]]",[4978724980882016412],6552,22740.0,24
https://github.com/git/git/commit/debca9d2fe784193dc2d9f98b5edac605ddfefbb,14 Feb 2018,"object: rename function 'typename' to 'type_name'

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/hunk_23.cpp,invoke same method,trivial,data/crawl/git/old_hunk_23.cpp,data/crawl/git/new_hunk_23.cpp,2,2,"error(""Object %s is a %s, not a commit or tree"",
	      oid_to_hex(&oid), typename(obj->type));","error(""Object %s is a %s, not a commit or tree"",
	      oid_to_hex(&oid), type_name(obj->type));","[""removeVariable"", ""addVariable""]","[[""typename""], [""type_name""]]",[-2477744965360508998],6551,0.0,23
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1407.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1407.cpp,data/crawl/git/new_hunk_1407.cpp,32,34,"error(_(""addinfo_cache failed for path '%s'""), path);","err(o, _(""addinfo_cache failed for path '%s'""), path);","[""updateLog"", ""addVariable""]","[[""error""], [""err"", ""o""]]",[-11336281091606670627],6550,12763.636363636364,22
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1396.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_1396.cpp,data/crawl/git/new_hunk_1396.cpp,16,16,"printf("" %s"", find_unique_abbrev(p->item->object.oid.hash, abbrev));","fprintf(opt->diffopt.file, "" %s"", find_unique_abbrev(p->item->object.oid.hash, abbrev));","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""opt"", ""diffopt"", ""file""]]",[-3512011818810243570],6549,55440.0,22
https://github.com/git/git/commit/9f67d2e8279e1885ef2b4681c19cef8534259783,27 Oct 2009,"Teach ""git describe"" --dirty option

With the --dirty option, git describe works on HEAD but append s""-dirty""
iff the contents of the work tree differs from HEAD.  E.g.

  $ git describe --dirty
  v1.6.5-15-gc274db7
  $ echo >> Makefile
  $ git describe --dirty
  v1.6.5-15-gc274db7-dirty

The --dirty option can also be used to specify what is appended, instead
of the default string ""-dirty"".

  $ git describe --dirty=.mod
  v1.6.5-15-gc274db7.mod

Many build scripts use `git describe` to produce a version number based on
the description of HEAD (on which the work tree is based) + saying that if
the build contains uncommitted changes.  This patch helps the writing of
such scripts since `git describe --dirty` does directly the intended thing.

Three possiblities were considered while discussing this new feature:

1. Describe the work tree by default and describe HEAD only if ""HEAD"" is
   explicitly specified

     Pro: does the right thing by default (both for users and for scripts)
     Pro: other git commands that works on the work tree by default
     Con: breaks existing scripts used by the Linux kernel and other projects

2. Use --worktree instead of --dirty

     Pro: does what it says: ""git describe --worktree"" describes the work tree
     Con: other commands do not require a --worktree option when working
          on the work tree (it often is the default mode for them)
     Con: unusable with an optional value: ""git describe --worktree=.mod""
	  is quite unintuitive.

3. Use --dirty as in this patch

     Pro: makes sense to specify an optional value (what the dirty mark is)
     Pro: does not have any of the big cons of previous alternatives
	  * does not break scripts
	  * is not inconsistent with other git commands

This patch takes the third approach.

Signed-off-by: Jean Privat <jean@pryen.org>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_5629.cpp,use same text,trivial,data/crawl/git/old_hunk_5629.cpp,data/crawl/git/new_hunk_5629.cpp,3,3,"printf(""%s\n"", find_unique_abbrev(sha1, abbrev));","printf(""%s"", find_unique_abbrev(sha1, abbrev));","[""updateContent""]","[[""%s\\n""], [""%s""]]",[-6140229210961666644],6548,499885.71428571426,21
https://github.com/git/git/commit/eedce784a7492faa370fd96e372c948cba087965,24 Aug 2010,"sha1_name.c: use warning in preference to fprintf(stderr

This commit changes sha1_name.c to use warning instead of
fprintf(stderr).

Trailing newlines from message formats have been removed
since warning adds one itself.

Signed-off-by: Jon Seymour <jon.seymour@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_5035.cpp,use same text,non-trivial,data/crawl/git/old_hunk_5035.cpp,data/crawl/git/new_hunk_5035.cpp,3,3,"fprintf(stderr,
					""warning: Log for '%.*s' only goes ""
					""back to %s.\n"", len, str,
					show_date(co_time, co_tz, DATE_RFC2822));","warning(""Log for '%.*s' only goes ""
					""back to %s."", len, str,
					show_date(co_time, co_tz, DATE_RFC2822));","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""\\n""], []]",[13913879213697345406],6547,570528.0,20
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2439.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2439.cpp,data/crawl/git/new_hunk_2439.cpp,3,3,"die(_(""unable to parse commit %s""), sha1_to_hex(commit->object.sha1));","die(_(""unable to parse commit %s""), oid_to_hex(&commit->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""commit"", ""sha1""], [""oid_to_hex"", ""&commit"", ""oid""]]",[6065387720634484985],6546,0.0,19
https://github.com/git/git/commit/1da045fb9db5db8f01eb5e7c6106880ca5274643,09 May 2016,"wrapper.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_2011.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_2011.cpp,data/crawl/git/new_hunk_2011.cpp,3,3,"warning(""unable to %s %s: %s"", op, file, strerror(errno));","warning_errno(""unable to %s %s"", op, file);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""warning"", ""%s"", ""strerror"", ""errno""], [""warning_errno""]]",[-9558594043159494063],6545,0.0,19
https://github.com/git/git/commit/fc045fe7d4fa220f19274715c936636fe0516ea3,13 Feb 2018,"Mark messages for translations

Small changes in messages to fit the style and typography of rest.
Reuse already translated messages if possible.
Do not translate messages aimed at developers of git.
Fix unit tests depending on the original string.
Use `test_i18ngrep` for tests with translatable strings.
Change and verify rest of tests via `make GETTEXT_POISON=1 test`.

Signed-off-by: Alexander Shopov <ash@kambanaria.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_96.cpp,use same text format,trivial,data/crawl/git/old_hunk_96.cpp,data/crawl/git/new_hunk_96.cpp,3,3,"die_errno(""open /dev/null or dup failed"");","(_(""open /dev/null or dup failed"");","[""addLog"", ""updateLog""]","[[""die_errno""], [""_""]]",[6582377800802031280],6544,1142071.5789473683,19
https://github.com/git/git/commit/cdb866b30bd862527de597ae9c7fe7540de55bf2,19 Jun 2017,"sequencer: print autostash messages to stderr

The rebase messages are printed to stderr traditionally. However due
to a bug introduced in 587947750bd (rebase: implement --[no-]autostash
and rebase.autostash, 2013-05-12) which was faithfully copied when
reimplementing parts of the interactive rebase in the sequencer the
autostash messages are printed to stdout instead.

It is time to fix that: let's print the autostash messages to stderr
instead of stdout.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_371.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_371.cpp,data/crawl/git/new_hunk_371.cpp,3,3,"printf(_(""Applied autostash.\n""));","fprintf(stderr, _(""Applied autostash.\n""));","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""stderr""]]",[-21163064839310014221],6543,2271981.1764705884,17
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1263.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1263.cpp,data/crawl/git/new_hunk_1263.cpp,2,2,"fprintf(stderr, ""%s in %s %s: %s\n"",
		msg_type, typename(obj->type), oid_to_hex(&obj->oid), err);","fprintf(stderr, ""%s in %s %s: %s\n"",
		msg_type, typename(obj->type), describe_object(obj), err);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&obj"", ""oid""], [""describe_object"", ""obj""]]",[9186781888045856668],6542,38160.0,16
https://github.com/git/git/commit/76fc394d50efef8f1308a0f0d56087f502dac689,05 May 2016,"commit_ref_update(): write error message to *err, not stderr

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",2,data/crawl/git/hunk_2104.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_2104.cpp,data/crawl/git/new_hunk_2104.cpp,3,3,"error(""Couldn't set %s"", lock->ref_name);","strbuf_addf(err, ""Couldn't set %s"", lock->ref_name);","[""updateLog"", ""addVariable""]","[[""error""], [""strbuf_addf"", ""err""]]",[-13908682699128854880],6541,71712.0,15
https://github.com/git/git/commit/7101e10ce7ba917d1b7a6ff73e0008c2be4a43ed,21 Oct 2016,"transport: pass summary_width down the callchain

The callchain that originates at transport_print_push_status()
eventually hits a single leaf function, print_ref_status(), that is
used to show from what old object to what new object a ref got
updated, and the width of the part that shows old and new object
names used a constant TRANSPORT_SUMMARY_WIDTH.

Teach the callchain to pass the width down from the top instead.
This allows a future enhancement to compute the necessary display
width before calling down this callchain.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/hunk_967.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_967.cpp,data/crawl/git/new_hunk_967.cpp,6,6,"print_ref_status('-', ""[deleted]"", ref, NULL, NULL, porcelain);","print_ref_status('-', ""[deleted]"", ref, NULL, NULL,
				 porcelain, summary_width);","[""addVariable""]","[[], [""summary_width""]]",[-5873888663119224184],6540,0.0,15
https://github.com/git/git/commit/1cf823fb68cae95fa1887e9eaa314c2b6e619e09,02 Feb 2018,"reset --hard: make use of the pretty machinery

reset --hard currently uses its own logic for printing the first line of
the commit message in its output.  Instead of just using the first line,
use the pretty machinery to create the output.

In addition to the easier to follow code, this makes the output more
consistent with other commands that print the title of the commit, such
as 'git commit --oneline' or 'git checkout', which both use
'pp_commit_easy()' with the CMIT_FMT_ONELINE modifier.

It is a slight change of the output if the second line of the commit
message is not a blank line, i.e. if the commit message is

    foo
    bar

previously we would print ""HEAD is now at 000000 foo"", while after
this change we print ""HEAD is now at 000000 foo bar"", same as 'git log
--oneline' shows ""000000 foo bar"".

So this does make the output more consistent with other commands, and
'reset' is a porcelain command, so nobody should be parsing the output
in scripts.

The current behaviour dates back to 0e5a7faa3a (""Make ""git reset"" a
builtin."", 2007-09-11), so I assume (without digging into the old
codebase too much) that the logic was implemented because there was
no convenience function such as 'pp_commit_easy' that would do this
already.

Signed-off-by: Thomas Gummerer <t.gummerer@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_111.cpp,block change,non-trivial,data/crawl/git/old_hunk_111.cpp,data/crawl/git/new_hunk_111.cpp,19,-1,"printf(""\n"");",,"[""removeLog""]","[[""printf"", ""\\n""], []]",[-7249185625612668815],6539,1326432.0,15
https://github.com/git/git/commit/aa7e44bf571717aeb4435e6605391d51f3117047,02 Jun 2007,"Unify write_index_file functions

This patch unifies the write_index_file functions in
builtin-pack-objects.c and index-pack.c.  As the name
""index"" is overloaded in git, move in the direction of
using ""idx"" and ""pack idx"" when refering to the pack index.
There should be no change in functionality.

Signed-off-by: Geert Bosch <bosch@gnat.com>
Acked-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",586,data/crawl/git/hunk_8337.cpp,use same variable,trivial,data/crawl/git/old_hunk_8337.cpp,data/crawl/git/new_hunk_8337.cpp,7,7,"die(""unable to read %s"", sha1_to_hex(entry->delta->sha1));","die(""unable to read %s"", sha1_to_hex(entry->delta->idx.sha1));","[""addVariable""]","[[], [""idx""]]",[-7555364370844764442],6538,0.0,14
https://github.com/git/git/commit/37f3012ff2a1a23dc7f8d390fde959d292fcc4e8,08 Mar 2011,"commit: refer to commit template as s->fp

Instead of maintaining a local variable for it, use s->fp to keep
track of where the commit message template should be written.

This prepares us to take advantage of the status_printf functions,
which use a struct wt_status instead of a FILE pointer to determine
where to send their output.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_4781.cpp,use same variable,trivial,data/crawl/git/old_hunk_4781.cpp,data/crawl/git/new_hunk_4781.cpp,3,3,"fprintf(fp,
			""\n""
			""# Please enter the commit message for your changes."");","fprintf(s->fp,
			""\n""
			""# Please enter the commit message for your changes."");","[""removeVariable"", ""addVariable""]","[[], [""s""]]",[14720044274],6537,0.0,14
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1397.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_1397.cpp,data/crawl/git/new_hunk_1397.cpp,7,7,"fputs(sb.buf, stdout);","fputs(sb.buf, opt->diffopt.file);","[""removeVariable"", ""addVariable""]","[[""stdout""], [""opt"", ""diffopt"", ""file""]]",[17651059020500770826],6536,55440.0,14
https://github.com/git/git/commit/d35688db19c9ea97e9e2ce751dc7b47aee21636b,07 Oct 2017,"Prepare for -rc1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/hunk_199.cpp,use same text,non-trivial,data/crawl/git/old_hunk_199.cpp,data/crawl/git/new_hunk_199.cpp,8,8,"die(""BUG"");",BUG();,"[""updateLog"", ""removeContent""]","[[""die""], []]",[1925086808203474839],6535,927051.4285714285,14
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7293.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_7293.cpp,data/crawl/git/new_hunk_7293.cpp,3,3,"printf(""%s--- %s%s%s\n%s+++ %s%s%s\n%s@@ -"",
	       metainfo, a_name.buf, name_a_tab, reset,
	       metainfo, b_name.buf, name_b_tab, reset, fraginfo);","fprintf(o->file,
		""%s--- %s%s%s\n%s+++ %s%s%s\n%s@@ -"",
		metainfo, a_name.buf, name_a_tab, reset,
		metainfo, b_name.buf, name_b_tab, reset, fraginfo);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""o"", ""file""]]",[-12951079398318174463],6534,0.0,13
https://github.com/git/git/commit/daf9f6499f853804270da4456664c2ff576774de,19 Apr 2016,"i18n: builtin/pull.c: split strings marked for translation

Split string ""If you wish to set tracking information
for this branch you can do so with:\n"" to match occurring string in
git-parse-remote.sh. In this case, the translator handles it only once.

On the other hand, the translations of the string that were already made
are mark as fuzzy and the translator needs to correct it herself.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_2145.cpp,use same text,non-trivial,data/crawl/git/old_hunk_2145.cpp,data/crawl/git/new_hunk_2145.cpp,-1,4,,"fprintf(stderr, ""\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""\\n""]]",[-13913879213697345406],6533,2037932.3076923077,13
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1204.cpp,use same text format,trivial,data/crawl/git/old_hunk_1204.cpp,data/crawl/git/new_hunk_1204.cpp,6,9,"printf(""We cannot bisect more!\n"");","(_(""We cannot bisect more!\n"");","[""addLog"", ""updateLog""]","[[""printf""], [""_""]]",[-7237409542704525881],6532,871975.3846153846,13
https://github.com/git/git/commit/356ee4659bb551cd9464b317d691827276752c2d,24 Nov 2017,"sequencer: try to commit without forking 'git commit'

If the commit message does not need to be edited then create the
commit without forking 'git commit'. Taking the best time of ten runs
with a warm cache this reduces the time taken to cherry-pick 10
commits by 27% (from 282ms to 204ms), and the time taken by 'git
rebase --continue' to pick 10 commits by 45% (from 386ms to 212ms) on
my computer running linux. Some of greater saving for rebase is
because it no longer wastes time creating the commit summary just to
throw it away.

The code to create the commit is based on builtin/commit.c. It is
simplified as it doesn't have to deal with merges and modified so that
it does not die but returns an error to make sure the sequencer exits
cleanly, as it would when forking 'git commit'

Even when not forking 'git commit' the commit message is written to a
file and CHERRY_PICK_HEAD is created unnecessarily. This could be
eliminated in future. I hacked up a version that does not write these
files and just passed an strbuf (with the wrong message for fixup and
squash commands) to do_commit() but I couldn't measure any significant
time difference when running cherry-pick or rebase. I think
eliminating the writes properly for rebase would require a bit of
effort as the code would need to be restructured.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/hunk_150.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_150.cpp,data/crawl/git/new_hunk_150.cpp,-1,109,,"error(""%s"", err.buf);","[""addLog""]","[[], [""error"", ""%s"", ""err"", ""buf""]]",[5565756709463330967],6531,289329.23076923075,13
https://github.com/git/git/commit/9c7304e3e39ed397b3cc6566573333e2698a52b4,01 Jun 2010,"print the usage string on stdout instead of stderr

When -h is used, print usage messages on stdout.  If a command is invoked with
wrong arguments then print the usage messages on stderr.

Signed-off-by: Giuseppe Scrivano <gscrivano@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_5212.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_5212.cpp,data/crawl/git/new_hunk_5212.cpp,3,3,"fprintf(stderr, s, opts->argh ? opts->argh : ""..."");","fprintf(outfile, s, opts->argh ? opts->argh : ""..."");","[""updateVariable""]","[[""stderr""], [""outfile""]]",[4871638349643850843],6530,0.0,12
https://github.com/git/git/commit/7999b2cf772956466baa8925491d6fb1b0963292,20 Nov 2015,"Add several uses of get_object_hash.

Convert most instances where the sha1 member of struct object is
dereferenced to use get_object_hash.  Most instances that are passed to
functions that have versions taking struct object_id, such as
get_sha1_hex/get_oid_hex, or instances that can be trivially converted
to use struct object_id instead, are not converted.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",506,data/crawl/git/hunk_2543.cpp,use same variable,trivial,data/crawl/git/old_hunk_2543.cpp,data/crawl/git/new_hunk_2543.cpp,2,2,"fprintf(stderr, ""%s %s... %s\n"", msg,
		find_unique_abbrev(commit->object.sha1, DEFAULT_ABBREV), sb.buf);","fprintf(stderr, ""%s %s... %s\n"", msg,
		find_unique_abbrev(get_object_hash(commit->object), DEFAULT_ABBREV), sb.buf);","[""removeVariable"", ""addVariable""]","[[""sha1""], [""get_object_hash""]]",[6595616598757751107],6529,0.0,12
https://github.com/git/git/commit/ed1c9977cb1b63e4270ad8bdf967a2d02580aa08,20 Nov 2015,"Remove get_object_hash.

Convert all instances of get_object_hash to use an appropriate reference
to the hash member of the oid member of struct object.  This provides no
functional change, as it is essentially a macro substitution.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",504,data/crawl/git/hunk_2383.cpp,invoke same method,trivial,data/crawl/git/old_hunk_2383.cpp,data/crawl/git/new_hunk_2383.cpp,2,2,"fprintf(stderr, ""%s %s... %s\n"", msg,
		find_unique_abbrev(get_object_hash(commit->object), DEFAULT_ABBREV), sb.buf);","fprintf(stderr, ""%s %s... %s\n"", msg,
		find_unique_abbrev(commit->object.oid.hash, DEFAULT_ABBREV), sb.buf);","[""removeVariable"", ""addVariable""]","[[""get_object_hash""], [""oid"", ""hash""]]",[7179401814361534313],6528,0.0,12
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1392.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_1392.cpp,data/crawl/git/new_hunk_1392.cpp,4,4,"fputs(color, stdout);","fputs(color, file);","[""updateVariable""]","[[""stdout""], [""file""]]",[8211991426784797199],6527,2205000.0,12
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1340.cpp,,,data/crawl/git/old_hunk_1340.cpp,data/crawl/git/new_hunk_1340.cpp,-1,3,,self.environment.get_logger();,"[""addLog""]","[[], [""self"", ""environment"", ""get_logger""]]",[7565568221648516235],6526,16560.0,12
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1278.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_1278.cpp,data/crawl/git/new_hunk_1278.cpp,3,3,"printf(""%s"", out.buf);","fprintf(rev->diffopt.file, ""%s"", out.buf);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""rev"", ""diffopt"", ""file""]]",[-6890178356471817606],6525,55440.0,12
https://github.com/git/git/commit/39dc52cf4ff04e9cd4d2562218ad619e23a81efa,06 Jun 2009,"http: use new http API in fetch_index()

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_5978.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_5978.cpp,data/crawl/git/new_hunk_5978.cpp,30,-1,"error(""Unable to start request"");",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""start"", ""request""], []]",[-14866092711229707640],6524,635040.0,11
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2454.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2454.cpp,data/crawl/git/new_hunk_2454.cpp,2,2,"warning(""Omitting tag %s,\nsince tags of trees (or tags of tags of trees, etc.) are not supported."",
			sha1_to_hex(tag->object.sha1));","warning(""Omitting tag %s,\nsince tags of trees (or tags of tags of trees, etc.) are not supported."",
			oid_to_hex(&tag->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""tag"", ""sha1""], [""oid_to_hex"", ""&tag"", ""oid""]]",[5046064861470326807],6523,0.0,11
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1213.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1213.cpp,data/crawl/git/new_hunk_1213.cpp,8,-1,"die_errno(_(""could not write to %s""), filename);",,"[""removeLog""]","[[""die_errno"", ""_"", ""could"", ""not"", ""write"", ""to"", ""%s"", ""filename""], []]",[-8775406943295227196],6522,490254.54545454547,11
https://github.com/git/git/commit/db424979a83c11d7e3389ed505b13e7e718132ec,17 Oct 2016,"i18n: diff: mark warnings for translation

Mark rename_limit_warning and degrade_cc_to_c_warning and
rename_limit_warning for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_1007.cpp,use same text format,trivial,data/crawl/git/old_hunk_1007.cpp,data/crawl/git/new_hunk_1007.cpp,15,15,warning(degrade_cc_to_c_warning);,(_(degrade_cc_to_c_warning);,"[""addLog"", ""updateLog""]","[[""warning""], [""_""]]",[4387977570525017931],6521,1315636.3636363635,11
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_531.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_531.cpp,data/crawl/git/new_hunk_531.cpp,7,7,"die(_(""SHA1 COLLISION FOUND WITH %s !""),
		    sha1_to_hex(entry->idx.sha1));","die(_(""SHA1 COLLISION FOUND WITH %s !""),
		    oid_to_hex(&entry->idx.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""entry"", ""sha1""], [""oid_to_hex"", ""&entry"", ""oid""]]",[3937963313461094703],6520,700363.6363636364,11
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7298.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_7298.cpp,data/crawl/git/new_hunk_7298.cpp,4,4,"printf(""  Bin "");","fprintf(options->file, ""  Bin "");","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""options"", ""file""]]",[-11597153945239488240],6519,0.0,10
https://github.com/git/git/commit/18d472db6fe3909537ceb7e0c54cf01fa3466b8f,09 Jul 2013,"t4211: fix broken test when one -L range is subset of another

t4211 attempts to test multiple git-log -L ranges where one range is a
superset of the other, and falsely succeeds because its ""expected""
output is incorrect.

Overlapping -L ranges handed to git-log are coalesced by
line-log.c:sort_and_merge_range_set() into a set of non-overlapping,
disjoint ranges. When one range is a subset of another,
sort_and_merge_range_set() should coalesce both ranges to the superset
range, but instead the coalesced range often is incorrectly truncated to
the end of the subset range. For example, ranges 2-8 and 3-4 are
coalesced incorrectly to 2-4.

One can observe this incorrect behavior with git-log -L using the test
repository created by t4211. The superset/subset ranges t4211 employs
are 4-$ and 8-12 (where $ represents end-of-file). The coalesced range
should be 4-$. Manually invoking git-log with the same ranges the test
employs, we see:

  % git log -L 4:a.c simple |
    awk '/^commit [0-9a-f]{40}/ { print substr($2,1,7) }'
  4659538
  100b61a
  39b6eb2
  a6eb826
  f04fb20
  de4c48a

  % git log -L 8,12:a.c simple | awk ...
  f04fb20
  de4c48a

  % git log -L 4:a.c -L 8,12:a.c simple | awk ...
  a6eb826
  f04fb20
  de4c48a

This last output is incorrect. 8-12 is a subset of 4-$, hence the output
of the coalesced range should be the same as the 4-$ output shown first.
In fact, the above incorrect output is the truncated bogus range 4-12:

  % git log -L 4,12:a.c simple | awk ...
  a6eb826
  f04fb20
  de4c48a

Fix the test to correctly fail in the presence of the
sort_and_merge_range_set() coalescing bug. Do so by changing the
""expected"" output to the commits mentioned in the 4-$ output above.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/hunk_3535.cpp,block change,non-trivial,data/crawl/git/old_hunk_3535.cpp,data/crawl/git/new_hunk_3535.cpp,-1,10,,"printf(""%d\n"", f(15));","[""addLog""]","[[], [""printf"", ""%d\\n"", ""f"", ""15""]]",[13388629844954367807],6518,33120.0,10
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2493.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2493.cpp,data/crawl/git/new_hunk_2493.cpp,3,3,"error(""bogus commit object %s"", sha1_to_hex(item->object.sha1));","error(""bogus commit object %s"", oid_to_hex(&item->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""item"", ""sha1""], [""oid_to_hex"", ""&item"", ""oid""]]",[20499381312255292725],6517,0.0,10
https://github.com/git/git/commit/eb8fdbff3c26639912e73a01cfa2a86ce787d4b2,12 May 2016,"builtin/apply: avoid parameter shadowing 'linenr' global

Let's just rename the global 'state_linenr' as it will become
'state->linenr' in a following patch.

This also avoid errors when compiling with -Wshadow and makes
it safer to later move global variables into a ""state"" struct.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_1989.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1989.cpp,data/crawl/git/new_hunk_1989.cpp,3,3,"die(_(""unable to find filename in patch at line %d""), linenr);","die(_(""unable to find filename in patch at line %d""), state_linenr);","[""updateVariable""]","[[""linenr""], [""state_linenr""]]",[14223080916151947064],6516,0.0,10
https://github.com/git/git/commit/d7263d097c4510d864f8c9ff808bc9b377f0bf8f,01 Jun 2016,"builtin/apply: move 'state_linenr' global into 'struct apply_state'

To libify the apply functionality the 'state_linenr' variable should
not be static and global to the file. Let's move it into
'struct apply_state'.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_1958.cpp,use same variable,trivial,data/crawl/git/old_hunk_1958.cpp,data/crawl/git/new_hunk_1958.cpp,3,3,"die(_(""unable to find filename in patch at line %d""), state_linenr);","die(_(""unable to find filename in patch at line %d""), state->linenr);","[""removeVariable"", ""addVariable""]","[[""state_linenr""], [""state"", ""linenr""]]",[-11889008665354965638],6515,0.0,10
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1220.cpp,use same variable,trivial,data/crawl/git/old_hunk_1220.cpp,data/crawl/git/new_hunk_1220.cpp,3,3,"die(_(""unable to find filename in patch at line %d""), linenr);","die(_(""unable to find filename in patch at line %d""), state->linenr);","[""removeVariable"", ""addVariable""]","[[], [""state""]]",[2334072250796981426],6514,0.0,10
https://github.com/git/git/commit/221675de8d7ef363944161d8d887fb1b7afdf915,09 Sep 2016,"sequencer: lib'ify save_todo()

Instead of dying there, let the caller high up in the callchain notice
the error and handle it (by dying, still).

The only caller of save_todo(), pick_commits() can already return
errors, so its caller must be already prepared to handle error
returns, and with this step, we make it notice an error return from
this function.

So this is a safe conversion to make save_todo() callable
from new callers that want it not to die, without changing the
external behaviour of anything existing.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_1186.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_1186.cpp,data/crawl/git/new_hunk_1186.cpp,14,19,"die_errno(_(""Could not write to %s""), git_path_todo_file());","error_errno(_(""Could not write to %s""),
				   git_path_todo_file());","[""updateLog""]","[[""die_errno""], [""error_errno""]]",[5339537092231180198],6513,47088.0,10
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7036.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_7036.cpp,data/crawl/git/new_hunk_7036.cpp,8,8,"printf(""%s%s"", singular, list->list[0]);","strbuf_addf(out, ""%s%s"", singular, list->list[0]);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addf"", ""out""]]",[-5674764520144063431],6512,0.0,9
https://github.com/git/git/commit/0dda1d1ec816c613c9c0fd9b55ef0d3b782b84e8,22 Jul 2008,"Fix two leftovers from path_list->string_list

In the documentation, where you cannot get compile errors for using the
wrong member name, there were two mentions of 'path' left.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_6945.cpp,use same variable,trivial,data/crawl/git/old_hunk_6945.cpp,data/crawl/git/new_hunk_6945.cpp,3,3,"printf(""%s\n"", list.items[i].path);","printf(""%s\n"", list.items[i].string);","[""updateVariable""]","[[""path""], [""string""]]",[-13310468656260978836],6511,0.0,9
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6233.cpp,use same variable,trivial,data/crawl/git/old_hunk_6233.cpp,data/crawl/git/new_hunk_6233.cpp,7,7,"error(""Cannot access URL %s, return code %d"",
			      remote->url, results.curl_result);","error(""Cannot access URL %s, return code %d"",
			      repo->url, results.curl_result);","[""updateVariable""]","[[""remote""], [""repo""]]",[1111433356180913260],6510,16000.0,9
https://github.com/git/git/commit/34aec9f573af8e6fbe06285d660d9e1a84950e4c,06 Jun 2009,"parse-options: simplify usage argh handling

Simplify the argh printing by simply calling usage_argh() if the option
can take an argument. Update macros defined in parse-options.h to set
the PARSE_OPT_NOARG flag.

The only other user of custom non-argument taking options is git-apply
(in this case OPTION_BOOLEAN for deprecated options). Update it to set
the PARSE_OPT_NOARG flag.

Thanks to Ren辿 Scharfe for the suggestion and starter patch.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewd-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/hunk_5965.cpp,use same text,non-trivial,data/crawl/git/old_hunk_5965.cpp,data/crawl/git/new_hunk_5965.cpp,24,-1,"fprintf(stderr, "" ..."");",,"[""removeLog""]","[[""fprintf"", ""stderr""], []]",[13925655284445451766],6509,25600.0,9
https://github.com/git/git/commit/1965ff744a7e4cdefcc467991182b779f3c9d0e8,28 Jun 2009,"add --porcelain option to git-push

If --porcelain is used git-push will produce machine-readable output.  The
output status line for each ref will be tab-separated and sent to stdout instead
of stderr.  The full symbolic names of the refs will be given.  For example

$ git push --dry-run --porcelain master :foobar 2>/dev/null \
  | perl -pe 's/\t/ TAB /g'

= TAB refs/heads/master:refs/heads/master TAB [up to date]
- TAB :refs/heads/foobar TAB [deleted]

Signed-off-by: Larry D'Anna <larry@elder-gods.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/hunk_5795.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_5795.cpp,data/crawl/git/new_hunk_5795.cpp,26,37,"print_ref_status('-', ""[deleted]"", ref, NULL, NULL);","print_ref_status('-', ""[deleted]"", ref, NULL, NULL, porcelain);","[""addVariable""]","[[], [""porcelain""]]",[-9178377914075802934],6508,0.0,9
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1393.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_1393.cpp,data/crawl/git/new_hunk_1393.cpp,7,7,"printf(""%s%sdiff --git a/%s b/%s%s\n"", prefix, c_meta, pair->one->path, pair->two->path, c_reset);","fprintf(opt->file, ""%s%sdiff --git a/%s b/%s%s\n"", prefix, c_meta, pair->one->path, pair->two->path, c_reset);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""opt"", ""file""]]",[-8816032784486576557],6507,2443840.0,9
https://github.com/git/git/commit/97ca7ca8ba3acbc7166fb7ff40819696ed20e8c6,26 Jan 2017,"fsck: move typename() printing to its own function

When an object has a problem, we mention its type. But we do
so by feeding the result of typename() directly to
fprintf(). This is potentially dangerous because typename()
can return NULL for some type values (like OBJ_NONE).

It's doubtful that this can be triggered in practice with
the current code, so this is probably not fixing a bug. But
it future-proofs us against modifications that make things
like OBJ_NONE more likely (and gives future patches a
central point to handle them).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/hunk_791.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_791.cpp,data/crawl/git/new_hunk_791.cpp,2,2,"fprintf(stderr, ""%s in %s %s: %s\n"",
		msg_type, typename(obj->type), describe_object(obj), err);","fprintf(stderr, ""%s in %s %s: %s\n"",
		msg_type, printable_type(obj), describe_object(obj), err);","[""removeVariable"", ""addVariable""]","[[""typename"", ""type""], [""printable_type""]]",[1053907418365229037],6506,0.0,9
https://github.com/git/git/commit/7422ab50d1011b2b26b59bf11b91a1202618f3e5,08 May 2017,"builtin/tag: convert to struct object_id

Parts of this module call lookup_commit_reference, which we want to
convert.  The module is small and mostly self-contained, so convert the
rest of it while we're at it.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_554.cpp,use same variable,trivial,data/crawl/git/old_hunk_554.cpp,data/crawl/git/new_hunk_554.cpp,33,33,"printf(_(""Deleted tag '%s' (was %s)\n""), name, find_unique_abbrev(sha1, DEFAULT_ABBREV));","printf(_(""Deleted tag '%s' (was %s)\n""), name, find_unique_abbrev(oid->hash, DEFAULT_ABBREV));","[""removeVariable"", ""addVariable""]","[[""sha1""], [""oid"", ""hash""]]",[13775018413119285420],6505,376160.0,9
https://github.com/git/git/commit/5118d7f4e6e00b7eac3ce08a16392a732edc0b2b,26 May 2017,"print errno when reporting a system call error

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_406.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_406.cpp,data/crawl/git/new_hunk_406.cpp,3,3,"error(_(""Cannot open patch file %s""), filename.buf);","error_errno(_(""Cannot open patch file %s""),
				   filename.buf);","[""updateLog""]","[[""error""], [""error_errno""]]",[-9527979481410194851],6504,305600.0,9
https://github.com/git/git/commit/618cd75707580819f19a5f01dba406ac72219c78,17 Nov 2010,"Provide 'git notes get-ref' to easily retrieve current notes ref

Script may use 'git notes get-ref' to easily retrieve the current notes ref.

Suggested-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_4935.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_4935.cpp,data/crawl/git/new_hunk_4935.cpp,-1,10,,"error(""too many parameters"");","[""addLog""]","[[], [""error"", ""too"", ""many"", ""parameters""]]",[1057589751800871355],6503,89640.0,8
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4771.cpp,,,data/crawl/git/old_hunk_4771.cpp,data/crawl/git/new_hunk_4771.cpp,-1,13,,"status_printf_ln(s, c, """");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c""]]",[-4482959075080447975],6502,0.0,8
https://github.com/git/git/commit/88a21979c5717e3f37b9691e90b6dbf2b94c751a,09 Mar 2011,"fetch/pull: recurse into submodules when necessary

To be able to access all commits of populated submodules referenced by the
superproject it is sufficient to only then let ""git fetch"" recurse into a
submodule when the new commits fetched in the superproject record new
commits for it. Having these commits present is extremely useful when
using the ""--submodule"" option to ""git diff"" (which is what ""git gui"" and
""gitk"" do since 1.6.6), as all submodule commits needed for creating a
descriptive output can be accessed. Also merging submodule commits (added
in 1.7.3) depends on the submodule commits in question being present to
work. Last but not least this enables disconnected operation when using
submodules, as all commits necessary for a successful ""git submodule
update -N"" will have been fetched automatically. So we choose this mode as
the default for fetch and pull.

Before a new or changed ref from upstream is updated in update_local_ref()
""git rev-list <new-sha1> --not --branches --remotes"" is used to determine
all newly fetched commits. These are then walked and diffed against their
parent(s) to see if a submodule has been changed. If that is the case, its
path is stored to be fetched after the superproject fetch is completed.

Using the ""--recurse-submodules"" or the ""--no-recurse-submodules"" option
disables the examination of the fetched refs because the result will be
ignored anyway.

There is currently no infrastructure for storing deleted and new
submodules in the .git directory of the superproject. That's why fetch and
pull for now only fetch submodules that are already checked out and are
not renamed.

In t7403 the ""--no-recurse-submodules"" argument had to be added to ""git
pull"" to avoid failure because of the moved upstream submodule repo.

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/hunk_4768.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_4768.cpp,data/crawl/git/new_hunk_4768.cpp,-1,59,,"die(""diff_setup_done failed"");","[""addLog""]","[[], [""die"", ""diff_setup_done"", ""failed""]]",[-9741318228225318585],6501,946260.0,8
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4269.cpp,use same variable,trivial,data/crawl/git/old_hunk_4269.cpp,data/crawl/git/new_hunk_4269.cpp,13,13,"error(""reflog for %s is a symlink"", oldref);","error(""reflog for %s is a symlink"", oldrefname);","[""updateVariable""]","[[""oldref""], [""oldrefname""]]",[-2738408914677833511],6500,0.0,8
https://github.com/git/git/commit/e910bb1e79d53d43d07013b4d7e58c9f3ec53c8d,07 Sep 2016,"notes-merge: convert struct notes_merge_pair to struct object_id

Convert each of this structure's members from an unsigned char array to
a struct object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",127,data/crawl/git/hunk_1463.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1463.cpp,data/crawl/git/new_hunk_1463.cpp,13,13,"printf(""Auto-merging notes for %s\n"", sha1_to_hex(p->obj));","printf(""Auto-merging notes for %s\n"", oid_to_hex(&p->obj));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""p""], [""oid_to_hex"", ""&p""]]",[5727636110885726295],6499,0.0,8
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1407.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_1407.cpp,data/crawl/git/new_hunk_1407.cpp,8,5,"printf(""virtual %s\n"", merge_remote_util(commit)->name);","strbuf_addf(&o->obuf, ""virtual %s\n"",
			merge_remote_util(commit)->name);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addf"", ""&o"", ""obuf""]]",[-9816832474693083965],6498,28080.0,8
https://github.com/git/git/commit/94d3997ecc09f36d17b9ad4b49c4709885e300f7,25 Jan 2017,"difftool: hack around -Wzero-length-format warning

Building with ""gcc -Wall"" will complain that the format in:

  warning("""")

is empty. Which is true, but the warning is over-eager. We
are calling the function for its side effect of printing
""warning:"", even with an empty string.

Our DEVELOPER Makefile knob disables the warning, but not
everybody uses it. Let's silence the warning in the code so
that nobody reports it or tries to ""fix"" it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_800.cpp,use same text format,non-trivial,data/crawl/git/old_hunk_800.cpp,data/crawl/git/new_hunk_800.cpp,3,3,"warning("""");","warning(""%s"", """");","[""addContent""]","[[], [""%s""]]",[4736028453042782],6497,574020.0,8
https://github.com/git/git/commit/23a9e0712d76a63c5af1caeb816943f466f0300e,26 May 2017,"use xfopen() in more places

xfopen()

 - provides error details
 - explains error on reading, or writing, or whatever operation
 - has l10n support
 - prints file name in the error

Some of these are missing in the places that are replaced with xfopen(),
which is a clear win. In some other places, it's just less code (not as
clearly a win as the previous case but still is).

The only slight regresssion is in remote-testsvn, where we don't report
the file class (marks files) in the error messages anymore. But since
this is a _test_ svn remote transport, I'm not too concerned.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_415.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_415.cpp,data/crawl/git/new_hunk_415.cpp,5,-1,"die_errno(_(""Could not open '%s' for writing""), filename);",,"[""removeLog""]","[[""die_errno"", ""_"", ""Could"", ""not"", ""open"", ""%s"", ""for"", ""writing"", ""filename""], []]",[8963619331342303412],6496,524160.0,8
https://github.com/git/git/commit/3b08e5b8c9130f57a38e51557dbb173b9edda5ba,16 Feb 2008,"Include the fast-import marks table in crash reports

If fast-import was not run with --export-marks but we are crashing
the frontend application developer may still benefit from having
that information available to them.  We now include the marks table
as part of the crash report if --export-marks was not supplied on
the command line.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_7477.cpp,,,data/crawl/git/old_hunk_7477.cpp,data/crawl/git/new_hunk_7477.cpp,-1,5,,"fputs(""-----\n"", rpt);","[""addLog""]","[[], [""fputs"", ""\\n"", ""rpt""]]",[-2731965694143889490],6495,74468.57142857143,7
https://github.com/git/git/commit/10c4c881c4d2cb0ece0508e7142e189e68445257,26 Jul 2008,"Allow add_path() to add non-existent directories to the path

This function had used make_absolute_path(); but this function dies if
the directory that contains the entry whose relative path was supplied in
the argument does not exist. This is a problem if the argument is, for
example, ""../libexec/git-core"", and that ""../libexec"" does not exist.

Since the resolution of symbolic links is not required for elements in
PATH, we can fall back to using make_nonrelative_path(), which simply
prepends $PWD to the path.

We have to move make_nonrelative_path() alongside make_absolute_path() in
abspath.c so that git-shell can be linked. See 5b8e6f85f.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_6924.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6924.cpp,data/crawl/git/new_hunk_6924.cpp,-1,29,,"die(""Too long path: %.*s"", 60, path);","[""addLog""]","[[], [""die"", ""Too"", ""long"", ""path"", ""%"", ""*s"", ""60"", ""path""]]",[10848113208999003329],6494,415337.14285714284,7
https://github.com/git/git/commit/e88d022af96312e64216bfec31bd6749277c335a,06 May 2009,"improve error message in config.c

Show errno if opening a lockfile fails.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_6063.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6063.cpp,data/crawl/git/new_hunk_6063.cpp,3,3,"error(""could not lock config file %s"", config_filename);","error(""could not lock config file %s: %s"", config_filename, strerror(errno));","[""updateContent"", ""addVariable""]","[[], [""%s"", ""strerror"", ""errno""]]",[12745142427614753524],6493,633394.2857142857,7
https://github.com/git/git/commit/a3c158d4a58b17c1e4a8d3f793344beee21d3a4c,01 Jun 2010,"Add a prefix output callback to diff output

The callback can be used to add some prefix string to each line of
diff output.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_5234.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_5234.cpp,data/crawl/git/new_hunk_5234.cpp,3,3,"fprintf(ecbdata->file, ""%s"", ecbdata->header->buf);","fprintf(ecbdata->opt->file, ""%s"", ecbdata->header->buf);","[""addVariable""]","[[], [""opt""]]",[4135046628039640640],6492,1012114.2857142857,7
https://github.com/git/git/commit/ded0abc73c67c6a9b9dbc2a22755fab01ae17e41,22 Feb 2011,"diff: handle diffstat of rewritten binary files

The logic in builtin_diffstat assumes that a
complete_rewrite pair should have its lines counted. This is
nonsensical for binary files and leads to confusing things
like:

  $ git diff --stat --summary HEAD^ HEAD
   foo.rand |  Bin 4096 -> 4096 bytes
   1 files changed, 0 insertions(+), 0 deletions(-)

  $ git diff --stat --summary -B HEAD^ HEAD
   foo.rand |   34 +++++++++++++++-------------------
   1 files changed, 15 insertions(+), 19 deletions(-)
   rewrite foo.rand (100%)

So let's reorder the function to handle binary files first
(which from diffstat's perspective look like complete
rewrites anyway), then rewrites, then actual diffstats.

There are two bonus prizes to this reorder:

  1. It gets rid of a now-superfluous goto.

  2. The binary case is at the top, which means we can
     further optimize it in the next patch.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_4834.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_4834.cpp,data/crawl/git/new_hunk_4834.cpp,-1,6,,"die(""unable to read files to diff"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""]]",[-7517484640717457377],6491,408342.85714285716,7
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4269.cpp,use same variable,trivial,data/crawl/git/old_hunk_4269.cpp,data/crawl/git/new_hunk_4269.cpp,41,41,"error(""Directory not empty: %s"", newref);","error(""Directory not empty: %s"", newrefname);","[""updateVariable""]","[[""newref""], [""newrefname""]]",[2773223809715939883],6490,0.0,7
https://github.com/git/git/commit/8f17f5b22ae54ecc3dfdafe33d7697e1bf3949f6,12 Mar 2014,"wt-status: i18n of section labels

The original code assumes that:

 (1) the number of bytes written is the width of a string, so they
     can line up;

 (2) the ""how"" string is always <= 19 bytes.

Neither of which we should assume.

Using the same approach as the earlier 3651e45c (wt-status: take the
alignment burden off translators, 2013-11-05), compute the necessary
column width to hold the longest label and use that for alignment.

cf. http://bugs.debian.org/725777

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Helped-by: Sandy Carter
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_3334.cpp,,,data/crawl/git/old_hunk_3334.cpp,data/crawl/git/new_hunk_3334.cpp,-1,24,,"status_printf(s, color(WT_STATUS_HEADER, s), ""\t"");","[""addLog""]","[[], [""status_printf"", ""s"", ""color"", ""WT_STATUS_HEADER"", ""s"", ""\\t""]]",[9500334430214577577],6489,226285.7142857143,7
https://github.com/git/git/commit/27852b2c5347ecd815301e668e7415509f1dae07,22 Feb 2016,"branch: report errors in tracking branch setup

When setting up a new tracking branch fails due to issues with
the configuration file we do not report any errors to the user
and pretend setting the tracking branch succeeded.

Setting up the tracking branch is handled by the
`install_branch_config` function. We do not want to simply die
there as the function is not only invoked when explicitly setting
upstream information with `git branch --set-upstream-to=`, but
also by `git push --set-upstream` and `git clone`. While it is
reasonable to die in the explict first case, we would lose
information in the latter two cases, so we only print the error
message but continue the program as usual.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_2260.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_2260.cpp,data/crawl/git/new_hunk_2260.cpp,7,7,"error(_(""Not tracking: ambiguous information for ref %s""),
				orig_ref);","die(_(""Not tracking: ambiguous information for ref %s""),
		    orig_ref);","[""updateLog""]","[[""error""], [""die""]]",[-10210225593202855182],6488,2265531.4285714286,7
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1417.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1417.cpp,data/crawl/git/new_hunk_1417.cpp,3,3,"die(""ren1_src != ren2_src"");","die(""BUG: ren1_src != ren2_src"");","[""updateContent""]","[[], [""BUG""]]",[327024216826240861],6487,18514.285714285714,7
https://github.com/git/git/commit/d7e6b6a8dcc8a98a4dcf6bc291f1e68b1acaecae,02 May 2017,"fast-import: convert internal structs to struct object_id

Convert struct tree_entry_ms, struct branch, struct tag, and struct
hash_list to use struct object_id by changing the definition and
applying the following semantic patch, plus the standard object_id
transforms:

@@
struct tree_entry_ms E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tree_entry_ms *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct branch E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct branch *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct tag E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tag *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct hash_list E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct hash_list *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/hunk_593.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_593.cpp,data/crawl/git/new_hunk_593.cpp,7,7,"fprintf(rpt, ""  tip commit  : %s\n"", sha1_to_hex(b->sha1));","fprintf(rpt, ""  tip commit  : %s\n"", oid_to_hex(&b->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""b"", ""sha1""], [""oid_to_hex"", ""&b"", ""oid""]]",[11703065648181253471],6486,0.0,7
https://github.com/git/git/commit/188dce131fa95d85ddc024a1bc7d2b7fc5da4424,24 Jun 2017,"ls-files: use repository object

Convert ls-files to use a repository struct and recurse submodules
inprocess.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",233,data/crawl/git/hunk_360.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_360.cpp,data/crawl/git/new_hunk_360.cpp,-1,14,,"die(""index file corrupt"");","[""addLog""]","[[], [""die"", ""index"", ""file"", ""corrupt""]]",[-18800083462689974984],6485,1701874.2857142857,7
https://github.com/git/git/commit/fc045fe7d4fa220f19274715c936636fe0516ea3,13 Feb 2018,"Mark messages for translations

Small changes in messages to fit the style and typography of rest.
Reuse already translated messages if possible.
Do not translate messages aimed at developers of git.
Fix unit tests depending on the original string.
Use `test_i18ngrep` for tests with translatable strings.
Change and verify rest of tests via `make GETTEXT_POISON=1 test`.

Signed-off-by: Alexander Shopov <ash@kambanaria.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_86.cpp,use same text format,trivial,data/crawl/git/old_hunk_86.cpp,data/crawl/git/new_hunk_86.cpp,3,3,"die_errno(""Could not chdir to '%s'"", gitdirenv);","die_errno(_(""cannot chdir to '%s'""), gitdirenv);","[""updateContent"", ""addVariable""]","[[""Could"", ""not""], [""_"", ""cannot""]]",[-14315143501418834449],6484,0.0,7
https://github.com/git/git/commit/debca9d2fe784193dc2d9f98b5edac605ddfefbb,14 Feb 2018,"object: rename function 'typename' to 'type_name'

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/hunk_30.cpp,invoke same method,trivial,data/crawl/git/old_hunk_30.cpp,data/crawl/git/new_hunk_30.cpp,1,1,"die(_(""object %s: expected type %s, found %s""),
			    oid_to_hex(&obj->oid),
			    typename(obj->type), typename(type));","die(_(""object %s: expected type %s, found %s""),
			    oid_to_hex(&obj->oid),
			    type_name(obj->type), type_name(type));","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""typename"", ""typename""], [""type_name"", ""type_name""]]",[-4955489930721017996],6483,0.0,7
https://github.com/git/git/commit/95bf4bd4f7280312571e642339f3571310d0d660,04 Jan 2008,"git-clean: make ""Would remove ..."" path relative to cwd again

The rewrite changed the output to use the path relative to the
top of the work tree without a good reason.  This fixes it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_7608.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_7608.cpp,data/crawl/git/new_hunk_7608.cpp,3,3,"printf(""Would remove %s\n"", directory.buf);","printf(""Would remove %s\n"",
				       directory.buf + prefix_offset);","[""addVariable""]","[[], [""prefix_offset""]]",[2150067401993000303],6482,0.0,6
https://github.com/git/git/commit/588071112c7ca14a04d674e4f019572f0bb77326,15 Feb 2008,"diff.c: fixup garding of config parser from value=NULL

Christian Couder noticed that there still were a handcrafted error()
call that we should have converted to config_error_nonbool() where
parse_lldiff_command() parses the configuration file.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_7482.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_7482.cpp,data/crawl/git/new_hunk_7482.cpp,3,3,"error(""%s: lacks value"", var);",config_error_nonbool(var);,"[""updateLog"", ""removeContent""]","[[""error"", ""%s"", ""lacks"", ""value""], [""config_error_nonbool""]]",[-69406853232319889],6481,960.0,6
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7038.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_7038.cpp,data/crawl/git/new_hunk_7038.cpp,55,32,"printf(""Merge "");","strbuf_addstr(out, ""Merge "");","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addstr"", ""out""]]",[-4801477527192140132],6480,0.0,6
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,228,,"die(""Unable to write new index file"");","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""write"", ""new"", ""index"", ""file""]]",[9643391217927606253],6479,91200.0,6
https://github.com/git/git/commit/d75307084da5f89329de190bb9b4a3196cec1d0e,05 Jan 2009,"remove trailing LF in die() messages

LF at the end of format strings given to die() is redundant because
die already adds one on its own.

Signed-off-by: Alexander Potashev <aspotashev@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_6548.cpp,use same text,non-trivial,data/crawl/git/old_hunk_6548.cpp,data/crawl/git/new_hunk_6548.cpp,3,3,"die(""No HEAD -- no initial commit yet?\n"");","die(""No HEAD -- no initial commit yet?"");","[""updateContent""]","[[""\\n""], []]",[-11776070748106360],6478,0.0,6
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,107,,"printf("" merges with remote %s\n"", merge->items[0].string);","[""addLog""]","[[], [""printf"", ""merges"", ""with"", ""remote"", ""%s\\n"", ""merge"", ""items[0]"", ""string""]]",[-4303492420749202182],6477,25920.0,6
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,61,,"printf(""    %s\n"", name);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""name""]]",[9215796307133573166],6476,338160.0,6
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6143.cpp,use same text,non-trivial,data/crawl/git/old_hunk_6143.cpp,data/crawl/git/new_hunk_6143.cpp,3,3,"fprintf(stderr, ""Already on \""%s\""\n"",
					new->name);","fprintf(stderr, ""Already on '%s'\n"",
					new->name);","[""updateContent""]","[[""\\"", ""%s\\""], [""%s""]]",[4775301831892644278],6475,3600.0,6
https://github.com/git/git/commit/86c91f91794cd6af8e19fbe68ab283d567d2b66f,05 Aug 2009,"git apply: option to ignore whitespace differences

Introduce --ignore-whitespace option and corresponding config bool to
ignore whitespace differences while applying patches, akin to the
'patch' program.

'git am', 'git rebase' and the bash git completion are made aware of
this option.

Signed-off-by: Giuseppe Bilotta <giuseppe.bilotta@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",399,data/crawl/git/hunk_5740.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_5740.cpp,data/crawl/git/new_hunk_5740.cpp,-1,101,,"printf(""%d"", num);","[""addLog""]","[[], [""printf"", ""%d"", ""num""]]",[12503247723739103219],6474,118320.0,6
https://github.com/git/git/commit/d43e90732bbc8eae6cbfd18f61ca6c82c8920732,29 Nov 2010,"entry.c: remove ""checkout-index"" from error messages

Back then when entry.c was part of checkout-index (or checkout-cache
at that time [1]). It makes sense to print the command name in error
messages. Nowadays entry.c is in libgit and can be used by any
commands, printing ""git checkout-index: blah"" does no more than
confusion. The error messages without it still give enough information.

[1] 12dccc1 (Make fiel checkout function available to the git library - 2005-06-05)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_4922.cpp,use same text,non-trivial,data/crawl/git/old_hunk_4922.cpp,data/crawl/git/new_hunk_4922.cpp,3,3,"error(""git checkout-index: unable to read sha1 file of %s (%s)"",
				path, sha1_to_hex(ce->sha1));","error(""unable to read sha1 file of %s (%s)"",
				path, sha1_to_hex(ce->sha1));","[""updateContent""]","[[""git"", ""checkout"", ""index""], []]",[4453837068525385472],6473,0.0,6
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,30,,"status_printf_ln(s, color(WT_STATUS_HEADER, s), """");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""color"", ""WT_STATUS_HEADER"", ""s""]]",[6845972134648319543],6472,0.0,6
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4770.cpp,use same text format,non-trivial,data/crawl/git/old_hunk_4770.cpp,data/crawl/git/new_hunk_4770.cpp,27,27,"fprintf(s->fp, ""# %s\n"", only_include_assumed);","status_printf_ln(s, GIT_COLOR_NORMAL,
					""%s"", only_include_assumed);","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""%s\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL"", ""%s""]]",[3607396239774366475],6471,0.0,6
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4770.cpp,use same text format,non-trivial,data/crawl/git/old_hunk_4770.cpp,data/crawl/git/new_hunk_4770.cpp,16,16,"fprintf(s->fp,
				"" Lines starting\n""
				""# with '#' will be ignored, and an empty""
				"" message aborts the commit.\n"");","status_printf_more(s, GIT_COLOR_NORMAL,
				"" Lines starting\n""
				""with '#' will be ignored, and an empty""
				"" message aborts the commit.\n"");","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp""], [""status_printf_more"", ""GIT_COLOR_NORMAL""]]",[20501433586089975788],6470,0.0,6
https://github.com/git/git/commit/1c88a6d17492b197b9b3298cbc34efa804928302,11 Sep 2012,"Sync with 1.7.11.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",961,data/crawl/git/hunk_4111.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_4111.cpp,data/crawl/git/new_hunk_4111.cpp,4,-1,"die(""diff_setup_done failed"");",,"[""removeLog""]","[[""die"", ""diff_setup_done"", ""failed""], []]",[9741318228225318585],6469,1885200.0,6
https://github.com/git/git/commit/95d621217a386b821d606168f986c89254584a87,04 May 2015,"config: use error() instead of fprintf(stderr, ...)

The die() / error() / warning() helpers put a fatal: / error: /
warning: prefix in front of the error message they print describing
the message's severity, which users are likely to be accustomed to
seeing these days.

This change will also be useful when marking the message for
translation: the argument to error() includes no newline at the end,
so it is less fussy for translators to translate without lines running
together in the translated output.

While we're here, start the error messages with a lowercase letter to
match the usual typography of error messages.

A quick web search and a code search at codesearch.debian.net finds no
scripts trying to parse these error messages, so this change should be
safe.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_3248.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_3248.cpp,data/crawl/git/new_hunk_3248.cpp,3,3,"fprintf(stderr, ""Invalid key pattern: %s\n"", key_);","error(""invalid key pattern: %s"", key_);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Invalid"", ""%s\\n""], [""error"", ""invalid"", ""%s""]]",[16070564858483165465],6468,1222560.0,6
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2883.cpp,use same variable,trivial,data/crawl/git/old_hunk_2883.cpp,data/crawl/git/new_hunk_2883.cpp,9,8,"die_errno(_(""Could not open %s""), todo_file);","die_errno(_(""Could not open %s""), git_path_todo_file());","[""removeVariable"", ""addVariable""]","[[""todo_file""], [""git_path_todo_file""]]",[-210441503875058068],6467,0.0,6
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2502.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2502.cpp,data/crawl/git/new_hunk_2502.cpp,3,3,"fprintf(stderr, ""Unable to fetch %s, will not be able to update server info refs\n"", sha1_to_hex(request->obj->sha1));","fprintf(stderr, ""Unable to fetch %s, will not be able to update server info refs\n"", oid_to_hex(&request->obj->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""request"", ""sha1""], [""oid_to_hex"", ""&request"", ""oid""]]",[21360397726923635681],6466,0.0,6
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2006.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_2006.cpp,data/crawl/git/new_hunk_2006.cpp,12,16,"printf(""Callback: \""%s\"", %d\n"",
		       (arg ? arg : ""not set""), unset);","show(&expect, &ret, ""Callback: \""%s\"", %d"",
		     (arg ? arg : ""not set""), unset);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%d\\n""], [""show"", ""&expect"", ""&ret"", ""%d""]]",[-21424789886093274075],6465,0.0,6
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1408.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_1408.cpp,data/crawl/git/new_hunk_1408.cpp,11,11,"die(_(""error building trees""));","err(o, _(""error building trees""));","[""updateLog"", ""addVariable""]","[[""die""], [""err"", ""o""]]",[-1126055498403815445],6464,0.0,6
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1384.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_1384.cpp,data/crawl/git/new_hunk_1384.cpp,3,3,"not_found(""Request not supported: '%s'"", dir);","not_found(&hdr, ""Request not supported: '%s'"", dir);","[""addVariable""]","[[], [""&hdr""]]",[-8147347704673570168],6463,21600.0,6
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1347.cpp,,,data/crawl/git/old_hunk_1347.cpp,data/crawl/git/new_hunk_1347.cpp,-1,9,,self.get_logger();,"[""addLog""]","[[], [""self"", ""get_logger""]]",[2890257155482881115],6462,16560.0,6
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1323.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_1323.cpp,data/crawl/git/new_hunk_1323.cpp,3,3,"printf(""%6d\t%s\n"", (int)UTIL_TO_INT(item), item->string);","fprintf(log->file, ""%6d\t%s\n"",
				(int)UTIL_TO_INT(item), item->string);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""log"", ""file""]]",[-5437866247109003464],6461,55440.0,6
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1236.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1236.cpp,data/crawl/git/new_hunk_1236.cpp,11,12,"error(_(""read of %s failed""), name);","error(_(""failed to read %s""), name);","[""updateContent""]","[[""of""], [""to""]]",[640003845005640],6460,60480.0,6
https://github.com/git/git/commit/d601fd09573540287d1e00e3a25ef6311885bb46,16 Mar 2017,"update submodules: add submodule config parsing

Similar to b33a15b08 (push: add recurseSubmodules config option,
2015-11-17) and 027771fcb1 (submodule: allow erroneous values for the
fetchRecurseSubmodules option, 2015-08-17), we add submodule-config code
that is later used to parse whether we are interested in updating
submodules.

We need the `die_on_error` parameter to be able to call this parsing
function for the config file as well, which if incorrect lets Git die.

As we're just touching the header file, also mark all functions extern.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_769.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_769.cpp,data/crawl/git/new_hunk_769.cpp,-1,13,,"die(""bad %s argument: %s"", opt, arg);","[""addLog""]","[[], [""die"", ""bad"", ""%s"", ""argument"", ""%s"", ""opt"", ""arg""]]",[-5003021781308979205],6459,1880880.0,6
https://github.com/git/git/commit/cb71f8bdb5a105cd5b66142b887989d9addc82d0,24 Apr 2017,"PRItime: introduce a new ""printf format"" for timestamps

Currently, Git's source code treats all timestamps as if they were
unsigned longs. Therefore, it is okay to write ""%lu"" when printing them.

There is a substantial problem with that, though: at least on Windows,
time_t is *larger* than unsigned long, and hence we will want to switch
away from the ill-specified `unsigned long` data type.

So let's introduce the pseudo format ""PRItime"" (currently simply being
defined to ""lu"") to make it easier to change the data type used for
timestamps.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_636.cpp,use same variable,trivial,data/crawl/git/old_hunk_636.cpp,data/crawl/git/new_hunk_636.cpp,3,3,"printf(""%lu "", commit->date);","printf(""%""PRItime"" "", commit->date);","[""updateContent"", ""addContent"", ""addVariable""]","[[""%lu""], [""%"", ""PRItime""]]",[7127844621736664168],6458,0.0,6
https://github.com/git/git/commit/7451fcdc0d3cffdb9aa79d2651830b44a8e052d6,26 Sep 2017,"Sync with 2.14.2

* maint:
  Git 2.14.2
  Git 2.13.6
  Git 2.12.5
  Git 2.11.4
  Git 2.10.5
  cvsimport: shell-quote variable used in backticks
  archimport: use safe_pipe_capture for user input
  shell: drop git-cvsserver support by default
  cvsserver: use safe_pipe_capture for `constant commands` as well
  cvsserver: use safe_pipe_capture instead of backticks
  cvsserver: move safe_pipe_capture() to the main package",239,data/crawl/git/hunk_213.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_213.cpp,data/crawl/git/new_hunk_213.cpp,10,-1,"die(""git-cvsserver only handles server: %s"", arg);",,"[""removeLog""]","[[""die"", ""git"", ""cvsserver"", ""only"", ""handles"", ""server"", ""%s"", ""arg""], []]",[12430851741948940614],6457,12960.0,6
https://github.com/git/git/commit/c8a3ea1f2972cb18715f06f99973c594b329c472,22 Feb 2018,"checkout: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/hunk_13.cpp,use same variable,trivial,data/crawl/git/old_hunk_13.cpp,data/crawl/git/new_hunk_13.cpp,41,41,"fprintf(stderr, _(""Reset branch '%s'\n""),
						new->name);","fprintf(stderr, _(""Reset branch '%s'\n""),
						new_branch_info->name);","[""removeVariable"", ""addVariable""]","[[""new""], [""new_branch_info""]]",[383663773832696774],6456,0.0,6
https://github.com/git/git/commit/610f043bb378d12f399f4e5692fb874e0a043b23,22 Jun 2007,"Import branch 'git-p4' of git://repo.or.cz/fast-export

Simon has asked that the git.git project include the git-p4 project
as at least a contrib/fast-import within git.git.  I think it makes
a lot of sense, as git-p4 nicely complements the only other in-tree
fast-import user: import-tars.perl.

git-p4 is offered under the MIT license by its authors.",1737,data/crawl/git/hunk_8278.cpp,block change,non-trivial,data/crawl/git/old_hunk_8278.cpp,data/crawl/git/new_hunk_8278.cpp,-1,18,,die(msg);,"[""addLog""]","[[], [""die"", ""msg""]]",[4462070844842881441],6455,55008.0,5
https://github.com/git/git/commit/ef6f0af2b6975e6568542123d015aa7e39bea0c3,04 Jul 2007,"git-init: set core.worktree if GIT_WORK_TREE is specified

Now you can do the following to create a repository which
has a separate working tree:

    /tmp/foo$ export GIT_DIR=/tmp/bar
    /tmp/foo$ git --work-tree . init
    Initialized empty Git repository in /tmp/bar/
    /tmp/foo$ git config core.worktree
    /tmp/foo

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_8235.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_8235.cpp,data/crawl/git/new_hunk_8235.cpp,-1,17,,"die(""Unable to read current working directory"");","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""read"", ""current"", ""working"", ""directory""]]",[-13498077676133175965],6454,16128.0,5
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/hunk_8175.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_8175.cpp,data/crawl/git/new_hunk_8175.cpp,17,-1,"die(""Unable to read current working directory"");",,"[""removeLog""]","[[""die"", ""Unable"", ""to"", ""read"", ""current"", ""working"", ""directory""], []]",[13498077676133175965],6453,0.0,5
https://github.com/git/git/commit/1fb328947c8e3ace9df7d2d5374e26e2510a4e93,08 Mar 2008,"git-clean: correct printing relative path

When the given path contains '..' then git-clean incorrectly printed names
of files. This patch changes cmd_clean to use quote_path_relative().
Also, ""failed to remove ..."" message used absolutely path, but not it is
corrected to use relative path.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_7333.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_7333.cpp,data/crawl/git/new_hunk_7333.cpp,4,5,"printf(""Would remove %s\n"",
				       directory.buf + prefix_offset);","printf(""Would remove %s\n"", qname);","[""removeVariable"", ""addVariable""]","[[""directory"", ""buf"", ""prefix_offset""], [""qname""]]",[280287864387649706],6452,0.0,5
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6870.cpp,use same text,non-trivial,data/crawl/git/old_hunk_6870.cpp,data/crawl/git/new_hunk_6870.cpp,3,3,"output(1, ""%s is a directory in %s added as %s instead"",
		       ren1_dst, branch2, dst_name1);","output(1, ""%s is a directory in %s adding as %s instead"",
		       ren1_dst, branch2, dst_name1);","[""updateContent""]","[[""added""], [""adding""]]",[-3435560128246074786],6451,0.0,5
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6185.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6185.cpp,data/crawl/git/new_hunk_6185.cpp,3,3,"die(""'%s': unable to chdir or not a git archive"", dir);","die(""'%s' does not appear to be a git repository"", dir);","[""updateContent""]","[[""unable"", ""chdir"", ""or"", ""archive""], [""does"", ""appear"", ""be"", ""repository""]]",[-31903778132293611473],6450,22464.0,5
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,137,,"fprintf(stderr, ""---"");","[""addLog""]","[[], [""fprintf"", ""stderr""]]",[-13925655284445451766],6449,301824.0,5
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5983.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_5983.cpp,data/crawl/git/new_hunk_5983.cpp,-1,38,,"error(""Unable to start request"");","[""addLog""]","[[], [""error"", ""Unable"", ""to"", ""start"", ""request""]]",[14866092711229707640],6448,565920.0,5
https://github.com/git/git/commit/e6cc51046f3669332f51a52a7de966d842b9d4e4,24 Feb 2010,"fetch --all/--multiple: keep all the fetched branch information

Since ""git fetch"" learned ""--all"" and ""--multiple"" options, it has become
tempting for users to say ""git pull --all"".  Even though it may fetch from
remotes that do not need to be fetched from for merging with the current
branch, it is handy.

""git fetch"" however clears the list of fetched branches every time it
contacts a different remote.  Unless the current branch is configured to
merge with a branch from a remote that happens to be the last in the list
of remotes that are contacted, ""git pull"" that fetches from multiple
remotes will not be able to find the branch it should be merging with.

Make ""fetch"" clear FETCH_HEAD (unless --append is given) and then append
the list of branches fetched to it (even when --append is not given).  That
way, ""pull"" will be able to find the data for the branch being merged in
FETCH_HEAD no matter where the remote appears in the list of remotes to be
contacted by ""git fetch"".

Reported-by: Michael Lukashov
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_5396.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_5396.cpp,data/crawl/git/new_hunk_5396.cpp,-1,9,,"error(""cannot open %s: %s\n"", filename, strerror(errno));","[""addLog""]","[[], [""error"", ""cannot"", ""open"", ""%s"", ""%s\\n"", ""filename"", ""strerror"", ""errno""]]",[19383622588692013371],6447,235296.0,5
https://github.com/git/git/commit/74884b524e7e12b3419264d3180de785a9e39fa5,13 Mar 2010,"notes: rework subcommands and parse options

Running 'git notes copy -h' is not very helfpul right now. It lists
the options for all the git notes subcommands and is rather confusing.
Fix this by splitting cmd_notes() into separate functions for each
subcommand (besides append and edit since they're very similar) and
only providing a usage message for the subcommand.

This has an added benefit of reducing the code complexity while making
it safer and easier to read. The downside is we get some code bloat
from similar setup and teardown needed for notes and options parsing.
We also get a bit stricter in options parsing by only allowing
the ref option to come before the subcommand.

Acked-by: Johan Herland <johan@herland.net>
Cc: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/hunk_5346.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_5346.cpp,data/crawl/git/new_hunk_5346.cpp,-1,89,,"die(""Failed to resolve '%s' as a valid ref."", object_ref);","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""resolve"", ""%s"", ""as"", ""a"", ""valid"", ""ref"", ""object_ref""]]",[-3113607416360487782],6446,1031904.0,5
https://github.com/git/git/commit/3e3ec2abe0f275dda285e989224e4c3da19e7adb,03 Apr 2010,"whitespace: add tab-in-indent error class

Some projects and languages use coding style where no tab character is used to
indent the lines.

This only adds support and documentation for ""apply --whitespace=warn"" and
""diff --check""; later patches add ""apply --whitespace=fix"" and tests.

Signed-off-by: Chris Webb <chris@arachsys.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_5294.cpp,,,data/crawl/git/old_hunk_5294.cpp,data/crawl/git/new_hunk_5294.cpp,-1,11,,"fputs(reset, stream);","[""addLog""]","[[], [""fputs"", ""reset"", ""stream""]]",[-19549131848656771817],6445,242784.0,5
https://github.com/git/git/commit/3228e67120a8c71bf7804a5c52448a841d6f3b58,17 Nov 2010,"git notes merge: Add automatic conflict resolvers (ours, theirs, union)

The new -s/--strategy command-line option to 'git notes merge' allow the user
to choose how notes merge conflicts should be resolved. There are four valid
strategies to choose from:

1. ""manual"" (the default): This will let the user manually resolve conflicts.
   This option currently fails with an error message. It will be implemented
   properly in future patches.

2. ""ours"": This automatically chooses the local version of a conflict, and
   discards the remote version.

3. ""theirs"": This automatically chooses the remote version of a conflict, and
   discards the local version.

4. ""union"": This automatically resolves the conflict by appending the remote
   version to the local version.

The strategies are implemented using the combine_notes_* functions from the
notes.h API.

The patch also includes testcases verifying the correct implementation of
these strategies.

This patch has been improved by the following contributions:
- Jonathan Nieder: Future-proof by always checking add_note() return value
- Stephen Boyd: Use test_commit
- Stephen Boyd: Use correct option name

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Thanks-to: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",561,data/crawl/git/hunk_4949.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_4949.cpp,data/crawl/git/new_hunk_4949.cpp,-1,20,,"die(""BUG: combine_notes_overwrite failed"");","[""addLog""]","[[], [""die"", ""BUG"", ""combine_notes_overwrite"", ""failed""]]",[-2659693736017767201],6444,0.0,5
https://github.com/git/git/commit/abb371a1ef5bddee904551afdec38854f95e99bb,22 Feb 2011,"diff: don't retrieve binary blobs for diffstat

We only need the size, which is much cheaper to get,
especially if it is a big binary file.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_4833.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_4833.cpp,data/crawl/git/new_hunk_4833.cpp,4,-1,"die(""unable to read files to diff"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""], []]",[7517484640717457377],6443,93888.0,5
https://github.com/git/git/commit/368aa52952deb631b38a89837c4abbb00c5261c1,06 Jan 2013,"add git-check-ignore sub-command

This works in a similar manner to git-check-attr.

Thanks to Jeff King and Junio C Hamano for the idea:
http://thread.gmane.org/gmane.comp.version-control.git/108671/focus=108815

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",908,data/crawl/git/hunk_3971.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_3971.cpp,data/crawl/git/new_hunk_3971.cpp,-1,122,,"die(""line is badly quoted"");","[""addLog""]","[[], [""die"", ""line"", ""is"", ""badly"", ""quoted""]]",[-5376509924267512556],6442,739008.0,5
https://github.com/git/git/commit/226ad3482ac506af0eadd04e732dda556fda80e4,13 Jul 2013,"builtin: add git-check-mailmap command

Introduce command check-mailmap, similar to check-attr and check-ignore,
which allows direct testing of .mailmap configuration.

As plumbing accessible to scripts and other porcelain, check-mailmap
publishes the stable, well-tested .mailmap functionality employed by
built-in Git commands.  Consequently, script authors need not
re-implement .mailmap functionality manually, thus avoiding potential
quirks and behavioral differences.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_3519.cpp,,,data/crawl/git/old_hunk_3519.cpp,data/crawl/git/new_hunk_3519.cpp,-1,52,,"maybe_flush_or_die(stdout, ""stdout"");","[""addLog""]","[[], [""maybe_flush_or_die"", ""stdout"", ""stdout""]]",[-25128539947613561338],6441,1358784.0,5
https://github.com/git/git/commit/b4fb09e4da53bfc6c720337142af5db3204736d5,10 Aug 2015,"lockfile: add accessor get_lock_file_path()

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_2908.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_2908.cpp,data/crawl/git/new_hunk_2908.cpp,4,4,"error(""chmod on %s failed: %s"",
				lock->filename.buf, strerror(errno));","error(""chmod on %s failed: %s"",
			      get_lock_file_path(lock), strerror(errno));","[""removeVariable"", ""addVariable""]","[[""filename"", ""buf""], [""get_lock_file_path""]]",[3557264256543125690],6440,0.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2672.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2672.cpp,data/crawl/git/new_hunk_2672.cpp,-1,31,,"die(""transport '%s' not allowed"", type);","[""addLog""]","[[], [""die"", ""transport"", ""%s"", ""not"", ""allowed"", ""type""]]",[615898744279357072],6439,8064.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2671.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2671.cpp,data/crawl/git/new_hunk_2671.cpp,-1,4,,"die(""unable to generate diff for %s"", pair->one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""for"", ""%s"", ""pair"", ""one"", ""path""]]",[-4176965545503248889],6438,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2670.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2670.cpp,data/crawl/git/new_hunk_2670.cpp,-1,21,,"warning(""protocol restrictions not applied to curl redirects because\n""
			""your curl version is too old (>= 7.19.4)"");","[""addLog""]","[[], [""warning"", ""protocol"", ""restrictions"", ""not"", ""applied"", ""to"", ""curl"", ""redirects"", ""because\\n"", ""your"", ""curl"", ""version"", ""is"", ""too"", ""old"", ""7"", ""19"", ""4""]]",[29988564774754874644],6437,5760.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2668.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2668.cpp,data/crawl/git/new_hunk_2668.cpp,-1,5,,"error(""unable to generate patch-id diff for %s"",
				     p->one->path);","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""generate"", ""patch"", ""id"", ""diff"", ""for"", ""%s"", ""p"", ""one"", ""path""]]",[-2764243341565386310],6436,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2667.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2667.cpp,data/crawl/git/new_hunk_2667.cpp,-1,5,,"die(""unable to generate checkdiff for %s"", one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""checkdiff"", ""for"", ""%s"", ""one"", ""path""]]",[5053751810269539490],6435,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2666.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2666.cpp,data/crawl/git/new_hunk_2666.cpp,-1,5,,"die(""unable to generate diffstat for %s"", one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diffstat"", ""for"", ""%s"", ""one"", ""path""]]",[6606585774228532893],6434,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2665.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2665.cpp,data/crawl/git/new_hunk_2665.cpp,-1,5,,"die(""unable to generate diff for %s"", one->path);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""for"", ""%s"", ""one"", ""path""]]",[-8319515319368097233],6433,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2664.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2664.cpp,data/crawl/git/new_hunk_2664.cpp,-1,5,,"die(""unable to generate word diff"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""word"", ""diff""]]",[-16093571376105777497],6432,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2659.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2659.cpp,data/crawl/git/new_hunk_2659.cpp,-1,4,,"die(""unable to generate diff"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff""]]",[-12424649916485438141],6431,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2657.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2657.cpp,data/crawl/git/new_hunk_2657.cpp,-1,4,,"die(""unable to generate diff (%s)"",
		    sha1_to_hex(parent->commit->object.sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""%s"", ""sha1_to_hex"", ""parent"", ""commit"", ""object"", ""sha1""]]",[-21160447067534889346],6430,2304.0,5
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2656.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2656.cpp,data/crawl/git/new_hunk_2656.cpp,-1,4,,"die(""unable to generate diff (%s -> %s)"",
		    sha1_to_hex(parent->commit->object.sha1),
		    sha1_to_hex(target->commit->object.sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""%s"", ""%s"", ""sha1_to_hex"", ""parent"", ""commit"", ""object"", ""sha1"", ""sha1_to_hex"", ""target"", ""commit"", ""object"", ""sha1""]]",[-32607916652648448424],6429,2304.0,5
https://github.com/git/git/commit/8f63588a6e23685b8deae681c9f126158c612e97,21 Oct 2015,"mailinfo: move cmitmsg and patchfile to struct mailinfo

Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_2643.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_2643.cpp,data/crawl/git/new_hunk_2643.cpp,3,3,"fprintf(cmitmsg, ""Message-Id: %s\n"", mi->message_id);","fprintf(mi->cmitmsg, ""Message-Id: %s\n"", mi->message_id);","[""removeVariable"", ""addVariable""]","[[], [""mi""]]",[13952083821125996],6428,0.0,5
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2488.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2488.cpp,data/crawl/git/new_hunk_2488.cpp,3,3,"die(""object %s tried to add buffer twice!"", sha1_to_hex(object->sha1));","die(""object %s tried to add buffer twice!"", oid_to_hex(&object->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""object"", ""sha1""], [""oid_to_hex"", ""&object"", ""oid""]]",[14257883057111613689],6427,0.0,5
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2441.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2441.cpp,data/crawl/git/new_hunk_2441.cpp,2,2,"die(""unable to generate diff (%s)"",
		    sha1_to_hex(parent->commit->object.sha1));","die(""unable to generate diff (%s)"",
		    oid_to_hex(&parent->commit->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""parent"", ""sha1""], [""oid_to_hex"", ""&parent"", ""oid""]]",[22308005776989869171],6426,0.0,5
https://github.com/git/git/commit/7d1aaa684d42964b8b287b8c9450184dfd5bce85,12 Jan 2016,"t0060: verify that basename() and dirname() work as expected

Unfortunately, some libgen implementations yield outcomes different
from what Git expects. For example, mingw-w64-crt provides a basename()
function, that shortens `path0/` to `path`!

So let's verify that the basename() and dirname() functions we use
conform to what Git expects.

Derived-from-code-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",169,data/crawl/git/hunk_2344.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_2344.cpp,data/crawl/git/new_hunk_2344.cpp,-1,9,,"fprintf(stderr, ""%s: unknown function name: %s\n"", argv[0],
		argv[1] ? argv[1] : ""(there was none)"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""unknown"", ""function"", ""name"", ""%s\\n"", ""argv[0]"", ""argv[1]"", ""argv[1]"", ""there"", ""was"", ""none""]]",[-15405150782460864296],6425,1488672.0,5
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2006.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_2006.cpp,data/crawl/git/new_hunk_2006.cpp,19,23,"printf(""string: %s\n"", string ? string : ""(not set)"");","show(&expect, &ret, ""string: %s"", string ? string : ""(not set)"");","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%s\\n""], [""show"", ""&expect"", ""&ret"", ""%s""]]",[-21424806886155274011],6424,0.0,5
https://github.com/git/git/commit/99d1a9861ae88595e7386c453b6b38573a8a570c,07 Sep 2016,"cache: convert struct cache_entry to use struct object_id

Convert struct cache_entry to use struct object_id by applying the
following semantic patch and the object_id transforms from contrib, plus
the actual change to the struct:

@@
struct cache_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct cache_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",148,data/crawl/git/hunk_1481.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1481.cpp,data/crawl/git/new_hunk_1481.cpp,1,1,"printf(""%06o #%d %s %.8s\n"",
		       ce->ce_mode, ce_stage(ce), ce->name,
		       sha1_to_hex(ce->sha1));","printf(""%06o #%d %s %.8s\n"",
		       ce->ce_mode, ce_stage(ce), ce->name,
		       oid_to_hex(&ce->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""ce"", ""sha1""], [""oid_to_hex"", ""&ce"", ""oid""]]",[5788908227509637815],6423,0.0,5
https://github.com/git/git/commit/fb33b62ca6e6dbfa8a5330cb0535fe122e250b5f,08 Sep 2016,"diff.c: use diff_options directly

The value of `ecbdata->opt` is accessible via the short variable `o`
already, so let's use that instead.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_1437.cpp,use same variable,trivial,data/crawl/git/old_hunk_1437.cpp,data/crawl/git/new_hunk_1437.cpp,3,3,"fprintf(ecbdata->opt->file, ""%s"", ecbdata->header->buf);","fprintf(o->file, ""%s"", ecbdata->header->buf);","[""updateVariable"", ""removeVariable""]","[[""opt"", ""ecbdata""], [""o""]]",[-12852298264307791651],6422,0.0,5
https://github.com/git/git/commit/8354fa3d4ca50850760ceee9054e3e7a799a4d62,27 Sep 2016,"fsck: handle bad trees like other errors

Instead of dying when fsck hits a malformed tree object, log the error
like any other and continue.  Now fsck can tell the user which tree is
bad, too.

Signed-off-by: David Turner <dturner@twosigma.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/hunk_1086.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1086.cpp,data/crawl/git/new_hunk_1086.cpp,-1,45,,"die(""%s"", err.buf);","[""addLog""]","[[], [""die"", ""%s"", ""err"", ""buf""]]",[-4644468883739524215],6421,342432.0,5
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/hunk_815.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_815.cpp,data/crawl/git/new_hunk_815.cpp,-1,47,,"error(""expected ':', got '%c'"", *p);","[""addLog""]","[[], [""error"", ""expected"", ""got"", ""%c"", ""*p""]]",[12131691030932058946],6420,0.0,5
https://github.com/git/git/commit/79319b1949f0055bd42bac7fa398fca8c2f26116,21 Apr 2017,"run-command: eliminate calls to error handling functions in child

All of our standard error handling paths have the potential to
call malloc or take stdio locks; so we must avoid them inside
the forked child.

Instead, the child only writes an 8 byte struct atomically to
the parent through the notification pipe to propagate an error.
All user-visible error reporting happens from the parent;
even avoiding functions like atexit(3) and exit(3).

Helped-by: Eric Wong <e@80x24.org>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_644.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_644.cpp,data/crawl/git/new_hunk_644.cpp,-1,33,,"vreportf(""fatal: "", err, params);","[""addLog""]","[[], [""vreportf"", ""fatal"", ""err"", ""params""]]",[-13998640651250250069],6419,749376.0,5
https://github.com/git/git/commit/d026a25657cbe15ceb6bcb5d5047a36a0a70b33e,25 Apr 2017,"refs: kill set_worktree_head_symref()

70999e9cec (branch -m: update all per-worktree HEADs - 2016-03-27)
added this function in order to update HEADs of all relevant
worktrees, when a branch is renamed.

It, as a public ref api, kind of breaks abstraction when it uses
internal functions of files backend. With the introduction of
refs_create_symref(), we can move back pretty close to the code before
70999e9cec, where create_symref() was used for updating HEAD.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_632.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_632.cpp,data/crawl/git/new_hunk_632.cpp,25,-1,"error(""%s"", err.buf);",,"[""removeLog""]","[[""error"", ""%s"", ""err"", ""buf""], []]",[-5565756709463330967],6418,230112.0,5
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,190,,"die(_(""revision walk setup failed""));","[""addLog""]","[[], [""die"", ""_"", ""revision"", ""walk"", ""setup"", ""failed""]]",[-17150171457883954768],6417,1989792.0,5
https://github.com/git/git/commit/b3622a4ee94e4916cd05e6d96e41eeb36b941182,11 Aug 2017,"The first batch of topics after the 2.14 cycle

Notably, let's declare that we aim to make ""git add ''"" illegal in
the cycle after this one.

The topic to do so, ex/deprecate-empty-pathspec-as-match-all, has
been cooking in 'next' too long, and will stay there during this
cycle, but not after.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/hunk_333.cpp,,,data/crawl/git/old_hunk_333.cpp,data/crawl/git/new_hunk_333.cpp,-1,15,,"die(""BUG"");","[""addLog""]","[[], [""die"", ""BUG""]]",[-1598062591377233978],6416,95328.0,5
https://github.com/git/git/commit/49e61479be913f67e66bb3fdf8de9475c41b58bd,16 Oct 2017,"refs: convert resolve_ref_unsafe to struct object_id

Convert resolve_ref_unsafe to take a pointer to struct object_id by
converting one remaining caller to use struct object_id, removing the
temporary NULL pointer check in expand_ref, converting the declaration
and definition, and applying the following semantic patch:

@@
expression E1, E2, E3, E4;
@@
- resolve_ref_unsafe(E1, E2, E3.hash, E4)
+ resolve_ref_unsafe(E1, E2, &E3, E4)

@@
expression E1, E2, E3, E4;
@@
- resolve_ref_unsafe(E1, E2, E3->hash, E4)
+ resolve_ref_unsafe(E1, E2, E3, E4)

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_169.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_169.cpp,data/crawl/git/new_hunk_169.cpp,11,11,"printf(""%s %s 0x%x\n"", sha1_to_hex(sha1), ref, flags);","printf(""%s %s 0x%x\n"", oid_to_hex(&oid), ref, flags);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1""], [""oid_to_hex"", ""&oid""]]",[-584189701027962881],6415,356544.0,5
https://github.com/git/git/commit/db7244bd5be12e389badb9cec621dbbcfa11f59a,12 Nov 2007,"parse-options new features.

options flags:
~~~~~~~~~~~~~
  PARSE_OPT_NONEG allow the caller to disallow the negated option to exists.

option types:
~~~~~~~~~~~~
  OPTION_BIT: ORs (or NANDs) a mask.
  OPTION_SET_INT: force the value to be set to this integer.
  OPTION_SET_PTR: force the value to be set to this pointer.

helper:
~~~~~~
  HAS_MULTI_BITS (in git-compat-util.h) is a bit-hack to check if an
  unsigned integer has more than one bit set, useful to check if conflicting
  options have been used.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_7804.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_7804.cpp,data/crawl/git/new_hunk_7804.cpp,-1,20,,"opterror(opt, ""takes no value"", flags);","[""addLog""]","[[], [""opterror"", ""opt"", ""takes"", ""no"", ""value"", ""flags""]]",[9810004746429070805],6414,4680.0,4
https://github.com/git/git/commit/dcf0c16ef1a8c2e468afe686a27a5549fea59798,17 Nov 2007,"core.excludesfile clean-up

There are inconsistencies in the way commands currently handle
the core.excludesfile configuration variable.  The problem is
the variable is too new to be noticed by anything other than
git-add and git-status.

 * git-ls-files does not notice any of the ""ignore"" files by
   default, as it predates the standardized set of ignore files.
   The calling scripts established the convention to use
   .git/info/exclude, .gitignore, and later core.excludesfile.

 * git-add and git-status know about it because they call
   add_excludes_from_file() directly with their own notion of
   which standard set of ignore files to use.  This is just a
   stupid duplication of code that need to be updated every time
   the definition of the standard set of ignore files is
   changed.

 * git-read-tree takes --exclude-per-directory=<gitignore>,
   not because the flexibility was needed.  Again, this was
   because the option predates the standardization of the ignore
   files.

 * git-merge-recursive uses hardcoded per-directory .gitignore
   and nothing else.  git-clean (scripted version) does not
   honor core.* because its call to underlying ls-files does not
   know about it.  git-clean in C (parked in 'pu') doesn't either.

We probably could change git-ls-files to use the standard set
when no excludes are specified on the command line and ignore
processing was asked, or something like that, but that will be a
change in semantics and might break people's scripts in a subtle
way.  I am somewhat reluctant to make such a change.

On the other hand, I think it makes perfect sense to fix
git-read-tree, git-merge-recursive and git-clean to follow the
same rule as other commands.  I do not think of a valid use case
to give an exclude-per-directory that is nonstandard to
read-tree command, outside a ""negative"" test in the t1004 test
script.

This patch is the first step to untangle this mess.

The next step would be to teach read-tree, merge-recursive and
clean (in C) to use setup_standard_excludes().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_7781.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_7781.cpp,data/crawl/git/new_hunk_7781.cpp,7,-1,"die(""core.excludesfile without value"");",,"[""removeLog""]","[[""die"", ""core"", ""excludesfile"", ""without"", ""value""], []]",[16385074991810110218],6413,2160.0,4
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7043.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_7043.cpp,data/crawl/git/new_hunk_7043.cpp,-1,32,,"die (""Could not get current working directory"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""get"", ""current"", ""working"", ""directory""]]",[-5754901273999352896],6412,239040.0,4
https://github.com/git/git/commit/1cc6985ca7dd3aaab0617ec0fd00d4eb0b424465,09 Jul 2008,"parse-options: add PARSE_OPT_LASTARG_DEFAULT flag

If you set this for a given option, and the optoin appears without an
argument on the command line, then the `defval' is used as its argument.

Note that this flag is meaningless in presence of OPTARG or NOARG flags.
(in the current implementation it will be ignored, but don't rely on it).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_7017.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_7017.cpp,data/crawl/git/new_hunk_7017.cpp,-1,15,,"opterror(opt, ""requires a value"", flags);","[""addLog""]","[[], [""opterror"", ""opt"", ""requires"", ""a"", ""value"", ""flags""]]",[4855220492352704229],6411,91080.0,4
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,83,,"error(""Could not open %s"", path);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""open"", ""%s"", ""path""]]",[25625554630532546828],6410,148320.0,4
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6871.cpp,use same text,non-trivial,data/crawl/git/old_hunk_6871.cpp,data/crawl/git/new_hunk_6871.cpp,3,3,"output(1, ""Renamed %s to %s instead"", ren1->pair->one->path, new_path);","output(1, ""Renaming %s to %s instead"", ren1->pair->one->path, new_path);","[""updateContent""]","[[""Renamed""], [""Renaming""]]",[11505642716263261134],6409,0.0,4
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,129,,"die(""this should not happen, your snprintf is broken"");","[""addLog""]","[[], [""die"", ""this"", ""should"", ""not"", ""happen"", ""your"", ""snprintf"", ""is"", ""broken""]]",[3989400890770091760],6408,196200.0,4
https://github.com/git/git/commit/a672ea6ac5a1b876bc7adfe6534b16fa2a32c94b,21 Oct 2008,"rehabilitate 'git index-pack' inside the object store

Before commit d0b92a3f6e it was possible to run 'git index-pack'
directly in the .git/objects/pack/ directory.  Restore that ability.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_6676.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6676.cpp,data/crawl/git/new_hunk_6676.cpp,-1,21,,"die(""Cannot come back to cwd"");","[""addLog""]","[[], [""die"", ""Cannot"", ""come"", ""back"", ""to"", ""cwd""]]",[2972916337112490771],6407,191160.0,4
https://github.com/git/git/commit/47d32af2338418275ab6b53a737952af22289d97,05 Dec 2008,"Make some of fwrite/fclose/write/close failures visible

So that full filesystem conditions or permissions problems won't go
unnoticed.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_6601.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_6601.cpp,data/crawl/git/new_hunk_6601.cpp,3,3,"fputs(""<<<<<<<\n"", out);","ferr_puts(""<<<<<<<\n"", out, &wrerror);","[""updateLog"", ""addVariable""]","[[""fputs""], [""ferr_puts"", ""&wrerror""]]",[2815787135398758277],6406,0.0,4
https://github.com/git/git/commit/7fcda9201e192413c2e63fe35ce6664dbc81705d,14 Feb 2009,"log: do not print ellipses with --abbrev-commit

'git log --abbrev-commit' added an ellipsis to all commit names that
were abbreviated.  This was particularly annoying if you wanted to
cut&paste the sha1 from the terminal, since selecting by word would
pick up '...'  too.

So use find_unique_abbrev() instead of diff_unique_abbrev() in all
log-related commit sha1 printing routines, and also change the
formatting of the 'Merge: parent1 parent2' line output via
pretty_print_commit().

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_6473.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_6473.cpp,data/crawl/git/new_hunk_6473.cpp,3,3,"printf("" %s"", diff_unique_abbrev(parent->object.sha1, abbrev));","printf("" %s"", find_unique_abbrev(parent->object.sha1, abbrev));","[""updateVariable""]","[[""diff_unique_abbrev""], [""find_unique_abbrev""]]",[-15327468049184241908],6405,0.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6206.cpp,use same constant,non-trivial,data/crawl/git/old_hunk_6206.cpp,data/crawl/git/new_hunk_6206.cpp,3,3,"fprintf(fp, ""%s"", COLOR_RESET);","fprintf(fp, ""%s"", GIT_COLOR_RESET);","[""updateVariable""]","[[""COLOR_RESET""], [""GIT_COLOR_RESET""]]",[-1220738430315281631],6404,41760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,-1,164,,"die(""No such section!"");","[""addLog""]","[[], [""die"", ""No"", ""such"", ""section""]]",[3894481257286126227],6403,36000.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,17,-1,"printf(""boundary\n"");",,"[""removeLog""]","[[""printf"", ""boundary\\n""], []]",[-10842371902386641873],6402,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,15,-1,"printf(""summary %s\n"", ci.summary);",,"[""removeLog""]","[[""printf"", ""summary"", ""%s\\n"", ""ci"", ""summary""], []]",[1692078277376969815],6401,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,14,-1,"printf(""committer-tz %s\n"", ci.committer_tz);",,"[""removeLog""]","[[""printf"", ""committer"", ""tz"", ""%s\\n"", ""ci"", ""committer_tz""], []]",[-15557117962594673029],6400,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,13,-1,"printf(""committer-time %lu\n"", ci.committer_time);",,"[""removeLog""]","[[""printf"", ""committer"", ""time"", ""%lu\\n"", ""ci"", ""committer_time""], []]",[-9140932468087020566],6399,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,12,-1,"printf(""committer-mail %s\n"", ci.committer_mail);",,"[""removeLog""]","[[""printf"", ""committer"", ""mail"", ""%s\\n"", ""ci"", ""committer_mail""], []]",[-11469225420089458937],6398,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,11,-1,"printf(""committer %s\n"", ci.committer);",,"[""removeLog""]","[[""printf"", ""committer"", ""%s\\n"", ""ci"", ""committer""], []]",[-20736564298734649037],6397,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,10,-1,"printf(""author-tz %s\n"", ci.author_tz);",,"[""removeLog""]","[[""printf"", ""author"", ""tz"", ""%s\\n"", ""ci"", ""author_tz""], []]",[-11780382062627515401],6396,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,9,-1,"printf(""author-time %lu\n"", ci.author_time);",,"[""removeLog""]","[[""printf"", ""author"", ""time"", ""%lu\\n"", ""ci"", ""author_time""], []]",[-8071503845071645430],6395,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,8,-1,"printf(""author-mail %s\n"", ci.author_mail);",,"[""removeLog""]","[[""printf"", ""author"", ""mail"", ""%s\\n"", ""ci"", ""author_mail""], []]",[-12399810797356084557],6394,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6130.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6130.cpp,data/crawl/git/new_hunk_6130.cpp,7,-1,"printf(""author %s\n"", ci.author);",,"[""removeLog""]","[[""printf"", ""author"", ""%s\\n"", ""ci"", ""author""], []]",[-21335696175581738521],6393,131760.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6128.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6128.cpp,data/crawl/git/new_hunk_6128.cpp,24,-1,"die(""Multiple --remote specified"");",,"[""removeLog""]","[[""die"", ""Multiple"", ""remote"", ""specified""], []]",[2650849895126707544],6392,25920.0,4
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6127.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_6127.cpp,data/crawl/git/new_hunk_6127.cpp,19,-1,"die(""multiple --exec specified"");",,"[""removeLog""]","[[""die"", ""multiple"", ""exec"", ""specified""], []]",[208571014590695797],6391,25920.0,4
https://github.com/git/git/commit/38ef7507d1dce87d68f177a6209d716339fee854,10 May 2009,"rev-list: remove stringed output flag from ""show_bisect_vars""

Because it was used only by ""git bisect--helper --next-vars"" but
the ""--next-vars"" option has been removed.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_6047.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_6047.cpp,data/crawl/git/new_hunk_6047.cpp,9,7,"print_var_int(""bisect_nr"", cnt - 1, stringed);","print_var_int(""bisect_nr"", cnt - 1);","[""removeVariable""]","[[""stringed""], []]",[219731985431600472],6390,0.0,4
https://github.com/git/git/commit/8b8e862490bba040299905cc0541560f24a11c41,16 Dec 2009,"ignore unknown color configuration

When parsing the config file, if there is a value that is
syntactically correct but unused, we generally ignore it.
This lets non-core porcelains store arbitrary information in
the config file, and it means that configuration files can
be shared between new and old versions of git (the old
versions might simply ignore certain configuration).

The one exception to this is color configuration; if we
encounter a color.{diff,branch,status}.$slot variable, we
die if it is not one of the recognized slots (presumably as
a safety valve for user misconfiguration). This behavior
has existed since 801235c (diff --color: use
$GIT_DIR/config, 2006-06-24), but hasn't yet caused a
problem. No porcelain has wanted to store extra colors, and
we once a color area (like color.diff) has been introduced,
we've never changed the set of color slots.

However, that changed recently with the addition of
color.diff.func. Now a user with color.diff.func in their
config can no longer freely switch between v1.6.6 and older
versions; the old versions will complain about the existence
of the variable.

This patch loosens the check to match the rest of
git-config; unknown color slots are simply ignored. This
doesn't fix this particular problem, as the older version
(without this patch) is the problem, but it at least
prevents it from happening again in the future.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/hunk_5463.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_5463.cpp,data/crawl/git/new_hunk_5463.cpp,3,-1,"die(""bad config variable '%s'"", var);",,"[""removeLog""]","[[""die"", ""bad"", ""config"", ""variable"", ""%s"", ""var""], []]",[9496819659983532027],6389,138240.0,4
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5363.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_5363.cpp,data/crawl/git/new_hunk_5363.cpp,5,24,"opt->output(opt, name, strlen(name));","output_color(opt, name, strlen(name), opt->color_filename);","[""addLog"", ""addVariable"", ""removeLog""]","[[""output""], [""output_color"", ""color_filename""]]",[16665995650376328503],6388,0.0,4
https://github.com/git/git/commit/3e3ec2abe0f275dda285e989224e4c3da19e7adb,03 Apr 2010,"whitespace: add tab-in-indent error class

Some projects and languages use coding style where no tab character is used to
indent the lines.

This only adds support and documentation for ""apply --whitespace=warn"" and
""diff --check""; later patches add ""apply --whitespace=fix"" and tests.

Signed-off-by: Chris Webb <chris@arachsys.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_5294.cpp,,,data/crawl/git/old_hunk_5294.cpp,data/crawl/git/new_hunk_5294.cpp,-1,9,,"fputs(ws, stream);","[""addLog""]","[[], [""fputs"", ""ws"", ""stream""]]",[-12653304646146055541],6387,303480.0,4
https://github.com/git/git/commit/980bde389491e65df3a6f26f755064013b65740c,06 May 2010,"wt-status: take advice.statusHints seriously

Currently, status gives a lot of hints even when advice.statusHints is
false. Change this so that all hints depend on the config variable.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_5248.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_5248.cpp,data/crawl/git/new_hunk_5248.cpp,3,3,"printf(""no changes added to commit (use \""git add\"" and/or \""git commit -a\"")\n"");","printf(""no changes added to commit%s\n"",
				advice_status_hints
				? "" (use \""git add\"" and/or \""git commit -a\"")"" : """");","[""moveContent"", ""addContent"", ""updateContent"", ""addVariable""]","[[""commit"", ""\\n""], [""commit%s\\n"", ""advice_status_hints""]]",[-5941178066197355441],6386,0.0,4
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5221.cpp,inner similar method,non-trivial,data/crawl/git/old_hunk_5221.cpp,data/crawl/git/new_hunk_5221.cpp,3,3,"fprintf(ecbdata->opt->file, ""%s--- %s%s%s\n"",
			meta, ecbdata->label_path[0], reset, name_a_tab);","fprintf(ecbdata->opt->file, ""%s%s--- %s%s%s\n"",
			line_prefix, meta, ecbdata->label_path[0], reset, name_a_tab);","[""updateContent"", ""addVariable""]","[[""%s""], [""%s%s"", ""line_prefix""]]",[6142700296909322384],6385,0.0,4
https://github.com/git/git/commit/4297c0aeb5cc6b9c1c87d770c91e09ac2a837320,01 Jun 2010,"Make --color-words work well with --graph

'--color-words' algorithm can be described as:

  1. collect a the minus/plus lines of a diff hunk, divided into
     minus-lines and plus-lines;

  2. break both minus-lines and plus-lines into words and
     place them into two mmfile_t with one word for each line;

  3. use xdiff to run diff on the two mmfile_t to get the words level diff;

And for the common parts of the both file, we output the plus side text.
diff_words->current_plus is used to trace the current position of the plus file
which printed. diff_words->last_minus is used to trace the last minus word
printed.

For '--graph' to work with '--color-words', we need to output the graph prefix
on each line of color words output. Generally, there are two conditions on
which we should output the prefix.

  1. diff_words->last_minus == 0 &&
     diff_words->current_plus == diff_words->plus.text.ptr

     that is: the plus text must start as a new line, and if there is no minus
     word printed, a graph prefix must be printed.

  2. diff_words->current_plus > diff_words->plus.text.ptr &&
     *(diff_words->current_plus - 1) == '\n'

     that is: a graph prefix must be printed following a '\n'

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_5216.cpp,,,data/crawl/git/old_hunk_5216.cpp,data/crawl/git/new_hunk_5216.cpp,-1,4,,"fputs(line_prefix, diff_words->opt->file);","[""addLog""]","[[], [""fputs"", ""line_prefix"", ""diff_words"", ""opt"", ""file""]]",[5714044452188591426],6384,0.0,4
https://github.com/git/git/commit/67a4b5864f9423ccfe8090365029dae918504830,21 Jun 2010,"log --decorate: Colorize commit decorations

This makes the decorations stand out more and easier to distinguish
and spot because they are colored differently depending on their type.

Signed-off-by: Nazri Ramliy <ayiehere@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_5160.cpp,,,data/crawl/git/old_hunk_5160.cpp,data/crawl/git/new_hunk_5160.cpp,4,6,"printf(""tag: "");","fputs(""tag: "", stdout);","[""updateLog"", ""addVariable""]","[[""printf""], [""fputs"", ""stdout""]]",[-19459554220258205535],6383,211320.0,4
https://github.com/git/git/commit/4868b2ea17b7a5e8171cb109423a25a269bfefe5,21 Jan 2011,"Subject: setup: officially support --work-tree without --git-dir

The original intention of --work-tree was to allow people to work in a
subdirectory of their working tree that does not have an embedded .git
directory.  Because their working tree, which their $cwd was in, did not
have an embedded .git, they needed to use $GIT_DIR to specify where it is,
and because this meant there was no way to discover where the root level
of the working tree was, so we needed to add $GIT_WORK_TREE to tell git
where it was.

However, this facility has long been (mis)used by people's scripts to
start git from a working tree _with_ an embedded .git directory, let git
find .git directory, and then pretend as if an unrelated directory were
the associated working tree of the .git directory found by the discovery
process.  It happens to work in simple cases, and is not worth causing
""regression"" to these scripts.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",229,data/crawl/git/hunk_4874.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_4874.cpp,data/crawl/git/new_hunk_4874.cpp,-1,8,,"die_errno(""Could not come back to cwd"");","[""addLog""]","[[], [""die_errno"", ""Could"", ""not"", ""come"", ""back"", ""to"", ""cwd""]]",[12630768870252841927],6382,21600.0,4
https://github.com/git/git/commit/becbdae82bb8bb193c2f1e9d8b32a60bdef8b0e4,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4783.cpp,,,data/crawl/git/old_hunk_4783.cpp,data/crawl/git/new_hunk_4783.cpp,-1,17,,"fprintf(s->fp, ""%s"", trail);","[""addLog""]","[[], [""fprintf"", ""s"", ""fp"", ""%s"", ""trail""]]",[-2832314789479961611],6381,0.0,4
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4771.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_4771.cpp,data/crawl/git/new_hunk_4771.cpp,-1,11,,"status_printf_ln(s, c, ""  (use \""git rm --cached <file>...\"" to unstage)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""rm"", ""cached"", ""file"", ""\\"", ""to"", ""unstage""]]",[-15201283050760329550],6380,0.0,4
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4771.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_4771.cpp,data/crawl/git/new_hunk_4771.cpp,-1,9,,"status_printf_ln(s, c, ""  (use \""git reset %s <file>...\"" to unstage)"", s->reference);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""reset"", ""%s"", ""file"", ""\\"", ""to"", ""unstage"", ""s"", ""reference""]]",[-20323559769709462841],6379,0.0,4
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4770.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_4770.cpp,data/crawl/git/new_hunk_4770.cpp,3,3,"fprintf(s->fp,
				""#\n""
				""# It looks like you may be committing a MERGE.\n""
				""# If this is not correct, please remove the file\n""
				""#	%s\n""
				""# and try again.\n""
				""#\n"",
				git_path(""MERGE_HEAD""));","status_printf_ln(s, GIT_COLOR_NORMAL,
				""\n""
				""It looks like you may be committing a MERGE.\n""
				""If this is not correct, please remove the file\n""
				""	%s\n""
				""and try again.\n""
				"""",
				git_path(""MERGE_HEAD""));","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL""]]",[9735849379987926759],6378,0.0,4
https://github.com/git/git/commit/97f261b1e7f1af54aed700e61cdb8af74dbd2459,21 Dec 2011,"builtin/init-db.c: eliminate -Wformat warning on Solaris

On Solaris systems we'd warn about an implicit cast of mode_t when we
printed things out with the %d format. We'd get this warning under GCC
4.6.0 with Solaris headers:

    builtin/init-db.c: In function ‘separate_git_dir’:
    builtin/init-db.c:354:4: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘mode_t’ [-Wformat]

We've been doing this ever since v1.7.4.1-296-gb57fb80. Just work
around this by adding an explicit cast.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_4220.cpp,use same variable,non-trivial,data/crawl/git/old_hunk_4220.cpp,data/crawl/git/new_hunk_4220.cpp,3,3,"die(_(""unable to handle file type %d""), st.st_mode);","die(_(""unable to handle file type %d""), (int)st.st_mode);","[""addVariable""]","[[], [""int""]]",[-7555364370854764664],6377,964440.0,4
https://github.com/git/git/commit/caa7d79f1f7c9940acfaf161b9b84bbf81980d95,12 Apr 2013,"Sync with 'maint'

* maint:
  Correct common spelling mistakes in comments and tests
  kwset: fix spelling in comments
  precompose-utf8: fix spelling of ""want"" in error message
  compat/nedmalloc: fix spelling in comments
  compat/regex: fix spelling and grammar in comments
  obstack: fix spelling of similar
  contrib/subtree: fix spelling of accidentally
  git-remote-mediawiki: spelling fixes
  doc: various spelling fixes
  fast-export: fix argument name in error messages
  Documentation: distinguish between ref and offset deltas in pack-format
  i18n: make the translation of -u advice in one go",168,data/crawl/git/hunk_3714.cpp,use same text,non-trivial,data/crawl/git/old_hunk_3714.cpp,data/crawl/git/new_hunk_3714.cpp,3,3,"error(""Unknown signed-tag mode: %s"", arg);","error(""Unknown signed-tags mode: %s"", arg);","[""updateContent""]","[[""tag""], [""tags""]]",[3809293156734039860],6376,0.0,4
https://github.com/git/git/commit/bc554df8c90e3592e8cd70460032b524fb6f03bc,16 Apr 2013,"i18n: branch: mark strings for translation

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Reviewed-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_3703.cpp,use same text format,non-trivial,data/crawl/git/old_hunk_3703.cpp,data/crawl/git/new_hunk_3703.cpp,3,3,"printf(rebasing ?
			       ""Branch %s set up to track remote branch %s from %s by rebasing.\n"" :
			       ""Branch %s set up to track remote branch %s from %s.\n"",
			       local, shortname, origin);","printf_ln(rebasing ?
				  _(""Branch %s set up to track remote branch %s from %s by rebasing."") :
				  _(""Branch %s set up to track remote branch %s from %s.""),
				  local, shortname, origin);","[""moveContent"", ""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""\\n"", ""\\n""], [""printf_ln"", ""_"", ""_""]]",[-381491535906003308],6375,0.0,4
https://github.com/git/git/commit/9d3f002f21f78576f3c31ae94ce78de54e305c95,18 Apr 2013,"pretty: share code between format_decoration and show_decorations

This also adds color support to format_decorations()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_3691.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_3691.cpp,data/crawl/git/new_hunk_3691.cpp,21,24,"printf(""%s"", prefix);","strbuf_addstr(sb, prefix);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""%s""], [""strbuf_addstr"", ""sb""]]",[-8926540095244690536],6374,922680.0,4
https://github.com/git/git/commit/7b40d3963835699e138d21f6040a60c07e797853,20 Jun 2013,"repack_without_ref(): split list curation and entry writing

The repack_without_ref() function first removes the deleted ref from
the internal packed-refs list, then writes the packed-refs list to
disk, omitting any broken or stale entries.  This patch splits that
second step into multiple passes:

* collect the list of refnames that should be deleted from packed_refs

* delete those refnames from the cache

* write the remainder to the packed-refs file

The purpose of this change is to make the ""write the remainder"" part
reusable.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_3594.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_3594.cpp,data/crawl/git/new_hunk_3594.cpp,-1,8,,"die(""internal error"");","[""addLog""]","[[], [""die"", ""internal"", ""error""]]",[-136877529961074285],6373,18000.0,4
https://github.com/git/git/commit/43f9d9f3a6c6004853fcc7b283dafc3590478498,29 Jun 2015,"bisect: replace hardcoded ""bad|good"" by variables

To add new tags like old/new and have keywords less confusing, the
first step is to avoid hardcoding the keywords.

The default mode is still bad/good.

Signed-off-by: Antoine Delaite <antoine.delaite@ensimag.grenoble-inp.fr>
Signed-off-by: Louis Stuber <stuberl@ensimag.grenoble-inp.fr>
Signed-off-by: Valentin Duperray <Valentin.Duperray@ensimag.imag.fr>
Signed-off-by: Franck Jonas <Franck.Jonas@ensimag.imag.fr>
Signed-off-by: Lucien Kong <Lucien.Kong@ensimag.imag.fr>
Signed-off-by: Thomas Nguy <Thomas.Nguy@ensimag.imag.fr>
Signed-off-by: Huynh Khoi Nguyen Nguyen <Huynh-Khoi-Nguyen.Nguyen@ensimag.imag.fr>
Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/hunk_3074.cpp,use same text,trivial,data/crawl/git/old_hunk_3074.cpp,data/crawl/git/new_hunk_3074.cpp,2,2,"printf(""There are only 'skip'ped commits left to test.\n""
	       ""The first bad commit could be any of:\n"");","printf(""There are only 'skip'ped commits left to test.\n""
	       ""The first %s commit could be any of:\n"", term_bad);","[""updateContent"", ""addVariable""]","[[""bad""], [""%s"", ""term_bad""]]",[-3723910629214378574],6372,0.0,4
https://github.com/git/git/commit/88b291fe9db645366853fc759d497342c130fd35,05 Aug 2015,"builtin-am: support automatic notes copying

Since eb2151b (rebase: support automatic notes copying, 2010-03-12),
git-am.sh supported automatic notes copying in --rebasing mode by
invoking ""git notes copy"" once it has finished applying all the patches.

Re-implement this feature in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_2945.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_2945.cpp,data/crawl/git/new_hunk_2945.cpp,-1,30,,"error(invalid_line, sb.buf);","[""addLog""]","[[], [""error"", ""invalid_line"", ""sb"", ""buf""]]",[464052160062312994],6371,0.0,4
https://github.com/git/git/commit/3adc4ec7b9e1d2118501728a75a5b93d971974fa,29 Sep 2015,Sync with v2.5.4,516,data/crawl/git/hunk_2696.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_2696.cpp,data/crawl/git/new_hunk_2696.cpp,-1,4,,"die(""unable to generate diff for %s"", name);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""diff"", ""for"", ""%s"", ""name""]]",[-20763690208373284692],6370,360.0,4
https://github.com/git/git/commit/f4e54d02b894064d370e461385b48701485672bd,20 Nov 2015,"Convert struct ref to use object_id.

Use struct object_id in three fields in struct ref and convert all the
necessary places that use it.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",302,data/crawl/git/hunk_2601.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_2601.cpp,data/crawl/git/new_hunk_2601.cpp,2,2,"printf(""%s %s\n"",
		       sha1_to_hex(ref->old_sha1), ref->name);","printf(""%s %s\n"",
		       oid_to_hex(&ref->old_oid), ref->name);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""old_sha1"", ""ref""], [""oid_to_hex"", ""&ref"", ""old_oid""]]",[-2301430063212631767],6369,0.0,4
https://github.com/git/git/commit/d0d2344ad84cde7fddedc1e141296607af673454,14 Jan 2016,"trailer: allow to write to files other than stdout

Use fprintf instead of printf in trailer.c in order to allow printing
to a file other than stdout. This will be needed to support in-place
editing in git interpret-trailers.

Signed-off-by: Tobias Klauser <tklauser@distanz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_2328.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_2328.cpp,data/crawl/git/new_hunk_2328.cpp,9,9,"printf(""%s%s\n"", tok, val);","fprintf(outfile, ""%s%s\n"", tok, val);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""outfile""]]",[-16291426489666163378],6368,0.0,4
https://github.com/git/git/commit/2dac9b5637abe580e8b8ea36e00dbbf28ec99af6,01 Mar 2016,"run_processes_parallel: treat output of children as byte array

We do not want the output to be interrupted by a NUL byte, so we
cannot use raw fputs. Introduce strbuf_write to avoid having long
arguments in run-command.c.

Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_2213.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_2213.cpp,data/crawl/git/new_hunk_2213.cpp,3,3,"fputs(pp->buffered_output.buf, stderr);","strbuf_write(&pp->buffered_output, stderr);","[""updateLog"", ""removeVariable"", ""addVariable""]","[[""fputs"", ""pp"", ""buf""], [""strbuf_write"", ""&pp""]]",[-4080672003692102410],6367,0.0,4
https://github.com/git/git/commit/a13d13700b05442855447670d7c3313f99f5da3c,15 Mar 2016,"rerere: allow multiple variants to exist

The shape of the conflict in a path determines the conflict ID.  The
preimage and postimage pair that was recorded for the conflict ID
previously may or may not replay well for the conflict we just saw.

Currently, we punt when the previous resolution does not cleanly
replay, but ideally we should then be able to record the currently
conflicted path by assigning a new 'variant', and then record the
resolution the user is going to make.

Introduce a mechanism to have more than one variant for a given
conflict ID; we do not actually assign any variant other than 0th
variant yet at this step.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",128,data/crawl/git/hunk_2193.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_2193.cpp,data/crawl/git/new_hunk_2193.cpp,-1,19,,"die(""corrupt MERGE_RR"");","[""addLog""]","[[], [""die"", ""corrupt"", ""MERGE_RR""]]",[-3834673031445325428],6366,1387800.0,4
https://github.com/git/git/commit/91b769c48f4cf46d9514770849a1bf9cb33430c3,01 Jun 2016,"builtin/apply: move applying patches into apply_all_patches()

To libify the apply functionality we should provide a function to
apply many patches. Let's move the code to do that into a new
apply_all_patches() function.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/hunk_1954.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1954.cpp,data/crawl/git/new_hunk_1954.cpp,-1,66,,"die(_(""Unable to write new index file""));","[""addLog""]","[[], [""die"", ""_"", ""Unable"", ""to"", ""write"", ""new"", ""index"", ""file""]]",[9643391230087642827],6365,113400.0,4
https://github.com/git/git/commit/6db5967d4e6640c5a3ee3cde151c5fdde5ab508f,19 Aug 2016,"Revert ""display HTML in default browser using Windows' shell API""

Since 4804aab (help (Windows): Display HTML in default browser using
Windows' shell API, 2008-07-13), Git for Windows used to call
`ShellExecute()` to launch the default Windows handler for `.html`
files.

The idea was to avoid going through a shell script, for performance
reasons.

However, this change ignores the `help.browser` config setting. Together
with browsing help not being a performance-critical operation, let's
just revert that patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_1527.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_1527.cpp,data/crawl/git/new_hunk_1527.cpp,10,-1,"die(""Too long path: %.*s"", 60, path);",,"[""removeLog""]","[[""die"", ""Too"", ""long"", ""path"", ""%"", ""*s"", ""60"", ""path""], []]",[-10848113208999003329],6364,1090800.0,4
https://github.com/git/git/commit/8c88769ba422e451fb50eb2ea843233580befed4,07 Sep 2016,"builtin/am: convert to struct object_id

Convert uses of unsigned char [20] to struct object_id.  Rename the
generically-named ""ptr"" to ""old_oid"" and make it const.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/hunk_1454.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1454.cpp,data/crawl/git/new_hunk_1454.cpp,10,10,"error(_(""Could not parse object '%s'.""), sha1_to_hex(head));","error(_(""Could not parse object '%s'.""), oid_to_hex(head));","[""updateVariable""]","[[""sha1_to_hex""], [""oid_to_hex""]]",[5722772095999725640],6363,97200.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1407.cpp,,,data/crawl/git/old_hunk_1407.cpp,data/crawl/git/new_hunk_1407.cpp,6,-1,"fputs(""  "", stdout);",,"[""removeLog""]","[[""fputs"", ""stdout""], []]",[12222144665393643080],6362,2468880.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1375.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1375.cpp,data/crawl/git/new_hunk_1375.cpp,16,-1,"error(_(""could not run gpg.""));",,"[""removeLog""]","[[""error"", ""_"", ""could"", ""not"", ""run"", ""gpg""], []]",[-16943766940633133958],6361,59760.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1373.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1373.cpp,data/crawl/git/new_hunk_1373.cpp,6,7,"warning(""object %s: %s"", oid_to_hex(&obj->oid), message);","warning(""object %s: %s"", describe_object(o, obj), message);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&obj"", ""oid""], [""describe_object"", ""o"", ""obj""]]",[9186781902253899402],6360,38160.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1368.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1368.cpp,data/crawl/git/new_hunk_1368.cpp,-1,127,,"warning(""error closing directory %s: %s"",
						iter->base.path.buf, strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""closing"", ""directory"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[17142171633324015428],6359,58320.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1355.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1355.cpp,data/crawl/git/new_hunk_1355.cpp,5,5,"die(""unable to read %s"", sha1_to_hex(s->sha1));","die(""unable to read %s"",
				    oid_to_hex(&s->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""s"", ""sha1""], [""oid_to_hex"", ""&s"", ""oid""]]",[11703065646005246913],6358,52560.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1326.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1326.cpp,data/crawl/git/new_hunk_1326.cpp,-1,22,,"die(_(""The main working tree cannot be locked or unlocked""));","[""addLog""]","[[], [""die"", ""_"", ""The"", ""main"", ""working"", ""tree"", ""cannot"", ""be"", ""locked"", ""or"", ""unlocked""]]",[-14693829877517019606],6357,45360.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1326.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_1326.cpp,data/crawl/git/new_hunk_1326.cpp,-1,20,,"die(_(""'%s' is not a working tree""), av[0]);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""not"", ""a"", ""working"", ""tree"", ""av[0]""]]",[5613726092763663557],6356,45360.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1273.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1273.cpp,data/crawl/git/new_hunk_1273.cpp,3,3,"printf(""root %s\n"", oid_to_hex(&commit->object.oid));","printf(""root %s\n"", describe_object(&commit->object));","[""updateVariable"", ""removeVariable""]","[[""oid_to_hex"", ""oid""], [""describe_object""]]",[-3095609444505353559],6355,38160.0,4
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1265.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_1265.cpp,data/crawl/git/new_hunk_1265.cpp,2,2,"printf(""broken link from %7s %s\n"",
			   typename(parent->type), oid_to_hex(&parent->oid));","printf(""broken link from %7s %s\n"",
			   typename(parent->type), describe_object(parent));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&parent"", ""oid""], [""describe_object"", ""parent""]]",[-13705413589991975322],6354,38160.0,4
https://github.com/git/git/commit/a2f05c94545a5409d4a90fcad5d495d3d758b218,21 Sep 2016,"i18n: i18n: diff: mark die messages for translation

While marking individual messages for translation, consolidate some
messages ""option 'foo' requires a value"" that is used for many
options into one by introducing a helper function to die with the
message with the option name embedded in it, and ask the translators
to localize that single message instead.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Jean-Noel Avila <jn.avila@free.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_1106.cpp,use same text,trivial,data/crawl/git/old_hunk_1106.cpp,data/crawl/git/new_hunk_1106.cpp,3,3,"die(""Option '--stat-width' requires a value"");","die_want_option(""--stat-width"");","[""updateLog"", ""updateContent""]","[[""die"", ""Option"", ""requires"", ""a"", ""value""], [""die_want_option""]]",[14351150598384128366],6353,0.0,4
https://github.com/git/git/commit/d5e3b01e5bd6b06c06dbd5d1e2257d57e6b1deb7,26 Oct 2016,"diff_unique_abbrev: rename to diff_aligned_abbrev

The word ""align"" describes how the function actually differs
from find_unique_abbrev, and will make it less confusing
when we add more diff-specific abbrevation functions that do
not do this alignment.

Since this is a globally available function, let's also move
its descriptive comment to the header file, where we
typically document function interfaces.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_956.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_956.cpp,data/crawl/git/new_hunk_956.cpp,3,3,"printf("" %s"", diff_unique_abbrev(p->parent[i].oid.hash,
							 opt->abbrev));","printf("" %s"", diff_aligned_abbrev(p->parent[i].oid.hash,
							  opt->abbrev));","[""updateVariable""]","[[""diff_unique_abbrev""], [""diff_aligned_abbrev""]]",[-460560245539399350],6352,0.0,4
https://github.com/git/git/commit/d6cece51b83db5d8a523c4ba857013c4242e310e,26 Oct 2016,"diff_aligned_abbrev: use ""struct oid""

Since we're modifying this function anyway, it's a good time
to update it to the more modern ""struct oid"". We can also
drop some of the magic numbers in favor of GIT_SHA1_HEXSZ,
along with some descriptive comments.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_954.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_954.cpp,data/crawl/git/new_hunk_954.cpp,3,3,"printf("" %s"", diff_aligned_abbrev(p->parent[i].oid.hash,
							  opt->abbrev));","printf("" %s"", diff_aligned_abbrev(&p->parent[i].oid,
							  opt->abbrev));","[""removeVariable"", ""addVariable""]","[[""p"", ""hash""], [""&p""]]",[-7794724862729762997],6351,0.0,4
https://github.com/git/git/commit/aacc5c1a81c004efccff8075edb78acdf5f15264,02 May 2017,"submodule: refactor logic to determine changed submodules

There are currently two instances (fetch and push) where we want to
determine if submodules have changed given some revision specification.
These two instances don't use the same logic to generate a list of
changed submodules and as a result there is a fair amount of code
duplication.

This patch refactors these two code paths such that they both use the
same logic to generate a list of changed submodules.  This also makes it
easier for future callers to be able to reuse this logic as they only
need to create an argv_array with the revision specification to be using
during the revision walk.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/hunk_616.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_616.cpp,data/crawl/git/new_hunk_616.cpp,73,-1,"die(""revision walk setup failed"");",,"[""removeLog""]","[[""die"", ""revision"", ""walk"", ""setup"", ""failed""], []]",[17150171470043991342],6350,2663640.0,4
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_530.cpp,invoke same method,non-trivial,data/crawl/git/old_hunk_530.cpp,data/crawl/git/new_hunk_530.cpp,2,2,"die(_(""SHA1 COLLISION FOUND WITH %s !""),
			    sha1_to_hex(data->entry->idx.sha1));","die(_(""SHA1 COLLISION FOUND WITH %s !""),
			    oid_to_hex(&data->entry->idx.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""data"", ""sha1""], [""oid_to_hex"", ""&data"", ""oid""]]",[17825156889419106439],6349,262440.0,4
https://github.com/git/git/commit/04aea8d4df199836da3802f08cb5738eae66fa6c,23 May 2017,"files-backend: use `die(""BUG: ..."")`, not `die(""internal error: ..."")`

The former is by far more common in our codebase.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_453.cpp,use same text,trivial,data/crawl/git/old_hunk_453.cpp,data/crawl/git/new_hunk_453.cpp,3,3,"die(""internal error: packed-ref cache cleared while locked"");","die(""BUG: packed-ref cache cleared while locked"");","[""updateContent""]","[[""internal"", ""error""], [""BUG""]]",[-1461185061416159693],6348,0.0,4
https://github.com/git/git/commit/30173b8851bb7203de938a638386cb9e6d7c501b,23 May 2017,"ref_transaction_prepare(): new optional step for reference updates

In the future, compound reference stores will sometimes need to modify
references in two different reference stores at the same time, meaning
that a single logical reference transaction might have to be
implemented as two internal sub-transactions. They won't want to call
`ref_transaction_commit()` for the two sub-transactions one after the
other, because that wouldn't be atomic (the first commit could succeed
and the second one fail). Instead, they will want to prepare both
sub-transactions (i.e., obtain any necessary locks and do any
pre-checks), and only if both prepare steps succeed, then commit both
sub-transactions.

Start preparing for that day by adding a new, optional
`ref_transaction_prepare()` step to the reference transaction
sequence, which obtains the locks and does any prechecks, reporting
any errors that occur. Also add a `ref_transaction_abort()` function
that can be used to abort a sub-transaction even if it has already
been prepared.

That is on the side of the public-facing API. On the side of the
`ref_store` VTABLE, get rid of `transaction_commit` and instead add
methods `transaction_prepare`, `transaction_finish`, and
`transaction_abort`. A `ref_transaction_commit()` now basically calls
methods `transaction_prepare` then `transaction_finish`.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",306,data/crawl/git/hunk_446.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_446.cpp,data/crawl/git/new_hunk_446.cpp,-1,12,,"die(""BUG: unexpected reference transaction state"");","[""addLog""]","[[], [""die"", ""BUG"", ""unexpected"", ""reference"", ""transaction"", ""state""]]",[-8330239050724135068],6347,0.0,4
https://github.com/git/git/commit/2184d4ba0cb86a7f40153cd46b03d3fa75b247d9,02 Aug 2017,"submodule: merge repo_read_gitmodules and gitmodules_config

Since 69aba5329 (submodule: add repo_read_gitmodules) there have been
two ways to load a repository's .gitmodules file:
'repo_read_gitmodules()' is used if you have a repository object you are
working with or 'gitmodules_config()' if you are implicitly working with
'the_repository'.  Merge the logic of these two functions to remove
duplicate code.

In addition, 'repo_read_gitmodules()' can segfault by passing in a NULL
pointer to 'git_config_from_file()' if a repository doesn't have a
worktree.  Instead check for the existence of a worktree before
attempting to load the .gitmodules file.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_344.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_344.cpp,data/crawl/git/new_hunk_344.cpp,11,-1,"die(""index file corrupt"");",,"[""removeLog""]","[[""die"", ""index"", ""file"", ""corrupt""], []]",[18800083462689974984],6346,2434680.0,4
https://github.com/git/git/commit/86dff6b6762149d5f3d4b44bb57f58a8399a33ee,31 May 2007,"Cleanups & import into p4/master for local import

- import into master/local if --import-local is set

- use Die() for exiting

- if --verbose is set, raise Exception()

- use joined strings iso. `list` for progress printing

Signed-off-by: Han-Wen Nienhuys <hanwen@google.com>",54,data/crawl/git/hunk_8353.cpp,,,data/crawl/git/old_hunk_8353.cpp,data/crawl/git/new_hunk_8353.cpp,3,-1,die(msg);,,"[""removeLog""]","[[""die"", ""msg""], []]",[-4462070844842881441],6345,40320.0,3
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/hunk_8175.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_8175.cpp,data/crawl/git/new_hunk_8175.cpp,27,-1,"die(""Cannot come back to cwd"");",,"[""removeLog""]","[[""die"", ""Cannot"", ""come"", ""back"", ""to"", ""cwd""], []]",[-2972916337112490771],6344,0.0,3
https://github.com/git/git/commit/b888d61c8308027433df9c243fa551f42db1c76a,19 Sep 2007,"Make fetch a builtin

Thanks to Johannes Schindelin for review and fixes, and Julian
Phillips for the original C translation.

This changes a few small bits of behavior:

branch.<name>.merge is parsed as if it were the lhs of a fetch
refspec, and does not have to exactly match the actual lhs of a
refspec, so long as it is a valid abbreviation for the same ref.

branch.<name>.merge is no longer ignored if the remote is configured
with a branches/* file. Neither behavior is useful, because there can
only be one ref that gets fetched, but this is more consistant.

Also, fetch prints different information to standard out.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",586,data/crawl/git/hunk_8028.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_8028.cpp,data/crawl/git/new_hunk_8028.cpp,-1,183,,"fprintf(stderr, ""  old..new: %s..%s\n"", oldh, newh);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""old"", ""new"", ""%s"", ""%s\\n"", ""oldh"", ""newh""]]",[-2558279091299684270],6343,0.0,3
https://github.com/git/git/commit/f26a0012262106e0c7e92d8d07f00611112d3a8d,19 Sep 2007,"Enable wt-status output to a given FILE pointer.

Still defaults to stdout, but you can now override wt_status.fp after
calling wt_status_prepare().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_8000.cpp,invoke same log method,non-trivial,data/crawl/git/old_hunk_8000.cpp,data/crawl/git/new_hunk_8000.cpp,9,9,"printf(""%s"", color);","fprintf(fp, ""%s"", color);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""fp""]]",[-12428491950736315843],6342,0.0,3
https://github.com/git/git/commit/387e7e19d7eb5444be8da8e99ed7491989dc1cbb,30 Sep 2007,"strbuf_read_file enhancement, and use it.

* make strbuf_read_file take a size hint (works like strbuf_read)
* use it in a couple of places.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_7950.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_7950.cpp,data/crawl/git/new_hunk_7950.cpp,5,4,"error(""unable to open %s"", path);","error(""unable to open or read %s"", path);","[""updateContent""]","[[], [""or"", ""read""]]",[-5980861953503027899],6341,0.0,3
https://github.com/git/git/commit/21edd3f197df80e9493233a3b9849b61764ebf46,21 Oct 2007,"upload-pack: Run rev-list in an asynchronous function.

This gets rid of an explicit fork().

Since upload-pack has to coordinate two processes (rev-list and
pack-objects), we cannot use the normal finish_async(), but have to monitor
the process explicitly. Hence, there are no changes at this front.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",46,data/crawl/git/hunk_7903.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_7903.cpp,data/crawl/git/new_hunk_7903.cpp,4,-1,"die(""git-upload-pack: unable to create pipe"");",,"[""removeLog""]","[[""die"", ""git"", ""upload"", ""pack"", ""unable"", ""to"", ""create"", ""pipe""], []]",[-4496245101335907190],6340,0.0,3
https://github.com/git/git/commit/546bb5823249678bc6ad11e65661d896ed83448a,21 Oct 2007,"Use the asyncronous function infrastructure to run the content filter.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/hunk_7900.cpp,,,data/crawl/git/old_hunk_7900.cpp,data/crawl/git/new_hunk_7900.cpp,19,25,"error(""cannot fork to run external filter %s"", cmd);","error(""cannot fork to run external filter %s"", params->cmd);","[""removeVariable"", ""addVariable""]","[[], [""params""]]",[-3959264395539707084],6339,0.0,3
https://github.com/git/git/commit/dcf0c16ef1a8c2e468afe686a27a5549fea59798,17 Nov 2007,"core.excludesfile clean-up

There are inconsistencies in the way commands currently handle
the core.excludesfile configuration variable.  The problem is
the variable is too new to be noticed by anything other than
git-add and git-status.

 * git-ls-files does not notice any of the ""ignore"" files by
   default, as it predates the standardized set of ignore files.
   The calling scripts established the convention to use
   .git/info/exclude, .gitignore, and later core.excludesfile.

 * git-add and git-status know about it because they call
   add_excludes_from_file() directly with their own notion of
   which standard set of ignore files to use.  This is just a
   stupid duplication of code that need to be updated every time
   the definition of the standard set of ignore files is
   changed.

 * git-read-tree takes --exclude-per-directory=<gitignore>,
   not because the flexibility was needed.  Again, this was
   because the option predates the standardization of the ignore
   files.

 * git-merge-recursive uses hardcoded per-directory .gitignore
   and nothing else.  git-clean (scripted version) does not
   honor core.* because its call to underlying ls-files does not
   know about it.  git-clean in C (parked in 'pu') doesn't either.

We probably could change git-ls-files to use the standard set
when no excludes are specified on the command line and ignore
processing was asked, or something like that, but that will be a
change in semantics and might break people's scripts in a subtle
way.  I am somewhat reluctant to make such a change.

On the other hand, I think it makes perfect sense to fix
git-read-tree, git-merge-recursive and git-clean to follow the
same rule as other commands.  I do not think of a valid use case
to give an exclude-per-directory that is nonstandard to
read-tree command, outside a ""negative"" test in the t1004 test
script.

This patch is the first step to untangle this mess.

The next step would be to teach read-tree, merge-recursive and
clean (in C) to use setup_standard_excludes().

Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_7782.cpp,check similar variable,non-trivial,data/crawl/git/old_hunk_7782.cpp,data/crawl/git/new_hunk_7782.cpp,-1,5,,"die(""core.excludesfile without value"");","[""addLog""]","[[], [""die"", ""core"", ""excludesfile"", ""without"", ""value""]]",[-16385074991810110218],6338,170400.0,3
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,check similar return value,non-trivial,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,84,,"die(""unable to write new_index file"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""write"", ""new_index"", ""file""]]",[8173742603575151997],6337,0.0,3
https://github.com/git/git/commit/84ef033832af9e0be886214c70b2006b08630072,26 Nov 2007,"Print the real filename that we failed to open.

When we fail to open a temporary file to be renamed to something else,
we reported the final filename, not the temporary file we failed to
open.

Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_7732.cpp,,,data/crawl/git/old_hunk_7732.cpp,data/crawl/git/new_hunk_7732.cpp,2,2,"error(""Unable to open local file %s for pack index"",
			     filename);","error(""Unable to open local file %s for pack index"",
			     tmpfile);","[""updateVariable""]","[[""filename""], [""tmpfile""]]",[2937615253489856979],6336,0.0,3
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_7515.cpp,,,data/crawl/git/old_hunk_7515.cpp,data/crawl/git/new_hunk_7515.cpp,-1,7,,"die(""could not parse HEAD commit"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""parse"", ""HEAD"", ""commit""]]",[18740313307260266870],6335,40800.0,3
https://github.com/git/git/commit/525ab63950e324823dd45423104cdcf5e46e2610,18 Feb 2008,"merge-recursive: split low-level merge functions out.

This moves low-level merge functions out of merge-recursive.c and
places them in a new separate file, ll-merge.c

Signed-off-by: Junio C Hamano <gitster@pobox.com>",777,data/crawl/git/hunk_7454.cpp,,,data/crawl/git/old_hunk_7454.cpp,data/crawl/git/new_hunk_7454.cpp,-1,268,,"error(""%s: lacks value"", var);","[""addLog""]","[[], [""error"", ""%s"", ""lacks"", ""value"", ""var""]]",[-11666679747693175274],6334,0.0,3
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_7354.cpp,,,data/crawl/git/old_hunk_7354.cpp,data/crawl/git/new_hunk_7354.cpp,-1,16,,"printf(""undefined\n"");","[""addLog""]","[[], [""printf"", ""undefined\\n""]]",[13857179632628051140],6333,32640.0,3
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,86,,"die(""invalid %s"", typename(type));","[""addLog""]","[[], [""die"", ""invalid"", ""%s"", ""typename"", ""type""]]",[-6158566318841511646],6332,2400.0,3
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,42,,"die(""Error in object"");","[""addLog""]","[[], [""die"", ""Error"", ""in"", ""object""]]",[1289218037553243970],6331,2400.0,3
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,36,,"die(""object of unexpected type"");","[""addLog""]","[[], [""die"", ""object"", ""of"", ""unexpected"", ""type""]]",[-12377671224712674084],6330,2400.0,3
https://github.com/git/git/commit/01904572a5cf869983fab454f552542f16b1fe1f,09 Mar 2008,"Move 'unpack_trees()' over to 'traverse_trees()' interface

This not only deletes more code than it adds, it gets rid of a
singularly hard-to-understand function (unpack_trees_rec()), and
replaces it with a set of smaller and simpler functions that use the
generic tree traversal mechanism to walk over one or more git trees in
parallel.

It's still not the most wonderful interface, and by no means is the new
code easy to understand either, but it's at least a bit less opaque.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",530,data/crawl/git/hunk_7331.cpp,,,data/crawl/git/old_hunk_7331.cpp,data/crawl/git/new_hunk_7331.cpp,-1,224,,error(message);,"[""addLog""]","[[], [""error"", ""message""]]",[1438504816784457873],6329,82560.0,3
https://github.com/git/git/commit/c091b3d415f95d3e4e62acddb084e211af46acbf,26 Mar 2008,"Tighten refspec processing

This changes the pattern matching code to not store the required final
/ before the *, and then to require each side to be a valid ref (or
empty). In particular, any refspec that looks like it should be a
pattern but doesn't quite meet the requirements will be found to be
invalid as a fallback non-pattern.

This was cherry picked from commit ef00d15 (Tighten refspec processing,
2008-03-17), and two fix-up commits 46220ca (remote.c: Fix overtight
refspec validation, 2008-03-20) and 7d19da4 (refspec: allow colon-less
wildcard ""refs/category/*"", 2008-03-25) squashed in.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",256,data/crawl/git/hunk_7282.cpp,,,data/crawl/git/old_hunk_7282.cpp,data/crawl/git/new_hunk_7282.cpp,-1,113,,"die(""Invalid refspec '%s'"", refspec[i]);","[""addLog""]","[[], [""die"", ""Invalid"", ""refspec"", ""%s"", ""refspec[i]""]]",[-12201031270585522521],6328,3360.0,3
https://github.com/git/git/commit/7b15f872f23855de59bd06b0ebdbbc47b27b781b,26 Apr 2008,"help: use man viewer path from ""man.<tool>.path"" config var

This patch implements reading values from ""man.<tool>.path""
configuration variables, and using these values as pathes to
the man viewer <tool>s when lauching them.

This makes it possible to use different version of the tools
than the one on the current PATH, or maybe a custom script.

In this patch we also try to launch ""konqueror"" using
""kfmclient"" even if a path to a konqueror binary is given
in ""man.konqueror.path"".

The ""man_viewer_list"" becomes a simple string list to simplify
things for the following patches.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/hunk_7243.cpp,,,data/crawl/git/old_hunk_7243.cpp,data/crawl/git/new_hunk_7243.cpp,-1,13,,"warning(""failed to exec '%s': %s"", path, strerror(errno));","[""addLog""]","[[], [""warning"", ""failed"", ""to"", ""exec"", ""%s"", ""%s"", ""path"", ""strerror"", ""errno""]]",[-961838208399860249],6327,0.0,3
https://github.com/git/git/commit/b1b359699a24a89f773cccdf35801bc6fc15ade8,27 Apr 2008,"rev-parse: teach ""--verify"" to be quiet when using ""-q"" or ""--quiet""

Currently ""git rev-parse --verify <something>"" is often used with
its error output redirected to /dev/null. This patch makes it
easier to do that.

The -q|--quiet option is designed to work the same way as it does
for ""git symbolic-ref"".

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_7234.cpp,,,data/crawl/git/old_hunk_7234.cpp,data/crawl/git/new_hunk_7234.cpp,3,3,"die(""Needed a single revision"");",die_no_single_rev(quiet);,"[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""Needed"", ""a"", ""single"", ""revision""], [""die_no_single_rev"", ""quiet""]]",[-4681614280892900198],6326,0.0,3
https://github.com/git/git/commit/a8128ed62858063e29edc066b14b8b0fa6257cc2,06 May 2008,"git-cat-file: Add --batch option

--batch is similar to --batch-check, except that the contents of each object is
also printed. The output's form is:

<sha1> SP <type> SP <size> LF
<contents> LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/hunk_7199.cpp,,,data/crawl/git/old_hunk_7199.cpp,data/crawl/git/new_hunk_7199.cpp,40,56,"error(""git-cat-file: Can't use --batch-check with -%c"", opt);","error(""git-cat-file: Can't use %s with -%c"", arg, opt);","[""updateContent"", ""addVariable""]","[[""batch"", ""check""], [""%s"", ""arg""]]",[7036868627382014443],6325,0.0,3
https://github.com/git/git/commit/0569e9b8cea20d5eedfec66730a9711a0907ab0d,24 May 2008,"""git diff"": do not ignore index without --no-index

Even if ""foo"" and/or ""bar"" does not exist in index, ""git diff foo bar""
should not change behaviour drastically from ""git diff foo bar baz"" or
""git diff foo"".  A feature that ""sometimes works and is handy"" is an
unreliable cute hack.

""git diff foo bar"" outside a git repository continues to work as a more
colourful alternative to ""diff -u"" as before.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",621,data/crawl/git/hunk_7132.cpp,,,data/crawl/git/old_hunk_7132.cpp,data/crawl/git/new_hunk_7132.cpp,-1,11,,"die(""Not a git repository"");","[""addLog""]","[[], [""die"", ""Not"", ""a"", ""git"", ""repository""]]",[563808574802145930],6324,196320.0,3
https://github.com/git/git/commit/6483925999cde47e5108414ac3f57760394ee2d2,14 Jun 2008,"sha1_file.c: dead code removal

write_sha1_from_fd() and write_sha1_to_fd() were dead code nobody called,
neither the latter's helper repack_object() was.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",145,data/crawl/git/hunk_7087.cpp,,,data/crawl/git/old_hunk_7087.cpp,data/crawl/git/new_hunk_7087.cpp,111,-1,"die(""unable to write sha1 file"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""write"", ""sha1"", ""file""], []]",[-10681450186952387702],6323,1440.0,3
https://github.com/git/git/commit/df6a7ff7ac55d320afa1b8a59393122d6ca0f6c4,19 Jun 2008,"builtin-fast-export: Add importing and exporting of revision marks

This adds the --import-marks and --export-marks to fast-export. These import
and export the marks used to for all revisions exported in a similar fashion
to what fast-import does. The format is the same as fast-import, so you can
create a bidirectional importer / exporter by using the same marks file on
both sides.

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/hunk_7076.cpp,,,data/crawl/git/old_hunk_7076.cpp,data/crawl/git/new_hunk_7076.cpp,-1,51,,"die (""Could not read blob %s"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""read"", ""blob"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[2582327435247193049],6322,95520.0,3
https://github.com/git/git/commit/6b61ec0564993d2e60f7eb56c0f0fd9c313d5e2c,09 Jul 2008,"revisions: refactor handle_revision_opt into parse_revision_opt.

It seems we're using handle_revision_opt the same way each time, have a
wrapper around it that does the 9-liner we copy each time instead.

handle_revision_opt can be static in the module for now, it's always
possible to make it public again if needed.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_7011.cpp,,,data/crawl/git/old_hunk_7011.cpp,data/crawl/git/new_hunk_7011.cpp,-1,10,,"error(""unknown option `%s'"", ctx->argv[0]);","[""addLog""]","[[], [""error"", ""unknown"", ""option"", ""%s"", ""ctx"", ""argv[0]""]]",[5936802647489237526],6321,960.0,3
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,115,,"fputs(""<<<<<<<\n"", out);","[""addLog""]","[[], [""fputs"", ""\\n"", ""out""]]",[646200843525684552],6320,0.0,3
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,65,,"die(""unable to write rerere record"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""write"", ""rerere"", ""record""]]",[14264890760065462695],6319,363840.0,3
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7006.cpp,,,data/crawl/git/old_hunk_7006.cpp,data/crawl/git/new_hunk_7006.cpp,93,-1,"fputs(""<<<<<<<\n"", out);",,"[""removeLog""]","[[""fputs"", ""\\n"", ""out""], []]",[-646200843525684552],6318,0.0,3
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7006.cpp,,,data/crawl/git/old_hunk_7006.cpp,data/crawl/git/new_hunk_7006.cpp,61,-1,"error(""Could not open %s"", path);",,"[""removeLog""]","[[""error"", ""Could"", ""not"", ""open"", ""%s"", ""path""], []]",[-25625554630532546828],6317,141600.0,3
https://github.com/git/git/commit/c09df8a74e8b5e106ad853cbb1e52f36b3663386,19 Jul 2008,"Add ANSI control code emulation for the Windows console

This adds only the minimum necessary to keep git pull/merge's diffstat from
wrapping. Notably absent is support for the K (erase) operation, and support
for POSIX write.

Signed-off-by: Peter Harris <git@peter.is-a-geek.org>
Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",358,data/crawl/git/hunk_6982.cpp,,,data/crawl/git/old_hunk_6982.cpp,data/crawl/git/new_hunk_6982.cpp,-1,257,,"fputs(str, stream);","[""addLog""]","[[], [""fputs"", ""str"", ""stream""]]",[-13037712159664983763],6316,0.0,3
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6874.cpp,,,data/crawl/git/old_hunk_6874.cpp,data/crawl/git/new_hunk_6874.cpp,3,3,"output(1, ""CONFLICT (rename/directory): Renamed %s->%s in %s ""
				       "" directory %s added in %s"",
				       ren1_src, ren1_dst, branch1,
				       ren1_dst, branch2);","output(1, ""CONFLICT (rename/directory): Rename %s->%s in %s ""
				       "" directory %s added in %s"",
				       ren1_src, ren1_dst, branch1,
				       ren1_dst, branch2);","[""updateContent""]","[[""Renamed""], [""Rename""]]",[-896520578059266289],6315,0.0,3
https://github.com/git/git/commit/85e72830697a23dd6b1af8b6bfb3c1a7be60dfae,31 Aug 2008,"cast pid_t's to uintmax_t to improve portability

Some systems (like e.g. OpenSolaris) define pid_t as long,
therefore all our sprintf that use %i/%d cause a compiler warning
beacuse of the implicit long->int cast. To make sure that
we fit the limits, we display pids as PRIuMAX and cast them explicitly
to uintmax_t.

Signed-off-by: David Soria Parra <dsp@php.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_6758.cpp,,,data/crawl/git/old_hunk_6758.cpp,data/crawl/git/new_hunk_6758.cpp,3,3,"(fprintf(f, ""%d\n"", getpid());","(fprintf(f, ""%""PRIuMAX""\n"", (uintmax_t) getpid());","[""addContent"", ""updateContent"", ""addVariable""]","[[""%d\\n""], [""%"", ""PRIuMAX"", ""\\n"", ""uintmax_t""]]",[-5387691416187429150],6314,0.0,3
https://github.com/git/git/commit/34292bddb861f3cb52a524fdce67234430a744fe,07 Jan 2009,"Introduce the diff option '--patience'

This commit teaches Git to produce diff output using the patience diff
algorithm with the diff option '--patience'.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",175,data/crawl/git/hunk_6539.cpp,,,data/crawl/git/old_hunk_6539.cpp,data/crawl/git/new_hunk_6539.cpp,-1,16,,"printf(""%d\n"", foo);","[""addLog""]","[[], [""printf"", ""%d\\n"", ""foo""]]",[9205159961022081327],6313,0.0,3
https://github.com/git/git/commit/8415d5c7ef63237f6efab0c9aef0b0fdbcbfda25,14 Feb 2009,"Teach the ""@{-1} syntax to ""git branch""

This teaches the new ""@{-1} syntax to refer to the previous branch to ""git
branch"".  After looking at somebody's faulty patch series on a topic
branch too long, if you decide it is not worth merging, you can just say:

    $ git checkout master
    $ git branch -D @{-1}

to get rid of it without having to type the name of the topic you now hate
so much for wasting a lot of your time.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_6468.cpp,,,data/crawl/git/old_hunk_6468.cpp,data/crawl/git/new_hunk_6468.cpp,15,20,"error(""%sbranch '%s' not found."",
					remote, argv[i]);","error(""%sbranch '%s' not found."",
					remote, bname.buf);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""argv[i]""], [""bname"", ""buf""]]",[-7934297328373509210],6312,0.0,3
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,94,,"fprintf(stderr, ""To %s\n"", dest);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""To"", ""%s\\n"", ""dest""]]",[-16584513600167938763],6311,240960.0,3
https://github.com/git/git/commit/96beef8c2efaab06f703991ed7802b8cef4c00e3,05 Apr 2009,"sha1-lookup: add new ""sha1_pos"" function to efficiently lookup sha1

This function has been copied from the ""patch_pos"" function in
""patch-ids.c"" but an additional parameter has been added.

The new parameter is a function pointer, that is used to access the
sha1 of an element in the table.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",108,data/crawl/git/hunk_6307.cpp,,,data/crawl/git/old_hunk_6307.cpp,data/crawl/git/new_hunk_6307.cpp,-1,83,,"die(""oops"");","[""addLog""]","[[], [""die"", ""oops""]]",[-1936985164076898722],6310,404160.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6256.cpp,,,data/crawl/git/old_hunk_6256.cpp,data/crawl/git/new_hunk_6256.cpp,-1,21,,"die(""invalid rule in ref_rev_parse_rules: %s"", rule);","[""addLog""]","[[], [""die"", ""invalid"", ""rule"", ""in"", ""ref_rev_parse_rules"", ""%s"", ""rule""]]",[-20849995018331249634],6309,207840.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6243.cpp,,,data/crawl/git/old_hunk_6243.cpp,data/crawl/git/new_hunk_6243.cpp,4,-1,"printf(""In-Reply-To: <%s>\nReferences: <%s>\n"",
		       opt->ref_message_id, opt->ref_message_id);",,"[""removeLog""]","[[""printf"", ""In"", ""Reply"", ""To"", ""%s"", ""\\nReferences"", ""%s"", ""\\n"", ""opt"", ""ref_message_id"", ""opt"", ""ref_message_id""], []]",[4801155634190395202],6308,378240.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6201.cpp,,,data/crawl/git/old_hunk_6201.cpp,data/crawl/git/new_hunk_6201.cpp,-1,46,,"fprintf(stderr, ""Everything up-to-date\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Everything"", ""up"", ""to"", ""date\\n""]]",[1517109462172770441],6307,16800.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6192.cpp,,,data/crawl/git/old_hunk_6192.cpp,data/crawl/git/new_hunk_6192.cpp,18,14,"fputs(header_prefix, stdout);","fputs(info->header_prefix, stdout);","[""removeVariable"", ""addVariable""]","[[], [""info""]]",[-6492726066479515808],6306,2400.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,324,,"printf(""%s/HEAD set to %s\n"", argv[0], head_name);","[""addLog""]","[[], [""printf"", ""%s/HEAD"", ""set"", ""to"", ""%s\\n"", ""argv[0]"", ""head_name""]]",[9483644788860981355],6305,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,322,,"error(""Could not setup %s"", buf.buf);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""setup"", ""%s"", ""buf"", ""buf""]]",[21036176822395032889],6304,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,320,,"error(""Not a valid ref: %s"", buf2.buf);","[""addLog""]","[[], [""error"", ""Not"", ""a"", ""valid"", ""ref"", ""%s"", ""buf2"", ""buf""]]",[7988624750055475651],6303,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,311,,"error(""Could not delete %s"", buf.buf);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""delete"", ""%s"", ""buf"", ""buf""]]",[23343098699209300814],6302,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,304,,"fprintf(stderr, ""  git remote set-head %s %s\n"",
					argv[0], states.heads.items[i].string);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""git"", ""remote"", ""set"", ""head"", ""%s"", ""%s\\n"", ""argv[0]"", ""states"", ""heads"", ""items[i]"", ""string""]]",[-25266797292225718961],6301,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,301,,"error(""Multiple remote HEAD branches. ""
					""Please choose one explicitly with:"");","[""addLog""]","[[], [""error"", ""Multiple"", ""remote"", ""HEAD"", ""branches"", ""Please"", ""choose"", ""one"", ""explicitly"", ""with""]]",[28156887796994635716],6300,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,299,,"error(""Cannot determine remote HEAD"");","[""addLog""]","[[], [""error"", ""Cannot"", ""determine"", ""remote"", ""HEAD""]]",[5712853761021175814],6299,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,262,,"printf(""  Local ref%s configured for 'git push'%s:\n"",
				info.list->nr > 1 ? ""s"" : """",
				no_query ? "" (status not queried)"" : """");","[""addLog""]","[[], [""printf"", ""Local"", ""ref%s"", ""configured"", ""for"", ""git"", ""push"", ""%s"", ""\\n"", ""info"", ""list"", ""nr"", ""1"", ""s"", ""no_query"", ""status"", ""not"", ""queried""]]",[-9818775689412511434],6298,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,255,,"printf(""  Local refs will be mirrored by 'git push'\n"");","[""addLog""]","[[], [""printf"", ""Local"", ""refs"", ""will"", ""be"", ""mirrored"", ""by"", ""git"", ""push"", ""\\n""]]",[-5219004361333927508],6297,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,237,,"printf(""  Remote branch%s:%s\n"",
			       info.list->nr > 1 ? ""es"" : """",
				no_query ? "" (status not queried)"" : """");","[""addLog""]","[[], [""printf"", ""Remote"", ""branch%s"", ""%s\\n"", ""info"", ""list"", ""nr"", ""1"", ""es"", ""no_query"", ""status"", ""not"", ""queried""]]",[11433880693998978241],6296,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,225,,"printf(""  HEAD branch (remote HEAD is ambiguous,""
			       "" may be one of the following):\n"");","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""remote"", ""HEAD"", ""is"", ""ambiguous"", ""may"", ""be"", ""one"", ""of"", ""the"", ""following"", ""\\n""]]",[14755362550905509643],6295,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,223,,"printf(""  HEAD branch: %s\n"", states.heads.items[0].string);","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""%s\\n"", ""states"", ""heads"", ""items[0]"", ""string""]]",[1874899908499647180],6294,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,221,,"printf(""  HEAD branch: (unknown)\n"");","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""unknown"", ""\\n""]]",[4410971448933888432],6293,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,219,,"printf(""  HEAD branch: (not queried)\n"");","[""addLog""]","[[], [""printf"", ""HEAD"", ""branch"", ""not"", ""queried"", ""\\n""]]",[21714058396433734975],6292,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,176,,"printf(""    %-*s %s to %-*s (%s)\n"", show_info->width, src,
			push_info->forced ? ""forces"" : ""pushes"",
			show_info->width2, push_info->dest, status);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""%s"", ""to"", ""%"", ""*s"", ""%s"", ""\\n"", ""show_info"", ""width"", ""src"", ""push_info"", ""forced"", ""forces"", ""pushes"", ""show_info"", ""width2"", ""push_info"", ""dest"", ""status""]]",[1418436381094439139],6291,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,114,,"printf(""    %-*s %s %s\n"", show_info->width, """", also,
		       merge->items[i].string);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""%s"", ""%s\\n"", ""show_info"", ""width"", ""also"", ""merge"", ""items[i]"", ""string""]]",[4919852120229295522],6290,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,104,,"printf(""rebases onto remote %s\n"", merge->items[0].string);","[""addLog""]","[[], [""printf"", ""rebases"", ""onto"", ""remote"", ""%s\\n"", ""merge"", ""items[0]"", ""string""]]",[-669821993052392287],6289,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,102,,"printf(""    %-*s "", show_info->width, item->string);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""show_info"", ""width"", ""item"", ""string""]]",[-9656136315463205032],6288,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,97,,"error(""invalid branch.%s.merge; cannot rebase onto > 1 branch"",
			item->string);","[""addLog""]","[[], [""error"", ""invalid"", ""branch"", ""%s"", ""merge"", ""cannot"", ""rebase"", ""onto"", ""1"", ""branch"", ""item"", ""string""]]",[-24872726705739602049],6287,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,58,,"printf(fmt, arg);","[""addLog""]","[[], [""printf"", ""fmt"", ""arg""]]",[4513291450875470040],6286,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,-1,57,,"printf(""    %-*s"", info->width, name);","[""addLog""]","[[], [""printf"", ""%"", ""*s"", ""info"", ""width"", ""name""]]",[-5613883366320046784],6285,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,85,-1,"printf(""    %s%s%s%s\n"",
				       spec->force ? ""+"" : """",
				       abbrev_branch(spec->src),
				       spec->dst ? "":"" : """",
				       spec->dst ? abbrev_branch(spec->dst) : """");",,"[""removeLog""]","[[""printf"", ""%s%s%s%s\\n"", ""spec"", ""force"", ""abbrev_branch"", ""spec"", ""src"", ""spec"", ""dst"", ""spec"", ""dst"", ""abbrev_branch"", ""spec"", ""dst""], []]",[7830419231332256697],6284,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6186.cpp,,,data/crawl/git/old_hunk_6186.cpp,data/crawl/git/new_hunk_6186.cpp,4,4,"warning(""more than one branch.%s"", key);","warning(""more than one %s"", orig_key);","[""updateVariable"", ""updateContent""]","[[""branch"", ""key""], [""orig_key""]]",[-10968043938809492745],6283,25920.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,98,-1,"fprintf(stderr, ""No such section!\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""No"", ""such"", ""section"", ""\\n""], []]",[8094311148207744340],6282,24000.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6127.cpp,,,data/crawl/git/old_hunk_6127.cpp,data/crawl/git/new_hunk_6127.cpp,-1,14,,"die(""could not redirect output"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""redirect"", ""output""]]",[1379184243362453572],6281,21120.0,3
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6127.cpp,,,data/crawl/git/old_hunk_6127.cpp,data/crawl/git/new_hunk_6127.cpp,-1,11,,"die(""could not create archive file: %s "", output_file);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""create"", ""archive"", ""file"", ""%s"", ""output_file""]]",[5874220029144586385],6280,21120.0,3
https://github.com/git/git/commit/38124d8f3120b8e189760376b0a93cad6f3c475a,19 Apr 2009,"builtin-fast-export.c: turn error into warning

fast-import doesn't have a syntax to support tree-objects (and some other
object-types), so fast-export shouldn't handle them. However, aborting the
operation is a bit drastic. This patch turns the error into a warning instead.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_6109.cpp,,,data/crawl/git/old_hunk_6109.cpp,data/crawl/git/new_hunk_6109.cpp,3,3,"die (""Unexpected object of type %s"",
			     typename(e->item->type));","warning(""%s: Unexpected object of type %s, skipping."",
				e->name,
				typename(e->item->type));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die""], [""warning"", ""%s"", ""skipping"", ""name"", ""e""]]",[-6684398009615584926],6279,16320.0,3
https://github.com/git/git/commit/426193c025eb76125a99b3fe143eea50e849f9ca,19 Apr 2009,"builtin-fast-export.c: fix crash on tagged trees

If a tag object points to a tree (or another unhandled type), the commit-
pointer is left uninitialized and later dereferenced. This patch adds a
default case to the switch that issues a warning and skips the object.

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_6107.cpp,,,data/crawl/git/old_hunk_6107.cpp,data/crawl/git/new_hunk_6107.cpp,-1,4,,"warning(""Tag points to object of unexpected type %s, skipping."",
					typename(tag->object.type));","[""addLog""]","[[], [""warning"", ""Tag"", ""points"", ""to"", ""object"", ""of"", ""unexpected"", ""type"", ""%s"", ""skipping"", ""typename"", ""tag"", ""object"", ""type""]]",[-11097522688205797961],6278,16320.0,3
https://github.com/git/git/commit/2b020695e4db8dbaee7997090aec08760903291b,10 May 2009,"bisect: remove too much function nesting

This patch moves some function calls into ""bisect_next_exit"" so
that functions are nesting less.

The call to ""bisect_rev_setup"" is moved from ""bisect_common"" into
""bisect_next_exit"" and the call to ""read_bisect_refs"" from
""bisect_rev_setup"" into ""bisect_next_exit"".

While at it, ""rev_argv"" is moved into ""bisect_rev_setup"".

This will make it easier and cleaner to implement checking merge
bases.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_6040.cpp,,,data/crawl/git/old_hunk_6040.cpp,data/crawl/git/new_hunk_6040.cpp,-1,4,,"die(""reading bisect refs failed"");","[""addLog""]","[[], [""die"", ""reading"", ""bisect"", ""refs"", ""failed""]]",[-26378220174760074425],6277,20640.0,3
https://github.com/git/git/commit/39dc52cf4ff04e9cd4d2562218ad619e23a81efa,06 Jun 2009,"http: use new http API in fetch_index()

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_5979.cpp,,,data/crawl/git/old_hunk_5979.cpp,data/crawl/git/new_hunk_5979.cpp,28,-1,"fprintf(stderr,
				""Resuming fetch of index for pack %s at byte %ld\n"",
				hex, prev_posn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resuming"", ""fetch"", ""of"", ""index"", ""for"", ""pack"", ""%s"", ""at"", ""byte"", ""%ld\\n"", ""hex"", ""prev_posn""], []]",[28777896022701260200],6276,0.0,3
https://github.com/git/git/commit/39dc52cf4ff04e9cd4d2562218ad619e23a81efa,06 Jun 2009,"http: use new http API in fetch_index()

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_5979.cpp,,,data/crawl/git/old_hunk_5979.cpp,data/crawl/git/new_hunk_5979.cpp,6,-1,"error(""Unable to open local file %s for pack index"",
			    tmpfile);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""open"", ""local"", ""file"", ""%s"", ""for"", ""pack"", ""index"", ""tmpfile""], []]",[228075361391450385],6275,0.0,3
https://github.com/git/git/commit/4e2715fb9878235cb696f765695eef38078b0b7a,09 Jun 2009,"Simplify some 'fprintf(stderr); return -1;' by using 'return error()'

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_5957.cpp,,,data/crawl/git/old_hunk_5957.cpp,data/crawl/git/new_hunk_5957.cpp,4,4,"fprintf(stderr, ""Failed to start emacsclient.\n"");","error(""Failed to start emacsclient."");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""\\n""], [""error""]]",[22199017998696725749],6274,0.0,3
https://github.com/git/git/commit/2ff4d1ab9ef6660c88020ddaadc410157e130cdc,22 Jun 2009,"receive-pack: do not send error details to the client

If the objects that a client pushes to the server cannot be processed for
any reason, an error is reported back to the client via the git protocol.
We used to send quite detailed information if a system call failed if
unpack-objects is run. This can be regarded as an information leak. Now we
do not send any error details like we already do in the case where
index-pack failed.

Errors in system calls as well as the exit code of unpack-objects and
index-pack are now reported to stderr; in the case of a local push or via
ssh these messages still go to the client, but that is OK since these forms
of access to the server assume that the client can be trusted. If
receive-pack is run from git-daemon, then the daemon should put the error
messages into the syslog.

With this reasoning a new status report is added for the post-update-hook;
untrusted (i.e. daemon's) clients cannot observe its status anyway, others
may want to know failure details.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_5940.cpp,,,data/crawl/git/old_hunk_5940.cpp,data/crawl/git/new_hunk_5940.cpp,19,19,"error(""%s died of signal"", hook_name);","error(""%s died of signal"", cmd_name);","[""updateVariable""]","[[""hook_name""], [""cmd_name""]]",[2663642743231910546],6273,0.0,3
https://github.com/git/git/commit/d824cbba02a4061400a0e382f9bd241fbbff34f0,27 Jun 2009,"Convert existing die(..., strerror(errno)) to die_errno()

Change calls to die(..., strerror(errno)) to use the new die_errno().

In the process, also make slight style adjustments: at least state
_something_ about the function that failed (instead of just printing
the pathname), and put paths in single quotes.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5874.cpp,,,data/crawl/git/old_hunk_5874.cpp,data/crawl/git/new_hunk_5874.cpp,3,3,"die(""'%s': %s"", path, strerror(errno));","die_errno(""failed to stat '%s'"", path);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""%s"", ""strerror"", ""errno""], [""die_errno"", ""failed"", ""to"", ""stat""]]",[-28044884680992620299],6272,0.0,3
https://github.com/git/git/commit/0721c314a5c8fddc877140ab5a333c42c62f780d,27 Jun 2009,"Use die_errno() instead of die() when checking syscalls

Lots of die() calls did not actually report the kind of error, which
can leave the user confused as to the real problem.  Use die_errno()
where we check a system/library call that sets errno on failure, or
one of the following that wrap such calls:

  Function              Passes on error from
  --------              --------------------
  odb_pack_keep         open
  read_ancestry         fopen
  read_in_full          xread
  strbuf_read           xread
  strbuf_read_file      open or strbuf_read_file
  strbuf_readlink       readlink
  write_in_full         xwrite

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",153,data/crawl/git/hunk_5831.cpp,,,data/crawl/git/old_hunk_5831.cpp,data/crawl/git/new_hunk_5831.cpp,3,3,"die(""Could open %s for writing"",
				git_path(""MERGE_HEAD""));","die_errno(""Could not open '%s' for writing"",
				  git_path(""MERGE_HEAD""));","[""updateLog"", ""updateContent""]","[[""die""], [""die_errno"", ""not""]]",[603811159956978205],6271,0.0,3
https://github.com/git/git/commit/5dd06d38795b2f6d05f851b25c814732238f8df1,02 Jul 2009,"grep: move context hunk mark handling into show_line()

Move last_shown into struct grep_opt, to make it available in
show_line(), and then make the function handle the printing of hunk
marks for context lines in a central place.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_5792.cpp,,,data/crawl/git/old_hunk_5792.cpp,data/crawl/git/new_hunk_5792.cpp,6,-1,"fputs(hunk_mark, stdout);",,"[""removeLog""]","[[""fputs"", ""hunk_mark"", ""stdout""], []]",[19802619654197182391],6270,0.0,3
https://github.com/git/git/commit/2944e4e6145bdfcb1a8730d7da671786d72c86ed,02 Jul 2009,"grep: add option -p/--show-function

The new option -p instructs git grep to print the previous function
definition as a context line, similar to diff -p.  Such context lines
are marked with an equal sign instead of a dash.  This option
complements the existing context options -A, -B, -C.

Function definitions are detected using the same heuristic that diff
uses.  User defined regular expressions are not supported, yet.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/hunk_5786.cpp,,,data/crawl/git/old_hunk_5786.cpp,data/crawl/git/new_hunk_5786.cpp,-1,13,,"fputs(""==\n"", stdout);","[""addLog""]","[[], [""fputs"", ""\\n"", ""stdout""]]",[-12210368594645536720],6269,0.0,3
https://github.com/git/git/commit/59b8d38f6e4f19b93c5dc4493ab11706acd101b5,11 Sep 2009,"http.c: remove verification of remote packs

Make http.c::fetch_pack_index() no longer check for the remote pack
with a HEAD request before fetching the corresponding pack index file.

Not only does sending a HEAD request before we do a GET incur a
performance penalty, it does not offer any significant error-
prevention advantages (pack fetching in the *_http_pack_request()
methods is capable of handling any errors on its own).

This addresses an issue raised elsewhere:

  http://code.google.com/p/msysgit/issues/detail?id=323
  http://support.github.com/discussions/repos/957-cant-clone-over-http-or-git

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_5680.cpp,,,data/crawl/git/old_hunk_5680.cpp,data/crawl/git/new_hunk_5680.cpp,9,-1,"error(""Unable to verify pack %s is available"",
			    hex);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""verify"", ""pack"", ""%s"", ""is"", ""available"", ""hex""], []]",[-2124037517676676439],6268,46560.0,3
https://github.com/git/git/commit/38eedc634bc5d30e8a7a2356d9eb3ae95d9b1d75,12 Oct 2009,"git check-ref-format --print

Tolerating empty path components in ref names means each ref does
not have a unique name.  This creates difficulty for porcelains
that want to see if two branches are equal.  Add a helper associating
to each ref a canonical name.

If a user asks a porcelain to create a ref ""refs/heads//master"",
the porcelain can run ""git check-ref-format --print refs/heads//master""
and only deal with ""refs/heads/master"" from then on.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_5658.cpp,,,data/crawl/git/old_hunk_5658.cpp,data/crawl/git/new_hunk_5658.cpp,-1,10,,"printf(""%s\n"", refname);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""refname""]]",[20968797248952880790],6267,718560.0,3
https://github.com/git/git/commit/9f67d2e8279e1885ef2b4681c19cef8534259783,27 Oct 2009,"Teach ""git describe"" --dirty option

With the --dirty option, git describe works on HEAD but append s""-dirty""
iff the contents of the work tree differs from HEAD.  E.g.

  $ git describe --dirty
  v1.6.5-15-gc274db7
  $ echo >> Makefile
  $ git describe --dirty
  v1.6.5-15-gc274db7-dirty

The --dirty option can also be used to specify what is appended, instead
of the default string ""-dirty"".

  $ git describe --dirty=.mod
  v1.6.5-15-gc274db7.mod

Many build scripts use `git describe` to produce a version number based on
the description of HEAD (on which the work tree is based) + saying that if
the build contains uncommitted changes.  This patch helps the writing of
such scripts since `git describe --dirty` does directly the intended thing.

Three possiblities were considered while discussing this new feature:

1. Describe the work tree by default and describe HEAD only if ""HEAD"" is
   explicitly specified

     Pro: does the right thing by default (both for users and for scripts)
     Pro: other git commands that works on the work tree by default
     Con: breaks existing scripts used by the Linux kernel and other projects

2. Use --worktree instead of --dirty

     Pro: does what it says: ""git describe --worktree"" describes the work tree
     Con: other commands do not require a --worktree option when working
          on the work tree (it often is the default mode for them)
     Con: unusable with an optional value: ""git describe --worktree=.mod""
	  is quite unintuitive.

3. Use --dirty as in this patch

     Pro: makes sense to specify an optional value (what the dirty mark is)
     Pro: does not have any of the big cons of previous alternatives
	  * does not break scripts
	  * is not inconsistent with other git commands

This patch takes the third approach.

Signed-off-by: Jean Privat <jean@pryen.org>
Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_5628.cpp,,,data/crawl/git/old_hunk_5628.cpp,data/crawl/git/new_hunk_5628.cpp,-1,4,,"printf(""%s"", dirty);","[""addLog""]","[[], [""printf"", ""%s"", ""dirty""]]",[10953896129393814250],6266,0.0,3
https://github.com/git/git/commit/5f809ff50921bee44bbf88c49056e7d145c0c35f,31 Oct 2009,fixup tr/stash-format merge,271,data/crawl/git/hunk_5583.cpp,,,data/crawl/git/old_hunk_5583.cpp,data/crawl/git/new_hunk_5583.cpp,29,29,"printf(""%d"", commit_reflog->reflogs->nr
				       - 2 - commit_reflog->recno);","strbuf_addf(sb, ""%d"", commit_reflog->reflogs->nr
			    - 2 - commit_reflog->recno);","[""updateLog"", ""addVariable""]","[[""printf""], [""strbuf_addf"", ""sb""]]",[-9795091059743571053],6265,5280.0,3
https://github.com/git/git/commit/c985ddf318a8c41c6e1abc8bebd058b31c7413c1,30 Dec 2009,"git count-objects: handle packs bigger than 4G

Use off_t to count sizes of packs and objects to avoid overflow after
4Gb.

Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_5453.cpp,,,data/crawl/git/old_hunk_5453.cpp,data/crawl/git/new_hunk_5453.cpp,3,3,"printf(""size: %lu\n"", loose_size / 1024);","printf(""size: %lu\n"", (unsigned long) (loose_size / 1024));","[""addVariable""]","[[], [""unsigned"", ""long""]]",[-1194457552177564325],6264,0.0,3
https://github.com/git/git/commit/81f45e7dc4e930ffc17dce3e377e6adc3eb3d8de,17 Feb 2010,"git add -u: die on unmatched pathspec

If a pathspec is supplied to 'git add -u' and no path matches
the pattern, fail with an approriate error message and exit code.

Tested-by: Chris Packham <judge.packham@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_5431.cpp,,,data/crawl/git/old_hunk_5431.cpp,data/crawl/git/new_hunk_5431.cpp,-1,18,,"die(""pathspec '%s' did not match any files"",
				    pathspec[i]);","[""addLog""]","[[], [""die"", ""pathspec"", ""%s"", ""did"", ""not"", ""match"", ""any"", ""files"", ""pathspec[i]""]]",[20776966181493873256],6263,499680.0,3
https://github.com/git/git/commit/06b65939b083ba1b71043005bf83b4883e98264e,17 Feb 2010,"refactor duplicated fill_mm() in checkout and merge-recursive

The following function is duplicated:

  fill_mm

Move it to xdiff-interface.c and rename it 'read_mmblob', as suggested
by Junio C Hamano.

Also, change parameters order for consistency with read_mmfile().

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_5419.cpp,,,data/crawl/git/old_hunk_5419.cpp,data/crawl/git/new_hunk_5419.cpp,-1,16,,"die(""unable to read blob object %s"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""blob"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-9553306293856305338],6262,256800.0,3
https://github.com/git/git/commit/06b65939b083ba1b71043005bf83b4883e98264e,17 Feb 2010,"refactor duplicated fill_mm() in checkout and merge-recursive

The following function is duplicated:

  fill_mm

Move it to xdiff-interface.c and rename it 'read_mmblob', as suggested
by Junio C Hamano.

Also, change parameters order for consistency with read_mmfile().

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",65,data/crawl/git/hunk_5416.cpp,,,data/crawl/git/old_hunk_5416.cpp,data/crawl/git/new_hunk_5416.cpp,17,-1,"die(""unable to read blob object %s"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""read"", ""blob"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""], []]",[9553306293856305338],6261,513600.0,3
https://github.com/git/git/commit/f965c525a4d04837b1b7ed43e3fa2dc8c0df4e2b,23 Feb 2010,"move encode_in_pack_object_header() to a better place

Commit 1b22b6c897 made duplicated versions of encode_header() into a
common version called encode_in_pack_object_header(). There is however
a better location that sha1_file.c for such a function though, as
sha1_file.c contains nothing related to the creation of packs, and
it is quite populated already.

Also the comment that was moved to the header file should really remain
near the function as it covers implementation details and provides no
information about the actual function interface.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_5402.cpp,,,data/crawl/git/old_hunk_5402.cpp,data/crawl/git/new_hunk_5402.cpp,9,-1,"die(""bad type %d"", type);",,"[""removeLog""]","[[""die"", ""bad"", ""type"", ""%d"", ""type""], []]",[-3034749881290590620],6260,2880.0,3
https://github.com/git/git/commit/3f9083cde3b434155c274168f166ffce2bb243e7,01 Apr 2010,"merge: refactor code that calls ""git merge-STRATEGY""

In the try_merge_strategy() function, when the strategy is ""recursive""
or ""subtree"", the merge_recursive() function is called.
Otherwise we launch a ""git merge-STRATEGY"" process.

To make it possible to reuse code that launches a ""git merge-STRATEGY""
process, this patch refactors this code into a new try_merge_command()
function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_5307.cpp,,,data/crawl/git/old_hunk_5307.cpp,data/crawl/git/new_hunk_5307.cpp,-1,41,,"die(""failed to read the cache"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""read"", ""the"", ""cache""]]",[-26720264961997095624],6259,329280.0,3
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5233.cpp,,,data/crawl/git/old_hunk_5233.cpp,data/crawl/git/new_hunk_5233.cpp,-1,41,,"fputs(line_prefix, file);","[""addLog""]","[[], [""fputs"", ""line_prefix"", ""file""]]",[-4007682152638190063],6258,0.0,3
https://github.com/git/git/commit/765c22588d9e410bf0100c4991b1945134da6959,07 Jul 2010,"fix git branch -m in presence of cross devices

When you have for example a bare repository stored on NFS, and that you
create new workdirs locally (using contrib's git-new-workdir), logs/refs
is a symlink to a different device. Hence when the reflogs are renamed,
all must happen below logs/refs or one gets cross device rename errors
like:

  git branch -m foo
  error: unable to move logfile logs/refs/heads/master to tmp-renamed-log: Invalid cross-device link
  fatal: Branch rename failed

The fix is hence to use logs/refs/.tmp-renamed-log as a temporary log
name, instead of just tmp-renamed-log.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_5136.cpp,,,data/crawl/git/old_hunk_5136.cpp,data/crawl/git/new_hunk_5136.cpp,4,4,"error(""unable to move logfile logs/%s to tmp-renamed-log: %s"",
			oldref, strerror(errno));","error(""unable to move logfile logs/%s to ""TMP_RENAMED_LOG"": %s"",
			oldref, strerror(errno));","[""updateContent"", ""addContent"", ""addVariable""]","[[""tmp"", ""renamed"", ""log""], [""TMP_RENAMED_LOG""]]",[-1349003959744958850],6257,0.0,3
https://github.com/git/git/commit/8fc0ae80f6938e409e0efa45d6d504c6137744e3,04 Aug 2010,"setup: do not forget working dir from subdir of gitdir

v1.6.1.3~4^2 (Fix gitdir detection when in subdir of gitdir,
2009-01-16) did not go far enough: when a git directory is
an ancestor of the original working directory, not only
should GIT_DIR be set to point to the .git directory, but
the original working directory should be restored before
carrying out the relevant command.

This way, the effect of running a git command from a subdir
of .git will be the same whether or not GIT_DIR is explicitly
set.

Noticed while investigating v1.6.0.3~1 (rehabilitate 'git
index-pack' inside the object store, 2008-10-20).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_5097.cpp,,,data/crawl/git/old_hunk_5097.cpp,data/crawl/git/new_hunk_5097.cpp,-1,4,,"die_errno(""Cannot come back to cwd"");","[""addLog""]","[[], [""die_errno"", ""Cannot"", ""come"", ""back"", ""to"", ""cwd""]]",[-1684374643326029096],6256,119520.0,3
https://github.com/git/git/commit/f6ce1f25885f3db71935b201c5e3c858eb993f5c,10 Nov 2010,"cherry-pick/revert: transparently refresh index

A stat-dirty index is not a detail that ought to concern the operator
of porcelain such as ""git cherry-pick"".

Without this change, a cherry-pick after copying a worktree with rsync
errors out with a misleading message.

	$ git cherry-pick build/top
	error: Your local changes to 'file.h' would be overwritten by merge.  Aborting.
	Please, commit your changes or stash them before you can merge.

Noticed-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_4975.cpp,,,data/crawl/git/old_hunk_4975.cpp,data/crawl/git/new_hunk_4975.cpp,-1,8,,"die(""git %s: failed to read the index"", me);","[""addLog""]","[[], [""die"", ""git"", ""%s"", ""failed"", ""to"", ""read"", ""the"", ""index"", ""me""]]",[-31641561397605786481],6255,688800.0,3
https://github.com/git/git/commit/ac49f5ca84d82e5b10bc1eb022dfdd9b0e8f7749,16 Feb 2011,"rerere ""remaining""

After ""rerere"" resolves conflicts by reusing old resolution, there would
be three kinds of paths with conflict in the index:

 * paths that have been resolved in the working tree by rerere;
 * paths that need further work whose resolution could be recorded;
 * paths that need resolving that rerere won't help.

When the user wants a list of paths that need hand-resolving, output from
""rerere status"" does not help, as it shows only the second category, but
the paths in the third category still needs work (rerere only makes sense
for regular files that have both our side and their side, and does not
help other kinds of conflicts, e.g. ""we modified, they deleted"").

The new subcommand ""rerere remaining"" can be used to show both. As
opposed to ""rerere status"", this subcommand also skips printing paths
that have been added to the index, since these paths are already
resolved and are no longer ""remaining"".

Initial patch provided by Junio. Refactored and modified to skip
resolved paths by Martin. Commit message mostly by Junio.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Martin von Zweigbergk <martin.von.zweigbergk@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",100,data/crawl/git/hunk_4856.cpp,,,data/crawl/git/old_hunk_4856.cpp,data/crawl/git/new_hunk_4856.cpp,-1,56,,"error(""Could not read index"");","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""read"", ""index""]]",[7355526128184762786],6254,693600.0,3
https://github.com/git/git/commit/ebeb60900fbab569ed14f710a0a1abb1637ec792,26 Feb 2011,"strbuf: add strbuf_vaddf

In a variable-args function, the code for writing into a strbuf is
non-trivial. We ended up cutting and pasting it in several places
because there was no vprintf-style function for strbufs (which in turn
was held up by a lack of va_copy).

Now that we have a fallback va_copy, we can add strbuf_vaddf, the
strbuf equivalent of vsprintf. And we can clean up the cut and paste
mess.

Signed-off-by: Jeff King <peff@peff.net>
Improved-by: Christian Couder <christian.couder@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_4822.cpp,,,data/crawl/git/old_hunk_4822.cpp,data/crawl/git/new_hunk_4822.cpp,20,-1,"die(""this should not happen, your snprintf is broken"");",,"[""removeLog""]","[[""die"", ""this"", ""should"", ""not"", ""happen"", ""your"", ""snprintf"", ""is"", ""broken""], []]",[-3989400890770091760],6253,872640.0,3
https://github.com/git/git/commit/8dc6a373d201839859fe7924b63e57526ee2fc22,26 Feb 2011,"fast-import: add 'ls' command

Lazy fast-import frontend authors that want to rely on the backend to
keep track of the content of the imported trees _almost_ have what
they need in the 'cat-blob' command (v1.7.4-rc0~30^2~3, 2010-11-28).
But it is not quite enough, since

 (1) cat-blob can be used to retrieve the content of files, but
     not their mode, and

 (2) using cat-blob requires the frontend to keep track of a name
     (mark number or object id) for each blob to be retrieved

Introduce an 'ls' command to complement cat-blob and take care of the
remaining needs.  The 'ls' command finds what is at a given path
within a given tree-ish (tag, commit, or tree):

	'ls' SP <dataref> SP <path> LF

or in fast-import's active commit:

	'ls' SP <path> LF

The response is a single line sent through the cat-blob channel,
imitating ls-tree output.  So for example:

	FE> ls :1 Documentation
	gfi> 040000 tree 9e6c2b599341d28a2a375f8207507e0a2a627fe9	Documentation
	FE> ls 9e6c2b599341d28a2a375f8207507e0a2a627fe9 git-fast-import.txt
	gfi> 100644 blob 4f92954396e3f0f97e75b6838a5635b583708870	git-fast-import.txt
	FE> ls :1 RelNotes
	gfi> 120000 blob b942e499449d97aeb50c73ca2bdc1c6e6d528743	RelNotes
	FE> cat-blob b942e499449d97aeb50c73ca2bdc1c6e6d528743
	gfi> b942e499449d97aeb50c73ca2bdc1c6e6d528743 blob 32
	gfi> Documentation/RelNotes/1.7.4.txt

The most interesting parts of the reply are the first word, which is
a 6-digit octal mode (regular file, executable, symlink, directory,
or submodule), and the part from the second space to the tab, which is
a <dataref> that can be used in later cat-blob, ls, and filemodify (M)
commands to refer to the content (blob, tree, or commit) at that path.

If there is nothing there, the response is ""missing some/path"".

The intent is for this command to be used to read files from the
active commit, so a frontend can apply patches to them, and to copy
files and directories from previous revisions.

For example, proposed updates to svn-fe use this command in place of
its internal representation of the repository directory structure.
This simplifies the frontend a great deal and means support for
resuming an import in a separate fast-import run (i.e., incremental
import) is basically free.

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Improved-by: Junio C Hamano <gitster@pobox.com>
Improved-by: Sverre Rabbelier <srabbelier@gmail.com>",317,data/crawl/git/hunk_4821.cpp,,,data/crawl/git/old_hunk_4821.cpp,data/crawl/git/new_hunk_4821.cpp,-1,70,,"die(""Invalid SHA1: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Invalid"", ""SHA1"", ""%s"", ""command_buf"", ""buf""]]",[-7969690232472827722],6252,432480.0,3
https://github.com/git/git/commit/becbdae82bb8bb193c2f1e9d8b32a60bdef8b0e4,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4783.cpp,,,data/crawl/git/old_hunk_4783.cpp,data/crawl/git/new_hunk_4783.cpp,-1,36,,"fprintf(s->fp, ""\n"");","[""addLog""]","[[], [""fprintf"", ""s"", ""fp"", ""\\n""]]",[-5179306310403602754],6251,350400.0,3
https://github.com/git/git/commit/8ec9bc0dd5852e5468db576b0cba39f9179d4610,10 Mar 2011,"i18n: git-status ""nothing to commit"" messages

Gettextize the ""nothing to commit"" messages. Many tests explicitly
checked for this message. Change them to skip under
GETTEXT_POISON=YesPlease.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4460.cpp,,,data/crawl/git/old_hunk_4460.cpp,data/crawl/git/new_hunk_4460.cpp,3,3,"printf(""nothing to commit%s\n"", advice_status_hints
				? "" (create/copy files and use \""git add\"" to track)"" : """");","printf(_(""nothing to commit%s\n""), advice_status_hints
				? _("" (create/copy files and use \""git add\"" to track)"") : """");","[""moveContent"", ""addVariable""]","[[], [""_"", ""_""]]",[24320073148],6250,0.0,3
https://github.com/git/git/commit/b0626608ea80e636faaa030a35200d8e47be5564,12 Dec 2011,"Pass a (ref_cache *) to the resolve_gitlink_*() helper functions

And remove some redundant arguments from resolve_gitlink_packed_ref().

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_4261.cpp,,,data/crawl/git/old_hunk_4261.cpp,data/crawl/git/new_hunk_4261.cpp,15,-1,"die(""Oops"");",,"[""removeLog""]","[[""die"", ""Oops""], []]",[1936985164076898722],6249,474720.0,3
https://github.com/git/git/commit/a0be62c100897573ef1575ec0d5e8b215e9dcafe,15 Mar 2012,"notes-merge: use opendir/readdir instead of using read_directory()

notes_merge_commit() only needs to list all entries (non-recursively)
under a directory, which can be easily accomplished with
opendir/readdir and would be more lightweight than read_directory().

read_directory() is designed to list paths inside a working
directory. Using it outside of its scope may lead to undesired effects.

Apparently, one of the undesired effects of read_directory() is that it
doesn't deal with being given absolute paths. This creates problems for
notes_merge_commit() when git_path() returns an absolute path, which
happens when the current working directory is in a subdirectory of the
.git directory.

Originally-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Updated-by:  Johan Herland <johan@herland.net>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_4171.cpp,,,data/crawl/git/old_hunk_4171.cpp,data/crawl/git/new_hunk_4171.cpp,39,47,"die_errno(""Failed to stat '%s'"", ent->name);","die_errno(""Failed to stat '%s'"", path.buf);","[""updateVariable""]","[[""ent"", ""name""], [""path"", ""buf""]]",[11687294798661121052],6248,0.0,3
https://github.com/git/git/commit/1c88a6d17492b197b9b3298cbc34efa804928302,11 Sep 2012,"Sync with 1.7.11.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",961,data/crawl/git/hunk_4106.cpp,,,data/crawl/git/old_hunk_4106.cpp,data/crawl/git/new_hunk_4106.cpp,4,-1,"die(_(""diff_setup_done failed""));",,"[""removeLog""]","[[""die"", ""_"", ""diff_setup_done"", ""failed""], []]",[9741318216065282011],6247,0.0,3
https://github.com/git/git/commit/1c88a6d17492b197b9b3298cbc34efa804928302,11 Sep 2012,"Sync with 1.7.11.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",961,data/crawl/git/hunk_4103.cpp,,,data/crawl/git/old_hunk_4103.cpp,data/crawl/git/new_hunk_4103.cpp,4,-1,"die(""diff-setup"");",,"[""removeLog""]","[[""die"", ""diff"", ""setup""], []]",[11856510276232376596],6246,0.0,3
https://github.com/git/git/commit/bee118ec048911cfacdd65ad1ea2bdd6e25a6254,28 Nov 2012,"Add new remote-bzr transport helper

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",352,data/crawl/git/hunk_4008.cpp,,,data/crawl/git/old_hunk_4008.cpp,data/crawl/git/new_hunk_4008.cpp,-1,32,,"die(msg, *args);","[""addLog""]","[[], [""die"", ""msg"", ""*args""]]",[2346119658525871849],6245,11520.0,3
https://github.com/git/git/commit/f538a91e3c58bb0882be895eec099e51a74dfac4,14 Jan 2013,"git-clean: Display more accurate delete messages

(1) Only print out the names of the files and directories that got
    actually deleted. Also do not mention that we are not removing
    directories when the user did not ask us to do so with '-d'.
(2) Show ignore message for skipped untracked git repositories.

Consider the following repo layout:

  test.git/
    |-- tracked_dir/
    |     |-- some_tracked_file
    |     |-- some_untracked_file
    |-- tracked_file
    |-- untracked_file
    |-- untracked_foo/
    |     |-- bar/
    |     |     |-- bar.txt
    |     |-- emptydir/
    |     |-- frotz.git/
    |           |-- frotz.tx
    |-- untracked_some.git/
          |-- some.txt

Suppose the user issues 'git clean -fd' from the test.git directory.

When -d option is used and untracked directory 'foo' contains a
subdirectory 'frotz.git' that is managed by a different git repository
therefore it will not be removed.

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Removing untracked_foo/
  Removing untracked_some.git/

The message displayed to the user is slightly misleading. The foo/
directory has not been removed because of foo/frotz.git still exists.
On the other hand the subdirectories 'bar' and 'emptydir' have been
deleted but they're not mentioned anywhere. Also, untracked_some.git
has not been removed either.

This behaviour is the result of the way the deletion of untracked
directories are reported. In the current implementation they are
deleted recursively but only the name of the top most directory is
printed out. The calling function does not know about any
subdirectories that could not be removed during the recursion.

Improve the way the deleted directories are reported back to
the user:
  (1) Create a recursive delete function 'remove_dirs' in builtin/clean.c
      to run in both dry_run and delete modes with the delete logic as
      follows:
        (a) Check if the current directory to be deleted is an untracked
            git repository. If it is and --force --force option is not set
            do not touch this directory, print ignore message, set dir_gone
            flag to false for the caller and return.
        (b) Otherwise for each item in current directory:
              (i)   If current directory cannot be accessed, print warning,
                    set dir_gone flag to false and return.
              (ii)  If the item is a subdirectory recurse into it,
                    check for the returned value of the dir_gone flag.
                    If the subdirectory is gone, add the name of the deleted
                    directory to a list of successfully removed items 'dels'.
                    Else set the dir_gone flag as the current directory
                    cannot be removed because we have at least one subdirectory
                    hanging around.
              (iii) If it is a file try to remove it. If success add the
                    file name to the 'dels' list, else print error and set
                    dir_gone flag to false.
        (c) After we finished deleting all items in the current directory and
            the dir_gone flag is still true, remove the directory itself.
            If failed set the dir_gone flag to false.

        (d) If the current directory cannot be deleted because the dir_gone flag
            has been set to false, print out all the successfully deleted items
            for this directory from the 'dels' list.
        (e) We're done with the current directory, return.

  (2) Modify the cmd_clean() function to:
        (a) call the recursive delete function 'remove_dirs()' for each
            topmost directory it wants to remove
        (b) check for the returned value of dir_gone flag. If it's true
            print the name of the directory as being removed.

Consider the output of the improved version:

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Skipping repository untracked_foo/frotz.git
  Removing untracked_foo/bar
  Removing untracked_foo/emptydir
  Skipping repository untracked_some.git/

Now it displays only the file and directory names that got actually
deleted and shows the name of the untracked git repositories it ignored.

Reported-by: Soren Brinkmann <soren.brinkmann@xilinx.com>

Signed-off-by: Zoltan Klinger <zoltan.klinger@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/hunk_3956.cpp,,,data/crawl/git/old_hunk_3956.cpp,data/crawl/git/new_hunk_3956.cpp,-1,33,,"warning(_(msg_warn_remove_failed), quoted.buf);","[""addLog""]","[[], [""warning"", ""_"", ""msg_warn_remove_failed"", ""quoted"", ""buf""]]",[-9651235084034928584],6244,0.0,3
https://github.com/git/git/commit/8efb8899cfe866dddb3659b9e0a94232161db65e,23 Feb 2013,"branch: segfault fixes and validation

branch_get() can return NULL (so far on detached HEAD only) but some
code paths in builtin/branch.c cannot deal with that and cause
segfaults.

While at there, make sure to bail out when the user gives 2 or more
branches with --set-upstream-to or --unset-upstream, where only the
first branch is processed and the rest silently dropped.

Reported-by: Per Cederqvist <cederp@opera.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_3851.cpp,,,data/crawl/git/old_hunk_3851.cpp,data/crawl/git/new_hunk_3851.cpp,-1,11,,"die(_(""no such branch '%s'""), argv[0]);","[""addLog""]","[[], [""die"", ""_"", ""no"", ""such"", ""branch"", ""%s"", ""argv[0]""]]",[-9065361529187312190],6243,0.0,3
https://github.com/git/git/commit/1a15d00bb910de0a86981f0d75836feac71d1fe0,02 Apr 2013,"branch: mention start_name in set-upstream error messages

If we refuse a branch operation because the tracking
start_name the user gave us is bogus, we just print
something like:

 fatal: Cannot setup tracking information; start point is not a branch

If we mention the actual name we tried to use, that may help
the user figure out why it didn't work (e.g., if they gave
us the arguments in the wrong order).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_3773.cpp,,,data/crawl/git/old_hunk_3773.cpp,data/crawl/git/new_hunk_3773.cpp,3,3,die(_(upstream_missing));,"die(_(upstream_missing), start_name);","[""addVariable""]","[[], [""start_name""]]",[5413323660893179868],6242,0.0,3
https://github.com/git/git/commit/9d3f002f21f78576f3c31ae94ce78de54e305c95,18 Apr 2013,"pretty: share code between format_decoration and show_decorations

This also adds color support to format_decorations()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_3691.cpp,,,data/crawl/git/old_hunk_3691.cpp,data/crawl/git/new_hunk_3691.cpp,25,27,"fputs(""tag: "", stdout);","strbuf_addstr(sb, ""tag: "");","[""updateVariable"", ""updateLog""]","[[""fputs"", ""stdout""], [""strbuf_addstr"", ""sb""]]",[10537750153466557781],6241,0.0,3
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3674.cpp,,,data/crawl/git/old_hunk_3674.cpp,data/crawl/git/new_hunk_3674.cpp,-1,132,,"die(""failed to write ref-pack file"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file""]]",[2465556903396734540],6240,1196640.0,3
https://github.com/git/git/commit/0f29920f1e0ce00aaf867fdd9ad2174011179f47,01 May 2013,"pack_one_ref(): use write_packed_entry() to do the writing

Change pack_refs() to work with a file descriptor instead of a FILE*
(making the file-locking code less awkward) and use
write_packed_entry() to do the writing.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_3668.cpp,,,data/crawl/git/old_hunk_3668.cpp,data/crawl/git/new_hunk_3668.cpp,20,-1,"die(""failed to write ref-pack file"");",,"[""removeLog""]","[[""die"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file""], []]",[-2465556903396734540],6239,1705920.0,3
https://github.com/git/git/commit/6a316beeeecc76d19ff60fda62e00a7e2e041137,14 Jun 2013,"git-remote-mediawiki: put long code into a subroutine

Signed-off-by: Célestin Matte <celestin.matte@ensimag.fr>
Signed-off-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_3602.cpp,,,data/crawl/git/old_hunk_3602.cpp,data/crawl/git/new_hunk_3602.cpp,-1,14,,(defined($cmd[2]);,"[""addLog""]","[[], [""defined"", ""cmd[2]""]]",[-9231112729123354990],6238,0.0,3
https://github.com/git/git/commit/9f69d297703bff37c5506276c2565c721347e03f,20 Jun 2013,"refs: implement simple transactions for the packed-refs file

Handle simple transactions for the packed-refs file at the
packed_ref_cache level via new functions lock_packed_refs(),
commit_packed_refs(), and rollback_packed_refs().

Only allow the packed ref cache to be modified (via add_packed_ref())
while the packed refs file is locked.

Change clone to add the new references within a transaction.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_3586.cpp,,,data/crawl/git/old_hunk_3586.cpp,data/crawl/git/new_hunk_3586.cpp,-1,7,,"die(""internal error: packed refs not locked"");","[""addLog""]","[[], [""die"", ""internal"", ""error"", ""packed"", ""refs"", ""not"", ""locked""]]",[-7395412776274315401],6237,0.0,3
https://github.com/git/git/commit/84b4202d804c7faec76f3eab22744b6288c63481,24 Jun 2013,"status/commit: make sure --porcelain is not affected by user-facing config

The recent addition of status.branch started affecting what is shown
when ""git status --porcelain"" is run by mistake.  Identify the
configuration items that should be ignored under ""--porcelain""
option, introduce a ""deferred config"" mechanism to keep the values
read from the configuration, and decide what value to use only after
we read both from configuration and command line.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_3560.cpp,,,data/crawl/git/old_hunk_3560.cpp,data/crawl/git/new_hunk_3560.cpp,-1,25,,"die(_(""--long and -z are incompatible""));","[""addLog""]","[[], [""die"", ""_"", ""long"", ""and"", ""z"", ""are"", ""incompatible""]]",[788434968233387692],6236,119520.0,3
https://github.com/git/git/commit/42063f95a0f285382458f357bd256df252000ef1,18 Jul 2013,"apply, entry: speak of submodules instead of subprojects

There are only four (with some generous rounding) instances in the
current source code where we speak of ""subproject"" instead of
""submodule"".  They are as follows:

* one error message in git-apply and two in entry.c

* the patch format for submodule changes

The latter was introduced in 0478675 (Expose subprojects as special
files to ""git diff"" machinery, 2007-04-15), apparently before the
terminology was settled.  We can of course not change the patch
format.

Let's at least change the error messages to consistently call them
""submodule"".

Signed-off-by: Thomas Rast <trast@inf.ethz.ch>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_3511.cpp,,,data/crawl/git/old_hunk_3511.cpp,data/crawl/git/new_hunk_3511.cpp,3,3,"die(_(""corrupt patch for subproject %s""), path);","die(_(""corrupt patch for submodule %s""), path);","[""updateContent""]","[[""subproject""], [""submodule""]]",[-1295014317215517592],6235,0.0,3
https://github.com/git/git/commit/eab3296c7e5c99f559818357e70eeae09c24ac99,11 Dec 2013,"prune: clean .git/shallow after pruning objects

This patch teaches ""prune"" to remove shallow roots that are no longer
reachable from any refs (e.g. when the relevant refs are removed).

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/hunk_3436.cpp,,,data/crawl/git/old_hunk_3436.cpp,data/crawl/git/new_hunk_3436.cpp,-1,23,,"die_errno(""failed to write to %s"",
				  shallow_lock.filename);","[""addLog""]","[[], [""die_errno"", ""failed"", ""to"", ""write"", ""to"", ""%s"", ""shallow_lock"", ""filename""]]",[-19593625764134513660],6234,133920.0,3
https://github.com/git/git/commit/4346663a14fe2af5e5cec94213203e199b7dfc3f,09 Jan 2014,"gen_scanf_fmt(): delete function and use snprintf() instead

To replace ""%.*s"" with ""%s"", all we have to do is use snprintf()
to interpolate ""%s"" into the pattern.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_3395.cpp,,,data/crawl/git/old_hunk_3395.cpp,data/crawl/git/new_hunk_3395.cpp,13,-1,"die(""invalid rule in ref_rev_parse_rules: %s"", rule);",,"[""removeLog""]","[[""die"", ""invalid"", ""rule"", ""in"", ""ref_rev_parse_rules"", ""%s"", ""rule""], []]",[20849995018331249634],6233,836160.0,3
https://github.com/git/git/commit/c99ba492f1cc3e632ed12d46d7358effb6fa7f03,22 Jun 2015,"fsck: introduce identifiers for fsck messages

Instead of specifying whether a message by the fsck machinery constitutes
an error or a warning, let's specify an identifier relating to the
concrete problem that was encountered. This is necessary for upcoming
support to be able to demote certain errors to warnings.

In the process, simplify the requirements on the calling code: instead of
having to handle full-blown varargs in every callback, we now send a
string buffer ready to be used by the callback.

We could use a simple enum for the message IDs here, but we want to
guarantee that the enum values are associated with the appropriate
message types (i.e. error or warning?). Besides, we want to introduce a
parser in the next commit that maps the string representation to the
enum value, hence we use the slightly ugly preprocessor construct that
is extensible for use with said parser.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",232,data/crawl/git/hunk_3135.cpp,,,data/crawl/git/old_hunk_3135.cpp,data/crawl/git/new_hunk_3135.cpp,9,-1,"fputs(""\n"", stderr);",,"[""removeLog""]","[[""fputs"", ""\\n"", ""stderr""], []]",[12210362594644536545],6232,2223360.0,3
https://github.com/git/git/commit/44b877e9bc944258db096a0ec57151be7c8cbf66,22 Jun 2015,"cat-file: split batch_one_object into two stages

There are really two things going on in this function:

  1. We convert the name we got on stdin to a sha1.

  2. We look up and print information on the sha1.

Let's split out the second half so that we can call it
separately.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3113.cpp,,,data/crawl/git/old_hunk_3113.cpp,data/crawl/git/new_hunk_3113.cpp,-1,9,,"printf(""%s missing\n"", obj_name);","[""addLog""]","[[], [""printf"", ""%s"", ""missing\\n"", ""obj_name""]]",[641205645218682399],6231,1265760.0,3
https://github.com/git/git/commit/a5481a6c9438cbd9c246cfa59ff49c31a0926fb6,29 Jun 2015,"convert ""enum date_mode"" into a struct

In preparation for adding date modes that may carry extra
information beyond the mode itself, this patch converts the
date_mode enum into a struct.

Most of the conversion is fairly straightforward; we pass
the struct as a pointer and dereference the type field where
necessary. Locations that declare a date_mode can use a ""{}""
constructor.  However, the tricky case is where we use the
enum labels as constants, like:

  show_date(t, tz, DATE_NORMAL);

Ideally we could say:

  show_date(t, tz, &{ DATE_NORMAL });

but of course C does not allow that. Likewise, we cannot
cast the constant to a struct, because we need to pass an
actual address. Our options are basically:

  1. Manually add a ""struct date_mode d = { DATE_NORMAL }""
     definition to each caller, and pass ""&d"". This makes
     the callers uglier, because they sometimes do not even
     have their own scope (e.g., they are inside a switch
     statement).

  2. Provide a pre-made global ""date_normal"" struct that can
     be passed by address. We'd also need ""date_rfc2822"",
     ""date_iso8601"", and so forth. But at least the ugliness
     is defined in one place.

  3. Provide a wrapper that generates the correct struct on
     the fly. The big downside is that we end up pointing to
     a single global, which makes our wrapper non-reentrant.
     But show_date is already not reentrant, so it does not
     matter.

This patch implements 3, along with a minor macro to keep
the size of the callers sane.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_3086.cpp,,,data/crawl/git/old_hunk_3086.cpp,data/crawl/git/new_hunk_3086.cpp,2,2,"warning(""Log for ref %s has gap after %s."",
					cb->refname, show_date(cb->date, cb->tz, DATE_RFC2822));","warning(""Log for ref %s has gap after %s."",
					cb->refname, show_date(cb->date, cb->tz, DATE_MODE(RFC2822)));","[""updateVariable"", ""addVariable""]","[[""DATE_RFC2822""], [""DATE_MODE"", ""RFC2822""]]",[-9205868866225676263],6230,0.0,3
https://github.com/git/git/commit/28c7b1f7b7b70013c2f380c2d720d0c918d3d83a,01 Jul 2015,"fast-import: add a get-mark command

It is sometimes useful for importers to be able to read the SHA-1
corresponding to a mark that they have created via fast-import. For
example, they might want to embed the SHA-1 into the commit message of
a later commit. Or it might be useful for internal bookkeeping uses,
or for logging.

Add a ""get-mark"" command to ""git fast-import"" that allows the importer
to ask for the value of a mark that has been created earlier.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/hunk_3070.cpp,,,data/crawl/git/old_hunk_3070.cpp,data/crawl/git/new_hunk_3070.cpp,-1,14,,"die(""Unknown mark: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Unknown"", ""mark"", ""%s"", ""command_buf"", ""buf""]]",[-10901404190645779587],6229,844800.0,3
https://github.com/git/git/commit/f5800f6ad8b8cbf41a252f7ca0ae465217174c60,24 Jul 2015,"rerere: lift PATH_MAX limitation

The MERGE_RR file records a collection of NUL-terminated entries,
each of which consists of

 - a hash that identifies the conflict
 - a HT
 - the pathname

We used to read this piece-by-piece, and worse yet, read the
pathname part a byte at a time into a fixed buffer of size PATH_MAX.

Instead, read a whole entry using strbuf_getwholeline() and parse
out the fields.  This way, we issue fewer read(2) calls and more
importantly we do not have to limit the pathname to PATH_MAX.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_3035.cpp,,,data/crawl/git/old_hunk_3035.cpp,data/crawl/git/new_hunk_3035.cpp,20,-1,"die(""corrupt MERGE_RR"");",,"[""removeLog""]","[[""die"", ""corrupt"", ""MERGE_RR""], []]",[3834673031445325428],6228,1233600.0,3
https://github.com/git/git/commit/8e7768b2de8bfdf82cde565d2f42e8d7f91e74e0,24 Jul 2015,"rerere: refactor ""replay"" part of do_plain_rerere()

Extract the body of a loop that attempts to replay recorded
resolution for each conflicted path into a helper function, not
because I want to call it from multiple places later, but because
the logic has become too deeply nested and hard to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_3027.cpp,,,data/crawl/git/old_hunk_3027.cpp,data/crawl/git/new_hunk_3027.cpp,-1,24,,"fprintf(stderr,
				""Resolved '%s' using previous resolution.\n"",
				path);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Resolved"", ""%s"", ""using"", ""previous"", ""resolution"", ""\\n"", ""path""]]",[-12015661553728219539],6227,2467200.0,3
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3010.cpp,,,data/crawl/git/old_hunk_3010.cpp,data/crawl/git/new_hunk_3010.cpp,-1,973,,"fputs(sb.buf, stdout);","[""addLog""]","[[], [""fputs"", ""sb"", ""buf"", ""stdout""]]",[-11880400360132269299],6226,2137440.0,3
https://github.com/git/git/commit/3e20dcf367f551e5a0efab74e7bc2c07f0549a3d,05 Aug 2015,"builtin-am: extract patch and commit info with git-mailinfo

For the purpose of applying the patch and committing the results,
implement extracting the patch data, commit message and authorship from
an e-mail message using git-mailinfo.

git-mailinfo is run as a separate process, but ideally in the future,
we should be be able to access its functionality directly without
spawning a new process.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",317,data/crawl/git/hunk_2985.cpp,,,data/crawl/git/old_hunk_2985.cpp,data/crawl/git/new_hunk_2985.cpp,-1,67,,"die_errno(_(""could not open '%s' for reading""), filename);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""filename""]]",[-8010569130806384168],6225,71040.0,3
https://github.com/git/git/commit/c9e8d960b612d5962cd1e952916c2ab6f483e620,05 Aug 2015,"builtin-am: implement committing applied patch

Implement do_commit(), which commits the index which contains the
results of applying the patch, along with the extracted commit message
and authorship information.

Since 29b6754 (am: remove rebase-apply directory before gc, 2010-02-22),
git gc --auto is also invoked to pack the loose objects that are created
from making the commits.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/hunk_2980.cpp,,,data/crawl/git/old_hunk_2980.cpp,data/crawl/git/new_hunk_2980.cpp,-1,33,,"die(_(""failed to write commit object""));","[""addLog""]","[[], [""die"", ""_"", ""failed"", ""to"", ""write"", ""commit"", ""object""]]",[-2679410035935555555],6224,637920.0,3
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2887.cpp,,,data/crawl/git/old_hunk_2887.cpp,data/crawl/git/new_hunk_2887.cpp,3,3,"error(_(""cannot open %s: %s""), filename,
						strerror(errno));","error(_(""cannot open %s: %s""), git_path_head_file(),
						strerror(errno));","[""removeVariable"", ""addVariable""]","[[""filename""], [""git_path_head_file""]]",[11725196564012454239],6223,0.0,3
https://github.com/git/git/commit/959b5455d07c7724eea9d323ca8ce6bb6ddde40e,19 Aug 2015,"submodule: implement a config API for lookup of .gitmodules values

In a superproject some commands need to interact with submodules. They
need to query values from the .gitmodules file either from the worktree
of from certain revisions. At the moment this is quite hard since a
caller would need to read the .gitmodules file from the history and then
parse the values. We want to provide an API for this so we have one
place to get values from .gitmodules from any revision (including the
worktree).

The API is realized as a cache which allows us to lazily read
.gitmodules configurations by commit into a runtime cache which can then
be used to easily lookup values from it. Currently only the values for
path or name are stored but it can be extended for any value needed.

It is expected that .gitmodules files do not change often between
commits. Thats why we lookup the .gitmodules sha1 from a commit and then
either lookup an already parsed configuration or parse and cache an
unknown one for each sha1. The cache is lazily build on demand for each
requested commit.

This cache can be used for all purposes which need knowledge about
submodule configurations. Example use cases are:

 * Recursive submodule checkout needs to lookup a submodule name from
   its path when a submodule first appears. This needs be done before
   this configuration exists in the worktree.

 * The implementation of submodule support for 'git archive' needs to
   lookup the submodule name to generate the archive when given a
   revision that is not checked out.

 * 'git fetch' when given the --recurse-submodules=on-demand option (or
   configuration) needs to lookup submodule names by path from the
   database rather than reading from the worktree. For new submodule it
   needs to lookup the name from its path to allow cloning new
   submodules into the .git folder so they can be checked out without
   any network interaction when the user does a checkout of that
   revision.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",671,data/crawl/git/hunk_2851.cpp,,,data/crawl/git/old_hunk_2851.cpp,data/crawl/git/new_hunk_2851.cpp,-1,5,,"fprintf(stderr, ""%s\n"", msg);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""msg""]]",[-1393532391984386060],6222,1110240.0,3
https://github.com/git/git/commit/74703a1e4dfc5affcb8944e78b53f0817b492246,03 Sep 2015,"submodule: rewrite `module_list` shell function in C

Most of the submodule operations work on a set of submodules.
Calculating and using this set is usually done via:

       module_list ""$@"" | {
           while read mode sha1 stage sm_path
           do
                # the actual operation
           done
       }

Currently the function `module_list` is implemented in the
git-submodule.sh as a shell script wrapping a perl script.
The rewrite is in C, such that it is faster and can later be
easily adapted when other functions are rewritten in C.

git-submodule.sh, similar to the builtin commands, will navigate
to the top-most directory of the repository and keep the
subdirectory as a variable. As the helper is called from
within the git-submodule.sh script, we are already navigated
to the root level, but the path arguments are still relative
to the subdirectory we were in when calling git-submodule.sh.
That's why there is a `--prefix` option pointing to an alternative
path which to anchor relative path arguments.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",186,data/crawl/git/hunk_2826.cpp,,,data/crawl/git/old_hunk_2826.cpp,data/crawl/git/new_hunk_2826.cpp,-1,35,,"die(_(""index file corrupt""));","[""addLog""]","[[], [""die"", ""_"", ""index"", ""file"", ""corrupt""]]",[-18800083450529938410],6221,511200.0,3
https://github.com/git/git/commit/590f6e4235a7d44ad39511186ca8bbac02ae8c2e,05 Oct 2015,Sync with 2.6.1,540,data/crawl/git/hunk_2662.cpp,,,data/crawl/git/old_hunk_2662.cpp,data/crawl/git/new_hunk_2662.cpp,-1,5,,"die(""unable to generate combined diff for %s"",
		    oid_to_hex(parent));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""combined"", ""diff"", ""for"", ""%s"", ""oid_to_hex"", ""parent""]]",[-21971983877063028230],6220,3840.0,3
https://github.com/git/git/commit/173aef7c2ee9aa0021dad7c70d30f9099be4a134,21 Oct 2015,"mailinfo: move global ""FILE *fin, *fout"" to struct mailinfo

This requires us to pass ""struct mailinfo"" to more functions
throughout the codepath that read input lines.  Incidentally,
later steps are helped by this patch passing the struct to
more callchains.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_2645.cpp,,,data/crawl/git/old_hunk_2645.cpp,data/crawl/git/new_hunk_2645.cpp,7,7,"fprintf(fout, ""Author: %s\n"", mi->name.buf);","fprintf(mi->output, ""Author: %s\n"", mi->name.buf);","[""removeVariable"", ""addVariable""]","[[""fout""], [""output"", ""mi""]]",[-7634381561822703665],6219,0.0,3
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2474.cpp,,,data/crawl/git/old_hunk_2474.cpp,data/crawl/git/new_hunk_2474.cpp,3,3,"printf(""%s\n"", sha1_to_hex(result->item->object.sha1));","printf(""%s\n"", oid_to_hex(&result->item->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""result"", ""sha1""], [""oid_to_hex"", ""&result"", ""oid""]]",[15777640492074807929],6218,0.0,3
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2449.cpp,,,data/crawl/git/old_hunk_2449.cpp,data/crawl/git/new_hunk_2449.cpp,2,2,"fprintf(stderr, _(""finished search at %s\n""),
					sha1_to_hex(c->object.sha1));","fprintf(stderr, _(""finished search at %s\n""),
					oid_to_hex(&c->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""c"", ""sha1""], [""oid_to_hex"", ""&c"", ""oid""]]",[11703065648053253089],6217,0.0,3
https://github.com/git/git/commit/08a3651fe7f3163acbac461e0daf370329a1d332,01 Dec 2015,"Make error message after failing commit_lock_file() less confusing

The error message after a failing commit_lock_file() call sometimes
looks like this, causing confusion:

  $ git remote add remote git@server.com/repo.git
  error: could not commit config file .git/config
  # Huh?!
  # I didn't want to commit anything, especially not my config file!

While in the narrow context of the lockfile module using the verb
'commit' in the error message makes perfect sense, in the broader
context of git the word 'commit' already has a very specific meaning,
hence the confusion.

Reword these error messages to say ""could not write"" instead of ""could
not commit"".

While at it, include strerror in the error messages after writing the
config file or the credential store fails to provide some information
about the cause of the failure, and update the style of the error
message after writing the reflog fails to match surrounding error
messages (i.e. no '' around the pathname and no () around the error
description).

Signed-off-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Jeff King <peff@peff.net>",13,data/crawl/git/hunk_2367.cpp,,,data/crawl/git/old_hunk_2367.cpp,data/crawl/git/new_hunk_2367.cpp,3,3,"error(""could not commit config file %s"", config_filename);","error(""could not write config file %s: %s"", config_filename,
		      strerror(errno));","[""updateContent"", ""addVariable""]","[[""commit""], [""write"", ""%s"", ""strerror"", ""errno""]]",[17218746474383709611],6216,0.0,3
https://github.com/git/git/commit/d3c06c196964c02f7343b53301e0e85679fad51f,01 Apr 2016,"ident: give ""please tell me"" message upon useConfigOnly error

The env_hint message applies perfectly to the case when
user.useConfigOnly is set and at least one of the user.name and the
user.email are not provided.

Additionally, use a less descriptive error message to discourage
users from disabling user.useConfigOnly configuration variable to
work around this error condition.  We want to encourage them to set
user.name or user.email instead.

Signed-off-by: Marios Titas <redneb@gmx.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_2173.cpp,,,data/crawl/git/old_hunk_2173.cpp,data/crawl/git/new_hunk_2173.cpp,-1,4,,"fputs(env_hint, stderr);","[""addLog""]","[[], [""fputs"", ""env_hint"", ""stderr""]]",[-4100799420109202734],6215,104640.0,3
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2005.cpp,,,data/crawl/git/old_hunk_2005.cpp,data/crawl/git/new_hunk_2005.cpp,-1,37,,"printf(""%s\n"", buf.buf);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""buf"", ""buf""]]",[14036423227931753601],6214,2454720.0,3
https://github.com/git/git/commit/f30afdabbfb9feeec402d351935879caf8b298ad,11 May 2016,"mingw: introduce the 'core.hideDotFiles' setting

On Unix (and Linux), files and directories whose names start with a dot
are usually not shown by default. This convention is used by Git: the
.git/ directory should be left alone by regular users, and only accessed
through Git itself.

On Windows, no such convention exists. Instead, there is an explicit flag
to mark files or directories as hidden.

In the early days, Git for Windows did not mark the .git/ directory (or
for that matter, any file or directory whose name starts with a dot)
hidden. This lead to quite a bit of confusion, and even loss of data.

Consequently, Git for Windows introduced the core.hideDotFiles setting,
with three possible values: true, false, and dotGitOnly, defaulting to
marking only the .git/ directory as hidden.

The rationale: users do not need to access .git/ directly, and indeed (as
was demonstrated) should not really see that directory, either. However,
not all dot files should be hidden by default, as e.g. Eclipse does not
show them (and the user would therefore be unable to see, say, a
.gitattributes file).

In over five years since the last attempt to bring this patch into core
Git, a slightly buggy version of this patch has served Git for Windows'
users well: no single report indicated problems with the hidden .git/
directory, and the stream of problems caused by the previously non-hidden
.git/ directory simply stopped. The bugs have been fixed during the
process of getting this patch upstream.

Note that there is a funny quirk we have to pay attention to when
creating hidden files: we use Win32's _wopen() function which
transmogrifies its arguments and hands off to Win32's CreateFile()
function. That latter function errors out with ERROR_ACCESS_DENIED (the
equivalent of EACCES) when the equivalent of the O_CREAT flag was passed
and the file attributes (including the hidden flag) do not match an
existing file's. And _wopen() accepts no parameter that would be
transmogrified into said hidden flag. Therefore, we simply try again
without O_CREAT.

A slightly different method is required for our fopen()/freopen()
function as we cannot even *remove* the implicit O_CREAT flag.
Therefore, we briefly mark existing files as unhidden when opening them
via fopen()/freopen().

The ERROR_ACCESS_DENIED error can also be triggered by opening a file
that is marked as a system file (which is unlikely to be tracked in
Git), and by trying to create a file that has *just* been deleted and is
awaiting the last open handles to be released (which would be handled
better by the ""Try again?"" logic, a story for a different patch series,
though). In both cases, it does not matter much if we try again without
the O_CREAT flag, read: it does not hurt, either.

For details how ERROR_ACCESS_DENIED can be triggered, see
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858

Original-patch-by: Erik Faye-Lund <kusmabite@gmail.com>
Initial-Test-By: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_2001.cpp,,,data/crawl/git/old_hunk_2001.cpp,data/crawl/git/new_hunk_2001.cpp,-1,16,,"warning(""could not mark '%s' as hidden."", filename);","[""addLog""]","[[], [""warning"", ""could"", ""not"", ""mark"", ""%s"", ""as"", ""hidden"", ""filename""]]",[-348907046865675555],6213,0.0,3
https://github.com/git/git/commit/d3621de789ab57739f48b065751089d828b50240,31 May 2016,"t4051: rewrite, add more tests

Remove the tests that checked against a fixed result and replace them
with more focused checks of desired properties of the created diffs.
That way we get more detailed and meaningful diagnostics.

Store test file contents in files in a subdirectory in order to avoid
cluttering the test script with them.

Use tagged commits to store the changes to test diff -W against instead
of using changes to the worktree.  Use the worktree instead to try and
apply the generated patch in order to validate it.

Document unwanted features: trailing empty lines, too much context for
appended functions, insufficient context at the end with -U0.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",314,data/crawl/git/hunk_1967.cpp,,,data/crawl/git/old_hunk_1967.cpp,data/crawl/git/new_hunk_1967.cpp,19,-1,"printf(""Hello world.\n"");",,"[""removeLog""]","[[""printf"", ""Hello"", ""world"", ""\\n""], []]",[-3892504892495328741],6212,0.0,3
https://github.com/git/git/commit/9318c5dd140b55c0384843c57b4b24a378cd5068,13 Jun 2016,"transport-helper.c: refactor set_helper_option()

For now we can handle two types, string and boolean, in
set_helper_option(). Later on we'll add string_list support, which does
not fit well. The new function strbuf_set_helper_option() can be reused
for a separate function that handles string-list.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_1928.cpp,,,data/crawl/git/old_hunk_1928.cpp,data/crawl/git/new_hunk_1928.cpp,-1,19,,"warning(""%s unexpectedly said: '%s'"", data->name, buf->buf);","[""addLog""]","[[], [""warning"", ""%s"", ""unexpectedly"", ""said"", ""%s"", ""data"", ""name"", ""buf"", ""buf""]]",[-22419270005600688005],6211,1160160.0,3
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_1915.cpp,,,data/crawl/git/old_hunk_1915.cpp,data/crawl/git/new_hunk_1915.cpp,4,3,"fprintf(stderr, ""have %s\n"", sha1_to_hex(sha1));","print_verbose(args, ""have %s"", sha1_to_hex(sha1));","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""fprintf"", ""stderr"", ""%s\\n""], [""print_verbose"", ""args"", ""%s""]]",[1778747922789140436],6210,0.0,3
https://github.com/git/git/commit/b4da9d62f91d66ab97815007105b42a2aa5846b5,28 Jun 2016,"merge-recursive: convert leaf functions to use struct object_id

Convert all but two of the static functions in this file to use struct
object_id.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",236,data/crawl/git/hunk_1737.cpp,,,data/crawl/git/old_hunk_1737.cpp,data/crawl/git/new_hunk_1737.cpp,5,5,"die(_(""cannot read object %s '%s'""), sha1_to_hex(sha), path);","die(_(""cannot read object %s '%s'""), oid_to_hex(oid), path);","[""updateVariable""]","[[""sha1_to_hex"", ""sha""], [""oid_to_hex"", ""oid""]]",[10226994146018156962],6209,0.0,3
https://github.com/git/git/commit/7e97e1003349107b9fdc388bb4aa006fae9ab560,26 Jul 2016,"die(_(""BUG"")): avoid translating bug messages

While working on the patch series that avoids die()ing in recursive
merges, the issue came up that bug reports (i.e. die(""BUG: ..."")
constructs) should never be translated, as the target audience is the
Git developer community, not necessarily the current user, and hence
a translated message would make it *harder* to address the problem.

So let's stop translating the obvious ones. As it is really, really
outside the purview of this patch series to see whether there are more
die() statements that report bugs and are currently translated, that
task is left for another day and patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_1660.cpp,,,data/crawl/git/old_hunk_1660.cpp,data/crawl/git/new_hunk_1660.cpp,3,3,"die(_(""BUG: unprocessed path??? %s""),
				    entries->items[i].string);","die(""BUG: unprocessed path??? %s"",
				    entries->items[i].string);","[""removeVariable""]","[[""_""], []]",[-12160036574],6208,49920.0,3
https://github.com/git/git/commit/38f460caa26e5dd06c3e874e30ea0ec5beb49b56,05 Aug 2016,"trace: use warning() for printing trace errors

Right now we just fprintf() straight to stderr, which can
make the output hard to distinguish. It would be helpful to
give it one of our usual prefixes like ""error:"", ""warning:"",
etc.

It doesn't make sense to use error() here, as the trace code
is ""optional"" debugging code. If something goes wrong, we
should warn the user, but saying ""error"" implies the actual
git operation had a problem. So warning() is the only sane
choice.

Note that this does end up calling warn_routine() to do the
formatting. This is probably a good thing, since they are
clearly trying to hook messages before they make it to
stderr. However, it also means that in theory somebody who
tries to trace from their warn_routine() could cause a loop.
This seems rather unlikely in practice (we've never even
overridden the default warn_builtin routine before, and
recent discussions to do so would just install a noop
routine).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_1618.cpp,,,data/crawl/git/old_hunk_1618.cpp,data/crawl/git/new_hunk_1618.cpp,3,3,"fprintf(stderr,
				""Could not open '%s' for tracing: %s\n""
				""Defaulting to tracing on stderr...\n"",
				trace, strerror(errno));","warning(""Could not open '%s' for tracing: %s\n""
				""Defaulting to tracing on stderr..."",
				trace, strerror(errno));","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""\\n""], [""warning""]]",[9525901655332364049],6207,0.0,3
https://github.com/git/git/commit/be7e795efe35d3e50199af5452b218e5121b1713,05 Aug 2016,"status: cleanup API to wt_status_print

Refactor the API between builtin/commit.c and wt-status.[ch].

Hide the details of the various wt_*status_print() routines inside
wt-status.c behind a single (new) wt_status_print() routine.
Eliminate the switch statements from builtin/commit.c.
Allow details of new status formats to be isolated within wt-status.c

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/hunk_1598.cpp,,,data/crawl/git/old_hunk_1598.cpp,data/crawl/git/new_hunk_1598.cpp,-1,22,,"die(""BUG: finalize_deferred_config() should have been called"");","[""addLog""]","[[], [""die"", ""BUG"", ""finalize_deferred_config"", ""should"", ""have"", ""been"", ""called""]]",[8020215930678866075],6206,546240.0,3
https://github.com/git/git/commit/90875eca5a0b227e6a1be3ccece0a3da5e72017f,07 Sep 2016,"apply: use error_errno() where possible

To avoid possible mistakes and to uniformly show the errno
related messages, let's use error_errno() where possible.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_1503.cpp,,,data/crawl/git/old_hunk_1503.cpp,data/crawl/git/new_hunk_1503.cpp,3,3,"error(_(""%s: %s""), name, strerror(errno));","error_errno(""%s"", name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""_"", ""%s"", ""strerror"", ""errno""], [""error_errno""]]",[-22273121921184984949],6205,0.0,3
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1413.cpp,,,data/crawl/git/old_hunk_1413.cpp,data/crawl/git/new_hunk_1413.cpp,72,76,"die(_(""unsupported object type in the tree""));","die(""BUG: unsupported object type in the tree"");","[""removeVariable"", ""updateContent""]","[[""_""], [""BUG""]]",[327024204666204287],6204,0.0,3
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1411.cpp,,,data/crawl/git/old_hunk_1411.cpp,data/crawl/git/new_hunk_1411.cpp,5,5,"die(_(""cannot read object %s '%s'""), sha1_to_hex(sha), path);","err(o, _(""cannot read object %s '%s'""), oid_to_hex(oid), path);","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""die"", ""sha1_to_hex"", ""sha""], [""err"", ""o"", ""oid_to_hex"", ""oid""]]",[9100938647614341517],6203,0.0,3
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,-1,37,,"die(_(""Expecting a full ref name, got %s""), refname);","[""addLog""]","[[], [""die"", ""_"", ""Expecting"", ""a"", ""full"", ""ref"", ""name"", ""got"", ""%s"", ""refname""]]",[1341172299883274211],6202,121440.0,3
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,-1,28,,"die(_(""No such ref: %s""), ""HEAD"");","[""addLog""]","[[], [""die"", ""_"", ""No"", ""such"", ""ref"", ""%s"", ""HEAD""]]",[4809814377360680227],6201,121440.0,3
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1262.cpp,,,data/crawl/git/old_hunk_1262.cpp,data/crawl/git/new_hunk_1262.cpp,-1,16,,"fprintf(stderr, "" %s\n"",sb.buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""sb"", ""buf""]]",[-7438945739769368559],6200,2130240.0,3
https://github.com/git/git/commit/93b3df6f147fa2bf10116aaeb3597e0b6becaf35,21 Oct 2016,"sequencer: start error messages consistently with lower case

Quite a few error messages touched by this developer during the work to
speed up rebase -i started with an upper case letter, violating our
current conventions. Instead of sneaking in this fix (and forgetting
quite a few error messages), let's just have one wholesale patch fixing
all of the error messages in the sequencer.

While at it, the funny ""error: Error wrapping up..."" was changed to a
less funny, but more helpful, ""error: failed to finalize..."".

Pointed out by Junio Hamano.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_974.cpp,,,data/crawl/git/old_hunk_974.cpp,data/crawl/git/new_hunk_974.cpp,14,14,"error(_(""Error wrapping up '%s'.""), filename);","error(_(""failed to finalize '%s'.""), filename);","[""updateContent""]","[[""Error"", ""wrapping"", ""up""], [""failed"", ""to"", ""finalize""]]",[-27092735287447155464],6199,0.0,3
https://github.com/git/git/commit/1868331f136cfda63ec3296dad66b48f7e9ffe00,08 Dec 2016,"am: change safe_to_abort()'s not rewinding error into a warning

The error message tells the user that something went terribly wrong
and the --abort could not be performed. But the --abort is performed,
only without rewinding. By simply changing the error into a warning,
we indicate the user that she must not try something like
""git am --abort --force"", instead she just has to check the HEAD.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_929.cpp,,,data/crawl/git/old_hunk_929.cpp,data/crawl/git/new_hunk_929.cpp,3,3,"error(_(""You seem to have moved HEAD since the last 'am' failure.\n""
		""Not rewinding to ORIG_HEAD""));","warning(_(""You seem to have moved HEAD since the last 'am' failure.\n""
		""Not rewinding to ORIG_HEAD""));","[""updateLog""]","[[""error""], [""warning""]]",[-12673116343364361700],6198,1734720.0,3
https://github.com/git/git/commit/b10731f43dc21fa47c275052e7c074c686335cd3,08 Jan 2017,"branch_get_push: do not segfault when HEAD is detached

Move the detached HEAD check from branch_get_push_1() to
branch_get_push() to avoid setting branch->push_tracking_ref when
branch is NULL.

Signed-off-by: Kyle Meyer <kyle@kyleam.com>
Reviewed-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_878.cpp,,,data/crawl/git/old_hunk_878.cpp,data/crawl/git/new_hunk_878.cpp,-1,4,,"error_buf(err, _(""HEAD does not point to a branch""));","[""addLog""]","[[], [""error_buf"", ""err"", ""_"", ""HEAD"", ""does"", ""not"", ""point"", ""to"", ""a"", ""branch""]]",[-20856229981494321644],6197,287520.0,3
https://github.com/git/git/commit/be8a90e59ce4c7603207a8255284fdbbffff1a2e,17 Jan 2017,"difftool: add a skeleton for the upcoming builtin

This adds a builtin difftool that still falls back to the legacy Perl
version, which has been renamed to `legacy-difftool`.

The idea is that the new, experimental, builtin difftool immediately hands
off to the legacy difftool for now, unless the config variable
difftool.useBuiltin is set to true.

This feature flag will be used in the upcoming Git for Windows v2.11.0
release, to allow early testers to opt-in to use the builtin difftool and
flesh out any bugs.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_831.cpp,,,data/crawl/git/old_hunk_831.cpp,data/crawl/git/new_hunk_831.cpp,-1,53,,"die_errno(""could not exec %s"", path);","[""addLog""]","[[], [""die_errno"", ""could"", ""not"", ""exec"", ""%s"", ""path""]]",[6105684898101537902],6196,303840.0,3
https://github.com/git/git/commit/62fdb6529a5b744e544ec3d776ba1adf48dab751,17 Jan 2017,"sequencer (rebase -i): show only failed cherry-picks' output

This is the behavior of the shell script version of the interactive
rebase, by using the `output` function defined in `git-rebase.sh`.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_829.cpp,,,data/crawl/git/old_hunk_829.cpp,data/crawl/git/new_hunk_829.cpp,-1,4,,"fputs(o.obuf.buf, stdout);","[""addLog""]","[[], [""fputs"", ""o"", ""obuf"", ""buf"", ""stdout""]]",[-11907005790095783284],6195,99840.0,3
https://github.com/git/git/commit/019678d6b1f83419cdc35e3d455175adce3a379c,19 Jan 2017,"difftool: retire the scripted version

It served its purpose, but now we have a builtin difftool. Time for the
Perl script to enjoy Florida.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_812.cpp,,,data/crawl/git/old_hunk_812.cpp,data/crawl/git/new_hunk_812.cpp,13,-1,"die_errno(""could not exec %s"", path);",,"[""removeLog""]","[[""die_errno"", ""could"", ""not"", ""exec"", ""%s"", ""path""], []]",[-6105684898101537902],6194,301920.0,3
https://github.com/git/git/commit/c9a98ddc26175b29a4081ff3a55dcf054b76245b,19 Jan 2017,"contrib: remove git-convert-objects

git-convert-objects, originally named git-convert-cache was used in
early 2005 to convert ancient repositories where objects are named
after the hash of their compressed contents to the current object
naming sheme where they are named after the hash of their pre-compression
contents.

By now the need for conversion of the very early repositories is
less relevant, we no longer need to keep it in contrib; remove it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",358,data/crawl/git/hunk_811.cpp,,,data/crawl/git/old_hunk_811.cpp,data/crawl/git/new_hunk_811.cpp,323,-1,"die(""Not a valid object name %s"", argv[1]);",,"[""removeLog""]","[[""die"", ""Not"", ""a"", ""valid"", ""object"", ""name"", ""%s"", ""argv[1]""], []]",[13136887408697166590],6193,1507200.0,3
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_788.cpp,,,data/crawl/git/old_hunk_788.cpp,data/crawl/git/new_hunk_788.cpp,-1,19,,"die(""No path in gitfile: %s"", path);","[""addLog""]","[[], [""die"", ""No"", ""path"", ""in"", ""gitfile"", ""%s"", ""path""]]",[10252895552164965996],6192,2798880.0,3
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_788.cpp,,,data/crawl/git/old_hunk_788.cpp,data/crawl/git/new_hunk_788.cpp,-1,17,,"die(""Invalid gitfile format: %s"", path);","[""addLog""]","[[], [""die"", ""Invalid"", ""gitfile"", ""format"", ""%s"", ""path""]]",[833715539263737418],6191,2798880.0,3
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_788.cpp,,,data/crawl/git/old_hunk_788.cpp,data/crawl/git/new_hunk_788.cpp,-1,15,,"die(""Error reading %s"", path);","[""addLog""]","[[], [""die"", ""Error"", ""reading"", ""%s"", ""path""]]",[6728088579270477266],6190,2798880.0,3
https://github.com/git/git/commit/b0176ce6b5d954a747dc4d0c5a8593ed576714c4,22 Mar 2017,"builtin/describe: introduce --broken flag

git-describe tells you the version number you're at, or errors out, e.g.
when you run it outside of a repository, which may happen when downloading
a tar ball instead of using git to obtain the source code.

To keep this property of only erroring out, when not in a repository,
severe (submodule) errors must be downgraded to reporting them gently
instead of having git-describe error out completely.

To achieve that a flag '--broken' is introduced, which is in the same
vein as '--dirty' but uses an actual child process to check for dirtiness.
When that child dies unexpectedly, we'll append '-broken' instead of
'-dirty'.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_752.cpp,,,data/crawl/git/old_hunk_752.cpp,data/crawl/git/new_hunk_752.cpp,4,4,"printf(""%s"", dirty);","printf(""%s"", suffix);","[""updateVariable""]","[[""dirty""], [""suffix""]]",[-4864275975251276912],6189,0.0,3
https://github.com/git/git/commit/6a338149f623f493525324bc0f8d7bb9257cb840,24 Mar 2017,"tag: implicitly supply --list given another list-like option

Change the ""tag"" command to implicitly turn on its --list mode when
provided with a list-like option such as --contains, --points-at etc.

This is for consistency with how ""branch"" works. When ""branch"" is
given a list-like option, such as --contains, it implicitly provides
--list. Before this change ""tag"" would error out on those sorts of
invocations. I.e. while both of these worked for ""branch"":

    git branch --contains v2.8.0 <pattern>
    git branch --list --contains v2.8.0 <pattern>

Only the latter form worked for ""tag"":

    git tag --contains v2.8.0 '*rc*'
    git tag --list --contains v2.8.0 '*rc*'

Now ""tag"", like ""branch"", will implicitly supply --list when a
list-like option is provided, and no other conflicting non-list
options (such as -d) are present on the command-line.

Spelunking through the history via:

    git log --reverse -p -G'only allowed with' -- '*builtin*tag*c'

Reveals that there was no good reason for not allowing this in the
first place. The --contains option added in 32c35cfb1e (""git-tag: Add
--contains option"", 2009-01-26) made this an error. All the other
subsequent list-like options that were added copied its pattern of
making this usage an error.

The only tests that break as a result of this change are tests that
were explicitly checking that this ""branch-like"" usage wasn't
permitted. Change those failing tests to check that this invocation
mode is permitted, add extra tests for the list-like options we
weren't testing, and tests to ensure that e.g. we don't toggle the
list mode in the presence of other conflicting non-list options.

With this change errors messages such as ""--contains option is only
allowed with -l"" don't make sense anymore, since options like
--contain turn on -l. Instead we error out when list-like options such
as --contain are used in conjunction with conflicting options such as
-d or -v.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",90,data/crawl/git/hunk_746.cpp,,,data/crawl/git/old_hunk_746.cpp,data/crawl/git/new_hunk_746.cpp,3,3,"die(_(""-n option is only allowed with -l.""));","die(_(""-n option is only allowed in list mode""));","[""updateContent""]","[[""with"", ""l""], [""in"", ""list"", ""mode""]]",[1332390235334753967],6188,0.0,3
https://github.com/git/git/commit/9fd750461befcaf984d5966606308c8cd6912f3c,08 May 2017,"Convert the verify_pack callback to struct object_id

Make the verify_pack_callback take a pointer to struct object_id.
Change the pack checksum to use GIT_MAX_RAWSZ, even though it is not
strictly an object ID.  Doing so ensures resilience against future hash
size changes, and allows us to remove hard-coded assumptions about how
big the buffer needs to be.

Also, use a union to convert the pointer from nth_packed_object_sha1 to
to a pointer to struct object_id.  This behavior is compatible with GCC
and clang and explicitly sanctioned by C11.  The alternatives are to
just perform a cast, which would run afoul of strict aliasing rules, but
should just work, and changing the pointer into an instance of struct
object_id and copying the value.  The latter operation could seriously
bloat memory usage on fsck, which already uses a lot of memory on some
repositories.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_525.cpp,,,data/crawl/git/old_hunk_525.cpp,data/crawl/git/new_hunk_525.cpp,1,1,"error(""index CRC mismatch for object %s ""
					    ""from %s at offset %""PRIuMAX"""",
					    sha1_to_hex(entries[i].sha1),
					    p->pack_name, (uintmax_t)offset);","error(""index CRC mismatch for object %s ""
					    ""from %s at offset %""PRIuMAX"""",
					    oid_to_hex(entries[i].oid.oid),
					    p->pack_name, (uintmax_t)offset);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""sha1_to_hex"", ""sha1""], [""oid_to_hex"", ""oid"", ""oid""]]",[15833248259517887995],6187,0.0,3
https://github.com/git/git/commit/c08397e3aa46fd0f0da29dfe5b257839b9c5d1c8,12 May 2017,"pathspec: remove PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag

Since (ae8d08242 pathspec: pass directory indicator to
match_pathspec_item()) the path matching logic has been able to cope
with submodules without needing to strip off a trailing slash if a path
refers to a submodule.

Since the stripping the trailing slash is no longer necessary, remove
the PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag.  In addition, factor
out the logic which dies if a path decends into a submodule so that it
can still be used as a check after a pathspec struct has been
initialized.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/hunk_484.cpp,,,data/crawl/git/old_hunk_484.cpp,data/crawl/git/new_hunk_484.cpp,-1,30,,"die(_(""Pathspec '%s' is in submodule '%.*s'""),
			    item->original, ce_len, ce->name);","[""addLog""]","[[], [""die"", ""_"", ""Pathspec"", ""%s"", ""is"", ""in"", ""submodule"", ""%"", ""*s"", ""item"", ""original"", ""ce_len"", ""ce"", ""name""]]",[-30603480383882539853],6186,59040.0,3
https://github.com/git/git/commit/d096d7f1ef81f5c52d0c9d3070ad82b66de9c981,20 May 2017,"rebase -i: add missing newline to end of message

The message that's printed when auto-stashed changes are successfully
restored was missing '\n' at the end.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_463.cpp,,,data/crawl/git/old_hunk_463.cpp,data/crawl/git/new_hunk_463.cpp,3,3,"printf(_(""Applied autostash.""));","printf(_(""Applied autostash.\n""));","[""updateContent""]","[[], [""\\n""]]",[11776070748106360],6185,1368000.0,3
https://github.com/git/git/commit/8449528deb6826fac5e6a9a312b45b4522ef7ebb,24 May 2017,"blame: move stat counters to scoreboard

Statistic counters are used in parts of blame that are being moved to
libgit, and should be accessible via the scoreboard structure.

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_437.cpp,,,data/crawl/git/old_hunk_437.cpp,data/crawl/git/new_hunk_437.cpp,3,3,"printf(""num read blob: %d\n"", num_read_blob);","printf(""num read blob: %d\n"", sb.num_read_blob);","[""removeVariable"", ""addVariable""]","[[], [""sb""]]",[14720088435132921],6184,0.0,3
https://github.com/git/git/commit/072bf4321fb484a8eabb315c031f47883336fba2,25 May 2017,"blame: move fake-commit-related methods to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",404,data/crawl/git/hunk_430.cpp,,,data/crawl/git/old_hunk_430.cpp,data/crawl/git/new_hunk_430.cpp,100,-1,"die(""no such ref: HEAD"");",,"[""removeLog""]","[[""die"", ""no"", ""such"", ""ref"", ""HEAD""], []]",[-4805078336747600871],6183,824160.0,3
https://github.com/git/git/commit/072bf4321fb484a8eabb315c031f47883336fba2,25 May 2017,"blame: move fake-commit-related methods to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",404,data/crawl/git/hunk_429.cpp,,,data/crawl/git/old_hunk_429.cpp,data/crawl/git/new_hunk_429.cpp,-1,103,,"die(""no such ref: HEAD"");","[""addLog""]","[[], [""die"", ""no"", ""such"", ""ref"", ""HEAD""]]",[4805078336747600871],6182,824160.0,3
https://github.com/git/git/commit/072bf4321fb484a8eabb315c031f47883336fba2,25 May 2017,"blame: move fake-commit-related methods to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",404,data/crawl/git/hunk_429.cpp,,,data/crawl/git/old_hunk_429.cpp,data/crawl/git/new_hunk_429.cpp,-1,28,,"die(""no such path '%s' in HEAD"", path);","[""addLog""]","[[], [""die"", ""no"", ""such"", ""path"", ""%s"", ""in"", ""HEAD"", ""path""]]",[12351473903259394770],6181,1499040.0,3
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,58,-1,"die(_(""revision walk setup failed""));",,"[""removeLog""]","[[""die"", ""_"", ""revision"", ""walk"", ""setup"", ""failed""], []]",[17150171457883954768],6180,583680.0,3
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,203,,"die(""BUG: not unique item in first-parent chain"");","[""addLog""]","[[], [""die"", ""BUG"", ""not"", ""unique"", ""item"", ""in"", ""first"", ""parent"", ""chain""]]",[-5086867976014952884],6179,550080.0,3
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,51,,"die(""Non commit %s?"", revs->pending.objects[i].name);","[""addLog""]","[[], [""die"", ""Non"", ""commit"", ""%s"", ""revs"", ""pending"", ""objects[i]"", ""name""]]",[-7659942789565175390],6178,1458240.0,3
https://github.com/git/git/commit/0317f45576a0b48c90c4b023fa572a000633946c,23 Aug 2017,"pack: move open_pack_index(), parse_pack_index()

alloc_packed_git() in packfile.c is duplicated from sha1_file.c. In a
subsequent commit, alloc_packed_git() will be removed from sha1_file.c.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",311,data/crawl/git/hunk_306.cpp,,,data/crawl/git/old_hunk_306.cpp,data/crawl/git/new_hunk_306.cpp,-1,121,,"die(""BUG: pack_name does not end in .pack"");","[""addLog""]","[[], [""die"", ""BUG"", ""pack_name"", ""does"", ""not"", ""end"", ""in"", ""pack""]]",[4253690570284068605],6177,335040.0,3
https://github.com/git/git/commit/84f80ad5e11d29b61570269a25cf447f34c5aeba,23 Aug 2017,"pack: move use_pack()

The function open_packed_git() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",604,data/crawl/git/hunk_302.cpp,,,data/crawl/git/old_hunk_302.cpp,data/crawl/git/new_hunk_302.cpp,-1,229,,"die(""packfile %s cannot be accessed"", p->pack_name);","[""addLog""]","[[], [""die"", ""packfile"", ""%s"", ""cannot"", ""be"", ""accessed"", ""p"", ""pack_name""]]",[-3986520777584758644],6176,2271360.0,3
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_295.cpp,,,data/crawl/git/old_hunk_295.cpp,data/crawl/git/new_hunk_295.cpp,-1,622,,"error(""failed to unpack compressed delta ""
			      ""at offset %""PRIuMAX"" from %s"",
			      (uintmax_t)curpos, p->pack_name);","[""addLog""]","[[], [""error"", ""failed"", ""to"", ""unpack"", ""compressed"", ""delta"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""]]",[5603733488353824519],6175,2440320.0,3
https://github.com/git/git/commit/9939b33d6a3900e76b9cf95cbbb30ad8cf38cab3,08 Sep 2017,"packed-backend: rip out some now-unused code

Now the outside world interacts with the packed ref store only via the
generic refs API plus a few lock-related functions. This allows us to
delete some functions that are no longer used, thereby completing the
encapsulation of the packed ref store.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",201,data/crawl/git/hunk_245.cpp,,,data/crawl/git/old_hunk_245.cpp,data/crawl/git/new_hunk_245.cpp,22,-1,"die(""Reference has invalid format: '%s'"", refname);",,"[""removeLog""]","[[""die"", ""Reference"", ""has"", ""invalid"", ""format"", ""%s"", ""refname""], []]",[354143934257542070],6174,86400.0,3
https://github.com/git/git/commit/3b34934dcaa4e643a3691ba1f10db054adf60ffb,30 Jan 2018,"match-trees: convert splice_tree to object_id

Convert the definition of static recursive splice_tree function to use
struct object_id and adjust single caller.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_136.cpp,,,data/crawl/git/old_hunk_136.cpp,data/crawl/git/new_hunk_136.cpp,5,5,"die(""cannot read tree %s"", sha1_to_hex(hash1));","die(""cannot read tree %s"", oid_to_hex(oid1));","[""updateVariable""]","[[""sha1_to_hex"", ""hash1""], [""oid_to_hex"", ""oid1""]]",[8870251068818184513],6173,0.0,3
https://github.com/git/git/commit/efdfe11f4f1f901db1ebfa7ebda6337293a2e5c5,22 Feb 2018,"replace: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_5.cpp,,,data/crawl/git/old_hunk_5.cpp,data/crawl/git/new_hunk_5.cpp,11,11,"die(""unable to get object type for %s"", oid_to_hex(&old));","die(""unable to get object type for %s"", oid_to_hex(&old_oid));","[""updateVariable""]","[[""&old""], [""&old_oid""]]",[3537147147019379151],6172,0.0,3
https://github.com/git/git/commit/5751f49010ec54164b93529e31165e71f5996856,21 May 2007,"Move remote parsing into a library file out of builtin-push.

The new parser is different from the one in builtin-push in two ways:
the default is to use the current branch's remote, if there is one,
before ""origin""; and config is used in preference to remotes.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <junkio@cox.net>",436,data/crawl/git/hunk_8406.cpp,,,data/crawl/git/old_hunk_8406.cpp,data/crawl/git/new_hunk_8406.cpp,39,-1,"error(""more than %d URL's specified, ignoring the rest"", MAX_URI);",,"[""removeLog""]","[[""error"", ""more"", ""than"", ""%d"", ""URL"", ""s"", ""specified"", ""ignoring"", ""the"", ""rest"", ""MAX_URI""], []]",[13665103778046776350],6171,0.0,2
https://github.com/git/git/commit/654aaa37ab5c70650bdd16d57b56c2d0f9aa43cf,24 May 2007,"Refactor fast-import branch creation from existing commit

To resolve a corner case uncovered by Simon Hausmann I need to
reuse the logic for the SHA-1 expression version of the 'from '
command within the mark version of the 'from ' command.  This change
doesn't alter any functionality, but is merely breaking the common
code out to a function that I can reuse.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",58,data/crawl/git/hunk_8385.cpp,,,data/crawl/git/old_hunk_8385.cpp,data/crawl/git/new_hunk_8385.cpp,7,-1,"die(""The commit %s is corrupt"", sha1_to_hex(b->sha1));",,"[""removeLog""]","[[""die"", ""The"", ""commit"", ""%s"", ""is"", ""corrupt"", ""sha1_to_hex"", ""b"", ""sha1""], []]",[11325061639317482350],6170,0.0,2
https://github.com/git/git/commit/654aaa37ab5c70650bdd16d57b56c2d0f9aa43cf,24 May 2007,"Refactor fast-import branch creation from existing commit

To resolve a corner case uncovered by Simon Hausmann I need to
reuse the logic for the SHA-1 expression version of the 'from '
command within the mark version of the 'from ' command.  This change
doesn't alter any functionality, but is merely breaking the common
code out to a function that I can reuse.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",58,data/crawl/git/hunk_8385.cpp,,,data/crawl/git/old_hunk_8385.cpp,data/crawl/git/new_hunk_8385.cpp,4,-1,"die(""Not a valid commit: %s"", from);",,"[""removeLog""]","[[""die"", ""Not"", ""a"", ""valid"", ""commit"", ""%s"", ""from""], []]",[804818152896557361],6169,0.0,2
https://github.com/git/git/commit/c94bf41c9a78dc1c084f2a2895f95b6b6d8f79b1,03 Jun 2007,"git-apply: what is detected and fixed is not just trailing spaces.

But we kept saying ""trailing whitespace"" all the same.  Reword the
error messages a bit.

Signed-off-by: Junio C Hamano <junkio@cox.net>",17,data/crawl/git/hunk_8335.cpp,,,data/crawl/git/old_hunk_8335.cpp,data/crawl/git/new_hunk_8335.cpp,3,3,"die(""%d line%s add%s trailing whitespaces."",
			    whitespace_error,
			    whitespace_error == 1 ? """" : ""s"",
			    whitespace_error == 1 ? ""s"" : """");","die(""%d line%s add%s whitespace errors."",
			    whitespace_error,
			    whitespace_error == 1 ? """" : ""s"",
			    whitespace_error == 1 ? ""s"" : """");","[""updateContent""]","[[""trailing"", ""whitespaces""], [""whitespace"", ""errors""]]",[-4896878778409733641],6168,0.0,2
https://github.com/git/git/commit/3af51928ab7cefa35048e3a5a9e78a127749d405,06 Jun 2007,"pack-check: Sort entries by pack offset before unpacking them.

Because of the way objects are sorted in a pack, unpacking them in
disk order is much more efficient than random access. Tests on the
Wine repository show a gain in pack validation time of about 35%.

Signed-off-by: Alexandre Julliard <julliard@winehq.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_8316.cpp,,,data/crawl/git/old_hunk_8316.cpp,data/crawl/git/new_hunk_8316.cpp,18,22,"error(""cannot unpack %s from %s"",
				    sha1_to_hex(sha1), p->pack_name);","error(""cannot unpack %s from %s"",
				    sha1_to_hex(entries[i].sha1), p->pack_name);","[""addVariable""]","[[], [""entries[i]""]]",[-4404340920996770385],6167,0.0,2
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_8314.cpp,,,data/crawl/git/old_hunk_8314.cpp,data/crawl/git/new_hunk_8314.cpp,-1,8,,"die(""Cannot change directory to $%s '%s'"",
			GIT_DIR_ENVIRONMENT, gitdirenv);","[""addLog""]","[[], [""die"", ""Cannot"", ""change"", ""directory"", ""to"", ""%s"", ""%s"", ""GIT_DIR_ENVIRONMENT"", ""gitdirenv""]]",[-13336148212960830689],6166,0.0,2
https://github.com/git/git/commit/892c41b98ae2e6baf3aa13901cb10db9ac67d2f3,06 Jun 2007,"introduce GIT_WORK_TREE to specify the work tree

setup_gdg is used as abbreviation for setup_git_directory_gently.

The work tree can be specified using the environment variable
GIT_WORK_TREE and the config option core.worktree (the environment
variable has precendence over the config option).  Additionally
there is a command line option --work-tree which sets the
environment variable.

setup_gdg does the following now:

GIT_DIR unspecified
repository in .git directory
    parent directory of the .git directory is used as work tree,
    GIT_WORK_TREE is ignored

GIT_DIR unspecified
repository in cwd
    GIT_DIR is set to cwd
    see the cases with GIT_DIR specified what happens next and
    also see the note below

GIT_DIR specified
GIT_WORK_TREE/core.worktree unspecified
    cwd is used as work tree

GIT_DIR specified
GIT_WORK_TREE/core.worktree specified
    the specified work tree is used

Note on the case where GIT_DIR is unspecified and repository is in cwd:
    GIT_WORK_TREE is used but is_inside_git_dir is always true.
    I did it this way because setup_gdg might be called multiple
    times (e.g. when doing alias expansion) and in successive calls
    setup_gdg should do the same thing every time.

Meaning of is_bare/is_inside_work_tree/is_inside_git_dir:

(1) is_bare_repository
    A repository is bare if core.bare is true or core.bare is
    unspecified and the name suggests it is bare (directory not
    named .git).  The bare option disables a few protective
    checks which are useful with a working tree.  Currently
    this changes if a repository is bare:
        updates of HEAD are allowed
        git gc packs the refs
        the reflog is disabled by default

(2) is_inside_work_tree
    True if the cwd is inside the associated working tree (if there
    is one), false otherwise.

(3) is_inside_git_dir
    True if the cwd is inside the git directory, false otherwise.
    Before this patch is_inside_git_dir was always true for bare
    repositories.

When setup_gdg finds a repository git_config(git_default_config) is
always called.  This ensure that is_bare_repository makes use of
core.bare and does not guess even though core.bare is specified.

inside_work_tree and inside_git_dir are set if setup_gdg finds a
repository.  The is_inside_work_tree and is_inside_git_dir functions
will die if they are called before a successful call to setup_gdg.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",261,data/crawl/git/hunk_8311.cpp,,,data/crawl/git/old_hunk_8311.cpp,data/crawl/git/new_hunk_8311.cpp,-1,9,,"printf(""%s\n"", is_bare_repository() ? ""true""
						: ""false"");","[""addLog""]","[[], [""printf"", ""%s\\n"", ""is_bare_repository"", ""true"", ""false""]]",[19968682023284076473],6165,0.0,2
https://github.com/git/git/commit/f4f51add2712293b7bc9e7aaebf6a589bb37c7c7,06 Jun 2007,"setup_git_directory: fix segfault if repository is found in cwd

Additionally there was a similar part calling setenv and getenv
in the same way which missed a check if getenv succeeded.

Signed-off-by: Matthias Lederhofer <matled@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_8309.cpp,,,data/crawl/git/old_hunk_8309.cpp,data/crawl/git/new_hunk_8309.cpp,-1,5,,"die(""getenv after setenv failed"");","[""addLog""]","[[], [""die"", ""getenv"", ""after"", ""setenv"", ""failed""]]",[-20748739487793949337],6164,0.0,2
https://github.com/git/git/commit/54a8ad925cfac90bb4141c9904b1f97f0c5b83d4,09 Jun 2007,"remote.c: refactor match_explicit_refs()

This does not change functionality; just splits one block that
is deeply nested and indented out of a huge loop into a separate
function.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",159,data/crawl/git/hunk_8298.cpp,,,data/crawl/git/old_hunk_8298.cpp,data/crawl/git/new_hunk_8298.cpp,32,31,"error(""src refspec %s does not match any."",
			      rs[i].src);","error(""src refspec %s does not match any."",
		      rs->src);","[""moveVariable"", ""removeVariable"", ""addVariable""]","[[""rs[i]""], [""rs""]]",[2448453124578158112],6163,0.0,2
https://github.com/git/git/commit/fadf488f9b8c4fc709f0b083d2769ecc1e0e1119,16 Jun 2007,"merge-recursive: refuse to merge binary files

[jc: cherry-picked 9f30855 from 'master']

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_8282.cpp,,,data/crawl/git/old_hunk_8282.cpp,data/crawl/git/new_hunk_8282.cpp,-1,6,,"error(""Cannot merge binary files: %s vs. %s\n"",
			name1, name2);","[""addLog""]","[[], [""error"", ""Cannot"", ""merge"", ""binary"", ""files"", ""%s"", ""vs"", ""%s\\n"", ""name1"", ""name2""]]",[11482154405344774250],6162,7920.0,2
https://github.com/git/git/commit/7cbf2f24ee8430fbf48a2c6f106f22adf9df62e1,16 Jun 2007,"Do not use h_errno after connect(2): the function does not set it

Randal L. Schwartz noticed compilation problems on SunOS, which made
me look at the code again. The thing is, h_errno is not used by
connect(2), it is only for functions from netdb.h, like gethostbyname.

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_8280.cpp,,,data/crawl/git/old_hunk_8280.cpp,data/crawl/git/new_hunk_8280.cpp,3,3,"fprintf(stderr, ""%s[%d: %s]: net=%s, errno=%s\n"",
				host,
				cnt,
				ai_name(ai),
				hstrerror(h_errno),
				strerror(saved_errno));","fprintf(stderr, ""%s[%d: %s]: errno=%s\n"",
				host,
				cnt,
				ai_name(ai),
				strerror(saved_errno));","[""removeVariable"", ""updateContent""]","[[""net"", ""%s"", ""hstrerror"", ""h_errno""], []]",[448963206568031702],6161,0.0,2
https://github.com/git/git/commit/610f043bb378d12f399f4e5692fb874e0a043b23,22 Jun 2007,"Import branch 'git-p4' of git://repo.or.cz/fast-export

Simon has asked that the git.git project include the git-p4 project
as at least a contrib/fast-import within git.git.  I think it makes
a lot of sense, as git-p4 nicely complements the only other in-tree
fast-import user: import-tars.perl.

git-p4 is offered under the MIT license by its authors.",1737,data/crawl/git/hunk_8278.cpp,,,data/crawl/git/old_hunk_8278.cpp,data/crawl/git/new_hunk_8278.cpp,-1,512,,"die(""Detecting current git branch failed!"");","[""addLog""]","[[], [""die"", ""Detecting"", ""current"", ""git"", ""branch"", ""failed""]]",[-31310291257216045315],6160,61200.0,2
https://github.com/git/git/commit/610f043bb378d12f399f4e5692fb874e0a043b23,22 Jun 2007,"Import branch 'git-p4' of git://repo.or.cz/fast-export

Simon has asked that the git.git project include the git-p4 project
as at least a contrib/fast-import within git.git.  I think it makes
a lot of sense, as git-p4 nicely complements the only other in-tree
fast-import user: import-tars.perl.

git-p4 is offered under the MIT license by its authors.",1737,data/crawl/git/hunk_8278.cpp,,,data/crawl/git/old_hunk_8278.cpp,data/crawl/git/new_hunk_8278.cpp,-1,404,,"die(""Please resolve and submit the conflict manually and ""
                    + ""continue afterwards with git-p4 submit --continue"");","[""addLog""]","[[], [""die"", ""Please"", ""resolve"", ""and"", ""submit"", ""the"", ""conflict"", ""manually"", ""and"", ""continue"", ""afterwards"", ""with"", ""git"", ""p4"", ""submit"", ""continue""]]",[28162736179951678947],6159,48960.0,2
https://github.com/git/git/commit/610f043bb378d12f399f4e5692fb874e0a043b23,22 Jun 2007,"Import branch 'git-p4' of git://repo.or.cz/fast-export

Simon has asked that the git.git project include the git-p4 project
as at least a contrib/fast-import within git.git.  I think it makes
a lot of sense, as git-p4 nicely complements the only other in-tree
fast-import user: import-tars.perl.

git-p4 is offered under the MIT license by its authors.",1737,data/crawl/git/hunk_8278.cpp,,,data/crawl/git/old_hunk_8278.cpp,data/crawl/git/new_hunk_8278.cpp,-1,233,,"die(""Problems executing p4"");","[""addLog""]","[[], [""die"", ""Problems"", ""executing"", ""p4""]]",[-1902215463677450836],6158,21600.0,2
https://github.com/git/git/commit/125b7630521918b75c136bd95309054d3f6d9da5,25 Jun 2007,"diff: round down similarity index

Rounding down the printed (dis)similarity index allows us to use
""100%"" as a special value that indicates complete rewrites and
fully equal file contents, respectively.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",29,data/crawl/git/hunk_8270.cpp,,,data/crawl/git/old_hunk_8270.cpp,data/crawl/git/new_hunk_8270.cpp,3,3,"printf("" %s %s (%d%%)\n"", renamecopy, names,
	       (int)(0.5 + p->score * 100.0/MAX_SCORE));","printf("" %s %s (%d%%)\n"", renamecopy, names, similarity_index(p));","[""updateVariable"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""int"", ""0"", ""5"", ""score"", ""*"", ""100"", ""0/MAX_SCORE""], [""similarity_index""]]",[9315068146075688588],6157,0.0,2
https://github.com/git/git/commit/2275d502114c71045af991697048191fed88aac4,27 Jun 2007,"config: Add --null/-z option for null-delimted output

Use \n as delimiter between key and value and \0 as
delimiter after each key/value pair. This should be
easily parsable output.

Signed-off-by: Frank Lichtenheld <frank@lichtenheld.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/hunk_8266.cpp,,,data/crawl/git/old_hunk_8266.cpp,data/crawl/git/new_hunk_8266.cpp,10,13,"printf(""%s\n"", key_);","printf(""%s%c"", key_, term);","[""updateContent"", ""addVariable""]","[[""%s\\n""], [""%s%c"", ""term""]]",[2314058222080390756],6156,0.0,2
https://github.com/git/git/commit/d54276f207081e35174c5d742e378cfff6e9843f,04 Jul 2007,"Handle format.subjectprefix for every command which accepts --pretty

Because the --pretty can be given as --pretty=email which historically produced
mails with patches. IOW, exactly what git-format-patch does.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_8236.cpp,,,data/crawl/git/old_hunk_8236.cpp,data/crawl/git/new_hunk_8236.cpp,-1,5,,"die(""format.subjectprefix without value"");","[""addLog""]","[[], [""die"", ""format"", ""subjectprefix"", ""without"", ""value""]]",[-12083052749618482126],6155,720.0,2
https://github.com/git/git/commit/f39a946a1fb0fa4856cd0027b9da3603a1b06fdc,10 Jul 2007,"Support wholesale directory renames in fast-import

Some source material (e.g. Subversion dump files) perform directory
renames without telling us exactly which files in that subdirectory
were moved.  This makes it hard for a frontend to convert such data
formats to a fast-import stream, as all the frontend has on hand
is ""Rename a/ to b/"" with no details about what files are in a/,
unless the frontend also kept track of all files.

The new 'R' subcommand within a commit allows the frontend to
rename either a file or an entire subdirectory, without needing to
know the object's SHA-1 or the specific files contained within it.
The rename is performed as efficiently as possible internally,
making it cheaper than a 'D'/'M' pair for a file rename.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",187,data/crawl/git/hunk_8226.cpp,,,data/crawl/git/old_hunk_8226.cpp,data/crawl/git/new_hunk_8226.cpp,-1,18,,"die(""Missing space after source: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Missing"", ""space"", ""after"", ""source"", ""%s"", ""command_buf"", ""buf""]]",[3145402299493290639],6154,0.0,2
https://github.com/git/git/commit/e317cfafd247b279055e9ee64a6a982043bd06e7,21 Jul 2007,"builtin-tag.c: Fix two memory leaks and minor notation changes.

A repeated call to read_sha1_file was not freing memory
when the buffer was allocated but returned size was zero.

Also, now the program does not allow many -F or -m options,
which was a bug too because it was not freing the memory
allocated for any previous -F or -m options.

Tests are provided for ensuring that only one option
-F or -m is given. Also, another test is shipped here,
to check that ""git tag"" fails when a non-existing file
is passed to the -F option, something that git-tag.sh
allowed creating the tag with an empty message.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Acked-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",73,data/crawl/git/hunk_8209.cpp,,,data/crawl/git/old_hunk_8209.cpp,data/crawl/git/new_hunk_8209.cpp,-1,4,,"die(""only one -F or -m option is allowed."");","[""addLog""]","[[], [""die"", ""only"", ""one"", ""F"", ""or"", ""m"", ""option"", ""is"", ""allowed""]]",[-2896179038426083744],6153,0.0,2
https://github.com/git/git/commit/2ae68fcb785a617793813abcea19893e13e436b0,27 Jul 2007,"Make verify-tag a builtin.

This replaces ""git-verify-tag.sh"" with ""builtin-verify-tag.c"".

Testing relies on the ""git tag -v"" tests calling this command.

A temporary file is needed when calling to gpg, because git is
already creating detached signatures (gpg option -b) to sign tags
(instead of leaving gpg to add the signature to the file by itself),
and those signatures need to be supplied in a separate file to be
verified by gpg.

The program uses git_mkstemp to create that temporary file needed by
gpg, instead of the previously used ""$GIT_DIR/.tmp-vtag"", in order to
allow the command to be used in read-only repositories, and also
prevent other instances of git to read or remove the same file.

Signal SIGPIPE is ignored because the program sometimes was
terminated because that signal when writing the input for gpg.

The command now can receive many tag names to be verified.
Documentation is also updated here to reflect this new behaviour.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",118,data/crawl/git/hunk_8194.cpp,,,data/crawl/git/old_hunk_8194.cpp,data/crawl/git/new_hunk_8194.cpp,-1,50,,"error(""could not run gpg."");","[""addLog""]","[[], [""error"", ""could"", ""not"", ""run"", ""gpg""]]",[16943766928473097384],6152,5040.0,2
https://github.com/git/git/commit/283884422f35594db9eab491d3f8c91e49f9d62f,30 Jul 2007,"symbolic-ref, update-ref: do not refuse reflog message with LF

Earlier these tools refused to create a reflog entry when the
message given by the calling Porcelain had a LF in it, partially
to keep the file format integrity of reflog file, which is
one-entry-per-line.  These tools should not be dictating such a
policy.

Instead, let the codepath to write out the reflog entry worry
about the format integrity and allow messages with LF in them.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_8188.cpp,,,data/crawl/git/old_hunk_8188.cpp,data/crawl/git/new_hunk_8188.cpp,4,-1,"die(""Refusing to perform update with \\n in message"");",,"[""removeLog""]","[[""die"", ""Refusing"", ""to"", ""perform"", ""update"", ""with"", ""\\\\n"", ""in"", ""message""], []]",[11325732569063279554],6151,0.0,2
https://github.com/git/git/commit/e90fdc39b6903502192b2dd11e5503cea721a1ad,01 Aug 2007,"Clean up work-tree handling

The old version of work-tree support was an unholy mess, barely readable,
and not to the point.

For example, why do you have to provide a worktree, when it is not used?
As in ""git status"".  Now it works.

Another riddle was: if you can have work trees inside the git dir, why
are some programs complaining that they need a work tree?

IOW it is allowed to call

	$ git --git-dir=../ --work-tree=. bla

when you really want to.  In this case, you are both in the git directory
and in the working tree.  So, programs have to actually test for the right
thing, namely if they are inside a working tree, and not if they are
inside a git directory.

Also, GIT_DIR=../.git should behave the same as if no GIT_DIR was
specified, unless there is a repository in the current working directory.
It does now.

The logic to determine if a repository is bare, or has a work tree
(tertium non datur), is this:

--work-tree=bla overrides GIT_WORK_TREE, which overrides core.bare = true,
which overrides core.worktree, which overrides GIT_DIR/.. when GIT_DIR
ends in /.git, which overrides the directory in which .git/ was found.

In related news, a long standing bug was fixed: when in .git/bla/x.git/,
which is a bare repository, git formerly assumed ../.. to be the
appropriate git dir.  This problem was reported by Shawn Pearce to have
caused much pain, where a colleague mistakenly ran ""git init"" in ""/"" a
long time ago, and bare repositories just would not work.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",437,data/crawl/git/hunk_8181.cpp,,,data/crawl/git/old_hunk_8181.cpp,data/crawl/git/new_hunk_8181.cpp,8,-1,"die(""Cannot change directory to $%s '%s'"",
			GIT_DIR_ENVIRONMENT, gitdirenv);",,"[""removeLog""]","[[""die"", ""Cannot"", ""change"", ""directory"", ""to"", ""%s"", ""%s"", ""GIT_DIR_ENVIRONMENT"", ""gitdirenv""], []]",[13336148212960830689],6150,0.0,2
https://github.com/git/git/commit/7647b17f1d7a98362f8bdbe48b30d94ed655229c,15 Aug 2007,"Use xmkstemp() instead of mkstemp()

xmkstemp() performs error checking and prints a standard error message when
an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_8159.cpp,,,data/crawl/git/old_hunk_8159.cpp,data/crawl/git/new_hunk_8159.cpp,5,-1,"die(""unable to create temp-file"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""temp"", ""file""], []]",[705575598582292109],6149,0.0,2
https://github.com/git/git/commit/7647b17f1d7a98362f8bdbe48b30d94ed655229c,15 Aug 2007,"Use xmkstemp() instead of mkstemp()

xmkstemp() performs error checking and prints a standard error message when
an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_8157.cpp,,,data/crawl/git/old_hunk_8157.cpp,data/crawl/git/new_hunk_8157.cpp,5,-1,"die(""Can't create %s: %s"", tmpfile, strerror(errno));",,"[""removeLog""]","[[""die"", ""Can"", ""t"", ""create"", ""%s"", ""%s"", ""tmpfile"", ""strerror"", ""errno""], []]",[444892091573036719],6148,0.0,2
https://github.com/git/git/commit/7647b17f1d7a98362f8bdbe48b30d94ed655229c,15 Aug 2007,"Use xmkstemp() instead of mkstemp()

xmkstemp() performs error checking and prints a standard error message when
an error occur.

Signed-off-by: Luiz Fernando N. Capitulino <lcapitulino@mandriva.com.br>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_8156.cpp,,,data/crawl/git/old_hunk_8156.cpp,data/crawl/git/new_hunk_8156.cpp,4,-1,"die(""unable to create %s: %s\n"", tmpname, strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""%s"", ""%s\\n"", ""tmpname"", ""strerror"", ""errno""], []]",[-23094754164138738382],6147,53280.0,2
https://github.com/git/git/commit/a9ab2009dbbf769aadd52957950c1bad60a0c8fd,17 Aug 2007,"Clean-up read-tree error condition.

This is a follow-up to f34f2b0b; list_tree() function is where it
first notices that the command line fed too many trees for us to
handle, so move the error exit message to there, and raise the
MAX_TREES to 8 (not that it matters very much in practice).

Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_8148.cpp,,,data/crawl/git/old_hunk_8148.cpp,data/crawl/git/new_hunk_8148.cpp,-1,12,,"die(""I cannot read more than %d trees"", MAX_TREES);","[""addLog""]","[[], [""die"", ""I"", ""cannot"", ""read"", ""more"", ""than"", ""%d"", ""trees"", ""MAX_TREES""]]",[-3912694685578555372],6146,720.0,2
https://github.com/git/git/commit/3d9f037c60ceae1bd60ee3c861564812a89b05b1,05 Sep 2007,"Function for updating refs.

A function intended to be called from builtins updating refs
by locking them before write, specially those that came from
scripts using ""git update-ref"".

[jc: with minor fixups]

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_8125.cpp,,,data/crawl/git/old_hunk_8125.cpp,data/crawl/git/new_hunk_8125.cpp,-1,14,,"die(str, refname);","[""addLog""]","[[], [""die"", ""str"", ""refname""]]",[5292160224462343340],6145,0.0,2
https://github.com/git/git/commit/3d9f037c60ceae1bd60ee3c861564812a89b05b1,05 Sep 2007,"Function for updating refs.

A function intended to be called from builtins updating refs
by locking them before write, specially those that came from
scripts using ""git update-ref"".

[jc: with minor fixups]

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_8125.cpp,,,data/crawl/git/old_hunk_8125.cpp,data/crawl/git/new_hunk_8125.cpp,-1,13,,"error(str, refname);","[""addLog""]","[[], [""error"", ""str"", ""refname""]]",[15502385817665198522],6144,0.0,2
https://github.com/git/git/commit/917c9a713397b16671ed5b1f1c159515bcfa389e,17 Sep 2007,"New strbuf APIs: splice and attach.

* strbuf_splice replace a portion of the buffer with another.
* strbuf_attach replace a strbuf buffer with the given one, that should be
  malloc'ed. Then it enforces strbuf's invariants. If alloc > len, then this
  function has negligible cost, else it will perform a realloc, possibly
  with a cost.

Also some style issues are fixed now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/hunk_8078.cpp,,,data/crawl/git/old_hunk_8078.cpp,data/crawl/git/new_hunk_8078.cpp,-1,17,,"die(""you want to use way too much memory"");","[""addLog""]","[[], [""die"", ""you"", ""want"", ""to"", ""use"", ""way"", ""too"", ""much"", ""memory""]]",[-23080602614325183519],6143,7200.0,2
https://github.com/git/git/commit/917c9a713397b16671ed5b1f1c159515bcfa389e,17 Sep 2007,"New strbuf APIs: splice and attach.

* strbuf_splice replace a portion of the buffer with another.
* strbuf_attach replace a strbuf buffer with the given one, that should be
  malloc'ed. Then it enforces strbuf's invariants. If alloc > len, then this
  function has negligible cost, else it will perform a realloc, possibly
  with a cost.

Also some style issues are fixed now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/hunk_8078.cpp,,,data/crawl/git/old_hunk_8078.cpp,data/crawl/git/new_hunk_8078.cpp,-1,7,,"die(""`pos' is too far after the end of the buffer"");","[""addLog""]","[[], [""die"", ""pos"", ""is"", ""too"", ""far"", ""after"", ""the"", ""end"", ""of"", ""the"", ""buffer""]]",[-15633573900666038127],6142,0.0,2
https://github.com/git/git/commit/64586e75af3c84844b80652575a8b63a9612b24a,18 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8064.cpp,,,data/crawl/git/old_hunk_8064.cpp,data/crawl/git/new_hunk_8064.cpp,-1,9,,"die(""ls-files --with-tree is incompatible with -s or -u"");","[""addLog""]","[[], [""die"", ""ls"", ""files"", ""with"", ""tree"", ""is"", ""incompatible"", ""with"", ""s"", ""or"", ""u""]]",[-10018229190101635562],6141,4320.0,2
https://github.com/git/git/commit/64586e75af3c84844b80652575a8b63a9612b24a,18 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8063.cpp,,,data/crawl/git/old_hunk_8063.cpp,data/crawl/git/new_hunk_8063.cpp,-1,41,,"die(""unable to read tree entries %s"", tree_name);","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""tree"", ""entries"", ""%s"", ""tree_name""]]",[-887800072658202415],6140,4320.0,2
https://github.com/git/git/commit/64586e75af3c84844b80652575a8b63a9612b24a,18 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8063.cpp,,,data/crawl/git/old_hunk_8063.cpp,data/crawl/git/new_hunk_8063.cpp,-1,23,,"die(""bad tree-ish %s"", tree_name);","[""addLog""]","[[], [""die"", ""bad"", ""tree"", ""ish"", ""%s"", ""tree_name""]]",[-12380831501129429837],6139,4320.0,2
https://github.com/git/git/commit/64586e75af3c84844b80652575a8b63a9612b24a,18 Sep 2007,"git-commit: Allow partial commit of file removal.

When making a partial commit, git-commit uses git-ls-files with
the --error-unmatch option to expand and sanity check the user
supplied path patterns.  When any path pattern does not match
with the paths known to the index, it errors out, in order to
catch a common mistake to say ""git commit Makefiel cache.h""
and end up with a commit that touches only cache.h (notice the
misspelled ""Makefile"").  This detection however does not work
well when the path has already been removed from the index.

If you drop a path from the index and try to commit that
partially, i.e.

	$ git rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

the command complains because git does not know anything about
COPYING anymore.

This introduces a new option --with-tree to git-ls-files and
uses it in git-commit when we build a temporary index to
write a tree object for the partial commit.

When --with-tree=<tree-ish> option is specified, names from the
given tree are added to the set of names the index knows about,
so we can treat COPYING file in the example as known.

Of course, there is no reason to use ""git rm"" and git-aware
people have long time done:

	$ rm COPYING
	$ git commit -m 'Remove COPYING' COPYING

which works just fine.  But this caused a constant confusion.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",104,data/crawl/git/hunk_8063.cpp,,,data/crawl/git/old_hunk_8063.cpp,data/crawl/git/new_hunk_8063.cpp,-1,20,,"die(""tree-ish %s not found."", tree_name);","[""addLog""]","[[], [""die"", ""tree"", ""ish"", ""%s"", ""not"", ""found"", ""tree_name""]]",[-2393910506039786222],6138,4320.0,2
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_8038.cpp,,,data/crawl/git/old_hunk_8038.cpp,data/crawl/git/new_hunk_8038.cpp,-1,33,,"error(""%s died with strange error"", argv[0]);","[""addLog""]","[[], [""error"", ""%s"", ""died"", ""with"", ""strange"", ""error"", ""argv[0]""]]",[6010646412580812064],6137,0.0,2
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_8038.cpp,,,data/crawl/git/old_hunk_8038.cpp,data/crawl/git/new_hunk_8038.cpp,-1,27,,"error(""unable to exec %s"", argv[0]);","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""exec"", ""%s"", ""argv[0]""]]",[10517722405981025127],6136,0.0,2
https://github.com/git/git/commit/9b288516ee63cea91dd9d102edcdf112caea4c75,19 Sep 2007,"Push code for transport library

This moves the code to call push backends into a library that can be
extended to make matching fetch and push decisions based on the URL it
gets, and which could be changed to have built-in implementations
instead of calling external programs.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_8038.cpp,,,data/crawl/git/old_hunk_8038.cpp,data/crawl/git/new_hunk_8038.cpp,-1,25,,"error(""unable to fork for %s"", argv[0]);","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""fork"", ""for"", ""%s"", ""argv[0]""]]",[10495219703938108806],6135,0.0,2
https://github.com/git/git/commit/30415d50cccef0ec22bb4a6d58138760b142758d,19 Sep 2007,"Move bundle specific stuff into bundle.[ch]

The transport specific stuff was moved into libgit.a, and the
bundle specific stuff will not be left behind.

This is a big code move, with one exception: the function
unbundle() no longer outputs the list of refs.  You have to call
list_bundle_refs() yourself for that.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",735,data/crawl/git/hunk_8030.cpp,,,data/crawl/git/old_hunk_8030.cpp,data/crawl/git/new_hunk_8030.cpp,121,-1,error(message);,,"[""removeLog""]","[[""error"", ""message""], []]",[-1438504816784457873],6134,0.0,2
https://github.com/git/git/commit/e5f4e214636f9c9bd36c2897634108d5ad5587a1,19 Sep 2007,"Remove unnecessary 'fetch' argument from transport_get API

We don't actually need to know at the time of transport_get if the
caller wants to fetch, push, or do both on the returned object.
It is easier to just delay the initialization of the HTTP walker
until we know we will need it by providing a CURL specific fetch
function in the curl_transport that makes sure the walker instance
is initialized before use.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_8019.cpp,,,data/crawl/git/old_hunk_8019.cpp,data/crawl/git/new_hunk_8019.cpp,-1,6,,"die(""Cannot fetch from '%s' without curl ..."", transport->url);","[""addLog""]","[[], [""die"", ""Cannot"", ""fetch"", ""from"", ""%s"", ""without"", ""curl"", ""transport"", ""url""]]",[-5742909372898188850],6133,0.0,2
https://github.com/git/git/commit/28b91f8ad9e4791b5c35ca6bffbb78725b4e5bbf,19 Sep 2007,"Rename remote.uri to remote.url within remote handling internals

Anyplace we talk about the address of a remote repository we always
refer to it as a URL, especially in the configuration file and
.git/remotes where we call it ""remote.$n.url"" or start the first
line with ""URL:"".  Calling this value a uri within the internal C
code just doesn't jive well with our commonly accepted terms.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_8013.cpp,,,data/crawl/git/old_hunk_8013.cpp,data/crawl/git/new_hunk_8013.cpp,3,3,"fprintf(stderr, ""Pushing to %s\n"", remote->uri[i]);","fprintf(stderr, ""Pushing to %s\n"", remote->url[i]);","[""updateVariable""]","[[""uri[i]""], [""url[i]""]]",[-2999880999026998247],6132,0.0,2
https://github.com/git/git/commit/f26a0012262106e0c7e92d8d07f00611112d3a8d,19 Sep 2007,"Enable wt-status output to a given FILE pointer.

Still defaults to stdout, but you can now override wt_status.fp after
calling wt_status_prepare().

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_8001.cpp,,,data/crawl/git/old_hunk_8001.cpp,data/crawl/git/new_hunk_8001.cpp,32,32,"printf(""\n"");","fprintf(s->fp, ""\n"");","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""s"", ""fp""]]",[-12428491936016271569],6131,0.0,2
https://github.com/git/git/commit/19247e5510279f018f8358a72b38cc5aa62fac8a,21 Sep 2007,"nfv?asprintf are broken without va_copy, workaround them.

* drop nfasprintf.
* move nfvasprintf into imap-send.c back, and let it work on a 8k buffer,
  and die() in case of overflow. It should be enough for imap commands, if
  someone cares about imap-send, he's welcomed to fix it properly.
* replace nfvasprintf use in merge-recursive with a copy of the strbuf_addf
  logic, it's one place, we'll live with it.
  To ease the change, output_buffer string list is replaced with a strbuf ;)
* rework trace.c to call vsnprintf itself.  It's used to format strerror()s
  and git command names, it should never be more than a few octets long, let
  it work on a 8k static buffer with vsnprintf or die loudly.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",180,data/crawl/git/hunk_7999.cpp,,,data/crawl/git/old_hunk_7999.cpp,data/crawl/git/new_hunk_7999.cpp,-1,17,,"die(""unreasonnable trace length"");","[""addLog""]","[[], [""die"", ""unreasonnable"", ""trace"", ""length""]]",[10022591019137606337],6130,0.0,2
https://github.com/git/git/commit/663af3422a648e87945e4d8c0cc3e13671f2bbde,21 Sep 2007,"Full rework of quote_c_style and write_name_quoted.

* quote_c_style works on a strbuf instead of a wild buffer.
* quote_c_style is now clever enough to not add double quotes if not needed.

* write_name_quoted inherits those advantages, but also take a different
  set of arguments. Now instead of asking for quotes or not, you pass a
  ""terminator"". If it's \0 then we assume you don't want to escape, else C
  escaping is performed. In any case, the terminator is also appended to the
  stream. It also no longer takes the prefix/prefix_len arguments, as it's
  seldomly used, and makes some optimizations harder.

* write_name_quotedpfx is created to work like write_name_quoted and take
  the prefix/prefix_len arguments.

Thanks to those API changes, diff.c has somehow lost weight, thanks to the
removal of functions that were wrappers around the old write_name_quoted
trying to give it a semantics like the new one, but performing a lot of
allocations for this goal. Now we always write directly to the stream, no
intermediate allocation is performed.

As a side effect of the refactor in builtin-apply.c, the length of the bar
graphs in diffstats are not affected anymore by the fact that the path was
clipped.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",641,data/crawl/git/hunk_7986.cpp,,,data/crawl/git/old_hunk_7986.cpp,data/crawl/git/new_hunk_7986.cpp,-1,116,,"fputs(name, fp);","[""addLog""]","[[], [""fputs"", ""name"", ""fp""]]",[-7654144263964643242],6129,0.0,2
https://github.com/git/git/commit/663af3422a648e87945e4d8c0cc3e13671f2bbde,21 Sep 2007,"Full rework of quote_c_style and write_name_quoted.

* quote_c_style works on a strbuf instead of a wild buffer.
* quote_c_style is now clever enough to not add double quotes if not needed.

* write_name_quoted inherits those advantages, but also take a different
  set of arguments. Now instead of asking for quotes or not, you pass a
  ""terminator"". If it's \0 then we assume you don't want to escape, else C
  escaping is performed. In any case, the terminator is also appended to the
  stream. It also no longer takes the prefix/prefix_len arguments, as it's
  seldomly used, and makes some optimizations harder.

* write_name_quotedpfx is created to work like write_name_quoted and take
  the prefix/prefix_len arguments.

Thanks to those API changes, diff.c has somehow lost weight, thanks to the
removal of functions that were wrappers around the old write_name_quoted
trying to give it a semantics like the new one, but performing a lot of
allocations for this goal. Now we always write directly to the stream, no
intermediate allocation is performed.

As a side effect of the refactor in builtin-apply.c, the length of the bar
graphs in diffstats are not affected anymore by the fact that the path was
clipped.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>",641,data/crawl/git/hunk_7984.cpp,,,data/crawl/git/old_hunk_7984.cpp,data/crawl/git/new_hunk_7984.cpp,10,9,"printf("" %s mode %06o %s\n"", newdelete, fs->mode, name);","printf("" %s mode %06o "", newdelete, fs->mode);","[""removeVariable"", ""updateContent""]","[[""%s\\n"", ""name""], []]",[-1978386752269010711],6128,0.0,2
https://github.com/git/git/commit/7a33bcbe802080f3a926e93d66b65ff7c5e8c5ed,21 Sep 2007,"sq_quote_argv and add_to_string rework with strbuf's.

* sq_quote_buf is made public, and works on a strbuf.
* sq_quote_argv also works on a strbuf.
* make sq_quote_argv take a ""maxlen"" argument to check the buffer won't grow
  too big.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",223,data/crawl/git/hunk_7969.cpp,,,data/crawl/git/old_hunk_7969.cpp,data/crawl/git/new_hunk_7969.cpp,-1,20,,"die(""Too many or long arguments"");","[""addLog""]","[[], [""die"", ""Too"", ""many"", ""or"", ""long"", ""arguments""]]",[-7410788784410661785],6127,58320.0,2
https://github.com/git/git/commit/26b28007689d27a921ea90e5a29fc8eb74b0d297,26 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_7961.cpp,,,data/crawl/git/old_hunk_7961.cpp,data/crawl/git/new_hunk_7961.cpp,-1,6,,"die (""need a filename"");","[""addLog""]","[[], [""die"", ""need"", ""a"", ""filename""]]",[-12761271675917370736],6126,5040.0,2
https://github.com/git/git/commit/26b28007689d27a921ea90e5a29fc8eb74b0d297,26 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_7960.cpp,,,data/crawl/git/old_hunk_7960.cpp,data/crawl/git/new_hunk_7960.cpp,-1,5,,"die (""Could not add %s to temporary index"", name);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""add"", ""%s"", ""to"", ""temporary"", ""index"", ""name""]]",[3547274368176631606],6125,5040.0,2
https://github.com/git/git/commit/26b28007689d27a921ea90e5a29fc8eb74b0d297,26 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_7960.cpp,,,data/crawl/git/old_hunk_7960.cpp,data/crawl/git/new_hunk_7960.cpp,7,10,"fputs(name, stdout);","die (""Could not write temporary index to %s"", filename);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""addContent""]","[[""fputs"", ""name"", ""stdout""], [""die"", ""Could"", ""not"", ""write"", ""temporary"", ""index"", ""to"", ""%s"", ""filename""]]",[24782695481820883169],6124,5040.0,2
https://github.com/git/git/commit/26b28007689d27a921ea90e5a29fc8eb74b0d297,26 Sep 2007,"apply: get rid of --index-info in favor of --build-fake-ancestor

git-am used ""git apply -z --index-info"" to find the original versions
of the files touched by the diff, to be able to do an inexpensive
three-way merge.

This operation makes only sense in a repository, since the index
information in the diff refers to blobs, which have to be present in
the current repository.

Therefore, teach ""git apply"" a mode to write out the result as an
index file to begin with, obviating the need for scripts to do it
themselves.

The sole user for --index-info is ""git am"" is converted to
use --build-fake-ancestor in this patch.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_7960.cpp,,,data/crawl/git/old_hunk_7960.cpp,data/crawl/git/new_hunk_7960.cpp,3,3,"printf(""%06o %s	"",patch->old_mode, sha1_to_hex(sha1_ptr));
		if;","make_cache_entry(patch->old_mode, sha1_ptr, name, 0, 0);","[""updateLog"", ""removeVariable"", ""updateContent"", ""addContent"", ""addVariable"", ""removeLog""]","[[""printf"", ""%06o"", ""%s"", ""sha1_to_hex"", ""if""], [""make_cache_entry"", ""name"", ""0"", ""0""]]",[-13777821902971928447],6123,5040.0,2
https://github.com/git/git/commit/cd547b4886c5338a70eb8a674bfc40eac5cab3d9,01 Oct 2007,"fetch/push: readd rsync support

We lost rsync support when transitioning from shell to C.  Support it
again (even if the transport is technically deprecated, some people just
do not have any chance to use anything else).

Also, add a test to t5510.  Since rsync transport is not configured by
default on most machines, and especially not such that you can write to
rsync://127.0.0.1$(pwd)/, it is disabled by default; you can enable it by
setting the environment variable TEST_RSYNC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/hunk_7949.cpp,,,data/crawl/git/old_hunk_7949.cpp,data/crawl/git/new_hunk_7949.cpp,-1,164,,"die (""Could not run rsync to get refs"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""run"", ""rsync"", ""to"", ""get"", ""refs""]]",[-1680571651316806381],6122,0.0,2
https://github.com/git/git/commit/cd547b4886c5338a70eb8a674bfc40eac5cab3d9,01 Oct 2007,"fetch/push: readd rsync support

We lost rsync support when transitioning from shell to C.  Support it
again (even if the transport is technically deprecated, some people just
do not have any chance to use anything else).

Also, add a test to t5510.  Since rsync transport is not configured by
default on most machines, and especially not such that you can write to
rsync://127.0.0.1$(pwd)/, it is disabled by default; you can enable it by
setting the environment variable TEST_RSYNC.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",363,data/crawl/git/hunk_7949.cpp,,,data/crawl/git/old_hunk_7949.cpp,data/crawl/git/new_hunk_7949.cpp,-1,148,,"die (""Could not make temporary directory"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""make"", ""temporary"", ""directory""]]",[7401961502993053969],6121,0.0,2
https://github.com/git/git/commit/ccfc02a30057a5fa7376e1fc8e8c3fe5478556f4,16 Oct 2007,"Fix compilation when NO_CURL is defined

There were a few places which did not cope well without curl.  This
fixes all of them.  We still need to link against the walker.o part
of the library as some parts of transport.o still call into there
even though we don't have HTTP support enabled.

If compiled with NO_CURL=1 we now get the following useful error
message:

  $ git-fetch http://www.example.com/git
  error: git was compiled without libcurl support.
  fatal: Don't know how to fetch from http://www.example.com/git

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/hunk_7940.cpp,,,data/crawl/git/old_hunk_7940.cpp,data/crawl/git/new_hunk_7940.cpp,7,-1,"die(""Cannot fetch from '%s' without curl ..."", transport->url);",,"[""removeLog""]","[[""die"", ""Cannot"", ""fetch"", ""from"", ""%s"", ""without"", ""curl"", ""transport"", ""url""], []]",[5742909372898188850],6120,0.0,2
https://github.com/git/git/commit/334f4831e5a779d42e521b770a26eae1ecb27e86,18 Oct 2007,"send-pack: don't update tracking refs on error

Previously, we updated the tracking refs (which match refs we
are pushing) while generating the list of refs to send.
However, at that point we don't know whether the refs were
accepted.

Instead, we now wait until we get a response code from the
server. If an error was indicated, we don't update any local
tracking refs. Technically some refs could have been updated
on the remote, but since the local ref update is just an
optimization to avoid an extra fetch, we are better off
erring on the side of correctness.

The user-visible message is now generated much later in the
program, and has been tweaked to make more sense.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",50,data/crawl/git/hunk_7925.cpp,,,data/crawl/git/old_hunk_7925.cpp,data/crawl/git/new_hunk_7925.cpp,-1,24,,"error(""Failed to delete"");","[""addLog""]","[[], [""error"", ""Failed"", ""to"", ""delete""]]",[677248472710611288],6119,108000.0,2
https://github.com/git/git/commit/546bb5823249678bc6ad11e65661d896ed83448a,21 Oct 2007,"Use the asyncronous function infrastructure to run the content filter.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",61,data/crawl/git/hunk_7901.cpp,,,data/crawl/git/old_hunk_7901.cpp,data/crawl/git/new_hunk_7901.cpp,14,-1,"error(""cannot create pipe to run external filter %s"", cmd);",,"[""removeLog""]","[[""error"", ""cannot"", ""create"", ""pipe"", ""to"", ""run"", ""external"", ""filter"", ""%s"", ""cmd""], []]",[-13999988256736183527],6118,0.0,2
https://github.com/git/git/commit/4d00bda2aa9dd8cd6ec4015832b80eb1273d46d7,02 Nov 2007,"make the pack index version configurable

It is a good idea to use pack index version 2 all the time since it has
proper protection against propagation of certain pack corruptions when
repacking which is not possible with index version 1, as demonstrated
in test t5302.

Hence this config option.

The default is still pack index version 1.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_7857.cpp,,,data/crawl/git/old_hunk_7857.cpp,data/crawl/git/new_hunk_7857.cpp,-1,6,,"die(""bad pack.indexversion=%d"", pack_idx_default_version);","[""addLog""]","[[], [""die"", ""bad"", ""pack"", ""indexversion"", ""%d"", ""pack_idx_default_version""]]",[-6202847426478760921],6117,0.0,2
https://github.com/git/git/commit/18f7c51cf921f7db021e012499456120f3f095a9,03 Nov 2007,"Build-in peek-remote, using transport infrastructure.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_7848.cpp,,,data/crawl/git/old_hunk_7848.cpp,data/crawl/git/new_hunk_7848.cpp,-1,14,,"printf(""%s	%s\n"", sha1_to_hex(ref->old_sha1), ref->name);;","[""addLog""]","[[], [""printf"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""ref"", ""old_sha1"", ""ref"", ""name""]]",[15075716309524597745],6116,32400.0,2
https://github.com/git/git/commit/18f7c51cf921f7db021e012499456120f3f095a9,03 Nov 2007,"Build-in peek-remote, using transport infrastructure.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_7847.cpp,,,data/crawl/git/old_hunk_7847.cpp,data/crawl/git/new_hunk_7847.cpp,16,-1,"printf(""%s	%s\n"", sha1_to_hex(ref->old_sha1), ref->name);;",,"[""removeLog""]","[[""printf"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""ref"", ""old_sha1"", ""ref"", ""name""], []]",[-15075716309524597745],6115,32400.0,2
https://github.com/git/git/commit/00ae82895e7f30e52ff12edc1076409c7c53d99e,04 Nov 2007,"errors: ""strict subset"" -> ""ancestor""

The term ""ancestor"" is a bit more intuitive (and more consistent with
the documentation) than the term ""strict subset"".

Also, remove superfluous ""ref"", capitalize, and add some carriage
returns, changing:

    error: remote 'refs/heads/master' is not a strict subset of local ref 'refs/heads/master'. maybe you are not up-to-date and need to pull first?
    error: failed to push to 'ssh://linux-nfs.org/~bfields/exports/git.git'

to:

    error: remote 'refs/heads/master' is not an ancestor of
    local 'refs/heads/master'.
    Maybe you are not up-to-date and need to pull first?
    error: failed to push to 'ssh://linux-nfs.org/~bfields/exports/git.git'

Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_7844.cpp,,,data/crawl/git/old_hunk_7844.cpp,data/crawl/git/new_hunk_7844.cpp,10,11,"error(""remote '%s' is not a strict ""
				      ""subset of local ref '%s'. ""
				      ""maybe you are not up-to-date and ""
				      ""need to pull first?"",
				      ref->name,
				      ref->peer_ref->name);","error(""remote '%s' is not an ancestor of\n""
				      ""local '%s'.\n""
				      ""Maybe you are not up-to-date and ""
				      ""need to pull first?"",
				      ref->name,
				      ref->peer_ref->name);","[""updateContent""]","[[""a"", ""strict"", ""subset"", ""of"", ""maybe"", ""ref""], [""an"", ""ancestor"", ""of\\n"", ""\\n"", ""Maybe""]]",[-2300796360634784439],6114,0.0,2
https://github.com/git/git/commit/93fc05eb9ef505a05d9ce9415177697449afc8ad,05 Nov 2007,"Split off the pretty print stuff into its own file

The file commit.c got quite large, but it does not have to be: the
code concerning pretty printing is pretty well contained.  In fact,
this commit just splits it off into pretty.c, leaving commit.c with
just 672 lines.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1443,data/crawl/git/hunk_7840.cpp,,,data/crawl/git/old_hunk_7840.cpp,data/crawl/git/new_hunk_7840.cpp,-1,509,,"die(""bad parent line in commit"");","[""addLog""]","[[], [""die"", ""bad"", ""parent"", ""line"", ""in"", ""commit""]]",[4756367968810073483],6113,104400.0,2
https://github.com/git/git/commit/93fc05eb9ef505a05d9ce9415177697449afc8ad,05 Nov 2007,"Split off the pretty print stuff into its own file

The file commit.c got quite large, but it does not have to be: the
code concerning pretty printing is pretty well contained.  In fact,
this commit just splits it off into pretty.c, leaving commit.c with
just 672 lines.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1443,data/crawl/git/hunk_7839.cpp,,,data/crawl/git/old_hunk_7839.cpp,data/crawl/git/new_hunk_7839.cpp,465,-1,"die(""bad parent line in commit"");",,"[""removeLog""]","[[""die"", ""bad"", ""parent"", ""line"", ""in"", ""commit""], []]",[-4756367968810073483],6112,104400.0,2
https://github.com/git/git/commit/ec640ed1cf1d62730555705ec18b785c43e81f62,05 Nov 2007,"remove dead code from the csum-file interface

The provided name argument is always constant and valid in every
caller's context, so no need to have an array of PATH_MAX chars to copy
it into when a simple pointer will do.  Unfortunately that means getting
rid of wascally wabbits too.

The 'error' field is also unused.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_7837.cpp,,,data/crawl/git/old_hunk_7837.cpp,data/crawl/git/new_hunk_7837.cpp,10,-1,"die(""you wascally wabbit, you"");",,"[""removeLog""]","[[""die"", ""you"", ""wascally"", ""wabbit"", ""you""], []]",[9219069277110239650],6111,104400.0,2
https://github.com/git/git/commit/cde75e59e1b2d8dd3ba49bc9034692dd06ee3907,09 Nov 2007,"--pretty=format: on-demand format expansion

Some of the --pretty=format placeholders expansions are expensive to
calculate.  This is made worse by the current code's use of
interpolate(), which requires _all_ placeholders are to be prepared
up front.

One way to speed this up is to check which placeholders are present
in the format string and to prepare only the expansions that are
needed.  That still leaves the allocation overhead of interpolate().

Another way is to use a callback based approach together with the
strbuf library to keep allocations to a minimum and avoid string
copies.  That's what this patch does.  It introduces a new strbuf
function, strbuf_expand().

The function takes a format string, list of placeholder strings,
a user supplied function 'fn', and an opaque pointer 'context'
to tell 'fn' what thingy to operate on.

The function 'fn' is expected to accept a strbuf, a parsed
placeholder string and the 'context' pointer, and append the
interpolated value for the 'context' thingy, according to the
format specified by the placeholder.

Thanks to Pierre Habouzit for his suggestion to use strchrnul() and
the code surrounding its callsite.  And thanks to Junio for most of
this commit message. :)

Here my measurements of most of Paul Mackerras' test cases that
highlighted the performance problem (best of three runs):

(master)
$ time git log --pretty=oneline >/dev/null

real    0m0.390s
user    0m0.340s
sys     0m0.040s

(master)
$ time git log --pretty=raw >/dev/null

real    0m0.434s
user    0m0.408s
sys     0m0.016s

(master)
$ time git log --pretty=""format:%H {%P} %ct"" >/dev/null

real    0m1.347s
user    0m0.080s
sys     0m1.256s

(interp_find_active -- Dscho)
$ time ./git log --pretty=""format:%H {%P} %ct"" >/dev/null

real    0m0.694s
user    0m0.020s
sys     0m0.672s

(strbuf_expand -- this patch)
$ time ./git log --pretty=""format:%H {%P} %ct"" >/dev/null

real    0m0.395s
user    0m0.352s
sys     0m0.028s

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7811.cpp,,,data/crawl/git/old_hunk_7811.cpp,data/crawl/git/new_hunk_7811.cpp,69,-1,"die(""invalid interp table!"");",,"[""removeLog""]","[[""die"", ""invalid"", ""interp"", ""table""], []]",[6654303790039194692],6110,2880.0,2
https://github.com/git/git/commit/8f67f8aefb1b751073f8b36fae8be8f72eb93f4a,12 Nov 2007,"Make the diff_options bitfields be an unsigned with explicit masks.

reverse_diff was a bit-value in disguise, it's merged in the flags now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",304,data/crawl/git/hunk_7801.cpp,,,data/crawl/git/old_hunk_7801.cpp,data/crawl/git/new_hunk_7801.cpp,3,3,"fputs(diff_get_color(opt->diffopt.color_diff, DIFF_COMMIT),
		      stdout);","fputs(diff_get_color_opt(&opt->diffopt, DIFF_COMMIT), stdout);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""diff_get_color"", ""opt"", ""color_diff""], [""diff_get_color_opt"", ""&opt""]]",[-13659688181993164244],6109,0.0,2
https://github.com/git/git/commit/8f67f8aefb1b751073f8b36fae8be8f72eb93f4a,12 Nov 2007,"Make the diff_options bitfields be an unsigned with explicit masks.

reverse_diff was a bit-value in disguise, it's merged in the flags now.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",304,data/crawl/git/hunk_7794.cpp,,,data/crawl/git/old_hunk_7794.cpp,data/crawl/git/new_hunk_7794.cpp,2,2,"printf(""%stag %s%s\n\n"",
					diff_get_color(rev.diffopt.color_diff,
						DIFF_COMMIT),
					t->tag,
					diff_get_color(rev.diffopt.color_diff,
						DIFF_RESET));","printf(""%stag %s%s\n\n"",
					diff_get_color_opt(&rev.diffopt, DIFF_COMMIT),
					t->tag,
					diff_get_color_opt(&rev.diffopt, DIFF_RESET));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""diff_get_color"", ""rev"", ""color_diff"", ""diff_get_color"", ""rev"", ""color_diff""], [""diff_get_color_opt"", ""&rev"", ""diff_get_color_opt"", ""&rev""]]",[-20563101288969180752],6108,0.0,2
https://github.com/git/git/commit/396865859918e9c7bf8ce74aae137c57da134610,19 Nov 2007,"Make builtin-tag.c use parse_options.

Also, this removes those tests ensuring that repeated
-m options don't allocate memory more than once, because now
this is done after parsing options, using the last one
when more are given. The same for -F.

Signed-off-by: Carlos Rica <jasampler@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",149,data/crawl/git/hunk_7762.cpp,,,data/crawl/git/old_hunk_7762.cpp,data/crawl/git/new_hunk_7762.cpp,60,53,"die(""cannot read %s"", argv[i]);","die(""cannot read %s"", msgfile);","[""updateVariable"", ""moveVariable"", ""removeVariable""]","[[""argv[i]""], [""msgfile""]]",[6944018412522166514],6107,0.0,2
https://github.com/git/git/commit/f5bbc3225c4b073a7ff3218164a0c820299bc9c6,23 Nov 2007,"Port git commit to C.

This makes git commit a builtin and moves git-commit.sh to
contrib/examples.  This also removes the git-runstatus
helper, which was mostly just a git-status.sh implementation detail.

Signed-off-by: Kristian Høgsberg <krh@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",630,data/crawl/git/hunk_7757.cpp,,,data/crawl/git/old_hunk_7757.cpp,data/crawl/git/new_hunk_7757.cpp,-1,277,,"die(""invalid commit: %s\n"", use_message);","[""addLog""]","[[], [""die"", ""invalid"", ""commit"", ""%s\\n"", ""use_message""]]",[333822369845314492],6106,0.0,2
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7659.cpp,,,data/crawl/git/old_hunk_7659.cpp,data/crawl/git/new_hunk_7659.cpp,47,-1,"fputs(reset, stdout);",,"[""removeLog""]","[[""fputs"", ""reset"", ""stdout""], []]",[19102739776393221864],6105,0.0,2
https://github.com/git/git/commit/c1795bb08aae9fb7e4dc1a01e292b85e59b1c640,14 Dec 2007,"Unify whitespace checking

This commit unifies three separate places where whitespace checking was
performed:

 - the whitespace checking previously done in builtin-apply.c is
extracted into a function in ws.c

 - the equivalent logic in ""git diff"" is removed

 - the emit_line_with_ws() function is also removed because that also
rechecks the whitespace, and its functionality is rolled into ws.c

The new function is called check_and_emit_line() and it does two things:
checks a line for whitespace errors and optionally emits it. The checking
is based on lines of content rather than patch lines (in other words, the
caller must strip the leading ""+"" or ""-""); this was suggested by Junio on
the mailing list to allow for a future extension to ""git show"" to display
whitespace errors in blobs.

At the same time we teach it to report all classes of whitespace errors
found for a given line rather than reporting only the first found error.

Signed-off-by: Wincent Colaiuta <win@wincent.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",303,data/crawl/git/hunk_7659.cpp,,,data/crawl/git/old_hunk_7659.cpp,data/crawl/git/new_hunk_7659.cpp,45,-1,"fputs(set, stdout);",,"[""removeLog""]","[[""fputs"", ""set"", ""stdout""], []]",[12591320087386433989],6104,0.0,2
https://github.com/git/git/commit/d7e92806cdc5ca78c4db879c68f91c70ff9e1ade,15 Dec 2007,"Move fetch_ref from http-push.c and http-walker.c to http.c

Make the necessary changes to be ok with their difference, and rename the
function http_fetch_ref.

Signed-off-by: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/hunk_7634.cpp,,,data/crawl/git/old_hunk_7634.cpp,data/crawl/git/new_hunk_7634.cpp,73,-1,"error(""Couldn't get %s for %s\n%s"",
				    url, ref, curl_errorstr);",,"[""removeLog""]","[[""error"", ""Couldn"", ""t"", ""get"", ""%s"", ""for"", ""%s\\n%s"", ""url"", ""ref"", ""curl_errorstr""], []]",[4403159742839886129],6103,0.0,2
https://github.com/git/git/commit/fa9dcf80e1048ea996349891a885ac325019fcac,13 Jan 2008,"Fix performance regression for partial commits

When running ""git commit paths"" to create a partial commit, we
used to carefully build the temporary index so that we do not
lose the cached stat information.  The rewrite of the command in
C lost it by carelessly using read_tree().

This resurrects the earlier behaviour to keep the cached stat
information as much as possible by using one-tree merge logic.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_7599.cpp,,,data/crawl/git/old_hunk_7599.cpp,data/crawl/git/new_hunk_7599.cpp,-1,22,,"die(""failed to unpack HEAD tree object"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""unpack"", ""HEAD"", ""tree"", ""object""]]",[-14559189493892719456],6102,36720.0,2
https://github.com/git/git/commit/7a51ed66f653c248993b3c4a61932e47933d835e,21 Jan 2008,"Make on-disk index representation separate from in-core one

This converts the index explicitly on read and write to its on-disk
format, allowing the in-core format to contain more flags, and be
simpler.

In particular, the in-core format is now host-endian (as opposed to the
on-disk one that is network endian in order to be able to be shared
across machines) and as a result we can dispense with all the
htonl/ntohl on accesses to the cache_entry fields.

This will make it easier to make use of various temporary flags that do
not exist in the on-disk format.

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>",386,data/crawl/git/hunk_7553.cpp,,,data/crawl/git/old_hunk_7553.cpp,data/crawl/git/new_hunk_7553.cpp,1,1,"printf(""%s%06o %s %d\t"",
		       tag,
		       ntohl(ce->ce_mode),
		       abbrev ? find_unique_abbrev(ce->sha1,abbrev)
				: sha1_to_hex(ce->sha1),
		       ce_stage(ce));","printf(""%s%06o %s %d\t"",
		       tag,
		       ce->ce_mode,
		       abbrev ? find_unique_abbrev(ce->sha1,abbrev)
				: sha1_to_hex(ce->sha1),
		       ce_stage(ce));","[""removeVariable""]","[[""ntohl""], []]",[5902733383000589524],6101,0.0,2
https://github.com/git/git/commit/3a9f0f41db87e197708f84aeb2487bc983f99c9c,26 Jan 2008,"parse-options: catch likely typo in presense of aggregated options.

If options are aggregated, and that the whole token is an exact
prefix of a long option that is longer than 2 letters, reject
it.  This is to prevent a common typo:

	$ git commit -amend

to get interpreted as ""commit all with message 'end'"".

The typo check isn't performed if there is no aggregation,
because the stuck form is the recommended one.  If we have `-o`
being a valid short option that takes an argument, and --option
a long one, then we _MUST_ accept -option as ""'o' option with
argument 'ption'"", which is our official recommended form.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_7546.cpp,,,data/crawl/git/old_hunk_7546.cpp,data/crawl/git/new_hunk_7546.cpp,-1,9,,"error (""did you mean `--%s` (with two dashes ?)"", arg);","[""addLog""]","[[], [""error"", ""did"", ""you"", ""mean"", ""%s"", ""with"", ""two"", ""dashes"", ""arg""]]",[-21030662975124121772],6100,0.0,2
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_7516.cpp,,,data/crawl/git/old_hunk_7516.cpp,data/crawl/git/new_hunk_7516.cpp,-1,24,,"fprintf(fp, ""# %s\n"", only_include_assumed);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s\\n"", ""only_include_assumed""]]",[5187317682148199510],6099,54000.0,2
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_7516.cpp,,,data/crawl/git/old_hunk_7516.cpp,data/crawl/git/new_hunk_7516.cpp,-1,21,,"fprintf(fp, ""be kept.\n""
				""# You can remove them yourself if you want to)\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""be"", ""kept"", ""\\n"", ""You"", ""can"", ""remove"", ""them"", ""yourself"", ""if"", ""you"", ""want"", ""to"", ""\\n""]]",[-22314877347187529993],6098,32400.0,2
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_7516.cpp,,,data/crawl/git/old_hunk_7516.cpp,data/crawl/git/new_hunk_7516.cpp,-1,19,,"fprintf(fp, ""not be included)\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""not"", ""be"", ""included"", ""\\n""]]",[191829790627588797],6097,32400.0,2
https://github.com/git/git/commit/ec84bd000a89e657b36136ec927144cd13f26079,06 Feb 2008,"git-commit: Refactor creation of log message.

This patch moves the code of run_commit, up to writing the trees, editing
the message and running the commit-msg hook to prepare_log_message.  It also
renames the latter to prepare_to_commit.

This simplifies a little the code for the next patch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_7516.cpp,,,data/crawl/git/old_hunk_7516.cpp,data/crawl/git/new_hunk_7516.cpp,-1,5,,"fprintf(fp,
				""#\n""
				""# It looks like you may be committing a MERGE.\n""
				""# If this is not correct, please remove the file\n""
				""#	%s\n""
				""# and try again.\n""
				""#\n"",
				git_path(""MERGE_HEAD""));","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\n"", ""It"", ""looks"", ""like"", ""you"", ""may"", ""be"", ""committing"", ""a"", ""MERGE"", ""\\n"", ""If"", ""this"", ""is"", ""not"", ""correct"", ""please"", ""remove"", ""the"", ""file\\n"", ""%s\\n"", ""and"", ""try"", ""again"", ""\\n"", ""\\n"", ""git_path"", ""MERGE_HEAD""]]",[8003666030470462448],6096,54000.0,2
https://github.com/git/git/commit/21e5ad50fc5e7277c74cfbb3cf6502468e840f86,06 Feb 2008,"safecrlf: Add mechanism to warn about irreversible crlf conversions

CRLF conversion bears a slight chance of corrupting data.
autocrlf=true will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.

If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
git that this file is binary and git will handle the file
appropriately.

Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.

This patch adds a mechanism that can either warn the user about
an irreversible conversion or can even refuse to convert.  The
mechanism is controlled by the variable core.safecrlf, with the
following values:

 - false: disable safecrlf mechanism
 - warn: warn about irreversible conversions
 - true: refuse irreversible conversions

The default is to warn.  Users are only affected by this default
if core.autocrlf is set.  But the current default of git is to
leave core.autocrlf unset, so users will not see warnings unless
they deliberately chose to activate the autocrlf mechanism.

The safecrlf mechanism's details depend on the git command.  The
general principles when safecrlf is active (not false) are:

 - we warn/error out if files in the work tree can modified in an
   irreversible way without giving the user a chance to backup the
   original file.

 - for read-only operations that do not modify files in the work tree
   we do not not print annoying warnings.

There are exceptions.  Even though...

 - ""git add"" itself does not touch the files in the work tree, the
   next checkout would, so the safety triggers;

 - ""git apply"" to update a text file with a patch does touch the files
   in the work tree, but the operation is about text files and CRLF
   conversion is about fixing the line ending inconsistencies, so the
   safety does not trigger;

 - ""git diff"" itself does not touch the files in the work tree, it is
   often run to inspect the changes you intend to next ""git add"".  To
   catch potential problems early, safety triggers.

The concept of a safety check was originally proposed in a similar
way by Linus Torvalds.  Thanks to Dimitry Potapov for insisting
on getting the naked LF/autocrlf=true case right.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>",200,data/crawl/git/hunk_7514.cpp,,,data/crawl/git/old_hunk_7514.cpp,data/crawl/git/new_hunk_7514.cpp,-1,18,,"die(""CRLF would be replaced by LF in %s."", path);","[""addLog""]","[[], [""die"", ""CRLF"", ""would"", ""be"", ""replaced"", ""by"", ""LF"", ""in"", ""%s"", ""path""]]",[3131313320454241892],6095,0.0,2
https://github.com/git/git/commit/21e5ad50fc5e7277c74cfbb3cf6502468e840f86,06 Feb 2008,"safecrlf: Add mechanism to warn about irreversible crlf conversions

CRLF conversion bears a slight chance of corrupting data.
autocrlf=true will convert CRLF to LF during commit and LF to
CRLF during checkout.  A file that contains a mixture of LF and
CRLF before the commit cannot be recreated by git.  For text
files this is the right thing to do: it corrects line endings
such that we have only LF line endings in the repository.
But for binary files that are accidentally classified as text the
conversion can corrupt data.

If you recognize such corruption early you can easily fix it by
setting the conversion type explicitly in .gitattributes.  Right
after committing you still have the original file in your work
tree and this file is not yet corrupted.  You can explicitly tell
git that this file is binary and git will handle the file
appropriately.

Unfortunately, the desired effect of cleaning up text files with
mixed line endings and the undesired effect of corrupting binary
files cannot be distinguished.  In both cases CRLFs are removed
in an irreversible way.  For text files this is the right thing
to do because CRLFs are line endings, while for binary files
converting CRLFs corrupts data.

This patch adds a mechanism that can either warn the user about
an irreversible conversion or can even refuse to convert.  The
mechanism is controlled by the variable core.safecrlf, with the
following values:

 - false: disable safecrlf mechanism
 - warn: warn about irreversible conversions
 - true: refuse irreversible conversions

The default is to warn.  Users are only affected by this default
if core.autocrlf is set.  But the current default of git is to
leave core.autocrlf unset, so users will not see warnings unless
they deliberately chose to activate the autocrlf mechanism.

The safecrlf mechanism's details depend on the git command.  The
general principles when safecrlf is active (not false) are:

 - we warn/error out if files in the work tree can modified in an
   irreversible way without giving the user a chance to backup the
   original file.

 - for read-only operations that do not modify files in the work tree
   we do not not print annoying warnings.

There are exceptions.  Even though...

 - ""git add"" itself does not touch the files in the work tree, the
   next checkout would, so the safety triggers;

 - ""git apply"" to update a text file with a patch does touch the files
   in the work tree, but the operation is about text files and CRLF
   conversion is about fixing the line ending inconsistencies, so the
   safety does not trigger;

 - ""git diff"" itself does not touch the files in the work tree, it is
   often run to inspect the changes you intend to next ""git add"".  To
   catch potential problems early, safety triggers.

The concept of a safety check was originally proposed in a similar
way by Linus Torvalds.  Thanks to Dimitry Potapov for insisting
on getting the naked LF/autocrlf=true case right.

Signed-off-by: Steffen Prohaska <prohaska@zib.de>",200,data/crawl/git/hunk_7514.cpp,,,data/crawl/git/old_hunk_7514.cpp,data/crawl/git/new_hunk_7514.cpp,-1,16,,"warning(""CRLF will be replaced by LF in %s."", path);","[""addLog""]","[[], [""warning"", ""CRLF"", ""will"", ""be"", ""replaced"", ""by"", ""LF"", ""in"", ""%s"", ""path""]]",[1196836515131853272],6094,0.0,2
https://github.com/git/git/commit/e496c00348140e73bdd202443df52192f6928541,10 Feb 2008,"Move create_branch into a library file

You can also create branches, in exactly the same way, with checkout -b.

This introduces branch.{c,h} library files for doing porcelain-level
operations on branches (such as creating them with their appropriate
default configuration).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",288,data/crawl/git/hunk_7495.cpp,,,data/crawl/git/old_hunk_7495.cpp,data/crawl/git/new_hunk_7495.cpp,-1,64,,"printf(""Branch %s set up to track remote branch %s.\n"",
			       new_ref, orig_ref);","[""addLog""]","[[], [""printf"", ""Branch"", ""%s"", ""set"", ""up"", ""to"", ""track"", ""remote"", ""branch"", ""%s"", ""\\n"", ""new_ref"", ""orig_ref""]]",[-13298520321536466144],6093,154080.0,2
https://github.com/git/git/commit/e496c00348140e73bdd202443df52192f6928541,10 Feb 2008,"Move create_branch into a library file

You can also create branches, in exactly the same way, with checkout -b.

This introduces branch.{c,h} library files for doing porcelain-level
operations on branches (such as creating them with their appropriate
default configuration).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",288,data/crawl/git/hunk_7495.cpp,,,data/crawl/git/old_hunk_7495.cpp,data/crawl/git/new_hunk_7495.cpp,-1,45,,"error(""Tracking not set up: name too long: %s"",
				new_ref);","[""addLog""]","[[], [""error"", ""Tracking"", ""not"", ""set"", ""up"", ""name"", ""too"", ""long"", ""%s"", ""new_ref""]]",[18924370032151710907],6092,154080.0,2
https://github.com/git/git/commit/79a1e6b432d7d7ffaf2079d4cf895583502ca923,17 Feb 2008,"checkout: notice when the switched branch is behind or forked

When you are switching to a branch that is marked to merge from
somewhere else, e.g. when you have:

    [branch ""next""]
            remote = upstream
            merge = refs/heads/next
    [remote ""upstream""]
            url = ...
            fetch = refs/heads/*:refs/remotes/linus/*

and you say ""git checkout next"", the branch you checked out
may be behind, and you may want to update from the upstream
before continuing to work.

This patch makes the command to check the upstream (in this
example, ""refs/remotes/linus/next"") and our branch ""next"", and:

    (1) if they match, nothing happens;

    (2) if you are ahead (i.e. the upstream is a strict ancestor
        of you), one line message tells you so;

    (3) otherwise, you are either behind or you and the upstream
        have forked.  One line message will tell you which and
        then you will see a ""log --pretty=oneline --left-right"".

We could enhance this with an option that tells the command to
check if there is no local change, and automatically fast
forward when you are truly behind.  But I ripped out that change
because I was unsure what the right way should be to allow users
to control it (issues include that checkout should not become
automatically interactive).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",136,data/crawl/git/hunk_7474.cpp,,,data/crawl/git/old_hunk_7474.cpp,data/crawl/git/new_hunk_7474.cpp,-1,26,,"error(""'%s' not string"", var);","[""addLog""]","[[], [""error"", ""%s"", ""not"", ""string"", ""var""]]",[635716111731425706],6091,0.0,2
https://github.com/git/git/commit/f7de5a56b75109e1d6651ee2b5bf7f496a5eb18b,19 Feb 2008,"reachable.c::process_tree/blob: check for NULL

As these functions are directly called with the result
from lookup_tree/blob, they must handle NULL.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_7449.cpp,,,data/crawl/git/old_hunk_7449.cpp,data/crawl/git/new_hunk_7449.cpp,-1,4,,"die(""bad tree object"");","[""addLog""]","[[], [""die"", ""bad"", ""tree"", ""object""]]",[-4368289389156625390],6090,0.0,2
https://github.com/git/git/commit/f7de5a56b75109e1d6651ee2b5bf7f496a5eb18b,19 Feb 2008,"reachable.c::process_tree/blob: check for NULL

As these functions are directly called with the result
from lookup_tree/blob, they must handle NULL.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_7448.cpp,,,data/crawl/git/old_hunk_7448.cpp,data/crawl/git/new_hunk_7448.cpp,-1,4,,"die(""bad blob object"");","[""addLog""]","[[], [""die"", ""bad"", ""blob"", ""object""]]",[-5363385443103342885],6089,0.0,2
https://github.com/git/git/commit/dec38c81657f02624752a65c24d72613316713f5,19 Feb 2008,"check return value from parse_commit() in various functions

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_7445.cpp,,,data/crawl/git/old_hunk_7445.cpp,data/crawl/git/new_hunk_7445.cpp,-1,4,,"die(""invalid commit"");","[""addLog""]","[[], [""die"", ""invalid"", ""commit""]]",[-5725474708587731184],6088,0.0,2
https://github.com/git/git/commit/569012bf91ddb25220483e8912e079ce8a501525,19 Feb 2008,"Clean up reporting differences on branch switch

This also changes it such that:

$ git checkout

will give the same information without changing branches. This is good
for finding out if the fetch you did recently had anything to say
about the branch you've been on, whose name you don't remember at the
moment.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_7444.cpp,,,data/crawl/git/old_hunk_7444.cpp,data/crawl/git/new_hunk_7444.cpp,26,-1,"error(""'%s' not string"", var);",,"[""removeLog""]","[[""error"", ""%s"", ""not"", ""string"", ""var""], []]",[-635716111731425706],6087,0.0,2
https://github.com/git/git/commit/1468bd47833c6ec3c85620d6af1d910e9378f714,25 Feb 2008,"Use a single implementation and API for copy_file()

Originally by Kristian Hï¿œgsberg; I fixed the conversion of rerere, which
had a different API.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_7412.cpp,,,data/crawl/git/old_hunk_7412.cpp,data/crawl/git/new_hunk_7412.cpp,-1,17,,"error(""%s: write error: %s"", dst, strerror(errno));","[""addLog""]","[[], [""error"", ""%s"", ""write"", ""error"", ""%s"", ""dst"", ""strerror"", ""errno""]]",[36197878814034625690],6086,174960.0,2
https://github.com/git/git/commit/552bcac3f9f34833cf546f8c197da4c1985a0b84,26 Feb 2008,"Add API access to shortlog

Shortlog is gives a pretty simple API for cases where you're already
identifying all of the individual commits. Make this available to
other code instead of requiring them to use the revision API and
command line.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",174,data/crawl/git/hunk_7405.cpp,,,data/crawl/git/old_hunk_7405.cpp,data/crawl/git/new_hunk_7405.cpp,22,26,"printf(""%6d\t%s\n"", onelines->nr, list.items[i].path);","printf(""%6d\t%s\n"", onelines->nr, log->list.items[i].path);","[""addVariable""]","[[], [""log""]]",[7513213165417213733],6085,0.0,2
https://github.com/git/git/commit/552bcac3f9f34833cf546f8c197da4c1985a0b84,26 Feb 2008,"Add API access to shortlog

Shortlog is gives a pretty simple API for cases where you're already
identifying all of the individual commits. Make this available to
other code instead of requiring them to use the revision API and
command line.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>",174,data/crawl/git/hunk_7403.cpp,,,data/crawl/git/old_hunk_7403.cpp,data/crawl/git/new_hunk_7403.cpp,3,3,"insert_one_record(list, author + 8, oneline);","insert_one_record(log, author + 8, oneline);","[""updateVariable""]","[[""list""], [""log""]]",[1542167839817907897],6084,0.0,2
https://github.com/git/git/commit/271b8d25b25e49b367087440e093e755e5f35aa9,26 Feb 2008,"builtin-fsck: move away from object-refs to fsck_walk

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_7395.cpp,,,data/crawl/git/old_hunk_7395.cpp,data/crawl/git/new_hunk_7395.cpp,-1,10,,"printf(""broken link from %7s %s\n"",
			   typename(parent->type), sha1_to_hex(parent->sha1));","[""addLog""]","[[], [""printf"", ""broken"", ""link"", ""from"", ""%7s"", ""%s\\n"", ""typename"", ""parent"", ""type"", ""sha1_to_hex"", ""parent"", ""sha1""]]",[8409268443830626518],6083,0.0,2
https://github.com/git/git/commit/ba002f3b28ab9febea432d4c415dbe581836d9a0,26 Feb 2008,"builtin-fsck: move common object checking code to fsck.c

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",492,data/crawl/git/hunk_7390.cpp,,,data/crawl/git/old_hunk_7390.cpp,data/crawl/git/new_hunk_7390.cpp,202,-1,"printf(""bad commit date in %s\n"",
		       sha1_to_hex(commit->object.sha1));",,"[""removeLog""]","[[""printf"", ""bad"", ""commit"", ""date"", ""in"", ""%s\\n"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""], []]",[-4452104212873104058],6082,15840.0,2
https://github.com/git/git/commit/5f4347bba39ddb147b06913ac263fc46954d2d0b,01 Mar 2008,"add storage size output to 'git verify-pack -v'

This can possibly break external scripts that depend on the previous
output, but those script can't possibly be critical to Git usage, and
fixing them should be trivial.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_7363.cpp,,,data/crawl/git/old_hunk_7363.cpp,data/crawl/git/new_hunk_7363.cpp,3,3,"printf(""%-6s %lu %""PRIuMAX""\n"",
			       type, size, (uintmax_t)offset);","printf(""%-6s %lu %lu %""PRIuMAX""\n"",
			       type, size, store_size, (uintmax_t)offset);","[""updateContent"", ""addVariable""]","[[], [""%lu"", ""store_size""]]",[4351643544696135770],6081,0.0,2
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_7355.cpp,,,data/crawl/git/old_hunk_7355.cpp,data/crawl/git/new_hunk_7355.cpp,14,-1,"printf(""undefined\n"");",,"[""removeLog""]","[[""printf"", ""undefined\\n""], []]",[-13857179632628051140],6080,0.0,2
https://github.com/git/git/commit/da2478dbb000436b79e813ba7f243d6042f26e66,03 Mar 2008,"describe --always: fall back to showing an abbreviated object name

Some callers may find it useful if ""git describe"" always gave back a
string that can be used as a shorter name for a commit object, rather than
checking its exit status (while squelching its error message, which could
potentially talk about more grave errors that should not be squelched) and
implementing a fallback themselves.

This teaches describe/name-rev a new option, --always, to use an
abbreviated object name when no tags or refs to use is found.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",76,data/crawl/git/hunk_7355.cpp,,,data/crawl/git/old_hunk_7355.cpp,data/crawl/git/new_hunk_7355.cpp,12,-1,"printf(""%s\n"", name);",,"[""removeLog""]","[[""printf"", ""%s\\n"", ""name""], []]",[-9215796307133573166],6079,0.0,2
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,78,,"die(""invalid blob object"");","[""addLog""]","[[], [""die"", ""invalid"", ""blob"", ""object""]]",[-13820003109678427625],6078,3600.0,2
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,71,,"die(""failed to write object"");","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""object""]]",[-7008615597472179642],6077,3600.0,2
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,44,,"die(""Error on reachable objects of %s"", sha1_to_hex(obj->sha1));","[""addLog""]","[[], [""die"", ""Error"", ""on"", ""reachable"", ""objects"", ""of"", ""%s"", ""sha1_to_hex"", ""obj"", ""sha1""]]",[14196641705019683526],6076,3600.0,2
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,30,,"die(""object type mismatch"");","[""addLog""]","[[], [""die"", ""object"", ""type"", ""mismatch""]]",[-5760857528678889796],6075,3600.0,2
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7335.cpp,,,data/crawl/git/old_hunk_7335.cpp,data/crawl/git/new_hunk_7335.cpp,-1,17,,"die(""failed to write object %s"", sha1_to_hex(obj->sha1));","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""object"", ""%s"", ""sha1_to_hex"", ""obj"", ""sha1""]]",[-6895037254374087973],6074,3600.0,2
https://github.com/git/git/commit/b41860bf28a16ad6015eb0c55dc95602f1235640,05 Mar 2008,"unpack-objects: prevent writing of inconsistent objects

This patch introduces a strict mode, which ensures that:
- no malformed object will be written
- no object with broken links will be written

The patch ensures this by delaying the write of all non blob object.
These object are written, after all objects they link to are written.

An error can only result in unreferenced objects.

Signed-off-by: Martin Koegler <mkoegler@auto.tuwien.ac.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_7334.cpp,,,data/crawl/git/old_hunk_7334.cpp,data/crawl/git/new_hunk_7334.cpp,-1,10,,"die(""object %s tried to add buffer twice!"", sha1_to_hex(object->sha1));","[""addLog""]","[[], [""die"", ""object"", ""%s"", ""tried"", ""to"", ""add"", ""buffer"", ""twice"", ""sha1_to_hex"", ""object"", ""sha1""]]",[-10679620190162992623],6073,3600.0,2
https://github.com/git/git/commit/1fb328947c8e3ace9df7d2d5374e26e2510a4e93,08 Mar 2008,"git-clean: correct printing relative path

When the given path contains '..' then git-clean incorrectly printed names
of files. This patch changes cmd_clean to use quote_path_relative().
Also, ""failed to remove ..."" message used absolutely path, but not it is
corrected to use relative path.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_7333.cpp,,,data/crawl/git/old_hunk_7333.cpp,data/crawl/git/new_hunk_7333.cpp,27,24,"printf(""Would remove %s\n"",
				       ent->name + prefix_offset);","printf(""Would remove %s\n"", qname);","[""removeVariable"", ""addVariable""]","[[""ent"", ""name"", ""prefix_offset""], [""qname""]]",[9167277983642731493],6072,0.0,2
https://github.com/git/git/commit/69099d6bedb0217d7c35f7202acd6185551d762f,12 Mar 2008,"help: implement multi-valued ""man.viewer"" config option

This allows multiple viewer candidates to be listed in the configuration
file, like this:

        [man]
                viewer = woman
                viewer = konqueror
                viewer = man

The candidates are tried in the order listed in the configuration file,
and the first suitable one (e.g. konqueror cannot be used outside windowed
environment) is used.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",191,data/crawl/git/hunk_7322.cpp,,,data/crawl/git/old_hunk_7322.cpp,data/crawl/git/new_hunk_7322.cpp,-1,38,,"fprintf(stderr,
			""emacsclient version '%d' too old (< 22).\n"",
			version);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""emacsclient"", ""version"", ""%d"", ""too"", ""old"", ""22"", ""\\n"", ""version""]]",[-3417096826747127833],6071,0.0,2
https://github.com/git/git/commit/69099d6bedb0217d7c35f7202acd6185551d762f,12 Mar 2008,"help: implement multi-valued ""man.viewer"" config option

This allows multiple viewer candidates to be listed in the configuration
file, like this:

        [man]
                viewer = woman
                viewer = konqueror
                viewer = man

The candidates are tried in the order listed in the configuration file,
and the first suitable one (e.g. konqueror cannot be used outside windowed
environment) is used.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",191,data/crawl/git/hunk_7322.cpp,,,data/crawl/git/old_hunk_7322.cpp,data/crawl/git/new_hunk_7322.cpp,-1,29,,"fprintf(stderr, ""Failed to parse emacsclient version.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Failed"", ""to"", ""parse"", ""emacsclient"", ""version"", ""\\n""]]",[-21724683284417682690],6070,0.0,2
https://github.com/git/git/commit/69099d6bedb0217d7c35f7202acd6185551d762f,12 Mar 2008,"help: implement multi-valued ""man.viewer"" config option

This allows multiple viewer candidates to be listed in the configuration
file, like this:

        [man]
                viewer = woman
                viewer = konqueror
                viewer = man

The candidates are tried in the order listed in the configuration file,
and the first suitable one (e.g. konqueror cannot be used outside windowed
environment) is used.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Tested-by: Xavier Maillard <xma@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",191,data/crawl/git/hunk_7322.cpp,,,data/crawl/git/old_hunk_7322.cpp,data/crawl/git/new_hunk_7322.cpp,-1,16,,"fprintf(stderr, ""Failed to start emacsclient.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Failed"", ""to"", ""start"", ""emacsclient"", ""\\n""]]",[-16908381944583080980],6069,0.0,2
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7301.cpp,,,data/crawl/git/old_hunk_7301.cpp,data/crawl/git/new_hunk_7301.cpp,12,13,"fputs(file->print_name, stdout);","fputs(file->print_name, options->file);","[""removeVariable"", ""addVariable""]","[[""stdout""], [""options"", ""file""]]",[9565916894071526156],6068,0.0,2
https://github.com/git/git/commit/c0c77734bf313455364b3be7d3537d40e1138bcc,14 Mar 2008,"Write diff output to a file in struct diff_options

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",309,data/crawl/git/hunk_7296.cpp,,,data/crawl/git/old_hunk_7296.cpp,data/crawl/git/new_hunk_7296.cpp,3,3,"printf(""%s--- %s%s%s\n"",
		       meta, ecbdata->label_path[0], reset, name_a_tab);","fprintf(ecbdata->file, ""%s--- %s%s%s\n"",
			meta, ecbdata->label_path[0], reset, name_a_tab);","[""updateLog"", ""addVariable""]","[[""printf""], [""fprintf"", ""file"", ""ecbdata""]]",[-4233827762050023452],6067,0.0,2
https://github.com/git/git/commit/c091b3d415f95d3e4e62acddb084e211af46acbf,26 Mar 2008,"Tighten refspec processing

This changes the pattern matching code to not store the required final
/ before the *, and then to require each side to be a valid ref (or
empty). In particular, any refspec that looks like it should be a
pattern but doesn't quite meet the requirements will be found to be
invalid as a fallback non-pattern.

This was cherry picked from commit ef00d15 (Tighten refspec processing,
2008-03-17), and two fix-up commits 46220ca (remote.c: Fix overtight
refspec validation, 2008-03-20) and 7d19da4 (refspec: allow colon-less
wildcard ""refs/category/*"", 2008-03-25) squashed in.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",256,data/crawl/git/hunk_7283.cpp,,,data/crawl/git/old_hunk_7283.cpp,data/crawl/git/new_hunk_7283.cpp,5,8,"die(""* refusing to create funny ref '%s' locally"",
			    rm->peer_ref->name);","error(""* Ignoring funny ref '%s' locally"",
				      (*rmp)->peer_ref->name);","[""updateVariable"", ""updateLog"", ""moveVariable"", ""updateContent"", ""addVariable""]","[[""die"", ""refusing"", ""to"", ""create"", ""rm""], [""error"", ""Ignoring"", ""*rmp""]]",[19676948840073081451],6066,5040.0,2
https://github.com/git/git/commit/e0aaf781f656671694a0aa04d8a665bd4d7956e6,31 Mar 2008,"mktag.c: improve verification of tagger field and tests

Since nearly its birth, git's tags have included a ""tagger"" field which
describes the name of tagger, email of tagger, and date and time of tagging.
But, this field was only loosely tested by git-mktag. Provide some thorough
testing for this field and also ensure that the tag header is separated
from the tag body by an empty line to reduce the convenience of creating
a flawed tag.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",190,data/crawl/git/hunk_7277.cpp,,,data/crawl/git/old_hunk_7277.cpp,data/crawl/git/new_hunk_7277.cpp,-1,25,,"error(""char"" PD_FMT "": malformed tag timestamp"",
			tagger_line - buffer);","[""addLog""]","[[], [""error"", ""char"", ""PD_FMT"", ""malformed"", ""tag"", ""timestamp"", ""tagger_line"", ""buffer""]]",[16402799615672186275],6065,0.0,2
https://github.com/git/git/commit/84bb2dfd9f4873c9ca19537efe62219b09ec03bf,21 Apr 2008,"Add a remote.*.mirror configuration option

This patch adds a remote.*.mirror configuration option that,
when set, automatically puts git-push in --mirror mode for that
remote.

Furthermore, the option is set automatically by `git remote
add --mirror'.

The code in remote.c to parse remote.*.skipdefaultupdate
had a subtle problem: a comment in the code indicated that
special care was needed for boolean options, but this care was
not used in parsing the option.  Since I was touching related
code, I did this fix too.

[jc: and I further fixed up the ""ignore boolean"" code.]

Signed-off-by: Paolo Bonzini <bonzini@gnu.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/hunk_7251.cpp,,,data/crawl/git/old_hunk_7251.cpp,data/crawl/git/new_hunk_7251.cpp,-1,11,,"error(""--all and --mirror are incompatible"");","[""addLog""]","[[], [""error"", ""all"", ""and"", ""mirror"", ""are"", ""incompatible""]]",[-2666191584206365492],6064,117360.0,2
https://github.com/git/git/commit/a8128ed62858063e29edc066b14b8b0fa6257cc2,06 May 2008,"git-cat-file: Add --batch option

--batch is similar to --batch-check, except that the contents of each object is
also printed. The output's form is:

<sha1> SP <type> SP <size> LF
<contents> LF

Signed-off-by: Adam Roben <aroben@apple.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",155,data/crawl/git/hunk_7199.cpp,,,data/crawl/git/old_hunk_7199.cpp,data/crawl/git/new_hunk_7199.cpp,56,81,"error(""git-cat-file: Can't use %s with --batch-check"", arg);","error(""git-cat-file: Can't use %s with %s"", arg, batch ? ""--batch"" : ""--batch-check"");","[""updateContent"", ""addContent"", ""addVariable""]","[[], [""%s"", ""batch"", ""batch""]]",[-17040850226491103944],6063,0.0,2
https://github.com/git/git/commit/a45d46ba72a8be16eeb30f608620bac7d9296803,06 May 2008,"Preparation to call determine_author_info from prepare_to_commit

Reorder functions definitions such that determine_author_info is
defined before prepare_to_commit. No code changes.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_7198.cpp,,,data/crawl/git/old_hunk_7198.cpp,data/crawl/git/new_hunk_7198.cpp,16,-1,"die(""invalid commit: %s"", use_message);",,"[""removeLog""]","[[""die"", ""invalid"", ""commit"", ""%s"", ""use_message""], []]",[5806406841116352152],6062,0.0,2
https://github.com/git/git/commit/a45d46ba72a8be16eeb30f608620bac7d9296803,06 May 2008,"Preparation to call determine_author_info from prepare_to_commit

Reorder functions definitions such that determine_author_info is
defined before prepare_to_commit. No code changes.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_7197.cpp,,,data/crawl/git/old_hunk_7197.cpp,data/crawl/git/new_hunk_7197.cpp,-1,16,,"die(""invalid commit: %s"", use_message);","[""addLog""]","[[], [""die"", ""invalid"", ""commit"", ""%s"", ""use_message""]]",[-5806406841116352152],6061,0.0,2
https://github.com/git/git/commit/bb1ae3f6fff19b0a1ab1bb6a815d26d39b9f15e6,06 May 2008,"commit: Show committer if automatic

To warn the user in case he/she might be using an unintended
committer identity.

Signed-off-by: Santi Béjar <sbejar@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_7194.cpp,,,data/crawl/git/old_hunk_7194.cpp,data/crawl/git/new_hunk_7194.cpp,-1,17,,"fprintf(fp, ""#\n"");","[""addLog""]","[[], [""fprintf"", ""fp"", ""\\n""]]",[-5179306325123647028],6060,118800.0,2
https://github.com/git/git/commit/0a02186f924aee1bd69f18ed01f645aa332ce0d1,13 May 2008,"Allow tracking branches to set up rebase by default.

Change cd67e4d4 introduced a new configuration parameter that told
pull to automatically perform a rebase instead of a merge.  This
change provides a configuration option to enable this feature
automatically when creating a new branch.

If the variable branch.autosetuprebase applies for a branch that's
being created, that branch will have branch.<name>.rebase set to true.

Signed-off-by: Dustin Sallings <dustin@spy.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/hunk_7185.cpp,,,data/crawl/git/old_hunk_7185.cpp,data/crawl/git/new_hunk_7185.cpp,-1,15,,"error(""Malformed value for %s"", var);","[""addLog""]","[[], [""error"", ""Malformed"", ""value"", ""for"", ""%s"", ""var""]]",[-4128216410369146697],6059,1440.0,2
https://github.com/git/git/commit/0a02186f924aee1bd69f18ed01f645aa332ce0d1,13 May 2008,"Allow tracking branches to set up rebase by default.

Change cd67e4d4 introduced a new configuration parameter that told
pull to automatically perform a rebase instead of a merge.  This
change provides a configuration option to enable this feature
automatically when creating a new branch.

If the variable branch.autosetuprebase applies for a branch that's
being created, that branch will have branch.<name>.rebase set to true.

Signed-off-by: Dustin Sallings <dustin@spy.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",295,data/crawl/git/hunk_7184.cpp,,,data/crawl/git/old_hunk_7184.cpp,data/crawl/git/new_hunk_7184.cpp,-1,8,,"printf(""This branch will rebase on pull.\n"");","[""addLog""]","[[], [""printf"", ""This"", ""branch"", ""will"", ""rebase"", ""on"", ""pull"", ""\\n""]]",[3887307495621787849],6058,1440.0,2
https://github.com/git/git/commit/64c0d71ce91696dfe5beb4b51e3233e56c857290,13 May 2008,"Improve reporting of errors in config file routines

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_7178.cpp,,,data/crawl/git/old_hunk_7178.cpp,data/crawl/git/new_hunk_7178.cpp,3,3,"fprintf(stderr, ""could not lock config file\n"");","error(""could not lock config file %s"", config_filename);","[""updateLog"", ""removeVariable"", ""addContent"", ""removeContent"", ""addVariable""]","[[""fprintf"", ""stderr"", ""file\\n""], [""error"", ""file"", ""%s"", ""config_filename""]]",[20154963409876704864],6057,0.0,2
https://github.com/git/git/commit/960b8ad1b1824b1b82c2b09a000c2119f97633a0,13 May 2008,"Make the exit code of add_file_to_index actually useful

Update the programs which used the function (as add_file_to_cache).

Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_7168.cpp,,,data/crawl/git/old_hunk_7168.cpp,data/crawl/git/new_hunk_7168.cpp,-1,4,,"die(""updating files failed"");","[""addLog""]","[[], [""die"", ""updating"", ""files"", ""failed""]]",[-6310176972184449224],6056,0.0,2
https://github.com/git/git/commit/ca11b212eb3e31d6fee12e9974c67dc774c1bc7c,14 May 2008,"let pack-objects do the writing of unreachable objects as loose objects

Commit ccc1297226b184c40459e9d373cc9eebfb7bd898 changed the behavior
of 'git repack -A' so unreachable objects are stored as loose objects.
However it did so in a naive and inn efficient way by making packs
about to be deleted inaccessible and feeding their content through
'git unpack-objects'.  While this works, there are major flaws with
this approach:

- It is unacceptably sloooooooooooooow.

  In the Linux kernel repository with no actual unreachable objects,
  doing 'git repack -A -d' before:

	real    2m33.220s
	user    2m21.675s
	sys     0m3.510s

  And with this change:

	real    0m36.849s
	user    0m24.365s
	sys     0m1.950s

  For reference, here's the timing for 'git repack -a -d':

	real    0m35.816s
	user    0m22.571s
	sys     0m2.011s

  This is explained by the fact that 'git unpack-objects' was used to
  unpack _every_ objects even if (almost) 100% of them were thrown away.

- There is a black out period.

  Between the removal of the .idx file for the redundant pack and the
  completion of its unpacking, the unreachable objects become completely
  unaccessible.  This is not a big issue as we're talking about unreachable
  objects, but some consistency is always good.

- There is no way to easily set a sensible mtime for the newly created
  unreachable loose objects.

So, while having a command called ""pack-objects"" to perform object
unpacking looks really odd, this is probably the best compromize to be
able to solve the above issues in an efficient way.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_7161.cpp,,,data/crawl/git/old_hunk_7161.cpp,data/crawl/git/new_hunk_7161.cpp,-1,18,,"die(""cannot open pack index"");","[""addLog""]","[[], [""die"", ""cannot"", ""open"", ""pack"", ""index""]]",[-7044094521612382728],6055,172800.0,2
https://github.com/git/git/commit/cce8d6fdb4d7170a73763586daf6ac4f6b8fce2c,25 May 2008,"mailsplit and mailinfo: gracefully handle NUL characters

The function fgets() has a big problem with NUL characters: it reads
them, but nobody will know if the NUL comes from the file stream, or
was appended at the end of the line.

So implement a custom read_line_with_nul() function.

Noticed by Tommy Thorn.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_7128.cpp,,,data/crawl/git/old_hunk_7128.cpp,data/crawl/git/new_hunk_7128.cpp,5,5,"fputs(line, patchfile);","fwrite(line, 1, len, patchfile);","[""updateLog"", ""addContent"", ""addVariable""]","[[""fputs""], [""fwrite"", ""1"", ""len""]]",[3824838143360454774],6054,0.0,2
https://github.com/git/git/commit/b7d9681974e61959f10c7b2c1063b7781c5b904e,06 Jun 2008,"Print info about ""git help COMMAND"" on git's main usage pages

Git's main usage pages did not show ""git help"" as a way to get more
information on a specific subcommand. This patch adds an info line after
the list of git commands currently printed by ""git"", ""git help"", ""git
--help"" and ""git help --all"".

Signed-off-by: Teemu Likonen <tlikonen@iki.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_7112.cpp,,,data/crawl/git/old_hunk_7112.cpp,data/crawl/git/new_hunk_7112.cpp,-1,3,,"printf(""\n%s\n"", git_more_info_string);","[""addLog""]","[[], [""printf"", ""\\n%s\\n"", ""git_more_info_string""]]",[-881586346879553522],6053,0.0,2
https://github.com/git/git/commit/df6a7ff7ac55d320afa1b8a59393122d6ca0f6c4,19 Jun 2008,"builtin-fast-export: Add importing and exporting of revision marks

This adds the --import-marks and --export-marks to fast-export. These import
and export the marks used to for all revisions exported in a similar fashion
to what fast-import does. The format is the same as fast-import, so you can
create a bidirectional importer / exporter by using the same marks file on
both sides.

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/hunk_7076.cpp,,,data/crawl/git/old_hunk_7076.cpp,data/crawl/git/new_hunk_7076.cpp,-1,41,,"die(""corrupt mark line: %s"", line);","[""addLog""]","[[], [""die"", ""corrupt"", ""mark"", ""line"", ""%s"", ""line""]]",[-6525197999651347646],6052,0.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7074.cpp,,,data/crawl/git/old_hunk_7074.cpp,data/crawl/git/new_hunk_7074.cpp,-1,112,,"die(""unable to overwrite old ref-pack file (%s)"", strerror(errno));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""overwrite"", ""old"", ""ref"", ""pack"", ""file"", ""%s"", ""strerror"", ""errno""]]",[27842291131279808820],6051,280080.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7074.cpp,,,data/crawl/git/old_hunk_7074.cpp,data/crawl/git/new_hunk_7074.cpp,-1,104,,"die(""failed to write ref-pack file (%s)"", strerror(errno));","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file"", ""%s"", ""strerror"", ""errno""]]",[15210699331011488064],6050,280080.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7074.cpp,,,data/crawl/git/old_hunk_7074.cpp,data/crawl/git/new_hunk_7074.cpp,-1,98,,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled \n"");","[""addLog""]","[[], [""fprintf"", ""cbdata"", ""refs_file"", ""pack"", ""refs"", ""with"", ""peeled"", ""\\n""]]",[-10649476022701472277],6049,280080.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7074.cpp,,,data/crawl/git/old_hunk_7074.cpp,data/crawl/git/new_hunk_7074.cpp,-1,94,,"die(""unable to create ref-pack file structure (%s)"",
		    strerror(errno));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""create"", ""ref"", ""pack"", ""file"", ""structure"", ""%s"", ""strerror"", ""errno""]]",[18097291555123731738],6048,280080.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7073.cpp,,,data/crawl/git/old_hunk_7073.cpp,data/crawl/git/new_hunk_7073.cpp,117,-1,"die(""unable to overwrite old ref-pack file (%s)"", strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""overwrite"", ""old"", ""ref"", ""pack"", ""file"", ""%s"", ""strerror"", ""errno""], []]",[-27842291131279808820],6047,280080.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7073.cpp,,,data/crawl/git/old_hunk_7073.cpp,data/crawl/git/new_hunk_7073.cpp,103,-1,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled \n"");",,"[""removeLog""]","[[""fprintf"", ""cbdata"", ""refs_file"", ""pack"", ""refs"", ""with"", ""peeled"", ""\\n""], []]",[10649476022701472277],6046,280080.0,2
https://github.com/git/git/commit/94e724a741590e741a540075c07a961082e3c80a,19 Jun 2008,"Move pack_refs() and friends into libgit

This moves pack_refs() and underlying functionality into the library,
to make pack-refs functionality easily available to all git programs.

Most of builtin-pack-refs.c has been moved verbatim into a new file
pack-refs.c that is compiled into libgit.a. A corresponding header
file, pack-refs.h, has also been added, declaring pack_refs() and
the #defines associated with the flags parameter to pack_refs().

This patch introduces no other changes in functionality.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",258,data/crawl/git/hunk_7073.cpp,,,data/crawl/git/old_hunk_7073.cpp,data/crawl/git/new_hunk_7073.cpp,99,-1,"die(""unable to create ref-pack file structure (%s)"",
		    strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""ref"", ""pack"", ""file"", ""structure"", ""%s"", ""strerror"", ""errno""], []]",[-18097291555123731738],6045,280080.0,2
https://github.com/git/git/commit/6422f633216475939f9a6f317e41a164737cbb02,23 Jun 2008,"parse-options.c: fix documentation syntax of optional arguments

When an argument for an option is optional, short options don't need a
space between the option and the argument, and long options need a ""="".
Otherwise, arguments are misinterpreted.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_7071.cpp,,,data/crawl/git/old_hunk_7071.cpp,data/crawl/git/new_hunk_7071.cpp,-1,12,,"fprintf(stderr, ""[=...]"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""["", ""]""]]",[-13925655260893380928],6044,170640.0,2
https://github.com/git/git/commit/6422f633216475939f9a6f317e41a164737cbb02,23 Jun 2008,"parse-options.c: fix documentation syntax of optional arguments

When an argument for an option is optional, short options don't need a
space between the option and the argument, and long options need a ""="".
Otherwise, arguments are misinterpreted.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_7071.cpp,,,data/crawl/git/old_hunk_7071.cpp,data/crawl/git/new_hunk_7071.cpp,-1,6,,"fprintf(stderr, ""[<%s>]"", opts->argh);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""["", ""%s"", ""]"", ""opts"", ""argh""]]",[-16768521551179362836],6043,170640.0,2
https://github.com/git/git/commit/6422f633216475939f9a6f317e41a164737cbb02,23 Jun 2008,"parse-options.c: fix documentation syntax of optional arguments

When an argument for an option is optional, short options don't need a
space between the option and the argument, and long options need a ""="".
Otherwise, arguments are misinterpreted.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_7070.cpp,,,data/crawl/git/old_hunk_7070.cpp,data/crawl/git/new_hunk_7070.cpp,-1,4,,"fprintf(stderr, ""[=<n>]"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""["", ""n"", ""]""]]",[-13925655246813338577],6042,170640.0,2
https://github.com/git/git/commit/112db553b0db4c4f2b39e5e3e433b2102be10085,23 Jun 2008,"Shrink the git binary a bit by avoiding unnecessary inline functions

So I was looking at the disgusting size of the git binary, and even with
the debugging removed, and using -Os instead of -O2, the size of the text
section was pretty high. In this day and age I guess almost a megabyte of
text isn't really all that surprising, but it still doesn't exactly make
me think ""lean and mean"".

With -Os, a surprising amount of text space is wasted on inline functions
that end up just being replicated multiple times, and where performance
really isn't a valid reason to inline them. In particular, the trivial
wrapper functions like ""xmalloc()"" are used _everywhere_, and making them
inline just duplicates the text (and the string we use to 'die()' on
failure) unnecessarily.

So this just moves them into a ""wrapper.c"" file, getting rid of a tiny bit
of unnecessary bloat. The following numbers are both with ""CFLAGS=-Os"":

Before:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 700460	  15160	 292184	1007804	  f60bc	git

After:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 670540	  15160	 292184	 977884	  eebdc	git

so it saves almost 30k of text-space (it actually saves more than that
with the default -O2, but I don't think that's necessarily a very relevant
number from a ""try to shrink git"" standpoint).

It might conceivably have a performance impact, but none of this should be
_that_ performance critical. The real cost is not generally in the wrapper
anyway, but in the code it wraps (ie the cost of ""xread()"" is all in the
read itself, not in the trivial wrapping of it).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/hunk_7064.cpp,,,data/crawl/git/old_hunk_7064.cpp,data/crawl/git/new_hunk_7064.cpp,-1,157,,"die(""Unable to create temporary file: %s"", strerror(errno));","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""create"", ""temporary"", ""file"", ""%s"", ""strerror"", ""errno""]]",[12826327041575062213],6041,225360.0,2
https://github.com/git/git/commit/112db553b0db4c4f2b39e5e3e433b2102be10085,23 Jun 2008,"Shrink the git binary a bit by avoiding unnecessary inline functions

So I was looking at the disgusting size of the git binary, and even with
the debugging removed, and using -Os instead of -O2, the size of the text
section was pretty high. In this day and age I guess almost a megabyte of
text isn't really all that surprising, but it still doesn't exactly make
me think ""lean and mean"".

With -Os, a surprising amount of text space is wasted on inline functions
that end up just being replicated multiple times, and where performance
really isn't a valid reason to inline them. In particular, the trivial
wrapper functions like ""xmalloc()"" are used _everywhere_, and making them
inline just duplicates the text (and the string we use to 'die()' on
failure) unnecessarily.

So this just moves them into a ""wrapper.c"" file, getting rid of a tiny bit
of unnecessary bloat. The following numbers are both with ""CFLAGS=-Os"":

Before:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 700460	  15160	 292184	1007804	  f60bc	git

After:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 670540	  15160	 292184	 977884	  eebdc	git

so it saves almost 30k of text-space (it actually saves more than that
with the default -O2, but I don't think that's necessarily a very relevant
number from a ""try to shrink git"" standpoint).

It might conceivably have a performance impact, but none of this should be
_that_ performance critical. The real cost is not generally in the wrapper
anyway, but in the code it wraps (ie the cost of ""xread()"" is all in the
read itself, not in the trivial wrapping of it).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/hunk_7064.cpp,,,data/crawl/git/old_hunk_7064.cpp,data/crawl/git/new_hunk_7064.cpp,-1,147,,"die(""Out of memory? fdopen failed: %s"", strerror(errno));","[""addLog""]","[[], [""die"", ""Out"", ""of"", ""memory"", ""fdopen"", ""failed"", ""%s"", ""strerror"", ""errno""]]",[19602419132735017333],6040,259920.0,2
https://github.com/git/git/commit/112db553b0db4c4f2b39e5e3e433b2102be10085,23 Jun 2008,"Shrink the git binary a bit by avoiding unnecessary inline functions

So I was looking at the disgusting size of the git binary, and even with
the debugging removed, and using -Os instead of -O2, the size of the text
section was pretty high. In this day and age I guess almost a megabyte of
text isn't really all that surprising, but it still doesn't exactly make
me think ""lean and mean"".

With -Os, a surprising amount of text space is wasted on inline functions
that end up just being replicated multiple times, and where performance
really isn't a valid reason to inline them. In particular, the trivial
wrapper functions like ""xmalloc()"" are used _everywhere_, and making them
inline just duplicates the text (and the string we use to 'die()' on
failure) unnecessarily.

So this just moves them into a ""wrapper.c"" file, getting rid of a tiny bit
of unnecessary bloat. The following numbers are both with ""CFLAGS=-Os"":

Before:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 700460	  15160	 292184	1007804	  f60bc	git

After:
	[torvalds@woody git]$ size git
	   text	   data	    bss	    dec	    hex	filename
	 670540	  15160	 292184	 977884	  eebdc	git

so it saves almost 30k of text-space (it actually saves more than that
with the default -O2, but I don't think that's necessarily a very relevant
number from a ""try to shrink git"" standpoint).

It might conceivably have a performance impact, but none of this should be
_that_ performance critical. The real cost is not generally in the wrapper
anyway, but in the code it wraps (ie the cost of ""xread()"" is all in the
read itself, not in the trivial wrapping of it).

Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",328,data/crawl/git/hunk_7064.cpp,,,data/crawl/git/old_hunk_7064.cpp,data/crawl/git/new_hunk_7064.cpp,-1,139,,"die(""dup failed: %s"", strerror(errno));","[""addLog""]","[[], [""die"", ""dup"", ""failed"", ""%s"", ""strerror"", ""errno""]]",[78056356597204166],6039,259920.0,2
https://github.com/git/git/commit/77d3ecee85dbf354d2059d7ef65d788d90db3efa,25 Jun 2008,"move show_pack_info() where it belongs

This is called when verify_pack() has its verbose argument set, and
verbose in this context makes sense only for the actual 'git verify-pack'
command.  Therefore let's move show_pack_info() to builtin-verify-pack.c
instead and remove useless verbose argument from verify_pack().

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/hunk_7052.cpp,,,data/crawl/git/old_hunk_7052.cpp,data/crawl/git/new_hunk_7052.cpp,27,-1,"die(""internal error pack-check find-pack-entry-one"");",,"[""removeLog""]","[[""die"", ""internal"", ""error"", ""pack"", ""check"", ""find"", ""pack"", ""entry"", ""one""], []]",[-13449018377605609811],6038,0.0,2
https://github.com/git/git/commit/77d3ecee85dbf354d2059d7ef65d788d90db3efa,25 Jun 2008,"move show_pack_info() where it belongs

This is called when verify_pack() has its verbose argument set, and
verbose in this context makes sense only for the actual 'git verify-pack'
command.  Therefore let's move show_pack_info() to builtin-verify-pack.c
instead and remove useless verbose argument from verify_pack().

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",137,data/crawl/git/hunk_7050.cpp,,,data/crawl/git/old_hunk_7050.cpp,data/crawl/git/new_hunk_7050.cpp,-1,51,,"printf(""chain length > %d: %d object%s\n"", MAX_CHAIN,
		       chain_histogram[0], chain_histogram[0] > 1 ? ""s"" : """");","[""addLog""]","[[], [""printf"", ""chain"", ""length"", ""%d"", ""%d"", ""object%s\\n"", ""MAX_CHAIN"", ""chain_histogram[0]"", ""chain_histogram[0]"", ""1"", ""s""]]",[46670005765220949593],6037,285120.0,2
https://github.com/git/git/commit/2beebd22f4af8788eaf19d811de03191ae6f7c42,25 Jun 2008,"clone: create intermediate directories of destination repo

The shell version used to use ""mkdir -p"" to create the repo
path, but the C version just calls ""mkdir"". Let's replicate
the old behavior. We have to create the git and worktree
leading dirs separately; while most of the time, the
worktree dir contains the git dir (as .git), the user can
override this using GIT_WORK_TREE.

We can reuse safe_create_leading_directories, but we need to
make a copy of our const buffer to do so. Since
merge-recursive uses the same pattern, we can factor this
out into a global function. This has two other cleanup
advantages for merge-recursive:

  1. mkdir_p wasn't a very good name. ""mkdir -p foo/bar"" actually
     creates bar, but this function just creates the leading
     directories.

  2. mkdir_p took a mode argument, but it was completely
     ignored.

Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_7047.cpp,,,data/crawl/git/old_hunk_7047.cpp,data/crawl/git/new_hunk_7047.cpp,-1,4,,"die(""could not create leading directories of '%s'"", git_dir);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""create"", ""leading"", ""directories"", ""of"", ""%s"", ""git_dir""]]",[9727168409805839874],6036,0.0,2
https://github.com/git/git/commit/2beebd22f4af8788eaf19d811de03191ae6f7c42,25 Jun 2008,"clone: create intermediate directories of destination repo

The shell version used to use ""mkdir -p"" to create the repo
path, but the C version just calls ""mkdir"". Let's replicate
the old behavior. We have to create the git and worktree
leading dirs separately; while most of the time, the
worktree dir contains the git dir (as .git), the user can
override this using GIT_WORK_TREE.

We can reuse safe_create_leading_directories, but we need to
make a copy of our const buffer to do so. Since
merge-recursive uses the same pattern, we can factor this
out into a global function. This has two other cleanup
advantages for merge-recursive:

  1. mkdir_p wasn't a very good name. ""mkdir -p foo/bar"" actually
     creates bar, but this function just creates the leading
     directories.

  2. mkdir_p took a mode argument, but it was completely
     ignored.

Acked-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_7046.cpp,,,data/crawl/git/old_hunk_7046.cpp,data/crawl/git/new_hunk_7046.cpp,-1,4,,"die(""could not create leading directories of '%s'"",
					work_tree);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""create"", ""leading"", ""directories"", ""of"", ""%s"", ""work_tree""]]",[7335277410049705398],6035,0.0,2
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7044.cpp,,,data/crawl/git/old_hunk_7044.cpp,data/crawl/git/new_hunk_7044.cpp,31,-1,"die (""Could not get current working directory"");",,"[""removeLog""]","[[""die"", ""Could"", ""not"", ""get"", ""current"", ""working"", ""directory""], []]",[5754901273999352896],6034,0.0,2
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7043.cpp,,,data/crawl/git/old_hunk_7043.cpp,data/crawl/git/new_hunk_7043.cpp,-1,64,,"die (""Could not change back to '%s'"", cwd);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""change"", ""back"", ""to"", ""%s"", ""cwd""]]",[7042323910304625250],6033,239040.0,2
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7043.cpp,,,data/crawl/git/old_hunk_7043.cpp,data/crawl/git/new_hunk_7043.cpp,-1,54,,"die (""Invalid symlink: %s"", buf);","[""addLog""]","[[], [""die"", ""Invalid"", ""symlink"", ""%s"", ""buf""]]",[-3533586999573817185],6032,239040.0,2
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7043.cpp,,,data/crawl/git/old_hunk_7043.cpp,data/crawl/git/new_hunk_7043.cpp,-1,43,,"die (""Too long path name: '%s/%s'"",
						buf, last_elem);","[""addLog""]","[[], [""die"", ""Too"", ""long"", ""path"", ""name"", ""%s/%s"", ""buf"", ""last_elem""]]",[902185929137706479],6031,239040.0,2
https://github.com/git/git/commit/5b8e6f85f971dba8eeac048e7821978bbca14121,28 Jun 2008,"shrink git-shell by avoiding redundant dependencies

A lot of modules that have nothing to do with git-shell functionality
were linked in, bloating git-shell more than 8 times.

This patch cuts off redundant dependencies by:
1. providing stubs for three functions that make no sense for git-shell;
2. moving quote_path_fully from environment.c to quote.c to make the
   later self sufficient;
3. moving make_absolute_path into a new separate file.

The following numbers have been received with the default optimization
settings on master using GCC 4.1.2:

Before:
   text    data     bss     dec     hex filename
 143915    1348   93168  238431   3a35f git-shell

After:
   text    data     bss     dec     hex filename
  17670     788    8232   26690    6842 git-shell

Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_7043.cpp,,,data/crawl/git/old_hunk_7043.cpp,data/crawl/git/new_hunk_7043.cpp,-1,35,,"die (""Could not switch to '%s'"", buf);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""switch"", ""to"", ""%s"", ""buf""]]",[15034998833640817032],6030,239040.0,2
https://github.com/git/git/commit/0b9a969e0fbb0a09e9de931cfe27005cbfd6cb7d,01 Jul 2008,"git-fmt-merge-msg: make it usable from other builtins

Move all functionality (except config and option parsing) from
cmd_fmt_merge_msg() to fmt_merge_msg(), so that other builtins can use
it without a child process.

All functions have been changed to use strbufs, and now only
cmd_fmt_merge_msg() reads directly from a file / writes anything to
stdout.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_7038.cpp,,,data/crawl/git/old_hunk_7038.cpp,data/crawl/git/new_hunk_7038.cpp,83,-1,printf(subsep);,,"[""removeLog""]","[[""printf"", ""subsep""], []]",[-10084909125597494171],6029,0.0,2
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,1040,,"printf(""Rewinding the tree to pristine...\n"");","[""addLog""]","[[], [""printf"", ""Rewinding"", ""the"", ""tree"", ""to"", ""pristine"", ""\\n""]]",[12364896792726054540],6028,0.0,2
https://github.com/git/git/commit/1c7b76be7d620bbaf2e6b8417f04012326bbb9df,08 Jul 2008,"Build in merge

Mentored-by: Johannes Schindelin <Johannes.Schindelin@gmx.de>
Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1159,data/crawl/git/hunk_7033.cpp,,,data/crawl/git/old_hunk_7033.cpp,data/crawl/git/new_hunk_7033.cpp,-1,712,,"die(""Could open %s for writing"", git_path(""MERGE_MSG""));","[""addLog""]","[[], [""die"", ""Could"", ""open"", ""%s"", ""for"", ""writing"", ""git_path"", ""MERGE_MSG""]]",[3730892144240057575],6027,0.0,2
https://github.com/git/git/commit/0b294c0abf00a9cf7468e0ea62722ae23b0816cc,08 Jul 2008,"make deleting a missing ref more quiet

If git attempts to delete a ref, but the unlink of the ref
file fails, we print a message to stderr. This is usually a
good thing, but if the error is ENOENT, then it indicates
that the ref has _already_ been deleted. And since that's
our goal, it doesn't make sense to complain to the user.

This harmonizes the error reporting behavior for the
unpacked and packed cases; the packed case already printed
nothing on ENOENT, but the unpacked printed unconditionally.

Additionally, send-pack would, when deleting the tracking
ref corresponding to a remote delete, print ""Failed to
delete"" on any failure. This can be a misleading
message, since we actually _did_ delete at the remote side,
but we failed to delete locally. Rather than make the
message more precise, let's just eliminate it entirely; the
delete_ref routine already takes care of printing out a much
more specific message about what went wrong.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_7030.cpp,,,data/crawl/git/old_hunk_7030.cpp,data/crawl/git/new_hunk_7030.cpp,4,-1,"error(""Failed to delete"");",,"[""removeLog""]","[[""error"", ""Failed"", ""to"", ""delete""], []]",[-677248472710611288],6026,190080.0,2
https://github.com/git/git/commit/1cc6985ca7dd3aaab0617ec0fd00d4eb0b424465,09 Jul 2008,"parse-options: add PARSE_OPT_LASTARG_DEFAULT flag

If you set this for a given option, and the optoin appears without an
argument on the command line, then the `defval' is used as its argument.

Note that this flag is meaningless in presence of OPTARG or NOARG flags.
(in the current implementation it will be ignored, but don't rely on it).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_7019.cpp,,,data/crawl/git/old_hunk_7019.cpp,data/crawl/git/new_hunk_7019.cpp,4,3,"opterror(opt, ""requires a value"", flags);","(get_arg(p, opt, flags, &arg);","[""addLog"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""opterror"", ""requires"", ""a"", ""value""], [""get_arg"", ""p"", ""&arg""]]",[1885579575956042384],6025,0.0,2
https://github.com/git/git/commit/049716b370f2cebdbdeb278eb2a8c4eff8ed0acd,09 Jul 2008,"branch --merged/--no-merged: allow specifying arbitrary commit

""git-branch --merged"" is a handy way to list all the branches that have
already been merged to the current branch, but it did not allow checking
against anything but the current branch.  Having to switch branches only
to list the branches that are merged with another branch made the feature
practically useless.

This updates the option parser so that ""git branch --merged next"" is
accepted when you are on 'master' branch.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_7015.cpp,,,data/crawl/git/old_hunk_7015.cpp,data/crawl/git/new_hunk_7015.cpp,-1,13,,"die(""malformed object name %s"", arg);","[""addLog""]","[[], [""die"", ""malformed"", ""object"", ""name"", ""%s"", ""arg""]]",[-6246458296801365212],6024,164880.0,2
https://github.com/git/git/commit/14ec9cbdae1991a14aa1cce251e44ea5cfee5ade,09 Jul 2008,"git-shortlog: migrate to parse-options partially.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/hunk_7012.cpp,,,data/crawl/git/old_hunk_7012.cpp,data/crawl/git/new_hunk_7012.cpp,9,-1,die(wrap_arg_usage);,,"[""removeLog""]","[[""die"", ""wrap_arg_usage""], []]",[-3081824583732820880],6023,0.0,2
https://github.com/git/git/commit/6b61ec0564993d2e60f7eb56c0f0fd9c313d5e2c,09 Jul 2008,"revisions: refactor handle_revision_opt into parse_revision_opt.

It seems we're using handle_revision_opt the same way each time, have a
wrapper around it that does the 9-liner we copy each time instead.

handle_revision_opt can be static in the module for now, it's always
possible to make it public again if needed.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_7009.cpp,,,data/crawl/git/old_hunk_7009.cpp,data/crawl/git/new_hunk_7009.cpp,6,-1,"error(""unknown option `%s'"", ctx.argv[0]);",,"[""removeLog""]","[[""error"", ""unknown"", ""option"", ""%s"", ""ctx"", ""argv[0]""], []]",[-5936802647489237526],6022,0.0,2
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7008.cpp,,,data/crawl/git/old_hunk_7008.cpp,data/crawl/git/new_hunk_7008.cpp,-1,332,,"die(""Could not create directory %s"", rr_cache);","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""create"", ""directory"", ""%s"", ""rr_cache""]]",[2777152365766598166],6021,265680.0,2
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7007.cpp,,,data/crawl/git/old_hunk_7007.cpp,data/crawl/git/new_hunk_7007.cpp,23,-1,"die(""Unable to write new index file"");",,"[""removeLog""]","[[""die"", ""Unable"", ""to"", ""write"", ""new"", ""index"", ""file""], []]",[-9643391217927606253],6020,95040.0,2
https://github.com/git/git/commit/5b2fd95606cd6d564f96d9d253e7cd19263bc352,10 Jul 2008,"rerere: Separate libgit and builtin functions

This patch moves rerere()-related functions into a newly created
rerere.c file.
The setup_rerere() function is needed by both rerere() and cmd_rerere(),
so this function is moved to rerere.c and declared non-static (and ""extern"")
in newly created rerere.h file.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",745,data/crawl/git/hunk_7006.cpp,,,data/crawl/git/old_hunk_7006.cpp,data/crawl/git/new_hunk_7006.cpp,43,-1,"die(""unable to write rerere record"");",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""write"", ""rerere"", ""record""], []]",[-14264890760065462695],6019,0.0,2
https://github.com/git/git/commit/562e25abea9f1f2d443053279c009a88d81a592b,15 Jul 2008,"archive: centralize archive entry writing

Add the exported function write_archive_entries() to archive.c, which uses
the new ability of read_tree_recursive() to pass a context pointer to its
callback in order to centralize previously duplicated code.

The new callback function write_archive_entry() does the work that every
archiver backend needs to do: loading file contents, entering subdirectories,
handling file attributes, constructing the full path of the entry.  All that
done, it calls the backend specific write_archive_entry_fn_t function.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",287,data/crawl/git/hunk_6993.cpp,,,data/crawl/git/old_hunk_6993.cpp,data/crawl/git/new_hunk_6993.cpp,-1,33,,"fprintf(stderr, ""%.*s\n"", (int)path.len, path.buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s\\n"", ""int"", ""path"", ""len"", ""path"", ""buf""]]",[3115201096558472877],6018,0.0,2
https://github.com/git/git/commit/562e25abea9f1f2d443053279c009a88d81a592b,15 Jul 2008,"archive: centralize archive entry writing

Add the exported function write_archive_entries() to archive.c, which uses
the new ability of read_tree_recursive() to pass a context pointer to its
callback in order to centralize previously duplicated code.

The new callback function write_archive_entry() does the work that every
archiver backend needs to do: loading file contents, entering subdirectories,
handling file attributes, constructing the full path of the entry.  All that
done, it calls the backend specific write_archive_entry_fn_t function.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",287,data/crawl/git/hunk_6990.cpp,,,data/crawl/git/old_hunk_6990.cpp,data/crawl/git/new_hunk_6990.cpp,26,-1,"die(""cannot read %s"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""cannot"", ""read"", ""%s"", ""sha1_to_hex"", ""sha1""], []]",[13051767246605351755],6017,0.0,2
https://github.com/git/git/commit/c455c87c5cd42bbbe586b31cea1143132f3a39e4,22 Jul 2008,"Rename path_list to string_list

The name path_list was correct for the first usage of that data structure,
but it really is a general-purpose string list.

$ perl -i -pe 's/path-list/string-list/g' $(git grep -l path-list)
$ perl -i -pe 's/path_list/string_list/g' $(git grep -l path_list)
$ git mv path-list.h string-list.h
$ git mv path-list.c string-list.c
$ perl -i -pe 's/has_path/has_string/g' $(git grep -l has_path)
$ perl -i -pe 's/path/string/g' string-list.[ch]
$ git mv Documentation/technical/api-path-list.txt \
	Documentation/technical/api-string-list.txt
$ perl -i -pe 's/strdup_paths/strdup_strings/g' $(git grep -l strdup_paths)

... and then fix all users of string-list to access the member ""string""
instead of ""path"".

Documentation/technical/api-string-list.txt needed some rewrapping, too.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1109,data/crawl/git/hunk_6952.cpp,,,data/crawl/git/old_hunk_6952.cpp,data/crawl/git/new_hunk_6952.cpp,-1,42,,"printf(""%s\n"", list.items[i].path);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""list"", ""items[i]"", ""path""]]",[24294684506666469527],6016,25200.0,2
https://github.com/git/git/commit/1719b5e446f54e4196903ae6ed5f8867a5755bf6,22 Jul 2008,"builtin-merge: give a proper error message for invalid strategies in config

'git merge -s foobar' diagnosed invalid ""foobar"" strategy and errored out
with a message, but foobar in pull.twohead or pull.octopus was just
silently ignored.  This makes invalid strategy both on the command line
and in the configuration file to trigger the same error.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_6946.cpp,,,data/crawl/git/old_hunk_6946.cpp,data/crawl/git/new_hunk_6946.cpp,-1,16,,"fprintf(stderr, ""Available strategies are:%s.\n"", err.buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Available"", ""strategies"", ""are"", ""%s"", ""\\n"", ""err"", ""buf""]]",[-33112305456315715984],6015,10080.0,2
https://github.com/git/git/commit/1719b5e446f54e4196903ae6ed5f8867a5755bf6,22 Jul 2008,"builtin-merge: give a proper error message for invalid strategies in config

'git merge -s foobar' diagnosed invalid ""foobar"" strategy and errored out
with a message, but foobar in pull.twohead or pull.octopus was just
silently ignored.  This makes invalid strategy both on the command line
and in the configuration file to trigger the same error.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_6946.cpp,,,data/crawl/git/old_hunk_6946.cpp,data/crawl/git/new_hunk_6946.cpp,-1,15,,"fprintf(stderr, ""Could not find merge strategy '%s'.\n"", name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Could"", ""not"", ""find"", ""merge"", ""strategy"", ""%s"", ""\\n"", ""name""]]",[-3832776917505481148],6014,10080.0,2
https://github.com/git/git/commit/0e8316cc16f1a938c36f12f5fcae4a081b6ec6ff,25 Jul 2008,"Teach fsck and prune about the new location of temporary objects

Since 5723fe7e, temporary objects are now created in their final destination
directories, rather than in .git/objects/. Teach fsck to recognize and
ignore the temporary objects it encounters, and teach prune to remove them.

Signed-off-by: Brandon Casey <casey@nrlssc.navy.mil>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_6939.cpp,,,data/crawl/git/old_hunk_6939.cpp,data/crawl/git/new_hunk_6939.cpp,-1,9,,"error(""Could not stat '%s'"", fullpath);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""stat"", ""%s"", ""fullpath""]]",[24085478664867623507],6013,171360.0,2
https://github.com/git/git/commit/859fdabaede6733c98b1ca8df2fabce000522bf9,25 Jul 2008,"git-checkout: improve error messages, detect ambiguities.

The patch is twofold: it moves the option consistency checks just under
the parse_options call so that it doesn't get in the way of the tree
reference vs. pathspecs desambiguation.

The other part rewrites the way to understand arguments so that when
git-checkout fails it does with an understandable message. Compared to the
previous behavior we now have:

  - a better error message when doing:

        git checkout <blob reference> --

    now complains about the reference not pointing to a tree, instead of
    things like:

        error: pathspec <blob reference> did not match any file(s) known to git.
        error: pathspec '--' did not match any file(s) known to git.

  - a better error message when doing:

        git checkout <path> --

    It now complains about <path> not being a reference instead of the
    completely obscure:

        error: pathspec '--' did not match any file(s) known to git.

  - an error when -- wasn't used, and the first argument is ambiguous
    (i.e. can be interpreted as both ref and as path).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6937.cpp,,,data/crawl/git/old_hunk_6937.cpp,data/crawl/git/new_hunk_6937.cpp,-1,8,,"die(""git checkout: -f and -m are incompatible"");","[""addLog""]","[[], [""die"", ""git"", ""checkout"", ""f"", ""and"", ""m"", ""are"", ""incompatible""]]",[-1496901409729145129],6012,115200.0,2
https://github.com/git/git/commit/859fdabaede6733c98b1ca8df2fabce000522bf9,25 Jul 2008,"git-checkout: improve error messages, detect ambiguities.

The patch is twofold: it moves the option consistency checks just under
the parse_options call so that it doesn't get in the way of the tree
reference vs. pathspecs desambiguation.

The other part rewrites the way to understand arguments so that when
git-checkout fails it does with an understandable message. Compared to the
previous behavior we now have:

  - a better error message when doing:

        git checkout <blob reference> --

    now complains about the reference not pointing to a tree, instead of
    things like:

        error: pathspec <blob reference> did not match any file(s) known to git.
        error: pathspec '--' did not match any file(s) known to git.

  - a better error message when doing:

        git checkout <path> --

    It now complains about <path> not being a reference instead of the
    completely obscure:

        error: pathspec '--' did not match any file(s) known to git.

  - an error when -- wasn't used, and the first argument is ambiguous
    (i.e. can be interpreted as both ref and as path).

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",132,data/crawl/git/hunk_6937.cpp,,,data/crawl/git/old_hunk_6937.cpp,data/crawl/git/new_hunk_6937.cpp,-1,5,,"die(""git checkout: --track and --no-track require -b"");","[""addLog""]","[[], [""die"", ""git"", ""checkout"", ""track"", ""and"", ""no"", ""track"", ""require"", ""b""]]",[6029095078545334860],6011,115200.0,2
https://github.com/git/git/commit/d82f33e20dcf068e679eff2a16ecf8fe7b10fb31,26 Jul 2008,"Move launch_editor() from builtin-tag.c to editor.c

launch_editor() is declared in strbuf.h but defined in builtin-tag.c.
This patch moves launch_editor() into a new source file editor.c,
but keeps the declaration in strbuf.h.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_6936.cpp,,,data/crawl/git/old_hunk_6936.cpp,data/crawl/git/new_hunk_6936.cpp,-1,53,,"die(""could not read message file '%s': %s"",
		    path, strerror(errno));","[""addLog""]","[[], [""die"", ""could"", ""not"", ""read"", ""message"", ""file"", ""%s"", ""%s"", ""path"", ""strerror"", ""errno""]]",[14821107430248006862],6010,267840.0,2
https://github.com/git/git/commit/d82f33e20dcf068e679eff2a16ecf8fe7b10fb31,26 Jul 2008,"Move launch_editor() from builtin-tag.c to editor.c

launch_editor() is declared in strbuf.h but defined in builtin-tag.c.
This patch moves launch_editor() into a new source file editor.c,
but keeps the declaration in strbuf.h.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_6936.cpp,,,data/crawl/git/old_hunk_6936.cpp,data/crawl/git/new_hunk_6936.cpp,-1,46,,"die(""There was a problem with the editor %s."", editor);","[""addLog""]","[[], [""die"", ""There"", ""was"", ""a"", ""problem"", ""with"", ""the"", ""editor"", ""%s"", ""editor""]]",[-1951240705956417976],6009,267840.0,2
https://github.com/git/git/commit/d82f33e20dcf068e679eff2a16ecf8fe7b10fb31,26 Jul 2008,"Move launch_editor() from builtin-tag.c to editor.c

launch_editor() is declared in strbuf.h but defined in builtin-tag.c.
This patch moves launch_editor() into a new source file editor.c,
but keeps the declaration in strbuf.h.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",110,data/crawl/git/hunk_6936.cpp,,,data/crawl/git/old_hunk_6936.cpp,data/crawl/git/new_hunk_6936.cpp,-1,18,,"fprintf(stderr,
		""Terminal is dumb but no VISUAL nor EDITOR defined.\n""
		""Please supply the message using either -m or -F option.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Terminal"", ""is"", ""dumb"", ""but"", ""no"", ""VISUAL"", ""nor"", ""EDITOR"", ""defined"", ""\\n"", ""Please"", ""supply"", ""the"", ""message"", ""using"", ""either"", ""m"", ""or"", ""F"", ""option"", ""\\n""]]",[-17720787072534516268],6008,267840.0,2
https://github.com/git/git/commit/7198203ae37c11327c0d01f1e37f3e74381755a9,26 Jul 2008,"editor.c: Libify launch_editor()

This patch removes exit()/die() calls and builtin-specific messages
from launch_editor(), so that it can be used as a general libgit.a
function to launch an editor.

Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_6931.cpp,,,data/crawl/git/old_hunk_6931.cpp,data/crawl/git/new_hunk_6931.cpp,-1,4,,"fprintf(stderr,
			""Please supply the message using either -m or -F option.\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Please"", ""supply"", ""the"", ""message"", ""using"", ""either"", ""m"", ""or"", ""F"", ""option"", ""\\n""]]",[-7747082831477977172],6007,0.0,2
https://github.com/git/git/commit/c0885435537e4b93709d2bf39ce36454186057a1,26 Jul 2008,"archive: move parameter parsing code to archive.c

write_archive() in archive.c is the only callsite for the command line
parsing functions located in builtin-archive.c.  Move them to the place
where they are used, un-export them and make them static, as hinted at
by Stephan.

Cc: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",282,data/crawl/git/hunk_6929.cpp,,,data/crawl/git/old_hunk_6929.cpp,data/crawl/git/new_hunk_6929.cpp,-1,118,,"die(""Argument not supported for format '%s': -%d"",
					format, compression_level);","[""addLog""]","[[], [""die"", ""Argument"", ""not"", ""supported"", ""for"", ""format"", ""%s"", ""%d"", ""format"", ""compression_level""]]",[7975582116994584616],6006,7920.0,2
https://github.com/git/git/commit/10c4c881c4d2cb0ece0508e7142e189e68445257,26 Jul 2008,"Allow add_path() to add non-existent directories to the path

This function had used make_absolute_path(); but this function dies if
the directory that contains the entry whose relative path was supplied in
the argument does not exist. This is a problem if the argument is, for
example, ""../libexec/git-core"", and that ""../libexec"" does not exist.

Since the resolution of symbolic links is not required for elements in
PATH, we can fall back to using make_nonrelative_path(), which simply
prepends $PWD to the path.

We have to move make_nonrelative_path() alongside make_absolute_path() in
abspath.c so that git-shell can be linked. See 5b8e6f85f.

Signed-off-by: Johannes Sixt <johannes.sixt@telecom.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_6924.cpp,,,data/crawl/git/old_hunk_6924.cpp,data/crawl/git/new_hunk_6924.cpp,-1,33,,"die(""Cannot determine the current working directory"");","[""addLog""]","[[], [""die"", ""Cannot"", ""determine"", ""the"", ""current"", ""working"", ""directory""]]",[-18417254768304551014],6005,36000.0,2
https://github.com/git/git/commit/7c5b1675a88a52be1822129e4aa915c5531f6700,03 Aug 2008,"git-name-rev: don't use printf without format

printf() without an explicit format string is not a good coding practise,
unless the printed string is guaranteed to not contain percent signs.  While
fixing this, we might as well combine the calls to fwrite() and printf().

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_6902.cpp,,,data/crawl/git/old_hunk_6902.cpp,data/crawl/git/new_hunk_6902.cpp,8,-1,"printf("" (%s)"", name);",,"[""removeLog""]","[[""printf"", ""%s"", ""name""], []]",[-3075567096171906522],6004,720.0,2
https://github.com/git/git/commit/90fb46ec83cd837364592ce4d95055a3b6fe89a4,17 Aug 2008,"builtin-reflog: Allow reflog expire to name partial ref

This allows you to specify 'git reflog expire master' without needing
to give the full refname like 'git reflog expire refs/heads/master'

Signed-off-by: Pieter de Bie <pdebie@ai.rug.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_6890.cpp,,,data/crawl/git/old_hunk_6890.cpp,data/crawl/git/new_hunk_6890.cpp,7,7,"error(""%s points nowhere!"", ref);","error(""%s points nowhere!"", argv[i]);","[""updateVariable"", ""moveVariable"", ""addVariable""]","[[""ref""], [""argv[i]""]]",[-18449673267390868],6003,162000.0,2
https://github.com/git/git/commit/df0daf8ac0fce4bb98d5aff9295535a1606d2fad,18 Aug 2008,"git-daemon: call logerror() instead of error()

Use logerror(), not error(), so that the messages won't be lost,
especially when running the daemon with its log sent to the syslog
facility.

Signed-off-by: Stephen R. van den Berg <srb@cuci.nl>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_6888.cpp,,,data/crawl/git/old_hunk_6888.cpp,data/crawl/git/new_hunk_6888.cpp,3,3,"error(""too large socket descriptor."");","logerror(""Socket descriptor too large"");","[""updateLog"", ""updateContent""]","[[""error"", ""socket""], [""logerror"", ""Socket""]]",[-8448944381644221939],6002,0.0,2
https://github.com/git/git/commit/a19a424010970a076a51afb4b378c9edcd908ff9,22 Aug 2008,"Revert ""Convert output messages in merge-recursive to past tense.""

During a conflicting merge, you would typically see:

  Auto-merged foo.txt
  CONFLICT (content): Merge conflict in foo.txt
  Recorded preimage for 'foo.txt'
  Automatic merge failed; fix conflicts and then commit the result.

and left wondering what happened to ""foo.txt"".  Did it succeed, and then
conflicted, and then what?

This is because historically there was a progress bar displayed before the
auto-merge is mentioned, and it was expected to take long time, before we
can say ""Auto-merged foo.txt"".  It turns out it was not the case, and the
original wording ""Auto-merging foo.txt"" we used to have before 89f40be
(Convert output messages in merge-recursive to past tense., 2007-01-14) is
better.

Acked-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_6873.cpp,,,data/crawl/git/old_hunk_6873.cpp,data/crawl/git/new_hunk_6873.cpp,6,6,"output(2, ""Auto-merged %s"", ren1_dst);","output(2, ""Auto-merging %s"", ren1_dst);","[""updateContent""]","[[""merged""], [""merging""]]",[787777882735808692],6001,0.0,2
https://github.com/git/git/commit/abeb40e5aa5b4a39799ae1caad241c8c7708053a,30 Aug 2008,"improve reliability of fixup_pack_header_footer()

Currently, this function has the potential to read corrupted pack data
from disk and give it a valid SHA1 checksum.  Let's add the ability to
validate SHA1 checksum of existing data along the way, including before
and after any arbitrary point in the pack.

Signed-off-by: Nicolas Pitre <nico@cam.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6858.cpp,,,data/crawl/git/old_hunk_6858.cpp,data/crawl/git/new_hunk_6858.cpp,14,35,"die(""Failed seeking to start: %s"", strerror(errno));","die(""Failed seeking to start of %s: %s"", pack_name, strerror(errno));","[""updateContent"", ""addVariable""]","[[], [""of"", ""%s"", ""pack_name""]]",[8323425245676669625],6000,0.0,2
https://github.com/git/git/commit/38901a48375952ab6c02f22bddfa19ac2bec2c36,31 Aug 2008,"checkout --ours/--theirs: allow checking out one side of a conflicting merge

This lets you to check out 'our' (or 'their') version of an
unmerged path out of the index while resolving conflicts.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_6846.cpp,,,data/crawl/git/old_hunk_6846.cpp,data/crawl/git/new_hunk_6846.cpp,-1,11,,"error(""path '%s' does not have %s version"",
		     ce->name,
		     (stage == 2) ? ""our"" : ""their"");","[""addLog""]","[[], [""error"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""%s"", ""version"", ""ce"", ""name"", ""stage"", ""2"", ""our"", ""their""]]",[29534638648382695343],5999,0.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,1124,,"output(1, ""CONFLICT (submodule): Merge conflict in %s ""
			       ""- needs %s"", path, sha1_to_hex(b.sha1));","[""addLog""]","[[], [""output"", ""1"", ""CONFLICT"", ""submodule"", ""Merge"", ""conflict"", ""in"", ""%s"", ""needs"", ""%s"", ""path"", ""sha1_to_hex"", ""b"", ""sha1""]]",[-112762431116338243],5998,183600.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,893,,"output(2, ""Auto-merging %s"", ren1_dst);","[""addLog""]","[[], [""output"", ""2"", ""Auto"", ""merging"", ""%s"", ""ren1_dst""]]",[-17344062129893604923],5997,0.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,712,,"die(""unsupported object type in the tree"");","[""addLog""]","[[], [""die"", ""unsupported"", ""object"", ""type"", ""in"", ""the"", ""tree""]]",[-11115034271164745861],5996,190080.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,533,,"die(""cannot read object %s '%s': It is a submodule!"",
			    sha1_to_hex(sha), path);","[""addLog""]","[[], [""die"", ""cannot"", ""read"", ""object"", ""%s"", ""%s"", ""It"", ""is"", ""a"", ""submodule"", ""sha1_to_hex"", ""sha"", ""path""]]",[-18923520020323435169],5995,183600.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,502,,"error(msg, path, "": perhaps a D/F conflict?"");","[""addLog""]","[[], [""error"", ""msg"", ""path"", ""perhaps"", ""a"", ""D/F"", ""conflict""]]",[29861704676970919802],5994,0.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,242,,"die(""error building trees"");","[""addLog""]","[[], [""die"", ""error"", ""building"", ""trees""]]",[17586083037598925326],5993,203040.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6834.cpp,,,data/crawl/git/old_hunk_6834.cpp,data/crawl/git/new_hunk_6834.cpp,-1,100,,"fputs(obuf.buf, stdout);","[""addLog""]","[[], [""fputs"", ""obuf"", ""buf"", ""stdout""]]",[-11907005804303826018],5992,248400.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,892,-1,"output(2, ""Auto-merging %s"", ren1_dst);",,"[""removeLog""]","[[""output"", ""2"", ""Auto"", ""merging"", ""%s"", ""ren1_dst""], []]",[17344062129893604923],5991,0.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,501,-1,"error(msg, path, "": perhaps a D/F conflict?"");",,"[""removeLog""]","[[""error"", ""msg"", ""path"", ""perhaps"", ""a"", ""D/F"", ""conflict""], []]",[-29861704676970919802],5990,0.0,2
https://github.com/git/git/commit/9047ebbc229bf5b99d6c7522293b8cbd1100b747,31 Aug 2008,"Split out merge_recursive() to merge-recursive.c

Move most of the of code from builtin-merge-recursive.c to a new file
merge-recursive.c and introduce merge_recursive_setup() in there so that
builtin-merge-recursive and other builtins call it.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2665,data/crawl/git/hunk_6830.cpp,,,data/crawl/git/old_hunk_6830.cpp,data/crawl/git/new_hunk_6830.cpp,241,-1,"die(""error building trees"");",,"[""removeLog""]","[[""die"", ""error"", ""building"", ""trees""], []]",[-17586083037598925326],5989,149040.0,2
https://github.com/git/git/commit/8a2fce1895c058945d8e2dbd8cb7456cc7450ad8,31 Aug 2008,"merge-recursive: introduce merge_options

This makes it possible to avoid passing the labels of branches as
arguments to merge_recursive(), merge_trees() and
merge_recursive_generic().

It also takes care of subtree merge, output buffering, verbosity, and
rename limits - these were global variables till now in
merge-recursive.c.

A new function, named init_merge_options(), is introduced as well, it
clears the struct merge_info, then initializes with default values,
finally updates the default values based on the config and environment
variables.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",361,data/crawl/git/hunk_6821.cpp,,,data/crawl/git/old_hunk_6821.cpp,data/crawl/git/new_hunk_6821.cpp,10,10,"output(1, ""CONFLICT (delete/modify): %s deleted in %s ""
				       ""and modified in %s. Version %s of %s left in tree."",
				       path, branch1,
				       branch2, branch2, path);","output(o, 1, ""CONFLICT (delete/modify): %s deleted in %s ""
				       ""and modified in %s. Version %s of %s left in tree."",
				       path, o->branch1,
				       o->branch2, o->branch2, path);","[""removeVariable"", ""addVariable""]","[[], [""o"", ""o"", ""o"", ""o""]]",[56832170936],5988,0.0,2
https://github.com/git/git/commit/83caecca2f0805d440099d19011fdedc2b3467a5,01 Oct 2008,"git grep: Add ""-z/--null"" option as in GNU's grep.

Here's a trivial patch that adds ""-z"" and ""--null"" options to ""git
grep"". It was discussed on the mailing-list that git's ""-z""
convention should be used instead of GNU grep's ""-Z"".
So things like 'git grep -l -z ""$FOO"" | xargs -0 sed -i ""s/$FOO/$BOO/""'
do work now.

Signed-off-by: Raphael Zimmerer <killekulla@rdrz.de>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",29,data/crawl/git/hunk_6717.cpp,,,data/crawl/git/old_hunk_6717.cpp,data/crawl/git/new_hunk_6717.cpp,3,3,"printf(""%s\n"", name);","show_name(opt, name);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""printf"", ""%s\\n""], [""show_name"", ""opt""]]",[-7288110719436356639],5987,0.0,2
https://github.com/git/git/commit/668f26fff610605d112fbedffae79917de948893,03 Oct 2008,"builtin-merge: refresh the index before calling a strategy

In case a file is touched but has no real changes then we just have to
update the index and should not error out.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",19,data/crawl/git/hunk_6710.cpp,,,data/crawl/git/old_hunk_6710.cpp,data/crawl/git/new_hunk_6710.cpp,-1,11,,"error(""Unable to write index."");","[""addLog""]","[[], [""error"", ""Unable"", ""to"", ""write"", ""index""]]",[15102046054076746924],5986,23760.0,2
https://github.com/git/git/commit/048f2762007d022defceb6850a44bc1bd5ccebf7,06 Oct 2008,"do not segfault if make_cache_entry failed

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",7,data/crawl/git/hunk_6704.cpp,,,data/crawl/git/old_hunk_6704.cpp,data/crawl/git/new_hunk_6704.cpp,-1,4,,"die(""make_cache_entry failed for path '%s'"",
				    one->path);","[""addLog""]","[[], [""die"", ""make_cache_entry"", ""failed"", ""for"", ""path"", ""%s"", ""one"", ""path""]]",[-890889822803427385],5985,0.0,2
https://github.com/git/git/commit/048f2762007d022defceb6850a44bc1bd5ccebf7,06 Oct 2008,"do not segfault if make_cache_entry failed

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",7,data/crawl/git/hunk_6702.cpp,,,data/crawl/git/old_hunk_6702.cpp,data/crawl/git/new_hunk_6702.cpp,-1,4,,"die(""make_cache_entry failed for path '%s'"", name);","[""addLog""]","[[], [""die"", ""make_cache_entry"", ""failed"", ""for"", ""path"", ""%s"", ""name""]]",[-13335064711808614844],5984,0.0,2
https://github.com/git/git/commit/7e7abea96b8140c592a46293f5e33aae0683c7ac,12 Oct 2008,"print an error message for invalid path

If verification of path failed, it is always better to print an
error message saying this than relying on the caller function to
print a meaningful error message (especially when the callee already
prints error message for another situation).

Because the callers of add_index_entry_with_check() did not print
any error message, it resulted that the user would not notice the
problem when checkout of an invalid path failed.

Signed-off-by: Dmitry Potapov <dpotapov@gmail.com>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",8,data/crawl/git/hunk_6697.cpp,,,data/crawl/git/old_hunk_6697.cpp,data/crawl/git/new_hunk_6697.cpp,-1,3,,"error(""Invalid path '%s'"", path);","[""addLog""]","[[], [""error"", ""Invalid"", ""path"", ""%s"", ""path""]]",[8445380911383275829],5983,0.0,2
https://github.com/git/git/commit/51a94af845cb3f797abd638478834721d7295af7,17 Oct 2008,"Fix ""checkout --track -b newbranch"" on detached HEAD

The test to make sure that checkout fails when --track was asked for and
we cannot set up tracking information in t7201 was wrong, and it turns out
that the implementation for that feature itself was buggy.  This fixes it.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_6682.cpp,,,data/crawl/git/old_hunk_6682.cpp,data/crawl/git/new_hunk_6682.cpp,-1,5,,"die(""Cannot setup tracking information; starting point is not a branch."");","[""addLog""]","[[], [""die"", ""Cannot"", ""setup"", ""tracking"", ""information"", ""starting"", ""point"", ""is"", ""not"", ""a"", ""branch""]]",[-13583089949870744539],5982,172800.0,2
https://github.com/git/git/commit/bf98421a3363696f3b4c8aedc242bfaadc1ce6f6,05 Nov 2008,"Implement git remote rename

The new rename subcommand does the followings:

1) Renames the remote.foo configuration section to remote.bar

2) Updates the remote.bar.fetch refspecs

3) Updates the branch.*.remote settings

4) Renames the tracking branches: renames the normal refs and rewrites
   the symrefs to point to the new refs.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_6635.cpp,,,data/crawl/git/old_hunk_6635.cpp,data/crawl/git/new_hunk_6635.cpp,-1,72,,"error(""Could not remove config section '%s'"", buf.buf);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""remove"", ""config"", ""section"", ""%s"", ""buf"", ""buf""]]",[24017358688279476899],5981,179280.0,2
https://github.com/git/git/commit/beece9dab8e26c98062351536ce0d871a066790e,12 Nov 2008,"git send-email: ask less questions when --compose is used.

When --compose is used, we can grab the From/Subject/In-Reply-To from the
edited summary, let it be so and don't ask the user silly questions.

The summary templates gets quite revamped, and includes the list of
patches subjects that are going to be sent with this batch.

When having a body full of empty lines, the summary isn't sent. Document
that in the git-send-email manpage fully.

Note: It doesn't deal with To/Cc/Bcc yet.

Signed-off-by: Pierre Habouzit <madcoder@debian.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",196,data/crawl/git/hunk_6621.cpp,,,data/crawl/git/old_hunk_6621.cpp,data/crawl/git/new_hunk_6621.cpp,-1,6,,"die(""the editor exited uncleanly, aborting everything"");","[""addLog""]","[[], [""die"", ""the"", ""editor"", ""exited"", ""uncleanly"", ""aborting"", ""everything""]]",[7707374053350256772],5980,0.0,2
https://github.com/git/git/commit/331fcb598ec0127fd89c992361bc573dcd3a4a63,01 Dec 2008,"git add --intent-to-add: do not let an empty blob be committed by accident

Writing a tree out of an index with an ""intent to add"" entry is blocked.
This implies that you cannot ""git commit"" from such a state; however you
can still do ""git commit -a"" or ""git commit $that_path"".

Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_6605.cpp,,,data/crawl/git/old_hunk_6605.cpp,data/crawl/git/new_hunk_6605.cpp,3,3,"error(""Error building trees; the index is unmerged?"");","error(""Error building trees"");","[""updateContent""]","[[""the"", ""index"", ""is"", ""unmerged""], []]",[7848365903348785310],5979,0.0,2
https://github.com/git/git/commit/b96524f83aa6ba7bd08fb59bb0aa07453a984a8d,08 Dec 2008,"builtin-checkout.c: check error return from read_cache()

Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_6590.cpp,,,data/crawl/git/old_hunk_6590.cpp,data/crawl/git/new_hunk_6590.cpp,-1,4,,"error(""corrupt index file"");","[""addLog""]","[[], [""error"", ""corrupt"", ""index"", ""file""]]",[-8589857869487119802],5978,0.0,2
https://github.com/git/git/commit/34292bddb861f3cb52a524fdce67234430a744fe,07 Jan 2009,"Introduce the diff option '--patience'

This commit teaches Git to produce diff output using the patience diff
algorithm with the diff option '--patience'.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",175,data/crawl/git/hunk_6539.cpp,,,data/crawl/git/old_hunk_6539.cpp,data/crawl/git/new_hunk_6539.cpp,-1,15,,"printf(""Your answer is: "");","[""addLog""]","[[], [""printf"", ""Your"", ""answer"", ""is""]]",[3293781976823011190],5977,0.0,2
https://github.com/git/git/commit/ae98a0089ff7f7641ed15ddd595797de56eb49f1,18 Jan 2009,"Move run_hook() from builtin-commit.c into run-command.c (libgit)

A function that runs a hook is used in several Git commands.
builtin-commit.c has the one that is most general for cases without
piping. The one in builtin-gc.c prints some useful warnings.
This patch moves a merged version of these variants into libgit and
lets the other builtins use this libified run_hook().

The run_hook() function used in receive-pack.c feeds the standard
input of the pre-receive or post-receive hooks. This function is
renamed to run_receive_hook() because the libified run_hook() cannot
handle this.

Mentored-by: Daniel Barkalow <barkalow@iabervon.org>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/hunk_6524.cpp,,,data/crawl/git/old_hunk_6524.cpp,data/crawl/git/new_hunk_6524.cpp,-1,44,,"warning(""%s exited due to uncaught signal"", argv[0]);","[""addLog""]","[[], [""warning"", ""%s"", ""exited"", ""due"", ""to"", ""uncaught"", ""signal"", ""argv[0]""]]",[6886008756878022294],5976,204480.0,2
https://github.com/git/git/commit/ae98a0089ff7f7641ed15ddd595797de56eb49f1,18 Jan 2009,"Move run_hook() from builtin-commit.c into run-command.c (libgit)

A function that runs a hook is used in several Git commands.
builtin-commit.c has the one that is most general for cases without
piping. The one in builtin-gc.c prints some useful warnings.
This patch moves a merged version of these variants into libgit and
lets the other builtins use this libified run_hook().

The run_hook() function used in receive-pack.c feeds the standard
input of the pre-receive or post-receive hooks. This function is
renamed to run_receive_hook() because the libified run_hook() cannot
handle this.

Mentored-by: Daniel Barkalow <barkalow@iabervon.org>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/hunk_6524.cpp,,,data/crawl/git/old_hunk_6524.cpp,data/crawl/git/new_hunk_6524.cpp,-1,39,,"warning(""Could not spawn %s"", argv[0]);","[""addLog""]","[[], [""warning"", ""Could"", ""not"", ""spawn"", ""%s"", ""argv[0]""]]",[7894034535750416282],5975,204480.0,2
https://github.com/git/git/commit/ae98a0089ff7f7641ed15ddd595797de56eb49f1,18 Jan 2009,"Move run_hook() from builtin-commit.c into run-command.c (libgit)

A function that runs a hook is used in several Git commands.
builtin-commit.c has the one that is most general for cases without
piping. The one in builtin-gc.c prints some useful warnings.
This patch moves a merged version of these variants into libgit and
lets the other builtins use this libified run_hook().

The run_hook() function used in receive-pack.c feeds the standard
input of the pre-receive or post-receive hooks. This function is
renamed to run_receive_hook() because the libified run_hook() cannot
handle this.

Mentored-by: Daniel Barkalow <barkalow@iabervon.org>
Mentored-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Stephan Beyer <s-beyer@gmx.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",170,data/crawl/git/hunk_6524.cpp,,,data/crawl/git/old_hunk_6524.cpp,data/crawl/git/new_hunk_6524.cpp,-1,18,,"die(""run_hook(): too many arguments"");","[""addLog""]","[[], [""die"", ""run_hook"", ""too"", ""many"", ""arguments""]]",[-9417533275540226569],5974,249840.0,2
https://github.com/git/git/commit/bdfd739dac4c109ce360d38d0572d8717a46e795,05 Mar 2009,"Make the 'lock file' exists error more informative

It looks like someone did 90% of the work, then forgot to actually use
the function in one place.

Also the helper function did not use the correct variable.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_6423.cpp,,,data/crawl/git/old_hunk_6423.cpp,data/crawl/git/new_hunk_6423.cpp,3,-1,"die(""unable to create '%s.lock': %s"", path, strerror(errno));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""create"", ""%s"", ""lock"", ""%s"", ""path"", ""strerror"", ""errno""], []]",[-20353369118174050859],5973,9360.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,109,,"print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,
				""non-fast forward"");","[""addLog""]","[[], [""print_ref_status"", ""[rejected]"", ""ref"", ""ref"", ""peer_ref"", ""non"", ""fast"", ""forward""]]",[20569579982590242502],5972,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,105,,"print_ref_status('=', ""[up to date]"", ref,
				ref->peer_ref, NULL);","[""addLog""]","[[], [""print_ref_status"", ""[up"", ""to"", ""date]"", ""ref"", ""ref"", ""peer_ref"", ""NULL""]]",[6697836592414420473],5971,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,101,,"print_ref_status('!', ""[rejected]"", ref, NULL,
				""remote does not support deleting refs"");","[""addLog""]","[[], [""print_ref_status"", ""[rejected]"", ""ref"", ""NULL"", ""remote"", ""does"", ""not"", ""support"", ""deleting"", ""refs""]]",[-5182291302473503198],5970,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,98,,"print_ref_status('X', ""[no match]"", ref, NULL, NULL);","[""addLog""]","[[], [""print_ref_status"", ""X"", ""[no"", ""match]"", ""ref"", ""NULL"", ""NULL""]]",[15623782043512259446],5969,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,87,,"print_ref_status(type, quickref, ref, ref->peer_ref, msg);","[""addLog""]","[[], [""print_ref_status"", ""type"", ""quickref"", ""ref"", ""ref"", ""peer_ref"", ""msg""]]",[24275515658880494598],5968,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,66,,"print_ref_status('*',
			(!prefixcmp(ref->name, ""refs/tags/"") ? ""[new tag]"" :
			  ""[new branch]""),
			ref, ref->peer_ref, NULL);","[""addLog""]","[[], [""print_ref_status"", ""*"", ""prefixcmp"", ""ref"", ""name"", ""refs/tags/"", ""[new"", ""tag]"", ""[new"", ""branch]"", ""ref"", ""ref"", ""peer_ref"", ""NULL""]]",[16717067869529064642],5967,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,64,,"print_ref_status('-', ""[deleted]"", ref, NULL, NULL);","[""addLog""]","[[], [""print_ref_status"", ""[deleted]"", ""ref"", ""NULL"", ""NULL""]]",[-4163962946958414140],5966,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,50,,"fputs(msg, stderr);","[""addLog""]","[[], [""fputs"", ""msg"", ""stderr""]]",[-5834981012346286625],5965,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,49,,"fputs("" ("", stderr);","[""addLog""]","[[], [""fputs"", ""stderr""]]",[-12222138665392642905],5964,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,47,,"fputs(prettify_ref(to), stderr);","[""addLog""]","[[], [""fputs"", ""prettify_ref"", ""to"", ""stderr""]]",[-17432424811187718123],5963,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,45,,"fprintf(stderr, ""%s -> %s"", prettify_ref(from), prettify_ref(to));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%s"", ""prettify_ref"", ""from"", ""prettify_ref"", ""to""]]",[-24861161991844434283],5962,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,43,,"fprintf(stderr, "" %c %-*s "", flag, SUMMARY_WIDTH, summary);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c"", ""%"", ""*s"", ""flag"", ""SUMMARY_WIDTH"", ""summary""]]",[-27842522839188031532],5961,344160.0,2
https://github.com/git/git/commit/64fcef2daa03f6093b480142c6ab2a4173b0b43e,09 Mar 2009,"Move push matching and reporting logic into transport.c

For native-protocol pushes (and other protocols as they are converted
to the new method), this moves the refspec match, tracking update, and
report message out of send-pack() and into transport_push(), where it
can be shared completely with other protocols. This also makes fetch
and push more similar in terms of what code is in what file.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",435,data/crawl/git/hunk_6395.cpp,,,data/crawl/git/old_hunk_6395.cpp,data/crawl/git/new_hunk_6395.cpp,-1,29,,"fprintf(stderr, ""updating local tracking ref '%s'\n"", rs.dst);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""updating"", ""local"", ""tracking"", ""ref"", ""%s"", ""\\n"", ""rs"", ""dst""]]",[-15544234398164223894],5960,365760.0,2
https://github.com/git/git/commit/fa685bdf45cbaa997255cc78a23494b995e9769a,11 Mar 2009,"Give error when no remote is configured

When there's no explicitly-named remote, we use the remote specified
for the current branch, which in turn defaults to ""origin"". But it
this case should require the remote to actually be configured, and not
fall back to the path ""origin"".

Possibly, the config file's ""remote = something"" should require the
something to be a configured remote instead of a bare repository URL,
but we actually test with a bare repository URL.

In fetch, we were giving the sensible error message when coming up
with a URL failed, but this wasn't actually reachable, so move that
error up and use it when appropriate.

In push, we need a new error message, because the old one (formerly
unreachable without a lot of help) used the repo name, which was NULL.

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_6388.cpp,,,data/crawl/git/old_hunk_6388.cpp,data/crawl/git/new_hunk_6388.cpp,-1,4,,"die(""Where do you want to fetch from today?"");","[""addLog""]","[[], [""die"", ""Where"", ""do"", ""you"", ""want"", ""to"", ""fetch"", ""from"", ""today""]]",[-7991887752285653370],5959,388080.0,2
https://github.com/git/git/commit/7efaeba2a8006bb52712eb90c6fbc736b9632cab,11 Mar 2009,"rsync transport: allow local paths, and fix tests

Earlier, the rsync tests were disabled by default, as they needed a
running rsyncd daemon.  This was only due to the limitation that our
rsync transport only allowed full URLs of the form

	rsync://<host>/<path>

Relaxing the URLs to allow

	rsync:<path>

permitted the change in the tests to run whenever rsync is available,
without requiring a fully configured and running rsyncd.

While at it, the tests were fixed so that they run in directories with a
space in their name.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",62,data/crawl/git/hunk_6386.cpp,,,data/crawl/git/old_hunk_6386.cpp,data/crawl/git/new_hunk_6386.cpp,3,3,"error(""Could not push objects to %s"", transport->url);","error(""Could not push objects to %s"",
				rsync_url(transport->url));","[""addVariable""]","[[], [""rsync_url""]]",[1639309761686454876],5958,0.0,2
https://github.com/git/git/commit/c511549e0c6848f00bd19f152b8ab42261ff5d0c,22 Mar 2009,"Sync with maint

Signed-off-by: Junio C Hamano <gitster@pobox.com>",57,data/crawl/git/hunk_6348.cpp,,,data/crawl/git/old_hunk_6348.cpp,data/crawl/git/new_hunk_6348.cpp,4,-1,"die (""--numbered-files and --stdout are mutually exclusive."");",,"[""removeLog""]","[[""die"", ""numbered"", ""files"", ""and"", ""stdout"", ""are"", ""mutually"", ""exclusive""], []]",[-4215393860170679319],5957,0.0,2
https://github.com/git/git/commit/c59cb03a8bfc4b09758b07b23b6fe70a909ff9f4,12 Apr 2009,"git-add: introduce --edit (to edit the diff vs. the index)

With ""git add -e [<files>]"", Git will fire up an editor with the current
diff relative to the index (i.e. what you would get with ""git diff
[<files>]"").

Now you can edit the patch as much as you like, including adding/removing
lines, editing the text, whatever.  Make sure, though, that the first
character of the hunk lines is still a space, a plus or a minus.

After you closed the editor, Git will adjust the line counts of the hunks
if necessary, thanks to the --recount option of apply, and commit the
patch.  Except if you deleted everything, in which case nothing happens
(for obvious reasons).

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",179,data/crawl/git/hunk_6272.cpp,,,data/crawl/git/old_hunk_6272.cpp,data/crawl/git/new_hunk_6272.cpp,-1,16,,"die (""Could not read the index"");","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""read"", ""the"", ""index""]]",[-4349930399654741362],5956,291600.0,2
https://github.com/git/git/commit/8d2dfc49b199c7da6faefd7993630f24bd37fee0,13 Apr 2009,"process_{tree,blob}: show objects without buffering

Here's a less trivial thing, and slightly more dubious one.

I was looking at that ""struct object_array objects"", and wondering why we
do that. I have honestly totally forgotten. Why not just call the ""show()""
function as we encounter the objects? Rather than add the objects to the
object_array, and then at the very end going through the array and doing a
'show' on all, just do things more incrementally.

Now, there are possible downsides to this:

 - the ""buffer using object_array"" _can_ in theory result in at least
   better I-cache usage (two tight loops rather than one more spread out
   one). I don't think this is a real issue, but in theory..

 - this _does_ change the order of the objects printed. Instead of doing a
   ""process_tree(revs, commit->tree, &objects, NULL, """");"" in the loop
   over the commits (which puts all the root trees _first_ in the object
   list, this patch just adds them to the list of pending objects, and
   then we'll traverse them in that order (and thus show each root tree
   object together with the objects we discover under it)

   I _think_ the new ordering actually makes more sense, but the object
   ordering is actually a subtle thing when it comes to packing
   efficiency, so any change in order is going to have implications for
   packing. Good or bad, I dunno.

 - There may be some reason why we did it that odd way with the object
   array, that I have simply forgotten.

Anyway, now that we don't buffer up the objects before showing them
that may actually result in lower memory usage during that whole
traverse_commit_list() phase.

This is seriously not very deeply tested. It makes sense to me, it seems
to pass all the tests, it looks ok, but...

Does anybody remember why we did that ""object_array"" thing? It used to be
an ""object_list"" a long long time ago, but got changed into the array due
to better memory usage patterns (those linked lists of obejcts are
horrible from a memory allocation standpoint). But I wonder why we didn't
do this back then. Maybe there's a reason for it.

Or maybe there _used_ to be a reason, and no longer is.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_6268.cpp,,,data/crawl/git/old_hunk_6268.cpp,data/crawl/git/new_hunk_6268.cpp,23,23,"printf(""%s %s\n"", sha1_to_hex(p->item->sha1), p->name);","printf(""%s %s\n"", sha1_to_hex(obj->sha1), name);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""p"", ""item"", ""p""], [""obj""]]",[10627778665868070289],5955,0.0,2
https://github.com/git/git/commit/8d2dfc49b199c7da6faefd7993630f24bd37fee0,13 Apr 2009,"process_{tree,blob}: show objects without buffering

Here's a less trivial thing, and slightly more dubious one.

I was looking at that ""struct object_array objects"", and wondering why we
do that. I have honestly totally forgotten. Why not just call the ""show()""
function as we encounter the objects? Rather than add the objects to the
object_array, and then at the very end going through the array and doing a
'show' on all, just do things more incrementally.

Now, there are possible downsides to this:

 - the ""buffer using object_array"" _can_ in theory result in at least
   better I-cache usage (two tight loops rather than one more spread out
   one). I don't think this is a real issue, but in theory..

 - this _does_ change the order of the objects printed. Instead of doing a
   ""process_tree(revs, commit->tree, &objects, NULL, """");"" in the loop
   over the commits (which puts all the root trees _first_ in the object
   list, this patch just adds them to the list of pending objects, and
   then we'll traverse them in that order (and thus show each root tree
   object together with the objects we discover under it)

   I _think_ the new ordering actually makes more sense, but the object
   ordering is actually a subtle thing when it comes to packing
   efficiency, so any change in order is going to have implications for
   packing. Good or bad, I dunno.

 - There may be some reason why we did it that odd way with the object
   array, that I have simply forgotten.

Anyway, now that we don't buffer up the objects before showing them
that may actually result in lower memory usage during that whole
traverse_commit_list() phase.

This is seriously not very deeply tested. It makes sense to me, it seems
to pass all the tests, it looks ok, but...

Does anybody remember why we did that ""object_array"" thing? It used to be
an ""object_list"" a long long time ago, but got changed into the array due
to better memory usage patterns (those linked lists of obejcts are
horrible from a memory allocation standpoint). But I wonder why we didn't
do this back then. Maybe there's a reason for it.

Or maybe there _used_ to be a reason, and no longer is.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_6268.cpp,,,data/crawl/git/old_hunk_6268.cpp,data/crawl/git/new_hunk_6268.cpp,18,18,"printf(""%s %.*s\n"", sha1_to_hex(p->item->sha1),
		       (int) (ep - p->name),
		       p->name);","printf(""%s %.*s\n"", sha1_to_hex(obj->sha1),
		       (int) (ep - name),
		       name);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""p"", ""item"", ""p"", ""p""], [""obj""]]",[10627778651532027168],5954,0.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6267.cpp,,,data/crawl/git/old_hunk_6267.cpp,data/crawl/git/new_hunk_6267.cpp,-1,3,,"fprintf(stderr, ""%s: protocol error: bad band #%d\n"",
				me, band);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""protocol"", ""error"", ""bad"", ""band"", ""%d\\n"", ""me"", ""band""]]",[9773954996274490292],5953,23760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6266.cpp,,,data/crawl/git/old_hunk_6266.cpp,data/crawl/git/new_hunk_6266.cpp,-1,8,,"fprintf(stderr, ""%.*s"", l, b);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""l"", ""b""]]",[-13920279221043309811],5952,23760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6266.cpp,,,data/crawl/git/old_hunk_6266.cpp,data/crawl/git/new_hunk_6266.cpp,-1,3,,"fprintf(stderr, ""%.*s"", brk + sf, b);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""brk"", ""sf"", ""b""]]",[-13578534929604977743],5951,23760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6265.cpp,,,data/crawl/git/old_hunk_6265.cpp,data/crawl/git/new_hunk_6265.cpp,-1,12,,"fprintf(stderr, ""%s\n"", buf);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s\\n"", ""buf""]]",[-7453665828204501480],5950,23760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6265.cpp,,,data/crawl/git/old_hunk_6265.cpp,data/crawl/git/new_hunk_6265.cpp,-1,3,,"fprintf(stderr, ""%s: protocol error: no band designator\n"", me);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""protocol"", ""error"", ""no"", ""band"", ""designator\\n"", ""me""]]",[-2978716739131372925],5949,23760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6264.cpp,,,data/crawl/git/old_hunk_6264.cpp,data/crawl/git/new_hunk_6264.cpp,-1,87,,"die(""cannot happen -- lo and hi are identical"");","[""addLog""]","[[], [""die"", ""cannot"", ""happen"", ""lo"", ""and"", ""hi"", ""are"", ""identical""]]",[-1893634234718316761],5948,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6263.cpp,,,data/crawl/git/old_hunk_6263.cpp,data/crawl/git/new_hunk_6263.cpp,-1,4,,"die(""--unpacked=<packfile> no longer supported."");","[""addLog""]","[[], [""die"", ""unpacked"", ""packfile"", ""no"", ""longer"", ""supported""]]",[-252771810548275390],5947,31680.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6260.cpp,,,data/crawl/git/old_hunk_6260.cpp,data/crawl/git/new_hunk_6260.cpp,-1,5,,"die(""Didn't think it matches any more"");","[""addLog""]","[[], [""die"", ""Didn"", ""t"", ""think"", ""it"", ""matches"", ""any"", ""more""]]",[-13446515093465294601],5946,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6257.cpp,,,data/crawl/git/old_hunk_6257.cpp,data/crawl/git/new_hunk_6257.cpp,-1,23,,"die(""Value '%s' of pattern has no '*'"", value);","[""addLog""]","[[], [""die"", ""Value"", ""%s"", ""of"", ""pattern"", ""has"", ""no"", ""*"", ""value""]]",[-29268477300436945342],5945,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6257.cpp,,,data/crawl/git/old_hunk_6257.cpp,data/crawl/git/new_hunk_6257.cpp,-1,12,,"die(""Key '%s' of pattern had no '*'"", key);","[""addLog""]","[[], [""die"", ""Key"", ""%s"", ""of"", ""pattern"", ""had"", ""no"", ""*"", ""key""]]",[3940493439262127363],5944,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6252.cpp,,,data/crawl/git/old_hunk_6252.cpp,data/crawl/git/new_hunk_6252.cpp,13,15,"printf(""%s"", show_date(info->timestamp,
							info->tz,
							relative_date));","printf(""%s"", show_date(info->timestamp,
							info->tz,
							dmode));","[""updateVariable""]","[[""relative_date""], [""dmode""]]",[5793697268602874178],5943,17280.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6252.cpp,,,data/crawl/git/old_hunk_6252.cpp,data/crawl/git/new_hunk_6252.cpp,4,4,"printf(""%s"", show_date(info->timestamp, 0, 1));","printf(""%s"", show_date(info->timestamp,
						       info->tz,
						       dmode));","[""removeContent"", ""addVariable""]","[[""0"", ""1""], [""info"", ""tz"", ""dmode""]]",[-6766168443801210717],5942,17280.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6248.cpp,,,data/crawl/git/old_hunk_6248.cpp,data/crawl/git/new_hunk_6248.cpp,81,-1,"die(""cannot happen -- lo and hi are identical"");",,"[""removeLog""]","[[""die"", ""cannot"", ""happen"", ""lo"", ""and"", ""hi"", ""are"", ""identical""], []]",[1893634234718316761],5941,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6246.cpp,,,data/crawl/git/old_hunk_6246.cpp,data/crawl/git/new_hunk_6246.cpp,-1,5,,"die(""STOP_AT_NON_OPTION and KEEP_UNKNOWN don't go together"");","[""addLog""]","[[], [""die"", ""STOP_AT_NON_OPTION"", ""and"", ""KEEP_UNKNOWN"", ""don"", ""t"", ""go"", ""together""]]",[8667393928568049638],5940,25200.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6245.cpp,,,data/crawl/git/old_hunk_6245.cpp,data/crawl/git/new_hunk_6245.cpp,6,-1,"output(o, 1, ""CONFLICT (submodule): Merge conflict in %s ""
			       ""- needs %s"", path, sha1_to_hex(b.sha1));",,"[""removeLog""]","[[""output"", ""o"", ""1"", ""CONFLICT"", ""submodule"", ""Merge"", ""conflict"", ""in"", ""%s"", ""needs"", ""%s"", ""path"", ""sha1_to_hex"", ""b"", ""sha1""], []]",[112762416908295509],5939,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6243.cpp,,,data/crawl/git/old_hunk_6243.cpp,data/crawl/git/new_hunk_6243.cpp,-1,8,,"printf(""%s<%s>\n"", (i > 0 ? ""\t"" : ""References: ""),
			       opt->ref_message_ids->items[i].string);","[""addLog""]","[[], [""printf"", ""%s"", ""%s"", ""\\n"", ""i"", ""0"", ""\\t"", ""References"", ""opt"", ""ref_message_ids"", ""items[i]"", ""string""]]",[2613162031247947543],5938,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6243.cpp,,,data/crawl/git/old_hunk_6243.cpp,data/crawl/git/new_hunk_6243.cpp,-1,6,,"printf(""In-Reply-To: <%s>\n"", opt->ref_message_ids->items[n-1].string);","[""addLog""]","[[], [""printf"", ""In"", ""Reply"", ""To"", ""%s"", ""\\n"", ""opt"", ""ref_message_ids"", ""items[n"", ""1]"", ""string""]]",[-7679435240256991198],5937,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6239.cpp,,,data/crawl/git/old_hunk_6239.cpp,data/crawl/git/new_hunk_6239.cpp,11,11,"fprintf(stderr, ""Error: cannot lock existing info/refs\n"");","error(""cannot lock existing info/refs"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""Error"", ""info/refs\\n""], [""error"", ""info/refs""]]",[7509509266029151366],5936,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6223.cpp,,,data/crawl/git/old_hunk_6223.cpp,data/crawl/git/new_hunk_6223.cpp,-1,98,,"printf(""%.*s\n"", rest, bol);","[""addLog""]","[[], [""printf"", ""%"", ""*s\\n"", ""rest"", ""bol""]]",[10040247554738185048],5935,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6223.cpp,,,data/crawl/git/old_hunk_6223.cpp,data/crawl/git/new_hunk_6223.cpp,-1,78,,"printf(""%d%c"", lno, sign);","[""addLog""]","[[], [""printf"", ""%d%c"", ""lno"", ""sign""]]",[19055187051897603619],5934,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6223.cpp,,,data/crawl/git/old_hunk_6223.cpp,data/crawl/git/new_hunk_6223.cpp,-1,76,,"printf(""%s%c"", name, sign);","[""addLog""]","[[], [""printf"", ""%s%c"", ""name"", ""sign""]]",[7375412399495691455],5933,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6221.cpp,,,data/crawl/git/old_hunk_6221.cpp,data/crawl/git/new_hunk_6221.cpp,12,-1,"printf(""%.*s\n"", (int)(eol-bol), bol);",,"[""removeLog""]","[[""printf"", ""%"", ""*s\\n"", ""int"", ""eol"", ""bol"", ""bol""], []]",[-5755835118731484597],5932,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6221.cpp,,,data/crawl/git/old_hunk_6221.cpp,data/crawl/git/new_hunk_6221.cpp,11,-1,"printf(""%d%c"", lno, sign);",,"[""removeLog""]","[[""printf"", ""%d%c"", ""lno"", ""sign""], []]",[-19055187051897603619],5931,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6221.cpp,,,data/crawl/git/old_hunk_6221.cpp,data/crawl/git/new_hunk_6221.cpp,9,-1,"printf(""%s%c"", name, sign);",,"[""removeLog""]","[[""printf"", ""%s%c"", ""name"", ""sign""], []]",[-7375412399495691455],5930,26640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6218.cpp,,,data/crawl/git/old_hunk_6218.cpp,data/crawl/git/new_hunk_6218.cpp,71,-1,"error(""git checkout-index: unable to create ""
						 ""symlink %s (%s)"", path, strerror(errno));",,"[""removeLog""]","[[""error"", ""git"", ""checkout"", ""index"", ""unable"", ""to"", ""create"", ""symlink"", ""%s"", ""%s"", ""path"", ""strerror"", ""errno""], []]",[-26328047330387432830],5929,44640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6218.cpp,,,data/crawl/git/old_hunk_6218.cpp,data/crawl/git/new_hunk_6218.cpp,65,-1,"error(""git checkout-index: unable to write file %s"",
					path);",,"[""removeLog""]","[[""error"", ""git"", ""checkout"", ""index"", ""unable"", ""to"", ""write"", ""file"", ""%s"", ""path""], []]",[-22425507421417629656],5928,44640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6218.cpp,,,data/crawl/git/old_hunk_6218.cpp,data/crawl/git/new_hunk_6218.cpp,48,-1,"error(""git checkout-index: unable to read sha1 file of %s (%s)"",
				path, sha1_to_hex(ce->sha1));",,"[""removeLog""]","[[""error"", ""git"", ""checkout"", ""index"", ""unable"", ""to"", ""read"", ""sha1"", ""file"", ""of"", ""%s"", ""%s"", ""path"", ""sha1_to_hex"", ""ce"", ""sha1""], []]",[-1792656755483742203],5927,44640.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6211.cpp,,,data/crawl/git/old_hunk_6211.cpp,data/crawl/git/new_hunk_6211.cpp,-1,18,,"error(""Must be one of nothing, matching, ""
				     ""tracking or current."");","[""addLog""]","[[], [""error"", ""Must"", ""be"", ""one"", ""of"", ""nothing"", ""matching"", ""tracking"", ""or"", ""current""]]",[11068167450804801428],5926,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6211.cpp,,,data/crawl/git/old_hunk_6211.cpp,data/crawl/git/new_hunk_6211.cpp,-1,17,,"error(""Malformed value for %s: %s"", var, value);","[""addLog""]","[[], [""error"", ""Malformed"", ""value"", ""for"", ""%s"", ""%s"", ""var"", ""value""]]",[-12088697073719568253],5925,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6210.cpp,,,data/crawl/git/old_hunk_6210.cpp,data/crawl/git/new_hunk_6210.cpp,-1,44,,"warning(""unable to close file mapping handle\n"");","[""addLog""]","[[], [""warning"", ""unable"", ""to"", ""close"", ""file"", ""mapping"", ""handle\\n""]]",[660920672520927259],5924,18000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6210.cpp,,,data/crawl/git/old_hunk_6210.cpp,data/crawl/git/new_hunk_6210.cpp,-1,33,,"die(""Invalid usage of mmap when built with USE_WIN32_MMAP"");","[""addLog""]","[[], [""die"", ""Invalid"", ""usage"", ""of"", ""mmap"", ""when"", ""built"", ""with"", ""USE_WIN32_MMAP""]]",[-21100756105710444931],5923,18000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6210.cpp,,,data/crawl/git/old_hunk_6210.cpp,data/crawl/git/new_hunk_6210.cpp,-1,27,,"die(""mmap: could not determine filesize"");","[""addLog""]","[[], [""die"", ""mmap"", ""could"", ""not"", ""determine"", ""filesize""]]",[-6419377737722156513],5922,18000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6205.cpp,,,data/crawl/git/old_hunk_6205.cpp,data/crawl/git/new_hunk_6205.cpp,3,3,"die(""not a git archive"");","die(""'%s' does not appear to be a git repository"", buf);","[""updateContent"", ""addVariable""]","[[""archive""], [""%s"", ""does"", ""appear"", ""to"", ""be"", ""repository"", ""buf""]]",[-22460426853915015379],5921,28080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6203.cpp,,,data/crawl/git/old_hunk_6203.cpp,data/crawl/git/new_hunk_6203.cpp,3,3,"fprintf(stderr, ""warning: ref '%s' ignored\n"", ref);","warning(""ref '%s' ignored"", ref);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""ignored\\n""], [""ignored""]]",[17672800412672080234],5920,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6202.cpp,,,data/crawl/git/old_hunk_6202.cpp,data/crawl/git/new_hunk_6202.cpp,3,3,"fprintf(stderr, ""warning: ignoring %s; ""
			""cannot handle more than %d refs\n"",
			refname, MAX_REVS);","warning(""ignoring %s; cannot handle more than %d refs"",
			refname, MAX_REVS);","[""updateLog"", ""removeVariable"", ""updateContent"", ""removeContent""]","[[""fprintf"", ""stderr"", ""refs\\n""], [""refs""]]",[4037187641547366646],5919,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6200.cpp,,,data/crawl/git/old_hunk_6200.cpp,data/crawl/git/new_hunk_6200.cpp,23,-1,"fprintf(stderr, ""Everything up-to-date\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Everything"", ""up"", ""to"", ""date\\n""], []]",[-1517109462172770441],5918,25200.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6195.cpp,,,data/crawl/git/old_hunk_6195.cpp,data/crawl/git/new_hunk_6195.cpp,119,-1,"fprintf(stderr, "" %.*s"", 8, sha1_to_hex(commit->object.sha1));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%"", ""*s"", ""8"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""], []]",[18701552024235154547],5917,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6195.cpp,,,data/crawl/git/old_hunk_6195.cpp,data/crawl/git/new_hunk_6195.cpp,116,-1,"fprintf(stderr, ""%3d"", weight(p));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%3d"", ""weight"", ""p""], []]",[12350335568242920908],5916,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6195.cpp,,,data/crawl/git/old_hunk_6195.cpp,data/crawl/git/new_hunk_6195.cpp,111,-1,"fprintf(stderr, ""%c%c%c "",
			(flags & TREESAME) ? ' ' : 'T',
			(flags & UNINTERESTING) ? 'U' : ' ',
			(flags & COUNTED) ? 'C' : ' ');",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%c%c%c"", ""flags"", ""&"", ""TREESAME"", ""T"", ""flags"", ""&"", ""UNINTERESTING"", ""U"", ""flags"", ""&"", ""COUNTED"", ""C""], []]",[8125646100924237453],5915,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6190.cpp,,,data/crawl/git/old_hunk_6190.cpp,data/crawl/git/new_hunk_6190.cpp,22,27,"printf(""Pruning %s\n"", *argv);","printf(""Pruning %s\n"", remote);","[""updateVariable"", ""removeVariable""]","[[""*argv""], [""remote""]]",[-4990552208741059945],5914,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,80,248,"printf(""  Local branch%s pushed with 'git push'\n"",
				states.remote->push_refspec_nr > 1 ?
					""es"" : """");","printf(""  Local branch%s configured for 'git pull':\n"",
			       info.list->nr > 1 ? ""es"" : """");","[""updateVariable"", ""updateContent""]","[[""pushed"", ""with"", ""push"", ""states"", ""remote"", ""push_refspec_nr""], [""configured"", ""for"", ""pull"", ""info"", ""list"", ""nr""]]",[21932359531675160925],5913,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,63,228,"printf("" %s"", info->merge.items[j].string);","printf(""    %s\n"", states.heads.items[i].string);","[""updateVariable"", ""updateContent""]","[[""%s"", ""info"", ""merge"", ""items[j]""], [""%s\\n"", ""states"", ""heads"", ""items[i]""]]",[3781651687964929488],5912,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6189.cpp,,,data/crawl/git/old_hunk_6189.cpp,data/crawl/git/new_hunk_6189.cpp,58,180,"printf(""  Remote branch%s merged with 'git pull' ""
				""while on branch %s\n   "",
				info->merge.nr > 1 ? ""es"" : """",
				branch->string);","printf(""    %-*s %s to %s\n"", show_info->width, src,
			push_info->forced ? ""forces"" : ""pushes"",
			push_info->dest);","[""updateVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""Remote"", ""branch%s"", ""merged"", ""with"", ""git"", ""pull"", ""while"", ""on"", ""branch"", ""info"", ""merge"", ""nr"", ""1"", ""es"", ""branch"", ""string""], [""%"", ""*s"", ""%s"", ""to"", ""show_info"", ""width"", ""src"", ""push_info"", ""forced"", ""forces"", ""pushes"", ""push_info"", ""dest""]]",[27497801758697071537],5911,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6188.cpp,,,data/crawl/git/old_hunk_6188.cpp,data/crawl/git/new_hunk_6188.cpp,14,31,"printf(""    %s\n"", list->items[i].string);","string_list_append(abbrev_branch(refspec.src), &states->tracked);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""printf"", ""%s\\n"", ""list"", ""items[i]"", ""string""], [""string_list_append"", ""abbrev_branch"", ""refspec"", ""src"", ""&states"", ""tracked""]]",[-24254328708543997804],5910,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6188.cpp,,,data/crawl/git/old_hunk_6188.cpp,data/crawl/git/new_hunk_6188.cpp,11,28,"printf(title, list->nr > 1 ? ""es"" : """", extra_arg);","memset(&refspec, 0, sizeof(refspec));","[""moveContent"", ""updateVariable"", ""updateLog"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""printf"", ""title"", ""list"", ""nr"", ""1"", ""es"", ""extra_arg""], [""memset"", ""&refspec"", ""0"", ""sizeof"", ""refspec""]]",[6070763629063665563],5909,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6182.cpp,,,data/crawl/git/old_hunk_6182.cpp,data/crawl/git/new_hunk_6182.cpp,-1,62,,"die(""You didn't specify any refspecs to push, and ""
		    ""push.default is \""nothing\""."");","[""addLog""]","[[], [""die"", ""You"", ""didn"", ""t"", ""specify"", ""any"", ""refspecs"", ""to"", ""push"", ""and"", ""push"", ""default"", ""is"", ""\\"", ""nothing\\""]]",[880699997042009940],5908,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6182.cpp,,,data/crawl/git/old_hunk_6182.cpp,data/crawl/git/new_hunk_6182.cpp,-1,38,,"warning(""%s"", warn_unconfigured_push_msg[i]);","[""addLog""]","[[], [""warning"", ""%s"", ""warn_unconfigured_push_msg[i]""]]",[-8376162827190071138],5907,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6182.cpp,,,data/crawl/git/old_hunk_6182.cpp,data/crawl/git/new_hunk_6182.cpp,-1,13,,"die(""The current branch %s is tracking multiple branches, ""
		    ""refusing to push."", branch->name);","[""addLog""]","[[], [""die"", ""The"", ""current"", ""branch"", ""%s"", ""is"", ""tracking"", ""multiple"", ""branches"", ""refusing"", ""to"", ""push"", ""branch"", ""name""]]",[270159929619135981],5906,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6182.cpp,,,data/crawl/git/old_hunk_6182.cpp,data/crawl/git/new_hunk_6182.cpp,-1,10,,"die(""The current branch %s is not tracking anything."",
		    branch->name);","[""addLog""]","[[], [""die"", ""The"", ""current"", ""branch"", ""%s"", ""is"", ""not"", ""tracking"", ""anything"", ""branch"", ""name""]]",[-19336175462396006419],5905,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6182.cpp,,,data/crawl/git/old_hunk_6182.cpp,data/crawl/git/new_hunk_6182.cpp,-1,8,,"die(""You are not currently on a branch."");","[""addLog""]","[[], [""die"", ""You"", ""are"", ""not"", ""currently"", ""on"", ""a"", ""branch""]]",[-6736114296216761294],5904,19440.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6178.cpp,,,data/crawl/git/old_hunk_6178.cpp,data/crawl/git/new_hunk_6178.cpp,3,3,"fprintf(stderr, ""Delta compression using %d threads.\n"",
				delta_search_threads);","fprintf(stderr, ""Delta compression using up to %d threads.\n"",
				delta_search_threads);","[""updateContent""]","[[], [""up"", ""to""]]",[29824179177269150],5903,720.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6177.cpp,,,data/crawl/git/old_hunk_6177.cpp,data/crawl/git/new_hunk_6177.cpp,10,13,"printf(""%06o %s %s %7c\t"", mode, type,
				       abbrev ? find_unique_abbrev(sha1, abbrev)
				              : sha1_to_hex(sha1),
				       '-');","printf(""%06o %s %s %7s\t"", mode, type,
			       abbrev ? find_unique_abbrev(sha1, abbrev)
				      : sha1_to_hex(sha1),
			       size_text);","[""updateContent"", ""removeContent"", ""addVariable""]","[[""%7c\\t""], [""%7s\\t"", ""size_text""]]",[-3829945186581376382],5902,17280.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6177.cpp,,,data/crawl/git/old_hunk_6177.cpp,data/crawl/git/new_hunk_6177.cpp,5,-1,"printf(""%06o %s %s %7lu\t"", mode, type,
				       abbrev ? find_unique_abbrev(sha1, abbrev)
				              : sha1_to_hex(sha1),
				       size);",,"[""removeLog""]","[[""printf"", ""%06o"", ""%s"", ""%s"", ""%7lu\\t"", ""mode"", ""type"", ""abbrev"", ""find_unique_abbrev"", ""sha1"", ""abbrev"", ""sha1_to_hex"", ""sha1"", ""size""], []]",[4064565580284811648],5901,17280.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6173.cpp,,,data/crawl/git/old_hunk_6173.cpp,data/crawl/git/new_hunk_6173.cpp,-1,16,,"die(""bogus committer info %s"", committer);","[""addLog""]","[[], [""die"", ""bogus"", ""committer"", ""info"", ""%s"", ""committer""]]",[-7594313545213758242],5900,5040.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6172.cpp,,,data/crawl/git/old_hunk_6172.cpp,data/crawl/git/new_hunk_6172.cpp,8,-1,"die(""bogus committer info %s"", committer);",,"[""removeLog""]","[[""die"", ""bogus"", ""committer"", ""info"", ""%s"", ""committer""], []]",[7594313545213758242],5899,5040.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6168.cpp,,,data/crawl/git/old_hunk_6168.cpp,data/crawl/git/new_hunk_6168.cpp,3,3,"fprintf(stderr, ""warning: templates not found %s\n"",
			template_dir);","warning(""templates not found %s"", template_dir);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""%s\\n""], [""%s""]]",[7785426073483785122],5898,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6165.cpp,,,data/crawl/git/old_hunk_6165.cpp,data/crawl/git/new_hunk_6165.cpp,17,35,"die(""unknown refname format %s"",
					    formatp);","die(""unknown %.*s format %s"",
				    (int)(formatp - name), name, formatp);","[""updateContent"", ""addVariable""]","[[""refname""], [""%"", ""*s"", ""int"", ""name"", ""name"", ""formatp""]]",[-27432674816822514644],5897,3600.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6163.cpp,,,data/crawl/git/old_hunk_6163.cpp,data/crawl/git/new_hunk_6163.cpp,3,3,"die(""Refusing to fetch into current branch"");","die(""Refusing to fetch into current branch %s ""
			    ""of non-bare repository"", current_branch->refname);","[""updateContent"", ""addContent"", ""addVariable""]","[[], [""%s"", ""of"", ""non"", ""bare"", ""repository"", ""current_branch"", ""refname""]]",[9089604224461021492],5896,15120.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6161.cpp,,,data/crawl/git/old_hunk_6161.cpp,data/crawl/git/new_hunk_6161.cpp,3,3,"fprintf(stderr, ""warning: no common commits\n"");","warning(""no common commits"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""commits\\n""], [""commits""]]",[17765458132512978938],5895,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,-1,100,,"die(""error processing config file(s)"");","[""addLog""]","[[], [""die"", ""error"", ""processing"", ""config"", ""file"", ""s""]]",[1808369745289884399],5894,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,-1,81,,"error(""only one action at a time."");","[""addLog""]","[[], [""error"", ""only"", ""one"", ""action"", ""at"", ""a"", ""time""]]",[23089596241856603932],5893,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,-1,76,,"error(""--get-color and variable type are incoherent"");","[""addLog""]","[[], [""error"", ""get"", ""color"", ""and"", ""variable"", ""type"", ""are"", ""incoherent""]]",[19570661650304921684],5892,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,-1,66,,"error(""only one type at a time."");","[""addLog""]","[[], [""error"", ""only"", ""one"", ""type"", ""at"", ""a"", ""time""]]",[17048796588236527456],5891,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,-1,35,,"error(""only one config file at a time."");","[""addLog""]","[[], [""error"", ""only"", ""one"", ""config"", ""file"", ""at"", ""a"", ""time""]]",[15554288531492939638],5890,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6157.cpp,,,data/crawl/git/old_hunk_6157.cpp,data/crawl/git/new_hunk_6157.cpp,58,97,"die(""unable to read config file %s: %s"", file,
				    strerror(errno));","die(""unable to read config file %s: %s"",
				    config_exclusive_filename, strerror(errno));","[""updateVariable""]","[[""file""], [""config_exclusive_filename""]]",[-4604070866063526290],5889,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6155.cpp,,,data/crawl/git/old_hunk_6155.cpp,data/crawl/git/new_hunk_6155.cpp,-1,61,,"error(""wrong number of arguments"");","[""addLog""]","[[], [""error"", ""wrong"", ""number"", ""of"", ""arguments""]]",[8228718781663536884],5888,36000.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6154.cpp,,,data/crawl/git/old_hunk_6154.cpp,data/crawl/git/new_hunk_6154.cpp,-1,4,,"die(""interactive add failed"");","[""addLog""]","[[], [""die"", ""interactive"", ""add"", ""failed""]]",[-18193390144489484725],5887,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6141.cpp,,,data/crawl/git/old_hunk_6141.cpp,data/crawl/git/new_hunk_6141.cpp,-1,12,,"printf(""%s\n"", sb.buf + 11);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""sb"", ""buf"", ""11""]]",[13730391137221702270],5886,15120.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6141.cpp,,,data/crawl/git/old_hunk_6141.cpp,data/crawl/git/new_hunk_6141.cpp,-1,11,,"die(""'%s' is not a valid branch name"", argv[2]);","[""addLog""]","[[], [""die"", ""%s"", ""is"", ""not"", ""a"", ""valid"", ""branch"", ""name"", ""argv[2]""]]",[-14096306663709100860],5885,15120.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6140.cpp,,,data/crawl/git/old_hunk_6140.cpp,data/crawl/git/new_hunk_6140.cpp,-1,4,,"warning(""Renamed a misnamed branch '%s' away"", oldref.buf + 11);","[""addLog""]","[[], [""warning"", ""Renamed"", ""a"", ""misnamed"", ""branch"", ""%s"", ""away"", ""oldref"", ""buf"", ""11""]]",[-9407194292576116022],5884,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6139.cpp,,,data/crawl/git/old_hunk_6139.cpp,data/crawl/git/new_hunk_6139.cpp,-1,23,,"die(""A branch named '%s' already exists."", newref.buf + 11);","[""addLog""]","[[], [""die"", ""A"", ""branch"", ""named"", ""%s"", ""already"", ""exists"", ""newref"", ""buf"", ""11""]]",[-8284206911797972969],5883,15120.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6139.cpp,,,data/crawl/git/old_hunk_6139.cpp,data/crawl/git/new_hunk_6139.cpp,18,20,"die(""A branch named '%s' already exists."", newname);","die(""Invalid branch name: '%s'"", newname);","[""updateContent""]","[[""A"", ""named"", ""already"", ""exists""], [""Invalid"", ""name""]]",[-5361199447690987608],5882,15120.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6138.cpp,,,data/crawl/git/old_hunk_6138.cpp,data/crawl/git/new_hunk_6138.cpp,13,-1,"printf(""%c %s%s%s\n"", c, branch_get_color(color), item->name,
		       branch_get_color(COLOR_BRANCH_RESET));",,"[""removeLog""]","[[""printf"", ""%c"", ""%s%s%s\\n"", ""c"", ""branch_get_color"", ""color"", ""item"", ""name"", ""branch_get_color"", ""COLOR_BRANCH_RESET""], []]",[13572560481677510145],5881,41760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6138.cpp,,,data/crawl/git/old_hunk_6138.cpp,data/crawl/git/new_hunk_6138.cpp,5,5,"printf(""%c %s%-*s%s %s %s%s\n"", c, branch_get_color(color),
		       maxwidth, item->name,
		       branch_get_color(COLOR_BRANCH_RESET),
		       find_unique_abbrev(item->commit->object.sha1, abbrev),
		       stat.buf, sub);","strbuf_addf(&out, "" %s %s%s"",
			find_unique_abbrev(item->commit->object.sha1, abbrev),
			stat.buf, sub);","[""updateLog"", ""removeVariable"", ""addContent"", ""removeContent"", ""addVariable""]","[[""printf"", ""%c"", ""%s%"", ""*s%s"", ""%s%s\\n"", ""c"", ""branch_get_color"", ""color"", ""maxwidth"", ""name"", ""branch_get_color"", ""COLOR_BRANCH_RESET"", ""item""], [""strbuf_addf"", ""&out"", ""%s%s""]]",[5272640635229068261],5880,41760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6137.cpp,,,data/crawl/git/old_hunk_6137.cpp,data/crawl/git/new_hunk_6137.cpp,3,3,"printf(""Deleted %sbranch %s (%s).\n"", remote,
			       bname.buf,
			       find_unique_abbrev(sha1, DEFAULT_ABBREV));","printf(""Deleted %sbranch %s (was %s).\n"", remote,
			       bname.buf,
			       find_unique_abbrev(sha1, DEFAULT_ABBREV));","[""updateContent""]","[[], [""was""]]",[-4873397472080222404],5879,15840.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6134.cpp,,,data/crawl/git/old_hunk_6134.cpp,data/crawl/git/new_hunk_6134.cpp,4,-1,"die(""reading graft file %s failed: %s"",
		    revs_file, strerror(errno));",,"[""removeLog""]","[[""die"", ""reading"", ""graft"", ""file"", ""%s"", ""failed"", ""%s"", ""revs_file"", ""strerror"", ""errno""], []]",[-5319161240530285790],5878,18720.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6133.cpp,,,data/crawl/git/old_hunk_6133.cpp,data/crawl/git/new_hunk_6133.cpp,-1,4,,"die(""reading graft file %s failed: %s"",
		    revs_file, strerror(errno));","[""addLog""]","[[], [""die"", ""reading"", ""graft"", ""file"", ""%s"", ""failed"", ""%s"", ""revs_file"", ""strerror"", ""errno""]]",[5319161240530285790],5877,18720.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6132.cpp,,,data/crawl/git/old_hunk_6132.cpp,data/crawl/git/new_hunk_6132.cpp,26,-1,"fprintf(stderr, ""%s in %s has refcnt %d, not %d\n"",
				ent->suspect->path,
				sha1_to_hex(ent->suspect->commit->object.sha1),
				ent->suspect->refcnt, found);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""in"", ""%s"", ""has"", ""refcnt"", ""%d"", ""not"", ""%d\\n"", ""ent"", ""suspect"", ""path"", ""sha1_to_hex"", ""ent"", ""suspect"", ""commit"", ""object"", ""sha1"", ""ent"", ""suspect"", ""refcnt"", ""found""], []]",[-17291519715008399635],5876,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,30,,"printf(""previous %s "", sha1_to_hex(prev->commit->object.sha1));","[""addLog""]","[[], [""printf"", ""previous"", ""%s"", ""sha1_to_hex"", ""prev"", ""commit"", ""object"", ""sha1""]]",[8258032377208896742],5875,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,27,,"printf(""boundary\n"");","[""addLog""]","[[], [""printf"", ""boundary\\n""]]",[10842371902386641873],5874,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,25,,"printf(""summary %s\n"", ci.summary);","[""addLog""]","[[], [""printf"", ""summary"", ""%s\\n"", ""ci"", ""summary""]]",[-1692078277376969815],5873,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,24,,"printf(""committer-tz %s\n"", ci.committer_tz);","[""addLog""]","[[], [""printf"", ""committer"", ""tz"", ""%s\\n"", ""ci"", ""committer_tz""]]",[15557117962594673029],5872,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,23,,"printf(""committer-time %lu\n"", ci.committer_time);","[""addLog""]","[[], [""printf"", ""committer"", ""time"", ""%lu\\n"", ""ci"", ""committer_time""]]",[9140932468087020566],5871,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,22,,"printf(""committer-mail %s\n"", ci.committer_mail);","[""addLog""]","[[], [""printf"", ""committer"", ""mail"", ""%s\\n"", ""ci"", ""committer_mail""]]",[11469225420089458937],5870,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,21,,"printf(""committer %s\n"", ci.committer);","[""addLog""]","[[], [""printf"", ""committer"", ""%s\\n"", ""ci"", ""committer""]]",[20736564298734649037],5869,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,20,,"printf(""author-tz %s\n"", ci.author_tz);","[""addLog""]","[[], [""printf"", ""author"", ""tz"", ""%s\\n"", ""ci"", ""author_tz""]]",[11780382062627515401],5868,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,19,,"printf(""author-time %lu\n"", ci.author_time);","[""addLog""]","[[], [""printf"", ""author"", ""time"", ""%lu\\n"", ""ci"", ""author_time""]]",[8071503845071645430],5867,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,18,,"printf(""author-mail %s\n"", ci.author_mail);","[""addLog""]","[[], [""printf"", ""author"", ""mail"", ""%s\\n"", ""ci"", ""author_mail""]]",[12399810797356084557],5866,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6129.cpp,,,data/crawl/git/old_hunk_6129.cpp,data/crawl/git/new_hunk_6129.cpp,-1,17,,"printf(""author %s\n"", ci.author);","[""addLog""]","[[], [""printf"", ""author"", ""%s\\n"", ""ci"", ""author""]]",[21335696175581738521],5865,131760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6128.cpp,,,data/crawl/git/old_hunk_6128.cpp,data/crawl/git/new_hunk_6128.cpp,31,-1,"die(""option --remote requires a value"");",,"[""removeLog""]","[[""die"", ""option"", ""remote"", ""requires"", ""a"", ""value""], []]",[20742074164705635620],5864,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6127.cpp,,,data/crawl/git/old_hunk_6127.cpp,data/crawl/git/new_hunk_6127.cpp,26,-1,"die(""option --exec requires a value"");",,"[""removeLog""]","[[""die"", ""option"", ""exec"", ""requires"", ""a"", ""value""], []]",[18299795284169623873],5863,25920.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6125.cpp,,,data/crawl/git/old_hunk_6125.cpp,data/crawl/git/new_hunk_6125.cpp,3,3,"fprintf(stderr, ""warning: squelched %d ""
				""whitespace error%s\n"",
				squelched,
				squelched == 1 ? """" : ""s"");","warning(""squelched %d ""
				""whitespace error%s"",
				squelched,
				squelched == 1 ? """" : ""s"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""error%s\\n""], [""error%s""]]",[1427264581957426722],5862,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6123.cpp,,,data/crawl/git/old_hunk_6123.cpp,data/crawl/git/new_hunk_6123.cpp,3,3,"fprintf(stderr, ""warning: %s has type %o, expected %o\n"",
			old_name, st_mode, patch->old_mode);","warning(""%s has type %o, expected %o"",
			old_name, st_mode, patch->old_mode);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""fprintf"", ""stderr"", ""%o\\n""], [""%o""]]",[7785454073739785594],5861,14400.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6119.cpp,,,data/crawl/git/old_hunk_6119.cpp,data/crawl/git/new_hunk_6119.cpp,12,-1,"printf(""This branch will rebase on pull.\n"");",,"[""removeLog""]","[[""printf"", ""This"", ""branch"", ""will"", ""rebase"", ""on"", ""pull"", ""\\n""], []]",[-3887307495621787849],5860,28800.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6119.cpp,,,data/crawl/git/old_hunk_6119.cpp,data/crawl/git/new_hunk_6119.cpp,7,-1,"printf(""Branch %s set up to track %s branch %s.\n"", new_ref,
		tracking.remote ? ""remote"" : ""local"", orig_ref);",,"[""removeLog""]","[[""printf"", ""Branch"", ""%s"", ""set"", ""up"", ""to"", ""track"", ""%s"", ""branch"", ""%s"", ""\\n"", ""new_ref"", ""tracking"", ""remote"", ""remote"", ""local"", ""orig_ref""], []]",[22260728489932376191],5859,28800.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6118.cpp,,,data/crawl/git/old_hunk_6118.cpp,data/crawl/git/new_hunk_6118.cpp,-1,49,,"printf(""Branch %s set up to track %s%s.\n"",
		       local, key.buf,
		       rebasing ? "" by rebasing"" : """");","[""addLog""]","[[], [""printf"", ""Branch"", ""%s"", ""set"", ""up"", ""to"", ""track"", ""%s%s"", ""\\n"", ""local"", ""key"", ""buf"", ""rebasing"", ""by"", ""rebasing""]]",[16307141965908563845],5858,23760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,445,,"die(""Badly quoted content in file '%s': %s"",
			    filename, quoted);","[""addLog""]","[[], [""die"", ""Badly"", ""quoted"", ""content"", ""in"", ""file"", ""%s"", ""%s"", ""filename"", ""quoted""]]",[-22911574757715212418],5857,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,434,,"die(""Could not open file '%s': %s"", filename, strerror(errno));","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""open"", ""file"", ""%s"", ""%s"", ""filename"", ""strerror"", ""errno""]]",[16838779914754579038],5856,5760.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,148,,"fprintf(stderr, "" %.*s"", (int)(ep - sp), sp);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""int"", ""ep"", ""sp"", ""sp""]]",[-21433275363726771400],5855,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,140,,"fprintf(stderr, "" %.*s"", 8,
				sha1_to_hex(pp->item->object.sha1));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""8"", ""sha1_to_hex"", ""pp"", ""item"", ""object"", ""sha1""]]",[-29509153553998128601],5854,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,138,,"fprintf(stderr, "" %.*s"", 8, sha1_to_hex(commit->object.sha1));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%"", ""*s"", ""8"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""]]",[-18701552024235154547],5853,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,135,,"fprintf(stderr, ""%3d"", weight(p));","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%3d"", ""weight"", ""p""]]",[-12350335568242920908],5852,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,130,,"fprintf(stderr, ""%c%c%c "",
			(flags & TREESAME) ? ' ' : 'T',
			(flags & UNINTERESTING) ? 'U' : ' ',
			(flags & COUNTED) ? 'C' : ' ');","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c%c%c"", ""flags"", ""&"", ""TREESAME"", ""T"", ""flags"", ""&"", ""UNINTERESTING"", ""U"", ""flags"", ""&"", ""COUNTED"", ""C""]]",[-8125646100924237453],5851,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6117.cpp,,,data/crawl/git/old_hunk_6117.cpp,data/crawl/git/new_hunk_6117.cpp,-1,119,,"fprintf(stderr, ""%s (%d/%d)\n"", debug, counted, nr);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%s"", ""%d/%d"", ""\\n"", ""debug"", ""counted"", ""nr""]]",[4691681221590764187],5850,10080.0,2
https://github.com/git/git/commit/7d5a1806e8c2d9980938a05a56939272ad2ec338,13 Apr 2009,"Mark t1301 permission test to depend on POSIXPERM

This prepares the topic for inclusion to master.",14573,data/crawl/git/hunk_6116.cpp,,,data/crawl/git/old_hunk_6116.cpp,data/crawl/git/new_hunk_6116.cpp,-1,4,,"die(""Unexpected option --output"");","[""addLog""]","[[], [""die"", ""Unexpected"", ""option"", ""output""]]",[-15491304130016562518],5849,25920.0,2
https://github.com/git/git/commit/0c44c94309693d0582e91a6744edc2e8eba46ef8,29 Apr 2009,"merge-recursive: do not die on a conflicting submodule

We cannot represent the 3-way conflicted state in the work tree
for these entries, but it is normal not to have commit objects
for them in our repository.  Just update the index and the life
will be good.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_6090.cpp,,,data/crawl/git/old_hunk_6090.cpp,data/crawl/git/new_hunk_6090.cpp,3,-1,"die(""cannot read object %s '%s': It is a submodule!"",
			    sha1_to_hex(sha), path);",,"[""removeLog""]","[[""die"", ""cannot"", ""read"", ""object"", ""%s"", ""%s"", ""It"", ""is"", ""a"", ""submodule"", ""sha1_to_hex"", ""sha"", ""path""], []]",[18923520020323435169],5848,173520.0,2
https://github.com/git/git/commit/3536ae331014c68a25c80b3fb530a19c8dee0f11,03 May 2009,Sync with GIT 1.6.2.5,59,data/crawl/git/hunk_6065.cpp,,,data/crawl/git/old_hunk_6065.cpp,data/crawl/git/new_hunk_6065.cpp,-1,5,,"fprintf(stderr, ""Server supports ofs-delta\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Server"", ""supports"", ""ofs"", ""delta\\n""]]",[-8844884277980313155],5847,720.0,2
https://github.com/git/git/commit/51a9949eda7421a2dd9cb45b2110d6571ba09bbd,09 May 2009,"parseopt: add PARSE_OPT_NODASH

Add support for options that don't start with a dash.  Initially, they
don't accept arguments and can only be short options, i.e. consist of a
single character.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_6056.cpp,,,data/crawl/git/old_hunk_6056.cpp,data/crawl/git/new_hunk_6056.cpp,-1,5,,"fprintf(stderr, ""%c"", opts->short_name);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""%c"", ""opts"", ""short_name""]]",[-17532569713862857572],5846,401040.0,2
https://github.com/git/git/commit/3e230fa1b2ba3aa1a207c4399a1b93e41b103dfb,09 May 2009,"grep: use parseopt

Convert git-grep to parseopt.

The bitfields in struct grep_opt are converted to full ints,
increasing its size.  This shouldn't be a problem as there is only a
single instance in memory.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",434,data/crawl/git/hunk_6054.cpp,,,data/crawl/git/old_hunk_6054.cpp,data/crawl/git/new_hunk_6054.cpp,128,-1,"die(emsg_missing_argument, arg);",,"[""removeLog""]","[[""die"", ""emsg_missing_argument"", ""arg""], []]",[7277484490481743208],5845,0.0,2
https://github.com/git/git/commit/fe0bb5f7bce3dbcc32325c74e693a726d0c2808b,10 May 2009,"builtin-mktree.c: use a helper function to handle one line of input

The main() function used to do the whole thing; this moves the handling of
a single input line to a separate function to make it easier to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6043.cpp,,,data/crawl/git/old_hunk_6043.cpp,data/crawl/git/new_hunk_6043.cpp,-1,36,,"die(""invalid quoting"");","[""addLog""]","[[], [""die"", ""invalid"", ""quoting""]]",[-11910922139060950655],5844,429840.0,2
https://github.com/git/git/commit/fe0bb5f7bce3dbcc32325c74e693a726d0c2808b,10 May 2009,"builtin-mktree.c: use a helper function to handle one line of input

The main() function used to do the whole thing; this moves the handling of
a single input line to a separate function to make it easier to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_6043.cpp,,,data/crawl/git/old_hunk_6043.cpp,data/crawl/git/new_hunk_6043.cpp,-1,18,,"die(""input format error: %s"", buf);","[""addLog""]","[[], [""die"", ""input"", ""format"", ""error"", ""%s"", ""buf""]]",[1432739580940739610],5843,0.0,2
https://github.com/git/git/commit/4577e483648f50dd80faa401dc1d3eb33ffb627b,14 May 2009,"Change prettify_ref to prettify_refname

In preparation to be used when the ref object is not available

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6033.cpp,,,data/crawl/git/old_hunk_6033.cpp,data/crawl/git/new_hunk_6033.cpp,5,5,"fputs(prettify_ref(to), stderr);","fputs(prettify_refname(to->name), stderr);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""prettify_ref""], [""prettify_refname"", ""name""]]",[4669316365733369312],5842,0.0,2
https://github.com/git/git/commit/4577e483648f50dd80faa401dc1d3eb33ffb627b,14 May 2009,"Change prettify_ref to prettify_refname

In preparation to be used when the ref object is not available

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_6033.cpp,,,data/crawl/git/old_hunk_6033.cpp,data/crawl/git/new_hunk_6033.cpp,3,3,"fprintf(stderr, ""%s -> %s"", prettify_ref(from), prettify_ref(to));","fprintf(stderr, ""%s -> %s"", prettify_refname(from->name), prettify_refname(to->name));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""prettify_ref"", ""prettify_ref""], [""prettify_refname"", ""name"", ""prettify_refname"", ""name""]]",[9338632731466738624],5841,0.0,2
https://github.com/git/git/commit/31c8221acb7c7acaea6ce2c680c2985581ce0066,16 May 2009,"mktree: validate entry type in input

Previously mktree would accept tree entries which had a mismatch between
the declared type and the actual type of object.  Check the actual type of
the object when it is available locally.

Signed-off-by: Josh Micich <josh.micich@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_6030.cpp,,,data/crawl/git/old_hunk_6030.cpp,data/crawl/git/new_hunk_6030.cpp,13,-1,"die(""object type %s mismatch (%s)"", ptr, typename(type));",,"[""removeLog""]","[[""die"", ""object"", ""type"", ""%s"", ""mismatch"", ""%s"", ""ptr"", ""typename"", ""type""], []]",[-1148983554275742274],5840,4320.0,2
https://github.com/git/git/commit/31c8221acb7c7acaea6ce2c680c2985581ce0066,16 May 2009,"mktree: validate entry type in input

Previously mktree would accept tree entries which had a mismatch between
the declared type and the actual type of object.  Check the actual type of
the object when it is available locally.

Signed-off-by: Josh Micich <josh.micich@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_6030.cpp,,,data/crawl/git/old_hunk_6030.cpp,data/crawl/git/new_hunk_6030.cpp,9,-1,"die(""object %s unavailable"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""object"", ""%s"", ""unavailable"", ""sha1_to_hex"", ""sha1""], []]",[15458085929420937590],5839,4320.0,2
https://github.com/git/git/commit/bebdd271ff660d603ad75fef346ad1ff19fca0cb,01 Jun 2009,"builtin-replace: teach ""git replace"" to actually replace

Teach the syntax: ""git replace <object> <replacement>"", so that
""git replace"" can now create replace refs. These replace refs
will be used by read_sha1_file to substitute <object> with
<replacement> for most of the commands.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_6006.cpp,,,data/crawl/git/old_hunk_6006.cpp,data/crawl/git/new_hunk_6006.cpp,-1,31,,"die(""%s: cannot update the ref"", ref);","[""addLog""]","[[], [""die"", ""%s"", ""cannot"", ""update"", ""the"", ""ref"", ""ref""]]",[-9434152385079512487],5838,491040.0,2
https://github.com/git/git/commit/bebdd271ff660d603ad75fef346ad1ff19fca0cb,01 Jun 2009,"builtin-replace: teach ""git replace"" to actually replace

Teach the syntax: ""git replace <object> <replacement>"", so that
""git replace"" can now create replace refs. These replace refs
will be used by read_sha1_file to substitute <object> with
<replacement> for most of the commands.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_6006.cpp,,,data/crawl/git/old_hunk_6006.cpp,data/crawl/git/new_hunk_6006.cpp,-1,29,,"die(""%s: cannot lock the ref"", ref);","[""addLog""]","[[], [""die"", ""%s"", ""cannot"", ""lock"", ""the"", ""ref"", ""ref""]]",[2959079677332186133],5837,491040.0,2
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5983.cpp,,,data/crawl/git/old_hunk_5983.cpp,data/crawl/git/new_hunk_5983.cpp,-1,33,,"error(""Unable to verify pack %s is available"",
				    hex);","[""addLog""]","[[], [""error"", ""Unable"", ""to"", ""verify"", ""pack"", ""%s"", ""is"", ""available"", ""hex""]]",[2124037517676676439],5836,0.0,2
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5980.cpp,,,data/crawl/git/old_hunk_5980.cpp,data/crawl/git/new_hunk_5980.cpp,150,-1,"error(""%s"", curl_errorstr);",,"[""removeLog""]","[[""error"", ""%s"", ""curl_errorstr""], []]",[385681632974672444],5835,0.0,2
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5980.cpp,,,data/crawl/git/old_hunk_5980.cpp,data/crawl/git/new_hunk_5980.cpp,84,-1,"error(""Unable to get pack index %s\n%s"", url,
				    curl_errorstr);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""get"", ""pack"", ""index"", ""%s\\n%s"", ""url"", ""curl_errorstr""], []]",[-2393446781503683769],5834,0.0,2
https://github.com/git/git/commit/b8caac2b8ab6482e7ab59c8ec18f1c3d90e7387d,06 Jun 2009,"http*: add http_get_info_packs

http-push.c and http-walker.c no longer have to use fetch_index or
setup_index; they simply need to use http_get_info_packs, a new http
method, in their fetch_indices implementations.

Move fetch_index() and rename to fetch_pack_index() in http.c; this
method is not meant to be used outside of http.c. It invokes
end_url_with_slash with base_url; apart from that change, the code is
identical.

Move setup_index() and rename to fetch_and_setup_pack_index() in
http.c; this method is not meant to be used outside of http.c.

Do not immediately set ret to 0 in http-walker.c::fetch_indices();
instead do it in the HTTP_MISSING_TARGET case, to make it clear that
the HTTP_OK and HTTP_MISSING_TARGET cases both return 0.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",531,data/crawl/git/hunk_5980.cpp,,,data/crawl/git/old_hunk_5980.cpp,data/crawl/git/new_hunk_5980.cpp,43,-1,"fprintf(stderr, ""Getting index for pack %s\n"", hex);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Getting"", ""index"", ""for"", ""pack"", ""%s\\n"", ""hex""], []]",[17577118066913007211],5833,0.0,2
https://github.com/git/git/commit/2264dfa5c4f11e2b0e2740072208186bee361afd,06 Jun 2009,"http*: add helper methods for fetching packs

The code handling the fetching of packs in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(http_pack_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_pack_request
 - finish_http_pack_request
 - release_http_pack_request

and the new struct is http_pack_request.

Add a function, new_http_pack_request(), that deals with the details of
coming up with the filename to store the retrieved packfile, resuming a
previously aborted request, and making a new curl request. Update
http-push.c::start_fetch_packed() and http-walker.c::fetch_pack() to
use this.

Add a function, finish_http_pack_request(), that deals with renaming
the pack, advancing the pack list, and installing the pack. Update
http-push.c::finish_request() and http-walker.c::fetch_pack to use
this.

Update release_request() in http-push.c and http-walker.c to invoke
release_http_pack_request() to clean up pack request helper data.

The local_stream member of the transfer_request struct in http-push.c
has been removed, as the packfile pointer will be managed in the struct
http_pack_request.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",318,data/crawl/git/hunk_5974.cpp,,,data/crawl/git/old_hunk_5974.cpp,data/crawl/git/new_hunk_5974.cpp,53,-1,"fprintf(stderr,
				""Resuming fetch of pack %s at byte %ld\n"",
				sha1_to_hex(target->sha1), prev_posn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resuming"", ""fetch"", ""of"", ""pack"", ""%s"", ""at"", ""byte"", ""%ld\\n"", ""sha1_to_hex"", ""target"", ""sha1"", ""prev_posn""], []]",[20728982457331409251],5832,0.0,2
https://github.com/git/git/commit/5424bc557fc6414660830b470dd45774b8f5f281,06 Jun 2009,"http*: add helper methods for fetching objects (loose)

The code handling the fetching of loose objects in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(object_http_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_object_request
 - process_http_object_request
 - finish_http_object_request
 - abort_http_object_request
 - release_http_object_request

and the new struct is http_object_request.

RANGER_HEADER_SIZE and no_pragma_header is no longer made available
outside of http.c, since after the above changes, there are no other
instances of usage outside of http.c.

Remove members of the transfer_request struct in http-push.c and
http-walker.c, including filename, real_sha1 and zret, as they are used
no longer used.

Move the methods append_remote_object_url() and get_remote_object_url()
from http-push.c to http.c. Additionally, get_remote_object_url() is no
longer defined only when USE_CURL_MULTI is defined, since
non-USE_CURL_MULTI code in http.c uses it (namely, in
new_http_object_request()).

Refactor code from http-push.c::start_fetch_loose() and
http-walker.c::start_object_fetch_request() that deals with the details
of coming up with the filename to store the retrieved object, resuming
a previously aborted request, and making a new curl request, into a new
function, new_http_object_request().

Refactor code from http-walker.c::process_object_request() into the
function, process_http_object_request().

Refactor code from http-push.c::finish_request() and
http-walker.c::finish_object_request() into a new function,
finish_http_object_request(). It returns the result of the
move_temp_to_file() invocation.

Add a function, release_http_object_request(), which cleans up object
request data. http-push.c and http-walker.c invoke this function
separately; http-push.c::release_request() and
http-walker.c::release_object_request() do not invoke this function.

Add a function, abort_http_object_request(), which unlink()s the object
file and invokes release_http_object_request(). Update
http-walker.c::abort_object_request() to use this.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",767,data/crawl/git/hunk_5972.cpp,,,data/crawl/git/old_hunk_5972.cpp,data/crawl/git/new_hunk_5972.cpp,23,30,"error(""File %s (%s) corrupt"", hex, obj_req->url);","error(""File %s (%s) corrupt"", hex, req->url);","[""updateVariable""]","[[""obj_req""], [""req""]]",[9321497254034116534],5831,0.0,2
https://github.com/git/git/commit/5424bc557fc6414660830b470dd45774b8f5f281,06 Jun 2009,"http*: add helper methods for fetching objects (loose)

The code handling the fetching of loose objects in http-push.c and
http-walker.c have been refactored into new methods and a new struct
(object_http_request) in http.c. They are not meant to be invoked
elsewhere.

The new methods in http.c are
 - new_http_object_request
 - process_http_object_request
 - finish_http_object_request
 - abort_http_object_request
 - release_http_object_request

and the new struct is http_object_request.

RANGER_HEADER_SIZE and no_pragma_header is no longer made available
outside of http.c, since after the above changes, there are no other
instances of usage outside of http.c.

Remove members of the transfer_request struct in http-push.c and
http-walker.c, including filename, real_sha1 and zret, as they are used
no longer used.

Move the methods append_remote_object_url() and get_remote_object_url()
from http-push.c to http.c. Additionally, get_remote_object_url() is no
longer defined only when USE_CURL_MULTI is defined, since
non-USE_CURL_MULTI code in http.c uses it (namely, in
new_http_object_request()).

Refactor code from http-push.c::start_fetch_loose() and
http-walker.c::start_object_fetch_request() that deals with the details
of coming up with the filename to store the retrieved object, resuming
a previously aborted request, and making a new curl request, into a new
function, new_http_object_request().

Refactor code from http-walker.c::process_object_request() into the
function, process_http_object_request().

Refactor code from http-push.c::finish_request() and
http-walker.c::finish_object_request() into a new function,
finish_http_object_request(). It returns the result of the
move_temp_to_file() invocation.

Add a function, release_http_object_request(), which cleans up object
request data. http-push.c and http-walker.c invoke this function
separately; http-push.c::release_request() and
http-walker.c::release_object_request() do not invoke this function.

Add a function, abort_http_object_request(), which unlink()s the object
file and invokes release_http_object_request(). Update
http-walker.c::abort_object_request() to use this.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",767,data/crawl/git/hunk_5967.cpp,,,data/crawl/git/old_hunk_5967.cpp,data/crawl/git/new_hunk_5967.cpp,152,-1,"fprintf(stderr,
				""Resuming fetch of object %s at byte %ld\n"",
				hex, prev_posn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resuming"", ""fetch"", ""of"", ""object"", ""%s"", ""at"", ""byte"", ""%ld\\n"", ""hex"", ""prev_posn""], []]",[25687977966429540003],5830,0.0,2
https://github.com/git/git/commit/e3a0ca878457ecc70d0065802fcb0c6875c6b671,06 Jun 2009,"parse-options: make OPT_INTEGER's argh explicit

OPTION_INTEGER hardcodes its argh member to be ""n"", but the decision is
hidden deep in usage_with_options_internal(). Make ""n"" the default argh
for the OPT_INTEGER macro while leaving it undecided for the OPTION_INTEGER
enum.

This makes it less surprising to users that argh is ""n"" when using the
OPT_INTEGER macro.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewed-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_5966.cpp,,,data/crawl/git/old_hunk_5966.cpp,data/crawl/git/new_hunk_5966.cpp,6,-1,"fprintf(stderr, ""[=<n>]"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""["", ""n"", ""]""], []]",[13925655246813338577],5829,0.0,2
https://github.com/git/git/commit/34aec9f573af8e6fbe06285d660d9e1a84950e4c,06 Jun 2009,"parse-options: simplify usage argh handling

Simplify the argh printing by simply calling usage_argh() if the option
can take an argument. Update macros defined in parse-options.h to set
the PARSE_OPT_NOARG flag.

The only other user of custom non-argument taking options is git-apply
(in this case OPTION_BOOLEAN for deprecated options). Update it to set
the PARSE_OPT_NOARG flag.

Thanks to Ren辿 Scharfe for the suggestion and starter patch.

Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Reviewd-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/hunk_5965.cpp,,,data/crawl/git/old_hunk_5965.cpp,data/crawl/git/new_hunk_5965.cpp,20,-1,"fprintf(stderr, ""[=...]"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""["", ""]""], []]",[13925655260893380928],5828,0.0,2
https://github.com/git/git/commit/203462347fce0eab563fe77640648a7e8ae64d3b,10 Jun 2009,"Allow push and fetch urls to be different

This introduces a config setting remote.$remotename.pushurl which is
used for pushes only. If absent remote.$remotename.url is used for
pushes and fetches as before.
This is useful, for example, in order to do passwordless fetches
(remote update) over the git transport but pushes over ssh.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",41,data/crawl/git/hunk_5956.cpp,,,data/crawl/git/old_hunk_5956.cpp,data/crawl/git/new_hunk_5956.cpp,3,3,"fprintf(stderr, ""Pushing to %s\n"", remote->url[i]);","fprintf(stderr, ""Pushing to %s\n"", url[i]);","[""removeVariable""]","[[""remote""], []]",[7106503395058069532],5827,0.0,2
https://github.com/git/git/commit/2ff4d1ab9ef6660c88020ddaadc410157e130cdc,22 Jun 2009,"receive-pack: do not send error details to the client

If the objects that a client pushes to the server cannot be processed for
any reason, an error is reported back to the client via the git protocol.
We used to send quite detailed information if a system call failed if
unpack-objects is run. This can be regarded as an information leak. Now we
do not send any error details like we already do in the case where
index-pack failed.

Errors in system calls as well as the exit code of unpack-objects and
index-pack are now reported to stderr; in the case of a local push or via
ssh these messages still go to the client, but that is OK since these forms
of access to the server assume that the client can be trusted. If
receive-pack is run from git-daemon, then the daemon should put the error
messages into the syslog.

With this reasoning a new status report is added for the post-update-hook;
untrusted (i.e. daemon's) clients cannot observe its status anyway, others
may want to know failure details.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_5940.cpp,,,data/crawl/git/old_hunk_5940.cpp,data/crawl/git/new_hunk_5940.cpp,9,9,"error(""hook fork failed"");","error(""fork of %s failed"", cmd_name);","[""updateContent"", ""addVariable""]","[[""hook""], [""of"", ""%s"", ""cmd_name""]]",[338303021388950608],5826,0.0,2
https://github.com/git/git/commit/d824cbba02a4061400a0e382f9bd241fbbff34f0,27 Jun 2009,"Convert existing die(..., strerror(errno)) to die_errno()

Change calls to die(..., strerror(errno)) to use the new die_errno().

In the process, also make slight style adjustments: at least state
_something_ about the function that failed (instead of just printing
the pathname), and put paths in single quotes.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",250,data/crawl/git/hunk_5858.cpp,,,data/crawl/git/old_hunk_5858.cpp,data/crawl/git/new_hunk_5858.cpp,3,3,"die(""git apply: read returned %s"", strerror(errno));","die_errno(""git apply: failed to read"");","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""returned"", ""%s"", ""strerror"", ""errno""], [""die_errno"", ""failed"", ""to""]]",[-24920899524972728082],5825,0.0,2
https://github.com/git/git/commit/2944e4e6145bdfcb1a8730d7da671786d72c86ed,02 Jul 2009,"grep: add option -p/--show-function

The new option -p instructs git grep to print the previous function
definition as a context line, similar to diff -p.  Such context lines
are marked with an equal sign instead of a dash.  This option
complements the existing context options -A, -B, -C.

Function definitions are detected using the same heuristic that diff
uses.  User defined regular expressions are not supported, yet.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",111,data/crawl/git/hunk_5788.cpp,,,data/crawl/git/old_hunk_5788.cpp,data/crawl/git/new_hunk_5788.cpp,-1,7,,"printf(""Hello world.\n"");","[""addLog""]","[[], [""printf"", ""Hello"", ""world"", ""\\n""]]",[3892504892495328741],5824,0.0,2
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5778.cpp,,,data/crawl/git/old_hunk_5778.cpp,data/crawl/git/new_hunk_5778.cpp,13,-1,"error(""%s died with strange error"", argv[0]);",,"[""removeLog""]","[[""error"", ""%s"", ""died"", ""with"", ""strange"", ""error"", ""argv[0]""], []]",[-6010646412580812064],5823,439920.0,2
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5778.cpp,,,data/crawl/git/old_hunk_5778.cpp,data/crawl/git/new_hunk_5778.cpp,5,-1,"error(""unable to fork for %s"", argv[0]);",,"[""removeLog""]","[[""error"", ""unable"", ""to"", ""fork"", ""for"", ""%s"", ""argv[0]""], []]",[-10495219703938108806],5822,439920.0,2
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5777.cpp,,,data/crawl/git/old_hunk_5777.cpp,data/crawl/git/new_hunk_5777.cpp,11,-1,"warning(""%s exited due to uncaught signal"", argv[0]);",,"[""removeLog""]","[[""warning"", ""%s"", ""exited"", ""due"", ""to"", ""uncaught"", ""signal"", ""argv[0]""], []]",[-6886008756878022294],5821,121680.0,2
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5777.cpp,,,data/crawl/git/old_hunk_5777.cpp,data/crawl/git/new_hunk_5777.cpp,6,-1,"warning(""Could not spawn %s"", argv[0]);",,"[""removeLog""]","[[""warning"", ""Could"", ""not"", ""spawn"", ""%s"", ""argv[0]""], []]",[-7894034535750416282],5820,121680.0,2
https://github.com/git/git/commit/0ac77ec3150f43a5c2a6b1e47e9db5aafe53fb72,06 Jul 2009,"run_command: report system call errors instead of returning error codes

The motivation for this change is that system call failures are serious
errors that should be reported to the user, but only few callers took the
burden to decode the error codes that the functions returned into error
messages.

If at all, then only an unspecific error message was given. A prominent
example is this:

   $ git upload-pack . | :
   fatal: unable to run 'git-upload-pack'

In this example, git-upload-pack, the external command invoked through the
git wrapper, dies due to SIGPIPE, but the git wrapper does not bother to
report the real cause. In fact, this very error message is copied to the
syslog if git-daemon's client aborts the connection early.

With this change, system call failures are reported immediately after the
failure and only a generic failure code is returned to the caller. In the
above example the error is now to the point:

   $ git upload-pack . | :
   error: git-upload-pack died of signal

Note that there is no error report if the invoked program terminated with
a non-zero exit code, because it is reasonable to expect that the invoked
program has already reported an error. (But many run_command call sites
nevertheless write a generic error message.)

There was one special return code that was used to identify the case where
run_command failed because the requested program could not be exec'd. This
special case is now treated like a system call failure with errno set to
ENOENT. No error is reported in this case, because the call site in git.c
expects this as a normal result. Therefore, the callers that carefully
decoded the return value still check for this condition.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5775.cpp,,,data/crawl/git/old_hunk_5775.cpp,data/crawl/git/new_hunk_5775.cpp,-1,16,,"error(""waitpid is confused (%s)"", argv0);","[""addLog""]","[[], [""error"", ""waitpid"", ""is"", ""confused"", ""%s"", ""argv0""]]",[10429499216146828180],5819,0.0,2
https://github.com/git/git/commit/c024beb56da679839d61f352d088b9a86823233a,06 Jul 2009,"run_command: report failure to execute the program, but optionally don't

In the case where a program was not found, it was still the task of the
caller to report an error to the user. Usually, this is an interesting case
but only few callers actually reported a specific error (though many call
sites report a generic error message regardless of the cause).

With this change the error is reported by run_command, but since there is
one call site in git.c that does not want that, an option is added to
struct child_process, which is used to turn the error off.

Signed-off-by: Johannes Sixt <j6t@kdbg.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_5768.cpp,,,data/crawl/git/old_hunk_5768.cpp,data/crawl/git/new_hunk_5768.cpp,5,-1,"error(""unable to exec %s"", argv[0]);",,"[""removeLog""]","[[""error"", ""unable"", ""to"", ""exec"", ""%s"", ""argv[0]""], []]",[-10517722405981025127],5818,439920.0,2
https://github.com/git/git/commit/53d48885931614a43e414e1272a7f126f8d0c901,25 Jul 2009,"git init: optionally allow a directory argument

When starting a new repository, I see my students often say

    % git init newrepo

and curse git.  They could say

    % mkdir newrepo; cd newrepo; git init

but allowing it as an obvious short-cut may be nicer.

Signed-off-by: Nanako Shiraishi <nanako3@lavabit.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",138,data/crawl/git/hunk_5751.cpp,,,data/crawl/git/old_hunk_5751.cpp,data/crawl/git/new_hunk_5751.cpp,-1,42,,"die_errno(""cannot mkdir %s"", argv[1]);","[""addLog""]","[[], [""die_errno"", ""cannot"", ""mkdir"", ""%s"", ""argv[1]""]]",[-11425516080168209877],5817,0.0,2
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5741.cpp,,,data/crawl/git/old_hunk_5741.cpp,data/crawl/git/new_hunk_5741.cpp,-1,111,,"die(""Fetch failed."");","[""addLog""]","[[], [""die"", ""Fetch"", ""failed""]]",[-11689177191230687721],5816,493920.0,2
https://github.com/git/git/commit/a2d725b7bdf756ade7680945ebc3fb62e5dd8bcc,05 Aug 2009,"Use an external program to implement fetching with curl

Use the transport native helper mechanism to fetch by http (and ftp, etc).

Signed-off-by: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",280,data/crawl/git/hunk_5741.cpp,,,data/crawl/git/old_hunk_5741.cpp,data/crawl/git/new_hunk_5741.cpp,-1,27,,"die(""%s not found: did you run git update-server-info on the""
		    "" server?"", refs_url);","[""addLog""]","[[], [""die"", ""%s"", ""not"", ""found"", ""did"", ""you"", ""run"", ""git"", ""update"", ""server"", ""info"", ""on"", ""the"", ""server"", ""refs_url""]]",[-29276283679114300153],5815,261360.0,2
https://github.com/git/git/commit/d68dc34cb41c30515e64766c303c2930994e5085,06 Aug 2009,"git-describe: Die early if there are no possible descriptions

If we find no refs that may be used for git-describe with the current
options, then die early instead of pointlessly walking the whole
history.

In git.git with all the tags dropped, this makes ""git describe"" go down
from 0.244 to 0.003 seconds for me. This is especially noticeable with
""git submodule status"" which calls describe with increasing levels of
allowed refs to be matched. For a submodule without tags, this means
that it walks the whole history in the submodule twice (first annotated,
then plain tags), just to find out that it can't describe the commit
anyway.

Signed-off-by: Björn Steinbrink <B.Steinbrink@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_5734.cpp,,,data/crawl/git/old_hunk_5734.cpp,data/crawl/git/new_hunk_5734.cpp,-1,4,,"die(""cannot describe '%s'"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""cannot"", ""describe"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-11182062032380983816],5814,375120.0,2
https://github.com/git/git/commit/f766b36783c7ceeb0427f5e1af862b9a67ae1c4c,10 Aug 2009,"Make git_status_config() file scope static to builtin-commit.c

Signed-off-by: Junio C Hamano <gitster@pobox.com>",121,data/crawl/git/hunk_5726.cpp,,,data/crawl/git/old_hunk_5726.cpp,data/crawl/git/new_hunk_5726.cpp,-1,57,,"error(""Invalid untracked files mode '%s'"", v);","[""addLog""]","[[], [""error"", ""Invalid"", ""untracked"", ""files"", ""mode"", ""%s"", ""v""]]",[-11650023686106562617],5813,307440.0,2
https://github.com/git/git/commit/d8526a4c3b31d91b623f698be6ed7552ed4fdc52,26 Aug 2009,"git-log: allow --decorate[=short|full]

Commit de435ac0 changed the behavior of --decorate from printing the
full ref (e.g., ""refs/heads/master"") to a shorter, more human-readable
version (e.g., just ""master""). While this is nice for human readers,
external tools using the output from ""git log"" may prefer the full
version.

This patch introduces an extension to --decorate to allow the caller to
specify either the short or the full versions.

Signed-off-by: Lars Hjemli <hjemli@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_5707.cpp,,,data/crawl/git/old_hunk_5707.cpp,data/crawl/git/new_hunk_5707.cpp,-1,11,,"die(""invalid --decorate option: %s"", arg);","[""addLog""]","[[], [""die"", ""invalid"", ""decorate"", ""option"", ""%s"", ""arg""]]",[-4373137024008869434],5812,5760.0,2
https://github.com/git/git/commit/7f7ee2ff2dfbb8435a4b46750f573ef0f7d0b853,15 Sep 2009,"diff -B: colour whitespace errors

We used to send the old and new contents more or less straight out to the
output with only the original ""old is red, new is green"" colouring.  Now
all the necessary support routines have been prepared, call them with a
line of data at a time from the output code and have them check and color
whitespace errors in exactly the same way as they are called from the low
level diff callback routines.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_5675.cpp,,,data/crawl/git/old_hunk_5675.cpp,data/crawl/git/new_hunk_5675.cpp,16,-1,"fputs(reset, file);",,"[""removeLog""]","[[""fputs"", ""reset"", ""file""], []]",[10890748349608424665],5811,0.0,2
https://github.com/git/git/commit/7f7ee2ff2dfbb8435a4b46750f573ef0f7d0b853,15 Sep 2009,"diff -B: colour whitespace errors

We used to send the old and new contents more or less straight out to the
output with only the original ""old is red, new is green"" colouring.  Now
all the necessary support routines have been prepared, call them with a
line of data at a time from the output code and have them check and color
whitespace errors in exactly the same way as they are called from the low
level diff callback routines.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_5675.cpp,,,data/crawl/git/old_hunk_5675.cpp,data/crawl/git/new_hunk_5675.cpp,11,-1,"fputs(set, file);",,"[""removeLog""]","[[""fputs"", ""set"", ""file""], []]",[4379328660601636790],5810,0.0,2
https://github.com/git/git/commit/1b018fd9be290fd6a70ce3093ab1dc1abce74e00,29 Sep 2009,"git branch -D: give a better error message when lockfile creation fails

Previously the old error message just told the user that it was not
possible to delete the ref from the packed-refs file. Give instructions
on how to resolve the problem.

Signed-off-by: Miklos Vajna <vmiklos@frugalware.org>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>",31,data/crawl/git/hunk_5667.cpp,,,data/crawl/git/old_hunk_5667.cpp,data/crawl/git/new_hunk_5667.cpp,7,8,"die(""Unable to create '%s.lock': %s.\n\n""
		    ""If no other git process is currently running, this probably means a\n""
		    ""git process crashed in this repository earlier. Make sure no other git\n""
		    ""process is running and remove the file manually to continue."",
		    path, strerror(err));","strbuf_addf(&buf, ""Unable to create '%s.lock': %s.\n\n""
		    ""If no other git process is currently running, this probably means a\n""
		    ""git process crashed in this repository earlier. Make sure no other git\n""
		    ""process is running and remove the file manually to continue."",
		    path, strerror(err));","[""updateLog"", ""addVariable""]","[[""die""], [""strbuf_addf"", ""&buf""]]",[-8794672489787236555],5809,0.0,2
https://github.com/git/git/commit/c6e8c8005a2b1fc4cff72d279f29178767bd1a47,18 Oct 2009,"check_filename(): make verify_filename() callable without dying

Make it possible to invole the logic of verify_filename() to make sure the
pathname arguments are unambiguous without actually dying.  The caller may
want to do something different.",39,data/crawl/git/hunk_5655.cpp,,,data/crawl/git/old_hunk_5655.cpp,data/crawl/git/new_hunk_5655.cpp,14,5,"die_errno(""failed to stat '%s'"", arg);","(check_filename(prefix, arg);","[""addLog"", ""updateLog"", ""removeContent"", ""addVariable""]","[[""die_errno"", ""failed"", ""to"", ""stat"", ""%s""], [""check_filename"", ""prefix""]]",[13164731963124402936],5808,0.0,2
https://github.com/git/git/commit/fd53c9eb445815696bf84c4701b9af73b5d7f50d,20 Oct 2009,"Speed up git notes lookup

To avoid looking up each and every commit in the notes ref's tree
object, which is very expensive, speed things up by slurping the tree
object's contents into a hash_map.

The idea for the hashmap singleton is from David Reiss, initial
benchmarking by Jeff King.

Note: the implementation allows for arbitrary entries in the notes
tree object, ignoring those that do not reference a valid object.  This
allows you to annotate arbitrary branches, or objects.

This patch has been improved by the following contributions:
- Junio C Hamano: fixed an obvious error in initialize_hash_map()

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5650.cpp,,,data/crawl/git/old_hunk_5650.cpp,data/crawl/git/new_hunk_5650.cpp,-1,83,,"die(""Could not read %s for notes-index"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""Could"", ""not"", ""read"", ""%s"", ""for"", ""notes"", ""index"", ""sha1_to_hex"", ""sha1""]]",[-5062818819348318891],5807,202320.0,2
https://github.com/git/git/commit/292ce46b60e2c12450c5c21044acf9c41bd837df,31 Oct 2009,"remote-helpers: Fetch more than one ref in a batch

Some network protocols (e.g. native git://) are able to fetch more
than one ref at a time and reduce the overall transfer cost by
combining the requests into a single exchange.  Instead of feeding
each fetch request one at a time to the helper, feed all of them
at once so the helper can decide whether or not it should batch them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_5601.cpp,,,data/crawl/git/old_hunk_5601.cpp,data/crawl/git/new_hunk_5601.cpp,11,-1,"die(""Fetch failed."");",,"[""removeLog""]","[[""die"", ""Fetch"", ""failed""], []]",[11689177191230687721],5806,62640.0,2
https://github.com/git/git/commit/292ce46b60e2c12450c5c21044acf9c41bd837df,31 Oct 2009,"remote-helpers: Fetch more than one ref in a batch

Some network protocols (e.g. native git://) are able to fetch more
than one ref at a time and reduce the overall transfer cost by
combining the requests into a single exchange.  Instead of feeding
each fetch request one at a time to the helper, feed all of them
at once so the helper can decide whether or not it should batch them.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_5600.cpp,,,data/crawl/git/old_hunk_5600.cpp,data/crawl/git/new_hunk_5600.cpp,-1,41,,"die(""protocol error: expected sha/ref, got %s'"", p);","[""addLog""]","[[], [""die"", ""protocol"", ""error"", ""expected"", ""sha/ref"", ""got"", ""%s"", ""p""]]",[8341311652678906895],5805,0.0,2
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/hunk_5592.cpp,,,data/crawl/git/old_hunk_5592.cpp,data/crawl/git/new_hunk_5592.cpp,-1,36,,"die(""http transport does not support %s"", buf->buf);","[""addLog""]","[[], [""die"", ""http"", ""transport"", ""does"", ""not"", ""support"", ""%s"", ""buf"", ""buf""]]",[1931507169994616342],5804,0.0,2
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/hunk_5591.cpp,,,data/crawl/git/old_hunk_5591.cpp,data/crawl/git/new_hunk_5591.cpp,-1,10,,"printf(""%s %s\n"", sha1_to_hex(posn->old_sha1), posn->name);","[""addLog""]","[[], [""printf"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""posn"", ""old_sha1"", ""posn"", ""name""]]",[21847083676494160889],5803,62640.0,2
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/hunk_5591.cpp,,,data/crawl/git/old_hunk_5591.cpp,data/crawl/git/new_hunk_5591.cpp,-1,8,,"printf(""@%s %s\n"", posn->symref, posn->name);","[""addLog""]","[[], [""printf"", ""%s"", ""%s\\n"", ""posn"", ""symref"", ""posn"", ""name""]]",[19541895361849245306],5802,62640.0,2
https://github.com/git/git/commit/ae4efe195752c27cb25fca9451852c0f4eebdb28,31 Oct 2009,"Move WebDAV HTTP push under remote-curl

The remote helper interface now supports the push capability,
which can be used to ask the implementation to push one or more
specs to the remote repository.  For remote-curl we implement this
by calling the existing WebDAV based git-http-push executable.

Internally the helper interface uses the push_refs transport hook
so that the complexity of the refspec parsing and matching can be
reused between remote implementations.  When possible however the
helper protocol uses source ref name rather than the source SHA-1,
thereby allowing the helper to access this name if it is useful.

>From Clemens Buchacher <drizzd@aon.at>:
 update http tests according to remote-curl capabilities

 o Pushing packed refs is now fixed.

 o The transport helper fails if refs are already up-to-date. Add
   a test for that.

 o The transport helper will notice if refs are already
   up-to-date. We therefore need to update server info in the
   unpacked-refs test.

 o The transport helper will purge deleted branches automatically.

 o Use a variable ($ORIG_HEAD) instead of full SHA-1 name.

Signed-off-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
CC: Mike Hommey <mh@glandium.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",341,data/crawl/git/hunk_5587.cpp,,,data/crawl/git/old_hunk_5587.cpp,data/crawl/git/new_hunk_5587.cpp,-1,8,,"printf(""ok %s\n"", ref->name);","[""addLog""]","[[], [""printf"", ""ok"", ""%s\\n"", ""ref"", ""name""]]",[9986884482870768078],5801,0.0,2
https://github.com/git/git/commit/5f809ff50921bee44bbf88c49056e7d145c0c35f,31 Oct 2009,fixup tr/stash-format merge,271,data/crawl/git/hunk_5583.cpp,,,data/crawl/git/old_hunk_5583.cpp,data/crawl/git/new_hunk_5583.cpp,31,67,"printf(""} (%s)\nReflog message: %s"",
			       info->email, info->message);","printf(""Reflog: %s (%s)\nReflog message: %s"",
			       selector.buf, info->email, info->message);","[""updateContent"", ""addVariable""]","[[], [""Reflog"", ""%s"", ""selector"", ""buf""]]",[965581586731190206],5800,7920.0,2
https://github.com/git/git/commit/5f809ff50921bee44bbf88c49056e7d145c0c35f,31 Oct 2009,fixup tr/stash-format merge,271,data/crawl/git/hunk_5583.cpp,,,data/crawl/git/old_hunk_5583.cpp,data/crawl/git/new_hunk_5583.cpp,14,-1,"printf(""%s"", show_date(info->timestamp,
						       info->tz,
						       dmode));",,"[""removeLog""]","[[""printf"", ""%s"", ""show_date"", ""info"", ""timestamp"", ""info"", ""tz"", ""dmode""], []]",[9037300345531019091],5799,7920.0,2
https://github.com/git/git/commit/de1a2fdd38b138c4e4fed6412783dcb74d63d2da,05 Nov 2009,"Smart push over HTTP: client side

The git-remote-curl backend detects if the remote server supports
the git-receive-pack service, and if so, runs git-send-pack in a
pipe to dump the command and pack data as a single POST request.

The advertisements from the server that were obtained during the
discovery are passed into git-send-pack before the POST request
starts.  This permits git-send-pack to operate largely unmodified.

For smaller packs (those under 1 MiB) a HTTP/1.0 POST with a
Content-Length is used, permitting interaction with any server.
The 1 MiB limit is arbitrary, but is sufficent to fit most deltas
created by human authors against text sources with the occasional
small binary file (e.g. few KiB icon image).  The configuration
option http.postBuffer can be used to increase (or shink) this
buffer if the default is not sufficient.

For larger packs which cannot be spooled entirely into the helper's
memory space (due to http.postBuffer being too small), the POST
request requires HTTP/1.1 and sets ""Transfer-Encoding: chunked"".
This permits the client to upload an unknown amount of data in one
HTTP transaction without needing to pregenerate the entire pack
file locally.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",389,data/crawl/git/hunk_5559.cpp,,,data/crawl/git/old_hunk_5559.cpp,data/crawl/git/new_hunk_5559.cpp,3,3,"packet_write(out, ""%s %s %s%c%s"",
					old_hex, new_hex, ref->name, 0,
					""report-status"");","packet_buf_write(&req_buf, ""%s %s %s%c%s"",
					old_hex, new_hex, ref->name, 0,
					""report-status"");","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""packet_write"", ""out""], [""packet_buf_write"", ""&req_buf""]]",[-10015190695189371297],5798,0.0,2
https://github.com/git/git/commit/249b2004d8c9c58ed1ea1665dfd376af0312ed7e,05 Nov 2009,"Smart fetch over HTTP: client side

The git-remote-curl backend detects if the remote server supports
the git-upload-pack service, and if so, runs git-fetch-pack locally
in a pipe to generate the want/have commands.

The advertisements from the server that were obtained during the
discovery are passed into git-fetch-pack before the POST request
starts, permitting server capability discovery and enablement.

Common objects that are discovered are appended onto the request as
have lines and are sent again on the next request.  This allows the
remote side to reinitialize its in-memory list of common objects
during the next request.

Because all requests are relatively short, below git-remote-curl's
1 MiB buffer limit, requests will use the standard Content-Length
header and be valid HTTP/1.0 POST requests.  This makes the fetch
client more tolerant of proxy servers which don't support HTTP/1.1
or the chunked transfer encoding.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
CC: Daniel Barkalow <barkalow@iabervon.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/hunk_5550.cpp,,,data/crawl/git/old_hunk_5550.cpp,data/crawl/git/new_hunk_5550.cpp,8,17,"packet_write(fd[1], ""have %s\n"", sha1_to_hex(sha1));","packet_buf_write(&req_buf, ""have %s\n"", sha1_to_hex(sha1));","[""updateLog"", ""removeVariable"", ""removeContent"", ""addVariable""]","[[""packet_write"", ""fd[1]""], [""packet_buf_write"", ""&req_buf""]]",[-3933064139455118520],5797,3600.0,2
https://github.com/git/git/commit/9c4a036b34acef63ab754f0e27e5e54bd9d9a210,10 Nov 2009,"Teach the --all option to 'git fetch'

'git remote' is meant for managing remotes and 'git fetch' is meant
for actually fetching data from remote repositories. Therefore, it is
not logical that you must use 'git remote update' to fetch from
more than one repository at once.

Add the --all option to 'git fetch', to tell it to attempt to fetch
from all remotes. Also, if --all is not given, the <repository>
argument is allowed to be the name of a group, to allow fetching
from all repositories in the group.

Other options except -v and -q are silently ignored.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",269,data/crawl/git/hunk_5521.cpp,,,data/crawl/git/old_hunk_5521.cpp,data/crawl/git/new_hunk_5521.cpp,-1,71,,"error(""Could not fetch %s"", name);","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""fetch"", ""%s"", ""name""]]",[16381119796876810489],5796,445680.0,2
https://github.com/git/git/commit/16679e373fa85a75c85e6e3b4ae5cd58a89a4114,10 Nov 2009,"Teach the --multiple option to 'git fetch'

Add the --multiple option to specify that all arguments are either
groups or remotes. The primary reason for adding this option is
to allow us to re-implement 'git remote update' using fetch.

It would have been nice if this option was not needed, but since
the colon in a refspec is optional, it is in general not possible
to know whether a single, colon-less argument is a remote or a
refspec.

Signed-off-by: Björn Gustavsson <bgustavsson@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",63,data/crawl/git/hunk_5520.cpp,,,data/crawl/git/old_hunk_5520.cpp,data/crawl/git/new_hunk_5520.cpp,-1,7,,"die(""No such remote or remote group: %s"", argv[i]);","[""addLog""]","[[], [""die"", ""No"", ""such"", ""remote"", ""or"", ""remote"", ""group"", ""%s"", ""argv[i]""]]",[-16687663433230860712],5795,151920.0,2
https://github.com/git/git/commit/8b3dce565084c89ceb19f7ccf0fe22ffd365f7fd,20 Nov 2009,"Teach --stdin option to ""log"" family

Move the logic to read revs from standard input that rev-list knows about
from it to revision machinery, so that all the users of setup_revisions()
can feed the list of revs from the standard input when ""--stdin"" is used
on the command line.

Allow some users of the revision machinery that want different semantics
from the ""--stdin"" option to disable it by setting an option in the
rev_info structure.

This also cleans up the kludge made to bundle.c via cut and paste.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",42,data/crawl/git/hunk_5489.cpp,,,data/crawl/git/old_hunk_5489.cpp,data/crawl/git/new_hunk_5489.cpp,5,-1,"die(""--stdin given twice?"");",,"[""removeLog""]","[[""die"", ""stdin"", ""given"", ""twice""], []]",[-2835650388454318567],5794,0.0,2
https://github.com/git/git/commit/06a4755270b86a2af20a5c1f0d785311472b5223,28 Nov 2009,"emit_line(): don't emit an empty <SET><RESET> followed by a newline

When emit_line() is called with an empty line (but non-zero length, as we
send line terminating LF or CRLF to the function), it used to emit
<SET><RESET> followed by a newline.  Stop the wastefulness.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_5483.cpp,,,data/crawl/git/old_hunk_5483.cpp,data/crawl/git/new_hunk_5483.cpp,-1,4,,"fputs(set, file);","[""addLog""]","[[], [""fputs"", ""set"", ""file""]]",[-4379328660601636790],5793,53280.0,2
https://github.com/git/git/commit/3880c18336a77b1a37ec88e5a515498c73eb5551,05 Dec 2009,"Sync with 1.6.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/hunk_5473.cpp,,,data/crawl/git/old_hunk_5473.cpp,data/crawl/git/new_hunk_5473.cpp,4,5,"die(""hard reset makes no sense in a bare repository"");","die(""%s reset requires a work tree"",
		    reset_type_names[reset_type]);","[""updateContent"", ""addVariable""]","[[""hard"", ""makes"", ""no"", ""sense"", ""in"", ""bare"", ""repository""], [""%s"", ""requires"", ""work"", ""tree"", ""reset_type_names[reset_type]""]]",[-18597781307426067744],5792,0.0,2
https://github.com/git/git/commit/3880c18336a77b1a37ec88e5a515498c73eb5551,05 Dec 2009,"Sync with 1.6.5.5

Signed-off-by: Junio C Hamano <gitster@pobox.com>",102,data/crawl/git/hunk_5472.cpp,,,data/crawl/git/old_hunk_5472.cpp,data/crawl/git/new_hunk_5472.cpp,-1,4,,"die_errno(""unable to open rr-cache directory"");","[""addLog""]","[[], [""die_errno"", ""unable"", ""to"", ""open"", ""rr"", ""cache"", ""directory""]]",[-7586583087285844233],5791,720.0,2
https://github.com/git/git/commit/4cb51a65a478ff005630d8806d01cd76a8889faf,11 Dec 2009,"Sync with 1.6.5.6

Signed-off-by: Junio C Hamano <gitster@pobox.com>",216,data/crawl/git/hunk_5467.cpp,,,data/crawl/git/old_hunk_5467.cpp,data/crawl/git/new_hunk_5467.cpp,12,-1,"warning(""post-upload-hook failed"");",,"[""removeLog""]","[[""warning"", ""post"", ""upload"", ""hook"", ""failed""], []]",[-2761753975233189404],5790,720.0,2
https://github.com/git/git/commit/5eef828bc03649ba11acc05c983d72823c27f0bb,01 Feb 2010,"fast-import: Stream very large blobs directly to pack

If a blob is larger than the configured big-file-threshold, instead
of reading it into a single buffer obtained from malloc, stream it
onto the end of the current pack file.  Streaming the larger objects
into the pack avoids the 4+ GiB memory footprint that occurs when
fast-import is processing 2+ GiB blobs.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",247,data/crawl/git/hunk_5436.cpp,,,data/crawl/git/old_hunk_5436.cpp,data/crawl/git/new_hunk_5436.cpp,-1,33,,"die(""impossibly large object header"");","[""addLog""]","[[], [""die"", ""impossibly"", ""large"", ""object"", ""header""]]",[-28692390870752117574],5789,0.0,2
https://github.com/git/git/commit/f1863d0d16b9a5288671e17b7fa2eba8244ead2f,17 Feb 2010,"refactor duplicated code in builtin-send-pack.c and transport.c

The following functions are (almost) identical:

  verify_remote_names
  update_tracking_ref
  refs_pushed
  print_push_status

Move common versions of these functions to transport.c and rename
them, as suggested by Jeff King and Junio C Hamano.

These functions have been removed entirely from builtin-send-pack.c,
since they are only used internally by print_push_status():

  print_ref_status
  status_abbrev
  print_ok_ref_status
  print_one_push_status

Also, move #define SUMMARY_WIDTH to transport.h and rename it
TRANSPORT_SUMMARY_WIDTH as it is used in builtin-fetch.c and
transport.c

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Acked-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",244,data/crawl/git/hunk_5421.cpp,,,data/crawl/git/old_hunk_5421.cpp,data/crawl/git/new_hunk_5421.cpp,80,-1,"fprintf(stderr, ""To %s\n"", dest);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""To"", ""%s\\n"", ""dest""], []]",[16584513600167938763],5788,592560.0,2
https://github.com/git/git/commit/f1863d0d16b9a5288671e17b7fa2eba8244ead2f,17 Feb 2010,"refactor duplicated code in builtin-send-pack.c and transport.c

The following functions are (almost) identical:

  verify_remote_names
  update_tracking_ref
  refs_pushed
  print_push_status

Move common versions of these functions to transport.c and rename
them, as suggested by Jeff King and Junio C Hamano.

These functions have been removed entirely from builtin-send-pack.c,
since they are only used internally by print_push_status():

  print_ref_status
  status_abbrev
  print_ok_ref_status
  print_one_push_status

Also, move #define SUMMARY_WIDTH to transport.h and rename it
TRANSPORT_SUMMARY_WIDTH as it is used in builtin-fetch.c and
transport.c

Signed-off-by: Michael Lukashov <michael.lukashov@gmail.com>
Acked-by: Tay Ray Chuan <rctay89@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",244,data/crawl/git/hunk_5420.cpp,,,data/crawl/git/old_hunk_5420.cpp,data/crawl/git/new_hunk_5420.cpp,2,2,"fprintf(stderr, "" x %-*s %-*s -> %s\n"",
				SUMMARY_WIDTH, ""[deleted]"",
				REFCOL_WIDTH, ""(none)"", prettify_refname(ref->name));","fprintf(stderr, "" x %-*s %-*s -> %s\n"",
				TRANSPORT_SUMMARY_WIDTH, ""[deleted]"",
				REFCOL_WIDTH, ""(none)"", prettify_refname(ref->name));","[""updateVariable""]","[[""SUMMARY_WIDTH""], [""TRANSPORT_SUMMARY_WIDTH""]]",[8148991935633946692],5787,0.0,2
https://github.com/git/git/commit/f965c525a4d04837b1b7ed43e3fa2dc8c0df4e2b,23 Feb 2010,"move encode_in_pack_object_header() to a better place

Commit 1b22b6c897 made duplicated versions of encode_header() into a
common version called encode_in_pack_object_header(). There is however
a better location that sha1_file.c for such a function though, as
sha1_file.c contains nothing related to the creation of packs, and
it is quite populated already.

Also the comment that was moved to the header file should really remain
near the function as it covers implementation details and provides no
information about the actual function interface.

Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",56,data/crawl/git/hunk_5401.cpp,,,data/crawl/git/old_hunk_5401.cpp,data/crawl/git/new_hunk_5401.cpp,-1,17,,"die(""bad type %d"", type);","[""addLog""]","[[], [""die"", ""bad"", ""type"", ""%d"", ""type""]]",[3034749881290590620],5786,4320.0,2
https://github.com/git/git/commit/3731449591130b2f5ca7257c46721785a6340a18,24 Feb 2010,"shortlog: warn the user when there is no input

A simple ""git shortlog"" outside of a git repository stalls
waiting for an input. Check if that's the case by testing with
isatty() before read_from_stdin(), and warn the user like
""git commit"" does in a similar case.

Signed-off-by: Michele Ballabio <barra_cuda@katamail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_5395.cpp,,,data/crawl/git/old_hunk_5395.cpp,data/crawl/git/new_hunk_5395.cpp,-1,4,,"fprintf(stderr, ""(reading log message from standard input)\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""reading"", ""log"", ""message"", ""from"", ""standard"", ""input"", ""\\n""]]",[-30781081782124465752],5785,593280.0,2
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5364.cpp,,,data/crawl/git/old_hunk_5364.cpp,data/crawl/git/new_hunk_5364.cpp,21,20,"opt->output(opt, sign_str, 1);","output_sep(opt, sign);","[""addLog"", ""updateVariable"", ""removeContent"", ""removeLog""]","[[""output"", ""opt"", ""sign_str"", ""1""], [""output_sep"", ""sign""]]",[1052060502586906147],5784,0.0,2
https://github.com/git/git/commit/55f638bdc6507b3a2ce03290741f592934afaee7,08 Mar 2010,"grep: Colorize filename, line number, and separator

Colorize the filename, line number, and separator in git grep output, as
GNU grep does.  The colors are customizable through color.grep.<slot>.
The default is to only color the separator (in cyan), since this gives
the biggest legibility increase without overwhelming the user with
colors.  GNU grep also defaults cyan for the separator, but defaults to
magenta for the filename and to green for the line number, as well.

There is one difference from GNU grep: When a binary file matches
without -a, GNU grep does not color the <file> in ""Binary file <file>
matches"", but we do.

Like GNU grep, if --null is given, the null separators are not colored.

For config.txt, use a a sub-list to describe the slots, rather than
a single paragraph with parentheses, since this is much more readable.

Remove the cast to int for `rm_eo - rm_so` since it is not necessary.

Signed-off-by: Mark Lodato <lodatom@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_5363.cpp,,,data/crawl/git/old_hunk_5363.cpp,data/crawl/git/new_hunk_5363.cpp,-1,8,,"opt->output(opt, data, size);","[""addLog""]","[[], [""opt"", ""output"", ""opt"", ""data"", ""size""]]",[-10546821324915544076],5783,0.0,2
https://github.com/git/git/commit/74884b524e7e12b3419264d3180de785a9e39fa5,13 Mar 2010,"notes: rework subcommands and parse options

Running 'git notes copy -h' is not very helfpul right now. It lists
the options for all the git notes subcommands and is rather confusing.
Fix this by splitting cmd_notes() into separate functions for each
subcommand (besides append and edit since they're very similar) and
only providing a usage message for the subcommand.

This has an added benefit of reducing the code complexity while making
it safer and easier to read. The downside is we get some code bloat
from similar setup and teardown needed for notes and options parsing.
We also get a bit stricter in options parsing by only allowing
the ref option to come before the subcommand.

Acked-by: Johan Herland <johan@herland.net>
Cc: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Stephen Boyd <bebarino@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",560,data/crawl/git/hunk_5346.cpp,,,data/crawl/git/old_hunk_5346.cpp,data/crawl/git/new_hunk_5346.cpp,-1,390,,"error(""Unknown subcommand: %s"", argv[0]);","[""addLog""]","[[], [""error"", ""Unknown"", ""subcommand"", ""%s"", ""argv[0]""]]",[13030013239821874736],5782,534240.0,2
https://github.com/git/git/commit/890a13a45285ad44858add2ce2f74eb478f549c8,31 Mar 2010,"Sync with 1.7.0.4

Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/hunk_5320.cpp,,,data/crawl/git/old_hunk_5320.cpp,data/crawl/git/new_hunk_5320.cpp,9,9,"error(""error running textconv command '%s'"", pgm);","error(""error reading from textconv command '%s'"", pgm);","[""updateContent""]","[[""running""], [""reading"", ""from""]]",[1923600058499692557],5781,720.0,2
https://github.com/git/git/commit/bc84a7fbac4ce85bb93eeb57b5cb39548d286ad0,01 Apr 2010,"revert: use strbuf to refactor the code that writes the merge message

The code in this commit was written by Stephan Beyer for the sequencer
GSoC project:

    git://repo.or.cz/git/sbeyer.git

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",70,data/crawl/git/hunk_5315.cpp,,,data/crawl/git/old_hunk_5315.cpp,data/crawl/git/new_hunk_5315.cpp,16,15,"die (""Error wrapping up %s"", defmsg);","write_message(&msgbuf, defmsg);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""Error"", ""wrapping"", ""up"", ""%s""], [""write_message"", ""&msgbuf""]]",[-10961094466375087096],5780,0.0,2
https://github.com/git/git/commit/ae8c79fd8fe47bfebf56ae83461cbedb934cff92,01 Apr 2010,"revert: refactor merge recursive code into its own function

The code that is used to do a recursive merge is extracted from
the revert_or_cherry_pick() function and put into a new
do_recursive_merge() function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/hunk_5310.cpp,,,data/crawl/git/old_hunk_5310.cpp,data/crawl/git/new_hunk_5310.cpp,-1,32,,"die(""%s: Unable to write new index file"", me);","[""addLog""]","[[], [""die"", ""%s"", ""Unable"", ""to"", ""write"", ""new"", ""index"", ""file"", ""me""]]",[9662079330201775019],5779,414000.0,2
https://github.com/git/git/commit/3f9083cde3b434155c274168f166ffce2bb243e7,01 Apr 2010,"merge: refactor code that calls ""git merge-STRATEGY""

In the try_merge_strategy() function, when the strategy is ""recursive""
or ""subtree"", the merge_recursive() function is called.
Otherwise we launch a ""git merge-STRATEGY"" process.

To make it possible to reuse code that launches a ""git merge-STRATEGY""
process, this patch refactors this code into a new try_merge_command()
function.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",81,data/crawl/git/hunk_5309.cpp,,,data/crawl/git/old_hunk_5309.cpp,data/crawl/git/new_hunk_5309.cpp,33,-1,"die(""failed to read the cache"");",,"[""removeLog""]","[[""die"", ""failed"", ""to"", ""read"", ""the"", ""cache""], []]",[26720264961997095624],5778,416160.0,2
https://github.com/git/git/commit/40d52ff77b093fa48f58a168f4b0c4e65b862e56,02 Apr 2010,"make commit_tree a library function

Until now, this has been part of the commit-tree builtin.
However, it is already used by other builtins (like commit,
merge, and notes), and it would be useful to access it from
library code.

The check_valid helper has to come along, too, but is given
a more library-ish name of ""assert_sha1_type"".

Otherwise, the code is unchanged. There are still a few
rough edges for a library function, like printing the utf8
warning to stderr, but we can address those if and when they
come up as inappropriate.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5302.cpp,,,data/crawl/git/old_hunk_5302.cpp,data/crawl/git/new_hunk_5302.cpp,-1,52,,"fprintf(stderr, commit_utf8_warn);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""commit_utf8_warn""]]",[-7234034791244786504],5777,619920.0,2
https://github.com/git/git/commit/40d52ff77b093fa48f58a168f4b0c4e65b862e56,02 Apr 2010,"make commit_tree a library function

Until now, this has been part of the commit-tree builtin.
However, it is already used by other builtins (like commit,
merge, and notes), and it would be useful to access it from
library code.

The check_valid helper has to come along, too, but is given
a more library-ish name of ""assert_sha1_type"".

Otherwise, the code is unchanged. There are still a few
rough edges for a library function, like printing the utf8
warning to stderr, but we can address those if and when they
come up as inappropriate.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_5300.cpp,,,data/crawl/git/old_hunk_5300.cpp,data/crawl/git/new_hunk_5300.cpp,51,-1,"fprintf(stderr, commit_utf8_warn);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""commit_utf8_warn""], []]",[7234034791244786504],5776,409680.0,2
https://github.com/git/git/commit/882749a04f828fccd795deec4d0bf10ba09ae549,14 Apr 2010,"diff: add --word-diff option that generalizes --color-words

This teaches the --color-words engine a more general interface that
supports two new modes:

* --word-diff=plain, inspired by the 'wdiff' utility (most similar to
  'wdiff -n <old> <new>'): uses delimiters [-removed-] and {+added+}

* --word-diff=porcelain, which generates an ad-hoc machine readable
  format:
  - each diff unit is prefixed by [-+ ] and terminated by newline as
    in unified diff
  - newlines in the input are output as a line consisting only of a
    tilde '~'

Both of these formats still support color if it is enabled, using it
to highlight the differences.  --color-words becomes a synonym for
--word-diff=color, which is the color-only format.  Also adds some
compatibility/convenience options.

Thanks to Junio C Hamano and Miles Bader for good ideas.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",342,data/crawl/git/hunk_5273.cpp,,,data/crawl/git/old_hunk_5273.cpp,data/crawl/git/new_hunk_5273.cpp,-1,5,,"fputs(""~\n"", ecbdata->file);","[""addLog""]","[[], [""fputs"", ""\\n"", ""ecbdata"", ""file""]]",[4718874482615454224],5775,0.0,2
https://github.com/git/git/commit/0974c117ff4e17e8b6300519cae0fbc67d34adaa,17 Apr 2010,"diff: use large integers for diffstat calculations

The diffstat ""added"" and ""changed"" fields generally store
line counts; however, for binary files, they store file
sizes. Since we store and print these values as ints, a
diffstat on a file larger than 2G can show a negative size.
Instead, let's use uintmax_t, which should be at least 64
bits on modern platforms.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_5267.cpp,,,data/crawl/git/old_hunk_5267.cpp,data/crawl/git/new_hunk_5267.cpp,3,3,"fprintf(options->file, ""%s%d%s"", del_c, deleted, reset);","fprintf(options->file, ""%s%""PRIuMAX""%s"",
				del_c, deleted, reset);","[""addContent"", ""updateContent"", ""addVariable""]","[[""%s%d%s""], [""%s%"", ""PRIuMAX"", ""%s""]]",[-7406981847894416400],5774,0.0,2
https://github.com/git/git/commit/0da8b2e7c80a6dd9743e5233cdc5acd836c9a8d3,17 Apr 2010,"http.c: Don't store destination name in request structures

The destination name within the object store is easily computed
on demand, reusing a static buffer held by sha1_file.c.  We don't
need to copy the entire path into the request structure for safe
keeping, when it can be easily reformatted after the download has
been completed.

This reduces the size of the per-request structure, and removes
yet another PATH_MAX based limit.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_5265.cpp,,,data/crawl/git/old_hunk_5265.cpp,data/crawl/git/new_hunk_5265.cpp,3,3,"error(""Couldn't create temporary file %s for %s: %s"",
		      freq->tmpfile, freq->filename, strerror(errno));","error(""Couldn't create temporary file %s: %s"",
		      freq->tmpfile, strerror(errno));","[""removeVariable"", ""updateContent""]","[[""for"", ""%s"", ""freq"", ""filename""], []]",[11351630581255165811],5773,0.0,2
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5225.cpp,,,data/crawl/git/old_hunk_5225.cpp,data/crawl/git/new_hunk_5225.cpp,-1,7,,"fprintf(options->file, ""%s"", msg->buf);","[""addLog""]","[[], [""fprintf"", ""options"", ""file"", ""%s"", ""msg"", ""buf""]]",[2359173507950714137],5772,0.0,2
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5224.cpp,,,data/crawl/git/old_hunk_5224.cpp,data/crawl/git/new_hunk_5224.cpp,-1,12,,"fprintf(options->file,
	       "" %d files changed, %d insertions(+), %d deletions(-)\n"",
	       total_files, adds, dels);","[""addLog""]","[[], [""fprintf"", ""options"", ""file"", ""%d"", ""files"", ""changed"", ""%d"", ""insertions"", ""%d"", ""deletions"", ""\\n"", ""total_files"", ""adds"", ""dels""]]",[-20656035348542763272],5771,0.0,2
https://github.com/git/git/commit/7be5761073fde260d3aca10883e8688bd30cbccf,01 Jun 2010,"diff.c: Output the text graph padding before each diff line

Change output from diff with -p/--dirstat/--binary/--numstat/--stat/
--shortstat/--check/--summary options to align with graph paddings.

Thanks Jeff King <peff@peff.net> for reporting the '--summary' bug and
his initial patch.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",200,data/crawl/git/hunk_5222.cpp,,,data/crawl/git/old_hunk_5222.cpp,data/crawl/git/new_hunk_5222.cpp,-1,3,,"fprintf(options->file, ""%s"", line_prefix);","[""addLog""]","[[], [""fprintf"", ""options"", ""file"", ""%s"", ""line_prefix""]]",[-4352537275951227185],5770,0.0,2
https://github.com/git/git/commit/7af46595b2667214e98da55ed2f82ce1ac2b404a,02 Jun 2010,"revert: refactor code into a do_pick_commit() function

This is needed because we are going to make it possible
to cherry-pick many commits instead of just one in the following
commits. And we will be able to do that by just calling
do_pick_commit() once for each commit to cherry-pick.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_5210.cpp,,,data/crawl/git/old_hunk_5210.cpp,data/crawl/git/new_hunk_5210.cpp,-1,18,,"die(""cherry-pick --ff cannot be used with --edit"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""edit""]]",[-1508568286979132422],5769,62640.0,2
https://github.com/git/git/commit/7af46595b2667214e98da55ed2f82ce1ac2b404a,02 Jun 2010,"revert: refactor code into a do_pick_commit() function

This is needed because we are going to make it possible
to cherry-pick many commits instead of just one in the following
commits. And we will be able to do that by just calling
do_pick_commit() once for each commit to cherry-pick.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_5210.cpp,,,data/crawl/git/old_hunk_5210.cpp,data/crawl/git/new_hunk_5210.cpp,-1,16,,"die(""cherry-pick --ff cannot be used with -x"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""x""]]",[3155668243154972171],5768,62640.0,2
https://github.com/git/git/commit/7af46595b2667214e98da55ed2f82ce1ac2b404a,02 Jun 2010,"revert: refactor code into a do_pick_commit() function

This is needed because we are going to make it possible
to cherry-pick many commits instead of just one in the following
commits. And we will be able to do that by just calling
do_pick_commit() once for each commit to cherry-pick.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_5210.cpp,,,data/crawl/git/old_hunk_5210.cpp,data/crawl/git/new_hunk_5210.cpp,-1,14,,"die(""cherry-pick --ff cannot be used with --no-commit"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""no"", ""commit""]]",[7498953861761640498],5767,62640.0,2
https://github.com/git/git/commit/7af46595b2667214e98da55ed2f82ce1ac2b404a,02 Jun 2010,"revert: refactor code into a do_pick_commit() function

This is needed because we are going to make it possible
to cherry-pick many commits instead of just one in the following
commits. And we will be able to do that by just calling
do_pick_commit() once for each commit to cherry-pick.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_5210.cpp,,,data/crawl/git/old_hunk_5210.cpp,data/crawl/git/new_hunk_5210.cpp,-1,12,,"die(""cherry-pick --ff cannot be used with --signoff"");","[""addLog""]","[[], [""die"", ""cherry"", ""pick"", ""ff"", ""cannot"", ""be"", ""used"", ""with"", ""signoff""]]",[1324848834048755095],5766,62640.0,2
https://github.com/git/git/commit/942e7747678ecf5f118ea5b2d0c763166de21f3a,07 Jun 2010,"Add ""core.eol"" config variable

Introduce a new configuration variable, ""core.eol"", that allows the user
to set which line endings to use for end-of-line-normalized files in the
working directory.  It defaults to ""native"", which means CRLF on Windows
and LF everywhere else.

Note that ""core.autocrlf"" overrides core.eol.  This means that

[core]
	autocrlf = true

puts CRLFs in the working directory even if core.eol is set to ""lf"".

Signed-off-by: Eyvind Bernhardsen <eyvind.bernhardsen@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",239,data/crawl/git/hunk_5186.cpp,,,data/crawl/git/old_hunk_5186.cpp,data/crawl/git/new_hunk_5186.cpp,-1,4,,"error(""core.autocrlf=input conflicts with core.eol=crlf"");","[""addLog""]","[[], [""error"", ""core"", ""autocrlf"", ""input"", ""conflicts"", ""with"", ""core"", ""eol"", ""crlf""]]",[2115038850920888982],5765,0.0,2
https://github.com/git/git/commit/3e333036ccbb97fddf54bd8fe74b12ba46f1687b,11 Jun 2010,"fast-import: die_nicely() back to vsnprintf (reverts part of ebaa79f)

ebaa79f (Make report() from usage.c public as vreportf() and use it.,
2010-03-06) changed fast-import's die_nicely() to use vreportf().
Unfortunately this is not possible: we need the message again for
write_report(), and vreportf() uses vsnprintf(), which invalidates the
va_list.  As pointed out by Erik Faye-Lund, va_copy is C99 and thus
not an option.

So revert the part of ebaa79f that pertains to die_nicely().

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_5180.cpp,,,data/crawl/git/old_hunk_5180.cpp,data/crawl/git/new_hunk_5180.cpp,-1,7,,"fputs(message, stderr);","[""addLog""]","[[], [""fputs"", ""message"", ""stderr""]]",[-19068772633607565375],5764,738000.0,2
https://github.com/git/git/commit/3e333036ccbb97fddf54bd8fe74b12ba46f1687b,11 Jun 2010,"fast-import: die_nicely() back to vsnprintf (reverts part of ebaa79f)

ebaa79f (Make report() from usage.c public as vreportf() and use it.,
2010-03-06) changed fast-import's die_nicely() to use vreportf().
Unfortunately this is not possible: we need the message again for
write_report(), and vreportf() uses vsnprintf(), which invalidates the
va_list.  As pointed out by Erik Faye-Lund, va_copy is C99 and thus
not an option.

So revert the part of ebaa79f that pertains to die_nicely().

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_5180.cpp,,,data/crawl/git/old_hunk_5180.cpp,data/crawl/git/new_hunk_5180.cpp,-1,6,,"fputs(""fatal: "", stderr);","[""addLog""]","[[], [""fputs"", ""fatal"", ""stderr""]]",[-17169312593591255838],5763,739440.0,2
https://github.com/git/git/commit/7b53b92fdb22b90d2be558db84c725641c4ad170,16 Jul 2010,"revert: report success when using option --strategy

""git cherry-pick foo"" has always reported success with
""Finished one cherry-pick"" but ""cherry-pick --strategy""
does not print anything. So move the code to write that
message from do_recursive_merge() to do_cherry_pick()
so other strategies can share it.

This patch also refactors the code that prints a message
like ""Automatic cherry-pick failed. <help message>"". This
code was duplicated in both do_recursive_merge() and
do_pick_commit().

To do that, now do_recursive_merge() returns an int to signal
success or failure. And in case of failure we just return 1
from do_pick_commit() instead of doing ""exit(1)"" from either
do_recursive_merge() or do_pick_commit().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_5121.cpp,,,data/crawl/git/old_hunk_5121.cpp,data/crawl/git/new_hunk_5121.cpp,10,-1,"fprintf(stderr, ""Finished one %s.\n"", me);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Finished"", ""one"", ""%s"", ""\\n"", ""me""], []]",[3198577654070895455],5762,76320.0,2
https://github.com/git/git/commit/1b0b962d771fb734cbf273f216b487bb58dec7b9,25 Jul 2010,"Check size of path buffer before writing into it

This prevents a buffer overrun that could otherwise be triggered by
creating a file called '.git' with contents

  gitdir: (something really long)

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_5113.cpp,,,data/crawl/git/old_hunk_5113.cpp,data/crawl/git/new_hunk_5113.cpp,-1,4,,"die(""Too long path: %.*s"", 60, suspect);","[""addLog""]","[[], [""die"", ""Too"", ""long"", ""path"", ""%"", ""*s"", ""60"", ""suspect""]]",[14427318436797820060],5761,3600.0,2
https://github.com/git/git/commit/93a00542eaeb40c31b4de2497f5413a2fc0f36f4,26 Jul 2010,"setup: split off a function to checks working dir for .git file

The repository discovery procedure looks something like this:

	while (same filesystem) {
		check .git in working dir
		check .
		chdir(..)
	}

Add a function for the first step to make the actual code look a bit
closer to that pseudocode.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_5108.cpp,,,data/crawl/git/old_hunk_5108.cpp,data/crawl/git/new_hunk_5108.cpp,-1,9,,"die(""Repository setup failed"");","[""addLog""]","[[], [""die"", ""Repository"", ""setup"", ""failed""]]",[-9323700510484511542],5760,603360.0,2
https://github.com/git/git/commit/ba9523ea809dc496a14f3644bdc1dd6f486983c0,27 Jul 2010,"Sync with 1.7.2.1

Signed-off-by: Junio C Hamano <gitster@pobox.com>",99,data/crawl/git/hunk_5101.cpp,,,data/crawl/git/old_hunk_5101.cpp,data/crawl/git/new_hunk_5101.cpp,3,3,"die(""Where do you want to fetch from today?"");","die(""No remote repository specified.  Please, specify either a URL or a\n""
		    ""remote name from which new revisions should be fetched."");","[""addContent"", ""updateContent""]","[[""Where"", ""do"", ""you"", ""want"", ""to"", ""fetch"", ""today""], [""No"", ""remote"", ""repository"", ""specified"", ""Please"", ""specify"", ""either"", ""a"", ""URL"", ""or"", ""a\\n"", ""remote"", ""name"", ""which"", ""new"", ""revisions"", ""should"", ""be"", ""fetched""]]",[14035317399176361742],5759,0.0,2
https://github.com/git/git/commit/ad9ac6db5d58de08d0497b9184e86926377c20dd,11 Aug 2010,"split_cmdline: Allow caller to access error string

This allows the caller to add its own error message to that returned
by split_cmdline.  Thus error output following a failed split_cmdline
can be of the form

fatal: Bad alias.test string: cmdline ends with \

rather than

error: cmdline ends with \
fatal: Bad alias.test string

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_5082.cpp,,,data/crawl/git/old_hunk_5082.cpp,data/crawl/git/new_hunk_5082.cpp,3,-1,"error(""unclosed quote"");",,"[""removeLog""]","[[""error"", ""unclosed"", ""quote""], []]",[-2213359264454929381],5758,555120.0,2
https://github.com/git/git/commit/ad9ac6db5d58de08d0497b9184e86926377c20dd,11 Aug 2010,"split_cmdline: Allow caller to access error string

This allows the caller to add its own error message to that returned
by split_cmdline.  Thus error output following a failed split_cmdline
can be of the form

fatal: Bad alias.test string: cmdline ends with \

rather than

error: cmdline ends with \
fatal: Bad alias.test string

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_5081.cpp,,,data/crawl/git/old_hunk_5081.cpp,data/crawl/git/new_hunk_5081.cpp,3,-1,"error(""cmdline ends with \\"");",,"[""removeLog""]","[[""error"", ""cmdline"", ""ends"", ""with"", ""\\\\""], []]",[-7757462171829417328],5757,555120.0,2
https://github.com/git/git/commit/e6c111b4c092c0dd24c541b9721f5bc04641dcb0,11 Aug 2010,"unpack_trees: group error messages by type

When an error is encountered, it calls add_rejected_file() which either
- directly displays the error message and stops if in plumbing mode
  (i.e. if show_all_errors is not initialized at 1)
- or stores it so that it will be displayed at the end with display_error_msgs(),

Storing the files by error type permits to have a list of files for
which there is the same error instead of having a serie of almost
identical errors.

As each bind_overlap error combines a file and an old file, a list cannot be
done, therefore, theses errors are not stored but directly displayed.

Signed-off-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/hunk_5072.cpp,,,data/crawl/git/old_hunk_5072.cpp,data/crawl/git/new_hunk_5072.cpp,3,-1,"error(ERRORMSG(o, error_type), ce->name);",,"[""removeLog""]","[[""error"", ""ERRORMSG"", ""o"", ""error_type"", ""ce"", ""name""], []]",[-20793310391473450860],5756,0.0,2
https://github.com/git/git/commit/9f29fe9a779e55e7387577cd7f712de0b13b5cd6,27 Aug 2010,"shell: Display errors from improperly-formatted command lines

The interface for split_cmdline has changed such that the caller holds
responsibility for printing any error messages.  This patch changes
the git shell to print these error messages as appropriate.

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_5031.cpp,,,data/crawl/git/old_hunk_5031.cpp,data/crawl/git/new_hunk_5031.cpp,3,3,"die(""invalid command format '%s'"", argv[2]);","die(""invalid command format '%s': %s"", argv[2],
		    split_cmdline_strerror(count));","[""updateContent"", ""addVariable""]","[[], [""%s"", ""split_cmdline_strerror"", ""count""]]",[16627420105816901835],5755,11520.0,2
https://github.com/git/git/commit/1b8cdce94f4fff2408f8ed26fe4fc2f187a46794,19 Oct 2010,"blame: Add option to show author email instead of name

Add a new option -e (or --show-email) to git-blame that will display
the author's email instead of name on each line. This option works
for both git-blame and git-annotate.

Signed-off-by: Kevin Ballard <kevin@sb.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_5004.cpp,,,data/crawl/git/old_hunk_5004.cpp,data/crawl/git/new_hunk_5004.cpp,4,9,"printf(""\t(%10s\t%10s\t%d)"", ci.author,
			       format_time(ci.author_time, ci.author_tz,
					   show_raw_time),
			       ent->lno + 1 + cnt);","printf(""\t(%10s\t%10s\t%d)"", name,
			       format_time(ci.author_time, ci.author_tz,
					   show_raw_time),
			       ent->lno + 1 + cnt);","[""removeVariable"", ""addVariable""]","[[""author"", ""ci""], [""name""]]",[-8149575215862489156],5754,0.0,2
https://github.com/git/git/commit/c50c4316e1eed362bee387e4cbfbe1138957f75b,22 Oct 2010,"diff: don't presume empty file when corresponding object is missing

The low-level diff code will happily produce totally bogus diff output
with a broken repository via format-patch and friends by treating missing
objects as empty files.  Let's prevent that from happening any longer.

Reported-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Signed-off-by: Nicolas Pitre <nico@fluxnic.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_5001.cpp,,,data/crawl/git/old_hunk_5001.cpp,data/crawl/git/new_hunk_5001.cpp,-1,6,,"die(""unable to read %s"", sha1_to_hex(s->sha1));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""read"", ""%s"", ""sha1_to_hex"", ""s"", ""sha1""]]",[-5787983427422152136],5753,0.0,2
https://github.com/git/git/commit/d71b8ba7c959e414d36974af890e3e2cbd2acbb9,04 Nov 2010,"commit: --fixup option for use with rebase --autosquash

This option makes it convenient to construct commit messages for use
with 'rebase --autosquash'.  The resulting commit message will be
""fixup! ..."" where ""..."" is the subject line of the specified commit
message.

Example usage:
  $ git commit --fixup HEAD~2

Signed-off-by: Pat Notz <patnotz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_4993.cpp,,,data/crawl/git/old_hunk_4993.cpp,data/crawl/git/new_hunk_4993.cpp,6,8,"die(""Only one of -c/-C/-F can be used."");","die(""Only one of -c/-C/-F/--fixup can be used."");","[""updateContent""]","[[""F""], [""F/"", ""fixup""]]",[3065894137027465175],5752,0.0,2
https://github.com/git/git/commit/fdc12114635581b6901940ddb467a78716bc12ca,04 Nov 2010,"mingw: use poll-emulation from gnulib

Signed-off-by: Erik Faye-Lund <kusmabite@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/hunk_4983.cpp,,,data/crawl/git/old_hunk_4983.cpp,data/crawl/git/new_hunk_4983.cpp,21,-1,"error(""POLLIN not set"");",,"[""removeLog""]","[[""error"", ""POLLIN"", ""not"", ""set""], []]",[-18143410464162070918],5751,0.0,2
https://github.com/git/git/commit/f6ce1f25885f3db71935b201c5e3c858eb993f5c,10 Nov 2010,"cherry-pick/revert: transparently refresh index

A stat-dirty index is not a detail that ought to concern the operator
of porcelain such as ""git cherry-pick"".

Without this change, a cherry-pick after copying a worktree with rsync
errors out with a misleading message.

	$ git cherry-pick build/top
	error: Your local changes to 'file.h' would be overwritten by merge.  Aborting.
	Please, commit your changes or stash them before you can merge.

Noticed-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_4976.cpp,,,data/crawl/git/old_hunk_4976.cpp,data/crawl/git/new_hunk_4976.cpp,4,-1,"die(""git %s: failed to read the index"", me);",,"[""removeLog""]","[[""die"", ""git"", ""%s"", ""failed"", ""to"", ""read"", ""the"", ""index"", ""me""], []]",[31641561397605786481],5750,115920.0,2
https://github.com/git/git/commit/b0613ce0f9ef3fd111f8c75b84ddd12f9f04fc87,10 Nov 2010,"wrapper: give zlib wrappers their own translation unit

Programs using xmalloc() but not git_inflate() require -lz on the
linker command line because git_inflate() is in the same translation
unit as xmalloc().

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/hunk_4970.cpp,,,data/crawl/git/old_hunk_4970.cpp,data/crawl/git/new_hunk_4970.cpp,-1,58,,"error(""inflate: %s (%s)"", err, strm->msg ? strm->msg : ""no message"");","[""addLog""]","[[], [""error"", ""inflate"", ""%s"", ""%s"", ""err"", ""strm"", ""msg"", ""strm"", ""msg"", ""no"", ""message""]]",[16395568639775864816],5749,480960.0,2
https://github.com/git/git/commit/b0613ce0f9ef3fd111f8c75b84ddd12f9f04fc87,10 Nov 2010,"wrapper: give zlib wrappers their own translation unit

Programs using xmalloc() but not git_inflate() require -lz on the
linker command line because git_inflate() is in the same translation
unit as xmalloc().

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/hunk_4970.cpp,,,data/crawl/git/old_hunk_4970.cpp,data/crawl/git/new_hunk_4970.cpp,-1,40,,"die(""inflate: out of memory"");","[""addLog""]","[[], [""die"", ""inflate"", ""out"", ""of"", ""memory""]]",[18050271948401655394],5748,480960.0,2
https://github.com/git/git/commit/b0613ce0f9ef3fd111f8c75b84ddd12f9f04fc87,10 Nov 2010,"wrapper: give zlib wrappers their own translation unit

Programs using xmalloc() but not git_inflate() require -lz on the
linker command line because git_inflate() is in the same translation
unit as xmalloc().

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/hunk_4970.cpp,,,data/crawl/git/old_hunk_4970.cpp,data/crawl/git/new_hunk_4970.cpp,-1,29,,"error(""inflateEnd: %s"", strm->msg ? strm->msg : ""failed"");","[""addLog""]","[[], [""error"", ""inflateEnd"", ""%s"", ""strm"", ""msg"", ""strm"", ""msg"", ""failed""]]",[10022894695493755336],5747,480960.0,2
https://github.com/git/git/commit/b0613ce0f9ef3fd111f8c75b84ddd12f9f04fc87,10 Nov 2010,"wrapper: give zlib wrappers their own translation unit

Programs using xmalloc() but not git_inflate() require -lz on the
linker command line because git_inflate() is in the same translation
unit as xmalloc().

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/hunk_4970.cpp,,,data/crawl/git/old_hunk_4970.cpp,data/crawl/git/new_hunk_4970.cpp,-1,23,,"die(""inflateInit: %s (%s)"", err, strm->msg ? strm->msg : ""no message"");","[""addLog""]","[[], [""die"", ""inflateInit"", ""%s"", ""%s"", ""err"", ""strm"", ""msg"", ""strm"", ""msg"", ""no"", ""message""]]",[-2829093463069809656],5746,480960.0,2
https://github.com/git/git/commit/172b6428d06ff4eb0812f087a497d50b6c878fe1,15 Nov 2010,"do not overwrite untracked during merge from unborn branch

In case HEAD does not point to a valid commit yet, merge is
implemented as a hard reset. This will cause untracked files to be
overwritten.

Instead, assume the empty tree for HEAD and do a regular merge. An
untracked file will cause the merge to abort and do nothing. If no
conflicting files are present, the merge will have the same effect
as a hard reset.

Signed-off-by: Clemens Buchacher <drizzd@aon.at>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_4966.cpp,,,data/crawl/git/old_hunk_4966.cpp,data/crawl/git/new_hunk_4966.cpp,-1,18,,"die(""read-tree failed"");","[""addLog""]","[[], [""die"", ""read"", ""tree"", ""failed""]]",[-14423022079475839410],5745,619200.0,2
https://github.com/git/git/commit/809f38c8abacdbeb7015fdeef03931568c7fddda,17 Nov 2010,"git notes merge: Manual conflict resolution, part 1/2

Conflicts (that are to be resolved manually) are written into a special-
purpose working tree, located at .git/NOTES_MERGE_WORKTREE. Within this
directory, conflicting notes entries are stored (with conflict markers
produced by ll_merge()) using the SHA1 of the annotated object. The
.git/NOTES_MERGE_WORKTREE directory will only contain the _conflicting_
note entries. The non-conflicting note entries (aka. the partial merge
result) are stored in 'local_tree', and the SHA1 of the resulting commit
is written to 'result_sha1'. The return value from notes_merge() is -1.

The user is told to edit the files within the .git/NOTES_MERGE_WORKTREE
directory in order to resolve the conflicts.

The patch also contains documentation and testcases for the correct setup
of .git/NOTES_MERGE_WORKTREE.

The next part will recombine the partial notes merge result with the
resolved conflicts in .git/NOTES_MERGE_WORKTREE to produce the complete
merge result.

This patch has been improved by the following contributions:
- Jonathan Nieder: Use trace_printf(...) instead of OUTPUT(o, 5, ...)

Thanks-to: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",487,data/crawl/git/hunk_4946.cpp,,,data/crawl/git/old_hunk_4946.cpp,data/crawl/git/new_hunk_4946.cpp,-1,101,,"die(""Failed to execute internal merge"");","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""execute"", ""internal"", ""merge""]]",[-17350295029259270831],5744,581760.0,2
https://github.com/git/git/commit/2a22c1b35d6110e72d86a2fac4b68dbad0905adb,17 Nov 2010,"cmd_merge(): Parse options before checking MERGE_HEAD

Reorder the initial part of builtin/merge.c:cmd_merge() so that command-line
options are parsed _before_ we load the index and check for MERGE_HEAD
(and exits if it exists). This does not change the behaviour of 'git merge',
but is needed in preparation for the implementation of 'git merge --abort'
(which requires MERGE_HEAD to be present).

This patch has been improved by the following contributions:
- Junio C Hamano: fixup minor style issues

Thanks-to: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_4934.cpp,,,data/crawl/git/old_hunk_4934.cpp,data/crawl/git/new_hunk_4934.cpp,-1,16,,"die(""You have not concluded your merge (MERGE_HEAD exists)."");","[""addLog""]","[[], [""die"", ""You"", ""have"", ""not"", ""concluded"", ""your"", ""merge"", ""MERGE_HEAD"", ""exists""]]",[34285302572830010332],5743,383760.0,2
https://github.com/git/git/commit/a9ca8a85ef493aac947f9da44a4fbb5724768897,29 Nov 2010,"builtins: print setup info if repo is found

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_4926.cpp,,,data/crawl/git/old_hunk_4926.cpp,data/crawl/git/new_hunk_4926.cpp,-1,38,,"die(""Unable to get current working directory"");","[""addLog""]","[[], [""die"", ""Unable"", ""to"", ""get"", ""current"", ""working"", ""directory""]]",[-12806260983115068574],5742,553680.0,2
https://github.com/git/git/commit/309be813c9b75fed70f3a03bf803bf47c6670cfc,07 Dec 2010,"update-index: migrate to parse-options API

--refresh and --really-refresh accept flags (like -q) and modify
an error indicator.  It might make sense to make the error
indicator global, but just pass the flags and a pointer to the error
indicator in a struct instead.

--cacheinfo wants 3 arguments.  Use the OPTION_LOWLEVEL_CALLBACK
extension to grab them and PARSE_OPT_NOARG to disallow the ""sticked""
--cacheinfo=foo form.  (The resulting message

	$ git update-index --cacheinfo=foo
	error: option `cacheinfo' takes no value

is unfortunately incorrect.)

--assume-unchanged and --no-assume-unchanged probably should use the
OPT_UYN feature; but use a callback for now so the existing MARK_FLAG
and UNMARK_FLAG values can be used.

--stdin and --index-info are still constrained to be the last argument
(implemented using the OPTION_LOWLEVEL_CALLBACK extension).

--unresolve and --again consume all arguments that come after them
(also using OPTION_LOWLEVEL_CALLBACK).

The order of options matters.  Each path on the command line is
affected only by the options that come before it.  A custom
argument-parsing loop with parse_options_step() brings that about.

In exchange for all the fuss, we get the usual perks: support for
un-sticked options, better usage error messages, more useful -h
output, and argument parsing code that should be easier to tweak
in the future.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",392,data/crawl/git/hunk_4904.cpp,,,data/crawl/git/old_hunk_4904.cpp,data/crawl/git/new_hunk_4904.cpp,98,-1,"die(""--stdin must be at the end"");",,"[""removeLog""]","[[""die"", ""stdin"", ""must"", ""be"", ""at"", ""the"", ""end""], []]",[12433435279927221849],5741,560880.0,2
https://github.com/git/git/commit/309be813c9b75fed70f3a03bf803bf47c6670cfc,07 Dec 2010,"update-index: migrate to parse-options API

--refresh and --really-refresh accept flags (like -q) and modify
an error indicator.  It might make sense to make the error
indicator global, but just pass the flags and a pointer to the error
indicator in a struct instead.

--cacheinfo wants 3 arguments.  Use the OPTION_LOWLEVEL_CALLBACK
extension to grab them and PARSE_OPT_NOARG to disallow the ""sticked""
--cacheinfo=foo form.  (The resulting message

	$ git update-index --cacheinfo=foo
	error: option `cacheinfo' takes no value

is unfortunately incorrect.)

--assume-unchanged and --no-assume-unchanged probably should use the
OPT_UYN feature; but use a callback for now so the existing MARK_FLAG
and UNMARK_FLAG values can be used.

--stdin and --index-info are still constrained to be the last argument
(implemented using the OPTION_LOWLEVEL_CALLBACK extension).

--unresolve and --again consume all arguments that come after them
(also using OPTION_LOWLEVEL_CALLBACK).

The order of options matters.  Each path on the command line is
affected only by the options that come before it.  A custom
argument-parsing loop with parse_options_step() brings that about.

In exchange for all the fuss, we get the usual perks: support for
un-sticked options, better usage error messages, more useful -h
output, and argument parsing code that should be easier to tweak
in the future.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",392,data/crawl/git/hunk_4903.cpp,,,data/crawl/git/old_hunk_4903.cpp,data/crawl/git/new_hunk_4903.cpp,-1,66,,"error(""option '%s' must be the last argument"", opt->long_name);","[""addLog""]","[[], [""error"", ""option"", ""%s"", ""must"", ""be"", ""the"", ""last"", ""argument"", ""opt"", ""long_name""]]",[-3973241517724752650],5740,0.0,2
https://github.com/git/git/commit/9951d3b37ec7298384640b11d07a990ef031fe83,22 Dec 2010,"setup: clean up setup_discovered_git_dir()

If core.bare is true, discard the discovered worktree, move back to
original cwd.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",96,data/crawl/git/hunk_4889.cpp,,,data/crawl/git/old_hunk_4889.cpp,data/crawl/git/new_hunk_4889.cpp,9,-1,"die(""Repository setup failed"");",,"[""removeLog""]","[[""die"", ""Repository"", ""setup"", ""failed""], []]",[9323700510484511542],5739,107280.0,2
https://github.com/git/git/commit/5ee5f5a65d5a60cd327f1a4b92ee0f48508f2362,19 Jan 2011,"svndump.c: Fix a printf format compiler warning

In particular, on systems that define uint32_t as an unsigned long,
gcc complains as follows:

        CC vcs-svn/svndump.o
    vcs-svn/svndump.c: In function `svndump_read':
    vcs-svn/svndump.c:215: warning: int format, uint32_t arg (arg 2)

In order to suppress the warning we use the C99 format specifier
macro PRIu32 from <inttypes.h>.

Signed-off-by: Ramsay Jones <ramsay@ramsay1.demon.co.uk>
Acked-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_4876.cpp,,,data/crawl/git/old_hunk_4876.cpp,data/crawl/git/new_hunk_4876.cpp,3,3,"die(""expected svn dump format version <= 2, found %d"",
				    dump_ctx.version);","die(""expected svn dump format version <= 2, found %""PRIu32,
				    dump_ctx.version);","[""addVariable""]","[[""%d""], [""%"", ""PRIu32""]]",[7232694531336534368],5738,92880.0,2
https://github.com/git/git/commit/09ebad6faeec11c3dbad0bdaf95faed57be5dcba,08 Feb 2011,"checkout: split off a function to peel away branchname arg

The code to parse and consume the tree name and ""--"" in commands such
as ""git checkout @{-1} -- '*.c'"" is intimidatingly long.  Split it out
into a separate function and make it easier to skip on first reading
by making the data it uses and produces more explicit.

No functional change intended.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",229,data/crawl/git/hunk_4865.cpp,,,data/crawl/git/old_hunk_4865.cpp,data/crawl/git/new_hunk_4865.cpp,-1,58,,"die(""invalid reference: %s"", arg);","[""addLog""]","[[], [""die"", ""invalid"", ""reference"", ""%s"", ""arg""]]",[-2938661177552858222],5737,668160.0,2
https://github.com/git/git/commit/206b099d269955337bd6169f71aa08ba28a0cf4f,15 Feb 2011,"smart-http: Don't use Expect: 100-Continue

Some HTTP/1.1 servers or proxies don't correctly implement the
100-Continue feature of HTTP/1.1.  Its a difficult feature to
implement right, and isn't commonly used by browsers, so many
developers may not even be aware that their server (or proxy)
doesn't honor it.

Within the smart HTTP protocol for Git we only use this newer
""Expect: 100-Continue"" feature to probe for missing authentication
before uploading a large payload like a pack file during push.
If authentication is necessary, we expect the server to send the
401 Not Authorized response before the bulk data transfer starts,
thus saving the client bandwidth during the retry.

A different method to probe for working authentication is to send an
empty command list (that is just ""0000"") to $URL/git-receive-pack.
or $URL/git-upload-pack.  All versions of both receive-pack and
upload-pack since the introduction of smart HTTP in Git 1.6.6
cleanly accept just a flush-pkt under --stateless-rpc mode, and
exit with success.

If HTTP level authentication is successful, the backend will return
an empty response, but with HTTP status code 200.  This enables
the client to continue with the transfer.

Signed-off-by: Shawn O. Pearce <spearce@spearce.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_4860.cpp,,,data/crawl/git/old_hunk_4860.cpp,data/crawl/git/new_hunk_4860.cpp,-1,13,,"error(""RPC failed; result=%d, HTTP code = %ld"",
			results.curl_result, results.http_code);","[""addLog""]","[[], [""error"", ""RPC"", ""failed"", ""result"", ""%d"", ""HTTP"", ""code"", ""%ld"", ""results"", ""curl_result"", ""results"", ""http_code""]]",[19791401746032207069],5736,336240.0,2
https://github.com/git/git/commit/24852d917104e294726c54803d5c9012997506ca,22 Feb 2011,"rev-list: --left/right-only are mutually exclusive

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_4848.cpp,,,data/crawl/git/old_hunk_4848.cpp,data/crawl/git/new_hunk_4848.cpp,-1,4,,"die(""--left-only is incompatible with --right-only"");","[""addLog""]","[[], [""die"", ""left"", ""only"", ""is"", ""incompatible"", ""with"", ""right"", ""only""]]",[-677547719811538212],5735,0.0,2
https://github.com/git/git/commit/37f7a8579363a98efc48dfb6964a519034fc9acc,22 Feb 2011,"Teach commit about CHERRY_PICK_HEAD

Previously the user was advised to use commit -c CHERRY_PICK_HEAD after
a conflicting cherry-pick. While this would preserve the original
commit's authorship, it would sadly discard cherry-pick's carefully
crafted MERGE_MSG (which contains the list of conflicts as well as the
original commit-id in the case of cherry-pick -x).

On the other hand, if a bare 'commit' were performed, it would preserve
the MERGE_MSG while resetting the authorship.

In other words, there was no way to simultaneously take the authorship
from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.

This change fixes that situation. A bare 'commit' will now take the
authorship from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.
If the user wishes to reset authorship, that must now be done explicitly
via --reset-author.

A side-benefit of passing commit authorship along this way is that we
can eliminate redundant authorship parsing code from revert.c.

(Also removed an unused include from revert.c)

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",262,data/crawl/git/hunk_4842.cpp,,,data/crawl/git/old_hunk_4842.cpp,data/crawl/git/new_hunk_4842.cpp,7,-1,"die (""Could not read commit message of %s"",
				sha1_to_hex(commit->object.sha1));",,"[""removeLog""]","[[""die"", ""Could"", ""not"", ""read"", ""commit"", ""message"", ""of"", ""%s"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""], []]",[1994912537116882588],5734,243360.0,2
https://github.com/git/git/commit/37f7a8579363a98efc48dfb6964a519034fc9acc,22 Feb 2011,"Teach commit about CHERRY_PICK_HEAD

Previously the user was advised to use commit -c CHERRY_PICK_HEAD after
a conflicting cherry-pick. While this would preserve the original
commit's authorship, it would sadly discard cherry-pick's carefully
crafted MERGE_MSG (which contains the list of conflicts as well as the
original commit-id in the case of cherry-pick -x).

On the other hand, if a bare 'commit' were performed, it would preserve
the MERGE_MSG while resetting the authorship.

In other words, there was no way to simultaneously take the authorship
from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.

This change fixes that situation. A bare 'commit' will now take the
authorship from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.
If the user wishes to reset authorship, that must now be done explicitly
via --reset-author.

A side-benefit of passing commit authorship along this way is that we
can eliminate redundant authorship parsing code from revert.c.

(Also removed an unused include from revert.c)

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",262,data/crawl/git/hunk_4836.cpp,,,data/crawl/git/old_hunk_4836.cpp,data/crawl/git/new_hunk_4836.cpp,8,8,"die(""invalid commit: %s"", use_message);","die(""invalid commit: %s"", author_message);","[""updateVariable""]","[[""use_message""], [""author_message""]]",[5995498175103616133],5733,0.0,2
https://github.com/git/git/commit/37f7a8579363a98efc48dfb6964a519034fc9acc,22 Feb 2011,"Teach commit about CHERRY_PICK_HEAD

Previously the user was advised to use commit -c CHERRY_PICK_HEAD after
a conflicting cherry-pick. While this would preserve the original
commit's authorship, it would sadly discard cherry-pick's carefully
crafted MERGE_MSG (which contains the list of conflicts as well as the
original commit-id in the case of cherry-pick -x).

On the other hand, if a bare 'commit' were performed, it would preserve
the MERGE_MSG while resetting the authorship.

In other words, there was no way to simultaneously take the authorship
from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.

This change fixes that situation. A bare 'commit' will now take the
authorship from CHERRY_PICK_HEAD and the commit message from MERGE_MSG.
If the user wishes to reset authorship, that must now be done explicitly
via --reset-author.

A side-benefit of passing commit authorship along this way is that we
can eliminate redundant authorship parsing code from revert.c.

(Also removed an unused include from revert.c)

Signed-off-by: Jay Soffian <jaysoffian@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",262,data/crawl/git/hunk_4835.cpp,,,data/crawl/git/old_hunk_4835.cpp,data/crawl/git/new_hunk_4835.cpp,4,4,"die(""cannot do a partial commit during a merge."");","die(""cannot do a partial commit during a %s."", whence_s());","[""updateContent"", ""addVariable""]","[[""merge""], [""%s"", ""whence_s""]]",[-3421527278887937249],5732,0.0,2
https://github.com/git/git/commit/ebeb60900fbab569ed14f710a0a1abb1637ec792,26 Feb 2011,"strbuf: add strbuf_vaddf

In a variable-args function, the code for writing into a strbuf is
non-trivial. We ended up cutting and pasting it in several places
because there was no vprintf-style function for strbufs (which in turn
was held up by a lack of va_copy).

Now that we have a fallback va_copy, we can add strbuf_vaddf, the
strbuf equivalent of vsprintf. And we can clean up the cut and paste
mess.

Signed-off-by: Jeff King <peff@peff.net>
Improved-by: Christian Couder <christian.couder@gmail.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_4826.cpp,,,data/crawl/git/old_hunk_4826.cpp,data/crawl/git/new_hunk_4826.cpp,22,-1,"die(""broken vsnprintf"");",,"[""removeLog""]","[[""die"", ""broken"", ""vsnprintf""], []]",[3880449387824731461],5731,0.0,2
https://github.com/git/git/commit/8dc6a373d201839859fe7924b63e57526ee2fc22,26 Feb 2011,"fast-import: add 'ls' command

Lazy fast-import frontend authors that want to rely on the backend to
keep track of the content of the imported trees _almost_ have what
they need in the 'cat-blob' command (v1.7.4-rc0~30^2~3, 2010-11-28).
But it is not quite enough, since

 (1) cat-blob can be used to retrieve the content of files, but
     not their mode, and

 (2) using cat-blob requires the frontend to keep track of a name
     (mark number or object id) for each blob to be retrieved

Introduce an 'ls' command to complement cat-blob and take care of the
remaining needs.  The 'ls' command finds what is at a given path
within a given tree-ish (tag, commit, or tree):

	'ls' SP <dataref> SP <path> LF

or in fast-import's active commit:

	'ls' SP <path> LF

The response is a single line sent through the cat-blob channel,
imitating ls-tree output.  So for example:

	FE> ls :1 Documentation
	gfi> 040000 tree 9e6c2b599341d28a2a375f8207507e0a2a627fe9	Documentation
	FE> ls 9e6c2b599341d28a2a375f8207507e0a2a627fe9 git-fast-import.txt
	gfi> 100644 blob 4f92954396e3f0f97e75b6838a5635b583708870	git-fast-import.txt
	FE> ls :1 RelNotes
	gfi> 120000 blob b942e499449d97aeb50c73ca2bdc1c6e6d528743	RelNotes
	FE> cat-blob b942e499449d97aeb50c73ca2bdc1c6e6d528743
	gfi> b942e499449d97aeb50c73ca2bdc1c6e6d528743 blob 32
	gfi> Documentation/RelNotes/1.7.4.txt

The most interesting parts of the reply are the first word, which is
a 6-digit octal mode (regular file, executable, symlink, directory,
or submodule), and the part from the second space to the tab, which is
a <dataref> that can be used in later cat-blob, ls, and filemodify (M)
commands to refer to the content (blob, tree, or commit) at that path.

If there is nothing there, the response is ""missing some/path"".

The intent is for this command to be used to read files from the
active commit, so a frontend can apply patches to them, and to copy
files and directories from previous revisions.

For example, proposed updates to svn-fe use this command in place of
its internal representation of the repository directory structure.
This simplifies the frontend a great deal and means support for
resuming an import in a separate fast-import run (i.e., incremental
import) is basically free.

Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Improved-by: Junio C Hamano <gitster@pobox.com>
Improved-by: Sverre Rabbelier <srabbelier@gmail.com>",317,data/crawl/git/hunk_4821.cpp,,,data/crawl/git/old_hunk_4821.cpp,data/crawl/git/new_hunk_4821.cpp,-1,63,,"die(""Invalid mark: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Invalid"", ""mark"", ""%s"", ""command_buf"", ""buf""]]",[-14450323941845917694],5730,62640.0,2
https://github.com/git/git/commit/850c5ea44ce0b4aac3be7c4d14b38ec901e777d1,26 Feb 2011,"vcs-svn: make test-line-buffer input format more flexible

Imitate the input format of test-obj-pool to support arbitrary
sequences of commands rather than alternating read/copy.  This should
make it easier to add tests that exercise other line_buffer functions.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",74,data/crawl/git/hunk_4820.cpp,,,data/crawl/git/old_hunk_4820.cpp,data/crawl/git/new_hunk_4820.cpp,-1,19,,"die(""unrecognized command: %s"", command);","[""addLog""]","[[], [""die"", ""unrecognized"", ""command"", ""%s"", ""command""]]",[17794402347674723428],5729,140400.0,2
https://github.com/git/git/commit/becbdae82bb8bb193c2f1e9d8b32a60bdef8b0e4,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4782.cpp,,,data/crawl/git/old_hunk_4782.cpp,data/crawl/git/new_hunk_4782.cpp,-1,9,,"fprintf(fp, ""%s"", GIT_COLOR_RESET);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""GIT_COLOR_RESET""]]",[-5265099989127206023],5728,0.0,2
https://github.com/git/git/commit/becbdae82bb8bb193c2f1e9d8b32a60bdef8b0e4,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4782.cpp,,,data/crawl/git/old_hunk_4782.cpp,data/crawl/git/new_hunk_4782.cpp,-1,7,,"fprintf(fp, ""%s"", sb->buf);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""sb"", ""buf""]]",[-4844602062157336825],5727,0.0,2
https://github.com/git/git/commit/becbdae82bb8bb193c2f1e9d8b32a60bdef8b0e4,08 Mar 2011,"wt-status: add helpers for printing wt-status lines

Introduce status_printf{,_ln,_more} wrapper functions around
color_vfprintf() which take care of adding ""#"" to the beginning of
status lines automatically.  The semantics:

 - status_printf() is just like color_fprintf() but it adds a ""# ""
   at the beginning of each line of output;

 - status_printf_ln() is a convenience function that additionally
   adds ""\n"" at the end;

 - status_printf_more() is a variant of status_printf() used to
   continue lines that have already started.  It suppresses the ""#"" at
   the beginning of the first line.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",93,data/crawl/git/hunk_4782.cpp,,,data/crawl/git/old_hunk_4782.cpp,data/crawl/git/new_hunk_4782.cpp,-1,6,,"fprintf(fp, ""%s"", color);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""color""]]",[2757575891281490618],5726,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4777.cpp,,,data/crawl/git/old_hunk_4777.cpp,data/crawl/git/new_hunk_4777.cpp,11,11,"fprintf(s->fp, ""# No changes\n"");","status_printf_ln(s, GIT_COLOR_NORMAL, ""No changes"");","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""changes\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL"", ""changes""]]",[-7231624812856041221],5725,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4777.cpp,,,data/crawl/git/old_hunk_4777.cpp,data/crawl/git/new_hunk_4777.cpp,3,3,"fprintf(s->fp, ""# Untracked files not listed%s\n"",
			advice_status_hints
			? "" (use -u option to show untracked files)"" : """");","status_printf_ln(s, GIT_COLOR_NORMAL, ""Untracked files not listed%s"",
			advice_status_hints
			? "" (use -u option to show untracked files)"" : """");","[""updateLog"", ""removeVariable"", ""updateContent"", ""addVariable""]","[[""fprintf"", ""fp"", ""listed%s\\n""], [""status_printf_ln"", ""GIT_COLOR_NORMAL"", ""listed%s""]]",[2815881955125140143],5724,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4776.cpp,,,data/crawl/git/old_hunk_4776.cpp,data/crawl/git/new_hunk_4776.cpp,-1,12,,"status_printf_ln(s, color(WT_STATUS_HEADER, s), ""Initial commit"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""color"", ""WT_STATUS_HEADER"", ""s"", ""Initial"", ""commit""]]",[3181246093299653723],5723,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4776.cpp,,,data/crawl/git/old_hunk_4776.cpp,data/crawl/git/new_hunk_4776.cpp,-1,3,,"color(WT_STATUS_HEADER, s);","[""addLog""]","[[], [""color"", ""WT_STATUS_HEADER"", ""s""]]",[11328931222400805632],5722,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,24,,"status_printf_ln(s, c, ""  (use \""git %s <file>...\"" to include in what will be committed)"", how);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""%s"", ""file"", ""\\"", ""to"", ""include"", ""in"", ""what"", ""will"", ""be"", ""committed"", ""how""]]",[-18279236597590286934],5721,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,21,,"status_printf_ln(s, c, ""%s files:"", what);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""%s"", ""files"", ""what""]]",[-5094283434503357863],5720,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,12,,"status_printf_ln(s, c, ""  (commit or discard the untracked or modified content in submodules)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""commit"", ""or"", ""discard"", ""the"", ""untracked"", ""or"", ""modified"", ""content"", ""in"", ""submodules""]]",[-1430314476565444270],5719,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,10,,"status_printf_ln(s, c, ""  (use \""git checkout -- <file>...\"" to discard changes in working directory)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""checkout"", ""file"", ""\\"", ""to"", ""discard"", ""changes"", ""in"", ""working"", ""directory""]]",[-23675420591463795515],5718,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,9,,"status_printf_ln(s, c, ""  (use \""git add/rm <file>...\"" to update what will be committed)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""add/rm"", ""file"", ""\\"", ""to"", ""update"", ""what"", ""will"", ""be"", ""committed""]]",[-31705140548346565105],5717,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,7,,"status_printf_ln(s, c, ""  (use \""git add <file>...\"" to update what will be committed)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""add"", ""file"", ""\\"", ""to"", ""update"", ""what"", ""will"", ""be"", ""committed""]]",[-21525826275822310968],5716,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4772.cpp,,,data/crawl/git/old_hunk_4772.cpp,data/crawl/git/new_hunk_4772.cpp,-1,3,,"status_printf_ln(s, c, ""Changes not staged for commit:"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""Changes"", ""not"", ""staged"", ""for"", ""commit""]]",[-12820664531184289672],5715,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4771.cpp,,,data/crawl/git/old_hunk_4771.cpp,data/crawl/git/new_hunk_4771.cpp,-1,20,,"status_printf_ln(s, c, ""Changes to be committed:"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""Changes"", ""to"", ""be"", ""committed""]]",[-8814261699723226594],5714,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4771.cpp,,,data/crawl/git/old_hunk_4771.cpp,data/crawl/git/new_hunk_4771.cpp,-1,12,,"status_printf_ln(s, c, ""  (use \""git add/rm <file>...\"" as appropriate to mark resolution)"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""use"", ""\\"", ""git"", ""add/rm"", ""file"", ""\\"", ""as"", ""appropriate"", ""to"", ""mark"", ""resolution""]]",[-39866878095508630745],5713,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4771.cpp,,,data/crawl/git/old_hunk_4771.cpp,data/crawl/git/new_hunk_4771.cpp,-1,3,,"status_printf_ln(s, c, ""Unmerged paths:"");","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""c"", ""Unmerged"", ""paths""]]",[-7378383818092853513],5712,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4770.cpp,,,data/crawl/git/old_hunk_4770.cpp,data/crawl/git/new_hunk_4770.cpp,-1,13,,"status_printf(s, GIT_COLOR_NORMAL,
			""Please enter the commit message for your changes."");","[""addLog""]","[[], [""status_printf"", ""s"", ""GIT_COLOR_NORMAL"", ""Please"", ""enter"", ""the"", ""commit"", ""message"", ""for"", ""your"", ""changes""]]",[2074072243593821220],5711,0.0,2
https://github.com/git/git/commit/b926c0d10df6c5bdc8bf9a2fc1431e8edb673e4d,08 Mar 2011,"commit, status: use status_printf{,_ln,_more} helpers

wt-status code is used to provide a reminder of changes included and
not included for the commit message template opened in the operator's
text editor by ""git commit"".  Therefore each line of its output begins
with the comment character ""#"":

	# Please enter the commit message for your changes. Lines starting

Use the new status_printf{,_ln,_more} functions to take care of adding
""#"" to the beginning of such status lines automatically.  Using these
will have two advantages over the current code:

 - The obvious one is to force separation of the ""#"" from the
   translatable part of the message when git learns to translate its
   output.

 - Another advantage is that this makes it easier for us to drop ""#""
   prefix in ""git status"" output in later versions of git if we want
   to.

Explained-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_4770.cpp,,,data/crawl/git/old_hunk_4770.cpp,data/crawl/git/new_hunk_4770.cpp,12,12,"fprintf(s->fp,
			""\n""
			""# Please enter the commit message for your changes."");","fprintf(s->fp, ""\n"");","[""removeContent""]","[[""Please"", ""enter"", ""the"", ""commit"", ""message"", ""for"", ""your"", ""changes""], []]",[5125057050808654481],5710,0.0,2
https://github.com/git/git/commit/1df2d656cc442dc057e30b6fb130967e5ae19654,09 Mar 2011,"rev-list/log: factor out revision mark generation

Currently, we have identical code for generating revision marks ('<',
'>', '-') in 5 places.

Factor out the code to a single function get_revision_mark() for easier
maintenance and extensibility.

Note that the check for !!revs in graph.c (which gets removed
effectively by this patch) is superfluous.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_4765.cpp,,,data/crawl/git/old_hunk_4765.cpp,data/crawl/git/new_hunk_4765.cpp,-1,4,,"fputs(get_revision_mark(opt, commit), stdout);","[""addLog""]","[[], [""fputs"", ""get_revision_mark"", ""opt"", ""commit"", ""stdout""]]",[-6435780485514797482],5709,0.0,2
https://github.com/git/git/commit/adbbb31e0d3b4cc7845c6d23d21c00da51025208,09 Mar 2011,"revision.c: introduce --cherry-mark

for marking those commits which ""--cherry-pick"" would drop.
The marker for those commits is '=' because '-' denotes a boundary
commit already, even though 'git cherry' uses it.

Nonequivalent commits are denoted '+' unless '--left-right' is used.

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_4763.cpp,,,data/crawl/git/old_hunk_4763.cpp,data/crawl/git/new_hunk_4763.cpp,-1,5,,"die(""--cherry-mark is incompatible with --cherry-pick"");","[""addLog""]","[[], [""die"", ""cherry"", ""mark"", ""is"", ""incompatible"", ""with"", ""cherry"", ""pick""]]",[-17476857406887204754],5708,0.0,2
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4685.cpp,,,data/crawl/git/old_hunk_4685.cpp,data/crawl/git/new_hunk_4685.cpp,-1,6,,"error(_(""path '%s' does not have their version""), ce->name);","[""addLog""]","[[], [""error"", ""_"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""their"", ""version"", ""ce"", ""name""]]",[23060783746843047812],5707,0.0,2
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4685.cpp,,,data/crawl/git/old_hunk_4685.cpp,data/crawl/git/new_hunk_4685.cpp,-1,4,,"error(_(""path '%s' does not have our version""), ce->name);","[""addLog""]","[[], [""error"", ""_"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""our"", ""version"", ""ce"", ""name""]]",[18841748811600983788],5706,0.0,2
https://github.com/git/git/commit/9f97ab08c236927cdaa5b47204f97588f006c61e,10 Mar 2011,"i18n: git-checkout: our/their version message

Split up the ""does not have our/their version"" message to make it
easier to translate.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_4685.cpp,,,data/crawl/git/old_hunk_4685.cpp,data/crawl/git/new_hunk_4685.cpp,3,-1,"error(""path '%s' does not have %s version"",
		     ce->name,
		     (stage == 2) ? ""our"" : ""their"");",,"[""removeLog""]","[[""error"", ""path"", ""%s"", ""does"", ""not"", ""have"", ""%s"", ""version"", ""ce"", ""name"", ""stage"", ""2"", ""our"", ""their""], []]",[-29534638648382695343],5705,0.0,2
https://github.com/git/git/commit/2da57add287c9a5b26e348c35947d6de369e77da,10 Mar 2011,"i18n: git-clean basic messages

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_4450.cpp,,,data/crawl/git/old_hunk_4450.cpp,data/crawl/git/new_hunk_4450.cpp,24,24,"printf(""Would remove %s\n"", qname);","(_(""Would remove %s\n"");","[""addLog"", ""updateLog"", ""removeVariable""]","[[""printf"", ""qname""], [""_""]]",[-11337034120351225766],5704,0.0,2
https://github.com/git/git/commit/d3ee177e5059c81e0e73be091741f60ebfbce520,10 Mar 2011,"i18n: git-revert ""Your local changes"" message

Translate the ""Your local changes [...]"" message without using the
`me' variable, instead split up the two messages so translators can
translate the whole messages as-is.

Reported-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_4400.cpp,,,data/crawl/git/old_hunk_4400.cpp,data/crawl/git/new_hunk_4400.cpp,4,5,"die(""Your local changes would be overwritten by %s.\n""
			    ""Please, commit your changes or stash them to proceed."", me);","die(_(""Your local changes would be overwritten by revert.\n""
					  ""Please, commit your changes or stash them to proceed.""));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""me""], [""_"", ""revert""]]",[6321383577464348044],5703,0.0,2
https://github.com/git/git/commit/b1b47554ae889ca76b66349819c9b95a8be5f646,11 Mar 2011,"git-log: put space after commit mark

Currently, commit marks (left, right, boundary, cherry) are output right
before the commit sha1, which makes it difficult to copy sha1s. Sample
output for ""git log --oneline --cherry"":

=049c269 t6007: test rev-list --cherry

Change this to

= 049c269 t6007: test rev-list --cherry

which matches exactly the current output of ""git log --graph"".

Leave ""git rev-list"" output as is (no space) so that they do not break.

Adjust ""git-svn"" which uses ""git log --pretty=raw --boundary"".

Signed-off-by: Michael J Gruber <git@drmicha.warpmail.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_4390.cpp,,,data/crawl/git/old_hunk_4390.cpp,data/crawl/git/new_hunk_4390.cpp,3,-1,"fputs(get_revision_mark(opt, commit), stdout);",,"[""removeLog""]","[[""fputs"", ""get_revision_mark"", ""opt"", ""commit"", ""stdout""], []]",[6435780485514797482],5702,0.0,2
https://github.com/git/git/commit/808a95dcad957ce00dc6fde7cf7f53ca32200c34,16 Mar 2011,"diff --submodule: split into bite-sized pieces

Introduce two functions:

 - prepare_submodule_summary prepares the revision walker
   to list changes in a submodule.  That is, it:

   * finds merge bases between the commits pointed to this
     path from before (""left"") and after (""right"") the change;
   * checks whether this is a fast-forward or fast-backward;
   * prepares a revision walk to list commits in the symmetric
     difference between the commits at each endpoint.

   It returns nonzero on error.

 - print_submodule_summary runs the revision walk and saves
   the result to a strbuf in --left-right format.

The goal is just readability.  No functional change intended.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Acked-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/hunk_4379.cpp,,,data/crawl/git/old_hunk_4379.cpp,data/crawl/git/new_hunk_4379.cpp,-1,52,,"fprintf(f, ""%s"", sb.buf);","[""addLog""]","[[], [""fprintf"", ""f"", ""%s"", ""sb"", ""buf""]]",[-4857658127539415378],5701,368640.0,2
https://github.com/git/git/commit/c9d1c8ba059577e64fb2213cb0c5f3c4619c7519,22 Mar 2011,"vcs-svn: improve reporting of input errors

Catch input errors and exit early enough to print a reasonable
diagnosis based on errno.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",42,data/crawl/git/hunk_4357.cpp,,,data/crawl/git/old_hunk_4357.cpp,data/crawl/git/new_hunk_4357.cpp,-1,7,,"die(""invalid dump: unexpected end of file"");","[""addLog""]","[[], [""die"", ""invalid"", ""dump"", ""unexpected"", ""end"", ""of"", ""file""]]",[-30116358225153573565],5700,0.0,2
https://github.com/git/git/commit/c9d1c8ba059577e64fb2213cb0c5f3c4619c7519,22 Mar 2011,"vcs-svn: improve reporting of input errors

Catch input errors and exit early enough to print a reasonable
diagnosis based on errno.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: David Barr <david.barr@cordelta.com>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>",42,data/crawl/git/hunk_4357.cpp,,,data/crawl/git/old_hunk_4357.cpp,data/crawl/git/new_hunk_4357.cpp,-1,6,,"die_errno(""error reading dump file"");","[""addLog""]","[[], [""die_errno"", ""error"", ""reading"", ""dump"", ""file""]]",[-11404675231178047876],5699,0.0,2
https://github.com/git/git/commit/93e535a5b78c9861eca3e9371d1c3e5173c0ab02,24 Mar 2011,"merge: merge with the default upstream branch without argument

""git merge"" without specifying any commit is a no-op by default.

A new option merge.defaultupstream can be set to true to cause such an
invocation of the command to merge the upstream branches configured for
the current branch by using their last observed values stored in their
remote tracking branches.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",60,data/crawl/git/hunk_4355.cpp,,,data/crawl/git/old_hunk_4355.cpp,data/crawl/git/new_hunk_4355.cpp,-1,14,,"die(""No current branch."");","[""addLog""]","[[], [""die"", ""No"", ""current"", ""branch""]]",[-12278104512583616394],5698,228960.0,2
https://github.com/git/git/commit/8cc299daf29c6726acada3ffad87c3fe2098aa02,28 Mar 2011,"vcs-svn: add missing cast to printf argument

gcc -m32 correctly warns:

 vcs-svn/fast_export.c: In function 'fast_export_commit':
 vcs-svn/fast_export.c:54:2: warning: format '%llu' expects
   argument of type 'long long unsigned int', but argument 2
   has type 'unsigned int' [-Wformat]

Fix it.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_4348.cpp,,,data/crawl/git/old_hunk_4348.cpp,data/crawl/git/new_hunk_4348.cpp,3,3,"printf(""data %""PRIuMAX""\n"", log->len + strlen(gitsvnline));","printf(""data %""PRIuMAX""\n"",
		(uintmax_t) (log->len + strlen(gitsvnline)));","[""addVariable""]","[[], [""uintmax_t""]]",[-611667053313852018],5697,720.0,2
https://github.com/git/git/commit/4e10cf9a17467c08754b36683c240fbab69156de,29 Mar 2011,"Revert two ""no-done"" reverts

Last night I had to make these two emergency reverts, but now we have a
better understanding of which part of the topic was broken, let's get rid
of the revert to fix it correctly.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_4341.cpp,,,data/crawl/git/old_hunk_4341.cpp,data/crawl/git/new_hunk_4341.cpp,-1,11,,"packet_write(1, ""ACK %s\n"", last_hex);","[""addLog""]","[[], [""packet_write"", ""1"", ""ACK"", ""%s\\n"", ""last_hex""]]",[1477909362608433744],5696,10080.0,2
https://github.com/git/git/commit/4e10cf9a17467c08754b36683c240fbab69156de,29 Mar 2011,"Revert two ""no-done"" reverts

Last night I had to make these two emergency reverts, but now we have a
better understanding of which part of the topic was broken, let's get rid
of the revert to fix it correctly.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_4340.cpp,,,data/crawl/git/old_hunk_4340.cpp,data/crawl/git/new_hunk_4340.cpp,-1,5,,"fprintf(stderr, ""Server supports no-done\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Server"", ""supports"", ""no"", ""done\\n""]]",[-27772475827318430200],5695,10080.0,2
https://github.com/git/git/commit/e2770979fec968a25ac21e34f9082bc17a71a780,12 Dec 2011,"credentials: add ""cache"" helper

If you access repositories over smart-http using http
authentication, then it can be annoying to have git ask you
for your password repeatedly. We cache credentials in
memory, of course, but git is composed of many small
programs. Having to input your password for each one can be
frustrating.

This patch introduces a credential helper that will cache
passwords in memory for a short period of time.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",817,data/crawl/git/hunk_4272.cpp,,,data/crawl/git/old_hunk_4272.cpp,data/crawl/git/new_hunk_4272.cpp,-1,213,,"printf(""ok\n"");","[""addLog""]","[[], [""printf"", ""ok\\n""]]",[7225515199027138487],5694,555840.0,2
https://github.com/git/git/commit/dfefa935ae050d859022017bf9d5d23f4238a7e5,12 Dec 2011,"refs: rename ""refname"" variables

Try to consistently use the variable name ""refname"" when referring to
a string that names a reference.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",338,data/crawl/git/hunk_4268.cpp,,,data/crawl/git/old_hunk_4268.cpp,data/crawl/git/new_hunk_4268.cpp,13,13,"error(""there are still refs under '%s'"", orig_ref);","error(""there are still refs under '%s'"", orig_refname);","[""updateVariable""]","[[""orig_ref""], [""orig_refname""]]",[1968830713410656619],5693,0.0,2
https://github.com/git/git/commit/093a309136c38eca0ea2dd5da3c68b483443d113,12 Dec 2011,"revert: allow cherry-pick --continue to commit before resuming

When ""git cherry-pick ..bar"" encounters conflicts, permit the operator
to use cherry-pick --continue after resolving them as a shortcut for
""git commit && git cherry-pick --continue"" to record the resolution
and carry on with the rest of the sequence.

This improves the analogy with ""git rebase"" (in olden days --continue
was the way to preserve authorship when a rebase encountered
conflicts) and fits well with a general UI goal of making ""git cmd
--continue"" save humans the trouble of deciding what to do next.

Example: after encountering a conflict from running ""git cherry-pick
foo bar baz"":

	CONFLICT (content): Merge conflict in main.c
	error: could not apply f78a8d98c... bar!
	hint: after resolving the conflicts, mark the corrected paths
	hint: with 'git add <paths>' or 'git rm <paths>'
	hint: and commit the result with 'git commit'

We edit main.c to resolve the conflict, mark it acceptable with ""git
add main.c"", and can run ""cherry-pick --continue"" to resume the
sequence.

	$ git cherry-pick --continue
	[editor opens to confirm commit message]
	[master 78c8a8c98] bar!
	 1 files changed, 1 insertions(+), 1 deletions(-)
	[master 87ca8798c] baz!
	 1 files changed, 1 insertions(+), 1 deletions(-)

This is done for both codepaths to pick multiple commits and a single
commit.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",162,data/crawl/git/hunk_4257.cpp,,,data/crawl/git/old_hunk_4257.cpp,data/crawl/git/new_hunk_4257.cpp,8,-1,"error(_(""No %s in progress""), action_name(opts));",,"[""removeLog""]","[[""error"", ""_"", ""No"", ""%s"", ""in"", ""progress"", ""action_name"", ""opts""], []]",[7594192244807107465],5692,0.0,2
https://github.com/git/git/commit/d3c58b83aee2007ca76dc5d1242c09b6f7989c76,13 Dec 2011,"move git_getpass to its own source file

This is currently in connect.c, but really has nothing to
do with the git protocol itself. Let's make a new source
file all about prompting the user, which will make it
cleaner to refactor.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/hunk_4252.cpp,,,data/crawl/git/old_hunk_4252.cpp,data/crawl/git/new_hunk_4252.cpp,-1,37,,"die(""failed to read password from %s\n"", askpass);","[""addLog""]","[[], [""die"", ""failed"", ""to"", ""read"", ""password"", ""from"", ""%s\\n"", ""askpass""]]",[-24603565022085289105],5691,466560.0,2
https://github.com/git/git/commit/d3c58b83aee2007ca76dc5d1242c09b6f7989c76,13 Dec 2011,"move git_getpass to its own source file

This is currently in connect.c, but really has nothing to
do with the git protocol itself. Let's make a new source
file all about prompting the user, which will make it
cleaner to refactor.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",103,data/crawl/git/hunk_4252.cpp,,,data/crawl/git/old_hunk_4252.cpp,data/crawl/git/new_hunk_4252.cpp,-1,20,,"die_errno(""Could not read password"");","[""addLog""]","[[], [""die_errno"", ""Could"", ""not"", ""read"", ""password""]]",[-6579737492449875437],5690,316080.0,2
https://github.com/git/git/commit/1cb0134f3414be187cc3eb98e9740aeeb07dcb16,13 Dec 2011,"refactor git_getpass into generic prompt function

This will allow callers to specify more options (e.g.,
leaving echo on). The original git_getpass becomes a slim
wrapper around the new function.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_4248.cpp,,,data/crawl/git/old_hunk_4248.cpp,data/crawl/git/new_hunk_4248.cpp,18,-1,"die_errno(""Could not read password"");",,"[""removeLog""]","[[""die_errno"", ""Could"", ""not"", ""read"", ""password""], []]",[6579737492449875437],5689,0.0,2
https://github.com/git/git/commit/71e1b4b6bf7f274f0b3bf45e7325c04abb405b8a,13 Dec 2011,"credentials: add ""store"" helper

This is like ""cache"", except that we actually put the
credentials on disk. This can be terribly insecure, of
course, but we do what we can to protect them by filesystem
permissions, and we warn the user in the documentation.

This is not unlike using .netrc to store entries, but it's a
little more user-friendly. Instead of putting credentials in
place ahead of time, we transparently store them after
prompting the user for them once.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",248,data/crawl/git/hunk_4246.cpp,,,data/crawl/git/old_hunk_4246.cpp,data/crawl/git/new_hunk_4246.cpp,-1,44,,"printf(""password=%s\n"", c->password);","[""addLog""]","[[], [""printf"", ""password"", ""%s\\n"", ""c"", ""password""]]",[-1032207320873537695],5688,720.0,2
https://github.com/git/git/commit/71e1b4b6bf7f274f0b3bf45e7325c04abb405b8a,13 Dec 2011,"credentials: add ""store"" helper

This is like ""cache"", except that we actually put the
credentials on disk. This can be terribly insecure, of
course, but we do what we can to protect them by filesystem
permissions, and we warn the user in the documentation.

This is not unlike using .netrc to store entries, but it's a
little more user-friendly. Instead of putting credentials in
place ahead of time, we transparently store them after
prompting the user for them once.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",248,data/crawl/git/hunk_4246.cpp,,,data/crawl/git/old_hunk_4246.cpp,data/crawl/git/new_hunk_4246.cpp,-1,43,,"printf(""username=%s\n"", c->username);","[""addLog""]","[[], [""printf"", ""username"", ""%s\\n"", ""c"", ""username""]]",[2747773249262824747],5687,720.0,2
https://github.com/git/git/commit/03f94ae9f909952ed5a78917ab319a312889354b,18 Dec 2011,Update jk/maint-strbuf-missing-init to builtin/ rename,173371,data/crawl/git/hunk_4227.cpp,,,data/crawl/git/old_hunk_4227.cpp,data/crawl/git/new_hunk_4227.cpp,-1,20,,"output (i.e. ""a patch"");","[""addLog""]","[[], [""output"", ""i"", ""e"", ""a"", ""patch""]]",[-12826256700713805164],5686,544320.0,2
https://github.com/git/git/commit/ab1900a36ef7fcfe872ff9d0803f9442e356c2f0,21 Dec 2011,"Appease Sun Studio by renaming ""tmpfile""

On Solaris the system headers define the ""tmpfile"" name, which'll
cause Git compiled with Sun Studio 12 Update 1 to whine about us
redefining the name:

    ""pack-write.c"", line 76: warning: name redefined by pragma redefine_extname declared static: tmpfile     (E_PRAGMA_REDEFINE_STATIC)
    ""sha1_file.c"", line 2455: warning: name redefined by pragma redefine_extname declared static: tmpfile    (E_PRAGMA_REDEFINE_STATIC)
    ""fast-import.c"", line 858: warning: name redefined by pragma redefine_extname declared static: tmpfile   (E_PRAGMA_REDEFINE_STATIC)
    ""builtin/index-pack.c"", line 175: warning: name redefined by pragma redefine_extname declared static: tmpfile    (E_PRAGMA_REDEFINE_STATIC)

Just renaming the ""tmpfile"" variable to ""tmp_file"" in the relevant
places is the easiest way to fix this.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_4218.cpp,,,data/crawl/git/old_hunk_4218.cpp,data/crawl/git/new_hunk_4218.cpp,11,11,"error(""unable to create temporary sha1 filename %s: %s\n"", tmpfile, strerror(errno));","error(""unable to create temporary sha1 filename %s: %s\n"", tmp_file, strerror(errno));","[""updateVariable""]","[[""tmpfile""], [""tmp_file""]]",[-43576019953935582],5685,0.0,2
https://github.com/git/git/commit/8ec6c8d79567a71ca3c6f1ec73eb453d371b1ade,10 Jan 2012,"credential-cache: report more daemon connection errors

Originally, this code remained relatively silent when we
failed to connect to the cache. The idea was that it was
simply a cache, and we didn't want to bother the user with
temporary failures (the worst case is that we would simply
ask their password again).

However, if you have a configuration failure or other
problem, it is helpful for the daemon to report those
problems. Git will happily ignore the failed error code, but
the extra information to stderr can help the user diagnose
the problem.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_4201.cpp,,,data/crawl/git/old_hunk_4201.cpp,data/crawl/git/new_hunk_4201.cpp,-1,5,,"die_errno(""unable to connect to cache daemon"");","[""addLog""]","[[], [""die_errno"", ""unable"", ""to"", ""connect"", ""to"", ""cache"", ""daemon""]]",[-12635757419081567643],5684,1440.0,2
https://github.com/git/git/commit/0f544ee897ac2cc760f29d3568cc4295ca69fd1f,12 Jan 2012,"archive: re-allow HEAD:Documentation on a remote invocation

The tightening done in (ee27ca4a: archive: don't let remote clients
get unreachable commits, 2011-11-17) went too far and disallowed
HEAD:Documentation as it would try to find ""HEAD:Documentation"" as a
ref.

Only DWIM the ""HEAD"" part to see if it exists as a ref. Once we're
sure that we've been given a valid ref, we follow the normal code
path. This still disallows attempts to access commits which are not
branch tips.

Signed-off-by: Carlos Martín Nieto <cmn@elego.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_4200.cpp,,,data/crawl/git/old_hunk_4200.cpp,data/crawl/git/new_hunk_4200.cpp,4,12,"die(""no such ref: %s"", name);","die(""no such ref: %s"", refname);","[""updateVariable""]","[[""name""], [""refname""]]",[11753000941819307624],5683,22320.0,2
https://github.com/git/git/commit/77d1a520fb5b8ad8cc86228023f16a44b75c05d1,14 Mar 2012,"diff: refactor the word-diff setup from builtin_diff_cmd

Quite a chunk of builtin_diff_cmd deals with word-diff setup, defaults
and such.  This makes the function a bit hard to read, but is also
asymmetric because the corresponding teardown lives in free_diff_words_data
already.

Refactor into a new function init_diff_words_data.  For simplicity,
also shuffle around some functions it depends on.

Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_4173.cpp,,,data/crawl/git/old_hunk_4173.cpp,data/crawl/git/new_hunk_4173.cpp,-1,46,,"die (""Invalid regular expression: %s"",
			     o->word_regex);","[""addLog""]","[[], [""die"", ""Invalid"", ""regular"", ""expression"", ""%s"", ""o"", ""word_regex""]]",[-12996476237912768660],5682,829440.0,2
https://github.com/git/git/commit/06454cb9a3bd2a34299779b147e388ff0f31c9f7,10 Apr 2012,"fast-import: tighten parsing of datarefs

The syntax for the use of mark references in fast-import
demands either a SP (space) or LF (end-of-line) after
a mark reference.  Fast-import does not complain when garbage
appears after a mark reference in some cases.

Factor out parsing of mark references and complain if
errant characters are found.  Also be a little more careful
when parsing ""inline"" and SHA1s, complaining if extra
characters appear or if the form of the dataref is unrecognized.

Buggy input can cause fast-import to produce the wrong output,
silently, without error.  This makes it difficult to track
down buggy generators of fast-import streams.  An example is
seen in the last line of this commit command:

    commit refs/heads/S2
    committer Name <name@example.com> 1112912893 -0400
    data <<COMMIT
    commit message
    COMMIT
    from :1M 100644 :103 hello.c

It is missing a newline and should be:

    [...]
    from :1
    M 100644 :103 hello.c

What fast-import does is to produce a commit with the same
contents for hello.c as in refs/heads/S2^.  What the buggy
program was expecting was the contents of blob :103.  While
the resulting commit graph looked correct, the contents in
some commits were wrong.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",397,data/crawl/git/hunk_4160.cpp,,,data/crawl/git/old_hunk_4160.cpp,data/crawl/git/new_hunk_4160.cpp,14,-1,"die(""Invalid SHA1: %s"", command_buf.buf);",,"[""removeLog""]","[[""die"", ""Invalid"", ""SHA1"", ""%s"", ""command_buf"", ""buf""], []]",[7969690232472827722],5681,0.0,2
https://github.com/git/git/commit/06454cb9a3bd2a34299779b147e388ff0f31c9f7,10 Apr 2012,"fast-import: tighten parsing of datarefs

The syntax for the use of mark references in fast-import
demands either a SP (space) or LF (end-of-line) after
a mark reference.  Fast-import does not complain when garbage
appears after a mark reference in some cases.

Factor out parsing of mark references and complain if
errant characters are found.  Also be a little more careful
when parsing ""inline"" and SHA1s, complaining if extra
characters appear or if the form of the dataref is unrecognized.

Buggy input can cause fast-import to produce the wrong output,
silently, without error.  This makes it difficult to track
down buggy generators of fast-import streams.  An example is
seen in the last line of this commit command:

    commit refs/heads/S2
    committer Name <name@example.com> 1112912893 -0400
    data <<COMMIT
    commit message
    COMMIT
    from :1M 100644 :103 hello.c

It is missing a newline and should be:

    [...]
    from :1
    M 100644 :103 hello.c

What fast-import does is to produce a commit with the same
contents for hello.c as in refs/heads/S2^.  What the buggy
program was expecting was the contents of blob :103.  While
the resulting commit graph looked correct, the contents in
some commits were wrong.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",397,data/crawl/git/hunk_4155.cpp,,,data/crawl/git/old_hunk_4155.cpp,data/crawl/git/new_hunk_4155.cpp,12,10,"die(""Invalid SHA1: %s"", command_buf.buf);","die(""Invalid dataref: %s"", command_buf.buf);","[""updateContent""]","[[""SHA1""], [""dataref""]]",[9423981306199334045],5680,0.0,2
https://github.com/git/git/commit/06454cb9a3bd2a34299779b147e388ff0f31c9f7,10 Apr 2012,"fast-import: tighten parsing of datarefs

The syntax for the use of mark references in fast-import
demands either a SP (space) or LF (end-of-line) after
a mark reference.  Fast-import does not complain when garbage
appears after a mark reference in some cases.

Factor out parsing of mark references and complain if
errant characters are found.  Also be a little more careful
when parsing ""inline"" and SHA1s, complaining if extra
characters appear or if the form of the dataref is unrecognized.

Buggy input can cause fast-import to produce the wrong output,
silently, without error.  This makes it difficult to track
down buggy generators of fast-import streams.  An example is
seen in the last line of this commit command:

    commit refs/heads/S2
    committer Name <name@example.com> 1112912893 -0400
    data <<COMMIT
    commit message
    COMMIT
    from :1M 100644 :103 hello.c

It is missing a newline and should be:

    [...]
    from :1
    M 100644 :103 hello.c

What fast-import does is to produce a commit with the same
contents for hello.c as in refs/heads/S2^.  What the buggy
program was expecting was the contents of blob :103.  While
the resulting commit graph looked correct, the contents in
some commits were wrong.

Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",397,data/crawl/git/hunk_4154.cpp,,,data/crawl/git/old_hunk_4154.cpp,data/crawl/git/new_hunk_4154.cpp,-1,36,,"die(""Garbage after mark: %s"", command_buf.buf);","[""addLog""]","[[], [""die"", ""Garbage"", ""after"", ""mark"", ""%s"", ""command_buf"", ""buf""]]",[-20106326633603088091],5679,357120.0,2
https://github.com/git/git/commit/b6312c27a06f31625d915d44531d5e728ffd8d63,11 Sep 2012,"checkout: reorder option handling

checkout operates in three different modes. On top of that it tries to
be smart by guessing the branch name for switching. This results in
messy option handling code. This patch reorders it so that

 - cmd_checkout() is responsible for parsing, preparing input and
   determining mode

 - Code of each mode is in checkout_paths() and checkout_branch(),
   where sanity checks are performed

Another slight improvement is always print branch name (or commit
name) when printing errors related ot them. This helps catch the case
where an option is mistaken as branch/commit.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",189,data/crawl/git/hunk_4098.cpp,,,data/crawl/git/old_hunk_4098.cpp,data/crawl/git/new_hunk_4098.cpp,-1,21,,"die(_(""'%s' cannot be used with %s""), ""-f"", ""-m"");","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""cannot"", ""be"", ""used"", ""with"", ""%s"", ""f"", ""m""]]",[-213397857692003959],5678,0.0,2
https://github.com/git/git/commit/ff919f965d20d003e3882c70de667f41a86349ac,12 Sep 2012,"string_list: add two new functions for splitting strings

Add two new functions, string_list_split() and
string_list_split_in_place().  These split a string into a string_list
on a separator character.  The first makes copies of the substrings
(leaving the input string untouched) and the second splits the
original string in place, overwriting the separator characters with
NULs and referring to the original string's memory.

These functions are similar to the strbuf_split_*() functions except
that they work with the more powerful string_list interface.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",214,data/crawl/git/hunk_4092.cpp,,,data/crawl/git/old_hunk_4092.cpp,data/crawl/git/new_hunk_4092.cpp,-1,20,,"printf(""%d\n"", i);","[""addLog""]","[[], [""printf"", ""%d\\n"", ""i""]]",[13382357807657312348],5677,0.0,2
https://github.com/git/git/commit/17bf35a3c7b46df7131681bcc5bee5f12e1caec4,14 Sep 2012,"grep: teach --debug option to dump the parse tree

Our ""grep"" allows complex boolean expressions to be formed to match
each individual line with operators like --and, '(', ')' and --not.
Introduce the ""--debug"" option to show the parse tree to help people
who want to debug and enhance it.

Also ""log"" learns ""--grep-debug"" option to do the same.  The command
line parser to the log family is a lot more limited than the general
""git grep"" parser, but it has special handling for header matching
(e.g. ""--author""), and a parse tree is valuable when working on it.

Note that ""--all-match"" is *not* any individual node in the parse
tree.  It is an instruction to the evaluator to check all the nodes
in the top-level backbone have matched and reject a document as
non-matching otherwise.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",98,data/crawl/git/hunk_4081.cpp,,,data/crawl/git/old_hunk_4081.cpp,data/crawl/git/new_hunk_4081.cpp,-1,13,,"fprintf(stderr, ""*(*"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""*"", ""*""]]",[-13925655273693419424],5676,0.0,2
https://github.com/git/git/commit/293ab15eea341ffe8705bac99136f2e3a286db5f,29 Sep 2012,"submodule: teach rm to remove submodules unless they contain a git directory

Currently using ""git rm"" on a submodule - populated or not - fails with
this error:

	fatal: git rm: '<submodule path>': Is a directory

This made sense in the past as there was no way to remove a submodule
without possibly removing unpushed parts of the submodule's history
contained in its .git directory too, so erroring out here protected the
user from possible loss of data.

But submodules cloned with a recent git version do not contain the .git
directory anymore, they use a gitfile to point to their git directory
which is safely stored inside the superproject's .git directory. The work
tree of these submodules can safely be removed without losing history, so
let's teach git to do so.

Using rm on an unpopulated submodule now removes the empty directory from
the work tree and the gitlink from the index. If the submodule's directory
is missing from the work tree, it will still be removed from the index.

Using rm on a populated submodule using a gitfile will apply the usual
checks for work tree modification adapted to submodules (unless forced).
For a submodule that means that the HEAD is the same as recorded in the
index, no tracked files are modified and no untracked files that aren't
ignored are present in the submodules work tree (ignored files are deemed
expendable and won't stop a submodule's work tree from being removed).
That logic has to be applied in all nested submodules too.

Using rm on a submodule which has its .git directory inside the work trees
top level directory will just error out like it did before to protect the
repository, even when forced. In the future git could either provide a
message informing the user to convert the submodule to use a gitfile or
even attempt to do the conversion itself, but that is not part of this
change.

Signed-off-by: Jens Lehmann <Jens.Lehmann@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_4066.cpp,,,data/crawl/git/old_hunk_4066.cpp,data/crawl/git/new_hunk_4066.cpp,-1,46,,"error(_(""submodule '%s' (or one of its nested ""
				     ""submodules) uses a .git directory\n""
				     ""(use 'rm -rf' if you really want to remove ""
				     ""it including all of its history)""), name);","[""addLog""]","[[], [""error"", ""_"", ""submodule"", ""%s"", ""or"", ""one"", ""of"", ""its"", ""nested"", ""submodules"", ""uses"", ""a"", ""git"", ""directory\\n"", ""use"", ""rm"", ""rf"", ""if"", ""you"", ""really"", ""want"", ""to"", ""remove"", ""it"", ""including"", ""all"", ""of"", ""its"", ""history"", ""name""]]",[-27219779680860094364],5675,0.0,2
https://github.com/git/git/commit/271fd1fc2a25ebfc1782aab0d39b613555d22315,07 Oct 2012,"remote-svn, vcs-svn: Enable fetching to private refs

The reference to update by the fast-import stream is hard-coded.  When
fetching from a remote the remote-helper shall update refs in a
private namespace, i.e. a private subdir of refs/.  This namespace is
defined by the 'refspec' capability, that the remote-helper advertises
as a reply to the 'capabilities' command.

Extend svndump and fast-export to allow passing the target ref.
Update svn-fe to be compatible.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_4052.cpp,,,data/crawl/git/old_hunk_4052.cpp,data/crawl/git/new_hunk_4052.cpp,3,3,svndump_read((argc > 1) ? argv[1] : NULL);,"svndump_read((argc > 1) ? argv[1] : NULL, ""refs/heads/master"");","[""addContent""]","[[], [""refs/heads/master""]]",[4646381863718511198],5674,0.0,2
https://github.com/git/git/commit/8e43a1d010e22a0e432de440b08cc4389d8370f9,07 Oct 2012,"remote-svn: add incremental import

Search for a note attached to the ref to update and read it's
'Revision-number:'-line. Start import from the next svn revision.

If there is no next revision in the svn repo, svnrdump terminates with
a message on stderr an non-zero return value. This looks a little
weird, but there is no other way to know whether there is a new
revision in the svn repo.

On the start of an incremental import, the parent of the first commit
in the fast-import stream is set to the branch name to update. All
following commits specify their parent by a mark number. Previous mark
files are currently not reused.

Signed-off-by: Florian Achleitner <florian.achleitner.2.6.31@gmail.com>
Acked-by: David Michael Barr <b@rr-dav.id.au>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",112,data/crawl/git/hunk_4039.cpp,,,data/crawl/git/old_hunk_4039.cpp,data/crawl/git/new_hunk_4039.cpp,3,3,"svndump_read((argc > 1) ? argv[1] : NULL, ""refs/heads/master"");","svndump_read((argc > 1) ? argv[1] : NULL, ""refs/heads/master"",
			""refs/notes/svn/revs"");","[""addContent""]","[[], [""refs/notes/svn/revs""]]",[1865546392744505728],5673,0.0,2
https://github.com/git/git/commit/18fa13d0b34b6243d3679ea78325ee33ee4d0989,26 Nov 2012,"git p4: catch p4 describe errors

Group the two calls to ""p4 describe"" into a new helper function,
and try to validate the p4 results.  The current behavior when p4
describe fails is to die with a python backtrace.  The new behavior
will print the full response.

This does not solve any particular problem, but adds more
checking in hopes of narrowing down odd behavior seen on
at least two occasions.

Based-on-patch-by: Matt Arsenault <arsenm2@gmail.com>
Reported-by: Arthur <a.foulon@amesys.fr>
Signed-off-by: Pete Wyckoff <pw@padd.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_4013.cpp,,,data/crawl/git/old_hunk_4013.cpp,data/crawl/git/new_hunk_4013.cpp,-1,19,,str(d);,"[""addLog""]","[[], [""str"", ""d""]]",[-369175409207752229],5672,0.0,2
https://github.com/git/git/commit/a469a1019352b8efc4bd7003b0bd59eb60fc428c,15 Dec 2012,"silence some -Wuninitialized false positives

There are a few error functions that simply wrap error() and
provide a standardized message text. Like error(), they
always return -1; knowing that can help the compiler silence
some false positive -Wuninitialized warnings.

One strategy would be to just declare these as inline in the
header file so that the compiler can see that they always
return -1. However, gcc does not always inline them (e.g.,
it will not inline opterror, even with -O3), which renders
our change pointless.

Instead, let's follow the same route we did with error() in
the last patch, and define a macro that makes the constant
return value obvious to the compiler.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_3986.cpp,,,data/crawl/git/old_hunk_3986.cpp,data/crawl/git/new_hunk_3986.cpp,-1,10,,"error(""option `%s' %s"", opt->long_name, reason);","[""addLog""]","[[], [""error"", ""option"", ""%s"", ""%s"", ""opt"", ""long_name"", ""reason""]]",[5760202870040990619],5671,1348560.0,2
https://github.com/git/git/commit/a469a1019352b8efc4bd7003b0bd59eb60fc428c,15 Dec 2012,"silence some -Wuninitialized false positives

There are a few error functions that simply wrap error() and
provide a standardized message text. Like error(), they
always return -1; knowing that can help the compiler silence
some false positive -Wuninitialized warnings.

One strategy would be to just declare these as inline in the
header file so that the compiler can see that they always
return -1. However, gcc does not always inline them (e.g.,
it will not inline opterror, even with -O3), which renders
our change pointless.

Instead, let's follow the same route we did with error() in
the last patch, and define a macro that makes the constant
return value obvious to the compiler.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_3986.cpp,,,data/crawl/git/old_hunk_3986.cpp,data/crawl/git/new_hunk_3986.cpp,-1,9,,"error(""option `no-%s' %s"", opt->long_name, reason);","[""addLog""]","[[], [""error"", ""option"", ""no"", ""%s"", ""%s"", ""opt"", ""long_name"", ""reason""]]",[5774282954631117634],5670,1348560.0,2
https://github.com/git/git/commit/a469a1019352b8efc4bd7003b0bd59eb60fc428c,15 Dec 2012,"silence some -Wuninitialized false positives

There are a few error functions that simply wrap error() and
provide a standardized message text. Like error(), they
always return -1; knowing that can help the compiler silence
some false positive -Wuninitialized warnings.

One strategy would be to just declare these as inline in the
header file so that the compiler can see that they always
return -1. However, gcc does not always inline them (e.g.,
it will not inline opterror, even with -O3), which renders
our change pointless.

Instead, let's follow the same route we did with error() in
the last patch, and define a macro that makes the constant
return value obvious to the compiler.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_3986.cpp,,,data/crawl/git/old_hunk_3986.cpp,data/crawl/git/new_hunk_3986.cpp,-1,7,,"error(""switch `%c' %s"", opt->short_name, reason);","[""addLog""]","[[], [""error"", ""switch"", ""%c"", ""%s"", ""opt"", ""short_name"", ""reason""]]",[9131850880947186541],5669,1348560.0,2
https://github.com/git/git/commit/368aa52952deb631b38a89837c4abbb00c5261c1,06 Jan 2013,"add git-check-ignore sub-command

This works in a similar manner to git-check-attr.

Thanks to Jeff King and Junio C Hamano for the idea:
http://thread.gmane.org/gmane.comp.version-control.git/108671/focus=108815

Signed-off-by: Adam Spiers <git@adamspiers.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",908,data/crawl/git/hunk_3971.cpp,,,data/crawl/git/old_hunk_3971.cpp,data/crawl/git/new_hunk_3971.cpp,-1,132,,"maybe_flush_or_die(stdout, ""attribute to stdout"");","[""addLog""]","[[], [""maybe_flush_or_die"", ""stdout"", ""attribute"", ""to"", ""stdout""]]",[-31864502383443306560],5668,1113840.0,2
https://github.com/git/git/commit/f538a91e3c58bb0882be895eec099e51a74dfac4,14 Jan 2013,"git-clean: Display more accurate delete messages

(1) Only print out the names of the files and directories that got
    actually deleted. Also do not mention that we are not removing
    directories when the user did not ask us to do so with '-d'.
(2) Show ignore message for skipped untracked git repositories.

Consider the following repo layout:

  test.git/
    |-- tracked_dir/
    |     |-- some_tracked_file
    |     |-- some_untracked_file
    |-- tracked_file
    |-- untracked_file
    |-- untracked_foo/
    |     |-- bar/
    |     |     |-- bar.txt
    |     |-- emptydir/
    |     |-- frotz.git/
    |           |-- frotz.tx
    |-- untracked_some.git/
          |-- some.txt

Suppose the user issues 'git clean -fd' from the test.git directory.

When -d option is used and untracked directory 'foo' contains a
subdirectory 'frotz.git' that is managed by a different git repository
therefore it will not be removed.

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Removing untracked_foo/
  Removing untracked_some.git/

The message displayed to the user is slightly misleading. The foo/
directory has not been removed because of foo/frotz.git still exists.
On the other hand the subdirectories 'bar' and 'emptydir' have been
deleted but they're not mentioned anywhere. Also, untracked_some.git
has not been removed either.

This behaviour is the result of the way the deletion of untracked
directories are reported. In the current implementation they are
deleted recursively but only the name of the top most directory is
printed out. The calling function does not know about any
subdirectories that could not be removed during the recursion.

Improve the way the deleted directories are reported back to
the user:
  (1) Create a recursive delete function 'remove_dirs' in builtin/clean.c
      to run in both dry_run and delete modes with the delete logic as
      follows:
        (a) Check if the current directory to be deleted is an untracked
            git repository. If it is and --force --force option is not set
            do not touch this directory, print ignore message, set dir_gone
            flag to false for the caller and return.
        (b) Otherwise for each item in current directory:
              (i)   If current directory cannot be accessed, print warning,
                    set dir_gone flag to false and return.
              (ii)  If the item is a subdirectory recurse into it,
                    check for the returned value of the dir_gone flag.
                    If the subdirectory is gone, add the name of the deleted
                    directory to a list of successfully removed items 'dels'.
                    Else set the dir_gone flag as the current directory
                    cannot be removed because we have at least one subdirectory
                    hanging around.
              (iii) If it is a file try to remove it. If success add the
                    file name to the 'dels' list, else print error and set
                    dir_gone flag to false.
        (c) After we finished deleting all items in the current directory and
            the dir_gone flag is still true, remove the directory itself.
            If failed set the dir_gone flag to false.

        (d) If the current directory cannot be deleted because the dir_gone flag
            has been set to false, print out all the successfully deleted items
            for this directory from the 'dels' list.
        (e) We're done with the current directory, return.

  (2) Modify the cmd_clean() function to:
        (a) call the recursive delete function 'remove_dirs()' for each
            topmost directory it wants to remove
        (b) check for the returned value of dir_gone flag. If it's true
            print the name of the directory as being removed.

Consider the output of the improved version:

  $ git clean -fd
  Removing tracked_dir/some_untracked_file
  Removing untracked_file
  Skipping repository untracked_foo/frotz.git
  Removing untracked_foo/bar
  Removing untracked_foo/emptydir
  Skipping repository untracked_some.git/

Now it displays only the file and directory names that got actually
deleted and shows the name of the untracked git repositories it ignored.

Reported-by: Soren Brinkmann <soren.brinkmann@xilinx.com>

Signed-off-by: Zoltan Klinger <zoltan.klinger@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",154,data/crawl/git/hunk_3958.cpp,,,data/crawl/git/old_hunk_3958.cpp,data/crawl/git/new_hunk_3958.cpp,6,-1,"printf(_(""Would remove %s\n""), qname);",,"[""removeLog""]","[[""printf"", ""_"", ""Would"", ""remove"", ""%s\\n"", ""qname""], []]",[-6178162584540481448],5667,0.0,2
https://github.com/git/git/commit/01a19dfc1ac53011deef492b21e52bf7840cef49,15 Jan 2013,"reset.c: move lock, write and commit out of update_index_refresh()

In preparation for the/a following patch, move the locking, writing
and committing of the index file out of update_index_refresh(). The
code duplication caused will soon be taken care of. What remains of
update_index_refresh() is just one line, but it is still called from
two places, so let's leave it for now.

In the process, we expose and fix the minor UI bug that makes us print
""Could not refresh index"" when we fail to write the index file when
invoked with a pathspec. Copy the error message from the pathspec-less
codepath (""Could not write new index file."").

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_3951.cpp,,,data/crawl/git/old_hunk_3951.cpp,data/crawl/git/new_hunk_3951.cpp,-1,10,,"error(""Could not refresh index"");","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""refresh"", ""index""]]",[16936978621706528200],5666,1365840.0,2
https://github.com/git/git/commit/bc41bf422e15209860bfc6c898dbd3cd89d5da34,15 Jan 2013,"reset [--mixed]: only write index file once

When doing a mixed reset without paths, the index is locked, read,
reset, and written back as part of the actual reset operation (in
reset_index()). Then, when showing the list of worktree modifications,
we lock the index again, refresh it, and write it.

Change this so we only write the index once, making ""git reset"" a
little faster. It does mean that the index lock will be held a little
longer, but the difference is small compared to the time spent
refreshing the index.

There is one minor functional difference: We used to say ""Could not
write new index file."" if the first write failed, and ""Could not
refresh index"" if the second write failed. Now, we will only use the
first message.

This speeds up ""git reset"" a little on the linux-2.6 repo (best of
five, warm cache):

        Before      After
real    0m0.239s    0m0.214s
user    0m0.160s    0m0.130s
sys     0m0.070s    0m0.080s

Signed-off-by: Martin von Zweigbergk <martinvonz@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_3948.cpp,,,data/crawl/git/old_hunk_3948.cpp,data/crawl/git/new_hunk_3948.cpp,10,-1,"error(""Could not refresh index"");",,"[""removeLog""]","[[""error"", ""Could"", ""not"", ""refresh"", ""index""], []]",[-16936978621706528200],5665,0.0,2
https://github.com/git/git/commit/eff80a9fd990de3605063050dae32f969ef18ba8,16 Jan 2013,"Allow custom ""comment char""

Some users do want to write a line that begin with a pound sign, #,
in their commit log message.  Many tracking system recognise
a token of #<bugid> form, for example.

The support we offer these use cases is not very friendly to the end
users.  They have a choice between

 - Don't do it.  Avoid such a line by rewrapping or indenting; and

 - Use --cleanup=whitespace but remove all the hint lines we add.

Give them a way to set a custom comment char, e.g.

    $ git -c core.commentchar=""%"" commit

so that they do not have to do either of the two workarounds.

[jc: although I started the topic, all the tests and documentation
updates, many of the call sites of the new strbuf_add_commented_*()
functions, and the change to git-submodule.sh scripted Porcelain are
from Ralf.]

Signed-off-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",362,data/crawl/git/hunk_3936.cpp,,,data/crawl/git/old_hunk_3936.cpp,data/crawl/git/new_hunk_3936.cpp,1,1,"status_printf(s, GIT_COLOR_NORMAL,
				_(""Please enter the commit message for your changes.""
				"" Lines starting\nwith '#' will be ignored, and an empty""
				"" message aborts the commit.\n""));","status_printf(s, GIT_COLOR_NORMAL,
				_(""Please enter the commit message for your changes.""
				  "" Lines starting\nwith '%c' will be ignored, and an empty""
				  "" message aborts the commit.\n""), comment_line_char);","[""updateContent"", ""addVariable""]","[[], [""%c"", ""comment_line_char""]]",[3571223978602947056],5664,0.0,2
https://github.com/git/git/commit/cbbe50db7691cd9d7d261ebc5c5ffec55f93127d,18 Jan 2013,"upload-pack: share more code

We mark the objects pointed at our refs with ""OUR_REF"" flag in two
functions (mark_our_ref() and send_ref()), but we can just use the
former as a helper for the latter.

Update the way mark_our_ref() prepares in-core object to use
lookup_unknown_object() to delay reading the actual object data,
just like we did in 435c833 (upload-pack: use peel_ref for ref
advertisements, 2012-10-04).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_3935.cpp,,,data/crawl/git/old_hunk_3935.cpp,data/crawl/git/new_hunk_3935.cpp,16,-1,"die(""git upload-pack: cannot find object %s:"", sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""git"", ""upload"", ""pack"", ""cannot"", ""find"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""], []]",[9786712846287803548],5663,75600.0,2
https://github.com/git/git/commit/cbbe50db7691cd9d7d261ebc5c5ffec55f93127d,18 Jan 2013,"upload-pack: share more code

We mark the objects pointed at our refs with ""OUR_REF"" flag in two
functions (mark_our_ref() and send_ref()), but we can just use the
former as a helper for the latter.

Update the way mark_our_ref() prepares in-core object to use
lookup_unknown_object() to delay reading the actual object data,
just like we did in 435c833 (upload-pack: use peel_ref for ref
advertisements, 2012-10-04).

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_3934.cpp,,,data/crawl/git/old_hunk_3934.cpp,data/crawl/git/new_hunk_3934.cpp,-1,7,,"die(""git upload-pack: cannot find object %s:"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""git"", ""upload"", ""pack"", ""cannot"", ""find"", ""object"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-9786712846287803548],5662,842400.0,2
https://github.com/git/git/commit/776670519823b5c49ff4107dc9f77706fa37bb76,03 Feb 2013,"combine-diff: lift 32-way limit of combined diff

The ""raw"" format of combine-diff output is supposed to have as many
colons as there are parents at the beginning, then blob modes for
these parents, and then object names for these parents.

We weren't however prepared to handle a more than 32-way merge and
did not show the correct number of colons in such a case.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_3909.cpp,,,data/crawl/git/old_hunk_3909.cpp,data/crawl/git/new_hunk_3909.cpp,10,9,"printf(""%s%06o"", prefix, p->parent[i].mode);","printf(""%06o "", p->parent[i].mode);","[""removeVariable"", ""updateContent""]","[[""%s%06o"", ""prefix""], [""%06o""]]",[6909178821601311588],5661,0.0,2
https://github.com/git/git/commit/0722c805d616eb644a868a995b891470f9e5e30d,05 Feb 2013,"status: show the branch name if possible in in-progress info

The typical use-case is starting a rebase, do something else, come
back the day after, run ""git status"" or make a new commit and wonder
what in the world's going on. Which branch is being rebased is
probably the most useful tidbit to help, but the target may help
too.

Ideally, I would have loved to see ""rebasing master on
origin/master"", but the target ref name is not stored during rebase,
so this patch writes ""rebasing master on a78c8c98b"" as a
half-measure to remind future users of that potential improvement.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/hunk_3906.cpp,,,data/crawl/git/old_hunk_3906.cpp,data/crawl/git/new_hunk_3906.cpp,-1,4,,"status_printf_ln(s, color,
					 _(""You are currently rebasing branch '%s' on '%s'.""),
					 state->branch,
					 state->onto);","[""addLog""]","[[], [""status_printf_ln"", ""s"", ""color"", ""_"", ""You"", ""are"", ""currently"", ""rebasing"", ""branch"", ""%s"", ""on"", ""%s"", ""state"", ""branch"", ""state"", ""onto""]]",[-7894644087246213499],5660,0.0,2
https://github.com/git/git/commit/30997bb8f11bd6e63a582c3b4e029ca47868ad8d,12 Feb 2013,"diff.c: use diff_line_prefix() where applicable

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",115,data/crawl/git/hunk_3886.cpp,,,data/crawl/git/old_hunk_3886.cpp,data/crawl/git/new_hunk_3886.cpp,7,3,"fprintf(options->file, ""%s"", msg->buf);","fprintf(options->file, ""%s"", diff_line_prefix(options));","[""removeVariable"", ""addVariable""]","[[""msg"", ""buf""], [""diff_line_prefix"", ""options""]]",[-974902944878204782],5659,0.0,2
https://github.com/git/git/commit/41ee2ad6cbebab0429248a14ec4e02afddd60dbe,12 Feb 2013,"combine-diff.c: teach combined diffs about line prefix

When running ""git log --graph --cc -p"" the diff output for merges is not
indented by the graph structure, unlike the diffs of non-merge commits
(added in commit 7be5761 - diff.c: Output the text graph padding before
each diff line).

Fix this by teaching the combined diff code to output diff_line_prefix()
before each line.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_3882.cpp,,,data/crawl/git/old_hunk_3882.cpp,data/crawl/git/new_hunk_3882.cpp,-1,5,,"printf(""%s%c"", diff_line_prefix(opt),
				       opt->line_termination);","[""addLog""]","[[], [""printf"", ""%s%c"", ""diff_line_prefix"", ""opt"", ""opt"", ""line_termination""]]",[33329158487564255481],5658,0.0,2
https://github.com/git/git/commit/b3600c36286517cda38df976946557ce3e87bd82,20 Feb 2013,Sync with v1.8.1.4,81,data/crawl/git/hunk_3867.cpp,,,data/crawl/git/old_hunk_3867.cpp,data/crawl/git/new_hunk_3867.cpp,-1,7,,"error(""unable to get peer certificate."");","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""get"", ""peer"", ""certificate""]]",[11628568779144910496],5657,0.0,2
https://github.com/git/git/commit/b3600c36286517cda38df976946557ce3e87bd82,20 Feb 2013,Sync with v1.8.1.4,81,data/crawl/git/hunk_3866.cpp,,,data/crawl/git/old_hunk_3866.cpp,data/crawl/git/new_hunk_3866.cpp,-1,55,,"error(""certificate owner '%s' does not match hostname '%s'"",
		     cname, hostname);","[""addLog""]","[[], [""error"", ""certificate"", ""owner"", ""%s"", ""does"", ""not"", ""match"", ""hostname"", ""%s"", ""cname"", ""hostname""]]",[38268892140721167363],5656,0.0,2
https://github.com/git/git/commit/b3600c36286517cda38df976946557ce3e87bd82,20 Feb 2013,Sync with v1.8.1.4,81,data/crawl/git/hunk_3866.cpp,,,data/crawl/git/old_hunk_3866.cpp,data/crawl/git/new_hunk_3866.cpp,-1,52,,"error(""cannot get certificate common name"");","[""addLog""]","[[], [""error"", ""cannot"", ""get"", ""certificate"", ""common"", ""name""]]",[384858263041795601],5655,0.0,2
https://github.com/git/git/commit/b3600c36286517cda38df976946557ce3e87bd82,20 Feb 2013,Sync with v1.8.1.4,81,data/crawl/git/hunk_3866.cpp,,,data/crawl/git/old_hunk_3866.cpp,data/crawl/git/new_hunk_3866.cpp,-1,50,,"error(""cannot get certificate subject"");","[""addLog""]","[[], [""error"", ""cannot"", ""get"", ""certificate"", ""subject""]]",[-313266329507501098],5654,0.0,2
https://github.com/git/git/commit/06d67b876642822828596b0b38cda2f61d438335,01 Mar 2013,Sync with 1.8.1.5,22,data/crawl/git/hunk_3830.cpp,,,data/crawl/git/old_hunk_3830.cpp,data/crawl/git/new_hunk_3830.cpp,4,4,"die(_(""Negative patterns are forbidden in git attributes\n""
			      ""Use '\\!' for literal leading exclamation.""));","warning(_(""Negative patterns are ignored in git attributes\n""
				  ""Use '\\!' for literal leading exclamation.""));","[""updateLog"", ""updateContent""]","[[""die"", ""forbidden""], [""warning"", ""ignored""]]",[-15985838761960551519],5653,0.0,2
https://github.com/git/git/commit/98f85ff4b65b565bae0592ded494d67045cbd3bf,08 Mar 2013,"reflog: add for_each_reflog_ent_reverse() API

""git checkout -"" is a short-hand for ""git checkout @{-1}"" and the
""@{nth}"" notation for a negative number is to find nth previous
checkout in the reflog of the HEAD to determine the name of the
branch the user was on.  We would want to find the nth most recent
reflog entry that matches ""checkout: moving from X to Y"" for this.

Unfortunately, reflog is implemented as an append-only file, and the
API to iterate over its entries, for_each_reflog_ent(), reads the
file in order, giving the entries from the oldest to newer.  For the
purpose of finding nth most recent one, this API forces us to record
the last n entries in a rotating buffer and give the result out only
after we read everything.  To optimize for a common case of finding
the nth most recent one for a small value of n, we also have a side
API for_each_recent_reflog_ent() that starts reading near the end of
the file, but it still has to read the entries in the ""wrong"" order.
The implementation of understanding @{-1} uses this interface.

This all becomes unnecessary if we add an API to let us iterate over
reflog entries in the reverse order, from the newest to older.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",152,data/crawl/git/hunk_3827.cpp,,,data/crawl/git/old_hunk_3827.cpp,data/crawl/git/new_hunk_3827.cpp,-1,27,,"error(""cannot seek back reflog for %s: %s"",
			     refname, strerror(errno));","[""addLog""]","[[], [""error"", ""cannot"", ""seek"", ""back"", ""reflog"", ""for"", ""%s"", ""%s"", ""refname"", ""strerror"", ""errno""]]",[26706076612612143981],5652,0.0,2
https://github.com/git/git/commit/b2981d06226ab0fdabf9110c3be7104110b307ae,17 Mar 2013,"sha1_name: pass object name length to diagnose_invalid_sha1_path()

The only caller of diagnose_invalid_sha1_path() extracts a substring from
an object name by creating a NUL-terminated copy of the interesting part.
Add a length parameter to the function and thus avoid the need for an
allocation, thereby simplifying the code.

Signed-off-by: Rene Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_3818.cpp,,,data/crawl/git/old_hunk_3818.cpp,data/crawl/git/new_hunk_3818.cpp,3,3,"die(""Path '%s' exists on disk, but not in '%s'."",
		    filename, object_name);","die(""Path '%s' exists on disk, but not in '%.*s'."",
		    filename, object_name_len, object_name);","[""updateContent"", ""addVariable""]","[[""%s""], [""%"", ""*s"", ""object_name_len""]]",[-1826286895730317421],5651,0.0,2
https://github.com/git/git/commit/12da1d1f6ffcd546a892a33302bb34fd37169022,28 Mar 2013,"Implement line-history search (git log -L)

This is a rewrite of much of Bo's work, mainly in an effort to split
it into smaller, easier to understand routines.

The algorithm is built around the struct range_set, which encodes a
series of line ranges as intervals [a,b).  This is used in two
contexts:

* A set of lines we are tracking (which will change as we dig through
  history).
* To encode diffs, as pairs of ranges.

The main routine is range_set_map_across_diff().  It processes the
diff between a commit C and some parent P.  It determines which diff
hunks are relevant to the ranges tracked in C, and computes the new
ranges for P.

The algorithm is then simply to process history in topological order
from newest to oldest, computing ranges and (partial) diffs.  At
branch points, we need to merge the ranges we are watching.  We will
find that many commits do not affect the chosen ranges, and mark them
TREESAME (in addition to those already filtered by pathspec limiting).
Another pass of history simplification then gets rid of such commits.

This is wired as an extra filtering pass in the log machinery.  This
currently only reduces code duplication, but should allow for other
simplifications and options to be used.

Finally, we hook a diff printer into the output chain.  Ideally we
would wire directly into the diff logic, to optionally use features
like word diff.  However, that will require some major reworking of
the diff chain, so we completely replace the output with our own diff
for now.

As this was a GSoC project, and has quite some history by now, many
people have helped.  In no particular order, thanks go to

  Jakub Narebski <jnareb@gmail.com>
  Jens Lehmann <Jens.Lehmann@web.de>
  Jonathan Nieder <jrnieder@gmail.com>
  Junio C Hamano <gitster@pobox.com>
  Ramsay Jones <ramsay@ramsay1.demon.co.uk>
  Will Palmer <wmpalmer@gmail.com>

Apologies to everyone I forgot.

Signed-off-by: Bo Yang <struggleyb.nku@gmail.com>
Signed-off-by: Thomas Rast <trast@student.ethz.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2158,data/crawl/git/hunk_3791.cpp,,,data/crawl/git/old_hunk_3791.cpp,data/crawl/git/new_hunk_3791.cpp,-1,23,,f(15);,"[""addLog""]","[[], [""f"", ""15""]]",[6272050737095883],5650,0.0,2
https://github.com/git/git/commit/d1520c4b1a6105356c7a2def6b90239057270598,01 Apr 2013,"branch: give better message when no names specified for rename

Signed-off-by: Jonathon Mah <me@JonathonMah.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_3779.cpp,,,data/crawl/git/old_hunk_3779.cpp,data/crawl/git/new_hunk_3779.cpp,-1,4,,"die(_(""branch name required""));","[""addLog""]","[[], [""die"", ""_"", ""branch"", ""name"", ""required""]]",[-18182268332187100851],5649,43920.0,2
https://github.com/git/git/commit/e2b6aa5f1b85d5f49f0cf280162cf216e55e1eba,02 Apr 2013,"branch: factor out ""upstream is not a branch"" error messages

This message is duplicated, and is quite long. Let's factor
it out, which avoids the repetition and the long lines. It
will also make future patches easier as we tweak the
message.

While we're at it, let's also mark it for translation.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_3775.cpp,,,data/crawl/git/old_hunk_3775.cpp,data/crawl/git/new_hunk_3775.cpp,3,3,"die(""Cannot setup tracking information; starting point is not a branch."");",die(_(upstream_not_branch));,"[""removeContent"", ""addVariable""]","[[""Cannot"", ""setup"", ""tracking"", ""information"", ""starting"", ""point"", ""is"", ""not"", ""a"", ""branch""], [""_"", ""upstream_not_branch""]]",[17583444800088908985],5648,0.0,2
https://github.com/git/git/commit/92e0d916326de103e463f9ffcfcd99ec1f3a9dc0,03 Apr 2013,"Sync with 1.8.1 maintenance track

* maint-1.8.1:
  Start preparing for 1.8.1.6
  git-tag(1): we tag HEAD by default
  Fix revision walk for commits with the same dates
  t2003: work around path mangling issue on Windows
  pack-refs: add fully-peeled trait
  pack-refs: write peeled entry for non-tags
  use parse_object_or_die instead of die(""bad object"")
  avoid segfaults on parse_object failure
  entry: fix filter lookup
  t2003: modernize style
  name-hash.c: fix endless loop with core.ignorecase=true",626,data/crawl/git/hunk_3768.cpp,,,data/crawl/git/old_hunk_3768.cpp,data/crawl/git/new_hunk_3768.cpp,7,-1,"die(""bad object ref: %s:%s"", path, sha1_to_hex(sha1));",,"[""removeLog""]","[[""die"", ""bad"", ""object"", ""ref"", ""%s"", ""%s"", ""path"", ""sha1_to_hex"", ""sha1""], []]",[5799639003627607990],5647,12240.0,2
https://github.com/git/git/commit/92e0d916326de103e463f9ffcfcd99ec1f3a9dc0,03 Apr 2013,"Sync with 1.8.1 maintenance track

* maint-1.8.1:
  Start preparing for 1.8.1.6
  git-tag(1): we tag HEAD by default
  Fix revision walk for commits with the same dates
  t2003: work around path mangling issue on Windows
  pack-refs: add fully-peeled trait
  pack-refs: write peeled entry for non-tags
  use parse_object_or_die instead of die(""bad object"")
  avoid segfaults on parse_object failure
  entry: fix filter lookup
  t2003: modernize style
  name-hash.c: fix endless loop with core.ignorecase=true",626,data/crawl/git/hunk_3767.cpp,,,data/crawl/git/old_hunk_3767.cpp,data/crawl/git/new_hunk_3767.cpp,3,3,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled \n"");","fprintf(cbdata.refs_file, ""# pack-refs with: peeled fully-peeled \n"");","[""updateContent""]","[[], [""fully"", ""peeled""]]",[-7231319723177387212],5646,11520.0,2
https://github.com/git/git/commit/92e0d916326de103e463f9ffcfcd99ec1f3a9dc0,03 Apr 2013,"Sync with 1.8.1 maintenance track

* maint-1.8.1:
  Start preparing for 1.8.1.6
  git-tag(1): we tag HEAD by default
  Fix revision walk for commits with the same dates
  t2003: work around path mangling issue on Windows
  pack-refs: add fully-peeled trait
  pack-refs: write peeled entry for non-tags
  use parse_object_or_die instead of die(""bad object"")
  avoid segfaults on parse_object failure
  entry: fix filter lookup
  t2003: modernize style
  name-hash.c: fix endless loop with core.ignorecase=true",626,data/crawl/git/hunk_3764.cpp,,,data/crawl/git/old_hunk_3764.cpp,data/crawl/git/new_hunk_3764.cpp,-1,10,,"die(_(""unable to parse object: %s""), name ? name : sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""_"", ""unable"", ""to"", ""parse"", ""object"", ""%s"", ""name"", ""name"", ""sha1_to_hex"", ""sha1""]]",[-17878744095904492543],5645,12240.0,2
https://github.com/git/git/commit/92e0d916326de103e463f9ffcfcd99ec1f3a9dc0,03 Apr 2013,"Sync with 1.8.1 maintenance track

* maint-1.8.1:
  Start preparing for 1.8.1.6
  git-tag(1): we tag HEAD by default
  Fix revision walk for commits with the same dates
  t2003: work around path mangling issue on Windows
  pack-refs: add fully-peeled trait
  pack-refs: write peeled entry for non-tags
  use parse_object_or_die instead of die(""bad object"")
  avoid segfaults on parse_object failure
  entry: fix filter lookup
  t2003: modernize style
  name-hash.c: fix endless loop with core.ignorecase=true",626,data/crawl/git/hunk_3763.cpp,,,data/crawl/git/old_hunk_3763.cpp,data/crawl/git/new_hunk_3763.cpp,5,-1,"die(""bad object: %s"", name);",,"[""removeLog""]","[[""die"", ""bad"", ""object"", ""%s"", ""name""], []]",[10844179070069672599],5644,12240.0,2
https://github.com/git/git/commit/92e0d916326de103e463f9ffcfcd99ec1f3a9dc0,03 Apr 2013,"Sync with 1.8.1 maintenance track

* maint-1.8.1:
  Start preparing for 1.8.1.6
  git-tag(1): we tag HEAD by default
  Fix revision walk for commits with the same dates
  t2003: work around path mangling issue on Windows
  pack-refs: add fully-peeled trait
  pack-refs: write peeled entry for non-tags
  use parse_object_or_die instead of die(""bad object"")
  avoid segfaults on parse_object failure
  entry: fix filter lookup
  t2003: modernize style
  name-hash.c: fix endless loop with core.ignorecase=true",626,data/crawl/git/hunk_3762.cpp,,,data/crawl/git/old_hunk_3762.cpp,data/crawl/git/new_hunk_3762.cpp,5,-1,"die(_(""bad object %s""), arg);",,"[""removeLog""]","[[""die"", ""_"", ""bad"", ""object"", ""%s"", ""arg""], []]",[5224520841559839111],5643,12240.0,2
https://github.com/git/git/commit/0f33a0677d6d93b3f6d8fb7d1df62f30eb7b73a9,05 Apr 2013,"submodule: print graph output next to submodule log

When running ""git log -p --submodule=log"", the submodule log is not
indented by the graph output, although all other lines are.  Fix this by
prepending the current line prefix to each line of the submodule log.

Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_3759.cpp,,,data/crawl/git/old_hunk_3759.cpp,data/crawl/git/new_hunk_3759.cpp,3,3,"fprintf(f, ""Submodule %s contains untracked content\n"", path);","fprintf(f, ""%sSubmodule %s contains untracked content\n"",
			line_prefix, path);","[""updateContent"", ""addVariable""]","[[""Submodule""], [""%sSubmodule"", ""line_prefix""]]",[202790813550677860],5642,0.0,2
https://github.com/git/git/commit/cfa0f4040dd1885fbcdd3d306c1defe22d0fee00,07 Apr 2013,"remote-curl: always show friendlier 404 message

When we get an http 404 trying to get the initial list of
refs from the server, we try to be helpful and remind the
user that update-server-info may need to be run. This looks
like:

  $ git clone https://github.com/non/existent
  Cloning into 'existent'...
  fatal: https://github.com/non/existent/info/refs?service=git-upload-pack not found: did you run git update-server-info on the server?

Suggesting update-server-info may be a good suggestion for
users who are in control of the server repo and who are
planning to set up dumb http. But for users of smart http,
and especially users who are not in control of the server
repo, the advice is useless and confusing.

Since most people are expected to use smart http these days,
it does not make sense to keep the update-server-info hint.

We not only drop the mention of update-server-info, but also
show only the main repo URL, not the full ""info/refs"" and
service parameter. These elements may be useful for
debugging a broken server configuration, but in the majority
of cases, users are not fetching from their own
repositories, but rather from other people's repositories;
they have neither the power nor interest to fix a broken
configuration, and the extra components just make the
message more confusing. Users who do want to debug can and
should use GIT_CURL_VERBOSE to get more complete information
on the actual URLs visited.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_3754.cpp,,,data/crawl/git/old_hunk_3754.cpp,data/crawl/git/new_hunk_3754.cpp,5,-1,"die(""%s not found: did you run git update-server-info on the""
		    "" server?"", refs_url);",,"[""removeLog""]","[[""die"", ""%s"", ""not"", ""found"", ""did"", ""you"", ""run"", ""git"", ""update"", ""server"", ""info"", ""on"", ""the"", ""server"", ""refs_url""], []]",[29276283679114300153],5641,965520.0,2
https://github.com/git/git/commit/de89f0b25a42238948787421c0253228c006f7fa,07 Apr 2013,"remote-curl: die directly with http error messages

When we encounter an unknown http error (e.g., a 403), we
hand the error code to http_error, which then prints it with
error(). After that we die with the redundant message ""HTTP
request failed"".

Instead, let's just drop http_error entirely, which does
nothing but pass arguments to error(), and instead die
directly with a useful message.

So before:

  $ git clone https://example.com/repo.git
  Cloning into 'repo'...
  error: unable to access 'https://example.com/repo.git': The requested URL returned error: 403 Forbidden
  fatal: HTTP request failed

and after:

  $ git clone https://example.com/repo.git
  Cloning into 'repo'...
  fatal: unable to access 'https://example.com/repo.git': The requested URL returned error: 403 Forbidden

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",3,data/crawl/git/hunk_3747.cpp,,,data/crawl/git/old_hunk_3747.cpp,data/crawl/git/new_hunk_3747.cpp,4,-1,"die(""HTTP request failed"");",,"[""removeLog""]","[[""die"", ""HTTP"", ""request"", ""failed""], []]",[4849183399772948918],5640,965520.0,2
https://github.com/git/git/commit/caa7d79f1f7c9940acfaf161b9b84bbf81980d95,12 Apr 2013,"Sync with 'maint'

* maint:
  Correct common spelling mistakes in comments and tests
  kwset: fix spelling in comments
  precompose-utf8: fix spelling of ""want"" in error message
  compat/nedmalloc: fix spelling in comments
  compat/regex: fix spelling and grammar in comments
  obstack: fix spelling of similar
  contrib/subtree: fix spelling of accidentally
  git-remote-mediawiki: spelling fixes
  doc: various spelling fixes
  fast-export: fix argument name in error messages
  Documentation: distinguish between ref and offset deltas in pack-format
  i18n: make the translation of -u advice in one go",168,data/crawl/git/hunk_3720.cpp,,,data/crawl/git/old_hunk_3720.cpp,data/crawl/git/new_hunk_3720.cpp,9,-1,"status_printf_ln(s, GIT_COLOR_NORMAL,
				 _(""new files yourself (see 'git help status').""));",,"[""removeLog""]","[[""status_printf_ln"", ""s"", ""GIT_COLOR_NORMAL"", ""_"", ""new"", ""files"", ""yourself"", ""see"", ""git"", ""help"", ""status""], []]",[-13782933982585709317],5639,0.0,2
https://github.com/git/git/commit/caa7d79f1f7c9940acfaf161b9b84bbf81980d95,12 Apr 2013,"Sync with 'maint'

* maint:
  Correct common spelling mistakes in comments and tests
  kwset: fix spelling in comments
  precompose-utf8: fix spelling of ""want"" in error message
  compat/nedmalloc: fix spelling in comments
  compat/regex: fix spelling and grammar in comments
  obstack: fix spelling of similar
  contrib/subtree: fix spelling of accidentally
  git-remote-mediawiki: spelling fixes
  doc: various spelling fixes
  fast-export: fix argument name in error messages
  Documentation: distinguish between ref and offset deltas in pack-format
  i18n: make the translation of -u advice in one go",168,data/crawl/git/hunk_3720.cpp,,,data/crawl/git/old_hunk_3720.cpp,data/crawl/git/new_hunk_3720.cpp,6,-1,"status_printf_ln(s, GIT_COLOR_NORMAL,
				 _(""may speed it up, but you have to be careful not""
				   "" to forget to add""));",,"[""removeLog""]","[[""status_printf_ln"", ""s"", ""GIT_COLOR_NORMAL"", ""_"", ""may"", ""speed"", ""it"", ""up"", ""but"", ""you"", ""have"", ""to"", ""be"", ""careful"", ""not"", ""to"", ""forget"", ""to"", ""add""], []]",[-20314274499931025725],5638,0.0,2
https://github.com/git/git/commit/caa7d79f1f7c9940acfaf161b9b84bbf81980d95,12 Apr 2013,"Sync with 'maint'

* maint:
  Correct common spelling mistakes in comments and tests
  kwset: fix spelling in comments
  precompose-utf8: fix spelling of ""want"" in error message
  compat/nedmalloc: fix spelling in comments
  compat/regex: fix spelling and grammar in comments
  obstack: fix spelling of similar
  contrib/subtree: fix spelling of accidentally
  git-remote-mediawiki: spelling fixes
  doc: various spelling fixes
  fast-export: fix argument name in error messages
  Documentation: distinguish between ref and offset deltas in pack-format
  i18n: make the translation of -u advice in one go",168,data/crawl/git/hunk_3720.cpp,,,data/crawl/git/old_hunk_3720.cpp,data/crawl/git/new_hunk_3720.cpp,2,2,"status_printf_ln(s, GIT_COLOR_NORMAL,
				 _(""It took %.2f seconds to enumerate untracked files.""
				   ""  'status -uno'""),
				 s->untracked_in_ms / 1000.0);","status_printf_ln(s, GIT_COLOR_NORMAL,
					 _(""It took %.2f seconds to enumerate untracked files. 'status -uno'\n""
					   ""may speed it up, but you have to be careful not to forget to add\n""
					   ""new files yourself (see 'git help status').""),
					 s->untracked_in_ms / 1000.0);","[""updateContent"", ""addContent""]","[[], [""\\n"", ""may"", ""speed"", ""it"", ""up"", ""but"", ""you"", ""have"", ""to"", ""be"", ""careful"", ""not"", ""to"", ""forget"", ""to"", ""add\\n"", ""new"", ""files"", ""yourself"", ""see"", ""git"", ""help"", ""status""]]",[18252078245190940296],5637,0.0,2
https://github.com/git/git/commit/6cd5c582dcf8e6b960079247ac9d0dbace856458,15 Apr 2013,"dir.c: move prep_exclude

Move prep_exclude in preparation for the next patch.

Signed-off-by: Karsten Blees <blees@dcon.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",144,data/crawl/git/hunk_3711.cpp,,,data/crawl/git/old_hunk_3711.cpp,data/crawl/git/new_hunk_3711.cpp,-1,48,,"die(""oops in prep_exclude"");","[""addLog""]","[[], [""die"", ""oops"", ""in"", ""prep_exclude""]]",[4453539144127711411],5636,1414080.0,2
https://github.com/git/git/commit/3d27b9b005f26b107227fc18b6648df329daee97,17 Apr 2013,"date.c: add parse_expiry_date()

""git reflog --expire=all"" tries to expire reflog entries up to the
current second, because the approxidate() parser gives the current
timestamp for anything it does not understand (and it does not know
what time ""all"" means).  When the user tells us to expire ""all"" (or
set the expiration time to ""now""), the user wants to remove all the
reflog entries (no reflog entry should record future time).

Just set it to ULONG_MAX and to let everything that is older that
timestamp expire.

While at it, allow ""now"" to be treated the same way for callers that
parse expiry date timestamp with this function.  Also use an error
reporting version of approxidate() to report misspelled date.  When
the user says e.g. ""--expire=mnoday"" to delete entries two days or
older on Wednesday, we wouldn't want the ""unknown, default to now""
logic to kick in.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",37,data/crawl/git/hunk_3701.cpp,,,data/crawl/git/old_hunk_3701.cpp,data/crawl/git/new_hunk_3701.cpp,-1,4,,"die(_(""'%s' is not a valid timestamp""), arg);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""not"", ""a"", ""valid"", ""timestamp"", ""arg""]]",[-2137468373127312902],5635,0.0,2
https://github.com/git/git/commit/ab292bc4f30dd29d3d111b040b9e982f20b9ceb7,01 May 2013,"repack_without_ref(): silence errors for dangling packed refs

Stop emitting an error message when deleting a packed reference if we
find another dangling packed reference that is overridden by a loose
reference.  See the previous commit for a longer explanation of the
issue.

We have to be careful to make sure that the invalid packed reference
really *is* overridden by a loose reference; otherwise what we have
found is repository corruption, which we *should* report.

Please note that this approach is vulnerable to a race condition
similar to the race conditions already known to affect packed
references [1]:

* Process 1 tries to peel packed reference X as part of deleting
  another packed reference.  It discovers that X does not refer to a
  valid object (because the object that it referred to has been
  garbage collected).

* Process 2 tries to delete reference X.  It starts by deleting the
  loose reference X.

* Process 1 checks whether there is a loose reference X.  There is not
  (it has just been deleted by process 2), so process 1 reports a
  spurious error ""X does not point to a valid object!""

The worst case seems relatively harmless, and the fix is identical to
the fix that will be needed for the other race conditions (namely
holding a lock on the packed-refs file during *all* reference
deletions), so we leave the cleaning up of all of them as a future
project.

[1] http://thread.gmane.org/gmane.comp.version-control.git/211956

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_3678.cpp,,,data/crawl/git/old_hunk_3678.cpp,data/crawl/git/new_hunk_3678.cpp,-1,34,,"error(""%s does not point to a valid object!"", entry->name);","[""addLog""]","[[], [""error"", ""%s"", ""does"", ""not"", ""point"", ""to"", ""a"", ""valid"", ""object"", ""entry"", ""name""]]",[-22852453714588113964],5634,0.0,2
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3674.cpp,,,data/crawl/git/old_hunk_3674.cpp,data/crawl/git/new_hunk_3674.cpp,-1,45,,"fprintf(cb->refs_file, ""^%s\n"",
				sha1_to_hex(o->sha1));","[""addLog""]","[[], [""fprintf"", ""cb"", ""refs_file"", ""%s\\n"", ""sha1_to_hex"", ""o"", ""sha1""]]",[3248838430025742882],5633,1279440.0,2
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3674.cpp,,,data/crawl/git/old_hunk_3674.cpp,data/crawl/git/new_hunk_3674.cpp,-1,39,,"fprintf(cb->refs_file, ""%s %s\n"", sha1_to_hex(sha1), path);","[""addLog""]","[[], [""fprintf"", ""cb"", ""refs_file"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""sha1"", ""path""]]",[7396124218116591211],5632,1279440.0,2
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3673.cpp,,,data/crawl/git/old_hunk_3673.cpp,data/crawl/git/new_hunk_3673.cpp,47,-1,"fprintf(cb->refs_file, ""^%s\n"",
				sha1_to_hex(o->sha1));",,"[""removeLog""]","[[""fprintf"", ""cb"", ""refs_file"", ""%s\\n"", ""sha1_to_hex"", ""o"", ""sha1""], []]",[-3248838430025742882],5631,1279440.0,2
https://github.com/git/git/commit/32d462cea80cd52b2c3fa0d538aba7fcf079ba77,01 May 2013,"pack-refs: merge code from pack-refs.{c,h} into refs.{c,h}

pack-refs.c doesn't contain much code, and the code it does contain is
closely related to reference handling.  Moreover, there is some
duplication between pack_refs() and repack_without_ref().  Therefore,
merge pack-refs.c into refs.c and pack-refs.h into refs.h.

The code duplication will be addressed in future commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",329,data/crawl/git/hunk_3673.cpp,,,data/crawl/git/old_hunk_3673.cpp,data/crawl/git/new_hunk_3673.cpp,41,-1,"fprintf(cb->refs_file, ""%s %s\n"", sha1_to_hex(sha1), path);",,"[""removeLog""]","[[""fprintf"", ""cb"", ""refs_file"", ""%s"", ""%s\\n"", ""sha1_to_hex"", ""sha1"", ""path""], []]",[-7396124218116591211],5630,1279440.0,2
https://github.com/git/git/commit/0f29920f1e0ce00aaf867fdd9ad2174011179f47,01 May 2013,"pack_one_ref(): use write_packed_entry() to do the writing

Change pack_refs() to work with a file descriptor instead of a FILE*
(making the file-locking code less awkward) and use
write_packed_entry() to do the writing.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_3668.cpp,,,data/crawl/git/old_hunk_3668.cpp,data/crawl/git/new_hunk_3668.cpp,22,-1,"die_errno(""failed to write ref-pack file"");",,"[""removeLog""]","[[""die_errno"", ""failed"", ""to"", ""write"", ""ref"", ""pack"", ""file""], []]",[2191734077041785327],5629,0.0,2
https://github.com/git/git/commit/0f29920f1e0ce00aaf867fdd9ad2174011179f47,01 May 2013,"pack_one_ref(): use write_packed_entry() to do the writing

Change pack_refs() to work with a file descriptor instead of a FILE*
(making the file-locking code less awkward) and use
write_packed_entry() to do the writing.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_3668.cpp,,,data/crawl/git/old_hunk_3668.cpp,data/crawl/git/new_hunk_3668.cpp,16,-1,"fprintf(cbdata.refs_file, ""# pack-refs with: peeled fully-peeled \n"");",,"[""removeLog""]","[[""fprintf"", ""cbdata"", ""refs_file"", ""pack"", ""refs"", ""with"", ""peeled"", ""fully"", ""peeled"", ""\\n""], []]",[17880795745878859489],5628,0.0,2
https://github.com/git/git/commit/0f29920f1e0ce00aaf867fdd9ad2174011179f47,01 May 2013,"pack_one_ref(): use write_packed_entry() to do the writing

Change pack_refs() to work with a file descriptor instead of a FILE*
(making the file-locking code less awkward) and use
write_packed_entry() to do the writing.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",33,data/crawl/git/hunk_3668.cpp,,,data/crawl/git/old_hunk_3668.cpp,data/crawl/git/new_hunk_3668.cpp,13,-1,"die_errno(""unable to create ref-pack file structure"");",,"[""removeLog""]","[[""die_errno"", ""unable"", ""to"", ""create"", ""ref"", ""pack"", ""file"", ""structure""], []]",[-694858147070458347],5627,0.0,2
https://github.com/git/git/commit/e6812cfa9aba69a8c9d83b0710291b27bff0f7a3,07 May 2013,"fast-export: do not parse non-commit objects while reading marks file

We read from the marks file and keep only marked commits, but in
order to find the type of object, we are parsing the whole thing,
which is slow, specially in big repositories with lots of big files.

There's no need for that, we can query the object information with
sha1_object_info().

Before this, loading the objects of a fresh emacs import, with 260598
blobs took 14 minutes, after this patch, it takes 3 seconds.

This is the way fast-import does it. Also die if the object is not
found (like fast-import).

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_3665.cpp,,,data/crawl/git/old_hunk_3665.cpp,data/crawl/git/new_hunk_3665.cpp,-1,5,,"die(""object not found: %s"", sha1_to_hex(sha1));","[""addLog""]","[[], [""die"", ""object"", ""not"", ""found"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-716883901214922058],5626,576720.0,2
https://github.com/git/git/commit/d0af663e42abfcd5be6f7c3db21a29e521aa4ca2,16 May 2013,"revision.c: Make --full-history consider more merges

History simplification previously always treated merges as TREESAME
if they were TREESAME to any parent.

While this was consistent with the default behaviour, this could be
extremely unhelpful when searching detailed history, and could not be
overridden. For example, if a merge had ignored a change, as if by ""-s
ours"", then:

  git log -m -p --full-history -Schange file

would successfully locate ""change""'s addition but would not locate the
merge that resolved against it.

Futher, simplify_merges could drop the actual parent that a commit
was TREESAME to, leaving it as a normal commit marked TREESAME that
isn't actually TREESAME to its remaining parent.

Now redefine a commit's TREESAME flag to be true only if a commit is
TREESAME to _all_ of its parents. This doesn't affect either the default
simplify_history behaviour (because partially TREESAME merges are turned
into normal commits), or full-history with parent rewriting (because all
merges are output). But it does affect other modes. The clearest
difference is that --full-history will show more merges - sufficient to
ensure that -m -p --full-history log searches can really explain every
change to the file, including those changes' ultimate fate in merges.

Also modify simplify_merges to recalculate TREESAME after removing
a parent. This is achieved by storing per-parent TREESAME flags on the
initial scan, so the combined flag can be easily recomputed.

This fixes some t6111 failures, but creates a couple of new ones -
we are now showing some merges that don't need to be shown.

Signed-off-by: Kevin Bracey <kevin@bracey.fi>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",276,data/crawl/git/hunk_3653.cpp,,,data/crawl/git/old_hunk_3653.cpp,data/crawl/git/new_hunk_3653.cpp,-1,35,,"die(""compact_treesame %u"", nth_parent);","[""addLog""]","[[], [""die"", ""compact_treesame"", ""%u"", ""nth_parent""]]",[-16585711710377794416],5625,0.0,2
https://github.com/git/git/commit/21457f5719b894a5997d66ff098b375bc2404260,21 May 2013,"transport-helper: check if the dry-run is supported

Certain remote-helpers (the ones with 'export') would try to push
regardless.

Obviously this is not what the user wants.

Also, add a check for the 'dry-run' option, so remote-helpers can
implement it.

Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",5,data/crawl/git/hunk_3650.cpp,,,data/crawl/git/old_hunk_3650.cpp,data/crawl/git/new_hunk_3650.cpp,-1,5,,"die(""helper %s does not support dry-run"", data->name);","[""addLog""]","[[], [""die"", ""helper"", ""%s"", ""does"", ""not"", ""support"", ""dry"", ""run"", ""data"", ""name""]]",[-23874525219880477593],5624,934560.0,2
https://github.com/git/git/commit/bf9a05ba46a9d464424d22482aaa54abdd28b77d,12 Jun 2013,"Move create_notes_commit() from notes-merge.c into notes-utils.c

create_notes_commit() is needed by both the notes-merge code, and by
commit_notes() in notes-utils. Since it is generally useful, and not
bound to the notes-merge machinery, we move it from (the more specific)
notes-merge to (the more general) notes-utils.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_3616.cpp,,,data/crawl/git/old_hunk_3616.cpp,data/crawl/git/new_hunk_3616.cpp,-1,27,,"die(""Failed to commit notes tree to database"");","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""commit"", ""notes"", ""tree"", ""to"", ""database""]]",[3008335514023294386],5623,675360.0,2
https://github.com/git/git/commit/bf9a05ba46a9d464424d22482aaa54abdd28b77d,12 Jun 2013,"Move create_notes_commit() from notes-merge.c into notes-utils.c

create_notes_commit() is needed by both the notes-merge code, and by
commit_notes() in notes-utils. Since it is generally useful, and not
bound to the notes-merge machinery, we move it from (the more specific)
notes-merge to (the more general) notes-utils.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_3616.cpp,,,data/crawl/git/old_hunk_3616.cpp,data/crawl/git/new_hunk_3616.cpp,-1,20,,"die(""Failed to find/parse commit %s"", t->ref);","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""find/parse"", ""commit"", ""%s"", ""t"", ""ref""]]",[-13273506509801657146],5622,675360.0,2
https://github.com/git/git/commit/bf9a05ba46a9d464424d22482aaa54abdd28b77d,12 Jun 2013,"Move create_notes_commit() from notes-merge.c into notes-utils.c

create_notes_commit() is needed by both the notes-merge code, and by
commit_notes() in notes-utils. Since it is generally useful, and not
bound to the notes-merge machinery, we move it from (the more specific)
notes-merge to (the more general) notes-utils.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_3616.cpp,,,data/crawl/git/old_hunk_3616.cpp,data/crawl/git/new_hunk_3616.cpp,-1,12,,"die(""Failed to write notes tree to database"");","[""addLog""]","[[], [""die"", ""Failed"", ""to"", ""write"", ""notes"", ""tree"", ""to"", ""database""]]",[7481939560792250473],5621,675360.0,2
https://github.com/git/git/commit/bf9a05ba46a9d464424d22482aaa54abdd28b77d,12 Jun 2013,"Move create_notes_commit() from notes-merge.c into notes-utils.c

create_notes_commit() is needed by both the notes-merge code, and by
commit_notes() in notes-utils. Since it is generally useful, and not
bound to the notes-merge machinery, we move it from (the more specific)
notes-merge to (the more general) notes-utils.

Signed-off-by: Johan Herland <johan@herland.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",82,data/crawl/git/hunk_3615.cpp,,,data/crawl/git/old_hunk_3615.cpp,data/crawl/git/new_hunk_3615.cpp,26,-1,"die(""Failed to commit notes tree to database"");",,"[""removeLog""]","[[""die"", ""Failed"", ""to"", ""commit"", ""notes"", ""tree"", ""to"", ""database""], []]",[-3008335514023294386],5620,675360.0,2
https://github.com/git/git/commit/10a3fb00ebbf19d5c22a0aa9ccd7803fe5367329,13 Jun 2013,"match-trees: factor out fill_tree_desc_strict

Deduplicate code by moving tree_desc initialization into a helper
function, fill_tree_desc_strict.  It is like fill_tree_descriptor,
except that it only accepts tree hashes and no tree references (tags,
commits).  No functional change.

Signed-off-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_3610.cpp,,,data/crawl/git/old_hunk_3610.cpp,data/crawl/git/new_hunk_3610.cpp,12,-1,"die(""%s is not a tree"", sha1_to_hex(hash1));",,"[""removeLog""]","[[""die"", ""%s"", ""is"", ""not"", ""a"", ""tree"", ""sha1_to_hex"", ""hash1""], []]",[-323041941435022297],5619,0.0,2
https://github.com/git/git/commit/10a3fb00ebbf19d5c22a0aa9ccd7803fe5367329,13 Jun 2013,"match-trees: factor out fill_tree_desc_strict

Deduplicate code by moving tree_desc initialization into a helper
function, fill_tree_desc_strict.  It is like fill_tree_descriptor,
except that it only accepts tree hashes and no tree references (tags,
commits).  No functional change.

Signed-off-by: René Scharfe <rene.scharfe@lsrfire.ath.cx>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",44,data/crawl/git/hunk_3610.cpp,,,data/crawl/git/old_hunk_3610.cpp,data/crawl/git/new_hunk_3610.cpp,10,-1,"die(""unable to read tree (%s)"", sha1_to_hex(hash1));",,"[""removeLog""]","[[""die"", ""unable"", ""to"", ""read"", ""tree"", ""%s"", ""sha1_to_hex"", ""hash1""], []]",[4792928641132806845],5618,0.0,2
https://github.com/git/git/commit/b95e66f507967fdfbf7275a94729fe09aa4b20ca,17 Jun 2013,"wt-status: give better advice when cherry-pick is in progress

When cherry-pick is in progress, 'git status' gives the advice to
run ""git commit"" to finish the cherry-pick.

However, this won't continue the sequencer, when picking a range of
commits.

Advise users to run ""git cherry-pick --continue/--abort""; they work
when picking a single commit as well.

Signed-off-by: Ralf Thielow <ralf.thielow@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",12,data/crawl/git/hunk_3598.cpp,,,data/crawl/git/old_hunk_3598.cpp,data/crawl/git/new_hunk_3598.cpp,2,2,"status_printf_ln(s, color,
				_(""  (fix conflicts and run \""git commit\"")""));","status_printf_ln(s, color,
				_(""  (fix conflicts and run \""git cherry-pick --continue\"")""));","[""updateContent""]","[[""commit\\""], [""cherry"", ""pick"", ""continue\\""]]",[-11759698121981117282],5617,0.0,2
https://github.com/git/git/commit/9f69d297703bff37c5506276c2565c721347e03f,20 Jun 2013,"refs: implement simple transactions for the packed-refs file

Handle simple transactions for the packed-refs file at the
packed_ref_cache level via new functions lock_packed_refs(),
commit_packed_refs(), and rollback_packed_refs().

Only allow the packed ref cache to be modified (via add_packed_ref())
while the packed refs file is locked.

Change clone to add the new references within a transaction.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",119,data/crawl/git/hunk_3584.cpp,,,data/crawl/git/old_hunk_3584.cpp,data/crawl/git/new_hunk_3584.cpp,-1,12,,"die_errno(""unable to overwrite old ref-pack file"");","[""addLog""]","[[], [""die_errno"", ""unable"", ""to"", ""overwrite"", ""old"", ""ref"", ""pack"", ""file""]]",[10439857723226535429],5616,36000.0,2
https://github.com/git/git/commit/ed2b18292bfeedc98c9e2b6bd8a35d8001dab2fc,24 Jun 2013,"push: change `simple` to accommodate triangular workflows

When remote.pushdefault or branch.<name>.pushremote is set to a
remote that is different from where you usually fetch from (i.e. a
triangular workflow), master@{u} != origin, and push.default is set
to `upstream` or `simple` would fail with this error:

  $ git push
  fatal: You are pushing to remote 'origin', which is not the upstream of
  your current branch 'master', without telling me what to push
  to update which remote branch.

The very name of ""upstream"" indicates that it is only suitable for
use in central workflows; let us not even attempt to give it a new
meaning in triangular workflows, and error out as before.

However, the `simple` does not have to share this error.  It is
poised to be the default for Git 2.0, and we would like it to do
something sensible in triangular workflows.

Redefine ""simple"" as ""safer upstream"" for centralized workflow as
before, but work as ""current"" for triangular workflow.

We may want to make it ""safer current"", but that is a separate
issue.

Reported-by: Leandro Lucarella <leandro.lucarella@sociomantic.com>
Signed-off-by: Ramkumar Ramachandra <artagnon@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_3568.cpp,,,data/crawl/git/old_hunk_3568.cpp,data/crawl/git/new_hunk_3568.cpp,-1,22,,"die(_(message_detached_head_die), remote->name);","[""addLog""]","[[], [""die"", ""_"", ""message_detached_head_die"", ""remote"", ""name""]]",[-5635557799187808035],5615,18720.0,2
https://github.com/git/git/commit/17696002086e8c6b9e998543d212e707c7d511ab,26 Jun 2013,"git-clean: add support for -i/--interactive

Show what would be done and the user must confirm before actually
cleaning.

    Would remove ...
    Would remove ...
    Would remove ...

    Remove [y/n]?

Press ""y"" to start cleaning, and press ""n"" if you want to abort.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_3554.cpp,,,data/crawl/git/old_hunk_3554.cpp,data/crawl/git/new_hunk_3554.cpp,5,5,"die(_(""clean.requireForce set to true and neither -n nor -f given; ""
				  ""refusing to clean""));","die(_(""clean.requireForce set to true and neither -i, -n nor -f given; ""
				  ""refusing to clean""));","[""updateContent""]","[[], [""i""]]",[13440040424],5614,0.0,2
https://github.com/git/git/commit/17696002086e8c6b9e998543d212e707c7d511ab,26 Jun 2013,"git-clean: add support for -i/--interactive

Show what would be done and the user must confirm before actually
cleaning.

    Would remove ...
    Would remove ...
    Would remove ...

    Remove [y/n]?

Press ""y"" to start cleaning, and press ""n"" if you want to abort.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",67,data/crawl/git/hunk_3553.cpp,,,data/crawl/git/old_hunk_3553.cpp,data/crawl/git/new_hunk_3553.cpp,-1,25,,"printf_ln(""Bye."");","[""addLog""]","[[], [""printf_ln"", ""Bye""]]",[7206494352972939546],5613,0.0,2
https://github.com/git/git/commit/60838613054f43d63086b0f4a7596baaee9e20c5,25 Jul 2013,"git-clean: implement partial matching for selection

Document for interactive git-clean says: ""You also could say `c` or
`clean` above as long as the choice is unique"". But it's not true,
because only hotkey `c` and full match (`clean`) could work.

Implement partial matching via find_unique function to make the
document right.

Signed-off-by: Jiang Xin <worldhello.net@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",120,data/crawl/git/hunk_3506.cpp,,,data/crawl/git/old_hunk_3506.cpp,data/crawl/git/new_hunk_3506.cpp,-1,12,,"die(""Bad type of menu_stuff when parse choice"");","[""addLog""]","[[], [""die"", ""Bad"", ""type"", ""of"", ""menu_stuff"", ""when"", ""parse"", ""choice""]]",[-11496053205144198465],5612,20880.0,2
https://github.com/git/git/commit/cdab485853b405d6454d4974bdc3825134d85249,28 Aug 2013,"upload-pack: delegate rev walking in shallow fetch to pack-objects

upload-pack has a special revision walking code for shallow
recipients. It works almost like the similar code in pack-objects
except:

1. in upload-pack, graft points could be added for deepening;

2. also when the repository is deepened, the shallow point will be
   moved further away from the tip, but the old shallow point will be
   marked as edge to produce more efficient packs. See 6523078 (make
   shallow repository deepening more network efficient - 2009-09-03).

Pass the file to pack-objects via --shallow-file. This will override
$GIT_DIR/shallow and give pack-objects the exact repository shape
that upload-pack has.

mark edge commits by revision command arguments. Even if old shallow
points are passed as ""--not"" revisions as in this patch, they will not
be picked up by mark_edges_uninteresting() because this function looks
up to parents for edges, while in this case the edge is the children,
in the opposite direction. This will be fixed in an later patch when
all given uninteresting commits are marked as edges.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",131,data/crawl/git/hunk_3493.cpp,,,data/crawl/git/old_hunk_3493.cpp,data/crawl/git/new_hunk_3493.cpp,8,-1,"die(""git upload-pack: unable to fork git-rev-list"");",,"[""removeLog""]","[[""die"", ""git"", ""upload"", ""pack"", ""unable"", ""to"", ""fork"", ""git"", ""rev"", ""list""], []]",[-8007487333216007127],5611,630000.0,2
https://github.com/git/git/commit/83786fa412662f6d7cdade9e4043882c5ad21c1a,06 Dec 2013,"config: arbitrary number of matches for --unset and --replace-all

git-config used a static match array to hold the matches we want to
unset/replace when using --unset or --replace-all.  Use a
variable-sized array instead.

This in particular fixes the symptoms git-svn had when storing large
numbers of svn-remote.*.added-placeholder entries in the config file.

While the tests are rather more paranoid than just --unset and
--replace-all, the other operations already worked.  Indeed git-svn's
usage only breaks the first time *after* creating so many entries,
when it wants to unset and re-add them all.

Reported-by: Jess Hottenstein <jess.hottenstein@gmail.com>
Signed-off-by: Thomas Rast <tr@thomasrast.ch>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_3472.cpp,,,data/crawl/git/old_hunk_3472.cpp,data/crawl/git/new_hunk_3472.cpp,4,-1,"error(""too many matches for %s"", key);",,"[""removeLog""]","[[""error"", ""too"", ""many"", ""matches"", ""for"", ""%s"", ""key""], []]",[1266637305338802761],5610,0.0,2
https://github.com/git/git/commit/c29a7b8b3f71c1bede1f57626bafe120280aaea3,11 Dec 2013,"receive-pack: support pushing to a shallow clone via http

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",38,data/crawl/git/hunk_3440.cpp,,,data/crawl/git/old_hunk_3440.cpp,data/crawl/git/new_hunk_3440.cpp,4,-1,"die(""attempt to push into a shallow repository"");",,"[""removeLog""]","[[""die"", ""attempt"", ""to"", ""push"", ""into"", ""a"", ""shallow"", ""repository""], []]",[-9325462250239823217],5609,0.0,2
https://github.com/git/git/commit/e2f5df42449ace700e5a237f604c34b4657c0edf,30 Dec 2013,"merge-base: separate ""--independent"" codepath into its own helper

It piggybacks on an unrelated handle_octopus() function only because
there are some similarities between the way they need to preprocess
their input and output their result.  There is nothing similar in
the true logic between these two operations.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",31,data/crawl/git/hunk_3414.cpp,,,data/crawl/git/old_hunk_3414.cpp,data/crawl/git/new_hunk_3414.cpp,-1,17,,"printf(""%s\n"", sha1_to_hex(result->item->object.sha1));","[""addLog""]","[[], [""printf"", ""%s\\n"", ""sha1_to_hex"", ""result"", ""item"", ""object"", ""sha1""]]",[-880886928602139155],5608,885600.0,2
https://github.com/git/git/commit/fff42755efc7585378ca562e54828532922371be,30 Dec 2013,"pack-bitmap: add support for bitmap indexes

A bitmap index is a `.bitmap` file that can be found inside
`$GIT_DIR/objects/pack/`, next to its corresponding packfile, and
contains precalculated reachability information for selected commits.
The full specification of the format for these bitmap indexes can be found
in `Documentation/technical/bitmap-format.txt`.

For a given commit SHA1, if it happens to be available in the bitmap
index, its bitmap will represent every single object that is reachable
from the commit itself. The nth bit in the bitmap is the nth object in
the packfile; if it's set to 1, the object is reachable.

By using the bitmaps available in the index, this commit implements
several new functions:

	- `prepare_bitmap_git`
	- `prepare_bitmap_walk`
	- `traverse_bitmap_commit_list`
	- `reuse_partial_packfile_from_bitmap`

The `prepare_bitmap_walk` function tries to build a bitmap of all the
objects that can be reached from the commit roots of a given `rev_info`
struct by using the following algorithm:

- If all the interesting commits for a revision walk are available in
the index, the resulting reachability bitmap is the bitwise OR of all
the individual bitmaps.

- When the full set of WANTs is not available in the index, we perform a
partial revision walk using the commits that don't have bitmaps as
roots, and limiting the revision walk as soon as we reach a commit that
has a corresponding bitmap. The earlier OR'ed bitmap with all the
indexed commits can now be completed as this walk progresses, so the end
result is the full reachability list.

- For revision walks with a HAVEs set (a set of commits that are deemed
uninteresting), first we perform the same method as for the WANTs, but
using our HAVEs as roots, in order to obtain a full reachability bitmap
of all the uninteresting commits. This bitmap then can be used to:

	a) limit the subsequent walk when building the WANTs bitmap
	b) finding the final set of interesting commits by performing an
	   AND-NOT of the WANTs and the HAVEs.

If `prepare_bitmap_walk` runs successfully, the resulting bitmap is
stored and the equivalent of a `traverse_commit_list` call can be
performed by using `traverse_bitmap_commit_list`; the bitmap version
of this call yields the objects straight from the packfile index
(without having to look them up or parse them) and hence is several
orders of magnitude faster.

As an extra optimization, when `prepare_bitmap_walk` succeeds, the
`reuse_partial_packfile_from_bitmap` call can be attempted: it will find
the amount of objects at the beginning of the on-disk packfile that can
be reused as-is, and return an offset into the packfile. The source
packfile can then be loaded and the bytes up to `offset` can be written
directly to the result without having to consider the entires inside the
packfile individually.

If the `prepare_bitmap_walk` call fails (e.g. because no bitmap files
are available), the `rev_info` struct is left untouched, and can be used
to perform a manual rev-walk using `traverse_commit_list`.

Hence, this new set of functions are a generic API that allows to
perform the equivalent of

	git rev-list --objects [roots...] [^uninteresting...]

for any set of commits, even if they don't have specific bitmaps
generated for them.

In further patches, we'll use this bitmap traversal optimization to
speed up the `pack-objects` and `rev-list` commands.

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1353,data/crawl/git/hunk_3413.cpp,,,data/crawl/git/old_hunk_3413.cpp,data/crawl/git/new_hunk_3413.cpp,-1,722,,"die(""BUG: failed to perform bitmap walk"");","[""addLog""]","[[], [""die"", ""BUG"", ""failed"", ""to"", ""perform"", ""bitmap"", ""walk""]]",[-13924656783887524626],5607,0.0,2
https://github.com/git/git/commit/fff42755efc7585378ca562e54828532922371be,30 Dec 2013,"pack-bitmap: add support for bitmap indexes

A bitmap index is a `.bitmap` file that can be found inside
`$GIT_DIR/objects/pack/`, next to its corresponding packfile, and
contains precalculated reachability information for selected commits.
The full specification of the format for these bitmap indexes can be found
in `Documentation/technical/bitmap-format.txt`.

For a given commit SHA1, if it happens to be available in the bitmap
index, its bitmap will represent every single object that is reachable
from the commit itself. The nth bit in the bitmap is the nth object in
the packfile; if it's set to 1, the object is reachable.

By using the bitmaps available in the index, this commit implements
several new functions:

	- `prepare_bitmap_git`
	- `prepare_bitmap_walk`
	- `traverse_bitmap_commit_list`
	- `reuse_partial_packfile_from_bitmap`

The `prepare_bitmap_walk` function tries to build a bitmap of all the
objects that can be reached from the commit roots of a given `rev_info`
struct by using the following algorithm:

- If all the interesting commits for a revision walk are available in
the index, the resulting reachability bitmap is the bitwise OR of all
the individual bitmaps.

- When the full set of WANTs is not available in the index, we perform a
partial revision walk using the commits that don't have bitmaps as
roots, and limiting the revision walk as soon as we reach a commit that
has a corresponding bitmap. The earlier OR'ed bitmap with all the
indexed commits can now be completed as this walk progresses, so the end
result is the full reachability list.

- For revision walks with a HAVEs set (a set of commits that are deemed
uninteresting), first we perform the same method as for the WANTs, but
using our HAVEs as roots, in order to obtain a full reachability bitmap
of all the uninteresting commits. This bitmap then can be used to:

	a) limit the subsequent walk when building the WANTs bitmap
	b) finding the final set of interesting commits by performing an
	   AND-NOT of the WANTs and the HAVEs.

If `prepare_bitmap_walk` runs successfully, the resulting bitmap is
stored and the equivalent of a `traverse_commit_list` call can be
performed by using `traverse_bitmap_commit_list`; the bitmap version
of this call yields the objects straight from the packfile index
(without having to look them up or parse them) and hence is several
orders of magnitude faster.

As an extra optimization, when `prepare_bitmap_walk` succeeds, the
`reuse_partial_packfile_from_bitmap` call can be attempted: it will find
the amount of objects at the beginning of the on-disk packfile that can
be reused as-is, and return an offset into the packfile. The source
packfile can then be loaded and the bytes up to `offset` can be written
directly to the result without having to consider the entires inside the
packfile individually.

If the `prepare_bitmap_walk` call fails (e.g. because no bitmap files
are available), the `rev_info` struct is left untouched, and can be used
to perform a manual rev-walk using `traverse_commit_list`.

Hence, this new set of functions are a generic API that allows to
perform the equivalent of

	git rev-list --objects [roots...] [^uninteresting...]

for any set of commits, even if they don't have specific bitmaps
generated for them.

In further patches, we'll use this bitmap traversal optimization to
speed up the `pack-objects` and `rev-list` commands.

Signed-off-by: Vicent Marti <tanoku@gmail.com>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1353,data/crawl/git/hunk_3413.cpp,,,data/crawl/git/old_hunk_3413.cpp,data/crawl/git/new_hunk_3413.cpp,-1,683,,"die(""bad tag"");","[""addLog""]","[[], [""die"", ""bad"", ""tag""]]",[-3093293526016883090],5606,1541520.0,2
https://github.com/git/git/commit/a43219f2aaa39fbc53ba0aee2481e1cca3c0e649,28 Jan 2014,"rev-parse: check i before using argv[i] against argc

The --prefix, --default, and --resolve-git-dir options to
git-rev-parse require an argument, but when given no argument,
the code uses the NULL read from argv[argc] without checking,
leading to a segfault.

Instead, check first and die() with an error message.

Signed-off-by: David Sharp <dhsharp@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_3383.cpp,,,data/crawl/git/old_hunk_3383.cpp,data/crawl/git/new_hunk_3383.cpp,5,8,"die(""not a gitdir '%s'"", argv[i+1]);","die(""not a gitdir '%s'"", argv[i]);","[""removeVariable"", ""removeContent""]","[[""argv[i"", ""1]""], [""argv[i]""]]",[2207745166183016316],5605,1398960.0,2
https://github.com/git/git/commit/de0957ce2e88b8ad639f1e4a7197eb556e114a1c,10 Feb 2014,"daemon: move daemonize() to libgit.a

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",55,data/crawl/git/hunk_3372.cpp,,,data/crawl/git/old_hunk_3372.cpp,data/crawl/git/new_hunk_3372.cpp,-1,5,,"die(""--detach not supported on this platform"");","[""addLog""]","[[], [""die"", ""detach"", ""not"", ""supported"", ""on"", ""this"", ""platform""]]",[11822220414443230113],5604,859680.0,2
https://github.com/git/git/commit/0cc77c386cea7afebb54a5e7263ca37569ecfe7a,27 Feb 2014,"shallow: use stat_validity to check for up-to-date file

When we are about to write the shallow file, we check that
it has not changed since we last read it. Instead of
hand-rolling this, we can use stat_validity. This is built
around the index stat-check, so it is more robust than just
checking the mtime, as we do now (it uses the same check as
we do for index files).

The new code also handles the case of a shallow file
appearing unexpectedly. With the current code, two
simultaneous processes making us shallow (e.g., two ""git
fetch --depth=1"" running at the same time in a non-shallow
repository) can race to overwrite each other.

As a bonus, we also remove a race in determining the stat
information of what we read (we stat and then open, leaving
a race window; instead we should open and then fstat the
descriptor).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",24,data/crawl/git/hunk_3355.cpp,,,data/crawl/git/old_hunk_3355.cpp,data/crawl/git/new_hunk_3355.cpp,11,-1,"die(""shallow file was removed during fetch"");",,"[""removeLog""]","[[""die"", ""shallow"", ""file"", ""was"", ""removed"", ""during"", ""fetch""], []]",[9834852567829827657],5603,198000.0,2
https://github.com/git/git/commit/9ef176b55c373ba087b2d84e77b5713578891927,27 Feb 2014,"tag: support --sort=<spec>

--sort=version:refname (or --sort=v:refname for short) sorts tags as
if they are versions. --sort=-refname reverses the order (with or
without "":version"").

versioncmp() is copied from string/strverscmp.c in glibc commit
ee9247c38a8def24a59eb5cfb7196a98bef8cfdc, reformatted to Git coding
style. The implementation is under LGPL-2.1 and according to [1] I can
relicense it to GPLv2.

[1] http://www.gnu.org/licenses/gpl-faq.html#AllCompatibility

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",216,data/crawl/git/hunk_3349.cpp,,,data/crawl/git/old_hunk_3349.cpp,data/crawl/git/new_hunk_3349.cpp,-1,30,,"printf(""%s\n"", filter.tags.items[i].string);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""filter"", ""tags"", ""items[i]"", ""string""]]",[12200214712325493582],5602,0.0,2
https://github.com/git/git/commit/2f29e0c6fa5d312c4e0675b0dd23d3126b9f55fa,13 Mar 2014,"entry.c: fix possible buffer overflow in remove_subtree()

remove_subtree() manipulated path in a fixed-size buffer even though
the length of the input, let alone the length of entries within the
directory, were not known in advance.  Change the function to take a
strbuf argument and use that object as its scratch space.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_3329.cpp,,,data/crawl/git/old_hunk_3329.cpp,data/crawl/git/new_hunk_3329.cpp,21,20,"die_errno(""cannot lstat '%s'"", pathbuf);","die_errno(""cannot lstat '%s'"", path->buf);","[""removeVariable"", ""addVariable""]","[[""pathbuf""], [""path"", ""buf""]]",[-67128481319408746],5601,0.0,2
https://github.com/git/git/commit/1b32decefd840e0ca5d18eefd6472fd8624dd849,25 Mar 2014,"log: add --show-linear-break to help see non-linear history

Option explanation is in rev-list-options.txt. The interaction with -z
is left undecided.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",71,data/crawl/git/hunk_3318.cpp,,,data/crawl/git/old_hunk_3318.cpp,data/crawl/git/new_hunk_3318.cpp,-1,4,,"printf(""\n%s\n"", opt->break_bar);","[""addLog""]","[[], [""printf"", ""\\n%s\\n"", ""opt"", ""break_bar""]]",[8177816587078982971],5600,0.0,2
https://github.com/git/git/commit/b2c851a8e67da752d8a5dbde5a9dae6e3428a4c9,20 May 2014,"Revert ""Merge branch 'jc/graduate-remote-hg-bzr' (early part)""

Instead of showing a warning and working as before, fail and show
the message and force immediate upgrade from their upstream
repositories when these tools are run, per request from their
primary author.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",4447,data/crawl/git/hunk_3296.cpp,,,data/crawl/git/old_hunk_3296.cpp,data/crawl/git/new_hunk_3296.cpp,53,-1,"die(msg, *args);",,"[""removeLog""]","[[""die"", ""msg"", ""*args""], []]",[-2346119658525871849],5599,0.0,2
https://github.com/git/git/commit/152ff1ccebd822fd97f27d2a6c3fa2058f088fd8,13 Jun 2014,"provide helpers to access the commit buffer

Many sites look at commit->buffer to get more detailed
information than what is in the parsed commit struct.
However, we sometimes drop commit->buffer to save memory,
in which case the caller would need to read the object
afresh. Some callers do this (leading to duplicated code),
and others do not (which opens the possibility of a segfault
if somebody else frees the buffer).

Let's provide a pair of helpers, ""get"" and ""unuse"", that let
callers easily get the buffer. They will use the cached
buffer when possible, and otherwise load from disk using
read_sha1_file.

Note that we also need to add a ""get_cached"" variant which
returns NULL when we do not have a cached buffer. At first
glance this seems to defeat the purpose of ""get"", which is
to always provide a return value. However, some log code
paths actually use the NULL-ness of commit->buffer as a
boolean flag to decide whether to try printing the
commit. At least for now, we want to continue supporting
that use.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_3286.cpp,,,data/crawl/git/old_hunk_3286.cpp,data/crawl/git/new_hunk_3286.cpp,-1,19,,"die(""expected commit for %s, got %s"",
			    sha1_to_hex(commit->object.sha1), typename(type));","[""addLog""]","[[], [""die"", ""expected"", ""commit"", ""for"", ""%s"", ""got"", ""%s"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1"", ""typename"", ""type""]]",[1182938276743572345],5598,362160.0,2
https://github.com/git/git/commit/152ff1ccebd822fd97f27d2a6c3fa2058f088fd8,13 Jun 2014,"provide helpers to access the commit buffer

Many sites look at commit->buffer to get more detailed
information than what is in the parsed commit struct.
However, we sometimes drop commit->buffer to save memory,
in which case the caller would need to read the object
afresh. Some callers do this (leading to duplicated code),
and others do not (which opens the possibility of a segfault
if somebody else frees the buffer).

Let's provide a pair of helpers, ""get"" and ""unuse"", that let
callers easily get the buffer. They will use the cached
buffer when possible, and otherwise load from disk using
read_sha1_file.

Note that we also need to add a ""get_cached"" variant which
returns NULL when we do not have a cached buffer. At first
glance this seems to defeat the purpose of ""get"", which is
to always provide a return value. However, some log code
paths actually use the NULL-ness of commit->buffer as a
boolean flag to decide whether to try printing the
commit. At least for now, we want to continue supporting
that use.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_3286.cpp,,,data/crawl/git/old_hunk_3286.cpp,data/crawl/git/new_hunk_3286.cpp,-1,16,,"die(""cannot read commit object %s"",
			    sha1_to_hex(commit->object.sha1));","[""addLog""]","[[], [""die"", ""cannot"", ""read"", ""commit"", ""object"", ""%s"", ""sha1_to_hex"", ""commit"", ""object"", ""sha1""]]",[-14561904187827742147],5597,362160.0,2
https://github.com/git/git/commit/319b678a7b7c7fd03242b2b91d936f65e798cd06,31 Mar 2015,"sha1_file: squelch ""packfile cannot be accessed"" warnings

When we find an object in a packfile index, we make sure we
can still open the packfile itself (or that it is already
open), as it might have been deleted by a simultaneous
repack. If we can't access the packfile, we print a warning
for the user and tell the caller that we don't have the
object (we can then look in other packfiles, or find a loose
version, before giving up).

The warning we print to the user isn't really accomplishing
anything, and it is potentially confusing to users. In the
normal case, it is complete noise; we find the object
elsewhere, and the user does not have to care that we racily
saw a packfile index that became stale. It didn't affect the
operation at all.

A possibly more interesting case is when we later can't find
the object, and report failure to the user. In this case the
warning could be considered a clue toward that ultimate
failure. But it's not really a useful clue in practice. We
wouldn't even print it consistently (since we are racing
with another process, we might not even see the .idx file,
or we might win the race and open the packfile, completing
the operation).

This patch drops the warning entirely (not only from the
fill_pack_entry site, but also from an identical use in
pack-objects). If we did find the warning interesting in the
error case, we could stuff it away and reveal it to the user
when we later die() due to the broken object. But that
complexity just isn't worth it.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_3273.cpp,,,data/crawl/git/old_hunk_3273.cpp,data/crawl/git/new_hunk_3273.cpp,4,-1,"warning(""packfile %s cannot be accessed"", p->pack_name);",,"[""removeLog""]","[[""warning"", ""packfile"", ""%s"", ""cannot"", ""be"", ""accessed"", ""p"", ""pack_name""], []]",[6449411527746265162],5596,0.0,2
https://github.com/git/git/commit/afcb6ee30acf17f4e0338c49fbab301131abfbba,02 Apr 2015,"push --signed: tighten what the receiving end can ask to sign

Instead of blindly trusting the receiving side to give us a sensible
nonce to sign, limit the length (max 256 bytes) and the alphabet
(alnum and a few selected punctuations, enough to encode in base64)
that can be used in nonce.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_3269.cpp,,,data/crawl/git/old_hunk_3269.cpp,data/crawl/git/new_hunk_3269.cpp,-1,10,,"die(""the receiving end asked to sign an invalid nonce <%.*s>"",
		    len, nonce);","[""addLog""]","[[], [""die"", ""the"", ""receiving"", ""end"", ""asked"", ""to"", ""sign"", ""an"", ""invalid"", ""nonce"", ""%"", ""*s"", ""len"", ""nonce""]]",[-802240937583680451],5595,0.0,2
https://github.com/git/git/commit/39e4ae388047bd7f6f3a4ad86ba5eba523dd0668,06 May 2015,"cat-file: teach cat-file a '--allow-unknown-type' option

'git cat-file' throws an error while trying to print the type or
size of a broken/corrupt object. This is because these objects are
usually of unknown types.

Teach git cat-file a '--allow-unknown-type' option where it prints
the type or size of a broken/corrupt object without throwing
an error.

Modify '-t' and '-s' options to call sha1_object_info_extended()
directly to support the '--allow-unknown-type' option.

Add documentation for 'cat-file --allow-unknown-type'.

Helped-by: Junio C Hamano <gitster@pobox.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>

cat-file: add documentation for '--allow-unknown-type' option.

Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_3243.cpp,,,data/crawl/git/old_hunk_3243.cpp,data/crawl/git/new_hunk_3243.cpp,-1,26,,"die(""git cat-file: could not get object info"");","[""addLog""]","[[], [""die"", ""git"", ""cat"", ""file"", ""could"", ""not"", ""get"", ""object"", ""info""]]",[-12212154866552572603],5594,0.0,2
https://github.com/git/git/commit/c99fec6e35437f9db228c5a37c676faf844b3fa3,11 May 2015,"Sync with 2.3.8

Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_3210.cpp,,,data/crawl/git/old_hunk_3210.cpp,data/crawl/git/new_hunk_3210.cpp,3,3,"die(""-L argument '%s' not of the form start,end:file"",
			    item->string);","die(""-L argument not 'start,end:file' or ':funcname:file': %s"",
			    item->string);","[""updateContent""]","[[""of"", ""the"", ""form""], [""or"", ""funcname"", ""file""]]",[4637211424814524633],5593,15120.0,2
https://github.com/git/git/commit/c99fec6e35437f9db228c5a37c676faf844b3fa3,11 May 2015,"Sync with 2.3.8

Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_3208.cpp,,,data/crawl/git/old_hunk_3208.cpp,data/crawl/git/new_hunk_3208.cpp,4,8,"error(""file/directory conflict: %s, %s"", name1, name2);","noindex_filespec(NULL, 0);","[""updateVariable"", ""updateLog"", ""removeVariable"", ""addContent"", ""removeContent""]","[[""error"", ""file/directory"", ""conflict"", ""%s"", ""%s"", ""name1"", ""name2""], [""noindex_filespec"", ""NULL"", ""0""]]",[-13660209763600879167],5592,33120.0,2
https://github.com/git/git/commit/3a429d0af342d85ef6d561e3a60ae8793a34ae78,21 May 2015,"remote.c: report specific errors from branch_get_upstream

When the previous commit introduced the branch_get_upstream
helper, there was one call-site that could not be converted:
the one in sha1_name.c, which gives detailed error messages
for each possible failure.

Let's teach the helper to optionally report these specific
errors. This lets us convert another callsite, and means we
can use the helper in other locations that want to give the
same error messages.

The logic and error messages come straight from sha1_name.c,
with the exception that we start each error with a lowercase
letter, as is our usual style (note that a few tests need
updated as a result).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_3197.cpp,,,data/crawl/git/old_hunk_3197.cpp,data/crawl/git/new_hunk_3197.cpp,17,-1,"die(
			_(""Upstream branch '%s' not stored as a remote-tracking branch""),
			upstream->merge[0]->src);",,"[""removeLog""]","[[""die"", ""_"", ""Upstream"", ""branch"", ""%s"", ""not"", ""stored"", ""as"", ""a"", ""remote"", ""tracking"", ""branch"", ""upstream"", ""merge[0]"", ""src""], []]",[22269886507192799490],5591,353520.0,2
https://github.com/git/git/commit/3a429d0af342d85ef6d561e3a60ae8793a34ae78,21 May 2015,"remote.c: report specific errors from branch_get_upstream

When the previous commit introduced the branch_get_upstream
helper, there was one call-site that could not be converted:
the one in sha1_name.c, which gives detailed error messages
for each possible failure.

Let's teach the helper to optionally report these specific
errors. This lets us convert another callsite, and means we
can use the helper in other locations that want to give the
same error messages.

The logic and error messages come straight from sha1_name.c,
with the exception that we start each error with a lowercase
letter, as is our usual style (note that a few tests need
updated as a result).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_3197.cpp,,,data/crawl/git/old_hunk_3197.cpp,data/crawl/git/new_hunk_3197.cpp,9,-1,"die(_(""HEAD does not point to a branch""));",,"[""removeLog""]","[[""die"", ""_"", ""HEAD"", ""does"", ""not"", ""point"", ""to"", ""a"", ""branch""], []]",[12840427460691034526],5590,353520.0,2
https://github.com/git/git/commit/6bc0cb5176a5e42ca4a74e3558e8f0790ed09bb1,26 May 2015,"http-backend: spool ref negotiation requests to buffer

When http-backend spawns ""upload-pack"" to do ref
negotiation, it streams the http request body to
upload-pack, who then streams the http response back to the
client as it reads. In theory, git can go full-duplex; the
client can consume our response while it is still sending
the request.  In practice, however, HTTP is a half-duplex
protocol. Even if our client is ready to read and write
simultaneously, we may have other HTTP infrastructure in the
way, including the webserver that spawns our CGI, or any
intermediate proxies.

In at least one documented case[1], this leads to deadlock
when trying a fetch over http. What happens is basically:

  1. Apache proxies the request to the CGI, http-backend.

  2. http-backend gzip-inflates the data and sends
     the result to upload-pack.

  3. upload-pack acts on the data and generates output over
     the pipe back to Apache. Apache isn't reading because
     it's busy writing (step 1).

This works fine most of the time, because the upload-pack
output ends up in a system pipe buffer, and Apache reads
it as soon as it finishes writing. But if both the request
and the response exceed the system pipe buffer size, then we
deadlock (Apache blocks writing to http-backend,
http-backend blocks writing to upload-pack, and upload-pack
blocks writing to Apache).

We need to break the deadlock by spooling either the input
or the output. In this case, it's ideal to spool the input,
because Apache does not start reading either stdout _or_
stderr until we have consumed all of the input. So until we
do so, we cannot even get an error message out to the
client.

The solution is fairly straight-forward: we read the request
body into an in-memory buffer in http-backend, freeing up
Apache, and then feed the data ourselves to upload-pack. But
there are a few important things to note:

  1. We limit the in-memory buffer to prevent an obvious
     denial-of-service attack. This is a new hard limit on
     requests, but it's unlikely to come into play. The
     default value is 10MB, which covers even the ridiculous
     100,000-ref negotation in the included test (that
     actually caps out just over 5MB). But it's configurable
     on the off chance that you don't mind spending some
     extra memory to make even ridiculous requests work.

  2. We must take care only to buffer when we have to. For
     pushes, the incoming packfile may be of arbitrary
     size, and we should connect the input directly to
     receive-pack. There's no deadlock problem here, though,
     because we do not produce any output until the whole
     packfile has been read.

     For upload-pack's initial ref advertisement, we
     similarly do not need to buffer. Even though we may
     generate a lot of output, there is no request body at
     all (i.e., it is a GET, not a POST).

[1] http://article.gmane.org/gmane.comp.version-control.git/269020

Test-adapted-from: Dennis Kaarsemaker <dennis@kaarsemaker.net>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_3177.cpp,,,data/crawl/git/old_hunk_3177.cpp,data/crawl/git/new_hunk_3177.cpp,-1,13,,"die(""%s aborted reading request"", prog_name);","[""addLog""]","[[], [""die"", ""%s"", ""aborted"", ""reading"", ""request"", ""prog_name""]]",[-16415785472901842277],5589,1460160.0,2
https://github.com/git/git/commit/8dbf3eb6850d6d9495ace908625fe50888b111e6,27 May 2015,"diff.h: rename DIFF_PLAIN color slot to DIFF_CONTEXT

The latter is a much more descriptive name (and we support
""color.diff.context"" now). This also updates the name of any
local variables which were used to store the color.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_3171.cpp,,,data/crawl/git/old_hunk_3171.cpp,data/crawl/git/new_hunk_3171.cpp,2,2,"printf(""%s%s %s%s"", c_reset,
						    c_plain, c_reset,
						    c_func);","printf(""%s%s %s%s"", c_reset,
						    c_context, c_reset,
						    c_func);","[""updateVariable""]","[[""c_plain""], [""c_context""]]",[1179937146069954017],5588,0.0,2
https://github.com/git/git/commit/fada767463b599951b37bd544379a1d18dcf9370,29 May 2015,"setup_git_directory: delay core.bare/core.worktree errors

If both core.bare and core.worktree are set, we complain
about the bogus config and die. Dying is good, because it
avoids commands running and doing damage in a potentially
incorrect setup. But dying _there_ is bad, because it means
that commands which do not even care about the work tree
cannot run. This can make repairing the situation harder:

  [setup]
  $ git config core.bare true
  $ git config core.worktree /some/path

  [OK, expected.]
  $ git status
  fatal: core.bare and core.worktree do not make sense

  [Hrm...]
  $ git config --unset core.worktree
  fatal: core.bare and core.worktree do not make sense

  [Nope...]
  $ git config --edit
  fatal: core.bare and core.worktree do not make sense

  [Gaaah.]
  $ git help config
  fatal: core.bare and core.worktree do not make sense

Instead, let's issue a warning about the bogus config when
we notice it (i.e., for all commands), but only die when the
command tries to use the work tree (by calling setup_work_tree).
So we now get:

  $ git status
  warning: core.bare and core.worktree do not make sense
  fatal: unable to set up work tree using invalid config

  $ git config --unset core.worktree
  warning: core.bare and core.worktree do not make sense

We have to update t1510 to accomodate this; it uses
symbolic-ref to check whether the configuration works or
not, but of course that command does not use the working
tree. Instead, we switch it to use `git status`, as it
requires a work-tree, does not need any special setup, and
is read-only (so a failure will not adversely affect further
tests).

In addition, we add a new test that checks the desired
behavior (i.e., that running ""git config"" with the bogus
config does in fact work).

Reported-by: SZEDER Gábor <szeder@ira.uka.de>
Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",36,data/crawl/git/hunk_3166.cpp,,,data/crawl/git/old_hunk_3166.cpp,data/crawl/git/new_hunk_3166.cpp,4,5,"die(""core.bare and core.worktree do not make sense"");","warning(""core.bare and core.worktree do not make sense"");","[""updateLog""]","[[""die""], [""warning""]]",[-2462890750161506518],5587,444960.0,2
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_3149.cpp,,,data/crawl/git/old_hunk_3149.cpp,data/crawl/git/new_hunk_3149.cpp,-1,83,,"fprintf_ln(stderr, ""    git pull <remote> <branch>"");","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""git"", ""pull"", ""remote"", ""branch""]]",[-22036620264356771374],5586,0.0,2
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_3149.cpp,,,data/crawl/git/old_hunk_3149.cpp,data/crawl/git/new_hunk_3149.cpp,-1,81,,"fprintf_ln(stderr, _(""See git-pull(1) for details.""));","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""_"", ""See"", ""git"", ""pull"", ""1"", ""for"", ""details""]]",[-11344509049249182285],5585,0.0,2
https://github.com/git/git/commit/44c175c7a46b3a0446e046bdaa566adb9e57d89d,18 Jun 2015,"pull: error on no merge candidates

Commit a8c9bef (pull: improve advice for unconfigured error case,
2009-10-05) fully established the current advices given by git-pull for
the different cases where git-fetch will not have anything marked for
merge:

1. We fetched from a specific remote, and a refspec was given, but it
   ended up not fetching anything. This is usually because the user
   provided a wildcard refspec which had no matches on the remote end.

2. We fetched from a non-default remote, but didn't specify a branch to
   merge. We can't use the configured one because it applies to the
   default remote, and thus the user must specify the branches to merge.

3. We fetched from the branch's or repo's default remote, but:

   a. We are not on a branch, so there will never be a configured branch
      to merge with.

   b. We are on a branch, but there is no configured branch to merge
      with.

4. We fetched from the branch's or repo's default remote, but the
   configured branch to merge didn't get fetched (either it doesn't
   exist, or wasn't part of the configured fetch refspec)

Re-implement the above behavior by implementing get_merge_heads() to
parse the heads in FETCH_HEAD for merging, and implementing
die_no_merge_candidates(), which will be called when FETCH_HEAD has no
heads for merging.

Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",113,data/crawl/git/hunk_3149.cpp,,,data/crawl/git/old_hunk_3149.cpp,data/crawl/git/new_hunk_3149.cpp,-1,80,,"fprintf_ln(stderr, _(""Please specify which branch you want to merge with.""));","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""_"", ""Please"", ""specify"", ""which"", ""branch"", ""you"", ""want"", ""to"", ""merge"", ""with""]]",[-19860310303735260842],5584,0.0,2
https://github.com/git/git/commit/b7b314711ad28b129e6c5916eee1f2036ffa94df,18 Jun 2015,"pull --rebase: error on no merge candidate cases

Tweak the error messages printed by die_no_merge_candidates() to take
into account that we may be ""rebasing against"" rather than ""merging
with"".

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_3139.cpp,,,data/crawl/git/old_hunk_3139.cpp,data/crawl/git/new_hunk_3139.cpp,-1,4,,"fprintf_ln(stderr, _(""Please specify which branch you want to rebase against.""));","[""addLog""]","[[], [""fprintf_ln"", ""stderr"", ""_"", ""Please"", ""specify"", ""which"", ""branch"", ""you"", ""want"", ""to"", ""rebase"", ""against""]]",[-12232148955813408543],5583,0.0,2
https://github.com/git/git/commit/ca194d50b84b53a0b711fef46d1a47657ec5da41,22 Jun 2015,"gpg: centralize printing signature buffers

The code to handle printing of signature data from a struct
signature_check is very similar between verify-commit and verify-tag.
Place this in a single function.  verify-tag retains its special case
behavior of printing the tag even when no valid signature is found.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_3121.cpp,,,data/crawl/git/old_hunk_3121.cpp,data/crawl/git/new_hunk_3121.cpp,-1,9,,"fputs(sigc->gpg_output, stderr);","[""addLog""]","[[], [""fputs"", ""sigc"", ""gpg_output"", ""stderr""]]",[-11122912199341481649],5582,0.0,2
https://github.com/git/git/commit/00a09d57eb8a041e6a6b0470c53533719c049bab,25 Jun 2015,"introduce ""extensions"" form of core.repositoryformatversion

Normally we try to avoid bumps of the whole-repository
core.repositoryformatversion field. However, it is
unavoidable if we want to safely change certain aspects of
git in a backwards-incompatible way (e.g., modifying the set
of ref tips that we must traverse to generate a list of
unreachable, safe-to-prune objects).

If we were to bump the repository version for every such
change, then any implementation understanding version `X`
would also have to understand `X-1`, `X-2`, and so forth,
even though the incompatibilities may be in orthogonal parts
of the system, and there is otherwise no reason we cannot
implement one without the other (or more importantly, that
the user cannot choose to use one feature without the other,
weighing the tradeoff in compatibility only for that
particular feature).

This patch documents the existing repositoryformatversion
strategy and introduces a new format, ""1"", which lets a
repository specify that it must run with an arbitrary set of
extensions. This can be used, for example:

 - to inform git that the objects should not be pruned based
   only on the reachability of the ref tips (e.g, because it
   has ""clone --shared"" children)

 - that the refs are stored in a format besides the usual
   ""refs"" and ""packed-refs"" directories

Because we bump to format ""1"", and because format ""1""
requires that a running git knows about any extensions
mentioned, we know that older versions of the code will not
do something dangerous when confronted with these new
formats.

For example, if the user chooses to use database storage for
refs, they may set the ""extensions.refbackend"" config to
""db"". Older versions of git will not understand format ""1""
and bail. Versions of git which understand ""1"" but do not
know about ""refbackend"", or which know about ""refbackend""
but not about the ""db"" backend, will refuse to run. This is
annoying, of course, but much better than the alternative of
claiming that there are no refs in the repository, or
writing to a location that other implementations will not
read.

Note that we are only defining the rules for format 1 here.
We do not ever write format 1 ourselves; it is a tool that
is meant to be used by users and future extensions to
provide safety with older implementations.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",162,data/crawl/git/hunk_3099.cpp,,,data/crawl/git/old_hunk_3099.cpp,data/crawl/git/new_hunk_3099.cpp,5,5,"die (""Expected git repo version <= %d, found %d"",
			     GIT_REPO_VERSION, repository_format_version);","die (""Expected git repo version <= %d, found %d"",
			     GIT_REPO_VERSION_READ, repository_format_version);","[""updateVariable""]","[[""GIT_REPO_VERSION""], [""GIT_REPO_VERSION_READ""]]",[-14611831872763511162],5581,0.0,2
https://github.com/git/git/commit/a5481a6c9438cbd9c246cfa59ff49c31a0926fb6,29 Jun 2015,"convert ""enum date_mode"" into a struct

In preparation for adding date modes that may carry extra
information beyond the mode itself, this patch converts the
date_mode enum into a struct.

Most of the conversion is fairly straightforward; we pass
the struct as a pointer and dereference the type field where
necessary. Locations that declare a date_mode can use a ""{}""
constructor.  However, the tricky case is where we use the
enum labels as constants, like:

  show_date(t, tz, DATE_NORMAL);

Ideally we could say:

  show_date(t, tz, &{ DATE_NORMAL });

but of course C does not allow that. Likewise, we cannot
cast the constant to a struct, because we need to pass an
actual address. Our options are basically:

  1. Manually add a ""struct date_mode d = { DATE_NORMAL }""
     definition to each caller, and pass ""&d"". This makes
     the callers uglier, because they sometimes do not even
     have their own scope (e.g., they are inside a switch
     statement).

  2. Provide a pre-made global ""date_normal"" struct that can
     be passed by address. We'd also need ""date_rfc2822"",
     ""date_iso8601"", and so forth. But at least the ugliness
     is defined in one place.

  3. Provide a wrapper that generates the correct struct on
     the fly. The big downside is that we end up pointing to
     a single global, which makes our wrapper non-reentrant.
     But show_date is already not reentrant, so it does not
     matter.

This patch implements 3, along with a minor macro to keep
the size of the callers sane.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",174,data/crawl/git/hunk_3089.cpp,,,data/crawl/git/old_hunk_3089.cpp,data/crawl/git/new_hunk_3089.cpp,2,2,"printf(""%s -> %s\n"",
			       *argv, show_date(t, tz, DATE_ISO8601));","printf(""%s -> %s\n"",
			       *argv, show_date(t, tz, DATE_MODE(ISO8601)));","[""updateVariable"", ""addVariable""]","[[""DATE_ISO8601""], [""DATE_MODE"", ""ISO8601""]]",[-3532210244771173083],5580,0.0,2
https://github.com/git/git/commit/b979d95027242455b10e6f566b0e96c5f30cc908,06 Jul 2015,"checkout: retire --to option

Now that ""git worktree add"" has achieved user-facing feature-parity with
""git checkout --to"", retire the latter.

Move the actual linked worktree creation functionality,
prepare_linked_checkout() and its helpers, verbatim from checkout.c to
worktree.c.

This effectively reverts changes to checkout.c by 529fef2 (checkout:
support checking out into a new working directory, 2014-11-30) with the
exception of merge_working_tree() and switch_branches() which still
require specialized knowledge that a the checkout is occurring in a
newly-created linked worktree (signaled to them by the private
GIT_CHECKOUT_NEW_WORKTREE environment variable).

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",312,data/crawl/git/hunk_3062.cpp,,,data/crawl/git/old_hunk_3062.cpp,data/crawl/git/new_hunk_3062.cpp,-1,106,,"die(_(""unable to resolve HEAD""));","[""addLog""]","[[], [""die"", ""_"", ""unable"", ""to"", ""resolve"", ""HEAD""]]",[17682279093956913104],5579,0.0,2
https://github.com/git/git/commit/b979d95027242455b10e6f566b0e96c5f30cc908,06 Jul 2015,"checkout: retire --to option

Now that ""git worktree add"" has achieved user-facing feature-parity with
""git checkout --to"", retire the latter.

Move the actual linked worktree creation functionality,
prepare_linked_checkout() and its helpers, verbatim from checkout.c to
worktree.c.

This effectively reverts changes to checkout.c by 529fef2 (checkout:
support checking out into a new working directory, 2014-11-30) with the
exception of merge_working_tree() and switch_branches() which still
require specialized knowledge that a the checkout is occurring in a
newly-created linked worktree (signaled to them by the private
GIT_CHECKOUT_NEW_WORKTREE environment variable).

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",312,data/crawl/git/hunk_3061.cpp,,,data/crawl/git/old_hunk_3061.cpp,data/crawl/git/new_hunk_3061.cpp,5,-1,"die(_(""no branch specified""));",,"[""removeLog""]","[[""die"", ""_"", ""no"", ""branch"", ""specified""], []]",[7769314262293877445],5578,0.0,2
https://github.com/git/git/commit/ab0b2c53ed853e34def18e7b84acd7da7e2ddd49,20 Jul 2015,"worktree: make --detach mutually exclusive with -b/-B

Be consistent with git-checkout which disallows this (not particularly
meaningful) combination.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",16,data/crawl/git/hunk_3050.cpp,,,data/crawl/git/old_hunk_3050.cpp,data/crawl/git/new_hunk_3050.cpp,4,4,"die(_(""-b and -B are mutually exclusive""));","die(_(""-b, -B, and --detach are mutually exclusive""));","[""updateContent""]","[[], [""detach""]]",[-6805829946687303077],5577,1237680.0,2
https://github.com/git/git/commit/ed197a6ab983783550bd0b0c71cb97d734f4cfaa,20 Jul 2015,"worktree: avoid resolving HEAD unnecessarily

Now that git-worktree sets HEAD explicitly to its final value via either
git-symbolic-ref or git-update-ref, rather than relying upon
git-checkout to do so, the ""hack"" for pacifying is_git_directory() with
a temporary HEAD, though still necessary, can be simplified.

Since the real HEAD is now populated with its proper final value, the
value of the temporary HEAD truly no longer matters, and any value which
looks like an object ID is good enough to satisfy is_git_directory().
Therefore, just set the temporary HEAD to a literal value rather than
going through the effort of resolving the current branch's HEAD.

Signed-off-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_3048.cpp,,,data/crawl/git/old_hunk_3048.cpp,data/crawl/git/new_hunk_3048.cpp,13,-1,"die(_(""unable to resolve HEAD""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""resolve"", ""HEAD""], []]",[-17682279093956913104],5576,10080.0,2
https://github.com/git/git/commit/a4c653dfcd05c987028b847092a1ee7e5d86a596,21 Jul 2015,"refs.c: add err arguments to reflog functions

Add an err argument to log_ref_setup that can explain the reason
for a failure. This then eliminates the need to manage errno through
this function since we can just add strerror(errno) to the err string
when meaningful. No callers relied on errno from this function for
anything else than the error message.

Also add err arguments to private functions write_ref_to_lockfile,
log_ref_write_1, commit_ref_update. This again eliminates the need to
manage errno in these functions.

Some error messages are slightly reordered.

Update of a patch by Ronnie Sahlberg.

Signed-off-by: Ronnie Sahlberg <sahlberg@google.com>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_3042.cpp,,,data/crawl/git/old_hunk_3042.cpp,data/crawl/git/new_hunk_3042.cpp,5,-1,"error(""Unable to append to %s"", log_file);",,"[""removeLog""]","[[""error"", ""Unable"", ""to"", ""append"", ""to"", ""%s"", ""log_file""], []]",[-13888337468491854211],5575,0.0,2
https://github.com/git/git/commit/a4c653dfcd05c987028b847092a1ee7e5d86a596,21 Jul 2015,"refs.c: add err arguments to reflog functions

Add an err argument to log_ref_setup that can explain the reason
for a failure. This then eliminates the need to manage errno through
this function since we can just add strerror(errno) to the err string
when meaningful. No callers relied on errno from this function for
anything else than the error message.

Also add err arguments to private functions write_ref_to_lockfile,
log_ref_write_1, commit_ref_update. This again eliminates the need to
manage errno in these functions.

Some error messages are slightly reordered.

Update of a patch by Ronnie Sahlberg.

Signed-off-by: Ronnie Sahlberg <sahlberg@google.com>
Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",141,data/crawl/git/hunk_3038.cpp,,,data/crawl/git/old_hunk_3038.cpp,data/crawl/git/new_hunk_3038.cpp,5,5,"error(""unable to write current sha1 into %s"", newrefname);","error(""unable to write current sha1 into %s: %s"", newrefname, err.buf);","[""updateContent"", ""addVariable""]","[[], [""%s"", ""err"", ""buf""]]",[-2719382075536049376],5574,0.0,2
https://github.com/git/git/commit/8e7768b2de8bfdf82cde565d2f42e8d7f91e74e0,24 Jul 2015,"rerere: refactor ""replay"" part of do_plain_rerere()

Extract the body of a loop that attempts to replay recorded
resolution for each conflicted path into a helper function, not
because I want to call it from multiple places later, but because
the logic has become too deeply nested and hard to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_3028.cpp,,,data/crawl/git/old_hunk_3028.cpp,data/crawl/git/new_hunk_3028.cpp,33,-1,"fprintf(stderr, ""Recorded resolution for '%s'.\n"", path);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Recorded"", ""resolution"", ""for"", ""%s"", ""\\n"", ""path""], []]",[10836597095334299385],5573,1850400.0,2
https://github.com/git/git/commit/8e7768b2de8bfdf82cde565d2f42e8d7f91e74e0,24 Jul 2015,"rerere: refactor ""replay"" part of do_plain_rerere()

Extract the body of a loop that attempts to replay recorded
resolution for each conflicted path into a helper function, not
because I want to call it from multiple places later, but because
the logic has become too deeply nested and hard to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_3028.cpp,,,data/crawl/git/old_hunk_3028.cpp,data/crawl/git/new_hunk_3028.cpp,21,-1,"fprintf(stderr,
					""Resolved '%s' using previous resolution.\n"",
					path);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Resolved"", ""%s"", ""using"", ""previous"", ""resolution"", ""\\n"", ""path""], []]",[12015661553728219539],5572,1850400.0,2
https://github.com/git/git/commit/8e7768b2de8bfdf82cde565d2f42e8d7f91e74e0,24 Jul 2015,"rerere: refactor ""replay"" part of do_plain_rerere()

Extract the body of a loop that attempts to replay recorded
resolution for each conflicted path into a helper function, not
because I want to call it from multiple places later, but because
the logic has become too deeply nested and hard to read.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",75,data/crawl/git/hunk_3027.cpp,,,data/crawl/git/old_hunk_3027.cpp,data/crawl/git/new_hunk_3027.cpp,-1,35,,"fprintf(stderr, ""Recorded resolution for '%s'.\n"", path);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Recorded"", ""resolution"", ""for"", ""%s"", ""\\n"", ""path""]]",[-10836597095334299385],5571,1850400.0,2
https://github.com/git/git/commit/d96a53996b6c02b96a9a2b4eed9eac4e9d661a38,31 Jul 2015,"sequencer: replace write_cherry_pick_head with update_ref

Now update_ref (via write_pseudoref) does almost exactly what
write_cherry_pick_head did, so we can remove write_cherry_pick_head
and just use update_ref.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",23,data/crawl/git/hunk_3012.cpp,,,data/crawl/git/old_hunk_3012.cpp,data/crawl/git/new_hunk_3012.cpp,3,3,"write_cherry_pick_head(commit, ""CHERRY_PICK_HEAD"");","update_ref(NULL, ""CHERRY_PICK_HEAD"", commit->object.sha1, NULL,
			   REF_NODEREF, UPDATE_REFS_DIE_ON_ERR);","[""updateLog"", ""removeVariable"", ""addVariable""]","[[""write_cherry_pick_head""], [""update_ref"", ""NULL"", ""object"", ""sha1"", ""NULL"", ""REF_NODEREF"", ""UPDATE_REFS_DIE_ON_ERR""]]",[-20021165565370786696],5570,0.0,2
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3010.cpp,,,data/crawl/git/old_hunk_3010.cpp,data/crawl/git/new_hunk_3010.cpp,-1,768,,"die(""parse_object_buffer failed on %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);","[""addLog""]","[[], [""die"", ""parse_object_buffer"", ""failed"", ""on"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""]]",[-14653190620770538035],5569,1625040.0,2
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3010.cpp,,,data/crawl/git/old_hunk_3010.cpp,data/crawl/git/new_hunk_3010.cpp,-1,765,,"die(""missing object %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);","[""addLog""]","[[], [""die"", ""missing"", ""object"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""]]",[-768659222033819720],5568,1625040.0,2
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3009.cpp,,,data/crawl/git/old_hunk_3009.cpp,data/crawl/git/new_hunk_3009.cpp,769,-1,"die(""parse_object_buffer failed on %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);",,"[""removeLog""]","[[""die"", ""parse_object_buffer"", ""failed"", ""on"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""], []]",[14653190620770538035],5567,1625040.0,2
https://github.com/git/git/commit/c95b758587021a0ee1a27836e7d4ce3f7d634f36,03 Aug 2015,"ref-filter: move code from 'for-each-ref'

Move most of the code from 'for-each-ref' to 'ref-filter' to make
it publicly available to other commands, this is to unify the code
of 'tag -l', 'branch -l' and 'for-each-ref' so that they can share
their implementations with each other.

Add 'ref-filter' to the Makefile, this completes the movement of code
from 'for-each-ref' to 'ref-filter'.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Reviewed-by: Matthieu Moy <Matthieu.Moy@imag.fr>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2153,data/crawl/git/hunk_3009.cpp,,,data/crawl/git/old_hunk_3009.cpp,data/crawl/git/new_hunk_3009.cpp,766,-1,"die(""missing object %s for %s"",
		    sha1_to_hex(ref->objectname), ref->refname);",,"[""removeLog""]","[[""die"", ""missing"", ""object"", ""%s"", ""for"", ""%s"", ""sha1_to_hex"", ""ref"", ""objectname"", ""ref"", ""refname""], []]",[768659222033819720],5566,1625040.0,2
https://github.com/git/git/commit/260eec292736388831958637eccdcf1a8f00e14d,05 Aug 2015,"wrapper: implement xfopen()

A common usage pattern of fopen() is to check if it succeeded, and die()
if it failed:

	FILE *fp = fopen(path, ""w"");
	if (!fp)
		die_errno(_(""could not open '%s' for writing""), path);

Implement a wrapper function xfopen() for the above, so that we can save
a few lines of code and make the die() messages consistent.

Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_2994.cpp,,,data/crawl/git/old_hunk_2994.cpp,data/crawl/git/new_hunk_2994.cpp,-1,20,,"die_errno(_(""could not open '%s' for reading""), path);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""path""]]",[2801591036031698434],5565,0.0,2
https://github.com/git/git/commit/260eec292736388831958637eccdcf1a8f00e14d,05 Aug 2015,"wrapper: implement xfopen()

A common usage pattern of fopen() is to check if it succeeded, and die()
if it failed:

	FILE *fp = fopen(path, ""w"");
	if (!fp)
		die_errno(_(""could not open '%s' for writing""), path);

Implement a wrapper function xfopen() for the above, so that we can save
a few lines of code and make the die() messages consistent.

Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_2994.cpp,,,data/crawl/git/old_hunk_2994.cpp,data/crawl/git/new_hunk_2994.cpp,-1,18,,"die_errno(_(""could not open '%s' for writing""), path);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""writing"", ""path""]]",[1848540835495779190],5564,0.0,2
https://github.com/git/git/commit/260eec292736388831958637eccdcf1a8f00e14d,05 Aug 2015,"wrapper: implement xfopen()

A common usage pattern of fopen() is to check if it succeeded, and die()
if it failed:

	FILE *fp = fopen(path, ""w"");
	if (!fp)
		die_errno(_(""could not open '%s' for writing""), path);

Implement a wrapper function xfopen() for the above, so that we can save
a few lines of code and make the die() messages consistent.

Helped-by: Jeff King <peff@peff.net>
Helped-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_2994.cpp,,,data/crawl/git/old_hunk_2994.cpp,data/crawl/git/new_hunk_2994.cpp,-1,16,,"die_errno(_(""could not open '%s' for reading and writing""), path);","[""addLog""]","[[], [""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""and"", ""writing"", ""path""]]",[-477628635128441935],5563,0.0,2
https://github.com/git/git/commit/240bfd2de9a7aec31240300ba1d7e89c59dbafe9,05 Aug 2015,"builtin-am: implement --resolved/--continue

Since 0c15cc9 (git-am: --resolved., 2005-11-16), git-am supported
resuming from a failed patch application. The user will manually apply
the patch, and the run git am --resolved which will then commit the
resulting index. Re-implement this feature by introducing am_resolve().

Since it makes no sense for the user to run am --resolved when there is
no session in progress, we error out in this case.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",72,data/crawl/git/hunk_2975.cpp,,,data/crawl/git/old_hunk_2975.cpp,data/crawl/git/new_hunk_2975.cpp,-1,12,,"printf_ln(_(""Applying: %.*s""), linelen(state->msg), state->msg);","[""addLog""]","[[], [""printf_ln"", ""_"", ""Applying"", ""%"", ""*s"", ""linelen"", ""state"", ""msg"", ""state"", ""msg""]]",[25433689015026522340],5562,0.0,2
https://github.com/git/git/commit/4f1b69617577309d361a006fc77d71a5cff7ec06,05 Aug 2015,"builtin-am: implement -k/--keep, --keep-non-patch

Since d1c5f2a (Add git-am, applymbox replacement., 2005-10-07),
git-am.sh supported the -k/--keep option to pass the -k option to
git-mailsplit.

Since f7e5ea1 (am: learn passing -b to mailinfo, 2012-01-16), git-am.sh
supported the --keep-non-patch option to pass the -b option to
git-mailsplit.

Re-implement these two options in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",50,data/crawl/git/hunk_2951.cpp,,,data/crawl/git/old_hunk_2951.cpp,data/crawl/git/new_hunk_2951.cpp,-1,14,,"die(""BUG: invalid value for state->keep"");","[""addLog""]","[[], [""die"", ""BUG"", ""invalid"", ""value"", ""for"", ""state"", ""keep""]]",[-17719395119467717847],5561,0.0,2
https://github.com/git/git/commit/9b646617b8b4894490a549e4db95c1303f40bd25,05 Aug 2015,"builtin-am: implement --[no-]scissors

Since 017678b (am/mailinfo: Disable scissors processing by default,
2009-08-26), git-am supported the --[no-]scissors option, passing it to
git-mailinfo.

Re-implement support for this option in builtin/am.c.

Since the default setting of --scissors in git-mailinfo can be
configured with mailinfo.scissors (and perhaps through other settings in
the future), to be safe we make an explicit distinction between
SCISSORS_UNSET, SCISSORS_TRUE and SCISSORS_FALSE.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_2949.cpp,,,data/crawl/git/old_hunk_2949.cpp,data/crawl/git/new_hunk_2949.cpp,-1,14,,"die(""BUG: invalid value for state->scissors"");","[""addLog""]","[[], [""die"", ""BUG"", ""invalid"", ""value"", ""for"", ""state"", ""scissors""]]",[-26749376130673065133],5560,0.0,2
https://github.com/git/git/commit/336108c1563c23e1af5b7b7e6fbe52f511c21748,05 Aug 2015,"builtin-am: support and auto-detect StGit series files

Since c574e68 (git-am foreign patch support: StGIT support, 2009-05-27),
git-am.sh is able to read a single StGit series file and, for each StGit
patch listed in the file, convert the StGit patch into a RFC2822 mail
patch suitable for parsing with git-mailinfo, and queue them in the
state directory for applying.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh is able to auto-detect StGit series
files by checking to see if the file starts with the string:

	# This series applies on GIT commit

Re-implement the above in builtin/am.c.

Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",59,data/crawl/git/hunk_2938.cpp,,,data/crawl/git/old_hunk_2938.cpp,data/crawl/git/new_hunk_2938.cpp,-1,30,,"error(_(""could not open '%s' for reading: %s""), *paths,
				strerror(errno));","[""addLog""]","[[], [""error"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""%s"", ""*paths"", ""strerror"", ""errno""]]",[29045762310171194774],5559,0.0,2
https://github.com/git/git/commit/94cd175cff196d2571bc2e17ad8e9f47ef4b3911,05 Aug 2015,"builtin-am: support and auto-detect mercurial patches

Since 0cfd112 (am: preliminary support for hg patches, 2011-08-29),
git-am.sh could convert mercurial patches to an RFC2822 mail patch
suitable for parsing with git-mailinfo, and queue them in the state
directory for application.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh was able to auto-detect mercurial
patches by checking if the file begins with the line:

	# HG changeset patch

Re-implement the above in builtin/am.c.

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_2935.cpp,,,data/crawl/git/old_hunk_2935.cpp,data/crawl/git/new_hunk_2935.cpp,-1,50,,"fprintf(out, ""\n%s\n"", sb.buf);","[""addLog""]","[[], [""fprintf"", ""out"", ""\\n%s\\n"", ""sb"", ""buf""]]",[-1596771735404660450],5558,0.0,2
https://github.com/git/git/commit/94cd175cff196d2571bc2e17ad8e9f47ef4b3911,05 Aug 2015,"builtin-am: support and auto-detect mercurial patches

Since 0cfd112 (am: preliminary support for hg patches, 2011-08-29),
git-am.sh could convert mercurial patches to an RFC2822 mail patch
suitable for parsing with git-mailinfo, and queue them in the state
directory for application.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh was able to auto-detect mercurial
patches by checking if the file begins with the line:

	# HG changeset patch

Re-implement the above in builtin/am.c.

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_2935.cpp,,,data/crawl/git/old_hunk_2935.cpp,data/crawl/git/new_hunk_2935.cpp,-1,27,,"error(_(""invalid Date line""));","[""addLog""]","[[], [""error"", ""_"", ""invalid"", ""Date"", ""line""]]",[-2692076971363451595],5557,0.0,2
https://github.com/git/git/commit/94cd175cff196d2571bc2e17ad8e9f47ef4b3911,05 Aug 2015,"builtin-am: support and auto-detect mercurial patches

Since 0cfd112 (am: preliminary support for hg patches, 2011-08-29),
git-am.sh could convert mercurial patches to an RFC2822 mail patch
suitable for parsing with git-mailinfo, and queue them in the state
directory for application.

Since 15ced75 (git-am foreign patch support: autodetect some patch
formats, 2009-05-27), git-am.sh was able to auto-detect mercurial
patches by checking if the file begins with the line:

	# HG changeset patch

Re-implement the above in builtin/am.c.

Helped-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Paul Tan <pyokagan@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_2935.cpp,,,data/crawl/git/old_hunk_2935.cpp,data/crawl/git/new_hunk_2935.cpp,-1,15,,"fprintf(out, ""From: %s\n"", str);","[""addLog""]","[[], [""fprintf"", ""out"", ""From"", ""%s\\n"", ""str""]]",[4197139587620904319],5556,0.0,2
https://github.com/git/git/commit/7eba6ce5c79447579689218d8dab59a8434fd7c7,10 Aug 2015,"prepare_tempfile_object(): new function, extracted from create_tempfile()

This makes the next step easier.

The old code used to use ""path"" to set the initial length of
tempfile->filename. This was not helpful because path was usually
relative whereas the value stored to filename will be absolute. So
just initialize the length to 0.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_2896.cpp,,,data/crawl/git/old_hunk_2896.cpp,data/crawl/git/new_hunk_2896.cpp,15,15,"die(""BUG: create_tempfile called for active object"");","die(""BUG: prepare_tempfile_object called for active object"");","[""updateContent""]","[[""create_tempfile""], [""prepare_tempfile_object""]]",[-496900719149196043],5555,0.0,2
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2885.cpp,,,data/crawl/git/old_hunk_2885.cpp,data/crawl/git/new_hunk_2885.cpp,25,23,"die_errno(_(""Could not write to %s""), head_file);","die_errno(_(""Could not write to %s""), git_path_head_file());","[""removeVariable"", ""addVariable""]","[[""head_file""], [""git_path_head_file""]]",[3668334893674024372],5554,0.0,2
https://github.com/git/git/commit/f932729cc7707390f4d6739be1573e93ceb9df22,10 Aug 2015,"memoize common git-path ""constant"" files

One of the most common uses of git_path() is to pass a
constant, like git_path(""MERGE_MSG""). This has two
drawbacks:

  1. The return value is a static buffer, and the lifetime
     is dependent on other calls to git_path, etc.

  2. There's no compile-time checking of the pathname. This
     is OK for a one-off (after all, we have to spell it
     correctly at least once), but many of these constant
     strings appear throughout the code.

This patch introduces a series of functions to ""memoize""
these strings, which are essentially globals for the
lifetime of the program. We compute the value once, take
ownership of the buffer, and return the cached value for
subsequent calls.  cache.h provides a helper macro for
defining these functions as one-liners, and defines a few
common ones for global use.

Using a macro is a little bit gross, but it does nicely
document the purpose of the functions. If we need to touch
them all later (e.g., because we learned how to change the
git_dir variable at runtime, and need to invalidate all of
the stored values), it will be much easier to have the
complete list.

Note that the shared-global functions have separate, manual
declarations. We could do something clever with the macros
(e.g., expand it to a declaration in some places, and a
declaration _and_ a definition in path.c). But there aren't
that many, and it's probably better to stay away from
too-magical macros.

Likewise, if we abandon the C preprocessor in favor of
generating these with a script, we could get much fancier.
E.g., normalizing ""FOO/BAR-BAZ"" into ""git_path_foo_bar_baz"".
But the small amount of saved typing is probably not worth
the resulting confusion to readers who want to grep for the
function's definition.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",270,data/crawl/git/hunk_2866.cpp,,,data/crawl/git/old_hunk_2866.cpp,data/crawl/git/new_hunk_2866.cpp,10,9,"die(""cannot open '%s' for reading"", merge_head_file);","die(""cannot open '%s' for reading"", git_path_merge_head());","[""removeVariable"", ""addVariable""]","[[""merge_head_file""], [""git_path_merge_head""]]",[-3753305004975964646],5553,0.0,2
https://github.com/git/git/commit/2c3aed1381f22494bc06fd66dec8292a296db10f,11 Aug 2015,"pseudoref: check return values from read_ref()

These codepaths attempt to compare the ""expected"" current value with
the actual current value, but did not check if we successfully read
the current value before comparison.

Signed-off-by: David Turner <dturner@twopensource.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",7,data/crawl/git/hunk_2858.cpp,,,data/crawl/git/old_hunk_2858.cpp,data/crawl/git/new_hunk_2858.cpp,-1,5,,"die(""could not read ref '%s'"", pseudoref);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""read"", ""ref"", ""%s"", ""pseudoref""]]",[-1123543038674990151],5552,0.0,2
https://github.com/git/git/commit/027771fcb153e0003bcb2d68e1838594a48b0161,19 Aug 2015,"submodule: allow erroneous values for the fetchRecurseSubmodules option

We should not die when reading the submodule config cache since the
user might not be able to get out of that situation when the
configuration is part of the history.

We should handle this condition later when the value is about to be
used.

Signed-off-by: Heiko Voigt <hvoigt@hvoigt.net>
Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",83,data/crawl/git/hunk_2845.cpp,,,data/crawl/git/old_hunk_2845.cpp,data/crawl/git/new_hunk_2845.cpp,14,-1,"die(""bad %s argument: %s"", opt, arg);",,"[""removeLog""]","[[""die"", ""bad"", ""%s"", ""argument"", ""%s"", ""opt"", ""arg""], []]",[5003021781308979205],5551,751680.0,2
https://github.com/git/git/commit/30261094b1f7fdcba3b7a1f396e43891cd998149,19 Aug 2015,"push: support signing pushes iff the server supports it

Add a new flag --sign=true (or --sign=false), which means the same
thing as the original --signed (or --no-signed).  Give it a third
value --sign=if-asked to tell push and send-pack to send a push
certificate if and only if the server advertised a push cert nonce.

If not, warn the user that their push may not be as secure as they
thought.

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/hunk_2842.cpp,,,data/crawl/git/old_hunk_2842.cpp,data/crawl/git/new_hunk_2842.cpp,9,-1,"die(""helper %s does not support --signed"", data->name);",,"[""removeLog""]","[[""die"", ""helper"", ""%s"", ""does"", ""not"", ""support"", ""signed"", ""data"", ""name""], []]",[14183710330991205327],5550,0.0,2
https://github.com/git/git/commit/30261094b1f7fdcba3b7a1f396e43891cd998149,19 Aug 2015,"push: support signing pushes iff the server supports it

Add a new flag --sign=true (or --sign=false), which means the same
thing as the original --signed (or --no-signed).  Give it a third
value --sign=if-asked to tell push and send-pack to send a push
certificate if and only if the server advertised a push cert nonce.

If not, warn the user that their push may not be as secure as they
thought.

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",177,data/crawl/git/hunk_2842.cpp,,,data/crawl/git/old_hunk_2842.cpp,data/crawl/git/new_hunk_2842.cpp,6,3,"die(""helper %s does not support dry-run"", data->name);","set_common_push_options(transport, data->name, flags);","[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""helper"", ""%s"", ""does"", ""not"", ""support"", ""dry"", ""run""], [""set_common_push_options"", ""transport"", ""flags""]]",[17622994009777697215],5549,0.0,2
https://github.com/git/git/commit/68c757f2199911005918aba45aa8ae0fecc72074,19 Aug 2015,"push: add a config option push.gpgSign for default signed pushes

Signed-off-by: Dave Borowitz <dborowitz@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",85,data/crawl/git/hunk_2836.cpp,,,data/crawl/git/old_hunk_2836.cpp,data/crawl/git/new_hunk_2836.cpp,-1,17,,"error(""Invalid value for '%s'"", k);","[""addLog""]","[[], [""error"", ""Invalid"", ""value"", ""for"", ""%s"", ""k""]]",[-11982133147611034495],5548,0.0,2
https://github.com/git/git/commit/add00ba2de971e0c5ba00f1f02b73c5534079d2c,03 Sep 2015,"date: make ""local"" orthogonal to date format

Most of our ""--date"" modes are about the format of the date:
which items we show and in what order. But ""--date=local"" is
a bit of an oddball. It means ""show the date in the normal
format, but using the local timezone"". The timezone we use
is orthogonal to the actual format, and there is no reason
we could not have ""localized iso8601"", etc.

This patch adds a ""local"" boolean field to ""struct
date_mode"", and drops the DATE_LOCAL element from the
date_mode_type enum (it's now just DATE_NORMAL plus
local=1). The new feature is accessible to users by adding
""-local"" to any date mode (e.g., ""iso-local""), and we retain
""local"" as an alias for ""default-local"" for backwards
compatibility.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: John Keeping <john@keeping.me.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",94,data/crawl/git/hunk_2823.cpp,,,data/crawl/git/old_hunk_2823.cpp,data/crawl/git/new_hunk_2823.cpp,-1,25,,"die(""unknown date format %s"", format);","[""addLog""]","[[], [""die"", ""unknown"", ""date"", ""format"", ""%s"", ""format""]]",[-9558725370580044714],5547,2084400.0,2
https://github.com/git/git/commit/ee8838d157761acf4cc38f2378277dc894c10eb0,08 Sep 2015,"submodule: rewrite `module_clone` shell function in C

This reimplements the helper function `module_clone` in shell
in C as `clone`. This functionality is needed for converting
`git submodule update` later on, which we want to add threading
to.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",210,data/crawl/git/hunk_2816.cpp,,,data/crawl/git/old_hunk_2816.cpp,data/crawl/git/new_hunk_2816.cpp,-1,84,,"die(_(""could not create directory '%s'""), path);","[""addLog""]","[[], [""die"", ""_"", ""could"", ""not"", ""create"", ""directory"", ""%s"", ""path""]]",[10030788180699552994],5546,0.0,2
https://github.com/git/git/commit/574e96a2418cce16934f2b6e20a0af5ff5f85c92,17 Sep 2015,"ref-filter: introduce ref_formatting_state and ref_formatting_stack

Introduce ref_formatting_state which will hold the formatted output
strbuf instead of directly printing to stdout. This will help us in
creating modifier atoms which modify the format specified before
printing to stdout.

Implement a stack machinery for ref_formatting_state, this allows us
to push and pop elements onto the stack. Whenever we pop an element
from the stack, the strbuf from that element is appended to the strbuf
of the next element on the stack, this will allow us to support
nesting of modifier atoms.

Rename some functions to reflect the changes made:
print_value() -> append_atom()
emit()        -> append_literal()

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",78,data/crawl/git/hunk_2811.cpp,,,data/crawl/git/old_hunk_2811.cpp,data/crawl/git/new_hunk_2811.cpp,24,-1,"fputs(sb.buf, stdout);",,"[""removeLog""]","[[""fputs"", ""sb"", ""buf"", ""stdout""], []]",[11880400360132269299],5545,32400.0,2
https://github.com/git/git/commit/ac4cc866c8cddbc25b5f213286a0269318dd2485,17 Sep 2015,"tag.c: use 'ref-filter' data structures

Make 'tag.c' use 'ref-filter' data structures and make changes to
support the new data structures. This is a part of the process
of porting 'tag.c' to use 'ref-filter' APIs.

This is a temporary step before porting 'tag.c' to use 'ref-filter'
completely. As this is a temporary step, most of the code
introduced here will be removed when 'tag.c' is ported over to use
'ref-filter' APIs.

Mentored-by: Christian Couder <christian.couder@gmail.com>
Mentored-by: Matthieu Moy <matthieu.moy@grenoble-inp.fr>
Signed-off-by: Karthik Nayak <karthik.188@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",106,data/crawl/git/hunk_2803.cpp,,,data/crawl/git/old_hunk_2803.cpp,data/crawl/git/new_hunk_2803.cpp,28,28,"printf(""%s\n"", filter.tags.items[i].string);","printf(""%s\n"", array.items[i]->refname);","[""updateVariable"", ""removeVariable""]","[[""filter"", ""tags"", ""string""], [""array"", ""refname""]]",[14276568734015348715],5544,0.0,2
https://github.com/git/git/commit/6343e2f6f271cf344ea8e7384342502faecaf37c,28 Sep 2015,Sync with 2.3.10,474,data/crawl/git/hunk_2731.cpp,,,data/crawl/git/old_hunk_2731.cpp,data/crawl/git/new_hunk_2731.cpp,-1,5,,"die(""unable to generate combined diff for %s"",
		    sha1_to_hex(parent));","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""generate"", ""combined"", ""diff"", ""for"", ""%s"", ""sha1_to_hex"", ""parent""]]",[-27694755973062753870],5543,0.0,2
https://github.com/git/git/commit/bb9c03b82add467592249a222018a150684a4c97,08 Oct 2015,"worktree: add 'list' command

'git worktree list' iterates through the worktree list, and outputs
details of the worktree including the path to the worktree, the currently
checked out revision and branch, and if the work tree is bare.  There is
also porcelain format option available.

Signed-off-by: Michael Rappazzo <rappazzo@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",226,data/crawl/git/hunk_2653.cpp,,,data/crawl/git/old_hunk_2653.cpp,data/crawl/git/new_hunk_2653.cpp,-1,35,,"printf(""%s\n"", sb.buf);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""sb"", ""buf""]]",[13724119099540645662],5542,2006640.0,2
https://github.com/git/git/commit/c6905e45f078530cda57690b0db6a7378dc1f794,21 Oct 2015,"mailinfo: libify

Move the bulk of the code from builtin/mailinfo.c to mailinfo.c
so that new callers can start calling mailinfo() directly.

Note that a few calls to exit() and die() need to be cleaned up
for the API to be truly useful, which will come in later steps.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2110,data/crawl/git/hunk_2639.cpp,,,data/crawl/git/old_hunk_2639.cpp,data/crawl/git/new_hunk_2639.cpp,-1,784,,"fprintf(stderr, ""Detected mismatched boundaries, ""
					""can't recover\n"");","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Detected"", ""mismatched"", ""boundaries"", ""can"", ""t"", ""recover\\n""]]",[-14807304276460994006],5541,0.0,2
https://github.com/git/git/commit/c6905e45f078530cda57690b0db6a7378dc1f794,21 Oct 2015,"mailinfo: libify

Move the bulk of the code from builtin/mailinfo.c to mailinfo.c
so that new callers can start calling mailinfo() directly.

Note that a few calls to exit() and die() need to be cleaned up
for the API to be truly useful, which will come in later steps.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",2110,data/crawl/git/hunk_2638.cpp,,,data/crawl/git/old_hunk_2638.cpp,data/crawl/git/new_hunk_2638.cpp,815,-1,"fprintf(stderr, ""Detected mismatched boundaries, ""
					""can't recover\n"");",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Detected"", ""mismatched"", ""boundaries"", ""can"", ""t"", ""recover\\n""], []]",[14807304276460994006],5540,0.0,2
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2529.cpp,,,data/crawl/git/old_hunk_2529.cpp,data/crawl/git/new_hunk_2529.cpp,2,2,"(fprintf(fp, ""%s	%s^{}\n"",
				sha1_to_hex(o->sha1), path);","(fprintf(fp, ""%s	%s^{}\n"",
				oid_to_hex(&o->oid), path);","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""o"", ""sha1""], [""oid_to_hex"", ""&o"", ""oid""]]",[11703065646517248481],5539,0.0,2
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2521.cpp,,,data/crawl/git/old_hunk_2521.cpp,data/crawl/git/new_hunk_2521.cpp,2,2,"die(""cannot simplify commit %s (because of %s)"",
			    sha1_to_hex(commit->object.sha1),
			    sha1_to_hex(p->object.sha1));","die(""cannot simplify commit %s (because of %s)"",
			    oid_to_hex(&commit->object.oid),
			    oid_to_hex(&p->object.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""commit"", ""sha1"", ""sha1_to_hex"", ""p"", ""sha1""], [""oid_to_hex"", ""&commit"", ""oid"", ""oid_to_hex"", ""&p"", ""oid""]]",[17768453367023733048],5538,0.0,2
https://github.com/git/git/commit/f2fd0760f62e79609fef7bfd7ecebb002e8e4ced,20 Nov 2015,"Convert struct object to object_id

struct object is one of the major data structures dealing with object
IDs.  Convert it to use struct object_id instead of an unsigned char
array.  Convert get_object_hash to refer to the new member as well.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Jeff King <peff@peff.net>",512,data/crawl/git/hunk_2516.cpp,,,data/crawl/git/old_hunk_2516.cpp,data/crawl/git/new_hunk_2516.cpp,2,2,"fprintf(stderr, ""Found bitmap for %s. %d bits / %08x checksum\n"",
			sha1_to_hex(root->sha1), (int)bm->bit_size, ewah_checksum(bm));","fprintf(stderr, ""Found bitmap for %s. %d bits / %08x checksum\n"",
			oid_to_hex(&root->oid), (int)bm->bit_size, ewah_checksum(bm));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""root"", ""sha1""], [""oid_to_hex"", ""&root"", ""oid""]]",[11448241357965484811],5537,0.0,2
https://github.com/git/git/commit/92bcbb9b338dd27f0fd4245525093c4bce867f3d,14 Dec 2015,"ident: loosen getpwuid error in non-strict mode

If the user has not specified an identity and we have to
turn to getpwuid() to find the username or gecos field, we
die immediately when getpwuid fails (e.g., because the user
does not exist). This is OK for making a commit, where we
have set IDENT_STRICT and would want to bail on bogus input.

But for something like a reflog, where the ident is ""best
effort"", it can be pain. For instance, even running ""git
clone"" with a UID that is not in /etc/passwd will result in
git barfing, just because we can't find an ident to put in
the reflog.

Instead of dying in xgetpwuid_self, we can instead return a
fallback value, and set a ""bogus"" flag. For the username in
an email, we already have a ""default_email_is_bogus"" flag.
For the name field, we introduce (and check) a matching
""default_name_is_bogus"" flag. As a bonus, this means you now
get the usual ""tell me who you are"" advice instead of just a
""no such user"" error.

No tests, as this is dependent on configuration outside of
git's control. However, I did confirm that it behaves
sensibly when I delete myself from the local /etc/passwd
(reflogs get written, and commits complain).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_2361.cpp,,,data/crawl/git/old_hunk_2361.cpp,data/crawl/git/new_hunk_2361.cpp,10,-1,"die(_(""unable to look up current user in the passwd file: %s""),
		    errno ? strerror(errno) : _(""no such user""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""look"", ""up"", ""current"", ""user"", ""in"", ""the"", ""passwd"", ""file"", ""%s"", ""errno"", ""strerror"", ""errno"", ""_"", ""no"", ""such"", ""user""], []]",[-31095348350985283265],5536,2880.0,2
https://github.com/git/git/commit/c553c72eed64b5f7316ce227f6d5d783eae6f2ed,16 Dec 2015,"run-command: add an asynchronous parallel child processor

This allows to run external commands in parallel with ordered output
on stderr.

If we run external commands in parallel we cannot pipe the output directly
to the our stdout/err as it would mix up. So each process's output will
flow through a pipe, which we buffer. One subprocess can be directly
piped to out stdout/err for a low latency feedback to the user.

Example:
Let's assume we have 5 submodules A,B,C,D,E and each fetch takes a
different amount of time as the different submodules vary in size, then
the output of fetches in sequential order might look like this:

 time -->
 output: |---A---| |-B-| |-------C-------| |-D-| |-E-|

When we schedule these submodules into maximal two parallel processes,
a schedule and sample output over time may look like this:

process 1: |---A---| |-D-| |-E-|

process 2: |-B-| |-------C-------|

output:    |---A---|B|---C-------|DE

So A will be perceived as it would run normally in the single child
version. As B has finished by the time A is done, we can dump its whole
progress buffer on stderr, such that it looks like it finished in no
time. Once that is done, C is determined to be the visible child and
its progress will be reported in real time.

So this way of output is really good for human consumption, as it only
changes the timing, not the actual output.

For machine consumption the output needs to be prepared in the tasks,
by either having a prefix per line or per block to indicate whose tasks
output is displayed, because the output order may not follow the
original sequential ordering:

 |----A----| |--B--| |-C-|

will be scheduled to be all parallel:

process 1: |----A----|
process 2: |--B--|
process 3: |-C-|
output:    |----A----|CB

This happens because C finished before B did, so it will be queued for
output before B.

To detect when a child has finished executing, we check interleaved
with other actions (such as checking the liveliness of children or
starting new processes) whether the stderr pipe still exists. Once a
child closed its stderr stream, we assume it is terminating very soon,
and use `finish_command()` from the single external process execution
interface to collect the exit status.

By maintaining the strong assumption of stderr being open until the
very end of a child process, we can avoid other hassle such as an
implementation using `waitpid(-1)`, which is not implemented in Windows.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",523,data/crawl/git/hunk_2352.cpp,,,data/crawl/git/old_hunk_2352.cpp,data/crawl/git/new_hunk_2352.cpp,-1,233,,"fputs(pp->children[i].err.buf, stderr);","[""addLog""]","[[], [""fputs"", ""pp"", ""children[i]"", ""err"", ""buf"", ""stderr""]]",[-9220945004933533788],5535,0.0,2
https://github.com/git/git/commit/c553c72eed64b5f7316ce227f6d5d783eae6f2ed,16 Dec 2015,"run-command: add an asynchronous parallel child processor

This allows to run external commands in parallel with ordered output
on stderr.

If we run external commands in parallel we cannot pipe the output directly
to the our stdout/err as it would mix up. So each process's output will
flow through a pipe, which we buffer. One subprocess can be directly
piped to out stdout/err for a low latency feedback to the user.

Example:
Let's assume we have 5 submodules A,B,C,D,E and each fetch takes a
different amount of time as the different submodules vary in size, then
the output of fetches in sequential order might look like this:

 time -->
 output: |---A---| |-B-| |-------C-------| |-D-| |-E-|

When we schedule these submodules into maximal two parallel processes,
a schedule and sample output over time may look like this:

process 1: |---A---| |-D-| |-E-|

process 2: |-B-| |-------C-------|

output:    |---A---|B|---C-------|DE

So A will be perceived as it would run normally in the single child
version. As B has finished by the time A is done, we can dump its whole
progress buffer on stderr, such that it looks like it finished in no
time. Once that is done, C is determined to be the visible child and
its progress will be reported in real time.

So this way of output is really good for human consumption, as it only
changes the timing, not the actual output.

For machine consumption the output needs to be prepared in the tasks,
by either having a prefix per line or per block to indicate whose tasks
output is displayed, because the output order may not follow the
original sequential ordering:

 |----A----| |--B--| |-C-|

will be scheduled to be all parallel:

process 1: |----A----|
process 2: |--B--|
process 3: |-C-|
output:    |----A----|CB

This happens because C finished before B did, so it will be queued for
output before B.

To detect when a child has finished executing, we check interleaved
with other actions (such as checking the liveliness of children or
starting new processes) whether the stderr pipe still exists. Once a
child closed its stderr stream, we assume it is terminating very soon,
and use `finish_command()` from the single external process execution
interface to collect the exit status.

By maintaining the strong assumption of stderr being open until the
very end of a child process, we can avoid other hassle such as an
implementation using `waitpid(-1)`, which is not implemented in Windows.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",523,data/crawl/git/hunk_2352.cpp,,,data/crawl/git/old_hunk_2352.cpp,data/crawl/git/new_hunk_2352.cpp,-1,223,,"die_errno(""read"");","[""addLog""]","[[], [""die_errno"", ""read""]]",[-12577447827504150922],5534,776880.0,2
https://github.com/git/git/commit/c553c72eed64b5f7316ce227f6d5d783eae6f2ed,16 Dec 2015,"run-command: add an asynchronous parallel child processor

This allows to run external commands in parallel with ordered output
on stderr.

If we run external commands in parallel we cannot pipe the output directly
to the our stdout/err as it would mix up. So each process's output will
flow through a pipe, which we buffer. One subprocess can be directly
piped to out stdout/err for a low latency feedback to the user.

Example:
Let's assume we have 5 submodules A,B,C,D,E and each fetch takes a
different amount of time as the different submodules vary in size, then
the output of fetches in sequential order might look like this:

 time -->
 output: |---A---| |-B-| |-------C-------| |-D-| |-E-|

When we schedule these submodules into maximal two parallel processes,
a schedule and sample output over time may look like this:

process 1: |---A---| |-D-| |-E-|

process 2: |-B-| |-------C-------|

output:    |---A---|B|---C-------|DE

So A will be perceived as it would run normally in the single child
version. As B has finished by the time A is done, we can dump its whole
progress buffer on stderr, such that it looks like it finished in no
time. Once that is done, C is determined to be the visible child and
its progress will be reported in real time.

So this way of output is really good for human consumption, as it only
changes the timing, not the actual output.

For machine consumption the output needs to be prepared in the tasks,
by either having a prefix per line or per block to indicate whose tasks
output is displayed, because the output order may not follow the
original sequential ordering:

 |----A----| |--B--| |-C-|

will be scheduled to be all parallel:

process 1: |----A----|
process 2: |--B--|
process 3: |-C-|
output:    |----A----|CB

This happens because C finished before B did, so it will be queued for
output before B.

To detect when a child has finished executing, we check interleaved
with other actions (such as checking the liveliness of children or
starting new processes) whether the stderr pipe still exists. Once a
child closed its stderr stream, we assume it is terminating very soon,
and use `finish_command()` from the single external process execution
interface to collect the exit status.

By maintaining the strong assumption of stderr being open until the
very end of a child process, we can avoid other hassle such as an
implementation using `waitpid(-1)`, which is not implemented in Windows.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",523,data/crawl/git/hunk_2352.cpp,,,data/crawl/git/old_hunk_2352.cpp,data/crawl/git/new_hunk_2352.cpp,-1,147,,"fputs(pp->buffered_output.buf, stderr);","[""addLog""]","[[], [""fputs"", ""pp"", ""buffered_output"", ""buf"", ""stderr""]]",[-5638998729183578087],5533,0.0,2
https://github.com/git/git/commit/b9badadd06ae307c5e1e0e7c36985a1360cabc22,29 Dec 2015,"create_symref: modernize variable names

Once upon a time, create_symref() was used only to point
HEAD at a branch name, and the variable names reflect that
(e.g., calling the path git_HEAD). However, it is much more
generic these days (and has been for some time). Let's
update the variable names to make it easier to follow:

  - `ref_target` is now just `refname`. This is closer to
    the `ref` that is already in `cache.h`, but with the
    extra twist that ""name"" makes it clear this is the name
    and not a ref struct. Dropping ""target"" hopefully makes
    it clear that we are talking about the symref itself,
    not what it points to.

  - `git_HEAD` is now `ref_path`; the on-disk path
    corresponding to `ref`.

  - `refs_heads_master` is now just `target`; i.e., what the
    symref points at. This term also matches what is in
    the symlink(2) manpage (at least on Linux).

  - the buffer to hold the symref file's contents was simply
    called `ref`. It's now `buf` (admittedly also generic,
    but at least not actively introducing confusion with the
    other variable holding the refname).

Signed-off-by: Jeff King <peff@peff.net>
Reviewed-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_2346.cpp,,,data/crawl/git/old_hunk_2346.cpp,data/crawl/git/new_hunk_2346.cpp,17,16,"error(""unable to create directory for %s"", git_HEAD);","error(""unable to create directory for %s"", ref_path);","[""updateVariable""]","[[""git_HEAD""], [""ref_path""]]",[14208840960546651158],5532,0.0,2
https://github.com/git/git/commit/4be49d756894daca0e8a4477d36c6ed1096ccddc,12 Jan 2016,"checkout,clone: check return value of create_symref

It's unlikely that we would fail to create or update a
symbolic ref (especially HEAD), but if we do, we should
notice and complain. Note that there's no need to give more
details in our error message; create_symref will already
have done so.

While we're here, let's also fix a minor memory leak in
clone.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",20,data/crawl/git/hunk_2340.cpp,,,data/crawl/git/old_hunk_2340.cpp,data/crawl/git/new_hunk_2340.cpp,-1,4,,"die(""unable to update HEAD"");","[""addLog""]","[[], [""die"", ""unable"", ""to"", ""update"", ""HEAD""]]",[5605959022436879452],5531,0.0,2
https://github.com/git/git/commit/0d0bac67ce3b3f2301702573f6acc100798d7edd,01 Feb 2016,"transport: drop support for git-over-rsync

The git-over-rsync protocol is inefficient and broken, and
has been for a long time. It transfers way more objects than
it needs (grabbing all of the remote's ""objects/"",
regardless of which objects we need). It does its own ad-hoc
parsing of loose and packed refs from the remote, but
doesn't properly override packed refs with loose ones,
leading to garbage results (e.g., expecting the other side
to have an object pointed to by a stale packed-refs entry,
or complaining that the other side has two copies of the
refs[1]).

This latter breakage means that nobody could have
successfully pulled from a moderately active repository
since cd547b4 (fetch/push: readd rsync support, 2007-10-01).

We never made an official deprecation notice in the release
notes for git's rsync protocol, but the tutorial has marked
it as such since 914328a (Update tutorial., 2005-08-30).
And on the mailing list as far back as Oct 2005, we can find
Junio mentioning it as having ""been deprecated for quite
some time.""[2,3,4]. So it was old news then; cogito had
deprecated the transport in July of 2005[5] (though it did
come back briefly when Linus broke git-http-pull!).

Of course some people professed their love of rsync through
2006, but Linus clarified in his usual gentle manner[6]:

  > Thanks!  This is why I still use rsync, even though
  > everybody and their mother tells me ""Linus says rsync is
  > deprecated.""

  No. You're using rsync because you're actively doing
  something _wrong_.

The deprecation sentiment was reinforced in 2008, with a
mention that cloning via rsync is broken (with no fix)[7].

Even the commit porting rsync over to C from shell (cd547b4)
lists it as deprecated! So between the 10 years of informal
warnings, and the fact that it has been severely broken
since 2007, it's probably safe to simply remove it without
further deprecation warnings.

[1] http://article.gmane.org/gmane.comp.version-control.git/285101
[2] http://article.gmane.org/gmane.comp.version-control.git/10093
[3] http://article.gmane.org/gmane.comp.version-control.git/17734
[4] http://article.gmane.org/gmane.comp.version-control.git/18911
[5] http://article.gmane.org/gmane.comp.version-control.git/5617
[6] http://article.gmane.org/gmane.comp.version-control.git/19354
[7] http://article.gmane.org/gmane.comp.version-control.git/103635

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",405,data/crawl/git/hunk_2300.cpp,,,data/crawl/git/old_hunk_2300.cpp,data/crawl/git/new_hunk_2300.cpp,40,-1,"die (""Could not run rsync to get refs"");",,"[""removeLog""]","[[""die"", ""Could"", ""not"", ""run"", ""rsync"", ""to"", ""get"", ""refs""], []]",[1680571651316806381],5530,0.0,2
https://github.com/git/git/commit/0d0bac67ce3b3f2301702573f6acc100798d7edd,01 Feb 2016,"transport: drop support for git-over-rsync

The git-over-rsync protocol is inefficient and broken, and
has been for a long time. It transfers way more objects than
it needs (grabbing all of the remote's ""objects/"",
regardless of which objects we need). It does its own ad-hoc
parsing of loose and packed refs from the remote, but
doesn't properly override packed refs with loose ones,
leading to garbage results (e.g., expecting the other side
to have an object pointed to by a stale packed-refs entry,
or complaining that the other side has two copies of the
refs[1]).

This latter breakage means that nobody could have
successfully pulled from a moderately active repository
since cd547b4 (fetch/push: readd rsync support, 2007-10-01).

We never made an official deprecation notice in the release
notes for git's rsync protocol, but the tutorial has marked
it as such since 914328a (Update tutorial., 2005-08-30).
And on the mailing list as far back as Oct 2005, we can find
Junio mentioning it as having ""been deprecated for quite
some time.""[2,3,4]. So it was old news then; cogito had
deprecated the transport in July of 2005[5] (though it did
come back briefly when Linus broke git-http-pull!).

Of course some people professed their love of rsync through
2006, but Linus clarified in his usual gentle manner[6]:

  > Thanks!  This is why I still use rsync, even though
  > everybody and their mother tells me ""Linus says rsync is
  > deprecated.""

  No. You're using rsync because you're actively doing
  something _wrong_.

The deprecation sentiment was reinforced in 2008, with a
mention that cloning via rsync is broken (with no fix)[7].

Even the commit porting rsync over to C from shell (cd547b4)
lists it as deprecated! So between the 10 years of informal
warnings, and the fact that it has been severely broken
since 2007, it's probably safe to simply remove it without
further deprecation warnings.

[1] http://article.gmane.org/gmane.comp.version-control.git/285101
[2] http://article.gmane.org/gmane.comp.version-control.git/10093
[3] http://article.gmane.org/gmane.comp.version-control.git/17734
[4] http://article.gmane.org/gmane.comp.version-control.git/18911
[5] http://article.gmane.org/gmane.comp.version-control.git/5617
[6] http://article.gmane.org/gmane.comp.version-control.git/19354
[7] http://article.gmane.org/gmane.comp.version-control.git/103635

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",405,data/crawl/git/hunk_2300.cpp,,,data/crawl/git/old_hunk_2300.cpp,data/crawl/git/new_hunk_2300.cpp,25,-1,"die_errno (""Could not make temporary directory"");",,"[""removeLog""]","[[""die_errno"", ""Could"", ""not"", ""make"", ""temporary"", ""directory""], []]",[-2744670522554534102],5529,0.0,2
https://github.com/git/git/commit/aac4fac1689f7d1414523d2ac96f1c737ee53b71,10 Feb 2016,"get_sha1: don't die() on bogus search strings

The get_sha1() function generally returns an error code
rather than dying, and we sometimes speculatively call it
with something that may be a revision or a pathspec, in
order to see which one it might be.

If it sees a bogus "":/"" search string, though, it complains,
without giving the caller the opportunity to recover. We can
demonstrate this in t6133 by looking for "":/*.t"", which
should mean ""*.t at the root of the tree"", but instead dies
because of the invalid regex (the ""*"" has nothing to operate
on).

We can fix this by returning an error rather than calling
die(). Unfortunately, the tradeoff is that the error message
is slightly worse in cases where we _do_ know we have a rev.
E.g., running ""git log ':/*.t' --"" before yielded:

  fatal: Invalid search pattern: *.t

and now we get only:

  fatal: bad revision ':/*.t'

There's not a simple way to fix this short of passing a
""quiet"" flag all the way through the get_sha1() stack.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_2293.cpp,,,data/crawl/git/old_hunk_2293.cpp,data/crawl/git/new_hunk_2293.cpp,3,-1,"die (""Invalid search pattern: %s"", prefix);",,"[""removeLog""]","[[""die"", ""Invalid"", ""search"", ""pattern"", ""%s"", ""prefix""], []]",[23941926938155349998],5528,0.0,2
https://github.com/git/git/commit/fd935cc7e8e2fdf7ad837dc74509c75877a489ba,17 Feb 2016,"ref-filter: introduce color_atom_parser()

Introduce color_atom_parser() which will parse a ""color"" atom and
store its color in the ""used_atom"" structure for further usage in
populate_value().

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_2280.cpp,,,data/crawl/git/old_hunk_2280.cpp,data/crawl/git/new_hunk_2280.cpp,9,-1,"die(_(""unable to parse format""));",,"[""removeLog""]","[[""die"", ""_"", ""unable"", ""to"", ""parse"", ""format""], []]",[-2440638559342948354],5527,142560.0,2
https://github.com/git/git/commit/fd935cc7e8e2fdf7ad837dc74509c75877a489ba,17 Feb 2016,"ref-filter: introduce color_atom_parser()

Introduce color_atom_parser() which will parse a ""color"" atom and
store its color in the ""used_atom"" structure for further usage in
populate_value().

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_2279.cpp,,,data/crawl/git/old_hunk_2279.cpp,data/crawl/git/new_hunk_2279.cpp,-1,13,,"die(_(""expected format: %%(color:<color>)""));","[""addLog""]","[[], [""die"", ""_"", ""expected"", ""format"", ""%%"", ""color"", ""color""]]",[25987670656866354910],5526,110160.0,2
https://github.com/git/git/commit/5bd881d998d6475b8a866af00b1a4d4e6b04c2cc,17 Feb 2016,"ref-filter: introduce align_atom_parser()

Introduce align_atom_parser() which will parse an 'align' atom and
store the required alignment position and width in the 'used_atom'
structure for further usage in populate_value().

Since this patch removes the last usage of match_atom_name(), remove
the function from ref-filter.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2277.cpp,,,data/crawl/git/old_hunk_2277.cpp,data/crawl/git/new_hunk_2277.cpp,-1,29,,"die(_(""positive width expected with the %%(align) atom""));","[""addLog""]","[[], [""die"", ""_"", ""positive"", ""width"", ""expected"", ""with"", ""the"", ""%%"", ""align"", ""atom""]]",[7314779664947736824],5525,110160.0,2
https://github.com/git/git/commit/5bd881d998d6475b8a866af00b1a4d4e6b04c2cc,17 Feb 2016,"ref-filter: introduce align_atom_parser()

Introduce align_atom_parser() which will parse an 'align' atom and
store the required alignment position and width in the 'used_atom'
structure for further usage in populate_value().

Since this patch removes the last usage of match_atom_name(), remove
the function from ref-filter.c.

Helped-by: Eric Sunshine <sunshine@sunshineco.com>
Helped-by: Jeff King <peff@peff.net>
Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Karthik Nayak <Karthik.188@gmail.com>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2277.cpp,,,data/crawl/git/old_hunk_2277.cpp,data/crawl/git/new_hunk_2277.cpp,-1,11,,"die(_(""expected format: %%(align:<width>,<position>)""));","[""addLog""]","[[], [""die"", ""_"", ""expected"", ""format"", ""%%"", ""align"", ""width"", ""position""]]",[18195138398036037474],5524,110160.0,2
https://github.com/git/git/commit/473166b99078a2724b4fcda11a6a5327b9af60da,22 Feb 2016,"config: add 'origin_type' to config_source struct

Use the config origin_type to print more detailed error messages that
inform the user about the origin of a config error (file, stdin, blob).

Helped-by: Ramsay Jones <ramsay@ramsayjones.plus.com>
Signed-off-by: Lars Schneider <larsxschneider@gmail.com>
Acked-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/hunk_2265.cpp,,,data/crawl/git/old_hunk_2265.cpp,data/crawl/git/new_hunk_2265.cpp,3,3,"die(_(""bad config file line %d in %s""), cf->linenr, cf->name);","die(_(""bad config line %d in %s %s""), cf->linenr, cf->origin_type, cf->name);","[""updateContent"", ""addVariable""]","[[""file""], [""%s"", ""origin_type"", ""cf""]]",[-4657385442190307757],5523,0.0,2
https://github.com/git/git/commit/c397debf3d046713ffd040f2c7da5e6921121ce8,22 Feb 2016,"remote: die on config error when manipulating remotes

When manipulating remotes we try to set various configuration
values without checking if the values were persisted correctly,
possibly leaving the remote in an inconsistent state.

Fix this issue by dying early and notifying the user about the
error.

Signed-off-by: Patrick Steinhardt <ps@pks.im>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",39,data/crawl/git/hunk_2254.cpp,,,data/crawl/git/old_hunk_2254.cpp,data/crawl/git/new_hunk_2254.cpp,4,-1,"error(_(""Could not remove config section '%s'""), buf.buf);",,"[""removeLog""]","[[""error"", ""_"", ""Could"", ""not"", ""remove"", ""config"", ""section"", ""%s"", ""buf"", ""buf""], []]",[-24017358700439513473],5522,460800.0,2
https://github.com/git/git/commit/e7792a74bcf7fcd554b4546fc91122b8c2af7d75,22 Feb 2016,"harden REALLOC_ARRAY and xcalloc against size_t overflow

REALLOC_ARRAY inherently involves a multiplication which can
overflow size_t, resulting in a much smaller buffer than we
think we've allocated. We can easily harden it by using
st_mult() to check for overflow.  Likewise, we can add
ALLOC_ARRAY to do the same thing for xmalloc calls.

xcalloc() should already be fine, because it takes the two
factors separately, assuming the system calloc actually
checks for overflow. However, before we even hit the system
calloc(), we do our memory_limit_check, which involves a
multiplication. Let's check for overflow ourselves so that
this limit cannot be bypassed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_2250.cpp,,,data/crawl/git/old_hunk_2250.cpp,data/crawl/git/new_hunk_2250.cpp,-1,4,,"die(""data too large to fit into virtual memory space"");","[""addLog""]","[[], [""die"", ""data"", ""too"", ""large"", ""to"", ""fit"", ""into"", ""virtual"", ""memory"", ""space""]]",[-22484717587841981737],5521,1596960.0,2
https://github.com/git/git/commit/638fa623d5b5fb392a062edf61ccf086d35ab26b,25 Feb 2016,"git config: report when trying to modify a non-existing repo config

It is a pilot error to call `git config section.key value` outside of
any Git worktree. The message

	error: could not lock config file .git/config: No such file or
	directory

is not very helpful in that situation, though. Let's print a helpful
message instead.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_2242.cpp,,,data/crawl/git/old_hunk_2242.cpp,data/crawl/git/new_hunk_2242.cpp,-1,4,,"die(""not in a git directory"");","[""addLog""]","[[], [""die"", ""not"", ""in"", ""a"", ""git"", ""directory""]]",[-611552826039058093],5520,1794960.0,2
https://github.com/git/git/commit/fc7d47f0dd4f041af2ed2004700f18b635f3b204,29 Feb 2016,"rev-parse: let some options run outside repository

Once upon a time, you could use ""--local-env-vars"" and
""--resolve-git-dir"" outside of any git repository, but they
had to come first on the command line. Commit 68889b4
(rev-parse: remove restrictions on some options, 2013-07-21)
put them into the normal option-parsing loop, fixing the
latter. But it inadvertently broke the former, as we call
setup_git_directory() before starting that loop.

We can note that those options don't care even conditionally
about whether we are in a git repo. So it's fine if we
simply wait to setup the repo until we see an option that
needs it.

However, there is one special exception we should make:
historically, rev-parse will set up the repository and read
config even if there are _no_ options. Some of the
tests in t1300 rely on this to check ""git -c $config""
parsing. That's not mirroring real-world use, and we could
tweak the test.  But t0002 uses a bare ""git rev-parse"" to
check ""are we in a git repository?"". It's plausible that
real-world scripts are relying on this.

So let's cover this case specially, and treat an option-less
""rev-parse"" as ""see if we're in a repo"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_2233.cpp,,,data/crawl/git/old_hunk_2233.cpp,data/crawl/git/new_hunk_2233.cpp,-1,22,,"die(""--resolve-git-dir requires an argument"");","[""addLog""]","[[], [""die"", ""resolve"", ""git"", ""dir"", ""requires"", ""an"", ""argument""]]",[-18522906862445977723],5519,548640.0,2
https://github.com/git/git/commit/fc7d47f0dd4f041af2ed2004700f18b635f3b204,29 Feb 2016,"rev-parse: let some options run outside repository

Once upon a time, you could use ""--local-env-vars"" and
""--resolve-git-dir"" outside of any git repository, but they
had to come first on the command line. Commit 68889b4
(rev-parse: remove restrictions on some options, 2013-07-21)
put them into the normal option-parsing loop, fixing the
latter. But it inadvertently broke the former, as we call
setup_git_directory() before starting that loop.

We can note that those options don't care even conditionally
about whether we are in a git repo. So it's fine if we
simply wait to setup the repo until we see an option that
needs it.

However, there is one special exception we should make:
historically, rev-parse will set up the repository and read
config even if there are _no_ options. Some of the
tests in t1300 rely on this to check ""git -c $config""
parsing. That's not mirroring real-world use, and we could
tweak the test.  But t0002 uses a bare ""git rev-parse"" to
check ""are we in a git repository?"". It's plausible that
real-world scripts are relying on this.

So let's cover this case specially, and treat an option-less
""rev-parse"" as ""see if we're in a repo"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",54,data/crawl/git/hunk_2233.cpp,,,data/crawl/git/old_hunk_2233.cpp,data/crawl/git/new_hunk_2233.cpp,-1,16,,"printf(""%s\n"", local_repo_env[i]);","[""addLog""]","[[], [""printf"", ""%s\\n"", ""local_repo_env[i]""]]",[17023608486125221001],5518,1580400.0,2
https://github.com/git/git/commit/cdc04b65b4bc8094e082ac65a7dce75a7a990163,01 Mar 2016,"submodule helper: remove double 'fatal: ' prefix

The prefix is added by die(...), so we don't have to do it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_2211.cpp,,,data/crawl/git/old_hunk_2211.cpp,data/crawl/git/new_hunk_2211.cpp,3,3,"die(_(""fatal: submodule--helper subcommand must be ""
		      ""called with a subcommand""));","die(_(""submodule--helper subcommand must be ""
		      ""called with a subcommand""));","[""updateContent""]","[[""fatal""], []]",[4947173928198612933],5517,0.0,2
https://github.com/git/git/commit/bfee614a2f5838e03378888d78e8247b8400d5ce,03 Mar 2016,"index-pack: add a helper function to derive .idx/.keep filename

These are automatically named by replacing .pack suffix in the
name of the packfile.  Add a small helper to do so, as I'll be
adding another one soonish.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",35,data/crawl/git/hunk_2208.cpp,,,data/crawl/git/old_hunk_2208.cpp,data/crawl/git/new_hunk_2208.cpp,6,-1,"die(_(""packfile name '%s' does not end with '.pack'""),
			    pack_name);",,"[""removeLog""]","[[""die"", ""_"", ""packfile"", ""name"", ""%s"", ""does"", ""not"", ""end"", ""with"", ""pack"", ""pack_name""], []]",[9648669204466474405],5516,0.0,2
https://github.com/git/git/commit/c0a5423b6f09f0c08749697b8d2860f956e905e9,15 Mar 2016,"rerere: delay the recording of preimage

We record the preimage only when there is no directory to record the
conflict we encountered, i.e. when $GIT_DIR/rr-cache/$ID does not
exist.  As the plan is to allow multiple <preimage,postimage> pairs
as variants for the same conflict ID eventually, this logic needs to
go.

As the first step in that direction, stop the ""did we create the
directory?  Then we record the preimage"" logic.  Instead, we record
if a preimage does not exist when we saw a conflict in a path.  Also
make sure that we remove a stale postimage, which most likely is
totally unrelated to the resolution of this new conflict, when we
create a new preimage under $ID when $GIT_DIR/rr-cache/$ID already
exists.

In later patches, we will further update this logic to be ""do we
have <preimage,postimage> pair that cleanly resolve the current
conflicts?  If not, record a new preimage as a new variant"", but
that does not happen at this stage yet.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_2198.cpp,,,data/crawl/git/old_hunk_2198.cpp,data/crawl/git/new_hunk_2198.cpp,26,-1,"fprintf(stderr, ""Recorded preimage for '%s'\n"", path);",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""Recorded"", ""preimage"", ""for"", ""%s"", ""\\n"", ""path""], []]",[14581070528694136707],5515,2019600.0,2
https://github.com/git/git/commit/c0a5423b6f09f0c08749697b8d2860f956e905e9,15 Mar 2016,"rerere: delay the recording of preimage

We record the preimage only when there is no directory to record the
conflict we encountered, i.e. when $GIT_DIR/rr-cache/$ID does not
exist.  As the plan is to allow multiple <preimage,postimage> pairs
as variants for the same conflict ID eventually, this logic needs to
go.

As the first step in that direction, stop the ""did we create the
directory?  Then we record the preimage"" logic.  Instead, we record
if a preimage does not exist when we saw a conflict in a path.  Also
make sure that we remove a stale postimage, which most likely is
totally unrelated to the resolution of this new conflict, when we
create a new preimage under $ID when $GIT_DIR/rr-cache/$ID already
exists.

In later patches, we will further update this logic to be ""do we
have <preimage,postimage> pair that cleanly resolve the current
conflicts?  If not, record a new preimage as a new variant"", but
that does not happen at this stage yet.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_2197.cpp,,,data/crawl/git/old_hunk_2197.cpp,data/crawl/git/new_hunk_2197.cpp,-1,17,,"fprintf(stderr, ""Recorded preimage for '%s'\n"", path);","[""addLog""]","[[], [""fprintf"", ""stderr"", ""Recorded"", ""preimage"", ""for"", ""%s"", ""\\n"", ""path""]]",[-14581070528694136707],5514,2019600.0,2
https://github.com/git/git/commit/935de81289cd04b4736c538747c53df123c30d1c,16 Mar 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2191.cpp,,,data/crawl/git/old_hunk_2191.cpp,data/crawl/git/new_hunk_2191.cpp,-1,24,,"die(""size_t underflow: %""PRIuMAX"" - %""PRIuMAX,
		    (uintmax_t)a, (uintmax_t)b);","[""addLog""]","[[], [""die"", ""size_t"", ""underflow"", ""%"", ""PRIuMAX"", ""%"", ""PRIuMAX"", ""uintmax_t"", ""a"", ""uintmax_t"", ""b""]]",[2408303772710145921],5513,18720.0,2
https://github.com/git/git/commit/935de81289cd04b4736c538747c53df123c30d1c,16 Mar 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2191.cpp,,,data/crawl/git/old_hunk_2191.cpp,data/crawl/git/new_hunk_2191.cpp,-1,16,,"die(""size_t overflow: %""PRIuMAX"" * %""PRIuMAX,
		    (uintmax_t)a, (uintmax_t)b);","[""addLog""]","[[], [""die"", ""size_t"", ""overflow"", ""%"", ""PRIuMAX"", ""*"", ""%"", ""PRIuMAX"", ""uintmax_t"", ""a"", ""uintmax_t"", ""b""]]",[-369202362020308521],5512,18720.0,2
https://github.com/git/git/commit/935de81289cd04b4736c538747c53df123c30d1c,16 Mar 2016,"add helpers for detecting size_t overflow

Performing computations on size_t variables that we feed to
xmalloc and friends can be dangerous, as an integer overflow
can cause us to allocate a much smaller chunk than we
realized.

We already have unsigned_add_overflows(), but let's add
unsigned_mult_overflows() to that. Furthermore, rather than
have each site manually check and die on overflow, we can
provide some helpers that will:

  - promote the arguments to size_t, so that we know we are
    doing our computation in the same size of integer that
    will ultimately be fed to xmalloc

  - check and die on overflow

  - return the result so that computations can be done in
    the parameter list of xmalloc.

These functions are a lot uglier to use than normal
arithmetic operators (you have to do ""st_add(foo, bar)""
instead of ""foo + bar""). To at least limit the damage, we
also provide multi-valued versions. So rather than:

  st_add(st_add(a, b), st_add(c, d));

you can write:

  st_add4(a, b, c, d);

This isn't nearly as elegant as a varargs function, but it's
a lot harder to get it wrong. You don't have to remember to
add a sentinel value at the end, and the compiler will
complain if you get the number of arguments wrong. This
patch adds only the numbered variants required to convert
the current code base; we can easily add more later if
needed.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_2191.cpp,,,data/crawl/git/old_hunk_2191.cpp,data/crawl/git/new_hunk_2191.cpp,-1,6,,"die(""size_t overflow: %""PRIuMAX"" + %""PRIuMAX,
		    (uintmax_t)a, (uintmax_t)b);","[""addLog""]","[[], [""die"", ""size_t"", ""overflow"", ""%"", ""PRIuMAX"", ""%"", ""PRIuMAX"", ""uintmax_t"", ""a"", ""uintmax_t"", ""b""]]",[-369202367396324692],5511,18720.0,2
https://github.com/git/git/commit/8a0de58a2a0cfd64944c2de9df184253286b7eac,19 Apr 2016,"i18n: builtin/pull.c: mark placeholders for translation

Some translations might also translate ""<remote>"" and ""<branch>"".

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_2146.cpp,,,data/crawl/git/old_hunk_2146.cpp,data/crawl/git/new_hunk_2146.cpp,3,3,"fprintf_ln(stderr, ""    git pull <remote> <branch>"");","fprintf_ln(stderr, ""    git pull %s %s"", _(""<remote>""), _(""<branch>""));","[""updateContent"", ""addContent"", ""addVariable""]","[[], [""%s"", ""%s"", ""_"", ""_""]]",[9472081226158712],5510,0.0,2
https://github.com/git/git/commit/78ccd4419525562a2c9d2b7cebddba0914bde151,22 Apr 2016,"verify-tag: prepare verify_tag for libification

The current interface of verify_tag() resolves reference names to SHA1,
however, the plan is to make this functionality public and the current
interface is cumbersome for callers: they are expected to supply the
textual representation of a sha1/refname. In many cases, this requires
them to turn the sha1 to hex representation, just to be converted back
inside verify_tag.

Add a SHA1 parameter to use instead of the name parameter, and rename
the name parameter to ""name_to_report"" for reporting purposes only.

Helped-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Santiago Torres <santiago@nyu.edu>
Reviewed-by: Eric Sunshine <sunshine@sunshineco.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_2130.cpp,,,data/crawl/git/old_hunk_2130.cpp,data/crawl/git/new_hunk_2130.cpp,-1,7,,"!error(""tag '%s' not found."", name);","[""addLog""]","[[], [""error"", ""tag"", ""%s"", ""not"", ""found"", ""name""]]",[12942010603582959774],5509,2298240.0,2
https://github.com/git/git/commit/d3b9ac07eb44974bb619d71fc6c81c9f2036b96c,22 Apr 2016,"worktree.c: make find_shared_symref() return struct worktree *

This gives the caller more information and they can answer things like,
""is it the main worktree"" or ""is it the current worktree"". The latter
question is needed for the ""checkout a rebase branch"" case later.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_2122.cpp,,,data/crawl/git/old_hunk_2122.cpp,data/crawl/git/new_hunk_2122.cpp,8,9,"die(_(""'%s' is already checked out at '%s'""), branch, existing);","die(_(""'%s' is already checked out at '%s'""),
	    branch, wt->path);","[""removeVariable"", ""addVariable""]","[[""existing""], [""wt"", ""path""]]",[520739580418354589],5508,0.0,2
https://github.com/git/git/commit/70ad8c8d8c0840fb89492063274132d28bdfbe3b,25 Apr 2016,"convert: allow core.autocrlf=input and core.eol=crlf

Even though the configuration parser errors out when core.autocrlf
is set to 'input' when core.eol is set to 'crlf', there is no need
to do so, because the core.autocrlf setting trumps core.eol.

Allow all combinations of core.crlf and core.eol and document
that core.autocrlf overrides core.eol.

Signed-off-by: Torsten Bögershausen <tboegi@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_2118.cpp,,,data/crawl/git/old_hunk_2118.cpp,data/crawl/git/new_hunk_2118.cpp,4,-1,"error(""core.autocrlf=input conflicts with core.eol=crlf"");",,"[""removeLog""]","[[""error"", ""core"", ""autocrlf"", ""input"", ""conflicts"", ""with"", ""core"", ""eol"", ""crlf""], []]",[-2115038850920888982],5507,0.0,2
https://github.com/git/git/commit/bb52995f3ec7fac2b282a91af4230e4f387af234,26 Apr 2016,"format-patch: introduce format.useAutoBase configuration

This allows to record the base commit automatically, it is equivalent
to set --base=auto in cmdline.

The format.useAutoBase has lower priority than command line option,
so if user set format.useAutoBase and pass the command line option in
the meantime, base_commit will be the one passed to command line
option.

Signed-off-by: Xiaolong Ye <xiaolong.ye@intel.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_2113.cpp,,,data/crawl/git/old_hunk_2113.cpp,data/crawl/git/new_hunk_2113.cpp,-1,6,,"die(_(""Unknown commit %s""), base_commit);","[""addLog""]","[[], [""die"", ""_"", ""Unknown"", ""commit"", ""%s"", ""base_commit""]]",[5460137927954819561],5506,0.0,2
https://github.com/git/git/commit/d92028a575dde9c325e23f89c3d2b24f13868c57,29 Apr 2016,"submodule init: fail gracefully with a missing .gitmodules file

When there is no .gitmodules file availabe to initialize a submodule
from, `submodule_from_path` just returns NULL. We need to check for
that and abort gracefully. When `submodule init` was implemented in shell,
a missing .gitmodules file would result in an error message

    No url found for submodule path '%s' in .gitmodules

Replicate that error message for now.

When the .gitmodules file is missing we can probably fail even earlier
for all of the submodules with an improved error message.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_2111.cpp,,,data/crawl/git/old_hunk_2111.cpp,data/crawl/git/new_hunk_2111.cpp,-1,12,,"die(_(""No url found for submodule path '%s' in .gitmodules""),
			displaypath);","[""addLog""]","[[], [""die"", ""_"", ""No"", ""url"", ""found"", ""for"", ""submodule"", ""path"", ""%s"", ""in"", ""gitmodules"", ""displaypath""]]",[-1534628736010313197],5505,8640.0,2
https://github.com/git/git/commit/58e4e5118ae3707b417a19e8dc9224ac25c3f32f,09 May 2016,"usage.c: move format processing out of die_errno()

fmt_with_err() will be shared with the coming error_errno() and
warning_errno().

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",27,data/crawl/git/hunk_2097.cpp,,,data/crawl/git/old_hunk_2097.cpp,data/crawl/git/new_hunk_2097.cpp,-1,13,,"fputs(""fatal: recursion detected in die_errno handler\n"",
			stderr);","[""addLog""]","[[], [""fputs"", ""fatal"", ""recursion"", ""detected"", ""in"", ""die_errno"", ""handler\\n"", ""stderr""]]",[-32687948681742527319],5504,914400.0,2
https://github.com/git/git/commit/6da31d7f75fa921f871eda76760b0c622d04147d,09 May 2016,"builtin/fetch.c: use error_errno()

A couple of newlines are also removed, because both error() and
error_errno() automatically append a newline.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",4,data/crawl/git/hunk_2089.cpp,,,data/crawl/git/old_hunk_2089.cpp,data/crawl/git/new_hunk_2089.cpp,3,3,"error(_(""cannot open %s: %s\n""), filename, strerror(errno));","error_errno(_(""cannot open %s""), filename);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""%s\\n"", ""strerror"", ""errno""], [""error_errno""]]",[-28413351119986615019],5503,0.0,2
https://github.com/git/git/commit/574774980cfdfe72d77cec831024f0229d10a1f3,09 May 2016,"builtin/help.c: use warning_errno()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",8,data/crawl/git/hunk_2088.cpp,,,data/crawl/git/old_hunk_2088.cpp,data/crawl/git/new_hunk_2088.cpp,11,11,"warning(_(""failed to exec '%s': %s""), cmd, strerror(errno));","warning(_(""failed to exec '%s'""), cmd);","[""removeVariable"", ""updateContent""]","[[""%s"", ""strerror"", ""errno""], []]",[-12745142427614753524],5502,104400.0,2
https://github.com/git/git/commit/23d05364fc5ba9fcc54cf5ae5503f3e987cec315,09 May 2016,"builtin/update-index.c: prefer ""err"" to ""errno"" in process_lstat_error

""errno"" is already passed in as ""err"". Here we should use err instead of
errno. errno is probably a copy/paste mistake in e011054 (Teach
git-update-index about gitlinks - 2007-04-12)

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",2,data/crawl/git/hunk_2077.cpp,,,data/crawl/git/old_hunk_2077.cpp,data/crawl/git/new_hunk_2077.cpp,3,3,"error(""lstat(\""%s\""): %s"", path, strerror(errno));","error(""lstat(\""%s\""): %s"", path, strerror(err));","[""updateVariable""]","[[""errno""], [""err""]]",[-11336281105815713219],5501,1623600.0,2
https://github.com/git/git/commit/accac4199c1d28dfd6c860b32d7111c3de8df7a6,10 May 2016,"test-parse-options: fix output when callback option fails

When test-parse-options detects an error on the command line, it
gives the usage string just like any parse-options API users do,
without showing any ""variable dump"".  An exception is the callback
test, where a ""variable dump"" for the option is done before the
command line options are fully parsed.

Do not expose this implementation detail by separating the handling
of callback test into two phases, one to capture the fact that an
option was given during the option parsing phase, and the other to
show that fact as a part of normal ""variable dump"".

The effect of this fix is seen in the patch to t/t0040 where it
tried ""test-parse-options --no-length"" where ""--length"" is a callback
that does not take a negative form.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_2009.cpp,,,data/crawl/git/old_hunk_2009.cpp,data/crawl/git/new_hunk_2009.cpp,-1,6,,"printf(""Callback: \""%s\"", %d\n"",
		       (arg ? arg : ""not set""), unset);","[""addLog""]","[[], [""printf"", ""Callback"", ""\\"", ""%s\\"", ""%d\\n"", ""arg"", ""arg"", ""not"", ""set"", ""unset""]]",[17016534472381945108],5500,2072160.0,2
https://github.com/git/git/commit/ab6b28b02f4db52ab5bad342592399f2559b4d81,10 May 2016,"test-parse-options: --expect=<string> option to simplify tests

Existing tests in t0040 follow a rather verbose pattern:

        cat >expect <<\EOF
        boolean: 0
        integer: 0
        magnitude: 0
        timestamp: 0
        string: (not set)
        abbrev: 7
        verbose: 0
        quiet: 3
        dry run: no
        file: (not set)
        EOF

        test_expect_success 'multiple quiet levels' '
                test-parse-options -q -q -q >output 2>output.err &&
                test_must_be_empty output.err &&
                test_cmp expect output
        '

But the only thing this test cares about is if ""quiet: 3"" is in the
output.  We should be able to write the above 18 lines with just
four lines, like this:

	test_expect_success 'multiple quiet levels' '
		test-parse-options --expect=""quiet: 3"" -q -q -q
	'

Teach the new --expect=<string> option to test-parse-options helper.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",91,data/crawl/git/hunk_2006.cpp,,,data/crawl/git/old_hunk_2006.cpp,data/crawl/git/new_hunk_2006.cpp,17,21,"printf(""magnitude: %lu\n"", magnitude);","show(&expect, &ret, ""magnitude: %lu"", magnitude);","[""updateLog"", ""updateContent"", ""addVariable""]","[[""printf"", ""%lu\\n""], [""show"", ""&expect"", ""&ret"", ""%lu""]]",[-17790201865644601947],5499,0.0,2
https://github.com/git/git/commit/f30afdabbfb9feeec402d351935879caf8b298ad,11 May 2016,"mingw: introduce the 'core.hideDotFiles' setting

On Unix (and Linux), files and directories whose names start with a dot
are usually not shown by default. This convention is used by Git: the
.git/ directory should be left alone by regular users, and only accessed
through Git itself.

On Windows, no such convention exists. Instead, there is an explicit flag
to mark files or directories as hidden.

In the early days, Git for Windows did not mark the .git/ directory (or
for that matter, any file or directory whose name starts with a dot)
hidden. This lead to quite a bit of confusion, and even loss of data.

Consequently, Git for Windows introduced the core.hideDotFiles setting,
with three possible values: true, false, and dotGitOnly, defaulting to
marking only the .git/ directory as hidden.

The rationale: users do not need to access .git/ directly, and indeed (as
was demonstrated) should not really see that directory, either. However,
not all dot files should be hidden by default, as e.g. Eclipse does not
show them (and the user would therefore be unable to see, say, a
.gitattributes file).

In over five years since the last attempt to bring this patch into core
Git, a slightly buggy version of this patch has served Git for Windows'
users well: no single report indicated problems with the hidden .git/
directory, and the stream of problems caused by the previously non-hidden
.git/ directory simply stopped. The bugs have been fixed during the
process of getting this patch upstream.

Note that there is a funny quirk we have to pay attention to when
creating hidden files: we use Win32's _wopen() function which
transmogrifies its arguments and hands off to Win32's CreateFile()
function. That latter function errors out with ERROR_ACCESS_DENIED (the
equivalent of EACCES) when the equivalent of the O_CREAT flag was passed
and the file attributes (including the hidden flag) do not match an
existing file's. And _wopen() accepts no parameter that would be
transmogrified into said hidden flag. Therefore, we simply try again
without O_CREAT.

A slightly different method is required for our fopen()/freopen()
function as we cannot even *remove* the implicit O_CREAT flag.
Therefore, we briefly mark existing files as unhidden when opening them
via fopen()/freopen().

The ERROR_ACCESS_DENIED error can also be triggered by opening a file
that is marked as a system file (which is unlikely to be tracked in
Git), and by trying to create a file that has *just* been deleted and is
awaiting the last open handles to be released (which would be handled
better by the ""Try again?"" logic, a story for a different patch series,
though). In both cases, it does not matter much if we try again without
the O_CREAT flag, read: it does not hurt, either.

For details how ERROR_ACCESS_DENIED can be triggered, see
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858

Original-patch-by: Erik Faye-Lund <kusmabite@gmail.com>
Initial-Test-By: Pat Thoyts <patthoyts@users.sourceforge.net>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",147,data/crawl/git/hunk_2002.cpp,,,data/crawl/git/old_hunk_2002.cpp,data/crawl/git/new_hunk_2002.cpp,-1,12,,"error(""could not unhide %s"", filename);","[""addLog""]","[[], [""error"", ""could"", ""not"", ""unhide"", ""%s"", ""filename""]]",[11517469347061187181],5498,0.0,2
https://github.com/git/git/commit/91b769c48f4cf46d9514770849a1bf9cb33430c3,01 Jun 2016,"builtin/apply: move applying patches into apply_all_patches()

To libify the apply functionality we should provide a function to
apply many patches. Let's move the code to do that into a new
apply_all_patches() function.

Reviewed-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",129,data/crawl/git/hunk_1955.cpp,,,data/crawl/git/old_hunk_1955.cpp,data/crawl/git/new_hunk_1955.cpp,56,-1,"die(_(""Unable to write new index file""));",,"[""removeLog""]","[[""die"", ""_"", ""Unable"", ""to"", ""write"", ""new"", ""index"", ""file""], []]",[-9643391230087642827],5497,206640.0,2
https://github.com/git/git/commit/71564516deccafba0a58129bd7d3851e28fdb4bb,13 Jun 2016,"add_update(): initialize the whole ref_update

Change add_update() to initialize all of the fields in the new
ref_update object. Rename the function to ref_transaction_add_update(),
and increase its visibility to all of the refs-related code.

All of this makes the function more useful for other future callers.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>",62,data/crawl/git/hunk_1932.cpp,,,data/crawl/git/old_hunk_1932.cpp,data/crawl/git/new_hunk_1932.cpp,-1,16,,"die(""BUG: REF_ISPRUNING set without REF_NODEREF"");","[""addLog""]","[[], [""die"", ""BUG"", ""REF_ISPRUNING"", ""set"", ""without"", ""REF_NODEREF""]]",[-7503022955261937900],5496,0.0,2
https://github.com/git/git/commit/5c24cdea1e33c72bfed4af25a363eb5ceae11199,13 Jun 2016,"upload-pack: move ""shallow"" sending code out of deepen()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_1925.cpp,,,data/crawl/git/old_hunk_1925.cpp,data/crawl/git/new_hunk_1925.cpp,6,-1,"packet_write(1, ""shallow %s"",
				     oid_to_hex(&object->oid));",,"[""removeLog""]","[[""packet_write"", ""1"", ""shallow"", ""%s"", ""oid_to_hex"", ""&object"", ""oid""], []]",[-9075868359601839608],5495,0.0,2
https://github.com/git/git/commit/5c24cdea1e33c72bfed4af25a363eb5ceae11199,13 Jun 2016,"upload-pack: move ""shallow"" sending code out of deepen()

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",25,data/crawl/git/hunk_1924.cpp,,,data/crawl/git/old_hunk_1924.cpp,data/crawl/git/new_hunk_1924.cpp,-1,8,,"packet_write(1, ""shallow %s"",
				     oid_to_hex(&object->oid));","[""addLog""]","[[], [""packet_write"", ""1"", ""shallow"", ""%s"", ""oid_to_hex"", ""&object"", ""oid""]]",[9075868359601839608],5494,0.0,2
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_1922.cpp,,,data/crawl/git/old_hunk_1922.cpp,data/crawl/git/new_hunk_1922.cpp,30,24,"fprintf(stderr, ""Server supports allow-tip-sha1-in-want\n"");","print_verbose(args, ""Server supports allow-tip-sha1-in-want"");","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""fprintf"", ""stderr"", ""want\\n""], [""print_verbose"", ""args"", ""want""]]",[-2217332515617139480],5493,0.0,2
https://github.com/git/git/commit/0d789a5bc1aeef2d6d0d3120efc4b85766a0a327,13 Jun 2016,"fetch-pack: use a common function for verbose printing

This reduces the number of ""if (verbose)"" which makes it a bit easier
to read imo. It also makes it easier to redirect all these printouts,
to a file for example.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",88,data/crawl/git/hunk_1921.cpp,,,data/crawl/git/old_hunk_1921.cpp,data/crawl/git/new_hunk_1921.cpp,5,3,"fprintf(stderr,
				""want %s (%s)\n"", sha1_to_hex(remote),
				ref->name);","print_verbose(args, ""want %s (%s)"", sha1_to_hex(remote),
				      ref->name);","[""updateVariable"", ""updateLog"", ""updateContent""]","[[""fprintf"", ""stderr"", ""\\n""], [""print_verbose"", ""args""]]",[7907201063002700720],5492,0.0,2
https://github.com/git/git/commit/d993ce1ed2f025708b0f78bed241466e35f1e8a0,14 Jun 2016,"blame: improve diagnosis for ""--reverse NEW""

""git blame --reverse OLD..NEW -- PATH"" tells us to start from the
contents in PATH at OLD and observe how each line is changed while
the history develops up to NEW, and report for each line the latest
commit up to which the line survives in the original form.

If you say ""git blame --reverse NEW -- PATH"" by mistake, we complain
about the missing OLD, but we phrased it as ""No commit to dig down
to?""  In this case, however, we are digging up from OLD, so say so.

Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_1874.cpp,,,data/crawl/git/old_hunk_1874.cpp,data/crawl/git/new_hunk_1874.cpp,3,3,"die(""More than one commit to dig down to %s and %s?"",
			    revs->pending.objects[i].name,
			    final_commit_name);","die(""More than one commit to dig up from, %s and %s?"",
			    revs->pending.objects[i].name,
			    final_commit_name);","[""updateContent""]","[[""down"", ""to""], [""up"", ""from""]]",[8309247261595547984],5491,0.0,2
https://github.com/git/git/commit/96335bcf4d64c29add3692fb41671190123cf44e,18 Jun 2016,"run-command: add pipe_command helper

We already have capture_command(), which captures the stdout
of a command in a way that avoids deadlocks. But sometimes
we need to do more I/O, like capturing stderr as well, or
sending data to stdin. It's easy to write code that
deadlocks racily in these situations depending on how fast
the command reads its input, or in which order it writes its
output.

Let's give callers an easy interface for doing this the
right way, similar to what capture_command() did for the
simple case.

The whole thing is backed by a generic poll() loop that can
feed an arbitrary number of buffers to descriptors, and fill
an arbitrary number of strbufs from other descriptors. This
seems like overkill, but the resulting code is actually a
bit cleaner than just handling the three descriptors
(because the output code for stdout/stderr is effectively
duplicated, so being able to loop is a benefit).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",183,data/crawl/git/hunk_1817.cpp,,,data/crawl/git/old_hunk_1817.cpp,data/crawl/git/new_hunk_1817.cpp,-1,45,,"die_errno(""poll failed"");","[""addLog""]","[[], [""die_errno"", ""poll"", ""failed""]]",[-11256726469406746246],5490,1188000.0,2
https://github.com/git/git/commit/d8acfe1eaf8621025c4095d3fbb88b2703b3fa54,27 Jun 2016,"test-regex: expose full regcomp() to the command line

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",51,data/crawl/git/hunk_1771.cpp,,,data/crawl/git/old_hunk_1771.cpp,data/crawl/git/new_hunk_1771.cpp,-1,32,,"die(""failed regcomp() for pattern '%s'"", pat);","[""addLog""]","[[], [""die"", ""failed"", ""regcomp"", ""for"", ""pattern"", ""%s"", ""pat""]]",[-15465455669007534945],5489,994320.0,2
https://github.com/git/git/commit/3d5b23a36218b0417a056fa7b5e6d25d595ccaf2,01 Jul 2016,"diffcore-pickaxe: Add regcomp_or_die()

There's another regcomp code block coming in this function that needs
the same error handling. This function can help avoid duplicating
error handling code.

Helped-by: Jeff King <peff@peff.com>
Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",22,data/crawl/git/hunk_1735.cpp,,,data/crawl/git/old_hunk_1735.cpp,data/crawl/git/new_hunk_1735.cpp,13,-1,"die(""invalid regex: %s"", errbuf);",,"[""removeLog""]","[[""die"", ""invalid"", ""regex"", ""%s"", ""errbuf""], []]",[23923356513052523925],5488,597600.0,2
https://github.com/git/git/commit/82246e075e5c028dd886adda68e28de092e33df1,15 Jul 2016,"Sync with 2.9.2

* maint:
  Git 2.9.2
  t0006: skip ""far in the future"" test when unsigned long is not long enough",37,data/crawl/git/hunk_1699.cpp,,,data/crawl/git/old_hunk_1699.cpp,data/crawl/git/new_hunk_1699.cpp,-1,5,,"printf(""sizeof-long: %d\n"", (int)sizeof(long));","[""addLog""]","[[], [""printf"", ""sizeof"", ""long"", ""%d\\n"", ""int"", ""sizeof"", ""long""]]",[8814044416278846860],5487,0.0,2
https://github.com/git/git/commit/ca5c701ca50c24807793294c5ed22230858ac5e6,05 Aug 2016,"write_or_die: drop write_or_whine_pipe()

This function has no callers, and is not likely to gain any
because it's confusing to use.

It unconditionally complains to stderr, but _doesn't_ die.
Yet any caller which wants a ""gentle"" write would generally
want to suppress the error message, because presumably
they're going to write a better one, and/or try the
operation again.

And the check_pipe() call leads to confusing behaviors. It
means we die for EPIPE, but not for other errors, which is
confusing and pointless.

On top of all that, it has unusual error return semantics,
which makes it easy for callers to get it wrong.

Let's drop the function, and if somebody ever needs to
resurrect something like it, they can fix these warts.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",13,data/crawl/git/hunk_1615.cpp,,,data/crawl/git/old_hunk_1615.cpp,data/crawl/git/new_hunk_1615.cpp,8,-1,"fprintf(stderr, ""%s: write error (%s)\n"",
			msg, strerror(errno));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""%s"", ""write"", ""error"", ""%s"", ""\\n"", ""msg"", ""strerror"", ""errno""], []]",[-22311105276561731123],5486,40320.0,2
https://github.com/git/git/commit/957a0fe2e59343f10f10620fab787f7e5abf3ab8,05 Aug 2016,"status: rename long-format print routines

Rename the various wt_status_print*() routines to be
wt_longstatus_print*() to make it clear that these
routines are only concerned with the normal/long
status output and reduce developer confusion as other
status formats are added in the future.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",116,data/crawl/git/hunk_1612.cpp,,,data/crawl/git/old_hunk_1612.cpp,data/crawl/git/new_hunk_1612.cpp,13,13,"wt_status_print_other(s, &s->untracked, _(""Untracked files""), ""add"");","wt_longstatus_print_other(s, &s->untracked, _(""Untracked files""), ""add"");","[""updateLog""]","[[""wt_status_print_other""], [""wt_longstatus_print_other""]]",[793719036921399646],5485,0.0,2
https://github.com/git/git/commit/be7e795efe35d3e50199af5452b218e5121b1713,05 Aug 2016,"status: cleanup API to wt_status_print

Refactor the API between builtin/commit.c and wt-status.[ch].

Hide the details of the various wt_*status_print() routines inside
wt-status.c behind a single (new) wt_status_print() routine.
Eliminate the switch statements from builtin/commit.c.
Allow details of new status formats to be isolated within wt-status.c

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",92,data/crawl/git/hunk_1596.cpp,,,data/crawl/git/old_hunk_1596.cpp,data/crawl/git/new_hunk_1596.cpp,14,-1,"die(""BUG: finalize_deferred_config() should have been called"");",,"[""removeLog""]","[[""die"", ""BUG"", ""finalize_deferred_config"", ""should"", ""have"", ""been"", ""called""], []]",[-8020215930678866075],5484,0.0,2
https://github.com/git/git/commit/69e1609f812d5accc1b54f737faba354f5bd85db,11 Aug 2016,"builtin/apply: make add_index_file() return -1 on error

To libify `git apply` functionality we have to signal errors to the
caller instead of die()ing.

To do that in a compatible manner with the rest of the error handling
in ""builtin/apply.c"", add_index_file() should return -1 instead of
calling die().

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",48,data/crawl/git/hunk_1549.cpp,,,data/crawl/git/old_hunk_1549.cpp,data/crawl/git/new_hunk_1549.cpp,8,11,"die_errno(_(""unable to stat newly created file '%s'""),
					  path);","error(_(""unable to stat newly ""
					       ""created file '%s': %s""),
					     path, strerror(errno));","[""updateLog"", ""updateContent"", ""addContent"", ""addVariable""]","[[""die_errno""], [""error"", ""%s"", ""strerror"", ""errno""]]",[27612659001256128573],5483,0.0,2
https://github.com/git/git/commit/5ad218673328262839542b841b505c78132857e7,24 Aug 2016,"unpack-objects: add --max-input-size=<size> option

When receiving a pack-file, it can be useful to abort the
`git unpack-objects`, if the pack-file is too big.

Signed-off-by: Christian Couder <chriscool@tuxfamily.org>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_1522.cpp,,,data/crawl/git/old_hunk_1522.cpp,data/crawl/git/new_hunk_1522.cpp,-1,4,,"die(_(""pack exceeds maximum allowed size""));","[""addLog""]","[[], [""die"", ""_"", ""pack"", ""exceeds"", ""maximum"", ""allowed"", ""size""]]",[10025324360913939937],5482,0.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1434.cpp,,,data/crawl/git/old_hunk_1434.cpp,data/crawl/git/new_hunk_1434.cpp,-1,34,,"error(""Could not get patch ID for %s"",
			oid_to_hex(&b->commit->object.oid));","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""get"", ""patch"", ""ID"", ""for"", ""%s"", ""oid_to_hex"", ""&b"", ""commit"", ""object"", ""oid""]]",[14281264280377199849],5481,20880.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1434.cpp,,,data/crawl/git/old_hunk_1434.cpp,data/crawl/git/new_hunk_1434.cpp,-1,30,,"error(""Could not get patch ID for %s"",
			oid_to_hex(&a->commit->object.oid));","[""addLog""]","[[], [""error"", ""Could"", ""not"", ""get"", ""patch"", ""ID"", ""for"", ""%s"", ""oid_to_hex"", ""&a"", ""commit"", ""object"", ""oid""]]",[14281264280377199848],5480,20880.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1433.cpp,,,data/crawl/git/old_hunk_1433.cpp,data/crawl/git/new_hunk_1433.cpp,-1,18,,"die(""malformed build-time PAGER_ENV"");","[""addLog""]","[[], [""die"", ""malformed"", ""build"", ""time"", ""PAGER_ENV""]]",[-1130966396871455749],5479,25920.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1433.cpp,,,data/crawl/git/old_hunk_1433.cpp,data/crawl/git/new_hunk_1433.cpp,-1,11,,"die(""malformed build-time PAGER_ENV: %s"",
			split_cmdline_strerror(n));","[""addLog""]","[[], [""die"", ""malformed"", ""build"", ""time"", ""PAGER_ENV"", ""%s"", ""split_cmdline_strerror"", ""n""]]",[7552554464452287189],5478,25920.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1421.cpp,,,data/crawl/git/old_hunk_1421.cpp,data/crawl/git/new_hunk_1421.cpp,21,23,"error(_(""cannot read object %s""), sha1_to_hex(sha1));","err(o, _(""cannot read object %s""), oid_to_hex(oid));","[""updateVariable"", ""updateLog"", ""addVariable""]","[[""error"", ""sha1_to_hex"", ""sha1""], [""err"", ""o"", ""oid_to_hex"", ""oid""]]",[361920539896576781],5477,0.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1412.cpp,,,data/crawl/git/old_hunk_1412.cpp,data/crawl/git/new_hunk_1412.cpp,4,4,"die_errno(_(""failed to open '%s'""), path);","err(o, _(""failed to open '%s': %s""),
					  path, strerror(errno));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die_errno""], [""err"", ""o"", ""%s"", ""strerror"", ""errno""]]",[16276377909649457946],5476,0.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1406.cpp,,,data/crawl/git/old_hunk_1406.cpp,data/crawl/git/new_hunk_1406.cpp,6,3,"fputs(o->obuf.buf, stdout);","(format (printf, 3, 4);","[""addLog"", ""updateLog"", ""removeVariable"", ""addContent"", ""addVariable""]","[[""fputs"", ""o"", ""obuf"", ""buf"", ""stdout""], [""format"", ""printf"", ""3"", ""4""]]",[22024898734185097145],5475,28080.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1405.cpp,,,data/crawl/git/old_hunk_1405.cpp,data/crawl/git/new_hunk_1405.cpp,-1,27,,"error(""%s"", o->obuf.buf);","[""addLog""]","[[], [""error"", ""%s"", ""o"", ""obuf"", ""buf""]]",[8605013688750282921],5474,28080.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1395.cpp,,,data/crawl/git/old_hunk_1395.cpp,data/crawl/git/new_hunk_1395.cpp,-1,3,,"fprintf(rev->diffopt.file, ""%s\n"", output_prefix(&rev->diffopt));","[""addLog""]","[[], [""fprintf"", ""rev"", ""diffopt"", ""file"", ""%s\\n"", ""output_prefix"", ""&rev"", ""diffopt""]]",[11894370729432558990],5473,55440.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1391.cpp,,,data/crawl/git/old_hunk_1391.cpp,data/crawl/git/new_hunk_1391.cpp,3,3,"die(""Cannot read blob %s"", sha1_to_hex(spec->sha1));","die(""Cannot read blob %s"", oid_to_hex(&spec->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""spec"", ""sha1""], [""oid_to_hex"", ""&spec"", ""oid""]]",[8293450225945208901],5472,52560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1390.cpp,,,data/crawl/git/old_hunk_1390.cpp,data/crawl/git/new_hunk_1390.cpp,3,3,"die(""Fatal: buffer too small. Please report a bug."");","die(""BUG: buffer too small. Please report a bug."");","[""updateContent""]","[[""Fatal""], [""BUG""]]",[5274198145024853794],5471,32400.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1389.cpp,,,data/crawl/git/old_hunk_1389.cpp,data/crawl/git/new_hunk_1389.cpp,-1,10,,"die(""BUG: curl_easy_getinfo for HTTP code failed: %s"",
				curl_easy_strerror(c));","[""addLog""]","[[], [""die"", ""BUG"", ""curl_easy_getinfo"", ""for"", ""HTTP"", ""code"", ""failed"", ""%s"", ""curl_easy_strerror"", ""c""]]",[11139467800047396648],5470,42480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1381.cpp,,,data/crawl/git/old_hunk_1381.cpp,data/crawl/git/new_hunk_1381.cpp,3,3,"not_found(""Cannot open '%s': %s"", p, strerror(errno));","not_found(hdr, ""Cannot open '%s': %s"", p, strerror(errno));","[""addVariable""]","[[], [""hdr""]]",[-6429308858211906203],5469,21600.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1375.cpp,,,data/crawl/git/old_hunk_1375.cpp,data/crawl/git/new_hunk_1375.cpp,28,-1,"error(_(""gpg did not accept the data""));",,"[""removeLog""]","[[""error"", ""_"", ""gpg"", ""did"", ""not"", ""accept"", ""the"", ""data""], []]",[12641366920445121628],5468,59760.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1372.cpp,,,data/crawl/git/old_hunk_1372.cpp,data/crawl/git/new_hunk_1372.cpp,3,3,"error(""Unknown object type for %s"", oid_to_hex(&obj->oid));","error(""Unknown object type for %s"", describe_object(options, obj));","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""&obj"", ""oid""], [""describe_object"", ""options"", ""obj""]]",[10540707355332585625],5467,38160.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1371.cpp,,,data/crawl/git/old_hunk_1371.cpp,data/crawl/git/new_hunk_1371.cpp,30,82,"error(""in tree %s: entry %s has bad mode %.6o"",
					oid_to_hex(&tree->object.oid), entry.path, entry.mode);","error(""in tree %s: entry %s has bad mode %.6o"",
					describe_object(options, &tree->object), entry.path, entry.mode);","[""updateVariable"", ""removeVariable"", ""addVariable""]","[[""oid_to_hex"", ""oid""], [""describe_object"", ""options""]]",[-1741683977218624602],5466,38160.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1370.cpp,,,data/crawl/git/old_hunk_1370.cpp,data/crawl/git/new_hunk_1370.cpp,-1,8,,"die_errno(""Failed seeking to start of '%s'"", p->pack_name);","[""addLog""]","[[], [""die_errno"", ""Failed"", ""seeking"", ""to"", ""start"", ""of"", ""%s"", ""p"", ""pack_name""]]",[-3404749887042522830],5465,87120.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1368.cpp,,,data/crawl/git/old_hunk_1368.cpp,data/crawl/git/new_hunk_1368.cpp,-1,190,,"die(""BUG: empty path passed to dir_iterator_begin()"");","[""addLog""]","[[], [""die"", ""BUG"", ""empty"", ""path"", ""passed"", ""to"", ""dir_iterator_begin""]]",[884506903413996206],5464,58320.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1368.cpp,,,data/crawl/git/old_hunk_1368.cpp,data/crawl/git/new_hunk_1368.cpp,-1,142,,"warning(""error reading path '%s': %s"",
						iter->base.path.buf,
						strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""reading"", ""path"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[16306130349262971750],5463,58320.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1368.cpp,,,data/crawl/git/old_hunk_1368.cpp,data/crawl/git/new_hunk_1368.cpp,-1,124,,"warning(""error reading directory %s: %s"",
						iter->base.path.buf, strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""reading"", ""directory"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[13505825669856932485],5462,58320.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1368.cpp,,,data/crawl/git/old_hunk_1368.cpp,data/crawl/git/new_hunk_1368.cpp,-1,73,,"warning(""error opening directory %s: %s"",
					iter->base.path.buf, strerror(errno));","[""addLog""]","[[], [""warning"", ""error"", ""opening"", ""directory"", ""%s"", ""%s"", ""iter"", ""base"", ""path"", ""buf"", ""strerror"", ""errno""]]",[10801070263889322641],5461,58320.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1364.cpp,,,data/crawl/git/old_hunk_1364.cpp,data/crawl/git/new_hunk_1364.cpp,-1,8,,"error(""unable to read files to diff"");","[""addLog""]","[[], [""error"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""]]",[2692740952485397805],5460,30240.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1363.cpp,,,data/crawl/git/old_hunk_1363.cpp,data/crawl/git/new_hunk_1363.cpp,5,-1,"error(""unable to read files to diff"");",,"[""removeLog""]","[[""error"", ""unable"", ""to"", ""read"", ""files"", ""to"", ""diff""], []]",[-2692740952485397805],5459,30240.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1351.cpp,,,data/crawl/git/old_hunk_1351.cpp,data/crawl/git/new_hunk_1351.cpp,-1,46,,environment.get_logger();,"[""addLog""]","[[], [""environment"", ""get_logger""]]",[9405940129258397921],5458,16560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1351.cpp,,,data/crawl/git/old_hunk_1351.cpp,data/crawl/git/new_hunk_1351.cpp,-1,36,,sys.stderr.write('\n');,"[""addLog""]","[[], [""sys"", ""stderr"", ""write"", ""\\n""]]",[-276106565262721426],5457,16560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1350.cpp,,,data/crawl/git/old_hunk_1350.cpp,data/crawl/git/new_hunk_1350.cpp,-1,70,,"error(self, msg);","[""addLog""]","[[], [""error"", ""self"", ""msg""]]",[12831924530435854937],5456,16560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1350.cpp,,,data/crawl/git/old_hunk_1350.cpp,data/crawl/git/new_hunk_1350.cpp,-1,66,,"warning(self, msg);","[""addLog""]","[[], [""warning"", ""self"", ""msg""]]",[158808187071493237],5455,16560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1337.cpp,,,data/crawl/git/old_hunk_1337.cpp,data/crawl/git/new_hunk_1337.cpp,-1,35,,"die(""BUG: current_config_name called outside config callback"");","[""addLog""]","[[], [""die"", ""BUG"", ""current_config_name"", ""called"", ""outside"", ""config"", ""callback""]]",[-4887400707580452413],5454,77760.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1337.cpp,,,data/crawl/git/old_hunk_1337.cpp,data/crawl/git/new_hunk_1337.cpp,-1,23,,"die(""BUG: unknown config origin type"");","[""addLog""]","[[], [""die"", ""BUG"", ""unknown"", ""config"", ""origin"", ""type""]]",[1866629154554188007],5453,30960.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1337.cpp,,,data/crawl/git/old_hunk_1337.cpp,data/crawl/git/new_hunk_1337.cpp,-1,9,,"die(""BUG: current_config_origin_type called outside config callback"");","[""addLog""]","[[], [""die"", ""BUG"", ""current_config_origin_type"", ""called"", ""outside"", ""config"", ""callback""]]",[6096325379770103156],5452,77760.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1336.cpp,,,data/crawl/git/old_hunk_1336.cpp,data/crawl/git/new_hunk_1336.cpp,-1,4,,"die(""BUG: configset_add_value has no source"");","[""addLog""]","[[], [""die"", ""BUG"", ""configset_add_value"", ""has"", ""no"", ""source""]]",[-844726279118283092],5451,77760.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1332.cpp,,,data/crawl/git/old_hunk_1332.cpp,data/crawl/git/new_hunk_1332.cpp,-1,33,,"error(""%s"", error_msg);","[""addLog""]","[[], [""error"", ""%s"", ""error_msg""]]",[1400124805366994610],5450,30960.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1332.cpp,,,data/crawl/git/old_hunk_1332.cpp,data/crawl/git/new_hunk_1332.cpp,-1,31,,"die(""%s"", error_msg);","[""addLog""]","[[], [""die"", ""%s"", ""error_msg""]]",[-8810100787835860572],5449,30960.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1332.cpp,,,data/crawl/git/old_hunk_1332.cpp,data/crawl/git/new_hunk_1332.cpp,6,10,"error(_(""bad config line %d in %s %s""), cf->linenr, cf->origin_type, cf->name);","xstrfmt(_(""bad config line %d in file %s""),
				      cf->linenr, cf->name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""error"", ""%s"", ""origin_type"", ""cf""], [""xstrfmt"", ""file""]]",[-4373687941258834241],5448,30960.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1332.cpp,,,data/crawl/git/old_hunk_1332.cpp,data/crawl/git/new_hunk_1332.cpp,4,6,"die(_(""bad config line %d in %s %s""), cf->linenr, cf->origin_type, cf->name);","xstrfmt(_(""bad config line %d in blob %s""),
				      cf->linenr, cf->name);","[""updateLog"", ""removeVariable"", ""updateContent""]","[[""die"", ""%s"", ""origin_type"", ""cf""], [""xstrfmt"", ""blob""]]",[7665020203569478252],5447,30960.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1330.cpp,,,data/crawl/git/old_hunk_1330.cpp,data/crawl/git/new_hunk_1330.cpp,2,2,"die(include_depth_advice, MAX_INCLUDE_DEPTH, path,
			    cf && cf->name ? cf->name : ""the command line"");","die(include_depth_advice, MAX_INCLUDE_DEPTH, path,
			    !cf ? ""<unknown>"" :
			    cf->name ? cf->name :
			    ""the command line"");","[""removeVariable"", ""addContent"", ""addVariable""]","[[""&&""], [""unknown""]]",[-4585537727782749613],5446,77760.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1329.cpp,,,data/crawl/git/old_hunk_1329.cpp,data/crawl/git/new_hunk_1329.cpp,9,-1,"printf(format, oid_to_hex(&list->item->object.oid));",,"[""removeLog""]","[[""printf"", ""format"", ""oid_to_hex"", ""&list"", ""item"", ""object"", ""oid""], []]",[-11521235776160159660],5445,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1326.cpp,,,data/crawl/git/old_hunk_1326.cpp,data/crawl/git/new_hunk_1326.cpp,-1,57,,"die(_(""'%s' is not locked""), av[0]);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""not"", ""locked"", ""av[0]""]]",[12944752158731816887],5444,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1326.cpp,,,data/crawl/git/old_hunk_1326.cpp,data/crawl/git/new_hunk_1326.cpp,-1,29,,"die(_(""'%s' is already locked""), av[0]);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""already"", ""locked"", ""av[0]""]]",[-566654064609392542],5443,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1326.cpp,,,data/crawl/git/old_hunk_1326.cpp,data/crawl/git/new_hunk_1326.cpp,-1,27,,"die(_(""'%s' is already locked, reason: %s""),
			    av[0], old_reason);","[""addLog""]","[[], [""die"", ""_"", ""%s"", ""is"", ""already"", ""locked"", ""reason"", ""%s"", ""av[0]"", ""old_reason""]]",[5445923540206722054],5442,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,-1,56,,"printf(""%s"", ret);","[""addLog""]","[[], [""printf"", ""%s"", ""ret""]]",[7999025673695671843],5441,26640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,-1,54,,"die(""submodule %s doesn't exist"", argv[1]);","[""addLog""]","[[], [""die"", ""submodule"", ""%s"", ""doesn"", ""t"", ""exist"", ""argv[1]""]]",[-3617941232107684191],5440,26640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,-1,50,,"die(""submodule--helper remote-branch takes exactly one arguments, got %d"", argc);","[""addLog""]","[[], [""die"", ""submodule"", ""helper"", ""remote"", ""branch"", ""takes"", ""exactly"", ""one"", ""arguments"", ""got"", ""%d"", ""argc""]]",[-32517820935648864067],5439,26640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,-1,32,,"die(_(""Submodule (%s) branch configured to inherit ""
			      ""branch from superproject, but the superproject ""
			      ""is not on any branch""), sub->name);","[""addLog""]","[[], [""die"", ""_"", ""Submodule"", ""%s"", ""branch"", ""configured"", ""to"", ""inherit"", ""branch"", ""from"", ""superproject"", ""but"", ""the"", ""superproject"", ""is"", ""not"", ""on"", ""any"", ""branch"", ""sub"", ""name""]]",[-45220226411645197935],5438,26640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1324.cpp,,,data/crawl/git/old_hunk_1324.cpp,data/crawl/git/new_hunk_1324.cpp,3,3,"die(""submodule--helper relative_path takes exactly 2 arguments, got %d"", argc);","die(""submodule--helper relative-path takes exactly 2 arguments, got %d"", argc);","[""updateContent""]","[[""relative_path""], [""relative"", ""path""]]",[7647013548923829274],5437,28080.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1320.cpp,,,data/crawl/git/old_hunk_1320.cpp,data/crawl/git/new_hunk_1320.cpp,3,3,"warning(_(""removing '%s' failed""), fname);","warning(_(""failed to remove '%s'""), fname);","[""updateContent""]","[[""removing""], [""to"", ""remove""]]",[-4079572091471055498],5436,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1319.cpp,,,data/crawl/git/old_hunk_1319.cpp,data/crawl/git/new_hunk_1319.cpp,-1,5,,"die(_(""--keep-unreachable and -A are incompatible""));","[""addLog""]","[[], [""die"", ""_"", ""keep"", ""unreachable"", ""and"", ""A"", ""are"", ""incompatible""]]",[-5593051819424641013],5435,62640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1317.cpp,,,data/crawl/git/old_hunk_1317.cpp,data/crawl/git/new_hunk_1317.cpp,15,14,"printf(""    %-*s %s %s\n"", show_info->width, """", also,
		       merge->items[i].string);","printf(_(""%-*s    and with remote %s\n""), width, """",
		       merge->items[i].string);","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""show_info"", ""also""], [""_"", ""and"", ""with"", ""remote""]]",[-7450439624966989720],5434,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1315.cpp,,,data/crawl/git/old_hunk_1315.cpp,data/crawl/git/new_hunk_1315.cpp,-1,5,,"die(_(""push options must not have new line characters""));","[""addLog""]","[[], [""die"", ""_"", ""push"", ""options"", ""must"", ""not"", ""have"", ""new"", ""line"", ""characters""]]",[19338182395889014130],5433,41040.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1313.cpp,,,data/crawl/git/old_hunk_1313.cpp,data/crawl/git/new_hunk_1313.cpp,-1,5,,"warning(_(""ignoring --verify-signatures for rebase""));","[""addLog""]","[[], [""warning"", ""_"", ""ignoring"", ""verify"", ""signatures"", ""for"", ""rebase""]]",[-10191881885714386916],5432,80640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1312.cpp,,,data/crawl/git/old_hunk_1312.cpp,data/crawl/git/new_hunk_1312.cpp,-1,9,,"warning(""loose object at %s could not be examined"", path);","[""addLog""]","[[], [""warning"", ""loose"", ""object"", ""at"", ""%s"", ""could"", ""not"", ""be"", ""examined"", ""path""]]",[3401631670850629771],5431,62640.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1300.cpp,,,data/crawl/git/old_hunk_1300.cpp,data/crawl/git/new_hunk_1300.cpp,6,-1,"die_errno(_(""Finishing SQUASH_MSG""));",,"[""removeLog""]","[[""die_errno"", ""_"", ""Finishing"", ""SQUASH_MSG""], []]",[3834409773858416619],5430,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1300.cpp,,,data/crawl/git/old_hunk_1300.cpp,data/crawl/git/new_hunk_1300.cpp,4,-1,"die_errno(_(""Writing SQUASH_MSG""));",,"[""removeLog""]","[[""die_errno"", ""_"", ""Writing"", ""SQUASH_MSG""], []]",[14416749490606559798],5429,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1294.cpp,,,data/crawl/git/old_hunk_1294.cpp,data/crawl/git/new_hunk_1294.cpp,3,3,"die(""bug in show-killed-files"");","die(""BUG: killed-file %.*s not found"",
						ent->len, ent->name);","[""updateContent"", ""addVariable""]","[[""bug"", ""in"", ""show"", ""files""], [""BUG"", ""file"", ""%"", ""*s"", ""not"", ""found"", ""ent"", ""len"", ""ent"", ""name""]]",[5828224657249385815],5428,32400.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1282.cpp,,,data/crawl/git/old_hunk_1282.cpp,data/crawl/git/new_hunk_1282.cpp,3,3,"fprintf(realstdout, ""%s\n"", filename.buf + outdir_offset);","printf(""%s\n"", filename.buf + outdir_offset);","[""updateLog"", ""removeVariable""]","[[""fprintf"", ""realstdout""], [""printf""]]",[13971046858766842764],5427,55440.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1276.cpp,,,data/crawl/git/old_hunk_1276.cpp,data/crawl/git/new_hunk_1276.cpp,-1,9,,"printf(get_shared_repository()
			       ? _(""Initialized empty shared Git repository in %s%s\n"")
			       : _(""Initialized empty Git repository in %s%s\n""),
			       git_dir, len && git_dir[len-1] != '/' ? ""/"" : """");","[""addLog""]","[[], [""printf"", ""get_shared_repository"", ""_"", ""Initialized"", ""empty"", ""shared"", ""Git"", ""repository"", ""in"", ""%s%s\\n"", ""_"", ""Initialized"", ""empty"", ""Git"", ""repository"", ""in"", ""%s%s\\n"", ""git_dir"", ""len"", ""&&"", ""git_dir[len"", ""1]"", ""/"", ""/""]]",[29549093012699866690],5426,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1273.cpp,,,data/crawl/git/old_hunk_1273.cpp,data/crawl/git/new_hunk_1273.cpp,10,10,"printf(""tagged %s %s"", typename(tag->tagged->type), oid_to_hex(&tag->tagged->oid));","printf(""tagged %s %s"", typename(tag->tagged->type),
				describe_object(tag->tagged));","[""updateVariable"", ""removeVariable""]","[[""oid_to_hex"", ""&tag"", ""oid""], [""describe_object"", ""tag""]]",[3556527325527567042],5425,38160.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1258.cpp,,,data/crawl/git/old_hunk_1258.cpp,data/crawl/git/new_hunk_1258.cpp,1,1,"printf(""M %06o %s "", spec->mode,
				       sha1_to_hex(anonymize ?
						   anonymize_sha1(spec->sha1) :
						   spec->sha1));","printf(""M %06o %s "", spec->mode,
				       sha1_to_hex(anonymize ?
						   anonymize_sha1(spec->oid.hash) :
						   spec->oid.hash));","[""updateVariable"", ""addVariable""]","[[""sha1"", ""sha1""], [""oid"", ""hash"", ""oid"", ""hash""]]",[27550036826238570840],5424,52560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1257.cpp,,,data/crawl/git/old_hunk_1257.cpp,data/crawl/git/new_hunk_1257.cpp,9,-1,"fprintf(stderr, _(""done.\n""));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""_"", ""done"", ""\\n""], []]",[22732556845897639308],5423,36720.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1257.cpp,,,data/crawl/git/old_hunk_1257.cpp,data/crawl/git/new_hunk_1257.cpp,4,-1,"fprintf(stderr, _(""Checking connectivity... ""));",,"[""removeLog""]","[[""fprintf"", ""stderr"", ""_"", ""Checking"", ""connectivity""], []]",[-707430495552391425],5422,36720.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1250.cpp,,,data/crawl/git/old_hunk_1250.cpp,data/crawl/git/new_hunk_1250.cpp,-1,122,,"die(""BUG: state->lock_file should not be NULL"");","[""addLog""]","[[], [""die"", ""BUG"", ""state"", ""lock_file"", ""should"", ""not"", ""be"", ""NULL""]]",[13789745763295847838],5421,70560.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1212.cpp,,,data/crawl/git/old_hunk_1212.cpp,data/crawl/git/new_hunk_1212.cpp,-1,8,,"printf(Q_(""Bisecting: %d revision left to test after this %s\n"",
		  ""Bisecting: %d revisions left to test after this %s\n"",
		  nr), nr, steps_msg);","[""addLog""]","[[], [""printf"", ""Q_"", ""Bisecting"", ""%d"", ""revision"", ""left"", ""to"", ""test"", ""after"", ""this"", ""%s\\n"", ""Bisecting"", ""%d"", ""revisions"", ""left"", ""to"", ""test"", ""after"", ""this"", ""%s\\n"", ""nr"", ""nr"", ""steps_msg""]]",[37891228077875911279],5420,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1212.cpp,,,data/crawl/git/old_hunk_1212.cpp,data/crawl/git/new_hunk_1212.cpp,3,3,"printf(""Bisecting: %d revision%s left to test after this ""
	       ""(roughly %d step%s)\n"", nr, (nr == 1 ? """" : ""s""),
	       steps, (steps == 1 ? """" : ""s""));","xsnprintf(steps_msg, sizeof(steps_msg),
		  Q_(""(roughly %d step)"", ""(roughly %d steps)"", steps),
		  steps);","[""moveContent"", ""updateVariable"", ""updateLog"", ""moveVariable"", ""removeVariable"", ""updateContent"", ""removeContent"", ""addVariable""]","[[""printf"", ""Bisecting"", ""revision%s"", ""left"", ""to"", ""test"", ""after"", ""this"", ""step%s"", ""\\n"", ""nr"", ""nr"", ""1"", ""s"", ""1"", ""s""], [""xsnprintf"", ""steps_msg"", ""sizeof"", ""steps_msg"", ""Q_"", ""step"", ""roughly"", ""steps""]]",[-14846855508532818832],5419,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1206.cpp,,,data/crawl/git/old_hunk_1206.cpp,data/crawl/git/new_hunk_1206.cpp,-1,21,,"_(""Some %s revs are not ancestor of the %s rev.\n""
		""git bisect cannot work properly in this case.\n""
		""Maybe you mistook %s and %s revs?\n"");","[""addLog""]","[[], [""_"", ""Some"", ""%s"", ""revs"", ""are"", ""not"", ""ancestor"", ""of"", ""the"", ""%s"", ""rev"", ""\\n"", ""git"", ""bisect"", ""cannot"", ""work"", ""properly"", ""in"", ""this"", ""case"", ""\\n"", ""Maybe"", ""you"", ""mistook"", ""%s"", ""and"", ""%s"", ""revs"", ""\\n""]]",[-27325871189488331750],5418,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1204.cpp,,,data/crawl/git/old_hunk_1204.cpp,data/crawl/git/new_hunk_1204.cpp,-1,5,,"printf(""%s\n"", oid_to_hex(&tried->item->object.oid));","[""addLog""]","[[], [""printf"", ""%s\\n"", ""oid_to_hex"", ""&tried"", ""item"", ""object"", ""oid""]]",[15084629179516435232],5417,45360.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1198.cpp,,,data/crawl/git/old_hunk_1198.cpp,data/crawl/git/new_hunk_1198.cpp,-1,14,,"error(_(""It is not possible to %s because you have unmerged files.""),
			me);","[""addLog""]","[[], [""error"", ""_"", ""It"", ""is"", ""not"", ""possible"", ""to"", ""%s"", ""because"", ""you"", ""have"", ""unmerged"", ""files"", ""me""]]",[13059711434511665232],5416,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1198.cpp,,,data/crawl/git/old_hunk_1198.cpp,data/crawl/git/new_hunk_1198.cpp,-1,12,,"error(_(""Reverting is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Reverting"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[6489760039460019971],5415,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1198.cpp,,,data/crawl/git/old_hunk_1198.cpp,data/crawl/git/new_hunk_1198.cpp,-1,10,,"error(_(""Pulling is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Pulling"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[17592393791092117608],5414,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1198.cpp,,,data/crawl/git/old_hunk_1198.cpp,data/crawl/git/new_hunk_1198.cpp,-1,6,,"error(_(""Committing is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Committing"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[9795701741445913241],5413,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1198.cpp,,,data/crawl/git/old_hunk_1198.cpp,data/crawl/git/new_hunk_1198.cpp,-1,4,,"error(_(""Cherry-picking is not possible because you have unmerged files.""));","[""addLog""]","[[], [""error"", ""_"", ""Cherry"", ""picking"", ""is"", ""not"", ""possible"", ""because"", ""you"", ""have"", ""unmerged"", ""files""]]",[3484454274539471319],5412,60480.0,2
https://github.com/git/git/commit/49981d8a250837019b4a14f44d471fc6ff7e334f,09 Sep 2016,Start maintenance track for 2.10.x series,54721,data/crawl/git/hunk_1198.cpp,,,data/crawl/git/old_hunk_1198.cpp,data/crawl/git/new_hunk_1198.cpp,3,8,"error(""%s is not possible because you have unmerged files."", me);","error(_(""Merging is not possible because you have unmerged files.""));","[""removeVariable"", ""updateContent"", ""addVariable""]","[[""%s"", ""me""], [""_"", ""Merging""]]",[-1742723759518091246],5411,60480.0,2
https://github.com/git/git/commit/321459439e19517c412cab1cfbb64a2749f272c9,11 Sep 2016,"cat-file: support --textconv/--filters in batch mode

With this patch, --batch can be combined with --textconv or --filters.
For this to work, the input needs to have the form

	<object name><single white space><path>

so that the filters can be chosen appropriately.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",77,data/crawl/git/hunk_1169.cpp,,,data/crawl/git/old_hunk_1169.cpp,data/crawl/git/new_hunk_1169.cpp,-1,13,,"die(""could not convert '%s' %s"",
					    sha1_to_hex(sha1), data->rest);","[""addLog""]","[[], [""die"", ""could"", ""not"", ""convert"", ""%s"", ""%s"", ""sha1_to_hex"", ""sha1"", ""data"", ""rest""]]",[-9031763742092838266],5410,0.0,2
https://github.com/git/git/commit/8354fa3d4ca50850760ceee9054e3e7a799a4d62,27 Sep 2016,"fsck: handle bad trees like other errors

Instead of dying when fsck hits a malformed tree object, log the error
like any other and continue.  Now fsck can tell the user which tree is
bad, too.

Signed-off-by: David Turner <dturner@twosigma.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",125,data/crawl/git/hunk_1086.cpp,,,data/crawl/git/old_hunk_1086.cpp,data/crawl/git/new_hunk_1086.cpp,13,15,"die(_(""malformed mode in tree entry for tree""));","strbuf_addstr(err, _(""malformed mode in tree entry""));","[""updateLog"", ""updateContent"", ""addVariable""]","[[""die"", ""for"", ""tree""], [""strbuf_addstr"", ""err""]]",[-962019501999277057],5409,0.0,2
https://github.com/git/git/commit/ea63b393ec76484690733d6f589c9e67fedbaa78,07 Oct 2016,"pull: make code more similar to the shell script again

When converting the pull command to a builtin, the
require_clean_work_tree() function was renamed and the pull-specific
parts hard-coded.

This makes it impossible to reuse the code, so let's modify the code to
make it more similar to the original shell script again.

Note: when the hint ""Please commit or stash them"" was introduced first,
Git did not have the convention of continuing error messages in lower
case, but now we do have that convention, therefore we reintroduce this
hint down-cased, obeying said convention.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",30,data/crawl/git/hunk_1079.cpp,,,data/crawl/git/old_hunk_1079.cpp,data/crawl/git/new_hunk_1079.cpp,14,16,"error(_(""Cannot pull with rebase: You have unstaged changes.""));","error(_(""Cannot %s: You have unstaged changes.""), _(action));","[""updateContent"", ""addVariable""]","[[""pull"", ""with"", ""rebase""], [""%s"", ""_"", ""action""]]",[7992579998189109005],5408,0.0,2
https://github.com/git/git/commit/fd84986f467b2556e0675d1df00f83b3a323cf2e,07 Oct 2016,"wt-status: make the require_clean_work_tree() function reusable

The function used by ""git pull"" to stop the user when the working
tree has changes is useful in other places.

Let's move it into a more prominent (and into an actually reusable)
spot: wt-status.[ch].

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",156,data/crawl/git/hunk_1077.cpp,,,data/crawl/git/old_hunk_1077.cpp,data/crawl/git/new_hunk_1077.cpp,-1,71,,"error(""%s"", hint);","[""addLog""]","[[], [""error"", ""%s"", ""hint""]]",[16089455691081186812],5407,0.0,2
https://github.com/git/git/commit/fd84986f467b2556e0675d1df00f83b3a323cf2e,07 Oct 2016,"wt-status: make the require_clean_work_tree() function reusable

The function used by ""git pull"" to stop the user when the working
tree has changes is useful in other places.

Let's move it into a more prominent (and into an actually reusable)
spot: wt-status.[ch].

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",156,data/crawl/git/hunk_1077.cpp,,,data/crawl/git/old_hunk_1077.cpp,data/crawl/git/new_hunk_1077.cpp,-1,62,,"error(_(""Additionally, your index contains uncommitted changes.""));","[""addLog""]","[[], [""error"", ""_"", ""Additionally"", ""your"", ""index"", ""contains"", ""uncommitted"", ""changes""]]",[-4734246095634023902],5406,343440.0,2
https://github.com/git/git/commit/87d1353a6a133aafd2ef29ba6c740a8d3d71dadb,11 Oct 2016,"contrib: add credential helper for libsecret

This is based on the existing gnome-keyring helper, but instead of
libgnome-keyring (which was specific to GNOME and is deprecated), it
uses libsecret which can support other implementations of XDG Secret
Service API.

Passes t0303-credential-external.sh.

Signed-off-by: Mantas Mikulėnas <grawity@gmail.com>
Reviewed-by: Dennis Kaarsemaker <dennis@kaarsemaker.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",395,data/crawl/git/hunk_1057.cpp,,,data/crawl/git/old_hunk_1057.cpp,data/crawl/git/new_hunk_1057.cpp,-1,310,,"fprintf(fp, ""%s=%s\n"", key, value);","[""addLog""]","[[], [""fprintf"", ""fp"", ""%s"", ""%s\\n"", ""key"", ""value""]]",[1632670858238606504],5405,1270800.0,2
https://github.com/git/git/commit/87cb7845fee4f23434da8b601583dab225dd85d6,17 Oct 2016,"i18n: convert mark error messages for translation

Mark error messages about CRLF for translation.

Update test to reflect changes.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_1009.cpp,,,data/crawl/git/old_hunk_1009.cpp,data/crawl/git/new_hunk_1009.cpp,3,3,"warning(""CRLF will be replaced by LF in %s.\nThe file will have its original line endings in your working directory."", path);","warning(_(""CRLF will be replaced by LF in %s.\n""
				  ""The file will have its original line""
				  "" endings in your working directory.""), path);","[""updateContent"", ""addContent"", ""addVariable""]","[[""\\nThe""], [""_"", ""\\n"", ""The""]]",[-1257377704870587202],5404,0.0,2
https://github.com/git/git/commit/c0246501ed02c3bd1baa0953d5a46a874edc171e,21 Oct 2016,"sequencer: future-proof read_populate_todo()

Over the next commits, we will work on improving the sequencer to the
point where it can process the todo script of an interactive rebase. To
that end, we will need to teach the sequencer to read interactive
rebase's todo file. In preparation, we consolidate all places where
that todo file is needed to call a function that we will later extend.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",18,data/crawl/git/hunk_1006.cpp,,,data/crawl/git/old_hunk_1006.cpp,data/crawl/git/new_hunk_1006.cpp,13,13,"error(_(""Could not read %s.""), git_path_todo_file());","error(_(""Could not read %s.""), todo_file);","[""removeVariable"", ""addVariable""]","[[""git_path_todo_file""], [""todo_file""]]",[210441503875058068],5403,0.0,2
https://github.com/git/git/commit/004fefa754a4aa3a99a5954da9fb805dbba8dbeb,21 Oct 2016,"sequencer: completely revamp the ""todo"" script parsing

When we came up with the ""sequencer"" idea, we really wanted to have
kind of a plumbing equivalent of the interactive rebase. Hence the
choice of words: the ""todo"" script, a ""pick"", etc.

However, when it came time to implement the entire shebang, somehow this
idea got lost and the sequencer was used as working horse for
cherry-pick and revert instead. So as not to interfere with the
interactive rebase, it even uses a separate directory to store its
state.

Furthermore, it also is stupidly strict about the ""todo"" script it
accepts: while it parses commands in a way that was *designed* to be
similar to the interactive rebase, it then goes on to *error out* if the
commands disagree with the overall action (cherry-pick or revert).

Finally, the sequencer code chose to deviate from the interactive rebase
code insofar that when it comes to writing the file with the remaining
commands, it *reformats* the ""todo"" script instead of just writing the
part of the parsed script that were not yet processed. This is not only
unnecessary churn, but might well lose information that is valuable to
the user (i.e. comments after the commands).

Let's just bite the bullet and rewrite the entire parser; the code now
becomes not only more elegant: it allows us to go on and teach the
sequencer how to parse *true* ""todo"" scripts as used by the interactive
rebase itself. In a way, the sequencer is about to grow up to do its
older brother's job. Better.

In particular, we choose to maintain the list of commands in an array
instead of a linked list: this is flexible enough to allow us later on to
even implement rebase -i's reordering of fixup!/squash! commits very
easily (and with a very nice speed bonus, at least on Windows).

While at it, do not stop at the first problem, but list *all* of the
problems. This will help the user when the sequencer will do `rebase
-i`'s work by allowing to address all issues in one go rather than going
back and forth until the todo list is valid.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",284,data/crawl/git/hunk_1004.cpp,,,data/crawl/git/old_hunk_1004.cpp,data/crawl/git/new_hunk_1004.cpp,-1,114,,"error(_(""Cannot cherry-pick during a revert.""));","[""addLog""]","[[], [""error"", ""_"", ""Cannot"", ""cherry"", ""pick"", ""during"", ""a"", ""revert""]]",[21454229367931508845],5402,0.0,2
https://github.com/git/git/commit/901707babc95950a6e6bd0fcea2070f63b704ef4,14 Dec 2016,"i18n: clean.c: match string with git-add--interactive.perl

Change strings for help to match the ones in git-add--interactive.perl.
The strings now represent one entry to translate each rather then two
entries each different only by an ending newline character.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_913.cpp,,,data/crawl/git/old_hunk_913.cpp,data/crawl/git/new_hunk_913.cpp,3,3,"printf_ln(_(""Huh (%s)?""), (*ptr)->buf);","printf(_(""Huh (%s)?\n""), (*ptr)->buf);","[""updateLog"", ""updateContent""]","[[""printf_ln""], [""printf"", ""\\n""]]",[369715489477970096],5401,0.0,2
https://github.com/git/git/commit/464931053bba771c670fa52ed6ca2eea72a55109,14 Dec 2016,"i18n: send-email: mark warnings and errors for translation

Mark warnings, errors and other messages for translation.

Signed-off-by: Vasco Almeida <vascomalmeida@sapo.pt>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",34,data/crawl/git/hunk_905.cpp,,,data/crawl/git/old_hunk_905.cpp,data/crawl/git/new_hunk_905.cpp,3,3,"die(""the editor exited uncleanly, aborting everything"");","(__(""the editor exited uncleanly, aborting everything"");","[""addLog"", ""updateLog""]","[[""die""], [""__""]]",[1937246881258584471],5400,0.0,2
https://github.com/git/git/commit/5a1c824f70ec261f8f9e5e039555fc80301dee0b,27 Dec 2016,"submodule: modernize ok_to_remove_submodule to use argv_array

Instead of constructing the NULL terminated array ourselves, we
should make use of the argv_array infrastructure.

While at it, adapt the error messages to reflect the actual invocation.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",14,data/crawl/git/hunk_883.cpp,,,data/crawl/git/old_hunk_883.cpp,data/crawl/git/new_hunk_883.cpp,10,11,"die(""Could not run 'git status --porcelain -uall --ignore-submodules=none' in submodule %s"", path);","die(_(""could not run 'git status --porcelain -u --ignore-submodules=none' in submodule %s""), path);","[""updateContent"", ""addVariable""]","[[""Could"", ""uall""], [""_"", ""could"", ""u""]]",[-6468752326236583768],5399,0.0,2
https://github.com/git/git/commit/4b83ce9f6772451d4582dc1f0891790acbdf4eb1,09 Jan 2017,"sequencer (rebase -i): update refs after a successful rebase

An interactive rebase operates on a detached HEAD (to keep the reflog
of the original branch relatively clean), and updates the branch only
at the end.

Now that the sequencer learns to perform interactive rebases, it also
needs to learn the trick to update the branch before removing the
directory containing the state of the interactive rebase.

We introduce a new head_ref variable in a wider scope than necessary at
the moment, to allow for a later patch that prints out ""Successfully
rebased and updated <ref>"".

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",46,data/crawl/git/hunk_848.cpp,,,data/crawl/git/old_hunk_848.cpp,data/crawl/git/new_hunk_848.cpp,-1,15,,"error(_(""cannot read HEAD""));","[""addLog""]","[[], [""error"", ""_"", ""cannot"", ""read"", ""HEAD""]]",[8979519521310852658],5398,0.0,2
https://github.com/git/git/commit/b5a9e435c6dfb40df0a27521c1c6590c8f68ffb2,11 Jan 2017,"Revert ""vreportf: avoid intermediate buffer""

This reverts commit f4c3edc0b156362a92bf9de4f0ec794e90a757fc.

The purpose of that commit was to let us write errors of
arbitrary length to stderr by skipping the intermediate
buffer and sending our varargs straight to fprintf. That
works, but it comes with a downside: we do not get access to
the varargs before they are sent to stderr.

On balance, it's not a good tradeoff. Error messages larger
than our 4K buffer are quite uncommon, and we've lost the
ability to make any modifications to the output (e.g., to
remove non-printable characters).

The only way to have both would be one of:

  1. Write into a dynamic buffer. But this is a bad idea for
     a low-level function that may be called when malloc()
     has failed.

  2. Do our own printf-format varargs parsing. This is too
     complex to be worth the trouble.

Let's just revert that change and go back to a fixed buffer.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",15,data/crawl/git/hunk_842.cpp,,,data/crawl/git/old_hunk_842.cpp,data/crawl/git/new_hunk_842.cpp,15,9,"fputs(prefix, fh);","fprintf(fh, ""%s%s\n"", prefix, msg);","[""updateLog"", ""addContent"", ""addVariable""]","[[""fputs""], [""fprintf"", ""%s%s\\n"", ""msg""]]",[8681917895983381239],5397,2412000.0,2
https://github.com/git/git/commit/f6371f9210418f1beabc85b097e2a3470aeeb54d,15 Jan 2017,"sha1_file: add read_loose_object() function

It's surprisingly hard to ask the sha1_file code to open a
_specific_ incarnation of a loose object. Most of the
functions take a sha1, and loop over the various object
types (packed versus loose) and locations (local versus
alternates) at a low level.

However, some tools like fsck need to look at a specific
file. This patch gives them a function they can use to open
the loose object at a given path.

The implementation unfortunately ends up repeating bits of
related functions, but there's not a good way around it
without some major refactoring of the whole sha1_file stack.
We need to mmap the specific file, then partially read the
zlib stream to know whether we're streaming or not, and then
finally either stream it or copy the data to a buffer.

We can do that by assembling some of the more arcane
internal sha1_file functions, but we end up having to
essentially reimplement unpack_sha1_file(), along with the
streaming bits of check_sha1_signature().

Still, most of the ugliness is contained in the new
function, and the interface is clean enough that it may be
reusable (though it seems unlikely anything but git-fsck
would care about opening a specific file).

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",146,data/crawl/git/hunk_837.cpp,,,data/crawl/git/old_hunk_837.cpp,data/crawl/git/new_hunk_837.cpp,-1,48,,"error(""sha1 mismatch for %s (expected %s)"", path,
		      sha1_to_hex(expected_sha1));","[""addLog""]","[[], [""error"", ""sha1"", ""mismatch"", ""for"", ""%s"", ""expected"", ""%s"", ""path"", ""sha1_to_hex"", ""expected_sha1""]]",[20694352320631420898],5396,0.0,2
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/hunk_815.cpp,,,data/crawl/git/old_hunk_815.cpp,data/crawl/git/new_hunk_815.cpp,-1,210,,"die(""could not obtain raw diff"");","[""addLog""]","[[], [""die"", ""could"", ""not"", ""obtain"", ""raw"", ""diff""]]",[-2312605055700372382],5395,0.0,2
https://github.com/git/git/commit/03831ef7b5011cbedbcc67abe5f47762f37c6c21,19 Jan 2017,"difftool: implement the functionality in the builtin

This patch gives life to the skeleton added in the previous patch.

The motivation for converting the difftool is that Perl scripts are not at
all native on Windows, and that `git difftool` therefore is pretty slow on
that platform, when there is no good reason for it to be slow.

In addition, Perl does not really have access to Git's internals. That
means that any script will always have to jump through unnecessary
hoops, and it will often need to perform unnecessary work (e.g. when
reading the entire config every time `git config` is called to query a
single config value).

The current version of the builtin difftool does not, however, make full
use of the internals but instead chooses to spawn a couple of Git
processes, still, to make for an easier conversion. There remains a lot
of room for improvement, left later.

Note: to play it safe, the original difftool is still called unless the
config setting difftool.useBuiltin is set to true.

The reason: this new, experimental, builtin difftool was shipped as part
of Git for Windows v2.11.0, to allow for easier large-scale testing, but
of course as an opt-in feature.

The speedup is actually more noticable on Linux than on Windows: a quick
test shows that t7800-difftool.sh runs in (2.183s/0.052s/0.108s)
(real/user/sys) in a Linux VM, down from  (6.529s/3.112s/0.644s), while on
Windows, it is (36.064s/2.730s/7.194s), down from (47.637s/2.407s/6.863s).
The culprit is most likely the overhead incurred from *still* having to
shell out to mergetool-lib.sh and difftool--helper.sh.

Still, it is an improvement.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",672,data/crawl/git/hunk_815.cpp,,,data/crawl/git/old_hunk_815.cpp,data/crawl/git/new_hunk_815.cpp,-1,55,,"error(""expected object ID, got '%s'"", p + 1);","[""addLog""]","[[], [""error"", ""expected"", ""object"", ""ID"", ""got"", ""%s"", ""p"", ""1""]]",[7055481079999411023],5394,0.0,2
https://github.com/git/git/commit/f1627040b9305dc38994f799c172393909b2c70c,23 Jan 2017,"show-ref: allow -d to work with --verify

Move handling of -d into show_one(), so that it takes effect when
--verify is present as well as when it is absent. This is useful when
the user wishes to avoid the costly iteration of refs.

Signed-off-by: Vladimir Panteleev <git@thecybershadow.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_809.cpp,,,data/crawl/git/old_hunk_809.cpp,data/crawl/git/new_hunk_809.cpp,8,-1,"printf(""%s %s^{}\n"", hex, refname);",,"[""removeLog""]","[[""printf"", ""%s"", ""%s"", ""\\n"", ""hex"", ""refname""], []]",[-8415771278981456964],5393,1131120.0,2
https://github.com/git/git/commit/3d415425c7b6ca0d2243a4589672369e7a02fc2c,25 Jan 2017,"unpack-trees: support super-prefix option

In the future we want to support working tree operations within submodules,
e.g. ""git checkout --recurse-submodules"", which will update the submodule
to the commit as recorded in its superproject. In the submodule the
unpack-tree operation is carried out as usual, but the reporting to the
user needs to prefix any path with the superproject. The mechanism for
this is the super-prefix. (see 74866d757, git: make super-prefix option)

Add support for the super-prefix option for commands that unpack trees
by wrapping any path output in unpacking trees in the newly introduced
super_prefixed function. This new function prefixes any path with the
super-prefix if there is one.  Assuming the submodule case doesn't happen
in the majority of the cases, we'd want to have a fast behavior for no
super prefix, i.e. no reallocation/copying, but just returning path.

Another aspect of introducing the `super_prefixed` function is to consider
who owns the memory and if this is the right place where the path gets
modified. As the super prefix ought to change the output behavior only and
not the actual unpack tree part, it is fine to be that late in the line.
As we get passed in 'const char *path', we cannot change the path itself,
which means in case of a super prefix we have to copy over the path.
We need two static buffers in that function as the error messages
contain at most two paths.

For testing purposes enable it in read-tree, which has no output
of paths other than an unpack-trees.c. These are all converted in
this patch.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_802.cpp,,,data/crawl/git/old_hunk_802.cpp,data/crawl/git/new_hunk_802.cpp,3,3,"error(ERRORMSG(o, e), path);","error(ERRORMSG(o, e), super_prefixed(path));","[""addVariable""]","[[], [""super_prefixed""]]",[6677385002893205341],5392,0.0,2
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_789.cpp,,,data/crawl/git/old_hunk_789.cpp,data/crawl/git/new_hunk_789.cpp,18,-1,"die(""No path in gitfile: %s"", path);",,"[""removeLog""]","[[""die"", ""No"", ""path"", ""in"", ""gitfile"", ""%s"", ""path""], []]",[-10252895552164965996],5391,429840.0,2
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_789.cpp,,,data/crawl/git/old_hunk_789.cpp,data/crawl/git/new_hunk_789.cpp,16,-1,"die(""Invalid gitfile format: %s"", path);",,"[""removeLog""]","[[""die"", ""Invalid"", ""gitfile"", ""format"", ""%s"", ""path""], []]",[-833715539263737418],5390,429840.0,2
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_789.cpp,,,data/crawl/git/old_hunk_789.cpp,data/crawl/git/new_hunk_789.cpp,14,-1,"die(""Error reading %s"", path);",,"[""removeLog""]","[[""die"", ""Error"", ""reading"", ""%s"", ""path""], []]",[-6728088579270477266],5389,429840.0,2
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_789.cpp,,,data/crawl/git/old_hunk_789.cpp,data/crawl/git/new_hunk_789.cpp,10,-1,"die_errno(""Error opening '%s'"", path);",,"[""removeLog""]","[[""die_errno"", ""Error"", ""opening"", ""%s"", ""path""], []]",[633957807135652445],5388,429840.0,2
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_788.cpp,,,data/crawl/git/old_hunk_788.cpp,data/crawl/git/new_hunk_788.cpp,-1,13,,"die(""Too large to be a .git file: '%s'"", path);","[""addLog""]","[[], [""die"", ""Too"", ""large"", ""to"", ""be"", ""a"", ""git"", ""file"", ""%s"", ""path""]]",[-13302403402236549424],5387,425520.0,2
https://github.com/git/git/commit/5f29433f1ca1efc35d546a056200d923e86e3fca,26 Jan 2017,"cache.h: expose the dying procedure for reading gitlinks

In a later patch we want to react to only a subset of errors, defaulting
the rest to die as usual. Separate the block that takes care of dying
into its own function so we have easy access to it.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",49,data/crawl/git/hunk_788.cpp,,,data/crawl/git/old_hunk_788.cpp,data/crawl/git/new_hunk_788.cpp,-1,11,,"die_errno(""Error opening '%s'"", path);","[""addLog""]","[[], [""die_errno"", ""Error"", ""opening"", ""%s"", ""path""]]",[-633957807135652445],5386,429840.0,2
https://github.com/git/git/commit/ec9629b3b9abc9fc9cb2a9e058bf8dccbc760433,26 Jan 2017,"submodule absorbing: fix worktree/gitdir pointers recursively for non-moves

Consider having a submodule 'sub' and a nested submodule at 'sub/nested'.
When nested is already absorbed into sub, but sub is not absorbed into
its superproject, then we need to fixup the gitfile and core.worktree
setting for 'nested' when absorbing 'sub', but we do not need to move
its git dir around.

Previously 'nested's gitfile contained ""gitdir: ../.git/modules/nested"";
it has to be corrected to ""gitdir: ../../.git/modules/sub1/modules/nested"".

An alternative I considered to do this work lazily, i.e. when resolving
""../.git/modules/nested"", we would notice the "".git"" being a gitfile
linking to another path.  That seemed to be robuster by design, but harder
to get the implementation right.  Maybe we have to do that anyway once we
try to have submodules and worktrees working nicely together, but for now
just produce 'correct' (i.e. direct) pointers.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_787.cpp,,,data/crawl/git/old_hunk_787.cpp,data/crawl/git/new_hunk_787.cpp,-1,37,,"die(_(""could not create directory '%s'""), new_git_dir);","[""addLog""]","[[], [""die"", ""_"", ""could"", ""not"", ""create"", ""directory"", ""%s"", ""new_git_dir""]]",[11745325356097174729],5385,32400.0,2
https://github.com/git/git/commit/ec9629b3b9abc9fc9cb2a9e058bf8dccbc760433,26 Jan 2017,"submodule absorbing: fix worktree/gitdir pointers recursively for non-moves

Consider having a submodule 'sub' and a nested submodule at 'sub/nested'.
When nested is already absorbed into sub, but sub is not absorbed into
its superproject, then we need to fixup the gitfile and core.worktree
setting for 'nested' when absorbing 'sub', but we do not need to move
its git dir around.

Previously 'nested's gitfile contained ""gitdir: ../.git/modules/nested"";
it has to be corrected to ""gitdir: ../../.git/modules/sub1/modules/nested"".

An alternative I considered to do this work lazily, i.e. when resolving
""../.git/modules/nested"", we would notice the "".git"" being a gitfile
linking to another path.  That seemed to be robuster by design, but harder
to get the implementation right.  Maybe we have to do that anyway once we
try to have submodules and worktrees working nicely together, but for now
just produce 'correct' (i.e. direct) pointers.

Signed-off-by: Stefan Beller <sbeller@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",89,data/crawl/git/hunk_787.cpp,,,data/crawl/git/old_hunk_787.cpp,data/crawl/git/new_hunk_787.cpp,-1,34,,"die(_(""could not lookup name for submodule '%s'""), path);","[""addLog""]","[[], [""die"", ""_"", ""could"", ""not"", ""lookup"", ""name"", ""for"", ""submodule"", ""%s"", ""path""]]",[-4914658082372174174],5384,32400.0,2
https://github.com/git/git/commit/ea194895326d10f6e255eee05ac25ab5ae096dd9,24 Mar 2017,"name-hash: add test-lazy-init-name-hash

Add t/helper/test-lazy-init-name-hash.c test code
to demonstrate performance times for lazy_init_name_hash()
using the original single-threaded and the new multi-threaded
code paths.

Includes a --dump option to dump the created hashmaps to
stdout.  You can use this to run both code paths and
confirm that they generate the same hashmaps.

Includes a --analyze option to analyze performance of both
code paths over a range of index sizes to help you find a
lower bound for the LAZY_THREAD_COST in name-hash.c.
For example, passing ""-a 4000"" will set ""istate.cache_nr""
to 4000 and then try the multi-threaded code -- probably
giving 2 threads with 2000 entries each.  It will then
run both the single-threaded (1x4000) and the multi-threaded
(2x2000) and compare the times.  It will then repeat the
test with 8000, 12000, and etc. so that you can see the
cross over.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",266,data/crawl/git/hunk_747.cpp,,,data/crawl/git/old_hunk_747.cpp,data/crawl/git/new_hunk_747.cpp,-1,220,,"die(""cannot combine dump, perf, or analyze"");","[""addLog""]","[[], [""die"", ""cannot"", ""combine"", ""dump"", ""perf"", ""or"", ""analyze""]]",[5285639163730376403],5383,0.0,2
https://github.com/git/git/commit/ea194895326d10f6e255eee05ac25ab5ae096dd9,24 Mar 2017,"name-hash: add test-lazy-init-name-hash

Add t/helper/test-lazy-init-name-hash.c test code
to demonstrate performance times for lazy_init_name_hash()
using the original single-threaded and the new multi-threaded
code paths.

Includes a --dump option to dump the created hashmaps to
stdout.  You can use this to run both code paths and
confirm that they generate the same hashmaps.

Includes a --analyze option to analyze performance of both
code paths over a range of index sizes to help you find a
lower bound for the LAZY_THREAD_COST in name-hash.c.
For example, passing ""-a 4000"" will set ""istate.cache_nr""
to 4000 and then try the multi-threaded code -- probably
giving 2 threads with 2000 entries each.  It will then
run both the single-threaded (1x4000) and the multi-threaded
(2x2000) and compare the times.  It will then repeat the
test with 8000, 12000, and etc. so that you can see the
cross over.

Signed-off-by: Jeff Hostetler <jeffhost@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",266,data/crawl/git/hunk_747.cpp,,,data/crawl/git/old_hunk_747.cpp,data/crawl/git/new_hunk_747.cpp,-1,39,,"die(""non-threaded code path used"");","[""addLog""]","[[], [""die"", ""non"", ""threaded"", ""code"", ""path"", ""used""]]",[15427955451232325421],5382,0.0,2
https://github.com/git/git/commit/7202a6fa8773fdcf3f374625def3c15276250b67,24 Mar 2017,"encode_in_pack_object_header: respect output buffer length

The encode_in_pack_object_header() writes a variable-length
header to an output buffer, but it doesn't actually know
long the buffer is. At first glance, this looks like it
might be possible to overflow.

In practice, this is probably impossible. The smallest
buffer we use is 10 bytes, which would hold the header for
an object up to 2^67 bytes. Obviously we're not likely to
see such an object, but we might worry that an object could
lie about its size (causing us to overflow before we realize
it does not actually have that many bytes). But the argument
is passed as a uintmax_t. Even on systems that have __int128
available, uintmax_t is typically restricted to 64-bit by
the ABI.

So it's unlikely that a system exists where this could be
exploited. Still, it's easy enough to use a normal out/len
pair and make sure we don't write too far. That protects the
hypothetical 128-bit system, makes it harder for callers to
accidentally specify a too-small buffer, and makes the
resulting code easier to audit.

Note that the one caller in fast-import tried to catch such
a case, but did so _after_ the call (at which point we'd
have already overflowed!). This check can now go away.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_742.cpp,,,data/crawl/git/old_hunk_742.cpp,data/crawl/git/new_hunk_742.cpp,5,-1,"die(""impossibly large object header"");",,"[""removeLog""]","[[""die"", ""impossibly"", ""large"", ""object"", ""header""], []]",[28692390870752117574],5381,0.0,2
https://github.com/git/git/commit/fcecf0b968b5e262200426ccf1d0b82495c261fe,27 Mar 2017,"submodule.c: port is_submodule_modified to use porcelain 2

Migrate 'is_submodule_modified' to the new porcelain format of
git-status. This conversion attempts to convert faithfully, i.e.
the behavior ought to be exactly the same.

As the output in the parsing only distinguishes between untracked files
and the rest, this is easy to port to the new format, as we only
need to identify untracked files and the rest is handled in the ""else""
case.

untracked files are indicated by only a single question mark instead of
two question marks, so the conversion is easy.

Signed-off-by: Stefan Beller <sbeller@google.com>
Reviewed-by: Jonathan Nieder <jrnieder@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",9,data/crawl/git/hunk_740.cpp,,,data/crawl/git/old_hunk_740.cpp,data/crawl/git/new_hunk_740.cpp,3,3,"die(""Could not run 'git status --porcelain' in submodule %s"", path);","die(""Could not run 'git status --porcelain=2' in submodule %s"", path);","[""updateContent""]","[[], [""2""]]",[6400019251],5380,0.0,2
https://github.com/git/git/commit/a5c1efd693a09bd7d058e1370869e061f94b61ed,27 Mar 2017,"files-backend: move ""logs/"" out of TMP_RENAMED_LOG

This makes reflog path building consistent, always in the form of

    strbuf_git_path(sb, ""logs/%s"", refname);

It reduces the mental workload a bit in the next patch when that
function call is converted.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_731.cpp,,,data/crawl/git/old_hunk_731.cpp,data/crawl/git/new_hunk_731.cpp,3,3,"error(""unable to move logfile logs/%s to ""TMP_RENAMED_LOG"": %s"",
			    oldrefname, strerror(errno));","error(""unable to move logfile logs/%s to logs/""TMP_RENAMED_LOG"": %s"",
			    oldrefname, strerror(errno));","[""updateContent""]","[[], [""logs/""]]",[-2243997909842769431],5379,0.0,2
https://github.com/git/git/commit/f57f37e2e1bf11ab4cdfd221ad47e961ba9353a0,27 Mar 2017,"files-backend: remove the use of git_path()

Given $GIT_DIR and $GIT_COMMON_DIR, files-backend is now in charge of
deciding what goes where (*). The end goal is to pass $GIT_DIR only. A
refs ""view"" of a linked worktree is a logical ref store that combines
two files backends together.

(*) Not entirely true since strbuf_git_path_submodule() still does path
translation underneath. But that's for another patch.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",43,data/crawl/git/hunk_729.cpp,,,data/crawl/git/old_hunk_729.cpp,data/crawl/git/new_hunk_729.cpp,-1,20,,"die(""BUG: unknown ref type %d of ref %s"",
		    ref_type(refname), refname);","[""addLog""]","[[], [""die"", ""BUG"", ""unknown"", ""ref"", ""type"", ""%d"", ""of"", ""ref"", ""%s"", ""ref_type"", ""refname"", ""refname""]]",[14894807395794975751],5378,0.0,2
https://github.com/git/git/commit/378dc9103a6b36ecac5f63eb0d5a87f573081094,27 Mar 2017,"refs.c: kill register_ref_store(), add register_submodule_ref_store()

This is the last function in this code (besides public API) that takes
submodule argument and handles both main/submodule cases. Break it down,
move main store registration in get_main_ref_store() and keep the rest
in register_submodule_ref_store().

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",45,data/crawl/git/hunk_728.cpp,,,data/crawl/git/old_hunk_728.cpp,data/crawl/git/new_hunk_728.cpp,-1,20,,"die(""BUG: ref_store for submodule '%s' initialized twice"",
		    submodule);","[""addLog""]","[[], [""die"", ""BUG"", ""ref_store"", ""for"", ""submodule"", ""%s"", ""initialized"", ""twice"", ""submodule""]]",[-5567509895110398338],5377,143280.0,2
https://github.com/git/git/commit/80f2a6097c403234892b884a21810411e5837853,14 Apr 2017,"t/helper: add test-ref-store to test ref-store functions

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",279,data/crawl/git/hunk_670.cpp,,,data/crawl/git/old_hunk_670.cpp,data/crawl/git/new_hunk_670.cpp,-1,204,,"die(""not sha-1"");","[""addLog""]","[[], [""die"", ""not"", ""sha"", ""1""]]",[2966839916460251362],5376,0.0,2
https://github.com/git/git/commit/958f964691a250d9a7173f1c0a4c03fd9e71e2aa,17 Apr 2017,"refs: split `ref_cache` code into separate files

The `ref_cache` code is currently too tightly coupled to
`files-backend`, making the code harder to understand and making it
awkward for new code to use `ref_cache` (as we indeed have planned).
Start loosening that coupling by splitting `ref_cache` into a separate
module.

This commit moves code, adds declarations, and changes the visibility
of some functions, but doesn't change any code.

The modules are still too tightly coupled, but the situation will be
improved in subsequent commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1500,data/crawl/git/hunk_665.cpp,,,data/crawl/git/old_hunk_665.cpp,data/crawl/git/new_hunk_665.cpp,-1,468,,"die(""BUG: peel called before advance for cache iterator"");","[""addLog""]","[[], [""die"", ""BUG"", ""peel"", ""called"", ""before"", ""advance"", ""for"", ""cache"", ""iterator""]]",[5961038565736824288],5375,216720.0,2
https://github.com/git/git/commit/958f964691a250d9a7173f1c0a4c03fd9e71e2aa,17 Apr 2017,"refs: split `ref_cache` code into separate files

The `ref_cache` code is currently too tightly coupled to
`files-backend`, making the code harder to understand and making it
awkward for new code to use `ref_cache` (as we indeed have planned).
Start loosening that coupling by splitting `ref_cache` into a separate
module.

This commit moves code, adds declarations, and changes the visibility
of some functions, but doesn't change any code.

The modules are still too tightly coupled, but the situation will be
improved in subsequent commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1500,data/crawl/git/hunk_665.cpp,,,data/crawl/git/old_hunk_665.cpp,data/crawl/git/new_hunk_665.cpp,-1,274,,"warning(""Duplicated ref: %s"", ref1->name);","[""addLog""]","[[], [""warning"", ""Duplicated"", ""ref"", ""%s"", ""ref1"", ""name""]]",[-17155287839272663815],5374,1406160.0,2
https://github.com/git/git/commit/958f964691a250d9a7173f1c0a4c03fd9e71e2aa,17 Apr 2017,"refs: split `ref_cache` code into separate files

The `ref_cache` code is currently too tightly coupled to
`files-backend`, making the code harder to understand and making it
awkward for new code to use `ref_cache` (as we indeed have planned).
Start loosening that coupling by splitting `ref_cache` into a separate
module.

This commit moves code, adds declarations, and changes the visibility
of some functions, but doesn't change any code.

The modules are still too tightly coupled, but the situation will be
improved in subsequent commits.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1500,data/crawl/git/hunk_665.cpp,,,data/crawl/git/old_hunk_665.cpp,data/crawl/git/new_hunk_665.cpp,-1,272,,"die(""Duplicated ref, and SHA1s don't match: %s"", ref1->name);","[""addLog""]","[[], [""die"", ""Duplicated"", ""ref"", ""and"", ""SHA1s"", ""don"", ""t"", ""match"", ""%s"", ""ref1"", ""name""]]",[-859712450994717975],5373,1406160.0,2
https://github.com/git/git/commit/50c2d8555bbc5b29625452fbcc92d4e3395e7366,17 Apr 2017,"files_pack_refs(): use reference iteration

Use reference iteration rather than `do_for_each_entry_in_dir()` in
the definition of `files_pack_refs()`. This makes the code shorter and
easier to follow, because the logic can be inline rather than spread
between the main function and a callback function, and it removes the
need to use `pack_refs_cb_data` to preserve intermediate state.

This removes the last callers of `entry_resolves_to_object()` and
`get_loose_ref_dir()`, so delete those functions.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",143,data/crawl/git/hunk_658.cpp,,,data/crawl/git/old_hunk_658.cpp,data/crawl/git/new_hunk_658.cpp,-1,64,,"die(""error while iterating over references"");","[""addLog""]","[[], [""die"", ""error"", ""while"", ""iterating"", ""over"", ""references""]]",[-5207743151804316394],5372,0.0,2
https://github.com/git/git/commit/db015a284e74b93db9184d39eb0be749e631242d,21 Apr 2017,"run-command: don't die in child when duping /dev/null

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",28,data/crawl/git/hunk_650.cpp,,,data/crawl/git/old_hunk_650.cpp,data/crawl/git/new_hunk_650.cpp,-1,13,,"die_errno(_(""open /dev/null failed""));","[""addLog""]","[[], [""die_errno"", ""_"", ""open"", ""/dev/null"", ""failed""]]",[-24460229174763983806],5371,992880.0,2
https://github.com/git/git/commit/45afb1ca9c28855096c94926e5b16dfbcde7381f,21 Apr 2017,"run-command: block signals between fork and execve

Signal handlers of the parent firing in the forked child may
have unintended side effects.  Rather than auditing every signal
handler we have and will ever have, block signals while forking
and restore default signal handlers in the child before execve.

Restoring default signal handlers is required because
execve does not unblock signals, it only restores default
signal handlers.  So we must restore them with sigprocmask
before execve, leaving a window when signal handlers
we control can fire in the child.  Continue ignoring
ignored signals, but reset the rest to defaults.

Similarly, disable pthread cancellation to future-proof our code
in case we start using cancellation; as cancellation is
implemented with signals in glibc.

Signed-off-by: Eric Wong <e@80x24.org>
Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",68,data/crawl/git/hunk_643.cpp,,,data/crawl/git/old_hunk_643.cpp,data/crawl/git/new_hunk_643.cpp,-1,29,,"die_errno(""sigprocmask"");","[""addLog""]","[[], [""die_errno"", ""sigprocmask""]]",[-7126620251742063278],5370,0.0,2
https://github.com/git/git/commit/cb71f8bdb5a105cd5b66142b887989d9addc82d0,24 Apr 2017,"PRItime: introduce a new ""printf format"" for timestamps

Currently, Git's source code treats all timestamps as if they were
unsigned longs. Therefore, it is okay to write ""%lu"" when printing them.

There is a substantial problem with that, though: at least on Windows,
time_t is *larger* than unsigned long, and hence we will want to switch
away from the ill-specified `unsigned long` data type.

So let's introduce the pseudo format ""PRItime"" (currently simply being
defined to ""lu"") to make it easier to change the data type used for
timestamps.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_635.cpp,,,data/crawl/git/old_hunk_635.cpp,data/crawl/git/new_hunk_635.cpp,3,3,"printf(""author-time %lu\n"", ci.author_time);","printf(""author-time %""PRItime""\n"", ci.author_time);","[""updateContent"", ""addContent"", ""addVariable""]","[[""%lu\\n""], [""%"", ""PRItime"", ""\\n""]]",[4633996502033775948],5369,0.0,2
https://github.com/git/git/commit/1e65a982da0e9dd4eac440e82392a8b7c72b3def,27 Apr 2017,"date.c: abort if the system time cannot handle one of our timestamps

We are about to switch to a new data type for time stamps that is
definitely not smaller or equal, but larger or equal to time_t.

So before using the system functions to process or format timestamps,
let's make extra certain that they can handle what we feed them.

Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",17,data/crawl/git/hunk_621.cpp,,,data/crawl/git/old_hunk_621.cpp,data/crawl/git/new_hunk_621.cpp,-1,12,,"die(""Timestamp too large for this system: %""PRItime, time);","[""addLog""]","[[], [""die"", ""Timestamp"", ""too"", ""large"", ""for"", ""this"", ""system"", ""%"", ""PRItime"", ""time""]]",[200632367396451312],5368,0.0,2
https://github.com/git/git/commit/d7e6b6a8dcc8a98a4dcf6bc291f1e68b1acaecae,02 May 2017,"fast-import: convert internal structs to struct object_id

Convert struct tree_entry_ms, struct branch, struct tag, and struct
hash_list to use struct object_id by changing the definition and
applying the following semantic patch, plus the standard object_id
transforms:

@@
struct tree_entry_ms E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tree_entry_ms *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct branch E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct branch *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct tag E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct tag *E1;
@@
- E1->sha1
+ E1->oid.hash

@@
struct hash_list E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct hash_list *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",182,data/crawl/git/hunk_595.cpp,,,data/crawl/git/old_hunk_595.cpp,data/crawl/git/new_hunk_595.cpp,8,9,"fprintf(pack_edges, "" %s"", sha1_to_hex(t->sha1));","fprintf(pack_edges, "" %s"",
						oid_to_hex(&t->oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""t"", ""sha1""], [""oid_to_hex"", ""&t"", ""oid""]]",[11703065645877246527],5367,380880.0,2
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_541.cpp,,,data/crawl/git/old_hunk_541.cpp,data/crawl/git/new_hunk_541.cpp,21,24,"warning(""object %s cannot be read"",
						sha1_to_hex(src_entry->idx.sha1));","warning(""object %s cannot be read"",
						oid_to_hex(&src_entry->idx.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""src_entry"", ""sha1""], [""oid_to_hex"", ""&src_entry"", ""oid""]]",[12587417691150820885],5366,0.0,2
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_541.cpp,,,data/crawl/git/old_hunk_541.cpp,data/crawl/git/new_hunk_541.cpp,6,7,"die(""object %s cannot be read"",
			    sha1_to_hex(trg_entry->idx.sha1));","die(""object %s cannot be read"",
			    oid_to_hex(&trg_entry->idx.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""trg_entry"", ""sha1""], [""oid_to_hex"", ""&trg_entry"", ""oid""]]",[8730258918289841387],5365,0.0,2
https://github.com/git/git/commit/e6a492b7beca9dc8b656f2be3aec23fc1a35e4de,08 May 2017,"pack: convert struct pack_idx_entry to struct object_id

Convert struct pack_idx_entry to use struct object_id by changing the
definition and applying the following semantic patch, plus the standard
object_id transforms:

@@
struct pack_idx_entry E1;
@@
- E1.sha1
+ E1.oid.hash

@@
struct pack_idx_entry *E1;
@@
- E1->sha1
+ E1->oid.hash

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",158,data/crawl/git/hunk_538.cpp,,,data/crawl/git/old_hunk_538.cpp,data/crawl/git/new_hunk_538.cpp,2,2,"warning(""recursive delta detected for object %s"",
			sha1_to_hex(e->idx.sha1));","warning(""recursive delta detected for object %s"",
			oid_to_hex(&e->idx.oid));","[""updateVariable"", ""addVariable""]","[[""sha1_to_hex"", ""e"", ""sha1""], [""oid_to_hex"", ""&e"", ""oid""]]",[11703065647797252321],5364,4320.0,2
https://github.com/git/git/commit/c08397e3aa46fd0f0da29dfe5b257839b9c5d1c8,12 May 2017,"pathspec: remove PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag

Since (ae8d08242 pathspec: pass directory indicator to
match_pathspec_item()) the path matching logic has been able to cope
with submodules without needing to strip off a trailing slash if a path
refers to a submodule.

Since the stripping the trailing slash is no longer necessary, remove
the PATHSPEC_STRIP_SUBMODULE_SLASH_EXPENSIVE flag.  In addition, factor
out the logic which dies if a path decends into a submodule so that it
can still be used as a check after a pathspec struct has been
initialized.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",87,data/crawl/git/hunk_483.cpp,,,data/crawl/git/old_hunk_483.cpp,data/crawl/git/new_hunk_483.cpp,23,-1,"die(_(""Pathspec '%s' is in submodule '%.*s'""),
			    item->original, ce_len, ce->name);",,"[""removeLog""]","[[""die"", ""_"", ""Pathspec"", ""%s"", ""is"", ""in"", ""submodule"", ""%"", ""*s"", ""item"", ""original"", ""ce_len"", ""ce"", ""name""], []]",[30603480383882539853],5363,1440.0,2
https://github.com/git/git/commit/a810ea9945d5959b6cf73d117bc0f20fde58c556,15 May 2017,"convert: split start_multi_file_filter() into two separate functions

To enable future reuse of the filter.<driver>.process infrastructure,
split start_multi_file_filter() into two separate parts.

start_multi_file_filter() will now only contain the generic logic to
manage the creation and tracking of the child process in a hashmap.

start_multi_file_filter_fn() is a protocol specific initialization
function that will negotiate the multi-file-filter interface version
and capabilities.

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",58,data/crawl/git/hunk_471.cpp,,,data/crawl/git/old_hunk_471.cpp,data/crawl/git/new_hunk_471.cpp,-1,27,,"error(""cannot fork to run external filter '%s'"", cmd);","[""addLog""]","[[], [""error"", ""cannot"", ""fork"", ""to"", ""run"", ""external"", ""filter"", ""%s"", ""cmd""]]",[16086558418470959885],5362,151200.0,2
https://github.com/git/git/commit/f514d7d177f7cabbacc3f2cda96ca211266ac2ff,15 May 2017,"convert: rename reusable sub-process functions

Do a mechanical rename of the functions that will become the reusable
sub-process module.

Signed-off-by: Ben Peart <benpeart@microsoft.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_468.cpp,,,data/crawl/git/old_hunk_468.cpp,data/crawl/git/new_hunk_468.cpp,7,7,"error(""cannot fork to run external filter '%s'"", cmd);","error(""cannot fork to run subprocess '%s'"", cmd);","[""updateContent""]","[[""external"", ""filter""], [""subprocess""]]",[-7581375116912952374],5361,0.0,2
https://github.com/git/git/commit/a0103914c228cee430b37faab212d1769e8218a0,22 May 2017,"sha1dc: update from upstream

Update sha1dc from the latest version by the upstream
maintainer[1].

This version includes a commit of mine which allows for replacing the
local modifications done to the upstream files in git.git with macro
definitions to monkeypatch it in place.

It also brings in a change[2] upstream made for the breakage 2.13.0
introduced on SPARC and other platforms that forbid unaligned
access[3].

This means that the code customizations done since the initial import
in commit 28dc98e343 (""sha1dc: add collision-detecting sha1
implementation"", 2017-03-16) can be done purely via Makefile
definitions and by including the content of our own sha1dc_git.[ch] in
sha1dc/sha1.c via a macro.

1. https://github.com/cr-marcstevens/sha1collisiondetection/commit/cc465543b310e5f59a1d534381690052e8509b22
2. https://github.com/cr-marcstevens/sha1collisiondetection/commit/33a694a9ee1b79c24be45f9eab5ac0e1aeeaf271
3. ""Git 2.13.0 segfaults on Solaris SPARC due to DC_SHA1=YesPlease
   being on by default""
   (https://public-inbox.org/git/CACBZZX6nmKK8af0-UpjCKWV4R+hV-uk2xWXVA5U+_UQ3VXU03g@mail.gmail.com/)

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",260,data/crawl/git/hunk_461.cpp,,,data/crawl/git/old_hunk_461.cpp,data/crawl/git/new_hunk_461.cpp,-1,9,,"die(""SHA-1 appears to be part of a collision attack: %s"",
	    sha1_to_hex(hash));","[""addLog""]","[[], [""die"", ""SHA"", ""1"", ""appears"", ""to"", ""be"", ""part"", ""of"", ""a"", ""collision"", ""attack"", ""%s"", ""sha1_to_hex"", ""hash""]]",[20479438428025486282],5360,47520.0,2
https://github.com/git/git/commit/c1da06c6f1a77370341d93d80af027caa6a19a94,23 May 2017,"create_ref_entry(): remove `check_name` option

Only one caller was using it, so move the check to that caller.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",21,data/crawl/git/hunk_442.cpp,,,data/crawl/git/old_hunk_442.cpp,data/crawl/git/new_hunk_442.cpp,-1,5,,"die(""Reference has invalid format: '%s'"", refname);","[""addLog""]","[[], [""die"", ""Reference"", ""has"", ""invalid"", ""format"", ""%s"", ""refname""]]",[-354143934257542070],5359,25920.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,98,-1,"die(_(""cannot read blob %s for path %s""),
			    oid_to_hex(&o->blob_oid),
			    path);",,"[""removeLog""]","[[""die"", ""_"", ""cannot"", ""read"", ""blob"", ""%s"", ""for"", ""path"", ""%s"", ""oid_to_hex"", ""&o"", ""blob_oid"", ""path""], []]",[1291375799785715914],5358,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,87,-1,"die(_(""no such path %s in %s""), path, final_commit_name);",,"[""removeLog""]","[[""die"", ""_"", ""no"", ""such"", ""path"", ""%s"", ""in"", ""%s"", ""path"", ""final_commit_name""], []]",[-12538114078231254675],5357,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,76,-1,"die(_(""--reverse --first-parent together require range along first-parent chain""));",,"[""removeLog""]","[[""die"", ""_"", ""reverse"", ""first"", ""parent"", ""together"", ""require"", ""range"", ""along"", ""first"", ""parent"", ""chain""], []]",[-3578294121953777376],5356,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,71,-1,"die(""BUG: not unique item in first-parent chain"");",,"[""removeLog""]","[[""die"", ""BUG"", ""not"", ""unique"", ""item"", ""in"", ""first"", ""parent"", ""chain""], []]",[5086867976014952884],5355,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,49,-1,"die(_(""--reverse and --first-parent together require specified latest commit""));",,"[""removeLog""]","[[""die"", ""_"", ""reverse"", ""and"", ""first"", ""parent"", ""together"", ""require"", ""specified"", ""latest"", ""commit""], []]",[447505310699186600],5354,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,29,-1,"die(_(""cannot use --contents with final commit object name""));",,"[""removeLog""]","[[""die"", ""_"", ""cannot"", ""use"", ""contents"", ""with"", ""final"", ""commit"", ""object"", ""name""], []]",[7382967633732304868],5353,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_424.cpp,,,data/crawl/git/old_hunk_424.cpp,data/crawl/git/new_hunk_424.cpp,18,-1,"die(_(""--contents and --reverse do not blend well.""));",,"[""removeLog""]","[[""die"", ""_"", ""contents"", ""and"", ""reverse"", ""do"", ""not"", ""blend"", ""well""], []]",[478767606341805109],5352,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_423.cpp,,,data/crawl/git/old_hunk_423.cpp,data/crawl/git/new_hunk_423.cpp,16,-1,"die(""Non commit %s?"", revs->pending.objects[i].name);",,"[""removeLog""]","[[""die"", ""Non"", ""commit"", ""%s"", ""revs"", ""pending"", ""objects[i]"", ""name""], []]",[7659942789565175390],5351,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,230,,"die(_(""cannot read blob %s for path %s""),
			    oid_to_hex(&o->blob_oid),
			    path);","[""addLog""]","[[], [""die"", ""_"", ""cannot"", ""read"", ""blob"", ""%s"", ""for"", ""path"", ""%s"", ""oid_to_hex"", ""&o"", ""blob_oid"", ""path""]]",[-1291375799785715914],5350,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,219,,"die(_(""no such path %s in %s""), path, final_commit_name);","[""addLog""]","[[], [""die"", ""_"", ""no"", ""such"", ""path"", ""%s"", ""in"", ""%s"", ""path"", ""final_commit_name""]]",[12538114078231254675],5349,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,208,,"die(_(""--reverse --first-parent together require range along first-parent chain""));","[""addLog""]","[[], [""die"", ""_"", ""reverse"", ""first"", ""parent"", ""together"", ""require"", ""range"", ""along"", ""first"", ""parent"", ""chain""]]",[3578294121953777376],5348,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,181,,"die(_(""--reverse and --first-parent together require specified latest commit""));","[""addLog""]","[[], [""die"", ""_"", ""reverse"", ""and"", ""first"", ""parent"", ""together"", ""require"", ""specified"", ""latest"", ""commit""]]",[-447505310699186600],5347,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,161,,"die(_(""cannot use --contents with final commit object name""));","[""addLog""]","[[], [""die"", ""_"", ""cannot"", ""use"", ""contents"", ""with"", ""final"", ""commit"", ""object"", ""name""]]",[-7382967633732304868],5346,0.0,2
https://github.com/git/git/commit/09002f1b31482dfbd0f471cd3614d542ea7a77a4,25 May 2017,"blame: move scoreboard setup to libgit

Signed-off-by: Jeff Smith <whydoubt@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",565,data/crawl/git/hunk_422.cpp,,,data/crawl/git/old_hunk_422.cpp,data/crawl/git/new_hunk_422.cpp,-1,150,,"die(_(""--contents and --reverse do not blend well.""));","[""addLog""]","[[], [""die"", ""_"", ""contents"", ""and"", ""reverse"", ""do"", ""not"", ""blend"", ""well""]]",[-478767606341805109],5345,0.0,2
https://github.com/git/git/commit/23a9e0712d76a63c5af1caeb816943f466f0300e,26 May 2017,"use xfopen() in more places

xfopen()

 - provides error details
 - explains error on reading, or writing, or whatever operation
 - has l10n support
 - prints file name in the error

Some of these are missing in the places that are replaced with xfopen(),
which is a clear win. In some other places, it's just less code (not as
clearly a win as the previous case but still is).

The only slight regresssion is in remote-testsvn, where we don't report
the file class (marks files) in the error messages anymore. But since
this is a _test_ svn remote transport, I'm not too concerned.

Signed-off-by: Nguyễn Thái Ngọc Duy <pclouds@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",52,data/crawl/git/hunk_416.cpp,,,data/crawl/git/old_hunk_416.cpp,data/crawl/git/new_hunk_416.cpp,4,-1,"die_errno(_(""could not open '%s' for reading""), filename);",,"[""removeLog""]","[[""die_errno"", ""_"", ""could"", ""not"", ""open"", ""%s"", ""for"", ""reading"", ""filename""], []]",[8010569130806384168],5344,545760.0,2
https://github.com/git/git/commit/bb246590a1b648ac23f6a22d1d9e119129ba2f03,30 May 2017,"remote-{ext,fd}: print usage message on invalid arguments

We just say ""Expected two arguments"" when we get a different
number of arguments, but we can be slightly friendlier.
People shouldn't generally be running remote helpers
themselves, but curious users might say ""git remote-ext -h"".

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",10,data/crawl/git/hunk_396.cpp,,,data/crawl/git/old_hunk_396.cpp,data/crawl/git/new_hunk_396.cpp,3,3,"die(""Expected two arguments"");",usage(usage_msg);,"[""updateLog"", ""removeContent"", ""addVariable""]","[[""die"", ""Expected"", ""two"", ""arguments""], [""usage"", ""usage_msg""]]",[-12063045656158584193],5343,0.0,2
https://github.com/git/git/commit/177409e5897988f03e0c8111c94db6ea0466b138,02 Jun 2017,"send-email: check for repo before invoking hook

Unless --no-validate is passed, send-email will invoke
$repo->repo_path() in its search for a validate hook regardless of
whether a Git repo is actually present.  Teach send-email to first check
for repo existence.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",40,data/crawl/git/hunk_391.cpp,,,data/crawl/git/old_hunk_391.cpp,data/crawl/git/new_hunk_391.cpp,-1,12,,"die(""chdir: $!"");","[""addLog""]","[[], [""die"", ""chdir""]]",[1018654449685725644],5342,12240.0,2
https://github.com/git/git/commit/e67a57fc5187f93ced9631edf80fc09eefb3fed9,15 Jun 2017,"config: create config.h

Move all config related declarations from cache.h to a new config.h
header file.  This makes cache.h smaller and allows for the opportunity
in a following patch to only include config.h when needed.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",384,data/crawl/git/hunk_376.cpp,,,data/crawl/git/old_hunk_376.cpp,data/crawl/git/new_hunk_376.cpp,-1,190,,"(format(printf, 2, 3);","[""addLog""]","[[], [""format"", ""printf"", ""2"", ""3""]]",[10117892943833313091],5341,2004480.0,2
https://github.com/git/git/commit/f20e7c1ea2459d9b8c12f8ed1f1546665841b643,02 Aug 2017,"submodule: remove submodule.fetchjobs from submodule-config parsing

The '.gitmodules' file should only contain information pertinent to
configuring individual submodules (name to path mapping, URL where to
obtain the submodule, etc.) while other configuration like the number of
jobs to use when fetching submodules should be a part of the
repository's config.

Remove the 'submodule.fetchjobs' configuration option from the general
submodule-config parsing and instead rely on using the
'config_from_gitmodules()' in order to maintain backwards compatibility
with this config being placed in the '.gitmodules' file.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",61,data/crawl/git/hunk_345.cpp,,,data/crawl/git/old_hunk_345.cpp,data/crawl/git/new_hunk_345.cpp,-1,7,,"die(_(""negative values not allowed for submodule.fetchjobs""));","[""addLog""]","[[], [""die"", ""_"", ""negative"", ""values"", ""not"", ""allowed"", ""for"", ""submodule"", ""fetchjobs""]]",[-6906952615900604143],5340,373680.0,2
https://github.com/git/git/commit/3836d88ae575cf2321fb17296f748c0bb35ba268,23 Aug 2017,"pack: move pack-closing functions

The function close_pack_fd() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_304.cpp,,,data/crawl/git/old_hunk_304.cpp,data/crawl/git/new_hunk_304.cpp,-1,53,,"die(""BUG: want to close pack marked 'do-not-close'"");","[""addLog""]","[[], [""die"", ""BUG"", ""want"", ""to"", ""close"", ""pack"", ""marked"", ""do"", ""not"", ""close""]]",[21108329749737689061],5339,493920.0,2
https://github.com/git/git/commit/3836d88ae575cf2321fb17296f748c0bb35ba268,23 Aug 2017,"pack: move pack-closing functions

The function close_pack_fd() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",133,data/crawl/git/hunk_304.cpp,,,data/crawl/git/old_hunk_304.cpp,data/crawl/git/new_hunk_304.cpp,-1,10,,"die(""pack '%s' still has open windows to it"",
			    p->pack_name);","[""addLog""]","[[], [""die"", ""pack"", ""%s"", ""still"", ""has"", ""open"", ""windows"", ""to"", ""it"", ""p"", ""pack_name""]]",[4839713977149441857],5338,2523600.0,2
https://github.com/git/git/commit/84f80ad5e11d29b61570269a25cf447f34c5aeba,23 Aug 2017,"pack: move use_pack()

The function open_packed_git() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",604,data/crawl/git/hunk_303.cpp,,,data/crawl/git/old_hunk_303.cpp,data/crawl/git/new_hunk_303.cpp,155,-1,"die(""packfile %s cannot be accessed"", p->pack_name);",,"[""removeLog""]","[[""die"", ""packfile"", ""%s"", ""cannot"", ""be"", ""accessed"", ""p"", ""pack_name""], []]",[3986520777584758644],5337,0.0,2
https://github.com/git/git/commit/84f80ad5e11d29b61570269a25cf447f34c5aeba,23 Aug 2017,"pack: move use_pack()

The function open_packed_git() needs to be temporarily made global. Its
scope will be restored to static in a subsequent commit.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",604,data/crawl/git/hunk_302.cpp,,,data/crawl/git/old_hunk_302.cpp,data/crawl/git/new_hunk_302.cpp,-1,131,,"error(""packfile %s index unavailable"", p->pack_name);","[""addLog""]","[[], [""error"", ""packfile"", ""%s"", ""index"", ""unavailable"", ""p"", ""pack_name""]]",[-1703578444572549037],5336,2693520.0,2
https://github.com/git/git/commit/32b42e152fcc453273fadb5a7d639e4e9b506783,23 Aug 2017,"pack: move unpack_object_header_buffer()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",53,data/crawl/git/hunk_300.cpp,,,data/crawl/git/old_hunk_300.cpp,data/crawl/git/new_hunk_300.cpp,-1,17,,"error(""bad object header"");","[""addLog""]","[[], [""error"", ""bad"", ""object"", ""header""]]",[-2299761978805054779],5335,2315520.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_296.cpp,,,data/crawl/git/old_hunk_296.cpp,data/crawl/git/new_hunk_296.cpp,585,-1,"error(""failed to unpack compressed delta ""
			      ""at offset %""PRIuMAX"" from %s"",
			      (uintmax_t)curpos, p->pack_name);",,"[""removeLog""]","[[""error"", ""failed"", ""to"", ""unpack"", ""compressed"", ""delta"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""], []]",[-5603733488353824519],5334,1159200.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_296.cpp,,,data/crawl/git/old_hunk_296.cpp,data/crawl/git/new_hunk_296.cpp,489,-1,"error(""failed to validate delta base reference ""
			      ""at offset %""PRIuMAX"" from %s"",
			      (uintmax_t)curpos, p->pack_name);",,"[""removeLog""]","[[""error"", ""failed"", ""to"", ""validate"", ""delta"", ""base"", ""reference"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""], []]",[-13954492206276313609],5333,1159200.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_296.cpp,,,data/crawl/git/old_hunk_296.cpp,data/crawl/git/new_hunk_296.cpp,138,-1,"error(""unknown object type %i at offset %""PRIuMAX"" in %s"",
		      type, (uintmax_t)obj_offset, p->pack_name);",,"[""removeLog""]","[[""error"", ""unknown"", ""object"", ""type"", ""%i"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""in"", ""%s"", ""type"", ""uintmax_t"", ""obj_offset"", ""p"", ""pack_name""], []]",[-11258535130415991883],5332,0.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_295.cpp,,,data/crawl/git/old_hunk_295.cpp,data/crawl/git/new_hunk_295.cpp,-1,601,,"error(""failed to read delta base object %s""
				      "" at offset %""PRIuMAX"" from %s"",
				      sha1_to_hex(base_sha1), (uintmax_t)obj_offset,
				      p->pack_name);","[""addLog""]","[[], [""error"", ""failed"", ""to"", ""read"", ""delta"", ""base"", ""object"", ""%s"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""sha1_to_hex"", ""base_sha1"", ""uintmax_t"", ""obj_offset"", ""p"", ""pack_name""]]",[4531124748786497505],5331,1159200.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_295.cpp,,,data/crawl/git/old_hunk_295.cpp,data/crawl/git/new_hunk_295.cpp,-1,526,,"error(""failed to validate delta base reference ""
			      ""at offset %""PRIuMAX"" from %s"",
			      (uintmax_t)curpos, p->pack_name);","[""addLog""]","[[], [""error"", ""failed"", ""to"", ""validate"", ""delta"", ""base"", ""reference"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""from"", ""%s"", ""uintmax_t"", ""curpos"", ""p"", ""pack_name""]]",[13954492206276313609],5330,1159200.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_295.cpp,,,data/crawl/git/old_hunk_295.cpp,data/crawl/git/new_hunk_295.cpp,-1,512,,"error(""bad packed object CRC for %s"",
				      sha1_to_hex(sha1));","[""addLog""]","[[], [""error"", ""bad"", ""packed"", ""object"", ""CRC"", ""for"", ""%s"", ""sha1_to_hex"", ""sha1""]]",[-12875605900424775910],5329,2315520.0,2
https://github.com/git/git/commit/f1d8130be0a7229b215b76eac54c561a0124bc99,23 Aug 2017,"pack: move clear_delta_base_cache(), packed_object_info(), unpack_entry()

Both sha1_file.c and packfile.c now need read_object(), so a copy of
read_object() was created in packfile.c.

This patch makes both mark_bad_packed_object() and has_packed_and_bad()
global. Unlike most of the other patches in this series, these 2
functions need to remain global.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",1355,data/crawl/git/hunk_295.cpp,,,data/crawl/git/old_hunk_295.cpp,data/crawl/git/new_hunk_295.cpp,-1,164,,"error(""unknown object type %i at offset %""PRIuMAX"" in %s"",
		      type, (uintmax_t)obj_offset, p->pack_name);","[""addLog""]","[[], [""error"", ""unknown"", ""object"", ""type"", ""%i"", ""at"", ""offset"", ""%"", ""PRIuMAX"", ""in"", ""%s"", ""type"", ""uintmax_t"", ""obj_offset"", ""p"", ""pack_name""]]",[11258535130415991883],5328,0.0,2
https://github.com/git/git/commit/a2551953b9619b285128c1e9cf35120fb7555d8f,23 Aug 2017,"pack: move find_pack_entry_one(), is_pack_valid()

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",166,data/crawl/git/hunk_291.cpp,,,data/crawl/git/old_hunk_291.cpp,data/crawl/git/new_hunk_291.cpp,-1,44,,"printf(""lo %u hi %u rg %u mi %u\n"",
			       lo, hi, hi - lo, mi);","[""addLog""]","[[], [""printf"", ""lo"", ""%u"", ""hi"", ""%u"", ""rg"", ""%u"", ""mi"", ""%u\\n"", ""lo"", ""hi"", ""hi"", ""lo"", ""mi""]]",[13520485624035518394],5327,2464560.0,2
https://github.com/git/git/commit/2fb330ca7238088eea5c1926380feb187f4867bc,08 Sep 2017,"packed_delete_refs(): implement method

Implement `packed_delete_refs()` using a reference transaction. This
means that `files_delete_refs()` can use `refs_delete_refs()` instead
of `repack_without_refs()` to delete any packed references, decreasing
the coupling between the classes.

Signed-off-by: Michael Haggerty <mhagger@alum.mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",47,data/crawl/git/hunk_250.cpp,,,data/crawl/git/old_hunk_250.cpp,data/crawl/git/new_hunk_250.cpp,-1,38,,"error(_(""could not delete reference %s: %s""),
			      refnames->items[0].string, err.buf);","[""addLog""]","[[], [""error"", ""_"", ""could"", ""not"", ""delete"", ""reference"", ""%s"", ""%s"", ""refnames"", ""items[0]"", ""string"", ""err"", ""buf""]]",[17611366290701165846],5326,582480.0,2
https://github.com/git/git/commit/6d058c882643dc45c8d708be98e86c38f25511a9,06 Oct 2017,"apply: move lockfile into `apply_state`

We have two users of `struct apply_state` and the related functionality
in apply.c. Each user sets up its `apply_state` by handing over a
pointer to its static `lock_file`. (Before 076aa2cbd (tempfile:
auto-allocate tempfiles on heap, 2017-09-05), we could never free
lockfiles, so making them static was a reasonable approach.)

Other than that, they never directly access their `lock_file`s, which
are instead handled by the functionality in apply.c.

To make life easier for the caller and to make it less tempting for a
future caller to mess with the lock, make apply.c fully responsible for
setting up the `lock_file`. As mentioned above, it is now safe to free a
`lock_file`, so we can make the `struct apply_state` contain an actual
`struct lock_file` instead of a pointer to one.

The user in builtin/apply.c is rather simple. For builtin/am.c, we might
worry that the lock state is actually meant to be inherited across
calls. But the lock is only taken as `apply_all_patches()` executes, and
code inspection shows that it will always be released.

Alternatively, we can observe that the lock itself is never queried
directly. When we decide whether we should lock, we check a related
variable `newfd`. That variable is not inherited, so from the point of
view of apply.c, the state machine really is reset with each call to
`init_apply_state()`. (It would be a bug if `newfd` and the lock status
were not in sync. The duplication of information in `newfd` and the lock
will be addressed in the next patch.)

Signed-off-by: Martin Ågren <martin.agren@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",26,data/crawl/git/hunk_207.cpp,,,data/crawl/git/old_hunk_207.cpp,data/crawl/git/new_hunk_207.cpp,4,-1,"error(""BUG: state->lock_file should not be NULL"");",,"[""removeLog""]","[[""error"", ""BUG"", ""state"", ""lock_file"", ""should"", ""not"", ""be"", ""NULL""], []]",[-23999971356498703020],5325,303120.0,2
https://github.com/git/git/commit/89f3bbdd3b1f46a5747aa5618b7742f7b3f2adef,16 Oct 2017,"refs: update ref transactions to use struct object_id

Update the ref transaction code to use struct object_id.  Remove one
NULL pointer check which was previously inserted around a dereference;
since we now pass a pointer to struct object_id directly through, the
code we're calling handles this for us.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",140,data/crawl/git/hunk_189.cpp,,,data/crawl/git/old_hunk_189.cpp,data/crawl/git/new_hunk_189.cpp,29,29,"die(""BUG: delete called with old_sha1 set to zeros"");","die(""BUG: delete called with old_oid set to zeros"");","[""updateContent""]","[[""old_sha1""], [""old_oid""]]",[880051635858279184],5324,0.0,2
https://github.com/git/git/commit/188960b4d68e0b77e31481592b86306a9ce37632,16 Oct 2017,"builtin/pack-objects: convert to struct object_id

This is one of the last unconverted callers to peel_ref.  While we're
fixing that, convert the rest of the file, since it will need to be
converted at some point anyway.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",135,data/crawl/git/hunk_175.cpp,,,data/crawl/git/old_hunk_175.cpp,data/crawl/git/new_hunk_175.cpp,4,4,"die(""expected edge sha1, got garbage:\n %s"",
				    line);","die(""expected edge object ID, got garbage:\n %s"",
				    line);","[""updateContent""]","[[""sha1""], [""object"", ""ID""]]",[-3230451031753780347],5323,0.0,2
https://github.com/git/git/commit/e47c6cafcb5a2223ea3de3d0b65f668f717cb2ab,24 Nov 2017,"commit: move print_commit_summary() to libgit

Move print_commit_summary() from builtin/commit.c to sequencer.c so it
can be shared with other commands. The function is modified by
changing the last argument to a flag so callers can specify whether
they want to show the author date in addition to specifying if this is
an initial commit.

If the sequencer dies in print_commit_summary() (which can only happen
when cherry-picking or reverting) then neither the todo list nor the
abort safety file are updated to reflect the commit that was just
made. print_commit_summary() can die if:

 - The commit that was just created cannot be found or parsed.

 - HEAD cannot be resolved either because some other process is
   updating it (which is bad news in the middle of a cherry-pick) or
   because it is corrupt.

 - log_tree_commit() cannot read some objects.

In all those cases dying will leave the sequencer in a sane state for
aborting; 'git cherry-pick --abort' will rewind HEAD to the last
successful commit before there was a problem with HEAD or the object
database. If the user somehow fixes the problem and runs 'git
cherry-pick --continue' then the sequencer will try and pick the same
commit again which may or may not be what the user wants depending on
what caused print_commit_summary() to die. If print_commit_summary()
returned an error instead then update_abort_safety_file() would try to
resolve HEAD which may or may not be successful. If it is successful
then running 'git rebase --abort' would not rewind HEAD to the last
successful commit which is not what we want.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",252,data/crawl/git/hunk_153.cpp,,,data/crawl/git/old_hunk_153.cpp,data/crawl/git/new_hunk_153.cpp,-1,105,,"die_errno(_(""unable to resolve HEAD after creating commit""));","[""addLog""]","[[], [""die_errno"", ""_"", ""unable"", ""to"", ""resolve"", ""HEAD"", ""after"", ""creating"", ""commit""]]",[8614044904745424158],5322,24480.0,2
https://github.com/git/git/commit/356ee4659bb551cd9464b317d691827276752c2d,24 Nov 2017,"sequencer: try to commit without forking 'git commit'

If the commit message does not need to be edited then create the
commit without forking 'git commit'. Taking the best time of ten runs
with a warm cache this reduces the time taken to cherry-pick 10
commits by 27% (from 282ms to 204ms), and the time taken by 'git
rebase --continue' to pick 10 commits by 45% (from 386ms to 212ms) on
my computer running linux. Some of greater saving for rebase is
because it no longer wastes time creating the commit summary just to
throw it away.

The code to create the commit is based on builtin/commit.c. It is
simplified as it doesn't have to deal with merges and modified so that
it does not die but returns an error to make sure the sequencer exits
cleanly, as it would when forking 'git commit'

Even when not forking 'git commit' the commit message is written to a
file and CHERRY_PICK_HEAD is created unnecessarily. This could be
eliminated in future. I hacked up a version that does not write these
files and just passed an strbuf (with the wrong message for fixup and
squash commands) to do_commit() but I couldn't measure any significant
time difference when running cherry-pick or rebase. I think
eliminating the writes properly for rebase would require a bit of
effort as the code would need to be restructured.

Signed-off-by: Phillip Wood <phillip.wood@dunelm.org.uk>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",178,data/crawl/git/hunk_150.cpp,,,data/crawl/git/old_hunk_150.cpp,data/crawl/git/new_hunk_150.cpp,-1,69,,"error(_(""unable to parse commit author""));","[""addLog""]","[[], [""error"", ""_"", ""unable"", ""to"", ""parse"", ""commit"", ""author""]]",[18069910978467355497],5321,0.0,2
https://github.com/git/git/commit/4b33e60201c12f3a68441807444e3726853a3960,30 Jan 2018,"dir: convert struct sha1_stat to use object_id

Convert the declaration of struct sha1_stat. Adjust all usages of this
struct and replace hash{clr,cmp,cpy} with oid{clr,cmp,cpy} wherever
possible.  Rename it to struct oid_stat.

Rename static function load_sha1_stat to load_oid_stat.

Remove macro EMPTY_BLOB_SHA1_BIN, as it's no longer used.

Signed-off-by: Patryk Obara <patryk.obara@gmail.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",122,data/crawl/git/hunk_139.cpp,,,data/crawl/git/old_hunk_139.cpp,data/crawl/git/new_hunk_139.cpp,3,3,sha1_to_hex(uc->ss_info_exclude.sha1);,oid_to_hex(&uc->ss_info_exclude.oid);,"[""updateVariable"", ""updateLog"", ""addVariable""]","[[""sha1_to_hex"", ""uc"", ""sha1""], [""oid_to_hex"", ""&uc"", ""oid""]]",[5786604213657616871],5320,0.0,2
https://github.com/git/git/commit/ccc12e06764e551c86ff458b16db35958957645f,02 Feb 2018,"pack-check: convert various uses of SHA-1 to abstract forms

Convert various explicit calls to use SHA-1 functions and constants to
references to the_hash_algo.  Make several strings more generic with
respect to the hash algorithm used.

Signed-off-by: brian m. carlson <sandals@crustytoothpaste.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",32,data/crawl/git/hunk_113.cpp,,,data/crawl/git/old_hunk_113.cpp,data/crawl/git/new_hunk_113.cpp,7,7,"error(""Packfile index for %s SHA1 mismatch"",
			    p->pack_name);","error(""Packfile index for %s hash mismatch"",
			    p->pack_name);","[""updateContent""]","[[""SHA1""], [""hash""]]",[9639971785104644833],5319,0.0,2
https://github.com/git/git/commit/bc9d4dc5b07c05c7b26a4e781b7538db7c775fc3,08 Feb 2018,"correct error messages for NULL packet_read_line()

The packet_read_line() function dies if it gets an
unexpected EOF. It only returns NULL if we get a flush
packet (or technically, a zero-length ""0004"" packet, but
nobody is supposed to send those, and they are
indistinguishable from a flush in this interface).

Let's correct error messages which claim an unexpected EOF;
it's really an unexpected flush packet.

While we're here, let's also check ""!line"" instead of
""!len"" in the second case. The two events should always
coincide, but checking ""!line"" makes it more obvious that we
are not about to dereference NULL.

Signed-off-by: Jeff King <peff@peff.net>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",6,data/crawl/git/hunk_106.cpp,,,data/crawl/git/old_hunk_106.cpp,data/crawl/git/new_hunk_106.cpp,3,3,"die(_(""git archive: expected ACK/NAK, got EOF""));","die(_(""git archive: expected ACK/NAK, got a flush packet""));","[""updateContent""]","[[""EOF""], [""a"", ""flush"", ""packet""]]",[1698334937504501024],5318,0.0,2
https://github.com/git/git/commit/4669e7d68ec8fb6ff3572a1193ae75ae2094b8e6,15 Feb 2018,"packfile: remove GIT_DEBUG_LOOKUP log statements

In commit 628522ec1439 (""sha1-lookup: more memory efficient search in
sorted list of SHA-1"", 2008-04-09), a different algorithm for searching
a sorted list was introduced, together with a set of log statements
guarded by GIT_DEBUG_LOOKUP that are invoked both when using that
algorithm and when using the existing binary search. Those log
statements was meant for experiments and debugging, but with the removal
of the aforementioned different algorithm in commit f1068efefe6d
(""sha1_file: drop experimental GIT_USE_LOOKUP search"", 2017-08-09),
those log statements are probably no longer necessary.

Remove those statements.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_22.cpp,,,data/crawl/git/old_hunk_22.cpp,data/crawl/git/new_hunk_22.cpp,12,-1,"printf(""lo %u hi %u rg %u mi %u\n"",
			       lo, hi, hi - lo, mi);",,"[""removeLog""]","[[""printf"", ""lo"", ""%u"", ""hi"", ""%u"", ""rg"", ""%u"", ""mi"", ""%u\\n"", ""lo"", ""hi"", ""hi"", ""lo"", ""mi""], []]",[-13520485624035518394],5317,126720.0,2
https://github.com/git/git/commit/4669e7d68ec8fb6ff3572a1193ae75ae2094b8e6,15 Feb 2018,"packfile: remove GIT_DEBUG_LOOKUP log statements

In commit 628522ec1439 (""sha1-lookup: more memory efficient search in
sorted list of SHA-1"", 2008-04-09), a different algorithm for searching
a sorted list was introduced, together with a set of log statements
guarded by GIT_DEBUG_LOOKUP that are invoked both when using that
algorithm and when using the existing binary search. Those log
statements was meant for experiments and debugging, but with the removal
of the aforementioned different algorithm in commit f1068efefe6d
(""sha1_file: drop experimental GIT_USE_LOOKUP search"", 2017-08-09),
those log statements are probably no longer necessary.

Remove those statements.

Signed-off-by: Jonathan Tan <jonathantanmy@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",11,data/crawl/git/hunk_22.cpp,,,data/crawl/git/old_hunk_22.cpp,data/crawl/git/new_hunk_22.cpp,4,-1,"printf(""%02x%02x%02x... lo %u hi %u nr %""PRIu32""\n"",
		       sha1[0], sha1[1], sha1[2], lo, hi, p->num_objects);",,"[""removeLog""]","[[""printf"", ""%02x%02x%02x"", ""lo"", ""%u"", ""hi"", ""%u"", ""nr"", ""%"", ""PRIu32"", ""\\n"", ""sha1[0]"", ""sha1[1]"", ""sha1[2]"", ""lo"", ""hi"", ""p"", ""num_objects""], []]",[-1152435954247837823],5316,126720.0,2
https://github.com/git/git/commit/b537e0b1cfe9b1e52fad2623c8de0de40ab12beb,22 Feb 2018,"remote: rename 'new' variables

Rename C++ keyword in order to bring the codebase closer to being able
to be compiled with a C++ compiler.

Signed-off-by: Brandon Williams <bmwill@google.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",66,data/crawl/git/hunk_10.cpp,,,data/crawl/git/old_hunk_10.cpp,data/crawl/git/new_hunk_10.cpp,16,16,"die(_(""remote %s already exists.""), rename.new);","die(_(""remote %s already exists.""), rename.new_name);","[""removeVariable"", ""addVariable""]","[[""new""], [""new_name""]]",[-638607553489211481],5315,0.0,2
https://github.com/git/git/commit/878056005e94f5fea00c9ff8999f30a99bf10cae,22 Feb 2018,"sequencer: factor out strbuf_read_file_or_whine()

Reduce code duplication by factoring out a function that reads an entire
file into a strbuf, or reports errors on stderr if something goes wrong.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_3.cpp,,,data/crawl/git/old_hunk_3.cpp,data/crawl/git/new_hunk_3.cpp,9,-1,"error(_(""could not read '%s'.""), todo_file);",,"[""removeLog""]","[[""error"", ""_"", ""could"", ""not"", ""read"", ""%s"", ""todo_file""], []]",[-18762437888396338021],5314,0.0,2
https://github.com/git/git/commit/878056005e94f5fea00c9ff8999f30a99bf10cae,22 Feb 2018,"sequencer: factor out strbuf_read_file_or_whine()

Reduce code duplication by factoring out a function that reads an entire
file into a strbuf, or reports errors on stderr if something goes wrong.

Signed-off-by: Rene Scharfe <l.s.r@web.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>",74,data/crawl/git/hunk_1.cpp,,,data/crawl/git/old_hunk_1.cpp,data/crawl/git/new_hunk_1.cpp,13,-1,"error(_(""could not read '%s'.""), todo_file.buf);",,"[""removeLog""]","[[""error"", ""_"", ""could"", ""not"", ""read"", ""%s"", ""todo_file"", ""buf""], []]",[-19089462105222578881],5313,0.0,2
